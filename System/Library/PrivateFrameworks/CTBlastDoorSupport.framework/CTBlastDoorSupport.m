void std::__optional_storage_base<ctb::CPIMMessage,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::CPIMMessage,false>>(ctb::CPIMMessage *this, uint64_t a2)
{
  uint64_t vars8;

  if (*((unsigned __int8 *)this + 168) == *(unsigned __int8 *)(a2 + 168))
  {
    if (*((unsigned char *)this + 168))
    {
      ctb::CPIMMessage::operator=((uint64_t)this, (long long *)a2);
    }
  }
  else if (*((unsigned char *)this + 168))
  {
    ctb::CPIMMessage::~CPIMMessage((void **)this);
    *((unsigned char *)this + 168) = 0;
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::CPIMMessage,ctb::CPIMMessage,ctb::CPIMMessage*>((uint64_t)this, (long long *)a2);
    *((unsigned char *)this + 168) = 1;
  }
}

void __clang_call_terminate(void *a1)
{
}

uint64_t ctb::CPIMMessage::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v7);
  }
  long long v8 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)v7 = v8;
  *((unsigned char *)a2 + 71) = 0;
  *((unsigned char *)a2 + 48) = 0;
  v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v9);
  }
  long long v10 = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(_OWORD *)v9 = v10;
  *((unsigned char *)a2 + 95) = 0;
  *((unsigned char *)a2 + 72) = 0;
  v11 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v11);
  }
  long long v12 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)v11 = v12;
  *((unsigned char *)a2 + 119) = 0;
  *((unsigned char *)a2 + 96) = 0;
  std::vector<ctb::CPIMNamespace>::__vdeallocate((void **)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(long long *)((char *)a2 + 120);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  std::vector<ctb::CPIMEncapsulatedMessage>::__vdeallocate((void **)(a1 + 144));
  *(_OWORD *)(a1 + 144) = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 19) = 0;
  *((void *)a2 + 20) = 0;
  return a1;
}

void std::vector<ctb::CPIMNamespace>::__vdeallocate(void **a1)
{
  v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 48;
        std::__destroy_at[abi:ne180100]<ctb::CPIMNamespace,0>(v3);
      }
      while ((void *)v3 != v1);
      long long v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__destroy_at[abi:ne180100]<ctb::CPIMNamespace,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::vector<ctb::CPIMEncapsulatedMessage>::__vdeallocate(void **a1)
{
  v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 384;
        std::__destroy_at[abi:ne180100]<ctb::CPIMEncapsulatedMessage,0>(v3);
      }
      while ((void *)v3 != v1);
      long long v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__destroy_at[abi:ne180100]<ctb::CPIMEncapsulatedMessage,0>(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::GeoPushLocation,ctb::CPMGroupManagement,ctb::FileTransferDescriptor,ctb::chatbot::Message,ctb::IMCompositionIndication,ctb::IMDispositionNotification,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 32);
  if (*(char *)(a1 + 23) < 0)
  {
    v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::GeoPushLocation,ctb::CPMGroupManagement,ctb::FileTransferDescriptor,ctb::chatbot::Message,ctb::IMCompositionIndication,ctb::IMDispositionNotification,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 344);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26FD32188[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 344) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SD_SE_SF_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SD_SE_SF_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  std::__optional_destruct_base<ctb::FileTransferDescriptor::FileDescriptor,false>::~__optional_destruct_base[abi:ne180100](a2 + 144);
  if (*(char *)(a2 + 127) < 0) {
    operator delete(*(void **)(a2 + 104));
  }
  if (*(char *)(a2 + 103) < 0) {
    operator delete(*(void **)(a2 + 80));
  }
  if (*(char *)(a2 + 79) < 0) {
    operator delete(*(void **)(a2 + 56));
  }
  if (*(unsigned char *)(a2 + 48) && *(char *)(a2 + 47) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 24);
    operator delete(v3);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SD_SE_SF_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 336)) {
    return std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::~__dtor(a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SD_SE_SF_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 8);
    operator delete(v3);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SD_SE_SF_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 8);
    operator delete(v3);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SD_SE_SF_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

uint64_t std::__optional_destruct_base<ctb::FileTransferDescriptor::FileDescriptor,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144))
  {
    if (*(char *)(a1 + 127) < 0) {
      operator delete(*(void **)(a1 + 104));
    }
    if (*(char *)(a1 + 103) < 0) {
      operator delete(*(void **)(a1 + 80));
    }
    if (*(char *)(a1 + 79) < 0) {
      operator delete(*(void **)(a1 + 56));
    }
    if (*(unsigned char *)(a1 + 48) && *(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
  }
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 328);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26FD321C0[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 328) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 320))
  {
    uint64_t v3 = (void **)(a2 + 296);
    std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (*(unsigned char *)(a2 + 288) && *(char *)(a2 + 287) < 0) {
    operator delete(*(void **)(a2 + 264));
  }
  if (*(unsigned char *)(a2 + 256) && *(char *)(a2 + 255) < 0) {
    operator delete(*(void **)(a2 + 232));
  }
  std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::~__optional_destruct_base[abi:ne180100](a2 + 48);
  if (*(unsigned char *)(a2 + 40))
  {
    if (*(char *)(a2 + 39) < 0) {
      operator delete(*(void **)(a2 + 16));
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 48);
  std::vector<ctb::chatbot::CardCarouselContent>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(unsigned char *)(a2 + 40))
  {
    if (*(char *)(a2 + 39) < 0) {
      operator delete(*(void **)(a2 + 16));
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, void **a2)
{
  uint64_t v2 = a2;
  std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    char v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        long long v6 = v4 - 232;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v4 - 224));
        char v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 216);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26FD321D8[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 216) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot15SuggestedActionENS9_14SuggestedReplyEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 72);
  if (*(unsigned char *)(a2 + 56) && *(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 8);
    operator delete(v3);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot15SuggestedActionENS9_14SuggestedReplyEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 48) && *(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 136);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26FD321E8[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 136) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 8);
    operator delete(v3);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 112) && *(char *)(a2 + 111) < 0) {
    operator delete(*(void **)(a2 + 88));
  }
  if (*(unsigned char *)(a2 + 80) && *(char *)(a2 + 79) < 0) {
    operator delete(*(void **)(a2 + 56));
  }
  if (*(unsigned char *)(a2 + 48) && *(char *)(a2 + 47) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 24);
    operator delete(v3);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 128) && *(char *)(a2 + 127) < 0) {
    operator delete(*(void **)(a2 + 104));
  }
  if (*(unsigned char *)(a2 + 96) && *(char *)(a2 + 95) < 0) {
    operator delete(*(void **)(a2 + 72));
  }
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*(void **)(a2 + 48));
  }
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 48) && *(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 80) && *(char *)(a2 + 79) < 0) {
    operator delete(*(void **)(a2 + 56));
  }
  if (*(unsigned char *)(a2 + 48) && *(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 48) && *(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 176))
  {
    if (*(unsigned char *)(a1 + 168) && *(char *)(a1 + 167) < 0) {
      operator delete(*(void **)(a1 + 144));
    }
    if (*(unsigned char *)(a1 + 112) && *(char *)(a1 + 111) < 0) {
      operator delete(*(void **)(a1 + 88));
    }
    if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
      operator delete(*(void **)(a1 + 56));
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void std::vector<ctb::chatbot::CardCarouselContent>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 280;
        std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 272))
  {
    uint64_t v3 = (void **)(a1 + 248);
    std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (*(unsigned char *)(a1 + 240) && *(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  if (*(unsigned char *)(a1 + 208) && *(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  return std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::~__optional_destruct_base[abi:ne180100](a1);
}

void ctb::CPIMMessage::~CPIMMessage(void **this)
{
  uint64_t v2 = this + 18;
  std::vector<ctb::CPIMEncapsulatedMessage>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 15;
  std::vector<ctb::CPIMNamespace>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void std::vector<ctb::CPIMEncapsulatedMessage>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 384;
        std::__destroy_at[abi:ne180100]<ctb::CPIMEncapsulatedMessage,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<ctb::CPIMNamespace>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<ctb::CPIMNamespace,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 std::construct_at[abi:ne180100]<ctb::CPIMMessage,ctb::CPIMMessage,ctb::CPIMMessage*>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v3 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v3;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  long long v4 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)(a1 + 48) = v4;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 6) = 0;
  long long v5 = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(_OWORD *)(a1 + 72) = v5;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  long long v6 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 96) = v6;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(long long *)((char *)a2 + 120);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  __n128 result = (__n128)a2[9];
  *(__n128 *)(a1 + 144) = result;
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 19) = 0;
  *((void *)a2 + 20) = 0;
  return result;
}

std::string *std::__optional_copy_base<ctb::CPIMMessage,false>::__optional_copy_base[abi:ne180100](std::string *this, const ctb::CPIMMessage *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[7].__r_.__value_.__s.__data_[0] = 0;
  if (*((unsigned char *)a2 + 168))
  {
    ctb::CPIMMessage::CPIMMessage(this, a2);
    this[7].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_24955C28C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 168)) {
    ctb::CPIMMessage::~CPIMMessage((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *ctb::CPIMMessage::CPIMMessage(std::string *this, const ctb::CPIMMessage *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((void *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::CPIMNamespace>::__init_with_size[abi:ne180100]<ctb::CPIMNamespace*,ctb::CPIMNamespace*>(this[5].__r_.__value_.__r.__words, *((void *)a2 + 15), *((void *)a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 16) - *((void *)a2 + 15)) >> 4));
  this[6].__r_.__value_.__r.__words[0] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  this[6].__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::CPIMEncapsulatedMessage>::__init_with_size[abi:ne180100]<ctb::CPIMEncapsulatedMessage*,ctb::CPIMEncapsulatedMessage*>(this[6].__r_.__value_.__r.__words, *((void *)a2 + 18), *((void *)a2 + 19), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 19) - *((void *)a2 + 18)) >> 7));
  return this;
}

void sub_24955C424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v10 + 95) < 0) {
    operator delete(*v13);
  }
  if (*(char *)(v10 + 71) < 0) {
    operator delete(*v12);
  }
  if (*(char *)(v10 + 47) < 0) {
    operator delete(*v11);
  }
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  long long v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    long long v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    long long v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_26525F2C0, MEMORY[0x263F8C060]);
}

void sub_24955C5B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void *std::vector<ctb::CPIMNamespace>::__init_with_size[abi:ne180100]<ctb::CPIMNamespace*,ctb::CPIMNamespace*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::string::size_type v6 = result;
    std::vector<ctb::CPIMNamespace>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::CPIMNamespace>,ctb::CPIMNamespace*,ctb::CPIMNamespace*,ctb::CPIMNamespace*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_24955C698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<ctb::CPIMNamespace>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ctb::CPIMNamespace>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::CPIMNamespace>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::CPIMNamespace>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::CPIMNamespace>,ctb::CPIMNamespace*,ctb::CPIMNamespace*,ctb::CPIMNamespace*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<ctb::CPIMNamespace,ctb::CPIMNamespace&,ctb::CPIMNamespace*>((std::string *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_24955C7CC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 48;
    do
    {
      std::__destroy_at[abi:ne180100]<ctb::CPIMNamespace,0>(v4 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<ctb::CPIMNamespace,ctb::CPIMNamespace&,ctb::CPIMNamespace*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_24955C86C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<ctb::CPIMEncapsulatedMessage>::__init_with_size[abi:ne180100]<ctb::CPIMEncapsulatedMessage*,ctb::CPIMEncapsulatedMessage*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<ctb::CPIMEncapsulatedMessage>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::CPIMEncapsulatedMessage>,ctb::CPIMEncapsulatedMessage*,ctb::CPIMEncapsulatedMessage*,ctb::CPIMEncapsulatedMessage*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_24955C8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<ctb::CPIMEncapsulatedMessage>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ctb::CPIMEncapsulatedMessage>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAABLL) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::CPIMEncapsulatedMessage>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[384 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::CPIMEncapsulatedMessage>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(384 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::CPIMEncapsulatedMessage>,ctb::CPIMEncapsulatedMessage*,ctb::CPIMEncapsulatedMessage*,ctb::CPIMEncapsulatedMessage*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<ctb::CPIMEncapsulatedMessage,ctb::CPIMEncapsulatedMessage&,ctb::CPIMEncapsulatedMessage*>((std::string *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 384;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_24955CA0C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 384;
    do
    {
      std::__destroy_at[abi:ne180100]<ctb::CPIMEncapsulatedMessage,0>(v4 + v2);
      v2 -= 384;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<ctb::CPIMEncapsulatedMessage,ctb::CPIMEncapsulatedMessage&,ctb::CPIMEncapsulatedMessage*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::GeoPushLocation,ctb::CPMGroupManagement,ctb::FileTransferDescriptor,ctb::chatbot::Message,ctb::IMCompositionIndication,ctb::IMDispositionNotification,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&this[1].__r_.__value_.__l.__size_, (uint64_t)(a2 + 2));
  return this;
}

void sub_24955CA8C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::GeoPushLocation,ctb::CPMGroupManagement,ctb::FileTransferDescriptor,ctb::chatbot::Message,ctb::IMCompositionIndication,ctb::IMDispositionNotification,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 344) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::GeoPushLocation,ctb::CPMGroupManagement,ctb::FileTransferDescriptor,ctb::chatbot::Message,ctb::IMCompositionIndication,ctb::IMDispositionNotification,std::string>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::GeoPushLocation,ctb::CPMGroupManagement,ctb::FileTransferDescriptor,ctb::chatbot::Message,ctb::IMCompositionIndication,ctb::IMDispositionNotification,std::string>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_24955CADC(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::GeoPushLocation,ctb::CPMGroupManagement,ctb::FileTransferDescriptor,ctb::chatbot::Message,ctb::IMCompositionIndication,ctb::IMDispositionNotification,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::GeoPushLocation,ctb::CPMGroupManagement,ctb::FileTransferDescriptor,ctb::chatbot::Message,ctb::IMCompositionIndication,ctb::IMDispositionNotification,std::string>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::GeoPushLocation,ctb::CPMGroupManagement,ctb::FileTransferDescriptor,ctb::chatbot::Message,ctb::IMCompositionIndication,ctb::IMDispositionNotification,std::string>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 344);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_26FD32188[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 344) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 344);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_26FD32250 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 344) = v5;
  }
  return result;
}

ctb::FileTransferDescriptor::FileDescriptor *std::__variant_detail::__alt<2ul,ctb::FileTransferDescriptor>::__alt[abi:ne180100]<ctb::FileTransferDescriptor const&>(ctb::FileTransferDescriptor::FileDescriptor *a1, uint64_t a2)
{
  uint64_t v4 = ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor(a1, (const ctb::FileTransferDescriptor::FileDescriptor *)a2);
  std::__optional_copy_base<ctb::FileTransferDescriptor::FileDescriptor,false>::__optional_copy_base[abi:ne180100]((ctb::FileTransferDescriptor::FileDescriptor *)((char *)v4 + 144), (const ctb::FileTransferDescriptor::FileDescriptor *)(a2 + 144));
  return a1;
}

void sub_24955CBB8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*(void **)(v1 + 104));
  }
  std::__variant_detail::__alt<2ul,ctb::FileTransferDescriptor>::__alt[abi:ne180100]<ctb::FileTransferDescriptor const&>(v1);
  _Unwind_Resume(a1);
}

ctb::FileTransferDescriptor::FileDescriptor *ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor(ctb::FileTransferDescriptor::FileDescriptor *this, const ctb::FileTransferDescriptor::FileDescriptor *a2)
{
  long long v4 = *(_OWORD *)a2;
  *((void *)this + 2) = *((void *)a2 + 2);
  *(_OWORD *)this = v4;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 1, (long long *)((char *)a2 + 24));
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 56);
    *((void *)this + 9) = *((void *)a2 + 9);
    *(_OWORD *)((char *)this + 56) = v5;
  }
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 80), *((const std::string::value_type **)a2 + 10), *((void *)a2 + 11));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 5);
    *((void *)this + 12) = *((void *)a2 + 12);
    *((_OWORD *)this + 5) = v6;
  }
  char v7 = (std::string *)((char *)this + 104);
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 13), *((void *)a2 + 14));
  }
  else
  {
    long long v8 = *(_OWORD *)((char *)a2 + 104);
    *((void *)this + 15) = *((void *)a2 + 15);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *((_OWORD *)this + 8) = *((_OWORD *)a2 + 8);
  return this;
}

void sub_24955CCC8(_Unwind_Exception *exception_object)
{
  if (v1[103] < 0) {
    operator delete(*v4);
  }
  if (v1[79] < 0) {
    operator delete(*v3);
  }
  if (v1[48])
  {
    if (v1[47] < 0) {
      operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_24955CD4C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(std::string *this, long long *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

ctb::FileTransferDescriptor::FileDescriptor *std::__optional_copy_base<ctb::FileTransferDescriptor::FileDescriptor,false>::__optional_copy_base[abi:ne180100](ctb::FileTransferDescriptor::FileDescriptor *this, const ctb::FileTransferDescriptor::FileDescriptor *a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 144) = 0;
  if (*((unsigned char *)a2 + 144))
  {
    ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor(this, a2);
    *((unsigned char *)this + 144) = 1;
  }
  return this;
}

void sub_24955CE08(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ctb::FileTransferDescriptor::FileDescriptor,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

unsigned char *std::__optional_copy_base<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,false>::__optional_copy_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[336] = 0;
  if (*(unsigned char *)(a2 + 336))
  {
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)a1, a2);
    a1[336] = 1;
  }
  return a1;
}

void sub_24955CE60(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 336)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 328) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_24955CEB0(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  long long v3 = (ctb::chatbot::CardMessage *)result;
  uint64_t v4 = *(unsigned int *)(result + 328);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_26FD321C0[v4])(&v7, result);
  }
  *((_DWORD *)v3 + 82) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 328);
  if (v5 != -1)
  {
    __n128 result = (*(&off_26FD32288 + v5))((int)&v6, v3, (CardMessage *)a2);
    *((_DWORD *)v3 + 82) = v5;
  }
  return result;
}

ctb::chatbot::CardMessage *ctb::chatbot::CardMessage::CardMessage(ctb::chatbot::CardMessage *this, const CardMessage *a2)
{
  *(_OWORD *)this = *(_OWORD *)&a2->fLayout.fCardOrientation;
  std::__optional_copy_base<ctb::chatbot::CardStyle,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 16), (long long *)&a2->fLayout.fCardStyle.var0.var0);
  std::__optional_copy_base<ctb::chatbot::CardMedia,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 2, (const ctb::chatbot::CardMedia *)&a2->fLayout.fCardStyle.var0.var1.fUri.var0);
  std::__optional_copy_base<ctb::chatbot::CardTitle,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 232), (long long *)&a2[2].var0.__words[2]);
  std::__optional_copy_base<ctb::chatbot::CardDescription,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 11, (long long *)&a2[3].fLayout.fCardStyle.var0.var1.fUri.__r_.__value_.var0.var1.__size_);
  std::__optional_copy_base<ctb::chatbot::SuggestedChipList,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 296, (uint64_t)&a2[3].var0);
  return this;
}

void sub_24955CFDC(_Unwind_Exception *a1)
{
  if (v2[288] && v2[287] < 0) {
    operator delete(*v5);
  }
  if (v2[256] && v2[255] < 0) {
    operator delete(*v4);
  }
  std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::~__optional_destruct_base[abi:ne180100](v3);
  if (v2[40])
  {
    if (v2[39] < 0) {
      operator delete(*v1);
    }
  }
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<ctb::chatbot::CardStyle,false>::__optional_copy_base[abi:ne180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_24955D080(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<ctb::chatbot::CardMedia,false>::__optional_copy_base[abi:ne180100](std::string *this, const ctb::chatbot::CardMedia *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[7].__r_.__value_.__s.__data_[8] = 0;
  if (*((unsigned char *)a2 + 176))
  {
    ctb::chatbot::CardMedia::CardMedia(this, a2);
    this[7].__r_.__value_.__s.__data_[8] = 1;
  }
  return this;
}

void sub_24955D0E0(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *ctb::chatbot::CardMedia::CardMedia(std::string *this, const ctb::chatbot::CardMedia *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  this[2].__r_.__value_.__r.__words[0] = *((void *)a2 + 6);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 56), (long long *)((char *)a2 + 56));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 88), (long long *)((char *)a2 + 88));
  long long v6 = *(_OWORD *)((char *)a2 + 120);
  LODWORD(this[5].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 34);
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v6;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 6, (long long *)a2 + 9);
  return this;
}

void sub_24955D1C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<ctb::chatbot::CardTitle,false>::__optional_copy_base[abi:ne180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_24955D26C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<ctb::chatbot::CardDescription,false>::__optional_copy_base[abi:ne180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_24955D2B8(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<ctb::chatbot::SuggestedChipList,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  std::__optional_storage_base<ctb::chatbot::SuggestedChipList,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::SuggestedChipList,false> const&>((void *)a1, a2);
  return a1;
}

void sub_24955D30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(unsigned char *)(v10 + 24))
  {
    a10 = v10;
    std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::__optional_storage_base<ctb::chatbot::SuggestedChipList,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::SuggestedChipList,false> const&>(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    *__n128 result = 0;
    result[1] = 0;
    result[2] = 0;
    __n128 result = std::vector<ctb::chatbot::SuggestedChip>::__init_with_size[abi:ne180100]<ctb::chatbot::SuggestedChip*,ctb::chatbot::SuggestedChip*>(result, *(void *)a2, *(void *)(a2 + 8), 0x34F72C234F72C235 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

void *std::vector<ctb::chatbot::SuggestedChip>::__init_with_size[abi:ne180100]<ctb::chatbot::SuggestedChip*,ctb::chatbot::SuggestedChip*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<ctb::chatbot::SuggestedChip>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::SuggestedChip>,ctb::chatbot::SuggestedChip*,ctb::chatbot::SuggestedChip*,ctb::chatbot::SuggestedChip*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_24955D3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ctb::chatbot::SuggestedChip>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x11A7B9611A7B962) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::SuggestedChip>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[232 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::SuggestedChip>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x11A7B9611A7B962) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(232 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::SuggestedChip>,ctb::chatbot::SuggestedChip*,ctb::chatbot::SuggestedChip*,ctb::chatbot::SuggestedChip*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(_DWORD *)(a4 + v7) = *(_DWORD *)(a2 + v7);
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor(a4 + v7 + 8, a2 + v7 + 8);
      v7 += 232;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_24955D520(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 224;
    do
    {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor(v4 + v2);
      v2 -= 232;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 216) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_24955D578(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 216);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_26FD321D8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 216) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 216);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_26FD322A0 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 216) = v5;
  }
  return result;
}

uint64_t std::__variant_detail::__alt<0ul,ctb::chatbot::SuggestedAction>::__alt[abi:ne180100]<ctb::chatbot::SuggestedAction const&>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  std::__optional_copy_base<ctb::chatbot::PostbackData,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 32), (long long *)(a2 + 32));
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>::__copy_constructor(a1 + 72, a2 + 72);
  return a1;
}

void sub_24955D6A0(_Unwind_Exception *exception_object)
{
  if (v2[56] && v2[55] < 0) {
    operator delete(*v3);
  }
  if (v2[31] < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<ctb::chatbot::PostbackData,false>::__optional_copy_base[abi:ne180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_24955D70C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 136) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_24955D75C(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 136);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_26FD321E8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 136) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 136);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26FD322B0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 136) = v5;
  }
  return result;
}

uint64_t std::__variant_detail::__alt<0ul,ctb::chatbot::SuggestedActionOpenUrlInWebView>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionOpenUrlInWebView const&>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  uint64_t v5 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

{
  long long v4;
  std::string *v5;
  long long v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  uint64_t v5 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_24955D894(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__variant_detail::__alt<2ul,ctb::chatbot::SuggestedActionComposeText>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionComposeText const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_24955D92C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__alt<5ul,ctb::chatbot::SuggestedActionShowLocation>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionShowLocation const&>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  std::__optional_copy_base<ctb::chatbot::SuggestedActionShowQuery,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 24), (long long *)((char *)a2 + 24));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 56), (long long *)((char *)a2 + 56));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 88), (long long *)((char *)a2 + 88));
  return a1;
}

void sub_24955D9B4(_Unwind_Exception *exception_object)
{
  if (v1[80] && v1[79] < 0) {
    operator delete(*v3);
  }
  if (v1[48])
  {
    if (v1[47] < 0) {
      operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<ctb::chatbot::SuggestedActionShowQuery,false>::__optional_copy_base[abi:ne180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_24955DA28(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *ctb::chatbot::CreateCalendarEvent::CreateCalendarEvent(std::string *this, const ctb::chatbot::CreateCalendarEvent *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 3, (long long *)((char *)a2 + 72));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 104), (long long *)((char *)a2 + 104));
  return this;
}

void sub_24955DB20(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__variant_detail::__alt<9ul,ctb::chatbot::SuggestedActionDialEnrichedCall>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionDialEnrichedCall const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 1, (long long *)((char *)a2 + 24));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 56), (long long *)((char *)a2 + 56));
  return this;
}

void sub_24955DC00(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 48) && *(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__variant_detail::__alt<1ul,ctb::chatbot::SuggestedReply>::__alt[abi:ne180100]<ctb::chatbot::SuggestedReply const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<ctb::chatbot::PostbackData,false>::__optional_copy_base[abi:ne180100](this + 1, (long long *)((char *)a2 + 24));
  return this;
}

void sub_24955DC98(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__alt<1ul,ctb::chatbot::CardCarouselMessage>::__alt[abi:ne180100]<ctb::chatbot::CardCarouselMessage const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  std::__optional_copy_base<ctb::chatbot::CardStyle,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 16), (long long *)a2 + 1);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  std::vector<ctb::chatbot::CardCarouselContent>::__init_with_size[abi:ne180100]<ctb::chatbot::CardCarouselContent*,ctb::chatbot::CardCarouselContent*>((void *)(a1 + 48), a2[6], a2[7], 0xAF8AF8AF8AF8AF8BLL * ((a2[7] - a2[6]) >> 3));
  return a1;
}

void sub_24955DD34(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 40))
  {
    if (*(char *)(v1 + 39) < 0) {
      operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<ctb::chatbot::CardCarouselContent>::__init_with_size[abi:ne180100]<ctb::chatbot::CardCarouselContent*,ctb::chatbot::CardCarouselContent*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<ctb::chatbot::CardCarouselContent>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::CardCarouselContent>,ctb::chatbot::CardCarouselContent*,ctb::chatbot::CardCarouselContent*,ctb::chatbot::CardCarouselContent*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_24955DDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<ctb::chatbot::CardCarouselContent>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ctb::chatbot::CardCarouselContent>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::CardCarouselContent>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[280 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::CardCarouselContent>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(280 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::CardCarouselContent>,ctb::chatbot::CardCarouselContent*,ctb::chatbot::CardCarouselContent*,ctb::chatbot::CardCarouselContent*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,ctb::chatbot::CardCarouselContent&,ctb::chatbot::CardCarouselContent*>((std::string *)(a4 + v7), a2 + v7);
      v7 += 280;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_24955DEE4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 280;
    do
    {
      std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>(v4 + v2);
      v2 -= 280;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,ctb::chatbot::CardCarouselContent&,ctb::chatbot::CardCarouselContent*>(std::string *a1, uint64_t a2)
{
  uint64_t v4 = std::__optional_copy_base<ctb::chatbot::CardMedia,false>::__optional_copy_base[abi:ne180100](a1, (const ctb::chatbot::CardMedia *)a2);
  std::__optional_copy_base<ctb::chatbot::CardTitle,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)v4 + 184), (long long *)(a2 + 184));
  std::__optional_copy_base<ctb::chatbot::CardDescription,false>::__optional_copy_base[abi:ne180100](a1 + 9, (long long *)(a2 + 216));
  std::__optional_copy_base<ctb::chatbot::SuggestedChipList,false>::__optional_copy_base[abi:ne180100]((uint64_t)&a1[10].__r_.__value_.__l.__size_, a2 + 248);
  return a1;
}

void sub_24955DF68(_Unwind_Exception *a1)
{
  if (v1[240] && v1[239] < 0) {
    operator delete(*v3);
  }
  if (v1[208])
  {
    if (v1[207] < 0) {
      operator delete(*v2);
    }
  }
  std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__alt<4ul,ctb::IMCompositionIndication>::__alt[abi:ne180100]<ctb::IMCompositionIndication const&>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  long long v5 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

void sub_24955E058(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void OUTLINED_FUNCTION_0(void **a1)
{
}

unsigned char *std::__optional_storage_base<ctb::chatbot::Message,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::Message,false>>(unsigned char *result, uint64_t a2)
{
  if (result[344] == *(unsigned char *)(a2 + 344))
  {
    if (result[344]) {
      return (unsigned char *)std::__optional_storage_base<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,false>>((uint64_t)result, a2);
    }
  }
  else
  {
    if (result[344])
    {
      if (result[336]) {
        __n128 result = (unsigned char *)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)result);
      }
      char v2 = 0;
    }
    else
    {
      *__n128 result = 0;
      result[336] = 0;
      char v2 = 1;
      if (*(unsigned char *)(a2 + 336))
      {
        __n128 result = (unsigned char *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)result, a2);
        result[336] = 1;
      }
    }
    result[344] = v2;
  }
  return result;
}

uint64_t std::__optional_storage_base<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,false>>(uint64_t result, uint64_t a2)
{
  if (*(unsigned __int8 *)(result + 336) == *(unsigned __int8 *)(a2 + 336))
  {
    if (*(unsigned char *)(result + 336)) {
      return std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>>(result, a2);
    }
  }
  else
  {
    if (*(unsigned char *)(result + 336))
    {
      __n128 result = std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::~__dtor(result);
      char v2 = 0;
    }
    else
    {
      __n128 result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::__move_constructor(result, a2);
      char v2 = 1;
    }
    *(unsigned char *)(result + 336) = v2;
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 328);
  uint64_t v4 = *(unsigned int *)(a2 + 328);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26FD32318[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 328) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_26FD32330[v4])(&v5, result, a2);
}

_OWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__assign_alt[abi:ne180100]<0ul,ctb::chatbot::CardMessage,ctb::chatbot::CardMessage>(*a1, a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

_OWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__assign_alt[abi:ne180100]<0ul,ctb::chatbot::CardMessage,ctb::chatbot::CardMessage>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 328)) {
    return (_OWORD *)std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__emplace[abi:ne180100]<0ul,ctb::chatbot::CardMessage>(a1, a3);
  }
  else {
    return ctb::chatbot::CardMessage::operator=(a2, a3);
  }
}

_OWORD *ctb::chatbot::CardMessage::operator=(_OWORD *a1, uint64_t a2)
{
  *a1 = *(_OWORD *)a2;
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>((uint64_t)(a1 + 1), (__n128 *)(a2 + 16));
  std::__optional_storage_base<ctb::chatbot::CardMedia,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardMedia,false>>((uint64_t)(a1 + 3), a2 + 48);
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>((uint64_t)a1 + 232, (__n128 *)(a2 + 232));
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>((uint64_t)a1 + 264, (__n128 *)(a2 + 264));
  std::__optional_storage_base<ctb::chatbot::SuggestedChipList,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::SuggestedChipList,false>>((uint64_t)a1 + 296, (__n128 *)(a2 + 296));
  return a1;
}

__n128 std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      __n128 result = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    __n128 result = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

void std::__optional_storage_base<ctb::chatbot::CardMedia,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardMedia,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 176) == *(unsigned __int8 *)(a2 + 176))
  {
    if (*(unsigned char *)(a1 + 176))
    {
      ctb::chatbot::CardMedia::operator=(a1, (long long *)a2);
    }
  }
  else if (*(unsigned char *)(a1 + 176))
  {
    std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::reset[abi:ne180100](a1);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::CardMedia,ctb::chatbot::CardMedia,ctb::chatbot::CardMedia*>(a1, (long long *)a2);
    *(unsigned char *)(a1 + 176) = 1;
  }
}

uint64_t ctb::chatbot::CardMedia::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)uint64_t v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(a1 + 56, (__n128 *)((char *)a2 + 56));
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(a1 + 88, (__n128 *)((char *)a2 + 88));
  long long v7 = *(long long *)((char *)a2 + 120);
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 34);
  *(_OWORD *)(a1 + 120) = v7;
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(a1 + 144, (__n128 *)a2 + 9);
  return a1;
}

void std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 176))
  {
    if (*(unsigned char *)(a1 + 168) && *(char *)(a1 + 167) < 0) {
      operator delete(*(void **)(a1 + 144));
    }
    if (*(unsigned char *)(a1 + 112) && *(char *)(a1 + 111) < 0) {
      operator delete(*(void **)(a1 + 88));
    }
    if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
      operator delete(*(void **)(a1 + 56));
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 176) = 0;
  }
}

__n128 std::construct_at[abi:ne180100]<ctb::chatbot::CardMedia,ctb::chatbot::CardMedia,ctb::chatbot::CardMedia*>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v3 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v3;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  uint64_t v4 = *((void *)a2 + 6);
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 80) = 0;
  if (*((unsigned char *)a2 + 80))
  {
    long long v5 = *(long long *)((char *)a2 + 56);
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    *(_OWORD *)(a1 + 56) = v5;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 7) = 0;
    *(unsigned char *)(a1 + 80) = 1;
  }
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  if (*((unsigned char *)a2 + 112))
  {
    long long v6 = *(long long *)((char *)a2 + 88);
    *(void *)(a1 + 104) = *((void *)a2 + 13);
    *(_OWORD *)(a1 + 88) = v6;
    *((void *)a2 + 12) = 0;
    *((void *)a2 + 13) = 0;
    *((void *)a2 + 11) = 0;
    *(unsigned char *)(a1 + 112) = 1;
  }
  __n128 result = *(__n128 *)((char *)a2 + 120);
  int v8 = *((_DWORD *)a2 + 34);
  *(unsigned char *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 136) = v8;
  *(__n128 *)(a1 + 120) = result;
  *(unsigned char *)(a1 + 168) = 0;
  if (*((unsigned char *)a2 + 168))
  {
    __n128 result = (__n128)a2[9];
    *(void *)(a1 + 160) = *((void *)a2 + 20);
    *(__n128 *)(a1 + 144) = result;
    *((void *)a2 + 19) = 0;
    *((void *)a2 + 20) = 0;
    *((void *)a2 + 18) = 0;
    *(unsigned char *)(a1 + 168) = 1;
  }
  return result;
}

__n128 std::__optional_storage_base<ctb::chatbot::SuggestedChipList,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::SuggestedChipList,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      std::vector<ctb::chatbot::SuggestedChip>::__vdeallocate((void **)a1);
      __n128 result = *a2;
      *(__n128 *)a1 = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    long long v5 = (void **)a1;
    std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100](&v5);
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

void std::vector<ctb::chatbot::SuggestedChip>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    long long v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        long long v5 = v3 - 232;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v3 - 224));
        long long v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__emplace[abi:ne180100]<0ul,ctb::chatbot::CardMessage>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 328);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26FD32318[v4])(&v6, a1);
  }
  *(_DWORD *)(a1 + 328) = -1;
  uint64_t result = std::__variant_detail::__alt<0ul,ctb::chatbot::CardMessage>::__alt[abi:ne180100]<ctb::chatbot::CardMessage>(a1, a2);
  *(_DWORD *)(a1 + 328) = 0;
  return result;
}

uint64_t std::__variant_detail::__alt<0ul,ctb::chatbot::CardMessage>::__alt[abi:ne180100]<ctb::chatbot::CardMessage>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a1 + 40) = 1;
  }
  *(unsigned char *)(a1 + 48) = 0;
  uint64_t v5 = a1 + 48;
  *(unsigned char *)(a1 + 224) = 0;
  if (*(unsigned char *)(a2 + 224))
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::CardMedia,ctb::chatbot::CardMedia,ctb::chatbot::CardMedia*>(v5, (long long *)(a2 + 48));
    *(unsigned char *)(a1 + 224) = 1;
  }
  *(unsigned char *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 256) = 0;
  if (*(unsigned char *)(a2 + 256))
  {
    long long v6 = *(_OWORD *)(a2 + 232);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = v6;
    *(void *)(a2 + 240) = 0;
    *(void *)(a2 + 248) = 0;
    *(void *)(a2 + 232) = 0;
    *(unsigned char *)(a1 + 256) = 1;
  }
  *(unsigned char *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  if (*(unsigned char *)(a2 + 288))
  {
    long long v7 = *(_OWORD *)(a2 + 264);
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = v7;
    *(void *)(a2 + 272) = 0;
    *(void *)(a2 + 280) = 0;
    *(void *)(a2 + 264) = 0;
    *(unsigned char *)(a1 + 288) = 1;
  }
  *(unsigned char *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 320) = 0;
  if (*(unsigned char *)(a2 + 320))
  {
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
    *(void *)(a1 + 312) = 0;
    uint64_t v8 = *(void *)(a2 + 304);
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    *(void *)(a1 + 304) = v8;
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    *(void *)(a2 + 296) = 0;
    *(void *)(a2 + 304) = 0;
    *(void *)(a2 + 312) = 0;
    *(unsigned char *)(a1 + 320) = 1;
  }
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__assign_alt[abi:ne180100]<1ul,ctb::chatbot::CardCarouselMessage,ctb::chatbot::CardCarouselMessage>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 328) == 1)
  {
    uint64_t v5 = *(void *)a3;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(void *)a2 = v5;
    std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(a2 + 16, (__n128 *)(a3 + 16));
    std::vector<ctb::chatbot::CardCarouselContent>::__vdeallocate((void **)(a2 + 48));
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(void *)(a2 + 64) = *(void *)(a3 + 64);
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__emplace[abi:ne180100]<1ul,ctb::chatbot::CardCarouselMessage>(a1, (uint64_t *)a3);
  }
}

void std::vector<ctb::chatbot::CardCarouselContent>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 280;
        std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>(v3);
      }
      while ((void *)v3 != v1);
      long long v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__emplace[abi:ne180100]<1ul,ctb::chatbot::CardCarouselMessage>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 328);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26FD32318[v4])(&v8, a1);
  }
  *(_DWORD *)(a1 + 328) = -1;
  uint64_t v5 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (*((unsigned char *)a2 + 40))
  {
    long long v6 = *((_OWORD *)a2 + 1);
    *(void *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v6;
    a2[3] = 0;
    a2[4] = 0;
    a2[2] = 0;
    *(unsigned char *)(a1 + 40) = 1;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(void *)(a1 + 64) = a2[8];
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  *(_DWORD *)(a1 + 328) = 1;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__assign_alt[abi:ne180100]<2ul,ctb::chatbot::SuggestedChipList,ctb::chatbot::SuggestedChipList>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 328) == 2)
  {
    std::vector<ctb::chatbot::SuggestedChip>::__vdeallocate((void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(void *)(a2 + 16) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__emplace[abi:ne180100]<2ul,ctb::chatbot::SuggestedChipList>(a1, a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__emplace[abi:ne180100]<2ul,ctb::chatbot::SuggestedChipList>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 328);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26FD32318[v4])(&v6, a1);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 328) = 2;
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 328) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 328);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_26FD32318[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 328) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 328);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26FD32348[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 328) = v5;
  }
  return result;
}

unsigned char *std::__optional_copy_base<ctb::chatbot::Message,false>::__optional_copy_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[344] = 0;
  if (*(unsigned char *)(a2 + 344))
  {
    std::__optional_copy_base<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,false>::__optional_copy_base[abi:ne180100](a1, a2);
    a1[344] = 1;
  }
  return a1;
}

void sub_24955ECF0(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 344))
  {
    if (*(unsigned char *)(v1 + 336)) {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<ctb::chatbot::RenderInformation,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::RenderInformation,false>>(ctb::chatbot::BotInformation *this, uint64_t a2)
{
  if (*((unsigned __int8 *)this + 680) == *(unsigned __int8 *)(a2 + 680))
  {
    if (*((unsigned char *)this + 680))
    {
      ctb::chatbot::BotInformation::operator=(this, (__n128 *)a2);
      std::__optional_storage_base<ctb::chatbot::MenuItem,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::MenuItem,false>>((uint64_t)this + 560, (__n128 *)(a2 + 560));
      *((unsigned char *)this + 592) = *(unsigned char *)(a2 + 592);
      uint64_t v4 = (void **)((char *)this + 600);
      if (*((char *)this + 623) < 0) {
        operator delete(*v4);
      }
      long long v5 = *(_OWORD *)(a2 + 600);
      *((void *)this + 77) = *(void *)(a2 + 616);
      *(_OWORD *)uint64_t v4 = v5;
      *(unsigned char *)(a2 + 623) = 0;
      *(unsigned char *)(a2 + 600) = 0;
      char v6 = (void **)((char *)this + 624);
      if (*((char *)this + 647) < 0) {
        operator delete(*v6);
      }
      long long v7 = *(_OWORD *)(a2 + 624);
      *((void *)this + 80) = *(void *)(a2 + 640);
      *(_OWORD *)char v6 = v7;
      *(unsigned char *)(a2 + 647) = 0;
      *(unsigned char *)(a2 + 624) = 0;
      std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>((uint64_t)this + 648, (__n128 *)(a2 + 648));
    }
  }
  else if (*((unsigned char *)this + 680))
  {
    std::__optional_destruct_base<ctb::chatbot::RenderInformation,false>::reset[abi:ne180100]((void **)this);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::RenderInformation,ctb::chatbot::RenderInformation,ctb::chatbot::RenderInformation*>((uint64_t)this, a2);
    *((unsigned char *)this + 680) = 1;
  }
}

void std::__optional_destruct_base<ctb::chatbot::RenderInformation,false>::reset[abi:ne180100](void **this)
{
  if (*((unsigned char *)this + 680))
  {
    if (*((unsigned char *)this + 672) && *((char *)this + 671) < 0) {
      operator delete(this[81]);
    }
    if (*((char *)this + 647) < 0) {
      operator delete(this[78]);
    }
    if (*((char *)this + 623) < 0) {
      operator delete(this[75]);
    }
    if (*((unsigned char *)this + 584))
    {
      long long v2 = this + 70;
      std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100](&v2);
    }
    ctb::chatbot::BotInformation::~BotInformation((ctb::chatbot::BotInformation *)this);
    *((unsigned char *)this + 680) = 0;
  }
}

unsigned char *ctb::chatbot::BotInformation::operator=(unsigned char *a1, __n128 *a2)
{
  return a1;
}

void std::__optional_storage_base<ctb::chatbot::OrgDetails,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::OrgDetails,false>>(unsigned char *a1, uint64_t a2)
{
  if (a1[264] == *(unsigned char *)(a2 + 264))
  {
    if (a1[264])
    {
      ctb::chatbot::OrgDetails::operator=((uint64_t)a1, a2);
    }
  }
  else if (a1[264])
  {
    std::__optional_destruct_base<ctb::chatbot::OrgDetails,false>::reset[abi:ne180100]((uint64_t)a1);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails*>(a1, a2);
    a1[264] = 1;
  }
}

uint64_t ctb::chatbot::OrgDetails::operator=(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t std::__optional_destruct_base<ctb::chatbot::OrgDetails,false>::reset[abi:ne180100](uint64_t result)
{
  if (*(unsigned char *)(result + 264))
  {
    uint64_t v1 = result;
    if (*(unsigned char *)(result + 256))
    {
      long long v2 = (void **)(result + 232);
      std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
    }
    if (*(unsigned char *)(v1 + 224))
    {
      long long v2 = (void **)(v1 + 200);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
    }
    if (*(unsigned char *)(v1 + 192) && *(char *)(v1 + 191) < 0) {
      operator delete(*(void **)(v1 + 168));
    }
    if (*(unsigned char *)(v1 + 160))
    {
      long long v2 = (void **)(v1 + 136);
      std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
    }
    if (*(unsigned char *)(v1 + 128))
    {
      long long v2 = (void **)(v1 + 104);
      std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
    }
    uint64_t result = std::__optional_destruct_base<ctb::chatbot::CommunicationAddress,false>::~__optional_destruct_base[abi:ne180100](v1);
    *(unsigned char *)(v1 + 264) = 0;
  }
  return result;
}

__n128 std::__optional_storage_base<ctb::chatbot::CommunicationAddress,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CommunicationAddress,false>>(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 96) == *((unsigned __int8 *)a2 + 96))
  {
    if (*(unsigned char *)(a1 + 96))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      long long v4 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((unsigned char *)a2 + 23) = 0;
      *(unsigned char *)a2 = 0;
      long long v5 = (void **)(a1 + 24);
      if (*(char *)(a1 + 47) < 0) {
        operator delete(*v5);
      }
      long long v6 = *(long long *)((char *)a2 + 24);
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *(_OWORD *)long long v5 = v6;
      *((unsigned char *)a2 + 47) = 0;
      *((unsigned char *)a2 + 24) = 0;
      long long v7 = (void **)(a1 + 48);
      if (*(char *)(a1 + 71) < 0) {
        operator delete(*v7);
      }
      long long v8 = a2[3];
      *(void *)(a1 + 64) = *((void *)a2 + 8);
      *(_OWORD *)long long v7 = v8;
      *((unsigned char *)a2 + 71) = 0;
      *((unsigned char *)a2 + 48) = 0;
      std::vector<ctb::chatbot::URIEntry>::__vdeallocate((uint64_t *)(a1 + 72));
      __n128 result = *(__n128 *)((char *)a2 + 72);
      *(__n128 *)(a1 + 72) = result;
      *(void *)(a1 + 88) = *((void *)a2 + 11);
      *((void *)a2 + 9) = 0;
      *((void *)a2 + 10) = 0;
      *((void *)a2 + 11) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 96))
  {
    std::__optional_destruct_base<ctb::chatbot::CommunicationAddress,false>::reset[abi:ne180100](a1);
  }
  else
  {
    long long v10 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v10;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v11 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v11;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    long long v12 = a2[3];
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v12;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 6) = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    __n128 result = *(__n128 *)((char *)a2 + 72);
    *(__n128 *)(a1 + 72) = result;
    *(void *)(a1 + 88) = *((void *)a2 + 11);
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 11) = 0;
    *(unsigned char *)(a1 + 96) = 1;
  }
  return result;
}

void std::__optional_destruct_base<ctb::chatbot::CommunicationAddress,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    long long v2 = (void **)(a1 + 72);
    std::vector<ctb::chatbot::URIEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 96) = 0;
  }
}

void std::vector<ctb::chatbot::URIEntry>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 40)
  {
    if (*(unsigned char *)(i - 16) && *(char *)(i - 17) < 0) {
      operator delete(*(void **)(i - 40));
    }
  }
  *(void *)(a1 + 8) = a2;
}

void ctb::chatbot::TelephoneInformation::~TelephoneInformation(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void std::vector<ctb::chatbot::URIEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  long long v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

__n128 std::__optional_storage_base<ctb::chatbot::MediaList,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::MediaList,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      std::vector<ctb::chatbot::MediaEntry>::__vdeallocate((void **)a1);
      __n128 result = *a2;
      *(__n128 *)a1 = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    long long v5 = (void **)a1;
    std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100](&v5);
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

void std::vector<ctb::chatbot::MediaEntry>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 72;
        std::__destroy_at[abi:ne180100]<ctb::chatbot::MediaEntry,0>(v3);
      }
      while ((void *)v3 != v1);
      long long v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__destroy_at[abi:ne180100]<ctb::chatbot::MediaEntry,0>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56) && *(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    long long v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

void std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::__destroy_at[abi:ne180100]<ctb::chatbot::MediaEntry,0>(v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 std::__optional_storage_base<ctb::chatbot::OrgName,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::OrgName,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      std::vector<ctb::chatbot::OrgNameEntry>::__vdeallocate((uint64_t *)a1);
      __n128 result = *a2;
      *(__n128 *)a1 = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    long long v5 = (void **)a1;
    std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100](&v5);
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

void std::vector<ctb::chatbot::OrgNameEntry>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

void std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

__n128 std::__optional_storage_base<ctb::chatbot::CategoryList,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CategoryList,false>>(std::vector<std::string> *this, uint64_t a2)
{
  if (LOBYTE(this[1].__begin_) == *(unsigned __int8 *)(a2 + 24))
  {
    if (LOBYTE(this[1].__begin_))
    {
      std::vector<std::string>::__vdeallocate(this);
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)&this->__begin_ = *(_OWORD *)a2;
      this->__end_cap_.__value_ = *(std::string **)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
    }
  }
  else if (LOBYTE(this[1].__begin_))
  {
    long long v5 = this;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
    LOBYTE(this[1].__begin_) = 0;
  }
  else
  {
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
    __n128 result = *(__n128 *)a2;
    *this = *(std::vector<std::string> *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    LOBYTE(this[1].__begin_) = 1;
  }
  return result;
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

__n128 std::__optional_storage_base<ctb::chatbot::WebResources,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::WebResources,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      std::vector<ctb::CPIMNamespace>::__vdeallocate((void **)a1);
      __n128 result = *a2;
      *(__n128 *)a1 = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    long long v5 = (void **)a1;
    std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&v5);
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

void std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<ctb::CPIMNamespace,0>(v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__optional_destruct_base<ctb::chatbot::CommunicationAddress,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v3 = (void **)(a1 + 72);
    std::vector<ctb::chatbot::URIEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

__n128 std::construct_at[abi:ne180100]<ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails*>(unsigned char *a1, uint64_t a2)
{
  uint64_t v3 = std::__optional_move_base<ctb::chatbot::CommunicationAddress,false>::__optional_move_base[abi:ne180100](a1, (long long *)a2);
  v3[104] = 0;
  v3[128] = 0;
  if (*(unsigned char *)(a2 + 128))
  {
    *((void *)v3 + 13) = 0;
    *((void *)v3 + 14) = 0;
    *((void *)v3 + 15) = 0;
    __n128 result = *(__n128 *)(a2 + 104);
    *(__n128 *)(v3 + 104) = result;
    *((void *)v3 + 15) = *(void *)(a2 + 120);
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 120) = 0;
    v3[128] = 1;
  }
  v3[136] = 0;
  v3[160] = 0;
  if (*(unsigned char *)(a2 + 160))
  {
    *((void *)v3 + 17) = 0;
    *((void *)v3 + 18) = 0;
    *((void *)v3 + 19) = 0;
    __n128 result = *(__n128 *)(a2 + 136);
    *(__n128 *)(v3 + 136) = result;
    *((void *)v3 + 19) = *(void *)(a2 + 152);
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 144) = 0;
    *(void *)(a2 + 152) = 0;
    v3[160] = 1;
  }
  v3[168] = 0;
  v3[192] = 0;
  if (*(unsigned char *)(a2 + 192))
  {
    __n128 result = *(__n128 *)(a2 + 168);
    *((void *)v3 + 23) = *(void *)(a2 + 184);
    *(__n128 *)(v3 + 168) = result;
    *(void *)(a2 + 176) = 0;
    *(void *)(a2 + 184) = 0;
    *(void *)(a2 + 168) = 0;
    v3[192] = 1;
  }
  v3[200] = 0;
  v3[224] = 0;
  if (*(unsigned char *)(a2 + 224))
  {
    *((void *)v3 + 25) = 0;
    *((void *)v3 + 26) = 0;
    *((void *)v3 + 27) = 0;
    __n128 result = *(__n128 *)(a2 + 200);
    *(__n128 *)(v3 + 200) = result;
    *((void *)v3 + 27) = *(void *)(a2 + 216);
    *(void *)(a2 + 200) = 0;
    *(void *)(a2 + 208) = 0;
    *(void *)(a2 + 216) = 0;
    v3[224] = 1;
  }
  v3[232] = 0;
  v3[256] = 0;
  if (*(unsigned char *)(a2 + 256))
  {
    *((void *)v3 + 29) = 0;
    *((void *)v3 + 30) = 0;
    *((void *)v3 + 31) = 0;
    __n128 result = *(__n128 *)(a2 + 232);
    *(__n128 *)(v3 + 232) = result;
    *((void *)v3 + 31) = *(void *)(a2 + 248);
    *(void *)(a2 + 232) = 0;
    *(void *)(a2 + 240) = 0;
    *(void *)(a2 + 248) = 0;
    v3[256] = 1;
  }
  return result;
}

unsigned char *std::__optional_move_base<ctb::chatbot::CommunicationAddress,false>::__optional_move_base[abi:ne180100](unsigned char *a1, long long *a2)
{
  *a1 = 0;
  a1[96] = 0;
  std::__optional_storage_base<ctb::chatbot::CommunicationAddress,false>::__construct_from[abi:ne180100]<std::__optional_move_base<ctb::chatbot::CommunicationAddress,false>>((uint64_t)a1, a2);
  return a1;
}

__n128 std::__optional_storage_base<ctb::chatbot::CommunicationAddress,false>::__construct_from[abi:ne180100]<std::__optional_move_base<ctb::chatbot::CommunicationAddress,false>>(uint64_t a1, long long *a2)
{
  if (*((unsigned char *)a2 + 96))
  {
    long long v2 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v2;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v3 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v3;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    long long v4 = a2[3];
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v4;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 6) = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    __n128 result = *(__n128 *)((char *)a2 + 72);
    *(__n128 *)(a1 + 72) = result;
    *(void *)(a1 + 88) = *((void *)a2 + 11);
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 11) = 0;
    *(unsigned char *)(a1 + 96) = 1;
  }
  return result;
}

__n128 std::__optional_storage_base<ctb::chatbot::MenuItem,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::MenuItem,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      std::vector<ctb::chatbot::MenuL0Content>::__vdeallocate((void **)a1);
      __n128 result = *a2;
      *(__n128 *)a1 = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    long long v5 = (void **)a1;
    std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100](&v5);
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

void std::vector<ctb::chatbot::MenuL0Content>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    long long v3 = (char *)a1[1];
    long long v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        long long v5 = v3 - 248;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v3 - 240));
        long long v3 = v5;
      }
      while (v5 != v1);
      long long v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 232);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26FD32360[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 232) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL1EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL1EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  long long v3 = (void **)(a2 + 24);
  std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    char v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        long long v6 = v4 - 248;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v4 - 240));
        char v4 = v6;
      }
      while (v6 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 232);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26FD32370[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 232) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL2EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL2EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  long long v3 = (void **)(a2 + 24);
  std::vector<ctb::chatbot::MenuL2Content>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void std::vector<ctb::chatbot::MenuL2Content>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    char v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        long long v6 = v4 - 232;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v4 - 224));
        char v4 = v6;
      }
      while (v6 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    char v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        long long v6 = v4 - 248;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v4 - 240));
        char v4 = v6;
      }
      while (v6 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ctb::chatbot::VerificationDetails::~VerificationDetails(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void ctb::chatbot::BotInformation::~BotInformation(ctb::chatbot::BotInformation *this)
{
  if (*((unsigned char *)this + 552))
  {
    uint64_t v2 = (void **)((char *)this + 528);
    std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
  }
  if (*((unsigned char *)this + 520) && *((char *)this + 519) < 0) {
    operator delete(*((void **)this + 62));
  }
  if (*((unsigned char *)this + 488) && *((char *)this + 487) < 0) {
    operator delete(*((void **)this + 58));
  }
  if (*((unsigned char *)this + 456) && *((char *)this + 455) < 0) {
    operator delete(*((void **)this + 54));
  }
  if (*((unsigned char *)this + 424) && *((char *)this + 423) < 0) {
    operator delete(*((void **)this + 50));
  }
  if (*((unsigned char *)this + 392) && *((char *)this + 391) < 0) {
    operator delete(*((void **)this + 46));
  }
  if (*((unsigned char *)this + 360) && *((char *)this + 359) < 0) {
    operator delete(*((void **)this + 42));
  }
  if (*((unsigned char *)this + 328) && *((char *)this + 327) < 0) {
    operator delete(*((void **)this + 38));
  }
  if (*((unsigned char *)this + 296) && *((char *)this + 295) < 0) {
    operator delete(*((void **)this + 34));
  }
  std::__optional_destruct_base<ctb::chatbot::OrgDetails,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this);
}

void ctb::chatbot::PCC::~PCC(void **this)
{
  if (*((unsigned char *)this + 296) && *((char *)this + 295) < 0) {
    operator delete(this[34]);
  }

  std::__optional_destruct_base<ctb::chatbot::OrgDetails,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this);
}

uint64_t std::__optional_destruct_base<ctb::chatbot::OrgDetails,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 264))
  {
    if (*(unsigned char *)(a1 + 256))
    {
      long long v3 = (void **)(a1 + 232);
      std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
    }
    if (*(unsigned char *)(a1 + 224))
    {
      long long v3 = (void **)(a1 + 200);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    }
    if (*(unsigned char *)(a1 + 192) && *(char *)(a1 + 191) < 0) {
      operator delete(*(void **)(a1 + 168));
    }
    if (*(unsigned char *)(a1 + 160))
    {
      long long v3 = (void **)(a1 + 136);
      std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
    }
    if (*(unsigned char *)(a1 + 128))
    {
      long long v3 = (void **)(a1 + 104);
      std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
    }
    std::__optional_destruct_base<ctb::chatbot::CommunicationAddress,false>::~__optional_destruct_base[abi:ne180100](a1);
  }
  return a1;
}

__n128 std::construct_at[abi:ne180100]<ctb::chatbot::RenderInformation,ctb::chatbot::RenderInformation,ctb::chatbot::RenderInformation*>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ctb::chatbot::BotInformation::BotInformation(a1, a2);
  *(unsigned char *)(v3 + 560) = 0;
  *(unsigned char *)(v3 + 584) = 0;
  if (*(unsigned char *)(a2 + 584))
  {
    *(void *)(v3 + 576) = 0;
    *(_OWORD *)(v3 + 560) = 0u;
    *(_OWORD *)(v3 + 560) = *(_OWORD *)(a2 + 560);
    *(void *)(v3 + 576) = *(void *)(a2 + 576);
    *(void *)(a2 + 576) = 0;
    *(_OWORD *)(a2 + 560) = 0u;
    *(unsigned char *)(v3 + 584) = 1;
  }
  *(unsigned char *)(v3 + 592) = *(unsigned char *)(a2 + 592);
  long long v4 = *(_OWORD *)(a2 + 600);
  *(void *)(v3 + 616) = *(void *)(a2 + 616);
  *(_OWORD *)(v3 + 600) = v4;
  *(void *)(a2 + 616) = 0;
  *(void *)(a2 + 608) = 0;
  *(void *)(a2 + 600) = 0;
  __n128 result = *(__n128 *)(a2 + 624);
  *(void *)(v3 + 640) = *(void *)(a2 + 640);
  *(__n128 *)(v3 + 624) = result;
  *(void *)(a2 + 640) = 0;
  *(void *)(a2 + 632) = 0;
  *(void *)(a2 + 624) = 0;
  *(unsigned char *)(v3 + 648) = 0;
  *(unsigned char *)(v3 + 672) = 0;
  if (*(unsigned char *)(a2 + 672))
  {
    __n128 result = *(__n128 *)(a2 + 648);
    *(void *)(v3 + 664) = *(void *)(a2 + 664);
    *(__n128 *)(v3 + 648) = result;
    *(void *)(a2 + 664) = 0;
    *(void *)(a2 + 656) = 0;
    *(void *)(a2 + 648) = 0;
    *(unsigned char *)(v3 + 672) = 1;
  }
  return result;
}

uint64_t ctb::chatbot::BotInformation::BotInformation(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 264) = 0;
  if (*(unsigned char *)(a2 + 264))
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails*>((unsigned char *)a1, a2);
    *(unsigned char *)(a1 + 264) = 1;
  }
  *(unsigned char *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 296) = 0;
  if (*(unsigned char *)(a2 + 296))
  {
    long long v4 = *(_OWORD *)(a2 + 272);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = v4;
    *(void *)(a2 + 280) = 0;
    *(void *)(a2 + 288) = 0;
    *(void *)(a2 + 272) = 0;
    *(unsigned char *)(a1 + 296) = 1;
  }
  *(unsigned char *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 328) = 0;
  if (*(unsigned char *)(a2 + 328))
  {
    long long v5 = *(_OWORD *)(a2 + 304);
    *(void *)(a1 + 320) = *(void *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = v5;
    *(void *)(a2 + 312) = 0;
    *(void *)(a2 + 320) = 0;
    *(void *)(a2 + 304) = 0;
    *(unsigned char *)(a1 + 328) = 1;
  }
  *(unsigned char *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 360) = 0;
  if (*(unsigned char *)(a2 + 360))
  {
    long long v6 = *(_OWORD *)(a2 + 336);
    *(void *)(a1 + 352) = *(void *)(a2 + 352);
    *(_OWORD *)(a1 + 336) = v6;
    *(void *)(a2 + 344) = 0;
    *(void *)(a2 + 352) = 0;
    *(void *)(a2 + 336) = 0;
    *(unsigned char *)(a1 + 360) = 1;
  }
  *(unsigned char *)(a1 + 368) = 0;
  *(unsigned char *)(a1 + 392) = 0;
  if (*(unsigned char *)(a2 + 392))
  {
    long long v7 = *(_OWORD *)(a2 + 368);
    *(void *)(a1 + 384) = *(void *)(a2 + 384);
    *(_OWORD *)(a1 + 368) = v7;
    *(void *)(a2 + 376) = 0;
    *(void *)(a2 + 384) = 0;
    *(void *)(a2 + 368) = 0;
    *(unsigned char *)(a1 + 392) = 1;
  }
  *(unsigned char *)(a1 + 400) = 0;
  *(unsigned char *)(a1 + 424) = 0;
  if (*(unsigned char *)(a2 + 424))
  {
    long long v8 = *(_OWORD *)(a2 + 400);
    *(void *)(a1 + 416) = *(void *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = v8;
    *(void *)(a2 + 408) = 0;
    *(void *)(a2 + 416) = 0;
    *(void *)(a2 + 400) = 0;
    *(unsigned char *)(a1 + 424) = 1;
  }
  *(unsigned char *)(a1 + 432) = 0;
  *(unsigned char *)(a1 + 456) = 0;
  if (*(unsigned char *)(a2 + 456))
  {
    long long v9 = *(_OWORD *)(a2 + 432);
    *(void *)(a1 + 448) = *(void *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = v9;
    *(void *)(a2 + 440) = 0;
    *(void *)(a2 + 448) = 0;
    *(void *)(a2 + 432) = 0;
    *(unsigned char *)(a1 + 456) = 1;
  }
  *(unsigned char *)(a1 + 464) = 0;
  *(unsigned char *)(a1 + 488) = 0;
  if (*(unsigned char *)(a2 + 488))
  {
    long long v10 = *(_OWORD *)(a2 + 464);
    *(void *)(a1 + 480) = *(void *)(a2 + 480);
    *(_OWORD *)(a1 + 464) = v10;
    *(void *)(a2 + 472) = 0;
    *(void *)(a2 + 480) = 0;
    *(void *)(a2 + 464) = 0;
    *(unsigned char *)(a1 + 488) = 1;
  }
  *(unsigned char *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  if (*(unsigned char *)(a2 + 520))
  {
    long long v11 = *(_OWORD *)(a2 + 496);
    *(void *)(a1 + 512) = *(void *)(a2 + 512);
    *(_OWORD *)(a1 + 496) = v11;
    *(void *)(a2 + 504) = 0;
    *(void *)(a2 + 512) = 0;
    *(void *)(a2 + 496) = 0;
    *(unsigned char *)(a1 + 520) = 1;
  }
  *(unsigned char *)(a1 + 528) = 0;
  *(unsigned char *)(a1 + 552) = 0;
  if (*(unsigned char *)(a2 + 552))
  {
    *(void *)(a1 + 544) = 0;
    *(_OWORD *)(a1 + 528) = 0u;
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
    *(void *)(a2 + 544) = 0;
    *(_OWORD *)(a2 + 528) = 0u;
    *(unsigned char *)(a1 + 552) = 1;
  }
  return a1;
}

std::string *std::__optional_copy_base<ctb::chatbot::RenderInformation,false>::__optional_copy_base[abi:ne180100](std::string *this, const ctb::chatbot::RenderInformation *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[28].__r_.__value_.__s.__data_[8] = 0;
  if (*((unsigned char *)a2 + 680))
  {
    ctb::chatbot::RenderInformation::RenderInformation(this, a2);
    this[28].__r_.__value_.__s.__data_[8] = 1;
  }
  return this;
}

void sub_249560714(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ctb::chatbot::RenderInformation,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *ctb::chatbot::RenderInformation::RenderInformation(std::string *this, const ctb::chatbot::RenderInformation *a2)
{
  long long v4 = ctb::chatbot::BotInformation::BotInformation((ctb::chatbot::BotInformation *)this, a2);
  std::__optional_copy_base<ctb::chatbot::MenuItem,false>::__optional_copy_base[abi:ne180100]((uint64_t)v4 + 560, (uint64_t)a2 + 560);
  this[24].__r_.__value_.__s.__data_[16] = *((unsigned char *)a2 + 592);
  if (*((char *)a2 + 623) < 0)
  {
    std::string::__init_copy_ctor_external(this + 25, *((const std::string::value_type **)a2 + 75), *((void *)a2 + 76));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 600);
    this[25].__r_.__value_.__r.__words[2] = *((void *)a2 + 77);
    *(_OWORD *)&this[25].__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = this + 26;
  if (*((char *)a2 + 647) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 78), *((void *)a2 + 79));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 39);
    this[26].__r_.__value_.__r.__words[2] = *((void *)a2 + 80);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 27, (long long *)((char *)a2 + 648));
  return this;
}

void sub_2495607F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*((char *)v10 + 623) < 0) {
    operator delete(*v11);
  }
  if (*((unsigned char *)v10 + 584)) {
    std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  ctb::chatbot::BotInformation::~BotInformation(v10);
  _Unwind_Resume(a1);
}

ctb::chatbot::BotInformation *ctb::chatbot::BotInformation::BotInformation(ctb::chatbot::BotInformation *this, const ctb::chatbot::BotInformation *a2)
{
  long long v4 = std::__optional_copy_base<ctb::chatbot::OrgDetails,false>::__optional_copy_base[abi:ne180100](this, a2);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)v4 + 272), (long long *)a2 + 17);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 304), (long long *)a2 + 19);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 14, (long long *)a2 + 21);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 368), (long long *)a2 + 23);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 400), (long long *)a2 + 25);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 18, (long long *)a2 + 27);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 464), (long long *)a2 + 29);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 496), (long long *)a2 + 31);
  std::__optional_copy_base<ctb::chatbot::AddressEntryList,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 528, (uint64_t)a2 + 528);
  return this;
}

void sub_24956091C(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 520) && *(char *)(v1 + 519) < 0) {
    operator delete(*v8);
  }
  if (*(unsigned char *)(v1 + 488) && *(char *)(v1 + 487) < 0) {
    operator delete(*v7);
  }
  if (*(unsigned char *)(v1 + 456) && *(char *)(v1 + 455) < 0) {
    operator delete(*v6);
  }
  if (*(unsigned char *)(v1 + 424) && *(char *)(v1 + 423) < 0) {
    operator delete(*v5);
  }
  if (*(unsigned char *)(v1 + 392) && *(char *)(v1 + 391) < 0) {
    operator delete(*v4);
  }
  if (*(unsigned char *)(v1 + 360) && *(char *)(v1 + 359) < 0) {
    operator delete(*v3);
  }
  if (*(unsigned char *)(v1 + 328))
  {
    if (*(char *)(v1 + 327) < 0) {
      operator delete(*v2);
    }
  }
  ctb::chatbot::PCC::~PCC((void **)v1);
  _Unwind_Resume(a1);
}

void sub_249560A10()
{
  std::__optional_destruct_base<ctb::chatbot::OrgDetails,false>::~__optional_destruct_base[abi:ne180100](v0);
  JUMPOUT(0x249560A08);
}

ctb::chatbot::OrgDetails *std::__optional_copy_base<ctb::chatbot::OrgDetails,false>::__optional_copy_base[abi:ne180100](ctb::chatbot::OrgDetails *this, const ctb::chatbot::OrgDetails *a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 264) = 0;
  if (*((unsigned char *)a2 + 264))
  {
    ctb::chatbot::OrgDetails::OrgDetails(this, a2);
    *((unsigned char *)this + 264) = 1;
  }
  return this;
}

void sub_249560A64(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ctb::chatbot::OrgDetails,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

ctb::chatbot::OrgDetails *ctb::chatbot::OrgDetails::OrgDetails(ctb::chatbot::OrgDetails *this, const ctb::chatbot::OrgDetails *a2)
{
  long long v4 = std::__optional_copy_base<ctb::chatbot::CommunicationAddress,false>::__optional_copy_base[abi:ne180100]((std::string *)this, a2);
  std::__optional_copy_base<ctb::chatbot::MediaList,false>::__optional_copy_base[abi:ne180100]((uint64_t)&v4[4].__r_.__value_.__l.__size_, (uint64_t)a2 + 104);
  std::__optional_copy_base<ctb::chatbot::OrgName,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 136), (uint64_t)a2 + 136);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 7, (long long *)((char *)a2 + 168));
  std::__optional_copy_base<ctb::chatbot::CategoryList,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 200), (uint64_t)a2 + 200);
  std::__optional_copy_base<ctb::chatbot::WebResources,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 232, (uint64_t)a2 + 232);
  return this;
}

void sub_249560B08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2[224]) {
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  }
  if (v2[192] && (char)v2[191] < 0) {
    operator delete(*v3);
  }
  if (v2[160]) {
    std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  }
  if (v2[128]) {
    std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  }
  std::__optional_destruct_base<ctb::chatbot::CommunicationAddress,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v2);
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<ctb::chatbot::CommunicationAddress,false>::__optional_copy_base[abi:ne180100](std::string *this, const ctb::chatbot::CommunicationAddress *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[4].__r_.__value_.__s.__data_[0] = 0;
  if (*((unsigned char *)a2 + 96))
  {
    ctb::chatbot::CommunicationAddress::CommunicationAddress(this, a2);
    this[4].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_249560BD4(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ctb::chatbot::CommunicationAddress,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *ctb::chatbot::CommunicationAddress::CommunicationAddress(std::string *this, const ctb::chatbot::CommunicationAddress *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::chatbot::URIEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::URIEntry*,ctb::chatbot::URIEntry*>(this + 3, *((void *)a2 + 9), *((void *)a2 + 10), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 3));
  return this;
}

void sub_249560CC4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<ctb::chatbot::URIEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::URIEntry*,ctb::chatbot::URIEntry*>(std::string *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<ctb::chatbot::URIEntry>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::URIEntry>,ctb::chatbot::URIEntry*,ctb::chatbot::URIEntry*,ctb::chatbot::URIEntry*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_249560D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<ctb::chatbot::URIEntry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ctb::chatbot::URIEntry>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::URIEntry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::URIEntry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::URIEntry>,ctb::chatbot::URIEntry*,ctb::chatbot::URIEntry*,ctb::chatbot::URIEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  long long v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  uint64_t v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v4, (long long *)v6);
      v4[1].__r_.__value_.__l.__size_ = *(void *)(v6 + 32);
      uint64_t v4 = (std::string *)((char *)v11 + 40);
      long long v11 = (std::string *)((char *)v11 + 40);
      v6 += 40;
    }
    while (v6 != a3);
  }
  LOBYTE(v9) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::URIEntry>,ctb::chatbot::URIEntry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_249560EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::URIEntry>,ctb::chatbot::URIEntry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::URIEntry>,ctb::chatbot::URIEntry*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::URIEntry>,ctb::chatbot::URIEntry*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(unsigned char *)(v1 - 16))
    {
      if (*(char *)(v1 - 17) < 0) {
        operator delete(*(void **)(v1 - 40));
      }
    }
    v1 -= 40;
  }
}

uint64_t std::__optional_copy_base<ctb::chatbot::MediaList,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  std::__optional_storage_base<ctb::chatbot::MediaList,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::MediaList,false> const&>((void *)a1, a2);
  return a1;
}

void sub_249560F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(unsigned char *)(v10 + 24))
  {
    a10 = v10;
    std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::__optional_storage_base<ctb::chatbot::MediaList,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::MediaList,false> const&>(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    *__n128 result = 0;
    result[1] = 0;
    result[2] = 0;
    __n128 result = std::vector<ctb::chatbot::MediaEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::MediaEntry*,ctb::chatbot::MediaEntry*>(result, *(void *)a2, *(void *)(a2 + 8), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

void *std::vector<ctb::chatbot::MediaEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::MediaEntry*,ctb::chatbot::MediaEntry*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<ctb::chatbot::MediaEntry>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::MediaEntry>,ctb::chatbot::MediaEntry*,ctb::chatbot::MediaEntry*,ctb::chatbot::MediaEntry*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_24956107C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ctb::chatbot::MediaEntry>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::MediaEntry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::MediaEntry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::MediaEntry>,ctb::chatbot::MediaEntry*,ctb::chatbot::MediaEntry*,ctb::chatbot::MediaEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<ctb::chatbot::MediaEntry,ctb::chatbot::MediaEntry&,ctb::chatbot::MediaEntry*>(a4 + v7, a2 + v7);
      v7 += 72;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2495611A0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 72;
    do
    {
      std::__destroy_at[abi:ne180100]<ctb::chatbot::MediaEntry,0>(v4 + v2);
      v2 -= 72;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<ctb::chatbot::MediaEntry,ctb::chatbot::MediaEntry&,ctb::chatbot::MediaEntry*>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 32), (long long *)(a2 + 32));
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return a1;
}

{
  long long v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 32), (long long *)(a2 + 32));
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return a1;
}

void sub_249561240(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<ctb::chatbot::OrgName,false>::__optional_copy_base[abi:ne180100](std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<ctb::chatbot::OrgName,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::OrgName,false> const&>(a1, a2);
  return a1;
}

void sub_249561294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(unsigned char *)(v10 + 24))
  {
    a10 = v10;
    std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_storage_base<ctb::chatbot::OrgName,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::OrgName,false> const&>(std::string *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    result->__r_.__value_.__r.__words[0] = 0;
    result->__r_.__value_.__l.__size_ = 0;
    result->__r_.__value_.__r.__words[2] = 0;
    __n128 result = std::vector<ctb::chatbot::OrgNameEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::OrgNameEntry*,ctb::chatbot::OrgNameEntry*>(result, *(long long **)a2, *(long long **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
    v2[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return result;
}

std::string *std::vector<ctb::chatbot::OrgNameEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::OrgNameEntry*,ctb::chatbot::OrgNameEntry*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<ctb::chatbot::OrgNameEntry>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::OrgNameEntry>,ctb::chatbot::OrgNameEntry*,ctb::chatbot::OrgNameEntry*,ctb::chatbot::OrgNameEntry*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_249561368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ctb::chatbot::OrgNameEntry>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::OrgNameEntry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::OrgNameEntry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::OrgNameEntry>,ctb::chatbot::OrgNameEntry*,ctb::chatbot::OrgNameEntry*,ctb::chatbot::OrgNameEntry*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  long long v12 = this;
  v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  uint64_t v11 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        long long v8 = v13;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        long long v8 = v4;
      }
      LODWORD(v4[1].__r_.__value_.__l.__data_) = *((_DWORD *)v6 + 6);
      v6 += 2;
      uint64_t v4 = (std::string *)((char *)v8 + 32);
      v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  LOBYTE(v11) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::OrgNameEntry>,ctb::chatbot::OrgNameEntry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_2495614B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::OrgNameEntry>,ctb::chatbot::OrgNameEntry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::OrgNameEntry>,ctb::chatbot::OrgNameEntry*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::OrgNameEntry>,ctb::chatbot::OrgNameEntry*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0) {
      operator delete(*(void **)(v1 - 32));
    }
    v1 -= 32;
  }
}

std::string *std::__optional_copy_base<ctb::chatbot::CategoryList,false>::__optional_copy_base[abi:ne180100](std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<ctb::chatbot::CategoryList,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::CategoryList,false> const&>(a1, a2);
  return a1;
}

void sub_249561584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(unsigned char *)(v10 + 24))
  {
    a10 = v10;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_storage_base<ctb::chatbot::CategoryList,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::CategoryList,false> const&>(std::string *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    result->__r_.__value_.__r.__words[0] = 0;
    result->__r_.__value_.__l.__size_ = 0;
    result->__r_.__value_.__r.__words[2] = 0;
    __n128 result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(result, *(long long **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    v2[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return result;
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_249561664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  long long v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  uint64_t v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      long long v12 = ++v4;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2495617C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

uint64_t std::__optional_copy_base<ctb::chatbot::WebResources,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  std::__optional_storage_base<ctb::chatbot::WebResources,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::WebResources,false> const&>((void *)a1, a2);
  return a1;
}

void sub_249561894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(unsigned char *)(v10 + 24))
  {
    a10 = v10;
    std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::__optional_storage_base<ctb::chatbot::WebResources,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::WebResources,false> const&>(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    *__n128 result = 0;
    result[1] = 0;
    result[2] = 0;
    __n128 result = std::vector<ctb::chatbot::WebEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::WebEntry*,ctb::chatbot::WebEntry*>(result, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

void *std::vector<ctb::chatbot::WebEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::WebEntry*,ctb::chatbot::WebEntry*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<ctb::CPIMNamespace>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::WebEntry>,ctb::chatbot::WebEntry*,ctb::chatbot::WebEntry*,ctb::chatbot::WebEntry*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_249561974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::WebEntry>,ctb::chatbot::WebEntry*,ctb::chatbot::WebEntry*,ctb::chatbot::WebEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<ctb::chatbot::WebEntry,ctb::chatbot::WebEntry&,ctb::chatbot::WebEntry*>((std::string *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2495619F4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 48;
    do
    {
      std::__destroy_at[abi:ne180100]<ctb::CPIMNamespace,0>(v4 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<ctb::chatbot::WebEntry,ctb::chatbot::WebEntry&,ctb::chatbot::WebEntry*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

{
  long long v4;
  std::string *v5;
  long long v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_249561A94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<ctb::chatbot::AddressEntryList,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  std::__optional_storage_base<ctb::chatbot::AddressEntryList,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::AddressEntryList,false> const&>((void *)a1, a2);
  return a1;
}

void sub_249561AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(unsigned char *)(v10 + 24))
  {
    a10 = v10;
    std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::__optional_storage_base<ctb::chatbot::AddressEntryList,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::AddressEntryList,false> const&>(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    *__n128 result = 0;
    result[1] = 0;
    result[2] = 0;
    __n128 result = std::vector<ctb::chatbot::AddressEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::AddressEntry*,ctb::chatbot::AddressEntry*>(result, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

void *std::vector<ctb::chatbot::AddressEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::AddressEntry*,ctb::chatbot::AddressEntry*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<ctb::CPIMNamespace>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::AddressEntry>,ctb::chatbot::AddressEntry*,ctb::chatbot::AddressEntry*,ctb::chatbot::AddressEntry*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_249561BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::AddressEntry>,ctb::chatbot::AddressEntry*,ctb::chatbot::AddressEntry*,ctb::chatbot::AddressEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<ctb::chatbot::AddressEntry,ctb::chatbot::AddressEntry&,ctb::chatbot::AddressEntry*>((std::string *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_249561C48(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 48;
    do
    {
      std::__destroy_at[abi:ne180100]<ctb::CPIMNamespace,0>(v4 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<ctb::chatbot::AddressEntry,ctb::chatbot::AddressEntry&,ctb::chatbot::AddressEntry*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_249561CE8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<ctb::chatbot::MenuItem,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  std::__optional_storage_base<ctb::chatbot::MenuItem,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::MenuItem,false> const&>((void *)a1, a2);
  return a1;
}

void sub_249561D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(unsigned char *)(v10 + 24))
  {
    a10 = v10;
    std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::__optional_storage_base<ctb::chatbot::MenuItem,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::MenuItem,false> const&>(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    *__n128 result = 0;
    result[1] = 0;
    result[2] = 0;
    __n128 result = std::vector<ctb::chatbot::MenuL0Content>::__init_with_size[abi:ne180100]<ctb::chatbot::MenuL0Content*,ctb::chatbot::MenuL0Content*>(result, *(void *)a2, *(void *)(a2 + 8), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

void *std::vector<ctb::chatbot::MenuL0Content>::__init_with_size[abi:ne180100]<ctb::chatbot::MenuL0Content*,ctb::chatbot::MenuL0Content*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<ctb::chatbot::MenuL0Content>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::MenuL0Content>,ctb::chatbot::MenuL0Content*,ctb::chatbot::MenuL0Content*,ctb::chatbot::MenuL0Content*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_249561E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ctb::chatbot::MenuL0Content>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x108421084210843) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::MenuL0Content>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[248 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::MenuL0Content>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x108421084210843) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(248 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::MenuL0Content>,ctb::chatbot::MenuL0Content*,ctb::chatbot::MenuL0Content*,ctb::chatbot::MenuL0Content*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(_DWORD *)(a4 + v7) = *(_DWORD *)(a2 + v7);
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::__copy_constructor(a4 + v7 + 8, a2 + v7 + 8);
      v7 += 248;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_249561F50(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 240;
    do
    {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor(v4 + v2);
      v2 -= 248;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 232) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_249561FA8(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 232);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_26FD32360[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 232) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 232);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26FD32380[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 232) = v5;
  }
  return result;
}

std::string *std::__variant_detail::__alt<1ul,ctb::chatbot::MenuL1>::__alt[abi:ne180100]<ctb::chatbot::MenuL1 const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::chatbot::MenuL1Content>::__init_with_size[abi:ne180100]<ctb::chatbot::MenuL1Content*,ctb::chatbot::MenuL1Content*>(this[1].__r_.__value_.__r.__words, *((void *)a2 + 3), *((void *)a2 + 4), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  return this;
}

void sub_2495620CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<ctb::chatbot::MenuL1Content>::__init_with_size[abi:ne180100]<ctb::chatbot::MenuL1Content*,ctb::chatbot::MenuL1Content*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    std::vector<ctb::chatbot::MenuL0Content>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::MenuL1Content>,ctb::chatbot::MenuL1Content*,ctb::chatbot::MenuL1Content*,ctb::chatbot::MenuL1Content*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_249562150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::MenuL1Content>,ctb::chatbot::MenuL1Content*,ctb::chatbot::MenuL1Content*,ctb::chatbot::MenuL1Content*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(_DWORD *)(a4 + v7) = *(_DWORD *)(a2 + v7);
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::__copy_constructor(a4 + v7 + 8, a2 + v7 + 8);
      v7 += 248;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2495621D8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 240;
    do
    {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::~__dtor(v4 + v2);
      v2 -= 248;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 232) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_249562230(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 232);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_26FD32370[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 232) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 232);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26FD32390[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 232) = v5;
  }
  return result;
}

std::string *std::__variant_detail::__alt<1ul,ctb::chatbot::MenuL2>::__alt[abi:ne180100]<ctb::chatbot::MenuL2 const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::chatbot::MenuL2Content>::__init_with_size[abi:ne180100]<ctb::chatbot::MenuL2Content*,ctb::chatbot::MenuL2Content*>(this[1].__r_.__value_.__r.__words, *((void *)a2 + 3), *((void *)a2 + 4), 0x34F72C234F72C235 * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  return this;
}

void sub_249562354(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<ctb::chatbot::MenuL2Content>::__init_with_size[abi:ne180100]<ctb::chatbot::MenuL2Content*,ctb::chatbot::MenuL2Content*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    std::vector<ctb::chatbot::SuggestedChip>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::MenuL2Content>,ctb::chatbot::MenuL2Content*,ctb::chatbot::MenuL2Content*,ctb::chatbot::MenuL2Content*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2495623D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<ctb::chatbot::MenuL2Content>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::chatbot::MenuL2Content>,ctb::chatbot::MenuL2Content*,ctb::chatbot::MenuL2Content*,ctb::chatbot::MenuL2Content*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(_DWORD *)(a4 + v7) = *(_DWORD *)(a2 + v7);
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor(a4 + v7 + 8, a2 + v7 + 8);
      v7 += 232;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_249562460(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 224;
    do
    {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor(v4 + v2);
      v2 -= 232;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void **std::__optional_destruct_base<ctb::chatbot::RenderInformation,false>::~__optional_destruct_base[abi:ne180100](void **this)
{
  if (*((unsigned char *)this + 680))
  {
    if (*((unsigned char *)this + 672) && *((char *)this + 671) < 0) {
      operator delete(this[81]);
    }
    if (*((char *)this + 647) < 0) {
      operator delete(this[78]);
    }
    if (*((char *)this + 623) < 0) {
      operator delete(this[75]);
    }
    if (*((unsigned char *)this + 584))
    {
      uint64_t v3 = this + 70;
      std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100](&v3);
    }
    ctb::chatbot::BotInformation::~BotInformation((ctb::chatbot::BotInformation *)this);
  }
  return this;
}

void std::__optional_storage_base<ctb::ProvisioningConfiguration,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 1184) == *(unsigned __int8 *)(a2 + 1184))
  {
    if (*(unsigned char *)(a1 + 1184))
    {
      ctb::ProvisioningConfiguration::operator=(a1, a2);
    }
  }
  else if (*(unsigned char *)(a1 + 1184))
  {
    std::__optional_destruct_base<ctb::ProvisioningConfiguration,false>::reset[abi:ne180100](a1);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration,ctb::ProvisioningConfiguration,ctb::ProvisioningConfiguration*>(a1, a2);
    *(unsigned char *)(a1 + 1184) = 1;
  }
}

uint64_t ctb::ProvisioningConfiguration::operator=(uint64_t a1, uint64_t a2)
{
  std::__optional_storage_base<ctb::ProvisioningConfiguration::Token,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Token,false>>(a1, a2);
  long long v4 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  std::__optional_storage_base<ctb::ProvisioningConfiguration::AccessControl,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::AccessControl,false>>(a1 + 64, a2 + 64);
  std::__optional_storage_base<ctb::ProvisioningConfiguration::IMS3GPP,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::IMS3GPP,false>>((ctb::ProvisioningConfiguration::IMS3GPP *)(a1 + 120), a2 + 120);
  std::__optional_storage_base<ctb::ProvisioningConfiguration::Services,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Services,false>>(a1 + 656, (long long *)(a2 + 656));
  std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Messaging,false>>(a1 + 720, a2 + 720);
  long long v5 = *(_OWORD *)(a2 + 1144);
  long long v6 = *(_OWORD *)(a2 + 1160);
  *(unsigned char *)(a1 + 1176) = *(unsigned char *)(a2 + 1176);
  *(_OWORD *)(a1 + 1144) = v5;
  *(_OWORD *)(a1 + 1160) = v6;
  return a1;
}

void std::__optional_destruct_base<ctb::ProvisioningConfiguration,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1184))
  {
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging,false>::~__optional_destruct_base[abi:ne180100](a1 + 720);
    if (*(unsigned char *)(a1 + 712)) {
      std::__tree<std::string>::destroy(a1 + 688, *(char **)(a1 + 696));
    }
    if (*(unsigned char *)(a1 + 648)) {
      ctb::ProvisioningConfiguration::IMS3GPP::~IMS3GPP((ctb::ProvisioningConfiguration::IMS3GPP *)(a1 + 120));
    }
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::AccessControl,false>::~__optional_destruct_base[abi:ne180100](a1 + 64);
    if (*(unsigned char *)(a1 + 32))
    {
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*(void **)(a1 + 8));
      }
    }
    *(unsigned char *)(a1 + 1184) = 0;
  }
}

__n128 std::__optional_storage_base<ctb::ProvisioningConfiguration::Token,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Token,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      *(void *)a1 = *(void *)a2;
      long long v4 = (void **)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*v4);
      }
      __n128 result = *(__n128 *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(__n128 *)long long v4 = result;
      *(unsigned char *)(a2 + 31) = 0;
      *(unsigned char *)(a2 + 8) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 32))
  {
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    __n128 result = *(__n128 *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(__n128 *)(a1 + 8) = result;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return result;
}

void std::__optional_storage_base<ctb::ProvisioningConfiguration::AccessControl,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::AccessControl,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(unsigned char *)(a1 + 48))
    {
      std::__tree<std::string>::__move_assign(a1, (void *)a2);
      std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__vdeallocate((void **)(a1 + 24));
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 48))
  {
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::AccessControl,false>::reset[abi:ne180100](a1);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl*>((void *)a1, a2);
    *(unsigned char *)(a1 + 48) = 1;
  }
}

void std::__optional_destruct_base<ctb::ProvisioningConfiguration::AccessControl,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = (void **)(a1 + 24);
    std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100](&v2);
    std::__tree<std::string>::destroy(a1, *(char **)(a1 + 8));
    *(unsigned char *)(a1 + 48) = 0;
  }
}

void std::__tree<std::string>::__move_assign(uint64_t a1, void *a2)
{
  long long v4 = (void *)(a1 + 8);
  std::__tree<std::string>::destroy(a1, *(char **)(a1 + 8));
  *(void *)a1 = *a2;
  long long v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *long long v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    void *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(void *)a2);
    std::__tree<std::string>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>(v3);
      }
      while ((void *)v3 != v1);
      long long v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>(v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl*>(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  uint64_t v2 = (void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  a1[1] = v3;
  uint64_t v4 = a1 + 1;
  uint64_t v5 = *(void *)(a2 + 16);
  a1[2] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)a2 = v2;
    void *v2 = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *a1 = v4;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 3) = result;
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void std::__optional_storage_base<ctb::ProvisioningConfiguration::IMS3GPP,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::IMS3GPP,false>>(ctb::ProvisioningConfiguration::IMS3GPP *this, uint64_t a2)
{
  if (*((unsigned __int8 *)this + 528) == *(unsigned __int8 *)(a2 + 528))
  {
    if (*((unsigned char *)this + 528))
    {
      ctb::ProvisioningConfiguration::IMS3GPP::operator=((uint64_t)this, (long long *)a2);
    }
  }
  else if (*((unsigned char *)this + 528))
  {
    ctb::ProvisioningConfiguration::IMS3GPP::~IMS3GPP(this);
    *((unsigned char *)this + 528) = 0;
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::IMS3GPP,ctb::ProvisioningConfiguration::IMS3GPP,ctb::ProvisioningConfiguration::IMS3GPP*>((uint64_t)this, (long long *)a2);
    *((unsigned char *)this + 528) = 1;
  }
}

uint64_t ctb::ProvisioningConfiguration::IMS3GPP::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(a1 + 24, (__n128 *)((char *)a2 + 24));
  std::__tree<std::string>::__move_assign(a1 + 56, (void *)a2 + 7);
  std::__tree<std::string>::__move_assign(a1 + 80, (void *)a2 + 10);
  uint64_t v5 = (void **)(a1 + 104);
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 104);
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  *(_OWORD *)uint64_t v5 = v6;
  *((unsigned char *)a2 + 127) = 0;
  *((unsigned char *)a2 + 104) = 0;
  uint64_t v7 = (void **)(a1 + 128);
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*v7);
  }
  long long v8 = a2[8];
  *(void *)(a1 + 144) = *((void *)a2 + 18);
  *(_OWORD *)uint64_t v7 = v8;
  *((unsigned char *)a2 + 151) = 0;
  *((unsigned char *)a2 + 128) = 0;
  uint64_t v9 = *((void *)a2 + 21);
  *(_OWORD *)(a1 + 152) = *(long long *)((char *)a2 + 152);
  *(void *)(a1 + 168) = v9;
  uint64_t v10 = (void **)(a1 + 176);
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*v10);
  }
  long long v11 = a2[11];
  *(void *)(a1 + 192) = *((void *)a2 + 24);
  *(_OWORD *)uint64_t v10 = v11;
  *((unsigned char *)a2 + 199) = 0;
  *((unsigned char *)a2 + 176) = 0;
  long long v12 = (void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*v12);
  }
  long long v13 = *(long long *)((char *)a2 + 200);
  *(void *)(a1 + 216) = *((void *)a2 + 27);
  *(_OWORD *)long long v12 = v13;
  *((unsigned char *)a2 + 223) = 0;
  *((unsigned char *)a2 + 200) = 0;
  v14 = (void **)(a1 + 224);
  if (*(char *)(a1 + 247) < 0) {
    operator delete(*v14);
  }
  long long v15 = a2[14];
  *(void *)(a1 + 240) = *((void *)a2 + 30);
  *(_OWORD *)v14 = v15;
  *((unsigned char *)a2 + 247) = 0;
  *((unsigned char *)a2 + 224) = 0;
  v16 = (void **)(a1 + 248);
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*v16);
  }
  long long v17 = *(long long *)((char *)a2 + 248);
  *(void *)(a1 + 264) = *((void *)a2 + 33);
  *(_OWORD *)v16 = v17;
  *((unsigned char *)a2 + 271) = 0;
  *((unsigned char *)a2 + 248) = 0;
  v18 = (void **)(a1 + 272);
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*v18);
  }
  long long v19 = a2[17];
  *(void *)(a1 + 288) = *((void *)a2 + 36);
  *(_OWORD *)v18 = v19;
  *((unsigned char *)a2 + 295) = 0;
  *((unsigned char *)a2 + 272) = 0;
  v20 = (void **)(a1 + 296);
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*v20);
  }
  long long v21 = *(long long *)((char *)a2 + 296);
  *(void *)(a1 + 312) = *((void *)a2 + 39);
  *(_OWORD *)v20 = v21;
  *((unsigned char *)a2 + 319) = 0;
  *((unsigned char *)a2 + 296) = 0;
  v22 = (void **)(a1 + 320);
  if (*(char *)(a1 + 343) < 0) {
    operator delete(*v22);
  }
  long long v23 = a2[20];
  *(void *)(a1 + 336) = *((void *)a2 + 42);
  *(_OWORD *)v22 = v23;
  *((unsigned char *)a2 + 343) = 0;
  *((unsigned char *)a2 + 320) = 0;
  v24 = (void **)(a1 + 344);
  if (*(char *)(a1 + 367) < 0) {
    operator delete(*v24);
  }
  long long v25 = *(long long *)((char *)a2 + 344);
  *(void *)(a1 + 360) = *((void *)a2 + 45);
  *(_OWORD *)v24 = v25;
  *((unsigned char *)a2 + 367) = 0;
  *((unsigned char *)a2 + 344) = 0;
  v26 = (void **)(a1 + 368);
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*v26);
  }
  long long v27 = a2[23];
  *(void *)(a1 + 384) = *((void *)a2 + 48);
  *(_OWORD *)v26 = v27;
  *((unsigned char *)a2 + 391) = 0;
  *((unsigned char *)a2 + 368) = 0;
  v28 = (void **)(a1 + 392);
  if (*(char *)(a1 + 415) < 0) {
    operator delete(*v28);
  }
  long long v29 = *(long long *)((char *)a2 + 392);
  *(void *)(a1 + 408) = *((void *)a2 + 51);
  *(_OWORD *)v28 = v29;
  *((unsigned char *)a2 + 415) = 0;
  *((unsigned char *)a2 + 392) = 0;
  v30 = (void **)(a1 + 416);
  if (*(char *)(a1 + 439) < 0) {
    operator delete(*v30);
  }
  long long v31 = a2[26];
  *(void *)(a1 + 432) = *((void *)a2 + 54);
  *(_OWORD *)v30 = v31;
  *((unsigned char *)a2 + 439) = 0;
  *((unsigned char *)a2 + 416) = 0;
  v32 = (void **)(a1 + 440);
  if (*(char *)(a1 + 463) < 0) {
    operator delete(*v32);
  }
  long long v33 = *(long long *)((char *)a2 + 440);
  *(void *)(a1 + 456) = *((void *)a2 + 57);
  *(_OWORD *)v32 = v33;
  *((unsigned char *)a2 + 463) = 0;
  *((unsigned char *)a2 + 440) = 0;
  v34 = (void **)(a1 + 464);
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*v34);
  }
  long long v35 = a2[29];
  *(void *)(a1 + 480) = *((void *)a2 + 60);
  *(_OWORD *)v34 = v35;
  *((unsigned char *)a2 + 487) = 0;
  *((unsigned char *)a2 + 464) = 0;
  long long v36 = *(long long *)((char *)a2 + 488);
  long long v37 = *(long long *)((char *)a2 + 504);
  *(_WORD *)(a1 + 520) = *((_WORD *)a2 + 260);
  *(_OWORD *)(a1 + 488) = v36;
  *(_OWORD *)(a1 + 504) = v37;
  return a1;
}

void ctb::ProvisioningConfiguration::IMS3GPP::~IMS3GPP(ctb::ProvisioningConfiguration::IMS3GPP *this)
{
  if (*((char *)this + 487) < 0) {
    operator delete(*((void **)this + 58));
  }
  if (*((char *)this + 463) < 0) {
    operator delete(*((void **)this + 55));
  }
  if (*((char *)this + 439) < 0) {
    operator delete(*((void **)this + 52));
  }
  if (*((char *)this + 415) < 0) {
    operator delete(*((void **)this + 49));
  }
  if (*((char *)this + 391) < 0) {
    operator delete(*((void **)this + 46));
  }
  if (*((char *)this + 367) < 0) {
    operator delete(*((void **)this + 43));
  }
  if (*((char *)this + 343) < 0) {
    operator delete(*((void **)this + 40));
  }
  if (*((char *)this + 319) < 0) {
    operator delete(*((void **)this + 37));
  }
  if (*((char *)this + 295) < 0) {
    operator delete(*((void **)this + 34));
  }
  if (*((char *)this + 271) < 0) {
    operator delete(*((void **)this + 31));
  }
  if (*((char *)this + 247) < 0) {
    operator delete(*((void **)this + 28));
  }
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  std::__tree<std::string>::destroy((uint64_t)this + 80, *((char **)this + 11));
  std::__tree<std::string>::destroy((uint64_t)this + 56, *((char **)this + 8));
  if (*((unsigned char *)this + 48) && *((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

__n128 std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::IMS3GPP,ctb::ProvisioningConfiguration::IMS3GPP,ctb::ProvisioningConfiguration::IMS3GPP*>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*((unsigned char *)a2 + 48))
  {
    long long v3 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v3;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    *(unsigned char *)(a1 + 48) = 1;
  }
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  long long v4 = a2 + 4;
  uint64_t v5 = *((void *)a2 + 8);
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = a1 + 64;
  uint64_t v7 = *((void *)a2 + 9);
  *(void *)(a1 + 72) = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    *((void *)a2 + 7) = v4;
    *long long v4 = 0;
    *((void *)a2 + 9) = 0;
  }
  else
  {
    *(void *)(a1 + 56) = v6;
  }
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  long long v8 = (void *)a2 + 11;
  uint64_t v9 = *((void *)a2 + 11);
  *(void *)(a1 + 88) = v9;
  uint64_t v10 = a1 + 88;
  uint64_t v11 = *((void *)a2 + 12);
  *(void *)(a1 + 96) = v11;
  if (v11)
  {
    *(void *)(v9 + 16) = v10;
    *((void *)a2 + 10) = v8;
    *long long v8 = 0;
    *((void *)a2 + 12) = 0;
  }
  else
  {
    *(void *)(a1 + 80) = v10;
  }
  long long v12 = *(long long *)((char *)a2 + 104);
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  *(_OWORD *)(a1 + 104) = v12;
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 13) = 0;
  long long v13 = a2[8];
  *(void *)(a1 + 144) = *((void *)a2 + 18);
  *(_OWORD *)(a1 + 128) = v13;
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 16) = 0;
  long long v14 = *(long long *)((char *)a2 + 152);
  *(void *)(a1 + 168) = *((void *)a2 + 21);
  *(_OWORD *)(a1 + 152) = v14;
  long long v15 = a2[11];
  *(void *)(a1 + 192) = *((void *)a2 + 24);
  *(_OWORD *)(a1 + 176) = v15;
  *((void *)a2 + 22) = 0;
  *((void *)a2 + 23) = 0;
  *((void *)a2 + 24) = 0;
  long long v16 = *(long long *)((char *)a2 + 200);
  *(void *)(a1 + 216) = *((void *)a2 + 27);
  *(_OWORD *)(a1 + 200) = v16;
  *((void *)a2 + 25) = 0;
  *((void *)a2 + 26) = 0;
  *((void *)a2 + 27) = 0;
  long long v17 = a2[14];
  *(void *)(a1 + 240) = *((void *)a2 + 30);
  *(_OWORD *)(a1 + 224) = v17;
  *((void *)a2 + 28) = 0;
  *((void *)a2 + 29) = 0;
  *((void *)a2 + 30) = 0;
  long long v18 = *(long long *)((char *)a2 + 248);
  *(void *)(a1 + 264) = *((void *)a2 + 33);
  *(_OWORD *)(a1 + 248) = v18;
  *((void *)a2 + 31) = 0;
  *((void *)a2 + 32) = 0;
  *((void *)a2 + 33) = 0;
  long long v19 = a2[17];
  *(void *)(a1 + 288) = *((void *)a2 + 36);
  *(_OWORD *)(a1 + 272) = v19;
  *((void *)a2 + 34) = 0;
  *((void *)a2 + 35) = 0;
  *((void *)a2 + 36) = 0;
  long long v20 = *(long long *)((char *)a2 + 296);
  *(void *)(a1 + 312) = *((void *)a2 + 39);
  *(_OWORD *)(a1 + 296) = v20;
  *((void *)a2 + 37) = 0;
  *((void *)a2 + 38) = 0;
  *((void *)a2 + 39) = 0;
  long long v21 = a2[20];
  *(void *)(a1 + 336) = *((void *)a2 + 42);
  *(_OWORD *)(a1 + 320) = v21;
  *((void *)a2 + 40) = 0;
  *((void *)a2 + 41) = 0;
  *((void *)a2 + 42) = 0;
  long long v22 = *(long long *)((char *)a2 + 344);
  *(void *)(a1 + 360) = *((void *)a2 + 45);
  *(_OWORD *)(a1 + 344) = v22;
  *((void *)a2 + 43) = 0;
  *((void *)a2 + 44) = 0;
  *((void *)a2 + 45) = 0;
  long long v23 = a2[23];
  *(void *)(a1 + 384) = *((void *)a2 + 48);
  *(_OWORD *)(a1 + 368) = v23;
  *((void *)a2 + 46) = 0;
  *((void *)a2 + 47) = 0;
  *((void *)a2 + 48) = 0;
  long long v24 = *(long long *)((char *)a2 + 392);
  *(void *)(a1 + 408) = *((void *)a2 + 51);
  *(_OWORD *)(a1 + 392) = v24;
  *((void *)a2 + 49) = 0;
  *((void *)a2 + 50) = 0;
  *((void *)a2 + 51) = 0;
  long long v25 = a2[26];
  *(void *)(a1 + 432) = *((void *)a2 + 54);
  *(_OWORD *)(a1 + 416) = v25;
  *((void *)a2 + 52) = 0;
  *((void *)a2 + 53) = 0;
  *((void *)a2 + 54) = 0;
  long long v26 = *(long long *)((char *)a2 + 440);
  *(void *)(a1 + 456) = *((void *)a2 + 57);
  *(_OWORD *)(a1 + 440) = v26;
  *((void *)a2 + 55) = 0;
  *((void *)a2 + 56) = 0;
  *((void *)a2 + 57) = 0;
  long long v27 = a2[29];
  *(void *)(a1 + 480) = *((void *)a2 + 60);
  *(_OWORD *)(a1 + 464) = v27;
  *((void *)a2 + 58) = 0;
  *((void *)a2 + 59) = 0;
  *((void *)a2 + 60) = 0;
  __n128 result = *(__n128 *)((char *)a2 + 488);
  long long v29 = *(long long *)((char *)a2 + 504);
  *(_WORD *)(a1 + 520) = *((_WORD *)a2 + 260);
  *(__n128 *)(a1 + 488) = result;
  *(_OWORD *)(a1 + 504) = v29;
  return result;
}

void std::__optional_storage_base<ctb::ProvisioningConfiguration::Services,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Services,false>>(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 56) == *((unsigned __int8 *)a2 + 56))
  {
    if (*(unsigned char *)(a1 + 56))
    {
      long long v3 = *a2;
      *(_OWORD *)(a1 + 11) = *(long long *)((char *)a2 + 11);
      *(_OWORD *)a1 = v3;
      uint64_t v4 = a1 + 32;
      uint64_t v5 = a2 + 2;
      std::__tree<std::string>::__move_assign(v4, v5);
    }
  }
  else if (*(unsigned char *)(a1 + 56))
  {
    std::__tree<std::string>::destroy(a1 + 32, *(char **)(a1 + 40));
    *(unsigned char *)(a1 + 56) = 0;
  }
  else
  {
    long long v6 = *a2;
    *(_OWORD *)(a1 + 11) = *(long long *)((char *)a2 + 11);
    *(_OWORD *)a1 = v6;
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    uint64_t v7 = (void *)a2 + 5;
    uint64_t v8 = *((void *)a2 + 5);
    *(void *)(a1 + 40) = v8;
    uint64_t v9 = a1 + 40;
    uint64_t v10 = *((void *)a2 + 6);
    *(void *)(a1 + 48) = v10;
    if (v10)
    {
      *(void *)(v8 + 16) = v9;
      *((void *)a2 + 4) = v7;
      *uint64_t v7 = 0;
      *((void *)a2 + 6) = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v9;
    }
    *(unsigned char *)(a1 + 56) = 1;
  }
}

void std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Messaging,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 416) == *(unsigned __int8 *)(a2 + 416))
  {
    if (*(unsigned char *)(a1 + 416))
    {
      long long v4 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)a1 = v4;
      std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>>(a1 + 24, (long long *)(a2 + 24));
      std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>>(a1 + 120, (long long *)(a2 + 120));
      std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>>(a1 + 264, (long long *)(a2 + 264));
      std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg,false>>(a1 + 368, (long long *)(a2 + 368));
    }
  }
  else if (*(unsigned char *)(a1 + 416))
  {
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging,false>::reset[abi:ne180100](a1);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging*>(a1, a2);
    *(unsigned char *)(a1 + 416) = 1;
  }
}

uint64_t std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging,false>::reset[abi:ne180100](uint64_t result)
{
  if (*(unsigned char *)(result + 416))
  {
    uint64_t v1 = result;
    if (*(unsigned char *)(result + 408))
    {
      if (*(char *)(result + 391) < 0) {
        operator delete(*(void **)(result + 368));
      }
    }
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>::~__optional_destruct_base[abi:ne180100](v1 + 264);
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::~__optional_destruct_base[abi:ne180100](v1 + 120);
    __n128 result = std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::~__optional_destruct_base[abi:ne180100](v1 + 24);
    *(unsigned char *)(v1 + 416) = 0;
  }
  return result;
}

__n128 std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>>(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 88) == *((unsigned __int8 *)a2 + 88))
  {
    if (*(unsigned char *)(a1 + 88))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      long long v4 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((unsigned char *)a2 + 23) = 0;
      *(unsigned char *)a2 = 0;
      uint64_t v5 = (void **)(a1 + 24);
      if (*(char *)(a1 + 47) < 0) {
        operator delete(*v5);
      }
      long long v6 = *(long long *)((char *)a2 + 24);
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *(_OWORD *)uint64_t v5 = v6;
      *((unsigned char *)a2 + 47) = 0;
      *((unsigned char *)a2 + 24) = 0;
      uint64_t v7 = (void **)(a1 + 48);
      if (*(char *)(a1 + 71) < 0) {
        operator delete(*v7);
      }
      __n128 result = (__n128)a2[3];
      *(void *)(a1 + 64) = *((void *)a2 + 8);
      *(__n128 *)uint64_t v7 = result;
      *((unsigned char *)a2 + 71) = 0;
      *((unsigned char *)a2 + 48) = 0;
      uint64_t v9 = *((void *)a2 + 9);
      *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
      *(void *)(a1 + 72) = v9;
    }
  }
  else if (*(unsigned char *)(a1 + 88))
  {
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::reset[abi:ne180100](a1);
  }
  else
  {
    long long v10 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v10;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v11 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v11;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    __n128 result = (__n128)a2[3];
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(__n128 *)(a1 + 48) = result;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 6) = 0;
    uint64_t v12 = *((void *)a2 + 9);
    *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
    *(void *)(a1 + 72) = v12;
    *(unsigned char *)(a1 + 88) = 1;
  }
  return result;
}

void std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 88) = 0;
  }
}

__n128 std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>>(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 136) == *((unsigned __int8 *)a2 + 136))
  {
    if (*(unsigned char *)(a1 + 136))
    {
      long long v4 = *a2;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      *(_OWORD *)a1 = v4;
      uint64_t v5 = (void **)(a1 + 24);
      long long v6 = (long long *)((char *)a2 + 24);
      if (*(char *)(a1 + 47) < 0) {
        operator delete(*v5);
      }
      long long v7 = *v6;
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *(_OWORD *)uint64_t v5 = v7;
      *((unsigned char *)a2 + 47) = 0;
      *((unsigned char *)a2 + 24) = 0;
      uint64_t v8 = (void **)(a1 + 48);
      if (*(char *)(a1 + 71) < 0) {
        operator delete(*v8);
      }
      long long v9 = a2[3];
      *(void *)(a1 + 64) = *((void *)a2 + 8);
      *(_OWORD *)uint64_t v8 = v9;
      *((unsigned char *)a2 + 71) = 0;
      *((unsigned char *)a2 + 48) = 0;
      long long v10 = (void **)(a1 + 72);
      if (*(char *)(a1 + 95) < 0) {
        operator delete(*v10);
      }
      long long v11 = *(long long *)((char *)a2 + 72);
      *(void *)(a1 + 88) = *((void *)a2 + 11);
      *(_OWORD *)long long v10 = v11;
      *((unsigned char *)a2 + 95) = 0;
      *((unsigned char *)a2 + 72) = 0;
      uint64_t v12 = (void **)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        operator delete(*v12);
      }
      long long v13 = a2[6];
      *(void *)(a1 + 112) = *((void *)a2 + 14);
      *(_OWORD *)uint64_t v12 = v13;
      *((unsigned char *)a2 + 119) = 0;
      *((unsigned char *)a2 + 96) = 0;
      __n128 result = *(__n128 *)((char *)a2 + 120);
      *(__n128 *)(a1 + 120) = result;
    }
  }
  else if (*(unsigned char *)(a1 + 136))
  {
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::reset[abi:ne180100](a1);
  }
  else
  {
    long long v15 = *a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(_OWORD *)a1 = v15;
    long long v16 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v16;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    long long v17 = a2[3];
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v17;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 6) = 0;
    long long v18 = *(long long *)((char *)a2 + 72);
    *(void *)(a1 + 88) = *((void *)a2 + 11);
    *(_OWORD *)(a1 + 72) = v18;
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 11) = 0;
    long long v19 = a2[6];
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    *(_OWORD *)(a1 + 96) = v19;
    *((void *)a2 + 12) = 0;
    *((void *)a2 + 13) = 0;
    *((void *)a2 + 14) = 0;
    __n128 result = *(__n128 *)((char *)a2 + 120);
    *(__n128 *)(a1 + 120) = result;
    *(unsigned char *)(a1 + 136) = 1;
  }
  return result;
}

void std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    if (*(char *)(a1 + 119) < 0) {
      operator delete(*(void **)(a1 + 96));
    }
    if (*(char *)(a1 + 95) < 0) {
      operator delete(*(void **)(a1 + 72));
    }
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    *(unsigned char *)(a1 + 136) = 0;
  }
}

void std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>>(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 96) == *((unsigned __int8 *)a2 + 96))
  {
    if (*(unsigned char *)(a1 + 96))
    {
      long long v4 = *a2;
      long long v5 = a2[1];
      *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
      *(_OWORD *)a1 = v4;
      *(_OWORD *)(a1 + 16) = v5;
      long long v6 = (void **)(a1 + 40);
      long long v7 = (long long *)((char *)a2 + 40);
      if (*(char *)(a1 + 63) < 0) {
        operator delete(*v6);
      }
      long long v8 = *v7;
      *(void *)(a1 + 56) = *((void *)a2 + 7);
      *(_OWORD *)long long v6 = v8;
      *((unsigned char *)a2 + 63) = 0;
      *((unsigned char *)a2 + 40) = 0;
      std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(a1 + 64, (__n128 *)a2 + 4);
    }
  }
  else if (*(unsigned char *)(a1 + 96))
  {
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>::reset[abi:ne180100](a1);
  }
  else
  {
    __n128 v9 = (__n128)*a2;
    long long v10 = a2[1];
    *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
    *(__n128 *)a1 = v9;
    *(_OWORD *)(a1 + 16) = v10;
    long long v11 = *(long long *)((char *)a2 + 40);
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *(_OWORD *)(a1 + 40) = v11;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 5) = 0;
    *(unsigned char *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 88) = 0;
    if (*((unsigned char *)a2 + 88))
    {
      long long v12 = a2[4];
      *(void *)(a1 + 80) = *((void *)a2 + 10);
      *(_OWORD *)(a1 + 64) = v12;
      *((void *)a2 + 9) = 0;
      *((void *)a2 + 10) = 0;
      *((void *)a2 + 8) = 0;
      *(unsigned char *)(a1 + 88) = 1;
    }
    *(unsigned char *)(a1 + 96) = 1;
  }
}

void std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    if (*(unsigned char *)(a1 + 88) && *(char *)(a1 + 87) < 0) {
      operator delete(*(void **)(a1 + 64));
    }
    if (*(char *)(a1 + 63) < 0) {
      operator delete(*(void **)(a1 + 40));
    }
    *(unsigned char *)(a1 + 96) = 0;
  }
}

__n128 std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg,false>>(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == *((unsigned __int8 *)a2 + 40))
  {
    if (*(unsigned char *)(a1 + 40))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      long long v4 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((unsigned char *)a2 + 23) = 0;
      *(unsigned char *)a2 = 0;
      __n128 result = *(__n128 *)((char *)a2 + 24);
      *(__n128 *)(a1 + 24) = result;
    }
  }
  else if (*(unsigned char *)(a1 + 40))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 40) = 0;
  }
  else
  {
    long long v6 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v6;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    __n128 result = *(__n128 *)((char *)a2 + 24);
    *(__n128 *)(a1 + 24) = result;
    *(unsigned char *)(a1 + 40) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    if (*(unsigned char *)(a1 + 88) && *(char *)(a1 + 87) < 0) {
      operator delete(*(void **)(a1 + 64));
    }
    if (*(char *)(a1 + 63) < 0) {
      operator delete(*(void **)(a1 + 40));
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    if (*(char *)(a1 + 119) < 0) {
      operator delete(*(void **)(a1 + 96));
    }
    if (*(char *)(a1 + 95) < 0) {
      operator delete(*(void **)(a1 + 72));
    }
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

__n128 std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging*>(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(__n128 *)a1 = result;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  if (*(unsigned char *)(a2 + 112))
  {
    long long v3 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v3;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 24) = 0;
    long long v4 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v4;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 48) = 0;
    __n128 result = *(__n128 *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(__n128 *)(a1 + 72) = result;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 72) = 0;
    uint64_t v5 = *(void *)(a2 + 96);
    *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
    *(void *)(a1 + 96) = v5;
    *(unsigned char *)(a1 + 112) = 1;
  }
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 256) = 0;
  if (*(unsigned char *)(a2 + 256))
  {
    long long v6 = *(_OWORD *)(a2 + 120);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v6;
    long long v7 = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = v7;
    *(void *)(a2 + 152) = 0;
    *(void *)(a2 + 160) = 0;
    *(void *)(a2 + 144) = 0;
    long long v8 = *(_OWORD *)(a2 + 168);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = v8;
    *(void *)(a2 + 176) = 0;
    *(void *)(a2 + 184) = 0;
    *(void *)(a2 + 168) = 0;
    long long v9 = *(_OWORD *)(a2 + 192);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = v9;
    *(void *)(a2 + 192) = 0;
    *(void *)(a2 + 200) = 0;
    *(void *)(a2 + 208) = 0;
    long long v10 = *(_OWORD *)(a2 + 216);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = v10;
    *(void *)(a2 + 216) = 0;
    *(void *)(a2 + 224) = 0;
    *(void *)(a2 + 232) = 0;
    __n128 result = *(__n128 *)(a2 + 240);
    *(__n128 *)(a1 + 240) = result;
    *(unsigned char *)(a1 + 256) = 1;
  }
  *(unsigned char *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 360) = 0;
  if (*(unsigned char *)(a2 + 360))
  {
    long long v11 = *(_OWORD *)(a2 + 264);
    long long v12 = *(_OWORD *)(a2 + 280);
    *(_WORD *)(a1 + 296) = *(_WORD *)(a2 + 296);
    *(_OWORD *)(a1 + 264) = v11;
    *(_OWORD *)(a1 + 280) = v12;
    __n128 result = *(__n128 *)(a2 + 304);
    *(void *)(a1 + 320) = *(void *)(a2 + 320);
    *(__n128 *)(a1 + 304) = result;
    *(void *)(a2 + 312) = 0;
    *(void *)(a2 + 320) = 0;
    *(void *)(a2 + 304) = 0;
    *(unsigned char *)(a1 + 328) = 0;
    *(unsigned char *)(a1 + 352) = 0;
    if (*(unsigned char *)(a2 + 352))
    {
      __n128 result = *(__n128 *)(a2 + 328);
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      *(__n128 *)(a1 + 328) = result;
      *(void *)(a2 + 336) = 0;
      *(void *)(a2 + 344) = 0;
      *(void *)(a2 + 328) = 0;
      *(unsigned char *)(a1 + 352) = 1;
    }
    *(unsigned char *)(a1 + 360) = 1;
  }
  *(unsigned char *)(a1 + 368) = 0;
  *(unsigned char *)(a1 + 408) = 0;
  if (*(unsigned char *)(a2 + 408))
  {
    long long v13 = *(_OWORD *)(a2 + 368);
    *(void *)(a1 + 384) = *(void *)(a2 + 384);
    *(_OWORD *)(a1 + 368) = v13;
    *(void *)(a2 + 376) = 0;
    *(void *)(a2 + 384) = 0;
    *(void *)(a2 + 368) = 0;
    __n128 result = *(__n128 *)(a2 + 392);
    *(__n128 *)(a1 + 392) = result;
    *(unsigned char *)(a1 + 408) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 416))
  {
    if (*(unsigned char *)(a1 + 408) && *(char *)(a1 + 391) < 0) {
      operator delete(*(void **)(a1 + 368));
    }
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>::~__optional_destruct_base[abi:ne180100](a1 + 264);
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::~__optional_destruct_base[abi:ne180100](a1 + 120);
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::~__optional_destruct_base[abi:ne180100](a1 + 24);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<ctb::ProvisioningConfiguration::AccessControl,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    long long v3 = (void **)(a1 + 24);
    std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100](&v3);
    std::__tree<std::string>::destroy(a1, *(char **)(a1 + 8));
  }
  return a1;
}

uint64_t std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration,ctb::ProvisioningConfiguration,ctb::ProvisioningConfiguration*>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    *(void *)a1 = *(void *)a2;
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a1 + 32) = 1;
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  long long v7 = (void *)(a1 + 64);
  *(void *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 112) = 0;
  if (*(unsigned char *)(a2 + 112))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl*>(v7, a2 + 64);
    *(unsigned char *)(a1 + 112) = 1;
  }
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 648) = 0;
  if (*(unsigned char *)(a2 + 648))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::IMS3GPP,ctb::ProvisioningConfiguration::IMS3GPP,ctb::ProvisioningConfiguration::IMS3GPP*>(a1 + 120, (long long *)(a2 + 120));
    *(unsigned char *)(a1 + 648) = 1;
  }
  std::__optional_move_base<ctb::ProvisioningConfiguration::Services,false>::__optional_move_base[abi:ne180100](a1 + 656, (long long *)(a2 + 656));
  *(unsigned char *)(a1 + 720) = 0;
  *(unsigned char *)(a1 + 1136) = 0;
  if (*(unsigned char *)(a2 + 1136))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging*>(a1 + 720, a2 + 720);
    *(unsigned char *)(a1 + 1136) = 1;
  }
  long long v8 = *(_OWORD *)(a2 + 1144);
  long long v9 = *(_OWORD *)(a2 + 1160);
  *(void *)(a1 + 1176) = *(void *)(a2 + 1176);
  *(_OWORD *)(a1 + 1144) = v8;
  *(_OWORD *)(a1 + 1160) = v9;
  return a1;
}

uint64_t std::__optional_move_base<ctb::ProvisioningConfiguration::Services,false>::__optional_move_base[abi:ne180100](uint64_t result, long long *a2)
{
  *(unsigned char *)__n128 result = 0;
  *(unsigned char *)(result + 56) = 0;
  if (*((unsigned char *)a2 + 56))
  {
    long long v2 = *a2;
    *(_OWORD *)(result + 11) = *(long long *)((char *)a2 + 11);
    *(_OWORD *)__n128 result = v2;
    *(void *)(result + 32) = *((void *)a2 + 4);
    long long v3 = (void *)a2 + 5;
    uint64_t v4 = *((void *)a2 + 5);
    *(void *)(result + 40) = v4;
    uint64_t v5 = result + 40;
    uint64_t v6 = *((void *)a2 + 6);
    *(void *)(result + 48) = v6;
    if (v6)
    {
      *(void *)(v4 + 16) = v5;
      *((void *)a2 + 4) = v3;
      *long long v3 = 0;
      *((void *)a2 + 6) = 0;
    }
    else
    {
      *(void *)(result + 32) = v5;
    }
    *(unsigned char *)(result + 56) = 1;
  }
  return result;
}

ctb::ProvisioningConfiguration *std::__optional_copy_base<ctb::ProvisioningConfiguration,false>::__optional_copy_base[abi:ne180100](ctb::ProvisioningConfiguration *this, const ctb::ProvisioningConfiguration *a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 1184) = 0;
  if (*((unsigned char *)a2 + 1184))
  {
    ctb::ProvisioningConfiguration::ProvisioningConfiguration(this, a2);
    *((unsigned char *)this + 1184) = 1;
  }
  return this;
}

void sub_249564038(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ctb::ProvisioningConfiguration,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

ctb::ProvisioningConfiguration *ctb::ProvisioningConfiguration::ProvisioningConfiguration(ctb::ProvisioningConfiguration *this, const ctb::ProvisioningConfiguration *a2)
{
  uint64_t v4 = std::__optional_copy_base<ctb::ProvisioningConfiguration::Token,false>::__optional_copy_base[abi:ne180100](this, (uint64_t)a2);
  long long v5 = *(_OWORD *)((char *)a2 + 40);
  *((void *)v4 + 7) = *((void *)a2 + 7);
  *(_OWORD *)(v4 + 40) = v5;
  std::__optional_copy_base<ctb::ProvisioningConfiguration::AccessControl,false>::__optional_copy_base[abi:ne180100]((uint64_t)(v4 + 64), (uint64_t)a2 + 64);
  std::__optional_copy_base<ctb::ProvisioningConfiguration::IMS3GPP,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 5, (const ctb::ProvisioningConfiguration *)((char *)a2 + 120));
  std::__optional_copy_base<ctb::ProvisioningConfiguration::Services,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 656, (long long *)a2 + 41);
  std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging,false>::__optional_copy_base[abi:ne180100]((unsigned char *)this + 720, (uint64_t)a2 + 720);
  long long v6 = *(_OWORD *)((char *)a2 + 1144);
  long long v7 = *(_OWORD *)((char *)a2 + 1160);
  *((void *)this + 147) = *((void *)a2 + 147);
  *(_OWORD *)((char *)this + 1144) = v6;
  *(_OWORD *)((char *)this + 1160) = v7;
  return this;
}

void sub_2495640E0(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 712)) {
    ctb::ProvisioningConfiguration::ProvisioningConfiguration(v1);
  }
  if (*(unsigned char *)(v1 + 648)) {
    ctb::ProvisioningConfiguration::IMS3GPP::~IMS3GPP(v3);
  }
  std::__optional_destruct_base<ctb::ProvisioningConfiguration::AccessControl,false>::~__optional_destruct_base[abi:ne180100](v2);
  if (*(unsigned char *)(v1 + 32))
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
  }
  _Unwind_Resume(a1);
}

unsigned char *std::__optional_copy_base<ctb::ProvisioningConfiguration::Token,false>::__optional_copy_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[32] = 0;
  if (*(unsigned char *)(a2 + 32)) {
    std::__optional_storage_base<ctb::ProvisioningConfiguration::Token,false>::__construct[abi:ne180100]<ctb::ProvisioningConfiguration::Token const&>((uint64_t)a1, a2);
  }
  return a1;
}

void sub_249564180(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 32)) {
    std::__optional_copy_base<ctb::ProvisioningConfiguration::Token,false>::__optional_copy_base[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<ctb::ProvisioningConfiguration::Token,false>::__construct[abi:ne180100]<ctb::ProvisioningConfiguration::Token const&>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v3 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    v3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(unsigned char *)(a1 + 32) = 1;
}

uint64_t std::__optional_copy_base<ctb::ProvisioningConfiguration::AccessControl,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl const&,ctb::ProvisioningConfiguration::AccessControl*>((uint64_t *)a1, a2);
    *(unsigned char *)(a1 + 48) = 1;
  }
  return a1;
}

void sub_24956423C(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ctb::ProvisioningConfiguration::AccessControl,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl const&,ctb::ProvisioningConfiguration::AccessControl*>(uint64_t *a1, uint64_t a2)
{
  long long v4 = std::set<std::string>::set[abi:ne180100](a1, a2);
  v4[3] = 0;
  v4[4] = 0;
  v4 += 3;
  v4[2] = 0;
  std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__init_with_size[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server*,ctb::ProvisioningConfiguration::AccessControl::Server*>(v4, *(void *)(a2 + 24), *(void *)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  return a1;
}

void sub_2495642A8(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_249564300(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    long long v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      __n128 result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      long long v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          long long v8 = v7;
          long long v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v9 = 0;
  long long v10 = 0;
  uint64_t v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  __n128 result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a4, v8);
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void **std::__tree<std::string>::__find_equal<std::string>(void *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  uint64_t v9 = (void **)(a1 + 1);
  if (a1 + 1 == (void *)a2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      long long v12 = (void *)a2;
    }
    else
    {
      long long v11 = *(void **)a2;
      if (*(void *)a2)
      {
        do
        {
          long long v12 = v11;
          long long v11 = (void *)v11[1];
        }
        while (v11);
      }
      else
      {
        long long v16 = (void *)a2;
        do
        {
          long long v12 = (void *)v16[2];
          BOOL v17 = *v12 == (void)v16;
          long long v16 = v12;
        }
        while (v17);
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12 + 4, a5) & 0x80) == 0) {
        goto LABEL_17;
      }
    }
    if (*(void *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }
    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a2 + 32), a5) & 0x80) == 0)
  {
    *a3 = (void **)a2;
    *a4 = a2;
    return (void **)a4;
  }
  a4 = (uint64_t *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    long long v14 = *(void ***)(a2 + 8);
    do
    {
      long long v15 = v14;
      long long v14 = (void **)*v14;
    }
    while (v14);
  }
  else
  {
    long long v19 = (void **)a2;
    do
    {
      long long v15 = (void **)v19[2];
      BOOL v17 = *v15 == v19;
      long long v19 = v15;
    }
    while (!v17);
  }
  if (v15 == v9)
  {
LABEL_29:
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (void **)a2;
    }
    return (void **)a4;
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, v15 + 4) & 0x80) != 0)
  {
    uint64_t v13 = *a4;
    goto LABEL_29;
  }
LABEL_17:

  return (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  uint64_t v6 = a3 + 1;
  long long v7 = (char *)operator new(0x38uLL);
  *a3 = v7;
  *uint64_t v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  long long v8 = (std::string *)(v7 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v8->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  *((unsigned char *)a3 + 16) = 1;
}

void sub_24956465C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v2, v3);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void *std::__tree<std::string>::__find_equal<std::string>(uint64_t a1, void *a2, void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  long long v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        long long v7 = v4;
        long long v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0) {
          break;
        }
        long long v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      long long v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    long long v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      size_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      size_t v3 = (uint64_t *)v2[2];
      int v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            long long v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              size_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            size_t v3 = v9[2];
            size_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *size_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            size_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          size_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        size_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__init_with_size[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server*,ctb::ProvisioningConfiguration::AccessControl::Server*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>,ctb::ProvisioningConfiguration::AccessControl::Server*,ctb::ProvisioningConfiguration::AccessControl::Server*,ctb::ProvisioningConfiguration::AccessControl::Server*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_249564A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>,ctb::ProvisioningConfiguration::AccessControl::Server*,ctb::ProvisioningConfiguration::AccessControl::Server*,ctb::ProvisioningConfiguration::AccessControl::Server*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,ctb::ProvisioningConfiguration::AccessControl::Server&,ctb::ProvisioningConfiguration::AccessControl::Server*>((std::string *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_249564B80(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 56;
    do
    {
      std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>(v4 + v2);
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,ctb::ProvisioningConfiguration::AccessControl::Server&,ctb::ProvisioningConfiguration::AccessControl::Server*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__s.__data_[0] = *((unsigned char *)a2 + 48);
  return this;
}

{
  long long v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__s.__data_[0] = *((unsigned char *)a2 + 48);
  return this;
}

void sub_249564C08(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<ctb::ProvisioningConfiguration::IMS3GPP,false>::__optional_copy_base[abi:ne180100](std::string *this, const ctb::ProvisioningConfiguration::IMS3GPP *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[22].__r_.__value_.__s.__data_[0] = 0;
  if (*((unsigned char *)a2 + 528))
  {
    ctb::ProvisioningConfiguration::IMS3GPP::IMS3GPP(this, a2);
    this[22].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_249564C68(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 528)) {
    ctb::ProvisioningConfiguration::IMS3GPP::~IMS3GPP(v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *ctb::ProvisioningConfiguration::IMS3GPP::IMS3GPP(std::string *this, const ctb::ProvisioningConfiguration::IMS3GPP *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 1, (long long *)((char *)a2 + 24));
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[2].__r_.__value_.__l.__size_, (uint64_t)a2 + 56);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[3].__r_.__value_.__l.__size_, (uint64_t)a2 + 80);
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 104), *((const std::string::value_type **)a2 + 13), *((void *)a2 + 14));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 104);
    this[5].__r_.__value_.__r.__words[0] = *((void *)a2 + 15);
    *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = v5;
  }
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 128), *((const std::string::value_type **)a2 + 16), *((void *)a2 + 17));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 8);
    this[6].__r_.__value_.__r.__words[0] = *((void *)a2 + 18);
    *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = v6;
  }
  long long v7 = *(_OWORD *)((char *)a2 + 152);
  this[7].__r_.__value_.__r.__words[0] = *((void *)a2 + 21);
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = v7;
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 176), *((const std::string::value_type **)a2 + 22), *((void *)a2 + 23));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 11);
    this[8].__r_.__value_.__r.__words[0] = *((void *)a2 + 24);
    *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = v8;
  }
  if (*((char *)a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 200), *((const std::string::value_type **)a2 + 25), *((void *)a2 + 26));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 200);
    this[9].__r_.__value_.__r.__words[0] = *((void *)a2 + 27);
    *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = v9;
  }
  if (*((char *)a2 + 247) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 224), *((const std::string::value_type **)a2 + 28), *((void *)a2 + 29));
  }
  else
  {
    long long v10 = *((_OWORD *)a2 + 14);
    this[10].__r_.__value_.__r.__words[0] = *((void *)a2 + 30);
    *(_OWORD *)&this[9].__r_.__value_.__r.__words[1] = v10;
  }
  if (*((char *)a2 + 271) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 248), *((const std::string::value_type **)a2 + 31), *((void *)a2 + 32));
  }
  else
  {
    long long v11 = *(_OWORD *)((char *)a2 + 248);
    this[11].__r_.__value_.__r.__words[0] = *((void *)a2 + 33);
    *(_OWORD *)&this[10].__r_.__value_.__r.__words[1] = v11;
  }
  if (*((char *)a2 + 295) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 272), *((const std::string::value_type **)a2 + 34), *((void *)a2 + 35));
  }
  else
  {
    long long v12 = *((_OWORD *)a2 + 17);
    this[12].__r_.__value_.__r.__words[0] = *((void *)a2 + 36);
    *(_OWORD *)&this[11].__r_.__value_.__r.__words[1] = v12;
  }
  if (*((char *)a2 + 319) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 296), *((const std::string::value_type **)a2 + 37), *((void *)a2 + 38));
  }
  else
  {
    long long v13 = *(_OWORD *)((char *)a2 + 296);
    this[13].__r_.__value_.__r.__words[0] = *((void *)a2 + 39);
    *(_OWORD *)&this[12].__r_.__value_.__r.__words[1] = v13;
  }
  if (*((char *)a2 + 343) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 320), *((const std::string::value_type **)a2 + 40), *((void *)a2 + 41));
  }
  else
  {
    long long v14 = *((_OWORD *)a2 + 20);
    this[14].__r_.__value_.__r.__words[0] = *((void *)a2 + 42);
    *(_OWORD *)&this[13].__r_.__value_.__r.__words[1] = v14;
  }
  if (*((char *)a2 + 367) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 344), *((const std::string::value_type **)a2 + 43), *((void *)a2 + 44));
  }
  else
  {
    long long v15 = *(_OWORD *)((char *)a2 + 344);
    this[15].__r_.__value_.__r.__words[0] = *((void *)a2 + 45);
    *(_OWORD *)&this[14].__r_.__value_.__r.__words[1] = v15;
  }
  if (*((char *)a2 + 391) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 368), *((const std::string::value_type **)a2 + 46), *((void *)a2 + 47));
  }
  else
  {
    long long v16 = *((_OWORD *)a2 + 23);
    this[16].__r_.__value_.__r.__words[0] = *((void *)a2 + 48);
    *(_OWORD *)&this[15].__r_.__value_.__r.__words[1] = v16;
  }
  if (*((char *)a2 + 415) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 392), *((const std::string::value_type **)a2 + 49), *((void *)a2 + 50));
  }
  else
  {
    long long v17 = *(_OWORD *)((char *)a2 + 392);
    this[17].__r_.__value_.__r.__words[0] = *((void *)a2 + 51);
    *(_OWORD *)&this[16].__r_.__value_.__r.__words[1] = v17;
  }
  if (*((char *)a2 + 439) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 416), *((const std::string::value_type **)a2 + 52), *((void *)a2 + 53));
  }
  else
  {
    long long v18 = *((_OWORD *)a2 + 26);
    this[18].__r_.__value_.__r.__words[0] = *((void *)a2 + 54);
    *(_OWORD *)&this[17].__r_.__value_.__r.__words[1] = v18;
  }
  if (*((char *)a2 + 463) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 440), *((const std::string::value_type **)a2 + 55), *((void *)a2 + 56));
  }
  else
  {
    long long v19 = *(_OWORD *)((char *)a2 + 440);
    this[19].__r_.__value_.__r.__words[0] = *((void *)a2 + 57);
    *(_OWORD *)&this[18].__r_.__value_.__r.__words[1] = v19;
  }
  long long v20 = (std::string *)((char *)this + 464);
  if (*((char *)a2 + 487) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *((const std::string::value_type **)a2 + 58), *((void *)a2 + 59));
  }
  else
  {
    long long v21 = *((_OWORD *)a2 + 29);
    this[20].__r_.__value_.__r.__words[0] = *((void *)a2 + 60);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
  }
  long long v22 = *(_OWORD *)((char *)a2 + 488);
  long long v23 = *(_OWORD *)((char *)a2 + 504);
  LOWORD(this[21].__r_.__value_.__r.__words[2]) = *((_WORD *)a2 + 260);
  *(_OWORD *)&this[20].__r_.__value_.__r.__words[1] = v22;
  *(_OWORD *)&this[21].__r_.__value_.__l.__data_ = v23;
  return this;
}

void sub_24956504C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, uint64_t a17, uint64_t a18)
{
  if (*(char *)(v18 + 463) < 0) {
    operator delete(*v19);
  }
  if (*(char *)(v18 + 439) < 0) {
    operator delete(*v26);
  }
  if (*(char *)(v18 + 415) < 0) {
    operator delete(*v25);
  }
  if (*(char *)(v18 + 391) < 0) {
    operator delete(*v24);
  }
  if (*(char *)(v18 + 367) < 0) {
    operator delete(*v23);
  }
  if (*(char *)(v18 + 343) < 0) {
    operator delete(*v22);
  }
  if (*(char *)(v18 + 319) < 0) {
    operator delete(*v21);
  }
  if (*(char *)(v18 + 295) < 0) {
    operator delete(*v20);
  }
  if (*(char *)(v18 + 271) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v18 + 247) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v18 + 223) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v18 + 199) < 0) {
    operator delete(*a13);
  }
  if (*(char *)(v18 + 151) < 0) {
    operator delete(*a14);
  }
  if (*(char *)(v18 + 127) < 0) {
    operator delete(*a15);
  }
  std::__tree<std::string>::destroy(a17, *(char **)(v18 + 88));
  std::__tree<std::string>::destroy(a18, *(char **)(v18 + 64));
  if (*(unsigned char *)(v18 + 48) && *(char *)(v18 + 47) < 0) {
    operator delete(*a16);
  }
  if (*(char *)(v18 + 23) < 0) {
    operator delete(*(void **)v18);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__optional_copy_base<ctb::ProvisioningConfiguration::Services,false>::__optional_copy_base[abi:ne180100](uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 56) = 0;
  if (*((unsigned char *)a2 + 56))
  {
    long long v3 = *a2;
    *(_OWORD *)(a1 + 11) = *(long long *)((char *)a2 + 11);
    *(_OWORD *)a1 = v3;
    std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 32), (uint64_t)(a2 + 2));
    *(unsigned char *)(a1 + 56) = 1;
  }
  return a1;
}

void sub_249565280(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 56)) {
    std::__tree<std::string>::destroy(v2, *(char **)(v1 + 40));
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging,false>::__optional_copy_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[416] = 0;
  if (*(unsigned char *)(a2 + 416))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging const&,ctb::ProvisioningConfiguration::Messaging*>((uint64_t)a1, (long long *)a2);
    a1[416] = 1;
  }
  return a1;
}

void sub_2495652E4(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging const&,ctb::ProvisioningConfiguration::Messaging*>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 24), (uint64_t)a2 + 24);
  std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::__optional_copy_base[abi:ne180100]((unsigned char *)(a1 + 120), (uint64_t)a2 + 120);
  std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>::__optional_copy_base[abi:ne180100]((unsigned char *)(a1 + 264), (uint64_t)a2 + 264);
  std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 368), a2 + 23);
  return a1;
}

void sub_24956537C(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>::~__optional_destruct_base[abi:ne180100](v3);
  std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::~__optional_destruct_base[abi:ne180100](v2);
  std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::__optional_copy_base[abi:ne180100](std::string *this, uint64_t a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[3].__r_.__value_.__s.__data_[16] = 0;
  if (*(unsigned char *)(a2 + 88))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging::Chatbot,ctb::ProvisioningConfiguration::Messaging::Chatbot const&,ctb::ProvisioningConfiguration::Messaging::Chatbot*>(this, (long long *)a2);
    this[3].__r_.__value_.__s.__data_[16] = 1;
  }
  return this;
}

void sub_2495653F4(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::Chatbot,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging::Chatbot,ctb::ProvisioningConfiguration::Messaging::Chatbot const&,ctb::ProvisioningConfiguration::Messaging::Chatbot*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  std::string::size_type v8 = *((void *)a2 + 9);
  LOWORD(this[3].__r_.__value_.__r.__words[1]) = *((_WORD *)a2 + 40);
  this[3].__r_.__value_.__r.__words[0] = v8;
  return this;
}

void sub_2495654CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::__optional_copy_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[136] = 0;
  if (*(unsigned char *)(a2 + 136))
  {
    ctb::ProvisioningConfiguration::Messaging::FileTransfer::FileTransfer((uint64_t)a1, (long long *)a2);
    a1[136] = 1;
  }
  return a1;
}

void sub_249565544(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::FileTransfer,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ctb::ProvisioningConfiguration::Messaging::FileTransfer::FileTransfer(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v4;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 72), *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *(void *)(a1 + 88) = *((void *)a2 + 11);
    *(_OWORD *)(a1 + 72) = v7;
  }
  std::string::size_type v8 = (std::string *)(a1 + 96);
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v9 = a2[6];
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(_OWORD *)(a1 + 120) = *(long long *)((char *)a2 + 120);
  return a1;
}

void sub_249565664(_Unwind_Exception *exception_object)
{
  if (v1[95] < 0) {
    operator delete(*v4);
  }
  if (v1[71] < 0) {
    operator delete(*v3);
  }
  if (v1[47] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>::__optional_copy_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[96] = 0;
  if (*(unsigned char *)(a2 + 96))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging::Chat,ctb::ProvisioningConfiguration::Messaging::Chat const&,ctb::ProvisioningConfiguration::Messaging::Chat*>((uint64_t)a1, (long long *)a2);
    a1[96] = 1;
  }
  return a1;
}

void sub_2495656F4(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging::Chat,ctb::ProvisioningConfiguration::Messaging::Chat const&,ctb::ProvisioningConfiguration::Messaging::Chat*>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 40);
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *(_OWORD *)(a1 + 40) = v6;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 64), a2 + 4);
  return a1;
}

void sub_249565784(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg,false>::__optional_copy_base[abi:ne180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[16] = 0;
  std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg,false> const&>(a1, a2);
  return a1;
}

void sub_2495657D0(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 40)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__optional_storage_base<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg,false> const&>(std::string *this, long long *a2)
{
  if (*((unsigned char *)a2 + 40))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v4 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    }
    __n128 result = *(__n128 *)((char *)a2 + 24);
    *(__n128 *)&this[1].__r_.__value_.__l.__data_ = result;
    this[1].__r_.__value_.__s.__data_[16] = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<ctb::ProvisioningConfiguration,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1184))
  {
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging,false>::~__optional_destruct_base[abi:ne180100](a1 + 720);
    if (*(unsigned char *)(a1 + 712)) {
      std::__tree<std::string>::destroy(a1 + 688, *(char **)(a1 + 696));
    }
    if (*(unsigned char *)(a1 + 648)) {
      ctb::ProvisioningConfiguration::IMS3GPP::~IMS3GPP((ctb::ProvisioningConfiguration::IMS3GPP *)(a1 + 120));
    }
    std::__optional_destruct_base<ctb::ProvisioningConfiguration::AccessControl,false>::~__optional_destruct_base[abi:ne180100](a1 + 64);
    if (*(unsigned char *)(a1 + 32) && *(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
  }
  return a1;
}

__n128 std::__optional_storage_base<ctb::CPMGroupManagement,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::CPMGroupManagement,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 32) == a2[2].n128_u8[0])
  {
    if (*(unsigned char *)(a1 + 32))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      __n128 result = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
      unsigned __int32 v5 = a2[1].n128_u32[2];
      *(unsigned char *)(a1 + 28) = a2[1].n128_u8[12];
      *(_DWORD *)(a1 + 24) = v5;
    }
  }
  else if (*(unsigned char *)(a1 + 32))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    __n128 result = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(void *)(a1 + 24) = a2[1].n128_u64[1];
    *(unsigned char *)(a1 + 32) = 1;
  }
  return result;
}

std::string *std::__optional_copy_base<ctb::CPMGroupManagement,false>::__optional_copy_base[abi:ne180100](std::string *this, uint64_t a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[8] = 0;
  if (*(unsigned char *)(a2 + 32)) {
    std::__optional_storage_base<ctb::CPMGroupManagement,false>::__construct[abi:ne180100]<ctb::CPMGroupManagement const&>(this, (long long *)a2);
  }
  return this;
}

void sub_249565A50(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 32)) {
    std::__optional_copy_base<ctb::CPMGroupManagement,false>::__optional_copy_base[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<ctb::CPMGroupManagement,false>::__construct[abi:ne180100]<ctb::CPMGroupManagement const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = *((void *)a2 + 3);
  this[1].__r_.__value_.__s.__data_[8] = 1;
}

std::string *std::__optional_copy_base<ctb::SIPResourceLists,false>::__optional_copy_base[abi:ne180100](std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<ctb::chatbot::CategoryList,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::chatbot::CategoryList,false> const&>(a1, a2);
  return a1;
}

void sub_249565BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(unsigned char *)(v10 + 24))
  {
    a10 = v10;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_249565C94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_249565D24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ctb::Client::Client(ctb::Client *this)
{
}

void sub_249565D9C(_Unwind_Exception *a1)
{
  MEMORY[0x24C5A3780](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void ctb::Client::~Client(id **this)
{
}

{
  std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0);
}

void ctb::Client::unpackData<ctb::ProvisioningConfiguration>(id **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  id v9 = 0;
  long long v6 = [**a1 unpackProvisioningXMLData:a2 error:&v9];
  id v7 = v9;
  std::string::size_type v8 = v7;
  if (a3 && v7) {
    *a3 = v7;
  }
  if (v6)
  {
    [v6 wrapped];
  }
  else
  {
    *a4 = 0;
    a4[1184] = 0;
  }
}

void sub_249565EB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::BootstrappingInfo>(id **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  id v9 = 0;
  long long v6 = [**a1 unpackBootstrappingInfoXMLData:a2 error:&v9];
  id v7 = v9;
  std::string::size_type v8 = v7;
  if (a3 && v7) {
    *a3 = v7;
  }
  if (v6)
  {
    [v6 wrapped];
  }
  else
  {
    *a4 = 0;
    a4[32] = 0;
  }
}

void sub_249565F58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::CPIMMessage>(id **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  id v9 = 0;
  long long v6 = [**a1 unpackCPIMMessageData:a2 error:&v9];
  id v7 = v9;
  std::string::size_type v8 = v7;
  if (a3 && v7) {
    *a3 = v7;
  }
  if (v6)
  {
    [v6 wrapped];
  }
  else
  {
    *a4 = 0;
    a4[168] = 0;
  }
}

void sub_249566000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::FileTransferDescriptor>(id **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  id v9 = 0;
  long long v6 = [**a1 unpackFileTransferDescriptorXMLData:a2 error:&v9];
  id v7 = v9;
  std::string::size_type v8 = v7;
  if (a3 && v7) {
    *a3 = v7;
  }
  if (v6)
  {
    [v6 wrapped];
  }
  else
  {
    *a4 = 0;
    a4[296] = 0;
  }
}

void sub_2495660A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::GeoPushLocation>(id **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  id v9 = 0;
  long long v6 = [**a1 unpackGeoPushLocationXMLData:a2 error:&v9];
  id v7 = v9;
  std::string::size_type v8 = v7;
  if (a3 && v7) {
    *a3 = v7;
  }
  if (v6)
  {
    [v6 wrapped];
  }
  else
  {
    *a4 = 0;
    a4[16] = 0;
  }
}

void sub_249566150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::IMDispositionNotification>(id **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  id v9 = 0;
  long long v6 = [**a1 unpackIMDNXMLData:a2 error:&v9];
  id v7 = v9;
  std::string::size_type v8 = v7;
  if (a3 && v7) {
    *a3 = v7;
  }
  if (v6)
  {
    [v6 wrapped];
  }
  else
  {
    *a4 = 0;
    a4[56] = 0;
  }
}

void sub_2495661F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::SIPConferenceInfo>(id **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  id v9 = 0;
  long long v6 = [**a1 unpackSIPConferenceInfoXMLData:a2 error:&v9];
  id v7 = v9;
  std::string::size_type v8 = v7;
  if (a3 && v7) {
    *a3 = v7;
  }
  if (v6)
  {
    [v6 wrapped];
  }
  else
  {
    *a4 = 0;
    a4[96] = 0;
  }
}

void sub_2495662A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::SIPResourceLists>(id **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  id v9 = 0;
  long long v6 = [**a1 unpackSIPResourceListsXMLData:a2 error:&v9];
  id v7 = v9;
  std::string::size_type v8 = v7;
  if (a3 && v7) {
    *a3 = v7;
  }
  if (v6)
  {
    [v6 wrapped];
  }
  else
  {
    *a4 = 0;
    a4[24] = 0;
  }
}

void sub_249566348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::CPMGroupManagement>(id **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  id v9 = 0;
  long long v6 = [**a1 unpackCPMGroupManagementXMLData:a2 error:&v9];
  id v7 = v9;
  std::string::size_type v8 = v7;
  if (a3 && v7) {
    *a3 = v7;
  }
  if (v6)
  {
    [v6 wrapped];
  }
  else
  {
    *a4 = 0;
    a4[32] = 0;
  }
}

void sub_2495663F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::IMCompositionIndication>(id **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  id v9 = 0;
  long long v6 = [**a1 unpackIMCompositionIndicationXMLData:a2 error:&v9];
  id v7 = v9;
  std::string::size_type v8 = v7;
  if (a3 && v7) {
    *a3 = v7;
  }
  if (v6)
  {
    [v6 wrapped];
  }
  else
  {
    *a4 = 0;
    a4[64] = 0;
  }
}

void sub_249566498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::chatbot::RenderInformation>(id **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  id v9 = 0;
  long long v6 = [**a1 unpackChatBotRenderInformationJSONData:a2 error:&v9];
  id v7 = v9;
  std::string::size_type v8 = v7;
  if (a3 && v7) {
    *a3 = v7;
  }
  if (v6)
  {
    [v6 wrapped];
  }
  else
  {
    *a4 = 0;
    a4[680] = 0;
  }
}

void sub_249566540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ctb::Client::unpackDataWithOptions<ctb::chatbot::Message,ctb::chatbot::Message::UnpackOptions>(id **a1@<X0>, uint64_t a2@<X1>, unsigned __int16 a3@<W2>, void *a4@<X3>, unsigned char *a5@<X8>)
{
  id v10 = 0;
  id v7 = [**a1 unpackChatBotMessageJSONData:a2 options:a3 error:&v10];
  id v8 = v10;
  id v9 = v8;
  if (a4 && v8) {
    *a4 = v8;
  }
  if (v7)
  {
    [v7 wrapped];
  }
  else
  {
    *a5 = 0;
    a5[344] = 0;
  }
}

void sub_2495665EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::ClientAuthenticityRequest>(id **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  id v9 = 0;
  long long v6 = [**a1 unpackClientAuthenticityRequestXMLData:a2 error:&v9];
  id v7 = v9;
  id v8 = v7;
  if (a3 && v7) {
    *a3 = v7;
  }
  if (v6)
  {
    [v6 wrapped];
  }
  else
  {
    *a4 = 0;
    a4[24] = 0;
  }
}

void sub_249566694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ctb::Client::unpackData<ctb::IMRevoke>(id **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  id v9 = 0;
  long long v6 = [**a1 unpackIMRevokeXMLData:a2 error:&v9];
  id v7 = v9;
  id v8 = v7;
  if (a3 && v7) {
    *a3 = v7;
  }
  if (v6)
  {
    [v6 wrapped];
  }
  else
  {
    *a4 = 0;
    a4[80] = 0;
  }
}

void sub_24956673C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id **std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](id **result, id *a2)
{
  uint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {

    JUMPOUT(0x24C5A3780);
  }
  return result;
}

__n128 std::__optional_storage_base<ctb::IMCompositionIndication,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::IMCompositionIndication,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 64) == a2[4].n128_u8[0])
  {
    if (*(unsigned char *)(a1 + 64))
    {
      long long v4 = &a2->n128_i8[8];
      *(_DWORD *)a1 = a2->n128_u32[0];
      unsigned __int32 v5 = (void **)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*v5);
      }
      long long v6 = *(_OWORD *)v4;
      *(void *)(a1 + 24) = a2[1].n128_u64[1];
      *(_OWORD *)unsigned __int32 v5 = v6;
      a2[1].n128_u8[15] = 0;
      a2->n128_u8[8] = 0;
      id v7 = (void **)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        operator delete(*v7);
      }
      __n128 result = a2[2];
      *(void *)(a1 + 48) = a2[3].n128_u64[0];
      *(__n128 *)id v7 = result;
      a2[3].n128_u8[7] = 0;
      a2[2].n128_u8[0] = 0;
      *(void *)(a1 + 56) = a2[3].n128_u64[1];
    }
  }
  else if (*(unsigned char *)(a1 + 64))
  {
    std::__optional_destruct_base<ctb::IMCompositionIndication,false>::reset[abi:ne180100](a1);
  }
  else
  {
    *(_DWORD *)a1 = a2->n128_u32[0];
    long long v9 = *(long long *)((char *)a2 + 8);
    *(void *)(a1 + 24) = a2[1].n128_u64[1];
    *(_OWORD *)(a1 + 8) = v9;
    a2[1].n128_u64[0] = 0;
    a2[1].n128_u64[1] = 0;
    a2->n128_u64[1] = 0;
    __n128 result = a2[2];
    *(void *)(a1 + 48) = a2[3].n128_u64[0];
    *(__n128 *)(a1 + 32) = result;
    a2[2].n128_u64[1] = 0;
    a2[3].n128_u64[0] = 0;
    a2[2].n128_u64[0] = 0;
    *(void *)(a1 + 56) = a2[3].n128_u64[1];
    *(unsigned char *)(a1 + 64) = 1;
  }
  return result;
}

void std::__optional_destruct_base<ctb::IMCompositionIndication,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
    *(unsigned char *)(a1 + 64) = 0;
  }
}

unsigned char *std::__optional_copy_base<ctb::IMCompositionIndication,false>::__optional_copy_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[64] = 0;
  if (*(unsigned char *)(a2 + 64))
  {
    std::construct_at[abi:ne180100]<ctb::IMCompositionIndication,ctb::IMCompositionIndication const&,ctb::IMCompositionIndication*>((uint64_t)a1, a2);
    a1[64] = 1;
  }
  return a1;
}

void sub_2495669E0(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ctb::IMCompositionIndication,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ctb::IMCompositionIndication,ctb::IMCompositionIndication const&,ctb::IMCompositionIndication*>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  unsigned __int32 v5 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

void sub_249566A90(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<ctb::IMCompositionIndication,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
  }
  return a1;
}

__n128 std::__optional_storage_base<ctb::IMRevoke,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::IMRevoke,false>>(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 80) == *((unsigned __int8 *)a2 + 80))
  {
    if (*(unsigned char *)(a1 + 80))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      long long v4 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((unsigned char *)a2 + 23) = 0;
      *(unsigned char *)a2 = 0;
      unsigned __int32 v5 = (void **)(a1 + 24);
      if (*(char *)(a1 + 47) < 0) {
        operator delete(*v5);
      }
      long long v6 = *(long long *)((char *)a2 + 24);
      *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 5);
      *(_OWORD *)unsigned __int32 v5 = v6;
      *((unsigned char *)a2 + 47) = 0;
      *((unsigned char *)a2 + 24) = 0;
      id v7 = (void **)(a1 + 48);
      if (*(char *)(a1 + 71) < 0) {
        operator delete(*v7);
      }
      __n128 result = (__n128)a2[3];
      *(void *)(a1 + 64) = *((void *)a2 + 8);
      *(__n128 *)id v7 = result;
      *((unsigned char *)a2 + 71) = 0;
      *((unsigned char *)a2 + 48) = 0;
      *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    }
  }
  else if (*(unsigned char *)(a1 + 80))
  {
    std::__optional_destruct_base<ctb::IMRevoke,false>::reset[abi:ne180100](a1);
  }
  else
  {
    long long v9 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v9;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v10 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v10;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    __n128 result = (__n128)a2[3];
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(__n128 *)(a1 + 48) = result;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 6) = 0;
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    *(unsigned char *)(a1 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 1;
  }
  return result;
}

void std::__optional_destruct_base<ctb::IMRevoke,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80))
  {
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  }
}

std::string *std::__optional_copy_base<ctb::IMRevoke,false>::__optional_copy_base[abi:ne180100](std::string *this, uint64_t a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[3].__r_.__value_.__s.__data_[8] = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    std::construct_at[abi:ne180100]<ctb::IMRevoke,ctb::IMRevoke const&,ctb::IMRevoke*>(this, (long long *)a2);
    this[3].__r_.__value_.__s.__data_[8] = 1;
  }
  return this;
}

void sub_249566D68(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ctb::IMRevoke,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<ctb::IMRevoke,ctb::IMRevoke const&,ctb::IMRevoke*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  return this;
}

void sub_249566E38(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<ctb::IMRevoke,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80))
  {
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void std::__optional_storage_base<ctb::FileTransferDescriptor,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::FileTransferDescriptor,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 296) == *(unsigned __int8 *)(a2 + 296))
  {
    if (*(unsigned char *)(a1 + 296))
    {
      ctb::FileTransferDescriptor::operator=(a1, (long long *)a2);
    }
  }
  else if (*(unsigned char *)(a1 + 296))
  {
    std::__optional_destruct_base<ctb::FileTransferDescriptor,false>::reset[abi:ne180100](a1);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::FileTransferDescriptor,ctb::FileTransferDescriptor,ctb::FileTransferDescriptor*>(a1, (long long *)a2);
    *(unsigned char *)(a1 + 296) = 1;
  }
}

uint64_t ctb::FileTransferDescriptor::operator=(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(a1 + 24, (__n128 *)((char *)a2 + 24));
  long long v5 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(_OWORD *)long long v5 = v6;
  *((unsigned char *)a2 + 79) = 0;
  *((unsigned char *)a2 + 56) = 0;
  long long v7 = (void **)(a1 + 80);
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*v7);
  }
  long long v8 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)long long v7 = v8;
  *((unsigned char *)a2 + 103) = 0;
  *((unsigned char *)a2 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  long long v9 = (void **)(a1 + 104);
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*v9);
  }
  long long v10 = *(long long *)((char *)a2 + 104);
  *(void *)(a1 + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 15);
  *(_OWORD *)long long v9 = v10;
  *((unsigned char *)a2 + 127) = 0;
  *((unsigned char *)a2 + 104) = 0;
  uint64_t v11 = *((void *)a2 + 16);
  *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
  *(void *)(a1 + 128) = v11;
  std::__optional_storage_base<ctb::FileTransferDescriptor::FileDescriptor,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::FileTransferDescriptor::FileDescriptor,false>>(a1 + 144, a2 + 9);
  return a1;
}

void std::__optional_destruct_base<ctb::FileTransferDescriptor,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 296))
  {
    std::__optional_destruct_base<ctb::FileTransferDescriptor::FileDescriptor,false>::~__optional_destruct_base[abi:ne180100](a1 + 144);
    if (*(char *)(a1 + 127) < 0) {
      operator delete(*(void **)(a1 + 104));
    }
    if (*(char *)(a1 + 103) < 0) {
      operator delete(*(void **)(a1 + 80));
    }
    if (*(char *)(a1 + 79) < 0) {
      operator delete(*(void **)(a1 + 56));
    }
    if (*(unsigned char *)(a1 + 48))
    {
      if (*(char *)(a1 + 47) < 0) {
        operator delete(*(void **)(a1 + 24));
      }
    }
    *(unsigned char *)(a1 + 296) = 0;
  }
}

__n128 std::__optional_storage_base<ctb::FileTransferDescriptor::FileDescriptor,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::FileTransferDescriptor::FileDescriptor,false>>(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 144) == *((unsigned __int8 *)a2 + 144))
  {
    if (*(unsigned char *)(a1 + 144))
    {
      long long v4 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v4;
      std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(a1 + 24, (__n128 *)((char *)a2 + 24));
      long long v5 = (void **)(a1 + 56);
      if (*(char *)(a1 + 79) < 0) {
        operator delete(*v5);
      }
      long long v6 = *(long long *)((char *)a2 + 56);
      *(void *)(a1 + 72) = *((void *)a2 + 9);
      *(_OWORD *)long long v5 = v6;
      *((unsigned char *)a2 + 79) = 0;
      *((unsigned char *)a2 + 56) = 0;
      long long v7 = (void **)(a1 + 80);
      if (*(char *)(a1 + 103) < 0) {
        operator delete(*v7);
      }
      long long v8 = a2[5];
      *(void *)(a1 + 96) = *((void *)a2 + 12);
      *(_OWORD *)long long v7 = v8;
      *((unsigned char *)a2 + 103) = 0;
      *((unsigned char *)a2 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
      long long v9 = (void **)(a1 + 104);
      if (*(char *)(a1 + 127) < 0) {
        operator delete(*v9);
      }
      __n128 result = *(__n128 *)((char *)a2 + 104);
      *(void *)(a1 + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 15);
      *(__n128 *)long long v9 = result;
      *((unsigned char *)a2 + 127) = 0;
      *((unsigned char *)a2 + 104) = 0;
      uint64_t v11 = *((void *)a2 + 16);
      *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
      *(void *)(a1 + 128) = v11;
    }
  }
  else if (*(unsigned char *)(a1 + 144))
  {
    std::__optional_destruct_base<ctb::FileTransferDescriptor::FileDescriptor,false>::reset[abi:ne180100](a1);
  }
  else
  {
    long long v12 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v12;
    *(unsigned char *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    if (*((unsigned char *)a2 + 48))
    {
      long long v13 = *(long long *)((char *)a2 + 24);
      *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 5);
      *(_OWORD *)(a1 + 24) = v13;
      *((void *)a2 + 4) = 0;
      *((void *)a2 + 5) = 0;
      *((void *)a2 + 3) = 0;
      *(unsigned char *)(a1 + 48) = 1;
    }
    long long v14 = *(long long *)((char *)a2 + 56);
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    *(_OWORD *)(a1 + 56) = v14;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 7) = 0;
    long long v15 = a2[5];
    *(void *)(a1 + 96) = *((void *)a2 + 12);
    *(_OWORD *)(a1 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v15;
    *((void *)a2 + 11) = 0;
    *((void *)a2 + 12) = 0;
    *((void *)a2 + 1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    long long v16 = *(long long *)((char *)a2 + 104);
    *(void *)(a1 + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 15);
    *(_OWORD *)(a1 + 104) = v16;
    *((void *)a2 + 14) = 0;
    *((void *)a2 + 15) = 0;
    *((void *)a2 + 13) = 0;
    __n128 result = (__n128)a2[8];
    *(__n128 *)(a1 + 128) = result;
    *(unsigned char *)(a1 + 144) = 1;
  }
  return result;
}

void std::__optional_destruct_base<ctb::FileTransferDescriptor::FileDescriptor,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144))
  {
    if (*(char *)(a1 + 127) < 0) {
      operator delete(*(void **)(a1 + 104));
    }
    if (*(char *)(a1 + 103) < 0) {
      operator delete(*(void **)(a1 + 80));
    }
    if (*(char *)(a1 + 79) < 0) {
      operator delete(*(void **)(a1 + 56));
    }
    if (*(unsigned char *)(a1 + 48))
    {
      if (*(char *)(a1 + 47) < 0) {
        operator delete(*(void **)(a1 + 24));
      }
    }
    *(unsigned char *)(a1 + 144) = 0;
  }
}

uint64_t std::construct_at[abi:ne180100]<ctb::FileTransferDescriptor,ctb::FileTransferDescriptor,ctb::FileTransferDescriptor*>(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*((unsigned char *)a2 + 48))
  {
    long long v4 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v4;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    *(unsigned char *)(a1 + 48) = 1;
  }
  long long v5 = *(long long *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(_OWORD *)(a1 + 56) = v5;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 7) = 0;
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v6;
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  long long v7 = *(long long *)((char *)a2 + 104);
  *(void *)(a1 + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 15);
  *(_OWORD *)(a1 + 104) = v7;
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 13) = 0;
  *(_OWORD *)(a1 + 128) = a2[8];
  std::__optional_move_base<ctb::FileTransferDescriptor::FileDescriptor,false>::__optional_move_base[abi:ne180100]((unsigned char *)(a1 + 144), a2 + 9);
  return a1;
}

unsigned char *std::__optional_move_base<ctb::FileTransferDescriptor::FileDescriptor,false>::__optional_move_base[abi:ne180100](unsigned char *a1, long long *a2)
{
  *a1 = 0;
  a1[144] = 0;
  std::__optional_storage_base<ctb::FileTransferDescriptor::FileDescriptor,false>::__construct_from[abi:ne180100]<std::__optional_move_base<ctb::FileTransferDescriptor::FileDescriptor,false>>((uint64_t)a1, a2);
  return a1;
}

__n128 std::__optional_storage_base<ctb::FileTransferDescriptor::FileDescriptor,false>::__construct_from[abi:ne180100]<std::__optional_move_base<ctb::FileTransferDescriptor::FileDescriptor,false>>(uint64_t a1, long long *a2)
{
  if (*((unsigned char *)a2 + 144))
  {
    long long v2 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v2;
    *(unsigned char *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    if (*((unsigned char *)a2 + 48))
    {
      long long v3 = *(long long *)((char *)a2 + 24);
      *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 5);
      *(_OWORD *)(a1 + 24) = v3;
      *((void *)a2 + 4) = 0;
      *((void *)a2 + 5) = 0;
      *((void *)a2 + 3) = 0;
      *(unsigned char *)(a1 + 48) = 1;
    }
    long long v4 = *(long long *)((char *)a2 + 56);
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    *(_OWORD *)(a1 + 56) = v4;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 7) = 0;
    long long v5 = a2[5];
    *(void *)(a1 + 96) = *((void *)a2 + 12);
    *(_OWORD *)(a1 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v5;
    *((void *)a2 + 11) = 0;
    *((void *)a2 + 12) = 0;
    *((void *)a2 + 1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    long long v6 = *(long long *)((char *)a2 + 104);
    *(void *)(a1 + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 15);
    *(_OWORD *)(a1 + 104) = v6;
    *((void *)a2 + 14) = 0;
    *((void *)a2 + 15) = 0;
    *((void *)a2 + 13) = 0;
    __n128 result = (__n128)a2[8];
    *(__n128 *)(a1 + 128) = result;
    *(unsigned char *)(a1 + 144) = 1;
  }
  return result;
}

ctb::FileTransferDescriptor::FileDescriptor *std::__optional_copy_base<ctb::FileTransferDescriptor,false>::__optional_copy_base[abi:ne180100](ctb::FileTransferDescriptor::FileDescriptor *a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *((unsigned char *)a1 + 296) = 0;
  if (*(unsigned char *)(a2 + 296))
  {
    std::construct_at[abi:ne180100]<ctb::FileTransferDescriptor,ctb::FileTransferDescriptor const&,ctb::FileTransferDescriptor*>(a1, a2);
    *((unsigned char *)a1 + 296) = 1;
  }
  return a1;
}

void sub_249567560(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ctb::FileTransferDescriptor,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

ctb::FileTransferDescriptor::FileDescriptor *std::construct_at[abi:ne180100]<ctb::FileTransferDescriptor,ctb::FileTransferDescriptor const&,ctb::FileTransferDescriptor*>(ctb::FileTransferDescriptor::FileDescriptor *a1, uint64_t a2)
{
  long long v4 = ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor(a1, (const ctb::FileTransferDescriptor::FileDescriptor *)a2);
  std::__optional_copy_base<ctb::FileTransferDescriptor::FileDescriptor,false>::__optional_copy_base[abi:ne180100]((ctb::FileTransferDescriptor::FileDescriptor *)((char *)v4 + 144), (const ctb::FileTransferDescriptor::FileDescriptor *)(a2 + 144));
  return a1;
}

void sub_2495675AC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*(void **)(v1 + 104));
  }
  std::__variant_detail::__alt<2ul,ctb::FileTransferDescriptor>::__alt[abi:ne180100]<ctb::FileTransferDescriptor const&>(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<ctb::FileTransferDescriptor,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 296))
  {
    std::__optional_destruct_base<ctb::FileTransferDescriptor::FileDescriptor,false>::~__optional_destruct_base[abi:ne180100](a1 + 144);
    if (*(char *)(a1 + 127) < 0) {
      operator delete(*(void **)(a1 + 104));
    }
    if (*(char *)(a1 + 103) < 0) {
      operator delete(*(void **)(a1 + 80));
    }
    if (*(char *)(a1 + 79) < 0) {
      operator delete(*(void **)(a1 + 56));
    }
    if (*(unsigned char *)(a1 + 48) && *(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
  }
  return a1;
}

__n128 std::__optional_storage_base<ctb::BootstrappingInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::BootstrappingInfo,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 32) == a2[2].n128_u8[0])
  {
    if (*(unsigned char *)(a1 + 32))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      __n128 result = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
      *(void *)(a1 + 24) = a2[1].n128_u64[1];
    }
  }
  else if (*(unsigned char *)(a1 + 32))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    __n128 result = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(void *)(a1 + 24) = a2[1].n128_u64[1];
    *(unsigned char *)(a1 + 32) = 1;
  }
  return result;
}

std::string *std::__optional_copy_base<ctb::BootstrappingInfo,false>::__optional_copy_base[abi:ne180100](std::string *this, uint64_t a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[8] = 0;
  if (*(unsigned char *)(a2 + 32)) {
    std::__optional_storage_base<ctb::CPMGroupManagement,false>::__construct[abi:ne180100]<ctb::CPMGroupManagement const&>(this, (long long *)a2);
  }
  return this;
}

void sub_2495677CC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 32)) {
    std::__optional_copy_base<ctb::CPMGroupManagement,false>::__optional_copy_base[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__optional_storage_base<ctb::SIPConferenceInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::SIPConferenceInfo,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96))
  {
    if (*(unsigned char *)(a1 + 96))
    {
      std::__optional_storage_base<ctb::SIPConferenceInfo::Description,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::SIPConferenceInfo::Description,false>>(a1, (__n128 *)a2);
      std::vector<ctb::SIPConferenceInfo::User>::__vdeallocate((void ***)(a1 + 72));
      __n128 result = *(__n128 *)(a2 + 72);
      *(__n128 *)(a1 + 72) = result;
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a2 + 72) = 0;
      *(void *)(a2 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
      *(void *)(a2 + 88) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 96))
  {
    std::__optional_destruct_base<ctb::SIPConferenceInfo,false>::reset[abi:ne180100](a1);
  }
  else
  {
    std::__optional_move_base<ctb::SIPConferenceInfo::Description,false>::__optional_move_base[abi:ne180100]((unsigned char *)a1, (long long *)a2);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(a1 + 88) = 0;
    __n128 result = *(__n128 *)(a2 + 72);
    *(__n128 *)(a1 + 72) = result;
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(a2 + 88) = 0;
    *(unsigned char *)(a1 + 96) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<ctb::SIPConferenceInfo,false>::reset[abi:ne180100](uint64_t result)
{
  if (*(unsigned char *)(result + 96))
  {
    uint64_t v1 = result;
    long long v2 = (void **)(result + 72);
    std::vector<ctb::SIPConferenceInfo::User>::__destroy_vector::operator()[abi:ne180100](&v2);
    __n128 result = std::__optional_destruct_base<ctb::SIPConferenceInfo::Description,false>::~__optional_destruct_base[abi:ne180100](v1);
    *(unsigned char *)(v1 + 96) = 0;
  }
  return result;
}

void std::__optional_storage_base<ctb::SIPConferenceInfo::Description,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::SIPConferenceInfo::Description,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 64) == a2[4].n128_u8[0])
  {
    if (*(unsigned char *)(a1 + 64))
    {
      std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(a1, a2);
      std::__optional_storage_base<ctb::chatbot::CardStyle,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::chatbot::CardStyle,false>>(a1 + 32, a2 + 2);
    }
  }
  else if (*(unsigned char *)(a1 + 64))
  {
    std::__optional_destruct_base<ctb::SIPConferenceInfo::Description,false>::reset[abi:ne180100](a1);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    if (a2[1].n128_u8[8])
    {
      __n128 v4 = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = v4;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
      a2->n128_u64[0] = 0;
      *(unsigned char *)(a1 + 24) = 1;
    }
    *(unsigned char *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 56) = 0;
    if (a2[3].n128_u8[8])
    {
      __n128 v5 = a2[2];
      *(void *)(a1 + 48) = a2[3].n128_u64[0];
      *(__n128 *)(a1 + 32) = v5;
      a2[2].n128_u64[1] = 0;
      a2[3].n128_u64[0] = 0;
      a2[2].n128_u64[0] = 0;
      *(unsigned char *)(a1 + 56) = 1;
    }
    *(unsigned char *)(a1 + 64) = 1;
  }
}

void std::__optional_destruct_base<ctb::SIPConferenceInfo::Description,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    if (*(unsigned char *)(a1 + 56) && *(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    if (*(unsigned char *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
    }
    *(unsigned char *)(a1 + 64) = 0;
  }
}

void std::vector<ctb::SIPConferenceInfo::User>::__vdeallocate(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    long long v3 = a1[1];
    __n128 v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        __n128 v5 = v3;
        std::vector<ctb::SIPConferenceInfo::Endpoint>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      __n128 v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<ctb::SIPConferenceInfo::Endpoint>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    __n128 v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::__destroy_at[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint,0>(v4);
      }
      while ((void *)v4 != v2);
      __n128 v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint,0>(uint64_t a1)
{
  std::__optional_destruct_base<ctb::SIPConferenceInfo::ReferredInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 40);
  if (*(unsigned char *)(a1 + 24) && *(char *)(a1 + 23) < 0)
  {
    long long v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__optional_destruct_base<ctb::SIPConferenceInfo::ReferredInfo,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32) && *(unsigned char *)(a1 + 24) && *(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<ctb::SIPConferenceInfo::User>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    __n128 v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        long long v6 = v4;
        std::vector<ctb::SIPConferenceInfo::Endpoint>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      __n128 v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__optional_destruct_base<ctb::SIPConferenceInfo::Description,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    if (*(unsigned char *)(a1 + 56) && *(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    if (*(unsigned char *)(a1 + 24) && *(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

unsigned char *std::__optional_move_base<ctb::SIPConferenceInfo::Description,false>::__optional_move_base[abi:ne180100](unsigned char *a1, long long *a2)
{
  *a1 = 0;
  a1[64] = 0;
  std::__optional_storage_base<ctb::SIPConferenceInfo::Description,false>::__construct_from[abi:ne180100]<std::__optional_move_base<ctb::SIPConferenceInfo::Description,false>>((uint64_t)a1, a2);
  return a1;
}

uint64_t std::__optional_storage_base<ctb::SIPConferenceInfo::Description,false>::__construct_from[abi:ne180100]<std::__optional_move_base<ctb::SIPConferenceInfo::Description,false>>(uint64_t result, long long *a2)
{
  if (*((unsigned char *)a2 + 64))
  {
    *(unsigned char *)__n128 result = 0;
    *(unsigned char *)(result + 24) = 0;
    if (*((unsigned char *)a2 + 24))
    {
      long long v2 = *a2;
      *(void *)(result + 16) = *((void *)a2 + 2);
      *(_OWORD *)__n128 result = v2;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      *(unsigned char *)(result + 24) = 1;
    }
    *(unsigned char *)(result + 32) = 0;
    *(unsigned char *)(result + 56) = 0;
    if (*((unsigned char *)a2 + 56))
    {
      long long v3 = a2[2];
      *(void *)(result + 48) = *((void *)a2 + 6);
      *(_OWORD *)(result + 32) = v3;
      *((void *)a2 + 5) = 0;
      *((void *)a2 + 6) = 0;
      *((void *)a2 + 4) = 0;
      *(unsigned char *)(result + 56) = 1;
    }
    *(unsigned char *)(result + 64) = 1;
  }
  return result;
}

std::string *std::__optional_copy_base<ctb::SIPConferenceInfo,false>::__optional_copy_base[abi:ne180100](std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[4].__r_.__value_.__s.__data_[0] = 0;
  if (*(unsigned char *)(a2 + 96))
  {
    std::construct_at[abi:ne180100]<ctb::SIPConferenceInfo,ctb::SIPConferenceInfo const&,ctb::SIPConferenceInfo*>(a1, a2);
    a1[4].__r_.__value_.__s.__data_[0] = 1;
  }
  return a1;
}

void sub_249567E14(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ctb::SIPConferenceInfo,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<ctb::SIPConferenceInfo,ctb::SIPConferenceInfo const&,ctb::SIPConferenceInfo*>(std::string *a1, uint64_t a2)
{
  uint64_t v4 = std::__optional_copy_base<ctb::SIPConferenceInfo::Description,false>::__optional_copy_base[abi:ne180100](a1, a2);
  v4[3].__r_.__value_.__r.__words[0] = 0;
  v4[3].__r_.__value_.__l.__size_ = 0;
  v4 += 3;
  v4->__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::SIPConferenceInfo::User>::__init_with_size[abi:ne180100]<ctb::SIPConferenceInfo::User*,ctb::SIPConferenceInfo::User*>(v4, *(uint64_t **)(a2 + 72), *(uint64_t **)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3));
  return a1;
}

void sub_249567E78(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ctb::SIPConferenceInfo::Description,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<ctb::SIPConferenceInfo::Description,false>::__optional_copy_base[abi:ne180100](std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[2].__r_.__value_.__s.__data_[16] = 0;
  if (*(unsigned char *)(a2 + 64))
  {
    std::construct_at[abi:ne180100]<ctb::SIPConferenceInfo::Description,ctb::SIPConferenceInfo::Description const&,ctb::SIPConferenceInfo::Description*>(a1, (long long *)a2);
    a1[2].__r_.__value_.__s.__data_[16] = 1;
  }
  return a1;
}

void sub_249567ED0(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ctb::SIPConferenceInfo::Description,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<ctb::SIPConferenceInfo::Description,ctb::SIPConferenceInfo::Description const&,ctb::SIPConferenceInfo::Description*>(std::string *a1, long long *a2)
{
  uint64_t v4 = std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](a1, a2);
  std::__optional_copy_base<ctb::SIPConferenceInfo::SubjectExt,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)v4 + 32), a2 + 2);
  return a1;
}

void sub_249567F1C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<ctb::SIPConferenceInfo::SubjectExt,false>::__optional_copy_base[abi:ne180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_249567F68(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<ctb::SIPConferenceInfo::User>::__init_with_size[abi:ne180100]<ctb::SIPConferenceInfo::User*,ctb::SIPConferenceInfo::User*>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::SIPConferenceInfo::User>,ctb::SIPConferenceInfo::User*,ctb::SIPConferenceInfo::User*,ctb::SIPConferenceInfo::User*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_249567FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<ctb::SIPConferenceInfo::User>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::SIPConferenceInfo::User>,ctb::SIPConferenceInfo::User*,ctb::SIPConferenceInfo::User*,ctb::SIPConferenceInfo::User*>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  uint64_t v9 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<ctb::SIPConferenceInfo::Endpoint>::__init_with_size[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint*,ctb::SIPConferenceInfo::Endpoint*>(v4, *v6, v6[1], 0x2E8BA2E8BA2E8BA3 * ((v6[1] - *v6) >> 3));
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  LOBYTE(v9) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::SIPConferenceInfo::User>,ctb::SIPConferenceInfo::User*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2495680BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<ctb::SIPConferenceInfo::Endpoint>::__init_with_size[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint*,ctb::SIPConferenceInfo::Endpoint*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<ctb::SIPConferenceInfo::Endpoint>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::SIPConferenceInfo::Endpoint>,ctb::SIPConferenceInfo::Endpoint*,ctb::SIPConferenceInfo::Endpoint*,ctb::SIPConferenceInfo::Endpoint*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_249568138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<ctb::SIPConferenceInfo::Endpoint>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ctb::SIPConferenceInfo::Endpoint>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::SIPConferenceInfo::Endpoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::SIPConferenceInfo::Endpoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(88 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::SIPConferenceInfo::Endpoint>,ctb::SIPConferenceInfo::Endpoint*,ctb::SIPConferenceInfo::Endpoint*,ctb::SIPConferenceInfo::Endpoint*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint,ctb::SIPConferenceInfo::Endpoint&,ctb::SIPConferenceInfo::Endpoint*>((std::string *)(a4 + v7), a2 + v7);
      v7 += 88;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_24956825C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 88;
    do
    {
      std::__destroy_at[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint,0>(v4 + v2);
      v2 -= 88;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint,ctb::SIPConferenceInfo::Endpoint&,ctb::SIPConferenceInfo::Endpoint*>(std::string *a1, uint64_t a2)
{
  uint64_t v4 = std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](a1, (long long *)a2);
  v4[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
  std::__optional_copy_base<ctb::SIPConferenceInfo::ReferredInfo,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)v4 + 40), a2 + 40);
  a1[3].__r_.__value_.__l.__size_ = *(void *)(a2 + 80);
  return a1;
}

{
  std::string *v4;

  uint64_t v4 = std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](a1, (long long *)a2);
  v4[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
  std::__optional_copy_base<ctb::SIPConferenceInfo::ReferredInfo,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)v4 + 40), a2 + 40);
  a1[3].__r_.__value_.__l.__size_ = *(void *)(a2 + 80);
  return a1;
}

void sub_2495682C8(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<ctb::SIPConferenceInfo::ReferredInfo,false>::__optional_copy_base[abi:ne180100](std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[8] = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](a1, (long long *)a2);
    a1[1].__r_.__value_.__s.__data_[8] = 1;
  }
  return a1;
}

void sub_249568328(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ctb::SIPConferenceInfo::ReferredInfo,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::SIPConferenceInfo::User>,ctb::SIPConferenceInfo::User*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<ctb::SIPConferenceInfo::User>,ctb::SIPConferenceInfo::User*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ctb::SIPConferenceInfo::User>,ctb::SIPConferenceInfo::User*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    long long v3 = v1;
    std::vector<ctb::SIPConferenceInfo::Endpoint>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::__optional_destruct_base<ctb::SIPConferenceInfo,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    long long v3 = (void **)(a1 + 72);
    std::vector<ctb::SIPConferenceInfo::User>::__destroy_vector::operator()[abi:ne180100](&v3);
    std::__optional_destruct_base<ctb::SIPConferenceInfo::Description,false>::~__optional_destruct_base[abi:ne180100](a1);
  }
  return a1;
}

__n128 std::__optional_storage_base<ctb::IMDispositionNotification,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::IMDispositionNotification,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 56) == a2[3].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v4 = &a2->n128_i8[8];
      *(_DWORD *)a1 = a2->n128_u32[0];
      __n128 v5 = (void **)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*v5);
      }
      long long v6 = *(_OWORD *)v4;
      *(void *)(a1 + 24) = a2[1].n128_u64[1];
      *(_OWORD *)__n128 v5 = v6;
      a2[1].n128_u8[15] = 0;
      a2->n128_u8[8] = 0;
      uint64_t v7 = (void **)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        operator delete(*v7);
      }
      __n128 result = a2[2];
      *(void *)(a1 + 48) = a2[3].n128_u64[0];
      *(__n128 *)uint64_t v7 = result;
      a2[3].n128_u8[7] = 0;
      a2[2].n128_u8[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 56))
  {
    std::__optional_destruct_base<ctb::IMDispositionNotification,false>::reset[abi:ne180100](a1);
  }
  else
  {
    *(_DWORD *)a1 = a2->n128_u32[0];
    long long v9 = *(long long *)((char *)a2 + 8);
    *(void *)(a1 + 24) = a2[1].n128_u64[1];
    *(_OWORD *)(a1 + 8) = v9;
    a2[1].n128_u64[0] = 0;
    a2[1].n128_u64[1] = 0;
    a2->n128_u64[1] = 0;
    __n128 result = a2[2];
    *(void *)(a1 + 48) = a2[3].n128_u64[0];
    *(__n128 *)(a1 + 32) = result;
    a2[2].n128_u64[1] = 0;
    a2[3].n128_u64[0] = 0;
    a2[2].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 56) = 1;
  }
  return result;
}

void std::__optional_destruct_base<ctb::IMDispositionNotification,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
    *(unsigned char *)(a1 + 56) = 0;
  }
}

unsigned char *std::__optional_copy_base<ctb::IMDispositionNotification,false>::__optional_copy_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[56] = 0;
  if (*(unsigned char *)(a2 + 56))
  {
    std::construct_at[abi:ne180100]<ctb::IMDispositionNotification,ctb::IMDispositionNotification const&,ctb::IMDispositionNotification*>((uint64_t)a1, a2);
    a1[56] = 1;
  }
  return a1;
}

void sub_24956862C(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ctb::IMDispositionNotification,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ctb::IMDispositionNotification,ctb::IMDispositionNotification const&,ctb::IMDispositionNotification*>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  __n128 v5 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_2495686D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<ctb::IMDispositionNotification,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
  }
  return a1;
}

__n128 std::__optional_storage_base<ctb::ClientAuthenticityRequest,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<ctb::ClientAuthenticityRequest,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      std::vector<ctb::ClientAuthenticityRequest::Method>::__vdeallocate((void **)a1);
      __n128 result = *a2;
      *(__n128 *)a1 = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    __n128 v5 = (void **)a1;
    std::vector<ctb::ClientAuthenticityRequest::Method>::__destroy_vector::operator()[abi:ne180100](&v5);
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

void std::vector<ctb::ClientAuthenticityRequest::Method>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>(v3);
      }
      while ((void *)v3 != v1);
      long long v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 32);
  std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<ctb::ClientAuthenticityRequest::Parameter>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<ctb::ClientAuthenticityRequest::Parameter>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 32)
  {
    if (*(unsigned char *)(i - 8))
    {
      __n128 v5 = *(void **)(i - 32);
      if (v5)
      {
        *(void *)(i - 24) = v5;
        operator delete(v5);
      }
    }
  }
  *(void *)(a1 + 8) = a2;
}

void std::vector<ctb::ClientAuthenticityRequest::Method>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    __n128 v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>(v4);
      }
      while ((void *)v4 != v2);
      __n128 v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__optional_copy_base<ctb::ClientAuthenticityRequest,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  std::__optional_storage_base<ctb::ClientAuthenticityRequest,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::ClientAuthenticityRequest,false> const&>((void *)a1, a2);
  return a1;
}

void sub_249568AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(unsigned char *)(v10 + 24))
  {
    a10 = v10;
    std::vector<ctb::ClientAuthenticityRequest::Method>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::__optional_storage_base<ctb::ClientAuthenticityRequest,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<ctb::ClientAuthenticityRequest,false> const&>(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    *__n128 result = 0;
    result[1] = 0;
    result[2] = 0;
    __n128 result = std::vector<ctb::ClientAuthenticityRequest::Method>::__init_with_size[abi:ne180100]<ctb::ClientAuthenticityRequest::Method*,ctb::ClientAuthenticityRequest::Method*>(result, *(void *)a2, *(void *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

void *std::vector<ctb::ClientAuthenticityRequest::Method>::__init_with_size[abi:ne180100]<ctb::ClientAuthenticityRequest::Method*,ctb::ClientAuthenticityRequest::Method*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::ClientAuthenticityRequest::Method>,ctb::ClientAuthenticityRequest::Method*,ctb::ClientAuthenticityRequest::Method*,ctb::ClientAuthenticityRequest::Method*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_249568B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<ctb::ClientAuthenticityRequest::Method>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::ClientAuthenticityRequest::Method>,ctb::ClientAuthenticityRequest::Method*,ctb::ClientAuthenticityRequest::Method*,ctb::ClientAuthenticityRequest::Method*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,ctb::ClientAuthenticityRequest::Method&,ctb::ClientAuthenticityRequest::Method*>(a4 + v7, a2 + v7);
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_249568C14(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 56;
    do
    {
      std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>(v4 + v2);
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,ctb::ClientAuthenticityRequest::Method&,ctb::ClientAuthenticityRequest::Method*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<ctb::ClientAuthenticityRequest::Parameter>::__init_with_size[abi:ne180100]<ctb::ClientAuthenticityRequest::Parameter*,ctb::ClientAuthenticityRequest::Parameter*>((void *)(a1 + 32), *(void *)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 5);
  return a1;
}

{
  long long v4;

  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<ctb::ClientAuthenticityRequest::Parameter>::__init_with_size[abi:ne180100]<ctb::ClientAuthenticityRequest::Parameter*,ctb::ClientAuthenticityRequest::Parameter*>((void *)(a1 + 32), *(void *)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 5);
  return a1;
}

void sub_249568CBC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<ctb::ClientAuthenticityRequest::Parameter>::__init_with_size[abi:ne180100]<ctb::ClientAuthenticityRequest::Parameter*,ctb::ClientAuthenticityRequest::Parameter*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<ctb::chatbot::OrgNameEntry>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,ctb::ClientAuthenticityRequest::Parameter*,ctb::ClientAuthenticityRequest::Parameter*,ctb::ClientAuthenticityRequest::Parameter*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_249568D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,ctb::ClientAuthenticityRequest::Parameter*,ctb::ClientAuthenticityRequest::Parameter*,ctb::ClientAuthenticityRequest::Parameter*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  uint64_t v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__optional_copy_base<std::vector<unsigned char>,false>::__optional_copy_base[abi:ne180100](v4, v6);
      v6 += 32;
      uint64_t v4 = v11 + 32;
      v11 += 32;
    }
    while (v6 != a3);
  }
  LOBYTE(v9) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,ctb::ClientAuthenticityRequest::Parameter*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_249568DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__optional_copy_base<std::vector<unsigned char>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  std::__optional_storage_base<std::vector<unsigned char>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<unsigned char>,false> const&>((void *)a1, a2);
  return a1;
}

void sub_249568E30(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::vector<unsigned char>,false>::__optional_copy_base[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__optional_storage_base<std::vector<unsigned char>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<unsigned char>,false> const&>(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    *__n128 result = 0;
    result[1] = 0;
    result[2] = 0;
    __n128 result = std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(result, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_249568EF4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,ctb::ClientAuthenticityRequest::Parameter*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,ctb::ClientAuthenticityRequest::Parameter*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,ctb::ClientAuthenticityRequest::Parameter*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(unsigned char *)(v1 - 8))
    {
      uint64_t v3 = *(void **)(v1 - 32);
      if (v3)
      {
        *(void *)(v1 - 24) = v3;
        operator delete(v3);
      }
    }
    v1 -= 32;
  }
}

uint64_t sub_249568FDC@<X0>(uint64_t a1@<X0>, std::vector<std::string> *a2@<X8>)
{
  uint64_t v4 = sub_2495B6B30();
  uint64_t v53 = MEMORY[0x263F8EE78];
  uint64_t v43 = *(void *)(v4 + 16);
  if (v43)
  {
    uint64_t v34 = a1;
    long long v35 = a2;
    uint64_t v5 = sub_2495B6B00();
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void (**)(char *))(v6 + 16);
    uint64_t v41 = v6 + 16;
    v42 = v7;
    unint64_t v40 = v4 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v38 = *(void *)(v6 + 72);
    v39 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v37 = *(void *)(v6 + 64);
    v33[1] = v4;
    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    uint64_t v36 = v5;
    do
    {
      MEMORY[0x270FA5388](v8);
      uint64_t v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      v42(v11);
      uint64_t v12 = sub_2495B6AF0();
      int64_t v13 = *(void *)(v12 + 16);
      if (v13)
      {
        v45 = v11;
        v46 = v33;
        uint64_t v47 = v9;
        uint64_t v52 = MEMORY[0x263F8EE78];
        sub_2495975C0(0, v13, 0);
        uint64_t isUniquelyReferenced_nonNull_native = sub_2495B6B20();
        uint64_t v51 = isUniquelyReferenced_nonNull_native;
        uint64_t v15 = *(void *)(isUniquelyReferenced_nonNull_native - 8);
        long long v16 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
        uint64_t v49 = v15 + 16;
        v50 = v16;
        uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
        uint64_t v44 = v12;
        uint64_t v18 = v12 + ((v17 + 32) & ~v17);
        uint64_t v19 = *(void *)(v15 + 64);
        uint64_t v48 = *(void *)(v15 + 72);
        long long v20 = (void (**)(char *, uint64_t))(v15 + 8);
        do
        {
          MEMORY[0x270FA5388](isUniquelyReferenced_nonNull_native);
          uint64_t v21 = v51;
          v50((char *)v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v18, v51);
          __x.__begin_ = (std::vector<std::string>::pointer)sub_2495B6B10();
          __x.__end_ = v22;
          uint64_t v23 = sub_2495B8730();
          uint64_t v25 = v24;
          (*v20)((char *)v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v21);
          uint64_t v26 = v52;
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t isUniquelyReferenced_nonNull_native = sub_2495975C0(0, *(void *)(v26 + 16) + 1, 1);
            uint64_t v26 = v52;
          }
          unint64_t v28 = *(void *)(v26 + 16);
          unint64_t v27 = *(void *)(v26 + 24);
          if (v28 >= v27 >> 1)
          {
            uint64_t isUniquelyReferenced_nonNull_native = sub_2495975C0(v27 > 1, v28 + 1, 1);
            uint64_t v26 = v52;
          }
          *(void *)(v26 + 16) = v28 + 1;
          uint64_t v29 = v26 + 16 * v28;
          *(void *)(v29 + 32) = v23;
          *(void *)(v29 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v25;
          v18 += v48;
          --v13;
        }
        while (v13);
        swift_bridgeObjectRelease();
        uint64_t v5 = v36;
        uint64_t v9 = v47;
        uint64_t v11 = v45;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v26 = MEMORY[0x263F8EE78];
      }
      ++v9;
      (*v39)(v11, v5);
      uint64_t v8 = sub_24956B634(v26);
    }
    while (v9 != v43);
    swift_bridgeObjectRelease_n();
    uint64_t v30 = v53;
    a2 = v35;
    a1 = v34;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v30 = MEMORY[0x263F8EE78];
  }
  sub_249595B88(v30, &__x);
  uint64_t v31 = sub_2495B6B40();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(a1, v31);
  std::vector<std::string>::vector(a2, &__x);
  return std::vector<std::string>::~vector[abi:ne180100]((uint64_t)&__x, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
}

unsigned char *sub_2495693C8@<X0>(unsigned char *a1@<X8>)
{
  return sub_2495708B8(a1);
}

uint64_t sub_2495693D0()
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::operator BOOL[abi:ne180100](v0);
}

std::string *sub_2495693EC@<X0>(std::string *a1@<X8>)
{
  uint64_t v3 = (const std::string *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return std::string::basic_string(a1, v3);
}

unsigned char *sub_249569424@<X0>(unsigned char *a1@<X8>)
{
  return sub_24957088C(a1);
}

uint64_t sub_24956942C()
{
  return std::optional<ctb::SIPConferenceInfo::Description>::operator BOOL[abi:ne180100](v0);
}

std::string *sub_249569448@<X0>(std::string *a1@<X8>)
{
  uint64_t v3 = (const ctb::SIPConferenceInfo::Description *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::SIPConferenceInfo::Description::Description(a1, v3);
}

unsigned char *sub_249569480@<X0>(unsigned char *a1@<X8>)
{
  return sub_24957057C(a1);
}

uint64_t sub_249569488()
{
  return std::optional<ctb::chatbot::CommunicationAddress>::operator BOOL[abi:ne180100](v0);
}

uint64_t sub_2495694A4@<X0>(ctb::chatbot::CommunicationAddress *a1@<X8>)
{
  uint64_t v3 = (const ctb::chatbot::CommunicationAddress *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::chatbot::CommunicationAddress::CommunicationAddress(a1, v3);
}

ctb::chatbot::MediaList *sub_2495694DC@<X0>(ctb::chatbot::MediaList *a1@<X8>)
{
  uint64_t v3 = (const MediaList *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::chatbot::MediaList::MediaList(a1, v3);
}

std::string *sub_249569514@<X0>(std::string *a1@<X8>)
{
  uint64_t v3 = (const OrgName *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::chatbot::OrgName::OrgName(a1, v3);
}

std::string *sub_24956954C@<X0>(std::string *a1@<X8>)
{
  uint64_t v3 = (const CategoryList *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::chatbot::CategoryList::CategoryList(a1, v3);
}

void *sub_249569584@<X0>(ctb::chatbot::WebResources *a1@<X8>)
{
  uint64_t v3 = (const WebResources *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::chatbot::WebResources::WebResources(a1, v3);
}

unsigned char *sub_2495695BC@<X0>(unsigned char *a1@<X8>)
{
  return sub_249570538(a1);
}

uint64_t sub_2495695C4()
{
  return std::optional<ctb::chatbot::OrgDetails>::operator BOOL[abi:ne180100](v0);
}

uint64_t sub_2495695E0@<X0>(ctb::chatbot::OrgDetails *a1@<X8>)
{
  uint64_t v3 = (const ctb::chatbot::OrgDetails *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::chatbot::OrgDetails::OrgDetails(a1, v3);
}

void *sub_249569618@<X0>(void *a1@<X8>)
{
  uint64_t v3 = std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::chatbot::AddressEntryList::AddressEntryList(a1, v3);
}

ctb::chatbot::MenuItem *sub_249569650@<X0>(ctb::chatbot::MenuItem *a1@<X8>)
{
  uint64_t v3 = (const ctb::chatbot::MenuItem *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::chatbot::MenuItem::MenuItem(a1, v3);
}

unsigned char *sub_249569688@<X0>(unsigned char *a1@<X8>)
{
  return sub_2495707F4(a1);
}

uint64_t sub_249569690()
{
  return std::optional<ctb::chatbot::CardTitleStyle>::operator BOOL[abi:ne180100](v0);
}

unsigned char *sub_2495696AC@<X0>(unsigned char *a1@<X8>)
{
  return sub_2495696DC((uint64_t (*)(int *))std::optional<ctb::chatbot::CardTitleStyle>::operator*[abi:ne180100], a1);
}

unsigned char *sub_2495696C4@<X0>(unsigned char *a1@<X8>)
{
  return sub_2495696DC((uint64_t (*)(int *))std::optional<ctb::chatbot::CardDescriptionStyle>::operator*[abi:ne180100], a1);
}

unsigned char *sub_2495696DC@<X0>(uint64_t (*a1)(int *)@<X2>, unsigned char *a2@<X8>)
{
  int v7 = *v2;
  __n128 result = (unsigned char *)a1(&v7);
  char v5 = result[1];
  char v6 = result[2];
  *a2 = *result;
  a2[1] = v5;
  a2[2] = v6;
  return result;
}

uint64_t sub_249569730@<X0>(ctb::SIPConferenceInfo::SubjectExt *a1@<X8>)
{
  uint64_t v3 = (const SubjectExt *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::SIPConferenceInfo::SubjectExt::SubjectExt(a1, v3);
}

unsigned char *sub_249569768@<X0>(unsigned char *a1@<X8>)
{
  return sub_249570748(a1);
}

uint64_t sub_249569770()
{
  return std::optional<ctb::chatbot::CardMedia>::operator BOOL[abi:ne180100](v0);
}

uint64_t sub_24956978C@<X0>(ctb::chatbot::CardMedia *a1@<X8>)
{
  uint64_t v3 = (const ctb::chatbot::CardMedia *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::chatbot::CardMedia::CardMedia(a1, v3);
}

void *sub_2495697C4@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::chatbot::SuggestedChipList::SuggestedChipList(a1, v3);
}

unsigned char *sub_2495697FC@<X0>(unsigned char *a1@<X8>)
{
  return sub_2495706F8(a1);
}

uint64_t sub_249569804()
{
  return std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::operator BOOL[abi:ne180100](v0);
}

uint64_t sub_249569820@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>::variant[abi:ne180100](a1, v3);
}

unsigned char *sub_249569858@<X0>(unsigned char *a1@<X8>)
{
  return sub_2495704FC(a1);
}

uint64_t sub_249569860()
{
  return std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator BOOL[abi:ne180100](v0);
}

__n128 sub_24956987C@<Q0>(__n128 *a1@<X8>)
{
  long long v3 = *v1;
  uint64_t v7 = *((void *)v1 + 2);
  long long v6 = v3;
  uint64_t v4 = (__n128 *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](&v6);
  __n128 result = *v4;
  *a1 = *v4;
  return result;
}

uint64_t sub_2495698C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = std::set<std::string>::count[abi:ne180100](v2, a1);
  *a2 = result;
  return result;
}

unsigned char *sub_2495698F8@<X0>(unsigned char *a1@<X8>)
{
  return sub_2495707D4(a1);
}

uint64_t sub_249569900()
{
  return std::optional<unsigned long>::operator BOOL[abi:ne180100](v0);
}

void *sub_24956991C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1[1];
  v5[0] = *v1;
  v5[1] = v3;
  uint64_t result = (void *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v5);
  *a1 = *result;
  return result;
}

unsigned char *sub_24956995C@<X0>(unsigned char *a1@<X8>)
{
  return sub_249570814(a1);
}

uint64_t sub_249569964()
{
  return std::optional<ctb::CPMGroupManagement::Response>::operator BOOL[abi:ne180100](v0);
}

_DWORD *sub_249569980@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t result = (_DWORD *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](&v4);
  *a1 = *result;
  return result;
}

unsigned char *sub_2495699C0@<X0>(unsigned char *a1@<X8>)
{
  return sub_2495708DC(a1);
}

uint64_t sub_2495699C8()
{
  return std::optional<ctb::FileTransferDescriptor::FileDescriptor>::operator BOOL[abi:ne180100](v0);
}

uint64_t sub_2495699E4@<X0>(ctb::FileTransferDescriptor::FileDescriptor *a1@<X8>)
{
  uint64_t v3 = (const ctb::FileTransferDescriptor::FileDescriptor *)std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v1);
  return ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor(a1, v3);
}

uint64_t sub_249569A1C(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08((unint64_t *)&qword_2696BF8B8, type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_249569A8C(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF808, type metadata accessor for std.__1.optional_SubjectExt_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_249569AFC(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF810, type metadata accessor for std.__1.optional_Description_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_249569B70@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 v7 = 0uLL;
  uint64_t v8 = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v7);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      std::vector<ctb::chatbot::URIEntry>::push_back[abi:ne180100]((uint64_t *)&v7, v5);
      v5 += 40;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a2, &v7);
  std::vector<std::string>::~vector[abi:ne180100]((uint64_t)&v7, (uint64_t)std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
  return swift_bridgeObjectRelease();
}

uint64_t sub_249569C30@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 v7 = 0uLL;
  uint64_t v8 = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v7);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      std::vector<ctb::chatbot::MediaEntry>::push_back[abi:ne180100]((uint64_t *)&v7, v5);
      v5 += 72;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a2, &v7);
  std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)&v7, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
  return swift_bridgeObjectRelease();
}

uint64_t sub_249569CDC@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 v7 = 0uLL;
  uint64_t v8 = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v7);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = (long long *)(a1 + 32);
    swift_bridgeObjectRetain();
    do
    {
      std::vector<ctb::chatbot::OrgNameEntry>::push_back[abi:ne180100]((uint64_t *)&v7, v5);
      v5 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a2, &v7);
  std::vector<std::string>::~vector[abi:ne180100]((uint64_t)&v7, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return swift_bridgeObjectRelease();
}

uint64_t sub_249569D9C@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 v10 = 0uLL;
  uint64_t v11 = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v10);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = (long long *)(a1 + 32);
    swift_bridgeObjectRetain();
    do
    {
      ctb::chatbot::AddressEntry::AddressEntry(v8, v5);
      char v9 = 0;
      ctb::chatbot::AddressEntry::AddressEntry((uint64_t)v7, (long long *)v8);
      ctb::chatbot::AddressEntry::~AddressEntry((void **)&v8[0].__r_.__value_.__l.__data_);
      std::vector<ctb::chatbot::AddressEntry>::push_back[abi:ne180100]((int64x2_t *)&v10, (uint64_t)v7);
      ctb::chatbot::AddressEntry::~AddressEntry(v7);
      v5 += 3;
      --v4;
    }
    while (v4);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  memset(v8, 0, sizeof(v8));
  char v9 = 1;
  swift_bridgeObjectRelease();
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a2, &v10);
  std::vector<ctb::chatbot::AddressEntry>::~vector[abi:ne180100]((void **)&v10);
  return swift_bridgeObjectRelease();
}

uint64_t sub_249569E84@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 v10 = 0uLL;
  uint64_t v11 = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v10);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = (const ctb::ClientAuthenticityRequest::Parameter *)(a1 + 32);
    swift_bridgeObjectRetain();
    do
    {
      ctb::ClientAuthenticityRequest::Parameter::Parameter((ctb::ClientAuthenticityRequest::Parameter *)v8, v5);
      char v9 = 0;
      std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)v7, v8);
      ctb::ClientAuthenticityRequest::Parameter::~Parameter((ctb::ClientAuthenticityRequest::Parameter *)v8);
      std::vector<ctb::ClientAuthenticityRequest::Parameter>::push_back[abi:ne180100](&v10, (uint64_t)v7);
      ctb::ClientAuthenticityRequest::Parameter::~Parameter((ctb::ClientAuthenticityRequest::Parameter *)v7);
      uint64_t v5 = (const ctb::ClientAuthenticityRequest::Parameter *)((char *)v5 + 32);
      --v4;
    }
    while (v4);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  memset(v8, 0, sizeof(v8));
  char v9 = 1;
  swift_bridgeObjectRelease();
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a2, &v10);
  std::vector<std::string>::~vector[abi:ne180100]((uint64_t)&v10, (uint64_t)std::vector<ctb::ClientAuthenticityRequest::Parameter>::__base_destruct_at_end[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
  return swift_bridgeObjectRelease();
}

uint64_t sub_249569F90@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 v7 = 0uLL;
  uint64_t v8 = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v7);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      std::vector<ctb::ClientAuthenticityRequest::Method>::push_back[abi:ne180100]((uint64_t *)&v7, v5);
      v5 += 56;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a2, &v7);
  std::vector<std::string>::~vector[abi:ne180100]((uint64_t)&v7, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>, (void (*)(uint64_t *))std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100]);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24956A050@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 v7 = 0uLL;
  uint64_t v8 = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v7);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::push_back[abi:ne180100]((uint64_t *)&v7, v5);
      v5 += 56;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a2, &v7);
  std::vector<std::string>::~vector[abi:ne180100]((uint64_t)&v7, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>, (void (*)(uint64_t *))std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100]);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24956A110@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_24956AC08(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))std::operator-[abi:ne180100]<ctb::chatbot::URIEntry const*,ctb::chatbot::URIEntry const*>, a3);
}

void *sub_24956A128(void *a1, uint64_t *a2)
{
  return std::__wrap_iter<ctb::chatbot::URIEntry const*>::operator+=[abi:ne180100](a1, *a2);
}

uint64_t sub_24956A134@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_24956AC08(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))std::operator-[abi:ne180100]<ctb::chatbot::MediaEntry const*,ctb::chatbot::MediaEntry const*>, a3);
}

void *sub_24956A14C(void *a1, uint64_t *a2)
{
  return std::__wrap_iter<ctb::chatbot::MediaEntry const*>::operator+=[abi:ne180100](a1, *a2);
}

uint64_t sub_24956A158@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_24956AC08(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))std::operator-[abi:ne180100]<ctb::chatbot::OrgNameEntry const*,ctb::chatbot::OrgNameEntry const*>, a3);
}

void *sub_24956A170(void *a1, uint64_t *a2)
{
  return std::__wrap_iter<ctb::ClientAuthenticityRequest::Parameter const*>::operator+=[abi:ne180100](a1, *a2);
}

uint64_t sub_24956A178(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF888, type metadata accessor for std.__1.optional_CommunicationAddress_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956A1E8(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF880, type metadata accessor for std.__1.optional_MediaList_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956A258(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF878, type metadata accessor for std.__1.optional_OrgName_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956A2C8(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF870, type metadata accessor for std.__1.optional_CategoryList_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956A338(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF868, type metadata accessor for std.__1.optional_WebResources_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956A3A8(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF890, type metadata accessor for std.__1.optional_OrgDetails_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956A41C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_24956AC08(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))std::operator-[abi:ne180100]<ctb::chatbot::AddressEntry const*,ctb::chatbot::AddressEntry const*>, a3);
}

void *sub_24956A434(void *a1, uint64_t *a2)
{
  return std::__wrap_iter<ctb::chatbot::AddressEntry const*>::operator+=[abi:ne180100](a1, *a2);
}

uint64_t sub_24956A43C(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF898, type metadata accessor for std.__1.optional_AddressEntryList_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956A4AC(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF8C0, type metadata accessor for std.__1.optional_MenuItem_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956A51C(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF830, type metadata accessor for std.__1.optional_CardTitleStyle_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956A58C(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF828, type metadata accessor for std.__1.optional_CardDescriptionStyle_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956A5FC(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF820, type metadata accessor for std.__1.optional_CardStyle_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956A66C(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF858, type metadata accessor for std.__1.optional_CardMedia_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956A6DC(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF850, type metadata accessor for std.__1.optional_CardTitle_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956A74C(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF848, type metadata accessor for std.__1.optional_CardDescription_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956A7BC(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF840, type metadata accessor for std.__1.optional_SuggestedChipList_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956A82C(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF860, type metadata accessor for std.__1.optional_variant____);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956A89C(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF8A8, type metadata accessor for std.__1.optional_SuggestedActionShowQuery_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956A90C(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF8B0, type metadata accessor for std.__1.optional_SuggestedActionShowCoordinates_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956A97C(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF8A0, type metadata accessor for std.__1.optional_PostbackData_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956A9EC(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF838, type metadata accessor for std.__1.optional_CUnsignedLong_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956AA60@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_24956AC08(a1, a2, std::operator-[abi:ne180100]<ctb::ClientAuthenticityRequest::Parameter const*,ctb::ClientAuthenticityRequest::Parameter const*>, a3);
}

uint64_t sub_24956AA7C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_24956AC08(a1, a2, std::operator-[abi:ne180100]<ctb::ClientAuthenticityRequest::Method const*,ctb::ClientAuthenticityRequest::Method const*>, a3);
}

void *sub_24956AA94(void *a1, uint64_t *a2)
{
  return std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator+=[abi:ne180100](a1, *a2);
}

uint64_t sub_24956AA9C(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08((unint64_t *)&qword_2696BF818, type metadata accessor for std.__1.optional_Response_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956AB0C(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF7F8, type metadata accessor for std.__1.optional___);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956AB7C(uint64_t a1)
{
  uint64_t v2 = sub_24956FC08(&qword_2696BF800, type metadata accessor for std.__1.optional_FileDescriptor_);
  return CxxOptional.init(nilLiteral:)(a1, v2);
}

uint64_t sub_24956ABF0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_24956AC08(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))std::operator-[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server const*,ctb::ProvisioningConfiguration::AccessControl::Server const*>, a3);
}

uint64_t sub_24956AC08@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t *, uint64_t *)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v7 = *a2;
  uint64_t v8 = v5;
  uint64_t result = a3(&v8, &v7);
  *a4 = result;
  return result;
}

void (*sub_24956AC50(std::string **a1))(void ***a1)
{
  uint64_t v3 = (std::string *)malloc(0x30uLL);
  *a1 = v3;
  v3[1].__r_.__value_.__r.__words[2] = *v1;
  uint64_t v4 = (const ctb::chatbot::URIEntry *)std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)&v3[1].__r_.__value_.__r.__words[2]);
  ctb::chatbot::URIEntry::URIEntry(v3, v4);
  return sub_24956ACC0;
}

void sub_24956ACC0(void ***a1)
{
  ctb::chatbot::URIEntry::~URIEntry(*a1);

  free(v1);
}

void *sub_24956ACEC@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t result = std::__wrap_iter<ctb::chatbot::URIEntry const*>::operator++[abi:ne180100](&v4);
  *a1 = v4;
  return result;
}

void (*sub_24956AD2C(ctb::chatbot::MediaEntry **a1))(void ***a1)
{
  uint64_t v3 = (ctb::chatbot::MediaEntry *)malloc(0x50uLL);
  *a1 = v3;
  *((void *)v3 + 9) = *v1;
  uint64_t v4 = (const ctb::chatbot::MediaEntry *)std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)v3 + 72);
  ctb::chatbot::MediaEntry::MediaEntry(v3, v4);
  return sub_24956AD9C;
}

void sub_24956AD9C(void ***a1)
{
  ctb::chatbot::MediaEntry::~MediaEntry(*a1);

  free(v1);
}

void *sub_24956ADC8@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t result = std::__wrap_iter<ctb::chatbot::MediaEntry const*>::operator++[abi:ne180100](&v4);
  *a1 = v4;
  return result;
}

void (*sub_24956AE08(std::string **a1))(std::basic_string<char16_t> **a1)
{
  uint64_t v3 = (std::string *)malloc(0x28uLL);
  *a1 = v3;
  v3[1].__r_.__value_.__l.__size_ = *v1;
  uint64_t v4 = (const OrgNameEntry *)std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)&v3[1].__r_.__value_.__l.__size_);
  ctb::chatbot::OrgNameEntry::OrgNameEntry(v3, v4);
  return sub_24956AE78;
}

void sub_24956AE78(std::basic_string<char16_t> **a1)
{
  ctb::chatbot::OrgNameEntry::~OrgNameEntry(*a1);

  free(v1);
}

void (*sub_24956AEA4(std::string **a1))(void ***a1)
{
  uint64_t v3 = (std::string *)malloc(0x38uLL);
  *a1 = v3;
  v3[2].__r_.__value_.__r.__words[0] = *v1;
  uint64_t v4 = (long long *)std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)&v3[2]);
  ctb::chatbot::AddressEntry::AddressEntry(v3, v4);
  return sub_24956AF14;
}

void sub_24956AF14(void ***a1)
{
  ctb::chatbot::AddressEntry::~AddressEntry(*a1);

  free(v1);
}

void *sub_24956AF40@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t result = std::__wrap_iter<ctb::chatbot::AddressEntry const*>::operator++[abi:ne180100](&v4);
  *a1 = v4;
  return result;
}

void (*sub_24956AF80(ctb::ClientAuthenticityRequest::Parameter **a1))(ctb::ClientAuthenticityRequest::Parameter **a1)
{
  uint64_t v3 = (ctb::ClientAuthenticityRequest::Parameter *)malloc(0x28uLL);
  *a1 = v3;
  *((void *)v3 + 4) = *v1;
  uint64_t v4 = (const ctb::ClientAuthenticityRequest::Parameter *)std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)v3 + 32);
  ctb::ClientAuthenticityRequest::Parameter::Parameter(v3, v4);
  return sub_24956AFF0;
}

void sub_24956AFF0(ctb::ClientAuthenticityRequest::Parameter **a1)
{
  ctb::ClientAuthenticityRequest::Parameter::~Parameter(*a1);

  free(v1);
}

void *sub_24956B01C@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t result = std::__wrap_iter<ctb::ClientAuthenticityRequest::Parameter const*>::operator++[abi:ne180100](&v4);
  *a1 = v4;
  return result;
}

void (*sub_24956B05C(ctb::ClientAuthenticityRequest::Method **a1))(void ***a1)
{
  uint64_t v3 = (ctb::ClientAuthenticityRequest::Method *)malloc(0x40uLL);
  *a1 = v3;
  *((void *)v3 + 7) = *v1;
  uint64_t v4 = (const ctb::ClientAuthenticityRequest::Method *)std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)v3 + 56);
  ctb::ClientAuthenticityRequest::Method::Method(v3, v4);
  return sub_24956B0CC;
}

void sub_24956B0CC(void ***a1)
{
  ctb::ClientAuthenticityRequest::Method::~Method(*a1);

  free(v1);
}

void *sub_24956B0F8@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t result = std::__wrap_iter<ctb::ClientAuthenticityRequest::Method const*>::operator++[abi:ne180100](&v4);
  *a1 = v4;
  return result;
}

void (*sub_24956B138(std::string **a1))(char ***a1)
{
  uint64_t v3 = (std::string *)malloc(0x40uLL);
  *a1 = v3;
  v3[2].__r_.__value_.__l.__size_ = *v1;
  uint64_t v4 = (const ctb::ProvisioningConfiguration::AccessControl::Server *)std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)&v3[2].__r_.__value_.__l.__size_);
  ctb::ProvisioningConfiguration::AccessControl::Server::Server(v3, v4);
  return sub_24956B1A8;
}

void sub_24956B1A8(char ***a1)
{
  ctb::ProvisioningConfiguration::AccessControl::Server::~Server(*a1);

  free(v1);
}

uint64_t sub_24956B1D4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_24956B27C(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t *))std::operator==[abi:ne180100]<ctb::chatbot::URIEntry const*>);
}

uint64_t sub_24956B1EC(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_24956B27C(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t *))std::operator==[abi:ne180100]<ctb::chatbot::MediaEntry const*>);
}

uint64_t sub_24956B204(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_24956B27C(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t *))std::operator==[abi:ne180100]<ctb::chatbot::OrgNameEntry const*>);
}

uint64_t sub_24956B21C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_24956B27C(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t *))std::operator==[abi:ne180100]<ctb::chatbot::AddressEntry const*>);
}

uint64_t sub_24956B234(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_24956B27C(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t *))std::operator==[abi:ne180100]<ctb::ClientAuthenticityRequest::Parameter const*>);
}

uint64_t sub_24956B24C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_24956B27C(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t *))std::operator==[abi:ne180100]<ctb::ClientAuthenticityRequest::Method const*>);
}

uint64_t sub_24956B264(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_24956B27C(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t *))std::operator==[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server const*>);
}

uint64_t sub_24956B27C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *, uint64_t *))
{
  uint64_t v5 = *a1;
  uint64_t v7 = *a2;
  uint64_t v8 = v5;
  return a5(&v8, &v7);
}

void *sub_24956B2B4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2696BF558);
      __n128 v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      int64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      __n128 v10 = (void *)MEMORY[0x263F8EE78];
      int64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24956B7E4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_24956B3C8(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    int64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2696BF560);
  uint64_t v10 = *(void *)(sub_2495B6840() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  int64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = sub_2495B88C0();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_2495B6840() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_24956B8DC(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_24956B634(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_24956B2B4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_2495B88E0();
  __break(1u);
  return result;
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, const std::vector<std::string> *__x)
{
  return (std::vector<std::string> *)std::vector<std::string>::vector(this, (uint64_t)__x, (void (*)(void))std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_24956B7E4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_2495B88E0();
  __break(1u);
  return result;
}

uint64_t sub_24956B8DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(sub_2495B6840() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = sub_2495B88E0();
  __break(1u);
  return result;
}

uint64_t std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40) && *(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_24956BA78()
{
  return std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::optional[abi:ne180100]();
}

uint64_t sub_24956BA94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::~optional(a1);
  return std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_24956BAC4(uint64_t a1, long long *a2)
{
  return a1;
}

__n128 std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::optional[abi:ne180100](uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  if (*((unsigned char *)a2 + 40))
  {
    long long v2 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v2;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    __n128 result = *(__n128 *)((char *)a2 + 24);
    *(__n128 *)(a1 + 24) = result;
    *(unsigned char *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 1;
  }
  return result;
}

uint64_t sub_24956BB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::optional[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_StandaloneMsg_(uint64_t a1)
{
}

uint64_t std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<ctb::ProvisioningConfiguration::Messaging::Chat,false>::__optional_copy_base[abi:ne180100]);
}

uint64_t sub_24956BB94(uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_24956BBB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::~optional();
  return std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_24956BBE0(uint64_t a1, long long *a2)
{
  return a1;
}

uint64_t std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::optional[abi:ne180100](uint64_t result, long long *a2)
{
  *(unsigned char *)__n128 result = 0;
  *(unsigned char *)(result + 96) = 0;
  if (*((unsigned char *)a2 + 96))
  {
    long long v2 = *a2;
    long long v3 = a2[1];
    *(_WORD *)(result + 32) = *((_WORD *)a2 + 16);
    *(_OWORD *)__n128 result = v2;
    *(_OWORD *)(result + 16) = v3;
    long long v4 = *(long long *)((char *)a2 + 40);
    *(void *)(result + 56) = *((void *)a2 + 7);
    *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v4;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 5) = 0;
    *(unsigned char *)(result + 64) = 0;
    *(unsigned char *)(result + 88) = 0;
    if (*((unsigned char *)a2 + 88))
    {
      long long v5 = a2[4];
      *(void *)(result + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 10);
      *(_OWORD *)(result + 64) = v5;
      *((void *)a2 + 9) = 0;
      *((void *)a2 + 1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
      *((void *)a2 + 8) = 0;
      *(unsigned char *)(result + 88) = 1;
    }
    *(unsigned char *)(result + 96) = 1;
  }
  return result;
}

uint64_t sub_24956BC8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::optional[abi:ne180100]);
}

uint64_t sub_24956BCB8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(uint64_t, uint64_t))
{
  return a1;
}

uint64_t sub_24956BD14(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24956BD34(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 104) = v3;
  return result;
}

void type metadata accessor for std.__1.optional_Chat_(uint64_t a1)
{
}

uint64_t sub_24956BD98()
{
  return std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::optional[abi:ne180100]();
}

uint64_t sub_24956BDB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::~optional();
  return std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_24956BDE4(uint64_t a1, long long *a2)
{
  __n128 v4 = std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::optional[abi:ne180100](a1, a2);
  std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::~optional(a2, v4);
  return a1;
}

__n128 std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::optional[abi:ne180100](uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 136) = 0;
  if (*((unsigned char *)a2 + 136))
  {
    long long v2 = *a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(_OWORD *)a1 = v2;
    long long v3 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v3;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    long long v4 = a2[3];
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v4;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 6) = 0;
    long long v5 = *(long long *)((char *)a2 + 72);
    *(void *)(a1 + 88) = *((void *)a2 + 11);
    *(_OWORD *)(a1 + 72) = v5;
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *((void *)a2 + 11) = 0;
    long long v6 = a2[6];
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    *(_OWORD *)(a1 + 96) = v6;
    *((void *)a2 + 12) = 0;
    *((void *)a2 + 13) = 0;
    *((void *)a2 + 14) = 0;
    __n128 result = *(__n128 *)((char *)a2 + 120);
    *(__n128 *)(a1 + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = result;
    *(unsigned char *)(a1 + 136) = 1;
  }
  return result;
}

uint64_t sub_24956BEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::optional[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_FileTransfer_(uint64_t a1)
{
}

uint64_t sub_24956BEF8()
{
  return std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::optional[abi:ne180100]();
}

uint64_t sub_24956BF14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::~optional();
  return std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_24956BF44(uint64_t a1, long long *a2)
{
  __n128 v4 = std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::optional[abi:ne180100](a1, a2);
  std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::~optional(a2, v4);
  return a1;
}

__n128 std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::optional[abi:ne180100](uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 88) = 0;
  if (*((unsigned char *)a2 + 88))
  {
    long long v2 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v2;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v3 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v3;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    __n128 result = (__n128)a2[3];
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(__n128 *)(a1 + 48) = result;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 6) = 0;
    uint64_t v5 = *((void *)a2 + 9);
    *(_WORD *)(a1 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((_WORD *)a2 + 40);
    *(void *)(a1 + 72) = v5;
    *(unsigned char *)(a1 + 88) = 1;
  }
  return result;
}

uint64_t sub_24956BFEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::optional[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_Chatbot_(uint64_t a1)
{
}

void ctb::ProvisioningConfiguration::~ProvisioningConfiguration(ctb::ProvisioningConfiguration *this)
{
  if (*((unsigned char *)this + 712)) {
    std::__tree<std::string>::destroy((uint64_t)this + 688, *((char **)this + 87));
  }
  if (*((unsigned char *)this + 648)) {
    ctb::ProvisioningConfiguration::IMS3GPP::~IMS3GPP((ctb::ProvisioningConfiguration *)((char *)this + 120));
  }
  std::__optional_destruct_base<ctb::ProvisioningConfiguration::AccessControl,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 64);
  if (*((unsigned char *)this + 32))
  {
    if (*((char *)this + 31) < 0) {
      operator delete(*((void **)this + 1));
    }
  }
}

uint64_t sub_24956C0A4(ctb::ProvisioningConfiguration *a1, const ctb::ProvisioningConfiguration *a2)
{
  return ctb::ProvisioningConfiguration::ProvisioningConfiguration(a1, a2);
}

uint64_t sub_24956C0C0(ctb::ProvisioningConfiguration *a1, const ctb::ProvisioningConfiguration *a2)
{
  ctb::ProvisioningConfiguration::~ProvisioningConfiguration(a1);
  return ctb::ProvisioningConfiguration::ProvisioningConfiguration(v3, a2);
}

uint64_t sub_24956C0F0(uint64_t a1, ctb::ProvisioningConfiguration *a2)
{
  return a1;
}

uint64_t sub_24956C124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))ctb::ProvisioningConfiguration::~ProvisioningConfiguration, (void (*)(uint64_t, uint64_t))std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration,ctb::ProvisioningConfiguration,ctb::ProvisioningConfiguration*>);
}

uint64_t sub_24956C150(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 1184)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24956C170(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 1176) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 20std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 116std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 108std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 100std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 92std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 84std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 76std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 68std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 60std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 52std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 44std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 36std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 28std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 1184) = v3;
  return result;
}

void type metadata accessor for ctb.ProvisioningConfiguration(uint64_t a1)
{
}

ctb::ProvisioningConfiguration::AccessControl *ctb::ProvisioningConfiguration::AccessControl::AccessControl(ctb::ProvisioningConfiguration::AccessControl *this, const ctb::ProvisioningConfiguration::AccessControl *a2)
{
  __n128 v4 = std::set<std::string>::set[abi:ne180100]((uint64_t *)this, (uint64_t)a2);
  v4[3] = 0;
  v4[4] = 0;
  v4 += 3;
  v4[2] = 0;
  std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__init_with_size[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server*,ctb::ProvisioningConfiguration::AccessControl::Server*>(v4, *((void *)a2 + 3), *((void *)a2 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  return this;
}

void sub_24956C340(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ctb::ProvisioningConfiguration::AccessControl::~AccessControl(char **this)
{
  long long v2 = (void **)(this + 3);
  std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100](&v2, (void (*)(char *))std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>);
  std::__tree<std::string>::destroy((uint64_t)this, this[1]);
}

ctb::ProvisioningConfiguration::AccessControl *sub_24956C3B8(ctb::ProvisioningConfiguration::AccessControl *a1, const ctb::ProvisioningConfiguration::AccessControl *a2)
{
  return ctb::ProvisioningConfiguration::AccessControl::AccessControl(a1, a2);
}

ctb::ProvisioningConfiguration::AccessControl *sub_24956C3D4(char **a1, const ctb::ProvisioningConfiguration::AccessControl *a2)
{
  ctb::ProvisioningConfiguration::AccessControl::~AccessControl(a1);
  return ctb::ProvisioningConfiguration::AccessControl::AccessControl(v3, a2);
}

void *sub_24956C404(void *a1, char **a2)
{
  return a1;
}

uint64_t sub_24956C438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))ctb::ProvisioningConfiguration::AccessControl::~AccessControl, (void (*)(uint64_t, uint64_t))std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl*>);
}

uint64_t sub_24956C464(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24956C484(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for ctb.ProvisioningConfiguration.AccessControl(uint64_t a1)
{
}

std::string *ctb::ProvisioningConfiguration::AccessControl::Server::Server(std::string *this, const ctb::ProvisioningConfiguration::AccessControl::Server *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__s.__data_[0] = *((unsigned char *)a2 + 48);
  return this;
}

void sub_24956C534(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ctb::ProvisioningConfiguration::AccessControl::Server::~Server(char **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

std::string *sub_24956C594(std::string *a1, const ctb::ProvisioningConfiguration::AccessControl::Server *a2)
{
  return ctb::ProvisioningConfiguration::AccessControl::Server::Server(a1, a2);
}

std::string *sub_24956C5B0(char **a1, const ctb::ProvisioningConfiguration::AccessControl::Server *a2)
{
  ctb::ProvisioningConfiguration::AccessControl::Server::~Server(a1);
  return ctb::ProvisioningConfiguration::AccessControl::Server::Server(v3, a2);
}

uint64_t sub_24956C5E0(uint64_t a1, long long *a2)
{
  return a1;
}

uint64_t ctb::ProvisioningConfiguration::AccessControl::Server::Server(uint64_t result, long long *a2)
{
  long long v2 = *a2;
  *(void *)(result + 16) = *((void *)a2 + 2);
  *(_OWORD *)__n128 result = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(result + 24) = *((void *)a2 + 3);
  char v3 = a2 + 2;
  uint64_t v4 = *((void *)a2 + 4);
  *(void *)(result + 32) = v4;
  uint64_t v5 = result + 32;
  uint64_t v6 = *((void *)a2 + 5);
  *(void *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v6;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    *((void *)a2 + 3) = v3;
    *char v3 = 0;
    *((void *)a2 + 5) = 0;
  }
  else
  {
    *(void *)(result + 24) = v5;
  }
  *(unsigned char *)(result + 48) = *((unsigned char *)a2 + 48);
  return result;
}

uint64_t sub_24956C670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))ctb::ProvisioningConfiguration::AccessControl::Server::~Server, (void (*)(uint64_t, uint64_t))ctb::ProvisioningConfiguration::AccessControl::Server::Server);
}

uint64_t sub_24956C69C(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_24956C6F0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for ctb.ProvisioningConfiguration.AccessControl.Server(uint64_t a1)
{
}

uint64_t std::set<std::string>::~set[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t sub_24956C788()
{
  return std::set<std::string>::set[abi:ne180100]();
}

uint64_t sub_24956C7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::set<std::string>::~set[abi:ne180100](a1);
  return std::set<std::string>::set[abi:ne180100](v3, a2);
}

void *sub_24956C7D4(void *a1, void *a2)
{
  return a1;
}

void *std::set<std::string>::set[abi:ne180100](void *result, void *a2)
{
  *__n128 result = *a2;
  long long v2 = a2 + 1;
  uint64_t v3 = a2[1];
  result[1] = v3;
  BOOL v4 = result + 1;
  uint64_t v5 = a2[2];
  result[2] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *a2 = v2;
    void *v2 = 0;
    a2[2] = 0;
  }
  else
  {
    *__n128 result = v4;
  }
  return result;
}

uint64_t sub_24956C844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))std::set<std::string>::~set[abi:ne180100], (void (*)(uint64_t, uint64_t))std::set<std::string>::set[abi:ne180100]);
}

void type metadata accessor for std.__1.set_basic_string_CChar_ char_traits_CChar__ allocator_CChar___ less_basic_string_CChar_ char_traits_CChar__ allocator_CChar____ allocator_basic_string_CChar_ char_traits_CChar__ allocator_CChar____(uint64_t a1)
{
}

uint64_t sub_24956C890()
{
  return std::optional<ctb::ProvisioningConfiguration::Messaging>::optional[abi:ne180100]();
}

uint64_t sub_24956C8AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<ctb::ProvisioningConfiguration::Messaging>::~optional();
  return std::optional<ctb::ProvisioningConfiguration::Messaging>::optional[abi:ne180100](v3, a2);
}

unsigned char *sub_24956C8DC(unsigned char *a1, uint64_t a2)
{
  return a1;
}

unsigned char *std::optional<ctb::ProvisioningConfiguration::Messaging>::optional[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[416] = 0;
  if (*(unsigned char *)(a2 + 416))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging*>((uint64_t)a1, a2);
    a1[416] = 1;
  }
  return a1;
}

uint64_t sub_24956C954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))std::optional<ctb::ProvisioningConfiguration::Messaging>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::ProvisioningConfiguration::Messaging>::optional[abi:ne180100]);
}

uint64_t sub_24956C980(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 424)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24956C9A0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 20std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 36std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 28std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 424) = v3;
  return result;
}

void type metadata accessor for std.__1.optional_Messaging_(uint64_t a1)
{
}

uint64_t std::optional<ctb::ProvisioningConfiguration::Services>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56)) {
    std::__tree<std::string>::destroy(a1 + 32, *(char **)(a1 + 40));
  }
  return a1;
}

uint64_t sub_24956CA8C()
{
  return std::optional<ctb::ProvisioningConfiguration::Services>::optional[abi:ne180100]();
}

uint64_t sub_24956CAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<ctb::ProvisioningConfiguration::Services>::~optional(a1);
  return std::optional<ctb::ProvisioningConfiguration::Services>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_24956CAD8(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t sub_24956CB10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))std::optional<ctb::ProvisioningConfiguration::Services>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::ProvisioningConfiguration::Services>::optional[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_Services_(uint64_t a1)
{
}

void std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::~optional(ctb::ProvisioningConfiguration::IMS3GPP *a1)
{
  if (*((unsigned char *)a1 + 528)) {
    ctb::ProvisioningConfiguration::IMS3GPP::~IMS3GPP(a1);
  }
}

uint64_t sub_24956CB78()
{
  return std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::optional[abi:ne180100]();
}

uint64_t sub_24956CB94(ctb::ProvisioningConfiguration::IMS3GPP *a1)
{
  return std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::optional[abi:ne180100]();
}

unsigned char *sub_24956CBC4(unsigned char *a1, ctb::ProvisioningConfiguration::IMS3GPP *a2)
{
  return a1;
}

unsigned char *std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::optional[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[528] = 0;
  if (*(unsigned char *)(a2 + 528))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::IMS3GPP,ctb::ProvisioningConfiguration::IMS3GPP,ctb::ProvisioningConfiguration::IMS3GPP*>((uint64_t)a1, (long long *)a2);
    a1[528] = 1;
  }
  return a1;
}

uint64_t sub_24956CC3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::optional[abi:ne180100]);
}

uint64_t sub_24956CC68(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 536)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24956CC88(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 20std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 52std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 44std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 36std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 28std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 536) = v3;
  return result;
}

void type metadata accessor for std.__1.optional_IMS3GPP_(uint64_t a1)
{
}

uint64_t sub_24956CD60()
{
  return std::optional<ctb::ProvisioningConfiguration::AccessControl>::optional[abi:ne180100]();
}

uint64_t sub_24956CD7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<ctb::ProvisioningConfiguration::AccessControl>::~optional();
  return std::optional<ctb::ProvisioningConfiguration::AccessControl>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_24956CDAC(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t std::optional<ctb::ProvisioningConfiguration::AccessControl>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl*>((void *)a1, a2);
    *(unsigned char *)(a1 + 48) = 1;
  }
  return a1;
}

uint64_t sub_24956CE24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))std::optional<ctb::ProvisioningConfiguration::AccessControl>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::ProvisioningConfiguration::AccessControl>::optional[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_AccessControl_(uint64_t a1)
{
}

uint64_t std::optional<ctb::ProvisioningConfiguration::Token>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32) && *(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_24956CEA8()
{
  return std::optional<ctb::ProvisioningConfiguration::Token>::optional[abi:ne180100]();
}

uint64_t sub_24956CEC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<ctb::ProvisioningConfiguration::Token>::~optional(a1);
  return std::optional<ctb::ProvisioningConfiguration::Token>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_24956CEF4(uint64_t a1, uint64_t a2)
{
  return a1;
}

__n128 std::optional<ctb::ProvisioningConfiguration::Token>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    *(void *)a1 = *(void *)a2;
    __n128 result = *(__n128 *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(__n128 *)(a1 + 8) = result;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return result;
}

uint64_t sub_24956CF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))std::optional<ctb::ProvisioningConfiguration::Token>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::ProvisioningConfiguration::Token>::optional[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_Token_(uint64_t a1)
{
}

void *__swift_memcpy8_4(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t sub_24956CFB4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24956CFD4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

void type metadata accessor for std.__1.optional___(uint64_t a1)
{
}

uint64_t sub_24956D01C()
{
  return std::optional<ctb::FileTransferDescriptor::FileDescriptor>::optional[abi:ne180100]();
}

uint64_t sub_24956D038(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<ctb::FileTransferDescriptor::FileDescriptor>::~optional();
  return std::optional<ctb::FileTransferDescriptor::FileDescriptor>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_24956D068(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t sub_24956D0A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))std::optional<ctb::FileTransferDescriptor::FileDescriptor>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::FileTransferDescriptor::FileDescriptor>::optional[abi:ne180100]);
}

uint64_t sub_24956D0CC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 152)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24956D0EC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 152) = v3;
  return result;
}

void type metadata accessor for std.__1.optional_FileDescriptor_(uint64_t a1)
{
}

uint64_t sub_24956D15C()
{
  return std::optional<ctb::SIPConferenceInfo::ReferredInfo>::optional[abi:ne180100]();
}

uint64_t sub_24956D178(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<ctb::SIPConferenceInfo::ReferredInfo>::~optional();
  return std::optional<ctb::SIPConferenceInfo::ReferredInfo>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_24956D1A8(uint64_t a1, long long *a2)
{
  return a1;
}

uint64_t std::optional<ctb::SIPConferenceInfo::ReferredInfo>::optional[abi:ne180100](uint64_t result, long long *a2)
{
  *(unsigned char *)__n128 result = 0;
  *(unsigned char *)(result + 32) = 0;
  if (*((unsigned char *)a2 + 32))
  {
    *(unsigned char *)(result + 24) = 0;
    if (*((unsigned char *)a2 + 24))
    {
      long long v2 = *a2;
      *(void *)(result + 16) = *((void *)a2 + 2);
      *(_OWORD *)__n128 result = v2;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      *(unsigned char *)(result + 24) = 1;
    }
    *(unsigned char *)(result + 32) = 1;
  }
  return result;
}

uint64_t sub_24956D224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))std::optional<ctb::SIPConferenceInfo::ReferredInfo>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::SIPConferenceInfo::ReferredInfo>::optional[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_ReferredInfo_(uint64_t a1)
{
}

uint64_t std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<ctb::SIPConferenceInfo::SubjectExt,false>::__optional_copy_base[abi:ne180100]);
}

void sub_24956D27C(void **a1)
{
}

uint64_t sub_24956D294(uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_24956D2B0(void **a1, uint64_t a2)
{
  ctb::chatbot::URIEntry::~URIEntry(a1);
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](v3, a2);
}

void **sub_24956D2E4(void **a1, __n128 *a2)
{
  ctb::chatbot::URIEntry::~URIEntry(a1);
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](v4, a2);
  ctb::chatbot::URIEntry::~URIEntry((void **)a2);
  return a1;
}

void type metadata accessor for std.__1.optional_SubjectExt_(uint64_t a1)
{
}

void *std::vector<ctb::SIPConferenceInfo::User>::vector(void *a1, uint64_t a2)
{
  return std::vector<std::string>::vector(a1, a2, (void (*)(void))std::vector<ctb::SIPConferenceInfo::User>::__init_with_size[abi:ne180100]<ctb::SIPConferenceInfo::User*,ctb::SIPConferenceInfo::User*>);
}

void *std::vector<std::string>::vector(void *a1, uint64_t a2, void (*a3)(void))
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a3();
  return a1;
}

uint64_t sub_24956D3A0(uint64_t a1)
{
  return std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100](a1, (void (*)(uint64_t *))std::vector<ctb::SIPConferenceInfo::User>::__destroy_vector::operator()[abi:ne180100]);
}

void *sub_24956D3CC(void *a1, uint64_t a2)
{
  return std::vector<ctb::SIPConferenceInfo::User>::vector(a1, a2);
}

void *sub_24956D3E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100](a1, (void (*)(uint64_t *))std::vector<ctb::SIPConferenceInfo::User>::__destroy_vector::operator()[abi:ne180100]);
  return std::vector<ctb::SIPConferenceInfo::User>::vector(v3, a2);
}

__n128 *sub_24956D42C(__n128 *a1, __n128 *a2)
{
  return a1;
}

uint64_t sub_24956D474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24957116C(a1, a2, a3, (uint64_t)std::vector<ctb::SIPConferenceInfo::User>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100], (void (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]);
}

void type metadata accessor for std.__1.vector_User_ allocator_User__(uint64_t a1)
{
}

uint64_t sub_24956D4D4()
{
  return std::optional<ctb::SIPConferenceInfo::Description>::optional[abi:ne180100]();
}

uint64_t sub_24956D4F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<ctb::SIPConferenceInfo::Description>::~optional();
  return std::optional<ctb::SIPConferenceInfo::Description>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_24956D520(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t sub_24956D558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))std::optional<ctb::SIPConferenceInfo::Description>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::SIPConferenceInfo::Description>::optional[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_Description_(uint64_t a1)
{
}

void type metadata accessor for std.__1.optional_Response_(uint64_t a1)
{
}

std::string *ctb::chatbot::CardCarouselContent::CardCarouselContent(std::string *a1, uint64_t a2)
{
  uint64_t v4 = std::__optional_copy_base<ctb::chatbot::CardMedia,false>::__optional_copy_base[abi:ne180100](a1, (const ctb::chatbot::CardMedia *)a2);
  std::__optional_copy_base<ctb::SIPConferenceInfo::SubjectExt,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)v4 + 184), (long long *)(a2 + 184));
  std::__optional_copy_base<ctb::SIPConferenceInfo::SubjectExt,false>::__optional_copy_base[abi:ne180100](a1 + 9, (long long *)(a2 + 216));
  std::__optional_copy_base<ctb::chatbot::SuggestedChipList,false>::__optional_copy_base[abi:ne180100]((uint64_t)&a1[10].__r_.__value_.__l.__size_, a2 + 248);
  return a1;
}

void sub_24956D60C(_Unwind_Exception *a1)
{
  if (v1[240] && v1[239] < 0) {
    operator delete(*v3);
  }
  if (v1[208])
  {
    if (v1[207] < 0) {
      operator delete(*v2);
    }
  }
  std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v1);
  _Unwind_Resume(a1);
}

std::string *sub_24956D664(std::string *a1, uint64_t a2)
{
  return ctb::chatbot::CardCarouselContent::CardCarouselContent(a1, a2);
}

std::string *sub_24956D680(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (std::string *)std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>(a1);
  return ctb::chatbot::CardCarouselContent::CardCarouselContent(v3, a2);
}

uint64_t sub_24956D6B0(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t ctb::chatbot::CardCarouselContent::CardCarouselContent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 176) = 0;
  if (*(unsigned char *)(a2 + 176))
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::CardMedia,ctb::chatbot::CardMedia,ctb::chatbot::CardMedia*>(a1, (long long *)a2);
    *(unsigned char *)(a1 + 176) = 1;
  }
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  if (*(unsigned char *)(a2 + 208))
  {
    long long v4 = *(_OWORD *)(a2 + 184);
    *(void *)(a1 + 20std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(void *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = v4;
    *(void *)(a2 + 192) = 0;
    *(void *)(a2 + 20std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(a2 + 184) = 0;
    *(unsigned char *)(a1 + 208) = 1;
  }
  *(unsigned char *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 24std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  if (*(unsigned char *)(a2 + 240))
  {
    long long v5 = *(_OWORD *)(a2 + 216);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = v5;
    *(void *)(a2 + 224) = 0;
    *(void *)(a2 + 232) = 0;
    *(void *)(a2 + 216) = 0;
    *(unsigned char *)(a1 + 24std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 1;
  }
  *(unsigned char *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  if (*(unsigned char *)(a2 + 272))
  {
    *(void *)(a1 + 248) = 0;
    *(void *)(a1 + 256) = 0;
    *(void *)(a1 + 264) = 0;
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    *(void *)(a2 + 248) = 0;
    *(void *)(a2 + 256) = 0;
    *(void *)(a2 + 264) = 0;
    *(unsigned char *)(a1 + 272) = 1;
  }
  return a1;
}

uint64_t sub_24956D7D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>, (void (*)(uint64_t, uint64_t))ctb::chatbot::CardCarouselContent::CardCarouselContent);
}

uint64_t sub_24956D800(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 280)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24956D820(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 20std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 28std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v3;
  return result;
}

void type metadata accessor for ctb.chatbot.CardCarouselContent(uint64_t a1)
{
}

uint64_t sub_24956D8A8(uint64_t a1, __n128 *a2)
{
  return a1;
}

void type metadata accessor for std.__1.optional_CardStyle_(uint64_t a1)
{
}

_DWORD *__swift_memcpy4_1(_DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

void type metadata accessor for std.__1.optional_CardDescriptionStyle_(uint64_t a1)
{
}

uint64_t sub_24956D910(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24956D930(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 4) = v3;
  return result;
}

void type metadata accessor for std.__1.optional_CardTitleStyle_(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for std.__1.optional_CUnsignedLong_(uint64_t a1)
{
}

uint64_t std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<ctb::chatbot::SuggestedChipList,false>::__optional_copy_base[abi:ne180100]);
}

uint64_t sub_24956D9A4(uint64_t a1)
{
  return std::optional<ctb::chatbot::SuggestedChipList>::~optional(a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t sub_24956D9D0(uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_24956D9EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<ctb::chatbot::SuggestedChipList>::~optional(a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100]);
  return std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_24956DA30(uint64_t a1, __n128 *a2)
{
  return a1;
}

uint64_t sub_24956DA78(uint64_t a1, __n128 *a2, uint64_t a3)
{
  return sub_24956E978(a1, a2, a3, (void (*)(uint64_t *))std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_SuggestedChipList_(uint64_t a1)
{
}

void type metadata accessor for std.__1.optional_CardDescription_(uint64_t a1)
{
}

void type metadata accessor for std.__1.optional_CardTitle_(uint64_t a1)
{
}

uint64_t sub_24956DAD8()
{
  return std::optional<ctb::chatbot::CardMedia>::optional[abi:ne180100]();
}

uint64_t sub_24956DAF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<ctb::chatbot::CardMedia>::~optional();
  return std::optional<ctb::chatbot::CardMedia>::optional[abi:ne180100](v3, a2);
}

unsigned char *sub_24956DB24(unsigned char *a1, uint64_t a2)
{
  return a1;
}

unsigned char *std::optional<ctb::chatbot::CardMedia>::optional[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[176] = 0;
  if (*(unsigned char *)(a2 + 176))
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::CardMedia,ctb::chatbot::CardMedia,ctb::chatbot::CardMedia*>((uint64_t)a1, (long long *)a2);
    a1[176] = 1;
  }
  return a1;
}

uint64_t sub_24956DB9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))std::optional<ctb::chatbot::CardMedia>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::chatbot::CardMedia>::optional[abi:ne180100]);
}

uint64_t sub_24956DBC8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 184)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24956DBE8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 184) = v3;
  return result;
}

void type metadata accessor for std.__1.optional_CardMedia_(uint64_t a1)
{
}

uint64_t std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::~optional(uint64_t result)
{
  if (*(unsigned char *)(result + 336)) {
    return std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::~__dtor(result);
  }
  return result;
}

uint64_t sub_24956DC7C()
{
  return std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::optional[abi:ne180100]();
}

uint64_t sub_24956DC98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::~optional(a1);
  return std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::optional[abi:ne180100](v3, a2);
}

unsigned char *sub_24956DCC8(unsigned char *a1, uint64_t a2)
{
  return a1;
}

unsigned char *std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::optional[abi:ne180100](unsigned char *result, uint64_t a2)
{
  *__n128 result = 0;
  result[336] = 0;
  if (*(unsigned char *)(a2 + 336))
  {
    __n128 result = (unsigned char *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)result, a2);
    result[336] = 1;
  }
  return result;
}

uint64_t sub_24956DD2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::~optional, (void (*)(uint64_t, uint64_t))std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::optional[abi:ne180100]);
}

uint64_t sub_24956DD58(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 344)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24956DD78(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 20std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 28std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 344) = v3;
  return result;
}

void type metadata accessor for std.__1.optional_variant____(uint64_t a1)
{
}

std::string *ctb::chatbot::OrgNameEntry::OrgNameEntry(std::string *this, const OrgNameEntry *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
  return this;
}

void sub_24956DE68(std::basic_string<char16_t> *a1)
{
}

std::string *sub_24956DE80(std::string *a1, const OrgNameEntry *a2)
{
  return ctb::chatbot::OrgNameEntry::OrgNameEntry(a1, a2);
}

std::string *sub_24956DE9C(std::basic_string<char16_t> *a1, const OrgNameEntry *a2)
{
  ctb::chatbot::OrgNameEntry::~OrgNameEntry(a1);
  return ctb::chatbot::OrgNameEntry::OrgNameEntry(v3, a2);
}

__n128 *sub_24956DECC(__n128 *a1, __n128 *a2)
{
  return a1;
}

__n128 ctb::chatbot::OrgNameEntry::OrgNameEntry(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  a1[1].n128_u32[2] = a2[1].n128_u32[2];
  return result;
}

std::basic_string<char16_t> *sub_24956DF24(std::basic_string<char16_t> *a1, std::basic_string<char16_t> *a2, uint64_t a3)
{
  return sub_24956DF3C(a1, a2, a3, (void (*)(void))ctb::chatbot::OrgNameEntry::OrgNameEntry);
}

std::basic_string<char16_t> *sub_24956DF3C(std::basic_string<char16_t> *a1, std::basic_string<char16_t> *a2, uint64_t a3, void (*a4)(void))
{
  return a1;
}

void type metadata accessor for ctb.chatbot.OrgNameEntry(uint64_t a1)
{
}

ctb::chatbot::MediaEntry *ctb::chatbot::MediaEntry::MediaEntry(ctb::chatbot::MediaEntry *this, const ctb::chatbot::MediaEntry *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 32), (long long *)a2 + 2);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  return this;
}

void sub_24956E018(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void ctb::chatbot::MediaEntry::~MediaEntry(void **this)
{
  if (*((unsigned char *)this + 56) && *((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

ctb::chatbot::MediaEntry *sub_24956E084(ctb::chatbot::MediaEntry *a1, const ctb::chatbot::MediaEntry *a2)
{
  return ctb::chatbot::MediaEntry::MediaEntry(a1, a2);
}

ctb::chatbot::MediaEntry *sub_24956E0A0(void **a1, const ctb::chatbot::MediaEntry *a2)
{
  ctb::chatbot::MediaEntry::~MediaEntry(a1);
  return ctb::chatbot::MediaEntry::MediaEntry(v3, a2);
}

uint64_t sub_24956E0D0(uint64_t a1, void **a2)
{
  return a1;
}

uint64_t ctb::chatbot::MediaEntry::MediaEntry(uint64_t result, uint64_t a2)
{
  *(_DWORD *)__n128 result = *(_DWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 8);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(result + 8) = v2;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(result + 32) = 0;
  *(unsigned char *)(result + 56) = 0;
  if (*(unsigned char *)(a2 + 56))
  {
    long long v3 = *(_OWORD *)(a2 + 32);
    *(void *)(result + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(result + 32) = v3;
    *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 32) = 0;
    *(unsigned char *)(result + 56) = 1;
  }
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

uint64_t sub_24956E164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))ctb::chatbot::MediaEntry::~MediaEntry, (void (*)(uint64_t, uint64_t))ctb::chatbot::MediaEntry::MediaEntry);
}

uint64_t sub_24956E190(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24956E1B0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 72) = v3;
  return result;
}

void type metadata accessor for ctb.chatbot.MediaEntry(uint64_t a1)
{
}

std::string *ctb::chatbot::URIEntry::URIEntry(std::string *this, const ctb::chatbot::URIEntry *a2)
{
  __n128 result = std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this, (long long *)a2);
  result[1].__r_.__value_.__l.__size_ = *((void *)a2 + 4);
  return result;
}

void ctb::chatbot::URIEntry::~URIEntry(void **this)
{
  if (*((unsigned char *)this + 24))
  {
    if (*((char *)this + 23) < 0) {
      operator delete(*this);
    }
  }
}

std::string *sub_24956E26C(std::string *a1, const ctb::chatbot::URIEntry *a2)
{
  return ctb::chatbot::URIEntry::URIEntry(a1, a2);
}

std::string *sub_24956E288(void **a1, const ctb::chatbot::URIEntry *a2)
{
  ctb::chatbot::URIEntry::~URIEntry(a1);
  return ctb::chatbot::URIEntry::URIEntry(v3, a2);
}

uint64_t sub_24956E2B8(uint64_t a1, long long *a2)
{
  return a1;
}

uint64_t ctb::chatbot::URIEntry::URIEntry(uint64_t result, long long *a2)
{
  *(unsigned char *)__n128 result = 0;
  *(unsigned char *)(result + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long v2 = *a2;
    *(void *)(result + 16) = *((void *)a2 + 2);
    *(_OWORD *)__n128 result = v2;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(result + 24) = 1;
  }
  *(void *)(result + 32) = *((void *)a2 + 4);
  return result;
}

uint64_t sub_24956E328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))ctb::chatbot::URIEntry::~URIEntry, (void (*)(uint64_t, uint64_t))ctb::chatbot::URIEntry::URIEntry);
}

uint64_t sub_24956E354(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24956E374(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v3;
  return result;
}

void type metadata accessor for ctb.chatbot.URIEntry(uint64_t a1)
{
}

uint64_t std::optional<ctb::chatbot::WebResources>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<ctb::chatbot::WebResources,false>::__optional_copy_base[abi:ne180100]);
}

uint64_t sub_24956E3D4(uint64_t a1)
{
  return std::optional<ctb::chatbot::WebResources>::~optional(a1);
}

uint64_t sub_24956E3EC(uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::chatbot::WebResources>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_24956E408(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<ctb::chatbot::WebResources>::~optional(a1);
  return std::optional<ctb::chatbot::WebResources>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_24956E438(uint64_t a1, __n128 *a2)
{
  return a1;
}

uint64_t sub_24956E470(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = std::optional<ctb::chatbot::WebResources>::~optional(a1);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](v4, a2);
  std::optional<ctb::chatbot::WebResources>::~optional((uint64_t)a2);
  return a1;
}

void type metadata accessor for std.__1.optional_WebResources_(uint64_t a1)
{
}

uint64_t std::optional<ctb::chatbot::CategoryList>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<ctb::chatbot::CategoryList,false>::__optional_copy_base[abi:ne180100]);
}

uint64_t sub_24956E4D8(uint64_t a1)
{
  return std::optional<ctb::chatbot::MenuItem>::~optional(a1, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t std::optional<ctb::chatbot::MenuItem>::~optional(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *))
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v5 = a1;
    a3(&v5);
  }
  return a1;
}

{
  uint64_t v5;

  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v5 = a1;
    a3(&v5);
  }
  return a1;
}

uint64_t sub_24956E55C(uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::chatbot::CategoryList>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_24956E578(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<ctb::chatbot::MenuItem>::~optional(a1, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return std::optional<ctb::chatbot::CategoryList>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_24956E5D0(uint64_t a1, __n128 *a2)
{
  return a1;
}

uint64_t sub_24956E62C(uint64_t a1, __n128 *a2, uint64_t a3)
{
  return sub_24956E7C0(a1, a2, a3, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_CategoryList_(uint64_t a1)
{
}

uint64_t std::optional<ctb::chatbot::OrgName>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<ctb::chatbot::OrgName,false>::__optional_copy_base[abi:ne180100]);
}

uint64_t sub_24956E684(uint64_t a1)
{
  return std::optional<ctb::chatbot::MenuItem>::~optional(a1, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t sub_24956E6C4(uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::chatbot::OrgName>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_24956E6E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<ctb::chatbot::MenuItem>::~optional(a1, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return std::optional<ctb::chatbot::OrgName>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_24956E738(uint64_t a1, __n128 *a2)
{
  return a1;
}

uint64_t sub_24956E794(uint64_t a1, __n128 *a2, uint64_t a3)
{
  return sub_24956E7C0(a1, a2, a3, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t sub_24956E7C0(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *))
{
  uint64_t v9 = std::optional<ctb::chatbot::MenuItem>::~optional(a1, a4, a5);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](v9, a2);
  std::optional<ctb::chatbot::MenuItem>::~optional((uint64_t)a2, a4, a5);
  return a1;
}

void type metadata accessor for std.__1.optional_OrgName_(uint64_t a1)
{
}

uint64_t std::optional<ctb::chatbot::MediaList>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<ctb::chatbot::MediaList,false>::__optional_copy_base[abi:ne180100]);
}

uint64_t sub_24956E848(uint64_t a1)
{
  return std::optional<ctb::chatbot::SuggestedChipList>::~optional(a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t std::optional<ctb::chatbot::SuggestedChipList>::~optional(uint64_t a1, void (*a2)(uint64_t *))
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = a1;
    a2(&v4);
  }
  return a1;
}

uint64_t sub_24956E8B8(uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::chatbot::MediaList>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_24956E8D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<ctb::chatbot::SuggestedChipList>::~optional(a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
  return std::optional<ctb::chatbot::MediaList>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_24956E918(uint64_t a1, __n128 *a2)
{
  return a1;
}

uint64_t sub_24956E960(uint64_t a1, __n128 *a2, uint64_t a3)
{
  return sub_24956E978(a1, a2, a3, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t sub_24956E978(uint64_t a1, __n128 *a2, uint64_t a3, void (*a4)(uint64_t *))
{
  uint64_t v7 = std::optional<ctb::chatbot::SuggestedChipList>::~optional(a1, a4);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](v7, a2);
  std::optional<ctb::chatbot::SuggestedChipList>::~optional((uint64_t)a2, a4);
  return a1;
}

void type metadata accessor for std.__1.optional_MediaList_(uint64_t a1)
{
}

uint64_t std::optional<ctb::chatbot::CommunicationAddress>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<ctb::chatbot::CommunicationAddress,false>::__optional_copy_base[abi:ne180100]);
}

uint64_t std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::optional[abi:ne180100](uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return a1;
}

uint64_t sub_24956EA28(uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::chatbot::CommunicationAddress>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_24956EA44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<ctb::chatbot::CommunicationAddress>::~optional(a1);
  return std::optional<ctb::chatbot::CommunicationAddress>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_24956EA74(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t sub_24956EAAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))std::optional<ctb::chatbot::CommunicationAddress>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::chatbot::CommunicationAddress>::optional[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_CommunicationAddress_(uint64_t a1)
{
}

uint64_t sub_24956EAF8()
{
  return std::optional<ctb::chatbot::OrgDetails>::optional[abi:ne180100]();
}

uint64_t sub_24956EB14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<ctb::chatbot::OrgDetails>::~optional();
  return std::optional<ctb::chatbot::OrgDetails>::optional[abi:ne180100](v3, a2);
}

unsigned char *sub_24956EB44(unsigned char *a1, uint64_t a2)
{
  return a1;
}

unsigned char *std::optional<ctb::chatbot::OrgDetails>::optional[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[264] = 0;
  if (*(unsigned char *)(a2 + 264))
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails*>(a1, a2);
    a1[264] = 1;
  }
  return a1;
}

uint64_t sub_24956EBBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))std::optional<ctb::chatbot::OrgDetails>::~optional, (void (*)(uint64_t, uint64_t))std::optional<ctb::chatbot::OrgDetails>::optional[abi:ne180100]);
}

uint64_t sub_24956EBE8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 272)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24956EC08(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 264) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 20std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 272) = v3;
  return result;
}

void type metadata accessor for std.__1.optional_OrgDetails_(uint64_t a1)
{
}

std::string *ctb::chatbot::AddressEntry::AddressEntry(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_24956ED08(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ctb::chatbot::AddressEntry::~AddressEntry(void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

std::string *sub_24956ED6C(std::string *a1, long long *a2)
{
  return ctb::chatbot::AddressEntry::AddressEntry(a1, a2);
}

std::string *sub_24956ED88(void **a1, long long *a2)
{
  ctb::chatbot::AddressEntry::~AddressEntry(a1);
  return ctb::chatbot::AddressEntry::AddressEntry(v3, a2);
}

uint64_t sub_24956EDB8(uint64_t a1, long long *a2)
{
  return a1;
}

__n128 ctb::chatbot::AddressEntry::AddressEntry(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  __n128 result = *(__n128 *)((char *)a2 + 24);
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 5);
  *(__n128 *)(a1 + 24) = result;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  return result;
}

uint64_t sub_24956EE20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))ctb::chatbot::AddressEntry::~AddressEntry, (void (*)(uint64_t, uint64_t))ctb::chatbot::AddressEntry::AddressEntry);
}

void type metadata accessor for ctb.chatbot.AddressEntry(uint64_t a1)
{
}

uint64_t std::optional<ctb::chatbot::AddressEntryList>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<ctb::chatbot::AddressEntryList,false>::__optional_copy_base[abi:ne180100]);
}

uint64_t std::optional<ctb::chatbot::WebResources>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    char v3 = (void **)a1;
    std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  return a1;
}

uint64_t sub_24956EEB8(uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::chatbot::AddressEntryList>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_24956EED4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<ctb::chatbot::WebResources>::~optional(a1);
  return std::optional<ctb::chatbot::AddressEntryList>::optional[abi:ne180100](v3, a2);
}

void type metadata accessor for std.__1.optional_AddressEntryList_(uint64_t a1)
{
}

void type metadata accessor for std.__1.optional_PostbackData_(uint64_t a1)
{
}

__n128 std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](uint64_t a1, __n128 *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (a2[1].n128_u8[8])
  {
    __n128 result = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

void type metadata accessor for std.__1.optional_SuggestedActionShowQuery_(uint64_t a1)
{
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void type metadata accessor for std.__1.optional_SuggestedActionShowCoordinates_(uint64_t a1)
{
}

std::string *sub_24956EFA0(std::string *a1, const std::string *a2)
{
  return std::string::basic_string(a1, a2);
}

std::string *sub_24956EFBC(std::string *a1, const std::string *a2)
{
  std::string::~string(a1);
  return std::string::basic_string(v3, a2);
}

__n128 *sub_24956EFEC(__n128 *a1, __n128 *a2)
{
  return a1;
}

__n128 std::string::basic_string[abi:ne180100](__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

uint64_t sub_24956F03C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, MEMORY[0x263F8C0B8], (void (*)(uint64_t, uint64_t))std::string::basic_string[abi:ne180100]);
}

void type metadata accessor for std.__1.basic_string_CChar_ char_traits_CChar__ allocator_CChar__(uint64_t a1)
{
}

uint64_t std::optional<std::string>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]);
}

uint64_t sub_24956F094(uint64_t a1, uint64_t a2)
{
  return std::optional<std::string>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_24956F0B0(void **a1, uint64_t a2)
{
  ctb::chatbot::URIEntry::~URIEntry(a1);
  return std::optional<std::string>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_24956F0E0(uint64_t a1, __n128 *a2)
{
  return a1;
}

__n128 std::optional<std::string>::optional[abi:ne180100](uint64_t a1, __n128 *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (a2[1].n128_u8[8])
  {
    __n128 result = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t sub_24956F148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))ctb::chatbot::URIEntry::~URIEntry, (void (*)(uint64_t, uint64_t))std::optional<std::string>::optional[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___(uint64_t a1)
{
}

void type metadata accessor for ctb.chatbot(uint64_t a1)
{
}

ctb::chatbot::VerificationDetails *ctb::chatbot::VerificationDetails::VerificationDetails(ctb::chatbot::VerificationDetails *this, const ctb::chatbot::VerificationDetails *a2)
{
  *(unsigned char *)this = *(unsigned char *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  uint64_t v5 = (std::string *)((char *)this + 32);
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 2);
    *((void *)this + 6) = *((void *)a2 + 6);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_24956F230(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

ctb::chatbot::VerificationDetails *sub_24956F250(ctb::chatbot::VerificationDetails *a1, const ctb::chatbot::VerificationDetails *a2)
{
  return ctb::chatbot::VerificationDetails::VerificationDetails(a1, a2);
}

ctb::chatbot::VerificationDetails *sub_24956F26C(void **a1, const ctb::chatbot::VerificationDetails *a2)
{
  ctb::chatbot::VerificationDetails::~VerificationDetails(a1);
  return ctb::chatbot::VerificationDetails::VerificationDetails(v3, a2);
}

uint64_t sub_24956F29C(uint64_t a1, void **a2)
{
  return a1;
}

__n128 ctb::chatbot::VerificationDetails::VerificationDetails(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v2 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v2;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  __n128 result = *(__n128 *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  return result;
}

uint64_t sub_24956F30C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))ctb::chatbot::VerificationDetails::~VerificationDetails, (void (*)(uint64_t, uint64_t))ctb::chatbot::VerificationDetails::VerificationDetails);
}

uint64_t sub_24956F338(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[56]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_24956F38C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for ctb.chatbot.VerificationDetails(uint64_t a1)
{
}

void type metadata accessor for std(uint64_t a1)
{
}

void type metadata accessor for std.__1(uint64_t a1)
{
}

uint64_t std::optional<ctb::chatbot::MenuItem>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<ctb::chatbot::MenuItem,false>::__optional_copy_base[abi:ne180100]);
}

uint64_t sub_24956F430(uint64_t a1)
{
  return std::optional<ctb::chatbot::MenuItem>::~optional(a1, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t sub_24956F470(uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::chatbot::MenuItem>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_24956F48C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::optional<ctb::chatbot::MenuItem>::~optional(a1, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100]);
  return std::optional<ctb::chatbot::MenuItem>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_24956F4E4(uint64_t a1, __n128 *a2)
{
  return a1;
}

__n128 std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](uint64_t a1, __n128 *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (a2[1].n128_u8[8])
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t sub_24956F57C(uint64_t a1, __n128 *a2, uint64_t a3)
{
  return sub_24956E7C0(a1, a2, a3, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_MenuItem_(uint64_t a1)
{
}

ctb::ClientAuthenticityRequest::Method *ctb::ClientAuthenticityRequest::Method::Method(ctb::ClientAuthenticityRequest::Method *this, const ctb::ClientAuthenticityRequest::Method *a2)
{
  *(void *)this = *(void *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  std::vector<ctb::ClientAuthenticityRequest::Parameter>::__init_with_size[abi:ne180100]<ctb::ClientAuthenticityRequest::Parameter*,ctb::ClientAuthenticityRequest::Parameter*>((void *)this + 4, *((void *)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 5);
  return this;
}

void sub_24956F640(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void ctb::ClientAuthenticityRequest::Method::~Method(void **this)
{
  uint64_t v2 = this + 4;
  std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100](&v2, (void (*)(void))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__base_destruct_at_end[abi:ne180100]);
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

ctb::ClientAuthenticityRequest::Method *sub_24956F6C0(ctb::ClientAuthenticityRequest::Method *a1, const ctb::ClientAuthenticityRequest::Method *a2)
{
  return ctb::ClientAuthenticityRequest::Method::Method(a1, a2);
}

ctb::ClientAuthenticityRequest::Method *sub_24956F6DC(void **a1, const ctb::ClientAuthenticityRequest::Method *a2)
{
  ctb::ClientAuthenticityRequest::Method::~Method(a1);
  return ctb::ClientAuthenticityRequest::Method::Method(v3, a2);
}

uint64_t sub_24956F70C(uint64_t a1, void **a2)
{
  return a1;
}

__n128 ctb::ClientAuthenticityRequest::Method::Method(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v2 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v2;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  __n128 result = *(__n128 *)(a2 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

uint64_t sub_24956F784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))ctb::ClientAuthenticityRequest::Method::~Method, (void (*)(uint64_t, uint64_t))ctb::ClientAuthenticityRequest::Method::Method);
}

uint64_t sub_24956F7B0(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24956F7D0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 56) = v3;
  return result;
}

void type metadata accessor for ctb.ClientAuthenticityRequest.Method(uint64_t a1)
{
}

void type metadata accessor for ctb(uint64_t a1)
{
}

ctb::ClientAuthenticityRequest *ctb::ClientAuthenticityRequest::ClientAuthenticityRequest(ctb::ClientAuthenticityRequest *this, const ClientAuthenticityRequest *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::__init_with_size[abi:ne180100]<ctb::ClientAuthenticityRequest::Method*,ctb::ClientAuthenticityRequest::Method*>(this, (uint64_t)a2->fMethods.__begin_, (uint64_t)a2->fMethods.__end_, 0x6DB6DB6DB6DB6DB7 * (a2->fMethods.__end_ - a2->fMethods.__begin_));
  return this;
}

uint64_t sub_24956F884(uint64_t a1)
{
  return ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(a1, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>, (void (*)(uint64_t *))std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100]);
}

ctb::ClientAuthenticityRequest *sub_24956F8C4(ctb::ClientAuthenticityRequest *a1, const ClientAuthenticityRequest *a2)
{
  return ctb::ClientAuthenticityRequest::ClientAuthenticityRequest(a1, a2);
}

ctb::ClientAuthenticityRequest *sub_24956F8E0(uint64_t a1, const ClientAuthenticityRequest *a2)
{
  char v3 = (ctb::ClientAuthenticityRequest *)ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(a1, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>, (void (*)(uint64_t *))std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::ClientAuthenticityRequest::ClientAuthenticityRequest(v3, a2);
}

__n128 *sub_24956F938(__n128 *a1, __n128 *a2)
{
  return a1;
}

uint64_t sub_24956F994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2495745A0(a1, a2, a3, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>, (uint64_t)std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest, (void (*)(uint64_t, uint64_t))ctb::ClientAuthenticityRequest::ClientAuthenticityRequest);
}

void type metadata accessor for ctb.ClientAuthenticityRequest(uint64_t a1)
{
}

void ctb::ClientAuthenticityRequest::Parameter::~Parameter(ctb::ClientAuthenticityRequest::Parameter *this)
{
  if (*((unsigned char *)this + 24))
  {
    long long v2 = *(void **)this;
    if (*(void *)this)
    {
      *((void *)this + 1) = v2;
      operator delete(v2);
    }
  }
}

uint64_t sub_24956FA40(ctb::ClientAuthenticityRequest::Parameter *a1, const ctb::ClientAuthenticityRequest::Parameter *a2)
{
  return ctb::ClientAuthenticityRequest::Parameter::Parameter(a1, a2);
}

uint64_t sub_24956FA5C(ctb::ClientAuthenticityRequest::Parameter *a1, const ctb::ClientAuthenticityRequest::Parameter *a2)
{
  ctb::ClientAuthenticityRequest::Parameter::~Parameter(a1);
  return ctb::ClientAuthenticityRequest::Parameter::Parameter(v3, a2);
}

uint64_t sub_24956FA8C(uint64_t a1, __n128 *a2)
{
  return a1;
}

uint64_t sub_24956FAC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))ctb::ClientAuthenticityRequest::Parameter::~Parameter, (void (*)(uint64_t, uint64_t))std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]);
}

void type metadata accessor for ctb.ClientAuthenticityRequest.Parameter(uint64_t a1)
{
}

unint64_t sub_24956FB04()
{
  unint64_t result = qword_2696BF720;
  if (!qword_2696BF720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696BF720);
  }
  return result;
}

uint64_t sub_24956FB58(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF728, type metadata accessor for std.__1.optional___);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24956FBB0(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF730, type metadata accessor for std.__1.optional_FileDescriptor_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24956FC08(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24956FC50(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF738, type metadata accessor for std.__1.optional_SubjectExt_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24956FCA8(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF740, type metadata accessor for std.__1.optional_Description_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24956FD00(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF748, type metadata accessor for std.__1.optional_Response_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24956FD58(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF750, type metadata accessor for std.__1.optional_CardStyle_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24956FDB0(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF758, type metadata accessor for std.__1.optional_CardDescriptionStyle_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24956FE08(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF760, type metadata accessor for std.__1.optional_CardTitleStyle_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24956FE60(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF768, type metadata accessor for std.__1.optional_CUnsignedLong_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24956FEB8(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF770, type metadata accessor for std.__1.optional_SuggestedChipList_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24956FF10(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF778, type metadata accessor for std.__1.optional_CardDescription_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24956FF68(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF780, type metadata accessor for std.__1.optional_CardTitle_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24956FFC0(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF788, type metadata accessor for std.__1.optional_CardMedia_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249570018(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF790, type metadata accessor for std.__1.optional_variant____);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249570070(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF798, type metadata accessor for std.__1.optional_WebResources_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2495700C8(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF7A0, type metadata accessor for std.__1.optional_CategoryList_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249570120(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF7A8, type metadata accessor for std.__1.optional_OrgName_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249570178(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF7B0, type metadata accessor for std.__1.optional_MediaList_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2495701D0(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF7B8, type metadata accessor for std.__1.optional_CommunicationAddress_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249570228(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF7C0, type metadata accessor for std.__1.optional_OrgDetails_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249570280(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF7C8, type metadata accessor for std.__1.optional_AddressEntryList_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2495702D8(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF7D0, type metadata accessor for std.__1.optional_PostbackData_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249570330(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF7D8, type metadata accessor for std.__1.optional_SuggestedActionShowQuery_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249570388(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF7E0, type metadata accessor for std.__1.optional_SuggestedActionShowCoordinates_);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2495703E0(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF7E8, type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249570438(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BF7F0, type metadata accessor for std.__1.optional_MenuItem_);
  *(void *)(a1 + 8) = result;
  return result;
}

ctb::chatbot::MenuItem *ctb::chatbot::MenuItem::MenuItem(ctb::chatbot::MenuItem *this, const ctb::chatbot::MenuItem *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<ctb::chatbot::MenuL0Content>::__init_with_size[abi:ne180100]<ctb::chatbot::MenuL0Content*,ctb::chatbot::MenuL0Content*>(this, *(void *)a2, *((void *)a2 + 1), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3));
  return this;
}

uint64_t std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

unsigned char *std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::optional[abi:ne180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[16] = 0;
  return result;
}

unsigned char *sub_2495704FC(unsigned char *result)
{
  *(void *)uint64_t result = 0;
  *((void *)result + 1) = 0;
  *((void *)result + 2) = 0;
  return std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::optional[abi:ne180100](result);
}

void *ctb::chatbot::AddressEntryList::AddressEntryList(void *a1, uint64_t a2)
{
  return ctb::chatbot::AddressEntryList::AddressEntryList(a1, a2, (void (*)(void))std::vector<ctb::chatbot::AddressEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::AddressEntry*,ctb::chatbot::AddressEntry*>);
}

uint64_t std::optional<ctb::chatbot::OrgDetails>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 264);
}

unsigned char *std::optional<ctb::chatbot::OrgDetails>::optional[abi:ne180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[264] = 0;
  return result;
}

unsigned char *sub_249570538(unsigned char *result)
{
  *((_OWORD *)result + 15) = 0u;
  *((_OWORD *)result + 16) = 0u;
  *((_OWORD *)result + 13) = 0u;
  *((_OWORD *)result + 14) = 0u;
  *((_OWORD *)result + 11) = 0u;
  *((_OWORD *)result + 12) = 0u;
  *((_OWORD *)result + 9) = 0u;
  *((_OWORD *)result + 1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
  *((_OWORD *)result + 7) = 0u;
  *((_OWORD *)result + 8) = 0u;
  *((_OWORD *)result + 5) = 0u;
  *((_OWORD *)result + 6) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 1) = 0u;
  *((_OWORD *)result + 2) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  return std::optional<ctb::chatbot::OrgDetails>::optional[abi:ne180100](result);
}

uint64_t std::optional<ctb::chatbot::CommunicationAddress>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

unsigned char *std::optional<ctb::chatbot::CommunicationAddress>::optional[abi:ne180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[96] = 0;
  return result;
}

unsigned char *sub_24957057C(unsigned char *result)
{
  *((void *)result + 12) = 0;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 5) = 0u;
  *((_OWORD *)result + 2) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  *((_OWORD *)result + 1) = 0u;
  return std::optional<ctb::chatbot::CommunicationAddress>::optional[abi:ne180100](result);
}

ctb::chatbot::MediaList *ctb::chatbot::MediaList::MediaList(ctb::chatbot::MediaList *this, const MediaList *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<ctb::chatbot::MediaEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::MediaEntry*,ctb::chatbot::MediaEntry*>(this, (uint64_t)a2->var0.var0, (uint64_t)a2->var0.var1, 0x8E38E38E38E38E39 * ((a2->var0.var1 - a2->var0.var0) >> 3));
  return this;
}

std::string *ctb::chatbot::OrgName::OrgName(std::string *this, const OrgName *a2)
{
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::chatbot::OrgNameEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::OrgNameEntry*,ctb::chatbot::OrgNameEntry*>(this, (long long *)a2->var0.var0, (long long *)a2->var0.var1, (a2->var0.var1 - a2->var0.var0) >> 5);
  return this;
}

std::string *ctb::chatbot::CategoryList::CategoryList(std::string *this, const CategoryList *a2)
{
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this, (long long *)a2->var0.__begin_, (long long *)a2->var0.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)a2->var0.__end_ - (char *)a2->var0.__begin_) >> 3));
  return this;
}

void *ctb::chatbot::WebResources::WebResources(ctb::chatbot::WebResources *this, const WebResources *a2)
{
  return ctb::chatbot::AddressEntryList::AddressEntryList(this, (uint64_t)a2, (void (*)(void))std::vector<ctb::chatbot::WebEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::WebEntry*,ctb::chatbot::WebEntry*>);
}

void *ctb::chatbot::AddressEntryList::AddressEntryList(void *a1, uint64_t a2, void (*a3)(void))
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a3();
  return a1;
}

uint64_t std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 336);
}

unsigned char *std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::optional[abi:ne180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[336] = 0;
  return result;
}

unsigned char *sub_2495706F8(unsigned char *result)
{
  *((void *)result + 42) = 0;
  *((_OWORD *)result + 19) = 0u;
  *((_OWORD *)result + 2std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
  *((_OWORD *)result + 17) = 0u;
  *((_OWORD *)result + 18) = 0u;
  *((_OWORD *)result + 15) = 0u;
  *((_OWORD *)result + 16) = 0u;
  *((_OWORD *)result + 13) = 0u;
  *((_OWORD *)result + 14) = 0u;
  *((_OWORD *)result + 11) = 0u;
  *((_OWORD *)result + 12) = 0u;
  *((_OWORD *)result + 9) = 0u;
  *((_OWORD *)result + 1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
  *((_OWORD *)result + 7) = 0u;
  *((_OWORD *)result + 8) = 0u;
  *((_OWORD *)result + 5) = 0u;
  *((_OWORD *)result + 6) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 1) = 0u;
  *((_OWORD *)result + 2) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  return std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::optional[abi:ne180100](result);
}

uint64_t std::optional<ctb::chatbot::CardMedia>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 176);
}

unsigned char *std::optional<ctb::chatbot::CardMedia>::optional[abi:ne180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[176] = 0;
  return result;
}

unsigned char *sub_249570748(unsigned char *result)
{
  *((void *)result + 22) = 0;
  *((_OWORD *)result + 9) = 0u;
  *((_OWORD *)result + 1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
  *((_OWORD *)result + 7) = 0u;
  *((_OWORD *)result + 8) = 0u;
  *((_OWORD *)result + 5) = 0u;
  *((_OWORD *)result + 6) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 1) = 0u;
  *((_OWORD *)result + 2) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  return std::optional<ctb::chatbot::CardMedia>::optional[abi:ne180100](result);
}

void *ctb::chatbot::SuggestedChipList::SuggestedChipList(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<ctb::chatbot::SuggestedChip>::__init_with_size[abi:ne180100]<ctb::chatbot::SuggestedChip*,ctb::chatbot::SuggestedChip*>(a1, *a2, a2[1], 0x34F72C234F72C235 * ((a2[1] - *a2) >> 3));
  return a1;
}

uint64_t std::optional<unsigned long>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

unsigned char *std::optional<unsigned long>::optional[abi:ne180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[8] = 0;
  return result;
}

unsigned char *sub_2495707D4(unsigned char *result)
{
  *(void *)uint64_t result = 0;
  *((void *)result + 1) = 0;
  return std::optional<unsigned long>::optional[abi:ne180100](result);
}

uint64_t std::optional<ctb::chatbot::CardTitleStyle>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 3);
}

unsigned char *std::optional<ctb::chatbot::CardTitleStyle>::optional[abi:ne180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[3] = 0;
  return result;
}

unsigned char *sub_2495707F4(unsigned char *result)
{
  *(_DWORD *)uint64_t result = 0;
  return std::optional<ctb::chatbot::CardTitleStyle>::optional[abi:ne180100](result);
}

uint64_t std::optional<ctb::CPMGroupManagement::Response>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

unsigned char *std::optional<ctb::CPMGroupManagement::Response>::optional[abi:ne180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[4] = 0;
  return result;
}

unsigned char *sub_249570814(unsigned char *result)
{
  *(void *)uint64_t result = 0;
  return std::optional<ctb::CPMGroupManagement::Response>::optional[abi:ne180100](result);
}

std::string *ctb::SIPConferenceInfo::Description::Description(std::string *this, const ctb::SIPConferenceInfo::Description *a2)
{
  long long v4 = std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this, (long long *)a2);
  std::__optional_copy_base<ctb::SIPConferenceInfo::SubjectExt,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)v4 + 32), (long long *)a2 + 2);
  return this;
}

void sub_249570854(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<ctb::SIPConferenceInfo::Description>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

unsigned char *std::optional<ctb::SIPConferenceInfo::Description>::optional[abi:ne180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[64] = 0;
  return result;
}

unsigned char *sub_24957088C(unsigned char *result)
{
  *((void *)result + 8) = 0;
  *((_OWORD *)result + 2) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  *((_OWORD *)result + 1) = 0u;
  return std::optional<ctb::SIPConferenceInfo::Description>::optional[abi:ne180100](result);
}

uint64_t std::optional<ctb::SIPConferenceInfo::SubjectExt>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

unsigned char *std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[24] = 0;
  return result;
}

unsigned char *sub_2495708B8(unsigned char *result)
{
  *(_OWORD *)uint64_t result = 0u;
  *((_OWORD *)result + 1) = 0u;
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](result);
}

uint64_t std::optional<ctb::FileTransferDescriptor::FileDescriptor>::operator BOOL[abi:ne180100](uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

unsigned char *std::optional<ctb::FileTransferDescriptor::FileDescriptor>::optional[abi:ne180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[144] = 0;
  return result;
}

unsigned char *sub_2495708DC(unsigned char *result)
{
  *((void *)result + 18) = 0;
  *((_OWORD *)result + 7) = 0u;
  *((_OWORD *)result + 8) = 0u;
  *((_OWORD *)result + 5) = 0u;
  *((_OWORD *)result + 6) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 1) = 0u;
  *((_OWORD *)result + 2) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  return std::optional<ctb::FileTransferDescriptor::FileDescriptor>::optional[abi:ne180100](result);
}

uint64_t sub_249570900(uint64_t a1)
{
  return ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(a1, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *))
{
  uint64_t v5 = a1;
  a3(&v5);
  return a1;
}

{
  uint64_t v5;

  uint64_t v5 = a1;
  a3(&v5);
  return a1;
}

ctb::chatbot::MenuItem *sub_24957097C(ctb::chatbot::MenuItem *a1, const ctb::chatbot::MenuItem *a2)
{
  return ctb::chatbot::MenuItem::MenuItem(a1, a2);
}

ctb::chatbot::MenuItem *sub_249570998(uint64_t a1, const ctb::chatbot::MenuItem *a2)
{
  char v3 = (ctb::chatbot::MenuItem *)ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(a1, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::chatbot::MenuItem::MenuItem(v3, a2);
}

__n128 *sub_2495709F0(__n128 *a1, __n128 *a2)
{
  return a1;
}

uint64_t sub_249570A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2495745A0(a1, a2, a3, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (uint64_t)std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest, (void (*)(uint64_t, uint64_t))ctb::ClientAuthenticityRequest::ClientAuthenticityRequest);
}

void type metadata accessor for ctb.chatbot.MenuItem(uint64_t a1)
{
}

uint64_t sub_249570AB4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_249570AD4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for ctb.chatbot.SuggestedActionShowCoordinates(uint64_t a1)
{
}

std::basic_string<char16_t> *sub_249570B10(std::basic_string<char16_t> *a1, std::basic_string<char16_t> *a2, uint64_t a3)
{
  return sub_24956DF3C(a1, a2, a3, (void (*)(void))ctb::SIPConferenceInfo::SubjectExt::SubjectExt);
}

void type metadata accessor for ctb.chatbot.SuggestedActionShowQuery(uint64_t a1)
{
}

void type metadata accessor for ctb.chatbot.PostbackData(uint64_t a1)
{
}

void **sub_249570B50(void **a1)
{
  return ctb::chatbot::AddressEntryList::~AddressEntryList(a1);
}

void *sub_249570B68(void *a1, uint64_t a2)
{
  return ctb::chatbot::AddressEntryList::AddressEntryList(a1, a2);
}

void *sub_249570B84(void **a1, uint64_t a2)
{
  char v3 = ctb::chatbot::AddressEntryList::~AddressEntryList(a1);
  return ctb::chatbot::AddressEntryList::AddressEntryList(v3, a2);
}

uint64_t sub_249570BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_249570BE0(a1, a2, a3, (uint64_t (*)(void))ctb::chatbot::AddressEntryList::~AddressEntryList, (void (*)(uint64_t, uint64_t))ctb::ClientAuthenticityRequest::ClientAuthenticityRequest);
}

uint64_t sub_249570BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(uint64_t, uint64_t))
{
  uint64_t v9 = a4();
  a5(v9, a2);
  ((void (*)(uint64_t))a4)(a2);
  return a1;
}

void type metadata accessor for ctb.chatbot.AddressEntryList(uint64_t a1)
{
}

void ctb::chatbot::OrgDetails::~OrgDetails(ctb::chatbot::OrgDetails *this)
{
  if (*((unsigned char *)this + 256))
  {
    long long v2 = (void **)((char *)this + 232);
    std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
  }
  if (*((unsigned char *)this + 224))
  {
    long long v2 = (void **)((char *)this + 200);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2, (void (*)(void))std::vector<std::string>::__clear[abi:ne180100]);
  }
  if (*((unsigned char *)this + 192) && *((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  if (*((unsigned char *)this + 160))
  {
    long long v2 = (void **)((char *)this + 136);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2, (void (*)(void))std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100]);
  }
  if (*((unsigned char *)this + 128))
  {
    long long v2 = (void **)((char *)this + 104);
    std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
  }
  std::__optional_destruct_base<ctb::chatbot::CommunicationAddress,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this);
}

uint64_t sub_249570D20(ctb::chatbot::OrgDetails *a1, const ctb::chatbot::OrgDetails *a2)
{
  return ctb::chatbot::OrgDetails::OrgDetails(a1, a2);
}

uint64_t sub_249570D3C(ctb::chatbot::OrgDetails *a1, const ctb::chatbot::OrgDetails *a2)
{
  ctb::chatbot::OrgDetails::~OrgDetails(a1);
  return ctb::chatbot::OrgDetails::OrgDetails(v3, a2);
}

unsigned char *sub_249570D6C(unsigned char *a1, ctb::chatbot::OrgDetails *a2)
{
  return a1;
}

uint64_t sub_249570DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))ctb::chatbot::OrgDetails::~OrgDetails, (void (*)(uint64_t, uint64_t))std::construct_at[abi:ne180100]<ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails*>);
}

uint64_t sub_249570DCC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 264)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_249570DEC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 20std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 264) = v3;
  return result;
}

void type metadata accessor for ctb.chatbot.OrgDetails(uint64_t a1)
{
}

void ctb::chatbot::CommunicationAddress::~CommunicationAddress(void **this)
{
  long long v2 = this + 9;
  std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100](&v2, (void (*)(void))std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100]);
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t sub_249570EF0(ctb::chatbot::CommunicationAddress *a1, const ctb::chatbot::CommunicationAddress *a2)
{
  return ctb::chatbot::CommunicationAddress::CommunicationAddress(a1, a2);
}

uint64_t sub_249570F0C(void **a1, const ctb::chatbot::CommunicationAddress *a2)
{
  ctb::chatbot::CommunicationAddress::~CommunicationAddress(a1);
  return ctb::chatbot::CommunicationAddress::CommunicationAddress(v3, a2);
}

uint64_t sub_249570F3C(uint64_t a1, long long *a2)
{
  return a1;
}

__n128 ctb::chatbot::CommunicationAddress::CommunicationAddress(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v3 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v3;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  long long v4 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)(a1 + 48) = v4;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 6) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 88) = 0;
  __n128 result = *(__n128 *)((char *)a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *((void *)a2 + 11) = 0;
  return result;
}

uint64_t sub_249570FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))ctb::chatbot::CommunicationAddress::~CommunicationAddress, (void (*)(uint64_t, uint64_t))ctb::chatbot::CommunicationAddress::CommunicationAddress);
}

void type metadata accessor for ctb.chatbot.CommunicationAddress(uint64_t a1)
{
}

uint64_t sub_24957101C(uint64_t a1)
{
  return ctb::chatbot::SuggestedChipList::~SuggestedChipList(a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t ctb::chatbot::SuggestedChipList::~SuggestedChipList(uint64_t a1, void (*a2)(uint64_t *))
{
  uint64_t v4 = a1;
  a2(&v4);
  return a1;
}

ctb::chatbot::MediaList *sub_249571084(ctb::chatbot::MediaList *a1, const MediaList *a2)
{
  return ctb::chatbot::MediaList::MediaList(a1, a2);
}

ctb::chatbot::MediaList *sub_2495710A0(uint64_t a1, const MediaList *a2)
{
  long long v3 = (ctb::chatbot::MediaList *)ctb::chatbot::SuggestedChipList::~SuggestedChipList(a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::chatbot::MediaList::MediaList(v3, a2);
}

__n128 *sub_2495710E4(__n128 *a1, __n128 *a2)
{
  return a1;
}

uint64_t sub_24957112C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24957116C(a1, a2, a3, (uint64_t)std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t))ctb::chatbot::SuggestedChipList::~SuggestedChipList, (void (*)(uint64_t, uint64_t))ctb::ClientAuthenticityRequest::ClientAuthenticityRequest);
}

uint64_t sub_24957116C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), void (*a6)(uint64_t, uint64_t))
{
  uint64_t v11 = a5(a1, a4);
  a6(v11, a2);
  a5(a2, a4);
  return a1;
}

void type metadata accessor for ctb.chatbot.MediaList(uint64_t a1)
{
}

uint64_t sub_2495711EC(uint64_t a1)
{
  return ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(a1, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
}

std::string *sub_24957122C(std::string *a1, const OrgName *a2)
{
  return ctb::chatbot::OrgName::OrgName(a1, a2);
}

std::string *sub_249571248(uint64_t a1, const OrgName *a2)
{
  long long v3 = (std::string *)ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(a1, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::chatbot::OrgName::OrgName(v3, a2);
}

__n128 *sub_2495712A0(__n128 *a1, __n128 *a2)
{
  return a1;
}

uint64_t sub_2495712FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2495745A0(a1, a2, a3, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (uint64_t)std::vector<std::string>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest, (void (*)(uint64_t, uint64_t))ctb::ClientAuthenticityRequest::ClientAuthenticityRequest);
}

void type metadata accessor for ctb.chatbot.OrgName(uint64_t a1)
{
}

uint64_t sub_249571364(uint64_t a1)
{
  return ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(a1, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
}

std::string *sub_2495713A4(std::string *a1, const CategoryList *a2)
{
  return ctb::chatbot::CategoryList::CategoryList(a1, a2);
}

std::string *sub_2495713C0(uint64_t a1, const CategoryList *a2)
{
  long long v3 = (std::string *)ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(a1, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::chatbot::CategoryList::CategoryList(v3, a2);
}

__n128 *sub_249571418(__n128 *a1, __n128 *a2)
{
  return a1;
}

uint64_t sub_249571474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2495745A0(a1, a2, a3, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (uint64_t)std::vector<std::string>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest, (void (*)(uint64_t, uint64_t))ctb::ClientAuthenticityRequest::ClientAuthenticityRequest);
}

void type metadata accessor for ctb.chatbot.CategoryList(uint64_t a1)
{
}

void **ctb::chatbot::AddressEntryList::~AddressEntryList(void **a1)
{
  long long v3 = a1;
  std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void *sub_249571514(ctb::chatbot::WebResources *a1, const WebResources *a2)
{
  return ctb::chatbot::WebResources::WebResources(a1, a2);
}

void *sub_249571530(void **a1, const WebResources *a2)
{
  long long v3 = ctb::chatbot::AddressEntryList::~AddressEntryList(a1);
  return ctb::chatbot::WebResources::WebResources((ctb::chatbot::WebResources *)v3, a2);
}

__n128 *sub_249571560(__n128 *a1, __n128 *a2)
{
  return a1;
}

void type metadata accessor for ctb.chatbot.WebResources(uint64_t a1)
{
}

uint64_t sub_2495715B0(uint64_t a1, uint64_t a2)
{
  return std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>::variant[abi:ne180100](a1, a2);
}

uint64_t sub_2495715CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>::~variant[abi:ne180100]();
  return std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>::variant[abi:ne180100](v3, a2);
}

uint64_t sub_2495715FC(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t sub_249571634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>::~variant[abi:ne180100], (void (*)(uint64_t, uint64_t))std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>::variant[abi:ne180100]);
}

uint64_t sub_249571660(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 336)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_249571680(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 328) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 20std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 28std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 336) = v3;
  return result;
}

void type metadata accessor for std.__1.variant___(uint64_t a1)
{
}

void ctb::chatbot::CardMedia::~CardMedia(void **this)
{
  if (*((unsigned char *)this + 168) && *((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((unsigned char *)this + 112) && *((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((unsigned char *)this + 80) && *((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t sub_2495717A8(ctb::chatbot::CardMedia *a1, const ctb::chatbot::CardMedia *a2)
{
  return ctb::chatbot::CardMedia::CardMedia(a1, a2);
}

uint64_t sub_2495717C4(void **a1, const ctb::chatbot::CardMedia *a2)
{
  ctb::chatbot::CardMedia::~CardMedia(a1);
  return ctb::chatbot::CardMedia::CardMedia(v3, a2);
}

uint64_t sub_2495717F4(uint64_t a1, long long *a2)
{
  return a1;
}

uint64_t sub_249571828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))ctb::chatbot::CardMedia::~CardMedia, (void (*)(uint64_t, uint64_t))std::construct_at[abi:ne180100]<ctb::chatbot::CardMedia,ctb::chatbot::CardMedia,ctb::chatbot::CardMedia*>);
}

uint64_t sub_249571854(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 176)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_249571874(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 176) = v3;
  return result;
}

void type metadata accessor for ctb.chatbot.CardMedia(uint64_t a1)
{
}

void type metadata accessor for ctb.chatbot.CardTitle(uint64_t a1)
{
}

void type metadata accessor for ctb.chatbot.CardDescription(uint64_t a1)
{
}

uint64_t sub_249571908(uint64_t a1)
{
  return ctb::chatbot::SuggestedChipList::~SuggestedChipList(a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100]);
}

void *sub_249571934(void *a1, uint64_t *a2)
{
  return ctb::chatbot::SuggestedChipList::SuggestedChipList(a1, a2);
}

void *sub_249571950(uint64_t a1, uint64_t *a2)
{
  char v3 = (void *)ctb::chatbot::SuggestedChipList::~SuggestedChipList(a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::chatbot::SuggestedChipList::SuggestedChipList(v3, a2);
}

__n128 *sub_249571994(__n128 *a1, __n128 *a2)
{
  return a1;
}

uint64_t sub_2495719DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24957116C(a1, a2, a3, (uint64_t)std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t))ctb::chatbot::SuggestedChipList::~SuggestedChipList, (void (*)(uint64_t, uint64_t))ctb::ClientAuthenticityRequest::ClientAuthenticityRequest);
}

void type metadata accessor for ctb.chatbot.SuggestedChipList(uint64_t a1)
{
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)__n128 result = v2;
  return result;
}

void type metadata accessor for ctb.chatbot.CardTitleStyle(uint64_t a1)
{
}

void type metadata accessor for ctb.chatbot.CardDescriptionStyle(uint64_t a1)
{
}

void type metadata accessor for ctb.chatbot.CardStyle(uint64_t a1)
{
}

std::string *ctb::CPMGroupManagement::CPMGroupManagement(std::string *this, const CPMGroupManagement *a2)
{
  if (*((char *)&a2->fId.__r_.__value_.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->fId.__r_.__value_.var0.var1.__data_, a2->fId.__r_.__value_.var0.var1.__size_);
  }
  else
  {
    long long v4 = *(_OWORD *)a2->fId.__r_.__value_.var0.var0.__data_;
    this->__r_.__value_.__r.__words[2] = *((void *)&a2->fId.__r_.__value_.var0.var1 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = *(void *)&a2->fId.__r_.var0;
  return this;
}

std::string *sub_249571AE0(std::string *a1, const CPMGroupManagement *a2)
{
  return ctb::CPMGroupManagement::CPMGroupManagement(a1, a2);
}

std::string *sub_249571AFC(std::basic_string<char16_t> *a1, const CPMGroupManagement *a2)
{
  ctb::chatbot::OrgNameEntry::~OrgNameEntry(a1);
  return ctb::CPMGroupManagement::CPMGroupManagement(v3, a2);
}

__n128 *sub_249571B2C(__n128 *a1, __n128 *a2)
{
  return a1;
}

__n128 ctb::CPMGroupManagement::CPMGroupManagement(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  a1[1].n128_u64[1] = a2[1].n128_u64[1];
  return result;
}

std::basic_string<char16_t> *sub_249571B84(std::basic_string<char16_t> *a1, std::basic_string<char16_t> *a2, uint64_t a3)
{
  return sub_24956DF3C(a1, a2, a3, (void (*)(void))ctb::CPMGroupManagement::CPMGroupManagement);
}

uint64_t sub_249571B9C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_249571BBC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for ctb.CPMGroupManagement(uint64_t a1)
{
}

void type metadata accessor for ctb.CPMGroupManagement.Response(uint64_t a1)
{
}

void ctb::SIPConferenceInfo::Description::~Description(void **this)
{
  if (*((unsigned char *)this + 56) && *((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((unsigned char *)this + 24))
  {
    if (*((char *)this + 23) < 0) {
      operator delete(*this);
    }
  }
}

std::string *sub_249571C68(std::string *a1, const ctb::SIPConferenceInfo::Description *a2)
{
  return ctb::SIPConferenceInfo::Description::Description(a1, a2);
}

std::string *sub_249571C84(void **a1, const ctb::SIPConferenceInfo::Description *a2)
{
  ctb::SIPConferenceInfo::Description::~Description(a1);
  return ctb::SIPConferenceInfo::Description::Description(v3, a2);
}

uint64_t sub_249571CB4(uint64_t a1, __n128 *a2)
{
  return a1;
}

__n128 ctb::SIPConferenceInfo::Description::Description(uint64_t a1, __n128 *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (a2[1].n128_u8[8])
  {
    __n128 result = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  if (a2[3].n128_u8[8])
  {
    __n128 result = a2[2];
    *(void *)(a1 + 48) = a2[3].n128_u64[0];
    *(__n128 *)(a1 + 32) = result;
    a2[2].n128_u64[1] = 0;
    a2[3].n128_u64[0] = 0;
    a2[2].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 56) = 1;
  }
  return result;
}

uint64_t sub_249571D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))ctb::SIPConferenceInfo::Description::~Description, (void (*)(uint64_t, uint64_t))ctb::SIPConferenceInfo::Description::Description);
}

uint64_t sub_249571D7C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_249571D9C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for ctb.SIPConferenceInfo.Description(uint64_t a1)
{
}

std::string *ctb::SIPConferenceInfo::SIPConferenceInfo(std::string *this, uint64_t **a2)
{
  long long v4 = std::__optional_copy_base<ctb::SIPConferenceInfo::Description,false>::__optional_copy_base[abi:ne180100](this, (uint64_t)a2);
  v4[3].__r_.__value_.__r.__words[0] = 0;
  v4[3].__r_.__value_.__l.__size_ = 0;
  v4 += 3;
  v4->__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::SIPConferenceInfo::User>::__init_with_size[abi:ne180100]<ctb::SIPConferenceInfo::User*,ctb::SIPConferenceInfo::User*>(v4, a2[9], a2[10], 0xAAAAAAAAAAAAAAABLL * (a2[10] - a2[9]));
  return this;
}

void sub_249571E3C(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ctb::SIPConferenceInfo::Description,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ctb::SIPConferenceInfo::~SIPConferenceInfo(ctb::SIPConferenceInfo *this)
{
  __int16 v2 = (void **)((char *)this + 72);
  std::vector<ctb::SIPConferenceInfo::User>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__optional_destruct_base<ctb::SIPConferenceInfo::Description,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this);
}

std::string *sub_249571E94(std::string *a1, uint64_t **a2)
{
  return ctb::SIPConferenceInfo::SIPConferenceInfo(a1, a2);
}

std::string *sub_249571EB0(ctb::SIPConferenceInfo *a1, uint64_t **a2)
{
  ctb::SIPConferenceInfo::~SIPConferenceInfo(a1);
  return ctb::SIPConferenceInfo::SIPConferenceInfo(v3, a2);
}

unsigned char *sub_249571EE0(unsigned char *a1, ctb::SIPConferenceInfo *a2)
{
  return a1;
}

__n128 ctb::SIPConferenceInfo::SIPConferenceInfo(unsigned char *a1, uint64_t a2)
{
  char v3 = std::__optional_move_base<ctb::SIPConferenceInfo::Description,false>::__optional_move_base[abi:ne180100](a1, (long long *)a2);
  v3[9] = 0;
  v3[10] = 0;
  v3[11] = 0;
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v3 + 9) = result;
  v3[11] = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a2 + 88) = 0;
  return result;
}

uint64_t sub_249571F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))ctb::SIPConferenceInfo::~SIPConferenceInfo, (void (*)(uint64_t, uint64_t))ctb::SIPConferenceInfo::SIPConferenceInfo);
}

uint64_t sub_249571F84(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_249571FA4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 96) = v3;
  return result;
}

void type metadata accessor for ctb.SIPConferenceInfo(uint64_t a1)
{
}

uint64_t sub_249571FFC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_249572030(ctb::SIPConferenceInfo::SubjectExt *a1, const SubjectExt *a2)
{
  return ctb::SIPConferenceInfo::SubjectExt::SubjectExt(a1, a2);
}

uint64_t sub_24957204C(std::basic_string<char16_t> *a1, const SubjectExt *a2)
{
  ctb::chatbot::OrgNameEntry::~OrgNameEntry(a1);
  return ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v3, a2);
}

__n128 *sub_24957207C(__n128 *a1, __n128 *a2)
{
  return a1;
}

__n128 ctb::SIPConferenceInfo::SubjectExt::SubjectExt(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

uint64_t sub_2495720CC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2495720EC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void type metadata accessor for ctb.SIPConferenceInfo.SubjectExt(uint64_t a1)
{
}

ctb::FileTransferDescriptor *ctb::FileTransferDescriptor::FileTransferDescriptor(ctb::FileTransferDescriptor *this, const ctb::FileTransferDescriptor *a2)
{
  long long v4 = ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor(this, a2);
  std::__optional_copy_base<ctb::FileTransferDescriptor::FileDescriptor,false>::__optional_copy_base[abi:ne180100]((ctb::FileTransferDescriptor::FileDescriptor *)((char *)v4 + 144), (const ctb::FileTransferDescriptor *)((char *)a2 + 144));
  return this;
}

void sub_249572164(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*(void **)(v1 + 104));
  }
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*(void **)(v1 + 80));
  }
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*(void **)(v1 + 56));
  }
  if (*(unsigned char *)(v1 + 48))
  {
    if (*(char *)(v1 + 47) < 0) {
      operator delete(*(void **)(v1 + 24));
    }
  }
  _Unwind_Resume(exception_object);
}

void ctb::FileTransferDescriptor::~FileTransferDescriptor(void **this)
{
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((unsigned char *)this + 48))
  {
    if (*((char *)this + 47) < 0) {
      operator delete(this[3]);
    }
  }
}

ctb::FileTransferDescriptor *sub_249572230(ctb::FileTransferDescriptor *a1, const ctb::FileTransferDescriptor *a2)
{
  return ctb::FileTransferDescriptor::FileTransferDescriptor(a1, a2);
}

ctb::FileTransferDescriptor *sub_24957224C(void **a1, const ctb::FileTransferDescriptor *a2)
{
  ctb::FileTransferDescriptor::~FileTransferDescriptor(a1);
  return ctb::FileTransferDescriptor::FileTransferDescriptor(v3, a2);
}

uint64_t sub_24957227C(uint64_t a1, long long *a2)
{
  return a1;
}

uint64_t sub_2495722B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))ctb::FileTransferDescriptor::~FileTransferDescriptor, (void (*)(uint64_t, uint64_t))std::construct_at[abi:ne180100]<ctb::FileTransferDescriptor,ctb::FileTransferDescriptor,ctb::FileTransferDescriptor*>);
}

uint64_t sub_2495722DC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 296)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2495722FC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 20std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 28std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 296) = v3;
  return result;
}

void type metadata accessor for ctb.FileTransferDescriptor(uint64_t a1)
{
}

void ctb::FileTransferDescriptor::FileDescriptor::~FileDescriptor(void **this)
{
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((unsigned char *)this + 48))
  {
    if (*((char *)this + 47) < 0) {
      operator delete(this[3]);
    }
  }
}

uint64_t sub_2495723F8(ctb::FileTransferDescriptor::FileDescriptor *a1, const ctb::FileTransferDescriptor::FileDescriptor *a2)
{
  return ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor(a1, a2);
}

uint64_t sub_249572414(void **a1, const ctb::FileTransferDescriptor::FileDescriptor *a2)
{
  ctb::FileTransferDescriptor::FileDescriptor::~FileDescriptor(a1);
  return ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor(v3, a2);
}

uint64_t sub_249572444(uint64_t a1, long long *a2)
{
  return a1;
}

__n128 ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*((unsigned char *)a2 + 48))
  {
    long long v3 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v3;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    *(unsigned char *)(a1 + 48) = 1;
  }
  long long v4 = *(long long *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(_OWORD *)(a1 + 56) = v4;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 7) = 0;
  long long v5 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v5;
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  long long v6 = *(long long *)((char *)a2 + 104);
  *(void *)(a1 + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 15);
  *(_OWORD *)(a1 + 104) = v6;
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 13) = 0;
  __n128 result = (__n128)a2[8];
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t sub_249572510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))ctb::FileTransferDescriptor::FileDescriptor::~FileDescriptor, (void (*)(uint64_t, uint64_t))ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor);
}

uint64_t sub_24957253C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 144)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24957255C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 144) = v3;
  return result;
}

void type metadata accessor for ctb.FileTransferDescriptor.FileDescriptor(uint64_t a1)
{
}

void type metadata accessor for ctb.FileTransferDescriptor.FileDescriptor.FileDisposition(uint64_t a1)
{
}

uint64_t sub_2495725D4(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_249572628(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for std.__1.pair___tree_const_iterator_basic_string_CChar_ char_traits_CChar__ allocator_CChar___ UnsafeMutablePointer___tree_node_basic_string_CChar_ char_traits_CChar__ allocator_CChar___ UnsafeMutablePointer_Void____ CLong__ CBool_(uint64_t a1)
{
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void type metadata accessor for std.__1.optional_CapDiscovery_(uint64_t a1)
{
}

void type metadata accessor for std.__1.optional_Vers_(uint64_t a1)
{
}

void *std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::vector(void *a1, uint64_t a2)
{
  return std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::vector(a1, a2, (void (*)(void))std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__init_with_size[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server*,ctb::ProvisioningConfiguration::AccessControl::Server*>);
}

uint64_t sub_2495726D0(uint64_t a1)
{
  return std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>, (void (*)(uint64_t *))std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t std::vector<std::string>::~vector[abi:ne180100](uint64_t a1, uint64_t a2, void (*a3)(uint64_t *))
{
  uint64_t v5 = a1;
  a3(&v5);
  return a1;
}

void *sub_24957274C(void *a1, uint64_t a2)
{
  return std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::vector(a1, a2);
}

void *sub_249572768(uint64_t a1, uint64_t a2)
{
  long long v3 = (void *)std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>, (void (*)(uint64_t *))std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100]);
  return std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::vector(v3, a2);
}

__n128 *sub_2495727C0(__n128 *a1, __n128 *a2)
{
  return a1;
}

uint64_t sub_24957281C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2495745A0(a1, a2, a3, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>, (uint64_t)std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))std::vector<std::string>::~vector[abi:ne180100], (void (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]);
}

void type metadata accessor for std.__1.vector_Server_ allocator_Server__(uint64_t a1)
{
}

void ctb::ProvisioningConfiguration::AccessControl::Default::~Default(char **this)
{
}

uint64_t sub_2495728B4(char **a1, uint64_t a2)
{
  ctb::ProvisioningConfiguration::AccessControl::Default::~Default(a1);
  return std::set<std::string>::set[abi:ne180100](v3, a2);
}

void *sub_2495728E4(void *a1, char **a2)
{
  return a1;
}

void *ctb::ProvisioningConfiguration::AccessControl::Default::Default(void *result, void *a2)
{
  *__n128 result = *a2;
  long long v2 = a2 + 1;
  uint64_t v3 = a2[1];
  result[1] = v3;
  BOOL v4 = result + 1;
  uint64_t v5 = a2[2];
  result[2] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *a2 = v2;
    void *v2 = 0;
    a2[2] = 0;
  }
  else
  {
    *__n128 result = v4;
  }
  return result;
}

uint64_t sub_249572954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))ctb::ProvisioningConfiguration::AccessControl::Default::~Default, (void (*)(uint64_t, uint64_t))ctb::ProvisioningConfiguration::AccessControl::Default::Default);
}

void type metadata accessor for ctb.ProvisioningConfiguration.AccessControl.Default(uint64_t a1)
{
}

void type metadata accessor for ctb.chatbot.OrgNameEntry.NameType(uint64_t a1)
{
}

void type metadata accessor for ctb.chatbot.MediaEntry.ContentType(uint64_t a1)
{
}

std::string *ctb::chatbot::Media::Media(std::string *this, const ctb::chatbot::Media *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 1, (long long *)((char *)a2 + 24));
  return this;
}

void sub_249572A18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ctb::chatbot::Media::~Media(void **this)
{
  if (*((unsigned char *)this + 48) && *((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

std::string *sub_249572A84(std::string *a1, const ctb::chatbot::Media *a2)
{
  return ctb::chatbot::Media::Media(a1, a2);
}

std::string *sub_249572AA0(void **a1, const ctb::chatbot::Media *a2)
{
  ctb::chatbot::Media::~Media(a1);
  return ctb::chatbot::Media::Media(v3, a2);
}

__n128 *sub_249572AD0(__n128 *a1, void **a2)
{
  return a1;
}

__n128 ctb::chatbot::Media::Media(__n128 *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  a1[1].n128_u64[0] = *(void *)(a2 + 16);
  *a1 = result;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  a1[1].n128_u8[8] = 0;
  a1[3].n128_u8[0] = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    __n128 result = *(__n128 *)(a2 + 24);
    a1[2].n128_u64[1] = *(void *)(a2 + 40);
    *(__n128 *)((char *)a1 + 24) = result;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(a2 + 24) = 0;
    a1[3].n128_u8[0] = 1;
  }
  return result;
}

uint64_t sub_249572B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))ctb::chatbot::Media::~Media, (void (*)(uint64_t, uint64_t))ctb::chatbot::Media::Media);
}

void type metadata accessor for ctb.chatbot.Media(uint64_t a1)
{
}

void type metadata accessor for ctb.chatbot.MediaEntry.LabelType(uint64_t a1)
{
}

void type metadata accessor for ctb.chatbot.URIEntry.LabelType(uint64_t a1)
{
}

void type metadata accessor for ctb.chatbot.URIEntry.URIType(uint64_t a1)
{
}

void *std::vector<ctb::ClientAuthenticityRequest::Parameter>::vector(void *a1, uint64_t a2)
{
  return std::vector<ctb::ClientAuthenticityRequest::Parameter>::vector(a1, a2, (void (*)(void))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__init_with_size[abi:ne180100]<ctb::ClientAuthenticityRequest::Parameter*,ctb::ClientAuthenticityRequest::Parameter*>);
}

uint64_t sub_249572BE8(uint64_t a1)
{
  return std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::vector<ctb::ClientAuthenticityRequest::Parameter>::__base_destruct_at_end[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
}

void *sub_249572C28(void *a1, uint64_t a2)
{
  return std::vector<ctb::ClientAuthenticityRequest::Parameter>::vector(a1, a2);
}

void *sub_249572C44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::vector<ctb::ClientAuthenticityRequest::Parameter>::__base_destruct_at_end[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
  return std::vector<ctb::ClientAuthenticityRequest::Parameter>::vector(v3, a2);
}

__n128 *sub_249572C9C(__n128 *a1, __n128 *a2)
{
  return a1;
}

uint64_t sub_249572CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2495745A0(a1, a2, a3, (uint64_t)std::vector<ctb::ClientAuthenticityRequest::Parameter>::__base_destruct_at_end[abi:ne180100], (uint64_t)std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))std::vector<std::string>::~vector[abi:ne180100], (void (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]);
}

void type metadata accessor for std.__1.vector_Parameter_ allocator_Parameter__(uint64_t a1)
{
}

void *std::vector<ctb::ClientAuthenticityRequest::Method>::vector(void *a1, uint64_t a2)
{
  return std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::vector(a1, a2, (void (*)(void))std::vector<ctb::ClientAuthenticityRequest::Method>::__init_with_size[abi:ne180100]<ctb::ClientAuthenticityRequest::Method*,ctb::ClientAuthenticityRequest::Method*>);
}

void *std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::vector(void *a1, uint64_t a2, void (*a3)(void))
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a3();
  return a1;
}

uint64_t sub_249572DD4(uint64_t a1)
{
  return std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>, (void (*)(uint64_t *))std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100]);
}

void *sub_249572E14(void *a1, uint64_t a2)
{
  return std::vector<ctb::ClientAuthenticityRequest::Method>::vector(a1, a2);
}

void *sub_249572E30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>, (void (*)(uint64_t *))std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100]);
  return std::vector<ctb::ClientAuthenticityRequest::Method>::vector(v3, a2);
}

__n128 *sub_249572E88(__n128 *a1, __n128 *a2)
{
  return a1;
}

uint64_t sub_249572EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2495745A0(a1, a2, a3, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>, (uint64_t)std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))std::vector<std::string>::~vector[abi:ne180100], (void (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]);
}

void type metadata accessor for std.__1.vector_Method_ allocator_Method__(uint64_t a1)
{
}

uint64_t std::optional<std::vector<unsigned char>>::optional[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a1, a2, (void (*)(void))std::__optional_copy_base<std::vector<unsigned char>,false>::__optional_copy_base[abi:ne180100]);
}

uint64_t std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return a1;
}

uint64_t sub_249572F90(uint64_t a1, uint64_t a2)
{
  return std::optional<std::vector<unsigned char>>::optional[abi:ne180100](a1, a2);
}

uint64_t sub_249572FAC(ctb::ClientAuthenticityRequest::Parameter *a1, uint64_t a2)
{
  ctb::ClientAuthenticityRequest::Parameter::~Parameter(a1);
  return std::optional<std::vector<unsigned char>>::optional[abi:ne180100](v3, a2);
}

uint64_t sub_249572FDC(uint64_t a1, __n128 *a2)
{
  return a1;
}

__n128 std::optional<std::vector<unsigned char>>::optional[abi:ne180100](uint64_t a1, __n128 *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (a2[1].n128_u8[8])
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t sub_24957304C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))ctb::ClientAuthenticityRequest::Parameter::~Parameter, (void (*)(uint64_t, uint64_t))std::optional<std::vector<unsigned char>>::optional[abi:ne180100]);
}

void type metadata accessor for std.__1.optional_vector_CUnsignedChar_ allocator_CUnsignedChar___(uint64_t a1)
{
}

uint64_t sub_24957308C()
{
  return sub_24956FC08(&qword_2696BFA10, type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Method__);
}

void type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Method__(uint64_t a1)
{
}

uint64_t sub_2495730E8(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BFA18, type metadata accessor for std.__1.vector_Method_ allocator_Method__);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249573140(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BFA20, type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Method__);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249573198(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BFA28, type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Method__);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2495731F0()
{
  return sub_24956FC08(&qword_2696BFA30, type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Parameter__);
}

void type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Parameter__(uint64_t a1)
{
}

uint64_t sub_24957324C(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BFA38, type metadata accessor for std.__1.vector_Parameter_ allocator_Parameter__);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2495732A4(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BFA40, type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Parameter__);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2495732FC(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BFA48, type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Parameter__);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249573354()
{
  return sub_24956FC08(&qword_2696BFA50, type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Server__);
}

void type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Server__(uint64_t a1)
{
}

uint64_t sub_2495733B0(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BFA58, type metadata accessor for std.__1.vector_Server_ allocator_Server__);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249573408(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BFA60, type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Server__);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249573460(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BFA68, type metadata accessor for std.__1.__wrap_iter_UnsafePointer_Server__);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100](uint64_t a1)
{
  return *(void *)a1;
}

void *std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator+=[abi:ne180100](void *result, uint64_t a2)
{
  *result += 56 * a2;
  return result;
}

uint64_t std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__push_back_slow_path<ctb::ProvisioningConfiguration::AccessControl::Server const&>(a1, a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,ctb::ProvisioningConfiguration::AccessControl::Server const&,ctb::ProvisioningConfiguration::AccessControl::Server*>(a1[1], a2);
    uint64_t result = v3 + 56;
    a1[1] = v3 + 56;
  }
  a1[1] = result;
  return result;
}

void sub_249573520(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__wrap_iter<ctb::ClientAuthenticityRequest::Parameter const*>::operator++[abi:ne180100](void *result)
{
  *result += 32;
  return result;
}

void *std::__wrap_iter<ctb::ClientAuthenticityRequest::Parameter const*>::operator+=[abi:ne180100](void *result, uint64_t a2)
{
  *result += 32 * a2;
  return result;
}

uint64_t std::operator-[abi:ne180100]<ctb::ClientAuthenticityRequest::Parameter const*,ctb::ClientAuthenticityRequest::Parameter const*>(void *a1, void *a2)
{
  return (uint64_t)(*a1 - *a2) >> 5;
}

uint64_t std::vector<ctb::ClientAuthenticityRequest::Parameter>::push_back[abi:ne180100](void *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59) {
      std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      int64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::OrgNameEntry>>(v4, v13);
    }
    else {
      int64_t v14 = 0;
    }
    BOOL v15 = v14;
    uint64_t v16 = &v14[32 * v10];
    unint64_t v18 = &v14[32 * v13];
    std::__optional_copy_base<std::vector<unsigned char>,false>::__optional_copy_base[abi:ne180100]((uint64_t)v16, a2);
    unint64_t v17 = v16 + 32;
    std::vector<ctb::ClientAuthenticityRequest::Parameter>::__swap_out_circular_buffer(a1, &v15);
    unint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<ctb::ClientAuthenticityRequest::Parameter>::~__split_buffer((uint64_t)&v15, (void (*)(uint64_t, void))std::__split_buffer<ctb::ClientAuthenticityRequest::Parameter>::__destruct_at_end[abi:ne180100]);
  }
  else
  {
    uint64_t result = std::__optional_copy_base<std::vector<unsigned char>,false>::__optional_copy_base[abi:ne180100](*(void *)(v4 - 8), a2);
    unint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_249573664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:ne180100]<ctb::ClientAuthenticityRequest::Method const*>(void *a1, void *a2)
{
  return *a1 == *a2;
}

void *std::__wrap_iter<ctb::ClientAuthenticityRequest::Method const*>::operator++[abi:ne180100](void *result)
{
  *result += 56;
  return result;
}

uint64_t std::operator-[abi:ne180100]<ctb::ClientAuthenticityRequest::Method const*,ctb::ClientAuthenticityRequest::Method const*>(void *a1, void *a2)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*a1 - *a2) >> 3);
}

void *std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

uint64_t std::vector<ctb::ClientAuthenticityRequest::Method>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = std::vector<ctb::ClientAuthenticityRequest::Method>::__push_back_slow_path<ctb::ClientAuthenticityRequest::Method const&>(a1, a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,ctb::ClientAuthenticityRequest::Method const&,ctb::ClientAuthenticityRequest::Method*>(a1[1], a2);
    uint64_t result = v3 + 56;
    a1[1] = v3 + 56;
  }
  a1[1] = result;
  return result;
}

void sub_24957373C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void type metadata accessor for std.__1.__tree_const_iterator_basic_string_CChar_ char_traits_CChar__ allocator_CChar___ UnsafeMutablePointer___tree_node_basic_string_CChar_ char_traits_CChar__ allocator_CChar___ UnsafeMutablePointer_Void____ CLong_(uint64_t a1)
{
}

void type metadata accessor for ctb.FileTransferDescriptor.FileDescriptor.FileType(uint64_t a1)
{
}

uint64_t sub_24957376C(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
  }
  unsigned int v4 = *(unsigned __int8 *)a1;
  BOOL v5 = v4 >= 2;
  int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t sub_2495737EC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)uint64_t result = a2 - 255;
    *(unsigned char *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)uint64_t result = a2 + 1;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

void type metadata accessor for ctb.chatbot.CardFontStyle(uint64_t a1)
{
}

uint64_t sub_24957388C(uint64_t a1)
{
  return std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100](a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100]);
}

void *sub_2495738B8(uint64_t a1, uint64_t *a2)
{
  int v3 = (void *)std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100](a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::chatbot::SuggestedChipList::SuggestedChipList(v3, a2);
}

__n128 *sub_2495738FC(__n128 *a1, __n128 *a2)
{
  return a1;
}

uint64_t sub_249573944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24957116C(a1, a2, a3, (uint64_t)std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100], (void (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]);
}

void type metadata accessor for std.__1.vector_SuggestedChip_ allocator_SuggestedChip__(uint64_t a1)
{
}

void type metadata accessor for ctb.chatbot.CardMediaHeight(uint64_t a1)
{
}

void *std::vector<ctb::chatbot::WebEntry>::vector(void *a1, uint64_t a2)
{
  return std::vector<ctb::chatbot::WebEntry>::vector(a1, a2, (void (*)(void))std::vector<ctb::chatbot::WebEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::WebEntry*,ctb::chatbot::WebEntry*>);
}

void **sub_2495739C4(void **a1)
{
  return std::vector<ctb::chatbot::AddressEntry>::~vector[abi:ne180100](a1);
}

void **std::vector<ctb::chatbot::AddressEntry>::~vector[abi:ne180100](void **a1)
{
  int v3 = a1;
  std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  int v3 = a1;
  std::vector<ctb::chatbot::WebEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void *sub_249573A14(void *a1, uint64_t a2)
{
  return std::vector<ctb::chatbot::WebEntry>::vector(a1, a2);
}

void *sub_249573A30(void **a1, uint64_t a2)
{
  int v3 = std::vector<ctb::chatbot::AddressEntry>::~vector[abi:ne180100](a1);
  return std::vector<ctb::chatbot::WebEntry>::vector(v3, a2);
}

__n128 *sub_249573A60(__n128 *a1, __n128 *a2)
{
  return a1;
}

uint64_t sub_249573A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_249570BE0(a1, a2, a3, (uint64_t (*)(void))std::vector<ctb::chatbot::AddressEntry>::~vector[abi:ne180100], (void (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]);
}

void type metadata accessor for std.__1.vector_WebEntry_ allocator_WebEntry__(uint64_t a1)
{
}

uint64_t sub_249573AD4(uint64_t a1)
{
  return std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
}

std::vector<std::string> *sub_249573B14(std::vector<std::string> *a1, const std::vector<std::string> *a2)
{
  return std::vector<std::string>::vector(a1, a2);
}

std::vector<std::string> *sub_249573B30(uint64_t a1, const std::vector<std::string> *a2)
{
  int v3 = (std::vector<std::string> *)std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return std::vector<std::string>::vector(v3, a2);
}

std::vector<std::string> *sub_249573B88(std::vector<std::string> *a1, const std::vector<std::string> *a2)
{
  return a1;
}

uint64_t sub_249573BE8(uint64_t a1, const std::vector<std::string> *a2)
{
  unsigned int v4 = (std::vector<std::string> *)std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  std::vector<std::string>::vector(v4, a2);
  std::vector<std::string>::~vector[abi:ne180100]((uint64_t)a2, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return a1;
}

void type metadata accessor for std.__1.vector_basic_string_CChar_ char_traits_CChar__ allocator_CChar___ allocator_basic_string_CChar_ char_traits_CChar__ allocator_CChar____(uint64_t a1)
{
}

void *std::vector<ctb::chatbot::OrgNameEntry>::vector(void *a1, uint64_t a2)
{
  return std::vector<ctb::ClientAuthenticityRequest::Parameter>::vector(a1, a2, (void (*)(void))std::vector<ctb::chatbot::OrgNameEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::OrgNameEntry*,ctb::chatbot::OrgNameEntry*>);
}

void *std::vector<ctb::ClientAuthenticityRequest::Parameter>::vector(void *a1, uint64_t a2, void (*a3)(void))
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a3();
  return a1;
}

uint64_t sub_249573CEC(uint64_t a1)
{
  return std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
}

void *sub_249573D2C(void *a1, uint64_t a2)
{
  return std::vector<ctb::chatbot::OrgNameEntry>::vector(a1, a2);
}

void *sub_249573D48(uint64_t a1, uint64_t a2)
{
  int v3 = (void *)std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]);
  return std::vector<ctb::chatbot::OrgNameEntry>::vector(v3, a2);
}

__n128 *sub_249573DA0(__n128 *a1, __n128 *a2)
{
  return a1;
}

uint64_t sub_249573DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2495745A0(a1, a2, a3, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (uint64_t)std::vector<std::string>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))std::vector<std::string>::~vector[abi:ne180100], (void (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]);
}

void type metadata accessor for std.__1.vector_OrgNameEntry_ allocator_OrgNameEntry__(uint64_t a1)
{
}

uint64_t sub_249573E64(uint64_t a1)
{
  return std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100](a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100](uint64_t a1, void (*a2)(uint64_t *))
{
  uint64_t v4 = a1;
  a2(&v4);
  return a1;
}

{
  uint64_t v4;

  uint64_t v4 = a1;
  a2(&v4);
  return a1;
}

ctb::chatbot::MediaList *sub_249573ECC(uint64_t a1, const MediaList *a2)
{
  int v3 = (ctb::chatbot::MediaList *)std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100](a1, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::chatbot::MediaList::MediaList(v3, a2);
}

__n128 *sub_249573F10(__n128 *a1, __n128 *a2)
{
  return a1;
}

uint64_t sub_249573F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24957116C(a1, a2, a3, (uint64_t)std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100], (void (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]);
}

void type metadata accessor for std.__1.vector_MediaEntry_ allocator_MediaEntry__(uint64_t a1)
{
}

std::string *ctb::chatbot::URIEntryList::URIEntryList(std::string *this, const ctb::chatbot::URIEntryList *a2)
{
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::chatbot::URIEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::URIEntry*,ctb::chatbot::URIEntry*>(this, *(void *)a2, *((void *)a2 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3));
  return this;
}

uint64_t sub_249573FF8(uint64_t a1)
{
  return ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(a1, (uint64_t)std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
}

std::string *sub_249574038(std::string *a1, const ctb::chatbot::URIEntryList *a2)
{
  return ctb::chatbot::URIEntryList::URIEntryList(a1, a2);
}

std::string *sub_249574054(uint64_t a1, const ctb::chatbot::URIEntryList *a2)
{
  int v3 = (std::string *)ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest(a1, (uint64_t)std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::chatbot::URIEntryList::URIEntryList(v3, a2);
}

__n128 *sub_2495740AC(__n128 *a1, __n128 *a2)
{
  return a1;
}

__n128 ctb::ClientAuthenticityRequest::ClientAuthenticityRequest(__n128 *a1, __n128 *a2)
{
  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_24957412C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2495745A0(a1, a2, a3, (uint64_t)std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100], (uint64_t)std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest, (void (*)(uint64_t, uint64_t))ctb::ClientAuthenticityRequest::ClientAuthenticityRequest);
}

void type metadata accessor for ctb.chatbot.URIEntryList(uint64_t a1)
{
}

std::string *ctb::chatbot::TelephoneInformation::TelephoneInformation(std::string *this, const ctb::chatbot::TelephoneInformation *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  int v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_249574248(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_249574280(std::string *a1, const ctb::chatbot::TelephoneInformation *a2)
{
  return ctb::chatbot::TelephoneInformation::TelephoneInformation(a1, a2);
}

std::string *sub_24957429C(void **a1, const ctb::chatbot::TelephoneInformation *a2)
{
  ctb::chatbot::TelephoneInformation::~TelephoneInformation(a1);
  return ctb::chatbot::TelephoneInformation::TelephoneInformation(v3, a2);
}

uint64_t sub_2495742CC(uint64_t a1, long long *a2)
{
  return a1;
}

__n128 ctb::chatbot::TelephoneInformation::TelephoneInformation(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v3 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v3;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  __n128 result = (__n128)a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(__n128 *)(a1 + 48) = result;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 6) = 0;
  return result;
}

uint64_t sub_24957434C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24956BCB8(a1, a2, a3, (void (*)(void))ctb::chatbot::TelephoneInformation::~TelephoneInformation, (void (*)(uint64_t, uint64_t))ctb::chatbot::TelephoneInformation::TelephoneInformation);
}

void type metadata accessor for ctb.chatbot.TelephoneInformation(uint64_t a1)
{
}

void *std::vector<ctb::chatbot::AddressEntry>::vector(void *a1, uint64_t a2)
{
  return std::vector<ctb::chatbot::WebEntry>::vector(a1, a2, (void (*)(void))std::vector<ctb::chatbot::AddressEntry>::__init_with_size[abi:ne180100]<ctb::chatbot::AddressEntry*,ctb::chatbot::AddressEntry*>);
}

void *std::vector<ctb::chatbot::WebEntry>::vector(void *a1, uint64_t a2, void (*a3)(void))
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a3();
  return a1;
}

void *sub_2495743F8(void *a1, uint64_t a2)
{
  return std::vector<ctb::chatbot::AddressEntry>::vector(a1, a2);
}

void *sub_249574414(void **a1, uint64_t a2)
{
  long long v3 = std::vector<ctb::chatbot::AddressEntry>::~vector[abi:ne180100](a1);
  return std::vector<ctb::chatbot::AddressEntry>::vector(v3, a2);
}

void type metadata accessor for std.__1.vector_AddressEntry_ allocator_AddressEntry__(uint64_t a1)
{
}

uint64_t sub_249574458(uint64_t a1)
{
  return std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100]);
}

ctb::chatbot::MenuItem *sub_249574498(uint64_t a1, const ctb::chatbot::MenuItem *a2)
{
  long long v3 = (ctb::chatbot::MenuItem *)std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::chatbot::MenuItem::MenuItem(v3, a2);
}

__n128 *sub_2495744F0(__n128 *a1, __n128 *a2)
{
  return a1;
}

uint64_t sub_24957454C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2495745A0(a1, a2, a3, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (uint64_t)std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))std::vector<std::string>::~vector[abi:ne180100], (void (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]);
}

uint64_t sub_2495745A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t))
{
  uint64_t v13 = a6(a1, a4, a5);
  a7(v13, a2);
  a6(a2, a4, a5);
  return a1;
}

void type metadata accessor for std.__1.vector_MenuL0Content_ allocator_MenuL0Content__(uint64_t a1)
{
}

uint64_t sub_24957462C()
{
  return sub_24956FC08(&qword_2696BFAF0, type metadata accessor for std.__1.__wrap_iter_UnsafePointer_AddressEntry__);
}

void type metadata accessor for std.__1.__wrap_iter_UnsafePointer_AddressEntry__(uint64_t a1)
{
}

uint64_t sub_249574688(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BFAF8, type metadata accessor for std.__1.vector_AddressEntry_ allocator_AddressEntry__);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2495746E0(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BFB00, type metadata accessor for std.__1.__wrap_iter_UnsafePointer_AddressEntry__);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249574738(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BFB08, type metadata accessor for std.__1.__wrap_iter_UnsafePointer_AddressEntry__);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249574790()
{
  return sub_24956FC08(&qword_2696BFB10, type metadata accessor for std.__1.__wrap_iter_UnsafePointer_MediaEntry__);
}

void type metadata accessor for std.__1.__wrap_iter_UnsafePointer_MediaEntry__(uint64_t a1)
{
}

uint64_t sub_2495747EC(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BFB18, type metadata accessor for std.__1.vector_MediaEntry_ allocator_MediaEntry__);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249574844(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BFB20, type metadata accessor for std.__1.__wrap_iter_UnsafePointer_MediaEntry__);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24957489C(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BFB28, type metadata accessor for std.__1.__wrap_iter_UnsafePointer_MediaEntry__);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2495748F4()
{
  return sub_24956FC08(&qword_2696BFB30, type metadata accessor for std.__1.__wrap_iter_UnsafePointer_OrgNameEntry__);
}

void type metadata accessor for std.__1.__wrap_iter_UnsafePointer_OrgNameEntry__(uint64_t a1)
{
}

uint64_t sub_249574950(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BFB38, type metadata accessor for std.__1.vector_OrgNameEntry_ allocator_OrgNameEntry__);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2495749A8(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BFB40, type metadata accessor for std.__1.__wrap_iter_UnsafePointer_OrgNameEntry__);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249574A00(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BFB48, type metadata accessor for std.__1.__wrap_iter_UnsafePointer_OrgNameEntry__);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t std::vector<ctb::chatbot::OrgNameEntry>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = std::vector<ctb::chatbot::OrgNameEntry>::__push_back_slow_path<ctb::chatbot::OrgNameEntry const&>(a1, a2);
  }
  else
  {
    std::vector<ctb::chatbot::OrgNameEntry>::__construct_one_at_end[abi:ne180100]<ctb::chatbot::OrgNameEntry const&>((uint64_t)a1, a2);
    uint64_t result = v3 + 32;
  }
  a1[1] = result;
  return result;
}

void *std::__wrap_iter<ctb::chatbot::MediaEntry const*>::operator++[abi:ne180100](void *result)
{
  *result += 72;
  return result;
}

void *std::__wrap_iter<ctb::chatbot::MediaEntry const*>::operator+=[abi:ne180100](void *result, uint64_t a2)
{
  *result += 72 * a2;
  return result;
}

unint64_t std::operator-[abi:ne180100]<ctb::chatbot::MediaEntry const*,ctb::chatbot::MediaEntry const*>(void *a1, void *a2)
{
  return 0x8E38E38E38E38E39 * ((uint64_t)(*a1 - *a2) >> 3);
}

uint64_t std::vector<ctb::chatbot::MediaEntry>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = std::vector<ctb::chatbot::MediaEntry>::__push_back_slow_path<ctb::chatbot::MediaEntry const&>(a1, a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::MediaEntry,ctb::chatbot::MediaEntry const&,ctb::chatbot::MediaEntry*>(a1[1], a2);
    uint64_t result = v3 + 72;
    a1[1] = v3 + 72;
  }
  a1[1] = result;
  return result;
}

void sub_249574B30(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__wrap_iter<ctb::chatbot::AddressEntry const*>::operator++[abi:ne180100](void *result)
{
  *result += 48;
  return result;
}

void *std::__wrap_iter<ctb::chatbot::AddressEntry const*>::operator+=[abi:ne180100](void *result, uint64_t a2)
{
  *result += 48 * a2;
  return result;
}

unint64_t std::operator-[abi:ne180100]<ctb::chatbot::AddressEntry const*,ctb::chatbot::AddressEntry const*>(void *a1, void *a2)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*a1 - *a2) >> 4);
}

uint64_t std::vector<ctb::chatbot::AddressEntry>::push_back[abi:ne180100](int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = a1->u64[1];
  if (v3 >= a1[1].i64[0])
  {
    uint64_t result = std::vector<ctb::chatbot::AddressEntry>::__push_back_slow_path<ctb::chatbot::AddressEntry const&>(a1, a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::AddressEntry,ctb::chatbot::AddressEntry const&,ctb::chatbot::AddressEntry*>(a1->i64[1], a2);
    uint64_t result = v3 + 48;
    a1->i64[1] = v3 + 48;
  }
  a1->i64[1] = result;
  return result;
}

void sub_249574BC8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_249574BD0(uint64_t a1)
{
  return std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
}

std::string *sub_249574C10(uint64_t a1, const ctb::chatbot::URIEntryList *a2)
{
  unint64_t v3 = (std::string *)std::vector<std::string>::~vector[abi:ne180100](a1, (uint64_t)std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
  return ctb::chatbot::URIEntryList::URIEntryList(v3, a2);
}

__n128 *sub_249574C68(__n128 *a1, __n128 *a2)
{
  return a1;
}

__n128 std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](__n128 *a1, __n128 *a2)
{
  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_249574CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2495745A0(a1, a2, a3, (uint64_t)std::vector<ctb::chatbot::URIEntry>::__base_destruct_at_end[abi:ne180100], (uint64_t)std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100], (uint64_t (*)(uint64_t, uint64_t, uint64_t))std::vector<std::string>::~vector[abi:ne180100], (void (*)(uint64_t, uint64_t))std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]);
}

void type metadata accessor for std.__1.vector_URIEntry_ allocator_URIEntry__(uint64_t a1)
{
}

std::string *ctb::chatbot::SuggestedActionShowQuery::SuggestedActionShowQuery(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  return this;
}

void ctb::chatbot::OrgNameEntry::~OrgNameEntry(std::basic_string<char16_t> *this)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(this->__r_.__value_.__l.__data_);
  }
}

void type metadata accessor for ctb.chatbot.TelephoneNumber(uint64_t a1)
{
}

uint64_t sub_249574DE8()
{
  return sub_24956FC08(&qword_2696BFB78, type metadata accessor for std.__1.__wrap_iter_UnsafePointer_URIEntry__);
}

void type metadata accessor for std.__1.__wrap_iter_UnsafePointer_URIEntry__(uint64_t a1)
{
}

void sub_249574E44(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_249574E8C(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BFB80, type metadata accessor for std.__1.vector_URIEntry_ allocator_URIEntry__);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249574EE4(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BFB88, type metadata accessor for std.__1.__wrap_iter_UnsafePointer_URIEntry__);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249574F3C(uint64_t a1)
{
  uint64_t result = sub_24956FC08(&qword_2696BFB90, type metadata accessor for std.__1.__wrap_iter_UnsafePointer_URIEntry__);
  *(void *)(a1 + 8) = result;
  return result;
}

void *std::__wrap_iter<ctb::chatbot::URIEntry const*>::operator++[abi:ne180100](void *result)
{
  *result += 40;
  return result;
}

void *std::__wrap_iter<ctb::chatbot::URIEntry const*>::operator+=[abi:ne180100](void *result, uint64_t a2)
{
  *result += 40 * a2;
  return result;
}

unint64_t std::operator-[abi:ne180100]<ctb::chatbot::URIEntry const*,ctb::chatbot::URIEntry const*>(void *a1, void *a2)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*a1 - *a2) >> 3);
}

uint64_t std::vector<ctb::chatbot::URIEntry>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 >= a1[2])
  {
    uint64_t result = std::vector<ctb::chatbot::URIEntry>::__push_back_slow_path<ctb::chatbot::URIEntry const&>(a1, a2);
  }
  else
  {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)a1[1], (long long *)a2);
    *(void *)(v4 + 32) = *(void *)(a2 + 32);
    uint64_t result = v4 + 40;
    a1[1] = v4 + 40;
  }
  a1[1] = result;
  return result;
}

void sub_249575040(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

ctb::chatbot::CardMessage *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(int a1, ctb::chatbot::CardMessage *this, CardMessage *a3)
{
  return ctb::chatbot::CardMessage::CardMessage(this, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<1ul,ctb::chatbot::CardCarouselMessage>::__alt[abi:ne180100]<ctb::chatbot::CardCarouselMessage const&>(a2, a3);
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<ctb::chatbot::SuggestedChip>::__init_with_size[abi:ne180100]<ctb::chatbot::SuggestedChip*,ctb::chatbot::SuggestedChip*>(a2, *a3, a3[1], 0x34F72C234F72C235 * ((a3[1] - *a3) >> 3));
}

uint64_t std::__tree<std::string>::__count_unique<std::string>(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1;
    do
    {
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v2 + 4) & 0x80) == 0)
      {
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2 + 4, a2) & 0x80) == 0) {
          return v4;
        }
        ++v2;
      }
      uint64_t v2 = (void **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<0ul,ctb::chatbot::CardMessage>::__alt[abi:ne180100]<ctb::chatbot::CardMessage>(a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, __n128 *a3)
{
  unint64_t v3 = a3->n128_u64[0];
  *(_DWORD *)(a2 + 8) = a3->n128_u32[2];
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  if (a3[2].n128_u8[8])
  {
    __n128 v4 = a3[1];
    *(void *)(a2 + 32) = a3[2].n128_u64[0];
    *(__n128 *)(a2 + 16) = v4;
    a3[1].n128_u64[1] = 0;
    a3[2].n128_u64[0] = 0;
    a3[1].n128_u64[0] = 0;
    *(unsigned char *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 1;
  }
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  __n128 result = a3[3];
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a2 + 64) = a3[4].n128_u64[0];
  a3[3].n128_u64[0] = 0;
  a3[3].n128_u64[1] = 0;
  a3[4].n128_u64[0] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot11CardMessageENS9_19CardCarouselMessageENS9_17SuggestedChipListEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  __n128 result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

void std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100](void ***a1, void (*a2)(char *))
{
  uint64_t v2 = *a1;
  unint64_t v3 = (char *)**a1;
  if (v3)
  {
    long long v5 = (char *)v2[1];
    int v6 = **a1;
    if (v5 != v3)
    {
      do
      {
        v5 -= 56;
        a2(v5);
      }
      while (v5 != v3);
      int v6 = **a1;
    }
    v2[1] = v3;
    operator delete(v6);
  }
}

uint64_t std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__push_back_slow_path<ctb::ProvisioningConfiguration::AccessControl::Server const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  int64_t v14 = &v10[56 * v4];
  uint64_t v16 = &v10[56 * v9];
  std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,ctb::ProvisioningConfiguration::AccessControl::Server const&,ctb::ProvisioningConfiguration::AccessControl::Server*>(v14, a2);
  BOOL v15 = v14 + 56;
  std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<ctb::ProvisioningConfiguration::AccessControl::Server>::~__split_buffer((uint64_t)&v13, (void (*)(void))std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>);
  return v11;
}

void sub_24957534C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ctb::ProvisioningConfiguration::AccessControl::Server>::~__split_buffer((uint64_t)va, (void (*)(void))std::__destroy_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl::Server,0>);
  _Unwind_Resume(a1);
}

void sub_2495753DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__swap_out_circular_buffer(void *a1, void *a2)
{
  return std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__swap_out_circular_buffer(a1, a2, (uint64_t (*)(void *, void, void, void, void, void, void))std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>,std::reverse_iterator<ctb::ProvisioningConfiguration::AccessControl::Server*>,std::reverse_iterator<ctb::ProvisioningConfiguration::AccessControl::Server*>,std::reverse_iterator<ctb::ProvisioningConfiguration::AccessControl::Server*>>);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>,std::reverse_iterator<ctb::ProvisioningConfiguration::AccessControl::Server*>,std::reverse_iterator<ctb::ProvisioningConfiguration::AccessControl::Server*>,std::reverse_iterator<ctb::ProvisioningConfiguration::AccessControl::Server*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = a6;
  if (a3 != a5)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = a7 + v8;
      uint64_t v10 = a3 + v8;
      long long v11 = *(_OWORD *)(a3 + v8 - 56);
      *(void *)(v9 - 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(void *)(a3 + v8 - 40);
      *(_OWORD *)(v9 - 56) = v11;
      *(void *)(v10 - 48) = 0;
      *(void *)(v10 - 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
      *(void *)(v10 - 56) = 0;
      *(void *)(v9 - 32) = *(void *)(a3 + v8 - 32);
      uint64_t v12 = (uint64_t *)(a3 + v8 - 24);
      uint64_t v13 = *v12;
      *(void *)(a7 + v8 - 24) = *v12;
      uint64_t v14 = a7 + v8 - 24;
      uint64_t v15 = *(void *)(a3 + v8 - 16);
      *(void *)(v9 - 16) = v15;
      if (v15)
      {
        *(void *)(v13 + 16) = v14;
        *(void *)(v10 - 32) = v12;
        *uint64_t v12 = 0;
        *(void *)(a3 + v8 - 16) = 0;
      }
      else
      {
        *(void *)(v9 - 32) = v14;
      }
      *(unsigned char *)(a7 + v8 - 8) = *(unsigned char *)(a3 + v8 - 8);
      v8 -= 56;
    }
    while (a3 + v8 != a5);
  }
  return result;
}

uint64_t std::vector<ctb::ClientAuthenticityRequest::Parameter>::__swap_out_circular_buffer(void *a1, void *a2)
{
  return std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__swap_out_circular_buffer(a1, a2, (uint64_t (*)(void *, void, void, void, void, void, void))std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,std::reverse_iterator<ctb::ClientAuthenticityRequest::Parameter*>,std::reverse_iterator<ctb::ClientAuthenticityRequest::Parameter*>,std::reverse_iterator<ctb::ClientAuthenticityRequest::Parameter*>>);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,std::reverse_iterator<ctb::ClientAuthenticityRequest::Parameter*>,std::reverse_iterator<ctb::ClientAuthenticityRequest::Parameter*>,std::reverse_iterator<ctb::ClientAuthenticityRequest::Parameter*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(unsigned char *)(v7 - 32) = 0;
      uint64_t v8 = a3 - 4;
      *(unsigned char *)(v7 - 8) = 0;
      if (*((unsigned char *)a3 - 8))
      {
        *(void *)(v7 - 32) = 0;
        *(void *)(v7 - 24) = 0;
        *(void *)(v7 - 16) = 0;
        *(_OWORD *)(v7 - 32) = *((_OWORD *)a3 - 2);
        *(void *)(v7 - 16) = *(a3 - 2);
        *uint64_t v8 = 0;
        *(a3 - 3) = 0;
        *(a3 - 2) = 0;
        *(unsigned char *)(v7 - 8) = 1;
      }
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
      a3 -= 4;
    }
    while (v8 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,std::reverse_iterator<ctb::ClientAuthenticityRequest::Parameter*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,std::reverse_iterator<ctb::ClientAuthenticityRequest::Parameter*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,std::reverse_iterator<ctb::ClientAuthenticityRequest::Parameter*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ctb::ClientAuthenticityRequest::Parameter>,std::reverse_iterator<ctb::ClientAuthenticityRequest::Parameter*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(unsigned char *)(v1 + 24))
    {
      uint64_t v3 = *(void **)v1;
      if (*(void *)v1)
      {
        *(void *)(v1 + 8) = v3;
        operator delete(v3);
      }
    }
    v1 += 32;
  }
}

void std::__split_buffer<ctb::ClientAuthenticityRequest::Parameter>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      unint64_t v5 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((unsigned char *)v2 - 8))
      {
        int v6 = *v5;
        if (*v5)
        {
          *(v2 - 3) = v6;
          operator delete(v6);
          unint64_t v5 = *(void ***)(a1 + 16);
        }
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::vector<ctb::ClientAuthenticityRequest::Method>::__push_back_slow_path<ctb::ClientAuthenticityRequest::Method const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::ProvisioningConfiguration::AccessControl::Server>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  long long v13 = v10;
  long long v14 = &v10[56 * v4];
  uint64_t v16 = &v10[56 * v9];
  std::construct_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,ctb::ClientAuthenticityRequest::Method const&,ctb::ClientAuthenticityRequest::Method*>(v14, a2);
  uint64_t v15 = v14 + 56;
  std::vector<ctb::ClientAuthenticityRequest::Method>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<ctb::ProvisioningConfiguration::AccessControl::Server>::~__split_buffer((uint64_t)&v13, (void (*)(void))std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>);
  return v11;
}

void sub_24957578C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ctb::ProvisioningConfiguration::AccessControl::Server>::~__split_buffer((uint64_t)va, (void (*)(void))std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>);
  _Unwind_Resume(a1);
}

void sub_24957583C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<ctb::ClientAuthenticityRequest::Method>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 56) = *(void *)(v2 + v5 - 56);
      long long v8 = *(_OWORD *)(v2 + v5 - 48);
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 48) = v8;
      *(void *)(v7 - 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v6 - 24) = 0;
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 8) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 56;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v9 = *result;
  *uint64_t result = v4;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<ctb::ProvisioningConfiguration::AccessControl::Server>::~__split_buffer(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v4; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    a2();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot15SuggestedActionENS9_14SuggestedReplyEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<0ul,ctb::chatbot::SuggestedAction>::__alt[abi:ne180100]<ctb::chatbot::SuggestedAction const&>(a2, a3);
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot15SuggestedActionENS9_14SuggestedReplyEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(int a1, std::string *this, long long *a3)
{
  return std::__variant_detail::__alt<1ul,ctb::chatbot::SuggestedReply>::__alt[abi:ne180100]<ctb::chatbot::SuggestedReply const&>(this, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<0ul,ctb::chatbot::SuggestedActionOpenUrlInWebView>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionOpenUrlInWebView const&>(a2, a3);
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_(int a1, std::string *this, long long *a3)
{
  return std::__variant_detail::__alt<2ul,ctb::chatbot::SuggestedActionComposeText>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionComposeText const&>(this, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_Tm(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  return std::__variant_detail::__alt<5ul,ctb::chatbot::SuggestedActionShowLocation>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionShowLocation const&>(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_(int a1, std::string *this, ctb::chatbot::CreateCalendarEvent *a3)
{
  return ctb::chatbot::CreateCalendarEvent::CreateCalendarEvent(this, a3);
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_Tm(int a1, std::string *this, long long *a3)
{
  return std::__variant_detail::__alt<8ul,ctb::chatbot::SuggestedActionDialVideoCall>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionDialVideoCall const&>(this, a3);
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_(int a1, std::string *this, long long *a3)
{
  return std::__variant_detail::__alt<9ul,ctb::chatbot::SuggestedActionDialEnrichedCall>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionDialEnrichedCall const&>(this, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_Tm(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

std::string *std::__variant_detail::__alt<8ul,ctb::chatbot::SuggestedActionDialVideoCall>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionDialVideoCall const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 1, (long long *)((char *)a2 + 24));
  return this;
}

void sub_249575A98(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1, void (*a2)(void))
{
  if (**a1)
  {
    a2();
    long long v3 = **a1;
    operator delete(v3);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL1EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL1EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_Tm(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))std::__variant_detail::__alt<1ul,ctb::chatbot::MenuL1>::__alt[abi:ne180100]<ctb::chatbot::MenuL1 const&>);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL1EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_Tm(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
  return std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(a2 + 2), (uint64_t)(a3 + 2));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL2EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL1EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_Tm(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))std::__variant_detail::__alt<1ul,ctb::chatbot::MenuL2>::__alt[abi:ne180100]<ctb::chatbot::MenuL2 const&>);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL1EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  return a4(a2, a3);
}

void std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100](void ***a1, void (*a2)(char *))
{
  uint64_t v2 = *a1;
  long long v3 = (char *)**a1;
  if (v3)
  {
    uint64_t v5 = (char *)v2[1];
    uint64_t v6 = **a1;
    if (v5 != v3)
    {
      do
      {
        long long v8 = v5 - 248;
        a2(v5 - 240);
        uint64_t v5 = v8;
      }
      while (v8 != v3);
      uint64_t v6 = **a1;
    }
    v2[1] = v3;
    operator delete(v6);
  }
}

{
  void **v2;
  char *v3;
  char *v5;
  void *v6;
  char *v8;
  uint64_t vars8;

  uint64_t v2 = *a1;
  long long v3 = (char *)**a1;
  if (v3)
  {
    uint64_t v5 = (char *)v2[1];
    uint64_t v6 = **a1;
    if (v5 != v3)
    {
      do
      {
        long long v8 = v5 - 248;
        a2(v5 - 240);
        uint64_t v5 = v8;
      }
      while (v8 != v3);
      uint64_t v6 = **a1;
    }
    v2[1] = v3;
    operator delete(v6);
  }
}

void std::vector<ctb::chatbot::OrgNameEntry>::__construct_one_at_end[abi:ne180100]<ctb::chatbot::OrgNameEntry const&>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  *(_DWORD *)(v4 + 24) = *((_DWORD *)a2 + 6);
  *(void *)(a1 + 8) = v4 + 32;
}

void sub_249575C6C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<ctb::chatbot::OrgNameEntry>::__push_back_slow_path<ctb::chatbot::OrgNameEntry const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::OrgNameEntry>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (std::string *)&v10[8 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  unint64_t v17 = (char *)&v10[8 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    uint64_t v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v10[8 * v4 + 6] = *((_DWORD *)a2 + 6);
  uint64_t v16 = (std::string *)((char *)v11 + 32);
  std::vector<ctb::chatbot::OrgNameEntry>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<ctb::ClientAuthenticityRequest::Parameter>::~__split_buffer((uint64_t)v15, (void (*)(uint64_t, void))std::__split_buffer<ctb::chatbot::OrgNameEntry>::__destruct_at_end[abi:ne180100]);
  return v13;
}

void sub_249575D84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ctb::ClientAuthenticityRequest::Parameter>::~__split_buffer((uint64_t)va, (void (*)(uint64_t, void))std::__split_buffer<ctb::chatbot::OrgNameEntry>::__destruct_at_end[abi:ne180100]);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ctb::chatbot::OrgNameEntry>::__swap_out_circular_buffer(void *a1, void *a2)
{
  return std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__swap_out_circular_buffer(a1, a2, (uint64_t (*)(void *, void, void, void, void, void, void))std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ctb::chatbot::OrgNameEntry>,std::reverse_iterator<ctb::chatbot::OrgNameEntry*>,std::reverse_iterator<ctb::chatbot::OrgNameEntry*>,std::reverse_iterator<ctb::chatbot::OrgNameEntry*>>);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ctb::chatbot::OrgNameEntry>,std::reverse_iterator<ctb::chatbot::OrgNameEntry*>,std::reverse_iterator<ctb::chatbot::OrgNameEntry*>,std::reverse_iterator<ctb::chatbot::OrgNameEntry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::OrgNameEntry>,std::reverse_iterator<ctb::chatbot::OrgNameEntry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::OrgNameEntry>,std::reverse_iterator<ctb::chatbot::OrgNameEntry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::OrgNameEntry>,std::reverse_iterator<ctb::chatbot::OrgNameEntry*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::OrgNameEntry>,std::reverse_iterator<ctb::chatbot::OrgNameEntry*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 32;
  }
}

void std::__split_buffer<ctb::chatbot::OrgNameEntry>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      unint64_t v5 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::vector<ctb::chatbot::MediaEntry>::__push_back_slow_path<ctb::chatbot::MediaEntry const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1C71C71C71C71C7) {
    unint64_t v9 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::MediaEntry>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  char v13 = v10;
  long long v14 = &v10[72 * v4];
  uint64_t v16 = &v10[72 * v9];
  std::construct_at[abi:ne180100]<ctb::chatbot::MediaEntry,ctb::chatbot::MediaEntry const&,ctb::chatbot::MediaEntry*>(v14, a2);
  long long v15 = v14 + 72;
  std::vector<ctb::chatbot::MediaEntry>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<ctb::chatbot::MediaEntry>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_249576058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ctb::chatbot::MediaEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2495760EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<ctb::chatbot::MediaEntry>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(_DWORD *)(v6 - 72) = *(_DWORD *)(v2 + v5 - 72);
      long long v8 = *(_OWORD *)(v2 + v5 - 64);
      *(void *)(v6 - 48) = *(void *)(v2 + v5 - 48);
      *(_OWORD *)(v6 - 64) = v8;
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 64) = 0;
      *(unsigned char *)(v4 + v5 - 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
      *(unsigned char *)(v6 - 16) = 0;
      if (*(unsigned char *)(v2 + v5 - 16))
      {
        long long v9 = *(_OWORD *)(v7 - 40);
        *(void *)(v4 + v5 - 24) = *(void *)(v7 - 24);
        *(_OWORD *)(v4 + v5 - 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v9;
        *(void *)(v7 - 32) = 0;
        *(void *)(v7 - 24) = 0;
        *(void *)(v7 - 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
        *(unsigned char *)(v6 - 16) = 1;
      }
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v7 - 8);
      v5 -= 72;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v10 = *result;
  *uint64_t result = v4;
  a2[1] = v10;
  uint64_t v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<ctb::chatbot::MediaEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    std::__destroy_at[abi:ne180100]<ctb::chatbot::MediaEntry,0>(i - 72);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<ctb::chatbot::AddressEntry>::__push_back_slow_path<ctb::chatbot::AddressEntry const&>(int64x2_t *a1, uint64_t a2)
{
  uint64_t v3 = a1->i64[0];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t i64 = (uint64_t)a1[1].i64;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v24 = a1 + 1;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::CPIMNamespace>>(i64, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v21 = v10;
  v22.i64[0] = (uint64_t)&v10[48 * v4];
  v22.i64[1] = v22.i64[0];
  uint64_t v23 = &v10[48 * v9];
  std::construct_at[abi:ne180100]<ctb::chatbot::AddressEntry,ctb::chatbot::AddressEntry const&,ctb::chatbot::AddressEntry*>(v22.i64[0], a2);
  uint64_t v12 = a1->i64[0];
  unint64_t v11 = a1->u64[1];
  uint64_t v13 = v22.i64[0];
  uint64_t v14 = v22.i64[0];
  if (v11 == a1->i64[0])
  {
    int64x2_t v17 = vdupq_n_s64(v11);
  }
  else
  {
    do
    {
      long long v15 = *(_OWORD *)(v11 - 48);
      *(void *)(v14 - 32) = *(void *)(v11 - 32);
      *(_OWORD *)(v14 - 48) = v15;
      *(void *)(v11 - 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
      *(void *)(v11 - 32) = 0;
      *(void *)(v11 - 48) = 0;
      long long v16 = *(_OWORD *)(v11 - 24);
      *(void *)(v14 - 8) = *(void *)(v11 - 8);
      *(_OWORD *)(v14 - 24) = v16;
      v14 -= 48;
      *(void *)(v11 - 16) = 0;
      *(void *)(v11 - 8) = 0;
      *(void *)(v11 - 24) = 0;
      v11 -= 48;
    }
    while (v11 != v12);
    int64x2_t v17 = *a1;
  }
  uint64_t v18 = v13 + 48;
  a1->i64[0] = v14;
  a1->i64[1] = v13 + 48;
  int64x2_t v22 = v17;
  uint64_t v19 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v23;
  uint64_t v23 = v19;
  uint64_t v21 = (char *)v17.i64[0];
  std::__split_buffer<ctb::chatbot::AddressEntry>::~__split_buffer((uint64_t)&v21);
  return v18;
}

void sub_249576378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ctb::chatbot::AddressEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24957640C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<ctb::chatbot::AddressEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    std::__destroy_at[abi:ne180100]<ctb::CPIMNamespace,0>(i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100](void ***a1, void (*a2)(void))
{
  if (**a1)
  {
    a2();
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<ctb::chatbot::URIEntry>::__push_back_slow_path<ctb::chatbot::URIEntry const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  int64x2_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::URIEntry>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = (std::string *)&v10[40 * v4];
  long long v15 = v14;
  long long v16 = &v10[40 * v9];
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v14, (long long *)a2);
  v14[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
  long long v15 = (std::string *)((char *)v15 + 40);
  std::vector<ctb::chatbot::URIEntry>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<ctb::ClientAuthenticityRequest::Parameter>::~__split_buffer((uint64_t)&v13, (void (*)(uint64_t, void))std::__split_buffer<ctb::chatbot::URIEntry>::__destruct_at_end[abi:ne180100]);
  return v11;
}

void sub_2495765EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ctb::ClientAuthenticityRequest::Parameter>::~__split_buffer((uint64_t)va, (void (*)(uint64_t, void))std::__split_buffer<ctb::chatbot::URIEntry>::__destruct_at_end[abi:ne180100]);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ctb::chatbot::URIEntry>::__swap_out_circular_buffer(void *a1, void *a2)
{
  return std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__swap_out_circular_buffer(a1, a2, (uint64_t (*)(void *, void, void, void, void, void, void))std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ctb::chatbot::URIEntry>,std::reverse_iterator<ctb::chatbot::URIEntry*>,std::reverse_iterator<ctb::chatbot::URIEntry*>,std::reverse_iterator<ctb::chatbot::URIEntry*>>);
}

uint64_t std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__swap_out_circular_buffer(void *a1, void *a2, uint64_t (*a3)(void *, void, void, void, void, void, void))
{
  uint64_t result = a3(a1 + 2, a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ctb::chatbot::URIEntry>,std::reverse_iterator<ctb::chatbot::URIEntry*>,std::reverse_iterator<ctb::chatbot::URIEntry*>,std::reverse_iterator<ctb::chatbot::URIEntry*>>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      *(unsigned char *)(v7 - 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
      uint64_t v8 = (long long *)((char *)a3 - 40);
      *(unsigned char *)(v7 - 16) = 0;
      if (*((unsigned char *)a3 - 16))
      {
        long long v9 = *v8;
        *(void *)(v7 - 24) = *((void *)a3 - 3);
        *(_OWORD *)(v7 - 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v9;
        *((void *)a3 - 4) = 0;
        *((void *)a3 - 3) = 0;
        *(void *)uint64_t v8 = 0;
        *(unsigned char *)(v7 - 16) = 1;
      }
      *(void *)(v7 - 8) = *((void *)a3 - 1);
      uint64_t v7 = *((void *)&v15 + 1) - 40;
      *((void *)&v15 + 1) -= 40;
      a3 = (long long *)((char *)a3 - 40);
    }
    while (v8 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::URIEntry>,std::reverse_iterator<ctb::chatbot::URIEntry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::URIEntry>,std::reverse_iterator<ctb::chatbot::URIEntry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::URIEntry>,std::reverse_iterator<ctb::chatbot::URIEntry*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ctb::chatbot::URIEntry>,std::reverse_iterator<ctb::chatbot::URIEntry*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(unsigned char *)(v1 + 24))
    {
      if (*(char *)(v1 + 23) < 0) {
        operator delete(*(void **)v1);
      }
    }
    v1 += 40;
  }
}

uint64_t std::__split_buffer<ctb::ClientAuthenticityRequest::Parameter>::~__split_buffer(uint64_t a1, void (*a2)(uint64_t, void))
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<ctb::chatbot::URIEntry>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      unint64_t v5 = v2 - 5;
      *(void *)(a1 + 16) = v2 - 5;
      if (*((unsigned char *)v2 - 16))
      {
        if (*((char *)v2 - 17) < 0)
        {
          operator delete(*v5);
          unint64_t v5 = *(void ***)(a1 + 16);
        }
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t FileTransferInfo.init(rcsFileTransferInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v26 = type metadata accessor for FileInfo();
  uint64_t v3 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v27 = (uint64_t)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFBA0);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = sub_2495B6AA0();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFBA8);
  MEMORY[0x270FA5388](v15 - 8);
  int64x2_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = a1;
  sub_2495B6DE0();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v17, 1, v11) == 1)
  {
    sub_249576D0C((uint64_t)v17);
    uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v10, 1, 1, v26);
  }
  else
  {
    uint64_t v19 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))((char *)&v26 - v14, v17, v11);
    MEMORY[0x270FA5388](v19);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))((char *)&v26 - v14, (char *)&v26 - v14, v11);
    sub_2495955E0((uint64_t)&v26 - v14, (uint64_t)v8);
    (*(void (**)(char *, uint64_t))(v12 + 8))((char *)&v26 - v14, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v26);
    uint64_t v18 = sub_249576DD0((uint64_t)v8, (uint64_t)v10);
  }
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = v28;
  sub_2495B6DD0();
  uint64_t v21 = v27;
  sub_2495955E0((uint64_t)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v27);
  uint64_t v22 = sub_2495B6DF0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v20, v22);
  uint64_t v23 = v29;
  sub_249576D6C(v21, v29);
  uint64_t v24 = type metadata accessor for FileTransferInfo();
  return sub_249576DD0((uint64_t)v10, v23 + *(int *)(v24 + 20));
}

uint64_t sub_249576D0C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFBA8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_249576D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FileInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_249576DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFBA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_249576E38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = sub_2495B6C60();
  sub_249595C64(v4, v5, (uint64_t)v60);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFBE8);
  uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2495B6C90();
  MEMORY[0x270FA5388](v9);
  sub_24957864C((uint64_t)v8, (uint64_t)v8, &qword_2696BFBE8);
  uint64_t v10 = sub_2495B6C80();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10);
  uint64_t v53 = a1;
  if (v12 == 1)
  {
    sub_2495786B0((uint64_t)v8, &qword_2696BFBE8);
    uint64_t v59 = 0;
    std::optional<ctb::CPMGroupManagement::Response>::optional[abi:ne180100](&v59);
    uint64_t Optional = v59;
  }
  else
  {
    uint64_t v14 = *(void *)(v11 + 64);
    MEMORY[0x270FA5388](v12);
    unint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))((char *)&v48 - v15, v8, v10);
    MEMORY[0x270FA5388](v16);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))((char *)&v48 - v15, (char *)&v48 - v15, v10);
    unsigned int v17 = sub_249578754((uint64_t)&v48 - v15);
    uint64_t Optional = ctb::bridging::makeOptional(v17);
    (*(void (**)(char *, uint64_t))(v11 + 8))((char *)&v48 - v15, v10);
    sub_2495786B0((uint64_t)v8, &qword_2696BFBE8);
    uint64_t v59 = Optional;
    a1 = v53;
  }
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFBF0);
  uint64_t v52 = &v48;
  uint64_t v19 = *(void *)(*(void *)(v18 - 8) + 64);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_2495B6CA0();
  MEMORY[0x270FA5388](v21);
  sub_24957864C((uint64_t)v20, (uint64_t)v20, &qword_2696BFBF0);
  uint64_t v22 = sub_2495B6B90();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22);
  uint64_t v51 = Optional;
  if (v24 == 1)
  {
    uint64_t v55 = 0;
    memset(v54, 0, sizeof(v54));
    char v56 = 1;
  }
  else
  {
    v50 = (uint64_t *)a2;
    uint64_t v49 = &v48;
    uint64_t v25 = *(void *)(v23 + 64);
    MEMORY[0x270FA5388](v24);
    unint64_t v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))((char *)&v48 - v26, v20, v22);
    MEMORY[0x270FA5388](v27);
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))((char *)&v48 - v26, (char *)&v48 - v26, v22);
    unint64_t v28 = sub_2495B6B80();
    sub_249595C64(v28, v29, (uint64_t)v54);
    uint64_t v30 = *(void (**)(char *, uint64_t))(v23 + 8);
    v30((char *)&v48 - v26, v22);
    std::optional<std::string>::optional[abi:ne180100]((uint64_t)v57, v54);
    ctb::chatbot::URIEntry::~URIEntry((void **)v54);
    ctb::bridging::makeOptional((uint64_t)v57, (uint64_t)v54);
    v30((char *)&v48 - v26, v22);
    char v56 = 0;
    a2 = (uint64_t)v50;
    uint64_t Optional = v51;
    a1 = v53;
  }
  sub_2495786B0((uint64_t)v20, &qword_2696BFBF0);
  if (v56)
  {
    uint64_t v58 = 0;
    memset(v57, 0, sizeof(v57));
    std::optional<ctb::SIPConferenceInfo::ReferredInfo>::optional[abi:ne180100](v57);
    sub_2495786B0((uint64_t)v54, &qword_2696BFBF8);
  }
  else
  {
    std::optional<ctb::SIPConferenceInfo::ReferredInfo>::optional[abi:ne180100]((uint64_t)v57, (long long *)v54);
    std::optional<ctb::SIPConferenceInfo::ReferredInfo>::~optional(v54);
  }
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFC00);
  uint64_t v52 = &v48;
  uint64_t v32 = *(void *)(*(void *)(v31 - 8) + 64);
  MEMORY[0x270FA5388](v31 - 8);
  long long v33 = (char *)&v48 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_2495B6C70();
  v50 = &v48;
  MEMORY[0x270FA5388](v34);
  sub_24957864C((uint64_t)v33, (uint64_t)v33, &qword_2696BFC00);
  uint64_t v35 = sub_2495B6C00();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48))(v33, 1, v35);
  int v38 = v37;
  uint64_t v39 = 0;
  if (v37 != 1)
  {
    uint64_t v49 = &v48;
    uint64_t v40 = *(void *)(v36 + 64);
    MEMORY[0x270FA5388](v37);
    uint64_t v41 = (char *)&v48 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v42 = (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 32))(v41, v33, v35);
    MEMORY[0x270FA5388](v42);
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v41, v41, v35);
    int v43 = (*(uint64_t (**)(char *, uint64_t))(v36 + 88))(v41, v35);
    if (MEMORY[0x263F2ADD0] && v43 == *MEMORY[0x263F2ADD0])
    {
      unsigned int v44 = 1;
      uint64_t Optional = v51;
    }
    else if (MEMORY[0x263F2ADB8] && v43 == *MEMORY[0x263F2ADB8])
    {
      unsigned int v44 = 2;
      uint64_t Optional = v51;
    }
    else
    {
      uint64_t Optional = v51;
      if (MEMORY[0x263F2ADC8] && v43 == *MEMORY[0x263F2ADC8])
      {
        unsigned int v44 = 3;
      }
      else if (MEMORY[0x263F2ADA0] && v43 == *MEMORY[0x263F2ADA0])
      {
        unsigned int v44 = 4;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v36 + 8))(v41, v35);
        unsigned int v44 = 0;
      }
    }
    uint64_t v39 = ctb::bridging::makeOptional(v44);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v41, v35);
  }
  sub_2495786B0((uint64_t)v33, &qword_2696BFC00);
  if (v38 == 1)
  {
    v54[0].n128_u64[0] = 0;
    std::optional<ctb::CPMGroupManagement::Response>::optional[abi:ne180100](v54);
    uint64_t v45 = sub_2495B6CB0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v45 - 8) + 8))(a1, v45);
    uint64_t v39 = v54[0].n128_u64[0];
  }
  else
  {
    uint64_t v46 = sub_2495B6CB0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(a1, v46);
    v54[0].n128_u64[0] = v39;
  }
  std::optional<std::string>::optional[abi:ne180100](a2, v60);
  ctb::chatbot::URIEntry::~URIEntry((void **)v60);
  *(void *)(a2 + 32) = Optional;
  std::optional<ctb::SIPConferenceInfo::ReferredInfo>::optional[abi:ne180100](a2 + 40, v57);
  uint64_t result = std::optional<ctb::SIPConferenceInfo::ReferredInfo>::~optional(v57);
  *(void *)(a2 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v39;
  return result;
}

void sub_249577680(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_2495B6BD0();
  if (v5)
  {
    unint64_t v6 = v4;
    unint64_t v7 = v5;
    swift_bridgeObjectRetain();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v6, v7, &v35);
    ctb::bridging::makeOptional((ctb::bridging *)&v35, (uint64_t)v33);
    char v34 = 0;
    swift_bridgeObjectRelease();
    if ((v34 & 1) == 0)
    {
      std::optional<std::string>::optional[abi:ne180100]((uint64_t)&v35, (__n128 *)v33);
      ctb::chatbot::URIEntry::~URIEntry((void **)v33);
      goto LABEL_6;
    }
  }
  else
  {
    memset(v33, 0, sizeof(v33));
    char v34 = 1;
  }
  type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___(0);
  uint64_t v9 = v8;
  uint64_t v10 = sub_249578464((unint64_t *)&qword_2696BF8B8, type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___);
  CxxOptional.init(nilLiteral:)(v9, v10);
  sub_2495786B0((uint64_t)v33, &qword_2696BFBD0);
LABEL_6:
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFBD8);
  uint64_t v12 = *(void *)(*(void *)(v11 - 8) + 64);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_2495B6BC0();
  MEMORY[0x270FA5388](v14);
  sub_24957864C((uint64_t)v13, (uint64_t)v13, &qword_2696BFBD8);
  uint64_t v15 = sub_2495B6BB0();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15);
  if (v17 == 1)
  {
    memset(v33, 0, sizeof(v33));
    char v34 = 1;
  }
  else
  {
    v30[2] = v30;
    uint64_t v31 = a2;
    v30[1] = v30;
    uint64_t v18 = *(void *)(v16 + 64);
    MEMORY[0x270FA5388](v17);
    unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))((char *)v30 - v19, v13, v15);
    MEMORY[0x270FA5388](v20);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))((char *)v30 - v19, (char *)v30 - v19, v15);
    unint64_t v21 = sub_2495B6BA0();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v21, v22, (std::string *)v33);
    uint64_t v23 = *(void (**)(char *, uint64_t))(v16 + 8);
    v23((char *)v30 - v19, v15);
    std::string::basic_string[abi:ne180100](v32, (__n128 *)v33);
    std::string::~string((std::string *)v33);
    __n128 Optional = ctb::bridging::makeOptional((ctb::bridging *)v32, (uint64_t)v33);
    ((void (*)(char *, uint64_t, __n128))v23)((char *)v30 - v19, v15, Optional);
    char v34 = 0;
    a2 = v31;
  }
  sub_2495786B0((uint64_t)v13, &qword_2696BFBD8);
  if (v34)
  {
    type metadata accessor for std.__1.optional_SubjectExt_(0);
    uint64_t v26 = v25;
    uint64_t v27 = sub_249578464(&qword_2696BF808, type metadata accessor for std.__1.optional_SubjectExt_);
    CxxOptional.init(nilLiteral:)(v26, v27);
    uint64_t v28 = sub_2495B6BE0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(a1, v28);
    sub_2495786B0((uint64_t)v33, &qword_2696BFBE0);
  }
  else
  {
    uint64_t v29 = sub_2495B6BE0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(a1, v29);
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v32, (__n128 *)v33);
    ctb::chatbot::URIEntry::~URIEntry((void **)v33);
  }
  std::optional<std::string>::optional[abi:ne180100](a2, (__n128 *)&v35);
  ctb::chatbot::URIEntry::~URIEntry((void **)&v35.__r_.__value_.__l.__data_);
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a2 + 32, v32);
  ctb::chatbot::URIEntry::~URIEntry((void **)v32);
}

void sub_249577AE4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v28 = a2;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a2);
  uint64_t v21 = a1;
  uint64_t v29 = sub_2495B6C30();
  uint64_t v27 = *(void *)(v29 + 16);
  if (v27)
  {
    uint64_t v3 = sub_2495B6C20();
    uint64_t v4 = v3;
    unint64_t v5 = 0;
    uint64_t v6 = *(void *)(v3 - 8);
    unint64_t v25 = v29 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v24 = v6 + 16;
    uint64_t v26 = v6;
    uint64_t v23 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v22 = v3;
    while (v5 < *(void *)(v29 + 16))
    {
      MEMORY[0x270FA5388](v3);
      uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v9 + 16))(v8);
      uint64_t v10 = sub_2495B6C10();
      __n128 v34 = 0uLL;
      uint64_t v35 = 0;
      std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v34);
      uint64_t v11 = *(void *)(v10 + 16);
      if (v11)
      {
        uint64_t v31 = v8;
        uint64_t v32 = &v21;
        uint64_t v12 = sub_2495B6CB0();
        uint64_t v13 = v12;
        uint64_t v14 = *(void *)(v12 - 8);
        uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
        uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
        uint64_t v30 = v10;
        uint64_t v17 = v10 + ((v16 + 32) & ~v16);
        uint64_t v19 = *(void *)(v14 + 64);
        uint64_t v18 = *(void *)(v14 + 72);
        do
        {
          MEMORY[0x270FA5388](v12);
          v15((char *)&v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v17, v13);
          sub_249576E38((uint64_t)&v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v33);
          std::vector<ctb::SIPConferenceInfo::Endpoint>::push_back[abi:ne180100]((uint64_t *)&v34, (uint64_t)v33);
          ctb::SIPConferenceInfo::Endpoint::~Endpoint((void **)v33);
          v17 += v18;
          --v11;
        }
        while (v11);
        swift_bridgeObjectRelease();
        uint64_t v4 = v22;
        uint64_t v8 = v31;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v36, &v34);
      std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)&v34, (void (*)(uint64_t *))std::vector<ctb::SIPConferenceInfo::Endpoint>::__destroy_vector::operator()[abi:ne180100]);
      (*v23)(v8, v4);
      std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v33, v36);
      std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)v36, (void (*)(uint64_t *))std::vector<ctb::SIPConferenceInfo::Endpoint>::__destroy_vector::operator()[abi:ne180100]);
      std::vector<ctb::SIPConferenceInfo::User>::push_back[abi:ne180100](v28, (uint64_t *)v33);
      ++v5;
      ctb::SIPConferenceInfo::User::~User((void **)v33);
      if (v5 == v27) {
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_10:
    uint64_t v20 = sub_2495B6C40();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v21, v20);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_249577E30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFBB0);
  uint64_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2495B6BF0();
  MEMORY[0x270FA5388](v6);
  sub_24957864C((uint64_t)v5, (uint64_t)v5, &qword_2696BFBB0);
  uint64_t v7 = sub_2495B6BE0();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7);
  if (v9 == 1)
  {
    uint64_t v39 = 0;
    long long v37 = 0u;
    long long v38 = 0u;
    __n128 v35 = 0u;
    long long v36 = 0u;
    char v40 = 1;
  }
  else
  {
    uint64_t v10 = *(void *)(v8 + 64);
    MEMORY[0x270FA5388](v9);
    unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))((char *)&v30 - v11, v5, v7);
    MEMORY[0x270FA5388](v12);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)&v30 - v11, (char *)&v30 - v11, v7);
    sub_249577680((uint64_t)&v30 - v11, (uint64_t)v41);
    ctb::bridging::makeOptional((uint64_t)v41, (uint64_t)&v35);
    (*(void (**)(char *, uint64_t))(v8 + 8))((char *)&v30 - v11, v7);
    char v40 = 0;
  }
  sub_2495786B0((uint64_t)v5, &qword_2696BFBB0);
  if (v40)
  {
    type metadata accessor for std.__1.optional_Description_(0);
    uint64_t v14 = v13;
    uint64_t v15 = sub_249578464(&qword_2696BF810, type metadata accessor for std.__1.optional_Description_);
    CxxOptional.init(nilLiteral:)(v14, v15);
    sub_2495786B0((uint64_t)&v35, &qword_2696BFBB8);
  }
  else
  {
    std::optional<ctb::SIPConferenceInfo::Description>::optional[abi:ne180100](v41, &v35);
    std::optional<ctb::SIPConferenceInfo::Description>::~optional(&v35);
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFBC0);
  uint64_t v17 = *(void *)(*(void *)(v16 - 8) + 64);
  MEMORY[0x270FA5388](v16 - 8);
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v31 = a1;
  uint64_t v19 = sub_2495B6C50();
  MEMORY[0x270FA5388](v19);
  sub_24957864C((uint64_t)&v30 - v18, (uint64_t)&v30 - v18, &qword_2696BFBC0);
  uint64_t v20 = sub_2495B6C40();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))((char *)&v30 - v18, 1, v20);
  if (v22 == 1)
  {
    __n128 v35 = 0uLL;
    *(void *)&long long v36 = 0;
    BYTE8(v36) = 1;
  }
  else
  {
    uint64_t v30 = (uint64_t)&v30;
    uint64_t v23 = *(void *)(v21 + 64);
    MEMORY[0x270FA5388](v22);
    unint64_t v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))((char *)&v30 - v24, (char *)&v30 - v18, v20);
    MEMORY[0x270FA5388](v25);
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))((char *)&v30 - v24, (char *)&v30 - v24, v20);
    sub_249577AE4((uint64_t)&v30 - v24, (uint64_t *)&v35);
    (*(void (**)(char *, uint64_t))(v21 + 8))((char *)&v30 - v24, v20);
    BYTE8(v36) = 0;
  }
  sub_2495786B0((uint64_t)&v30 - v18, &qword_2696BFBC0);
  if (BYTE8(v36))
  {
    uint64_t v34 = 0;
    __n128 v33 = 0uLL;
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v33);
    uint64_t v26 = sub_2495B6CC0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v31, v26);
    sub_2495786B0((uint64_t)&v35, &qword_2696BFBC8);
  }
  else
  {
    uint64_t v27 = sub_2495B6CC0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v31, v27);
    std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](&v33, &v35);
    std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)&v35, (void (*)(uint64_t *))std::vector<ctb::SIPConferenceInfo::User>::__destroy_vector::operator()[abi:ne180100]);
  }
  uint64_t v28 = v32;
  std::optional<ctb::SIPConferenceInfo::Description>::optional[abi:ne180100](v32, v41);
  std::optional<ctb::SIPConferenceInfo::Description>::~optional(v41);
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]((__n128 *)(v28 + 72), &v33);
  return std::vector<ctb::SIPConferenceInfo::User>::~vector[abi:ne180100]((uint64_t)&v33, (void (*)(uint64_t *))std::vector<ctb::SIPConferenceInfo::User>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t ctb::bridging::makeOptional@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (*(unsigned char *)(result + 24))
  {
    *(_OWORD *)a2 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = 0;
    *(unsigned char *)(a2 + 24) = 1;
  }
  *(unsigned char *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  if (*(unsigned char *)(result + 56))
  {
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(result + 32);
    *(void *)(a2 + 48) = *(void *)(result + 48);
    *(void *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(result + 48) = 0;
    *(void *)(result + 32) = 0;
    *(unsigned char *)(a2 + 56) = 1;
  }
  *(unsigned char *)(a2 + 64) = 1;
  return result;
}

{
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (*(unsigned char *)(result + 24))
  {
    *(_OWORD *)a2 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = 0;
    *(unsigned char *)(a2 + 24) = 1;
  }
  *(unsigned char *)(a2 + 32) = 1;
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_OWORD *)(a2 + 11) = *(_OWORD *)(result + 11);
  uint64_t v2 = (void *)(result + 40);
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v3;
  uint64_t v4 = a2 + 40;
  unint64_t v5 = *(void *)(result + 48);
  *(void *)(a2 + 48) = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)(result + 32) = v2;
    void *v2 = 0;
    *(void *)(result + 48) = 0;
  }
  else
  {
    *(void *)(a2 + 32) = v4;
  }
  *(unsigned char *)(a2 + 56) = 1;
  return result;
}

{
  long long v2;

  uint64_t v2 = *(_OWORD *)(result + 16);
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_OWORD *)(a2 + 16) = v2;
  *(_WORD *)(a2 + 32) = *(_WORD *)(result + 32);
  *(_OWORD *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(_OWORD *)(result + 40);
  *(void *)(a2 + 56) = *(void *)(result + 56);
  *(void *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(unsigned char *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 88) = 0;
  if (*(unsigned char *)(result + 88))
  {
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(result + 64);
    *(void *)(a2 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(void *)(result + 80);
    *(void *)(result + 72) = 0;
    *(void *)(result + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(result + 64) = 0;
    *(unsigned char *)(a2 + 88) = 1;
  }
  *(unsigned char *)(a2 + 96) = 1;
  return result;
}

uint64_t sub_249578464(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

__n128 ctb::bridging::makeOptional@<Q0>(ctb::bridging *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)this;
  *(_OWORD *)a2 = *(_OWORD *)this;
  *(void *)(a2 + 16) = *((void *)this + 2);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

{
  long long v3;
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)this;
  *(void *)(a2 + 16) = *((void *)this + 2);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  uint64_t v3 = *(_OWORD *)((char *)this + 24);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(_OWORD *)(a2 + 24) = v3;
  *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)this + 5);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *(void *)(a2 + 64) = *((void *)this + 8);
  *(_OWORD *)(a2 + 48) = *((_OWORD *)this + 3);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  __n128 result = *(__n128 *)((char *)this + 72);
  *(__n128 *)(a2 + 72) = result;
  *(void *)(a2 + 88) = *((void *)this + 11);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *((void *)this + 11) = 0;
  *(unsigned char *)(a2 + 96) = 1;
  return result;
}

uint64_t std::vector<ctb::SIPConferenceInfo::User>::push_back[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = std::vector<ctb::SIPConferenceInfo::User>::__push_back_slow_path<ctb::SIPConferenceInfo::User const&>(a1, a2);
  }
  else
  {
    std::vector<ctb::SIPConferenceInfo::User>::__construct_one_at_end[abi:ne180100]<ctb::SIPConferenceInfo::User const&>((uint64_t)a1, a2);
    uint64_t result = v3 + 24;
  }
  a1[1] = result;
  return result;
}

uint64_t std::vector<ctb::SIPConferenceInfo::Endpoint>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = std::vector<ctb::SIPConferenceInfo::Endpoint>::__push_back_slow_path<ctb::SIPConferenceInfo::Endpoint const&>(a1, a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint,ctb::SIPConferenceInfo::Endpoint const&,ctb::SIPConferenceInfo::Endpoint*>(a1[1], a2);
    uint64_t result = v3 + 88;
    a1[1] = v3 + 88;
  }
  a1[1] = result;
  return result;
}

void sub_24957855C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void ctb::SIPConferenceInfo::Endpoint::~Endpoint(void **this)
{
  if (*((unsigned char *)this + 24))
  {
    if (*((char *)this + 23) < 0) {
      operator delete(*this);
    }
  }
}

void ctb::SIPConferenceInfo::User::~User(void **this)
{
  uint64_t v1 = this;
  std::vector<ctb::SIPConferenceInfo::Endpoint>::__destroy_vector::operator()[abi:ne180100](&v1);
}

unsigned char *std::optional<ctb::SIPConferenceInfo::ReferredInfo>::optional[abi:ne180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[32] = 0;
  return result;
}

uint64_t sub_24957864C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2495786B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t ctb::bridging::makeOptional(unsigned int a1)
{
  return a1 | 0x100000000;
}

uint64_t sub_249578754(uint64_t a1)
{
  uint64_t v2 = sub_2495B6C80();
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (MEMORY[0x263F2AE40] && v4 == *MEMORY[0x263F2AE40]) {
    return 1;
  }
  if (MEMORY[0x263F2ADF0] && v4 == *MEMORY[0x263F2ADF0]) {
    return 2;
  }
  if (MEMORY[0x263F2AE78] && v4 == *MEMORY[0x263F2AE78]) {
    return 3;
  }
  if (MEMORY[0x263F2AE50] && v4 == *MEMORY[0x263F2AE50]) {
    return 4;
  }
  if (MEMORY[0x263F2AE38] && v4 == *MEMORY[0x263F2AE38]) {
    return 5;
  }
  if (MEMORY[0x263F2AE60] && v4 == *MEMORY[0x263F2AE60]) {
    return 6;
  }
  if (MEMORY[0x263F2AE20] && v4 == *MEMORY[0x263F2AE20]) {
    return 7;
  }
  if (MEMORY[0x263F2AE10] && v4 == *MEMORY[0x263F2AE10]) {
    return 8;
  }
  if (MEMORY[0x263F2AE00] && v4 == *MEMORY[0x263F2AE00]) {
    return 9;
  }
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return 0;
}

void *std::vector<ctb::SIPConferenceInfo::User>::__construct_one_at_end[abi:ne180100]<ctb::SIPConferenceInfo::User const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<ctb::SIPConferenceInfo::Endpoint>::__init_with_size[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint*,ctb::SIPConferenceInfo::Endpoint*>(v3, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_249578980(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<ctb::SIPConferenceInfo::User>::__push_back_slow_path<ctb::SIPConferenceInfo::User const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<ctb::SIPConferenceInfo::Endpoint>::__init_with_size[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint*,ctb::SIPConferenceInfo::Endpoint*>(v11, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<ctb::SIPConferenceInfo::User>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<ctb::SIPConferenceInfo::User>::~__split_buffer(v14);
  return v12;
}

void sub_249578AA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ctb::SIPConferenceInfo::User>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ctb::SIPConferenceInfo::User>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ctb::SIPConferenceInfo::User>,std::reverse_iterator<ctb::SIPConferenceInfo::User*>,std::reverse_iterator<ctb::SIPConferenceInfo::User*>,std::reverse_iterator<ctb::SIPConferenceInfo::User*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ctb::SIPConferenceInfo::User>,std::reverse_iterator<ctb::SIPConferenceInfo::User*>,std::reverse_iterator<ctb::SIPConferenceInfo::User*>,std::reverse_iterator<ctb::SIPConferenceInfo::User*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::SIPConferenceInfo::User>,std::reverse_iterator<ctb::SIPConferenceInfo::User*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ctb::SIPConferenceInfo::User>,std::reverse_iterator<ctb::SIPConferenceInfo::User*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<ctb::SIPConferenceInfo::User>,std::reverse_iterator<ctb::SIPConferenceInfo::User*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ctb::SIPConferenceInfo::User>,std::reverse_iterator<ctb::SIPConferenceInfo::User*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<ctb::SIPConferenceInfo::Endpoint>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<ctb::SIPConferenceInfo::User>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<ctb::SIPConferenceInfo::User>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<ctb::SIPConferenceInfo::Endpoint>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<ctb::SIPConferenceInfo::Endpoint>::__push_back_slow_path<ctb::SIPConferenceInfo::Endpoint const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::SIPConferenceInfo::Endpoint>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  long long v13 = v10;
  long long v14 = &v10[88 * v4];
  uint64_t v16 = &v10[88 * v9];
  std::construct_at[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint,ctb::SIPConferenceInfo::Endpoint const&,ctb::SIPConferenceInfo::Endpoint*>(v14, a2);
  uint64_t v15 = v14 + 88;
  std::vector<ctb::SIPConferenceInfo::Endpoint>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<ctb::SIPConferenceInfo::Endpoint>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_249578DE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ctb::SIPConferenceInfo::Endpoint>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_249578E48(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<ctb::SIPConferenceInfo::Endpoint>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  unint64_t v5 = (long long *)*result;
  uint64_t v4 = (long long *)result[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 88;
    uint64_t v4 = (long long *)((char *)v4 - 88);
    uint64_t result = (uint64_t *)std::construct_at[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint,ctb::SIPConferenceInfo::Endpoint,ctb::SIPConferenceInfo::Endpoint*>(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v7;
  uint64_t v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = v3[2];
  v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::construct_at[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint,ctb::SIPConferenceInfo::Endpoint,ctb::SIPConferenceInfo::Endpoint*>(uint64_t result, long long *a2)
{
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long v2 = *a2;
    *(void *)(result + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t result = v2;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(result + 24) = 1;
  }
  uint64_t v3 = *((void *)a2 + 4);
  *(unsigned char *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(result + 32) = v3;
  *(unsigned char *)(result + 72) = 0;
  if (*((unsigned char *)a2 + 72))
  {
    *(unsigned char *)(result + 64) = 0;
    if (*((unsigned char *)a2 + 64))
    {
      long long v4 = *(long long *)((char *)a2 + 40);
      *(void *)(result + 56) = *((void *)a2 + 7);
      *(_OWORD *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v4;
      *((void *)a2 + 6) = 0;
      *((void *)a2 + 7) = 0;
      *((void *)a2 + 5) = 0;
      *(unsigned char *)(result + 64) = 1;
    }
    *(unsigned char *)(result + 72) = 1;
  }
  *(void *)(result + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 10);
  return result;
}

uint64_t std::__split_buffer<ctb::SIPConferenceInfo::Endpoint>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    std::__destroy_at[abi:ne180100]<ctb::SIPConferenceInfo::Endpoint,0>(i - 88);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_249578FE0()
{
  uint64_t v0 = sub_2495B67D0();
  __swift_allocate_value_buffer(v0, qword_2696BFC08);
  __swift_project_value_buffer(v0, (uint64_t)qword_2696BFC08);
  return sub_2495B67C0();
}

void sub_249579064()
{
  qword_2696BFC20 = 0x746E65436D6D6F43;
  *(void *)algn_2696BFC28 = 0xEA00000000007265;
}

void sub_24957908C()
{
  if (qword_2696BF530 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_2495B67D0();
  __swift_project_value_buffer(v0, (uint64_t)qword_2696BFC08);
  swift_bridgeObjectRetain_n();
  uint64_t v1 = sub_2495B67B0();
  os_log_type_t v2 = sub_2495B87B0();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v7 = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCA0);
    uint64_t v5 = sub_2495B8680();
    sub_249582838(v5, v6, &v7);
    sub_2495B87F0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_249559000, v1, v2, "Received response from diagnostic Reporter snapshot for %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5A3CC0](v4, -1, -1);
    MEMORY[0x24C5A3CC0](v3, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_249579254(uint64_t a1, uint64_t a2)
{
  os_log_type_t v2 = *(void (**)(uint64_t))(a1 + 32);
  if (a2) {
    uint64_t v3 = sub_2495B8620();
  }
  else {
    uint64_t v3 = 0;
  }
  swift_retain();
  v2(v3);
  swift_release();

  return swift_bridgeObjectRelease();
}

AutoBugCaptureHelper __swiftcall AutoBugCaptureHelper.init()()
{
  return (AutoBugCaptureHelper)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

id AutoBugCaptureHelper.init()()
{
  v1.super_class = (Class)AutoBugCaptureHelper;
  return objc_msgSendSuper2(&v1, sel_init);
}

unint64_t type metadata accessor for AutoBugCaptureHelper()
{
  unint64_t result = qword_2696BFC90;
  if (!qword_2696BFC90)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2696BFC90);
  }
  return result;
}

void sub_2495794B4()
{
  if (qword_2696BF530 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_2495B67D0();
  __swift_project_value_buffer(v0, (uint64_t)qword_2696BFC08);
  objc_super v1 = sub_2495B67B0();
  os_log_type_t v2 = sub_2495B87B0();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_249559000, v1, v2, "Reporting error with ABC", v3, 2u);
    MEMORY[0x24C5A3CC0](v3, -1, -1);
  }

  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F7C080]), sel_init);
  uint64_t v5 = (void *)sub_2495B8660();
  unint64_t v6 = (void *)sub_2495B8660();
  uint64_t v7 = (void *)sub_2495B8660();
  uint64_t v8 = (void *)sub_2495B8660();
  if (qword_2696BF538 != -1) {
    swift_once();
  }
  uint64_t v9 = (void *)sub_2495B8660();
  id v10 = objc_msgSend(v4, sel_signatureWithDomain_type_subType_subtypeContext_detectedProcess_triggerThresholdValues_, v5, v6, v7, v8, v9, 0);

  if (v10)
  {
    uint64_t aBlock = 0;
    id v11 = v10;
    sub_2495B8610();
  }
  id v19 = v10;
  char v12 = sub_2495B67B0();
  os_log_type_t v13 = sub_2495B87C0();
  if (os_log_type_enabled(v12, v13))
  {
    long long v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t aBlock = v15;
    *(_DWORD *)long long v14 = 136315138;
    uint64_t v21 = (uint64_t)v10;
    id v16 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFC98);
    uint64_t v17 = sub_2495B8680();
    uint64_t v21 = sub_249582838(v17, v18, &aBlock);
    sub_2495B87F0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_249559000, v12, v13, "Couldn't parse signature: %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5A3CC0](v15, -1, -1);
    MEMORY[0x24C5A3CC0](v14, -1, -1);
  }
  else
  {
  }
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_249579C30()
{
  uint64_t v0 = sub_2495B67D0();
  __swift_allocate_value_buffer(v0, qword_2696BFCA8);
  __swift_project_value_buffer(v0, (uint64_t)qword_2696BFCA8);
  return sub_2495B67C0();
}

void sub_249579CA4()
{
  qword_2696BFCC0 = 0x6E6F6870656C6554;
  *(void *)algn_2696BFCC8 = 0xE900000000000079;
}

void sub_249579CCC()
{
  qword_2696BFCD0 = 5456722;
  *(void *)algn_2696BFCD8 = 0xE300000000000000;
}

uint64_t sub_249579CF8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint8_t **a4@<X8>)
{
  uint64_t v5 = v4;
  if (qword_2696BF540 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_2495B67D0();
  id v11 = __swift_project_value_buffer(v10, (uint64_t)qword_2696BFCA8);
  char v12 = sub_2495B67B0();
  os_log_type_t v13 = sub_2495B87B0();
  uint64_t v53 = v11;
  id v54 = a1;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v52 = a4;
    long long v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    id v56 = v15;
    *(_DWORD *)long long v14 = 136315138;
    uint64_t v55 = sub_249582838(0xD000000000000019, 0x80000002495BCBA0, (uint64_t *)&v56);
    uint64_t v5 = v4;
    sub_2495B87F0();
    _os_log_impl(&dword_249559000, v12, v13, "Attempting to decode %s in BlastDoor", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5A3CC0](v15, -1, -1);
    MEMORY[0x24C5A3CC0](v14, -1, -1);
  }

  sub_2495B73D0();
  sub_2495B67A0();
  swift_allocObject();
  sub_2495B6790();
  sub_24958331C(&qword_2696BFD68, MEMORY[0x270FB07E0]);
  id v16 = v5;
  sub_2495B6780();
  if (v5)
  {
    swift_release();
    id v56 = v5;
    uint64_t v17 = sub_2495B85F0();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(void *)(v18 + 64);
    MEMORY[0x270FA5388](v17);
    unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v21 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCE8);
    if (swift_dynamicCast())
    {
      uint64_t v49 = &v42;
      unint64_t v51 = a3;

      uint64_t v47 = &v42;
      MEMORY[0x270FA5388](v22);
      uint64_t v23 = (char *)&v42 - v20;
      uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))((char *)&v42 - v20, (char *)&v42 - v20, v17);
      uint64_t v52 = &v42;
      MEMORY[0x270FA5388](v24);
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
      v25((char *)&v42 - v20, (char *)&v42 - v20, v17);
      uint64_t v26 = sub_2495B67B0();
      os_log_type_t v27 = sub_2495B87B0();
      uint64_t v53 = v26;
      BOOL v28 = os_log_type_enabled(v26, v27);
      uint64_t v50 = a2;
      uint64_t v48 = v18;
      uint64_t v45 = (void (*)(uint64_t, char *, uint64_t))v25;
      uint64_t v46 = v18 + 16;
      if (v28)
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        int v43 = (void *)swift_slowAlloc();
        unsigned int v44 = (char *)&v42 - v20;
        *(_DWORD *)uint64_t v29 = 138412290;
        uint64_t v42 = v29 + 4;
        sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
        swift_allocError();
        v25(v30, (char *)&v42 - v20, v17);
        uint64_t v23 = v44;
        uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v55 = v31;
        sub_2495B87F0();
        uint64_t v32 = v43;
        *int v43 = v31;
        __n128 v33 = *(void (**)(char *, uint64_t))(v18 + 8);
        v33((char *)&v42 - v20, v17);
        uint64_t v34 = v53;
        _os_log_impl(&dword_249559000, v53, v27, "Detected a BlastDoor explosion: %@", v29, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCF8);
        swift_arrayDestroy();
        MEMORY[0x24C5A3CC0](v32, -1, -1);
        MEMORY[0x24C5A3CC0](v29, -1, -1);
      }
      else
      {
        __n128 v33 = *(void (**)(char *, uint64_t))(v18 + 8);
        v33((char *)&v42 - v20, v17);
      }
      id v35 = objc_msgSend(v54, sel_autoBugCaptureHelper);
      if (qword_2696BF548 != -1) {
        swift_once();
      }
      long long v36 = (void *)sub_2495B8660();
      if (qword_2696BF550 != -1) {
        swift_once();
      }
      long long v37 = (void *)sub_2495B8660();
      long long v38 = (void *)sub_2495B8660();
      sub_2495B85E0();
      uint64_t v39 = (void *)sub_2495B8660();
      swift_bridgeObjectRelease();
      objc_msgSend(v35, sel_reportWithDomain_type_subtype_subtypeContext_, v36, v37, v38, v39);

      sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
      swift_allocError();
      v45(v40, v23, v17);
      swift_willThrow();
      swift_unknownObjectRelease();
      v33(v23, v17);
      a2 = v50;
      a3 = v51;
    }
  }
  else
  {
    swift_release();
  }
  return sub_2495825EC(a2, a3);
}

uint64_t sub_24957A400@<X0>(void (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  if (qword_2696BF540 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_2495B67D0();
  id v11 = (uint8_t *)__swift_project_value_buffer(v10, (uint64_t)qword_2696BFCA8);
  char v12 = sub_2495B67B0();
  os_log_type_t v13 = sub_2495B87B0();
  v61 = v11;
  v62 = a1;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v60 = a4;
    long long v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    id v64 = v15;
    *(_DWORD *)long long v14 = 136315138;
    uint64_t v63 = sub_249582838(0xD000000000000011, 0x80000002495BCB80, (uint64_t *)&v64);
    uint64_t v5 = v4;
    sub_2495B87F0();
    _os_log_impl(&dword_249559000, v12, v13, "Attempting to decode %s in BlastDoor", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5A3CC0](v15, -1, -1);
    MEMORY[0x24C5A3CC0](v14, -1, -1);
  }

  sub_2495B6B70();
  sub_2495B67A0();
  swift_allocObject();
  sub_2495B6790();
  sub_24958331C(&qword_2696BFD60, MEMORY[0x270FB0540]);
  sub_2495B6780();
  if (v5)
  {
    swift_release();
    id v64 = v5;
    uint64_t v16 = sub_2495B85F0();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(void *)(v17 + 64);
    MEMORY[0x270FA5388](v16);
    unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v20 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCE8);
    uint64_t v60 = v16;
    if (swift_dynamicCast())
    {
      id v56 = &v50;
      unint64_t v58 = a3;

      id v54 = &v50;
      MEMORY[0x270FA5388](v21);
      uint64_t v22 = v60;
      uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))((char *)&v50 - v19, (char *)&v50 - v19, v60);
      MEMORY[0x270FA5388](v23);
      uint64_t v24 = v17;
      uint64_t v25 = (char *)&v50 - v19;
      uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
      uint64_t v59 = (char *)&v50 - v19;
      v26((char *)&v50 - v19, (char *)&v50 - v19, v22);
      os_log_type_t v27 = sub_2495B67B0();
      os_log_type_t v28 = sub_2495B87B0();
      BOOL v29 = os_log_type_enabled(v27, v28);
      uint64_t v57 = a2;
      uint64_t v55 = v24;
      uint64_t v53 = v24 + 16;
      if (v29)
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        unint64_t v51 = (void *)swift_slowAlloc();
        uint64_t v52 = &v50;
        v61 = v30;
        *(_DWORD *)uint64_t v30 = 138412290;
        uint64_t v50 = v30 + 4;
        sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
        uint64_t v31 = v60;
        swift_allocError();
        v26(v32, v25, v31);
        uint64_t v33 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v63 = v33;
        sub_2495B87F0();
        uint64_t v34 = v51;
        *unint64_t v51 = v33;
        id v35 = *(void (**)(char *, uint64_t))(v24 + 8);
        v35(v25, v31);
        os_log_type_t v36 = v28;
        long long v37 = v61;
        _os_log_impl(&dword_249559000, v27, v36, "Detected a BlastDoor explosion: %@", v61, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCF8);
        swift_arrayDestroy();
        MEMORY[0x24C5A3CC0](v34, -1, -1);
        MEMORY[0x24C5A3CC0](v37, -1, -1);

        long long v38 = v62;
        uint64_t v39 = v31;
      }
      else
      {
        id v35 = *(void (**)(char *, uint64_t))(v24 + 8);
        uint64_t v39 = v60;
        v35(v25, v60);

        long long v38 = v62;
      }
      id v40 = objc_msgSend(v38, sel_autoBugCaptureHelper);
      uint64_t v41 = v59;
      id v42 = v40;
      if (qword_2696BF548 != -1) {
        swift_once();
      }
      v62 = v35;
      int v43 = (void (*)(uint64_t, char *, uint64_t))v26;
      unsigned int v44 = (void *)sub_2495B8660();
      if (qword_2696BF550 != -1) {
        swift_once();
      }
      uint64_t v45 = (void *)sub_2495B8660();
      uint64_t v46 = (void *)sub_2495B8660();
      sub_2495B85E0();
      uint64_t v47 = (void *)sub_2495B8660();
      swift_bridgeObjectRelease();
      objc_msgSend(v42, sel_reportWithDomain_type_subtype_subtypeContext_, v44, v45, v46, v47);

      sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
      swift_allocError();
      v43(v48, v41, v39);
      swift_willThrow();
      swift_unknownObjectRelease();
      v62(v41, v39);
      a2 = v57;
      a3 = v58;
    }
  }
  else
  {
    swift_release();
  }
  return sub_2495825EC(a2, a3);
}

uint64_t sub_24957AB34@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint8_t **a4@<X8>)
{
  uint64_t v5 = v4;
  if (qword_2696BF540 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_2495B67D0();
  id v11 = __swift_project_value_buffer(v10, (uint64_t)qword_2696BFCA8);
  char v12 = sub_2495B67B0();
  os_log_type_t v13 = sub_2495B87B0();
  uint64_t v53 = v11;
  id v54 = a1;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v52 = a4;
    long long v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    id v56 = v15;
    *(_DWORD *)long long v14 = 136315138;
    uint64_t v55 = sub_249582838(0x7373654D4D495043, 0xEB00000000656761, (uint64_t *)&v56);
    uint64_t v5 = v4;
    sub_2495B87F0();
    _os_log_impl(&dword_249559000, v12, v13, "Attempting to decode %s in BlastDoor", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5A3CC0](v15, -1, -1);
    MEMORY[0x24C5A3CC0](v14, -1, -1);
  }

  sub_2495B69D0();
  sub_2495B67A0();
  swift_allocObject();
  sub_2495B6790();
  sub_24958331C(&qword_2696BFD58, MEMORY[0x270FB0470]);
  uint64_t v16 = v5;
  sub_2495B6780();
  if (v5)
  {
    swift_release();
    id v56 = v5;
    uint64_t v17 = sub_2495B85F0();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(void *)(v18 + 64);
    MEMORY[0x270FA5388](v17);
    unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v21 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCE8);
    if (swift_dynamicCast())
    {
      uint64_t v49 = &v42;
      unint64_t v51 = a3;

      uint64_t v47 = &v42;
      MEMORY[0x270FA5388](v22);
      uint64_t v23 = (char *)&v42 - v20;
      uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))((char *)&v42 - v20, (char *)&v42 - v20, v17);
      uint64_t v52 = &v42;
      MEMORY[0x270FA5388](v24);
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
      v25((char *)&v42 - v20, (char *)&v42 - v20, v17);
      uint64_t v26 = sub_2495B67B0();
      os_log_type_t v27 = sub_2495B87B0();
      uint64_t v53 = v26;
      BOOL v28 = os_log_type_enabled(v26, v27);
      uint64_t v50 = a2;
      uint64_t v48 = v18;
      uint64_t v45 = (void (*)(uint64_t, char *, uint64_t))v25;
      uint64_t v46 = v18 + 16;
      if (v28)
      {
        BOOL v29 = (uint8_t *)swift_slowAlloc();
        int v43 = (void *)swift_slowAlloc();
        unsigned int v44 = (char *)&v42 - v20;
        *(_DWORD *)BOOL v29 = 138412290;
        id v42 = v29 + 4;
        sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
        swift_allocError();
        v25(v30, (char *)&v42 - v20, v17);
        uint64_t v23 = v44;
        uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v55 = v31;
        sub_2495B87F0();
        uint64_t v32 = v43;
        *int v43 = v31;
        uint64_t v33 = *(void (**)(char *, uint64_t))(v18 + 8);
        v33((char *)&v42 - v20, v17);
        uint64_t v34 = v53;
        _os_log_impl(&dword_249559000, v53, v27, "Detected a BlastDoor explosion: %@", v29, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCF8);
        swift_arrayDestroy();
        MEMORY[0x24C5A3CC0](v32, -1, -1);
        MEMORY[0x24C5A3CC0](v29, -1, -1);
      }
      else
      {
        uint64_t v33 = *(void (**)(char *, uint64_t))(v18 + 8);
        v33((char *)&v42 - v20, v17);
      }
      id v35 = objc_msgSend(v54, sel_autoBugCaptureHelper);
      if (qword_2696BF548 != -1) {
        swift_once();
      }
      os_log_type_t v36 = (void *)sub_2495B8660();
      if (qword_2696BF550 != -1) {
        swift_once();
      }
      long long v37 = (void *)sub_2495B8660();
      long long v38 = (void *)sub_2495B8660();
      sub_2495B85E0();
      uint64_t v39 = (void *)sub_2495B8660();
      swift_bridgeObjectRelease();
      objc_msgSend(v35, sel_reportWithDomain_type_subtype_subtypeContext_, v36, v37, v38, v39);

      sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
      swift_allocError();
      v45(v40, v23, v17);
      swift_willThrow();
      swift_unknownObjectRelease();
      v33(v23, v17);
      a2 = v50;
      a3 = v51;
    }
  }
  else
  {
    swift_release();
  }
  return sub_2495825EC(a2, a3);
}

uint64_t sub_24957B23C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint8_t **a4@<X8>)
{
  uint64_t v5 = v4;
  if (qword_2696BF540 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_2495B67D0();
  id v11 = __swift_project_value_buffer(v10, (uint64_t)qword_2696BFCA8);
  char v12 = sub_2495B67B0();
  os_log_type_t v13 = sub_2495B87B0();
  uint64_t v53 = v11;
  id v54 = a1;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v52 = a4;
    long long v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    id v56 = v15;
    *(_DWORD *)long long v14 = 136315138;
    uint64_t v55 = sub_249582838(0xD000000000000013, 0x80000002495BCB60, (uint64_t *)&v56);
    uint64_t v5 = v4;
    sub_2495B87F0();
    _os_log_impl(&dword_249559000, v12, v13, "Attempting to decode %s in BlastDoor", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5A3CC0](v15, -1, -1);
    MEMORY[0x24C5A3CC0](v14, -1, -1);
  }

  sub_2495B6DF0();
  sub_2495B67A0();
  swift_allocObject();
  sub_2495B6790();
  sub_24958331C(&qword_2696BFD50, MEMORY[0x270FB0680]);
  uint64_t v16 = v5;
  sub_2495B6780();
  if (v5)
  {
    swift_release();
    id v56 = v5;
    uint64_t v17 = sub_2495B85F0();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(void *)(v18 + 64);
    MEMORY[0x270FA5388](v17);
    unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v21 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCE8);
    if (swift_dynamicCast())
    {
      uint64_t v49 = &v42;
      unint64_t v51 = a3;

      uint64_t v47 = &v42;
      MEMORY[0x270FA5388](v22);
      uint64_t v23 = (char *)&v42 - v20;
      uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))((char *)&v42 - v20, (char *)&v42 - v20, v17);
      uint64_t v52 = &v42;
      MEMORY[0x270FA5388](v24);
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
      v25((char *)&v42 - v20, (char *)&v42 - v20, v17);
      uint64_t v26 = sub_2495B67B0();
      os_log_type_t v27 = sub_2495B87B0();
      uint64_t v53 = v26;
      BOOL v28 = os_log_type_enabled(v26, v27);
      uint64_t v50 = a2;
      uint64_t v48 = v18;
      uint64_t v45 = (void (*)(uint64_t, char *, uint64_t))v25;
      uint64_t v46 = v18 + 16;
      if (v28)
      {
        BOOL v29 = (uint8_t *)swift_slowAlloc();
        int v43 = (void *)swift_slowAlloc();
        unsigned int v44 = (char *)&v42 - v20;
        *(_DWORD *)BOOL v29 = 138412290;
        id v42 = v29 + 4;
        sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
        swift_allocError();
        v25(v30, (char *)&v42 - v20, v17);
        uint64_t v23 = v44;
        uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v55 = v31;
        sub_2495B87F0();
        uint64_t v32 = v43;
        *int v43 = v31;
        uint64_t v33 = *(void (**)(char *, uint64_t))(v18 + 8);
        v33((char *)&v42 - v20, v17);
        uint64_t v34 = v53;
        _os_log_impl(&dword_249559000, v53, v27, "Detected a BlastDoor explosion: %@", v29, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCF8);
        swift_arrayDestroy();
        MEMORY[0x24C5A3CC0](v32, -1, -1);
        MEMORY[0x24C5A3CC0](v29, -1, -1);
      }
      else
      {
        uint64_t v33 = *(void (**)(char *, uint64_t))(v18 + 8);
        v33((char *)&v42 - v20, v17);
      }
      id v35 = objc_msgSend(v54, sel_autoBugCaptureHelper);
      if (qword_2696BF548 != -1) {
        swift_once();
      }
      os_log_type_t v36 = (void *)sub_2495B8660();
      if (qword_2696BF550 != -1) {
        swift_once();
      }
      long long v37 = (void *)sub_2495B8660();
      long long v38 = (void *)sub_2495B8660();
      sub_2495B85E0();
      uint64_t v39 = (void *)sub_2495B8660();
      swift_bridgeObjectRelease();
      objc_msgSend(v35, sel_reportWithDomain_type_subtype_subtypeContext_, v36, v37, v38, v39);

      sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
      swift_allocError();
      v45(v40, v23, v17);
      swift_willThrow();
      swift_unknownObjectRelease();
      v33(v23, v17);
      a2 = v50;
      a3 = v51;
    }
  }
  else
  {
    swift_release();
  }
  return sub_2495825EC(a2, a3);
}

uint64_t sub_24957B944@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint8_t **a4@<X8>)
{
  uint64_t v5 = v4;
  if (qword_2696BF540 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_2495B67D0();
  id v11 = __swift_project_value_buffer(v10, (uint64_t)qword_2696BFCA8);
  char v12 = sub_2495B67B0();
  os_log_type_t v13 = sub_2495B87B0();
  uint64_t v53 = v11;
  id v54 = a1;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v52 = a4;
    long long v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    id v56 = v15;
    *(_DWORD *)long long v14 = 136315138;
    uint64_t v55 = sub_249582838(0x6C65766E45534352, 0xEB0000000065706FLL, (uint64_t *)&v56);
    uint64_t v5 = v4;
    sub_2495B87F0();
    _os_log_impl(&dword_249559000, v12, v13, "Attempting to decode %s in BlastDoor", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5A3CC0](v15, -1, -1);
    MEMORY[0x24C5A3CC0](v14, -1, -1);
  }

  sub_2495B69F0();
  sub_2495B67A0();
  swift_allocObject();
  sub_2495B6790();
  sub_24958331C(&qword_2696BFD48, MEMORY[0x270FB0488]);
  uint64_t v16 = v5;
  sub_2495B6780();
  if (v5)
  {
    swift_release();
    id v56 = v5;
    uint64_t v17 = sub_2495B85F0();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(void *)(v18 + 64);
    MEMORY[0x270FA5388](v17);
    unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v21 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCE8);
    if (swift_dynamicCast())
    {
      uint64_t v49 = &v42;
      unint64_t v51 = a3;

      uint64_t v47 = &v42;
      MEMORY[0x270FA5388](v22);
      uint64_t v23 = (char *)&v42 - v20;
      uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))((char *)&v42 - v20, (char *)&v42 - v20, v17);
      uint64_t v52 = &v42;
      MEMORY[0x270FA5388](v24);
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
      v25((char *)&v42 - v20, (char *)&v42 - v20, v17);
      uint64_t v26 = sub_2495B67B0();
      os_log_type_t v27 = sub_2495B87B0();
      uint64_t v53 = v26;
      BOOL v28 = os_log_type_enabled(v26, v27);
      uint64_t v50 = a2;
      uint64_t v48 = v18;
      uint64_t v45 = (void (*)(uint64_t, char *, uint64_t))v25;
      uint64_t v46 = v18 + 16;
      if (v28)
      {
        BOOL v29 = (uint8_t *)swift_slowAlloc();
        int v43 = (void *)swift_slowAlloc();
        unsigned int v44 = (char *)&v42 - v20;
        *(_DWORD *)BOOL v29 = 138412290;
        id v42 = v29 + 4;
        sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
        swift_allocError();
        v25(v30, (char *)&v42 - v20, v17);
        uint64_t v23 = v44;
        uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v55 = v31;
        sub_2495B87F0();
        uint64_t v32 = v43;
        *int v43 = v31;
        uint64_t v33 = *(void (**)(char *, uint64_t))(v18 + 8);
        v33((char *)&v42 - v20, v17);
        uint64_t v34 = v53;
        _os_log_impl(&dword_249559000, v53, v27, "Detected a BlastDoor explosion: %@", v29, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCF8);
        swift_arrayDestroy();
        MEMORY[0x24C5A3CC0](v32, -1, -1);
        MEMORY[0x24C5A3CC0](v29, -1, -1);
      }
      else
      {
        uint64_t v33 = *(void (**)(char *, uint64_t))(v18 + 8);
        v33((char *)&v42 - v20, v17);
      }
      id v35 = objc_msgSend(v54, sel_autoBugCaptureHelper);
      if (qword_2696BF548 != -1) {
        swift_once();
      }
      os_log_type_t v36 = (void *)sub_2495B8660();
      if (qword_2696BF550 != -1) {
        swift_once();
      }
      long long v37 = (void *)sub_2495B8660();
      long long v38 = (void *)sub_2495B8660();
      sub_2495B85E0();
      uint64_t v39 = (void *)sub_2495B8660();
      swift_bridgeObjectRelease();
      objc_msgSend(v35, sel_reportWithDomain_type_subtype_subtypeContext_, v36, v37, v38, v39);

      sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
      swift_allocError();
      v45(v40, v23, v17);
      swift_willThrow();
      swift_unknownObjectRelease();
      v33(v23, v17);
      a2 = v50;
      a3 = v51;
    }
  }
  else
  {
    swift_release();
  }
  return sub_2495825EC(a2, a3);
}

uint64_t sub_24957C04C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint8_t **a4@<X8>)
{
  uint64_t v5 = v4;
  if (qword_2696BF540 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_2495B67D0();
  id v11 = __swift_project_value_buffer(v10, (uint64_t)qword_2696BFCA8);
  char v12 = sub_2495B67B0();
  os_log_type_t v13 = sub_2495B87B0();
  uint64_t v53 = v11;
  id v54 = a1;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v52 = a4;
    long long v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    id v56 = v15;
    *(_DWORD *)long long v14 = 136315138;
    uint64_t v55 = sub_249582838(0xD000000000000019, 0x80000002495BCB40, (uint64_t *)&v56);
    uint64_t v5 = v4;
    sub_2495B87F0();
    _os_log_impl(&dword_249559000, v12, v13, "Attempting to decode %s in BlastDoor", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5A3CC0](v15, -1, -1);
    MEMORY[0x24C5A3CC0](v14, -1, -1);
  }

  sub_2495B7380();
  sub_2495B67A0();
  swift_allocObject();
  sub_2495B6790();
  sub_24958331C(&qword_2696BFD40, MEMORY[0x270FB07C8]);
  uint64_t v16 = v5;
  sub_2495B6780();
  if (v5)
  {
    swift_release();
    id v56 = v5;
    uint64_t v17 = sub_2495B85F0();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(void *)(v18 + 64);
    MEMORY[0x270FA5388](v17);
    unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v21 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCE8);
    if (swift_dynamicCast())
    {
      uint64_t v49 = &v42;
      unint64_t v51 = a3;

      uint64_t v47 = &v42;
      MEMORY[0x270FA5388](v22);
      uint64_t v23 = (char *)&v42 - v20;
      uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))((char *)&v42 - v20, (char *)&v42 - v20, v17);
      uint64_t v52 = &v42;
      MEMORY[0x270FA5388](v24);
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
      v25((char *)&v42 - v20, (char *)&v42 - v20, v17);
      uint64_t v26 = sub_2495B67B0();
      os_log_type_t v27 = sub_2495B87B0();
      uint64_t v53 = v26;
      BOOL v28 = os_log_type_enabled(v26, v27);
      uint64_t v50 = a2;
      uint64_t v48 = v18;
      uint64_t v45 = (void (*)(uint64_t, char *, uint64_t))v25;
      uint64_t v46 = v18 + 16;
      if (v28)
      {
        BOOL v29 = (uint8_t *)swift_slowAlloc();
        int v43 = (void *)swift_slowAlloc();
        unsigned int v44 = (char *)&v42 - v20;
        *(_DWORD *)BOOL v29 = 138412290;
        id v42 = v29 + 4;
        sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
        swift_allocError();
        v25(v30, (char *)&v42 - v20, v17);
        uint64_t v23 = v44;
        uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v55 = v31;
        sub_2495B87F0();
        uint64_t v32 = v43;
        *int v43 = v31;
        uint64_t v33 = *(void (**)(char *, uint64_t))(v18 + 8);
        v33((char *)&v42 - v20, v17);
        uint64_t v34 = v53;
        _os_log_impl(&dword_249559000, v53, v27, "Detected a BlastDoor explosion: %@", v29, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCF8);
        swift_arrayDestroy();
        MEMORY[0x24C5A3CC0](v32, -1, -1);
        MEMORY[0x24C5A3CC0](v29, -1, -1);
      }
      else
      {
        uint64_t v33 = *(void (**)(char *, uint64_t))(v18 + 8);
        v33((char *)&v42 - v20, v17);
      }
      id v35 = objc_msgSend(v54, sel_autoBugCaptureHelper);
      if (qword_2696BF548 != -1) {
        swift_once();
      }
      os_log_type_t v36 = (void *)sub_2495B8660();
      if (qword_2696BF550 != -1) {
        swift_once();
      }
      long long v37 = (void *)sub_2495B8660();
      long long v38 = (void *)sub_2495B8660();
      sub_2495B85E0();
      uint64_t v39 = (void *)sub_2495B8660();
      swift_bridgeObjectRelease();
      objc_msgSend(v35, sel_reportWithDomain_type_subtype_subtypeContext_, v36, v37, v38, v39);

      sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
      swift_allocError();
      v45(v40, v23, v17);
      swift_willThrow();
      swift_unknownObjectRelease();
      v33(v23, v17);
      a2 = v50;
      a3 = v51;
    }
  }
  else
  {
    swift_release();
  }
  return sub_2495825EC(a2, a3);
}

uint64_t sub_24957C754@<X0>(void (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  if (qword_2696BF540 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_2495B67D0();
  id v11 = (uint8_t *)__swift_project_value_buffer(v10, (uint64_t)qword_2696BFCA8);
  char v12 = sub_2495B67B0();
  os_log_type_t v13 = sub_2495B87B0();
  v61 = v11;
  v62 = a1;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v60 = a4;
    long long v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    id v64 = v15;
    *(_DWORD *)long long v14 = 136315138;
    uint64_t v63 = sub_249582838(0xD000000000000011, 0x80000002495BCB20, (uint64_t *)&v64);
    uint64_t v5 = v4;
    sub_2495B87F0();
    _os_log_impl(&dword_249559000, v12, v13, "Attempting to decode %s in BlastDoor", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5A3CC0](v15, -1, -1);
    MEMORY[0x24C5A3CC0](v14, -1, -1);
  }

  sub_2495B6CC0();
  sub_2495B67A0();
  swift_allocObject();
  sub_2495B6790();
  sub_24958331C(&qword_2696BFD38, MEMORY[0x270FB05E0]);
  sub_2495B6780();
  if (v5)
  {
    swift_release();
    id v64 = v5;
    uint64_t v16 = sub_2495B85F0();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(void *)(v17 + 64);
    MEMORY[0x270FA5388](v16);
    unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v20 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCE8);
    uint64_t v60 = v16;
    if (swift_dynamicCast())
    {
      id v56 = &v50;
      unint64_t v58 = a3;

      id v54 = &v50;
      MEMORY[0x270FA5388](v21);
      uint64_t v22 = v60;
      uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))((char *)&v50 - v19, (char *)&v50 - v19, v60);
      MEMORY[0x270FA5388](v23);
      uint64_t v24 = v17;
      uint64_t v25 = (char *)&v50 - v19;
      uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
      uint64_t v59 = (char *)&v50 - v19;
      v26((char *)&v50 - v19, (char *)&v50 - v19, v22);
      os_log_type_t v27 = sub_2495B67B0();
      os_log_type_t v28 = sub_2495B87B0();
      BOOL v29 = os_log_type_enabled(v27, v28);
      uint64_t v57 = a2;
      uint64_t v55 = v24;
      uint64_t v53 = v24 + 16;
      if (v29)
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        unint64_t v51 = (void *)swift_slowAlloc();
        uint64_t v52 = &v50;
        v61 = v30;
        *(_DWORD *)uint64_t v30 = 138412290;
        uint64_t v50 = v30 + 4;
        sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
        uint64_t v31 = v60;
        swift_allocError();
        v26(v32, v25, v31);
        uint64_t v33 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v63 = v33;
        sub_2495B87F0();
        uint64_t v34 = v51;
        *unint64_t v51 = v33;
        id v35 = *(void (**)(char *, uint64_t))(v24 + 8);
        v35(v25, v31);
        os_log_type_t v36 = v28;
        long long v37 = v61;
        _os_log_impl(&dword_249559000, v27, v36, "Detected a BlastDoor explosion: %@", v61, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCF8);
        swift_arrayDestroy();
        MEMORY[0x24C5A3CC0](v34, -1, -1);
        MEMORY[0x24C5A3CC0](v37, -1, -1);

        long long v38 = v62;
        uint64_t v39 = v31;
      }
      else
      {
        id v35 = *(void (**)(char *, uint64_t))(v24 + 8);
        uint64_t v39 = v60;
        v35(v25, v60);

        long long v38 = v62;
      }
      id v40 = objc_msgSend(v38, sel_autoBugCaptureHelper);
      uint64_t v41 = v59;
      id v42 = v40;
      if (qword_2696BF548 != -1) {
        swift_once();
      }
      v62 = v35;
      int v43 = (void (*)(uint64_t, char *, uint64_t))v26;
      unsigned int v44 = (void *)sub_2495B8660();
      if (qword_2696BF550 != -1) {
        swift_once();
      }
      uint64_t v45 = (void *)sub_2495B8660();
      uint64_t v46 = (void *)sub_2495B8660();
      sub_2495B85E0();
      uint64_t v47 = (void *)sub_2495B8660();
      swift_bridgeObjectRelease();
      objc_msgSend(v42, sel_reportWithDomain_type_subtype_subtypeContext_, v44, v45, v46, v47);

      sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
      swift_allocError();
      v43(v48, v41, v39);
      swift_willThrow();
      swift_unknownObjectRelease();
      v62(v41, v39);
      a2 = v57;
      a3 = v58;
    }
  }
  else
  {
    swift_release();
  }
  return sub_2495825EC(a2, a3);
}

uint64_t sub_24957CE88@<X0>(void (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  if (qword_2696BF540 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_2495B67D0();
  id v11 = (uint8_t *)__swift_project_value_buffer(v10, (uint64_t)qword_2696BFCA8);
  char v12 = sub_2495B67B0();
  os_log_type_t v13 = sub_2495B87B0();
  v61 = v11;
  v62 = a1;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v60 = a4;
    long long v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    id v64 = v15;
    *(_DWORD *)long long v14 = 136315138;
    uint64_t v63 = sub_249582838(0xD000000000000010, 0x80000002495BCB00, (uint64_t *)&v64);
    uint64_t v5 = v4;
    sub_2495B87F0();
    _os_log_impl(&dword_249559000, v12, v13, "Attempting to decode %s in BlastDoor", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5A3CC0](v15, -1, -1);
    MEMORY[0x24C5A3CC0](v14, -1, -1);
  }

  sub_2495B6B40();
  sub_2495B67A0();
  swift_allocObject();
  sub_2495B6790();
  sub_24958331C(&qword_2696BFD30, MEMORY[0x270FB0528]);
  sub_2495B6780();
  if (v5)
  {
    swift_release();
    id v64 = v5;
    uint64_t v16 = sub_2495B85F0();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(void *)(v17 + 64);
    MEMORY[0x270FA5388](v16);
    unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v20 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCE8);
    uint64_t v60 = v16;
    if (swift_dynamicCast())
    {
      id v56 = &v50;
      unint64_t v58 = a3;

      id v54 = &v50;
      MEMORY[0x270FA5388](v21);
      uint64_t v22 = v60;
      uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))((char *)&v50 - v19, (char *)&v50 - v19, v60);
      MEMORY[0x270FA5388](v23);
      uint64_t v24 = v17;
      uint64_t v25 = (char *)&v50 - v19;
      uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
      uint64_t v59 = (char *)&v50 - v19;
      v26((char *)&v50 - v19, (char *)&v50 - v19, v22);
      os_log_type_t v27 = sub_2495B67B0();
      os_log_type_t v28 = sub_2495B87B0();
      BOOL v29 = os_log_type_enabled(v27, v28);
      uint64_t v57 = a2;
      uint64_t v55 = v24;
      uint64_t v53 = v24 + 16;
      if (v29)
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        unint64_t v51 = (void *)swift_slowAlloc();
        uint64_t v52 = &v50;
        v61 = v30;
        *(_DWORD *)uint64_t v30 = 138412290;
        uint64_t v50 = v30 + 4;
        sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
        uint64_t v31 = v60;
        swift_allocError();
        v26(v32, v25, v31);
        uint64_t v33 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v63 = v33;
        sub_2495B87F0();
        uint64_t v34 = v51;
        *unint64_t v51 = v33;
        id v35 = *(void (**)(char *, uint64_t))(v24 + 8);
        v35(v25, v31);
        os_log_type_t v36 = v28;
        long long v37 = v61;
        _os_log_impl(&dword_249559000, v27, v36, "Detected a BlastDoor explosion: %@", v61, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCF8);
        swift_arrayDestroy();
        MEMORY[0x24C5A3CC0](v34, -1, -1);
        MEMORY[0x24C5A3CC0](v37, -1, -1);

        long long v38 = v62;
        uint64_t v39 = v31;
      }
      else
      {
        id v35 = *(void (**)(char *, uint64_t))(v24 + 8);
        uint64_t v39 = v60;
        v35(v25, v60);

        long long v38 = v62;
      }
      id v40 = objc_msgSend(v38, sel_autoBugCaptureHelper);
      uint64_t v41 = v59;
      id v42 = v40;
      if (qword_2696BF548 != -1) {
        swift_once();
      }
      v62 = v35;
      int v43 = (void (*)(uint64_t, char *, uint64_t))v26;
      unsigned int v44 = (void *)sub_2495B8660();
      if (qword_2696BF550 != -1) {
        swift_once();
      }
      uint64_t v45 = (void *)sub_2495B8660();
      uint64_t v46 = (void *)sub_2495B8660();
      sub_2495B85E0();
      uint64_t v47 = (void *)sub_2495B8660();
      swift_bridgeObjectRelease();
      objc_msgSend(v42, sel_reportWithDomain_type_subtype_subtypeContext_, v44, v45, v46, v47);

      sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
      swift_allocError();
      v43(v48, v41, v39);
      swift_willThrow();
      swift_unknownObjectRelease();
      v62(v41, v39);
      a2 = v57;
      a3 = v58;
    }
  }
  else
  {
    swift_release();
  }
  return sub_2495825EC(a2, a3);
}

uint64_t sub_24957D5BC@<X0>(void (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  if (qword_2696BF540 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_2495B67D0();
  id v11 = (uint8_t *)__swift_project_value_buffer(v10, (uint64_t)qword_2696BFCA8);
  char v12 = sub_2495B67B0();
  os_log_type_t v13 = sub_2495B87B0();
  v61 = v11;
  v62 = a1;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v60 = a4;
    long long v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    id v64 = v15;
    *(_DWORD *)long long v14 = 136315138;
    uint64_t v63 = sub_249582838(0xD000000000000012, 0x80000002495BCAE0, (uint64_t *)&v64);
    uint64_t v5 = v4;
    sub_2495B87F0();
    _os_log_impl(&dword_249559000, v12, v13, "Attempting to decode %s in BlastDoor", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5A3CC0](v15, -1, -1);
    MEMORY[0x24C5A3CC0](v14, -1, -1);
  }

  sub_2495B6D10();
  sub_2495B67A0();
  swift_allocObject();
  sub_2495B6790();
  sub_24958331C(&qword_2696BFD28, MEMORY[0x270FB0610]);
  sub_2495B6780();
  if (v5)
  {
    swift_release();
    id v64 = v5;
    uint64_t v16 = sub_2495B85F0();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(void *)(v17 + 64);
    MEMORY[0x270FA5388](v16);
    unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v20 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCE8);
    uint64_t v60 = v16;
    if (swift_dynamicCast())
    {
      id v56 = &v50;
      unint64_t v58 = a3;

      id v54 = &v50;
      MEMORY[0x270FA5388](v21);
      uint64_t v22 = v60;
      uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))((char *)&v50 - v19, (char *)&v50 - v19, v60);
      MEMORY[0x270FA5388](v23);
      uint64_t v24 = v17;
      uint64_t v25 = (char *)&v50 - v19;
      uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
      uint64_t v59 = (char *)&v50 - v19;
      v26((char *)&v50 - v19, (char *)&v50 - v19, v22);
      os_log_type_t v27 = sub_2495B67B0();
      os_log_type_t v28 = sub_2495B87B0();
      BOOL v29 = os_log_type_enabled(v27, v28);
      uint64_t v57 = a2;
      uint64_t v55 = v24;
      uint64_t v53 = v24 + 16;
      if (v29)
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        unint64_t v51 = (void *)swift_slowAlloc();
        uint64_t v52 = &v50;
        v61 = v30;
        *(_DWORD *)uint64_t v30 = 138412290;
        uint64_t v50 = v30 + 4;
        sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
        uint64_t v31 = v60;
        swift_allocError();
        v26(v32, v25, v31);
        uint64_t v33 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v63 = v33;
        sub_2495B87F0();
        uint64_t v34 = v51;
        *unint64_t v51 = v33;
        id v35 = *(void (**)(char *, uint64_t))(v24 + 8);
        v35(v25, v31);
        os_log_type_t v36 = v28;
        long long v37 = v61;
        _os_log_impl(&dword_249559000, v27, v36, "Detected a BlastDoor explosion: %@", v61, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCF8);
        swift_arrayDestroy();
        MEMORY[0x24C5A3CC0](v34, -1, -1);
        MEMORY[0x24C5A3CC0](v37, -1, -1);

        long long v38 = v62;
        uint64_t v39 = v31;
      }
      else
      {
        id v35 = *(void (**)(char *, uint64_t))(v24 + 8);
        uint64_t v39 = v60;
        v35(v25, v60);

        long long v38 = v62;
      }
      id v40 = objc_msgSend(v38, sel_autoBugCaptureHelper);
      uint64_t v41 = v59;
      id v42 = v40;
      if (qword_2696BF548 != -1) {
        swift_once();
      }
      v62 = v35;
      int v43 = (void (*)(uint64_t, char *, uint64_t))v26;
      unsigned int v44 = (void *)sub_2495B8660();
      if (qword_2696BF550 != -1) {
        swift_once();
      }
      uint64_t v45 = (void *)sub_2495B8660();
      uint64_t v46 = (void *)sub_2495B8660();
      sub_2495B85E0();
      uint64_t v47 = (void *)sub_2495B8660();
      swift_bridgeObjectRelease();
      objc_msgSend(v42, sel_reportWithDomain_type_subtype_subtypeContext_, v44, v45, v46, v47);

      sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
      swift_allocError();
      v43(v48, v41, v39);
      swift_willThrow();
      swift_unknownObjectRelease();
      v62(v41, v39);
      a2 = v57;
      a3 = v58;
    }
  }
  else
  {
    swift_release();
  }
  return sub_2495825EC(a2, a3);
}

uint64_t sub_24957DCF0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint8_t **a4@<X8>)
{
  uint64_t v5 = v4;
  if (qword_2696BF540 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_2495B67D0();
  id v11 = __swift_project_value_buffer(v10, (uint64_t)qword_2696BFCA8);
  char v12 = sub_2495B67B0();
  os_log_type_t v13 = sub_2495B87B0();
  uint64_t v53 = v11;
  id v54 = a1;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v52 = a4;
    long long v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    id v56 = v15;
    *(_DWORD *)long long v14 = 136315138;
    uint64_t v55 = sub_249582838(0xD000000000000017, 0x80000002495BCAC0, (uint64_t *)&v56);
    uint64_t v5 = v4;
    sub_2495B87F0();
    _os_log_impl(&dword_249559000, v12, v13, "Attempting to decode %s in BlastDoor", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5A3CC0](v15, -1, -1);
    MEMORY[0x24C5A3CC0](v14, -1, -1);
  }

  sub_2495B71A0();
  sub_2495B67A0();
  swift_allocObject();
  sub_2495B6790();
  sub_24958331C(&qword_2696BFD20, MEMORY[0x270FB0750]);
  uint64_t v16 = v5;
  sub_2495B6780();
  if (v5)
  {
    swift_release();
    id v56 = v5;
    uint64_t v17 = sub_2495B85F0();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(void *)(v18 + 64);
    MEMORY[0x270FA5388](v17);
    unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v21 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCE8);
    if (swift_dynamicCast())
    {
      uint64_t v49 = &v42;
      unint64_t v51 = a3;

      uint64_t v47 = &v42;
      MEMORY[0x270FA5388](v22);
      uint64_t v23 = (char *)&v42 - v20;
      uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))((char *)&v42 - v20, (char *)&v42 - v20, v17);
      uint64_t v52 = &v42;
      MEMORY[0x270FA5388](v24);
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
      v25((char *)&v42 - v20, (char *)&v42 - v20, v17);
      uint64_t v26 = sub_2495B67B0();
      os_log_type_t v27 = sub_2495B87B0();
      uint64_t v53 = v26;
      BOOL v28 = os_log_type_enabled(v26, v27);
      uint64_t v50 = a2;
      uint64_t v48 = v18;
      uint64_t v45 = (void (*)(uint64_t, char *, uint64_t))v25;
      uint64_t v46 = v18 + 16;
      if (v28)
      {
        BOOL v29 = (uint8_t *)swift_slowAlloc();
        int v43 = (void *)swift_slowAlloc();
        unsigned int v44 = (char *)&v42 - v20;
        *(_DWORD *)BOOL v29 = 138412290;
        id v42 = v29 + 4;
        sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
        swift_allocError();
        v25(v30, (char *)&v42 - v20, v17);
        uint64_t v23 = v44;
        uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v55 = v31;
        sub_2495B87F0();
        uint64_t v32 = v43;
        *int v43 = v31;
        uint64_t v33 = *(void (**)(char *, uint64_t))(v18 + 8);
        v33((char *)&v42 - v20, v17);
        uint64_t v34 = v53;
        _os_log_impl(&dword_249559000, v53, v27, "Detected a BlastDoor explosion: %@", v29, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCF8);
        swift_arrayDestroy();
        MEMORY[0x24C5A3CC0](v32, -1, -1);
        MEMORY[0x24C5A3CC0](v29, -1, -1);
      }
      else
      {
        uint64_t v33 = *(void (**)(char *, uint64_t))(v18 + 8);
        v33((char *)&v42 - v20, v17);
      }
      id v35 = objc_msgSend(v54, sel_autoBugCaptureHelper);
      if (qword_2696BF548 != -1) {
        swift_once();
      }
      os_log_type_t v36 = (void *)sub_2495B8660();
      if (qword_2696BF550 != -1) {
        swift_once();
      }
      long long v37 = (void *)sub_2495B8660();
      long long v38 = (void *)sub_2495B8660();
      sub_2495B85E0();
      uint64_t v39 = (void *)sub_2495B8660();
      swift_bridgeObjectRelease();
      objc_msgSend(v35, sel_reportWithDomain_type_subtype_subtypeContext_, v36, v37, v38, v39);

      sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
      swift_allocError();
      v45(v40, v23, v17);
      swift_willThrow();
      swift_unknownObjectRelease();
      v33(v23, v17);
      a2 = v50;
      a3 = v51;
    }
  }
  else
  {
    swift_release();
  }
  return sub_2495825EC(a2, a3);
}

void sub_24957E3F8(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  id v4 = v3;
  uint64_t v5 = v2;
  if (qword_2696BF540 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_2495B67D0();
  uint64_t v9 = __swift_project_value_buffer(v8, (uint64_t)qword_2696BFCA8);
  uint64_t v10 = sub_2495B67B0();
  os_log_type_t v11 = sub_2495B87B0();
  uint64_t v48 = v5;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v47 = (void *)v9;
    char v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = a2;
    os_log_type_t v13 = (void *)swift_slowAlloc();
    id v50 = v13;
    *(_DWORD *)char v12 = 136315138;
    uint64_t v49 = sub_249582838(0x7373654D746F6F52, 0xEB00000000656761, (uint64_t *)&v50);
    sub_2495B87F0();
    _os_log_impl(&dword_249559000, v10, v11, "Attempting to decode %s in BlastDoor", v12, 0xCu);
    swift_arrayDestroy();
    long long v14 = v13;
    id v4 = v3;
    MEMORY[0x24C5A3CC0](v14, -1, -1);
    MEMORY[0x24C5A3CC0](v12, -1, -1);
  }

  uint64_t v15 = v4;
  a1();
  if (v4)
  {
    id v50 = v4;
    uint64_t v16 = sub_2495B85F0();
    uint64_t v47 = &v40;
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(void *)(v17 + 64);
    MEMORY[0x270FA5388](v16);
    unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v20 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCE8);
    if (swift_dynamicCast())
    {

      unsigned int v44 = &v40;
      MEMORY[0x270FA5388](v21);
      uint64_t v22 = (char *)&v40 - v19;
      uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))((char *)&v40 - v19, (char *)&v40 - v19, v16);
      uint64_t v45 = &v40;
      MEMORY[0x270FA5388](v23);
      uint64_t v24 = (char *)&v40 - v19;
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
      v25((char *)&v40 - v19, (char *)&v40 - v19, v16);
      uint64_t v26 = sub_2495B67B0();
      os_log_type_t v27 = sub_2495B87B0();
      BOOL v28 = os_log_type_enabled(v26, v27);
      uint64_t v46 = v17;
      uint64_t v43 = v17 + 16;
      if (v28)
      {
        id v42 = (char *)&v40 - v19;
        BOOL v29 = (uint8_t *)swift_slowAlloc();
        uint64_t v41 = (void *)swift_slowAlloc();
        *(_DWORD *)BOOL v29 = 138412290;
        uint64_t v40 = v29 + 4;
        sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
        swift_allocError();
        v25(v30, v24, v16);
        uint64_t v22 = v42;
        uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v49 = v31;
        sub_2495B87F0();
        uint64_t v32 = v41;
        *uint64_t v41 = v31;
        uint64_t v33 = *(void (**)(char *, uint64_t))(v46 + 8);
        v33(v24, v16);
        _os_log_impl(&dword_249559000, v26, v27, "Detected a BlastDoor explosion: %@", v29, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCF8);
        swift_arrayDestroy();
        MEMORY[0x24C5A3CC0](v32, -1, -1);
        MEMORY[0x24C5A3CC0](v29, -1, -1);
      }
      else
      {
        uint64_t v33 = *(void (**)(char *, uint64_t))(v17 + 8);
        v33(v24, v16);
      }

      id v34 = objc_msgSend(v48, sel_autoBugCaptureHelper);
      if (qword_2696BF548 != -1) {
        swift_once();
      }
      uint64_t v48 = v33;
      id v35 = (void *)sub_2495B8660();
      if (qword_2696BF550 != -1) {
        swift_once();
      }
      os_log_type_t v36 = (void *)sub_2495B8660();
      long long v37 = (void *)sub_2495B8660();
      sub_2495B85E0();
      long long v38 = (void *)sub_2495B8660();
      swift_bridgeObjectRelease();
      objc_msgSend(v34, sel_reportWithDomain_type_subtype_subtypeContext_, v35, v36, v37, v38);

      sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
      swift_allocError();
      v25(v39, v22, v16);
      swift_willThrow();
      swift_unknownObjectRelease();
      v48(v22, v16);
    }
  }
}

uint64_t sub_24957EA8C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint8_t **a4@<X8>)
{
  uint64_t v5 = v4;
  if (qword_2696BF540 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_2495B67D0();
  os_log_type_t v11 = __swift_project_value_buffer(v10, (uint64_t)qword_2696BFCA8);
  char v12 = sub_2495B67B0();
  os_log_type_t v13 = sub_2495B87B0();
  uint64_t v53 = v11;
  id v54 = a1;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v52 = a4;
    long long v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    id v56 = v15;
    *(_DWORD *)long long v14 = 136315138;
    uint64_t v55 = sub_249582838(1868983881, 0xE400000000000000, (uint64_t *)&v56);
    uint64_t v5 = v4;
    sub_2495B87F0();
    _os_log_impl(&dword_249559000, v12, v13, "Attempting to decode %s in BlastDoor", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5A3CC0](v15, -1, -1);
    MEMORY[0x24C5A3CC0](v14, -1, -1);
  }

  sub_2495B7FF0();
  sub_2495B67A0();
  swift_allocObject();
  sub_2495B6790();
  sub_24958331C(&qword_2696BFD10, MEMORY[0x270FB0AA0]);
  uint64_t v16 = v5;
  sub_2495B6780();
  if (v5)
  {
    swift_release();
    id v56 = v5;
    uint64_t v17 = sub_2495B85F0();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(void *)(v18 + 64);
    MEMORY[0x270FA5388](v17);
    unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v21 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCE8);
    if (swift_dynamicCast())
    {
      uint64_t v49 = &v42;
      unint64_t v51 = a3;

      uint64_t v47 = &v42;
      MEMORY[0x270FA5388](v22);
      uint64_t v23 = (char *)&v42 - v20;
      uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))((char *)&v42 - v20, (char *)&v42 - v20, v17);
      uint64_t v52 = &v42;
      MEMORY[0x270FA5388](v24);
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
      v25((char *)&v42 - v20, (char *)&v42 - v20, v17);
      uint64_t v26 = sub_2495B67B0();
      os_log_type_t v27 = sub_2495B87B0();
      uint64_t v53 = v26;
      BOOL v28 = os_log_type_enabled(v26, v27);
      uint64_t v50 = a2;
      uint64_t v48 = v18;
      uint64_t v45 = (void (*)(uint64_t, char *, uint64_t))v25;
      uint64_t v46 = v18 + 16;
      if (v28)
      {
        BOOL v29 = (uint8_t *)swift_slowAlloc();
        uint64_t v43 = (void *)swift_slowAlloc();
        unsigned int v44 = (char *)&v42 - v20;
        *(_DWORD *)BOOL v29 = 138412290;
        id v42 = v29 + 4;
        sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
        swift_allocError();
        v25(v30, (char *)&v42 - v20, v17);
        uint64_t v23 = v44;
        uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v55 = v31;
        sub_2495B87F0();
        uint64_t v32 = v43;
        *uint64_t v43 = v31;
        uint64_t v33 = *(void (**)(char *, uint64_t))(v18 + 8);
        v33((char *)&v42 - v20, v17);
        id v34 = v53;
        _os_log_impl(&dword_249559000, v53, v27, "Detected a BlastDoor explosion: %@", v29, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCF8);
        swift_arrayDestroy();
        MEMORY[0x24C5A3CC0](v32, -1, -1);
        MEMORY[0x24C5A3CC0](v29, -1, -1);
      }
      else
      {
        uint64_t v33 = *(void (**)(char *, uint64_t))(v18 + 8);
        v33((char *)&v42 - v20, v17);
      }
      id v35 = objc_msgSend(v54, sel_autoBugCaptureHelper);
      if (qword_2696BF548 != -1) {
        swift_once();
      }
      os_log_type_t v36 = (void *)sub_2495B8660();
      if (qword_2696BF550 != -1) {
        swift_once();
      }
      long long v37 = (void *)sub_2495B8660();
      long long v38 = (void *)sub_2495B8660();
      sub_2495B85E0();
      uint64_t v39 = (void *)sub_2495B8660();
      swift_bridgeObjectRelease();
      objc_msgSend(v35, sel_reportWithDomain_type_subtype_subtypeContext_, v36, v37, v38, v39);

      sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
      swift_allocError();
      v45(v40, v23, v17);
      swift_willThrow();
      swift_unknownObjectRelease();
      v33(v23, v17);
      a2 = v50;
      a3 = v51;
    }
  }
  else
  {
    swift_release();
  }
  return sub_2495825EC(a2, a3);
}

uint64_t sub_24957F184@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint8_t **a4@<X8>)
{
  uint64_t v5 = v4;
  if (qword_2696BF540 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_2495B67D0();
  os_log_type_t v11 = __swift_project_value_buffer(v10, (uint64_t)qword_2696BFCA8);
  char v12 = sub_2495B67B0();
  os_log_type_t v13 = sub_2495B87B0();
  uint64_t v53 = v11;
  id v54 = a1;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v52 = a4;
    long long v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    id v56 = v15;
    *(_DWORD *)long long v14 = 136315138;
    uint64_t v55 = sub_249582838(0xD00000000000001CLL, 0x80000002495BCAA0, (uint64_t *)&v56);
    uint64_t v5 = v4;
    sub_2495B87F0();
    _os_log_impl(&dword_249559000, v12, v13, "Attempting to decode %s in BlastDoor", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5A3CC0](v15, -1, -1);
    MEMORY[0x24C5A3CC0](v14, -1, -1);
  }

  sub_2495B7630();
  sub_2495B67A0();
  swift_allocObject();
  sub_2495B6790();
  sub_24958331C(&qword_2696BFD08, MEMORY[0x270FB0878]);
  uint64_t v16 = v5;
  sub_2495B6780();
  if (v5)
  {
    swift_release();
    id v56 = v5;
    uint64_t v17 = sub_2495B85F0();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(void *)(v18 + 64);
    MEMORY[0x270FA5388](v17);
    unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v21 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCE8);
    if (swift_dynamicCast())
    {
      uint64_t v49 = &v42;
      unint64_t v51 = a3;

      uint64_t v47 = &v42;
      MEMORY[0x270FA5388](v22);
      uint64_t v23 = (char *)&v42 - v20;
      uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))((char *)&v42 - v20, (char *)&v42 - v20, v17);
      uint64_t v52 = &v42;
      MEMORY[0x270FA5388](v24);
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
      v25((char *)&v42 - v20, (char *)&v42 - v20, v17);
      uint64_t v26 = sub_2495B67B0();
      os_log_type_t v27 = sub_2495B87B0();
      uint64_t v53 = v26;
      BOOL v28 = os_log_type_enabled(v26, v27);
      uint64_t v50 = a2;
      uint64_t v48 = v18;
      uint64_t v45 = (void (*)(uint64_t, char *, uint64_t))v25;
      uint64_t v46 = v18 + 16;
      if (v28)
      {
        BOOL v29 = (uint8_t *)swift_slowAlloc();
        uint64_t v43 = (void *)swift_slowAlloc();
        unsigned int v44 = (char *)&v42 - v20;
        *(_DWORD *)BOOL v29 = 138412290;
        id v42 = v29 + 4;
        sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
        swift_allocError();
        v25(v30, (char *)&v42 - v20, v17);
        uint64_t v23 = v44;
        uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v55 = v31;
        sub_2495B87F0();
        uint64_t v32 = v43;
        *uint64_t v43 = v31;
        uint64_t v33 = *(void (**)(char *, uint64_t))(v18 + 8);
        v33((char *)&v42 - v20, v17);
        id v34 = v53;
        _os_log_impl(&dword_249559000, v53, v27, "Detected a BlastDoor explosion: %@", v29, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCF8);
        swift_arrayDestroy();
        MEMORY[0x24C5A3CC0](v32, -1, -1);
        MEMORY[0x24C5A3CC0](v29, -1, -1);
      }
      else
      {
        uint64_t v33 = *(void (**)(char *, uint64_t))(v18 + 8);
        v33((char *)&v42 - v20, v17);
      }
      id v35 = objc_msgSend(v54, sel_autoBugCaptureHelper);
      if (qword_2696BF548 != -1) {
        swift_once();
      }
      os_log_type_t v36 = (void *)sub_2495B8660();
      if (qword_2696BF550 != -1) {
        swift_once();
      }
      long long v37 = (void *)sub_2495B8660();
      long long v38 = (void *)sub_2495B8660();
      sub_2495B85E0();
      uint64_t v39 = (void *)sub_2495B8660();
      swift_bridgeObjectRelease();
      objc_msgSend(v35, sel_reportWithDomain_type_subtype_subtypeContext_, v36, v37, v38, v39);

      sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
      swift_allocError();
      v45(v40, v23, v17);
      swift_willThrow();
      swift_unknownObjectRelease();
      v33(v23, v17);
      a2 = v50;
      a3 = v51;
    }
  }
  else
  {
    swift_release();
  }
  return sub_2495825EC(a2, a3);
}

uint64_t sub_24957F88C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint8_t **a4@<X8>)
{
  uint64_t v5 = v4;
  if (qword_2696BF540 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_2495B67D0();
  os_log_type_t v11 = __swift_project_value_buffer(v10, (uint64_t)qword_2696BFCA8);
  char v12 = sub_2495B67B0();
  os_log_type_t v13 = sub_2495B87B0();
  uint64_t v53 = v11;
  id v54 = a1;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v52 = a4;
    long long v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    id v56 = v15;
    *(_DWORD *)long long v14 = 136315138;
    uint64_t v55 = sub_249582838(0x656B6F7665524D49, 0xE800000000000000, (uint64_t *)&v56);
    uint64_t v5 = v4;
    sub_2495B87F0();
    _os_log_impl(&dword_249559000, v12, v13, "Attempting to decode %s in BlastDoor", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5A3CC0](v15, -1, -1);
    MEMORY[0x24C5A3CC0](v14, -1, -1);
  }

  sub_2495B85D0();
  sub_2495B67A0();
  swift_allocObject();
  sub_2495B6790();
  sub_24958331C(&qword_2696BFCE0, MEMORY[0x270FB0C18]);
  uint64_t v16 = v5;
  sub_2495B6780();
  if (v5)
  {
    swift_release();
    id v56 = v5;
    uint64_t v17 = sub_2495B85F0();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(void *)(v18 + 64);
    MEMORY[0x270FA5388](v17);
    unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v21 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCE8);
    if (swift_dynamicCast())
    {
      uint64_t v49 = &v42;
      unint64_t v51 = a3;

      uint64_t v47 = &v42;
      MEMORY[0x270FA5388](v22);
      uint64_t v23 = (char *)&v42 - v20;
      uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))((char *)&v42 - v20, (char *)&v42 - v20, v17);
      uint64_t v52 = &v42;
      MEMORY[0x270FA5388](v24);
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
      v25((char *)&v42 - v20, (char *)&v42 - v20, v17);
      uint64_t v26 = sub_2495B67B0();
      os_log_type_t v27 = sub_2495B87B0();
      uint64_t v53 = v26;
      BOOL v28 = os_log_type_enabled(v26, v27);
      uint64_t v50 = a2;
      uint64_t v48 = v18;
      uint64_t v45 = (void (*)(uint64_t, char *, uint64_t))v25;
      uint64_t v46 = v18 + 16;
      if (v28)
      {
        BOOL v29 = (uint8_t *)swift_slowAlloc();
        uint64_t v43 = (void *)swift_slowAlloc();
        unsigned int v44 = (char *)&v42 - v20;
        *(_DWORD *)BOOL v29 = 138412290;
        id v42 = v29 + 4;
        sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
        swift_allocError();
        v25(v30, (char *)&v42 - v20, v17);
        uint64_t v23 = v44;
        uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v55 = v31;
        sub_2495B87F0();
        uint64_t v32 = v43;
        *uint64_t v43 = v31;
        uint64_t v33 = *(void (**)(char *, uint64_t))(v18 + 8);
        v33((char *)&v42 - v20, v17);
        id v34 = v53;
        _os_log_impl(&dword_249559000, v53, v27, "Detected a BlastDoor explosion: %@", v29, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFCF8);
        swift_arrayDestroy();
        MEMORY[0x24C5A3CC0](v32, -1, -1);
        MEMORY[0x24C5A3CC0](v29, -1, -1);
      }
      else
      {
        uint64_t v33 = *(void (**)(char *, uint64_t))(v18 + 8);
        v33((char *)&v42 - v20, v17);
      }
      id v35 = objc_msgSend(v54, sel_autoBugCaptureHelper);
      if (qword_2696BF548 != -1) {
        swift_once();
      }
      os_log_type_t v36 = (void *)sub_2495B8660();
      if (qword_2696BF550 != -1) {
        swift_once();
      }
      long long v37 = (void *)sub_2495B8660();
      long long v38 = (void *)sub_2495B8660();
      sub_2495B85E0();
      uint64_t v39 = (void *)sub_2495B8660();
      swift_bridgeObjectRelease();
      objc_msgSend(v35, sel_reportWithDomain_type_subtype_subtypeContext_, v36, v37, v38, v39);

      sub_24958331C(&qword_2696BFCF0, MEMORY[0x270FB0C28]);
      swift_allocError();
      v45(v40, v23, v17);
      swift_willThrow();
      swift_unknownObjectRelease();
      v33(v23, v17);
      a2 = v50;
      a3 = v51;
    }
  }
  else
  {
    swift_release();
  }
  return sub_2495825EC(a2, a3);
}

uint64_t sub_24957FF8C()
{
  return swift_release();
}

id sub_249580050(uint64_t a1, unint64_t a2)
{
  id v4 = v2;
  uint64_t v7 = sub_2495B73D0();
  uint64_t v16 = *(void *)(v7 - 8);
  id v8 = *(id *)(v16 + 64);
  MEMORY[0x270FA5388](v7);
  unint64_t v9 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_249582644(a1, a2);
  uint64_t v10 = sub_249579CF8(v4, a1, a2, (uint8_t **)&v13[-v9]);
  if (!v3)
  {
    MEMORY[0x270FA5388](v10);
    uint64_t v11 = v16;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v16 + 16))(&v13[-v9], &v13[-v9], v7);
    sub_2495A3740((uint64_t)&v13[-v9], (uint64_t)v15);
    ctb::ProvisioningConfiguration::ProvisioningConfiguration((ctb::ProvisioningConfiguration *)v13, (const ctb::ProvisioningConfiguration *)v15);
    ctb::bridging::makeOptional((uint64_t)v13, (uint64_t)v14);
    id v8 = objc_msgSend(objc_allocWithZone((Class)CTBProvisioningConfigurationWrapper), sel_initWithWrapped_, v14);
    ctb::ProvisioningConfiguration::~ProvisioningConfiguration((ctb::ProvisioningConfiguration *)v15);
    (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(&v13[-v9], v7);
  }
  return v8;
}

uint64_t sub_249580230(uint64_t a1, unint64_t a2)
{
  id v4 = v2;
  uint64_t v7 = sub_2495B6B70();
  uint64_t v8 = *(void *)(v7 - 8);
  id v9 = *(id *)(v8 + 64);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = (char *)v26 - v10;
  sub_249582644(a1, a2);
  uint64_t v12 = sub_24957A400(v4, a1, a2, (uint64_t)v26 - v10);
  if (v3) {
    return (uint64_t)v9;
  }
  v26[2] = v26;
  MEMORY[0x270FA5388](v12);
  os_log_type_t v13 = (char *)v26 - v10;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)v26 - v10, (char *)v26 - v10, v7);
  unint64_t v14 = sub_2495B6B50();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v14, v15, &v28);
  uint64_t v16 = sub_2495B6700();
  v26[1] = v26;
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6B60();
  sub_2495B66F0();
  double v21 = v20;
  uint64_t v22 = v13;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v8 + 8);
  v23(v22, v7);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  if ((~*(void *)&v21 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v21 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v21 < 9.22337204e18)
  {
    std::string::basic_string[abi:ne180100]((__n128 *)&v29, (__n128 *)&v28);
    std::string::~string(&v28);
    *(void *)&v29.fId.__r_.var0 = (uint64_t)v21;
    uint64_t v25 = ctb::CPMGroupManagement::CPMGroupManagement(&v27, &v29);
    ctb::bridging::makeOptional((__n128 *)v25, (__n128 *)&v28);
    id v9 = objc_msgSend(objc_allocWithZone((Class)CTBBootstrappingInfoWrapper), sel_initWithWrapped_, &v28);
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)&v29);
    v23(v11, v7);
    return (uint64_t)v9;
  }
LABEL_9:
  __break(1u);
  return result;
}

id sub_24958053C(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = sub_2495B69D0();
  uint64_t v16 = *(void *)(v6 - 8);
  id v7 = *(id *)(v16 + 64);
  MEMORY[0x270FA5388](v6);
  unint64_t v8 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_249582644(a1, a2);
  uint64_t v9 = sub_24957AB34(v2, a1, a2, (uint8_t **)&v13[-v8 - 8]);
  if (!v3)
  {
    MEMORY[0x270FA5388](v9);
    uint64_t v10 = v16;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v16 + 16))(&v13[-v8 - 8], &v13[-v8 - 8], v6);
    sub_2495989EC((uint64_t)&v13[-v8 - 8], v15);
    ctb::CPIMMessage::CPIMMessage((ctb::CPIMMessage *)v13, (const ctb::CPIMMessage *)v15);
    ctb::bridging::makeOptional((ctb::bridging *)v13, (uint64_t)v14);
    id v7 = objc_msgSend(objc_allocWithZone((Class)CTBCPIMMessageWrapper), sel_initWithWrapped_, v14);
    ctb::CPIMMessage::~CPIMMessage((ctb::CPIMMessage *)v15);
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(&v13[-v8 - 8], v6);
  }
  return v7;
}

id sub_249580740(uint64_t a1, unint64_t a2)
{
  id v4 = v2;
  uint64_t v7 = sub_2495B6DF0();
  uint64_t v17 = *(void *)(v7 - 8);
  id v8 = *(id *)(v17 + 64);
  MEMORY[0x270FA5388](v7);
  unint64_t v9 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_249582644(a1, a2);
  uint64_t v10 = sub_24957B23C(v4, a1, a2, (uint8_t **)((char *)&v13 - v9));
  if (!v3)
  {
    MEMORY[0x270FA5388](v10);
    uint64_t v11 = v17;
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))((char *)&v13 - v9, (char *)&v13 - v9, v7);
    sub_2495A2208((uint64_t)&v13 - v9, (uint64_t)v16);
    ctb::FileTransferDescriptor::FileTransferDescriptor((ctb::FileTransferDescriptor *)v14, (const ctb::FileTransferDescriptor *)v16);
    ctb::bridging::makeOptional(v14, (uint64_t)v15);
    id v8 = objc_msgSend(objc_allocWithZone((Class)CTBFileTransferDescriptorWrapper), sel_initWithWrapped_, v15);
    ctb::FileTransferDescriptor::~FileTransferDescriptor(v16);
    (*(void (**)(char *, uint64_t))(v11 + 8))((char *)&v13 - v9, v7);
  }
  return v8;
}

id sub_249580B94(uint64_t a1, unint64_t a2)
{
  id v4 = v2;
  uint64_t v7 = sub_2495B7380();
  uint64_t v8 = *(void *)(v7 - 8);
  id v9 = *(id *)(v8 + 64);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = (char *)v37 - v10;
  sub_249582644(a1, a2);
  uint64_t v12 = sub_24957C04C(v4, a1, a2, (uint8_t **)((char *)v37 - v10));
  if (!v3)
  {
    v37[0] = 0;
    uint64_t v41 = v37;
    MEMORY[0x270FA5388](v12);
    uint64_t v13 = (char *)v37 - v10;
    unint64_t v14 = *(uint64_t (**)(char *, char *, uint64_t))(v8 + 16);
    uint64_t v15 = v14((char *)v37 - v10, (char *)v37 - v10, v7);
    MEMORY[0x270FA5388](v15);
    v14((char *)v37 - v10, (char *)v37 - v10, v7);
    int v40 = sub_24959EF4C((uint64_t)v37 - v10);
    unint64_t v16 = sub_2495B7370();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v16, v17, &v44);
    uint64_t v38 = sub_2495B6700();
    uint64_t v39 = v37;
    uint64_t v18 = *(void *)(v38 - 8);
    MEMORY[0x270FA5388](v38);
    double v20 = (char *)v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7360();
    uint64_t v21 = sub_2495B66E0();
    uint64_t v42 = v8;
    uint64_t v22 = v21;
    v37[1] = v37;
    uint64_t v23 = *(void *)(v21 - 8);
    uint64_t v46 = v7;
    uint64_t v24 = v23;
    MEMORY[0x270FA5388](v21);
    uint64_t v26 = (char *)v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_24958D6C0();
    unint64_t v27 = sub_2495B6680();
    unint64_t v29 = v28;
    uint64_t v30 = v26;
    uint64_t v31 = v42;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v30, v22);
    uint64_t v32 = v46;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v38);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v27, v29, &v43);
    uint64_t v33 = *(void (**)(char *, uint64_t))(v31 + 8);
    v33(v13, v32);
    v45.fDispositionType = v40;
    std::string::basic_string[abi:ne180100]((__n128 *)&v45.fMessageID, (__n128 *)&v44);
    std::string::~string(&v44);
    std::string::basic_string[abi:ne180100]((__n128 *)&v45.fMessageID.__r_.var0, (__n128 *)&v43);
    std::string::~string(&v43);
    id v35 = ctb::IMDispositionNotification::IMDispositionNotification(v34, &v45);
    ctb::bridging::makeOptional((uint64_t)v35, (uint64_t)&v44);
    id v9 = objc_msgSend(objc_allocWithZone((Class)CTBIMDispositionNotificationWrapper), sel_initWithWrapped_, &v44);
    ctb::IMCompositionIndication::~IMCompositionIndication((uint64_t)&v45);
    v33(v11, v32);
  }
  return v9;
}

id sub_249580FBC(uint64_t a1, unint64_t x1_0)
{
  id v4 = v2;
  uint64_t v7 = sub_2495B6CC0();
  uint64_t v16 = *(void *)(v7 - 8);
  id v8 = *(id *)(v16 + 64);
  MEMORY[0x270FA5388](v7);
  unint64_t v9 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_249582644(a1, x1_0);
  uint64_t v10 = sub_24957C754(v4, a1, x1_0, (uint64_t)v13 - v9);
  if (!v3)
  {
    MEMORY[0x270FA5388](v10);
    uint64_t v11 = v16;
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))((char *)v13 - v9, (char *)v13 - v9, v7);
    sub_249577E30((uint64_t)v13 - v9, (uint64_t)v15);
    ctb::SIPConferenceInfo::SIPConferenceInfo(v13, v15);
    ctb::bridging::makeOptional((ctb::bridging *)v13, v17, v14);
    id v8 = objc_msgSend(objc_allocWithZone((Class)CTBSIPConferenceInfoWrapper), sel_initWithWrapped_, v14);
    ctb::SIPConferenceInfo::~SIPConferenceInfo((ctb::SIPConferenceInfo *)v15);
    (*(void (**)(char *, uint64_t))(v11 + 8))((char *)v13 - v9, v7);
  }
  return v8;
}

id sub_24958119C(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = sub_2495B6B40();
  uint64_t v7 = *(void *)(v6 - 8);
  id v8 = *(id *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_249582644(a1, a2);
  uint64_t v10 = sub_24957CE88(v2, a1, a2, (uint64_t)&v14 - v9);
  if (!v3)
  {
    MEMORY[0x270FA5388](v10);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)&v14 - v9, (char *)&v14 - v9, v6);
    sub_249568FDC((uint64_t)&v14 - v9, (std::vector<std::string> *)&v16);
    uint64_t v11 = ctb::chatbot::CategoryList::CategoryList(&v14, &v16);
    ctb::bridging::makeOptional(v15, (ctb::bridging *)v11, v12);
    id v8 = objc_msgSend(objc_allocWithZone((Class)CTBSIPResourceListsWrapper), sel_initWithWrapped_, v15);
    ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest((uint64_t)&v16, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100]);
    (*(void (**)(char *, uint64_t))(v7 + 8))((char *)&v14 - v9, v6);
  }
  return v8;
}

id sub_249581394(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = sub_2495B6D10();
  uint64_t v7 = *(void *)(v6 - 8);
  id v8 = *(id *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_249582644(a1, a2);
  uint64_t v10 = sub_24957D5BC(v2, a1, a2, (uint64_t)&v13 - v9);
  if (!v3)
  {
    MEMORY[0x270FA5388](v10);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)&v13 - v9, (char *)&v13 - v9, v6);
    sub_24959E670((uint64_t)&v13 - v9, (__n128 *)&v16);
    uint64_t v11 = ctb::CPMGroupManagement::CPMGroupManagement(&v14, &v16);
    ctb::bridging::makeOptional((__n128 *)v11, v15);
    id v8 = objc_msgSend(objc_allocWithZone((Class)CTBCPMGroupManagementWrapper), sel_initWithWrapped_, v15);
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)&v16);
    (*(void (**)(char *, uint64_t))(v7 + 8))((char *)&v13 - v9, v6);
  }
  return v8;
}

id sub_249581564(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = sub_2495B71A0();
  uint64_t v7 = *(void *)(v6 - 8);
  id v8 = *(id *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_249582644(a1, a2);
  uint64_t v10 = sub_24957DCF0(v2, a1, a2, (uint8_t **)&v13[-v9]);
  if (!v3)
  {
    MEMORY[0x270FA5388](v10);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 16))(&v13[-v9], &v13[-v9], v6);
    sub_24959E0B4((uint64_t)&v13[-v9], (uint64_t)&v15);
    uint64_t v11 = ctb::IMCompositionIndication::IMCompositionIndication((ctb::IMCompositionIndication *)v13, &v15);
    ctb::bridging::makeOptional((uint64_t)v11, (uint64_t)v14);
    id v8 = objc_msgSend(objc_allocWithZone((Class)CTBIMCompositionIndicationWrapper), sel_initWithWrapped_, v14);
    ctb::IMCompositionIndication::~IMCompositionIndication((uint64_t)&v15);
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(&v13[-v9], v6);
  }
  return v8;
}

id sub_249581734(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v52 = a1;
  uint64_t v53 = a2;
  int v3 = a3;
  LODWORD(v55) = (a3 >> 8) & 1;
  uint64_t v4 = sub_2495B67D0();
  uint64_t v57 = *(void *)(v4 - 8);
  uint64_t v58 = v4;
  MEMORY[0x270FA5388](v4);
  id v56 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2495B7920();
  uint64_t v63 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v59 = v7;
  unint64_t v8 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = sub_2495B7900();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  IMCompositionIndication v15 = (char *)v45 - v14;
  CPMGroupManagement v16 = (unsigned int *)MEMORY[0x263F2B2D8];
  if (v3 == 1) {
    CPMGroupManagement v16 = (unsigned int *)MEMORY[0x263F2B2F0];
  }
  if (v3 == 2) {
    CPMGroupManagement v16 = (unsigned int *)MEMORY[0x263F2B2F8];
  }
  (*(void (**)(char *, void, uint64_t))(v10 + 104))((char *)v45 - v14, *v16, v9);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v15, v9);
  sub_2495B7910();
  if (qword_2696BF540 != -1) {
    swift_once();
  }
  uint64_t v17 = v58;
  uint64_t v18 = __swift_project_value_buffer(v58, (uint64_t)qword_2696BFCA8);
  uint64_t v19 = v56;
  uint64_t v20 = v57;
  uint64_t v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 16))(v56, v18, v17);
  unint64_t v51 = v45;
  MEMORY[0x270FA5388](v21);
  uint64_t v22 = v63;
  uint64_t v23 = *(void (**)(void))(v63 + 16);
  uint64_t v49 = (char *)v45 - v8;
  uint64_t v55 = (char *)v45 - v8;
  uint64_t v46 = v23;
  v23();
  uint64_t v24 = sub_2495B67B0();
  os_log_type_t v25 = sub_2495B87B0();
  uint64_t v50 = v24;
  int v47 = v25;
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v48 = v6;
  if (v26)
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    v61[0] = v28;
    *(_DWORD *)uint64_t v27 = 136315394;
    v62[0] = sub_249582838(0x7373654D746F6F52, 0xEB00000000656761, v61);
    uint64_t v29 = sub_2495B87F0();
    *(_WORD *)(v27 + 12) = 2080;
    v45[1] = v27 + 14;
    MEMORY[0x270FA5388](v29);
    uint64_t v31 = v49;
    ((void (*)(char *, char *, uint64_t))v46)((char *)v45 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0), v49, v6);
    uint64_t v32 = sub_2495B8690();
    v62[0] = sub_249582838(v32, v33, v61);
    sub_2495B87F0();
    swift_bridgeObjectRelease();
    uint64_t v59 = *(void (**)(char *, uint64_t))(v63 + 8);
    v59(v31, v6);
    id v34 = v50;
    _os_log_impl(&dword_249559000, v50, (os_log_type_t)v47, "Decoding %s using context: %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5A3CC0](v28, -1, -1);
    MEMORY[0x24C5A3CC0](v27, -1, -1);

    (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v58);
  }
  else
  {
    uint64_t v59 = *(void (**)(char *, uint64_t))(v22 + 8);
    v59(v49, v6);

    (*(void (**)(char *, uint64_t))(v20 + 8))(v19, v17);
  }
  uint64_t v35 = sub_2495B7930();
  uint64_t v58 = *(void *)(v35 - 8);
  id v36 = *(id *)(v58 + 64);
  uint64_t v37 = MEMORY[0x270FA5388](v35);
  unint64_t v38 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v37);
  uint64_t v39 = v53;
  v45[-4] = v52;
  v45[-3] = v39;
  uint64_t v40 = v54;
  uint64_t v41 = v55;
  v45[-2] = v55;
  sub_24957E3F8((void (*)(void))sub_249582FE8, (uint64_t)v45 - v38);
  if (v40)
  {
    v59(v41, v48);
  }
  else
  {
    MEMORY[0x270FA5388](v42);
    uint64_t v43 = v58;
    (*(void (**)(char *, char *, uint64_t))(v58 + 16))((char *)v45 - v38, (char *)v45 - v38, v35);
    sub_249587C98((uint64_t)v45 - v38, v62);
    std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::optional[abi:ne180100](v60, v62);
    ctb::bridging::makeOptional((ctb::bridging *)v60, v61);
    id v36 = objc_msgSend(objc_allocWithZone((Class)CTBChatBotMessageWrapper), sel_initWithWrapped_, v61);
    std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::~optional((uint64_t)v62);
    (*(void (**)(char *, uint64_t))(v43 + 8))((char *)v45 - v38, v35);
    v59(v55, v48);
  }
  return v36;
}

id sub_249581F58(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = sub_2495B7FF0();
  uint64_t v17 = *(void *)(v7 - 8);
  id v8 = *(id *)(v17 + 64);
  MEMORY[0x270FA5388](v7);
  unint64_t v9 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_249582644(a1, a2);
  uint64_t v10 = sub_24957EA8C(v4, a1, a2, (uint8_t **)&v14[-v9 - 8]);
  if (!v3)
  {
    MEMORY[0x270FA5388](v10);
    uint64_t v11 = v17;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v17 + 16))(&v14[-v9 - 8], &v14[-v9 - 8], v7);
    sub_249583BB0((uint64_t)&v14[-v9 - 8], (uint64_t)v16);
    ctb::chatbot::RenderInformation::RenderInformation((ctb::chatbot::RenderInformation *)v14, (const ctb::chatbot::RenderInformation *)v16);
    ctb::bridging::makeOptional((uint64_t)v14, (uint64_t)v15);
    id v8 = objc_msgSend(objc_allocWithZone((Class)CTBChatBotRenderInformationWrapper), sel_initWithWrapped_, v15);
    ctb::chatbot::RenderInformation::~RenderInformation(v16);
    (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(&v14[-v9 - 8], v7);
  }
  return v8;
}

id sub_249582138(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = sub_2495B7630();
  uint64_t v7 = *(void *)(v6 - 8);
  id v8 = *(id *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_249582644(a1, a2);
  uint64_t v10 = sub_24957F184(v2, a1, a2, (uint8_t **)&v14[-v9]);
  if (!v3)
  {
    MEMORY[0x270FA5388](v10);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 16))(&v14[-v9], &v14[-v9], v6);
    sub_249596B08((uint64_t)&v14[-v9], (__n128 *)&v16);
    uint64_t v11 = ctb::ClientAuthenticityRequest::ClientAuthenticityRequest((ctb::ClientAuthenticityRequest *)v14, &v16);
    ctb::bridging::makeOptional(v15, v11, v12);
    id v8 = objc_msgSend(objc_allocWithZone((Class)CTBClientAuthenticityRequestWrapper), sel_initWithWrapped_, v15);
    ctb::ClientAuthenticityRequest::~ClientAuthenticityRequest((uint64_t)&v16, (uint64_t)std::__destroy_at[abi:ne180100]<ctb::ClientAuthenticityRequest::Method,0>, (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Method>::__destroy_vector::operator()[abi:ne180100]);
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(&v14[-v9], v6);
  }
  return v8;
}

id sub_249582330(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = sub_2495B85D0();
  uint64_t v7 = *(void *)(v6 - 8);
  id v8 = *(id *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_249582644(a1, a2);
  uint64_t v10 = sub_24957F88C(v2, a1, a2, (uint8_t **)((char *)&v13 - v9));
  if (!v3)
  {
    MEMORY[0x270FA5388](v10);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)&v13 - v9, (char *)&v13 - v9, v6);
    sub_24959EB24((uint64_t)&v13 - v9, (uint64_t)&v15);
    uint64_t v11 = ctb::IMRevoke::IMRevoke(&v13, &v15);
    ctb::bridging::makeOptional((uint64_t)v11, (uint64_t)v14);
    id v8 = objc_msgSend(objc_allocWithZone((Class)CTBIMRevokeWrapper), sel_initWithWrapped_, v14);
    ctb::IMRevoke::~IMRevoke((void **)&v15);
    (*(void (**)(char *, uint64_t))(v7 + 8))((char *)&v13 - v9, v6);
  }
  return v8;
}

id sub_249582500(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t, unint64_t))
{
  id v7 = a3;
  id v8 = a1;
  uint64_t v9 = sub_2495B6640();
  unint64_t v11 = v10;

  uint64_t v12 = (void *)a5(v9, v11);
  sub_2495825EC(v9, v11);

  return v12;
}

uint64_t sub_2495825EC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_249582644(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

std::string *ctb::IMRevoke::IMRevoke(std::string *this, const IMRevoke *a2)
{
  if (*((char *)&a2->fMessageID.__r_.__value_.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->fMessageID.__r_.__value_.var0.var1.__data_, a2->fMessageID.__r_.__value_.var0.var1.__size_);
  }
  else
  {
    long long v4 = *(_OWORD *)a2->fMessageID.__r_.__value_.var0.var0.__data_;
    this->__r_.__value_.__r.__words[2] = *((void *)&a2->fMessageID.__r_.__value_.var0.var1 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (a2[1].fMessageID.__r_.__value_.var0.var0.__data_[7] < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)&a2->fMessageID.__r_.var0, a2->fMessageID.var0);
  }
  else
  {
    long long v5 = *(_OWORD *)&a2->fMessageID.__r_.var0;
    this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)a2[1].fMessageID.__r_.__value_.var0.var1.__data_;
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = this + 2;
  if (*((char *)&a2[1].fMessageID.__r_.var1 + 3) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)a2[1].fMessageID.__r_.__value_.var0.var1.__size_, *((void *)&a2[1].fMessageID.__r_.__value_.var0.var1 + 2));
  }
  else
  {
    long long v7 = *(_OWORD *)&a2[1].fMessageID.__r_.__value_.var0.var1.__size_;
    this[2].__r_.__value_.__r.__words[2] = *(void *)&a2[1].fMessageID.__r_.var0;
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(this[3].__r_.__value_.__l.__data_) = a2[1].fMessageID.var0;
  return this;
}

void sub_249582758(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 ctb::bridging::makeOptional@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  long long v2 = *(_OWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a2 + 24) = v2;
  *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a2 + 64) = *(void *)(a1 + 64);
  __n128 result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 72);
  *(unsigned char *)(a2 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 1;
  return result;
}

{
  __n128 result;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  __n128 result = *(__n128 *)(a1 + 32);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v3 = *(void *)(a1 + 48);
  long long v4 = *(void *)(a1 + 56);
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(__n128 *)(a2 + 32) = result;
  *(void *)(a2 + 48) = v3;
  *(void *)(a2 + 56) = v4;
  *(unsigned char *)(a2 + 64) = 1;
  return result;
}

{
  __n128 result;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a2 + 56) = 1;
  return result;
}

{
  long long v2;
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
    *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(void *)(a1 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(a1 + 24) = 0;
    *(unsigned char *)(a2 + 48) = 1;
  }
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  long long v2 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(_OWORD *)(a2 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v2;
  *(void *)(a2 + 96) = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a2 + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(void *)(a1 + 120);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 104) = 0;
  __n128 result = *(__n128 *)(a1 + 128);
  *(__n128 *)(a2 + 128) = result;
  *(unsigned char *)(a2 + 144) = 1;
  return result;
}

{
  __n128 result;
  long long v3;

  __n128 result = *(__n128 *)a1;
  uint64_t v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(unsigned char *)(a2 + 32) = 1;
  return result;
}

{
  __n128 result;

  *(void *)a2 = *(void *)a1;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 1;
  return result;
}

{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  *(unsigned char *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 1;
  return result;
}

{
  long long v2;
  long long v3;
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(void *)(a1 + 40);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(void *)(a2 + 64) = *(void *)(a1 + 64);
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  long long v2 = *(_OWORD *)(a1 + 72);
  *(void *)(a2 + 88) = *(void *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v2;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  uint64_t v3 = *(_OWORD *)(a1 + 96);
  *(void *)(a2 + 112) = *(void *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = v3;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  __n128 result = *(__n128 *)(a1 + 120);
  *(__n128 *)(a2 + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = result;
  *(unsigned char *)(a2 + 136) = 1;
  return result;
}

{
  long long v2;
  __n128 result;
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  long long v2 = *(_OWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a2 + 24) = v2;
  *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  __n128 result = *(__n128 *)(a1 + 48);
  long long v4 = *(void *)(a1 + 64);
  long long v5 = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a2 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(_WORD *)(a1 + 80);
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a2 + 64) = v4;
  *(void *)(a2 + 72) = v5;
  *(unsigned char *)(a2 + 88) = 1;
  return result;
}

void ctb::IMRevoke::~IMRevoke(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t sub_249582838(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_24958290C(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_249582EE8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_249582EE8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_24958290C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_2495B8800();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_249582AC8(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_2495B88A0();
  if (!v8)
  {
    sub_2495B88C0();
    __break(1u);
LABEL_17:
    uint64_t result = sub_2495B88E0();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_249582AC8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_249582B60(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_249582D44(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_249582D44(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_249582B60(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_249582CD8(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_2495B8890();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_2495B88C0();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_2495B86E0();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    sub_2495B88E0();
    __break(1u);
LABEL_14:
    uint64_t result = sub_2495B88C0();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *sub_249582CD8(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD00);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_249582D44(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD00);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  std::string v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_2495B88E0();
  __break(1u);
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_249582EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t ctb::bridging::makeOptional@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return std::__optional_destruct_base<ctb::chatbot::RenderInformation,false>::__optional_destruct_base[abi:ne180100]<ctb::chatbot::RenderInformation>(a2, a1);
}

{
  return std::__optional_destruct_base<ctb::ProvisioningConfiguration,false>::__optional_destruct_base[abi:ne180100]<ctb::ProvisioningConfiguration>(a2, a1);
}

{
  uint64_t result;

  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::__move_constructor(a2, a1);
  *(unsigned char *)(result + 336) = 1;
  return result;
}

void ctb::chatbot::RenderInformation::~RenderInformation(void **this)
{
  if (*((unsigned char *)this + 672) && *((char *)this + 671) < 0) {
    operator delete(this[81]);
  }
  if (*((char *)this + 647) < 0) {
    operator delete(this[78]);
  }
  if (*((char *)this + 623) < 0) {
    operator delete(this[75]);
  }
  if (*((unsigned char *)this + 584))
  {
    uint64_t v2 = this + 70;
    std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100](&v2, (void (*)(char *))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor);
  }
  ctb::chatbot::BotInformation::~BotInformation((ctb::chatbot::BotInformation *)this);
}

uint64_t sub_249582FE8()
{
  return sub_24957FF8C();
}

unsigned char *ctb::bridging::makeOptional@<X0>(ctb::bridging *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = a2;
  *a2 = 0;
  a2[336] = 0;
  if (*((unsigned char *)this + 336))
  {
    uint64_t result = (unsigned char *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a2, (uint64_t)this);
    result[336] = 1;
  }
  result[344] = 1;
  return result;
}

ctb::IMCompositionIndication *ctb::IMCompositionIndication::IMCompositionIndication(ctb::IMCompositionIndication *this, const IMCompositionIndication *a2)
{
  *(_DWORD *)this = a2->fState;
  if (*((char *)&a2->fLastActive.__r_.__value_.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), a2->fLastActive.__r_.__value_.var0.var1.__data_, a2->fLastActive.__r_.__value_.var0.var1.__size_);
  }
  else
  {
    long long v4 = *(_OWORD *)a2->fLastActive.__r_.__value_.var0.var0.__data_;
    *((void *)this + 3) = *((void *)&a2->fLastActive.__r_.__value_.var0.var1 + 2);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  size_t v5 = (std::string *)((char *)this + 32);
  if (*((char *)&a2[1].fState + 7) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)&a2->fLastActive.__r_.var0, a2->fLastActive.var0);
  }
  else
  {
    long long v6 = *(_OWORD *)&a2->fLastActive.__r_.var0;
    *((void *)this + 6) = *(void *)&a2[1].fState;
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((void *)this + 7) = a2[1].fLastActive.__r_.__value_.var0.var1.__data_;
  return this;
}

void sub_2495830E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 ctb::bridging::makeOptional@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  unint64_t v3 = a1[1].n128_u64[0];
  unint64_t v4 = a1[1].n128_u64[1];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  a2[1].n128_u64[0] = v3;
  a2[1].n128_u64[1] = v4;
  a2[2].n128_u8[0] = 1;
  return result;
}

__n128 ctb::bridging::makeOptional@<Q0>(ctb::bridging *this@<X0>, SIPConferenceInfo a2@<0:X1>, unsigned char *a3@<X8>)
{
  unint64_t v4 = std::__optional_move_base<ctb::SIPConferenceInfo::Description,false>::__optional_move_base[abi:ne180100](a3, (long long *)this);
  __n128 result = *(__n128 *)((char *)this + 72);
  *(__n128 *)(v4 + 72) = result;
  *((void *)v4 + 11) = *((void *)this + 11);
  *((void *)this + 1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = 0;
  v4[96] = 1;
  return result;
}

ctb::IMDispositionNotification *ctb::IMDispositionNotification::IMDispositionNotification(ctb::IMDispositionNotification *this, const IMDispositionNotification *a2)
{
  *(_DWORD *)this = a2->fDispositionType;
  if (*((char *)&a2->fMessageID.__r_.__value_.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), a2->fMessageID.__r_.__value_.var0.var1.__data_, a2->fMessageID.__r_.__value_.var0.var1.__size_);
  }
  else
  {
    long long v4 = *(_OWORD *)a2->fMessageID.__r_.__value_.var0.var0.__data_;
    *((void *)this + 3) = *((void *)&a2->fMessageID.__r_.__value_.var0.var1 + 2);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  size_t v5 = (std::string *)((char *)this + 32);
  if (*((char *)&a2[1].fDispositionType + 7) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)&a2->fMessageID.__r_.var0, a2->fMessageID.var0);
  }
  else
  {
    long long v6 = *(_OWORD *)&a2->fMessageID.__r_.var0;
    *((void *)this + 6) = *(void *)&a2[1].fDispositionType;
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_249583284(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void ctb::bridging::makeOptional(GeoPushLocation a1@<0:D0, 8:D1>, uint64_t a2@<X8>)
{
  *(GeoPushLocation *)a2 = a1;
  *(unsigned char *)(a2 + 16) = 1;
}

uint64_t ctb::bridging::makeOptional@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  return std::__optional_destruct_base<ctb::FileTransferDescriptor,false>::__optional_destruct_base[abi:ne180100]<ctb::FileTransferDescriptor>(a2, a1);
}

{
  return std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::__optional_destruct_base[abi:ne180100]<ctb::chatbot::CardMedia>(a2, a1);
}

{
  return std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging,false>::__optional_destruct_base[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging>(a2, a1);
}

double ctb::bridging::makeOptional@<D0>(ctb::bridging *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = std::__optional_destruct_base<ctb::CPIMMessage,false>::__optional_destruct_base[abi:ne180100]<ctb::CPIMMessage>(a2, (long long *)this).n128_u64[0];
  return result;
}

uint64_t sub_24958331C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_249583370()
{
  return 0;
}

ValueMetadata *_s5ErrorOMa()
{
  return &_s5ErrorON;
}

void *_s5ErrorO7ContextVwCP(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s5ErrorO7ContextVwxx()
{
  return swift_bridgeObjectRelease();
}

void *_s5ErrorO7ContextVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *_s5ErrorO7ContextVwta(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s5ErrorO7ContextVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_249583480(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s5ErrorO7ContextVMa()
{
  return &_s5ErrorO7ContextVN;
}

uint64_t ctb::IMCompositionIndication::~IMCompositionIndication(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1, void (*a2)(void))
{
  if (**a1)
  {
    a2();
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

{
  void *v3;
  uint64_t vars8;

  if (**a1)
  {
    a2();
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::__optional_destruct_base<ctb::chatbot::RenderInformation,false>::__optional_destruct_base[abi:ne180100]<ctb::chatbot::RenderInformation>(uint64_t a1, uint64_t a2)
{
  uint64_t result = ctb::chatbot::BotInformation::BotInformation(a1, a2);
  *(unsigned char *)(result + 56std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(unsigned char *)(result + 584) = 0;
  if (*(unsigned char *)(a2 + 584))
  {
    *(void *)(result + 576) = 0;
    *(_OWORD *)(result + 56std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(result + 56std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(_OWORD *)(a2 + 560);
    *(void *)(result + 576) = *(void *)(a2 + 576);
    *(void *)(a2 + 576) = 0;
    *(_OWORD *)(a2 + 56std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(unsigned char *)(result + 584) = 1;
  }
  *(unsigned char *)(result + 592) = *(unsigned char *)(a2 + 592);
  long long v4 = *(_OWORD *)(a2 + 600);
  *(void *)(result + 616) = *(void *)(a2 + 616);
  *(_OWORD *)(result + 60std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v4;
  *(void *)(a2 + 616) = 0;
  *(void *)(a2 + 608) = 0;
  *(void *)(a2 + 60std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  long long v5 = *(_OWORD *)(a2 + 624);
  *(void *)(result + 64std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(void *)(a2 + 640);
  *(_OWORD *)(result + 624) = v5;
  *(void *)(a2 + 64std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a2 + 632) = 0;
  *(void *)(a2 + 624) = 0;
  *(unsigned char *)(result + 648) = 0;
  *(unsigned char *)(result + 672) = 0;
  if (*(unsigned char *)(a2 + 672))
  {
    long long v6 = *(_OWORD *)(a2 + 648);
    *(void *)(result + 664) = *(void *)(a2 + 664);
    *(_OWORD *)(result + 648) = v6;
    *(void *)(a2 + 664) = 0;
    *(void *)(a2 + 656) = 0;
    *(void *)(a2 + 648) = 0;
    *(unsigned char *)(result + 672) = 1;
  }
  *(unsigned char *)(result + 68std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 1;
  return result;
}

uint64_t std::__optional_destruct_base<ctb::FileTransferDescriptor,false>::__optional_destruct_base[abi:ne180100]<ctb::FileTransferDescriptor>(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*((unsigned char *)a2 + 48))
  {
    long long v4 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v4;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    *(unsigned char *)(a1 + 48) = 1;
  }
  long long v5 = *(long long *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(_OWORD *)(a1 + 56) = v5;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 7) = 0;
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v6;
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  long long v7 = *(long long *)((char *)a2 + 104);
  *(void *)(a1 + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 15);
  *(_OWORD *)(a1 + 104) = v7;
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 13) = 0;
  *(_OWORD *)(a1 + 128) = a2[8];
  std::__optional_move_base<ctb::FileTransferDescriptor::FileDescriptor,false>::__optional_move_base[abi:ne180100]((unsigned char *)(a1 + 144), a2 + 9);
  *(unsigned char *)(a1 + 296) = 1;
  return a1;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SD_SE_SF_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SD_SE_SF_SL_EEERKS13_EEEDcSV_DpT0_(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = *((void *)a3 + 3);
}

ctb::FileTransferDescriptor::FileDescriptor *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SD_SE_SF_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, ctb::FileTransferDescriptor::FileDescriptor *a2, uint64_t a3)
{
  return std::__variant_detail::__alt<2ul,ctb::FileTransferDescriptor>::__alt[abi:ne180100]<ctb::FileTransferDescriptor const&>(a2, a3);
}

unsigned char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SD_SE_SF_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  return std::__optional_copy_base<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,false>::__optional_copy_base[abi:ne180100](a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SD_SE_SF_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<4ul,ctb::IMCompositionIndication>::__alt[abi:ne180100]<ctb::IMCompositionIndication const&>(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SD_SE_SF_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<0ul,ctb::chatbot::SuggestedActionOpenUrlInWebView>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionOpenUrlInWebView const&>(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SD_SE_SF_SL_EEERKS13_EEEDcSV_DpT0_(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

void sub_249583924(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__optional_destruct_base<ctb::CPIMMessage,false>::__optional_destruct_base[abi:ne180100]<ctb::CPIMMessage>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v3 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v3;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  long long v4 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)(a1 + 48) = v4;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 6) = 0;
  long long v5 = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(_OWORD *)(a1 + 72) = v5;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *((void *)a2 + 11) = 0;
  long long v6 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 96) = v6;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  *(void *)(a1 + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(long long *)((char *)a2 + 120);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 16std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  __n128 result = (__n128)a2[9];
  *(__n128 *)(a1 + 144) = result;
  *(void *)(a1 + 16std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 20);
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 19) = 0;
  *((void *)a2 + 2std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(unsigned char *)(a1 + 168) = 1;
  return result;
}

void std::vector<ctb::ClientAuthenticityRequest::Method>::__destroy_vector::operator()[abi:ne180100](void ***a1, void (*a2)(char *))
{
  long long v2 = *a1;
  long long v3 = (char *)**a1;
  if (v3)
  {
    long long v5 = (char *)v2[1];
    long long v6 = **a1;
    if (v5 != v3)
    {
      do
      {
        v5 -= 56;
        a2(v5);
      }
      while (v5 != v3);
      long long v6 = **a1;
    }
    v2[1] = v3;
    operator delete(v6);
  }
}

uint64_t std::__optional_destruct_base<ctb::ProvisioningConfiguration,false>::__optional_destruct_base[abi:ne180100]<ctb::ProvisioningConfiguration>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    *(void *)a1 = *(void *)a2;
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a1 + 32) = 1;
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  long long v7 = (void *)(a1 + 64);
  *(void *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v5;
  *(unsigned char *)(a1 + 112) = 0;
  if (*(unsigned char *)(a2 + 112))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl,ctb::ProvisioningConfiguration::AccessControl*>(v7, a2 + 64);
    *(unsigned char *)(a1 + 112) = 1;
  }
  *(unsigned char *)(a1 + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(unsigned char *)(a1 + 648) = 0;
  if (*(unsigned char *)(a2 + 648))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::IMS3GPP,ctb::ProvisioningConfiguration::IMS3GPP,ctb::ProvisioningConfiguration::IMS3GPP*>(a1 + 120, (long long *)(a2 + 120));
    *(unsigned char *)(a1 + 648) = 1;
  }
  std::__optional_move_base<ctb::ProvisioningConfiguration::Services,false>::__optional_move_base[abi:ne180100](a1 + 656, (long long *)(a2 + 656));
  *(unsigned char *)(a1 + 72std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(unsigned char *)(a1 + 1136) = 0;
  if (*(unsigned char *)(a2 + 1136))
  {
    std::construct_at[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging,ctb::ProvisioningConfiguration::Messaging*>(a1 + 720, a2 + 720);
    *(unsigned char *)(a1 + 1136) = 1;
  }
  long long v8 = *(_OWORD *)(a2 + 1144);
  long long v9 = *(_OWORD *)(a2 + 1160);
  *(void *)(a1 + 1176) = *(void *)(a2 + 1176);
  *(_OWORD *)(a1 + 1144) = v8;
  *(_OWORD *)(a1 + 116std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v9;
  *(unsigned char *)(a1 + 1184) = 1;
  return a1;
}

void sub_249583BB0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v3 = sub_2495B81F0();
  MEMORY[0x270FA5388](v3 - 8);
  long long v5 = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B7FB0();
  sub_249586AA8((uint64_t)v5, (uint64_t)v48);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD70);
  uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  MEMORY[0x270FA5388](v6 - 8);
  long long v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2495B7FC0();
  MEMORY[0x270FA5388](v9);
  sub_24957864C((uint64_t)v8, (uint64_t)v8, &qword_2696BFD70);
  uint64_t v10 = sub_2495B8010();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10);
  uint64_t v38 = a1;
  if (v12 == 1)
  {
    __n128 v44 = 0u;
    long long v45 = 0u;
    LOBYTE(v46[0]) = 1;
  }
  else
  {
    uint64_t v13 = *(void *)(v11 + 64);
    MEMORY[0x270FA5388](v12);
    uint64_t v14 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v14, v8, v10);
    MEMORY[0x270FA5388](v15);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v14, v10);
    uint64_t v16 = sub_2495B8000();
    sub_2495947D4(v16, (uint64_t *)&v44);
    uint64_t v17 = *(void (**)(char *, uint64_t))(v11 + 8);
    v17(v14, v10);
    std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]((__n128 *)&v40, &v44);
    ctb::chatbot::MenuItem::~MenuItem((void **)&v44);
    ctb::bridging::makeOptional((uint64_t *)&v44, (ctb::bridging *)&v40, v18);
    v17(v14, v10);
    LOBYTE(v46[0]) = 0;
    a1 = v38;
  }
  sub_2495786B0((uint64_t)v8, &qword_2696BFD70);
  if (v46[0])
  {
    type metadata accessor for std.__1.optional_MenuItem_(0);
    uint64_t v20 = v19;
    uint64_t v21 = sub_24958798C(&qword_2696BF8C0, type metadata accessor for std.__1.optional_MenuItem_);
    CxxOptional.init(nilLiteral:)(v20, v21);
    sub_2495786B0((uint64_t)&v44, &qword_2696BFD78);
  }
  else
  {
    std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)v47, &v44);
    std::optional<ctb::chatbot::MenuItem>::~optional((uint64_t)&v44, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100]);
  }
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD80);
  uint64_t v23 = *(void *)(*(void *)(v22 - 8) + 64);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = (char *)v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_2495B7FD0();
  MEMORY[0x270FA5388](v25);
  sub_24957864C((uint64_t)v24, (uint64_t)v24, &qword_2696BFD80);
  uint64_t v26 = sub_2495B7BD0();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v26);
  if (v28 == 1)
  {
    uint64_t v40 = 2;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
  }
  else
  {
    void v37[2] = v37;
    uint64_t v29 = *(void *)(v27 + 64);
    MEMORY[0x270FA5388](v28);
    uint64_t v30 = (char *)v37 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v27 + 32))(v30, v24, v26);
    v37[1] = v37;
    MEMORY[0x270FA5388](v31);
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v30, v30, v26);
    sub_249586FD8((uint64_t)v30, (uint64_t)&v40);
    a1 = v38;
    (*(void (**)(char *, uint64_t))(v27 + 8))((char *)v37 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v26);
  }
  sub_2495786B0((uint64_t)v24, &qword_2696BFD80);
  if (v40 == 2)
  {
    v44.n128_u64[1] = 0;
    long long v45 = 0uLL;
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v44.n128_u64[1]);
    memset(v46, 0, sizeof(v46));
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](v46);
    v44.n128_u8[0] = 0;
    sub_2495786B0((uint64_t)&v40, &qword_2696BFD88);
  }
  else
  {
    ctb::chatbot::VerificationDetails::VerificationDetails((uint64_t)&v44, (uint64_t)&v40);
    ctb::chatbot::VerificationDetails::~VerificationDetails((void **)&v40);
  }
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD90);
  MEMORY[0x270FA5388](v32 - 8);
  id v34 = (char *)v37 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B7FE0();
  sub_249595D34((uint64_t)v34, (uint64_t)&v40);
  uint64_t v35 = sub_2495B7FF0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8))(a1, v35);
  uint64_t v36 = v39;
  ctb::chatbot::BotInformation::BotInformation(v39, v48);
  ctb::chatbot::BotInformation::~BotInformation((ctb::chatbot::BotInformation *)v48);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](v36 + 560, v47);
  std::optional<ctb::chatbot::MenuItem>::~optional((uint64_t)v47, (uint64_t)std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100]);
  ctb::chatbot::VerificationDetails::VerificationDetails(v36 + 592, (uint64_t)&v44);
  ctb::chatbot::VerificationDetails::~VerificationDetails((void **)&v44);
  std::optional<std::string>::optional[abi:ne180100](v36 + 648, (__n128 *)&v40);
  ctb::chatbot::URIEntry::~URIEntry((void **)&v40);
}

void sub_249584284(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = MEMORY[0x24C5A2740]();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v4, v5, &v19);
  uint64_t v6 = sub_2495B7C10();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_2495B7B20();
  unint64_t v11 = MEMORY[0x24C5A2830](v10);
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v11, v12, &v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  std::string::basic_string[abi:ne180100]((__n128 *)&v18, (__n128 *)&v17);
  std::string::~string(&v17);
  unint64_t v13 = sub_2495B7B00();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v13, v14, &v17);
  uint64_t v15 = sub_2495B7B30();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
  std::string::basic_string[abi:ne180100]((__n128 *)a2, (__n128 *)&v19);
  std::string::~string(&v19);
  ctb::SIPConferenceInfo::SubjectExt::SubjectExt((__n128 *)(a2 + 24), (__n128 *)&v18);
  ctb::chatbot::OrgNameEntry::~OrgNameEntry(&v18);
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 48), (__n128 *)&v17);
  std::string::~string(&v17);
}

uint64_t sub_249584414@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3 = a2;
  int64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v40 = a2;
    uint64_t v54 = MEMORY[0x263F8EE78];
    sub_24959774C(0, v4, 0);
    uint64_t v5 = sub_2495B8280();
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v39[1] = a1;
    uint64_t v9 = a1 + v8;
    uint64_t v42 = *(void *)(v7 + 72);
    uint64_t v44 = *(void *)(v7 + 64);
    uint64_t v45 = v7 + 16;
    long long v41 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v43 = v5;
    do
    {
      uint64_t v10 = v44;
      MEMORY[0x270FA5388](v5);
      unint64_t v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      unint64_t v12 = v46;
      uint64_t v13 = ((uint64_t (*)(char *, uint64_t, uint64_t))v46)(v11, v9, v6);
      MEMORY[0x270FA5388](v13);
      v12(v11, v11, v6);
      unint64_t v14 = sub_2495B8230();
      unint64_t v16 = v15;
      swift_bridgeObjectRetain();
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v14, v16, &v50);
      ctb::bridging::makeOptional((ctb::bridging *)&v50, (uint64_t)v51);
      LOBYTE(v52) = 0;
      swift_bridgeObjectRelease();
      uint64_t v48 = v39;
      if (v52)
      {
        type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___(0);
        uint64_t v18 = v17;
        uint64_t v19 = sub_24958798C((unint64_t *)&qword_2696BF8B8, type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___);
        CxxOptional.init(nilLiteral:)(v18, v19);
        sub_2495786B0((uint64_t)v51, &qword_2696BFBD0);
      }
      else
      {
        std::optional<std::string>::optional[abi:ne180100]((uint64_t)v49, v51);
        ctb::chatbot::URIEntry::~URIEntry((void **)v51);
      }
      std::optional<std::string>::optional[abi:ne180100]((uint64_t)&v50, v49);
      ctb::chatbot::URIEntry::~URIEntry((void **)v49);
      uint64_t v20 = sub_2495B8270();
      uint64_t v21 = *(void *)(v20 - 8);
      MEMORY[0x270FA5388](v20);
      uint64_t v23 = (char *)v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_2495B8240();
      int v24 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v23, v20);
      int v47 = v39;
      if (MEMORY[0x263F2B738] && v24 == *MEMORY[0x263F2B738])
      {
        int v25 = 1;
      }
      else if (MEMORY[0x263F2B730] && v24 == *MEMORY[0x263F2B730])
      {
        int v25 = 2;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
        int v25 = 0;
      }
      uint64_t v26 = sub_2495B8250();
      uint64_t v27 = *(void *)(v26 - 8);
      MEMORY[0x270FA5388](v26);
      uint64_t v29 = (char *)v39 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_2495B8260();
      int v30 = (*(uint64_t (**)(char *, uint64_t))(v27 + 88))(v29, v26);
      if (MEMORY[0x263F2B718] && v30 == *MEMORY[0x263F2B718])
      {
        int v31 = 1;
      }
      else if (MEMORY[0x263F2B710] && v30 == *MEMORY[0x263F2B710])
      {
        int v31 = 2;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
        int v31 = 0;
      }
      uint64_t v32 = *v41;
      uint64_t v6 = v43;
      (*v41)(v11, v43);
      std::optional<std::string>::optional[abi:ne180100]((uint64_t)v51, (__n128 *)&v50);
      ctb::chatbot::URIEntry::~URIEntry((void **)&v50.__r_.__value_.__l.__data_);
      int v52 = v25;
      int v53 = v31;
      v32(v11, v6);
      uint64_t v33 = v54;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24959774C(0, *(void *)(v33 + 16) + 1, 1);
        uint64_t v33 = v54;
      }
      unint64_t v35 = *(void *)(v33 + 16);
      unint64_t v34 = *(void *)(v33 + 24);
      if (v35 >= v34 >> 1)
      {
        sub_24959774C(v34 > 1, v35 + 1, 1);
        uint64_t v33 = v54;
      }
      *(void *)(v33 + 16) = v35 + 1;
      ctb::chatbot::URIEntry::URIEntry(v33 + 40 * v35 + 32, (long long *)v51);
      ctb::chatbot::URIEntry::~URIEntry((void **)v51);
      v9 += v42;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    uint64_t v3 = v40;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v33 = MEMORY[0x263F8EE78];
  }
  memset(&v50, 0, sizeof(v50));
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v50);
  uint64_t v36 = *(void *)(v33 + 16);
  if (v36)
  {
    uint64_t v37 = v33 + 32;
    swift_bridgeObjectRetain();
    do
    {
      std::vector<ctb::chatbot::URIEntry>::push_back[abi:ne180100]((uint64_t *)&v50, v37);
      v37 += 40;
      --v36;
    }
    while (v36);
    swift_bridgeObjectRelease();
  }
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v51, (__n128 *)&v50);
  std::vector<ctb::chatbot::URIEntry>::~vector[abi:ne180100]((uint64_t)&v50, (void (*)(uint64_t *))std::vector<ctb::chatbot::URIEntry>::__destroy_vector::operator()[abi:ne180100]);
  swift_bridgeObjectRelease();
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v3, v51);
  return std::vector<ctb::chatbot::URIEntry>::~vector[abi:ne180100]((uint64_t)v51, (void (*)(uint64_t *))std::vector<ctb::chatbot::URIEntry>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t sub_249584A10@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v58 = a2;
  int64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v85 = MEMORY[0x263F8EE78];
    sub_24959776C(0, v3, 0);
    uint64_t v4 = sub_2495B78E0();
    uint64_t v5 = v4;
    uint64_t v6 = *(void **)(v4 - 8);
    uint64_t v7 = (void (*)(char *, char *, uint64_t))v6[2];
    v65 = v6 + 2;
    v66 = v7;
    uint64_t v57 = a1;
    uint64_t v8 = v6[8];
    uint64_t v63 = v6[9];
    uint64_t v64 = v8;
    v61 = (void (**)(char *, uint64_t))(v6 + 1);
    v62 = &v80;
    uint64_t v59 = v4;
    uint64_t v60 = (__n128 *)&v83[0].n128_i8[8];
    while (1)
    {
      v73 = &v57;
      uint64_t v9 = v64;
      MEMORY[0x270FA5388](v4);
      uint64_t v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v74 = v11;
      unint64_t v12 = v66;
      uint64_t v13 = ((uint64_t (*)(char *))v66)(v10);
      v71 = &v57;
      MEMORY[0x270FA5388](v13);
      unint64_t v14 = v10;
      v72 = v10;
      v12(v10, v10, v5);
      uint64_t v15 = sub_2495B78B0();
      uint64_t v16 = *(void *)(v15 - 8);
      MEMORY[0x270FA5388](v15);
      uint64_t v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_2495B78C0();
      int v19 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v18, v15);
      if (MEMORY[0x263F2B280] && v19 == *MEMORY[0x263F2B280])
      {
        unsigned __int32 v70 = 1;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
        unsigned __int32 v70 = 0;
      }
      uint64_t v68 = sub_2495B8040();
      v69 = &v57;
      uint64_t v67 = *(void *)(v68 - 8);
      MEMORY[0x270FA5388](v68);
      uint64_t v21 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
      v76 = v14;
      sub_2495B78D0();
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD90);
      v75 = &v57;
      uint64_t v23 = *(void *)(*(void *)(v22 - 8) + 64);
      MEMORY[0x270FA5388](v22 - 8);
      int v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v25 = sub_2495B8030();
      MEMORY[0x270FA5388](v25);
      sub_24957864C((uint64_t)v24, (uint64_t)v24, &qword_2696BFD90);
      uint64_t v26 = sub_2495B6630();
      uint64_t v27 = *(void *)(v26 - 8);
      uint64_t v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v26);
      if (v28 == 1)
      {
        memset(v81, 0, 24);
        v81[24] = 1;
      }
      else
      {
        MEMORY[0x270FA5388](v28);
        int v30 = (char *)&v57 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v30, v24, v26);
        unint64_t v31 = sub_2495B6610();
        std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v31, v32, (std::string *)v81);
        (*(void (**)(char *, uint64_t))(v27 + 8))(v30, v26);
        v81[24] = 0;
        uint64_t v5 = v59;
      }
      sub_2495786B0((uint64_t)v24, &qword_2696BFD90);
      if (v81[24])
      {
        memset(&v78, 0, sizeof(v78));
        std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v78);
        sub_2495786B0((uint64_t)v81, &qword_2696BFD98);
      }
      else
      {
        std::string::basic_string[abi:ne180100]((__n128 *)&v78, (__n128 *)v81);
        std::string::~string((std::string *)v81);
      }
      uint64_t v33 = v76;
      uint64_t v34 = sub_2495B8020();
      if (v35)
      {
        unint64_t v36 = v34;
        unint64_t v37 = v35;
        swift_bridgeObjectRetain();
        std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v36, v37, &v77);
        ctb::bridging::makeOptional((ctb::bridging *)&v77, (uint64_t)v81);
        char v82 = 0;
        swift_bridgeObjectRelease();
        uint64_t v38 = v68;
        uint64_t v39 = v67;
        if ((v82 & 1) == 0)
        {
          std::optional<std::string>::optional[abi:ne180100]((uint64_t)&v77, (__n128 *)v81);
          ctb::chatbot::URIEntry::~URIEntry((void **)v81);
          goto LABEL_18;
        }
      }
      else
      {
        memset(v81, 0, sizeof(v81));
        char v82 = 1;
        uint64_t v38 = v68;
        uint64_t v39 = v67;
      }
      type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___(0);
      uint64_t v41 = v40;
      uint64_t v42 = sub_24958798C((unint64_t *)&qword_2696BF8B8, type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___);
      CxxOptional.init(nilLiteral:)(v41, v42);
      sub_2495786B0((uint64_t)v81, &qword_2696BFBD0);
LABEL_18:
      std::optional<std::string>::optional[abi:ne180100]((uint64_t)v81, (__n128 *)&v77);
      ctb::chatbot::URIEntry::~URIEntry((void **)&v77.__r_.__value_.__l.__data_);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v21, v38);
      std::string::basic_string[abi:ne180100](&v79, (__n128 *)&v78);
      std::string::~string(&v78);
      std::optional<std::string>::optional[abi:ne180100]((uint64_t)v62, (__n128 *)v81);
      ctb::chatbot::URIEntry::~URIEntry((void **)v81);
      ctb::chatbot::Media::Media(v43, (uint64_t)&v79);
      ctb::chatbot::Media::~Media((void **)&v79);
      uint64_t v44 = sub_2495B7890();
      uint64_t v45 = *(void *)(v44 - 8);
      MEMORY[0x270FA5388](v44);
      int v47 = (char *)&v57 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_2495B78A0();
      int v48 = (*(uint64_t (**)(char *, uint64_t))(v45 + 88))(v47, v44);
      if (MEMORY[0x263F2B260] && v48 == *MEMORY[0x263F2B260])
      {
        int v49 = 1;
      }
      else if (MEMORY[0x263F2B268] && v48 == *MEMORY[0x263F2B268])
      {
        int v49 = 2;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v44);
        int v49 = 0;
      }
      std::string v50 = *v61;
      (*v61)(v33, v5);
      v83[0].n128_u32[0] = v70;
      ctb::chatbot::Media::Media(v60, (uint64_t)v81);
      ctb::chatbot::Media::~Media((void **)v81);
      int v84 = v49;
      v50(v72, v5);
      uint64_t v51 = v85;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24959776C(0, *(void *)(v51 + 16) + 1, 1);
        uint64_t v51 = v85;
      }
      unint64_t v53 = *(void *)(v51 + 16);
      unint64_t v52 = *(void *)(v51 + 24);
      if (v53 >= v52 >> 1)
      {
        sub_24959776C(v52 > 1, v53 + 1, 1);
        uint64_t v51 = v85;
      }
      *(void *)(v51 + 16) = v53 + 1;
      ctb::chatbot::MediaEntry::MediaEntry(v51 + 72 * v53 + 32, (uint64_t)v83);
      ctb::chatbot::MediaEntry::~MediaEntry((void **)v83);
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_32;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v51 = MEMORY[0x263F8EE78];
LABEL_32:
  memset(v81, 0, 24);
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](v81);
  uint64_t v54 = *(void *)(v51 + 16);
  if (v54)
  {
    uint64_t v55 = v51 + 32;
    swift_bridgeObjectRetain();
    do
    {
      std::vector<ctb::chatbot::MediaEntry>::push_back[abi:ne180100]((uint64_t *)v81, v55);
      v55 += 72;
      --v54;
    }
    while (v54);
    swift_bridgeObjectRelease();
  }
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v83, (__n128 *)v81);
  std::vector<ctb::chatbot::URIEntry>::~vector[abi:ne180100]((uint64_t)v81, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
  swift_bridgeObjectRelease();
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v58, v83);
  return std::vector<ctb::chatbot::URIEntry>::~vector[abi:ne180100]((uint64_t)v83, (void (*)(uint64_t *))std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100]);
}

void **sub_2495852D8@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  int64_t v3 = a2;
  int64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v33 = a2;
    uint64_t v43 = MEMORY[0x263F8EE78];
    sub_24959778C(0, v4, 0);
    uint64_t v5 = sub_2495B7C50();
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 16);
    uint64_t v37 = v7 + 16;
    uint64_t v38 = v8;
    unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v32 = a1;
    uint64_t v10 = (char *)(a1 + v9);
    uint64_t v11 = *(void *)(v7 + 72);
    uint64_t v35 = *(void *)(v7 + 64);
    uint64_t v36 = v11;
    uint64_t v34 = (void (**)(char *, uint64_t))(v7 + 8);
    do
    {
      uint64_t v39 = &v32;
      uint64_t v12 = v35;
      MEMORY[0x270FA5388](v5);
      uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      unint64_t v14 = v38;
      uint64_t v15 = v38(v13, v10, v6);
      MEMORY[0x270FA5388](v15);
      uint64_t v16 = v14(v13, v13, v6);
      unint64_t v17 = MEMORY[0x24C5A2850](v16);
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v17, v18, &v40);
      uint64_t v19 = sub_2495B7C30();
      uint64_t v20 = *(void *)(v19 - 8);
      MEMORY[0x270FA5388](v19);
      uint64_t v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_2495B7C40();
      int v23 = (*(uint64_t (**)(char *, uint64_t))(v20 + 88))(v22, v19);
      if (MEMORY[0x263F2B4A0] && v23 == *MEMORY[0x263F2B4A0])
      {
        int v24 = 1;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
        int v24 = 0;
      }
      uint64_t v25 = *v34;
      (*v34)(v13, v6);
      std::string::basic_string[abi:ne180100]((__n128 *)&v41, (__n128 *)&v40);
      std::string::~string(&v40);
      int v42 = v24;
      v25(v13, v6);
      uint64_t v26 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24959778C(0, *(void *)(v26 + 16) + 1, 1);
        uint64_t v26 = v43;
      }
      unint64_t v28 = *(void *)(v26 + 16);
      unint64_t v27 = *(void *)(v26 + 24);
      if (v28 >= v27 >> 1)
      {
        sub_24959778C(v27 > 1, v28 + 1, 1);
        uint64_t v26 = v43;
      }
      *(void *)(v26 + 16) = v28 + 1;
      ctb::chatbot::OrgNameEntry::OrgNameEntry((__n128 *)(v26 + 32 * v28 + 32), (__n128 *)&v41);
      ctb::chatbot::OrgNameEntry::~OrgNameEntry(&v41);
      v10 += v36;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    int64_t v3 = v33;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = MEMORY[0x263F8EE78];
  }
  memset(&v40, 0, sizeof(v40));
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v40);
  uint64_t v29 = *(void *)(v26 + 16);
  if (v29)
  {
    int v30 = (long long *)(v26 + 32);
    swift_bridgeObjectRetain();
    do
    {
      std::vector<ctb::chatbot::OrgNameEntry>::push_back[abi:ne180100]((uint64_t *)&v40, v30);
      v30 += 2;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease();
  }
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]((__n128 *)&v41, (__n128 *)&v40);
  std::vector<std::string>::~vector[abi:ne180100]((void **)&v40.__r_.__value_.__l.__data_, (void (*)(void))std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100]);
  swift_bridgeObjectRelease();
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v3, (__n128 *)&v41);
  return std::vector<std::string>::~vector[abi:ne180100]((void **)&v41.__r_.__value_.__l.__data_, (void (*)(void))std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100]);
}

void **sub_2495856B0@<X0>(uint64_t a1@<X0>, std::vector<std::string> *a2@<X8>)
{
  uint64_t v4 = sub_2495B7990();
  std::vector<std::string>::pointer begin = (std::vector<std::string>::pointer)MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v6 = v4;
    int64_t v7 = *(void *)(v4 + 16);
    if (v7)
    {
      uint64_t v26 = a1;
      unint64_t v27 = a2;
      __x.__begin_ = (std::vector<std::string>::pointer)MEMORY[0x263F8EE78];
      sub_2495975C0(0, v7, 0);
      uint64_t isUniquelyReferenced_nonNull_native = sub_2495B7980();
      uint64_t v9 = isUniquelyReferenced_nonNull_native;
      uint64_t v10 = *(void *)(isUniquelyReferenced_nonNull_native - 8);
      uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
      uint64_t v29 = v10 + 16;
      int v30 = v11;
      uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
      v25[1] = v6;
      uint64_t v13 = v6 + ((v12 + 32) & ~v12);
      uint64_t v14 = *(void *)(v10 + 64);
      uint64_t v28 = *(void *)(v10 + 72);
      uint64_t v15 = (void (**)(char *, uint64_t))(v10 + 8);
      do
      {
        MEMORY[0x270FA5388](isUniquelyReferenced_nonNull_native);
        uint64_t v16 = v30((char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v13, v9);
        uint64_t v17 = MEMORY[0x24C5A25A0](v16);
        uint64_t v19 = v18;
        (*v15)((char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
        std::vector<std::string>::pointer begin = __x.__begin_;
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t isUniquelyReferenced_nonNull_native = sub_2495975C0(0, begin->__r_.__value_.__r.__words[2] + 1, 1);
          std::vector<std::string>::pointer begin = __x.__begin_;
        }
        unint64_t v21 = begin->__r_.__value_.__r.__words[2];
        unint64_t v20 = begin[1].__r_.__value_.__r.__words[0];
        if (v21 >= v20 >> 1)
        {
          uint64_t isUniquelyReferenced_nonNull_native = sub_2495975C0(v20 > 1, v21 + 1, 1);
          std::vector<std::string>::pointer begin = __x.__begin_;
        }
        begin->__r_.__value_.__r.__words[2] = v21 + 1;
        uint64_t v22 = (char *)begin + 16 * v21;
        *((void *)v22 + 4) = v17;
        *((void *)v22 + 5) = v19;
        v13 += v28;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease();
      a1 = v26;
      a2 = v27;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  sub_249595B88((uint64_t)begin, &__x);
  uint64_t v23 = sub_2495B79A0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(a1, v23);
  std::vector<std::string>::vector(a2, &__x);
  return std::vector<std::string>::~vector[abi:ne180100]((void **)&__x.__begin_, (void (*)(void))std::vector<std::string>::__clear[abi:ne180100]);
}

uint64_t sub_2495858F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFDC8);
  uint64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_2495B7D10();
  MEMORY[0x270FA5388](v7);
  sub_24957864C((uint64_t)v6, (uint64_t)v6, &qword_2696BFDC8);
  uint64_t v8 = sub_2495B7D90();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8);
  uint64_t v68 = a1;
  if (v10 == 1)
  {
    uint64_t v79 = 0;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    __n128 v73 = 0u;
    long long v74 = 0u;
    char v80 = 1;
  }
  else
  {
    v66 = &v65;
    uint64_t v11 = *(void *)(v9 + 64);
    MEMORY[0x270FA5388](v10);
    uint64_t v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v13 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v12, v6, v8);
    MEMORY[0x270FA5388](v13);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v12, v8);
    uint64_t v14 = sub_2495B7B30();
    MEMORY[0x270FA5388](v14 - 8);
    uint64_t v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7D80();
    sub_249584284((uint64_t)v16, (uint64_t)&v73);
    uint64_t v17 = sub_2495B7D70();
    sub_249584414(v17, v72);
    uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v12, v8);
    ctb::chatbot::TelephoneInformation::TelephoneInformation((uint64_t)v81, (long long *)&v73);
    ctb::chatbot::TelephoneInformation::~TelephoneInformation((void **)&v73);
    std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v82, v72);
    ctb::chatbot::URIEntryList::~URIEntryList((void **)v72);
    __n128 Optional = ctb::bridging::makeOptional((ctb::bridging *)v81, (uint64_t)&v73);
    ((void (*)(char *, uint64_t, __n128))v18)(v12, v8, Optional);
    char v80 = 0;
  }
  sub_2495786B0((uint64_t)v6, &qword_2696BFDC8);
  uint64_t v67 = a2;
  if (v80)
  {
    type metadata accessor for std.__1.optional_CommunicationAddress_(0);
    uint64_t v21 = v20;
    uint64_t v22 = sub_24958798C(&qword_2696BF888, type metadata accessor for std.__1.optional_CommunicationAddress_);
    CxxOptional.init(nilLiteral:)(v21, v22);
    sub_2495786B0((uint64_t)&v73, &qword_2696BFDD0);
  }
  else
  {
    std::optional<ctb::chatbot::CommunicationAddress>::optional[abi:ne180100](v81, &v73);
    std::optional<ctb::chatbot::CommunicationAddress>::~optional(&v73);
  }
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFDD8);
  uint64_t v24 = *(void *)(*(void *)(v23 - 8) + 64);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v25 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_2495B7D20();
  MEMORY[0x270FA5388](v26);
  sub_24957864C((uint64_t)v25, (uint64_t)v25, &qword_2696BFDD8);
  uint64_t v27 = sub_2495B8430();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v25, 1, v27);
  if (v29 == 1)
  {
    __n128 v73 = 0u;
    long long v74 = 0u;
    LOBYTE(v75) = 1;
  }
  else
  {
    MEMORY[0x270FA5388](v29);
    unint64_t v31 = (char *)&v65 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v31, v25, v27);
    uint64_t v32 = sub_2495B7990();
    if (!v32) {
      uint64_t v32 = MEMORY[0x263F8EE78];
    }
    sub_249584A10(v32, v72);
    ctb::bridging::makeOptional((uint64_t *)&v73, (ctb::bridging *)v72, v33);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v27);
    LOBYTE(v75) = 0;
  }
  sub_2495786B0((uint64_t)v25, &qword_2696BFDD8);
  if (v75)
  {
    type metadata accessor for std.__1.optional_MediaList_(0);
    uint64_t v35 = v34;
    uint64_t v36 = sub_24958798C(&qword_2696BF880, type metadata accessor for std.__1.optional_MediaList_);
    CxxOptional.init(nilLiteral:)(v35, v36);
    sub_2495786B0((uint64_t)&v73, &qword_2696BFDE0);
  }
  else
  {
    std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)v72, &v73);
    std::optional<ctb::chatbot::MediaList>::~optional((uint64_t)&v73);
  }
  if (sub_2495B7D00())
  {
    uint64_t v37 = swift_bridgeObjectRetain();
    sub_2495852D8(v37, v71);
    ctb::bridging::makeOptional((uint64_t *)&v73, (ctb::bridging *)v71, v38);
    LOBYTE(v75) = 0;
    swift_bridgeObjectRelease();
    if ((v75 & 1) == 0)
    {
      std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)v71, &v73);
      std::optional<ctb::chatbot::MenuItem>::~optional((uint64_t)&v73, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100]);
      goto LABEL_20;
    }
  }
  else
  {
    __n128 v73 = 0u;
    long long v74 = 0u;
    LOBYTE(v75) = 1;
  }
  type metadata accessor for std.__1.optional_OrgName_(0);
  uint64_t v40 = v39;
  uint64_t v41 = sub_24958798C(&qword_2696BF878, type metadata accessor for std.__1.optional_OrgName_);
  CxxOptional.init(nilLiteral:)(v40, v41);
  sub_2495786B0((uint64_t)&v73, &qword_2696BFDE8);
LABEL_20:
  unint64_t v42 = sub_2495B7CE0();
  sub_249595C64(v42, v43, (uint64_t)v70);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFDF0);
  uint64_t v45 = *(void *)(*(void *)(v44 - 8) + 64);
  MEMORY[0x270FA5388](v44 - 8);
  uint64_t v46 = (char *)&v65 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_2495B7CF0();
  MEMORY[0x270FA5388](v47);
  sub_24957864C((uint64_t)v46, (uint64_t)v46, &qword_2696BFDF0);
  uint64_t v48 = sub_2495B79A0();
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48))(v46, 1, v48);
  if (v50 == 1)
  {
    __n128 v73 = 0u;
    long long v74 = 0u;
    LOBYTE(v75) = 1;
  }
  else
  {
    uint64_t v65 = (uint64_t)&v65;
    v66 = &v65;
    uint64_t v51 = *(void *)(v49 + 64);
    MEMORY[0x270FA5388](v50);
    unint64_t v52 = (v51 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v53 = (*(uint64_t (**)(char *, char *, uint64_t))(v49 + 32))((char *)&v65 - v52, v46, v48);
    MEMORY[0x270FA5388](v53);
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))((char *)&v65 - v52, (char *)&v65 - v52, v48);
    sub_2495856B0((uint64_t)&v65 - v52, &v69);
    ctb::bridging::makeOptional((uint64_t *)&v73, (ctb::bridging *)&v69, v54);
    (*(void (**)(char *, uint64_t))(v49 + 8))((char *)&v65 - v52, v48);
    LOBYTE(v75) = 0;
  }
  uint64_t v55 = v67;
  sub_2495786B0((uint64_t)v46, &qword_2696BFDF0);
  if (v75)
  {
    type metadata accessor for std.__1.optional_CategoryList_(0);
    uint64_t v57 = v56;
    uint64_t v58 = sub_24958798C(&qword_2696BF870, type metadata accessor for std.__1.optional_CategoryList_);
    CxxOptional.init(nilLiteral:)(v57, v58);
    sub_2495786B0((uint64_t)&v73, &qword_2696BFDF8);
  }
  else
  {
    std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)&v69, &v73);
    std::optional<ctb::chatbot::MenuItem>::~optional((uint64_t)&v73, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100]);
  }
  uint64_t v59 = v68;
  type metadata accessor for std.__1.optional_WebResources_(0);
  uint64_t v61 = v60;
  uint64_t v62 = sub_24958798C(&qword_2696BF868, type metadata accessor for std.__1.optional_WebResources_);
  CxxOptional.init(nilLiteral:)(v61, v62);
  uint64_t v63 = sub_2495B7D30();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(v59, v63);
  std::optional<ctb::chatbot::CommunicationAddress>::optional[abi:ne180100](v55, v81);
  std::optional<ctb::chatbot::CommunicationAddress>::~optional(v81);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](v55 + 104, v72);
  std::optional<ctb::chatbot::MediaList>::~optional((uint64_t)v72);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](v55 + 136, v71);
  std::optional<ctb::chatbot::MenuItem>::~optional((uint64_t)v71, (uint64_t)std::vector<ctb::chatbot::OrgNameEntry>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100]);
  std::optional<std::string>::optional[abi:ne180100](v55 + 168, v70);
  ctb::chatbot::URIEntry::~URIEntry((void **)v70);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](v55 + 200, (__n128 *)&v69);
  std::optional<ctb::chatbot::MenuItem>::~optional((uint64_t)&v69, (uint64_t)std::vector<std::string>::__clear[abi:ne180100], (void (*)(uint64_t *))std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100]);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](v55 + 232, &v73);
  return std::optional<ctb::chatbot::WebResources>::~optional((uint64_t)&v73);
}

void sub_24958638C(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFDB8);
  uint64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_2495B7D40();
  MEMORY[0x270FA5388](v7);
  sub_24957864C((uint64_t)v6, (uint64_t)v6, &qword_2696BFDB8);
  uint64_t v8 = sub_2495B7D30();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8);
  if (v10 == 1)
  {
    memset(v22, 0, sizeof(v22));
    char v23 = 1;
  }
  else
  {
    uint64_t v20 = (uint64_t)&v20;
    uint64_t v21 = a2;
    uint64_t v11 = *(void *)(v9 + 64);
    MEMORY[0x270FA5388](v10);
    unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v13 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))((char *)&v20 - v12, v6, v8);
    MEMORY[0x270FA5388](v13);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))((char *)&v20 - v12, (char *)&v20 - v12, v8);
    sub_2495858F8((uint64_t)&v20 - v12, (uint64_t)v24);
    ctb::bridging::makeOptional((uint64_t)v24, v22);
    (*(void (**)(char *, uint64_t))(v9 + 8))((char *)&v20 - v12, v8);
    char v23 = 0;
    a2 = v21;
  }
  sub_2495786B0((uint64_t)v6, &qword_2696BFDB8);
  if (v23)
  {
    type metadata accessor for std.__1.optional_OrgDetails_(0);
    uint64_t v15 = v14;
    uint64_t v16 = sub_24958798C(&qword_2696BF890, type metadata accessor for std.__1.optional_OrgDetails_);
    CxxOptional.init(nilLiteral:)(v15, v16);
    sub_2495786B0((uint64_t)v22, &qword_2696BFDC0);
  }
  else
  {
    std::optional<ctb::chatbot::OrgDetails>::optional[abi:ne180100](v24, (uint64_t)v22);
    std::optional<ctb::chatbot::OrgDetails>::~optional(v22);
  }
  unint64_t v17 = sub_2495B7D50();
  sub_249595C64(v17, v18, (uint64_t)v22);
  uint64_t v19 = sub_2495B7D60();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a1, v19);
  std::optional<ctb::chatbot::OrgDetails>::optional[abi:ne180100](a2, (uint64_t)v24);
  std::optional<ctb::chatbot::OrgDetails>::~optional(v24);
  std::optional<std::string>::optional[abi:ne180100]((uint64_t)(a2 + 272), v22);
  ctb::chatbot::URIEntry::~URIEntry((void **)v22);
}

void **sub_2495866D4@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = sub_2495B7990();
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v6 = v4;
    int64_t v7 = *(void *)(v4 + 16);
    if (v7)
    {
      uint64_t v29 = a1;
      uint64_t v30 = a2;
      uint64_t v37 = MEMORY[0x263F8EE78];
      sub_2495977AC(0, v7, 0);
      uint64_t v8 = sub_2495B7960();
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)(v8 - 8);
      uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
      unint64_t v11 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      uint64_t v28 = v6;
      unint64_t v12 = v6 + v11;
      uint64_t v34 = *(void *)(v10 + 72);
      uint64_t v33 = *(void *)(v10 + 64);
      uint64_t v35 = v10 + 16;
      uint64_t v32 = (void (**)(char *, uint64_t))(v10 + 8);
      unint64_t v31 = (__n128 *)&v39[1];
      do
      {
        uint64_t v13 = v33;
        MEMORY[0x270FA5388](v8);
        uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v15 = v36;
        uint64_t v16 = ((uint64_t (*)(char *, unint64_t, uint64_t))v36)(v14, v12, v9);
        MEMORY[0x270FA5388](v16);
        v15(v14, v14, v9);
        unint64_t v17 = sub_2495B7950();
        std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v17, v18, &v38);
        unint64_t v19 = sub_2495B7940();
        std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v19, v20, &v41);
        uint64_t v21 = *v32;
        (*v32)(v14, v9);
        std::string::basic_string[abi:ne180100]((__n128 *)v39, (__n128 *)&v38);
        std::string::~string(&v38);
        std::string::basic_string[abi:ne180100](v31, (__n128 *)&v41);
        std::string::~string(&v41);
        v21(v14, v9);
        uint64_t v5 = v37;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_2495977AC(0, *(void *)(v5 + 16) + 1, 1);
          uint64_t v5 = v37;
        }
        unint64_t v23 = *(void *)(v5 + 16);
        unint64_t v22 = *(void *)(v5 + 24);
        if (v23 >= v22 >> 1)
        {
          sub_2495977AC(v22 > 1, v23 + 1, 1);
          uint64_t v5 = v37;
        }
        *(void *)(v5 + 16) = v23 + 1;
        ctb::chatbot::AddressEntry::AddressEntry(v5 + 48 * v23 + 32, (long long *)v39);
        ctb::chatbot::AddressEntry::~AddressEntry((void **)&v39[0].__r_.__value_.__l.__data_);
        v12 += v34;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease();
      a2 = v30;
      a1 = v29;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  memset(&v41, 0, sizeof(v41));
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v41);
  uint64_t v24 = *(void *)(v5 + 16);
  if (v24)
  {
    uint64_t v25 = (long long *)(v5 + 32);
    swift_bridgeObjectRetain();
    do
    {
      ctb::chatbot::AddressEntry::AddressEntry(v39, v25);
      char v40 = 0;
      ctb::chatbot::AddressEntry::AddressEntry((uint64_t)&v38, (long long *)v39);
      ctb::chatbot::AddressEntry::~AddressEntry((void **)&v39[0].__r_.__value_.__l.__data_);
      std::vector<ctb::chatbot::AddressEntry>::push_back[abi:ne180100]((int64x2_t *)&v41, (uint64_t)&v38);
      ctb::chatbot::AddressEntry::~AddressEntry((void **)&v38.__r_.__value_.__l.__data_);
      v25 += 3;
      --v24;
    }
    while (v24);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  memset(v39, 0, sizeof(v39));
  char v40 = 1;
  swift_bridgeObjectRelease();
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]((__n128 *)v39, (__n128 *)&v41);
  std::vector<ctb::chatbot::AddressEntry>::~vector[abi:ne180100]((void **)&v41.__r_.__value_.__l.__data_);
  uint64_t v26 = sub_2495B8150();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(a1, v26);
  swift_bridgeObjectRelease();
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a2, (__n128 *)v39);
  return std::vector<ctb::chatbot::AddressEntry>::~vector[abi:ne180100]((void **)&v39[0].__r_.__value_.__l.__data_);
}

uint64_t sub_249586AA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_2495B7D60();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B8180();
  sub_24958638C((uint64_t)v6, v49);
  unint64_t v7 = sub_2495B81D0();
  sub_249595C64(v7, v8, (uint64_t)v48);
  unint64_t v9 = sub_2495B81E0();
  sub_249595C64(v9, v10, (uint64_t)v47);
  unint64_t v11 = sub_2495B81A0();
  sub_249595C64(v11, v12, (uint64_t)v46);
  unint64_t v13 = sub_2495B81B0();
  sub_249595C64(v13, v14, (uint64_t)v45);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD90);
  uint64_t v16 = *(void *)(*(void *)(v15 - 8) + 64);
  MEMORY[0x270FA5388](v15 - 8);
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_2495B8170();
  sub_249595D34((uint64_t)&v37 - v17, (uint64_t)v44);
  MEMORY[0x270FA5388](v18);
  sub_2495B8160();
  sub_249595D34((uint64_t)&v37 - v17, (uint64_t)v43);
  MEMORY[0x270FA5388](v19);
  sub_2495B8190();
  sub_249595D34((uint64_t)&v37 - v17, (uint64_t)v42);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFDA8);
  uint64_t v21 = *(void *)(*(void *)(v20 - 8) + 64);
  MEMORY[0x270FA5388](v20 - 8);
  unint64_t v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_2495B81C0();
  MEMORY[0x270FA5388](v23);
  sub_24957864C((uint64_t)v22, (uint64_t)v22, &qword_2696BFDA8);
  uint64_t v24 = sub_2495B8150();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24);
  if (v26 == 1)
  {
    memset(v39, 0, sizeof(v39));
    char v40 = 1;
  }
  else
  {
    uint64_t v37 = (uint64_t)&v37;
    uint64_t v38 = a2;
    uint64_t v27 = *(void *)(v25 + 64);
    MEMORY[0x270FA5388](v26);
    unint64_t v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v25 + 32))((char *)&v37 - v28, v22, v24);
    MEMORY[0x270FA5388](v29);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))((char *)&v37 - v28, (char *)&v37 - v28, v24);
    sub_2495866D4((uint64_t)&v37 - v28, v41);
    ctb::bridging::makeOptional((uint64_t *)v39, (ctb::bridging *)v41, v30);
    (*(void (**)(char *, uint64_t))(v25 + 8))((char *)&v37 - v28, v24);
    char v40 = 0;
    a2 = v38;
  }
  sub_2495786B0((uint64_t)v22, &qword_2696BFDA8);
  if (v40)
  {
    type metadata accessor for std.__1.optional_AddressEntryList_(0);
    uint64_t v32 = v31;
    uint64_t v33 = sub_24958798C(&qword_2696BF898, type metadata accessor for std.__1.optional_AddressEntryList_);
    CxxOptional.init(nilLiteral:)(v32, v33);
    uint64_t v34 = sub_2495B81F0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(a1, v34);
    sub_2495786B0((uint64_t)v39, &qword_2696BFDB0);
  }
  else
  {
    uint64_t v35 = sub_2495B81F0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8))(a1, v35);
    std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)v41, v39);
    std::optional<ctb::chatbot::WebResources>::~optional((uint64_t)v39);
  }
  ctb::chatbot::PCC::PCC(a2, (uint64_t)v49);
  ctb::chatbot::PCC::~PCC(v49);
  std::optional<std::string>::optional[abi:ne180100](a2 + 304, v48);
  ctb::chatbot::URIEntry::~URIEntry((void **)v48);
  std::optional<std::string>::optional[abi:ne180100](a2 + 336, v47);
  ctb::chatbot::URIEntry::~URIEntry((void **)v47);
  std::optional<std::string>::optional[abi:ne180100](a2 + 368, v46);
  ctb::chatbot::URIEntry::~URIEntry((void **)v46);
  std::optional<std::string>::optional[abi:ne180100](a2 + 400, v45);
  ctb::chatbot::URIEntry::~URIEntry((void **)v45);
  std::optional<std::string>::optional[abi:ne180100](a2 + 432, v44);
  ctb::chatbot::URIEntry::~URIEntry((void **)v44);
  std::optional<std::string>::optional[abi:ne180100](a2 + 464, v43);
  ctb::chatbot::URIEntry::~URIEntry((void **)v43);
  std::optional<std::string>::optional[abi:ne180100](a2 + 496, v42);
  ctb::chatbot::URIEntry::~URIEntry((void **)v42);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](a2 + 528, v41);
  return std::optional<ctb::chatbot::WebResources>::~optional((uint64_t)v41);
}

void sub_249586FD8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_2495B7CD0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B7BC0();
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (MEMORY[0x263F2B4D0] && v8 == *MEMORY[0x263F2B4D0])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = sub_2495B7CC0();
    MEMORY[0x270FA5388](v9);
    unint64_t v11 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v46 = v13;
    uint64_t v47 = v12;
    (*(void (**)(char *, char *))(v13 + 32))(v11, v7);
    LODWORD(v7) = sub_2495B7CB0();
    uint64_t v14 = sub_2495B7C90();
    if (v15)
    {
      unint64_t v16 = v14;
      unint64_t v17 = v15;
      swift_bridgeObjectRetain();
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v16, v17, &v50);
      char v51 = 0;
      swift_bridgeObjectRelease();
      if ((v51 & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]((__n128 *)&v49, (__n128 *)&v50);
        std::string::~string(&v50);
LABEL_12:
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFDA0);
        uint64_t v44 = v40;
        uint64_t v21 = *(void *)(*(void *)(v20 - 8) + 64);
        MEMORY[0x270FA5388](v20 - 8);
        unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v23 = (char *)v40 - v22;
        uint64_t v45 = v11;
        uint64_t v24 = sub_2495B7CA0();
        unint64_t v43 = v40;
        MEMORY[0x270FA5388](v24);
        sub_24957864C((uint64_t)v40 - v22, (uint64_t)v40 - v22, &qword_2696BFDA0);
        uint64_t v25 = sub_2495B6700();
        uint64_t v26 = *(void *)(v25 - 8);
        uint64_t v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48))((char *)v40 - v22, 1, v25);
        if (v27 == 1)
        {
          memset(&v50, 0, sizeof(v50));
          char v51 = 1;
        }
        else
        {
          v40[2] = v40;
          MEMORY[0x270FA5388](v27);
          uint64_t v29 = (char *)v40 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v29, (char *)v40 - v22, v25);
          v40[0] = sub_2495B66E0();
          v40[1] = v40;
          uint64_t v30 = *(void *)(v40[0] - 8);
          MEMORY[0x270FA5388](v40[0]);
          unint64_t v42 = v40;
          uint64_t v32 = (char *)v40 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
          sub_24958D6C0();
          uint64_t v33 = sub_2495B6680();
          int v41 = (int)v7;
          unint64_t v7 = (char *)v33;
          unint64_t v35 = v34;
          (*(void (**)(char *, void))(v30 + 8))(v32, v40[0]);
          unint64_t v36 = (unint64_t)v7;
          LOBYTE(v7) = v41;
          std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v36, v35, &v50);
          (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v25);
          char v51 = 0;
        }
        uint64_t v37 = v45;
        sub_2495786B0((uint64_t)v23, &qword_2696BFDA0);
        if (v51)
        {
          memset(&v48, 0, sizeof(v48));
          std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v48);
          uint64_t v38 = sub_2495B7BD0();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(a1, v38);
          (*(void (**)(char *, uint64_t))(v46 + 8))(v37, v47);
          sub_2495786B0((uint64_t)&v50, &qword_2696BFD98);
        }
        else
        {
          uint64_t v39 = sub_2495B7BD0();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(a1, v39);
          (*(void (**)(char *, uint64_t))(v46 + 8))(v37, v47);
          std::string::basic_string[abi:ne180100]((__n128 *)&v48, (__n128 *)&v50);
          std::string::~string(&v50);
        }
        v50.__r_.__value_.__s.__data_[0] = v7 & 1;
        std::string::basic_string[abi:ne180100]((__n128 *)&v50.__r_.__value_.__r.__words[1], (__n128 *)&v49);
        std::string::~string(&v49);
        std::string::basic_string[abi:ne180100](v52, (__n128 *)&v48);
        std::string::~string(&v48);
        ctb::chatbot::VerificationDetails::VerificationDetails(a2, (uint64_t)&v50);
        ctb::chatbot::VerificationDetails::~VerificationDetails((void **)&v50.__r_.__value_.__l.__data_);
        return;
      }
    }
    else
    {
      memset(&v50, 0, sizeof(v50));
      char v51 = 1;
    }
    memset(&v49, 0, sizeof(v49));
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v49);
    sub_2495786B0((uint64_t)&v50, &qword_2696BFD98);
    goto LABEL_12;
  }
  if (MEMORY[0x263F2B4C8] && v8 == *MEMORY[0x263F2B4C8])
  {
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100]((void *)(a2 + 8));
    *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 32) = 0;
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100]((void *)(a2 + 32));
    *(unsigned char *)a2 = 0;
    uint64_t v18 = sub_2495B7BD0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a1, v18);
  }
  else
  {
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100]((void *)(a2 + 8));
    *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 32) = 0;
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100]((void *)(a2 + 32));
    *(unsigned char *)a2 = 0;
    uint64_t v19 = sub_2495B7BD0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a1, v19);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

void ctb::chatbot::MenuItem::~MenuItem(void **this)
{
  uint64_t v1 = this;
  std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100](&v1, (void (*)(char *))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor);
}

uint64_t ctb::chatbot::PCC::PCC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 264) = 0;
  if (*(unsigned char *)(a2 + 264))
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails,ctb::chatbot::OrgDetails*>((unsigned char *)a1, a2);
    *(unsigned char *)(a1 + 264) = 1;
  }
  *(unsigned char *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 296) = 0;
  if (*(unsigned char *)(a2 + 296))
  {
    long long v4 = *(_OWORD *)(a2 + 272);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = v4;
    *(void *)(a2 + 28std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(a2 + 288) = 0;
    *(void *)(a2 + 272) = 0;
    *(unsigned char *)(a1 + 296) = 1;
  }
  return a1;
}

void *sub_249587790@<X0>(void *a1@<X8>)
{
  return sub_2495879D4(a1);
}

uint64_t sub_249587798(uint64_t a1)
{
  return std::vector<ctb::chatbot::URIEntry>::push_back[abi:ne180100](v1, a1);
}

uint64_t sub_2495877BC(uint64_t a1)
{
  return std::vector<ctb::chatbot::MediaEntry>::push_back[abi:ne180100](v1, a1);
}

uint64_t sub_2495877E0(long long *a1)
{
  return std::vector<ctb::chatbot::OrgNameEntry>::push_back[abi:ne180100](v1, a1);
}

uint64_t sub_24958783C(uint64_t a1)
{
  return std::vector<ctb::chatbot::AddressEntry>::push_back[abi:ne180100](v1, a1);
}

unsigned char *ctb::bridging::makeOptional@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return std::__optional_destruct_base<ctb::chatbot::OrgDetails,false>::__optional_destruct_base[abi:ne180100]<ctb::chatbot::OrgDetails>(a2, a1);
}

uint64_t std::optional<ctb::chatbot::MediaList>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    int64_t v3 = (void **)a1;
    std::vector<ctb::chatbot::MediaEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  return a1;
}

void ctb::chatbot::URIEntryList::~URIEntryList(void **this)
{
  uint64_t v1 = this;
  std::vector<ctb::chatbot::URIEntry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t sub_24958798C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_2495879D4(void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  return std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](result);
}

uint64_t std::vector<ctb::chatbot::URIEntry>::~vector[abi:ne180100](uint64_t a1, void (*a2)(uint64_t *))
{
  uint64_t v4 = a1;
  a2(&v4);
  return a1;
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1, void (*a2)(void))
{
  uint64_t v4 = a1;
  std::vector<ctb::chatbot::OrgNameEntry>::__destroy_vector::operator()[abi:ne180100](&v4, a2);
  return a1;
}

void std::vector<ctb::chatbot::MenuL0Content>::__destroy_vector::operator()[abi:ne180100](void ***a1, void (*a2)(char *))
{
  long long v2 = *a1;
  int64_t v3 = (char *)**a1;
  if (v3)
  {
    uint64_t v5 = (char *)v2[1];
    uint64_t v6 = **a1;
    if (v5 != v3)
    {
      do
      {
        int v8 = v5 - 248;
        a2(v5 - 240);
        uint64_t v5 = v8;
      }
      while (v8 != v3);
      uint64_t v6 = **a1;
    }
    v2[1] = v3;
    operator delete(v6);
  }
}

unsigned char *std::__optional_destruct_base<ctb::chatbot::OrgDetails,false>::__optional_destruct_base[abi:ne180100]<ctb::chatbot::OrgDetails>(unsigned char *a1, uint64_t a2)
{
  uint64_t result = std::__optional_move_base<ctb::chatbot::CommunicationAddress,false>::__optional_move_base[abi:ne180100](a1, (long long *)a2);
  result[104] = 0;
  result[128] = 0;
  if (*(unsigned char *)(a2 + 128))
  {
    *((void *)result + 13) = 0;
    *((void *)result + 14) = 0;
    *((void *)result + 15) = 0;
    *(_OWORD *)(result + 104) = *(_OWORD *)(a2 + 104);
    *((void *)result + 15) = *(void *)(a2 + 120);
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    result[128] = 1;
  }
  result[136] = 0;
  result[160] = 0;
  if (*(unsigned char *)(a2 + 160))
  {
    *((void *)result + 17) = 0;
    *((void *)result + 18) = 0;
    *((void *)result + 19) = 0;
    *(_OWORD *)(result + 136) = *(_OWORD *)(a2 + 136);
    *((void *)result + 19) = *(void *)(a2 + 152);
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 144) = 0;
    *(void *)(a2 + 152) = 0;
    result[160] = 1;
  }
  result[168] = 0;
  result[192] = 0;
  if (*(unsigned char *)(a2 + 192))
  {
    long long v4 = *(_OWORD *)(a2 + 168);
    *((void *)result + 23) = *(void *)(a2 + 184);
    *(_OWORD *)(result + 168) = v4;
    *(void *)(a2 + 176) = 0;
    *(void *)(a2 + 184) = 0;
    *(void *)(a2 + 168) = 0;
    result[192] = 1;
  }
  result[200] = 0;
  result[224] = 0;
  if (*(unsigned char *)(a2 + 224))
  {
    *((void *)result + 25) = 0;
    *((void *)result + 26) = 0;
    *((void *)result + 27) = 0;
    *(_OWORD *)(result + 20std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(_OWORD *)(a2 + 200);
    *((void *)result + 27) = *(void *)(a2 + 216);
    *(void *)(a2 + 20std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(a2 + 208) = 0;
    *(void *)(a2 + 216) = 0;
    result[224] = 1;
  }
  result[232] = 0;
  result[256] = 0;
  if (*(unsigned char *)(a2 + 256))
  {
    *((void *)result + 29) = 0;
    *((void *)result + 3std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *((void *)result + 31) = 0;
    *(_OWORD *)(result + 232) = *(_OWORD *)(a2 + 232);
    *((void *)result + 31) = *(void *)(a2 + 248);
    *(void *)(a2 + 232) = 0;
    *(void *)(a2 + 24std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(a2 + 248) = 0;
    result[256] = 1;
  }
  result[264] = 1;
  return result;
}

uint64_t sub_249587C98@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = sub_2495B7930();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  int v8 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 88))(v7, v4);
  if (MEMORY[0x263F2B310] && v8 == *MEMORY[0x263F2B310])
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = sub_2495B8200();
    unint64_t v22 = &v19;
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(void *)(v10 + 64);
    MEMORY[0x270FA5388](v9);
    uint64_t v20 = a2;
    unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v13 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v10 + 32))((char *)&v19 - v12, v7, v9);
    uint64_t v21 = &v19;
    MEMORY[0x270FA5388](v13);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)&v19 - v12, (char *)&v19 - v12, v9);
    sub_24958BA54((uint64_t)&v19 - v12, v20);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))((char *)&v19 - v12, v9);
  }
  else if (MEMORY[0x263F2B2D0] && v8 == *MEMORY[0x263F2B2D0])
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v7, v4);
    sub_24958AF84(*v7, (uint64_t *)v24);
    ctb::bridging::makeMessageVariant(v24, v23);
    ctb::bridging::makeOptional((uint64_t)v23, (uint64_t)v24);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::optional[abi:ne180100](a2, (uint64_t)v24);
    return std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::~optional((uint64_t)v24);
  }
  else
  {
    type metadata accessor for std.__1.optional_variant____(0);
    uint64_t v16 = v15;
    uint64_t v17 = sub_24958C9F4(&qword_2696BF860, type metadata accessor for std.__1.optional_variant____);
    CxxOptional.init(nilLiteral:)(v16, v17);
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v18(a1, v4);
    return ((uint64_t (*)(uint64_t *, uint64_t))v18)(v7, v4);
  }
}

void sub_249588018(uint64_t a1@<X0>, int *x8_0@<X8>)
{
  uint64_t v4 = sub_2495B7EF0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B7DB0();
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (MEMORY[0x263F2B558] && v8 == *MEMORY[0x263F2B558])
  {
    int v9 = 1;
  }
  else if (MEMORY[0x263F2B560] && v8 == *MEMORY[0x263F2B560])
  {
    int v9 = 2;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    int v9 = 0;
  }
  uint64_t v10 = sub_2495B7DC0();
  if (v10)
  {
    uint64_t v11 = sub_24958C0F4(v10);
    int Optional = ctb::bridging::makeOptional((ctb::bridging *)(v11 & 0x10101), v53);
    swift_bridgeObjectRelease();
    int v52 = Optional;
  }
  else
  {
    type metadata accessor for std.__1.optional_CardTitleStyle_(0);
    uint64_t v14 = v13;
    uint64_t v15 = sub_24958C9F4(&qword_2696BF830, type metadata accessor for std.__1.optional_CardTitleStyle_);
    CxxOptional.init(nilLiteral:)(v14, v15);
    int Optional = v52;
  }
  uint64_t v16 = sub_2495B7DD0();
  if (v16)
  {
    uint64_t v17 = sub_24958C0F4(v16);
    int v18 = ctb::bridging::makeOptional((ctb::bridging *)(v17 & 0x10101), v54);
    swift_bridgeObjectRelease();
    int v47 = v18;
    int v51 = v18;
  }
  else
  {
    type metadata accessor for std.__1.optional_CardDescriptionStyle_(0);
    uint64_t v20 = v19;
    uint64_t v21 = sub_24958C9F4(&qword_2696BF828, type metadata accessor for std.__1.optional_CardDescriptionStyle_);
    CxxOptional.init(nilLiteral:)(v20, v21);
    int v47 = v51;
  }
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD90);
  uint64_t v46 = v42;
  uint64_t v23 = *(void *)(*(void *)(v22 - 8) + 64);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = (char *)v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_2495B7F10();
  MEMORY[0x270FA5388](v25);
  sub_24957864C((uint64_t)v24, (uint64_t)v24, &qword_2696BFD90);
  uint64_t v26 = sub_2495B6630();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v26);
  if (v28 == 1)
  {
    memset(v48, 0, sizeof(v48));
    char v49 = 1;
  }
  else
  {
    int v43 = Optional;
    int v44 = v9;
    uint64_t v45 = x8_0;
    v42[1] = v42;
    uint64_t v29 = *(void *)(v27 + 64);
    MEMORY[0x270FA5388](v28);
    unint64_t v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v27 + 32))((char *)v42 - v30, v24, v26);
    MEMORY[0x270FA5388](v31);
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))((char *)v42 - v30, (char *)v42 - v30, v26);
    unint64_t v32 = sub_2495B6610();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v32, v33, (std::string *)v48);
    unint64_t v34 = *(void (**)(char *, uint64_t))(v27 + 8);
    v34((char *)v42 - v30, v26);
    ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v50, (__n128 *)v48);
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)v48);
    ctb::bridging::makeOptional((uint64_t *)v48, (ctb::bridging *)v50, v35);
    v34((char *)v42 - v30, v26);
    char v49 = 0;
    x8_0 = v45;
    int Optional = v43;
    int v9 = v44;
  }
  sub_2495786B0((uint64_t)v24, &qword_2696BFD90);
  if (v49)
  {
    type metadata accessor for std.__1.optional_CardStyle_(0);
    uint64_t v37 = v36;
    uint64_t v38 = sub_24958C9F4(&qword_2696BF820, type metadata accessor for std.__1.optional_CardStyle_);
    CxxOptional.init(nilLiteral:)(v37, v38);
    uint64_t v39 = sub_2495B7F20();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(a1, v39);
    sub_2495786B0((uint64_t)v48, &qword_2696BFE38);
  }
  else
  {
    uint64_t v40 = sub_2495B7F20();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(a1, v40);
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v50, (__n128 *)v48);
    ctb::chatbot::URIEntry::~URIEntry((void **)v48);
  }
  int v41 = v47;
  *x8_0 = v9;
  x8_0[1] = Optional;
  x8_0[2] = v41;
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)(x8_0 + 4), v50);
  ctb::chatbot::URIEntry::~URIEntry((void **)v50);
}

uint64_t sub_2495885C0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v64 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFE00);
  uint64_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2495B7E80();
  MEMORY[0x270FA5388](v6);
  sub_24957864C((uint64_t)v5, (uint64_t)v5, &qword_2696BFE00);
  uint64_t v7 = sub_2495B8320();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7);
  if (v9 == 1)
  {
    uint64_t v79 = 0;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    __n128 v68 = 0u;
    char v80 = 1;
  }
  else
  {
    uint64_t v10 = a1;
    uint64_t v62 = &v61;
    uint64_t v11 = *(void *)(v8 + 64);
    MEMORY[0x270FA5388](v9);
    unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v13 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))((char *)&v61 - v12, v5, v7);
    MEMORY[0x270FA5388](v13);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)&v61 - v12, (char *)&v61 - v12, v7);
    sub_249588F70((uint64_t)&v61 - v12, (uint64_t)v81);
    ctb::bridging::makeOptional(v81, (uint64_t)&v68);
    (*(void (**)(char *, uint64_t))(v8 + 8))((char *)&v61 - v12, v7);
    char v80 = 0;
    a1 = v10;
  }
  sub_2495786B0((uint64_t)v5, &qword_2696BFE00);
  if (v80)
  {
    type metadata accessor for std.__1.optional_CardMedia_(0);
    uint64_t v15 = v14;
    uint64_t v16 = sub_24958C9F4(&qword_2696BF858, type metadata accessor for std.__1.optional_CardMedia_);
    CxxOptional.init(nilLiteral:)(v15, v16);
    sub_2495786B0((uint64_t)&v68, &qword_2696BFE08);
  }
  else
  {
    std::optional<ctb::chatbot::CardMedia>::optional[abi:ne180100](v81, (uint64_t)&v68);
    std::optional<ctb::chatbot::CardMedia>::~optional(&v68);
  }
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFE10);
  uint64_t v18 = *(void *)(*(void *)(v17 - 8) + 64);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_2495B7F70();
  MEMORY[0x270FA5388](v20);
  sub_24957864C((uint64_t)v19, (uint64_t)v19, &qword_2696BFE10);
  uint64_t v21 = sub_2495B8340();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v21);
  uint64_t v63 = a1;
  if (v23 == 1)
  {
    __n128 v68 = 0u;
    long long v69 = 0u;
    LOBYTE(v7std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 1;
  }
  else
  {
    uint64_t v61 = (uint64_t)&v61;
    uint64_t v62 = &v61;
    uint64_t v24 = *(void *)(v22 + 64);
    MEMORY[0x270FA5388](v23);
    unint64_t v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v22 + 32))((char *)&v61 - v25, v19, v21);
    MEMORY[0x270FA5388](v26);
    uint64_t v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v22 + 16))((char *)&v61 - v25, (char *)&v61 - v25, v21);
    unint64_t v28 = MEMORY[0x24C5A2F60](v27);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v28, v29, (std::string *)&v68);
    unint64_t v30 = *(void (**)(char *, uint64_t))(v22 + 8);
    v30((char *)&v61 - v25, v21);
    ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v67, &v68);
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)&v68);
    ctb::bridging::makeOptional((uint64_t *)&v68, (ctb::bridging *)v67, v31);
    v30((char *)&v61 - v25, v21);
    LOBYTE(v7std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    a1 = v63;
  }
  sub_2495786B0((uint64_t)v19, &qword_2696BFE10);
  if (v70)
  {
    type metadata accessor for std.__1.optional_CardTitle_(0);
    uint64_t v33 = v32;
    uint64_t v34 = sub_24958C9F4(&qword_2696BF850, type metadata accessor for std.__1.optional_CardTitle_);
    CxxOptional.init(nilLiteral:)(v33, v34);
    sub_2495786B0((uint64_t)&v68, &qword_2696BFE18);
  }
  else
  {
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v67, &v68);
    ctb::chatbot::URIEntry::~URIEntry((void **)&v68);
  }
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFE20);
  uint64_t v36 = *(void *)(*(void *)(v35 - 8) + 64);
  MEMORY[0x270FA5388](v35 - 8);
  uint64_t v37 = (char *)&v61 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_2495B7F40();
  MEMORY[0x270FA5388](v38);
  sub_24957864C((uint64_t)v37, (uint64_t)v37, &qword_2696BFE20);
  uint64_t v39 = sub_2495B7BF0();
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48))(v37, 1, v39);
  if (v41 == 1)
  {
    __n128 v68 = 0u;
    long long v69 = 0u;
    LOBYTE(v7std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 1;
  }
  else
  {
    uint64_t v61 = (uint64_t)&v61;
    uint64_t v62 = &v61;
    uint64_t v42 = *(void *)(v40 + 64);
    MEMORY[0x270FA5388](v41);
    unint64_t v43 = (v42 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v44 = (*(uint64_t (**)(char *, char *, uint64_t))(v40 + 32))((char *)&v61 - v43, v37, v39);
    MEMORY[0x270FA5388](v44);
    uint64_t v45 = (*(uint64_t (**)(char *, char *, uint64_t))(v40 + 16))((char *)&v61 - v43, (char *)&v61 - v43, v39);
    unint64_t v46 = MEMORY[0x24C5A2810](v45);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v46, v47, (std::string *)&v68);
    std::string v48 = *(void (**)(char *, uint64_t))(v40 + 8);
    v48((char *)&v61 - v43, v39);
    ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v66, &v68);
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)&v68);
    ctb::bridging::makeOptional((uint64_t *)&v68, (ctb::bridging *)v66, v49);
    v48((char *)&v61 - v43, v39);
    LOBYTE(v7std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    a1 = v63;
  }
  sub_2495786B0((uint64_t)v37, &qword_2696BFE20);
  if (v70)
  {
    type metadata accessor for std.__1.optional_CardDescription_(0);
    uint64_t v51 = v50;
    uint64_t v52 = sub_24958C9F4(&qword_2696BF848, type metadata accessor for std.__1.optional_CardDescription_);
    CxxOptional.init(nilLiteral:)(v51, v52);
    sub_2495786B0((uint64_t)&v68, &qword_2696BFE28);
  }
  else
  {
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v66, &v68);
    ctb::chatbot::URIEntry::~URIEntry((void **)&v68);
  }
  if (!sub_2495B7F50())
  {
    __n128 v68 = 0u;
    long long v69 = 0u;
    LOBYTE(v7std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 1;
    goto LABEL_23;
  }
  uint64_t v53 = swift_bridgeObjectRetain();
  sub_24958AF84(v53, (uint64_t *)v65);
  ctb::bridging::makeOptional((ctb::bridging *)v65, (uint64_t)&v68);
  LOBYTE(v7std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  swift_bridgeObjectRelease();
  if (v70)
  {
LABEL_23:
    type metadata accessor for std.__1.optional_SuggestedChipList_(0);
    uint64_t v56 = v55;
    uint64_t v57 = sub_24958C9F4(&qword_2696BF840, type metadata accessor for std.__1.optional_SuggestedChipList_);
    CxxOptional.init(nilLiteral:)(v56, v57);
    uint64_t v58 = sub_2495B7F80();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8))(a1, v58);
    sub_2495786B0((uint64_t)&v68, &qword_2696BFE30);
    goto LABEL_24;
  }
  uint64_t v54 = sub_2495B7F80();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8))(a1, v54);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)v65, &v68);
  std::optional<ctb::chatbot::SuggestedChipList>::~optional((uint64_t)&v68);
LABEL_24:
  uint64_t v59 = v64;
  std::optional<ctb::chatbot::CardMedia>::optional[abi:ne180100](v64, (uint64_t)v81);
  std::optional<ctb::chatbot::CardMedia>::~optional(v81);
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)(v59 + 184), v67);
  ctb::chatbot::URIEntry::~URIEntry((void **)v67);
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)(v59 + 216), v66);
  ctb::chatbot::URIEntry::~URIEntry((void **)v66);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)(v59 + 248), v65);
  return std::optional<ctb::chatbot::SuggestedChipList>::~optional((uint64_t)v65);
}

void sub_249588F70(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_2495B6630();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B8310();
  unint64_t v8 = sub_2495B6610();
  unint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v8, v10, &v39);
  unint64_t v11 = sub_2495B82B0();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v11, v12, &v38);
  uint64_t v13 = sub_2495B82A0();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD90);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B8290();
  sub_249595D34((uint64_t)v16, (uint64_t)v37);
  unint64_t v17 = sub_2495B82E0();
  sub_249595C64(v17, v18, (uint64_t)v36);
  uint64_t v19 = (ctb::bridging *)sub_2495B82C0();
  sub_24958A4EC(v19, v20 & 1);
  uint64_t v22 = v21;
  char v24 = v23 & 1;
  uint64_t v25 = sub_2495B82F0();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  unint64_t v28 = (char *)&v34 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B8300();
  int v29 = (*(uint64_t (**)(char *, uint64_t))(v26 + 88))(v28, v25);
  if (MEMORY[0x263F2B760] && v29 == *MEMORY[0x263F2B760])
  {
    int v30 = 1;
  }
  else if (MEMORY[0x263F2B768] && v29 == *MEMORY[0x263F2B768])
  {
    int v30 = 2;
  }
  else if (MEMORY[0x263F2B758] && v29 == *MEMORY[0x263F2B758])
  {
    int v30 = 3;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
    int v30 = 0;
  }
  unint64_t v31 = sub_2495B82D0();
  sub_249595C64(v31, v32, (uint64_t)v35);
  uint64_t v33 = sub_2495B8320();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(a1, v33);
  std::string::basic_string[abi:ne180100]((__n128 *)a2, (__n128 *)&v39);
  std::string::~string(&v39);
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 24), (__n128 *)&v38);
  std::string::~string(&v38);
  *(void *)(a2 + 48) = v13;
  std::optional<std::string>::optional[abi:ne180100](a2 + 56, v37);
  ctb::chatbot::URIEntry::~URIEntry((void **)v37);
  std::optional<std::string>::optional[abi:ne180100](a2 + 88, v36);
  ctb::chatbot::URIEntry::~URIEntry((void **)v36);
  *(void *)(a2 + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v22;
  *(unsigned char *)(a2 + 128) = v24;
  *(_DWORD *)(a2 + 136) = v30;
  std::optional<std::string>::optional[abi:ne180100](a2 + 144, v35);
  ctb::chatbot::URIEntry::~URIEntry((void **)v35);
}

void **sub_2495892E4@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = sub_2495B7F20();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B7F30();
  sub_249588018((uint64_t)v6, (int *)v43);
  uint64_t v7 = sub_2495B7F90();
  int64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v28 = a1;
    int v29 = a2;
    v37[0] = MEMORY[0x263F8EE78];
    sub_2495975E0(0, v8, 0);
    uint64_t v9 = sub_2495B7F80();
    uint64_t v33 = v9;
    uint64_t v10 = *(void *)(v9 - 8);
    unint64_t v11 = *(uint64_t (**)(void, void, void))(v10 + 16);
    uint64_t v34 = v10 + 16;
    uint64_t v35 = v11;
    unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v27[1] = v7;
    unint64_t v13 = v7 + v12;
    uint64_t v14 = *(void *)(v10 + 72);
    uint64_t v31 = *(void *)(v10 + 64);
    uint64_t v32 = v14;
    int v30 = (void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v15 = v9;
    uint64_t v16 = (uint64_t (*)(char *, unint64_t, uint64_t))v11;
    do
    {
      uint64_t v36 = v27;
      uint64_t v17 = v31;
      MEMORY[0x270FA5388](v9);
      unint64_t v18 = (char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v19 = v16(v18, v13, v15);
      MEMORY[0x270FA5388](v19);
      v16(v18, (unint64_t)v18, v15);
      sub_2495885C0((uint64_t)v18, v38);
      (*v30)(v18, v15);
      uint64_t v20 = v37[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2495975E0(0, *(void *)(v20 + 16) + 1, 1);
        uint64_t v20 = v37[0];
      }
      unint64_t v22 = *(void *)(v20 + 16);
      unint64_t v21 = *(void *)(v20 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_2495975E0(v21 > 1, v22 + 1, 1);
        uint64_t v20 = v37[0];
      }
      *(void *)(v20 + 16) = v22 + 1;
      ctb::chatbot::CardCarouselContent::CardCarouselContent(v20 + 280 * v22 + 32, (uint64_t)v38);
      uint64_t v9 = std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>((uint64_t)v38);
      v13 += v32;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    a1 = v28;
    a2 = v29;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = MEMORY[0x263F8EE78];
  }
  __n128 v41 = 0uLL;
  uint64_t v42 = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v41);
  uint64_t v23 = *(void *)(v20 + 16);
  if (v23)
  {
    uint64_t v24 = v20 + 32;
    swift_bridgeObjectRetain();
    do
    {
      ctb::chatbot::CardCarouselContent::CardCarouselContent((std::string *)v38, v24);
      char v40 = 0;
      ctb::chatbot::CardCarouselContent::CardCarouselContent((uint64_t)v37, (uint64_t)v38);
      std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>((uint64_t)v38);
      std::vector<ctb::chatbot::CardCarouselContent>::push_back[abi:ne180100]((uint64_t *)&v41, (uint64_t)v37);
      std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>((uint64_t)v37);
      v24 += 280;
      --v23;
    }
    while (v23);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v39 = 0;
  memset(v38, 0, sizeof(v38));
  char v40 = 1;
  swift_bridgeObjectRelease();
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]((__n128 *)v38, &v41);
  std::vector<ctb::chatbot::CardCarouselContent>::~vector[abi:ne180100]((void **)&v41);
  uint64_t v25 = sub_2495B7FA0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(a1, v25);
  swift_bridgeObjectRelease();
  ctb::chatbot::CardCarouselLayout::CardCarouselLayout((uint64_t)a2, v43);
  ctb::chatbot::CardLayout::~CardLayout((uint64_t)v43);
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a2 + 3, (__n128 *)v38);
  return std::vector<ctb::chatbot::CardCarouselContent>::~vector[abi:ne180100]((void **)v38);
}

void sub_2495896C8(uint64_t a1@<X0>, uint64_t x8_0@<X8>)
{
  uint64_t v4 = sub_2495B7E00();
  if (v4)
  {
    uint64_t v5 = sub_24958C0F4(v4);
    int Optional = ctb::bridging::makeOptional((ctb::bridging *)(v5 & 0x10101), v45);
    swift_bridgeObjectRelease();
    int v44 = Optional;
  }
  else
  {
    type metadata accessor for std.__1.optional_CardTitleStyle_(0);
    uint64_t v8 = v7;
    uint64_t v9 = sub_24958C9F4(&qword_2696BF830, type metadata accessor for std.__1.optional_CardTitleStyle_);
    CxxOptional.init(nilLiteral:)(v8, v9);
    int Optional = v44;
  }
  uint64_t v10 = sub_2495B7DC0();
  if (v10)
  {
    uint64_t v11 = sub_24958C0F4(v10);
    int v12 = ctb::bridging::makeOptional((ctb::bridging *)(v11 & 0x10101), v46);
    swift_bridgeObjectRelease();
    int v43 = v12;
  }
  else
  {
    type metadata accessor for std.__1.optional_CardDescriptionStyle_(0);
    uint64_t v14 = v13;
    uint64_t v15 = sub_24958C9F4(&qword_2696BF828, type metadata accessor for std.__1.optional_CardDescriptionStyle_);
    CxxOptional.init(nilLiteral:)(v14, v15);
    int v12 = v43;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD90);
  uint64_t v39 = &v35;
  uint64_t v17 = *(void *)(*(void *)(v16 - 8) + 64);
  MEMORY[0x270FA5388](v16 - 8);
  unint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_2495B7E20();
  MEMORY[0x270FA5388](v19);
  sub_24957864C((uint64_t)v18, (uint64_t)v18, &qword_2696BFD90);
  uint64_t v20 = sub_2495B6630();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v18, 1, v20);
  if (v22 == 1)
  {
    memset(v40, 0, sizeof(v40));
    char v41 = 1;
  }
  else
  {
    int v36 = v12;
    int v37 = Optional;
    uint64_t v38 = x8_0;
    uint64_t v35 = (uint64_t)&v35;
    uint64_t v23 = *(void *)(v21 + 64);
    MEMORY[0x270FA5388](v22);
    unint64_t v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))((char *)&v35 - v24, v18, v20);
    MEMORY[0x270FA5388](v25);
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))((char *)&v35 - v24, (char *)&v35 - v24, v20);
    unint64_t v26 = sub_2495B6610();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v26, v27, (std::string *)v40);
    uint64_t v28 = *(void (**)(char *, uint64_t))(v21 + 8);
    v28((char *)&v35 - v24, v20);
    ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v42, (__n128 *)v40);
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)v40);
    ctb::bridging::makeOptional((uint64_t *)v40, (ctb::bridging *)v42, v29);
    v28((char *)&v35 - v24, v20);
    char v41 = 0;
    x8_0 = v38;
    int v12 = v36;
    int Optional = v37;
  }
  sub_2495786B0((uint64_t)v18, &qword_2696BFD90);
  if (v41)
  {
    type metadata accessor for std.__1.optional_CardStyle_(0);
    uint64_t v31 = v30;
    uint64_t v32 = sub_24958C9F4(&qword_2696BF820, type metadata accessor for std.__1.optional_CardStyle_);
    CxxOptional.init(nilLiteral:)(v31, v32);
    uint64_t v33 = sub_2495B7E30();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(a1, v33);
    sub_2495786B0((uint64_t)v40, &qword_2696BFE38);
  }
  else
  {
    uint64_t v34 = sub_2495B7E30();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(a1, v34);
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v42, (__n128 *)v40);
    ctb::chatbot::URIEntry::~URIEntry((void **)v40);
  }
  *(void *)x8_0 = 1;
  *(_DWORD *)(x8_0 + 8) = Optional;
  *(_DWORD *)(x8_0 + 12) = v12;
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](x8_0 + 16, v42);
  ctb::chatbot::URIEntry::~URIEntry((void **)v42);
}

void sub_249589B70(uint64_t a1@<X0>, _DWORD *x8_0@<X8>)
{
  uint64_t v4 = sub_2495B7DA0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B7DB0();
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (MEMORY[0x263F2B500] && v8 == *MEMORY[0x263F2B500])
  {
    int v9 = 1;
  }
  else if (MEMORY[0x263F2B508] && v8 == *MEMORY[0x263F2B508])
  {
    int v9 = 2;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    int v9 = 0;
  }
  uint64_t v10 = sub_2495B7DC0();
  if (v10)
  {
    uint64_t v11 = sub_24958C0F4(v10);
    int Optional = ctb::bridging::makeOptional((ctb::bridging *)(v11 & 0x10101), v52);
    swift_bridgeObjectRelease();
    int v51 = Optional;
  }
  else
  {
    type metadata accessor for std.__1.optional_CardTitleStyle_(0);
    uint64_t v14 = v13;
    uint64_t v15 = sub_24958C9F4(&qword_2696BF830, type metadata accessor for std.__1.optional_CardTitleStyle_);
    CxxOptional.init(nilLiteral:)(v14, v15);
    int Optional = v51;
  }
  uint64_t v16 = sub_2495B7DD0();
  if (v16)
  {
    uint64_t v17 = sub_24958C0F4(v16);
    int v18 = ctb::bridging::makeOptional((ctb::bridging *)(v17 & 0x10101), v53);
    swift_bridgeObjectRelease();
    int v50 = v18;
  }
  else
  {
    type metadata accessor for std.__1.optional_CardDescriptionStyle_(0);
    uint64_t v20 = v19;
    uint64_t v21 = sub_24958C9F4(&qword_2696BF828, type metadata accessor for std.__1.optional_CardDescriptionStyle_);
    CxxOptional.init(nilLiteral:)(v20, v21);
    int v18 = v50;
  }
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD90);
  CardTitleStyle v45 = v41;
  uint64_t v23 = *(void *)(*(void *)(v22 - 8) + 64);
  MEMORY[0x270FA5388](v22 - 8);
  unint64_t v24 = (char *)v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_2495B7DE0();
  CardTitleStyle v46 = v41;
  MEMORY[0x270FA5388](v25);
  sub_24957864C((uint64_t)v24, (uint64_t)v24, &qword_2696BFD90);
  uint64_t v26 = sub_2495B6630();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v26);
  if (v28 == 1)
  {
    memset(v47, 0, sizeof(v47));
    char v48 = 1;
  }
  else
  {
    int v42 = v18;
    int v43 = Optional;
    int v44 = v9;
    v41[1] = v41;
    uint64_t v29 = *(void *)(v27 + 64);
    MEMORY[0x270FA5388](v28);
    unint64_t v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v27 + 32))((char *)v41 - v30, v24, v26);
    MEMORY[0x270FA5388](v31);
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))((char *)v41 - v30, (char *)v41 - v30, v26);
    unint64_t v32 = sub_2495B6610();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v32, v33, (std::string *)v47);
    uint64_t v34 = *(void (**)(char *, uint64_t))(v27 + 8);
    v34((char *)v41 - v30, v26);
    ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v49, (__n128 *)v47);
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)v47);
    ctb::bridging::makeOptional((uint64_t *)v47, (ctb::bridging *)v49, v35);
    v34((char *)v41 - v30, v26);
    char v48 = 0;
    int Optional = v43;
    int v9 = v44;
    int v18 = v42;
  }
  sub_2495786B0((uint64_t)v24, &qword_2696BFD90);
  if (v48)
  {
    type metadata accessor for std.__1.optional_CardStyle_(0);
    uint64_t v37 = v36;
    uint64_t v38 = sub_24958C9F4(&qword_2696BF820, type metadata accessor for std.__1.optional_CardStyle_);
    CxxOptional.init(nilLiteral:)(v37, v38);
    uint64_t v39 = sub_2495B7DF0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(a1, v39);
    sub_2495786B0((uint64_t)v47, &qword_2696BFE38);
  }
  else
  {
    uint64_t v40 = sub_2495B7DF0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(a1, v40);
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v49, (__n128 *)v47);
    ctb::chatbot::URIEntry::~URIEntry((void **)v47);
  }
  *x8_0 = 2;
  x8_0[1] = v9;
  x8_0[2] = Optional;
  x8_0[3] = v18;
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)(x8_0 + 4), v49);
  ctb::chatbot::URIEntry::~URIEntry((void **)v49);
}

uint64_t sub_24958A114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_2495B7E40();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (MEMORY[0x263F2B538] && v8 == *MEMORY[0x263F2B538])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = sub_2495B7E30();
    uint64_t v19 = &v18;
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(void *)(v10 + 64);
    MEMORY[0x270FA5388](v9);
    int v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v13 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v12, v7, v9);
    uint64_t v18 = (uint64_t)&v18;
    MEMORY[0x270FA5388](v13);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v12, v9);
    sub_2495896C8((uint64_t)v12, a2);
LABEL_7:
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  if (MEMORY[0x263F2B520] && v8 == *MEMORY[0x263F2B520])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = sub_2495B7DF0();
    uint64_t v19 = &v18;
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v14 = *(void *)(v10 + 64);
    MEMORY[0x270FA5388](v9);
    int v12 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v12, v7, v9);
    uint64_t v18 = (uint64_t)&v18;
    MEMORY[0x270FA5388](v15);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v12, v9);
    sub_249589B70((uint64_t)v12, (_DWORD *)a2);
    goto LABEL_7;
  }
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  ctb::chatbot::CardLayout::CardLayout(a2);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v17(a1, v4);
  return ((uint64_t (*)(char *, uint64_t))v17)(v7, v4);
}

void sub_24958A4EC(ctb::bridging *a1, char a2)
{
  if (a2)
  {
    type metadata accessor for std.__1.optional_CUnsignedLong_(0);
    uint64_t v3 = v2;
    uint64_t v4 = sub_24958C9F4(&qword_2696BF838, type metadata accessor for std.__1.optional_CUnsignedLong_);
    CxxOptional.init(nilLiteral:)(v3, v4);
  }
  else if (((unint64_t)a1 & 0x8000000000000000) != 0)
  {
    sub_2495B88C0();
    __break(1u);
  }
  else
  {
    ctb::bridging::makeOptional(a1);
  }
}

uint64_t sub_24958A5D4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v64 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFE00);
  uint64_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2495B7E80();
  MEMORY[0x270FA5388](v6);
  sub_24957864C((uint64_t)v5, (uint64_t)v5, &qword_2696BFE00);
  uint64_t v7 = sub_2495B8320();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7);
  if (v9 == 1)
  {
    uint64_t v79 = 0;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    __n128 v68 = 0u;
    char v80 = 1;
  }
  else
  {
    uint64_t v10 = a1;
    uint64_t v62 = &v61;
    uint64_t v11 = *(void *)(v8 + 64);
    MEMORY[0x270FA5388](v9);
    unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v13 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))((char *)&v61 - v12, v5, v7);
    MEMORY[0x270FA5388](v13);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)&v61 - v12, (char *)&v61 - v12, v7);
    sub_249588F70((uint64_t)&v61 - v12, (uint64_t)v81);
    ctb::bridging::makeOptional(v81, (uint64_t)&v68);
    (*(void (**)(char *, uint64_t))(v8 + 8))((char *)&v61 - v12, v7);
    char v80 = 0;
    a1 = v10;
  }
  sub_2495786B0((uint64_t)v5, &qword_2696BFE00);
  if (v80)
  {
    type metadata accessor for std.__1.optional_CardMedia_(0);
    uint64_t v15 = v14;
    uint64_t v16 = sub_24958C9F4(&qword_2696BF858, type metadata accessor for std.__1.optional_CardMedia_);
    CxxOptional.init(nilLiteral:)(v15, v16);
    sub_2495786B0((uint64_t)&v68, &qword_2696BFE08);
  }
  else
  {
    std::optional<ctb::chatbot::CardMedia>::optional[abi:ne180100](v81, (uint64_t)&v68);
    std::optional<ctb::chatbot::CardMedia>::~optional(&v68);
  }
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFE10);
  uint64_t v18 = *(void *)(*(void *)(v17 - 8) + 64);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_2495B7E90();
  MEMORY[0x270FA5388](v20);
  sub_24957864C((uint64_t)v19, (uint64_t)v19, &qword_2696BFE10);
  uint64_t v21 = sub_2495B8340();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v21);
  uint64_t v63 = a1;
  if (v23 == 1)
  {
    __n128 v68 = 0u;
    long long v69 = 0u;
    LOBYTE(v7std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 1;
  }
  else
  {
    uint64_t v61 = (uint64_t)&v61;
    uint64_t v62 = &v61;
    uint64_t v24 = *(void *)(v22 + 64);
    MEMORY[0x270FA5388](v23);
    unint64_t v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v22 + 32))((char *)&v61 - v25, v19, v21);
    MEMORY[0x270FA5388](v26);
    uint64_t v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v22 + 16))((char *)&v61 - v25, (char *)&v61 - v25, v21);
    unint64_t v28 = MEMORY[0x24C5A2F60](v27);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v28, v29, (std::string *)&v68);
    unint64_t v30 = *(void (**)(char *, uint64_t))(v22 + 8);
    v30((char *)&v61 - v25, v21);
    ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v67, &v68);
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)&v68);
    ctb::bridging::makeOptional((uint64_t *)&v68, (ctb::bridging *)v67, v31);
    v30((char *)&v61 - v25, v21);
    LOBYTE(v7std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    a1 = v63;
  }
  sub_2495786B0((uint64_t)v19, &qword_2696BFE10);
  if (v70)
  {
    type metadata accessor for std.__1.optional_CardTitle_(0);
    uint64_t v33 = v32;
    uint64_t v34 = sub_24958C9F4(&qword_2696BF850, type metadata accessor for std.__1.optional_CardTitle_);
    CxxOptional.init(nilLiteral:)(v33, v34);
    sub_2495786B0((uint64_t)&v68, &qword_2696BFE18);
  }
  else
  {
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v67, &v68);
    ctb::chatbot::URIEntry::~URIEntry((void **)&v68);
  }
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFE20);
  uint64_t v36 = *(void *)(*(void *)(v35 - 8) + 64);
  MEMORY[0x270FA5388](v35 - 8);
  uint64_t v37 = (char *)&v61 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_2495B7E60();
  MEMORY[0x270FA5388](v38);
  sub_24957864C((uint64_t)v37, (uint64_t)v37, &qword_2696BFE20);
  uint64_t v39 = sub_2495B7BF0();
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48))(v37, 1, v39);
  if (v41 == 1)
  {
    __n128 v68 = 0u;
    long long v69 = 0u;
    LOBYTE(v7std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 1;
  }
  else
  {
    uint64_t v61 = (uint64_t)&v61;
    uint64_t v62 = &v61;
    uint64_t v42 = *(void *)(v40 + 64);
    MEMORY[0x270FA5388](v41);
    unint64_t v43 = (v42 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v44 = (*(uint64_t (**)(char *, char *, uint64_t))(v40 + 32))((char *)&v61 - v43, v37, v39);
    MEMORY[0x270FA5388](v44);
    uint64_t v45 = (*(uint64_t (**)(char *, char *, uint64_t))(v40 + 16))((char *)&v61 - v43, (char *)&v61 - v43, v39);
    unint64_t v46 = MEMORY[0x24C5A2810](v45);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v46, v47, (std::string *)&v68);
    char v48 = *(void (**)(char *, uint64_t))(v40 + 8);
    v48((char *)&v61 - v43, v39);
    ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v66, &v68);
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)&v68);
    ctb::bridging::makeOptional((uint64_t *)&v68, (ctb::bridging *)v66, v49);
    v48((char *)&v61 - v43, v39);
    LOBYTE(v7std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    a1 = v63;
  }
  sub_2495786B0((uint64_t)v37, &qword_2696BFE20);
  if (v70)
  {
    type metadata accessor for std.__1.optional_CardDescription_(0);
    uint64_t v51 = v50;
    uint64_t v52 = sub_24958C9F4(&qword_2696BF848, type metadata accessor for std.__1.optional_CardDescription_);
    CxxOptional.init(nilLiteral:)(v51, v52);
    sub_2495786B0((uint64_t)&v68, &qword_2696BFE28);
  }
  else
  {
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v66, &v68);
    ctb::chatbot::URIEntry::~URIEntry((void **)&v68);
  }
  if (!sub_2495B7E70())
  {
    __n128 v68 = 0u;
    long long v69 = 0u;
    LOBYTE(v7std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 1;
    goto LABEL_23;
  }
  uint64_t v53 = swift_bridgeObjectRetain();
  sub_24958AF84(v53, (uint64_t *)v65);
  ctb::bridging::makeOptional((ctb::bridging *)v65, (uint64_t)&v68);
  LOBYTE(v7std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  swift_bridgeObjectRelease();
  if (v70)
  {
LABEL_23:
    type metadata accessor for std.__1.optional_SuggestedChipList_(0);
    uint64_t v56 = v55;
    uint64_t v57 = sub_24958C9F4(&qword_2696BF840, type metadata accessor for std.__1.optional_SuggestedChipList_);
    CxxOptional.init(nilLiteral:)(v56, v57);
    uint64_t v58 = sub_2495B7EA0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8))(a1, v58);
    sub_2495786B0((uint64_t)&v68, &qword_2696BFE30);
    goto LABEL_24;
  }
  uint64_t v54 = sub_2495B7EA0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8))(a1, v54);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)v65, &v68);
  std::optional<ctb::chatbot::SuggestedChipList>::~optional((uint64_t)&v68);
LABEL_24:
  uint64_t v59 = v64;
  std::optional<ctb::chatbot::CardMedia>::optional[abi:ne180100](v64, (uint64_t)v81);
  std::optional<ctb::chatbot::CardMedia>::~optional(v81);
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)(v59 + 184), v67);
  ctb::chatbot::URIEntry::~URIEntry((void **)v67);
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)(v59 + 216), v66);
  ctb::chatbot::URIEntry::~URIEntry((void **)v66);
  std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)(v59 + 248), v65);
  return std::optional<ctb::chatbot::SuggestedChipList>::~optional((uint64_t)v65);
}

uint64_t sub_24958AF84@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a2);
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = sub_2495B78F0();
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v85 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v60[1] = a1;
    uint64_t v9 = a1 + v8;
    uint64_t v63 = v7 + 16;
    uint64_t v64 = (void (**)(char *, uint64_t))(v7 + 96);
    uint64_t v61 = &v96;
    uint64_t v62 = &v93[2];
    uint64_t v80 = *(void *)(v7 + 72);
    v81 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v83 = *(void *)(v7 + 64);
    int v84 = (uint64_t (**)(char *, uint64_t))(v7 + 88);
    char v82 = a2;
    uint64_t v79 = v5;
    do
    {
      uint64_t v10 = v83;
      MEMORY[0x270FA5388](v5);
      uint64_t v11 = (char *)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      unint64_t v12 = v85;
      uint64_t v13 = ((uint64_t (*)(char *, uint64_t, uint64_t))v85)(v11, v9, v6);
      v86 = v60;
      MEMORY[0x270FA5388](v13);
      uint64_t v14 = v11;
      v88 = v11;
      v12(v11, v11, v6);
      int v15 = (*v84)(v11, v6);
      v87 = v60;
      if (MEMORY[0x263F2B2A8] && v15 == *MEMORY[0x263F2B2A8])
      {
        (*v64)(v11, v6);
        uint64_t v16 = sub_2495B8060();
        long long v78 = v60;
        uint64_t v17 = *(void *)(v16 - 8);
        uint64_t v18 = *(void *)(v17 + 64);
        MEMORY[0x270FA5388](v16);
        unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))((char *)v60 - v19, v14, v16);
        long long v74 = v60;
        MEMORY[0x270FA5388](v20);
        long long v75 = (char *)v60 - v19;
        long long v76 = (void *)v17;
        uint64_t v21 = *(uint64_t (**)(char *, char *, uint64_t))(v17 + 16);
        uint64_t v22 = v21((char *)v60 - v19, (char *)v60 - v19, v16);
        long long v72 = v60;
        MEMORY[0x270FA5388](v22);
        long long v73 = (char *)v60 - v19;
        long long v77 = (void *)v16;
        v21(v73, v73, v16);
        uint64_t v69 = sub_2495B7C80();
        long long v70 = v60;
        uint64_t v68 = *(void *)(v69 - 8);
        MEMORY[0x270FA5388](v69);
        uint64_t v24 = (char *)v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
        long long v71 = (char *)v60 - v19;
        uint64_t v25 = sub_2495B8050();
        unint64_t v26 = MEMORY[0x24C5A2890](v25);
        std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v26, v27, &v92);
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFE48);
        v66 = v60;
        uint64_t v29 = *(void *)(*(void *)(v28 - 8) + 64);
        MEMORY[0x270FA5388](v28 - 8);
        unint64_t v30 = (char *)v60 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v67 = v24;
        uint64_t v31 = sub_2495B7C70();
        uint64_t v65 = v60;
        MEMORY[0x270FA5388](v31);
        sub_24957864C((uint64_t)v30, (uint64_t)v30, &qword_2696BFE48);
        uint64_t v32 = sub_2495B8220();
        uint64_t v33 = *(void *)(v32 - 8);
        uint64_t v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48))(v30, 1, v32);
        if (v34 == 1)
        {
          memset(v89, 0, sizeof(v89));
          char v90 = 1;
        }
        else
        {
          __n128 v60[2] = v60;
          uint64_t v46 = *(void *)(v33 + 64);
          MEMORY[0x270FA5388](v34);
          unint64_t v47 = (v46 + 15) & 0xFFFFFFFFFFFFFFF0;
          uint64_t v48 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 32))((char *)v60 - v47, v30, v32);
          v60[3] = v60;
          MEMORY[0x270FA5388](v48);
          uint64_t v49 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 16))((char *)v60 - v47, (char *)v60 - v47, v32);
          unint64_t v50 = MEMORY[0x24C5A2E40](v49);
          std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v50, v51, (std::string *)v89);
          uint64_t v52 = *(void (**)(char *, uint64_t))(v33 + 8);
          v52((char *)v60 - v47, v32);
          ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v91, (__n128 *)v89);
          ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)v89);
          ctb::bridging::makeOptional((uint64_t *)v89, (ctb::bridging *)v91, v53);
          v52((char *)v60 - v47, v32);
          char v90 = 0;
        }
        unint64_t v43 = v82;
        uint64_t v6 = v79;
        sub_2495786B0((uint64_t)v30, &qword_2696BFE48);
        if (v90)
        {
          type metadata accessor for std.__1.optional_PostbackData_(0);
          uint64_t v55 = v54;
          uint64_t v56 = sub_24958C9F4(&qword_2696BF8A0, type metadata accessor for std.__1.optional_PostbackData_);
          CxxOptional.init(nilLiteral:)(v55, v56);
          (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v69);
          sub_2495786B0((uint64_t)v89, &qword_2696BFE50);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v69);
          std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v91, (__n128 *)v89);
          ctb::chatbot::URIEntry::~URIEntry((void **)v89);
        }
        std::string::basic_string[abi:ne180100](&v95, (__n128 *)&v92);
        std::string::~string(&v92);
        std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v61, v91);
        ctb::chatbot::URIEntry::~URIEntry((void **)v91);
        uint64_t v57 = v77;
        uint64_t v58 = (void (*)(char *, void *))v76[1];
        v58(v71, v77);
        ctb::chatbot::Media::Media((__n128 *)v89, (uint64_t)&v95);
        ctb::chatbot::Media::~Media((void **)&v95);
        ctb::bridging::makeSuggestedChipVariant((uint64_t)v89, (uint64_t)&v95);
        v58(v73, v57);
        v93[0] = 1;
        std::variant<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>::variant[abi:ne180100](v62, &v95);
        std::variant<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>::~variant[abi:ne180100](&v95);
        (*v81)(v88, v6);
        v58(v75, v57);
      }
      else if (MEMORY[0x263F2B2B8] && v15 == *MEMORY[0x263F2B2B8])
      {
        (*v64)(v11, v6);
        uint64_t v35 = sub_2495B80A0();
        long long v77 = v60;
        uint64_t v36 = *(void *)(v35 - 8);
        uint64_t v37 = *(void *)(v36 + 64);
        MEMORY[0x270FA5388](v35);
        uint64_t v38 = (void *)((char *)v60 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
        uint64_t v39 = (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v36 + 32))(v38, v11, v35);
        long long v76 = v60;
        MEMORY[0x270FA5388](v39);
        long long v78 = v4;
        uint64_t v40 = *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v36 + 16);
        uint64_t v41 = v40(v38, v38, v35);
        long long v75 = (char *)v60;
        MEMORY[0x270FA5388](v41);
        v40(v38, v38, v35);
        uint64_t v4 = v78;
        sub_249592FB8(v38, (uint64_t)v89);
        ctb::bridging::makeSuggestedChipVariant((uint64_t)v89, (uint64_t)&v95);
        uint64_t v42 = *(void (**)(uint64_t *, uint64_t))(v36 + 8);
        v42(v38, v35);
        v93[0] = 2;
        std::variant<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>::variant[abi:ne180100](v62, &v95);
        std::variant<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>::~variant[abi:ne180100](&v95);
        (*v81)(v88, v79);
        unint64_t v43 = v82;
        v42(v38, v35);
        uint64_t v6 = v79;
      }
      else
      {
        uint64_t v94 = 0;
        memset(v93, 0, sizeof(v93));
        double v44 = ctb::chatbot::SuggestedChip::SuggestedChip((ctb::chatbot::SuggestedChip *)v93);
        uint64_t v45 = *v81;
        ((void (*)(char *, uint64_t, double))*v81)(v88, v6, v44);
        v45(v11, v6);
        unint64_t v43 = v82;
      }
      ctb::chatbot::SuggestedChip::SuggestedChip(&v95, v93);
      ctb::chatbot::SuggestedChip::~SuggestedChip((ctb::chatbot::SuggestedChip *)v93);
      std::vector<ctb::chatbot::SuggestedChip>::push_back[abi:ne180100](v43, &v95);
      ctb::chatbot::SuggestedChip::~SuggestedChip((ctb::chatbot::SuggestedChip *)&v95);
      v9 += v80;
      uint64_t v4 = (void *)((char *)v4 - 1);
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

__n128 ctb::bridging::makeMessageVariant@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  a2[20].n128_u32[2] = 2;
  return result;
}

uint64_t sub_24958BA54@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = sub_2495B8200();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (MEMORY[0x263F2B6E0] && v8 == *MEMORY[0x263F2B6E0])
  {
    uint64_t v33 = a2;
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = sub_2495B7EC0();
    v31[1] = v31;
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(void *)(v10 + 64);
    MEMORY[0x270FA5388](v9);
    unint64_t v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v13 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v12, v7, v9);
    uint64_t v32 = v31;
    MEMORY[0x270FA5388](v13);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v12, v9);
    uint64_t v14 = sub_2495B7E40();
    MEMORY[0x270FA5388](v14 - 8);
    uint64_t v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7E50();
    sub_24958A114((uint64_t)v16, (uint64_t)v34);
    uint64_t v17 = sub_2495B7EA0();
    MEMORY[0x270FA5388](v17 - 8);
    unint64_t v19 = (char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7EB0();
    sub_24958A5D4((uint64_t)v19, v35);
    uint64_t v20 = *(void (**)(char *, uint64_t))(v10 + 8);
    v20(v12, v9);
    ctb::chatbot::CardLayout::CardLayout(v36, v34);
    ctb::chatbot::CardLayout::~CardLayout((uint64_t)v34);
    ctb::chatbot::CardCarouselContent::CardCarouselContent((uint64_t)&v37, (uint64_t)v35);
    std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>((uint64_t)v35);
    ctb::bridging::makeMessageVariant((ctb::bridging *)v36, (uint64_t)v35);
    ctb::bridging::makeOptional((uint64_t)v35, (uint64_t)v36);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    v20(v12, v9);
    std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::optional[abi:ne180100](v33, (uint64_t)v36);
    return std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::~optional((uint64_t)v36);
  }
  else if (MEMORY[0x263F2B6F0] && v8 == *MEMORY[0x263F2B6F0])
  {
    uint64_t v33 = a2;
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v22 = sub_2495B7FA0();
    uint64_t v32 = v31;
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v24 = *(void *)(v23 + 64);
    MEMORY[0x270FA5388](v22);
    unint64_t v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))((char *)v31 - v25, v7, v22);
    MEMORY[0x270FA5388](v26);
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))((char *)v31 - v25, (char *)v31 - v25, v22);
    sub_2495892E4((uint64_t)v31 - v25, v36);
    ctb::bridging::makeMessageVariant(v36, (uint64_t)v35);
    ctb::bridging::makeOptional((uint64_t)v35, (uint64_t)v36);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    (*(void (**)(char *, uint64_t))(v23 + 8))((char *)v31 - v25, v22);
    std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::optional[abi:ne180100](v33, (uint64_t)v36);
    return std::optional<std::variant<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>>::~optional((uint64_t)v36);
  }
  else
  {
    type metadata accessor for std.__1.optional_variant____(0);
    uint64_t v28 = v27;
    uint64_t v29 = sub_24958C9F4(&qword_2696BF860, type metadata accessor for std.__1.optional_variant____);
    CxxOptional.init(nilLiteral:)(v28, v29);
    unint64_t v30 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v30(a1, v4);
    return ((uint64_t (*)(char *, uint64_t))v30)(v7, v4);
  }
}

double ctb::bridging::makeMessageVariant@<D0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>::__base[abi:ne180100]<1ul,ctb::chatbot::CardCarouselMessage>(a2, a1).n128_u64[0];
  return result;
}

__n128 ctb::chatbot::CardLayout::CardLayout(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u8[0] = 0;
  a1[2].n128_u8[8] = 0;
  if (a2[2].n128_u8[8])
  {
    __n128 result = a2[1];
    a1[2].n128_u64[0] = a2[2].n128_u64[0];
    a1[1] = result;
    a2[1].n128_u64[1] = 0;
    a2[2].n128_u64[0] = 0;
    a2[1].n128_u64[0] = 0;
    a1[2].n128_u8[8] = 1;
  }
  return result;
}

uint64_t ctb::bridging::makeMessageVariant@<X0>(ctb::bridging *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = std::__variant_detail::__alt<0ul,ctb::chatbot::CardMessage>::__alt[abi:ne180100]<ctb::chatbot::CardMessage>(a2, (uint64_t)this);
  *(_DWORD *)(result + 328) = 0;
  return result;
}

uint64_t std::optional<ctb::chatbot::SuggestedChipList>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = (void **)a1;
    std::vector<ctb::chatbot::SuggestedChip>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  return a1;
}

uint64_t ctb::chatbot::CardLayout::CardLayout(uint64_t this)
{
  *(_WORD *)(this + 11) = 0;
  *(_WORD *)(this + 15) = 0;
  *(unsigned char *)(this + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)this = 0;
  *(unsigned char *)(this + 8) = 0;
  return this;
}

uint64_t sub_24958C0F4(uint64_t a1)
{
  uint64_t v2 = sub_2495B7A70();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void **)(v3 + 64);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = ((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = (char *)v52 - v5;
  uint64_t v7 = *(uint64_t (**)(char *, void, uint64_t))(v3 + 104);
  uint64_t v8 = v7((char *)v52 - v5, *MEMORY[0x263F2B3B0], v2);
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = (char *)v52 - v5;
  uint64_t v64 = *(void *)(a1 + 16);
  uint64_t v56 = v3;
  uint64_t v57 = v7;
  uint64_t v58 = v3 + 104;
  uint64_t v59 = v4;
  if (!v64)
  {
    int v54 = 0;
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    uint64_t v14 = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v15 = v13(v6, v2);
LABEL_15:
    uint64_t v60 = (char *)v52;
    MEMORY[0x270FA5388](v15);
    uint64_t v22 = (char *)v52 - (((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v23 = v7(v22, *MEMORY[0x263F2B3B8], v2);
    MEMORY[0x270FA5388](v23);
    unint64_t v55 = ((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (v64)
    {
      v52[1] = v24;
      uint64_t v25 = v14;
      unint64_t v26 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      uint64_t v62 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
      v62(v22, a1 + v26, v2);
      unint64_t v27 = sub_24958C79C();
      swift_bridgeObjectRetain();
      uint64_t v61 = (uint64_t (*)(char *, unint64_t, uint64_t))v27;
      char v28 = sub_2495B8650();
      uint64_t v29 = v25;
      v13(v22, v2);
      if (v28)
      {
        int v30 = 256;
      }
      else
      {
        if (v64 != 1)
        {
          uint64_t v63 = (void (*)(char *, uint64_t))v13;
          uint64_t v32 = *(void *)(v56 + 72);
          uint64_t v53 = a1;
          unint64_t v33 = a1 + v32 + v26;
          uint64_t v34 = 1;
          while (1)
          {
            uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v62)(v22, v33, v2);
            uint64_t v35 = v34 + 1;
            if (__OFADD__(v34, 1)) {
              goto LABEL_46;
            }
            char v36 = sub_2495B8650();
            v63(v22, v2);
            if (v36) {
              break;
            }
            ++v34;
            v33 += v32;
            if (v35 == v64)
            {
              int v30 = 0;
LABEL_27:
              a1 = v53;
              uint64_t v13 = (uint64_t (*)(char *, uint64_t))v63;
              goto LABEL_28;
            }
          }
          int v30 = 256;
          goto LABEL_27;
        }
        int v30 = 0;
      }
LABEL_28:
      uint64_t v14 = v29;
      uint64_t v7 = v57;
      unint64_t v31 = v55;
      swift_bridgeObjectRelease();
    }
    else
    {
      int v30 = 0;
      unint64_t v31 = v55;
    }
    uint64_t v37 = v13(v22, v2);
    MEMORY[0x270FA5388](v37);
    uint64_t v38 = (char *)v52 - v31;
    uint64_t v39 = v7((char *)v52 - v31, *MEMORY[0x263F2B3C0], v2);
    MEMORY[0x270FA5388](v39);
    uint64_t v40 = (char *)v52 - v31;
    if (v64)
    {
      LODWORD(v6std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v30;
      uint64_t v59 = v52;
      unint64_t v41 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
      uint64_t v63 = *(void (**)(char *, uint64_t))(v56 + 16);
      ((void (*)(char *, unint64_t, uint64_t))v63)(v40, a1 + v41, v2);
      unint64_t v42 = sub_24958C79C();
      swift_bridgeObjectRetain();
      char v43 = sub_2495B8650();
      v13(v40, v2);
      if (v43)
      {
        int v44 = 0x10000;
      }
      else
      {
        uint64_t v61 = (uint64_t (*)(char *, unint64_t, uint64_t))v42;
        if (v64 != 1)
        {
          unint64_t v46 = v41;
          uint64_t v62 = (void (*)(char *, unint64_t, uint64_t))v14;
          uint64_t v47 = *(void *)(v56 + 72);
          uint64_t v53 = a1;
          unint64_t v48 = a1 + v47 + v46;
          uint64_t v49 = 1;
          while (1)
          {
            uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v63)(v40, v48, v2);
            uint64_t v50 = v49 + 1;
            if (__OFADD__(v49, 1)) {
              goto LABEL_47;
            }
            char v51 = sub_2495B8650();
            v13(v40, v2);
            if (v51) {
              break;
            }
            ++v49;
            v48 += v47;
            if (v50 == v64)
            {
              int v44 = 0;
LABEL_42:
              int v45 = v54;
              int v30 = (int)v60;
              goto LABEL_43;
            }
          }
          int v44 = 0x10000;
          goto LABEL_42;
        }
        int v44 = 0;
      }
      int v45 = v54;
      int v30 = (int)v60;
LABEL_43:
      swift_bridgeObjectRelease();
    }
    else
    {
      int v44 = 0;
      int v45 = v54;
    }
    v13(v38, v2);
    return v30 | v45 | v44;
  }
  unint64_t v55 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
  v10((char *)v52 - v5, a1 + v55, v2);
  sub_24958C79C();
  swift_bridgeObjectRetain();
  char v11 = sub_2495B8650();
  unint64_t v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v62 = (void (*)(char *, unint64_t, uint64_t))((v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
  uint64_t v63 = v12;
  v12(v9, v2);
  if (v11)
  {
    swift_bridgeObjectRelease();
    int v54 = 1;
LABEL_7:
    uint64_t v14 = (uint64_t)v62;
    uint64_t v13 = (uint64_t (*)(char *, uint64_t))v63;
    uint64_t v4 = v59;
    uint64_t v7 = v57;
    uint64_t v15 = ((uint64_t (*)(char *, uint64_t))v63)(v6, v2);
    goto LABEL_15;
  }
  uint64_t v61 = (uint64_t (*)(char *, unint64_t, uint64_t))v10;
  uint64_t v53 = a1;
  if (v64 == 1)
  {
    a1 = v53;
    swift_bridgeObjectRelease();
    int v54 = 0;
    goto LABEL_7;
  }
  uint64_t v60 = (char *)v52 - v5;
  uint64_t v16 = *(void *)(v3 + 72);
  unint64_t v17 = v53 + v16 + v55;
  uint64_t v18 = 1;
  while (1)
  {
    uint64_t result = v61(v9, v17, v2);
    uint64_t v20 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    char v21 = sub_2495B8650();
    v63(v9, v2);
    if (v21)
    {
      a1 = v53;
      swift_bridgeObjectRelease();
      int v54 = 1;
      goto LABEL_14;
    }
    ++v18;
    v17 += v16;
    if (v20 == v64)
    {
      a1 = v53;
      swift_bridgeObjectRelease();
      int v54 = 0;
LABEL_14:
      uint64_t v14 = (uint64_t)v62;
      uint64_t v13 = (uint64_t (*)(char *, uint64_t))v63;
      uint64_t v3 = v56;
      uint64_t v7 = v57;
      uint64_t v4 = v59;
      uint64_t v15 = ((uint64_t (*)(char *, uint64_t))v63)(v60, v2);
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t ctb::bridging::makeOptional(ctb::bridging *this, CardTitleStyle a2)
{
  return this & 0xFFFFFF | 0x1000000;
}

unint64_t sub_24958C79C()
{
  unint64_t result = qword_2696BFE40;
  if (!qword_2696BFE40)
  {
    sub_2495B7A70();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696BFE40);
  }
  return result;
}

void **std::vector<ctb::chatbot::CardCarouselContent>::~vector[abi:ne180100](void **a1)
{
  uint64_t v3 = a1;
  std::vector<ctb::chatbot::CardCarouselContent>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

__n128 ctb::chatbot::CardCarouselLayout::CardCarouselLayout(uint64_t a1, __n128 *a2)
{
  unint64_t v2 = a2->n128_u64[0];
  *(_DWORD *)(a1 + 8) = a2->n128_u32[2];
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  if (a2[2].n128_u8[8])
  {
    __n128 result = a2[1];
    *(void *)(a1 + 32) = a2[2].n128_u64[0];
    *(__n128 *)(a1 + 16) = result;
    a2[1].n128_u64[1] = 0;
    a2[2].n128_u64[0] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 1;
  }
  return result;
}

uint64_t ctb::chatbot::CardLayout::~CardLayout(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40) && *(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t std::vector<ctb::chatbot::CardCarouselContent>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = std::vector<ctb::chatbot::CardCarouselContent>::__push_back_slow_path<ctb::chatbot::CardCarouselContent const&>(a1, a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,ctb::chatbot::CardCarouselContent const&,ctb::chatbot::CardCarouselContent*>((std::string *)a1[1], a2);
    uint64_t result = v3 + 280;
    a1[1] = v3 + 280;
  }
  a1[1] = result;
  return result;
}

void sub_24958C8F0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<ctb::chatbot::SuggestedChip>::push_back[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  unint64_t v3 = (_DWORD *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    uint64_t result = std::vector<ctb::chatbot::SuggestedChip>::__push_back_slow_path<ctb::chatbot::SuggestedChip const&>(a1, a2);
  }
  else
  {
    *unint64_t v3 = *a2;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v3 + 2), (uint64_t)(a2 + 2));
    uint64_t result = (uint64_t)(v3 + 58);
    a1[1] = (uint64_t)(v3 + 58);
  }
  a1[1] = result;
  return result;
}

void sub_24958C94C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

double ctb::chatbot::SuggestedChip::SuggestedChip(ctb::chatbot::SuggestedChip *this)
{
  *(_DWORD *)this = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 20std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)((char *)this + 212) = 0u;
  return result;
}

_DWORD *ctb::chatbot::SuggestedChip::SuggestedChip(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return a1;
}

void ctb::chatbot::SuggestedChip::~SuggestedChip(ctb::chatbot::SuggestedChip *this)
{
}

uint64_t sub_24958C9F4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ctb::bridging::makeSuggestedChipVariant@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(void *)(a2 + 16) = *(void *)(result + 16);
  *(void *)(result + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = 0;
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  if (*(unsigned char *)(result + 48))
  {
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
    *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(void *)(result + 40);
    *(void *)(result + 32) = 0;
    *(void *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(a2 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 1;
  }
  *(_DWORD *)(a2 + 216) = 1;
  return result;
}

uint64_t ctb::bridging::makeSuggestedChipVariant@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = std::__variant_detail::__alt<0ul,ctb::chatbot::SuggestedAction>::__alt[abi:ne180100]<ctb::chatbot::SuggestedAction>(a2, a1);
  *(_DWORD *)(result + 216) = 0;
  return result;
}

__n128 std::__variant_detail::__base<(std::__variant_detail::_Trait)1,ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>::__base[abi:ne180100]<1ul,ctb::chatbot::CardCarouselMessage>(uint64_t a1, __n128 *a2)
{
  unint64_t v2 = a2->n128_u64[0];
  *(_DWORD *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = a2->n128_u32[2];
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  if (a2[2].n128_u8[8])
  {
    __n128 v3 = a2[1];
    *(void *)(a1 + 32) = a2[2].n128_u64[0];
    *(__n128 *)(a1 + 16) = v3;
    a2[1].n128_u64[1] = 0;
    a2[2].n128_u64[0] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 1;
  }
  *(void *)(a1 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  __n128 result = a2[3];
  *(__n128 *)(a1 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  *(void *)(a1 + 64) = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  *(_DWORD *)(a1 + 32std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 1;
  return result;
}

uint64_t std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::__optional_destruct_base[abi:ne180100]<ctb::chatbot::CardMedia>(uint64_t result, long long *a2)
{
  long long v2 = *a2;
  *(void *)(result + 16) = *((void *)a2 + 2);
  *(_OWORD *)__n128 result = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v3 = *(long long *)((char *)a2 + 24);
  *(void *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 5);
  *(_OWORD *)(result + 24) = v3;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  uint64_t v4 = *((void *)a2 + 6);
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
  *(unsigned char *)(result + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  if (*((unsigned char *)a2 + 80))
  {
    long long v5 = *(long long *)((char *)a2 + 56);
    *(void *)(result + 72) = *((void *)a2 + 9);
    *(_OWORD *)(result + 56) = v5;
    *((void *)a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 7) = 0;
    *(unsigned char *)(result + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 1;
  }
  *(unsigned char *)(result + 8std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 112) = 0;
  if (*((unsigned char *)a2 + 112))
  {
    long long v6 = *(long long *)((char *)a2 + 88);
    *(void *)(result + 104) = *((void *)a2 + 13);
    *(_OWORD *)(result + 8std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v6;
    *((void *)a2 + 12) = 0;
    *((void *)a2 + 13) = 0;
    *((void *)a2 + 11) = 0;
    *(unsigned char *)(result + 112) = 1;
  }
  long long v7 = *(long long *)((char *)a2 + 120);
  int v8 = *((_DWORD *)a2 + 34);
  *(unsigned char *)(result + 144) = 0;
  *(_DWORD *)(result + 136) = v8;
  *(_OWORD *)(result + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v7;
  *(unsigned char *)(result + 16std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  if (*((unsigned char *)a2 + 168))
  {
    long long v9 = a2[9];
    *(void *)(result + 16std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 20);
    *(_OWORD *)(result + 144) = v9;
    *((void *)a2 + 19) = 0;
    *((void *)a2 + 2std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *((void *)a2 + 1std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(unsigned char *)(result + 16std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 1;
  }
  *(unsigned char *)(result + 176) = 1;
  return result;
}

uint64_t std::vector<ctb::chatbot::CardCarouselContent>::__push_back_slow_path<ctb::chatbot::CardCarouselContent const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAF8AF8AF8AF8AF8BLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xEA0EA0EA0EA0EALL) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAF8AF8AF8AF8AF8BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x75075075075075) {
    unint64_t v9 = 0xEA0EA0EA0EA0EALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::CardCarouselContent>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = (std::string *)&v10[280 * v4];
  uint64_t v16 = &v10[280 * v9];
  std::construct_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,ctb::chatbot::CardCarouselContent const&,ctb::chatbot::CardCarouselContent*>(v14, a2);
  uint64_t v15 = &v14[11].__r_.__value_.__s.__data_[16];
  std::vector<ctb::chatbot::CardCarouselContent>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<ctb::chatbot::CardCarouselContent>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_24958CD2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ctb::chatbot::CardCarouselContent>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,ctb::chatbot::CardCarouselContent const&,ctb::chatbot::CardCarouselContent*>(std::string *a1, uint64_t a2)
{
  unint64_t v4 = std::__optional_copy_base<ctb::chatbot::CardMedia,false>::__optional_copy_base[abi:ne180100](a1, (const ctb::chatbot::CardMedia *)a2);
  std::__optional_copy_base<ctb::chatbot::PostbackData,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)v4 + 184), (long long *)(a2 + 184));
  std::__optional_copy_base<ctb::chatbot::PostbackData,false>::__optional_copy_base[abi:ne180100](a1 + 9, (long long *)(a2 + 216));
  std::__optional_copy_base<ctb::chatbot::SuggestedChipList,false>::__optional_copy_base[abi:ne180100]((uint64_t)&a1[10].__r_.__value_.__l.__size_, a2 + 248);
  return a1;
}

void sub_24958CDA0(_Unwind_Exception *a1)
{
  if (v1[240] && v1[239] < 0) {
    operator delete(*v3);
  }
  if (v1[208])
  {
    if (v1[207] < 0) {
      operator delete(*v2);
    }
  }
  std::__optional_destruct_base<ctb::chatbot::CardMedia,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<ctb::chatbot::CardCarouselContent>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 280;
    v4 -= 280;
    __n128 result = (uint64_t *)ctb::chatbot::CardCarouselContent::CardCarouselContent(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v7;
  uint64_t v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = v3[2];
  v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<ctb::chatbot::CardCarouselContent>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 280;
    std::__destroy_at[abi:ne180100]<ctb::chatbot::CardCarouselContent,0>(i - 280);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<ctb::chatbot::SuggestedChip>::__push_back_slow_path<ctb::chatbot::SuggestedChip const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x11A7B9611A7B961) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x34F72C234F72C235 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x8D3DCB08D3DCB0) {
    unint64_t v9 = 0x11A7B9611A7B961;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::SuggestedChip>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[232 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[232 * v9];
  *(_DWORD *)uint64_t v11 = *a2;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v11 + 8), (uint64_t)(a2 + 2));
  v15 += 232;
  std::vector<ctb::chatbot::SuggestedChip>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<ctb::chatbot::SuggestedChip>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_24958CFEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ctb::chatbot::SuggestedChip>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<ctb::chatbot::SuggestedChip>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    int v7 = *(_DWORD *)(v4 - 232);
    v4 -= 232;
    *(_DWORD *)(v6 - 232) = v7;
    v6 -= 232;
    __n128 result = (uint64_t *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__move_constructor(v6 + 8, v4 + 8);
  }
  a2[1] = v6;
  uint64_t v8 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v8;
  uint64_t v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<ctb::chatbot::SuggestedChip>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 232;
    std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor(i - 224);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 216) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 216);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))*(&off_26FD35788 + v4))(&v7, result);
  }
  *(_DWORD *)(v3 + 216) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 216);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_26FD35800 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 216) = v5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot15SuggestedActionENS9_14SuggestedReplyEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot15SuggestedActionENS9_14SuggestedReplyEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_Tm(a1, a2, a3, std::__variant_detail::__alt<0ul,ctb::chatbot::SuggestedAction>::__alt[abi:ne180100]<ctb::chatbot::SuggestedAction>);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot15SuggestedActionENS9_14SuggestedReplyEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  return a4(a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot15SuggestedActionENS9_14SuggestedReplyEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, __n128 *a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  a2[1].n128_u64[0] = *(void *)(a3 + 16);
  *a2 = result;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  a2[1].n128_u8[8] = 0;
  a2[3].n128_u8[0] = 0;
  if (*(unsigned char *)(a3 + 48))
  {
    __n128 result = *(__n128 *)(a3 + 24);
    a2[2].n128_u64[1] = *(void *)(a3 + 40);
    *(__n128 *)((char *)a2 + 24) = result;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(a3 + 24) = 0;
    a2[3].n128_u8[0] = 1;
  }
  return result;
}

uint64_t std::__variant_detail::__alt<0ul,ctb::chatbot::SuggestedAction>::__alt[abi:ne180100]<ctb::chatbot::SuggestedAction>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  long long v3 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  if (*(unsigned char *)(a2 + 56))
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
    *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(a2 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(void *)(a2 + 32) = 0;
    *(unsigned char *)(a1 + 56) = 1;
  }
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 72, a2 + 72);
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 136) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 136);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))*(&off_26FD35798 + v4))(&v7, result);
  }
  *(_DWORD *)(v3 + 136) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 136);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_26FD35810 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 136) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  long long v3 = *(_OWORD *)(a3 + 8);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(_OWORD *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v3;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  __n128 result = *(__n128 *)(a3 + 32);
  *(void *)(a2 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(void *)(a3 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(void *)(a3 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a3 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a3 + 32) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  __n128 result = *(__n128 *)((char *)a3 + 24);
  *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a3 + 5);
  *(__n128 *)(a2 + 24) = result;
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  *((void *)a3 + 3) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_Tm(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_Tm(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))std::__variant_detail::__alt<5ul,ctb::chatbot::SuggestedActionShowLocation>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionShowLocation>);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  return a4(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_Tm(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)&double result = std::__variant_detail::__alt<7ul,ctb::chatbot::SuggestedActionCalendar>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionCalendar>(a2, a3).n128_u64[0];
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_Tm(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))std::__variant_detail::__alt<9ul,ctb::chatbot::SuggestedActionDialEnrichedCall>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionDialEnrichedCall>);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEERKS14_EEEDcSW_DpT0_Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  return a4(a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot31SuggestedActionOpenUrlInWebViewENS9_35SuggestedActionOpenUrlInApplicationENS9_26SuggestedActionComposeTextENS9_36SuggestedActionComposeAudioRecordingENS9_36SuggestedActionComposeVideoRecordingENS9_27SuggestedActionShowLocationENS9_34SuggestedActionRequestLocationPushENS9_23SuggestedActionCalendarENS9_28SuggestedActionDialVideoCallENS9_31SuggestedActionDialEnrichedCallENS9_30SuggestedActionDialPhoneNumberENS9_21SuggestedActionDeviceENS9_23SuggestedActionSettingsEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_Tm(uint64_t a1, __n128 *a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  a2[1].n128_u64[0] = *(void *)(a3 + 16);
  *a2 = result;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  a2[1].n128_u8[8] = 0;
  a2[3].n128_u8[0] = 0;
  if (*(unsigned char *)(a3 + 48))
  {
    __n128 result = *(__n128 *)(a3 + 24);
    a2[2].n128_u64[1] = *(void *)(a3 + 40);
    *(__n128 *)((char *)a2 + 24) = result;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(a3 + 24) = 0;
    a2[3].n128_u8[0] = 1;
  }
  return result;
}

__n128 std::__variant_detail::__alt<5ul,ctb::chatbot::SuggestedActionShowLocation>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionShowLocation>(__n128 *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  a1[1].n128_u64[0] = *(void *)(a2 + 16);
  *a1 = result;
  a1[1].n128_u8[8] = 0;
  a1[3].n128_u8[0] = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    __n128 result = *(__n128 *)(a2 + 24);
    a1[2].n128_u64[1] = *(void *)(a2 + 40);
    *(__n128 *)((char *)a1 + 24) = result;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(a2 + 24) = 0;
    a1[3].n128_u8[0] = 1;
  }
  a1[3].n128_u8[8] = 0;
  a1[5].n128_u8[0] = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    __n128 result = *(__n128 *)(a2 + 56);
    a1[4].n128_u64[1] = *(void *)(a2 + 72);
    *(__n128 *)((char *)a1 + 56) = result;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 56) = 0;
    a1[5].n128_u8[0] = 1;
  }
  a1[5].n128_u8[8] = 0;
  a1[7].n128_u8[0] = 0;
  if (*(unsigned char *)(a2 + 112))
  {
    __n128 result = *(__n128 *)(a2 + 88);
    a1[6].n128_u64[1] = *(void *)(a2 + 104);
    *(__n128 *)((char *)a1 + 8std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 8std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    a1[7].n128_u8[0] = 1;
  }
  return result;
}

__n128 std::__variant_detail::__alt<7ul,ctb::chatbot::SuggestedActionCalendar>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionCalendar>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v3 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v3;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  __n128 result = (__n128)a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(__n128 *)(a1 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *((void *)a2 + 6) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  if (*((unsigned char *)a2 + 96))
  {
    __n128 result = *(__n128 *)((char *)a2 + 72);
    *(void *)(a1 + 8std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *((void *)a2 + 11);
    *(__n128 *)(a1 + 72) = result;
    *((void *)a2 + 1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *((void *)a2 + 11) = 0;
    *((void *)a2 + 9) = 0;
    *(unsigned char *)(a1 + 96) = 1;
  }
  *(unsigned char *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 12std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  if (*((unsigned char *)a2 + 128))
  {
    __n128 result = *(__n128 *)((char *)a2 + 104);
    *(void *)(a1 + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 15);
    *(__n128 *)(a1 + 104) = result;
    *((void *)a2 + 14) = 0;
    *((void *)a2 + 15) = 0;
    *((void *)a2 + 13) = 0;
    *(unsigned char *)(a1 + 12std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 1;
  }
  return result;
}

__n128 std::__variant_detail::__alt<9ul,ctb::chatbot::SuggestedActionDialEnrichedCall>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionDialEnrichedCall>(__n128 *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  a1[1].n128_u64[0] = *(void *)(a2 + 16);
  *a1 = result;
  *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  a1[1].n128_u8[8] = 0;
  a1[3].n128_u8[0] = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    __n128 result = *(__n128 *)(a2 + 24);
    a1[2].n128_u64[1] = *(void *)(a2 + 40);
    *(__n128 *)((char *)a1 + 24) = result;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(a2 + 24) = 0;
    a1[3].n128_u8[0] = 1;
  }
  a1[3].n128_u8[8] = 0;
  a1[5].n128_u8[0] = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    __n128 result = *(__n128 *)(a2 + 56);
    a1[4].n128_u64[1] = *(void *)(a2 + 72);
    *(__n128 *)((char *)a1 + 56) = result;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 56) = 0;
    a1[5].n128_u8[0] = 1;
  }
  return result;
}

uint64_t sub_24958D6C0()
{
  uint64_t v0 = sub_2495B66A0();
  MEMORY[0x270FA5388](v0);
  (*(void (**)(char *, void))(v2 + 104))((char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F07298]);
  uint64_t v3 = sub_2495B6690();
  MEMORY[0x270FA5388](v3);
  (*(void (**)(char *, void))(v5 + 104))((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F07290]);
  uint64_t v6 = sub_2495B66B0();
  MEMORY[0x270FA5388](v6);
  (*(void (**)(char *, void))(v8 + 104))((char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F072B0]);
  uint64_t v9 = sub_2495B66D0();
  MEMORY[0x270FA5388](v9);
  (*(void (**)(char *, void))(v11 + 104))((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F072D0]);
  uint64_t v12 = sub_2495B6720();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFE58);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6710();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v18, 1, v12);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v18, v12);
    return sub_2495B66C0();
  }
  return result;
}

uint64_t sub_24958DA98@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a2);
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = sub_2495B8110();
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v85 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v60[1] = a1;
    uint64_t v9 = a1 + v8;
    uint64_t v63 = v7 + 16;
    uint64_t v64 = (void (**)(char *, uint64_t))(v7 + 96);
    uint64_t v61 = &v95[1].n128_i64[1];
    uint64_t v62 = &v94;
    uint64_t v80 = *(void *)(v7 + 72);
    v81 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v83 = *(void *)(v7 + 64);
    int v84 = (uint64_t (**)(char *, uint64_t))(v7 + 88);
    char v82 = a2;
    uint64_t v79 = v5;
    do
    {
      uint64_t v10 = v83;
      MEMORY[0x270FA5388](v5);
      uint64_t v11 = (char *)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v12 = v85;
      uint64_t v13 = ((uint64_t (*)(char *, uint64_t, uint64_t))v85)(v11, v9, v6);
      v86 = v60;
      MEMORY[0x270FA5388](v13);
      uint64_t v14 = v11;
      v88 = v11;
      v12(v11, v11, v6);
      int v15 = (*v84)(v11, v6);
      v87 = v60;
      if (MEMORY[0x263F2B6A8] && v15 == *MEMORY[0x263F2B6A8])
      {
        (*v64)(v11, v6);
        uint64_t v16 = sub_2495B8060();
        long long v78 = v60;
        uint64_t v17 = *(void *)(v16 - 8);
        uint64_t v18 = *(void *)(v17 + 64);
        MEMORY[0x270FA5388](v16);
        unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))((char *)v60 - v19, v14, v16);
        long long v74 = v60;
        MEMORY[0x270FA5388](v20);
        long long v75 = (char *)v60 - v19;
        long long v76 = (void *)v17;
        char v21 = *(uint64_t (**)(char *, char *, uint64_t))(v17 + 16);
        uint64_t v22 = v21((char *)v60 - v19, (char *)v60 - v19, v16);
        long long v72 = v60;
        MEMORY[0x270FA5388](v22);
        long long v73 = (char *)v60 - v19;
        long long v77 = (void *)v16;
        v21(v73, v73, v16);
        uint64_t v69 = sub_2495B7C80();
        long long v70 = v60;
        uint64_t v68 = *(void *)(v69 - 8);
        MEMORY[0x270FA5388](v69);
        uint64_t v24 = (char *)v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
        long long v71 = (char *)v60 - v19;
        uint64_t v25 = sub_2495B8050();
        unint64_t v26 = MEMORY[0x24C5A2890](v25);
        std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v26, v27, &v92);
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFE48);
        v66 = v60;
        uint64_t v29 = *(void *)(*(void *)(v28 - 8) + 64);
        MEMORY[0x270FA5388](v28 - 8);
        int v30 = (char *)v60 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v67 = v24;
        uint64_t v31 = sub_2495B7C70();
        uint64_t v65 = v60;
        MEMORY[0x270FA5388](v31);
        sub_24957864C((uint64_t)v30, (uint64_t)v30, &qword_2696BFE48);
        uint64_t v32 = sub_2495B8220();
        uint64_t v33 = *(void *)(v32 - 8);
        uint64_t v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48))(v30, 1, v32);
        if (v34 == 1)
        {
          memset(v89, 0, sizeof(v89));
          char v90 = 1;
        }
        else
        {
          __n128 v60[2] = v60;
          uint64_t v46 = *(void *)(v33 + 64);
          MEMORY[0x270FA5388](v34);
          unint64_t v47 = (v46 + 15) & 0xFFFFFFFFFFFFFFF0;
          uint64_t v48 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 32))((char *)v60 - v47, v30, v32);
          v60[3] = v60;
          MEMORY[0x270FA5388](v48);
          uint64_t v49 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 16))((char *)v60 - v47, (char *)v60 - v47, v32);
          unint64_t v50 = MEMORY[0x24C5A2E40](v49);
          std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v50, v51, (std::string *)v89);
          uint64_t v52 = *(void (**)(char *, uint64_t))(v33 + 8);
          v52((char *)v60 - v47, v32);
          ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v91, (__n128 *)v89);
          ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)v89);
          ctb::bridging::makeOptional((uint64_t *)v89, (ctb::bridging *)v91, v53);
          v52((char *)v60 - v47, v32);
          char v90 = 0;
        }
        char v43 = v82;
        uint64_t v6 = v79;
        sub_2495786B0((uint64_t)v30, &qword_2696BFE48);
        if (v90)
        {
          type metadata accessor for std.__1.optional_PostbackData_(0);
          uint64_t v55 = v54;
          uint64_t v56 = sub_249594D9C(&qword_2696BF8A0, type metadata accessor for std.__1.optional_PostbackData_);
          CxxOptional.init(nilLiteral:)(v55, v56);
          (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v69);
          sub_2495786B0((uint64_t)v89, &qword_2696BFE50);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v69);
          std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v91, (__n128 *)v89);
          ctb::chatbot::URIEntry::~URIEntry((void **)v89);
        }
        std::string::basic_string[abi:ne180100](v95, (__n128 *)&v92);
        std::string::~string(&v92);
        std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v61, v91);
        ctb::chatbot::URIEntry::~URIEntry((void **)v91);
        uint64_t v57 = v77;
        uint64_t v58 = (void (*)(char *, void *))v76[1];
        v58(v71, v77);
        ctb::chatbot::Media::Media((__n128 *)v89, (uint64_t)v95);
        ctb::chatbot::Media::~Media((void **)v95);
        ctb::bridging::makeSuggestedChipVariant((uint64_t)v89, (uint64_t)v95);
        v58(v73, v57);
        int v93 = 1;
        std::variant<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>::variant[abi:ne180100](v62, v95);
        std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::~variant[abi:ne180100]((uint64_t)v95, (void (*)(void))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor);
        (*v81)(v88, v6);
        v58(v75, v57);
        ctb::chatbot::SuggestedChip::SuggestedChip(v95, &v93);
        ctb::chatbot::MenuL0Content::~MenuL0Content((uint64_t)&v93, (void (*)(uint64_t))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor);
      }
      else if (MEMORY[0x263F2B6B8] && v15 == *MEMORY[0x263F2B6B8])
      {
        (*v64)(v11, v6);
        uint64_t v35 = sub_2495B80A0();
        long long v77 = v60;
        uint64_t v36 = *(void *)(v35 - 8);
        uint64_t v37 = *(void *)(v36 + 64);
        MEMORY[0x270FA5388](v35);
        long long v78 = v4;
        uint64_t v38 = (void *)((char *)v60 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
        uint64_t v39 = (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v36 + 32))(v38, v11, v35);
        long long v76 = v60;
        MEMORY[0x270FA5388](v39);
        uint64_t v40 = *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v36 + 16);
        uint64_t v41 = v40(v38, v38, v35);
        long long v75 = (char *)v60;
        MEMORY[0x270FA5388](v41);
        uint64_t v4 = v78;
        v40(v38, v38, v35);
        sub_249592FB8(v38, (uint64_t)v89);
        ctb::bridging::makeSuggestedChipVariant((uint64_t)v89, (uint64_t)v95);
        unint64_t v42 = *(void (**)(uint64_t *, uint64_t))(v36 + 8);
        v42(v38, v35);
        int v93 = 2;
        std::variant<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>::variant[abi:ne180100](v62, v95);
        std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::~variant[abi:ne180100]((uint64_t)v95, (void (*)(void))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor);
        (*v81)(v88, v79);
        char v43 = v82;
        v42(v38, v35);
        uint64_t v6 = v79;
        ctb::chatbot::SuggestedChip::SuggestedChip(v95, &v93);
        ctb::chatbot::MenuL0Content::~MenuL0Content((uint64_t)&v93, (void (*)(uint64_t))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor);
      }
      else
      {
        uint64_t v96 = 0;
        memset(v95, 0, sizeof(v95));
        double v44 = ctb::chatbot::SuggestedChip::SuggestedChip((ctb::chatbot::SuggestedChip *)v95);
        int v45 = *v81;
        ((void (*)(char *, uint64_t, double))*v81)(v88, v6, v44);
        v45(v11, v6);
        char v43 = v82;
      }
      std::vector<ctb::chatbot::MenuL2Content>::push_back[abi:ne180100](v43, v95);
      ctb::chatbot::SuggestedChip::~SuggestedChip((ctb::chatbot::SuggestedChip *)v95);
      v9 += v80;
      uint64_t v4 = (void *)((char *)v4 - 1);
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_24958E580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_2495B80D0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (MEMORY[0x263F2B660] && v8 == *MEMORY[0x263F2B660])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = sub_2495B8060();
    uint64_t v54 = &v50;
    uint64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
    MEMORY[0x270FA5388](v9);
    unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v13 = v12;
    uint64_t v50 = v12;
    uint64_t v14 = *(uint64_t (**)(char *, char *, uint64_t))(v12 + 32);
    uint64_t v53 = (uint64_t *)((char *)&v50 - v11);
    int v15 = v7;
    uint64_t v17 = v16;
    uint64_t v18 = v14((char *)&v50 - v11, v15, v16);
    uint64_t v52 = &v50;
    MEMORY[0x270FA5388](v18);
    uint64_t v55 = (void *)v4;
    uint64_t v56 = a1;
    unint64_t v19 = *(uint64_t (**)(void))(v13 + 16);
    uint64_t v20 = v19();
    unint64_t v51 = &v50;
    MEMORY[0x270FA5388](v20);
    ((void (*)(char *, char *, uint64_t))v19)((char *)&v50 - v11, (char *)&v50 - v11, v17);
    uint64_t v21 = sub_2495B7C80();
    MEMORY[0x270FA5388](v21 - 8);
    uint64_t v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B8050();
    sub_2495910D8((uint64_t)v23, (__n128 *)v60);
    uint64_t v24 = *(void (**)(char *, uint64_t))(v50 + 8);
    v24((char *)&v50 - v11, v17);
    ctb::chatbot::Media::Media(&v57, (uint64_t)v60);
    ctb::chatbot::Media::~Media((void **)&v60[0].__r_.__value_.__l.__data_);
    ctb::bridging::makeSuggestedChipVariant((uint64_t)&v57, (uint64_t)v60);
    v24((char *)&v50 - v11, v17);
    v57.n128_u32[0] = 1;
    std::variant<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>::variant[abi:ne180100](&v57.n128_i8[8], v60);
    std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::~variant[abi:ne180100]((uint64_t)v60, (void (*)(void))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor);
    ctb::bridging::makeMenuL0Variant(&v57, v60);
    (*(void (**)(uint64_t, void *))(v5 + 8))(v56, v55);
    v24((char *)v53, v17);
    *(_DWORD *)a2 = 1;
    uint64_t v25 = a2 + 8;
LABEL_10:
    std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::variant[abi:ne180100](v25, (uint64_t)v60, (void (*)(void))std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::__move_constructor);
    return std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::~variant[abi:ne180100]((uint64_t)v60, (void (*)(void))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::~__dtor);
  }
  if (MEMORY[0x263F2B670] && v8 == *MEMORY[0x263F2B670])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v26 = sub_2495B80A0();
    uint64_t v55 = &v50;
    uint64_t v50 = v26;
    unint64_t v27 = *(uint64_t **)(v26 - 8);
    uint64_t v28 = v27[8];
    MEMORY[0x270FA5388](v26);
    uint64_t v56 = a1;
    unint64_t v29 = (v28 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v52 = v27;
    int v30 = (uint64_t (*)(char *, char *))v27[4];
    uint64_t v54 = (uint64_t *)((char *)&v50 - v29);
    uint64_t v31 = v30((char *)&v50 - v29, v7);
    uint64_t v53 = &v50;
    MEMORY[0x270FA5388](v31);
    uint64_t v32 = (uint64_t (*)(char *, char *, uint64_t))v27[2];
    uint64_t v33 = v50;
    uint64_t v34 = v32((char *)&v50 - v29, (char *)&v50 - v29, v50);
    unint64_t v51 = &v50;
    MEMORY[0x270FA5388](v34);
    v32((char *)&v50 - v29, (char *)&v50 - v29, v33);
    sub_249592FB8((uint64_t *)((char *)&v50 - v29), (uint64_t)&v57);
    ctb::bridging::makeSuggestedChipVariant((uint64_t)&v57, (uint64_t)v60);
    uint64_t v35 = (void (*)(char *, uint64_t))v52[1];
    v35((char *)&v50 - v29, v33);
    v57.n128_u32[0] = 2;
    std::variant<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>::variant[abi:ne180100](&v57.n128_i8[8], v60);
    std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::~variant[abi:ne180100]((uint64_t)v60, (void (*)(void))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor);
    ctb::bridging::makeMenuL0Variant(&v57, v60);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v56, v4);
    v35((char *)v54, v33);
    *(_DWORD *)a2 = 1;
    std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::variant[abi:ne180100](a2 + 8, (uint64_t)v60, (void (*)(void))std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::__move_constructor);
    return std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::~variant[abi:ne180100]((uint64_t)v60, (void (*)(void))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::~__dtor);
  }
  if (MEMORY[0x263F2B688] && v8 == *MEMORY[0x263F2B688])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v37 = sub_2495B8130();
    uint64_t v54 = &v50;
    uint64_t v38 = *(void *)(v37 - 8);
    uint64_t v39 = *(void *)(v38 + 64);
    MEMORY[0x270FA5388](v37);
    uint64_t v55 = (void *)v4;
    uint64_t v40 = (char *)&v50 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v41 = (*(uint64_t (**)(char *, char *, uint64_t))(v38 + 32))(v40, v7, v37);
    uint64_t v56 = a1;
    MEMORY[0x270FA5388](v41);
    uint64_t v42 = (*(uint64_t (**)(char *, char *, uint64_t))(v38 + 16))(v40, v40, v37);
    unint64_t v43 = MEMORY[0x24C5A2D30](v42);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v43, v44, v60);
    uint64_t v45 = sub_2495B80E0();
    sub_24958DA98(v45, (uint64_t *)&v59);
    uint64_t v46 = *(void (**)(char *, uint64_t))(v38 + 8);
    v46(v40, v37);
    std::string::basic_string[abi:ne180100](&v57, (__n128 *)v60);
    std::string::~string(v60);
    std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v58, &v59);
    std::vector<ctb::chatbot::MenuL1Content>::~vector[abi:ne180100]((uint64_t)&v59, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL2Content>::__destroy_vector::operator()[abi:ne180100]);
    __n128 MenuL0Variant = ctb::bridging::makeMenuL0Variant((uint64_t)&v57, (uint64_t)v60);
    (*(void (**)(uint64_t, void *, __n128))(v5 + 8))(v56, v55, MenuL0Variant);
    v46(v40, v37);
    *(_DWORD *)a2 = 2;
    uint64_t v25 = a2 + 8;
    goto LABEL_10;
  }
  *(void *)(a2 + 24std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(_OWORD *)(a2 + 20std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 16std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 12std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a2 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  double v48 = ctb::chatbot::MenuL0Content::MenuL0Content(a2);
  uint64_t v49 = *(void (**)(uint64_t, uint64_t, double))(v5 + 8);
  v49(a1, v4, v48);
  return ((uint64_t (*)(char *, uint64_t))v49)(v7, v4);
}

uint64_t sub_24958EE08@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a2);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = sub_2495B80D0();
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(v5 - 8);
    int v8 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v14[1] = a1;
    uint64_t v10 = a1 + v9;
    uint64_t v11 = *(void *)(v7 + 64);
    uint64_t v12 = *(void *)(v7 + 72);
    do
    {
      MEMORY[0x270FA5388](v5);
      v8((char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v10, v6);
      sub_24958E580((uint64_t)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v15);
      std::vector<ctb::chatbot::MenuL1Content>::push_back[abi:ne180100](a2, v15);
      uint64_t v5 = ctb::chatbot::MenuL0Content::~MenuL0Content((uint64_t)v15, (void (*)(uint64_t))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::~__dtor);
      v10 += v12;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

void sub_24958EF7C(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v37 = a2;
  uint64_t v34 = sub_2495B6700();
  uint64_t v2 = *(void *)(v34 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  MEMORY[0x270FA5388](v34);
  unint64_t v36 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = (char *)&v32 - v36;
  sub_2495B7B80();
  uint64_t v5 = sub_2495B66E0();
  uint64_t v32 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5);
  unint64_t v33 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  int v8 = (char *)&v32 - v33;
  sub_24958D6C0();
  unint64_t v9 = sub_2495B6680();
  unint64_t v11 = v10;
  uint64_t v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v8, v5);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v14 = v34;
  v13(v4, v34);
  uint64_t v15 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v9, v11, &v42);
  MEMORY[0x270FA5388](v15);
  uint64_t v16 = v35;
  uint64_t v17 = (char *)&v32 - v36;
  uint64_t v18 = sub_2495B7B70();
  MEMORY[0x270FA5388](v18);
  unint64_t v19 = (char *)&v32 - v33;
  sub_24958D6C0();
  unint64_t v20 = sub_2495B6680();
  unint64_t v22 = v21;
  v12(v19, v32);
  v13(v17, v14);
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v20, v22, &v41);
  unint64_t v23 = sub_2495B7B60();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v23, v24, &v40);
  unint64_t v25 = sub_2495B7B40();
  sub_249595C64(v25, v26, (uint64_t)v39);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD90);
  MEMORY[0x270FA5388](v27 - 8);
  unint64_t v29 = (char *)&v32 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B7B50();
  sub_249595D34((uint64_t)v29, (uint64_t)v38);
  uint64_t v30 = sub_2495B7B90();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v16, v30);
  uint64_t v31 = v37;
  std::string::basic_string[abi:ne180100](v37, (__n128 *)&v42);
  std::string::~string(&v42);
  std::string::basic_string[abi:ne180100]((__n128 *)((char *)v31 + 24), (__n128 *)&v41);
  std::string::~string(&v41);
  std::string::basic_string[abi:ne180100](v31 + 3, (__n128 *)&v40);
  std::string::~string(&v40);
  std::optional<std::string>::optional[abi:ne180100]((uint64_t)&v31[4].n128_i64[1], v39);
  ctb::chatbot::URIEntry::~URIEntry((void **)v39);
  std::optional<std::string>::optional[abi:ne180100]((uint64_t)&v31[6].n128_i64[1], v38);
  ctb::chatbot::URIEntry::~URIEntry((void **)v38);
}

void sub_24958F300(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_2495B7BA0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (MEMORY[0x263F2B440] && v8 == *MEMORY[0x263F2B440])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = sub_2495B7B90();
    v16[1] = v16;
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(void *)(v10 + 64);
    MEMORY[0x270FA5388](v9);
    unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v13 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))((char *)v16 - v12, v7, v9);
    v16[0] = v16;
    MEMORY[0x270FA5388](v13);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v16 - v12, (char *)v16 - v12, v9);
    sub_24958EF7C((uint64_t)v16 - v12, v17);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    (*(void (**)(char *, uint64_t))(v10 + 8))((char *)v16 - v12, v9);
    std::__variant_detail::__alt<7ul,ctb::chatbot::SuggestedActionCalendar>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionCalendar>(a2, (long long *)v17);
    ctb::chatbot::CreateCalendarEvent::~CreateCalendarEvent((void **)v17);
  }
  else
  {
    *(void *)(a2 + 12std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    double v14 = ctb::chatbot::SuggestedActionCalendar::SuggestedActionCalendar((ctb::chatbot::SuggestedActionCalendar *)a2);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, double))(v5 + 8);
    v15(a1, v4, v14);
    ((void (*)(char *, uint64_t))v15)(v7, v4);
  }
}

void sub_24958F5CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFE70);
  uint64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_2495B8490();
  MEMORY[0x270FA5388](v7);
  sub_24957864C((uint64_t)v6, (uint64_t)v6, &qword_2696BFE70);
  uint64_t v8 = sub_2495B8480();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8);
  if (v10 == 1)
  {
    int v11 = 0;
  }
  else
  {
    v29[1] = v29;
    uint64_t v12 = *(void *)(v9 + 64);
    MEMORY[0x270FA5388](v10);
    unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))((char *)v29 - v13, v6, v8);
    MEMORY[0x270FA5388](v14);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))((char *)v29 - v13, (char *)v29 - v13, v8);
    int v15 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))((char *)v29 - v13, v8);
    if (MEMORY[0x263F2B820] && v15 == *MEMORY[0x263F2B820])
    {
      int v11 = 1;
    }
    else if (MEMORY[0x263F2B828] && v15 == *MEMORY[0x263F2B828])
    {
      int v11 = 2;
    }
    else if (MEMORY[0x263F2B830] && v15 == *MEMORY[0x263F2B830])
    {
      int v11 = 3;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))((char *)v29 - v13, v8);
      int v11 = 0;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))((char *)v29 - v13, v8);
  }
  sub_2495786B0((uint64_t)v6, &qword_2696BFE70);
  uint64_t v16 = sub_2495B6630();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  unint64_t v19 = (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B8470();
  unint64_t v20 = sub_2495B6610();
  unint64_t v22 = v21;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v20, v22, &v33);
  uint64_t v23 = sub_2495B8440();
  if (!v24)
  {
    memset(&v30, 0, sizeof(v30));
    char v31 = 1;
    goto LABEL_18;
  }
  unint64_t v25 = v23;
  unint64_t v26 = v24;
  swift_bridgeObjectRetain();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v25, v26, &v30);
  char v31 = 0;
  swift_bridgeObjectRelease();
  if (v31)
  {
LABEL_18:
    memset(&v32, 0, sizeof(v32));
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v32);
    uint64_t v28 = sub_2495B84A0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(a1, v28);
    sub_2495786B0((uint64_t)&v30, &qword_2696BFD98);
    goto LABEL_19;
  }
  uint64_t v27 = sub_2495B84A0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(a1, v27);
  std::string::basic_string[abi:ne180100]((__n128 *)&v32, (__n128 *)&v30);
  std::string::~string(&v30);
LABEL_19:
  *(_DWORD *)a2 = v11;
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 8), (__n128 *)&v33);
  std::string::~string(&v33);
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 32), (__n128 *)&v32);
  std::string::~string(&v32);
}

void sub_24958FA58(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_2495B8400();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  sub_2495B8360();
  uint64_t v7 = sub_2495B83E0();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B83F0();
  int v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11((char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v10, v7);
  if (MEMORY[0x263F2B7C8] && v12 == *MEMORY[0x263F2B7C8])
  {
    uint64_t v64 = v4;
    uint64_t v67 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 96))(v10, v7);
    uint64_t v13 = sub_2495B83A0();
    v66 = (char *)&v60;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = *(void *)(v14 + 64);
    MEMORY[0x270FA5388](v13);
    unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))((char *)&v60 - v16, v10, v13);
    MEMORY[0x270FA5388](v17);
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    uint64_t v65 = (char *)&v60 - v16;
    v18((char *)&v60 - v16, (char *)&v60 - v16, v13);
    sub_2495B8380();
    double v20 = v19;
    sub_2495B8390();
    double v22 = v21;
    uint64_t v63 = *(void (**)(char *, uint64_t))(v14 + 8);
    v63((char *)&v60 - v16, v13);
    v74.fLatitude = v20;
    v74.fLongitude = v22;
    ctb::bridging::makeOptional(v74, (uint64_t)&v70);
    long long v62 = *(_OWORD *)&v70.__r_.__value_.__l.__data_;
    std::string::size_type v61 = v70.__r_.__value_.__r.__words[2];
    type metadata accessor for std.__1.optional_SuggestedActionShowQuery_(0);
    uint64_t v24 = v23;
    uint64_t v25 = sub_249594D9C(&qword_2696BF8A8, type metadata accessor for std.__1.optional_SuggestedActionShowQuery_);
    uint64_t v26 = CxxOptional.init(nilLiteral:)(v24, v25);
    MEMORY[0x270FA5388](v26);
    sub_2495B8360();
    unint64_t v27 = sub_2495B83D0();
    unint64_t v29 = v28;
    v67((char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v64);
    sub_249595C64(v27, v29, (uint64_t)v69);
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD90);
    MEMORY[0x270FA5388](v30 - 8);
    std::string v32 = (char *)&v60 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B8350();
    sub_249595D34((uint64_t)v32, (uint64_t)v68);
    uint64_t v33 = sub_2495B8370();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(a1, v33);
    v63(v65, v13);
    *(void *)(a2 + 16) = v61;
    *(_OWORD *)a2 = v62;
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a2 + 24, (__n128 *)&v70);
    ctb::chatbot::URIEntry::~URIEntry((void **)&v70.__r_.__value_.__l.__data_);
    std::optional<std::string>::optional[abi:ne180100](a2 + 56, v69);
    ctb::chatbot::URIEntry::~URIEntry((void **)v69);
    std::optional<std::string>::optional[abi:ne180100](a2 + 88, v68);
    ctb::chatbot::URIEntry::~URIEntry((void **)v68);
  }
  else if (MEMORY[0x263F2B7D8] && v12 == *MEMORY[0x263F2B7D8])
  {
    uint64_t v64 = a1;
    uint64_t v67 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 96))(v10, v7);
    uint64_t v34 = sub_2495B83C0();
    uint64_t v65 = (char *)&v60;
    uint64_t v35 = *(void *)(v34 - 8);
    uint64_t v36 = *(void *)(v35 + 64);
    MEMORY[0x270FA5388](v34);
    v66 = (char *)((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v37 = (void (*)(char *, uint64_t))((char *)&v60 - v66);
    (*(void (**)(int64_t, char *, uint64_t))(v35 + 32))((char *)&v60 - v66, v10, v34);
    type metadata accessor for std.__1.optional_SuggestedActionShowCoordinates_(0);
    uint64_t v39 = v38;
    uint64_t v40 = sub_249594D9C(&qword_2696BF8B0, type metadata accessor for std.__1.optional_SuggestedActionShowCoordinates_);
    uint64_t v41 = CxxOptional.init(nilLiteral:)(v39, v40);
    *(void *)&long long v62 = v73;
    std::string::size_type v61 = v72;
    uint64_t v60 = v71;
    MEMORY[0x270FA5388](v41);
    std::string v42 = (char *)((char *)&v60 - v66);
    unint64_t v43 = *(uint64_t (**)(int64_t, char *, uint64_t))(v35 + 16);
    uint64_t v63 = v37;
    uint64_t v44 = v43((char *)&v60 - v66, (char *)v37, v34);
    unint64_t v45 = MEMORY[0x24C5A2FE0](v44);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v45, v46, &v70);
    unint64_t v47 = *(void (**)(char *, uint64_t))(v35 + 8);
    v66 = (char *)v34;
    v47(v42, v34);
    std::string::basic_string[abi:ne180100](v69, (__n128 *)&v70);
    std::string::~string(&v70);
    int Optional = ctb::bridging::makeOptional((uint64_t *)&v70, (ctb::bridging *)v69, v48);
    MEMORY[0x270FA5388](Optional);
    uint64_t v50 = v64;
    sub_2495B8360();
    unint64_t v51 = sub_2495B83D0();
    unint64_t v53 = v52;
    v67((char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    sub_249595C64(v51, v53, (uint64_t)v69);
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD90);
    MEMORY[0x270FA5388](v54 - 8);
    uint64_t v56 = (char *)&v60 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B8350();
    sub_249595D34((uint64_t)v56, (uint64_t)v68);
    uint64_t v57 = sub_2495B8370();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(v50, v57);
    v47((char *)v63, (uint64_t)v66);
    std::string::size_type v58 = v61;
    *(void *)a2 = v60;
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v58;
    *(void *)(a2 + 16) = v62;
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](a2 + 24, (__n128 *)&v70);
    ctb::chatbot::URIEntry::~URIEntry((void **)&v70.__r_.__value_.__l.__data_);
    std::optional<std::string>::optional[abi:ne180100](a2 + 56, v69);
    ctb::chatbot::URIEntry::~URIEntry((void **)v69);
    std::optional<std::string>::optional[abi:ne180100](a2 + 88, v68);
    ctb::chatbot::URIEntry::~URIEntry((void **)v68);
  }
  else
  {
    *(void *)(a2 + 112) = 0;
    *(_OWORD *)(a2 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    ctb::chatbot::SuggestedActionShowLocation::SuggestedActionShowLocation((unsigned char *)a2);
    uint64_t v59 = sub_2495B8370();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(a1, v59);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t sub_249590348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v106 = a1;
  uint64_t v5 = sub_2495B7AF0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
  int v9 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v8, v5);
  if (MEMORY[0x263F2B408] && v9 == *MEMORY[0x263F2B408])
  {
    (*(void (**)(char *, uint64_t))(v6 + 96))(v8, v5);
    uint64_t v10 = sub_2495B7AA0();
    uint64_t v104 = a2;
    uint64_t v105 = v5;
    uint64_t v11 = v10;
    v103 = v90;
    uint64_t v12 = *(void *)(v10 - 8);
    uint64_t v13 = *(void *)(v12 + 64);
    MEMORY[0x270FA5388](v10);
    unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    v101 = (char *)v90 - v14;
    (*(void (**)(void))(v12 + 32))();
    v102 = (void *)sub_2495B7C80();
    uint64_t v15 = *(v102 - 1);
    MEMORY[0x270FA5388](v102);
    uint64_t v17 = (char *)v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t))(v15 + 16))(v17, v106);
    sub_2495910D8((uint64_t)v17, v111);
    MEMORY[0x270FA5388](v18);
    double v19 = v101;
    uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 16))((char *)v90 - v14, v101, v11);
    unint64_t v21 = MEMORY[0x24C5A26B0](v20);
    uint64_t v23 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v21, v22, v110);
    unint64_t v24 = MEMORY[0x24C5A26C0](v23);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v24, v25, &v107);
    uint64_t v26 = *(void (**)(char *, uint64_t))(v12 + 8);
    v26((char *)v90 - v14, v11);
    std::string::basic_string[abi:ne180100](&v108, (__n128 *)v110);
    std::string::~string(v110);
    std::string::basic_string[abi:ne180100](&v109, (__n128 *)&v107);
    std::string::~string(&v107);
    __n128 SuggestedActionVariant = ctb::bridging::makeSuggestedActionVariant((uint64_t)&v108, (uint64_t)v110);
    (*(void (**)(uint64_t, uint64_t, __n128))(v6 + 8))(v104, v105, SuggestedActionVariant);
    (*(void (**)(uint64_t, void *))(v15 + 8))(v106, v102);
    v26(v19, v11);
    *(_DWORD *)a3 = 3;
    ctb::chatbot::Media::Media((__n128 *)(a3 + 8), (uint64_t)v111);
    ctb::chatbot::Media::~Media((void **)v111);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](a3 + 64, (uint64_t)v110);
    return std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v110);
  }
  if (!MEMORY[0x263F2B418] || v9 != *MEMORY[0x263F2B418])
  {
    *(void *)(a3 + 20std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(_OWORD *)(a3 + 176) = 0u;
    *(_OWORD *)(a3 + 192) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 16std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 12std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
    *(_OWORD *)(a3 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    double v44 = ctb::chatbot::SuggestedAction::SuggestedAction((ctb::chatbot::SuggestedAction *)a3);
    unint64_t v45 = *(void (**)(uint64_t, uint64_t, double))(v6 + 8);
    v45(a2, v5, v44);
    uint64_t v46 = sub_2495B7C80();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v106, v46);
    return ((uint64_t (*)(char *, uint64_t))v45)(v8, v5);
  }
  uint64_t v104 = a2;
  uint64_t v105 = v5;
  (*(void (**)(char *, uint64_t))(v6 + 96))(v8, v5);
  uint64_t v29 = sub_2495B7AE0();
  __n128 v95 = v90;
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (char *)v90 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = v32;
  uint64_t v33 = (void (*)(char *, char *, char *))v32[2];
  v100 = v32 + 2;
  v101 = v34;
  uint64_t v98 = v30;
  v99 = v33;
  ((void (*)(char *, char *))v33)(v31, v8);
  uint64_t v35 = sub_2495B7AC0();
  v97 = (uint64_t (*)(char *, char *))v90;
  uint64_t v36 = *(void **)(v35 - 8);
  uint64_t v37 = v36[8];
  MEMORY[0x270FA5388](v35);
  uint64_t v38 = (char *)v90 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = v31;
  uint64_t v39 = sub_2495B7AD0();
  uint64_t v96 = v90;
  uint64_t v92 = v37;
  MEMORY[0x270FA5388](v39);
  uint64_t v40 = *MEMORY[0x263F2B3E0];
  v102 = v36;
  std::string v42 = (void (*)(char *, void, uint64_t))v36[13];
  uint64_t v41 = (char *)(v36 + 13);
  v91 = v42;
  v42(v38, v40, v35);
  uint64_t v43 = sub_249594BA8(&qword_2696BFE60, MEMORY[0x270FB09A8]);
  sub_2495B8750();
  v90[3] = v43;
  sub_2495B8750();
  if (*(_OWORD *)&v110[0].__r_.__value_.__l.__data_ == *(_OWORD *)v111) {
    LODWORD(v93) = 1;
  }
  else {
    LODWORD(v93) = sub_2495B89B0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v47 = v102 + 1;
  double v48 = (void (*)(char *, uint64_t))v102[1];
  v48(v38, v35);
  v48(v38, v35);
  if (v93)
  {
    v102 = (void *)sub_2495B7C80();
    uint64_t v49 = *(v102 - 1);
    MEMORY[0x270FA5388](v102);
    unint64_t v51 = (char *)v90 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t))(v49 + 16))(v51, v106);
    sub_2495910D8((uint64_t)v51, v111);
    v97 = (uint64_t (*)(char *, char *))v90;
    MEMORY[0x270FA5388](v52);
    uint64_t v54 = (char *)v90 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v55 = v94;
    uint64_t v56 = v101;
    v99(v54, v94, v101);
    unint64_t v57 = sub_2495B7AB0();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v57, v58, v110);
    uint64_t v59 = (void (*)(char *, char *))v103[1];
    v59(v54, v56);
    std::string::basic_string[abi:ne180100](&v108, (__n128 *)v110);
    std::string::~string(v110);
    __n128 v60 = ctb::bridging::makeSuggestedActionVariant(&v108, (uint64_t)v110);
    (*(void (**)(uint64_t, uint64_t, __n128))(v6 + 8))(v104, v105, v60);
    (*(void (**)(uint64_t, void *))(v49 + 8))(v106, v102);
    v59(v55, v56);
    *(_DWORD *)a3 = 4;
    ctb::chatbot::Media::Media((__n128 *)(a3 + 8), (uint64_t)v111);
    ctb::chatbot::Media::~Media((void **)v111);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](a3 + 64, (uint64_t)v110);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v110);
    return ((uint64_t (*)(char *, char *))v59)(v8, v56);
  }
  int v93 = v48;
  v102 = v47;
  std::string::size_type v61 = (void *)v103[1];
  long long v62 = v101;
  ++v103;
  v97 = (uint64_t (*)(char *, char *))v61;
  uint64_t v63 = ((uint64_t (*)(char *, char *))v61)(v94, v101);
  __n128 v95 = v90;
  MEMORY[0x270FA5388](v63);
  uint64_t v65 = (char *)v90 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = ((uint64_t (*)(char *, char *, char *))v99)(v65, v8, v62);
  v90[2] = v90;
  uint64_t v94 = v41;
  uint64_t v67 = v92;
  MEMORY[0x270FA5388](v66);
  uint64_t v68 = (char *)v90 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = v65;
  uint64_t v69 = sub_2495B7AD0();
  v90[1] = v90;
  MEMORY[0x270FA5388](v69);
  v91(v68, *MEMORY[0x263F2B3E8], v35);
  sub_2495B8750();
  sub_2495B8750();
  if (*(_OWORD *)&v110[0].__r_.__value_.__l.__data_ == *(_OWORD *)v111)
  {
    swift_bridgeObjectRelease_n();
    std::string v70 = v93;
    v93(v68, v35);
    v70(v68, v35);
LABEL_15:
    uint64_t v73 = sub_2495B7C80();
    uint64_t v74 = *(void *)(v73 - 8);
    MEMORY[0x270FA5388](v73);
    long long v76 = (char *)v90 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v76, v106, v73);
    sub_2495910D8((uint64_t)v76, v111);
    v102 = v90;
    MEMORY[0x270FA5388](v77);
    uint64_t v79 = (char *)v90 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v80 = (char *)v96;
    v81 = v101;
    v99(v79, (char *)v96, v101);
    unint64_t v82 = sub_2495B7AB0();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v82, v83, v110);
    int v84 = v97;
    v97(v79, v81);
    std::string::basic_string[abi:ne180100](&v108, (__n128 *)v110);
    std::string::~string(v110);
    __n128 v85 = ctb::bridging::makeSuggestedActionVariant(&v108, (uint64_t)v110);
    (*(void (**)(uint64_t, uint64_t, __n128))(v6 + 8))(v104, v105, v85);
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v106, v73);
    v84(v80, v81);
    *(_DWORD *)a3 = 5;
    ctb::chatbot::Media::Media((__n128 *)(a3 + 8), (uint64_t)v111);
    ctb::chatbot::Media::~Media((void **)v111);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](a3 + 64, (uint64_t)v110);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v110);
    return v84(v8, v81);
  }
  LODWORD(v94) = sub_2495B89B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v71 = v93;
  v93(v68, v35);
  v71(v68, v35);
  uint64_t v72 = v105;
  if (v94) {
    goto LABEL_15;
  }
  v86 = v97;
  v87 = v101;
  v97((char *)v96, v101);
  *(void *)(a3 + 20std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 16std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 12std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a3 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  double v88 = ctb::chatbot::SuggestedAction::SuggestedAction((ctb::chatbot::SuggestedAction *)a3);
  (*(void (**)(uint64_t, uint64_t, double))(v6 + 8))(v104, v72, v88);
  uint64_t v89 = sub_2495B7C80();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v89 - 8) + 8))(v106, v89);
  return v86(v8, v87);
}

void sub_2495910D8(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v4 = MEMORY[0x24C5A2890]();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v4, v5, &v30);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFE48);
  uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2495B7C70();
  MEMORY[0x270FA5388](v9);
  sub_24957864C((uint64_t)v8, (uint64_t)v8, &qword_2696BFE48);
  uint64_t v10 = sub_2495B8220();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10);
  if (v12 == 1)
  {
    memset(v27, 0, sizeof(v27));
    char v28 = 1;
  }
  else
  {
    v26[1] = v26;
    uint64_t v13 = *(void *)(v11 + 64);
    MEMORY[0x270FA5388](v12);
    unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))((char *)v26 - v14, v8, v10);
    MEMORY[0x270FA5388](v15);
    uint64_t v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))((char *)v26 - v14, (char *)v26 - v14, v10);
    unint64_t v17 = MEMORY[0x24C5A2E40](v16);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v17, v18, (std::string *)v27);
    double v19 = *(void (**)(char *, uint64_t))(v11 + 8);
    v19((char *)v26 - v14, v10);
    ctb::SIPConferenceInfo::SubjectExt::SubjectExt(v29, (__n128 *)v27);
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)v27);
    ctb::bridging::makeOptional((uint64_t *)v27, (ctb::bridging *)v29, v20);
    v19((char *)v26 - v14, v10);
    char v28 = 0;
  }
  sub_2495786B0((uint64_t)v8, &qword_2696BFE48);
  if (v28)
  {
    type metadata accessor for std.__1.optional_PostbackData_(0);
    uint64_t v22 = v21;
    uint64_t v23 = sub_249594D9C(&qword_2696BF8A0, type metadata accessor for std.__1.optional_PostbackData_);
    CxxOptional.init(nilLiteral:)(v22, v23);
    uint64_t v24 = sub_2495B7C80();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(a1, v24);
    sub_2495786B0((uint64_t)v27, &qword_2696BFE50);
  }
  else
  {
    uint64_t v25 = sub_2495B7C80();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(a1, v25);
    std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)v29, (__n128 *)v27);
    ctb::chatbot::URIEntry::~URIEntry((void **)v27);
  }
  std::string::basic_string[abi:ne180100](a2, (__n128 *)&v30);
  std::string::~string(&v30);
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100]((uint64_t)&a2[1].n128_i64[1], v29);
  ctb::chatbot::URIEntry::~URIEntry((void **)v29);
}

uint64_t sub_24959145C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_2495B84B0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  int v10 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (MEMORY[0x263F2B858] && v10 == *MEMORY[0x263F2B858])
  {
    uint64_t v84 = a2;
    uint64_t v92 = a1;
    (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
    uint64_t v11 = sub_2495B84A0();
    unint64_t v83 = v76;
    MEMORY[0x270FA5388](v11);
    uint64_t v13 = (char *)v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v93 = v14;
    uint64_t v15 = *(void (**)(char *, void *, uint64_t))(v14 + 16);
    char v90 = v9;
    uint64_t v91 = v16;
    uint64_t v89 = (void *)(v14 + 16);
    uint64_t v87 = v12;
    double v88 = (uint64_t (*)(char *, char *, uint64_t))v15;
    ((void (*)(char *, char *))v15)(v13, v9);
    uint64_t v17 = sub_2495B8450();
    v86 = v76;
    uint64_t v18 = *(void *)(v17 - 8);
    double v19 = *(void **)(v18 + 64);
    MEMORY[0x270FA5388](v17);
    uint64_t v20 = (char *)v76 - (((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v82 = v13;
    uint64_t v21 = sub_2495B8460();
    __n128 v85 = v76;
    v81 = v19;
    MEMORY[0x270FA5388](v21);
    uint64_t v22 = *MEMORY[0x263F2B808];
    uint64_t v94 = v18;
    uint64_t v79 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 104);
    uint64_t v80 = v18 + 104;
    v79(v20, v22, v17);
    uint64_t v23 = sub_249594BA8(&qword_2696BFE68, MEMORY[0x270FB0BA0]);
    sub_2495B8750();
    uint64_t v78 = v23;
    sub_2495B8750();
    if (v96[0].__r_.__value_.__r.__words[0] == v97[0].n128_u64[0]
      && v96[0].__r_.__value_.__l.__size_ == v97[0].n128_u64[1])
    {
      char v24 = 1;
    }
    else
    {
      char v24 = sub_2495B89B0();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v29 = v94 + 8;
    std::string v30 = *(void (**)(char *, uint64_t))(v94 + 8);
    v30(v20, v17);
    v30(v20, v17);
    if (v24)
    {
      uint64_t v31 = sub_2495B7C80();
      uint64_t v32 = *(void *)(v31 - 8);
      MEMORY[0x270FA5388](v31);
      uint64_t v34 = (char *)v76 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v34, v92, v31);
      sub_2495910D8((uint64_t)v34, v97);
      MEMORY[0x270FA5388](v35);
      uint64_t v37 = (char *)v76 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v38 = v82;
      uint64_t v39 = v91;
      v88(v37, (char *)v82, v91);
      sub_24958F5CC((uint64_t)v37, (uint64_t)v95);
      __n128 SuggestedActionVariant = ctb::bridging::makeSuggestedActionVariant((uint64_t)v95, (uint64_t)v96);
      (*(void (**)(uint64_t, uint64_t, __n128))(v7 + 8))(v84, v6, SuggestedActionVariant);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v92, v31);
      uint64_t v41 = *(uint64_t (**)(char *, uint64_t))(v93 + 8);
      v41((char *)v38, v39);
      *(_DWORD *)a3 = 1;
      ctb::chatbot::Media::Media((__n128 *)(a3 + 8), (uint64_t)v97);
      ctb::chatbot::Media::~Media((void **)v97);
      std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](a3 + 64, (uint64_t)v96);
      std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v96);
      return v41(v90, v39);
    }
    uint64_t v77 = v30;
    uint64_t v94 = v29;
    std::string v42 = *(void **)(v93 + 8);
    uint64_t v43 = v91;
    v93 += 8;
    __n128 v85 = v42;
    uint64_t v44 = ((uint64_t (*)(void *, uint64_t))v42)(v82, v91);
    unint64_t v83 = v76;
    MEMORY[0x270FA5388](v44);
    uint64_t v46 = (char *)v76 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v47 = v88(v46, v90, v43);
    unint64_t v82 = v76;
    double v48 = v81;
    MEMORY[0x270FA5388](v47);
    v86 = v46;
    uint64_t v49 = sub_2495B8460();
    v76[1] = v76;
    MEMORY[0x270FA5388](v49);
    uint64_t v50 = (char *)v76 - (((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF0);
    v79(v50, *MEMORY[0x263F2B7F8], v17);
    v81 = v50;
    sub_2495B8750();
    sub_2495B8750();
    if (v96[0].__r_.__value_.__r.__words[0] == v97[0].n128_u64[0]
      && v96[0].__r_.__value_.__l.__size_ == v97[0].n128_u64[1])
    {
      swift_bridgeObjectRelease_n();
      unint64_t v51 = v77;
      v77((char *)v76 - (((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
      v51((char *)v81, v17);
LABEL_16:
      unint64_t v82 = (void *)sub_2495B7C80();
      uint64_t v94 = *(v82 - 1);
      MEMORY[0x270FA5388](v82);
      uint64_t v56 = (char *)v76 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, uint64_t))(v57 + 16))(v56, v92);
      sub_2495910D8((uint64_t)v56, v97);
      v81 = v76;
      MEMORY[0x270FA5388](v58);
      __n128 v60 = (char *)v76 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
      v88(v60, (char *)v86, v91);
      uint64_t v61 = sub_2495B6630();
      uint64_t v89 = v76;
      uint64_t v62 = *(void *)(v61 - 8);
      MEMORY[0x270FA5388](v61);
      uint64_t v64 = (char *)v76 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_2495B8470();
      unint64_t v65 = sub_2495B6610();
      unint64_t v67 = v66;
      (*(void (**)(char *, uint64_t))(v62 + 8))(v64, v61);
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v65, v67, v96);
      uint64_t v68 = v60;
      uint64_t v69 = v91;
      std::string v70 = (uint64_t (*)(char *, uint64_t))v85;
      ((void (*)(char *, uint64_t))v85)(v68, v91);
      std::string::basic_string[abi:ne180100](v95, (__n128 *)v96);
      std::string::~string(v96);
      __n128 v71 = ctb::bridging::makeSuggestedActionVariant(v95, (uint64_t)v96);
      (*(void (**)(uint64_t, uint64_t, __n128))(v7 + 8))(v84, v6, v71);
      (*(void (**)(uint64_t, void *))(v94 + 8))(v92, v82);
      v70((char *)v86, v69);
      *(_DWORD *)a3 = 2;
      ctb::chatbot::Media::Media((__n128 *)(a3 + 8), (uint64_t)v97);
      ctb::chatbot::Media::~Media((void **)v97);
      std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](a3 + 64, (uint64_t)v96);
      std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v96);
      return v70(v90, v69);
    }
    char v52 = sub_2495B89B0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v53 = v50;
    uint64_t v54 = v77;
    v77(v53, v17);
    v54((char *)v81, v17);
    if (v52) {
      goto LABEL_16;
    }
    uint64_t v72 = (uint64_t (*)(char *, uint64_t))v85;
    uint64_t v73 = v91;
    ((void (*)(char *, uint64_t))v85)((char *)v86, v91);
    *(void *)(a3 + 20std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(_OWORD *)(a3 + 176) = 0u;
    *(_OWORD *)(a3 + 192) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 16std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 12std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
    *(_OWORD *)(a3 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    double v74 = ctb::chatbot::SuggestedAction::SuggestedAction((ctb::chatbot::SuggestedAction *)a3);
    (*(void (**)(uint64_t, uint64_t, double))(v7 + 8))(v84, v6, v74);
    uint64_t v75 = sub_2495B7C80();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v75 - 8) + 8))(v92, v75);
    return v72(v90, v73);
  }
  else
  {
    *(void *)(a3 + 20std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(_OWORD *)(a3 + 176) = 0u;
    *(_OWORD *)(a3 + 192) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 16std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 12std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
    *(_OWORD *)(a3 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    double v25 = ctb::chatbot::SuggestedAction::SuggestedAction((ctb::chatbot::SuggestedAction *)a3);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, double))(v7 + 8);
    v26(a2, v6, v25);
    uint64_t v27 = sub_2495B7C80();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(a1, v27);
    return ((uint64_t (*)(char *, uint64_t))v26)(v9, v6);
  }
}

uint64_t sub_249591FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_2495B8410();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  int v10 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (MEMORY[0x263F2B7A8] && v10 == *MEMORY[0x263F2B7A8])
  {
    (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
    uint64_t v11 = sub_2495B8370();
    uint64_t v39 = v33;
    uint64_t v37 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(void *)(v12 + 64);
    MEMORY[0x270FA5388](v11);
    unint64_t v38 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v14 = (char *)v33 - v38;
    uint64_t v15 = *(void (**)(char *, char *))(v12 + 32);
    uint64_t v34 = (char *)v33 - v38;
    v15((char *)v33 - v38, v9);
    uint64_t v16 = sub_2495B7C80();
    v33[1] = v33;
    uint64_t v36 = v16;
    uint64_t v17 = *(void *)(v16 - 8);
    MEMORY[0x270FA5388](v16);
    uint64_t v19 = a1;
    uint64_t v35 = a1;
    uint64_t v20 = (char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t))(v17 + 16))(v20, v19);
    sub_2495910D8((uint64_t)v20, v42);
    MEMORY[0x270FA5388](v21);
    uint64_t v22 = (char *)v33 - v38;
    uint64_t v23 = v14;
    uint64_t v24 = v37;
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))((char *)v33 - v38, v23, v37);
    sub_24958FA58((uint64_t)v22, (uint64_t)v40);
    ctb::bridging::makeSuggestedActionVariant((uint64_t)v40, (uint64_t)v41);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v35, v36);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v34, v24);
    *(_DWORD *)a3 = 6;
    ctb::chatbot::Media::Media((__n128 *)(a3 + 8), (uint64_t)v42);
    ctb::chatbot::Media::~Media((void **)v42);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](a3 + 64, (uint64_t)v41);
    return std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v41);
  }
  else if (MEMORY[0x263F2B7B0] && v10 == *MEMORY[0x263F2B7B0])
  {
    uint64_t v26 = sub_2495B7C80();
    uint64_t v27 = *(void *)(v26 - 8);
    MEMORY[0x270FA5388](v26);
    uint64_t v29 = (char *)v33 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v29, a1, v26);
    sub_2495910D8((uint64_t)v29, v40);
    v41[0] = 1;
    ctb::bridging::makeSuggestedActionVariant(1, (uint64_t)v41);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(a1, v26);
    *(_DWORD *)a3 = 7;
    ctb::chatbot::Media::Media((__n128 *)(a3 + 8), (uint64_t)v40);
    ctb::chatbot::Media::~Media((void **)v40);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](a3 + 64, (uint64_t)v41);
    return std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v41);
  }
  else
  {
    *(void *)(a3 + 20std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(_OWORD *)(a3 + 176) = 0u;
    *(_OWORD *)(a3 + 192) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 16std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 12std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
    *(_OWORD *)(a3 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    double v30 = ctb::chatbot::SuggestedAction::SuggestedAction((ctb::chatbot::SuggestedAction *)a3);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t, double))(v7 + 8);
    v31(a2, v6, v30);
    uint64_t v32 = sub_2495B7C80();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(a1, v32);
    return ((uint64_t (*)(char *, uint64_t))v31)(v9, v6);
  }
}

uint64_t sub_24959250C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_2495B7A60();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  int v10 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (MEMORY[0x263F2B368] && v10 == *MEMORY[0x263F2B368])
  {
    (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
    uint64_t v11 = sub_2495B7A10();
    uint64_t v89 = &v83;
    uint64_t v90 = a1;
    uint64_t v84 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(void *)(v12 + 64);
    MEMORY[0x270FA5388](v11);
    unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    __n128 v85 = (char *)&v83 - v14;
    (*(void (**)(void))(v12 + 32))();
    uint64_t v15 = sub_2495B7C80();
    uint64_t v91 = a2;
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v87 = v15;
    uint64_t v88 = v16;
    MEMORY[0x270FA5388](v15);
    uint64_t v18 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t))(v19 + 16))(v18, a1);
    sub_2495910D8((uint64_t)v18, &v94);
    v86 = &v83;
    MEMORY[0x270FA5388](v20);
    uint64_t v21 = (char *)&v83 - v14;
    uint64_t v22 = (char *)&v83 - v14;
    uint64_t v24 = v84;
    uint64_t v23 = v85;
    uint64_t v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 16))(v22, v85, v84);
    unint64_t v26 = MEMORY[0x24C5A2620](v25);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v26, v27, &v92);
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD90);
    MEMORY[0x270FA5388](v28 - 8);
    double v30 = (char *)&v83 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7A00();
    sub_249595D34((uint64_t)v30, (uint64_t)v99);
    uint64_t v31 = *(void (**)(char *, uint64_t))(v12 + 8);
    v31(v21, v24);
    std::string::basic_string[abi:ne180100](&v97, (__n128 *)&v92);
    std::string::~string(&v92);
    std::optional<std::string>::optional[abi:ne180100]((uint64_t)v98, v99);
    ctb::chatbot::URIEntry::~URIEntry((void **)v99);
    ctb::bridging::makeSuggestedActionVariant((long long *)&v97, (uint64_t)v99);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v91, v6);
    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v90, v87);
    v31(v23, v24);
    int v32 = 11;
LABEL_10:
    uint64_t v78 = (__n128 *)(a3 + 8);
    *(_DWORD *)a3 = v32;
    uint64_t v55 = a3 + 64;
    ctb::chatbot::Media::Media(v78, (uint64_t)&v94);
    uint64_t v56 = &v94;
    goto LABEL_11;
  }
  if (MEMORY[0x263F2B370] && v10 == *MEMORY[0x263F2B370])
  {
    (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
    uint64_t v33 = sub_2495B7A50();
    uint64_t v89 = &v83;
    uint64_t v34 = *(char **)(v33 - 8);
    uint64_t v84 = v33;
    __n128 v85 = v34;
    uint64_t v35 = *((void *)v34 + 8);
    MEMORY[0x270FA5388](v33);
    uint64_t v36 = (char *)&v83 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *))(v37 + 32))(v36, v9);
    uint64_t v38 = sub_2495B7C80();
    uint64_t v90 = a1;
    uint64_t v91 = a2;
    uint64_t v87 = *(void *)(v38 - 8);
    uint64_t v88 = v38;
    MEMORY[0x270FA5388](v38);
    uint64_t v40 = (char *)&v83 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t))(v41 + 16))(v40, a1);
    sub_2495910D8((uint64_t)v40, &v97);
    v86 = &v83;
    MEMORY[0x270FA5388](v42);
    uint64_t v44 = v84;
    uint64_t v43 = v85;
    uint64_t v45 = (*((uint64_t (**)(char *, char *, uint64_t))v85 + 2))(v36, v36, v84);
    unint64_t v46 = MEMORY[0x24C5A2660](v45);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v46, v47, &v93);
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD90);
    MEMORY[0x270FA5388](v48 - 8);
    uint64_t v50 = (char *)&v83 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7A20();
    sub_249595D34((uint64_t)v50, (uint64_t)v99);
    unint64_t v51 = sub_2495B7A40();
    sub_249595C64(v51, v52, (uint64_t)&v92);
    uint64_t v53 = (void (*)(char *, uint64_t))*((void *)v43 + 1);
    v53(v36, v44);
    std::string::basic_string[abi:ne180100](&v94, (__n128 *)&v93);
    std::string::~string(&v93);
    std::optional<std::string>::optional[abi:ne180100]((uint64_t)&v95, v99);
    ctb::chatbot::URIEntry::~URIEntry((void **)v99);
    std::optional<std::string>::optional[abi:ne180100]((uint64_t)&v96, (__n128 *)&v92);
    ctb::chatbot::URIEntry::~URIEntry((void **)&v92.__r_.__value_.__l.__data_);
    ctb::bridging::makeSuggestedActionVariant((uint64_t)&v94, (uint64_t)v99);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v91, v6);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v90, v88);
    v53(v36, v44);
    uint64_t v54 = (__n128 *)(a3 + 8);
    *(_DWORD *)a3 = 10;
    uint64_t v55 = a3 + 64;
    ctb::chatbot::Media::Media(v54, (uint64_t)&v97);
    uint64_t v56 = &v97;
LABEL_11:
    ctb::chatbot::Media::~Media((void **)v56);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](v55, (uint64_t)v99);
    return std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v99);
  }
  if (MEMORY[0x263F2B3A0] && v10 == *MEMORY[0x263F2B3A0])
  {
    (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
    uint64_t v57 = sub_2495B79E0();
    uint64_t v89 = &v83;
    uint64_t v90 = a1;
    uint64_t v84 = v57;
    uint64_t v58 = *(void *)(v57 - 8);
    uint64_t v59 = *(void *)(v58 + 64);
    MEMORY[0x270FA5388](v57);
    unint64_t v60 = (v59 + 15) & 0xFFFFFFFFFFFFFFF0;
    __n128 v85 = (char *)&v83 - v60;
    (*(void (**)(void))(v58 + 32))();
    uint64_t v61 = sub_2495B7C80();
    uint64_t v91 = a2;
    uint64_t v62 = *(void *)(v61 - 8);
    uint64_t v87 = v61;
    uint64_t v88 = v62;
    MEMORY[0x270FA5388](v61);
    uint64_t v64 = (char *)&v83 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t))(v65 + 16))(v64, a1);
    sub_2495910D8((uint64_t)v64, &v94);
    v86 = &v83;
    MEMORY[0x270FA5388](v66);
    unint64_t v67 = (char *)&v83 - v60;
    uint64_t v68 = (char *)&v83 - v60;
    uint64_t v70 = v84;
    uint64_t v69 = v85;
    uint64_t v71 = (*(uint64_t (**)(char *, char *, uint64_t))(v58 + 16))(v68, v85, v84);
    unint64_t v72 = MEMORY[0x24C5A2600](v71);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v72, v73, &v92);
    uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD90);
    MEMORY[0x270FA5388](v74 - 8);
    long long v76 = (char *)&v83 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B79C0();
    sub_249595D34((uint64_t)v76, (uint64_t)v99);
    uint64_t v77 = *(void (**)(char *, uint64_t))(v58 + 8);
    v77(v67, v70);
    std::string::basic_string[abi:ne180100](&v97, (__n128 *)&v92);
    std::string::~string(&v92);
    std::optional<std::string>::optional[abi:ne180100]((uint64_t)v98, v99);
    ctb::chatbot::URIEntry::~URIEntry((void **)v99);
    ctb::bridging::makeSuggestedActionVariant((long long *)&v97, (uint64_t)v99);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v91, v6);
    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v90, v87);
    v77(v69, v70);
    int v32 = 9;
    goto LABEL_10;
  }
  *(void *)(a3 + 20std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 16std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 12std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a3 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  double v80 = ctb::chatbot::SuggestedAction::SuggestedAction((ctb::chatbot::SuggestedAction *)a3);
  v81 = *(void (**)(uint64_t, uint64_t, double))(v7 + 8);
  v81(a2, v6, v80);
  uint64_t v82 = sub_2495B7C80();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v82 - 8) + 8))(a1, v82);
  return ((uint64_t (*)(char *, uint64_t))v81)(v9, v6);
}

uint64_t sub_249592FB8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_2495B8070();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B8090();
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (MEMORY[0x263F2B5C0] && v8 == *MEMORY[0x263F2B5C0])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = sub_2495B84B0();
    long long v76 = &v73;
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(void *)(v10 + 64);
    MEMORY[0x270FA5388](v9);
    uint64_t v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v7, v9);
    uint64_t v13 = sub_2495B7C80();
    uint64_t v75 = &v73;
    MEMORY[0x270FA5388](v13 - 8);
    uint64_t v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v16 = sub_2495B8080();
    MEMORY[0x270FA5388](v16);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v12, v9);
    sub_24959145C((uint64_t)v15, (uint64_t)v12, a2);
LABEL_16:
    uint64_t v42 = sub_2495B80A0();
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v42 - 8) + 8))(a1, v42);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  if (MEMORY[0x263F2B5E0] && v8 == *MEMORY[0x263F2B5E0])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = sub_2495B7A60();
    long long v76 = &v73;
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v17 = *(void *)(v10 + 64);
    MEMORY[0x270FA5388](v9);
    uint64_t v12 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v7, v9);
    uint64_t v18 = sub_2495B7C80();
    uint64_t v75 = &v73;
    MEMORY[0x270FA5388](v18 - 8);
    uint64_t v20 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v21 = sub_2495B8080();
    MEMORY[0x270FA5388](v21);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v12, v9);
    sub_24959250C((uint64_t)v20, (uint64_t)v12, a2);
    goto LABEL_16;
  }
  if (MEMORY[0x263F2B5B0] && v8 == *MEMORY[0x263F2B5B0])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = sub_2495B8410();
    long long v76 = &v73;
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v22 = *(void *)(v10 + 64);
    MEMORY[0x270FA5388](v9);
    uint64_t v12 = (char *)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v7, v9);
    uint64_t v23 = sub_2495B7C80();
    uint64_t v75 = &v73;
    MEMORY[0x270FA5388](v23 - 8);
    uint64_t v25 = (char *)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v26 = sub_2495B8080();
    MEMORY[0x270FA5388](v26);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v12, v9);
    sub_249591FBC((uint64_t)v25, (uint64_t)v12, a2);
    goto LABEL_16;
  }
  if (MEMORY[0x263F2B600] && v8 == *MEMORY[0x263F2B600])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v27 = sub_2495B7BA0();
    long long v76 = &v73;
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t v29 = *(void *)(v28 + 64);
    MEMORY[0x270FA5388](v27);
    unint64_t v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))((char *)&v73 - v30, v7, v27);
    uint64_t v31 = sub_2495B7C80();
    MEMORY[0x270FA5388](v31 - 8);
    uint64_t v33 = (char *)&v73 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B8080();
    sub_2495910D8((uint64_t)v33, v78);
    MEMORY[0x270FA5388](v34);
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))((char *)&v73 - v30, (char *)&v73 - v30, v27);
    sub_24958F300((uint64_t)&v73 - v30, (uint64_t)v77);
    ctb::bridging::makeSuggestedActionVariant((long long *)v77, (uint64_t)v79);
    uint64_t v35 = sub_2495B80A0();
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v35 - 8) + 8))(a1, v35);
    (*(void (**)(char *, uint64_t))(v28 + 8))((char *)&v73 - v30, v27);
    *(_DWORD *)a2 = 8;
    ctb::chatbot::Media::Media((__n128 *)(a2 + 8), (uint64_t)v78);
    ctb::chatbot::Media::~Media((void **)v78);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](a2 + 64, (uint64_t)v79);
    return std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v79);
  }
  if (MEMORY[0x263F2B5F8] && v8 == *MEMORY[0x263F2B5F8])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = sub_2495B7AF0();
    long long v76 = &v73;
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v37 = *(void *)(v10 + 64);
    MEMORY[0x270FA5388](v9);
    uint64_t v12 = (char *)&v73 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v7, v9);
    uint64_t v38 = sub_2495B7C80();
    uint64_t v75 = &v73;
    MEMORY[0x270FA5388](v38 - 8);
    uint64_t v40 = (char *)&v73 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v41 = sub_2495B8080();
    MEMORY[0x270FA5388](v41);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v12, v9);
    sub_249590348((uint64_t)v40, (uint64_t)v12, a2);
    goto LABEL_16;
  }
  if (MEMORY[0x263F2B5D8] && v8 == *MEMORY[0x263F2B5D8])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v43 = sub_2495B79B0();
    uint64_t v75 = &v73;
    uint64_t v44 = *(void *)(v43 - 8);
    uint64_t v45 = *(void *)(v44 + 64);
    MEMORY[0x270FA5388](v43);
    unint64_t v46 = (char *)&v73 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v46, v7, v43);
    uint64_t v47 = sub_2495B7C80();
    MEMORY[0x270FA5388](v47 - 8);
    uint64_t v49 = (char *)&v73 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
    long long v76 = a1;
    sub_2495B8080();
    sub_2495910D8((uint64_t)v49, v77);
    uint64_t v74 = &v73;
    MEMORY[0x270FA5388](v50);
    unint64_t v51 = *(uint64_t (**)(char *, char *, uint64_t))(v44 + 16);
    uint64_t v52 = v51(v46, v46, v43);
    uint64_t v73 = (uint64_t)&v73;
    MEMORY[0x270FA5388](v52);
    v51(v46, v46, v43);
    int v53 = (*(uint64_t (**)(char *, uint64_t))(v44 + 88))(v46, v43);
    if (MEMORY[0x263F2B350] && v53 == *MEMORY[0x263F2B350])
    {
      uint64_t v54 = *(void (**)(char *, uint64_t))(v44 + 8);
      uint64_t v55 = 1;
      v54(v46, v43);
    }
    else
    {
      uint64_t v54 = *(void (**)(char *, uint64_t))(v44 + 8);
      v54(v46, v43);
      uint64_t v55 = 0;
      v54(v46, v43);
    }
    ctb::bridging::makeSuggestedActionVariant(v55, (uint64_t)v79);
    uint64_t v69 = sub_2495B80A0();
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v69 - 8) + 8))(v76, v69);
    v54(v46, v43);
    *(_DWORD *)a2 = 12;
    ctb::chatbot::Media::Media((__n128 *)(a2 + 8), (uint64_t)v77);
    ctb::chatbot::Media::~Media((void **)v77);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](a2 + 64, (uint64_t)v79);
    return std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v79);
  }
  else if (MEMORY[0x263F2B610] && v8 == *MEMORY[0x263F2B610])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v56 = sub_2495B7BB0();
    uint64_t v73 = (uint64_t)&v73;
    uint64_t v57 = *(void *)(v56 - 8);
    uint64_t v58 = *(void *)(v57 + 64);
    MEMORY[0x270FA5388](v56);
    unint64_t v59 = (v58 + 15) & 0xFFFFFFFFFFFFFFF0;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))((char *)&v73 - v59, v7, v56);
    uint64_t v60 = sub_2495B7C80();
    MEMORY[0x270FA5388](v60 - 8);
    uint64_t v62 = (char *)&v73 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
    long long v76 = a1;
    sub_2495B8080();
    sub_2495910D8((uint64_t)v62, v77);
    uint64_t v75 = &v73;
    MEMORY[0x270FA5388](v63);
    uint64_t v64 = *(uint64_t (**)(char *, char *, uint64_t))(v57 + 16);
    uint64_t v65 = v64((char *)&v73 - v59, (char *)&v73 - v59, v56);
    uint64_t v74 = &v73;
    MEMORY[0x270FA5388](v65);
    v64((char *)&v73 - v59, (char *)&v73 - v59, v56);
    int v66 = (*(uint64_t (**)(char *, uint64_t))(v57 + 88))((char *)&v73 - v59, v56);
    if (MEMORY[0x263F2B460] && v66 == *MEMORY[0x263F2B460])
    {
      uint64_t v67 = 2;
    }
    else if (MEMORY[0x263F2B468] && v66 == *MEMORY[0x263F2B468])
    {
      uint64_t v67 = 1;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v57 + 8))((char *)&v73 - v59, v56);
      uint64_t v67 = 0;
    }
    uint64_t v70 = v76;
    uint64_t v71 = *(void (**)(char *, uint64_t))(v57 + 8);
    v71((char *)&v73 - v59, v56);
    ctb::bridging::makeSuggestedActionVariant(v67, (uint64_t)v79);
    uint64_t v72 = sub_2495B80A0();
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v72 - 8) + 8))(v70, v72);
    v71((char *)&v73 - v59, v56);
    *(_DWORD *)a2 = 13;
    ctb::chatbot::Media::Media((__n128 *)(a2 + 8), (uint64_t)v77);
    ctb::chatbot::Media::~Media((void **)v77);
    std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](a2 + 64, (uint64_t)v79);
    return std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100]((uint64_t)v79);
  }
  else
  {
    *(void *)(a2 + 20std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 16std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 12std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
    *(_OWORD *)(a2 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    ctb::chatbot::SuggestedAction::SuggestedAction((ctb::chatbot::SuggestedAction *)a2);
    uint64_t v68 = sub_2495B80A0();
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v68 - 8) + 8))(a1, v68);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_249593F4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_2495B80B0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (MEMORY[0x263F2B630] && v8 == *MEMORY[0x263F2B630])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = sub_2495B8060();
    uint64_t v54 = &v50;
    uint64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
    MEMORY[0x270FA5388](v9);
    unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v13 = v12;
    uint64_t v50 = v12;
    uint64_t v14 = *(uint64_t (**)(char *, char *, uint64_t))(v12 + 32);
    int v53 = (uint64_t *)((char *)&v50 - v11);
    uint64_t v15 = v7;
    uint64_t v17 = v16;
    uint64_t v18 = v14((char *)&v50 - v11, v15, v16);
    uint64_t v52 = &v50;
    MEMORY[0x270FA5388](v18);
    uint64_t v55 = (void *)v4;
    uint64_t v56 = a1;
    uint64_t v19 = *(uint64_t (**)(void))(v13 + 16);
    uint64_t v20 = v19();
    unint64_t v51 = &v50;
    MEMORY[0x270FA5388](v20);
    ((void (*)(char *, char *, uint64_t))v19)((char *)&v50 - v11, (char *)&v50 - v11, v17);
    uint64_t v21 = sub_2495B7C80();
    MEMORY[0x270FA5388](v21 - 8);
    uint64_t v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B8050();
    sub_2495910D8((uint64_t)v23, (__n128 *)v60);
    uint64_t v24 = *(void (**)(char *, uint64_t))(v50 + 8);
    v24((char *)&v50 - v11, v17);
    ctb::chatbot::Media::Media(&v57, (uint64_t)v60);
    ctb::chatbot::Media::~Media((void **)&v60[0].__r_.__value_.__l.__data_);
    ctb::bridging::makeSuggestedChipVariant((uint64_t)&v57, (uint64_t)v60);
    v24((char *)&v50 - v11, v17);
    v57.n128_u32[0] = 1;
    std::variant<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>::variant[abi:ne180100](&v57.n128_i8[8], v60);
    std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::~variant[abi:ne180100]((uint64_t)v60, (void (*)(void))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor);
    ctb::bridging::makeMenuL0Variant(&v57, v60);
    (*(void (**)(uint64_t, void *))(v5 + 8))(v56, v55);
    v24((char *)v53, v17);
    *(_DWORD *)a2 = 1;
    uint64_t v25 = a2 + 8;
LABEL_10:
    std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::variant[abi:ne180100](v25, (uint64_t)v60, (void (*)(void))std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::__move_constructor);
    return std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::~variant[abi:ne180100]((uint64_t)v60, (void (*)(void))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor);
  }
  if (MEMORY[0x263F2B638] && v8 == *MEMORY[0x263F2B638])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v26 = sub_2495B80A0();
    uint64_t v55 = &v50;
    uint64_t v50 = v26;
    uint64_t v27 = *(uint64_t **)(v26 - 8);
    uint64_t v28 = v27[8];
    MEMORY[0x270FA5388](v26);
    uint64_t v56 = a1;
    unint64_t v29 = (v28 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v52 = v27;
    unint64_t v30 = (uint64_t (*)(char *, char *))v27[4];
    uint64_t v54 = (uint64_t *)((char *)&v50 - v29);
    uint64_t v31 = v30((char *)&v50 - v29, v7);
    int v53 = &v50;
    MEMORY[0x270FA5388](v31);
    uint64_t v32 = (uint64_t (*)(char *, char *, uint64_t))v27[2];
    uint64_t v33 = v50;
    uint64_t v34 = v32((char *)&v50 - v29, (char *)&v50 - v29, v50);
    unint64_t v51 = &v50;
    MEMORY[0x270FA5388](v34);
    v32((char *)&v50 - v29, (char *)&v50 - v29, v33);
    sub_249592FB8((uint64_t *)((char *)&v50 - v29), (uint64_t)&v57);
    ctb::bridging::makeSuggestedChipVariant((uint64_t)&v57, (uint64_t)v60);
    uint64_t v35 = (void (*)(char *, uint64_t))v52[1];
    v35((char *)&v50 - v29, v33);
    v57.n128_u32[0] = 2;
    std::variant<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>::variant[abi:ne180100](&v57.n128_i8[8], v60);
    std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::~variant[abi:ne180100]((uint64_t)v60, (void (*)(void))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor);
    ctb::bridging::makeMenuL0Variant(&v57, v60);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v56, v4);
    v35((char *)v54, v33);
    *(_DWORD *)a2 = 1;
    std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::variant[abi:ne180100](a2 + 8, (uint64_t)v60, (void (*)(void))std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::__move_constructor);
    return std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::~variant[abi:ne180100]((uint64_t)v60, (void (*)(void))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor);
  }
  if (MEMORY[0x263F2B648] && v8 == *MEMORY[0x263F2B648])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v37 = sub_2495B80F0();
    uint64_t v54 = &v50;
    uint64_t v38 = *(void *)(v37 - 8);
    uint64_t v39 = *(void *)(v38 + 64);
    MEMORY[0x270FA5388](v37);
    uint64_t v55 = (void *)v4;
    uint64_t v40 = (char *)&v50 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v41 = (*(uint64_t (**)(char *, char *, uint64_t))(v38 + 32))(v40, v7, v37);
    uint64_t v56 = a1;
    MEMORY[0x270FA5388](v41);
    uint64_t v42 = (*(uint64_t (**)(char *, char *, uint64_t))(v38 + 16))(v40, v40, v37);
    unint64_t v43 = MEMORY[0x24C5A2CF0](v42);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v43, v44, v60);
    uint64_t v45 = sub_2495B80E0();
    sub_24958EE08(v45, (uint64_t *)&v59);
    unint64_t v46 = *(void (**)(char *, uint64_t))(v38 + 8);
    v46(v40, v37);
    std::string::basic_string[abi:ne180100](&v57, (__n128 *)v60);
    std::string::~string(v60);
    std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v58, &v59);
    std::vector<ctb::chatbot::MenuL1Content>::~vector[abi:ne180100]((uint64_t)&v59, (void (*)(uint64_t *))std::vector<ctb::chatbot::MenuL1Content>::__destroy_vector::operator()[abi:ne180100]);
    __n128 MenuL0Variant = ctb::bridging::makeMenuL0Variant((uint64_t)&v57, (uint64_t)v60);
    (*(void (**)(uint64_t, void *, __n128))(v5 + 8))(v56, v55, MenuL0Variant);
    v46(v40, v37);
    *(_DWORD *)a2 = 2;
    uint64_t v25 = a2 + 8;
    goto LABEL_10;
  }
  *(void *)(a2 + 24std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(_OWORD *)(a2 + 20std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 16std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 12std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a2 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  double v48 = ctb::chatbot::MenuL0Content::MenuL0Content(a2);
  uint64_t v49 = *(void (**)(uint64_t, uint64_t, double))(v5 + 8);
  v49(a1, v4, v48);
  return ((uint64_t (*)(char *, uint64_t))v49)(v7, v4);
}

uint64_t sub_2495947D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a2);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = sub_2495B80B0();
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(v5 - 8);
    int v8 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v14[1] = a1;
    uint64_t v10 = a1 + v9;
    uint64_t v11 = *(void *)(v7 + 64);
    uint64_t v12 = *(void *)(v7 + 72);
    do
    {
      MEMORY[0x270FA5388](v5);
      v8((char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v10, v6);
      sub_249593F4C((uint64_t)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v15);
      std::vector<ctb::chatbot::MenuL0Content>::push_back[abi:ne180100](a2, v15);
      uint64_t v5 = ctb::chatbot::MenuL0Content::~MenuL0Content((uint64_t)v15, (void (*)(uint64_t))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor);
      v10 += v12;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

uint64_t std::vector<ctb::chatbot::MenuL0Content>::push_back[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = (_DWORD *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    uint64_t result = std::vector<ctb::chatbot::MenuL0Content>::__push_back_slow_path<ctb::chatbot::MenuL0Content const&>(a1, a2);
  }
  else
  {
    *uint64_t v3 = *a2;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v3 + 2), (uint64_t)(a2 + 2));
    uint64_t result = (uint64_t)(v3 + 62);
    a1[1] = (uint64_t)(v3 + 62);
  }
  a1[1] = result;
  return result;
}

void sub_24959499C(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

double ctb::chatbot::SuggestedAction::SuggestedAction(ctb::chatbot::SuggestedAction *this)
{
  *(_DWORD *)this = 0;
  *((unsigned char *)this + 56) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 8std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 15) = 0;
  *((_DWORD *)this + 52) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 32) = 0;
  return result;
}

uint64_t ctb::bridging::makeSuggestedActionVariant@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  *(_DWORD *)(a2 + 144) = 12;
  return result;
}

{
  *(_DWORD *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  *(_DWORD *)(a2 + 144) = 11;
  return result;
}

{
  *(unsigned char *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  *(_DWORD *)(a2 + 144) = 6;
  return result;
}

uint64_t std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::variant[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t std::variant<ctb::chatbot::SuggestedActionOpenUrlInWebView,ctb::chatbot::SuggestedActionOpenUrlInApplication,ctb::chatbot::SuggestedActionComposeText,ctb::chatbot::SuggestedActionComposeAudioRecording,ctb::chatbot::SuggestedActionComposeVideoRecording,ctb::chatbot::SuggestedActionShowLocation,ctb::chatbot::SuggestedActionRequestLocationPush,ctb::chatbot::SuggestedActionCalendar,ctb::chatbot::SuggestedActionDialVideoCall,ctb::chatbot::SuggestedActionDialEnrichedCall,ctb::chatbot::SuggestedActionDialPhoneNumber,ctb::chatbot::SuggestedActionDevice,ctb::chatbot::SuggestedActionSettings>::~variant[abi:ne180100](uint64_t a1)
{
  return a1;
}

void ctb::bridging::makeSuggestedActionVariant(long long *a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 144) = 7;
}

double ctb::chatbot::SuggestedActionCalendar::SuggestedActionCalendar(ctb::chatbot::SuggestedActionCalendar *this)
{
  *((unsigned char *)this + 96) = 0;
  *((unsigned char *)this + 104) = 0;
  *((unsigned char *)this + 12std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 57) = 0u;
  return result;
}

void ctb::chatbot::CreateCalendarEvent::~CreateCalendarEvent(void **this)
{
  if (*((unsigned char *)this + 128) && *((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((unsigned char *)this + 96) && *((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

__n128 ctb::bridging::makeSuggestedActionVariant@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(_OWORD *)a1;
  *(void *)(a2 + 24) = *(void *)(a1 + 16);
  *(void *)a1 = 0;
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  __n128 result = *(__n128 *)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(__n128 *)(a2 + 32) = result;
  *(void *)(a2 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(_DWORD *)(a2 + 144) = 2;
  return result;
}

{
  __n128 result;

  *(_DWORD *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 32) = *(void *)(a1 + 24);
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = result;
  *(void *)(a2 + 56) = *(void *)(a1 + 48);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(_DWORD *)(a2 + 144) = 0;
  return result;
}

__n128 ctb::bridging::makeSuggestedActionVariant@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *a1;
  *(__n128 *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *a1;
  *(void *)(a2 + 24) = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  *(_DWORD *)(a2 + 144) = 4;
  return result;
}

{
  __n128 result;

  __n128 result = *a1;
  *(__n128 *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *a1;
  *(void *)(a2 + 24) = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  *(_DWORD *)(a2 + 144) = 3;
  return result;
}

{
  __n128 result;

  __n128 result = *a1;
  *(__n128 *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *a1;
  *(void *)(a2 + 24) = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  *(_DWORD *)(a2 + 144) = 1;
  return result;
}

uint64_t sub_249594BA8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void ctb::bridging::makeSuggestedActionVariant(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 144) = 5;
}

{
  std::__variant_detail::__alt<9ul,ctb::chatbot::SuggestedActionDialEnrichedCall>::__alt[abi:ne180100]<ctb::chatbot::SuggestedActionDialEnrichedCall>((__n128 *)(a2 + 8), a1);
  *(_DWORD *)(a2 + 144) = 9;
}

unsigned char *ctb::chatbot::SuggestedActionShowLocation::SuggestedActionShowLocation(unsigned char *this)
{
  *this = 0;
  this[16] = 0;
  this[24] = 0;
  this[48] = 0;
  this[56] = 0;
  this[80] = 0;
  this[88] = 0;
  this[112] = 0;
  return this;
}

long long *ctb::bridging::makeSuggestedActionVariant@<X0>(long long *result@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *result;
  *(unsigned char *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v2;
  *(void *)(a2 + 24) = *((void *)result + 2);
  *((void *)result + 1) = 0;
  *((void *)result + 2) = 0;
  *(void *)uint64_t result = 0;
  *(unsigned char *)(a2 + 56) = 0;
  if (*((unsigned char *)result + 48))
  {
    *(_OWORD *)(a2 + 32) = *(long long *)((char *)result + 24);
    *(void *)(a2 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *((void *)result + 5);
    *((void *)result + 4) = 0;
    *((void *)result + 5) = 0;
    *((void *)result + 3) = 0;
    *(unsigned char *)(a2 + 56) = 1;
  }
  *(_DWORD *)(a2 + 144) = 10;
  return result;
}

{
  long long v2;

  long long v2 = *result;
  *(unsigned char *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v2;
  *(void *)(a2 + 24) = *((void *)result + 2);
  *((void *)result + 1) = 0;
  *((void *)result + 2) = 0;
  *(void *)uint64_t result = 0;
  *(unsigned char *)(a2 + 56) = 0;
  if (*((unsigned char *)result + 48))
  {
    *(_OWORD *)(a2 + 32) = *(long long *)((char *)result + 24);
    *(void *)(a2 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *((void *)result + 5);
    *((void *)result + 4) = 0;
    *((void *)result + 5) = 0;
    *((void *)result + 3) = 0;
    *(unsigned char *)(a2 + 56) = 1;
  }
  *(_DWORD *)(a2 + 144) = 8;
  return result;
}

uint64_t sub_249594D9C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t std::vector<ctb::chatbot::MenuL1Content>::push_back[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = (_DWORD *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    uint64_t result = std::vector<ctb::chatbot::MenuL1Content>::__push_back_slow_path<ctb::chatbot::MenuL1Content const&>(a1, a2);
  }
  else
  {
    *uint64_t v3 = *a2;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v3 + 2), (uint64_t)(a2 + 2));
    uint64_t result = (uint64_t)(v3 + 62);
    a1[1] = (uint64_t)(v3 + 62);
  }
  a1[1] = result;
  return result;
}

void sub_249594E38(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

double ctb::chatbot::MenuL0Content::MenuL0Content(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 20std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 22std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
  return result;
}

uint64_t std::vector<ctb::chatbot::MenuL1Content>::~vector[abi:ne180100](uint64_t a1, void (*a2)(uint64_t *))
{
  uint64_t v4 = a1;
  a2(&v4);
  return a1;
}

__n128 ctb::bridging::makeMenuL0Variant@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  *(void *)a1 = 0;
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(void *)(a1 + 40);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(_DWORD *)(a2 + 232) = 1;
  return result;
}

uint64_t std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::variant[abi:ne180100](uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return a1;
}

uint64_t std::variant<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>::~variant[abi:ne180100](uint64_t a1, void (*a2)(void))
{
  return a1;
}

uint64_t ctb::bridging::makeMenuL0Variant@<X0>(_DWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *a1;
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(a2 + 2), (uint64_t)(a1 + 2));
  a2[58] = 0;
  return result;
}

uint64_t std::vector<ctb::chatbot::MenuL2Content>::push_back[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = (_DWORD *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    uint64_t result = std::vector<ctb::chatbot::SuggestedChip>::__push_back_slow_path<ctb::chatbot::SuggestedChip const&>(a1, a2);
  }
  else
  {
    *uint64_t v3 = *a2;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v3 + 2), (uint64_t)(a2 + 2));
    uint64_t result = (uint64_t)(v3 + 58);
    a1[1] = (uint64_t)(v3 + 58);
  }
  a1[1] = result;
  return result;
}

void sub_249594FE0(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t ctb::chatbot::MenuL0Content::~MenuL0Content(uint64_t a1, void (*a2)(uint64_t))
{
  return a1;
}

uint64_t std::vector<ctb::chatbot::MenuL0Content>::__push_back_slow_path<ctb::chatbot::MenuL0Content const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x108421084210842) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xEF7BDEF7BDEF7BDFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x84210842108421) {
    unint64_t v9 = 0x108421084210842;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::MenuL0Content>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[248 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[248 * v9];
  *(_DWORD *)uint64_t v11 = *a2;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v11 + 8), (uint64_t)(a2 + 2));
  v15 += 248;
  std::vector<ctb::chatbot::MenuL0Content>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<ctb::chatbot::MenuL0Content>::~__split_buffer((uint64_t)v14, (void (*)(uint64_t))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor);
  return v12;
}

void sub_249595140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ctb::chatbot::MenuL0Content>::~__split_buffer((uint64_t)va, (void (*)(uint64_t))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::~__dtor);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<ctb::chatbot::MenuL0Content>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  return std::vector<ctb::chatbot::MenuL0Content>::__swap_out_circular_buffer(a1, a2, std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::__move_constructor);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 232) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL1>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 232);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*(&off_26FD35878 + v4))(&v7, result);
  }
  *(_DWORD *)(v3 + 232) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 232);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_26FD35898 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 232) = v5;
  }
  return result;
}

uint64_t std::vector<ctb::chatbot::MenuL1Content>::__push_back_slow_path<ctb::chatbot::MenuL1Content const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x108421084210842) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xEF7BDEF7BDEF7BDFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x84210842108421) {
    unint64_t v9 = 0x108421084210842;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::chatbot::MenuL0Content>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[248 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[248 * v9];
  *(_DWORD *)uint64_t v11 = *a2;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v11 + 8), (uint64_t)(a2 + 2));
  v15 += 248;
  std::vector<ctb::chatbot::MenuL1Content>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<ctb::chatbot::MenuL0Content>::~__split_buffer((uint64_t)v14, (void (*)(uint64_t))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::~__dtor);
  return v12;
}

void sub_249595378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ctb::chatbot::MenuL0Content>::~__split_buffer((uint64_t)va, (void (*)(uint64_t))std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::~__dtor);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<ctb::chatbot::MenuL1Content>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  return std::vector<ctb::chatbot::MenuL0Content>::__swap_out_circular_buffer(a1, a2, std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::__move_constructor);
}

uint64_t *std::vector<ctb::chatbot::MenuL0Content>::__swap_out_circular_buffer(uint64_t *result, void *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  unint64_t v4 = result;
  uint64_t v6 = *result;
  uint64_t v5 = result[1];
  uint64_t v7 = a2[1];
  if (v5 != *result)
  {
    do
    {
      int v9 = *(_DWORD *)(v5 - 248);
      v5 -= 248;
      *(_DWORD *)(v7 - 24std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v9;
      v7 -= 248;
      uint64_t result = (uint64_t *)a3(v7 + 8, v5 + 8);
    }
    while (v5 != v6);
  }
  a2[1] = v7;
  uint64_t v10 = *v4;
  *unint64_t v4 = v7;
  a2[1] = v10;
  uint64_t v11 = v4[1];
  v4[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = v4[2];
  v4[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<ctb::chatbot::MenuL0Content>::~__split_buffer(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v4; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 248;
    a2(i - 240);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 232) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedChip,ctb::chatbot::MenuL2>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 232);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*(&off_26FD35888 + v4))(&v7, result);
  }
  *(_DWORD *)(v3 + 232) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 232);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_26FD358A8 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 232) = v5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL1EEEEE19__generic_constructB8ne180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_Tm(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
  return std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(a2 + 2), (uint64_t)(a3 + 2));
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb7chatbot13SuggestedChipENS9_6MenuL1EEEEE19__generic_constructB8ne180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_Tm(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  __n128 result = *(__n128 *)((char *)a3 + 24);
  *(__n128 *)(a2 + 24) = result;
  *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a3 + 5);
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  return result;
}

uint64_t sub_2495955E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_2495B6A10();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  ((void (*)(void))MEMORY[0x270FA5388])();
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFE78);
  ((void (*)(void))MEMORY[0x270FA5388])();
  int v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6A20();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4) == 1)
  {
    sub_249595B28((uint64_t)v9);
    int v37 = 2;
  }
  else
  {
    uint64_t v10 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))((char *)&v35 - v7, v9, v4);
    MEMORY[0x270FA5388](v10);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)&v35 - v7, (char *)&v35 - v7, v4);
    int v11 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))((char *)&v35 - v7, v4);
    if (MEMORY[0x263F2ACC8] && v11 == *MEMORY[0x263F2ACC8])
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))((char *)&v35 - v7, v4);
      int v37 = 0;
    }
    else
    {
      if (MEMORY[0x263F2ACC0] && v11 == *MEMORY[0x263F2ACC0])
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))((char *)&v35 - v7, v4);
      }
      else
      {
        uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
        v12((char *)&v35 - v7, v4);
        v12((char *)&v35 - v7, v4);
      }
      int v37 = 1;
    }
  }
  uint64_t v13 = sub_2495B6A50();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6A80();
  int v17 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v16, v13);
  if (MEMORY[0x263F2ACE0] && v17 == *MEMORY[0x263F2ACE0]) {
    goto LABEL_17;
  }
  if (!MEMORY[0x263F2ACE8] || v17 != *MEMORY[0x263F2ACE8])
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
LABEL_17:
    int v36 = 0;
    goto LABEL_18;
  }
  int v36 = 1;
LABEL_18:
  uint64_t v41 = sub_2495B6A70();
  uint64_t v18 = sub_2495B6A60();
  uint64_t v39 = v19;
  uint64_t v40 = v18;
  uint64_t v38 = sub_2495B6A00();
  uint64_t v21 = v20;
  uint64_t v22 = sub_2495B6630();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v35 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6A40();
  uint64_t v26 = sub_2495B6700();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  unint64_t v29 = (char *)&v35 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6A90();
  uint64_t v30 = sub_2495B6AA0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(a1, v30);
  *(unsigned char *)a2 = v36;
  *(unsigned char *)(a2 + 1) = v37;
  uint64_t v31 = v40;
  *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v41;
  *(void *)(a2 + 16) = v31;
  uint64_t v32 = v38;
  *(void *)(a2 + 24) = v39;
  *(void *)(a2 + 32) = v32;
  *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v21;
  uint64_t v33 = type metadata accessor for FileInfo();
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a2 + *(int *)(v33 + 36), v25, v22);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(a2 + *(int *)(v33 + 40), v29, v26);
}

uint64_t sub_249595B28(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFE78);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_249595B88@<X0>(uint64_t a1@<X0>, std::vector<std::string> *a2@<X8>)
{
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a2);
  std::vector<std::string>::reserve(a2, *(void *)(a1 + 16));
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(a1 + 40);
    do
    {
      unint64_t v6 = *(v5 - 1);
      unint64_t v7 = *v5;
      swift_bridgeObjectRetain();
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v6, v7, &v9);
      std::vector<std::string>::push_back[abi:ne180100]((uint64_t *)a2, (long long *)&v9);
      v5 += 2;
      std::string::~string(&v9);
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

void sub_249595C64(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(a1, a2, &v9);
    ctb::bridging::makeOptional((ctb::bridging *)&v9, (uint64_t)v10);
    char v11 = 0;
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      std::optional<std::string>::optional[abi:ne180100](a3, v10);
      ctb::chatbot::URIEntry::~URIEntry((void **)v10);
      return;
    }
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    char v11 = 1;
  }
  type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___(0);
  uint64_t v7 = v6;
  unint64_t v8 = sub_2495964A4();
  CxxOptional.init(nilLiteral:)(v7, v8);
  sub_2495786B0((uint64_t)v10, &qword_2696BFBD0);
}

void sub_249595D34(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD90);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495964FC(a1, (uint64_t)v6);
  uint64_t v7 = sub_2495B6630();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (v9 == 1)
  {
    memset(v20, 0, sizeof(v20));
    char v21 = 1;
    type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___(0);
    uint64_t v16 = v15;
    unint64_t v17 = sub_2495964A4();
    CxxOptional.init(nilLiteral:)(v16, v17);
    sub_2495786B0(a1, &qword_2696BFD90);
    sub_2495786B0((uint64_t)v20, &qword_2696BFBD0);
  }
  else
  {
    MEMORY[0x270FA5388](v9);
    char v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v6, v7);
    unint64_t v12 = sub_2495B6610();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v12, v13, &v19);
    __n128 Optional = ctb::bridging::makeOptional((ctb::bridging *)&v19, (uint64_t)v20);
    (*(void (**)(char *, uint64_t, __n128))(v8 + 8))(v11, v7, Optional);
    char v21 = 0;
    sub_2495786B0(a1, &qword_2696BFD90);
    std::optional<std::string>::optional[abi:ne180100](a2, v20);
    ctb::chatbot::URIEntry::~URIEntry((void **)v20);
  }
}

uint64_t sub_249595F40@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    v17[0] = (uint64_t *)MEMORY[0x263F8EE78];
    sub_2495977CC(0, v4, 0);
    uint64_t v5 = v17[0];
    uint64_t v6 = (unint64_t *)(a1 + 40);
    do
    {
      unint64_t v7 = *(v6 - 1);
      unint64_t v8 = *v6;
      swift_bridgeObjectRetain();
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v7, v8, &v15);
      v17[0] = v5;
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1)
      {
        sub_2495977CC(v9 > 1, v10 + 1, 1);
        uint64_t v5 = v17[0];
      }
      v6 += 2;
      void v5[2] = v10 + 1;
      std::string::basic_string[abi:ne180100]((__n128 *)&v5[3 * v10 + 4], (__n128 *)&v15);
      std::string::~string(&v15);
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = (uint64_t *)MEMORY[0x263F8EE78];
  }
  memset(v17, 0, sizeof(v17));
  std::set<std::string>::set[abi:ne180100](v17);
  uint64_t v11 = v5[2];
  if (v11)
  {
    unint64_t v12 = (const std::string *)(v5 + 4);
    swift_bridgeObjectRetain();
    do
    {
      std::string::basic_string(&v15, v12);
      char v16 = 0;
      std::string::basic_string[abi:ne180100]((__n128 *)&v14, (__n128 *)&v15);
      std::string::~string(&v15);
      std::set<std::string>::insert[abi:ne180100](v17, (void **)&v14.__r_.__value_.__l.__data_);
      std::string::~string(&v14);
      ++v12;
      --v11;
    }
    while (v11);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  memset(&v15, 0, sizeof(v15));
  char v16 = 1;
  swift_bridgeObjectRelease();
  std::set<std::string>::set[abi:ne180100](a2, v17);
  std::set<std::string>::~set[abi:ne180100]((uint64_t)v17);
  return swift_bridgeObjectRelease();
}

uint64_t sub_249596100@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a3);
  size_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x2495962C8);
      }
      size_t v6 = HIDWORD(a1) - (int)a1;
LABEL_6:
      std::vector<unsigned char>::reserve(a3, v6);
      uint64_t v9 = sub_2495B6660();
      uint64_t v10 = *(void *)(v9 - 8);
      MEMORY[0x270FA5388](v9);
      unint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      switch(a2 >> 62)
      {
        case 1uLL:
        case 2uLL:
          sub_249582644(a1, a2);
          break;
        default:
          break;
      }
      sub_2495B6670();
      while (1)
      {
        __int16 v13 = sub_2495B6650();
        if ((v13 & 0x100) != 0) {
          break;
        }
        char v16 = v13;
        std::vector<unsigned char>::push_back[abi:ne180100](a3, &v16);
      }
      sub_2495825EC(a1, a2);
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    case 2uLL:
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 24);
      size_t v6 = v7 - v8;
      if (!__OFSUB__(v7, v8)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      goto LABEL_6;
    default:
      size_t v6 = BYTE6(a2);
      goto LABEL_6;
  }
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = (char *)a1[1];
    size_t v6 = operator new(__sz);
    uint64_t v7 = &v5[(void)v6 - v2];
    uint64_t v8 = v7;
    if (v5 != (char *)v2)
    {
      uint64_t v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      uint64_t v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

void std::vector<unsigned char>::push_back[abi:ne180100](unint64_t *a1, unsigned char *a2)
{
  uint64_t v5 = (unsigned char *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = *a1;
    uint64_t v8 = &v5[-*a1];
    unint64_t v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0) {
      std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v4 - v7;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (unint64_t)operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    __int16 v13 = (char *)(v12 + v11);
    v8[v12] = *a2;
    uint64_t v6 = (uint64_t)&v8[v12 + 1];
    if (v5 == (unsigned char *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      std::string v14 = &v5[~v7];
      do
      {
        char v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (unsigned char *)v7);
      uint64_t v5 = (unsigned char *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (unint64_t)v13;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    unsigned char *v5 = *a2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
}

unint64_t sub_2495964A4()
{
  unint64_t result = qword_2696BF8B8;
  if (!qword_2696BF8B8)
  {
    type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696BF8B8);
  }
  return result;
}

uint64_t sub_2495964FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_249596604(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::vector<std::string>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a1, a2);
    uint64_t result = v3 + 24;
  }
  a1[1] = result;
  return result;
}

void *sub_249596658@<X0>(void *a1@<X8>)
{
  return sub_2495966B0(a1);
}

uint64_t *sub_249596660@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = std::set<std::string>::insert[abi:ne180100](v2, a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v5 & 1;
  return result;
}

void *std::set<std::string>::set[abi:ne180100](void *result)
{
  result[2] = 0;
  result[1] = 0;
  *uint64_t result = result + 1;
  return result;
}

void *sub_2495966B0(void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  return std::set<std::string>::set[abi:ne180100](result);
}

uint64_t *std::set<std::string>::insert[abi:ne180100](uint64_t **a1, void **a2)
{
  return std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<std::string>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      char v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        char v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v3 + 24;
}

void sub_24959695C(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    long long v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_249596A74(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, void **a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, &v7);
    std::__tree<std::string>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

uint64_t sub_249596B08@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v65 = a1;
  uint64_t v3 = sub_2495B75E0();
  int64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v64 = a2;
    uint64_t v103 = MEMORY[0x263F8EE78];
    sub_249597600(0, v4, 0);
    uint64_t v5 = sub_2495B75D0();
    uint64_t v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(v5 - 8);
    unint64_t v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v8 += 16;
    uint64_t v75 = v9;
    unint64_t v10 = (*(unsigned __int8 *)(v8 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64);
    v63[1] = v3;
    unint64_t v73 = v3 + v10;
    uint64_t v72 = *(void *)(v8 + 56);
    uint64_t v71 = *(void *)(v8 + 48);
    uint64_t v68 = (__n128 *)&v101.n128_i8[8];
    uint64_t v67 = (__n128 *)&v102;
    uint64_t v74 = v8;
    int v66 = (void (**)(char *, uint64_t))(v8 - 8);
    int64_t v69 = v4;
    uint64_t v70 = v5;
    do
    {
      v81 = v63;
      uint64_t v82 = v7;
      uint64_t v11 = v71;
      MEMORY[0x270FA5388](v5);
      long long v12 = (char *)v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v13 = v75;
      uint64_t v14 = ((uint64_t (*)(char *))v75)(v12);
      uint64_t v79 = v63;
      MEMORY[0x270FA5388](v14);
      long long v15 = v12;
      double v80 = v12;
      v13(v12, v12, v6);
      uint64_t v77 = sub_2495B7590();
      uint64_t v16 = sub_2495B75B0();
      uint64_t v17 = *(void *)(v16 - 8);
      MEMORY[0x270FA5388](v16);
      std::string v19 = (char *)v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_2495B75C0();
      unint64_t v20 = sub_2495B75A0();
      unint64_t v22 = v21;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v20, v22, &v97);
      uint64_t v78 = v15;
      uint64_t v23 = sub_2495B7580();
      int64_t v24 = *(void *)(v23 + 16);
      if (v24)
      {
        uint64_t v96 = (void *)MEMORY[0x263F8EE78];
        sub_249597620(0, v24, 0);
        uint64_t v25 = sub_2495B7620();
        uint64_t v26 = v25;
        uint64_t v27 = *(void *)(v25 - 8);
        uint64_t v88 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
        unint64_t v28 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
        uint64_t v76 = v23;
        unint64_t v29 = v23 + v28;
        uint64_t v85 = *(void *)(v27 + 72);
        uint64_t v86 = *(void *)(v27 + 64);
        uint64_t v87 = v27 + 16;
        uint64_t v84 = (void (**)(char *, uint64_t))(v27 + 8);
        do
        {
          int64_t v92 = v24;
          uint64_t v91 = v63;
          uint64_t v30 = v86;
          MEMORY[0x270FA5388](v25);
          uint64_t v31 = (char *)v63 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v32 = v88;
          uint64_t v33 = ((uint64_t (*)(char *, unint64_t, uint64_t))v88)(v31, v29, v26);
          uint64_t v90 = v63;
          MEMORY[0x270FA5388](v33);
          uint64_t v89 = v31;
          v32(v31, v31, v26);
          uint64_t v34 = sub_2495B7610();
          uint64_t v35 = *(void *)(v34 - 8);
          MEMORY[0x270FA5388](v34);
          int v37 = (char *)v63 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFE80);
          MEMORY[0x270FA5388](v38 - 8);
          uint64_t v40 = (char *)v63 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
          sub_2495B75F0();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v40, 1, v34) == 1)
          {
            sub_249597640((uint64_t)v40);
            __n128 v98 = 0u;
            long long v99 = 0u;
            std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](&v98);
            uint64_t v41 = *v84;
            (*v84)(v31, v26);
          }
          else
          {
            uint64_t v83 = v63;
            (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v37, v40, v34);
            uint64_t v42 = sub_2495B7600();
            sub_249596100(v42, v43, v93.n128_u64);
            unint64_t v44 = (ctb::bridging *)std::vector<unsigned char>::vector(&v95, (uint64_t)&v93);
            __n128 Optional = ctb::bridging::makeOptional(v44, (uint64_t)&v98);
            uint64_t v41 = *v84;
            ((void (*)(char *, uint64_t, __n128))*v84)(v31, v26, Optional);
            std::vector<unsigned char>::~vector[abi:ne180100]((uint64_t)&v93);
            (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
          }
          std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)&v95, &v98);
          ctb::ClientAuthenticityRequest::Parameter::~Parameter((ctb::ClientAuthenticityRequest::Parameter *)&v98);
          std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100](v46, &v95);
          ctb::ClientAuthenticityRequest::Parameter::~Parameter((ctb::ClientAuthenticityRequest::Parameter *)&v95);
          v41(v89, v26);
          uint64_t v47 = v96;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_249597620(0, v47[2] + 1, 1);
            uint64_t v47 = v96;
          }
          int64_t v48 = v92;
          unint64_t v50 = v47[2];
          unint64_t v49 = v47[3];
          if (v50 >= v49 >> 1)
          {
            sub_249597620(v49 > 1, v50 + 1, 1);
            uint64_t v47 = v96;
          }
          __n128 v47[2] = v50 + 1;
          std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)&v47[4 * v50 + 4], &v98);
          ctb::ClientAuthenticityRequest::Parameter::~Parameter((ctb::ClientAuthenticityRequest::Parameter *)&v98);
          v29 += v85;
          int64_t v24 = v48 - 1;
        }
        while (v24);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v47 = (void *)MEMORY[0x263F8EE78];
      }
      __n128 v93 = 0uLL;
      uint64_t v94 = 0;
      std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v93);
      uint64_t v51 = v47[2];
      uint64_t v6 = v70;
      uint64_t v52 = v82;
      if (v51)
      {
        int v53 = (const ctb::ClientAuthenticityRequest::Parameter *)(v47 + 4);
        swift_bridgeObjectRetain();
        do
        {
          ctb::ClientAuthenticityRequest::Parameter::Parameter((ctb::ClientAuthenticityRequest::Parameter *)&v98, v53);
          char v100 = 0;
          std::optional<ctb::chatbot::SuggestedChipList>::optional[abi:ne180100]((uint64_t)&v95, &v98);
          ctb::ClientAuthenticityRequest::Parameter::~Parameter((ctb::ClientAuthenticityRequest::Parameter *)&v98);
          std::vector<ctb::ClientAuthenticityRequest::Parameter>::push_back[abi:ne180100](&v93, (uint64_t)&v95);
          ctb::ClientAuthenticityRequest::Parameter::~Parameter((ctb::ClientAuthenticityRequest::Parameter *)&v95);
          int v53 = (const ctb::ClientAuthenticityRequest::Parameter *)((char *)v53 + 32);
          --v51;
        }
        while (v51);
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      __n128 v98 = 0u;
      long long v99 = 0u;
      char v100 = 1;
      swift_bridgeObjectRelease();
      std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](&v98, &v93);
      std::vector<ctb::ClientAuthenticityRequest::Parameter>::~vector[abi:ne180100]((uint64_t)&v93, (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
      swift_bridgeObjectRelease();
      v101.n128_u64[0] = v77;
      std::string::basic_string[abi:ne180100](v68, (__n128 *)&v97);
      std::string::~string(&v97);
      std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v67, &v98);
      std::vector<ctb::ClientAuthenticityRequest::Parameter>::~vector[abi:ne180100]((uint64_t)&v98, (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Parameter>::__destroy_vector::operator()[abi:ne180100]);
      uint64_t v54 = *v66;
      (*v66)(v78, v6);
      ctb::ClientAuthenticityRequest::Method::Method((uint64_t)&v98, (uint64_t)&v101);
      ctb::ClientAuthenticityRequest::Method::~Method((void **)&v101);
      ctb::ClientAuthenticityRequest::Method::Method(v55, (uint64_t)&v98);
      ctb::ClientAuthenticityRequest::Method::~Method((void **)&v98);
      v54(v80, v6);
      uint64_t v56 = v103;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_249597600(0, *(void *)(v56 + 16) + 1, 1);
        uint64_t v56 = v103;
      }
      unint64_t v58 = *(void *)(v56 + 16);
      unint64_t v57 = *(void *)(v56 + 24);
      if (v58 >= v57 >> 1)
      {
        sub_249597600(v57 > 1, v58 + 1, 1);
        uint64_t v56 = v103;
      }
      uint64_t v7 = v52 + 1;
      *(void *)(v56 + 16) = v58 + 1;
      ctb::ClientAuthenticityRequest::Method::Method(v56 + 56 * v58 + 32, (uint64_t)&v101);
      ctb::ClientAuthenticityRequest::Method::~Method((void **)&v101);
    }
    while (v7 != v69);
    swift_bridgeObjectRelease();
    a2 = v64;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v56 = MEMORY[0x263F8EE78];
  }
  __n128 v98 = 0uLL;
  *(void *)&long long v99 = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v98);
  uint64_t v59 = *(void *)(v56 + 16);
  if (v59)
  {
    uint64_t v60 = v56 + 32;
    swift_bridgeObjectRetain();
    do
    {
      std::vector<ctb::ClientAuthenticityRequest::Method>::push_back[abi:ne180100]((uint64_t *)&v98, v60);
      v60 += 56;
      --v59;
    }
    while (v59);
    swift_bridgeObjectRelease();
  }
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](&v101, &v98);
  std::vector<ctb::ClientAuthenticityRequest::Parameter>::~vector[abi:ne180100]((uint64_t)&v98, (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Method>::__destroy_vector::operator()[abi:ne180100]);
  uint64_t v61 = sub_2495B7630();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v61 - 8) + 8))(v65, v61);
  swift_bridgeObjectRelease();
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](a2, &v101);
  return std::vector<ctb::ClientAuthenticityRequest::Parameter>::~vector[abi:ne180100]((uint64_t)&v101, (void (*)(uint64_t *))std::vector<ctb::ClientAuthenticityRequest::Method>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t sub_249597578(uint64_t a1)
{
  return std::vector<ctb::ClientAuthenticityRequest::Parameter>::push_back[abi:ne180100](v1, a1);
}

uint64_t sub_24959759C(uint64_t a1)
{
  return std::vector<ctb::ClientAuthenticityRequest::Method>::push_back[abi:ne180100](v1, a1);
}

uint64_t sub_2495975C0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_24959780C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_2495975E0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_24959797C(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_249597600(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_249597B54(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_249597620(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_249597D30(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_249597640(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFE80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t std::vector<ctb::ClientAuthenticityRequest::Parameter>::~vector[abi:ne180100](uint64_t a1, void (*a2)(uint64_t *))
{
  uint64_t v4 = a1;
  a2(&v4);
  return a1;
}

void *std::vector<unsigned char>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  return a1;
}

uint64_t std::vector<unsigned char>::~vector[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_24959774C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_249597EF0(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_24959776C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_2495980C4(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_24959778C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_2495982A0(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_2495977AC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_249598460(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_2495977CC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_249598638(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_2495977EC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_249598810(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_24959780C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BF558);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2495B88E0();
  __break(1u);
  return result;
}

uint64_t sub_24959797C(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFEB8);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    __n128 v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 280);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 < a4 || v12 >= v13 + 280 * v8)
    {
      type metadata accessor for ctb.chatbot.CardCarouselContent(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      type metadata accessor for ctb.chatbot.CardCarouselContent(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v13 >= v12 + 280 * v8 || v12 >= v13 + 280 * v8)
  {
    type metadata accessor for ctb.chatbot.CardCarouselContent(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2495B88E0();
  __break(1u);
  return result;
}

uint64_t sub_249597B54(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFE90);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    __n128 v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 < a4 || v12 >= v13 + 56 * v8)
    {
      type metadata accessor for ctb.ClientAuthenticityRequest.Method(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      type metadata accessor for ctb.ClientAuthenticityRequest.Method(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v13 >= v12 + 56 * v8 || v12 >= v13 + 56 * v8)
  {
    type metadata accessor for ctb.ClientAuthenticityRequest.Method(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2495B88E0();
  __break(1u);
  return result;
}

uint64_t sub_249597D30(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_34;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFE88);
    unint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    __n128 v10[2] = v8;
    void v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 < a4 || v13 >= v14 + 32 * v8)
    {
      type metadata accessor for ctb.ClientAuthenticityRequest.Parameter(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      type metadata accessor for ctb.ClientAuthenticityRequest.Parameter(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    type metadata accessor for ctb.ClientAuthenticityRequest.Parameter(0);
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_34:
  uint64_t result = sub_2495B88E0();
  __break(1u);
  return result;
}

uint64_t sub_249597EF0(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFEA0);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    __n128 v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 < a4 || v12 >= v13 + 40 * v8)
    {
      type metadata accessor for ctb.chatbot.URIEntry(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      type metadata accessor for ctb.chatbot.URIEntry(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    type metadata accessor for ctb.chatbot.URIEntry(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2495B88E0();
  __break(1u);
  return result;
}

uint64_t sub_2495980C4(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFEA8);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    __n128 v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 < a4 || v12 >= v13 + 72 * v8)
    {
      type metadata accessor for ctb.chatbot.MediaEntry(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      type metadata accessor for ctb.chatbot.MediaEntry(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v13 >= v12 + 72 * v8 || v12 >= v13 + 72 * v8)
  {
    type metadata accessor for ctb.chatbot.MediaEntry(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2495B88E0();
  __break(1u);
  return result;
}

uint64_t sub_2495982A0(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_34;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFEB0);
    unint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    __n128 v10[2] = v8;
    void v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 < a4 || v13 >= v14 + 32 * v8)
    {
      type metadata accessor for ctb.chatbot.OrgNameEntry(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      type metadata accessor for ctb.chatbot.OrgNameEntry(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    type metadata accessor for ctb.chatbot.OrgNameEntry(0);
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_34:
  uint64_t result = sub_2495B88E0();
  __break(1u);
  return result;
}

uint64_t sub_249598460(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFE98);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    __n128 v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 < a4 || v12 >= v13 + 48 * v8)
    {
      type metadata accessor for ctb.chatbot.AddressEntry(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      type metadata accessor for ctb.chatbot.AddressEntry(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v13 >= v12 + 48 * v8 || v12 >= v13 + 48 * v8)
  {
    type metadata accessor for ctb.chatbot.AddressEntry(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2495B88E0();
  __break(1u);
  return result;
}

uint64_t sub_249598638(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFEC0);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    __n128 v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 < a4 || v12 >= v13 + 24 * v8)
    {
      type metadata accessor for std.__1.basic_string_CChar_ char_traits_CChar__ allocator_CChar__(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      type metadata accessor for std.__1.basic_string_CChar_ char_traits_CChar__ allocator_CChar__(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    type metadata accessor for std.__1.basic_string_CChar_ char_traits_CChar__ allocator_CChar__(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2495B88E0();
  __break(1u);
  return result;
}

uint64_t sub_249598810(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFEC8);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    __n128 v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 < a4 || v12 >= v13 + 56 * v8)
    {
      type metadata accessor for ctb.ProvisioningConfiguration.AccessControl.Server(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      type metadata accessor for ctb.ProvisioningConfiguration.AccessControl.Server(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v13 >= v12 + 56 * v8 || v12 >= v13 + 56 * v8)
  {
    type metadata accessor for ctb.ProvisioningConfiguration.AccessControl.Server(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2495B88E0();
  __break(1u);
  return result;
}

uint64_t sub_2495989EC@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  v350 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFED0);
  uint64_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v379 = (uint64_t)&v348 - v5;
  uint64_t v380 = a1;
  uint64_t v6 = sub_2495B69A0();
  uint64_t v386 = v4;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  v389 = (char *)&v348 - v5;
  v397 = (void *)v7;
  uint64_t v396 = *(void *)(v7 + 16);
  if (!v396) {
    goto LABEL_7;
  }
  uint64_t v8 = sub_2495B6970();
  uint64_t v9 = 0;
  v394 = (char *)v8;
  uint64_t v10 = *(void *)(v8 - 8);
  v393 = *(void (**)(char *, char *, char *))(v10 + 16);
  size_t v11 = (char *)v397 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  uint64_t v395 = *(void *)(v10 + 64);
  v390 = *(uint64_t **)(v10 + 72);
  v392 = (char *)(v10 + 16);
  v391 = (uint64_t *)(v10 + 8);
  while (1)
  {
    v398 = v9;
    v409 = &v348;
    uint64_t v12 = MEMORY[0x270FA5388](v8);
    unint64_t v14 = (char *)&v348 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    MEMORY[0x270FA5388](v12);
    uint64_t v16 = (char *)&v348 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v17 = v394;
    v393(v16, v11, v394);
    swift_bridgeObjectRetain();
    sub_2495B6960();
    uint64_t v18 = (void (*)(char *, char *))*v391;
    ((void (*)(char *, char *))*v391)(v16, v17);
    swift_bridgeObjectRelease();
    uint64_t v19 = sub_2495B67F0();
    uint64_t v20 = *(void *)(v19 - 8);
    unint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
    LODWORD(v16) = v21(v14, 1, v19);
    uint64_t v8 = sub_2495786B0((uint64_t)v14, &qword_2696BFED0);
    if (v16 != 1) {
      break;
    }
    uint64_t v9 = (uint64_t *)((char *)v398 + 1);
    size_t v11 = (char *)v390 + (void)v11;
    if ((uint64_t *)v396 == (uint64_t *)((char *)v398 + 1)) {
      goto LABEL_7;
    }
  }
  v390 = (uint64_t *)v18;
  v409 = v21;
  uint64_t v373 = v19;
  if ((uint64_t *)v396 != v398)
  {
    v387 = &v348;
    uint64_t v257 = MEMORY[0x270FA5388](v8);
    v385 = (char *)&v348 - ((v258 + 15) & 0xFFFFFFFFFFFFFFF0);
    v384 = &v348;
    uint64_t v259 = v386;
    uint64_t v260 = MEMORY[0x270FA5388](v257);
    v261 = (char *)&v348 - ((v259 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v262 = MEMORY[0x270FA5388](v260);
    uint64_t v396 = v263;
    v264 = (char *)&v348 - v263;
    v388 = (char *)&v348;
    uint64_t result = MEMORY[0x270FA5388](v262);
    v266 = (char *)&v348 - ((v265 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v267 >= v397[2])
    {
      __break(1u);
      goto LABEL_131;
    }
    v268 = v11;
    v269 = v394;
    v393((char *)&v348 - ((v265 + 15) & 0xFFFFFFFFFFFFFFF0), v268, v394);
    sub_2495B6960();
    ((void (*)(char *, char *))v390)(v266, v269);
    uint64_t v270 = sub_24959C100((uint64_t)v264, (uint64_t)v261, &qword_2696BFED0);
    MEMORY[0x270FA5388](v270);
    v271 = (char *)&v348 - v396;
    v272 = (char *)&v348 - ((v259 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_24957864C((uint64_t)v261, (uint64_t)&v348 - v396, &qword_2696BFED0);
    uint64_t v22 = v373;
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v409)(v271, 1, v373);
    if (result == 1)
    {
LABEL_135:
      __break(1u);
      goto LABEL_136;
    }
    v273 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v274 = v385;
    v273(v385, v271, v22);
    sub_2495786B0((uint64_t)v272, &qword_2696BFED0);
    uint64_t v23 = (uint64_t)v389;
    v273(v389, v274, v22);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v23, 0, 1, v22);
  }
  else
  {
LABEL_7:
    uint64_t v22 = sub_2495B67F0();
    uint64_t v23 = (uint64_t)v389;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v389, 1, 1, v22);
  }
  swift_bridgeObjectRelease();
  sub_2495B67F0();
  uint64_t v24 = *(void *)(v22 - 8);
  uint64_t v25 = v24;
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  uint64_t v27 = v24 + 48;
  int v28 = v26(v23, 1, v22);
  uint64_t v373 = v22;
  uint64_t v354 = v25;
  v367 = (uint64_t (*)(char *, uint64_t, uint64_t))v26;
  uint64_t v366 = v27;
  if (v28 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v379, 1, 1, v22);
    sub_2495786B0(v23, &qword_2696BFED0);
  }
  else
  {
    uint64_t v29 = v379;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v379, v23, v22);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v29, 0, 1, v22);
  }
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFED8);
  v368 = &v348;
  uint64_t v31 = *(char **)(*(void *)(v30 - 8) + 64);
  MEMORY[0x270FA5388](v30 - 8);
  unint64_t v32 = (unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v378 = (uint64_t)&v348 - v32;
  uint64_t v33 = sub_2495B69A0();
  v389 = (char *)&v348;
  v385 = v31;
  uint64_t v34 = MEMORY[0x270FA5388](v33);
  v388 = (char *)&v348 - v32;
  v397 = (void *)v34;
  uint64_t v396 = *(void *)(v34 + 16);
  if (!v396) {
    goto LABEL_17;
  }
  uint64_t v35 = sub_2495B6970();
  uint64_t v36 = 0;
  v394 = (char *)v35;
  uint64_t v37 = *(void *)(v35 - 8);
  v393 = *(void (**)(char *, char *, char *))(v37 + 16);
  uint64_t v38 = (char *)v397 + ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80));
  uint64_t v395 = *(void *)(v37 + 64);
  v390 = *(uint64_t **)(v37 + 72);
  v392 = (char *)(v37 + 16);
  v391 = (uint64_t *)(v37 + 8);
  while (1)
  {
    v398 = v36;
    v409 = &v348;
    uint64_t v39 = MEMORY[0x270FA5388](v35);
    uint64_t v41 = (char *)&v348 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
    MEMORY[0x270FA5388](v39);
    unint64_t v43 = (char *)&v348 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v44 = v394;
    v393(v43, v38, v394);
    swift_bridgeObjectRetain();
    sub_2495B6950();
    uint64_t v45 = (uint64_t *)*v391;
    ((void (*)(char *, char *))*v391)(v43, v44);
    swift_bridgeObjectRelease();
    uint64_t v46 = sub_2495B69C0();
    uint64_t v47 = *(void *)(v46 - 8);
    int64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
    LODWORD(v43) = v48(v41, 1, v46);
    uint64_t v35 = sub_2495786B0((uint64_t)v41, &qword_2696BFED8);
    if (v43 != 1) {
      break;
    }
    uint64_t v36 = (uint64_t *)((char *)v398 + 1);
    uint64_t v38 = (char *)v390 + (void)v38;
    if ((uint64_t *)v396 == (uint64_t *)((char *)v398 + 1)) {
      goto LABEL_17;
    }
  }
  v390 = v45;
  v409 = v48;
  uint64_t v372 = v46;
  if ((uint64_t *)v396 == v398)
  {
LABEL_17:
    uint64_t v49 = sub_2495B69C0();
    uint64_t v50 = (uint64_t)v388;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v388, 1, 1, v49);
    goto LABEL_18;
  }
  v384 = &v348;
  uint64_t v275 = MEMORY[0x270FA5388](v35);
  v383 = (uint64_t *)((char *)&v348 - ((v276 + 15) & 0xFFFFFFFFFFFFFFF0));
  v382 = &v348;
  v277 = v385;
  uint64_t v278 = MEMORY[0x270FA5388](v275);
  v279 = (char *)&v348 - ((unint64_t)(v277 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v280 = MEMORY[0x270FA5388](v278);
  uint64_t v396 = v281;
  v282 = (char *)&v348 - v281;
  v387 = &v348;
  uint64_t result = MEMORY[0x270FA5388](v280);
  v284 = (char *)&v348 - ((v283 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v285 >= v397[2])
  {
LABEL_131:
    __break(1u);
    goto LABEL_132;
  }
  v286 = v38;
  v287 = v394;
  v393((char *)&v348 - ((v283 + 15) & 0xFFFFFFFFFFFFFFF0), v286, v394);
  sub_2495B6950();
  ((void (*)(char *, char *))v390)(v284, v287);
  uint64_t v288 = sub_24959C100((uint64_t)v282, (uint64_t)v279, &qword_2696BFED8);
  MEMORY[0x270FA5388](v288);
  v289 = (char *)&v348 - v396;
  v290 = (char *)&v348 - ((unint64_t)(v277 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24957864C((uint64_t)v279, (uint64_t)&v348 - v396, &qword_2696BFED8);
  uint64_t v49 = v372;
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v409)(v289, 1, v372);
  if (result == 1)
  {
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  uint64_t v291 = v47;
  v292 = *(void (**)(uint64_t *, char *, uint64_t))(v47 + 32);
  v293 = (char *)v383;
  v292(v383, v289, v49);
  sub_2495786B0((uint64_t)v290, &qword_2696BFED8);
  uint64_t v50 = (uint64_t)v388;
  v292((uint64_t *)v388, v293, v49);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v291 + 56))(v50, 0, 1, v49);
LABEL_18:
  swift_bridgeObjectRelease();
  sub_2495B69C0();
  uint64_t v51 = *(void *)(v49 - 8);
  uint64_t v52 = v51;
  v364 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
  uint64_t v363 = v51 + 48;
  int v53 = v364(v50, 1, v49);
  uint64_t v372 = v49;
  uint64_t v353 = v52;
  if (v53 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v378, 1, 1, v49);
    sub_2495786B0(v50, &qword_2696BFED8);
  }
  else
  {
    uint64_t v54 = v378;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v378, v50, v49);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v52 + 56))(v54, 0, 1, v49);
  }
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFEE0);
  v365 = &v348;
  uint64_t v56 = *(uint64_t **)(*(void *)(v55 - 8) + 64);
  MEMORY[0x270FA5388](v55 - 8);
  unint64_t v57 = ((unint64_t)v56 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v377 = (uint64_t)&v348 - v57;
  uint64_t v58 = sub_2495B69A0();
  v388 = (char *)&v348;
  v384 = v56;
  uint64_t v59 = MEMORY[0x270FA5388](v58);
  v389 = (char *)&v348 - v57;
  v397 = (void *)v59;
  uint64_t v396 = *(void *)(v59 + 16);
  if (!v396) {
    goto LABEL_27;
  }
  uint64_t v60 = sub_2495B6970();
  uint64_t v61 = 0;
  v394 = (char *)v60;
  uint64_t v62 = *(void *)(v60 - 8);
  v393 = *(void (**)(char *, char *, char *))(v62 + 16);
  uint64_t v63 = (char *)v397 + ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80));
  uint64_t v395 = *(void *)(v62 + 64);
  v390 = *(uint64_t **)(v62 + 72);
  v392 = (char *)(v62 + 16);
  v391 = (uint64_t *)(v62 + 8);
  while (1)
  {
    v409 = v61;
    v398 = &v348;
    uint64_t v64 = MEMORY[0x270FA5388](v60);
    int v66 = (char *)&v348 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
    MEMORY[0x270FA5388](v64);
    uint64_t v68 = (char *)&v348 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
    int64_t v69 = v394;
    v393(v68, v63, v394);
    swift_bridgeObjectRetain();
    sub_2495B6910();
    uint64_t v70 = (uint64_t *)*v391;
    ((void (*)(char *, char *))*v391)(v68, v69);
    swift_bridgeObjectRelease();
    uint64_t v71 = sub_2495B6810();
    uint64_t v72 = *(void *)(v71 - 8);
    unint64_t v73 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v72 + 48);
    LODWORD(v6std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v73(v66, 1, v71);
    uint64_t v60 = sub_2495786B0((uint64_t)v66, &qword_2696BFEE0);
    if (v68 != 1) {
      break;
    }
    uint64_t v61 = (void *)((char *)v409 + 1);
    uint64_t v63 = (char *)v390 + (void)v63;
    if ((void *)v396 == (void *)((char *)v409 + 1)) {
      goto LABEL_27;
    }
  }
  v390 = v70;
  v398 = (uint64_t *)v73;
  uint64_t v374 = v71;
  if ((void *)v396 == v409)
  {
LABEL_27:
    uint64_t v74 = sub_2495B6810();
    uint64_t v75 = (uint64_t)v389;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v389, 1, 1, v74);
    goto LABEL_28;
  }
  v383 = &v348;
  uint64_t v294 = MEMORY[0x270FA5388](v60);
  v382 = (uint64_t *)((char *)&v348 - ((v295 + 15) & 0xFFFFFFFFFFFFFFF0));
  v381 = (char *)&v348;
  v296 = v384;
  uint64_t v297 = MEMORY[0x270FA5388](v294);
  v298 = (char *)&v348 - (((unint64_t)v296 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v299 = MEMORY[0x270FA5388](v297);
  uint64_t v396 = v300;
  v301 = (char *)&v348 - v300;
  v387 = &v348;
  uint64_t result = MEMORY[0x270FA5388](v299);
  v303 = (char *)&v348 - ((v302 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v304 >= v397[2])
  {
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }
  v305 = v63;
  v306 = v394;
  v393((char *)&v348 - ((v302 + 15) & 0xFFFFFFFFFFFFFFF0), v305, v394);
  sub_2495B6910();
  ((void (*)(char *, char *))v390)(v303, v306);
  uint64_t v307 = sub_24959C100((uint64_t)v301, (uint64_t)v298, &qword_2696BFEE0);
  MEMORY[0x270FA5388](v307);
  v308 = (char *)&v348 - v396;
  v309 = (char *)&v348 - (((unint64_t)v296 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24957864C((uint64_t)v298, (uint64_t)&v348 - v396, &qword_2696BFEE0);
  uint64_t v74 = v374;
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v398)(v308, 1, v374);
  if (result == 1)
  {
LABEL_137:
    __break(1u);
    goto LABEL_138;
  }
  uint64_t v310 = v72;
  v311 = *(void (**)(uint64_t *, char *, uint64_t))(v72 + 32);
  v312 = (char *)v382;
  v311(v382, v308, v74);
  sub_2495786B0((uint64_t)v309, &qword_2696BFEE0);
  uint64_t v75 = (uint64_t)v389;
  v311((uint64_t *)v389, v312, v74);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v310 + 56))(v75, 0, 1, v74);
LABEL_28:
  swift_bridgeObjectRelease();
  sub_2495B6810();
  uint64_t v76 = *(void *)(v74 - 8);
  uint64_t v77 = v76;
  uint64_t v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
  uint64_t v79 = v76 + 48;
  int v80 = v78(v75, 1, v74);
  uint64_t v374 = v74;
  uint64_t v352 = v77;
  v360 = (uint64_t (*)(char *, uint64_t, uint64_t))v78;
  uint64_t v362 = v79;
  if (v80 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56))(v377, 1, 1, v74);
    sub_2495786B0(v75, &qword_2696BFEE0);
  }
  else
  {
    uint64_t v81 = v377;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 32))(v377, v75, v74);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v77 + 56))(v81, 0, 1, v74);
  }
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFEE8);
  v361 = &v348;
  uint64_t v83 = *(char **)(*(void *)(v82 - 8) + 64);
  MEMORY[0x270FA5388](v82 - 8);
  unint64_t v84 = (unint64_t)(v83 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v376 = (uint64_t)&v348 - v84;
  uint64_t v85 = sub_2495B69A0();
  v389 = (char *)&v348;
  uint64_t v86 = MEMORY[0x270FA5388](v85);
  v388 = (char *)&v348 - v84;
  v397 = (void *)v86;
  uint64_t v396 = *(void *)(v86 + 16);
  v383 = (uint64_t *)v83;
  if (!v396) {
    goto LABEL_38;
  }
  uint64_t v87 = sub_2495B6970();
  uint64_t v88 = 0;
  v394 = (char *)v87;
  uint64_t v89 = *(void *)(v87 - 8);
  v393 = *(void (**)(char *, char *, char *))(v89 + 16);
  uint64_t v90 = (char *)v397 + ((*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80));
  uint64_t v395 = *(void *)(v89 + 64);
  v390 = *(uint64_t **)(v89 + 72);
  v392 = (char *)(v89 + 16);
  v391 = (uint64_t *)(v89 + 8);
  while (1)
  {
    v409 = v88;
    v398 = &v348;
    uint64_t v91 = MEMORY[0x270FA5388](v87);
    int64_t v92 = (char *)&v348 - ((unint64_t)(v83 + 15) & 0xFFFFFFFFFFFFFFF0);
    MEMORY[0x270FA5388](v91);
    uint64_t v94 = (char *)&v348 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
    __n128 v95 = v394;
    v393(v94, v90, v394);
    swift_bridgeObjectRetain();
    sub_2495B6930();
    uint64_t v96 = (uint64_t *)*v391;
    ((void (*)(char *, char *))*v391)(v94, v95);
    swift_bridgeObjectRelease();
    uint64_t v97 = sub_2495B68C0();
    uint64_t v98 = *(void *)(v97 - 8);
    long long v99 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v98 + 48);
    LODWORD(v94) = v99(v92, 1, v97);
    uint64_t v87 = sub_2495786B0((uint64_t)v92, &qword_2696BFEE8);
    if (v94 != 1) {
      break;
    }
    uint64_t v88 = (void *)((char *)v409 + 1);
    uint64_t v90 = (char *)v390 + (void)v90;
    uint64_t v83 = (char *)v383;
    if ((void *)v396 == (void *)((char *)v409 + 1)) {
      goto LABEL_38;
    }
  }
  v390 = v96;
  v398 = (uint64_t *)v99;
  uint64_t v371 = v97;
  char v100 = (char *)v383;
  if ((void *)v396 == v409)
  {
LABEL_38:
    uint64_t v101 = sub_2495B68C0();
    uint64_t v102 = (uint64_t)v388;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 56))(v388, 1, 1, v101);
    goto LABEL_39;
  }
  v382 = &v348;
  uint64_t v313 = MEMORY[0x270FA5388](v87);
  v381 = (char *)&v348 - ((v314 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v315 = MEMORY[0x270FA5388](v313);
  unint64_t v316 = (unint64_t)(v100 + 15) & 0xFFFFFFFFFFFFFFF0;
  v317 = (char *)&v348 - v316;
  uint64_t v396 = (uint64_t)&v348;
  uint64_t v318 = MEMORY[0x270FA5388](v315);
  v387 = &v348;
  uint64_t result = MEMORY[0x270FA5388](v318);
  v323 = (char *)&v348 - ((v320 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v322 >= v397[2])
  {
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }
  v409 = v321;
  v324 = v394;
  ((void (*)(char *))v393)((char *)&v348 - ((v320 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2495B6930();
  ((void (*)(char *, char *))v390)(v323, v324);
  uint64_t v325 = sub_24959C100((uint64_t)&v348 - v316, (uint64_t)&v348 - v316, &qword_2696BFEE8);
  uint64_t v396 = (uint64_t)&v348;
  MEMORY[0x270FA5388](v325);
  v326 = (char *)&v348 - v316;
  sub_24957864C((uint64_t)v317, (uint64_t)v326, &qword_2696BFEE8);
  uint64_t v101 = v371;
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v398)(v326, 1, v371);
  if (result == 1)
  {
LABEL_138:
    __break(1u);
    goto LABEL_139;
  }
  uint64_t v327 = v98;
  v328 = *(void (**)(char *, char *, uint64_t))(v98 + 32);
  v329 = v381;
  v328(v381, v326, v101);
  sub_2495786B0((uint64_t)v326, &qword_2696BFEE8);
  uint64_t v102 = (uint64_t)v388;
  v328(v388, v329, v101);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v327 + 56))(v102, 0, 1, v101);
LABEL_39:
  swift_bridgeObjectRelease();
  sub_2495B68C0();
  uint64_t v103 = *(void *)(v101 - 8);
  uint64_t v104 = v103;
  v358 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
  uint64_t v357 = v103 + 48;
  int v105 = v358(v102, 1, v101);
  uint64_t v371 = v101;
  uint64_t v351 = v104;
  if (v105 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v104 + 56))(v376, 1, 1, v101);
    sub_2495786B0(v102, &qword_2696BFEE8);
  }
  else
  {
    uint64_t v106 = v376;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 32))(v376, v102, v101);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v104 + 56))(v106, 0, 1, v101);
  }
  uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFEF0);
  v359 = &v348;
  __n128 v108 = *(char **)(*(void *)(v107 - 8) + 64);
  MEMORY[0x270FA5388](v107 - 8);
  unint64_t v109 = (unint64_t)(v108 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v375 = (uint64_t)&v348 - v109;
  uint64_t v110 = sub_2495B69A0();
  v389 = (char *)&v348;
  uint64_t v111 = MEMORY[0x270FA5388](v110);
  v388 = (char *)&v348 - v109;
  v397 = (void *)v111;
  uint64_t v112 = *(void *)(v111 + 16);
  v382 = (uint64_t *)v108;
  uint64_t v396 = v112;
  if (v112)
  {
    uint64_t v113 = sub_2495B6970();
    v114 = 0;
    v394 = (char *)v113;
    uint64_t v115 = *(void *)(v113 - 8);
    v393 = *(void (**)(char *, char *, char *))(v115 + 16);
    v116 = (char *)v397
         + ((*(unsigned __int8 *)(v115 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80));
    uint64_t v395 = *(void *)(v115 + 64);
    v390 = *(uint64_t **)(v115 + 72);
    v392 = (char *)(v115 + 16);
    v391 = (uint64_t *)(v115 + 8);
    while (1)
    {
      v409 = v114;
      v398 = &v348;
      uint64_t v117 = MEMORY[0x270FA5388](v113);
      v118 = (char *)&v348 - ((unint64_t)(v108 + 15) & 0xFFFFFFFFFFFFFFF0);
      MEMORY[0x270FA5388](v117);
      v120 = (char *)&v348 - ((v119 + 15) & 0xFFFFFFFFFFFFFFF0);
      v121 = v394;
      v393(v120, v116, v394);
      swift_bridgeObjectRetain();
      sub_2495B6940();
      v122 = (uint64_t *)*v391;
      ((void (*)(char *, char *))*v391)(v120, v121);
      swift_bridgeObjectRelease();
      uint64_t v123 = sub_2495B6900();
      uint64_t v124 = *(void *)(v123 - 8);
      v125 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v124 + 48);
      LODWORD(v12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v125(v118, 1, v123);
      uint64_t v113 = sub_2495786B0((uint64_t)v118, &qword_2696BFEF0);
      if (v120 != 1) {
        break;
      }
      v114 = (void *)((char *)v409 + 1);
      v116 = (char *)v390 + (void)v116;
      __n128 v108 = (char *)v382;
      if ((void *)v396 == (void *)((char *)v409 + 1)) {
        goto LABEL_49;
      }
    }
    v390 = v122;
    v398 = (uint64_t *)v125;
    uint64_t v370 = v123;
    v126 = (char *)v382;
    if ((void *)v396 != v409)
    {
      v381 = (char *)&v348;
      uint64_t v330 = MEMORY[0x270FA5388](v113);
      v356 = (uint64_t (**)(char *, uint64_t))((char *)&v348 - ((v331 + 15) & 0xFFFFFFFFFFFFFFF0));
      v355 = &v348;
      uint64_t v332 = MEMORY[0x270FA5388](v330);
      v333 = (char *)&v348 - ((unint64_t)(v126 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v334 = MEMORY[0x270FA5388](v332);
      uint64_t v396 = v335;
      v336 = (char *)&v348 - v335;
      v387 = &v348;
      uint64_t result = MEMORY[0x270FA5388](v334);
      v339 = (char *)&v348 - ((v337 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (v338 < v397[2])
      {
        v340 = v394;
        ((void (*)(char *))v393)((char *)&v348 - ((v337 + 15) & 0xFFFFFFFFFFFFFFF0));
        sub_2495B6940();
        ((void (*)(char *, char *))v390)(v339, v340);
        uint64_t v341 = sub_24959C100((uint64_t)v336, (uint64_t)v333, &qword_2696BFEF0);
        MEMORY[0x270FA5388](v341);
        v342 = (char *)&v348 - v396;
        v343 = (char *)&v348 - ((unint64_t)(v126 + 15) & 0xFFFFFFFFFFFFFFF0);
        sub_24957864C((uint64_t)v333, (uint64_t)&v348 - v396, &qword_2696BFEF0);
        uint64_t v344 = v370;
        uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v398)(v342, 1, v370);
        if (result != 1)
        {
          uint64_t v345 = v124;
          v346 = *(void (**)(uint64_t (**)(char *, uint64_t), char *, uint64_t))(v124 + 32);
          v347 = v356;
          v346(v356, v342, v344);
          sub_2495786B0((uint64_t)v343, &qword_2696BFEF0);
          uint64_t v128 = (uint64_t)v388;
          v346((uint64_t (**)(char *, uint64_t))v388, (char *)v347, v344);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v345 + 56))(v128, 0, 1, v344);
          swift_bridgeObjectRelease();
          uint64_t v127 = v344;
          goto LABEL_50;
        }
LABEL_139:
        __break(1u);
        return result;
      }
      goto LABEL_134;
    }
  }
LABEL_49:
  uint64_t v127 = sub_2495B6900();
  uint64_t v128 = (uint64_t)v388;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v127 - 8) + 56))(v388, 1, 1, v127);
  swift_bridgeObjectRelease();
LABEL_50:
  sub_2495B6900();
  v129 = *(char **)(v127 - 8);
  v130 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v129;
  v131 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((void *)v129 + 6);
  v355 = (uint64_t *)(v129 + 48);
  int v132 = v131(v128, 1, v127);
  v356 = (uint64_t (**)(char *, uint64_t))v130;
  if (v132 == 1)
  {
    v130[7](v375, 1, 1, v127);
    sub_2495786B0(v128, &qword_2696BFEF0);
  }
  else
  {
    uint64_t v133 = v375;
    ((void (*)(uint64_t, uint64_t, uint64_t))v130[4])(v375, v128, v127);
    v130[7](v133, 0, 1, v127);
  }
  uint64_t v134 = sub_2495B69A0();
  uint64_t v135 = *(void *)(v134 + 16);
  uint64_t v370 = v127;
  if (v135)
  {
    v349 = v131;
    uint64_t v136 = sub_2495B6970();
    v137 = (char *)v136;
    uint64_t v138 = *(void *)(v136 - 8);
    v393 = *(void (**)(char *, char *, char *))(v138 + 16);
    unint64_t v139 = (*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80);
    uint64_t v348 = v134;
    unint64_t v140 = v134 + v139;
    v391 = *(uint64_t **)(v138 + 72);
    v390 = *(uint64_t **)(v138 + 64);
    v392 = (char *)(v138 + 16);
    v389 = (char *)(v138 + 8);
    uint64_t v395 = MEMORY[0x263F8EE78];
    v141 = (uint64_t *)&unk_2696BFEF8;
    v381 = (char *)v136;
    do
    {
      uint64_t v396 = v135;
      v398 = &v348;
      MEMORY[0x270FA5388](v136);
      v144 = (char *)&v348 - ((v143 + 15) & 0xFFFFFFFFFFFFFFF0);
      v393(v144, (char *)v140, v137);
      uint64_t v145 = sub_2495B6840();
      v397 = &v348;
      v146 = v137;
      uint64_t v147 = *(void *)(v145 - 8);
      uint64_t v148 = *(void *)(v147 + 64);
      MEMORY[0x270FA5388](v145);
      v394 = (char *)((v148 + 15) & 0xFFFFFFFFFFFFFFF0);
      v149 = (char *)((char *)&v348 - v394);
      uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(v141);
      v409 = &v348;
      MEMORY[0x270FA5388](v150 - 8);
      v152 = v141;
      v153 = (char *)&v348 - ((v151 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_2495B6920();
      v154 = v144;
      uint64_t v155 = v147;
      v137 = v146;
      (*(void (**)(char *, char *))v389)(v154, v146);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48))(v153, 1, v145) == 1)
      {
        uint64_t v136 = sub_2495786B0((uint64_t)v153, v152);
        v141 = v152;
        uint64_t v142 = v396;
      }
      else
      {
        uint64_t v156 = v155;
        v157 = *(uint64_t (**)(char *, char *, uint64_t))(v155 + 32);
        uint64_t v158 = v157(v149, v153, v145);
        v409 = &v348;
        MEMORY[0x270FA5388](v158);
        v159 = (char *)((char *)&v348 - v394);
        v157((char *)((char *)&v348 - v394), v149, v145);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v388 = (char *)v145;
        v387 = (uint64_t *)v157;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v395 = sub_24956B3C8(0, *(void *)(v395 + 16) + 1, 1, v395);
        }
        v141 = (uint64_t *)&unk_2696BFEF8;
        uint64_t v142 = v396;
        unint64_t v162 = *(void *)(v395 + 16);
        unint64_t v161 = *(void *)(v395 + 24);
        if (v162 >= v161 >> 1) {
          uint64_t v395 = sub_24956B3C8(v161 > 1, v162 + 1, 1, v395);
        }
        uint64_t v163 = v395;
        *(void *)(v395 + 16) = v162 + 1;
        uint64_t v136 = ((uint64_t (*)(unint64_t, char *, char *))v387)(v163+ ((*(unsigned __int8 *)(v156 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v156 + 80))+ *(void *)(v156 + 72) * v162, v159, v388);
        v137 = v381;
      }
      v140 += (unint64_t)v391;
      uint64_t v135 = v142 - 1;
    }
    while (v135);
    swift_bridgeObjectRelease();
    uint64_t v127 = v370;
    v131 = v349;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v395 = MEMORY[0x263F8EE78];
  }
  uint64_t v164 = sub_2495B6980();
  uint64_t v165 = *(void *)(v164 - 8);
  MEMORY[0x270FA5388](v164);
  v167 = (void (**)(char *, char *, char *))((char *)&v348 - ((v166 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2495B6990();
  int v168 = (*(uint64_t (**)(void (**)(char *, char *, char *), uint64_t))(v165 + 88))(v167, v164);
  if (MEMORY[0x263F2AC88] && v168 == *MEMORY[0x263F2AC88])
  {
    (*(void (**)(void (**)(char *, char *, char *), uint64_t))(v165 + 96))(v167, v164);
    uint64_t v169 = sub_2495B68A0();
    uint64_t v170 = *(void *)(v169 - 8);
    MEMORY[0x270FA5388](v169);
    v172 = (char *)&v348 - ((v171 + 15) & 0xFFFFFFFFFFFFFFF0);
    v173 = *(uint64_t (**)(char *, char *, uint64_t))(v170 + 32);
    v173(v172, (char *)v167, v169);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFF10);
    unint64_t v174 = (*(unsigned __int8 *)(v170 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v170 + 80);
    v175 = (void (*)(char *, char *, char *))swift_allocObject();
    *((_OWORD *)v175 + 1) = xmmword_2495BF5A0;
    v393 = v175;
    uint64_t v176 = v173((char *)v175 + v174, v172, v169);
  }
  else
  {
    if (MEMORY[0x263F2AC78] && v168 == *MEMORY[0x263F2AC78])
    {
      uint64_t v176 = (*(uint64_t (**)(void (**)(char *, char *, char *), uint64_t))(v165 + 96))(v167, v164);
      v177 = *v167;
    }
    else
    {
      uint64_t v176 = (*(uint64_t (**)(void (**)(char *, char *, char *), uint64_t))(v165 + 8))(v167, v164);
      v177 = (void (*)(char *, char *, char *))MEMORY[0x263F8EE78];
    }
    v393 = v177;
  }
  uint64_t v178 = v373;
  MEMORY[0x270FA5388](v176);
  v180 = (char *)&v348 - ((v179 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24957864C(v375, (uint64_t)v180, &qword_2696BFEF0);
  uint64_t v181 = v131((uint64_t)v180, 1, v127);
  if (v181 == 1)
  {
    memset(&v407, 0, sizeof(v407));
    char v408 = 1;
  }
  else
  {
    MEMORY[0x270FA5388](v181);
    v183 = (char *)&v348 - ((v182 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v184 + 32))(v183, v180, v127);
    v392 = v183;
    uint64_t v185 = sub_2495B68D0();
    int64_t v186 = *(void *)(v185 + 16);
    if (v186)
    {
      v390 = &v348;
      v391 = &v348;
      v404.__r_.__value_.__r.__words[0] = MEMORY[0x263F8EE78];
      sub_2495975C0(0, v186, 0);
      uint64_t v187 = sub_2495B68F0();
      v409 = (void *)v187;
      uint64_t v188 = *(void *)(v187 - 8);
      v398 = *(uint64_t **)(v188 + 16);
      unint64_t v189 = (*(unsigned __int8 *)(v188 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v188 + 80);
      v389 = (char *)v185;
      unint64_t v190 = v185 + v189;
      uint64_t v396 = *(void *)(v188 + 72);
      v394 = *(char **)(v188 + 64);
      v397 = (void *)(v188 + 16);
      v191 = (void (**)(char *, void *))(v188 + 8);
      do
      {
        MEMORY[0x270FA5388](v187);
        v193 = (char *)&v348 - ((v192 + 15) & 0xFFFFFFFFFFFFFFF0);
        v194 = v409;
        ((void (*)(char *, unint64_t, void *))v398)(v193, v190, v409);
        uint64_t v195 = sub_2495B68E0();
        uint64_t v197 = v196;
        (*v191)(v193, v194);
        std::string::size_type v198 = v404.__r_.__value_.__r.__words[0];
        uint64_t v187 = swift_isUniquelyReferenced_nonNull_native();
        if ((v187 & 1) == 0)
        {
          uint64_t v187 = sub_2495975C0(0, *(void *)(v198 + 16) + 1, 1);
          std::string::size_type v198 = v404.__r_.__value_.__r.__words[0];
        }
        unint64_t v200 = *(void *)(v198 + 16);
        unint64_t v199 = *(void *)(v198 + 24);
        if (v200 >= v199 >> 1)
        {
          uint64_t v187 = sub_2495975C0(v199 > 1, v200 + 1, 1);
          std::string::size_type v198 = v404.__r_.__value_.__r.__words[0];
        }
        *(void *)(v198 + 16) = v200 + 1;
        std::string::size_type v201 = v198 + 16 * v200;
        *(void *)(v201 + 32) = v195;
        *(void *)(v201 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v197;
        v190 += v396;
        --v186;
      }
      while (v186);
      swift_bridgeObjectRelease();
      uint64_t v178 = v373;
      uint64_t v127 = v370;
    }
    else
    {
      swift_bridgeObjectRelease();
      std::string::size_type v198 = MEMORY[0x263F8EE78];
    }
    v404.__r_.__value_.__r.__words[0] = v198;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFF00);
    sub_24959D554();
    unint64_t v202 = sub_2495B8630();
    unint64_t v204 = v203;
    swift_bridgeObjectRelease();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v202, v204, &v407);
    uint64_t v181 = v356[1](v392, v127);
    char v408 = 0;
  }
  MEMORY[0x270FA5388](v181);
  v206 = (char *)&v348 - ((v205 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24957864C(v379, (uint64_t)v206, &qword_2696BFED0);
  uint64_t v207 = v367(v206, 1, v178);
  if (v207 == 1)
  {
    memset(&v404, 0, sizeof(v404));
    char v405 = 1;
  }
  else
  {
    uint64_t v208 = v354;
    MEMORY[0x270FA5388](v207);
    v210 = (char *)&v348 - ((v209 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v211 = (*(uint64_t (**)(char *, char *, uint64_t))(v208 + 32))(v210, v206, v178);
    unint64_t v212 = MEMORY[0x24C5A1410](v211);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v212, v213, &v404);
    (*(void (**)(char *, uint64_t))(v208 + 8))(v210, v178);
    char v405 = 0;
  }
  v214 = v385;
  uint64_t v215 = v372;
  if (v405)
  {
    memset(&v406, 0, sizeof(v406));
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v406);
    uint64_t v216 = sub_2495786B0((uint64_t)&v404, &qword_2696BFD98);
  }
  else
  {
    std::string::basic_string[abi:ne180100]((__n128 *)&v406, (__n128 *)&v404);
    std::string::~string(&v404);
  }
  MEMORY[0x270FA5388](v216);
  v217 = (char *)&v348 - ((unint64_t)(v214 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24957864C(v378, (uint64_t)v217, &qword_2696BFED8);
  uint64_t v218 = v364((uint64_t)v217, 1, v215);
  if (v218 == 1)
  {
    memset(&v404, 0, sizeof(v404));
    char v405 = 1;
  }
  else
  {
    uint64_t v219 = v353;
    MEMORY[0x270FA5388](v218);
    v221 = (char *)&v348 - ((v220 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v222 = (*(uint64_t (**)(char *, char *, uint64_t))(v219 + 32))(v221, v217, v215);
    unint64_t v223 = MEMORY[0x24C5A15E0](v222);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v223, v224, &v404);
    (*(void (**)(char *, uint64_t))(v219 + 8))(v221, v215);
    char v405 = 0;
  }
  uint64_t v225 = v374;
  v226 = v384;
  if (v405)
  {
    memset(&v403, 0, sizeof(v403));
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v403);
    uint64_t v227 = sub_2495786B0((uint64_t)&v404, &qword_2696BFD98);
  }
  else
  {
    std::string::basic_string[abi:ne180100]((__n128 *)&v403, (__n128 *)&v404);
    std::string::~string(&v404);
  }
  MEMORY[0x270FA5388](v227);
  v228 = (char *)&v348 - (((unint64_t)v226 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24957864C(v377, (uint64_t)v228, &qword_2696BFEE0);
  uint64_t v229 = v360(v228, 1, v225);
  if (v229 == 1)
  {
    memset(&v404, 0, sizeof(v404));
    char v405 = 1;
  }
  else
  {
    v398 = &v348;
    uint64_t v230 = v352;
    MEMORY[0x270FA5388](v229);
    v232 = (char *)&v348 - ((v231 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v230 + 32))(v232, v228, v225);
    uint64_t v396 = sub_2495B6700();
    v397 = &v348;
    uint64_t v233 = *(void *)(v396 - 8);
    MEMORY[0x270FA5388](v396);
    v409 = &v348;
    v235 = (char *)&v348 - ((v234 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B6800();
    uint64_t v236 = sub_2495B66E0();
    v394 = (char *)&v348;
    uint64_t v237 = *(void *)(v236 - 8);
    MEMORY[0x270FA5388](v236);
    v239 = (char *)&v348 - ((v238 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_24958D6C0();
    unint64_t v240 = sub_2495B6680();
    unint64_t v242 = v241;
    (*(void (**)(char *, uint64_t))(v237 + 8))(v239, v236);
    (*(void (**)(char *, uint64_t))(v233 + 8))(v235, v396);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v240, v242, &v404);
    (*(void (**)(char *, uint64_t))(v230 + 8))(v232, v374);
    char v405 = 0;
  }
  v243 = (char *)v383;
  uint64_t v244 = v371;
  if (v405)
  {
    memset(&v402, 0, sizeof(v402));
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v402);
    uint64_t v245 = sub_2495786B0((uint64_t)&v404, &qword_2696BFD98);
  }
  else
  {
    std::string::basic_string[abi:ne180100]((__n128 *)&v402, (__n128 *)&v404);
    std::string::~string(&v404);
  }
  MEMORY[0x270FA5388](v245);
  v246 = (char *)&v348 - ((unint64_t)(v243 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24957864C(v376, (uint64_t)v246, &qword_2696BFEE8);
  uint64_t v247 = v358((uint64_t)v246, 1, v244);
  if (v247 == 1)
  {
    memset(&v404, 0, sizeof(v404));
    char v405 = 1;
  }
  else
  {
    uint64_t v248 = v351;
    MEMORY[0x270FA5388](v247);
    v250 = (char *)&v348 - ((v249 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v251 = (*(uint64_t (**)(char *, char *, uint64_t))(v248 + 32))(v250, v246, v244);
    unint64_t v252 = MEMORY[0x24C5A14E0](v251);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v252, v253, &v404);
    (*(void (**)(char *, uint64_t))(v248 + 8))(v250, v244);
    char v405 = 0;
  }
  if (v405)
  {
    memset(&v401, 0, sizeof(v401));
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v401);
    sub_2495786B0((uint64_t)&v404, &qword_2696BFD98);
  }
  else
  {
    std::string::basic_string[abi:ne180100]((__n128 *)&v401, (__n128 *)&v404);
    std::string::~string(&v404);
  }
  sub_24957864C((uint64_t)&v407, (uint64_t)&v404, &qword_2696BFD98);
  if (v405)
  {
    memset(&v400, 0, sizeof(v400));
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v400);
    sub_2495786B0((uint64_t)&v404, &qword_2696BFD98);
  }
  else
  {
    std::string::basic_string[abi:ne180100]((__n128 *)&v400, (__n128 *)&v404);
    std::string::~string(&v404);
  }
  sub_24959D1CC(v395, &v404);
  uint64_t v254 = v369;
  sub_24959CE70((uint64_t)v393, (uint64_t *)&v399);
  uint64_t v255 = sub_2495B69D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v255 - 8) + 8))(v380, v255);
  if (v254)
  {
    std::vector<ctb::CPIMNamespace>::~vector[abi:ne180100]((uint64_t)&v404, (void (*)(uint64_t *))std::vector<ctb::CPIMNamespace>::__destroy_vector::operator()[abi:ne180100]);
    std::string::~string(&v400);
    std::string::~string(&v401);
    std::string::~string(&v402);
    std::string::~string(&v403);
    std::string::~string(&v406);
    sub_2495786B0((uint64_t)&v407, &qword_2696BFD98);
    sub_2495786B0(v375, &qword_2696BFEF0);
    sub_2495786B0(v376, &qword_2696BFEE8);
    sub_2495786B0(v377, &qword_2696BFEE0);
    sub_2495786B0(v378, &qword_2696BFED8);
    return sub_2495786B0(v379, &qword_2696BFED0);
  }
  else
  {
    sub_2495786B0((uint64_t)&v407, &qword_2696BFD98);
    sub_2495786B0(v375, &qword_2696BFEF0);
    sub_2495786B0(v376, &qword_2696BFEE8);
    sub_2495786B0(v377, &qword_2696BFEE0);
    sub_2495786B0(v378, &qword_2696BFED8);
    sub_2495786B0(v379, &qword_2696BFED0);
    v256 = v350;
    std::string::basic_string[abi:ne180100](v350, (__n128 *)&v406);
    std::string::~string(&v406);
    std::string::basic_string[abi:ne180100]((__n128 *)((char *)v256 + 24), (__n128 *)&v403);
    std::string::~string(&v403);
    std::string::basic_string[abi:ne180100](v256 + 3, (__n128 *)&v402);
    std::string::~string(&v402);
    std::string::basic_string[abi:ne180100]((__n128 *)((char *)v256 + 72), (__n128 *)&v401);
    std::string::~string(&v401);
    std::string::basic_string[abi:ne180100](v256 + 6, (__n128 *)&v400);
    std::string::~string(&v400);
    std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]((__n128 *)((char *)v256 + 120), (__n128 *)&v404);
    std::vector<ctb::CPIMNamespace>::~vector[abi:ne180100]((uint64_t)&v404, (void (*)(uint64_t *))std::vector<ctb::CPIMNamespace>::__destroy_vector::operator()[abi:ne180100]);
    std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100](v256 + 9, &v399);
    return std::vector<ctb::CPIMNamespace>::~vector[abi:ne180100]((uint64_t)&v399, (void (*)(uint64_t *))std::vector<ctb::CPIMEncapsulatedMessage>::__destroy_vector::operator()[abi:ne180100]);
  }
}

uint64_t sub_24959C100(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_24959C164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_2495B6880();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (unint64_t *)((char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(unint64_t *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  int v9 = (*(uint64_t (**)(unint64_t *, uint64_t))(v6 + 88))(v8, v5);
  if (MEMORY[0x263F2ABE8] && v9 == *MEMORY[0x263F2ABE8])
  {
    uint64_t v86 = a2;
    uint64_t v92 = a1;
    (*(void (**)(unint64_t *, uint64_t))(v6 + 96))(v8, v5);
    uint64_t v10 = sub_2495B69F0();
    uint64_t v85 = &v74;
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v87 = v5;
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(v11 + 64);
    MEMORY[0x270FA5388](v10);
    unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v15 = (*(uint64_t (**)(char *, unint64_t *, uint64_t))(v12 + 32))((char *)&v74 - v14, v8, v10);
    unint64_t v84 = (char *)&v74;
    MEMORY[0x270FA5388](v15);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))((char *)&v74 - v14, (char *)&v74 - v14, v10);
    double v16 = sub_24959FB8C((uint64_t)&v74 - v14);
    if (v2)
    {
      (*(void (**)(uint64_t, uint64_t, double))(v6 + 8))(v92, v87, v16);
    }
    else
    {
      ctb::bridging::makeEncapsulatedMessageContentVariant(*(GeoPushLocation *)&v16, v86);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v92, v87);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))((char *)&v74 - v14, v10);
  }
  if (MEMORY[0x263F2ABC0] && v9 == *MEMORY[0x263F2ABC0])
  {
    (*(void (**)(unint64_t *, uint64_t))(v6 + 96))(v8, v5);
    uint64_t v19 = sub_2495B6D10();
    uint64_t v92 = a1;
    uint64_t v20 = v19;
    unint64_t v84 = (char *)&v74;
    uint64_t v21 = *(void *)(v19 - 8);
    uint64_t v87 = v5;
    uint64_t v22 = v21;
    uint64_t v23 = *(void *)(v21 + 64);
    MEMORY[0x270FA5388](v19);
    uint64_t v86 = a2;
    unint64_t v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v25 = (*(uint64_t (**)(char *, unint64_t *, uint64_t))(v22 + 32))((char *)&v74 - v24, v8, v20);
    uint64_t v85 = v2;
    MEMORY[0x270FA5388](v25);
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))((char *)&v74 - v24, (char *)&v74 - v24, v20);
    sub_24959E670((uint64_t)&v74 - v24, (__n128 *)&v88);
    __n128 EncapsulatedMessageContentVariant = ctb::bridging::makeEncapsulatedMessageContentVariant((__n128 *)&v88, v86);
    (*(void (**)(uint64_t, uint64_t, __n128))(v6 + 8))(v92, v87, EncapsulatedMessageContentVariant);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))((char *)&v74 - v24, v20);
  }
  if (MEMORY[0x263F2ABD8] && v9 == *MEMORY[0x263F2ABD8] || MEMORY[0x263F2ABB0] && v9 == *MEMORY[0x263F2ABB0])
  {
    (*(void (**)(unint64_t *, uint64_t))(v6 + 96))(v8, v5);
    uint64_t v27 = sub_2495B7930();
    uint64_t v92 = a1;
    uint64_t v28 = v27;
    uint64_t v85 = &v74;
    uint64_t v29 = *(void *)(v27 - 8);
    uint64_t v87 = v5;
    uint64_t v30 = v29;
    uint64_t v31 = *(void *)(v29 + 64);
    MEMORY[0x270FA5388](v27);
    uint64_t v86 = a2;
    unint64_t v32 = (char *)&v74 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v33 = (*(uint64_t (**)(char *, unint64_t *, uint64_t))(v30 + 32))(v32, v8, v28);
    unint64_t v84 = (char *)&v74;
    MEMORY[0x270FA5388](v33);
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v32, v32, v28);
    sub_249587C98((uint64_t)v32, &v88);
    ctb::bridging::makeEncapsulatedMessageContentVariant((ctb::bridging *)&v88, v86);
LABEL_23:
    (*(void (**)(uint64_t, uint64_t, __n128))(v6 + 8))(v92, v87, v34);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v32, v28);
  }
  if (MEMORY[0x263F2ABC8] && v9 == *MEMORY[0x263F2ABC8])
  {
    (*(void (**)(unint64_t *, uint64_t))(v6 + 96))(v8, v5);
    uint64_t v35 = sub_2495B6DF0();
    uint64_t v92 = a1;
    uint64_t v28 = v35;
    uint64_t v85 = &v74;
    uint64_t v36 = *(void *)(v35 - 8);
    uint64_t v87 = v5;
    uint64_t v30 = v36;
    uint64_t v37 = *(void *)(v36 + 64);
    MEMORY[0x270FA5388](v35);
    uint64_t v86 = a2;
    unint64_t v32 = (char *)&v74 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v38 = (*(uint64_t (**)(char *, unint64_t *, uint64_t))(v30 + 32))(v32, v8, v28);
    unint64_t v84 = (char *)&v74;
    MEMORY[0x270FA5388](v38);
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v32, v32, v28);
    sub_2495A2208((uint64_t)v32, (uint64_t)&v88);
    ctb::bridging::makeEncapsulatedMessageContentVariant((long long *)&v88, v86);
    goto LABEL_23;
  }
  if (MEMORY[0x263F2AC20] && v9 == *MEMORY[0x263F2AC20])
  {
    (*(void (**)(unint64_t *, uint64_t))(v6 + 96))(v8, v5);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(*v8, v8[1], &v88);
    __n128 v39 = ctb::bridging::makeEncapsulatedMessageContentVariant((__n128 *)&v88, a2);
    return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v6 + 8))(a1, v5, v39);
  }
  if (MEMORY[0x263F2ABF8] && v9 == *MEMORY[0x263F2ABF8])
  {
    (*(void (**)(unint64_t *, uint64_t))(v6 + 96))(v8, v5);
    uint64_t v40 = sub_2495B71A0();
    uint64_t v92 = a1;
    uint64_t v28 = v40;
    uint64_t v85 = &v74;
    uint64_t v41 = *(void *)(v40 - 8);
    uint64_t v87 = v5;
    uint64_t v30 = v41;
    uint64_t v42 = *(void *)(v41 + 64);
    MEMORY[0x270FA5388](v40);
    uint64_t v86 = a2;
    unint64_t v32 = (char *)&v74 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v43 = (*(uint64_t (**)(char *, unint64_t *, uint64_t))(v30 + 32))(v32, v8, v28);
    unint64_t v84 = (char *)&v74;
    MEMORY[0x270FA5388](v43);
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v32, v32, v28);
    sub_24959E0B4((uint64_t)v32, (uint64_t)&v88);
    __n128 v34 = ctb::bridging::makeEncapsulatedMessageContentVariant((uint64_t)&v88, v86);
    goto LABEL_23;
  }
  if (MEMORY[0x263F2AC10] && v9 == *MEMORY[0x263F2AC10])
  {
    (*(void (**)(unint64_t *, uint64_t))(v6 + 96))(v8, v5);
    uint64_t v44 = sub_2495B7380();
    uint64_t v83 = &v74;
    uint64_t v45 = *(void *)(*(void *)(v44 - 8) + 64);
    MEMORY[0x270FA5388](v44);
    uint64_t v86 = a2;
    unint64_t v84 = (char *)((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v47 = v46;
    uint64_t v80 = v46;
    int64_t v48 = *(uint64_t (**)(int64_t, unint64_t *, uint64_t))(v46 + 32);
    uint64_t v82 = (char *)((char *)&v74 - v84);
    uint64_t v49 = v8;
    uint64_t v51 = v50;
    uint64_t v52 = v48((char *)&v74 - v84, v49, v50);
    uint64_t v81 = &v74;
    MEMORY[0x270FA5388](v52);
    uint64_t v85 = v2;
    uint64_t v87 = v5;
    int v53 = *(uint64_t (**)(void))(v47 + 16);
    uint64_t v54 = (char *)((char *)&v74 - v84);
    uint64_t v55 = v51;
    uint64_t v79 = v51;
    uint64_t v56 = v53();
    uint64_t v92 = a1;
    MEMORY[0x270FA5388](v56);
    unint64_t v57 = (char *)((char *)&v74 - v84);
    ((void (*)(int64_t, char *, uint64_t))v53)((char *)&v74 - v84, v54, v55);
    LODWORD(v84) = sub_24959EF4C((uint64_t)v57);
    uint64_t v76 = v54;
    unint64_t v58 = sub_2495B7370();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v58, v59, &v91);
    uint64_t v77 = sub_2495B6700();
    uint64_t v78 = &v74;
    uint64_t v60 = *(void *)(v77 - 8);
    MEMORY[0x270FA5388](v77);
    uint64_t v62 = (char *)&v74 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7360();
    uint64_t v63 = sub_2495B66E0();
    uint64_t v64 = *(void *)(v63 - 8);
    MEMORY[0x270FA5388](v63);
    int v66 = (char *)&v74 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_24958D6C0();
    unint64_t v67 = sub_2495B6680();
    unint64_t v75 = v68;
    (*(void (**)(char *, uint64_t))(v64 + 8))(v66, v63);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v62, v77);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v67, v75, &v90);
    uint64_t v69 = v79;
    uint64_t v70 = *(void (**)(char *, uint64_t))(v80 + 8);
    v70(v76, v79);
    LODWORD(v88.__r_.__value_.__l.__data_) = v84;
    std::string::basic_string[abi:ne180100]((__n128 *)&v88.__r_.__value_.__r.__words[1], (__n128 *)&v91);
    std::string::~string(&v91);
    std::string::basic_string[abi:ne180100](v89, (__n128 *)&v90);
    std::string::~string(&v90);
    __n128 v71 = ctb::bridging::makeEncapsulatedMessageContentVariant((uint64_t)&v88, v86);
    (*(void (**)(uint64_t, uint64_t, __n128))(v6 + 8))(v92, v87, v71);
    return ((uint64_t (*)(char *, uint64_t))v70)(v82, v69);
  }
  else
  {
    sub_24959D724();
    swift_allocError();
    void *v72 = 0xD000000000000031;
    v72[1] = 0x80000002495BCC20;
    swift_willThrow();
    unint64_t v73 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v73(a1, v5);
    return ((uint64_t (*)(unint64_t *, uint64_t))v73)(v8, v5);
  }
}

uint64_t sub_24959CE70@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  __n128 v34 = a2;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a2);
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v6 = sub_2495B68A0();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  int v9 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v32 = v8 + 16;
  uint64_t v33 = v9;
  uint64_t v10 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v29 = &v41;
  uint64_t v11 = *(void *)(v8 + 72);
  uint64_t v27 = a1;
  uint64_t v28 = v11;
  uint64_t v30 = *(void *)(v8 + 64);
  uint64_t v31 = (void (**)(char *, uint64_t))(v8 + 8);
  while (1)
  {
    uint64_t v37 = v3;
    uint64_t v35 = v5;
    uint64_t v43 = &v27;
    MEMORY[0x270FA5388](v6);
    uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    v33(v13, v10, v7);
    uint64_t v14 = v7;
    uint64_t v15 = sub_2495B6860();
    uint64_t v36 = &v27;
    uint64_t v16 = *(void *)(v15 - 8);
    MEMORY[0x270FA5388](v15);
    uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B6870();
    unint64_t v19 = sub_2495B6850();
    unint64_t v21 = v20;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v19, v21, &v39);
    uint64_t v22 = sub_2495B6880();
    MEMORY[0x270FA5388](v22 - 8);
    unint64_t v24 = (char *)&v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B6890();
    uint64_t v25 = v37;
    sub_24959C164((uint64_t)v24, (uint64_t)v38);
    uint64_t v3 = v25;
    if (v25) {
      break;
    }
    (*v31)(v13, v14);
    std::string::basic_string[abi:ne180100](&v40, (__n128 *)&v39);
    std::string::~string(&v39);
    std::variant<ctb::GeoPushLocation,ctb::CPMGroupManagement,ctb::FileTransferDescriptor,ctb::chatbot::Message,ctb::IMCompositionIndication,ctb::IMDispositionNotification,std::string>::variant[abi:ne180100]((uint64_t)v29, (uint64_t)v38);
    std::variant<ctb::GeoPushLocation,ctb::CPMGroupManagement,ctb::FileTransferDescriptor,ctb::chatbot::Message,ctb::IMCompositionIndication,ctb::IMDispositionNotification,std::string>::~variant[abi:ne180100]((uint64_t)v38);
    ctb::CPIMEncapsulatedMessage::CPIMEncapsulatedMessage((uint64_t)v42, (long long *)&v40);
    ctb::CPIMEncapsulatedMessage::~CPIMEncapsulatedMessage((void **)&v40);
    std::vector<ctb::CPIMEncapsulatedMessage>::push_back[abi:ne180100](v34, v42);
    uint64_t v7 = v14;
    ctb::CPIMEncapsulatedMessage::~CPIMEncapsulatedMessage((void **)v42);
    v10 += v28;
    uint64_t v5 = v35 - 1;
    if (v35 == 1) {
      return swift_bridgeObjectRelease();
    }
  }
  (*v31)(v13, v14);
  std::string::~string(&v39);
  swift_bridgeObjectRelease();
  return std::vector<ctb::CPIMNamespace>::~vector[abi:ne180100]((uint64_t)v34, (void (*)(uint64_t *))std::vector<ctb::CPIMEncapsulatedMessage>::__destroy_vector::operator()[abi:ne180100]);
}

uint64_t sub_24959D1CC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = (int64x2_t *)std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a2);
  unint64_t v4 = *(void *)(a1 + 16);
  __n128 v34 = v3;
  std::vector<ctb::CPIMNamespace>::reserve((char **)v3, v4);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = sub_2495B6840();
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v27[1] = a1;
    uint64_t v10 = a1 + v9;
    uint64_t v28 = *(void *)(v8 + 72);
    uint64_t v31 = *(void *)(v8 + 64);
    uint64_t v32 = v8 + 16;
    uint64_t v30 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v29 = (__n128 *)&v38;
    while (1)
    {
      uint64_t v35 = v27;
      MEMORY[0x270FA5388](v6);
      uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v13 = v7;
      v33(v12, v10, v7);
      uint64_t v14 = sub_2495B6820();
      if (!v15) {
        break;
      }
      unint64_t v16 = v14;
      unint64_t v17 = v15;
      swift_bridgeObjectRetain();
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v16, v17, &v39);
      char v40 = 0;
      swift_bridgeObjectRelease();
      if (v40) {
        goto LABEL_7;
      }
      std::string::basic_string[abi:ne180100]((__n128 *)&v36, (__n128 *)&v39);
      std::string::~string(&v39);
LABEL_8:
      uint64_t v18 = sub_2495B6630();
      uint64_t v19 = *(void *)(v18 - 8);
      MEMORY[0x270FA5388](v18);
      unint64_t v21 = (char *)v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_2495B6830();
      unint64_t v22 = sub_2495B6610();
      unint64_t v24 = v23;
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v22, v24, &v39);
      uint64_t v7 = v13;
      (*v30)(v12, v13);
      std::string::basic_string[abi:ne180100](&v37, (__n128 *)&v36);
      std::string::~string(&v36);
      std::string::basic_string[abi:ne180100](v29, (__n128 *)&v39);
      std::string::~string(&v39);
      ctb::chatbot::AddressEntry::AddressEntry(v25, (long long *)&v37);
      ctb::chatbot::AddressEntry::~AddressEntry((void **)&v37);
      std::vector<ctb::CPIMNamespace>::push_back[abi:ne180100](v34, (long long *)&v39);
      ctb::chatbot::AddressEntry::~AddressEntry((void **)&v39.__r_.__value_.__l.__data_);
      v10 += v28;
      if (!--v5) {
        return swift_bridgeObjectRelease();
      }
    }
    memset(&v39, 0, sizeof(v39));
    char v40 = 1;
LABEL_7:
    memset(&v36, 0, sizeof(v36));
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v36);
    sub_2495786B0((uint64_t)&v39, &qword_2696BFD98);
    goto LABEL_8;
  }

  return swift_bridgeObjectRelease();
}

uint64_t std::vector<ctb::CPIMNamespace>::~vector[abi:ne180100](uint64_t a1, void (*a2)(uint64_t *))
{
  uint64_t v4 = a1;
  a2(&v4);
  return a1;
}

unint64_t sub_24959D554()
{
  unint64_t result = qword_2696BFF08;
  if (!qword_2696BFF08)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2696BFF00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696BFF08);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t std::variant<ctb::GeoPushLocation,ctb::CPMGroupManagement,ctb::FileTransferDescriptor,ctb::chatbot::Message,ctb::IMCompositionIndication,ctb::IMDispositionNotification,std::string>::variant[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t std::variant<ctb::GeoPushLocation,ctb::CPMGroupManagement,ctb::FileTransferDescriptor,ctb::chatbot::Message,ctb::IMCompositionIndication,ctb::IMDispositionNotification,std::string>::~variant[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t ctb::CPIMEncapsulatedMessage::CPIMEncapsulatedMessage(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::GeoPushLocation,ctb::CPMGroupManagement,ctb::FileTransferDescriptor,ctb::chatbot::Message,ctb::IMCompositionIndication,ctb::IMDispositionNotification,std::string>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 32, (uint64_t)(a2 + 2));
  return a1;
}

void ctb::CPIMEncapsulatedMessage::~CPIMEncapsulatedMessage(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t std::vector<ctb::CPIMEncapsulatedMessage>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = std::vector<ctb::CPIMEncapsulatedMessage>::__push_back_slow_path<ctb::CPIMEncapsulatedMessage const&>(a1, a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::CPIMEncapsulatedMessage,ctb::CPIMEncapsulatedMessage const&,ctb::CPIMEncapsulatedMessage*>((std::string *)a1[1], a2);
    uint64_t result = v3 + 384;
    a1[1] = v3 + 384;
  }
  a1[1] = result;
  return result;
}

void sub_24959D71C(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

unint64_t sub_24959D724()
{
  unint64_t result = qword_2696BFF18;
  if (!qword_2696BFF18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696BFF18);
  }
  return result;
}

__n128 ctb::bridging::makeEncapsulatedMessageContentVariant@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 32) = *(void *)(a1 + 24);
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = result;
  *(void *)(a2 + 56) = *(void *)(a1 + 48);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(_DWORD *)(a2 + 352) = 5;
  return result;
}

{
  __n128 result;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 32) = *(void *)(a1 + 24);
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  __n128 result = *(__n128 *)(a1 + 32);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  unint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(__n128 *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = result;
  *(void *)(a2 + 56) = v3;
  *(void *)(a2 + 64) = v4;
  *(_DWORD *)(a2 + 352) = 4;
  return result;
}

__n128 ctb::bridging::makeEncapsulatedMessageContentVariant@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *a1;
  *(__n128 *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *a1;
  *(void *)(a2 + 24) = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  *(_DWORD *)(a2 + 352) = 6;
  return result;
}

{
  __n128 result;
  unint64_t v3;
  unint64_t v4;

  __n128 result = *a1;
  *(__n128 *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *a1;
  unint64_t v3 = a1[1].n128_u64[0];
  uint64_t v4 = a1[1].n128_u64[1];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = v4;
  *(_DWORD *)(a2 + 352) = 1;
  return result;
}

uint64_t ctb::bridging::makeEncapsulatedMessageContentVariant@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = std::construct_at[abi:ne180100]<ctb::FileTransferDescriptor,ctb::FileTransferDescriptor,ctb::FileTransferDescriptor*>(a2 + 8, a1);
  *(_DWORD *)(a2 + 352) = 2;
  return result;
}

uint64_t ctb::bridging::makeEncapsulatedMessageContentVariant@<X0>(ctb::bridging *this@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  uint64_t result = a2 + 8;
  *(unsigned char *)(a2 + 344) = 0;
  if (*((unsigned char *)this + 336))
  {
    uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::__move_constructor(result, (uint64_t)this);
    *(unsigned char *)(a2 + 344) = 1;
  }
  *(_DWORD *)(a2 + 352) = 3;
  return result;
}

void ctb::bridging::makeEncapsulatedMessageContentVariant(GeoPushLocation a1@<0:D0, 8:D1>, uint64_t a2@<X8>)
{
  *(GeoPushLocation *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = a1;
  *(_DWORD *)(a2 + 352) = 0;
}

uint64_t std::vector<ctb::CPIMNamespace>::reserve(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v18 = result;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::CPIMNamespace>>(result, a2);
    unint64_t v9 = *a1;
    unint64_t v8 = (unint64_t)a1[1];
    if ((char *)v8 == *a1)
    {
      int64x2_t v13 = vdupq_n_s64(v8);
      uint64_t v10 = &v6[v5];
    }
    else
    {
      uint64_t v10 = &v6[v5];
      do
      {
        long long v11 = *(_OWORD *)(v8 - 48);
        *((void *)v10 - 4) = *(void *)(v8 - 32);
        *((_OWORD *)v10 - 3) = v11;
        *(void *)(v8 - 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
        *(void *)(v8 - 32) = 0;
        *(void *)(v8 - 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
        long long v12 = *(_OWORD *)(v8 - 24);
        *((void *)v10 - 1) = *(void *)(v8 - 8);
        *(_OWORD *)(v10 - 24) = v12;
        v10 -= 48;
        *(void *)(v8 - 16) = 0;
        *(void *)(v8 - std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
        *(void *)(v8 - 24) = 0;
        v8 -= 48;
      }
      while ((char *)v8 != v9);
      int64x2_t v13 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    int64x2_t v16 = v13;
    uint64_t v14 = a1[2];
    a1[2] = &v6[48 * v7];
    unint64_t v17 = v14;
    uint64_t v15 = v13.i64[0];
    return std::__split_buffer<ctb::chatbot::AddressEntry>::~__split_buffer((uint64_t)&v15);
  }
  return result;
}

uint64_t std::vector<ctb::CPIMNamespace>::push_back[abi:ne180100](int64x2_t *a1, long long *a2)
{
  unint64_t v3 = a1->u64[1];
  if (v3 >= a1[1].i64[0])
  {
    uint64_t result = std::vector<ctb::CPIMNamespace>::__push_back_slow_path<ctb::CPIMNamespace const&>(a1, a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<ctb::CPIMNamespace,ctb::CPIMNamespace const&,ctb::CPIMNamespace*>((std::string *)a1->i64[1], a2);
    uint64_t result = v3 + 48;
    a1->i64[1] = v3 + 48;
  }
  a1->i64[1] = result;
  return result;
}

void sub_24959DA20(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::GeoPushLocation,ctb::CPMGroupManagement,ctb::FileTransferDescriptor,ctb::chatbot::Message,ctb::IMCompositionIndication,ctb::IMDispositionNotification,std::string>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 344) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::GeoPushLocation,ctb::CPMGroupManagement,ctb::FileTransferDescriptor,ctb::chatbot::Message,ctb::IMCompositionIndication,ctb::IMDispositionNotification,std::string>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::GeoPushLocation,ctb::CPMGroupManagement,ctb::FileTransferDescriptor,ctb::chatbot::Message,ctb::IMCompositionIndication,ctb::IMDispositionNotification,std::string>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<ctb::GeoPushLocation,ctb::CPMGroupManagement,ctb::FileTransferDescriptor,ctb::chatbot::Message,ctb::IMCompositionIndication,ctb::IMDispositionNotification,std::string>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::GeoPushLocation,ctb::CPMGroupManagement,ctb::FileTransferDescriptor,ctb::chatbot::Message,ctb::IMCompositionIndication,ctb::IMDispositionNotification,std::string>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 344);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*(&off_26FD358B8 + v4))(&v7, result);
  }
  *(_DWORD *)(v3 + 344) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 344);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_26FD358F0 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 344) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SD_SE_SF_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  a2[1].n128_u64[1] = a3[1].n128_u64[1];
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SD_SE_SF_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SD_SE_SF_SL_EEEOS11_EEEDcST_DpT0_Tm(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))std::construct_at[abi:ne180100]<ctb::FileTransferDescriptor,ctb::FileTransferDescriptor,ctb::FileTransferDescriptor*>);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SD_SE_SF_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  *a2 = 0;
  a2[336] = 0;
  if (*(unsigned char *)(a3 + 336)) {
    *(unsigned char *)(std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::chatbot::CardMessage,ctb::chatbot::CardCarouselMessage,ctb::chatbot::SuggestedChipList>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a2, a3)+ 336) = 1;
  }
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SD_SE_SF_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  long long v3 = *(_OWORD *)(a3 + 8);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(_OWORD *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v3;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  __n128 result = *(__n128 *)(a3 + 32);
  *(void *)(a2 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(void *)(a3 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(void *)(a3 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a3 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a2 + 56) = *(void *)(a3 + 56);
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SD_SE_SF_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  long long v3 = *(_OWORD *)(a3 + 8);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(_OWORD *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v3;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  __n128 result = *(__n128 *)(a3 + 32);
  *(void *)(a2 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(void *)(a3 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(void *)(a3 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a3 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a3 + 32) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SD_SE_SF_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

uint64_t std::vector<ctb::CPIMEncapsulatedMessage>::__push_back_slow_path<ctb::CPIMEncapsulatedMessage const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 7);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAALL) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 7);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x55555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::CPIMEncapsulatedMessage>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int64x2_t v13 = v10;
  uint64_t v14 = (std::string *)&v10[384 * v4];
  int64x2_t v16 = &v10[384 * v9];
  std::construct_at[abi:ne180100]<ctb::CPIMEncapsulatedMessage,ctb::CPIMEncapsulatedMessage const&,ctb::CPIMEncapsulatedMessage*>(v14, a2);
  uint64_t v15 = v14 + 16;
  std::vector<ctb::CPIMEncapsulatedMessage>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<ctb::CPIMEncapsulatedMessage>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_24959DCF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ctb::CPIMEncapsulatedMessage>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<ctb::CPIMEncapsulatedMessage,ctb::CPIMEncapsulatedMessage const&,ctb::CPIMEncapsulatedMessage*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<ctb::GeoPushLocation,ctb::CPMGroupManagement,ctb::FileTransferDescriptor,ctb::chatbot::Message,ctb::IMCompositionIndication,ctb::IMDispositionNotification,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&this[1].__r_.__value_.__l.__size_, (uint64_t)(a2 + 2));
  return this;
}

void sub_24959DD68(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SD_SE_SF_SL_EEEOS11_EEEDcST_DpT0_Tm(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3ctb15GeoPushLocationENS8_18CPMGroupManagementENS8_22FileTransferDescriptorENS8_7chatbot7MessageENS8_23IMCompositionIndicationENS8_25IMDispositionNotificationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SD_SE_SF_SL_EEEOS11_EEEDcST_DpT0_Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  return a4(a2, a3);
}

uint64_t *std::vector<ctb::CPIMEncapsulatedMessage>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  unint64_t v5 = (void *)*result;
  long long v4 = (void *)result[1];
  uint64_t v6 = a2[1];
  if (v4 == (void *)*result)
  {
    uint64_t v7 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v7 = v6 - 384;
      unint64_t v8 = v4 - 48;
      long long v9 = *((_OWORD *)v4 - 24);
      *(void *)(v7 + 16) = *(v4 - 46);
      *(_OWORD *)uint64_t v7 = v9;
      v8[1] = 0;
      __n128 v8[2] = 0;
      *unint64_t v8 = 0;
      __n128 result = (uint64_t *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<ctb::GeoPushLocation,ctb::CPMGroupManagement,ctb::FileTransferDescriptor,ctb::chatbot::Message,ctb::IMCompositionIndication,ctb::IMDispositionNotification,std::string>,(std::__variant_detail::_Trait)1>::__move_constructor(v6 - 352, (uint64_t)(v4 - 44));
      long long v4 = v8;
      uint64_t v6 = v7;
    }
    while (v8 != v5);
  }
  a2[1] = v7;
  uint64_t v10 = *v3;
  *uint64_t v3 = v7;
  a2[1] = v10;
  uint64_t v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = v3[2];
  v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<ctb::CPIMEncapsulatedMessage>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 384;
    std::__destroy_at[abi:ne180100]<ctb::CPIMEncapsulatedMessage,0>(i - 384);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<ctb::CPIMNamespace>::__push_back_slow_path<ctb::CPIMNamespace const&>(int64x2_t *a1, long long *a2)
{
  uint64_t v3 = a1->i64[0];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<ctb::CPIMNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t i64 = (uint64_t)a1[1].i64;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v24 = a1 + 1;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctb::CPIMNamespace>>(i64, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v21 = v10;
  v22.i64[0] = (uint64_t)&v10[48 * v4];
  v22.i64[1] = v22.i64[0];
  unint64_t v23 = &v10[48 * v9];
  std::construct_at[abi:ne180100]<ctb::CPIMNamespace,ctb::CPIMNamespace const&,ctb::CPIMNamespace*>((std::string *)v22.i64[0], a2);
  uint64_t v12 = a1->i64[0];
  unint64_t v11 = a1->u64[1];
  uint64_t v13 = v22.i64[0];
  uint64_t v14 = v22.i64[0];
  if (v11 == a1->i64[0])
  {
    int64x2_t v17 = vdupq_n_s64(v11);
  }
  else
  {
    do
    {
      long long v15 = *(_OWORD *)(v11 - 48);
      *(void *)(v14 - 32) = *(void *)(v11 - 32);
      *(_OWORD *)(v14 - 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v15;
      *(void *)(v11 - 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
      *(void *)(v11 - 32) = 0;
      *(void *)(v11 - 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
      long long v16 = *(_OWORD *)(v11 - 24);
      *(void *)(v14 - std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(void *)(v11 - 8);
      *(_OWORD *)(v14 - 24) = v16;
      v14 -= 48;
      *(void *)(v11 - 16) = 0;
      *(void *)(v11 - std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
      *(void *)(v11 - 24) = 0;
      v11 -= 48;
    }
    while (v11 != v12);
    int64x2_t v17 = *a1;
  }
  uint64_t v18 = v13 + 48;
  a1->i64[0] = v14;
  a1->i64[1] = v13 + 48;
  int64x2_t v22 = v17;
  uint64_t v19 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v23;
  unint64_t v23 = v19;
  unint64_t v21 = (char *)v17.i64[0];
  std::__split_buffer<ctb::chatbot::AddressEntry>::~__split_buffer((uint64_t)&v21);
  return v18;
}

void sub_24959E008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ctb::chatbot::AddressEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<ctb::CPIMNamespace,ctb::CPIMNamespace const&,ctb::CPIMNamespace*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  unint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_24959E098(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_24959E0B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_2495B7180();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = a1;
  sub_2495B7190();
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (MEMORY[0x263F2AFA0] && v8 == *MEMORY[0x263F2AFA0])
  {
    int v9 = 1;
  }
  else if (MEMORY[0x263F2AFB0] && v8 == *MEMORY[0x263F2AFB0])
  {
    int v9 = 2;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    int v9 = 0;
  }
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFDA0);
  uint64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_2495B7160();
  MEMORY[0x270FA5388](v13);
  sub_24959E608((uint64_t)v12, (uint64_t)v12);
  uint64_t v14 = sub_2495B6700();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14);
  if (v16 == 1)
  {
    memset(&v41, 0, sizeof(v41));
    char v42 = 1;
  }
  else
  {
    v37[1] = v37;
    MEMORY[0x270FA5388](v16);
    uint64_t v18 = (char *)v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v12, v14);
    uint64_t v19 = sub_2495B66E0();
    v37[0] = v37;
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v38 = a2;
    uint64_t v21 = v20;
    MEMORY[0x270FA5388](v19);
    unint64_t v23 = (char *)v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_24958D6C0();
    __n128 v37[2] = v37;
    int v24 = v9;
    uint64_t v25 = sub_2495B6680();
    void v37[3] = v37;
    unint64_t v27 = v26;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v19);
    unint64_t v28 = v25;
    int v9 = v24;
    a2 = v38;
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v28, v27, &v41);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    char v42 = 0;
  }
  sub_2495786B0((uint64_t)v12, &qword_2696BFDA0);
  if (v42)
  {
    memset(&v43, 0, sizeof(v43));
    std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v43);
    sub_2495786B0((uint64_t)&v41, &qword_2696BFD98);
  }
  else
  {
    std::string::basic_string[abi:ne180100]((__n128 *)&v43, (__n128 *)&v41);
    std::string::~string(&v41);
  }
  uint64_t v29 = sub_2495B7150();
  if (v30)
  {
    unint64_t v31 = v29;
    unint64_t v32 = v30;
    swift_bridgeObjectRetain();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v31, v32, &v41);
    char v42 = 0;
    swift_bridgeObjectRelease();
    if ((v42 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]((__n128 *)&v40, (__n128 *)&v41);
      std::string::~string(&v41);
      goto LABEL_19;
    }
  }
  else
  {
    memset(&v41, 0, sizeof(v41));
    char v42 = 1;
  }
  memset(&v40, 0, sizeof(v40));
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v40);
  sub_2495786B0((uint64_t)&v41, &qword_2696BFD98);
LABEL_19:
  uint64_t v33 = sub_2495B7170();
  if (v34)
  {
LABEL_22:
    uint64_t v35 = 0;
    goto LABEL_23;
  }
  uint64_t v35 = v33;
  if (v33 < 0)
  {
    sub_2495B88C0();
    __break(1u);
    goto LABEL_22;
  }
LABEL_23:
  uint64_t v36 = sub_2495B71A0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8))(v39, v36);
  *(_DWORD *)a2 = v9;
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 8), (__n128 *)&v43);
  std::string::~string(&v43);
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 32), (__n128 *)&v40);
  std::string::~string(&v40);
  *(void *)(a2 + 56) = v35;
}

uint64_t sub_24959E608(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFDA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_24959E670(uint64_t a1@<X0>, __n128 *x8_0@<X8>)
{
  unint64_t v4 = sub_2495B6CD0();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v4, v5, &v29);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFF20);
  uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  int v9 = (char *)v27 - v8;
  uint64_t v10 = sub_2495B6D00();
  MEMORY[0x270FA5388](v10);
  uint64_t v11 = (char *)v27 - v8;
  sub_24959E9F4((uint64_t)v27 - v8, (uint64_t)v27 - v8);
  uint64_t v12 = sub_2495B6CF0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))((char *)v27 - v8, 1, v12);
  if (v14 == 1)
  {
    sub_24959EA5C((uint64_t)v27 - v8);
    type metadata accessor for std.__1.optional_Response_(0);
    uint64_t v16 = v15;
    unint64_t v17 = sub_24959EABC();
    CxxOptional.init(nilLiteral:)(v16, v17);
    uint64_t v18 = sub_2495B6D10();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a1, v18);
    uint64_t Optional = v28;
LABEL_6:
    std::string::basic_string[abi:ne180100](x8_0, (__n128 *)&v29);
    std::string::~string(&v29);
    x8_0[1].n128_u64[1] = Optional;
    return;
  }
  v27[1] = v27;
  uint64_t v20 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v14);
  uint64_t v21 = (char *)v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v21, v11, v12);
  MEMORY[0x270FA5388](v22);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v21, v21, v12);
  unint64_t v23 = sub_2495B6CE0();
  if ((v23 & 0x8000000000000000) == 0)
  {
    int v24 = (ctb::bridging *)v23;
    if (!HIDWORD(v23))
    {
      uint64_t v25 = *(void (**)(char *, uint64_t))(v13 + 8);
      v25(v21, v12);
      uint64_t Optional = ctb::bridging::makeOptional(v24, v30);
      v25(v21, v12);
      sub_24959EA5C((uint64_t)v9);
      uint64_t v26 = sub_2495B6D10();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(a1, v26);
      uint64_t v28 = Optional;
      goto LABEL_6;
    }
  }
  sub_2495B88C0();
  __break(1u);
}

uint64_t sub_24959E9F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFF20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24959EA5C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFF20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_24959EABC()
{
  unint64_t result = qword_2696BF818;
  if (!qword_2696BF818)
  {
    type metadata accessor for std.__1.optional_Response_(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696BF818);
  }
  return result;
}

uint64_t ctb::bridging::makeOptional(ctb::bridging *this, Response a2)
{
  return this | 0x100000000;
}

void sub_24959EB24(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = sub_2495B85C0();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v4, v5, &v33);
  unint64_t v6 = sub_2495B8580();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v6, v7, &v32);
  unint64_t v8 = sub_2495B8590();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v8, v9, &v31);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFF28);
  uint64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_2495B85B0();
  MEMORY[0x270FA5388](v13);
  sub_24959EE84((uint64_t)v12, (uint64_t)v12);
  uint64_t v14 = sub_2495B85A0();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14);
  if (v16 == 1)
  {
    int v17 = -1;
  }
  else
  {
    uint64_t v27 = a1;
    std::string v29 = v26;
    uint64_t v30 = a2;
    uint64_t v18 = *(void *)(v15 + 64);
    MEMORY[0x270FA5388](v16);
    unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v20 = *(uint64_t (**)(char *, char *, uint64_t))(v15 + 32);
    uint64_t v21 = v20((char *)v26 - v19, v12, v14);
    void v26[2] = v26;
    MEMORY[0x270FA5388](v21);
    uint64_t v22 = *(uint64_t (**)(char *, char *, uint64_t))(v15 + 16);
    uint64_t v28 = (char *)v26 - v19;
    uint64_t v23 = v22((char *)v26 - v19, (char *)v26 - v19, v14);
    v26[1] = v26;
    MEMORY[0x270FA5388](v23);
    v20((char *)v26 - v19, (char *)v26 - v19, v14);
    int v24 = (*(uint64_t (**)(char *, uint64_t))(v15 + 88))((char *)v26 - v19, v14);
    if (MEMORY[0x263F2B890] && v24 == *MEMORY[0x263F2B890])
    {
      int v17 = 0;
    }
    else if (MEMORY[0x263F2B888] && v24 == *MEMORY[0x263F2B888])
    {
      int v17 = 1;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))((char *)v26 - v19, v14);
      int v17 = -1;
    }
    a2 = v30;
    a1 = v27;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v28, v14);
  }
  uint64_t v25 = sub_2495B85D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(a1, v25);
  sub_24959EEEC((uint64_t)v12);
  std::string::basic_string[abi:ne180100]((__n128 *)a2, (__n128 *)&v33);
  std::string::~string(&v33);
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 24), (__n128 *)&v32);
  std::string::~string(&v32);
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 48), (__n128 *)&v31);
  std::string::~string(&v31);
  *(_DWORD *)(a2 + 72) = v17;
}

uint64_t sub_24959EE84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFF28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24959EEEC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFF28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24959EF4C(uint64_t a1)
{
  uint64_t v2 = sub_2495B72B0();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v6 = (char *)&v51 - v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFF30);
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B7350();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    uint64_t v10 = sub_2495B7380();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
    sub_24959FB2C((uint64_t)v9);
    return 0;
  }
  uint64_t v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 32))((char *)&v51 - v5, v9, v2);
  MEMORY[0x270FA5388](v12);
  uint64_t v13 = (char *)&v51 - v5;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))((char *)&v51 - v5, (char *)&v51 - v5, v2);
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))((char *)&v51 - v5, v2);
  if (MEMORY[0x263F2B090] && v14 == *MEMORY[0x263F2B090])
  {
    uint64_t v54 = &v51;
    (*(void (**)(char *, uint64_t))(v3 + 96))((char *)&v51 - v5, v2);
    uint64_t v15 = sub_2495B7340();
    uint64_t v52 = &v51;
    uint64_t v16 = *(void *)(v15 - 8);
    MEMORY[0x270FA5388](v15);
    uint64_t v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v13, v15);
    uint64_t v19 = sub_2495B7320();
    uint64_t v51 = (uint64_t)&v51;
    uint64_t v53 = *(void *)(v19 - 8);
    MEMORY[0x270FA5388](v19);
    uint64_t v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7290();
    uint64_t v22 = sub_2495B7380();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(a1, v22);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    uint64_t v23 = v2;
    uint64_t v24 = v53;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v23);
    int v25 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v21, v19);
    if (MEMORY[0x263F2B138] && v25 == *MEMORY[0x263F2B138]) {
      return 1;
    }
    if (MEMORY[0x263F2B128] && v25 == *MEMORY[0x263F2B128] || MEMORY[0x263F2B148] && v25 == *MEMORY[0x263F2B148]) {
      return 4;
    }
    uint64_t v50 = (_DWORD *)MEMORY[0x263F2B118];
    if (!MEMORY[0x263F2B118]) {
      goto LABEL_49;
    }
    goto LABEL_42;
  }
  if (MEMORY[0x263F2B080] && v14 == *MEMORY[0x263F2B080])
  {
    uint64_t v54 = &v51;
    (*(void (**)(char *, uint64_t))(v3 + 96))((char *)&v51 - v5, v2);
    uint64_t v26 = sub_2495B7310();
    uint64_t v52 = &v51;
    uint64_t v27 = *(void *)(v26 - 8);
    MEMORY[0x270FA5388](v26);
    std::string v29 = (char *)&v51 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v29, v13, v26);
    uint64_t v19 = sub_2495B72F0();
    uint64_t v51 = (uint64_t)&v51;
    uint64_t v53 = *(void *)(v19 - 8);
    MEMORY[0x270FA5388](v19);
    uint64_t v21 = (char *)&v51 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7290();
    uint64_t v31 = sub_2495B7380();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(a1, v31);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
    uint64_t v32 = v2;
    uint64_t v24 = v53;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v32);
    int v25 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v21, v19);
    if (MEMORY[0x263F2B0F0] && v25 == *MEMORY[0x263F2B0F0]) {
      return 3;
    }
    if (MEMORY[0x263F2B108] && v25 == *MEMORY[0x263F2B108]) {
      return 4;
    }
    uint64_t v50 = (_DWORD *)MEMORY[0x263F2B0E0];
    if (!MEMORY[0x263F2B0E0]) {
      goto LABEL_49;
    }
LABEL_42:
    if (v25 == *v50) {
      return 4;
    }
    goto LABEL_49;
  }
  if (MEMORY[0x263F2B068] && v14 == *MEMORY[0x263F2B068])
  {
    uint64_t v54 = &v51;
    (*(void (**)(char *, uint64_t))(v3 + 96))((char *)&v51 - v5, v2);
    uint64_t v33 = sub_2495B72A0();
    uint64_t v52 = &v51;
    uint64_t v34 = *(void *)(v33 - 8);
    MEMORY[0x270FA5388](v33);
    uint64_t v36 = (char *)&v51 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v36, v13, v33);
    uint64_t v19 = sub_2495B7280();
    uint64_t v51 = (uint64_t)&v51;
    uint64_t v53 = *(void *)(v19 - 8);
    MEMORY[0x270FA5388](v19);
    uint64_t v21 = (char *)&v51 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7290();
    uint64_t v38 = sub_2495B7380();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(a1, v38);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
    uint64_t v39 = v2;
    uint64_t v24 = v53;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v39);
    int v25 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v21, v19);
    if (MEMORY[0x263F2B050] && v25 == *MEMORY[0x263F2B050]) {
      return 6;
    }
    if (MEMORY[0x263F2B030] && v25 == *MEMORY[0x263F2B030]) {
      return 7;
    }
    if (MEMORY[0x263F2B040] && v25 == *MEMORY[0x263F2B040]) {
      return 4;
    }
    uint64_t v50 = (_DWORD *)MEMORY[0x263F2B020];
    if (MEMORY[0x263F2B020]) {
      goto LABEL_42;
    }
  }
  else
  {
    if (!MEMORY[0x263F2B078] || v14 != *MEMORY[0x263F2B078])
    {
      uint64_t v48 = sub_2495B7380();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(a1, v48);
      uint64_t v49 = *(void (**)(char *, uint64_t))(v3 + 8);
      v49((char *)&v51 - v5, v2);
      v49((char *)&v51 - v5, v2);
      return 0;
    }
    uint64_t v54 = &v51;
    (*(void (**)(char *, uint64_t))(v3 + 96))((char *)&v51 - v5, v2);
    uint64_t v40 = sub_2495B72E0();
    uint64_t v52 = &v51;
    uint64_t v41 = *(void *)(v40 - 8);
    MEMORY[0x270FA5388](v40);
    std::string v43 = (char *)&v51 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v43, v13, v40);
    uint64_t v19 = sub_2495B72C0();
    uint64_t v51 = (uint64_t)&v51;
    uint64_t v53 = *(void *)(v19 - 8);
    MEMORY[0x270FA5388](v19);
    uint64_t v21 = (char *)&v51 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7290();
    uint64_t v45 = sub_2495B7380();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v45 - 8) + 8))(a1, v45);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v40);
    uint64_t v46 = v2;
    uint64_t v24 = v53;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v46);
    int v47 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v21, v19);
    if (MEMORY[0x263F2B0D8] && v47 == *MEMORY[0x263F2B0D8] || MEMORY[0x263F2B0C0] && v47 == *MEMORY[0x263F2B0C0]) {
      return 2;
    }
    if (MEMORY[0x263F2B0B0] && v47 == *MEMORY[0x263F2B0B0] || MEMORY[0x263F2B0A0] && v47 == *MEMORY[0x263F2B0A0]) {
      return 5;
    }
  }
LABEL_49:
  (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v19);
  return 0;
}

uint64_t sub_24959FB2C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFF30);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_24959FB8C(uint64_t a1)
{
  uint64_t v3 = sub_2495B8530();
  uint64_t v36 = *(void *)(v3 - 8);
  uint64_t v37 = v3;
  MEMORY[0x270FA5388](v3);
  unint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2495B6AE0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = a1;
  sub_2495B69E0();
  uint64_t v10 = sub_2495B8570();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6AD0();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v14 = sub_2495B8550();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B8560();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v18 = sub_2495B84C0();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B8540();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  int v22 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v21, v18);
  if (MEMORY[0x263F2B880] && v22 == *MEMORY[0x263F2B880])
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    uint64_t v23 = sub_2495B8500();
    uint64_t v24 = *(void *)(v23 - 8);
    MEMORY[0x270FA5388](v23);
    uint64_t v26 = (char *)&v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 32))(v26, v21, v23);
    MEMORY[0x24C5A3120](v27);
  }
  else
  {
    if (!MEMORY[0x263F2B868] || v22 != *MEMORY[0x263F2B868])
    {
      sub_24959D724();
      swift_allocError();
      *uint64_t v32 = 0xD000000000000016;
      v32[1] = 0x80000002495BCC90;
      swift_willThrow();
      uint64_t v33 = sub_2495B69F0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(v38, v33);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
      return v1;
    }
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    uint64_t v23 = sub_2495B84E0();
    uint64_t v24 = *(void *)(v23 - 8);
    MEMORY[0x270FA5388](v23);
    uint64_t v26 = (char *)&v35 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 32))(v26, v21, v23);
    MEMORY[0x24C5A3100](v29);
  }
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  sub_2495B8510();
  double v1 = v30;
  sub_2495B8520();
  uint64_t v31 = sub_2495B69F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v38, v31);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v5, v37);
  return v1;
}

uint64_t FileTransferInfo.fileInfo.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2495A0A68(v1, a1, (uint64_t (*)(void))type metadata accessor for FileInfo);
}

uint64_t FileTransferInfo.thumbnailInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for FileTransferInfo() + 20);

  return sub_2495A0260(v3, a1);
}

uint64_t type metadata accessor for FileTransferInfo()
{
  uint64_t result = qword_2696BFF60;
  if (!qword_2696BFF60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_2495A0260(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFBA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2495A02C8(char a1)
{
  if (a1) {
    return 0x69616E626D756874;
  }
  else {
    return 0x6F666E49656C6966;
  }
}

BOOL sub_2495A030C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_2495A0324()
{
  return sub_2495B8A30();
}

uint64_t sub_2495A036C()
{
  return sub_2495B8A20();
}

uint64_t sub_2495A0398()
{
  return sub_2495B8A30();
}

uint64_t sub_2495A03DC()
{
  return sub_2495A02C8(*v0);
}

uint64_t sub_2495A03E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2495A2104(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2495A040C()
{
  return 0;
}

void sub_2495A0418(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_2495A0424(uint64_t a1)
{
  unint64_t v2 = sub_2495A068C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2495A0460(uint64_t a1)
{
  unint64_t v2 = sub_2495A068C();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t FileTransferInfo.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFF38);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2495A068C();
  sub_2495B8A50();
  v8[15] = 0;
  type metadata accessor for FileInfo();
  sub_2495A0A24(&qword_2696BFF48);
  sub_2495B8990();
  if (!v1)
  {
    type metadata accessor for FileTransferInfo();
    v8[14] = 1;
    sub_2495B8960();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_2495A068C()
{
  unint64_t result = qword_2696BFF40;
  if (!qword_2696BFF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696BFF40);
  }
  return result;
}

uint64_t FileTransferInfo.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFBA0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for FileInfo();
  MEMORY[0x270FA5388](v24);
  uint64_t v23 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFF50);
  uint64_t v21 = *(void *)(v8 - 8);
  uint64_t v22 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for FileTransferInfo();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2495A068C();
  sub_2495B8A40();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  uint64_t v19 = v11;
  uint64_t v14 = v21;
  char v26 = 0;
  sub_2495A0A24(&qword_2696BFF58);
  uint64_t v15 = v22;
  sub_2495B8940();
  uint64_t v16 = (uint64_t)v23;
  uint64_t v23 = v13;
  sub_249576D6C(v16, (uint64_t)v13);
  char v25 = 1;
  sub_2495B8910();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v15);
  uint64_t v17 = (uint64_t)v23;
  sub_249576DD0((uint64_t)v6, (uint64_t)&v23[*(int *)(v19 + 20)]);
  sub_2495A0A68(v17, v20, (uint64_t (*)(void))type metadata accessor for FileTransferInfo);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return sub_2495A0AD0(v17, (uint64_t (*)(void))type metadata accessor for FileTransferInfo);
}

uint64_t sub_2495A0A24(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for FileInfo();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2495A0A68(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2495A0AD0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2495A0B30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FileTransferInfo.init(from:)(a1, a2);
}

uint64_t sub_2495A0B48(void *a1)
{
  return FileTransferInfo.encode(to:)(a1);
}

void *initializeBufferWithCopyOfBuffer for FileTransferInfo(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(unsigned char *)(a1 + 1) = *((unsigned char *)a2 + 1);
    *(_OWORD *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(_OWORD *)(a2 + 1);
    uint64_t v7 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = a2[5];
    uint64_t v8 = type metadata accessor for FileInfo();
    uint64_t v9 = *(int *)(v8 + 36);
    uint64_t v33 = (char *)v4 + v9;
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = sub_2495B6630();
    uint64_t v12 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v13 = v33;
    uint64_t v32 = v11;
    uint64_t v14 = v11;
    uint64_t v15 = v8;
    uint64_t v34 = v12;
    v12(v13, v10, v14);
    uint64_t v16 = *(int *)(v8 + 40);
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (uint64_t)a2 + v16;
    uint64_t v19 = sub_2495B6700();
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16);
    v20(v17, v18, v19);
    uint64_t v21 = *(int *)(a3 + 20);
    uint64_t v22 = (char *)v4 + v21;
    uint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v24 + 48))(v23, 1, v15))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFBA0);
      memcpy(v22, v23, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      *uint64_t v22 = *v23;
      v22[1] = v23[1];
      *(_OWORD *)(v22 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(_OWORD *)(v23 + 8);
      uint64_t v27 = *((void *)v23 + 4);
      *((void *)v22 + 3) = *((void *)v23 + 3);
      *((void *)v22 + 4) = v27;
      *((void *)v22 + 5) = *((void *)v23 + 5);
      uint64_t v28 = *(int *)(v15 + 36);
      uint64_t v29 = &v22[v28];
      uint64_t v31 = &v23[v28];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v34(v29, v31, v32);
      v20(&v22[*(int *)(v15 + 40)], (uint64_t)&v23[*(int *)(v15 + 40)], v19);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v24 + 56))(v22, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t destroy for FileTransferInfo(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for FileInfo();
  uint64_t v5 = a1 + *(int *)(v4 + 36);
  uint64_t v6 = sub_2495B6630();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  uint64_t v8 = a1 + *(int *)(v4 + 40);
  uint64_t v9 = sub_2495B6700();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v13(v8, v9);
  uint64_t v10 = a1 + *(int *)(a2 + 20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v10, 1, v4);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7(v10 + *(int *)(v4 + 36), v6);
    uint64_t v12 = v10 + *(int *)(v4 + 40);
    return ((uint64_t (*)(uint64_t, uint64_t))v13)(v12, v9);
  }
  return result;
}

uint64_t initializeWithCopy for FileTransferInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_OWORD *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(void *)(a2 + 40);
  uint64_t v6 = type metadata accessor for FileInfo();
  uint64_t v7 = *(int *)(v6 + 36);
  uint64_t v8 = (unsigned char *)(a1 + v7);
  uint64_t v9 = (unsigned char *)(a2 + v7);
  uint64_t v10 = sub_2495B6630();
  uint64_t v11 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v26 = v11;
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(v6 + 40);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_2495B6700();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = (unsigned char *)(a1 + v17);
  uint64_t v19 = (unsigned char *)(a2 + v17);
  uint64_t v20 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, v6))
  {
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFBA0);
    memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    *uint64_t v18 = *v19;
    v18[1] = v19[1];
    *(_OWORD *)(v18 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(_OWORD *)(v19 + 8);
    uint64_t v22 = *((void *)v19 + 4);
    *((void *)v18 + 3) = *((void *)v19 + 3);
    *((void *)v18 + 4) = v22;
    *((void *)v18 + 5) = *((void *)v19 + 5);
    uint64_t v23 = *(int *)(v6 + 36);
    uint64_t v28 = &v18[v23];
    uint64_t v25 = &v19[v23];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26(v28, v25, v10);
    v16((uint64_t)&v18[*(int *)(v6 + 40)], (uint64_t)&v19[*(int *)(v6 + 40)], v15);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v6);
  }
  return a1;
}

uint64_t assignWithCopy for FileTransferInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = type metadata accessor for FileInfo();
  uint64_t v7 = *(int *)(v6 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v31 = sub_2495B6630();
  uint64_t v28 = *(void *)(v31 - 8);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v28 + 24);
  v29(v8, v9);
  uint64_t v10 = *(int *)(v6 + 40);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_2495B6700();
  uint64_t v27 = *(void *)(v13 - 8);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v27 + 24);
  uint64_t v30 = v13;
  v14(v11, v12);
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v26 = *(void *)(v6 - 8);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  LODWORD(v11) = v18(a1 + v15, 1, v6);
  int v19 = v18(v17, 1, v6);
  if (!v11)
  {
    if (!v19)
    {
      *(unsigned char *)uint64_t v16 = *(unsigned char *)v17;
      *(unsigned char *)(v16 + 1) = *(unsigned char *)(v17 + 1);
      *(void *)(v16 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(void *)(v17 + 8);
      *(void *)(v16 + 16) = *(void *)(v17 + 16);
      *(void *)(v16 + 24) = *(void *)(v17 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v16 + 32) = *(void *)(v17 + 32);
      *(void *)(v16 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(void *)(v17 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t, uint64_t))v29)(v16 + *(int *)(v6 + 36), v17 + *(int *)(v6 + 36), v31);
      ((void (*)(uint64_t, uint64_t, uint64_t))v14)(v16 + *(int *)(v6 + 40), v17 + *(int *)(v6 + 40), v30);
      return a1;
    }
    sub_2495A0AD0(v16, (uint64_t (*)(void))type metadata accessor for FileInfo);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFBA0);
    memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v24 - 8) + 64));
    return a1;
  }
  *(unsigned char *)uint64_t v16 = *(unsigned char *)v17;
  *(unsigned char *)(v16 + 1) = *(unsigned char *)(v17 + 1);
  *(void *)(v16 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(void *)(v17 + 8);
  *(void *)(v16 + 16) = *(void *)(v17 + 16);
  *(void *)(v16 + 24) = *(void *)(v17 + 24);
  *(void *)(v16 + 32) = *(void *)(v17 + 32);
  *(void *)(v16 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(void *)(v17 + 40);
  uint64_t v20 = *(int *)(v6 + 36);
  uint64_t v21 = v16 + v20;
  uint64_t v22 = v17 + v20;
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23(v21, v22, v31);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v16 + *(int *)(v6 + 40), v17 + *(int *)(v6 + 40), v30);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v16, 0, 1, v6);
  return a1;
}

uint64_t initializeWithTake for FileTransferInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(void *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  uint64_t v7 = type metadata accessor for FileInfo();
  uint64_t v8 = *(int *)(v7 + 36);
  uint64_t v9 = (unsigned char *)(a1 + v8);
  uint64_t v10 = (unsigned char *)(a2 + v8);
  uint64_t v11 = sub_2495B6630();
  uint64_t v24 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 32);
  v24(v9, v10, v11);
  uint64_t v12 = *(int *)(v7 + 40);
  uint64_t v13 = (unsigned char *)(a1 + v12);
  uint64_t v14 = (unsigned char *)(a2 + v12);
  uint64_t v15 = sub_2495B6700();
  uint64_t v16 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v15 - 8) + 32);
  v16(v13, v14, v15);
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = (unsigned char *)(a1 + v17);
  int v19 = (unsigned char *)(a2 + v17);
  uint64_t v20 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, v7))
  {
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFBA0);
    memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    *uint64_t v18 = *v19;
    v18[1] = v19[1];
    *((void *)v18 + 1) = *((void *)v19 + 1);
    long long v22 = *((_OWORD *)v19 + 2);
    *((_OWORD *)v18 + 1) = *((_OWORD *)v19 + 1);
    *((_OWORD *)v18 + 2) = v22;
    v24(&v18[*(int *)(v7 + 36)], &v19[*(int *)(v7 + 36)], v11);
    v16(&v18[*(int *)(v7 + 40)], &v19[*(int *)(v7 + 40)], v15);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithTake for FileTransferInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_OWORD *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for FileInfo();
  uint64_t v8 = *(int *)(v7 + 36);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v30 = sub_2495B6630();
  uint64_t v27 = *(void *)(v30 - 8);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v27 + 40);
  v28(v9, v10);
  uint64_t v11 = *(int *)(v7 + 40);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_2495B6700();
  uint64_t v26 = *(void *)(v14 - 8);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v26 + 40);
  uint64_t v29 = v14;
  v15(v12, v13);
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v25 = *(void *)(v7 - 8);
  int v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  LODWORD(v12) = v19(a1 + v16, 1, v7);
  int v20 = v19(v18, 1, v7);
  if (!v12)
  {
    if (!v20)
    {
      *(unsigned char *)uint64_t v17 = *(unsigned char *)v18;
      *(unsigned char *)(v17 + 1) = *(unsigned char *)(v18 + 1);
      *(_OWORD *)(v17 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(_OWORD *)(v18 + 8);
      *(void *)(v17 + 24) = *(void *)(v18 + 24);
      swift_bridgeObjectRelease();
      uint64_t v24 = *(void *)(v18 + 40);
      *(void *)(v17 + 32) = *(void *)(v18 + 32);
      *(void *)(v17 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v24;
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t, uint64_t))v28)(v17 + *(int *)(v7 + 36), v18 + *(int *)(v7 + 36), v30);
      ((void (*)(uint64_t, uint64_t, uint64_t))v15)(v17 + *(int *)(v7 + 40), v18 + *(int *)(v7 + 40), v29);
      return a1;
    }
    sub_2495A0AD0(v17, (uint64_t (*)(void))type metadata accessor for FileInfo);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFBA0);
    memcpy((void *)v17, (const void *)v18, *(void *)(*(void *)(v22 - 8) + 64));
    return a1;
  }
  *(unsigned char *)uint64_t v17 = *(unsigned char *)v18;
  *(unsigned char *)(v17 + 1) = *(unsigned char *)(v18 + 1);
  *(void *)(v17 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(void *)(v18 + 8);
  long long v21 = *(_OWORD *)(v18 + 32);
  *(_OWORD *)(v17 + 16) = *(_OWORD *)(v18 + 16);
  *(_OWORD *)(v17 + 32) = v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v17 + *(int *)(v7 + 36), v18 + *(int *)(v7 + 36), v30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v17 + *(int *)(v7 + 40), v18 + *(int *)(v7 + 40), v29);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v17, 0, 1, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for FileTransferInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2495A1B10);
}

uint64_t sub_2495A1B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FileInfo();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFBA0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for FileTransferInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2495A1C20);
}

uint64_t sub_2495A1C20(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for FileInfo();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFBA0);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void sub_2495A1D28()
{
  type metadata accessor for FileInfo();
  if (v0 <= 0x3F)
  {
    sub_2495A1DF0();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_2495A1DF0()
{
  if (!qword_2696BFF70)
  {
    type metadata accessor for FileInfo();
    unint64_t v0 = sub_2495B87D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_2696BFF70);
    }
  }
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FileTransferInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FileTransferInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2495A1FB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_2495A1FD8(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_2495A1FE0(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for FileTransferInfo.CodingKeys()
{
  return &type metadata for FileTransferInfo.CodingKeys;
}

unint64_t sub_2495A2000()
{
  unint64_t result = qword_2696BFF78;
  if (!qword_2696BFF78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696BFF78);
  }
  return result;
}

unint64_t sub_2495A2058()
{
  unint64_t result = qword_2696BFF80;
  if (!qword_2696BFF80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696BFF80);
  }
  return result;
}

unint64_t sub_2495A20B0()
{
  unint64_t result = qword_2696BFF88;
  if (!qword_2696BFF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696BFF88);
  }
  return result;
}

uint64_t sub_2495A2104(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6F666E49656C6966 && a2 == 0xE800000000000000;
  if (v3 || (sub_2495B89B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69616E626D756874 && a2 == 0xED00006F666E496CLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_2495B89B0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2495A2208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v3 = sub_2495B6AA0();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_2495B6DD0();
  sub_2495A2854((uint64_t)&v21 - v6, (int *)v27);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFBA8);
  uint64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v21 = a1;
  uint64_t v10 = sub_2495B6DE0();
  MEMORY[0x270FA5388](v10);
  sub_24957864C((uint64_t)&v21 - v9, (uint64_t)&v21 - v9, &qword_2696BFBA8);
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))((char *)&v21 - v9, 1, v3);
  if (v11 == 1)
  {
    uint64_t v24 = 0;
    memset(v23, 0, sizeof(v23));
    char v25 = 1;
  }
  else
  {
    MEMORY[0x270FA5388](v11);
    uint64_t v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))((char *)&v21 - v6, (char *)&v21 - v9, v3);
    MEMORY[0x270FA5388](v12);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))((char *)&v21 - v6, (char *)&v21 - v6, v3);
    sub_2495A2854((uint64_t)&v21 - v6, v26);
    __n128 Optional = ctb::bridging::makeOptional((uint64_t)v26, (uint64_t)v23);
    (*(void (**)(char *, uint64_t, __n128))(v4 + 8))((char *)&v21 - v6, v3, Optional);
    char v25 = 0;
  }
  sub_2495786B0((uint64_t)&v21 - v9, &qword_2696BFBA8);
  if (v25)
  {
    type metadata accessor for std.__1.optional_FileDescriptor_(0);
    uint64_t v15 = v14;
    uint64_t v16 = sub_2495A36F8(&qword_2696BF800, type metadata accessor for std.__1.optional_FileDescriptor_);
    CxxOptional.init(nilLiteral:)(v15, v16);
    uint64_t v17 = sub_2495B6DF0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v21, v17);
    sub_2495786B0((uint64_t)v23, &qword_2696BFF90);
  }
  else
  {
    uint64_t v18 = sub_2495B6DF0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v21, v18);
    std::optional<ctb::FileTransferDescriptor::FileDescriptor>::optional[abi:ne180100](v26, v23);
    std::optional<ctb::FileTransferDescriptor::FileDescriptor>::~optional(v23);
  }
  uint64_t v19 = v22;
  ctb::FileTransferDescriptor::FileDescriptor::FileDescriptor(v22, v27);
  ctb::FileTransferDescriptor::FileDescriptor::~FileDescriptor((void **)v27);
  std::optional<ctb::FileTransferDescriptor::FileDescriptor>::optional[abi:ne180100](v19 + 144, v26);
  return std::optional<ctb::FileTransferDescriptor::FileDescriptor>::~optional(v26);
}

uint64_t sub_2495A25B0()
{
  sub_2495B6A60();
  if (!v0) {
    return sub_2495B6A00();
  }
  uint64_t v1 = sub_2495B6630();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6620();
  uint64_t v5 = sub_2495B6600();
  unint64_t v7 = v6;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRelease();
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8)
  {
    swift_bridgeObjectRelease();
    return sub_2495B6A00();
  }
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFF98);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_2495B6760();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  sub_2495B6750();
  sub_2495B6730();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_2495786B0((uint64_t)v11, &qword_2696BFF98);
    return sub_2495B6A00();
  }
  uint64_t v14 = sub_2495B6740();
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
  if (!v16) {
    return sub_2495B6A00();
  }
  return v14;
}

void sub_2495A2854(uint64_t a1@<X0>, int *a2@<X8>)
{
  uint64_t v97 = a2;
  uint64_t v3 = sub_2495B6A50();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (char *)v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6A80();
  int v7 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (MEMORY[0x263F2ACE0] && v7 == *MEMORY[0x263F2ACE0])
  {
    int v8 = 1;
LABEL_7:
    int v96 = v8;
    goto LABEL_9;
  }
  if (MEMORY[0x263F2ACE8] && v7 == *MEMORY[0x263F2ACE8])
  {
    int v8 = 2;
    goto LABEL_7;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  int v96 = 0;
LABEL_9:
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFE78);
  uint64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_2495B6A20();
  MEMORY[0x270FA5388](v12);
  sub_24957864C((uint64_t)v11, (uint64_t)v11, &qword_2696BFE78);
  uint64_t v13 = sub_2495B6A10();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13);
  int v16 = v15;
  uint64_t Optional = 0;
  if (v15 != 1)
  {
    LODWORD(v9std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v15;
    uint64_t v93 = v85;
    uint64_t v94 = v85;
    uint64_t v95 = a1;
    uint64_t v89 = v85;
    uint64_t v18 = *(void *)(v14 + 64);
    MEMORY[0x270FA5388](v15);
    unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
    int v20 = *(uint64_t (**)(char *, char *, uint64_t))(v14 + 32);
    uint64_t v21 = v20((char *)v85 - v19, v11, v13);
    uint64_t v92 = v85;
    MEMORY[0x270FA5388](v21);
    uint64_t v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 16))((char *)v85 - v19, (char *)v85 - v19, v13);
    std::string v91 = v85;
    MEMORY[0x270FA5388](v22);
    v20((char *)v85 - v19, (char *)v85 - v19, v13);
    int v23 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))((char *)v85 - v19, v13);
    if (MEMORY[0x263F2ACC8] && v23 == *MEMORY[0x263F2ACC8])
    {
      unsigned int v24 = 1;
    }
    else if (MEMORY[0x263F2ACC0] && v23 == *MEMORY[0x263F2ACC0])
    {
      unsigned int v24 = 2;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))((char *)v85 - v19, v13);
      unsigned int v24 = 0;
    }
    a1 = v95;
    uint64_t Optional = ctb::bridging::makeOptional(v24);
    (*(void (**)(char *, uint64_t))(v14 + 8))((char *)v85 - v19, v13);
    int v16 = (int)v90;
  }
  sub_2495786B0((uint64_t)v11, &qword_2696BFE78);
  if (v16 == 1)
  {
    type metadata accessor for std.__1.optional___(0);
    uint64_t v26 = v25;
    uint64_t v27 = sub_2495A36F8(&qword_2696BF7F8, type metadata accessor for std.__1.optional___);
    CxxOptional.init(nilLiteral:)(v26, v27);
    uint64_t Optional = v105;
  }
  else
  {
    uint64_t v105 = Optional;
  }
  uint64_t v28 = sub_2495B6A70();
  uint64_t v29 = sub_2495B6A60();
  uint64_t v95 = Optional;
  uint64_t v94 = (void *)v28;
  if (v30)
  {
    unint64_t v31 = v29;
    unint64_t v32 = v30;
    swift_bridgeObjectRetain();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v31, v32, &v104);
    ctb::bridging::makeOptional((ctb::bridging *)&v104, (uint64_t)v102);
    char v103 = 0;
    swift_bridgeObjectRelease();
    if ((v103 & 1) == 0)
    {
      std::optional<std::string>::optional[abi:ne180100]((uint64_t)&v104, (__n128 *)v102);
      ctb::chatbot::URIEntry::~URIEntry((void **)v102);
      goto LABEL_26;
    }
  }
  else
  {
    memset(v102, 0, sizeof(v102));
    char v103 = 1;
  }
  type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___(0);
  uint64_t v34 = v33;
  uint64_t v35 = sub_2495A36F8((unint64_t *)&qword_2696BF8B8, type metadata accessor for std.__1.optional_basic_string_CChar_ char_traits_CChar__ allocator_CChar___);
  CxxOptional.init(nilLiteral:)(v34, v35);
  sub_2495786B0((uint64_t)v102, &qword_2696BFBD0);
LABEL_26:
  unint64_t v36 = sub_2495A25B0();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v36, v37, (std::string *)v102);
  uint64_t v38 = sub_2495B6630();
  uint64_t v39 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v41 = (char *)v85 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6A40();
  unint64_t v42 = sub_2495B6610();
  unint64_t v44 = v43;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v38);
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v42, v44, &v101);
  uint64_t v45 = sub_2495B6700();
  uint64_t v93 = v85;
  uint64_t v92 = (void *)v45;
  std::string v91 = *(void **)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  std::string v90 = (char *)v85 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6A90();
  uint64_t v47 = sub_2495B66E0();
  uint64_t v89 = v85;
  uint64_t v88 = v47;
  uint64_t v87 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  uint64_t v86 = (char *)v85 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_2495B66A0();
  v85[4] = v85;
  MEMORY[0x270FA5388](v49);
  (*(void (**)(char *, void))(v51 + 104))((char *)v85 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F07298]);
  uint64_t v52 = sub_2495B6690();
  v85[3] = v85;
  MEMORY[0x270FA5388](v52);
  (*(void (**)(char *, void))(v54 + 104))((char *)v85 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F07290]);
  uint64_t v55 = sub_2495B66B0();
  v85[2] = v85;
  MEMORY[0x270FA5388](v55);
  (*(void (**)(char *, void))(v57 + 104))((char *)v85 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F072B0]);
  uint64_t v58 = sub_2495B66D0();
  v85[1] = v85;
  MEMORY[0x270FA5388](v58);
  (*(void (**)(char *, void))(v60 + 104))((char *)v85 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F072D0]);
  uint64_t v61 = sub_2495B6720();
  v85[0] = v85;
  uint64_t v62 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  uint64_t v64 = (char *)v85 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFE58);
  MEMORY[0x270FA5388](v65 - 8);
  unint64_t v67 = (char *)v85 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6710();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v67, 1, v61) == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v64, v67, v61);
    unint64_t v68 = v86;
    sub_2495B66C0();
    uint64_t v69 = v90;
    unint64_t v70 = sub_2495B6680();
    unint64_t v72 = v71;
    (*(void (**)(char *, uint64_t))(v87 + 8))(v68, v88);
    ((void (*)(char *, void *))v91[1])(v69, v92);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v70, v72, &v100);
    uint64_t v73 = sub_2495B6A30();
    if (v74)
    {
      type metadata accessor for std.__1.optional_CUnsignedLong_(0);
      uint64_t v81 = v80;
      uint64_t v82 = sub_2495A36F8(&qword_2696BF838, type metadata accessor for std.__1.optional_CUnsignedLong_);
      CxxOptional.init(nilLiteral:)(v81, v82);
      uint64_t v83 = sub_2495B6AA0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v83 - 8) + 8))(a1, v83);
      uint64_t v76 = v98;
      uint64_t v78 = v99;
      goto LABEL_31;
    }
    if ((v73 & 0x8000000000000000) == 0)
    {
      ctb::bridging::makeOptional((ctb::bridging *)v73);
      uint64_t v76 = v75;
      uint64_t v78 = v77 & 1;
      uint64_t v79 = sub_2495B6AA0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v79 - 8) + 8))(a1, v79);
      uint64_t v98 = v76;
      uint64_t v99 = v78;
LABEL_31:
      unint64_t v84 = v97;
      *uint64_t v97 = v96;
      *(void *)(v84 + 1) = v95;
      *((void *)v84 + 2) = v94;
      std::optional<std::string>::optional[abi:ne180100]((uint64_t)(v84 + 6), (__n128 *)&v104);
      ctb::chatbot::URIEntry::~URIEntry((void **)&v104.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]((__n128 *)(v84 + 14), (__n128 *)v102);
      std::string::~string((std::string *)v102);
      std::string::basic_string[abi:ne180100]((__n128 *)v84 + 5, (__n128 *)&v101);
      std::string::~string(&v101);
      std::string::basic_string[abi:ne180100]((__n128 *)(v84 + 26), (__n128 *)&v100);
      std::string::~string(&v100);
      *((void *)v84 + 16) = v76;
      *((void *)v84 + 17) = v78;
      return;
    }
  }
  sub_2495B88C0();
  __break(1u);
}

uint64_t sub_2495A36F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2495A3740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v121 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFFA0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v123 = v4;
  uint64_t v124 = (uint64_t)&v112 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495A518C(v124);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFFA8);
  uint64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  MEMORY[0x270FA5388](v5 - 8);
  int v7 = (char *)&v112 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = a1;
  uint64_t v8 = sub_2495B7390();
  MEMORY[0x270FA5388](v8);
  sub_24957864C((uint64_t)v7, (uint64_t)v7, &qword_2696BFFA8);
  uint64_t v9 = sub_2495B6E10();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9);
  if (v11 == 1)
  {
    *(void *)&long long v133 = 0;
    long long v131 = 0u;
    long long v132 = 0u;
    BYTE8(v133) = 1;
  }
  else
  {
    uint64_t v12 = *(void *)(v10 + 64);
    MEMORY[0x270FA5388](v11);
    uint64_t v13 = (char *)&v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v13, v7, v9);
    MEMORY[0x270FA5388](v14);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v13, v9);
    unint64_t v15 = sub_2495B6E00();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v15, v16, (std::string *)((char *)&v131 + 8));
    *(void *)&long long v131 = 0;
    uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
    v17(v13, v9);
    ctb::ProvisioningConfiguration::Token::Token((uint64_t)v160, (uint64_t)&v131);
    ctb::ProvisioningConfiguration::Token::~Token((void **)&v131);
    __n128 Optional = ctb::bridging::makeOptional((uint64_t)v160, (uint64_t)&v131);
    ((void (*)(char *, uint64_t, __n128))v17)(v13, v9, Optional);
    BYTE8(v133) = 0;
  }
  sub_2495786B0((uint64_t)v7, &qword_2696BFFA8);
  if (BYTE8(v133))
  {
    uint64_t v167 = 0;
    memset(v166, 0, sizeof(v166));
    std::optional<ctb::SIPConferenceInfo::ReferredInfo>::optional[abi:ne180100](v166);
    sub_2495786B0((uint64_t)&v131, &qword_2696BFFB0);
  }
  else
  {
    std::optional<ctb::ProvisioningConfiguration::Token>::optional[abi:ne180100]((uint64_t)v166, (uint64_t)&v131);
    std::optional<ctb::ProvisioningConfiguration::Token>::~optional((uint64_t)&v131);
  }
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFFB8);
  uint64_t v20 = *(void *)(*(void *)(v19 - 8) + 64);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v112 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_2495B73A0();
  v122 = &v112;
  MEMORY[0x270FA5388](v22);
  sub_24957864C((uint64_t)v21, (uint64_t)v21, &qword_2696BFFB8);
  uint64_t v23 = sub_2495B70A0();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48))(v21, 1, v23);
  int v26 = v25;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if (v25 != 1)
  {
    v118 = &v112;
    uint64_t v119 = &v112;
    uint64_t v30 = *(void *)(v24 + 64);
    MEMORY[0x270FA5388](v25);
    unint64_t v31 = (char *)&v112 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 32))(v31, v21, v23);
    v120 = &v112;
    MEMORY[0x270FA5388](v32);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v31, v31, v23);
    uint64_t v33 = sub_2495B7080();
    int64_t v34 = sub_2495B7090();
    uint64_t v35 = *(void (**)(char *, uint64_t))(v24 + 8);
    v35(v31, v23);
    v168.var0 = v34;
    ctb::bridging::makeOptional(v33, v168, (uint64_t)&v131);
    uint64_t v28 = (uint64_t *)*((void *)&v131 + 1);
    unint64_t v36 = (uint64_t *)v131;
    uint64_t v29 = (uint64_t *)v132;
    v35(v31, v23);
    uint64_t v27 = v36;
  }
  sub_2495786B0((uint64_t)v21, &qword_2696BFFB8);
  if (v26 == 1)
  {
    uint64_t v163 = 0;
    uint64_t v164 = 0;
    uint64_t v165 = 0;
    std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::optional[abi:ne180100](&v163);
    v122 = v165;
    uint64_t v119 = v163;
    v120 = v164;
  }
  else
  {
    uint64_t v119 = v27;
    v120 = v28;
    uint64_t v163 = v27;
    uint64_t v164 = v28;
    v122 = v29;
    uint64_t v165 = v29;
  }
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFFC0);
  uint64_t v38 = *(void *)(*(void *)(v37 - 8) + 64);
  MEMORY[0x270FA5388](v37 - 8);
  uint64_t v39 = (char *)&v112 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_2495B73C0();
  MEMORY[0x270FA5388](v40);
  sub_24957864C((uint64_t)v39, (uint64_t)v39, &qword_2696BFFC0);
  uint64_t v41 = sub_2495B7530();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48))(v39, 1, v41);
  if (v43 == 1)
  {
    *(void *)&long long v134 = 0;
    long long v132 = 0u;
    long long v133 = 0u;
    long long v131 = 0u;
    BYTE8(v134) = 1;
  }
  else
  {
    v118 = &v112;
    uint64_t v44 = *(void *)(v42 + 64);
    MEMORY[0x270FA5388](v43);
    unint64_t v45 = (v44 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v46 = (*(uint64_t (**)(char *, char *, uint64_t))(v42 + 32))((char *)&v112 - v45, v39, v41);
    MEMORY[0x270FA5388](v46);
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))((char *)&v112 - v45, (char *)&v112 - v45, v41);
    sub_2495A5468((uint64_t)&v112 - v45, (uint64_t)v160);
    double v47 = ctb::bridging::makeOptional((uint64_t)v160, (uint64_t)&v131);
    (*(void (**)(char *, uint64_t, double))(v42 + 8))((char *)&v112 - v45, v41, v47);
    BYTE8(v134) = 0;
  }
  sub_2495786B0((uint64_t)v39, &qword_2696BFFC0);
  if (BYTE8(v134))
  {
    uint64_t v162 = 0;
    memset(v161, 0, sizeof(v161));
    std::optional<ctb::ProvisioningConfiguration::AccessControl>::optional[abi:ne180100](v161);
    sub_2495786B0((uint64_t)&v131, &qword_2696BFFC8);
  }
  else
  {
    std::optional<ctb::ProvisioningConfiguration::AccessControl>::optional[abi:ne180100]((uint64_t)v161, (uint64_t)&v131);
    std::optional<ctb::ProvisioningConfiguration::AccessControl>::~optional(&v131);
  }
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFFD0);
  uint64_t v49 = *(void *)(*(void *)(v48 - 8) + 64);
  MEMORY[0x270FA5388](v48 - 8);
  uint64_t v50 = (char *)&v112 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_2495A4E48((uint64_t)v50);
  MEMORY[0x270FA5388](v51);
  sub_24957864C((uint64_t)v50, (uint64_t)v50, &qword_2696BFFD0);
  uint64_t v52 = sub_2495B6FF0();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48))(v50, 1, v52);
  if (v54 == 1)
  {
    bzero(&v131, 0x218uLL);
    char v159 = 1;
  }
  else
  {
    v118 = &v112;
    uint64_t v55 = *(void *)(v53 + 64);
    MEMORY[0x270FA5388](v54);
    unint64_t v56 = (v55 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v57 = (*(uint64_t (**)(char *, char *, uint64_t))(v53 + 32))((char *)&v112 - v56, v50, v52);
    MEMORY[0x270FA5388](v57);
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))((char *)&v112 - v56, (char *)&v112 - v56, v52);
    sub_2495A5960((uint64_t)&v112 - v56, (uint64_t)v160);
    double v58 = ctb::bridging::makeOptional(v160, (uint64_t)&v131);
    (*(void (**)(char *, uint64_t, double))(v53 + 8))((char *)&v112 - v56, v52, v58);
    char v159 = 0;
  }
  uint64_t v59 = v124;
  sub_2495786B0((uint64_t)v50, &qword_2696BFFD0);
  if (v159)
  {
    bzero(v160, 0x218uLL);
    std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::optional[abi:ne180100](v160);
    uint64_t v60 = sub_2495786B0((uint64_t)&v131, &qword_2696BFFD8);
  }
  else
  {
    std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::optional[abi:ne180100](v160, (uint64_t)&v131);
    std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::~optional((ctb::ProvisioningConfiguration::IMS3GPP *)&v131);
  }
  uint64_t v61 = v123;
  MEMORY[0x270FA5388](v60);
  sub_24957864C(v59, (uint64_t)&v112 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696BFFA0);
  uint64_t v62 = sub_2495B76E0();
  uint64_t v63 = *(uint64_t **)(v62 - 8);
  uint64_t v64 = (uint64_t *)v63[6];
  int v65 = ((uint64_t (*)(char *, uint64_t, uint64_t))v64)((char *)&v112 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v62);
  v118 = v64;
  if (v65 == 1)
  {
    sub_2495786B0((uint64_t)&v112 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696BFFA0);
    long long v133 = 0u;
    long long v134 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    LOBYTE(v135) = 1;
LABEL_30:
    memset(v130, 0, sizeof(v130));
    std::optional<ctb::ProvisioningConfiguration::Services>::optional[abi:ne180100](v130);
    uint64_t v76 = sub_2495786B0((uint64_t)&v131, &qword_2696BFFE0);
    goto LABEL_32;
  }
  uint64_t v117 = &v112;
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696C0000);
  v116 = (char *)&v112;
  uint64_t v67 = *(void *)(*(void *)(v66 - 8) + 64);
  MEMORY[0x270FA5388](v66 - 8);
  unint64_t v68 = (char *)&v112 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B76C0();
  uint64_t v69 = ((uint64_t (*)(char *, uint64_t))v63[1])((char *)&v112 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0), v62);
  uint64_t v115 = &v112;
  MEMORY[0x270FA5388](v69);
  sub_24957864C((uint64_t)v68, (uint64_t)v68, &qword_2696C0000);
  uint64_t v70 = sub_2495B7140();
  uint64_t v71 = *(void *)(v70 - 8);
  uint64_t v72 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48))(v68, 1, v70);
  if (v72 == 1)
  {
    long long v133 = 0u;
    long long v134 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    LOBYTE(v135) = 1;
  }
  else
  {
    uint64_t v113 = &v112;
    v114 = v63;
    uint64_t v73 = *(void *)(v71 + 64);
    MEMORY[0x270FA5388](v72);
    unint64_t v74 = (v73 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v75 = (*(uint64_t (**)(char *, char *, uint64_t))(v71 + 32))((char *)&v112 - v74, v68, v70);
    MEMORY[0x270FA5388](v75);
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))((char *)&v112 - v74, (char *)&v112 - v74, v70);
    sub_2495A82F0((uint64_t)&v112 - v74, (uint64_t *)v128);
    ctb::bridging::makeOptional((uint64_t)v128, (uint64_t)&v131);
    (*(void (**)(char *, uint64_t))(v71 + 8))((char *)&v112 - v74, v70);
    LOBYTE(v135) = 0;
    uint64_t v63 = v114;
    uint64_t v61 = v123;
  }
  uint64_t v64 = v118;
  sub_2495786B0((uint64_t)v68, &qword_2696C0000);
  uint64_t v59 = v124;
  if (v135) {
    goto LABEL_30;
  }
  std::optional<ctb::ProvisioningConfiguration::Services>::optional[abi:ne180100](v130, &v131);
  uint64_t v76 = std::optional<ctb::ProvisioningConfiguration::Services>::~optional((uint64_t)&v131);
LABEL_32:
  MEMORY[0x270FA5388](v76);
  sub_24957864C(v59, (uint64_t)&v112 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696BFFA0);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v64)((char *)&v112 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v62) == 1)
  {
    sub_2495786B0((uint64_t)&v112 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696BFFA0);
    uint64_t v157 = 0;
    long long v156 = 0u;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v150 = 0u;
    long long v151 = 0u;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v144 = 0u;
    long long v145 = 0u;
    long long v142 = 0u;
    long long v143 = 0u;
    long long v140 = 0u;
    long long v141 = 0u;
    long long v138 = 0u;
    long long v139 = 0u;
    long long v136 = 0u;
    long long v137 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    long long v132 = 0u;
    long long v133 = 0u;
    long long v131 = 0u;
    char v158 = 1;
LABEL_38:
    uint64_t v129 = 0;
    memset(v128, 0, sizeof(v128));
    std::optional<ctb::ProvisioningConfiguration::Messaging>::optional[abi:ne180100](v128);
    uint64_t v87 = sub_2495786B0((uint64_t)&v131, &qword_2696BFFE8);
    goto LABEL_40;
  }
  uint64_t v117 = &v112;
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFFF8);
  v116 = (char *)&v112;
  uint64_t v78 = *(void *)(*(void *)(v77 - 8) + 64);
  MEMORY[0x270FA5388](v77 - 8);
  uint64_t v79 = (char *)&v112 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B76D0();
  uint64_t v80 = ((uint64_t (*)(char *, uint64_t))v63[1])((char *)&v112 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0), v62);
  uint64_t v115 = &v112;
  MEMORY[0x270FA5388](v80);
  sub_24957864C((uint64_t)v79, (uint64_t)v79, &qword_2696BFFF8);
  uint64_t v81 = sub_2495B7240();
  uint64_t v82 = *(void *)(v81 - 8);
  uint64_t v83 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v82 + 48))(v79, 1, v81);
  if (v83 == 1)
  {
    uint64_t v157 = 0;
    long long v156 = 0u;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v150 = 0u;
    long long v151 = 0u;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v144 = 0u;
    long long v145 = 0u;
    long long v142 = 0u;
    long long v143 = 0u;
    long long v140 = 0u;
    long long v141 = 0u;
    long long v138 = 0u;
    long long v139 = 0u;
    long long v136 = 0u;
    long long v137 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    long long v132 = 0u;
    long long v133 = 0u;
    long long v131 = 0u;
    char v158 = 1;
  }
  else
  {
    uint64_t v113 = &v112;
    v114 = v63;
    uint64_t v84 = *(void *)(v82 + 64);
    MEMORY[0x270FA5388](v83);
    unint64_t v85 = (v84 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v86 = (*(uint64_t (**)(char *, char *, uint64_t))(v82 + 32))((char *)&v112 - v85, v79, v81);
    MEMORY[0x270FA5388](v86);
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))((char *)&v112 - v85, (char *)&v112 - v85, v81);
    sub_2495A8BCC((uint64_t)&v112 - v85, v128);
    ctb::bridging::makeOptional(v128, (uint64_t)&v131);
    (*(void (**)(char *, uint64_t))(v82 + 8))((char *)&v112 - v85, v81);
    char v158 = 0;
    uint64_t v63 = v114;
    uint64_t v61 = v123;
  }
  uint64_t v64 = v118;
  sub_2495786B0((uint64_t)v79, &qword_2696BFFF8);
  uint64_t v59 = v124;
  if (v158) {
    goto LABEL_38;
  }
  std::optional<ctb::ProvisioningConfiguration::Messaging>::optional[abi:ne180100](v128, (uint64_t)&v131);
  uint64_t v87 = std::optional<ctb::ProvisioningConfiguration::Messaging>::~optional(&v131);
LABEL_40:
  MEMORY[0x270FA5388](v87);
  sub_24957864C(v59, (uint64_t)&v112 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696BFFA0);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v64)((char *)&v112 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v62) == 1)
  {
    sub_2495786B0((uint64_t)&v112 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696BFFA0);
  }
  else
  {
    v118 = &v112;
    uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFFF0);
    uint64_t v117 = &v112;
    uint64_t v89 = *(void *)(*(void *)(v88 - 8) + 64);
    MEMORY[0x270FA5388](v88 - 8);
    sub_2495B76B0();
    uint64_t v90 = ((uint64_t (*)(char *, uint64_t))v63[1])((char *)&v112 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0), v62);
    uint64_t v115 = &v112;
    MEMORY[0x270FA5388](v90);
    std::string v91 = (char *)&v112 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
    v116 = v91;
    sub_24957864C((uint64_t)v91, (uint64_t)v91, &qword_2696BFFF0);
    uint64_t v92 = sub_2495B7460();
    uint64_t v93 = *(void *)(v92 - 8);
    uint64_t v94 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92);
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    LODWORD(v123) = v94;
    if (v94 != 1)
    {
      v114 = &v112;
      uint64_t v100 = *(void *)(v93 + 64);
      MEMORY[0x270FA5388](v94);
      std::string v101 = (char *)&v112 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v102 = (*(uint64_t (**)(char *, char *, uint64_t))(v93 + 32))(v101, v91, v92);
      MEMORY[0x270FA5388](v102);
      (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v101, v101, v92);
      v126[0] = sub_2495AA31C((uint64_t)v101);
      v126[1] = v103;
      v126[2] = v104;
      char v127 = v105 & 1;
      __n128 v106 = ctb::bridging::makeOptional((uint64_t)v126, (uint64_t)&v131);
      uint64_t v98 = *((void *)&v132 + 1);
      uint64_t v97 = v132;
      uint64_t v96 = *((void *)&v131 + 1);
      uint64_t v95 = v131;
      uint64_t v99 = v133;
      (*(void (**)(char *, uint64_t, __n128))(v93 + 8))(v101, v92, v106);
      uint64_t v59 = v124;
    }
    sub_2495786B0((uint64_t)v116, &qword_2696BFFF0);
    if (v123 != 1)
    {
      uint64_t v108 = sub_2495B73D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v108 - 8) + 8))(v125, v108);
      sub_2495786B0(v59, &qword_2696BFFA0);
      *((void *)&v132 + 1) = v98;
      *(void *)&long long v132 = v97;
      *((void *)&v131 + 1) = v96;
      *(void *)&long long v131 = v95;
      *(void *)&long long v133 = v99;
      goto LABEL_47;
    }
  }
  *(void *)&long long v133 = 0;
  long long v131 = 0u;
  long long v132 = 0u;
  std::optional<ctb::SIPConferenceInfo::ReferredInfo>::optional[abi:ne180100](&v131);
  uint64_t v107 = sub_2495B73D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v107 - 8) + 8))(v125, v107);
  sub_2495786B0(v59, &qword_2696BFFA0);
  uint64_t v99 = v133;
  uint64_t v98 = *((void *)&v132 + 1);
  uint64_t v97 = v132;
  uint64_t v96 = *((void *)&v131 + 1);
  uint64_t v95 = v131;
LABEL_47:
  uint64_t v109 = v121;
  std::optional<ctb::ProvisioningConfiguration::Token>::optional[abi:ne180100](v121, (uint64_t)v166);
  std::optional<ctb::ProvisioningConfiguration::Token>::~optional((uint64_t)v166);
  uint64_t v110 = v120;
  *(void *)(v109 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v119;
  *(void *)(v109 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v110;
  *(void *)(v109 + 56) = v122;
  std::optional<ctb::ProvisioningConfiguration::AccessControl>::optional[abi:ne180100](v109 + 64, (uint64_t)v161);
  std::optional<ctb::ProvisioningConfiguration::AccessControl>::~optional(v161);
  std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::optional[abi:ne180100]((unsigned char *)(v109 + 120), (uint64_t)v160);
  std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::~optional((ctb::ProvisioningConfiguration::IMS3GPP *)v160);
  std::optional<ctb::ProvisioningConfiguration::Services>::optional[abi:ne180100](v109 + 656, v130);
  std::optional<ctb::ProvisioningConfiguration::Services>::~optional((uint64_t)v130);
  std::optional<ctb::ProvisioningConfiguration::Messaging>::optional[abi:ne180100]((unsigned char *)(v109 + 720), (uint64_t)v128);
  uint64_t result = std::optional<ctb::ProvisioningConfiguration::Messaging>::~optional(v128);
  *(void *)(v109 + 116std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v98;
  *(void *)(v109 + 116std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v97;
  *(void *)(v109 + 1152) = v96;
  *(void *)(v109 + 1144) = v95;
  *(void *)(v109 + 1176) = v99;
  return result;
}

uint64_t sub_2495A4C48@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, unint64_t *a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  unint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v30 = a3;
  int v7 = a6;
  int64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    int v26 = a6;
    uint64_t v35 = MEMORY[0x263F8EE78];
    sub_2495975C0(0, v8, 0);
    uint64_t isUniquelyReferenced_nonNull_native = a2(0);
    uint64_t v11 = isUniquelyReferenced_nonNull_native;
    uint64_t v12 = *(void *)(isUniquelyReferenced_nonNull_native - 8);
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v28 = v12 + 16;
    uint64_t v29 = v13;
    uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
    v25[1] = a1;
    uint64_t v15 = a1 + ((v14 + 32) & ~v14);
    uint64_t v16 = *(void *)(v12 + 64);
    uint64_t v27 = *(void *)(v12 + 72);
    uint64_t v17 = (void (**)(char *, uint64_t))(v12 + 8);
    do
    {
      MEMORY[0x270FA5388](isUniquelyReferenced_nonNull_native);
      v29((char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v15, v11);
      sub_2495AA604(v30, v31);
      sub_2495B8750();
      uint64_t v18 = v33;
      uint64_t v19 = v34;
      (*v17)((char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
      uint64_t v20 = v35;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = sub_2495975C0(0, *(void *)(v20 + 16) + 1, 1);
        uint64_t v20 = v35;
      }
      unint64_t v22 = *(void *)(v20 + 16);
      unint64_t v21 = *(void *)(v20 + 24);
      if (v22 >= v21 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = sub_2495975C0(v21 > 1, v22 + 1, 1);
        uint64_t v20 = v35;
      }
      *(void *)(v20 + 16) = v22 + 1;
      uint64_t v23 = v20 + 16 * v22;
      *(void *)(v23 + 32) = v18;
      *(void *)(v23 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v19;
      v15 += v27;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    int v7 = v26;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = MEMORY[0x263F8EE78];
  }
  return sub_249595F40(v20, v7);
}

uint64_t sub_2495A4E48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_2495B73B0();
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = MEMORY[0x263F8EE78];
  }
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v27 = a1;
    uint64_t v5 = sub_2495B7270();
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v26 = v3;
    uint64_t v8 = v3 + ((v7 + 32) & ~v7);
    uint64_t v28 = *(void *)(v6 + 72);
    uint64_t v9 = sub_2495B7700();
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v30 = v6 + 16;
    uint64_t v10 = (uint64_t (**)(char *, uint64_t))(v6 + 88);
    uint64_t v24 = v6;
    uint64_t v25 = v9;
    uint64_t v11 = (uint64_t (**)(char *, uint64_t))(v6 + 8);
    uint64_t v23 = *(void *)(v9 - 8);
    uint64_t v12 = *(void *)(v23 + 64);
    uint64_t v13 = *(void *)(v6 + 64);
    do
    {
      unint64_t v31 = &v22;
      uint64_t v14 = MEMORY[0x270FA5388](v9);
      MEMORY[0x270FA5388](v14);
      v29((char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v8, v5);
      int v15 = (*v10)((char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
      if (MEMORY[0x263F2B000] && v15 == *MEMORY[0x263F2B000])
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v24 + 96))((char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
        uint64_t v16 = v23;
        uint64_t v17 = v25;
        (*(void (**)(char *, char *, uint64_t))(v23 + 32))((char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v25);
        uint64_t v18 = v27;
        sub_2495B76F0();
        (*(void (**)(char *, uint64_t))(v16 + 8))((char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
        uint64_t v19 = sub_2495B6FF0();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 0, 1, v19);
      }
      uint64_t v9 = (*v11)((char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
      v8 += v28;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    a1 = v27;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v21 = sub_2495B6FF0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a1, 1, 1, v21);
}

uint64_t sub_2495A518C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_2495B73B0();
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = MEMORY[0x263F8EE78];
  }
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v21 = a1;
    uint64_t v5 = sub_2495B7270();
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
    v20[1] = v3;
    uint64_t v9 = v3 + ((v8 + 32) & ~v8);
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v10 = (uint64_t (**)(char *, uint64_t))(v7 + 88);
    v20[0] = v7;
    uint64_t v11 = (uint64_t (**)(char *, uint64_t))(v7 + 8);
    uint64_t v12 = *(void *)(v7 + 72);
    uint64_t v13 = *(void *)(v7 + 64);
    do
    {
      MEMORY[0x270FA5388](v5);
      v22((char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v9, v6);
      int v14 = (*v10)((char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
      if (MEMORY[0x263F2AFF0] && v14 == *MEMORY[0x263F2AFF0])
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v20[0] + 96))((char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
        uint64_t v15 = sub_2495B76E0();
        uint64_t v16 = *(void *)(v15 - 8);
        uint64_t v17 = v21;
        (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v21, (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v17, 0, 1, v15);
      }
      uint64_t v5 = (*v11)((char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
      v9 += v12;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    a1 = v21;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v19 = sub_2495B76E0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(a1, 1, 1, v19);
}

unsigned char *std::optional<ctb::ProvisioningConfiguration::AccessControl>::optional[abi:ne180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[48] = 0;
  return result;
}

unsigned char *std::optional<ctb::ProvisioningConfiguration::IMS3GPP>::optional[abi:ne180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[528] = 0;
  return result;
}

unsigned char *std::optional<ctb::ProvisioningConfiguration::Services>::optional[abi:ne180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[56] = 0;
  return result;
}

unsigned char *std::optional<ctb::ProvisioningConfiguration::Messaging>::optional[abi:ne180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[416] = 0;
  return result;
}

void **sub_2495A5468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_2495B7520();
  int64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v35 = a1;
    uint64_t v36 = a2;
    v47.n128_u64[0] = MEMORY[0x263F8EE78];
    sub_2495977EC(0, v5, 0);
    uint64_t v6 = sub_2495B6E50();
    uint64_t v43 = v6;
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v34[1] = v4;
    unint64_t v9 = v4 + v8;
    uint64_t v40 = *(void *)(v7 + 72);
    uint64_t v39 = *(void *)(v7 + 64);
    uint64_t v38 = v50;
    uint64_t v41 = v7 + 16;
    uint64_t v37 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v10 = v6;
    do
    {
      unint64_t v45 = v34;
      int64_t v46 = v5;
      uint64_t v11 = v39;
      MEMORY[0x270FA5388](v6);
      uint64_t v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v13 = v42;
      uint64_t v14 = ((uint64_t (*)(char *, unint64_t, uint64_t))v42)(v12, v9, v10);
      uint64_t v44 = v34;
      MEMORY[0x270FA5388](v14);
      v13(v12, v12, v10);
      uint64_t v15 = sub_2495B6630();
      uint64_t v16 = *(void *)(v15 - 8);
      MEMORY[0x270FA5388](v15);
      uint64_t v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_2495B6E40();
      unint64_t v19 = sub_2495B6610();
      unint64_t v21 = v20;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v19, v21, &v49);
      uint64_t v22 = sub_2495B6E30();
      sub_2495A4C48(v22, MEMORY[0x270FB0648], &qword_2696C0010, MEMORY[0x270FB0648], MEMORY[0x270FB0658], v38);
      v50[24] = sub_2495B6E20() & 1;
      uint64_t v23 = *v37;
      (*v37)(v12, v10);
      ctb::ProvisioningConfiguration::AccessControl::Server::Server((uint64_t)v51, (long long *)&v49);
      ctb::ProvisioningConfiguration::AccessControl::Server::~Server(&v49.__r_.__value_.__l.__data_);
      v23(v12, v10);
      unint64_t v24 = v47.n128_u64[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2495977EC(0, *(void *)(v24 + 16) + 1, 1);
        unint64_t v24 = v47.n128_u64[0];
      }
      unint64_t v26 = *(void *)(v24 + 16);
      unint64_t v25 = *(void *)(v24 + 24);
      if (v26 >= v25 >> 1)
      {
        sub_2495977EC(v25 > 1, v26 + 1, 1);
        unint64_t v24 = v47.n128_u64[0];
      }
      *(void *)(v24 + 16) = v26 + 1;
      ctb::ProvisioningConfiguration::AccessControl::Server::Server(v24 + 56 * v26 + 32, v51);
      ctb::ProvisioningConfiguration::AccessControl::Server::~Server((char **)v51);
      v9 += v40;
      int64_t v5 = v46 - 1;
    }
    while (v46 != 1);
    swift_bridgeObjectRelease();
    a2 = v36;
    a1 = v35;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v24 = MEMORY[0x263F8EE78];
  }
  uint64_t v27 = sub_2495B6F00();
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v29 = (char *)v34 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B7510();
  sub_2495A97F8((uint64_t)v29, v51);
  __n128 v47 = 0uLL;
  uint64_t v48 = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](&v47);
  uint64_t v30 = *(void *)(v24 + 16);
  if (v30)
  {
    uint64_t v31 = v24 + 32;
    swift_bridgeObjectRetain();
    do
    {
      std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::push_back[abi:ne180100]((uint64_t *)&v47, v31);
      v31 += 56;
      --v30;
    }
    while (v30);
    swift_bridgeObjectRelease();
  }
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]((__n128 *)&v49, &v47);
  std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::~vector[abi:ne180100]((void **)&v47);
  uint64_t v32 = sub_2495B7530();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(a1, v32);
  swift_bridgeObjectRelease();
  ctb::ProvisioningConfiguration::AccessControl::Default::Default((void *)a2, v51);
  ctb::ProvisioningConfiguration::AccessControl::Default::~Default((char **)v51);
  std::vector<ctb::SIPConferenceInfo::User>::vector[abi:ne180100]((__n128 *)(a2 + 24), (__n128 *)&v49);
  return std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::~vector[abi:ne180100]((void **)&v49.__r_.__value_.__l.__data_);
}

void sub_2495A5960(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v286 = a2;
  uint64_t v3 = sub_2495B6DC0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v279 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6FB0();
  unint64_t v7 = sub_2495B6DB0();
  unint64_t v9 = v8;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v7, v9, &v316);
  uint64_t v10 = sub_2495B6FA0();
  if (v11)
  {
    unint64_t v12 = v10;
    unint64_t v13 = v11;
    swift_bridgeObjectRetain();
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v12, v13, (std::string *)v315);
    ctb::bridging::makeOptional((ctb::bridging *)v315, (uint64_t)v313);
    char v314 = 0;
    swift_bridgeObjectRelease();
    if ((v314 & 1) == 0)
    {
      std::optional<std::string>::optional[abi:ne180100]((uint64_t)v315, (__n128 *)v313);
      ctb::chatbot::URIEntry::~URIEntry((void **)v313);
      goto LABEL_6;
    }
  }
  else
  {
    memset(v313, 0, sizeof(v313));
    char v314 = 1;
  }
  memset(v315, 0, sizeof(v315));
  std::optional<ctb::SIPConferenceInfo::SubjectExt>::optional[abi:ne180100](v315);
  sub_2495786B0((uint64_t)v313, &qword_2696BFBD0);
LABEL_6:
  uint64_t v14 = sub_2495B7880();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v279 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6F90();
  uint64_t v18 = sub_2495B7870();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  sub_249595F40(v18, v312);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696C0018);
  uint64_t v20 = *(void *)(*(void *)(v19 - 8) + 64);
  MEMORY[0x270FA5388](v19 - 8);
  unint64_t v21 = (char *)&v279 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_2495B6F10();
  MEMORY[0x270FA5388](v22);
  sub_24957864C((uint64_t)v21, (uint64_t)v21, &qword_2696C0018);
  uint64_t v23 = sub_2495B7650();
  unint64_t v24 = *(uint64_t **)(v23 - 8);
  uint64_t v25 = ((uint64_t (*)(char *, uint64_t, uint64_t))v24[6])(v21, 1, v23);
  uint64_t v288 = a1;
  if (v25 == 1)
  {
    memset(v313, 0, 24);
    v313[24] = 1;
  }
  else
  {
    v287 = &v279;
    MEMORY[0x270FA5388](v25);
    uint64_t v27 = (char *)&v279 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
    ((void (*)(char *, char *, uint64_t))v24[4])(v27, v21, v23);
    uint64_t v285 = (uint64_t)v27;
    uint64_t v28 = sub_2495B7640();
    int64_t v29 = *(void *)(v28 + 16);
    if (v29)
    {
      uint64_t v280 = &v279;
      uint64_t v281 = v24;
      v282 = (void *)v23;
      uint64_t v283 = (uint64_t)v21;
      v284 = &v279;
      uint64_t v30 = v28;
      *(void *)uint64_t v313 = MEMORY[0x263F8EE78];
      sub_2495975C0(0, v29, 0);
      uint64_t isUniquelyReferenced_nonNull_native = sub_2495B6AC0();
      v292 = (void *)isUniquelyReferenced_nonNull_native;
      uint64_t v32 = *(void *)(isUniquelyReferenced_nonNull_native - 8);
      uint64_t v33 = *(uint64_t **)(v32 + 16);
      v290 = (uint64_t *)(v32 + 16);
      uint64_t v291 = v33;
      uint64_t v34 = *(unsigned __int8 *)(v32 + 80);
      uint64_t v279 = v30;
      uint64_t v35 = v30 + ((v34 + 32) & ~v34);
      uint64_t v36 = *(void *)(v32 + 64);
      uint64_t v289 = *(void *)(v32 + 72);
      uint64_t v37 = (void (**)(char *, void *))(v32 + 8);
      do
      {
        MEMORY[0x270FA5388](isUniquelyReferenced_nonNull_native);
        uint64_t v38 = v292;
        ((void (*)(char *, uint64_t, void *))v291)((char *)&v279 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0), v35, v292);
        uint64_t v39 = sub_2495B6AB0();
        uint64_t v41 = v40;
        (*v37)((char *)&v279 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0), v38);
        uint64_t v42 = *(void *)v313;
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t isUniquelyReferenced_nonNull_native = sub_2495975C0(0, *(void *)(v42 + 16) + 1, 1);
          uint64_t v42 = *(void *)v313;
        }
        unint64_t v44 = *(void *)(v42 + 16);
        unint64_t v43 = *(void *)(v42 + 24);
        if (v44 >= v43 >> 1)
        {
          uint64_t isUniquelyReferenced_nonNull_native = sub_2495975C0(v43 > 1, v44 + 1, 1);
          uint64_t v42 = *(void *)v313;
        }
        *(void *)(v42 + 16) = v44 + 1;
        uint64_t v45 = v42 + 16 * v44;
        *(void *)(v45 + 32) = v39;
        *(void *)(v45 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v41;
        v35 += v289;
        --v29;
      }
      while (v29);
      swift_bridgeObjectRelease();
      unint64_t v21 = (char *)v283;
      unint64_t v24 = v281;
      uint64_t v23 = (uint64_t)v282;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v42 = MEMORY[0x263F8EE78];
    }
    sub_249595F40(v42, v313);
    ((void (*)(uint64_t, uint64_t))v24[1])(v285, v23);
    v313[24] = 0;
  }
  sub_2495786B0((uint64_t)v21, &qword_2696C0018);
  if (v313[24])
  {
    memset(v311, 0, sizeof(v311));
    std::set<std::string>::set[abi:ne180100](v311);
    sub_2495786B0((uint64_t)v313, &qword_2696C0008);
  }
  else
  {
    std::set<std::string>::set[abi:ne180100](v311, v313);
    std::set<std::string>::~set[abi:ne180100]((uint64_t)v313);
  }
  unint64_t v46 = sub_2495B6F80();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v46, v47, (std::string *)v313);
  unint64_t v48 = sub_2495B6F70();
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v48, v49, &v310);
  uint64_t v285 = sub_2495B6FE0();
  v284 = (void *)sub_2495B6FD0();
  uint64_t v283 = sub_2495B6FC0();
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD90);
  MEMORY[0x270FA5388](v50 - 8);
  uint64_t v52 = (char *)&v279 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696C0020);
  MEMORY[0x270FA5388](v53 - 8);
  uint64_t v289 = v54;
  uint64_t v55 = (char *)&v279 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6F50();
  uint64_t v56 = sub_2495B7260();
  uint64_t v57 = *(void *)(v56 - 8);
  v292 = *(void **)(v57 + 48);
  int v58 = ((uint64_t (*)(char *, uint64_t, uint64_t))v292)(v55, 1, v56);
  uint64_t v291 = (uint64_t *)(v57 + 48);
  if (v58 == 1)
  {
    sub_2495786B0((uint64_t)v55, &qword_2696C0020);
LABEL_25:
    unint64_t v65 = 0;
    unint64_t v66 = 0xE000000000000000;
    uint64_t v67 = v288;
    uint64_t v68 = v289;
    goto LABEL_27;
  }
  v287 = &v279;
  uint64_t v59 = sub_2495B7070();
  v282 = &v279;
  uint64_t v60 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v62 = (char *)&v279 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B7250();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v55, v56);
  sub_2495B7020();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v62, v59);
  uint64_t v63 = sub_2495B6630();
  uint64_t v64 = *(void *)(v63 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v52, 1, v63) == 1)
  {
    sub_2495786B0((uint64_t)v52, &qword_2696BFD90);
    goto LABEL_25;
  }
  unint64_t v65 = sub_2495B6610();
  unint64_t v66 = v69;
  (*(void (**)(char *, uint64_t))(v64 + 8))(v52, v63);
  uint64_t v67 = v288;
  uint64_t v68 = v289;
LABEL_27:
  uint64_t v70 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v65, v66, &v309);
  MEMORY[0x270FA5388](v70);
  sub_2495B6F50();
  int v71 = ((uint64_t (*)(char *, uint64_t, uint64_t))v292)((char *)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v56);
  v290 = (uint64_t *)v57;
  if (v71 == 1)
  {
    sub_2495786B0((uint64_t)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696C0020);
    unint64_t v72 = 0;
    unint64_t v73 = 0xE000000000000000;
  }
  else
  {
    uint64_t v74 = sub_2495B7070();
    v287 = &v279;
    uint64_t v75 = *(void *)(v74 - 8);
    MEMORY[0x270FA5388](v74);
    uint64_t v77 = (char *)&v279 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7250();
    (*(void (**)(char *, uint64_t))(v57 + 8))((char *)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), v56);
    uint64_t v78 = sub_2495B7040();
    v282 = &v279;
    uint64_t v79 = *(void *)(v78 - 8);
    MEMORY[0x270FA5388](v78);
    uint64_t v81 = (char *)&v279 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7050();
    (*(void (**)(char *, uint64_t))(v75 + 8))(v77, v74);
    uint64_t v67 = v288;
    unint64_t v72 = sub_2495B7030();
    unint64_t v73 = v82;
    uint64_t v83 = v81;
    uint64_t v68 = v289;
    (*(void (**)(char *, uint64_t))(v79 + 8))(v83, v78);
  }
  uint64_t v84 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v72, v73, &v308);
  MEMORY[0x270FA5388](v84);
  sub_2495B6F50();
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v292)((char *)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v56) == 1)
  {
    sub_2495786B0((uint64_t)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696C0020);
  }
  else
  {
    uint64_t v85 = sub_2495B7070();
    uint64_t v86 = *(void *)(v85 - 8);
    MEMORY[0x270FA5388](v85);
    uint64_t v88 = (char *)&v279 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7250();
    ((void (*)(char *, uint64_t))v290[1])((char *)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), v56);
    unint64_t v89 = sub_2495B7060();
    unint64_t v91 = v90;
    (*(void (**)(char *, uint64_t))(v86 + 8))(v88, v85);
    uint64_t v67 = v288;
    if (v91) {
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v89 = 0;
  unint64_t v91 = 0xE000000000000000;
LABEL_34:
  uint64_t v92 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v89, v91, &v307);
  MEMORY[0x270FA5388](v92);
  sub_2495B6F50();
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v292)((char *)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v56) == 1)
  {
    sub_2495786B0((uint64_t)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696C0020);
  }
  else
  {
    uint64_t v93 = sub_2495B7070();
    uint64_t v94 = *(void *)(v93 - 8);
    MEMORY[0x270FA5388](v93);
    uint64_t v96 = (char *)&v279 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7250();
    ((void (*)(char *, uint64_t))v290[1])((char *)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), v56);
    unint64_t v97 = sub_2495B7000();
    unint64_t v99 = v98;
    (*(void (**)(char *, uint64_t))(v94 + 8))(v96, v93);
    uint64_t v67 = v288;
    if (v99) {
      goto LABEL_38;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v97 = 0;
  unint64_t v99 = 0xE000000000000000;
LABEL_38:
  uint64_t v100 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v97, v99, &v306);
  MEMORY[0x270FA5388](v100);
  sub_2495B6F50();
  int v101 = ((uint64_t (*)(char *, uint64_t, uint64_t))v292)((char *)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v56);
  v287 = (void *)v56;
  if (v101 == 1)
  {
    sub_2495786B0((uint64_t)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696C0020);
    unint64_t v102 = 0;
    unint64_t v103 = 0xE000000000000000;
  }
  else
  {
    uint64_t v104 = sub_2495B7070();
    uint64_t v281 = &v279;
    v282 = &v279;
    uint64_t v105 = *(void *)(v104 - 8);
    MEMORY[0x270FA5388](v104);
    uint64_t v107 = (char *)&v279 - ((v106 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7250();
    ((void (*)(char *, uint64_t))v290[1])((char *)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), v56);
    uint64_t v108 = sub_2495B7860();
    uint64_t v280 = &v279;
    uint64_t v109 = *(void *)(v108 - 8);
    MEMORY[0x270FA5388](v108);
    uint64_t v111 = (char *)&v279 - ((v110 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7010();
    (*(void (**)(char *, uint64_t))(v105 + 8))(v107, v104);
    uint64_t v112 = sub_2495B7740();
    uint64_t v113 = *(void *)(v112 - 8);
    MEMORY[0x270FA5388](v112);
    uint64_t v115 = (char *)&v279 - ((v114 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B77E0();
    v116 = v111;
    uint64_t v68 = v289;
    (*(void (**)(char *, uint64_t))(v109 + 8))(v116, v108);
    uint64_t v67 = v288;
    unint64_t v102 = sub_2495B7730();
    unint64_t v103 = v117;
    (*(void (**)(char *, uint64_t))(v113 + 8))(v115, v112);
    uint64_t v56 = (uint64_t)v287;
  }
  uint64_t v118 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v102, v103, &v305);
  MEMORY[0x270FA5388](v118);
  uint64_t v119 = (char *)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6F50();
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v292)(v119, 1, v56) == 1)
  {
    sub_2495786B0((uint64_t)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696C0020);
    unint64_t v120 = 0;
    unint64_t v121 = 0xE000000000000000;
  }
  else
  {
    uint64_t v122 = sub_2495B7070();
    uint64_t v281 = &v279;
    uint64_t v123 = *(void *)(v122 - 8);
    MEMORY[0x270FA5388](v122);
    uint64_t v125 = (char *)&v279 - ((v124 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7250();
    ((void (*)(char *, uint64_t))v290[1])(v119, v56);
    uint64_t v126 = sub_2495B7860();
    uint64_t v280 = &v279;
    uint64_t v127 = *(void *)(v126 - 8);
    MEMORY[0x270FA5388](v126);
    v282 = &v279;
    uint64_t v129 = (char *)&v279 - ((v128 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7010();
    (*(void (**)(char *, uint64_t))(v123 + 8))(v125, v122);
    uint64_t v130 = sub_2495B7780();
    uint64_t v131 = *(void *)(v130 - 8);
    MEMORY[0x270FA5388](v130);
    long long v133 = (char *)&v279 - ((v132 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7830();
    (*(void (**)(char *, uint64_t))(v127 + 8))(v129, v126);
    uint64_t v67 = v288;
    unint64_t v120 = sub_2495B7770();
    unint64_t v121 = v134;
    long long v135 = v133;
    uint64_t v68 = v289;
    (*(void (**)(char *, uint64_t))(v131 + 8))(v135, v130);
    uint64_t v56 = (uint64_t)v287;
  }
  uint64_t v136 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v120, v121, &v304);
  MEMORY[0x270FA5388](v136);
  long long v137 = (char *)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6F50();
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v292)(v137, 1, v56) == 1)
  {
    sub_2495786B0((uint64_t)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696C0020);
    unint64_t v138 = 0;
    unint64_t v139 = 0xE000000000000000;
  }
  else
  {
    uint64_t v140 = sub_2495B7070();
    uint64_t v281 = &v279;
    uint64_t v141 = *(void *)(v140 - 8);
    MEMORY[0x270FA5388](v140);
    long long v143 = (char *)&v279 - ((v142 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7250();
    ((void (*)(char *, uint64_t))v290[1])(v137, v56);
    uint64_t v144 = sub_2495B7860();
    uint64_t v280 = &v279;
    uint64_t v145 = *(void *)(v144 - 8);
    MEMORY[0x270FA5388](v144);
    v282 = &v279;
    long long v147 = (char *)&v279 - ((v146 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7010();
    (*(void (**)(char *, uint64_t))(v141 + 8))(v143, v140);
    uint64_t v148 = sub_2495B77A0();
    uint64_t v149 = *(void *)(v148 - 8);
    MEMORY[0x270FA5388](v148);
    long long v151 = (char *)&v279 - ((v150 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7840();
    (*(void (**)(char *, uint64_t))(v145 + 8))(v147, v144);
    uint64_t v67 = v288;
    unint64_t v138 = sub_2495B7710();
    unint64_t v139 = v152;
    long long v153 = v151;
    uint64_t v68 = v289;
    (*(void (**)(char *, uint64_t))(v149 + 8))(v153, v148);
    uint64_t v56 = (uint64_t)v287;
  }
  uint64_t v154 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v138, v139, &v303);
  MEMORY[0x270FA5388](v154);
  long long v155 = (char *)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6F50();
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v292)(v155, 1, v56) == 1)
  {
    sub_2495786B0((uint64_t)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696C0020);
    unint64_t v156 = 0;
    unint64_t v157 = 0xE000000000000000;
  }
  else
  {
    uint64_t v158 = sub_2495B7070();
    uint64_t v281 = &v279;
    uint64_t v159 = *(void *)(v158 - 8);
    MEMORY[0x270FA5388](v158);
    unint64_t v161 = (char *)&v279 - ((v160 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7250();
    ((void (*)(char *, uint64_t))v290[1])(v155, v56);
    uint64_t v162 = sub_2495B7860();
    uint64_t v280 = &v279;
    uint64_t v163 = *(void *)(v162 - 8);
    MEMORY[0x270FA5388](v162);
    v282 = &v279;
    uint64_t v165 = (char *)&v279 - ((v164 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7010();
    (*(void (**)(char *, uint64_t))(v159 + 8))(v161, v158);
    uint64_t v166 = sub_2495B7740();
    uint64_t v167 = *(void *)(v166 - 8);
    MEMORY[0x270FA5388](v166);
    uint64_t v169 = (char *)&v279 - ((v168 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7820();
    (*(void (**)(char *, uint64_t))(v163 + 8))(v165, v162);
    uint64_t v67 = v288;
    unint64_t v156 = sub_2495B7730();
    unint64_t v157 = v170;
    uint64_t v171 = v169;
    uint64_t v68 = v289;
    (*(void (**)(char *, uint64_t))(v167 + 8))(v171, v166);
    uint64_t v56 = (uint64_t)v287;
  }
  uint64_t v172 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v156, v157, &v302);
  MEMORY[0x270FA5388](v172);
  v173 = (char *)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6F50();
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v292)(v173, 1, v56) == 1)
  {
    sub_2495786B0((uint64_t)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696C0020);
    unint64_t v174 = 0;
    unint64_t v175 = 0xE000000000000000;
  }
  else
  {
    uint64_t v176 = sub_2495B7070();
    uint64_t v281 = &v279;
    uint64_t v177 = *(void *)(v176 - 8);
    MEMORY[0x270FA5388](v176);
    uint64_t v179 = (char *)&v279 - ((v178 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7250();
    ((void (*)(char *, uint64_t))v290[1])(v173, v56);
    uint64_t v180 = sub_2495B7860();
    uint64_t v280 = &v279;
    uint64_t v181 = *(void *)(v180 - 8);
    MEMORY[0x270FA5388](v180);
    v282 = &v279;
    v183 = (char *)&v279 - ((v182 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7010();
    (*(void (**)(char *, uint64_t))(v177 + 8))(v179, v176);
    uint64_t v184 = sub_2495B7780();
    uint64_t v185 = *(void *)(v184 - 8);
    MEMORY[0x270FA5388](v184);
    uint64_t v187 = (char *)&v279 - ((v186 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B77F0();
    (*(void (**)(char *, uint64_t))(v181 + 8))(v183, v180);
    uint64_t v67 = v288;
    unint64_t v174 = sub_2495B7770();
    unint64_t v175 = v188;
    unint64_t v189 = v187;
    uint64_t v68 = v289;
    (*(void (**)(char *, uint64_t))(v185 + 8))(v189, v184);
    uint64_t v56 = (uint64_t)v287;
  }
  uint64_t v190 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v174, v175, &v301);
  MEMORY[0x270FA5388](v190);
  v191 = (char *)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6F50();
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v292)(v191, 1, v56) == 1)
  {
    sub_2495786B0((uint64_t)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696C0020);
    unint64_t v192 = 0;
    unint64_t v193 = 0xE000000000000000;
  }
  else
  {
    uint64_t v194 = sub_2495B7070();
    uint64_t v281 = &v279;
    uint64_t v195 = *(void *)(v194 - 8);
    MEMORY[0x270FA5388](v194);
    uint64_t v197 = (char *)&v279 - ((v196 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7250();
    ((void (*)(char *, uint64_t))v290[1])(v191, v56);
    uint64_t v198 = sub_2495B7860();
    uint64_t v280 = &v279;
    uint64_t v199 = *(void *)(v198 - 8);
    MEMORY[0x270FA5388](v198);
    v282 = &v279;
    std::string::size_type v201 = (char *)&v279 - ((v200 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7010();
    (*(void (**)(char *, uint64_t))(v195 + 8))(v197, v194);
    uint64_t v202 = sub_2495B77A0();
    uint64_t v203 = *(void *)(v202 - 8);
    MEMORY[0x270FA5388](v202);
    uint64_t v205 = (char *)&v279 - ((v204 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7810();
    (*(void (**)(char *, uint64_t))(v199 + 8))(v201, v198);
    uint64_t v67 = v288;
    unint64_t v192 = sub_2495B7710();
    unint64_t v193 = v206;
    uint64_t v207 = v205;
    uint64_t v68 = v289;
    (*(void (**)(char *, uint64_t))(v203 + 8))(v207, v202);
    uint64_t v56 = (uint64_t)v287;
  }
  uint64_t v208 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v192, v193, &v300);
  MEMORY[0x270FA5388](v208);
  uint64_t v209 = (char *)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6F50();
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v292)(v209, 1, v56) == 1)
  {
    sub_2495786B0((uint64_t)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696C0020);
    unint64_t v210 = 0;
    unint64_t v211 = 0xE000000000000000;
  }
  else
  {
    uint64_t v212 = sub_2495B7070();
    uint64_t v281 = &v279;
    uint64_t v213 = *(void *)(v212 - 8);
    MEMORY[0x270FA5388](v212);
    uint64_t v215 = (char *)&v279 - ((v214 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7250();
    ((void (*)(char *, uint64_t))v290[1])(v209, v56);
    uint64_t v216 = sub_2495B7860();
    uint64_t v280 = &v279;
    uint64_t v217 = *(void *)(v216 - 8);
    MEMORY[0x270FA5388](v216);
    v282 = &v279;
    uint64_t v219 = (char *)&v279 - ((v218 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7010();
    (*(void (**)(char *, uint64_t))(v213 + 8))(v215, v212);
    uint64_t v220 = sub_2495B7760();
    uint64_t v221 = *(void *)(v220 - 8);
    MEMORY[0x270FA5388](v220);
    unint64_t v223 = (char *)&v279 - ((v222 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7800();
    (*(void (**)(char *, uint64_t))(v217 + 8))(v219, v216);
    uint64_t v67 = v288;
    unint64_t v210 = sub_2495B7750();
    unint64_t v211 = v224;
    uint64_t v225 = v223;
    uint64_t v68 = v289;
    (*(void (**)(char *, uint64_t))(v221 + 8))(v225, v220);
    uint64_t v56 = (uint64_t)v287;
  }
  uint64_t v226 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v210, v211, &v299);
  MEMORY[0x270FA5388](v226);
  uint64_t v227 = (char *)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6F50();
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v292)(v227, 1, v56) == 1)
  {
    sub_2495786B0((uint64_t)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696C0020);
    unint64_t v228 = 0;
    unint64_t v229 = 0xE000000000000000;
  }
  else
  {
    uint64_t v230 = sub_2495B7070();
    uint64_t v281 = &v279;
    uint64_t v231 = *(void *)(v230 - 8);
    MEMORY[0x270FA5388](v230);
    uint64_t v233 = (char *)&v279 - ((v232 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7250();
    ((void (*)(char *, uint64_t))v290[1])(v227, v56);
    uint64_t v234 = sub_2495B7860();
    uint64_t v280 = &v279;
    uint64_t v235 = *(void *)(v234 - 8);
    MEMORY[0x270FA5388](v234);
    v282 = &v279;
    uint64_t v237 = (char *)&v279 - ((v236 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7010();
    (*(void (**)(char *, uint64_t))(v231 + 8))(v233, v230);
    uint64_t v238 = sub_2495B77C0();
    uint64_t v239 = *(void *)(v238 - 8);
    MEMORY[0x270FA5388](v238);
    unint64_t v241 = (char *)&v279 - ((v240 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7850();
    (*(void (**)(char *, uint64_t))(v235 + 8))(v237, v234);
    uint64_t v67 = v288;
    unint64_t v228 = sub_2495B7770();
    unint64_t v229 = v242;
    v243 = v241;
    uint64_t v68 = v289;
    (*(void (**)(char *, uint64_t))(v239 + 8))(v243, v238);
    uint64_t v56 = (uint64_t)v287;
  }
  uint64_t v244 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v228, v229, &v298);
  MEMORY[0x270FA5388](v244);
  sub_2495B6F50();
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v292)((char *)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v56) == 1)
  {
    sub_2495786B0((uint64_t)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696C0020);
    unint64_t v245 = 0;
    unint64_t v246 = 0xE000000000000000;
  }
  else
  {
    uint64_t v247 = sub_2495B7070();
    uint64_t v291 = &v279;
    v292 = &v279;
    uint64_t v248 = v56;
    uint64_t v249 = *(void *)(v247 - 8);
    MEMORY[0x270FA5388](v247);
    uint64_t v251 = (char *)&v279 - ((v250 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7250();
    ((void (*)(char *, uint64_t))v290[1])((char *)&v279 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0), v248);
    uint64_t v252 = sub_2495B7860();
    v290 = &v279;
    uint64_t v253 = *(void *)(v252 - 8);
    MEMORY[0x270FA5388](v252);
    uint64_t v255 = (char *)&v279 - ((v254 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7010();
    (*(void (**)(char *, uint64_t))(v249 + 8))(v251, v247);
    uint64_t v256 = sub_2495B7720();
    uint64_t v257 = *(void *)(v256 - 8);
    MEMORY[0x270FA5388](v256);
    uint64_t v259 = (char *)&v279 - ((v258 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B77D0();
    (*(void (**)(char *, uint64_t))(v253 + 8))(v255, v252);
    unint64_t v245 = sub_2495B7710();
    unint64_t v246 = v260;
    (*(void (**)(char *, uint64_t))(v257 + 8))(v259, v256);
    uint64_t v67 = v288;
  }
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v245, v246, &v297);
  v261 = (ctb::bridging *)sub_2495B6F40();
  if (v262)
  {
    uint64_t v295 = 0;
    uint64_t v296 = 0;
    std::optional<unsigned long>::optional[abi:ne180100](&v295);
    uint64_t v264 = v295;
    uint64_t v266 = v296;
  }
  else
  {
    ctb::bridging::makeOptional(v261);
    uint64_t v264 = v263;
    uint64_t v266 = v265 & 1;
    uint64_t v295 = v263;
    uint64_t v296 = v266;
  }
  unint64_t v267 = (ctb::bridging *)sub_2495B6F20();
  if (v268)
  {
    uint64_t v293 = 0;
    uint64_t v294 = 0;
    std::optional<unsigned long>::optional[abi:ne180100](&v293);
    uint64_t v270 = v293;
    uint64_t v272 = v294;
  }
  else
  {
    ctb::bridging::makeOptional(v267);
    uint64_t v270 = v269;
    uint64_t v272 = v271 & 1;
    uint64_t v293 = v269;
    uint64_t v294 = v272;
  }
  uint64_t v273 = v286;
  v274 = (void *)(v286 + 488);
  char v275 = sub_2495B6F60();
  char v276 = sub_2495B6F30();
  uint64_t v277 = sub_2495B6FF0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v277 - 8) + 8))(v67, v277);
  std::string::basic_string[abi:ne180100]((__n128 *)v273, (__n128 *)&v316);
  std::string::~string(&v316);
  std::optional<std::string>::optional[abi:ne180100](v273 + 24, (__n128 *)v315);
  ctb::chatbot::URIEntry::~URIEntry((void **)v315);
  std::set<std::string>::set[abi:ne180100]((void *)(v273 + 56), v312);
  std::set<std::string>::~set[abi:ne180100]((uint64_t)v312);
  std::set<std::string>::set[abi:ne180100]((void *)(v273 + 80), v311);
  std::set<std::string>::~set[abi:ne180100]((uint64_t)v311);
  std::string::basic_string[abi:ne180100]((__n128 *)(v273 + 104), (__n128 *)v313);
  std::string::~string((std::string *)v313);
  std::string::basic_string[abi:ne180100]((__n128 *)(v273 + 128), (__n128 *)&v310);
  std::string::~string(&v310);
  uint64_t v278 = v284;
  *(void *)(v273 + 152) = v285;
  *(void *)(v273 + 16std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v278;
  *(void *)(v273 + 16std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v283;
  std::string::basic_string[abi:ne180100]((__n128 *)(v273 + 176), (__n128 *)&v309);
  std::string::~string(&v309);
  std::string::basic_string[abi:ne180100]((__n128 *)(v273 + 200), (__n128 *)&v308);
  std::string::~string(&v308);
  std::string::basic_string[abi:ne180100]((__n128 *)(v273 + 224), (__n128 *)&v307);
  std::string::~string(&v307);
  std::string::basic_string[abi:ne180100]((__n128 *)(v273 + 248), (__n128 *)&v306);
  std::string::~string(&v306);
  std::string::basic_string[abi:ne180100]((__n128 *)(v273 + 272), (__n128 *)&v305);
  std::string::~string(&v305);
  std::string::basic_string[abi:ne180100]((__n128 *)(v273 + 296), (__n128 *)&v304);
  std::string::~string(&v304);
  std::string::basic_string[abi:ne180100]((__n128 *)(v273 + 320), (__n128 *)&v303);
  std::string::~string(&v303);
  std::string::basic_string[abi:ne180100]((__n128 *)(v273 + 344), (__n128 *)&v302);
  std::string::~string(&v302);
  std::string::basic_string[abi:ne180100]((__n128 *)(v273 + 368), (__n128 *)&v301);
  std::string::~string(&v301);
  std::string::basic_string[abi:ne180100]((__n128 *)(v273 + 392), (__n128 *)&v300);
  std::string::~string(&v300);
  std::string::basic_string[abi:ne180100]((__n128 *)(v273 + 416), (__n128 *)&v299);
  std::string::~string(&v299);
  std::string::basic_string[abi:ne180100]((__n128 *)(v273 + 440), (__n128 *)&v298);
  std::string::~string(&v298);
  std::string::basic_string[abi:ne180100]((__n128 *)(v273 + 464), (__n128 *)&v297);
  std::string::~string(&v297);
  void *v274 = v264;
  *(void *)(v273 + 496) = v266;
  *(void *)(v273 + 504) = v270;
  *(void *)(v273 + 512) = v272;
  *(unsigned char *)(v273 + 52std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v275 & 1;
  *(unsigned char *)(v273 + 521) = v276 & 1;
}

uint64_t sub_2495A82F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v62 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696C0028);
  uint64_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v63 = a1;
  sub_2495B70B0();
  uint64_t v5 = sub_2495B73F0();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(uint64_t **)(v6 + 48);
  int v8 = ((uint64_t (*)(char *, uint64_t, uint64_t))v7)((char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v5);
  uint64_t v61 = v6;
  if (v8 == 1)
  {
    uint64_t v9 = sub_2495786B0((uint64_t)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696C0028);
    uint64_t v60 = 0;
    int v10 = 1;
  }
  else
  {
    uint64_t v59 = v7;
    uint64_t v11 = sub_2495B76A0();
    int v58 = &v57;
    uint64_t v12 = *(void *)(v11 - 8);
    MEMORY[0x270FA5388](v11);
    uint64_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B73E0();
    (*(void (**)(char *, uint64_t))(v6 + 8))((char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696C0030);
    uint64_t v57 = (uint64_t)&v57;
    uint64_t v16 = *(void *)(*(void *)(v15 - 8) + 64);
    MEMORY[0x270FA5388](v15 - 8);
    uint64_t v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7670();
    uint64_t v18 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    MEMORY[0x270FA5388](v18);
    sub_24957864C((uint64_t)v17, (uint64_t)v17, &qword_2696C0030);
    uint64_t v19 = sub_2495B7690();
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v19);
    if (v21 == 1)
    {
      uint64_t v9 = sub_2495786B0((uint64_t)v17, &qword_2696C0030);
      int v10 = 1;
      uint64_t v60 = 0;
    }
    else
    {
      MEMORY[0x270FA5388](v21);
      uint64_t v23 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v23, v17, v19);
      uint64_t result = sub_2495B70E0();
      if (result < (uint64_t)0xFFFFFFFF80000000)
      {
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      if (result > 0x7FFFFFFF)
      {
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      uint64_t v60 = result;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
      uint64_t v9 = sub_2495786B0((uint64_t)v17, &qword_2696C0030);
      int v10 = 0;
    }
    unint64_t v7 = v59;
  }
  MEMORY[0x270FA5388](v9);
  uint64_t v25 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B70B0();
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v7)(v25, 1, v5) == 1)
  {
    sub_2495786B0((uint64_t)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696C0028);
    unsigned int v26 = 0;
    char v27 = 1;
    if (v10) {
      goto LABEL_11;
    }
LABEL_19:
    uint64_t Optional = ctb::bridging::makeOptional(v60);
    uint64_t v66 = Optional;
    if (v27) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
  LODWORD(v5std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v10;
  uint64_t v30 = sub_2495B76A0();
  uint64_t v59 = &v57;
  uint64_t v31 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v33 = (char *)&v57 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B73E0();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v25, v5);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696C0030);
  uint64_t v35 = *(void *)(*(void *)(v34 - 8) + 64);
  MEMORY[0x270FA5388](v34 - 8);
  unint64_t v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_2495B7660();
  uint64_t v37 = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v33, v30);
  MEMORY[0x270FA5388](v37);
  sub_24957864C((uint64_t)&v57 - v36, (uint64_t)&v57 - v36, &qword_2696C0030);
  uint64_t v38 = sub_2495B7690();
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48))((char *)&v57 - v36, 1, v38);
  if (v40 == 1)
  {
    sub_2495786B0((uint64_t)&v57 - v36, &qword_2696C0030);
    char v27 = 1;
    unsigned int v26 = 0;
  }
  else
  {
    MEMORY[0x270FA5388](v40);
    uint64_t v42 = (char *)&v57 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v42, (char *)&v57 - v36, v38);
    uint64_t result = sub_2495B70E0();
    if (result < (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    unsigned int v26 = result;
    if (result > 0x7FFFFFFF)
    {
LABEL_31:
      __break(1u);
      return result;
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v38);
    sub_2495786B0((uint64_t)&v57 - v36, &qword_2696C0030);
    char v27 = 0;
  }
  if ((v58 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_11:
  uint64_t v66 = 0;
  std::optional<ctb::CPMGroupManagement::Response>::optional[abi:ne180100](&v66);
  uint64_t Optional = v66;
  if (v27)
  {
LABEL_12:
    uint64_t v65 = 0;
    std::optional<ctb::CPMGroupManagement::Response>::optional[abi:ne180100](&v65);
    uint64_t v29 = v65;
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v29 = ctb::bridging::makeOptional(v26);
  uint64_t v65 = v29;
LABEL_21:
  char v43 = sub_2495B70D0();
  uint64_t v44 = sub_2495B70F0();
  uint64_t v45 = *(void *)(v44 - 8);
  MEMORY[0x270FA5388](v44);
  unint64_t v47 = (char *)&v57 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B7100();
  uint64_t v48 = sub_2495B70E0();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v47, v44);
  if (v48 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v48 > 0x7FFFFFFF)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char v49 = v43 & 1;
  uint64_t v50 = v63;
  char v51 = sub_2495B7120() & 1;
  char v52 = sub_2495B70C0() & 1;
  char v53 = sub_2495B7130() & 1;
  uint64_t v54 = sub_2495B7110();
  if (!v54) {
    uint64_t v54 = MEMORY[0x263F8EE78];
  }
  sub_2495A4C48(v54, MEMORY[0x270FB0710], &qword_2696C0038, MEMORY[0x270FB0710], MEMORY[0x270FB0720], v64);
  uint64_t v55 = sub_2495B7140();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v50, v55);
  uint64_t v56 = v62;
  uint64_t *v62 = Optional;
  v56[1] = v29;
  *((unsigned char *)v56 + 16) = v49;
  *((_DWORD *)v56 + 5) = v48;
  *((unsigned char *)v56 + 24) = v51;
  *((unsigned char *)v56 + 25) = v52;
  *((unsigned char *)v56 + 26) = v53;
  std::set<std::string>::set[abi:ne180100](v56 + 4, v64);
  return std::set<std::string>::~set[abi:ne180100]((uint64_t)v64);
}

uint64_t sub_2495A8BCC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v83 = a2;
  int v82 = sub_2495B7230();
  uint64_t v3 = sub_2495B7200();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B7210();
  uint64_t v81 = sub_2495B71F0();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v80 = sub_2495B7220();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696C0040);
  uint64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_2495B71E0();
  MEMORY[0x270FA5388](v10);
  sub_24957864C((uint64_t)v9, (uint64_t)v9, &qword_2696C0040);
  uint64_t v11 = sub_2495B6EE0();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11);
  uint64_t v84 = a1;
  if (v13 == 1)
  {
    long long v94 = 0u;
    long long v95 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    __n128 v90 = 0u;
    long long v91 = 0u;
    LOBYTE(v96) = 1;
  }
  else
  {
    uint64_t v14 = *(void *)(v12 + 64);
    MEMORY[0x270FA5388](v13);
    unint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))((char *)&v73 - v15, v9, v11);
    MEMORY[0x270FA5388](v16);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))((char *)&v73 - v15, (char *)&v73 - v15, v11);
    sub_2495A9940((uint64_t)&v73 - v15, v100);
    __n128 Optional = ctb::bridging::makeOptional((uint64_t)v100, (uint64_t)&v90);
    (*(void (**)(char *, uint64_t, __n128))(v12 + 8))((char *)&v73 - v15, v11, Optional);
    LOBYTE(v96) = 0;
    a1 = v84;
  }
  sub_2495786B0((uint64_t)v9, &qword_2696C0040);
  if (v96)
  {
    memset(v101, 0, 96);
    std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::optional[abi:ne180100](v101);
    sub_2495786B0((uint64_t)&v90, &qword_2696C0048);
  }
  else
  {
    __n128 v18 = std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::optional[abi:ne180100]((uint64_t)v101, (long long *)&v90);
    std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::~optional(&v90, v18);
  }
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696C0050);
  uint64_t v20 = *(void *)(*(void *)(v19 - 8) + 64);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_2495B71B0();
  MEMORY[0x270FA5388](v22);
  sub_24957864C((uint64_t)v21, (uint64_t)v21, &qword_2696C0050);
  uint64_t v23 = sub_2495B7500();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48))(v21, 1, v23);
  if (v25 == 1)
  {
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    __n128 v90 = 0u;
    char v99 = 1;
  }
  else
  {
    uint64_t v78 = &v73;
    uint64_t v79 = &v73;
    uint64_t v26 = *(void *)(v24 + 64);
    MEMORY[0x270FA5388](v25);
    unint64_t v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 32))((char *)&v73 - v27, v21, v23);
    MEMORY[0x270FA5388](v28);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))((char *)&v73 - v27, (char *)&v73 - v27, v23);
    sub_2495A9D4C((uint64_t)&v73 - v27, (uint64_t)v100);
    __n128 v29 = ctb::bridging::makeOptional((uint64_t)v100, (uint64_t)&v90);
    (*(void (**)(char *, uint64_t, __n128))(v24 + 8))((char *)&v73 - v27, v23, v29);
    char v99 = 0;
    a1 = v84;
  }
  sub_2495786B0((uint64_t)v21, &qword_2696C0050);
  if (v99)
  {
    memset(v100, 0, sizeof(v100));
    std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::optional[abi:ne180100](v100);
    sub_2495786B0((uint64_t)&v90, &qword_2696C0058);
  }
  else
  {
    __n128 v30 = std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::optional[abi:ne180100]((uint64_t)v100, (long long *)&v90);
    std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::~optional(&v90, v30);
  }
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696C0060);
  uint64_t v32 = *(void *)(*(void *)(v31 - 8) + 64);
  MEMORY[0x270FA5388](v31 - 8);
  uint64_t v33 = (char *)&v73 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_2495B71D0();
  MEMORY[0x270FA5388](v34);
  sub_24957864C((uint64_t)v33, (uint64_t)v33, &qword_2696C0060);
  uint64_t v35 = sub_2495B6DA0();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48))(v33, 1, v35);
  if (v37 == 1)
  {
    *(void *)&long long v96 = 0;
    long long v94 = 0u;
    long long v95 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    __n128 v90 = 0u;
    long long v91 = 0u;
    BYTE8(v96) = 1;
  }
  else
  {
    uint64_t v78 = &v73;
    uint64_t v79 = &v73;
    uint64_t v38 = *(void *)(v36 + 64);
    MEMORY[0x270FA5388](v37);
    unint64_t v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 32))((char *)&v73 - v39, v33, v35);
    MEMORY[0x270FA5388](v40);
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))((char *)&v73 - v39, (char *)&v73 - v39, v35);
    sub_2495AA0B0((uint64_t)&v73 - v39, (uint64_t)v88);
    ctb::bridging::makeOptional((uint64_t)v88, (uint64_t)&v90);
    (*(void (**)(char *, uint64_t))(v36 + 8))((char *)&v73 - v39, v35);
    BYTE8(v96) = 0;
    a1 = v84;
  }
  sub_2495786B0((uint64_t)v33, &qword_2696C0060);
  if (BYTE8(v96))
  {
    uint64_t v89 = 0;
    memset(v88, 0, sizeof(v88));
    std::optional<ctb::chatbot::CommunicationAddress>::optional[abi:ne180100](v88);
    sub_2495786B0((uint64_t)&v90, &qword_2696C0068);
  }
  else
  {
    std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::optional[abi:ne180100]((uint64_t)v88, (long long *)&v90);
    std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::~optional(&v90);
  }
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696C0070);
  uint64_t v42 = *(void *)(*(void *)(v41 - 8) + 64);
  MEMORY[0x270FA5388](v41 - 8);
  char v43 = (char *)&v73 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_2495B71C0();
  MEMORY[0x270FA5388](v44);
  sub_24957864C((uint64_t)v43, (uint64_t)v43, &qword_2696C0070);
  uint64_t v45 = sub_2495B7570();
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48))(v43, 1, v45);
  if (v47 == 1)
  {
    long long v91 = 0u;
    long long v92 = 0u;
    __n128 v90 = 0u;
    LOBYTE(v93) = 1;
  }
  else
  {
    uint64_t v76 = &v73;
    uint64_t v77 = &v73;
    uint64_t v75 = &v73;
    uint64_t v48 = *(void *)(v46 + 64);
    MEMORY[0x270FA5388](v47);
    unint64_t v49 = (v48 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v50 = (*(uint64_t (**)(char *, char *, uint64_t))(v46 + 32))((char *)&v73 - v49, v43, v45);
    uint64_t v79 = &v73;
    MEMORY[0x270FA5388](v50);
    char v51 = (char *)&v73 - v49;
    char v52 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
    uint64_t v74 = (char *)&v73 - v49;
    v52((char *)&v73 - v49, (char *)&v73 - v49, v45);
    uint64_t v53 = sub_2495B6630();
    uint64_t v78 = &v73;
    uint64_t v54 = *(void *)(v53 - 8);
    MEMORY[0x270FA5388](v53);
    uint64_t v56 = (char *)&v73 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2495B7540();
    unint64_t v57 = sub_2495B6610();
    unint64_t v59 = v58;
    (*(void (**)(char *, uint64_t))(v54 + 8))(v56, v53);
    std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v57, v59, (std::string *)&v90);
    uint64_t v60 = sub_2495B7550();
    if (v61) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = v60;
    }
    uint64_t v63 = sub_2495B7560();
    uint64_t v64 = *(void (**)(char *, uint64_t))(v46 + 8);
    v64(v51, v45);
    std::string::basic_string[abi:ne180100](&v85, &v90);
    std::string::~string((std::string *)&v90);
    *((void *)&v86 + 1) = v62;
    *(void *)&long long v87 = v63;
    __n128 v65 = ctb::bridging::makeOptional((uint64_t)&v85, (uint64_t)&v90);
    ((void (*)(char *, uint64_t, __n128))v64)(v74, v45, v65);
    LOBYTE(v93) = 0;
    a1 = v84;
  }
  sub_2495786B0((uint64_t)v43, &qword_2696C0070);
  if (v93)
  {
    long long v86 = 0u;
    long long v87 = 0u;
    __n128 v85 = 0u;
    std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::optional[abi:ne180100](&v85);
    uint64_t v66 = sub_2495B7240();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v66 - 8) + 8))(a1, v66);
    sub_2495786B0((uint64_t)&v90, &qword_2696C0078);
  }
  else
  {
    uint64_t v67 = sub_2495B7240();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v67 - 8) + 8))(a1, v67);
    std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::optional[abi:ne180100]((uint64_t)&v85, (long long *)&v90);
    std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::~optional((uint64_t)&v90);
  }
  uint64_t v68 = v83;
  *uint64_t v83 = v82 & 1;
  uint64_t v69 = v80;
  *((void *)v68 + 1) = v81;
  *((void *)v68 + 2) = v69;
  __n128 v70 = std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::optional[abi:ne180100]((uint64_t)(v68 + 24), v101);
  std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::~optional(v101, v70);
  __n128 v71 = std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::optional[abi:ne180100]((uint64_t)(v68 + 120), (long long *)v100);
  std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::~optional(v100, v71);
  std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::optional[abi:ne180100]((uint64_t)(v68 + 264), v88);
  std::optional<ctb::ProvisioningConfiguration::Messaging::Chat>::~optional(v88);
  std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::optional[abi:ne180100]((uint64_t)(v68 + 368), (long long *)&v85);
  return std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::~optional((uint64_t)&v85);
}

uint64_t sub_2495A97F8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!sub_2495B6EF0())
  {
    memset(v8, 0, sizeof(v8));
    char v9 = 1;
    goto LABEL_5;
  }
  uint64_t v4 = swift_bridgeObjectRetain();
  sub_2495A4C48(v4, MEMORY[0x270FB0648], &qword_2696C0010, MEMORY[0x270FB0648], MEMORY[0x270FB0658], v8);
  char v9 = 0;
  swift_bridgeObjectRelease();
  if (v9)
  {
LABEL_5:
    memset(v10, 0, sizeof(v10));
    std::set<std::string>::set[abi:ne180100](v10);
    uint64_t v6 = sub_2495B6F00();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
    sub_2495786B0((uint64_t)v8, &qword_2696C0008);
    goto LABEL_6;
  }
  uint64_t v5 = sub_2495B6F00();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  std::set<std::string>::set[abi:ne180100](v10, v8);
  std::set<std::string>::~set[abi:ne180100]((uint64_t)v8);
LABEL_6:
  std::set<std::string>::set[abi:ne180100](a2, v10);
  return std::set<std::string>::~set[abi:ne180100]((uint64_t)v10);
}

void sub_2495A9940(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD90);
  uint64_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  MEMORY[0x270FA5388](v3 - 8);
  sub_2495B6EC0();
  uint64_t v5 = sub_2495B6630();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v7((char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v5) == 1)
  {
    sub_2495786B0((uint64_t)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696BFD90);
    unint64_t v8 = 0;
    unint64_t v9 = 0xE000000000000000;
  }
  else
  {
    unint64_t v8 = sub_2495B6610();
    unint64_t v9 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))((char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  }
  uint64_t v11 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v8, v9, &v31);
  MEMORY[0x270FA5388](v11);
  sub_2495B6EA0();
  if (v7((char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v5) == 1)
  {
    sub_2495786B0((uint64_t)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696BFD90);
    unint64_t v12 = 0;
    unint64_t v13 = 0xE000000000000000;
  }
  else
  {
    unint64_t v12 = sub_2495B6610();
    unint64_t v13 = v14;
    (*(void (**)(char *, uint64_t))(v6 + 8))((char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  }
  uint64_t v15 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v12, v13, &v30);
  MEMORY[0x270FA5388](v15);
  uint64_t v16 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6EB0();
  if (v7(v16, 1, v5) == 1)
  {
    sub_2495786B0((uint64_t)v16, &qword_2696BFD90);
    unint64_t v17 = 0;
    unint64_t v18 = 0xE000000000000000;
  }
  else
  {
    unint64_t v17 = sub_2495B6610();
    unint64_t v18 = v19;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v5);
  }
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v17, v18, &v29);
  uint64_t v20 = sub_2495B6E70();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v28 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6E80();
  uint64_t v24 = sub_2495B6E60();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  LOBYTE(v2std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = sub_2495B6E90();
  char v25 = sub_2495B6ED0();
  uint64_t v26 = sub_2495B6EE0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(a1, v26);
  unint64_t v27 = v28;
  std::string::basic_string[abi:ne180100](v28, (__n128 *)&v31);
  std::string::~string(&v31);
  std::string::basic_string[abi:ne180100]((__n128 *)((char *)v27 + 24), (__n128 *)&v30);
  std::string::~string(&v30);
  std::string::basic_string[abi:ne180100](v27 + 3, (__n128 *)&v29);
  std::string::~string(&v29);
  v27[4].n128_u64[1] = v24;
  v27[5].n128_u8[0] = v20 & 1;
  v27[5].n128_u8[1] = v25 & 1;
}

void sub_2495A9D4C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_2495B7470();
  uint64_t v5 = (ctb::bridging *)MEMORY[0x24C5A2120]();
  uint64_t v36 = v4;
  if (v6)
  {
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    std::optional<unsigned long>::optional[abi:ne180100](&v41);
    uint64_t v33 = v42;
    uint64_t v34 = v41;
  }
  else
  {
    ctb::bridging::makeOptional(v5);
    uint64_t v33 = v7 & 1;
    uint64_t v34 = v8;
    uint64_t v41 = v8;
    uint64_t v42 = v33;
  }
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD90);
  uint64_t v35 = &v32;
  uint64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
  MEMORY[0x270FA5388](v9 - 8);
  sub_2495B74A0();
  uint64_t v11 = sub_2495B6630();
  uint64_t v12 = *(void *)(v11 - 8);
  unint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13((char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v11) == 1)
  {
    sub_2495786B0((uint64_t)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_2696BFD90);
    unint64_t v14 = 0;
    unint64_t v15 = 0xE000000000000000;
  }
  else
  {
    unint64_t v14 = sub_2495B6610();
    unint64_t v15 = v16;
    (*(void (**)(char *, uint64_t))(v12 + 8))((char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  }
  uint64_t v17 = std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v14, v15, &v40);
  MEMORY[0x270FA5388](v17);
  unint64_t v18 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B74C0();
  if (v13(v18, 1, v11) == 1)
  {
    sub_2495786B0((uint64_t)v18, &qword_2696BFD90);
    unint64_t v19 = 0;
    unint64_t v20 = 0xE000000000000000;
  }
  else
  {
    unint64_t v19 = sub_2495B6610();
    unint64_t v20 = v21;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
  }
  uint64_t v22 = v36;
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v19, v20, &v39);
  unint64_t v23 = sub_2495B74B0();
  if (!v24)
  {
    unint64_t v23 = 0;
    unint64_t v24 = 0xE000000000000000;
  }
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v23, v24, &v38);
  unint64_t v25 = sub_2495B74E0();
  if (!v26)
  {
    unint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
  }
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v25, v26, &v37);
  char v27 = sub_2495B7490();
  char v28 = sub_2495B7480();
  uint64_t v29 = sub_2495B74D0();
  uint64_t v30 = sub_2495B7500();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(a1, v30);
  uint64_t v31 = v33;
  *(void *)a2 = v22;
  *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v34;
  *(void *)(a2 + 16) = v31;
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 24), (__n128 *)&v40);
  std::string::~string(&v40);
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 48), (__n128 *)&v39);
  std::string::~string(&v39);
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 72), (__n128 *)&v38);
  std::string::~string(&v38);
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 96), (__n128 *)&v37);
  std::string::~string(&v37);
  *(unsigned char *)(a2 + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v27 & 1;
  *(unsigned char *)(a2 + 121) = v28 & 1;
  *(void *)(a2 + 12std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v29;
}

void sub_2495AA0B0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = sub_2495B6D50();
  HIDWORD(v22) = v4;
  uint64_t v27 = sub_2495B6D90();
  uint64_t v26 = sub_2495B6D40();
  uint64_t v5 = MEMORY[0x24C5A1990]();
  char v7 = v6;
  int v25 = sub_2495B6D20();
  int v24 = sub_2495B6D30();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696BFD90);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B6D80();
  uint64_t v11 = sub_2495B6630();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_2495786B0((uint64_t)v10, &qword_2696BFD90);
    unint64_t v13 = 0;
    unint64_t v14 = 0xE000000000000000;
  }
  else
  {
    unint64_t v13 = sub_2495B6610();
    unint64_t v14 = v15;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  if (v7) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v5;
  }
  if ((v22 & 0x100000000) != 0) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v23;
  }
  std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(v13, v14, &v29);
  unint64_t v18 = sub_2495B6D70();
  sub_249595C64(v18, v19, (uint64_t)v28);
  uint64_t v20 = sub_2495B6DA0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(a1, v20);
  uint64_t v21 = v27;
  *(void *)a2 = v17;
  *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v21;
  *(void *)(a2 + 16) = v26;
  *(void *)(a2 + 24) = v16;
  *(unsigned char *)(a2 + 32) = v25 & 1;
  *(unsigned char *)(a2 + 33) = v24 & 1;
  std::string::basic_string[abi:ne180100]((__n128 *)(a2 + 40), (__n128 *)&v29);
  std::string::~string(&v29);
  std::optional<std::string>::optional[abi:ne180100](a2 + 64, v28);
  ctb::chatbot::URIEntry::~URIEntry((void **)v28);
}

uint64_t sub_2495AA2F8(uint64_t a1)
{
  return std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::push_back[abi:ne180100](v1, a1);
}

uint64_t sub_2495AA31C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696C0080);
  MEMORY[0x270FA5388](v2 - 8);
  int v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2495B7400();
  uint64_t v5 = sub_2495B7420();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_2495786B0((uint64_t)v4, &qword_2696C0080);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = sub_2495B7410();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  sub_2495B7440();
  sub_2495B7430();
  sub_2495B7450();
  uint64_t v8 = sub_2495B7460();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
  return v7;
}

double ctb::bridging::makeOptional@<D0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = std::__optional_destruct_base<ctb::ProvisioningConfiguration::IMS3GPP,false>::__optional_destruct_base[abi:ne180100]<ctb::ProvisioningConfiguration::IMS3GPP>(a2, a1).n128_u64[0];
  return result;
}

double ctb::bridging::makeOptional@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = std::__optional_destruct_base<ctb::ProvisioningConfiguration::AccessControl,false>::__optional_destruct_base[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl>(a2, a1).n128_u64[0];
  return result;
}

uint64_t ctb::bridging::makeOptional@<X0>(uint64_t this@<X0>, Vers a2@<0:X1, 8:X2>, uint64_t a3@<X8>)
{
  *(void *)a3 = this;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = a2.var0;
  *(unsigned char *)(a3 + 16) = 1;
  return this;
}

__n128 ctb::ProvisioningConfiguration::Token::Token(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __n128 result = *(__n128 *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(__n128 *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  return result;
}

void ctb::ProvisioningConfiguration::Token::~Token(void **this)
{
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void **std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::~vector[abi:ne180100](void **a1)
{
  uint64_t v3 = a1;
  std::vector<ctb::ProvisioningConfiguration::AccessControl::Server>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t sub_2495AA604(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *std::optional<ctb::ProvisioningConfiguration::Messaging::Chatbot>::optional[abi:ne180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[88] = 0;
  return result;
}

unsigned char *std::optional<ctb::ProvisioningConfiguration::Messaging::FileTransfer>::optional[abi:ne180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[136] = 0;
  return result;
}

unsigned char *std::optional<ctb::ProvisioningConfiguration::Messaging::StandaloneMsg>::optional[abi:ne180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[40] = 0;
  return result;
}

uint64_t std::__optional_destruct_base<ctb::ProvisioningConfiguration::Messaging,false>::__optional_destruct_base[abi:ne180100]<ctb::ProvisioningConfiguration::Messaging>(uint64_t result, long long *a2)
{
  long long v2 = *a2;
  *(void *)(result + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t result = v2;
  *(unsigned char *)(result + 24) = 0;
  *(unsigned char *)(result + 112) = 0;
  if (*((unsigned char *)a2 + 112))
  {
    long long v3 = *(long long *)((char *)a2 + 24);
    *(void *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 5);
    *(_OWORD *)(result + 24) = v3;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    long long v4 = a2[3];
    *(void *)(result + 64) = *((void *)a2 + 8);
    *(_OWORD *)(result + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *((void *)a2 + 6) = 0;
    long long v5 = *(long long *)((char *)a2 + 72);
    *(void *)(result + 8std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *((void *)a2 + 11);
    *(_OWORD *)(result + 72) = v5;
    *((void *)a2 + 1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *((void *)a2 + 11) = 0;
    *((void *)a2 + 9) = 0;
    uint64_t v6 = *((void *)a2 + 12);
    *(_WORD *)(result + 104) = *((_WORD *)a2 + 52);
    *(void *)(result + 96) = v6;
    *(unsigned char *)(result + 112) = 1;
  }
  *(unsigned char *)(result + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(unsigned char *)(result + 256) = 0;
  if (*((unsigned char *)a2 + 256))
  {
    long long v7 = *(long long *)((char *)a2 + 120);
    *(unsigned char *)(result + 136) = *((unsigned char *)a2 + 136);
    *(_OWORD *)(result + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v7;
    long long v8 = a2[9];
    *(void *)(result + 16std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 20);
    *(_OWORD *)(result + 144) = v8;
    *((void *)a2 + 19) = 0;
    *((void *)a2 + 2std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *((void *)a2 + 1std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    long long v9 = *(long long *)((char *)a2 + 168);
    *(void *)(result + 184) = *((void *)a2 + 23);
    *(_OWORD *)(result + 16std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v9;
    *((void *)a2 + 22) = 0;
    *((void *)a2 + 23) = 0;
    *((void *)a2 + 21) = 0;
    long long v10 = a2[12];
    *(void *)(result + 20std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *((void *)a2 + 26);
    *(_OWORD *)(result + 192) = v10;
    *((void *)a2 + 24) = 0;
    *((void *)a2 + 25) = 0;
    *((void *)a2 + 26) = 0;
    long long v11 = *(long long *)((char *)a2 + 216);
    *(void *)(result + 232) = *((void *)a2 + 29);
    *(_OWORD *)(result + 216) = v11;
    *((void *)a2 + 27) = 0;
    *((void *)a2 + 2std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *((void *)a2 + 29) = 0;
    *(_OWORD *)(result + 24std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = a2[15];
    *(unsigned char *)(result + 256) = 1;
  }
  *(unsigned char *)(result + 264) = 0;
  *(unsigned char *)(result + 36std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  if (*((unsigned char *)a2 + 360))
  {
    long long v12 = *(long long *)((char *)a2 + 264);
    long long v13 = *(long long *)((char *)a2 + 280);
    *(_WORD *)(result + 296) = *((_WORD *)a2 + 148);
    *(_OWORD *)(result + 264) = v12;
    *(_OWORD *)(result + 28std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v13;
    long long v14 = a2[19];
    *(void *)(result + 32std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 40);
    *(_OWORD *)(result + 304) = v14;
    *((void *)a2 + 39) = 0;
    *((void *)a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
    *((void *)a2 + 3std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(unsigned char *)(result + 32std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(unsigned char *)(result + 352) = 0;
    if (*((unsigned char *)a2 + 352))
    {
      long long v15 = *(long long *)((char *)a2 + 328);
      *(void *)(result + 344) = *((void *)a2 + 43);
      *(_OWORD *)(result + 32std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v15;
      *((void *)a2 + 42) = 0;
      *((void *)a2 + 43) = 0;
      *((void *)a2 + 41) = 0;
      *(unsigned char *)(result + 352) = 1;
    }
    *(unsigned char *)(result + 36std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 1;
  }
  *(unsigned char *)(result + 36std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 40std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  if (*((unsigned char *)a2 + 408))
  {
    long long v16 = a2[23];
    *(void *)(result + 384) = *((void *)a2 + 48);
    *(_OWORD *)(result + 36std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v16;
    *((void *)a2 + 47) = 0;
    *((void *)a2 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *((void *)a2 + 46) = 0;
    *(_OWORD *)(result + 392) = *(long long *)((char *)a2 + 392);
    *(unsigned char *)(result + 40std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 1;
  }
  *(unsigned char *)(result + 416) = 1;
  return result;
}

__n128 std::__optional_destruct_base<ctb::ProvisioningConfiguration::IMS3GPP,false>::__optional_destruct_base[abi:ne180100]<ctb::ProvisioningConfiguration::IMS3GPP>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  if (*((unsigned char *)a2 + 48))
  {
    long long v3 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v3;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    *(unsigned char *)(a1 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 1;
  }
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  long long v4 = a2 + 4;
  uint64_t v5 = *((void *)a2 + 8);
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = a1 + 64;
  uint64_t v7 = *((void *)a2 + 9);
  *(void *)(a1 + 72) = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    *((void *)a2 + 7) = v4;
    *long long v4 = 0;
    *((void *)a2 + 9) = 0;
  }
  else
  {
    *(void *)(a1 + 56) = v6;
  }
  *(void *)(a1 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 10);
  long long v8 = (void *)a2 + 11;
  uint64_t v9 = *((void *)a2 + 11);
  *(void *)(a1 + 8std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v9;
  uint64_t v10 = a1 + 88;
  uint64_t v11 = *((void *)a2 + 12);
  *(void *)(a1 + 96) = v11;
  if (v11)
  {
    *(void *)(v9 + 16) = v10;
    *((void *)a2 + 1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v8;
    *long long v8 = 0;
    *((void *)a2 + 12) = 0;
  }
  else
  {
    *(void *)(a1 + 8std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v10;
  }
  long long v12 = *(long long *)((char *)a2 + 104);
  *(void *)(a1 + 12std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 15);
  *(_OWORD *)(a1 + 104) = v12;
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 13) = 0;
  long long v13 = a2[8];
  *(void *)(a1 + 144) = *((void *)a2 + 18);
  *(_OWORD *)(a1 + 12std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v13;
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 1std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *((void *)a2 + 16) = 0;
  long long v14 = *(long long *)((char *)a2 + 152);
  *(void *)(a1 + 16std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *((void *)a2 + 21);
  *(_OWORD *)(a1 + 152) = v14;
  long long v15 = a2[11];
  *(void *)(a1 + 192) = *((void *)a2 + 24);
  *(_OWORD *)(a1 + 176) = v15;
  *((void *)a2 + 22) = 0;
  *((void *)a2 + 23) = 0;
  *((void *)a2 + 24) = 0;
  long long v16 = *(long long *)((char *)a2 + 200);
  *(void *)(a1 + 216) = *((void *)a2 + 27);
  *(_OWORD *)(a1 + 20std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v16;
  *((void *)a2 + 25) = 0;
  *((void *)a2 + 26) = 0;
  *((void *)a2 + 27) = 0;
  long long v17 = a2[14];
  *(void *)(a1 + 24std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 30);
  *(_OWORD *)(a1 + 224) = v17;
  *((void *)a2 + 2std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *((void *)a2 + 29) = 0;
  *((void *)a2 + 3std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  long long v18 = *(long long *)((char *)a2 + 248);
  *(void *)(a1 + 264) = *((void *)a2 + 33);
  *(_OWORD *)(a1 + 24std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v18;
  *((void *)a2 + 31) = 0;
  *((void *)a2 + 32) = 0;
  *((void *)a2 + 33) = 0;
  long long v19 = a2[17];
  *(void *)(a1 + 28std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *((void *)a2 + 36);
  *(_OWORD *)(a1 + 272) = v19;
  *((void *)a2 + 34) = 0;
  *((void *)a2 + 35) = 0;
  *((void *)a2 + 36) = 0;
  long long v20 = *(long long *)((char *)a2 + 296);
  *(void *)(a1 + 312) = *((void *)a2 + 39);
  *(_OWORD *)(a1 + 296) = v20;
  *((void *)a2 + 37) = 0;
  *((void *)a2 + 3std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *((void *)a2 + 39) = 0;
  long long v21 = a2[20];
  *(void *)(a1 + 336) = *((void *)a2 + 42);
  *(_OWORD *)(a1 + 32std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v21;
  *((void *)a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *((void *)a2 + 41) = 0;
  *((void *)a2 + 42) = 0;
  long long v22 = *(long long *)((char *)a2 + 344);
  *(void *)(a1 + 36std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 45);
  *(_OWORD *)(a1 + 344) = v22;
  *((void *)a2 + 43) = 0;
  *((void *)a2 + 44) = 0;
  *((void *)a2 + 45) = 0;
  long long v23 = a2[23];
  *(void *)(a1 + 384) = *((void *)a2 + 48);
  *(_OWORD *)(a1 + 36std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v23;
  *((void *)a2 + 46) = 0;
  *((void *)a2 + 47) = 0;
  *((void *)a2 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  long long v24 = *(long long *)((char *)a2 + 392);
  *(void *)(a1 + 40std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *((void *)a2 + 51);
  *(_OWORD *)(a1 + 392) = v24;
  *((void *)a2 + 49) = 0;
  *((void *)a2 + 5std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *((void *)a2 + 51) = 0;
  long long v25 = a2[26];
  *(void *)(a1 + 432) = *((void *)a2 + 54);
  *(_OWORD *)(a1 + 416) = v25;
  *((void *)a2 + 52) = 0;
  *((void *)a2 + 53) = 0;
  *((void *)a2 + 54) = 0;
  long long v26 = *(long long *)((char *)a2 + 440);
  *(void *)(a1 + 456) = *((void *)a2 + 57);
  *(_OWORD *)(a1 + 44std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v26;
  *((void *)a2 + 55) = 0;
  *((void *)a2 + 56) = 0;
  *((void *)a2 + 57) = 0;
  long long v27 = a2[29];
  *(void *)(a1 + 48std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((void *)a2 + 60);
  *(_OWORD *)(a1 + 464) = v27;
  *((void *)a2 + 5std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *((void *)a2 + 59) = 0;
  *((void *)a2 + 6std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  __n128 result = *(__n128 *)((char *)a2 + 488);
  long long v29 = *(long long *)((char *)a2 + 504);
  *(_WORD *)(a1 + 52std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *((_WORD *)a2 + 260);
  *(__n128 *)(a1 + 48std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  *(_OWORD *)(a1 + 504) = v29;
  *(unsigned char *)(a1 + 52std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 1;
  return result;
}

__n128 std::__optional_destruct_base<ctb::ProvisioningConfiguration::AccessControl,false>::__optional_destruct_base[abi:ne180100]<ctb::ProvisioningConfiguration::AccessControl>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v2 = (void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v3;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)a2 = v2;
    void *v2 = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 0;
  *(unsigned char *)(a1 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 1;
  return result;
}

uint64_t sub_2495AAC9C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x69616E626D756874;
  }
  else {
    uint64_t v3 = 1701603686;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE90000000000006CLL;
  }
  if (a2) {
    uint64_t v5 = 0x69616E626D756874;
  }
  else {
    uint64_t v5 = 1701603686;
  }
  if (a2) {
    unint64_t v6 = 0xE90000000000006CLL;
  }
  else {
    unint64_t v6 = 0xE400000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_2495B89B0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2495AAD3C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x656D686361747461;
  }
  else {
    uint64_t v3 = 0x7265646E6572;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000;
  }
  else {
    unint64_t v4 = 0xEA0000000000746ELL;
  }
  if (a2) {
    uint64_t v5 = 0x656D686361747461;
  }
  else {
    uint64_t v5 = 0x7265646E6572;
  }
  if (a2) {
    unint64_t v6 = 0xEA0000000000746ELL;
  }
  else {
    unint64_t v6 = 0xE600000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_2495B89B0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2495AADE0()
{
  return sub_2495B8A30();
}

uint64_t sub_2495AAE60()
{
  return sub_2495B8A30();
}

uint64_t sub_2495AAEE4()
{
  sub_2495B86C0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2495AAF4C()
{
  sub_2495B86C0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2495AAFB8()
{
  return sub_2495B8A30();
}

uint64_t sub_2495AB038()
{
  return sub_2495B8A30();
}

CTBlastDoorSupport::FileInfo::FileType_optional __swiftcall FileInfo.FileType.init(rawValue:)(Swift::String rawValue)
{
  return (CTBlastDoorSupport::FileInfo::FileType_optional)sub_2495AB20C(v1);
}

uint64_t FileInfo.FileType.rawValue.getter()
{
  if (*v0) {
    return 0x69616E626D756874;
  }
  else {
    return 1701603686;
  }
}

uint64_t sub_2495AB0F8(char *a1, char *a2)
{
  return sub_2495AAC9C(*a1, *a2);
}

uint64_t sub_2495AB104()
{
  return sub_2495AADE0();
}

uint64_t sub_2495AB10C()
{
  return sub_2495AAEE4();
}

uint64_t sub_2495AB114()
{
  return sub_2495AB038();
}

CTBlastDoorSupport::FileInfo::FileType_optional sub_2495AB11C(Swift::String *a1)
{
  return FileInfo.FileType.init(rawValue:)(*a1);
}

uint64_t sub_2495AB128@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = FileInfo.FileType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_2495AB150()
{
  return sub_2495B8770();
}

uint64_t sub_2495AB1B0()
{
  return sub_2495B8760();
}

CTBlastDoorSupport::FileInfo::FileDisposition_optional __swiftcall FileInfo.FileDisposition.init(rawValue:)(Swift::String rawValue)
{
  return (CTBlastDoorSupport::FileInfo::FileDisposition_optional)sub_2495AB20C(v1);
}

uint64_t sub_2495AB20C@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_2495B88F0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t FileInfo.FileDisposition.rawValue.getter()
{
  if (*v0) {
    return 0x656D686361747461;
  }
  else {
    return 0x7265646E6572;
  }
}

uint64_t sub_2495AB2A8(char *a1, char *a2)
{
  return sub_2495AAD3C(*a1, *a2);
}

uint64_t sub_2495AB2B4()
{
  return sub_2495AAE60();
}

uint64_t sub_2495AB2BC()
{
  return sub_2495AAF4C();
}

uint64_t sub_2495AB2C4()
{
  return sub_2495AAFB8();
}

CTBlastDoorSupport::FileInfo::FileDisposition_optional sub_2495AB2CC(Swift::String *a1)
{
  return FileInfo.FileDisposition.init(rawValue:)(*a1);
}

uint64_t sub_2495AB2D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = FileInfo.FileDisposition.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_2495AB300()
{
  return sub_2495B8770();
}

uint64_t sub_2495AB360()
{
  return sub_2495B8760();
}

void FileInfo.fileType.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

void FileInfo.fileDisposition.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

uint64_t FileInfo.fileSize.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t FileInfo.fileName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FileInfo.contentType.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FileInfo.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for FileInfo() + 36);
  uint64_t v4 = sub_2495B6630();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for FileInfo()
{
  uint64_t result = qword_2696C00F0;
  if (!qword_2696C00F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t FileInfo.untilDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for FileInfo() + 40);
  uint64_t v4 = sub_2495B6700();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_2495AB56C(char a1)
{
  return *(void *)&aFiletypefiledi[8 * a1];
}

BOOL sub_2495AB58C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2495AB5A0()
{
  return sub_2495AB56C(*v0);
}

uint64_t sub_2495AB5A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2495ACFE4(a1, a2);
  *a3 = result;
  return result;
}

void sub_2495AB5D0(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_2495AB5DC(uint64_t a1)
{
  unint64_t v2 = sub_2495AB928();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2495AB618(uint64_t a1)
{
  unint64_t v2 = sub_2495AB928();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t FileInfo.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696C0088);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  long long v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2495AB928();
  sub_2495B8A50();
  v10[15] = *v3;
  v10[14] = 0;
  sub_2495AB97C();
  sub_2495B8990();
  if (!v2)
  {
    v10[13] = v3[1];
    v10[12] = 1;
    sub_2495AB9D0();
    sub_2495B8960();
    v10[11] = 2;
    sub_2495B8980();
    v10[10] = 3;
    sub_2495B8950();
    v10[9] = 4;
    sub_2495B8970();
    type metadata accessor for FileInfo();
    v10[8] = 5;
    sub_2495B6630();
    sub_2495AC060(&qword_2696C00A8, MEMORY[0x270FA8E08]);
    sub_2495B8990();
    v10[7] = 6;
    sub_2495B6700();
    sub_2495AC060(&qword_2696C00B0, MEMORY[0x270FA9328]);
    sub_2495B8990();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_2495AB928()
{
  unint64_t result = qword_2696C0090;
  if (!qword_2696C0090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696C0090);
  }
  return result;
}

unint64_t sub_2495AB97C()
{
  unint64_t result = qword_2696C0098;
  if (!qword_2696C0098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696C0098);
  }
  return result;
}

unint64_t sub_2495AB9D0()
{
  unint64_t result = qword_2696C00A0;
  if (!qword_2696C00A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696C00A0);
  }
  return result;
}

uint64_t FileInfo.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2696C00B8);
  uint64_t v4 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for FileInfo();
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a1[3];
  uint64_t v32 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_2495AB928();
  uint64_t v11 = v6;
  sub_2495B8A40();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
  }
  uint64_t v12 = v4;
  char v40 = 0;
  sub_2495ABFB8();
  uint64_t v13 = v31;
  long long v14 = v11;
  sub_2495B8940();
  uint64_t v15 = (uint64_t)v9;
  *uint64_t v9 = v41;
  char v38 = 1;
  sub_2495AC00C();
  sub_2495B8910();
  v9[1] = v39;
  char v37 = 2;
  *((void *)v9 + 1) = sub_2495B8930();
  char v36 = 3;
  *((void *)v9 + 2) = sub_2495B8900();
  *((void *)v9 + 3) = v16;
  char v35 = 4;
  *((void *)v9 + 4) = sub_2495B8920();
  *((void *)v9 + 5) = v17;
  uint64_t v18 = sub_2495B6630();
  long long v29 = v27;
  uint64_t v28 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  long long v20 = (char *)v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v34 = 5;
  sub_2495AC060(&qword_2696C00D0, MEMORY[0x270FA8E08]);
  sub_2495B8940();
  uint64_t v21 = v15 + *(int *)(v7 + 36);
  long long v22 = *(void (**)(uint64_t, char *, uint64_t))(v28 + 32);
  v27[1] = v18;
  v22(v21, v20, v18);
  uint64_t v23 = sub_2495B6700();
  long long v29 = v27;
  v27[0] = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  long long v25 = (char *)v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v33 = 6;
  sub_2495AC060(&qword_2696C00D8, MEMORY[0x270FA9328]);
  sub_2495B8940();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v13);
  (*(void (**)(uint64_t, char *, uint64_t))(v27[0] + 32))(v15 + *(int *)(v7 + 40), v25, v23);
  sub_2495AC0A8(v15, v30);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
  return sub_2495AC10C(v15);
}

unint64_t sub_2495ABFB8()
{
  unint64_t result = qword_2696C00C0;
  if (!qword_2696C00C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696C00C0);
  }
  return result;
}

unint64_t sub_2495AC00C()
{
  unint64_t result = qword_2696C00C8;
  if (!qword_2696C00C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696C00C8);
  }
  return result;
}

uint64_t sub_2495AC060(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2495AC0A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FileInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2495AC10C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FileInfo();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_2495AC16C()
{
  unint64_t result = qword_2696C00E0;
  if (!qword_2696C00E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696C00E0);
  }
  return result;
}

unint64_t sub_2495AC1C4()
{
  unint64_t result = qword_2696C00E8;
  if (!qword_2696C00E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696C00E8);
  }
  return result;
}

uint64_t sub_2495AC218@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FileInfo.init(from:)(a1, a2);
}

uint64_t sub_2495AC230(void *a1)
{
  return FileInfo.encode(to:)(a1);
}

void *initializeBufferWithCopyOfBuffer for FileInfo(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(unsigned char *)(a1 + 1) = *((unsigned char *)a2 + 1);
    *(_OWORD *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(_OWORD *)(a2 + 1);
    uint64_t v7 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v7;
    uint64_t v8 = *(int *)(a3 + 36);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = a2[5];
    uint64_t v11 = sub_2495B6630();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 40);
    long long v14 = (char *)v4 + v13;
    uint64_t v15 = (uint64_t)a2 + v13;
    uint64_t v16 = sub_2495B6700();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v4;
}

uint64_t destroy for FileInfo(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = sub_2495B6630();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  uint64_t v7 = sub_2495B6700();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

uint64_t initializeWithCopy for FileInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_OWORD *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(void *)(a2 + 40);
  uint64_t v10 = sub_2495B6630();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_2495B6700();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t assignWithCopy for FileInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_2495B6630();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 40);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_2495B6700();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for FileInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(void *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_2495B6630();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_2495B6700();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for FileInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_OWORD *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_2495B6630();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_2495B6700();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for FileInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2495AC8B8);
}

uint64_t sub_2495AC8B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_2495B6630();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 36);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_2495B6700();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 40);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for FileInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2495AC9F8);
}

uint64_t sub_2495AC9F8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 4std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_2495B6630();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 36);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_2495B6700();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 40);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_2495ACB24()
{
  uint64_t result = sub_2495B6630();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_2495B6700();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FileInfo.FileType()
{
  return &type metadata for FileInfo.FileType;
}

unsigned char *_s18CTBlastDoorSupport8FileInfoV8FileTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2495ACD08);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FileInfo.FileDisposition()
{
  return &type metadata for FileInfo.FileDisposition;
}

uint64_t getEnumTagSinglePayload for FileInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FileInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2495ACE9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

unsigned char *sub_2495ACEC4(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for FileInfo.CodingKeys()
{
  return &type metadata for FileInfo.CodingKeys;
}

unint64_t sub_2495ACEE0()
{
  unint64_t result = qword_2696C0100;
  if (!qword_2696C0100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696C0100);
  }
  return result;
}

unint64_t sub_2495ACF38()
{
  unint64_t result = qword_2696C0108;
  if (!qword_2696C0108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696C0108);
  }
  return result;
}

unint64_t sub_2495ACF90()
{
  unint64_t result = qword_2696C0110;
  if (!qword_2696C0110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696C0110);
  }
  return result;
}

uint64_t sub_2495ACFE4(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x65707954656C6966 && a2 == 0xE800000000000000;
  if (v3 || (sub_2495B89B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x70736944656C6966 && a2 == 0xEF6E6F697469736FLL || (sub_2495B89B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657A6953656C6966 && a2 == 0xE800000000000000 || (sub_2495B89B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656D614E656C6966 && a2 == 0xE800000000000000 || (sub_2495B89B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x54746E65746E6F63 && a2 == 0xEB00000000657079 || (sub_2495B89B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (sub_2495B89B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7461446C69746E75 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = sub_2495B89B0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

unint64_t sub_2495AD2BC()
{
  unint64_t result = qword_2696C0118;
  if (!qword_2696C0118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696C0118);
  }
  return result;
}

unint64_t sub_2495AD310()
{
  unint64_t result = qword_2696C0120;
  if (!qword_2696C0120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696C0120);
  }
  return result;
}

uint64_t Bool.init<A>(fromCxx:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3) & 1;
}

uint64_t CxxConvertibleToCollection.forEach(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v45 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v8 = (char *)&v33 - v7;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v44 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  char v43 = (char *)&v33 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v33 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v33 - v18;
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  (*(void (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v20 = *(void *)(AssociatedConformanceWitness + 8);
  char v35 = v19;
  uint64_t v48 = v17;
  uint64_t v42 = v20;
  if (sub_2495B8650())
  {
    uint64_t v21 = *(void (**)(char *, uint64_t))(v10 + 8);
    v21(v48, v9);
    return ((uint64_t (*)(char *, uint64_t))v21)(v35, v9);
  }
  else
  {
    uint64_t v49 = v4;
    long long v22 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 24);
    char v39 = (void (**)(char *))(v45 + 2);
    char v40 = v22;
    uint64_t v37 = v10 + 32;
    char v38 = v45 + 1;
    uint64_t v41 = AssociatedConformanceWitness + 24;
    uint64_t v36 = AssociatedConformanceWitness + 32;
    uint64_t v45 = (void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v23 = AssociatedTypeWitness;
    uint64_t v24 = v35;
    long long v25 = (void (**)(char *, char *, uint64_t))(v10 + 32);
    long long v26 = v43;
    while (1)
    {
      long long v27 = (void (*)(unsigned char *, void))v40(v50, v9, AssociatedConformanceWitness);
      (*v39)(v8);
      v27(v50, 0);
      uint64_t v28 = v49;
      v46(v8);
      uint64_t v49 = v28;
      if (v28) {
        break;
      }
      (*v38)(v8, v23);
      long long v29 = *v25;
      uint64_t v30 = v44;
      (*v25)(v44, v24, v9);
      (*(void (**)(uint64_t))(AssociatedConformanceWitness + 32))(v9);
      uint64_t v21 = *v45;
      (*v45)(v30, v9);
      v29(v24, v26, v9);
      if (sub_2495B8650())
      {
        v21(v48, v9);
        return ((uint64_t (*)(char *, uint64_t))v21)(v35, v9);
      }
    }
    (*v38)(v8, v23);
    uint64_t v32 = *v45;
    (*v45)(v48, v9);
    return ((uint64_t (*)(char *, uint64_t))v32)(v24, v9);
  }
}

uint64_t CxxConvertibleToCollection<>.forEach(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v32 = a1;
  uint64_t v33 = a5;
  uint64_t v31 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v26 - v8;
  uint64_t v10 = sub_2495B87D0();
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v26 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v34, a3);
  sub_2495B8740();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v33 = v19;
  uint64_t v34 = v17;
  sub_2495B87E0();
  uint64_t v21 = v27;
  long long v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  if (v22(v13, 1, AssociatedTypeWitness) != 1)
  {
    long long v29 = v22;
    uint64_t v30 = AssociatedConformanceWitness;
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    uint64_t v24 = (void (**)(char *, uint64_t))(v21 + 8);
    while (1)
    {
      v23(v9, v13, AssociatedTypeWitness);
      v32(v9);
      if (v5) {
        break;
      }
      (*v24)(v9, AssociatedTypeWitness);
      sub_2495B87E0();
      if (v29(v13, 1, AssociatedTypeWitness) == 1) {
        return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v33, v34);
      }
    }
    (*v24)(v9, AssociatedTypeWitness);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v33, v34);
}

uint64_t RangeReplaceableCollection.init<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return sub_2495ADCFC(a1, a2, a3, a4, MEMORY[0x263F8D858], (void (*)(char *))sub_2495ADCA4, a5);
}

uint64_t sub_2495ADBA8(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - v3, a1);
  return sub_2495B87A0();
}

uint64_t sub_2495ADCA4(uint64_t a1)
{
  return sub_2495ADF08(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_2495ADBA8);
}

uint64_t SetAlgebra.init<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return sub_2495ADCFC(a1, a2, a3, a4, MEMORY[0x263F8DB58], (void (*)(char *))sub_2495ADEDC, a5);
}

uint64_t sub_2495ADCFC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void (*a5)(uint64_t, uint64_t)@<X5>, void (*a6)(char *)@<X6>, uint64_t a7@<X8>)
{
  a5(a1, a3);
  void v14[2] = a1;
  v14[3] = a2;
  v14[4] = a3;
  v14[5] = a4;
  v14[6] = a7;
  return CxxConvertibleToCollection.forEach(_:)(a6, (uint64_t)v14, a2, a4);
}

uint64_t sub_2495ADD8C(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, AssociatedTypeWitness);
  sub_2495B8860();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, AssociatedTypeWitness);
}

uint64_t sub_2495ADEDC(uint64_t a1)
{
  return sub_2495ADF08(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_2495ADD8C);
}

uint64_t sub_2495ADF08(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[6], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t CxxDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v30 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v28 = (char *)&v27 - v8;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v27 - v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 104))(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(a3 + 144))(a2, a3);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v17 = sub_2495B8650();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v13, v9);
  if (v17)
  {
    v18(v15, v9);
    uint64_t v19 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v30, 1, 1, v19);
  }
  else
  {
    uint64_t v21 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v31, v9, AssociatedConformanceWitness);
    long long v22 = v28;
    uint64_t v23 = AssociatedTypeWitness;
    (*(void (**)(char *))(v7 + 16))(v28);
    v21(v31, 0);
    v18(v15, v9);
    uint64_t v24 = swift_getAssociatedConformanceWitness();
    uint64_t v25 = v30;
    (*(void (**)(uint64_t, uint64_t))(v24 + 56))(v23, v24);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v23);
    uint64_t v26 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 0, 1, v26);
  }
}

uint64_t CxxDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v57 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  char v52 = *(uint64_t (***)(char *, void (*)(char *, uint64_t, uint64_t)))(AssociatedTypeWitness - 8);
  uint64_t v53 = (void (*)(char *, uint64_t, uint64_t))AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t AssociatedConformanceWitness = (char *)&v45 - v8;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v48 = *(void *)(v9 - 8);
  uint64_t v49 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v47 = (char *)&v45 - v10;
  uint64_t v54 = swift_getAssociatedTypeWitness();
  uint64_t v46 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  uint64_t v45 = (char *)&v45 - v11;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v45 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v56 = (char *)&v45 - v20;
  uint64_t v21 = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v50 = (char *)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v55 = (char *)&v45 - v25;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(a1, 1, v21) == 1)
  {
    uint64_t v26 = sub_2495B87D0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(a1, v26);
    uint64_t v27 = AssociatedConformanceWitness;
    uint64_t v28 = v57;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 128))(v57, a3, a4);
    uint64_t v29 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v28, v29);
    return v52[1](v27, v53);
  }
  else
  {
    uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 32);
    v53(v55, a1, v21);
    uint64_t v31 = v56;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 112))(v57, a3, a4);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v19, v31, v12);
    (*(void (**)(uint64_t, uint64_t))(a4 + 152))(a3, a4);
    uint64_t AssociatedConformanceWitness = (char *)swift_getAssociatedConformanceWitness();
    char v32 = sub_2495B8650();
    uint64_t v33 = *(void (**)(char *, uint64_t))(v13 + 8);
    v33(v16, v12);
    char v52 = (uint64_t (**)(char *, void (*)(char *, uint64_t, uint64_t)))v33;
    v33(v19, v12);
    if (v32)
    {
      ((void (*)(char *, uint64_t))v52)(v56, v12);
      uint64_t v34 = v50;
      v53(v50, (uint64_t)v55, v21);
      uint64_t v35 = v54;
      uint64_t v36 = swift_getAssociatedConformanceWitness();
      uint64_t v37 = v45;
      (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v36 + 24))(v57, v34, v35, v36);
      char v38 = v47;
      (*(void (**)(char *, uint64_t, uint64_t))(a4 + 120))(v37, a3, a4);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v38, v49);
      return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v37, v35);
    }
    else
    {
      uint64_t v39 = swift_getAssociatedTypeWitness();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(v57, v39);
      char v40 = v50;
      v53(v50, (uint64_t)v55, v21);
      uint64_t v41 = v56;
      uint64_t v42 = (void (*)(unsigned char *, void))(*((uint64_t (**)(unsigned char *, uint64_t))AssociatedConformanceWitness
                                                   + 3))(v58, v12);
      uint64_t v43 = v54;
      uint64_t v44 = swift_getAssociatedConformanceWitness();
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 64))(v40, v43, v44);
      v42(v58, 0);
      return ((uint64_t (*)(char *, uint64_t))v52)(v41, v12);
    }
  }
}

void (*CxxDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x58uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *uint64_t v9 = a3;
  swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_2495B87D0();
  void v9[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v9[4] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[5] = malloc(v12);
  uint64_t v13 = malloc(v12);
  v9[6] = v13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[7] = AssociatedTypeWitness;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = v15;
  v9[8] = v15;
  size_t v17 = *(void *)(v15 + 64);
  v9[9] = malloc(v17);
  v9[10] = malloc(v17);
  (*(void (**)(void))(v16 + 16))();
  CxxDictionary.subscript.getter(a2, a3, a4, (uint64_t)v13);
  return sub_2495AEBC8;
}

void sub_2495AEBC8(uint64_t **a1, char a2)
{
  int v2 = *a1;
  uint64_t v3 = (void *)(*a1)[9];
  uint64_t v4 = (void *)(*a1)[10];
  if (a2)
  {
    uint64_t v5 = v2[8];
    uint64_t v7 = (void *)v2[5];
    uint64_t v6 = (void *)v2[6];
    uint64_t v8 = v2[3];
    uint64_t v9 = v2[4];
    uint64_t v10 = v2[1];
    uint64_t v12 = v2[7];
    uint64_t v11 = *v2;
    (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v7, v6, v8);
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v3, v4, v12);
    CxxDictionary.subscript.setter((uint64_t)v7, (uint64_t)v3, v11, v10);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
  }
  else
  {
    uint64_t v7 = (void *)v2[5];
    uint64_t v6 = (void *)v2[6];
    CxxDictionary.subscript.setter((uint64_t)v6, (uint64_t)v4, *v2, v2[1]);
  }
  free(v4);
  free(v3);
  free(v6);
  free(v7);

  free(v2);
}

uint64_t CxxDictionary.filter(_:)@<X0>(uint64_t (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (**a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v83 = a1;
  uint64_t v84 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v78 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v58 = (char *)&v52 - v10;
  uint64_t v80 = swift_getAssociatedTypeWitness();
  uint64_t v74 = *(void *)(v80 - 8);
  MEMORY[0x270FA5388](v80);
  int v82 = (char *)&v52 - v11;
  uint64_t v79 = swift_getAssociatedTypeWitness();
  __n128 v65 = *(void (***)(char *, uint64_t))(v79 - 8);
  MEMORY[0x270FA5388](v79);
  uint64_t v81 = (char *)&v52 - v12;
  uint64_t v53 = swift_getAssociatedTypeWitness();
  uint64_t v62 = *(void (***)(char *, char *, uint64_t))(v53 - 8);
  MEMORY[0x270FA5388](v53);
  uint64_t v88 = (char *)&v52 - v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v77 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v76 = (char *)&v52 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v52 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v52 - v23;
  uint64_t v25 = a4[12];
  uint64_t v60 = a5;
  v25(a3, (uint64_t)a4);
  a4[17](a3, (uint64_t)a4);
  a4[18](a3, (uint64_t)a4);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v27 = *(void *)(AssociatedConformanceWitness + 8);
  __n128 v85 = v22;
  uint64_t v75 = v27;
  if (sub_2495B8650())
  {
    uint64_t v28 = *(void (**)(char *, uint64_t))(v15 + 8);
    v28(v85, v14);
    return ((uint64_t (*)(char *, uint64_t))v28)(v24, v14);
  }
  else
  {
    uint64_t v73 = *(uint64_t (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 24);
    uint64_t v57 = a3;
    uint64_t v29 = v53;
    uint64_t v30 = swift_getAssociatedConformanceWitness();
    __n128 v70 = *(void (**)(uint64_t, uint64_t))(v30 + 32);
    uint64_t v71 = v30 + 32;
    uint64_t v72 = v30;
    uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v30 + 56);
    uint64_t v69 = v30 + 56;
    uint64_t v67 = (void (**)(char *))(v62 + 2);
    uint64_t v63 = (void (**)(char *, uint64_t))(v74 + 8);
    uint64_t v64 = v65 + 1;
    __n128 v65 = (void (**)(char *, uint64_t))(v62 + 1);
    uint64_t v56 = a4;
    uint64_t v55 = a4 + 15;
    uint64_t v54 = v78 + 1;
    uint64_t v62 = (void (**)(char *, char *, uint64_t))(v15 + 32);
    uint64_t v74 = AssociatedConformanceWitness + 24;
    uint64_t v61 = AssociatedConformanceWitness + 32;
    uint64_t v78 = (void (**)(char *, uint64_t))(v15 + 8);
    uint64_t v31 = v24;
    uint64_t v32 = v29;
    uint64_t v33 = v88;
    uint64_t v66 = v31;
    while (1)
    {
      uint64_t v39 = v14;
      uint64_t v40 = v14;
      uint64_t v41 = AssociatedConformanceWitness;
      uint64_t v42 = (void (*)(char *, void))v73(v87, v40, AssociatedConformanceWitness);
      (*v67)(v33);
      v42(v87, 0);
      uint64_t v43 = v81;
      uint64_t v44 = v72;
      v70(v32, v72);
      uint64_t v45 = v82;
      v68(v32, v44);
      char v46 = v83(v43, v45);
      if (v6) {
        break;
      }
      char v47 = v46;
      uint64_t v86 = 0;
      (*v63)(v45, v80);
      (*v64)(v43, v79);
      uint64_t v48 = v88;
      if (v47)
      {
        uint64_t v49 = v58;
        v56[15]((uint64_t)v88, v57);
        (*v54)(v49, AssociatedTypeWitness);
      }
      (*v65)(v48, v32);
      uint64_t v34 = *v62;
      uint64_t v35 = v77;
      uint64_t v36 = v66;
      (*v62)(v77, v66, v39);
      uint64_t AssociatedConformanceWitness = v41;
      uint64_t v14 = v39;
      uint64_t v37 = v76;
      (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v14, AssociatedConformanceWitness);
      uint64_t v28 = *v78;
      (*v78)(v35, v14);
      v34(v36, v37, v14);
      uint64_t v33 = v88;
      char v38 = sub_2495B8650();
      uint64_t v6 = v86;
      if (v38)
      {
        uint64_t v24 = v36;
        v28(v85, v14);
        return ((uint64_t (*)(char *, uint64_t))v28)(v24, v14);
      }
    }
    (*v63)(v45, v80);
    (*v64)(v43, v79);
    (*v65)(v88, v32);
    char v51 = *v78;
    (*v78)(v85, v39);
    v51(v66, v39);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v57 - 8) + 8))(v60);
  }
}

uint64_t CxxOptional.init(nilLiteral:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t CxxOptional.hasValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t CxxOptional.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(uint64_t (**)(void))(a2 + 32))())
  {
    (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);
    uint64_t v8 = AssociatedTypeWitness;
    uint64_t v9 = a3;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v11 = swift_getAssociatedTypeWitness();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v8 = v11;
    uint64_t v9 = a3;
    uint64_t v10 = 1;
  }

  return v7(v9, v10, 1, v8);
}

uint64_t Optional.init<A>(fromCxx:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = sub_2495B87D0();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v16 - v12;
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4))
  {
    (*(void (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(v13, 0, 1, a2);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v13, v10);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);
    return v15(a5, 1, 1, a2);
  }
}

uint64_t CxxSet.init<A>(_:)@<X0>(void (*a1)(char *, char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v43 = a5;
  uint64_t v44 = a1;
  uint64_t v49 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v45 = (char *)&v39 - v9;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v50 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v39 - v11;
  uint64_t v13 = sub_2495B87D0();
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v39 - v15;
  uint64_t v17 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v40 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v39 - v21;
  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(a4 + 40);
  uint64_t v47 = a6;
  uint64_t v48 = a4;
  v23(v49, a4);
  (*(void (**)(char *, void, uint64_t))(v17 + 16))(v19, v44, a3);
  sub_2495B8740();
  uint64_t v24 = v20;
  uint64_t v25 = v22;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_2495B87E0();
  uint64_t v27 = v50;
  uint64_t v28 = v50 + 48;
  uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
  if (v29(v16, 1, v10) != 1)
  {
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    uint64_t v43 = v48 + 48;
    uint64_t v44 = v30;
    uint64_t v50 = v27 + 32;
    uint64_t v41 = (void (**)(char *, uint64_t))(v27 + 8);
    ++v42;
    do
    {
      v44(v12, v16, v10);
      uint64_t v31 = v16;
      uint64_t v32 = v10;
      uint64_t v33 = v28;
      uint64_t v34 = AssociatedConformanceWitness;
      uint64_t v35 = v24;
      uint64_t v36 = v45;
      (*(void (**)(char *, uint64_t))(v48 + 48))(v12, v49);
      uint64_t v37 = v36;
      uint64_t v24 = v35;
      uint64_t AssociatedConformanceWitness = v34;
      uint64_t v28 = v33;
      uint64_t v10 = v32;
      uint64_t v16 = v31;
      (*v42)(v37, AssociatedTypeWitness);
      (*v41)(v12, v10);
      sub_2495B87E0();
    }
    while (v29(v31, 1, v10) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v25, v24);
}

uint64_t CxxSet.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)v18 - v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 56))(a1, a2, a3);
  swift_getAssociatedConformanceWitness();
  LOBYTE(a2) = sub_2495B8840();
  uint64_t v13 = sub_2495B8830();
  if ((a2 & 1) == 0)
  {
    if (v13 > 63) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v16 = sub_2495B8820();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, AssociatedTypeWitness);
    char v14 = v16 > 0;
    return v14 & 1;
  }
  if (v13 < 65) {
    goto LABEL_5;
  }
LABEL_3:
  v18[1] = 0;
  sub_24956FB04();
  sub_2495B8810();
  char v14 = sub_2495B8640();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, AssociatedTypeWitness);
  v15(v12, AssociatedTypeWitness);
  return v14 & 1;
}

uint64_t CxxUniqueSet.insert(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = *(void *)(a4 + 8);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  char v14 = (char *)&v23 - v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a2, a3, v10);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v11, AssociatedConformanceWitness);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v25, v11, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v16 = LOBYTE(v25[0]);
  uint64_t v17 = swift_getAssociatedConformanceWitness();
  uint64_t v18 = (void (*)(void *, void))(*(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 24))(v25, AssociatedTypeWitness, v17);
  uint64_t v20 = v19;
  uint64_t v21 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v24, v20, v21);
  v18(v25, 0);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, AssociatedTypeWitness);
  return v16;
}

uint64_t CxxRandomAccessCollection.startIndex.getter()
{
  return 0;
}

uint64_t CxxRandomAccessCollection.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F9E0A0](a1, *(void *)(*(void *)(*(void *)(a2 + 16) + 8) + 8));
}

uint64_t CxxRandomAccessCollection.count.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v82 = a1;
  uint64_t v2 = *(void *)(*(void *)(a2 + 8) + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v81 = swift_getAssociatedConformanceWitness();
  uint64_t v74 = *(void *)(*(void *)(v81 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v72 = (char *)&v70 - v3;
  uint64_t v4 = swift_checkMetadataState();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v70 - v9;
  uint64_t v11 = swift_checkMetadataState();
  uint64_t v83 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v71 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v75 = (char *)&v70 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v78 = (char *)&v70 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v79 = (char *)&v70 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v77 = (char *)&v70 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v76 = (char *)&v70 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v70 - v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v70 - v27;
  uint64_t v29 = v82;
  (*(void (**)(uint64_t, uint64_t))(v2 + 40))(v82, v2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v29, v2);
  (*(void (**)(char *, char *, uint64_t))(AssociatedConformanceWitness + 32))(v10, v8, v4);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v5 + 8);
  v30(v8, v4);
  uint64_t v31 = v10;
  uint64_t v32 = (void *)v83;
  v30(v31, v4);
  char v33 = sub_2495B8840();
  uint64_t v34 = (void (*)(char *, char *, uint64_t))v32[2];
  v34(v26, v28, v11);
  if ((v33 & 1) == 0)
  {
    uint64_t v36 = (void (*)(char *, uint64_t))v32[1];
    v36(v26, v11);
    goto LABEL_22;
  }
  uint64_t v35 = sub_2495B8830();
  uint64_t v36 = (void (*)(char *, uint64_t))v32[1];
  v36(v26, v11);
  if (v35 <= 64) {
    goto LABEL_21;
  }
  uint64_t v37 = v76;
  v34(v76, v28, v11);
  int64_t v85 = 0x8000000000000000;
  if (sub_2495B8840())
  {
    if (sub_2495B8830() < 64)
    {
      uint64_t v38 = sub_2495B8820();
      uint64_t v39 = v37;
      goto LABEL_16;
    }
    sub_24956FB04();
    uint64_t v42 = v77;
    sub_2495B8810();
    goto LABEL_11;
  }
  char v40 = sub_2495B8840();
  uint64_t v41 = sub_2495B8830();
  if ((v40 & 1) == 0)
  {
    if (v41 < 64)
    {
      uint64_t v45 = v76;
      uint64_t v38 = sub_2495B8820();
      uint64_t v39 = v45;
LABEL_16:
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v36)(v39, v11);
      uint64_t v32 = (void *)v83;
      if (v38 < v85) {
        goto LABEL_37;
      }
LABEL_22:
      uint64_t v54 = sub_2495B8830();
      uint64_t v55 = v79;
      v34(v79, v28, v11);
      if (v54 < 65)
      {
        uint64_t v63 = sub_2495B8830();
        v36(v55, v11);
        if (v63 != 64 || (sub_2495B8840() & 1) != 0) {
          goto LABEL_35;
        }
      }
      else
      {
        v36(v55, v11);
      }
      uint64_t v56 = v78;
      v34(v78, v28, v11);
      int64_t v85 = 0x7FFFFFFFFFFFFFFFLL;
      char v57 = sub_2495B8840();
      uint64_t v58 = sub_2495B8830();
      if (v57)
      {
        if (v58 > 64)
        {
          sub_24956FB04();
          unint64_t v59 = v77;
          sub_2495B8810();
          char v60 = sub_2495B8640();
          uint64_t v61 = v56;
          uint64_t v56 = (char *)(v32 + 1);
          v36(v59, v11);
          for (uint64_t i = v61; ; uint64_t i = v67)
          {
            v36(i, v11);
            if ((v60 & 1) == 0) {
              break;
            }
LABEL_32:
            __break(1u);
LABEL_33:
            uint64_t v84 = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v66 = (void (*)(char *, char *, uint64_t))v32[4];
            v32 += 4;
            uint64_t v67 = v77;
            v66(v77, v56, v11);
            sub_24956FB04();
            uint64_t v68 = v75;
            sub_2495B8810();
            char v60 = sub_2495B8640();
            uint64_t v56 = (char *)(v32 - 3);
            v36(v68, v11);
          }
          goto LABEL_35;
        }
      }
      else if (v58 > 63)
      {
        goto LABEL_33;
      }
      uint64_t v64 = sub_2495B8820();
      __n128 v65 = v56;
      uint64_t v56 = (char *)(v32 + 1);
      v36(v65, v11);
      if (v85 < v64) {
        goto LABEL_32;
      }
LABEL_35:
      uint64_t v69 = sub_2495B8820();
      v36(v28, v11);
      return v69;
    }
    v36(v76, v11);
LABEL_21:
    uint64_t v32 = (void *)v83;
    goto LABEL_22;
  }
  if (v41 > 64)
  {
    sub_24956FB04();
    uint64_t v42 = v77;
    sub_2495B8810();
    uint64_t v37 = v76;
LABEL_11:
    char v43 = sub_2495B8640();
    v36(v42, v11);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v36)(v37, v11);
    uint64_t v32 = (void *)v83;
    if ((v43 & 1) == 0) {
      goto LABEL_22;
    }
    goto LABEL_37;
  }
  swift_getAssociatedConformanceWitness();
  sub_2495B89C0();
  char v46 = v77;
  sub_2495B89A0();
  uint64_t v47 = v76;
  char v48 = sub_2495B8640();
  v36(v46, v11);
  uint64_t v49 = v71;
  (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v71, v47, v11);
  if ((v48 & 1) == 0)
  {
    int64_t v50 = v85;
    uint64_t v51 = sub_2495B8820();
    uint64_t v52 = v49;
    uint64_t v53 = v51;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v36)(v52, v11);
    uint64_t v32 = (void *)v83;
    if (v53 < v50) {
      goto LABEL_37;
    }
    goto LABEL_22;
  }
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v36)(v49, v11);
LABEL_37:
  __break(1u);
  return result;
}

void (*CxxRandomAccessCollection.subscript.read(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void *a1)
{
  uint64_t v7 = malloc(0x58uLL);
  *a1 = v7;
  uint64_t v8 = *(void *)(*(void *)(a4 + 8) + 8);
  uint64_t v19 = a3;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = malloc(*(void *)(v20 + 64));
  v7[5] = v11;
  uint64_t v12 = swift_checkMetadataState();
  v7[6] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = v13;
  v7[7] = v13;
  size_t v15 = *(void *)(v13 + 64);
  uint64_t v16 = malloc(v15);
  v7[8] = v16;
  uint64_t v17 = malloc(v15);
  v7[9] = v17;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v19, v8);
  v7[4] = a2;
  swift_getAssociatedConformanceWitness();
  sub_24956FB04();
  sub_2495B8850();
  (*(void (**)(void *, void *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v17, v11, v12, AssociatedConformanceWitness);
  (*(void (**)(void *, uint64_t))(v20 + 8))(v11, AssociatedTypeWitness);
  (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v16, v17, v12);
  v7[10] = (*(uint64_t (**)(void *, uint64_t))(*(void *)(AssociatedConformanceWitness + 8) + 24))(v7, v12);
  return sub_2495B0F00;
}

void sub_2495B0F00(void *a1)
{
  unint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 56);
  uint64_t v3 = *(void **)(*a1 + 64);
  uint64_t v6 = *(void **)(*a1 + 40);
  uint64_t v5 = *(void *)(*a1 + 48);
  (*(void (**)(void, void))(*a1 + 80))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  free(v2);
  free(v3);
  free(v6);

  free(v1);
}

uint64_t CxxRandomAccessCollection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v21 = a1;
  uint64_t v22 = a4;
  uint64_t v5 = *(void *)(*(void *)(a3 + 8) + 8);
  swift_getAssociatedTypeWitness();
  v20[1] = a2;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)v20 - v9;
  uint64_t v11 = swift_checkMetadataState();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v20 - v13;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, v5);
  v23[0] = v21;
  swift_getAssociatedConformanceWitness();
  sub_24956FB04();
  sub_2495B8850();
  (*(void (**)(char *, char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v14, v10, v11, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  size_t v15 = (void (*)(void *, void))(*(uint64_t (**)(void *, uint64_t))(*(void *)(AssociatedConformanceWitness + 8)
                                                                                            + 24))(v23, v11);
  uint64_t v17 = v16;
  uint64_t v18 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v22, v17, v18);
  v15(v23, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t CxxSequenceBox.sequence.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 96));
}

uint64_t CxxSequenceBox.sequence.setter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 40))(v1 + *(void *)(*(void *)v1 + 96), a1);
}

uint64_t (*CxxSequenceBox.sequence.modify())(void)
{
  return std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100];
}

uint64_t CxxSequenceBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 80) - 8) + 16))(v2 + *(void *)(*(void *)v2 + 96), a1);
  return v2;
}

uint64_t CxxSequenceBox.init(_:)(uint64_t a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(v1 + *(void *)(*(void *)v1 + 96), a1);
  return v1;
}

uint64_t CxxSequenceBox.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 96));
  return v0;
}

uint64_t CxxSequenceBox.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 96));
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t CxxIterator.sequence.getter()
{
  return swift_retain();
}

uint64_t CxxIterator.rawIterator.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v6(a2, v4, AssociatedTypeWitness);
}

uint64_t CxxIterator.rawIterator.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40);

  return v6(v4, a1, AssociatedTypeWitness);
}

uint64_t (*CxxIterator.rawIterator.modify())(void)
{
  return std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100];
}

uint64_t CxxIterator.endIterator.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v6(a2, v4, AssociatedTypeWitness);
}

uint64_t CxxIterator.init(sequence:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  type metadata accessor for CxxSequenceBox();
  *a4 = CxxSequenceBox.__allocating_init(_:)(a1);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(a3 + 24);
  type metadata accessor for CxxIterator();
  swift_retain();
  v8(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);

  return swift_release();
}

uint64_t type metadata accessor for CxxSequenceBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for CxxIterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t CxxIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v24 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v25 = v2 + *(int *)(a1 + 36);
  uint64_t v23 = v10;
  ((void (*)(char *))v10)((char *)&v21 - v8);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v12 = sub_2495B8650();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v9, AssociatedTypeWitness);
  if (v12)
  {
    uint64_t v13 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v26, 1, 1, v13);
  }
  else
  {
    uint64_t v21 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v27, AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v16 = v15;
    uint64_t v17 = swift_getAssociatedTypeWitness();
    uint64_t v18 = *(void *)(v17 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v26, v16, v17);
    v21(v27, 0);
    uint64_t v19 = v24;
    uint64_t v20 = v25;
    v23(v24, v25, AssociatedTypeWitness);
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
    v22(v19, AssociatedTypeWitness);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v20, v9, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v26, 0, 1, v17);
  }
}

uint64_t CxxSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return CxxIterator.init(sequence:)(v3, a1, a2, a3);
}

uint64_t CxxVector.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v39 = a1;
  uint64_t v34 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  char v12 = (char *)&v30 - v11;
  uint64_t v13 = sub_2495B87D0();
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v30 - v15;
  uint64_t v31 = a3;
  uint64_t v17 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v30 - v21;
  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(a4 + 40);
  uint64_t v35 = a6;
  uint64_t v36 = a2;
  uint64_t v37 = a4;
  v23(a2, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v39, v31);
  sub_2495B8740();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v38 = v22;
  uint64_t v39 = v20;
  uint64_t v34 = AssociatedConformanceWitness;
  sub_2495B87E0();
  uint64_t v25 = v32;
  uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
  if (v26(v16, 1, AssociatedTypeWitness) != 1)
  {
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
    uint64_t v28 = (void (**)(char *, uint64_t))(v25 + 8);
    do
    {
      v27(v12, v16, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v37 + 48))(v12, v36);
      (*v28)(v12, AssociatedTypeWitness);
      sub_2495B87E0();
    }
    while (v26(v16, 1, AssociatedTypeWitness) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v38, v39);
}

uint64_t CxxVector.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v10 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_2495B8780();
  uint64_t WitnessTable = swift_getWitnessTable();
  CxxVector.init<A>(_:)((uint64_t)&v10, a2, v7, a3, WitnessTable, a4);
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_2495B2018())(void)
{
  return std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100];
}

uint64_t sub_2495B203C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 + *(void *)(*(void *)(*(void *)(result + 16) - 8) + 72);
  return result;
}

uint64_t Optional<A>.pointee.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = *(void *)(v7 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v9, v14, a1);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, a1);
    uint64_t result = sub_2495B88D0();
    __break(1u);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v11 + 32))(v13, v9, v10);
    uint64_t v15 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a2 + 24))(v20, v10, a2);
    uint64_t v17 = v16;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a3, v17, AssociatedTypeWitness);
    v15(v20, 0);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
  }
  return result;
}

uint64_t Optional<A>.successor()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v7 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v14, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a1);
    uint64_t result = sub_2495B88D0();
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    (*(void (**)(uint64_t, uint64_t))(a2 + 32))(v10, a2);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a3, 0, 1, v10);
  }
  return result;
}

uint64_t sub_2495B2560(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

uint64_t sub_2495B259C(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

void (*sub_2495B25D8(uint64_t **a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_2495B2690(v6, a2, *(void *)(a3 - 8));
  return sub_2495B2648;
}

void sub_2495B2648(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_2495B2690(uint64_t *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  a1[1] = v7;
  uint64_t v8 = malloc(*(void *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  Optional<A>.pointee.getter(a2, a3, (uint64_t)v8);
  return sub_2495B2764;
}

void sub_2495B2764(void *a1)
{
  uint64_t v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8))(v1, *a1);

  free(v1);
}

uint64_t sub_2495B27B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Optional<A>.successor()(a1, *(void *)(a2 - 8), a3);
}

uint64_t sub_2495B27B8(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

uint64_t sub_2495B280C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v4, v5);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);

  return v6(v4, a1, v5);
}

uint64_t (*sub_2495B28CC())(void)
{
  return std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100];
}

uint64_t sub_2495B28EC(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

uint64_t sub_2495B2930(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

void *sub_2495B296C@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 72);
  if (v4)
  {
    uint64_t v5 = *result - *a2;
    if (v5 != 0x8000000000000000 || v4 != -1)
    {
      *a4 = v5 / v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_2495B29B8(void *result, void *a2, uint64_t a3)
{
  *result += *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 72) * *a2;
  return result;
}

uint64_t sub_2495B29E4(uint64_t a1)
{
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_2495B2A48()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_2495B2ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 40);
}

uint64_t sub_2495B2AE4()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2495B2B98(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = v7 + v6;
  unint64_t v9 = ((v7 + v6 + ((v6 + 8) & ~v6)) & ~v6) + v7;
  int v10 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v11 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v10 != 0 || v9 > 0x18)
  {
    a1 = (uint64_t *)(v11 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v14 = ~v6;
    uint64_t v15 = (char *)a1 + v6;
    uint64_t v16 = (char *)a2 + v6;
    uint64_t v17 = (unint64_t)(v15 + 8) & v14;
    uint64_t v18 = (unint64_t)(v16 + 8) & v14;
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v19(v17, v18, AssociatedTypeWitness);
    v19((v8 + v17) & v14, (v8 + v18) & v14, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t sub_2495B2CF4(uint64_t a1)
{
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = v3 + 8;
  unint64_t v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (a1 + v4 + 8) & ~v4;
  v9(v5, AssociatedTypeWitness);
  uint64_t v6 = (*(void *)(v8 + 56) + v4 + v5) & ~v4;

  return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6, AssociatedTypeWitness);
}

void *sub_2495B2DCC(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  swift_retain();
  v6(v9, v10, AssociatedTypeWitness);
  v6((*(void *)(v7 + 48) + v8 + v9) & ~v8, (*(void *)(v7 + 48) + v8 + v10) & ~v8, AssociatedTypeWitness);
  return a1;
}

void *sub_2495B2EB4(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 24);
  uint64_t v7 = v5 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ((unint64_t)a2 + v8 + 8) & ~v8;
  v6(((unint64_t)a1 + v8 + 8) & ~v8, v9, AssociatedTypeWitness);
  v6((*(void *)(v7 + 40) + v8 + (((unint64_t)a1 + v8 + 8) & ~v8)) & ~v8, (*(void *)(v7 + 40) + v8 + v9) & ~v8, AssociatedTypeWitness);
  return a1;
}

void *sub_2495B2FA8(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ((unint64_t)a2 + v8 + 8) & ~v8;
  v6(((unint64_t)a1 + v8 + 8) & ~v8, v9, AssociatedTypeWitness);
  v6((*(void *)(v7 + 32) + v8 + (((unint64_t)a1 + v8 + 8) & ~v8)) & ~v8, (*(void *)(v7 + 32) + v8 + v9) & ~v8, AssociatedTypeWitness);
  return a1;
}

void *sub_2495B3088(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 40);
  uint64_t v7 = v5 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ((unint64_t)a2 + v8 + 8) & ~v8;
  v6(((unint64_t)a1 + v8 + 8) & ~v8, v9, AssociatedTypeWitness);
  v6((*(void *)(v7 + 24) + v8 + (((unint64_t)a1 + v8 + 8) & ~v8)) & ~v8, (*(void *)(v7 + 24) + v8 + v9) & ~v8, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_2495B3174(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v10 = ((v9 + v8 + ((v8 + 8) & ~v8)) & ~v8) + v9;
  char v11 = 8 * v10;
  if (v10 <= 3)
  {
    unsigned int v14 = ((a2 - v7 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_23:
      if ((v6 & 0x80000000) != 0)
      {
        uint64_t v17 = *(uint64_t (**)(unint64_t))(v5 + 48);
        return v17(((unint64_t)a1 + v8 + 8) & ~v8);
      }
      else
      {
        uint64_t v16 = *(void *)a1;
        if (*(void *)a1 >= 0xFFFFFFFFuLL) {
          LODWORD(v16) = -1;
        }
        return (v16 + 1);
      }
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_23;
  }
LABEL_15:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *a1;
        break;
      case 3:
        LODWORD(v1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v1std::unique_ptr<ctb::Client::State>::reset[abi:ne180100](this, 0) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v10 | v15) + 1;
}

void sub_2495B3374(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((*(void *)(v6 + 64) + v8 + ((v8 + 8) & ~v8)) & ~v8) + *(void *)(v6 + 64);
  if (a3 <= v9)
  {
    int v11 = 0;
  }
  else if (v10 <= 3)
  {
    unsigned int v14 = ((a3 - v9 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v14))
    {
      int v11 = 4;
    }
    else if (v14 >= 0x100)
    {
      int v11 = 2;
    }
    else
    {
      int v11 = v14 > 1;
    }
  }
  else
  {
    int v11 = 1;
  }
  if (v9 < a2)
  {
    unsigned int v12 = ~v9 + a2;
    if (v10 < 4)
    {
      int v13 = (v12 >> (8 * v10)) + 1;
      if (v10)
      {
        int v15 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v10] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v13;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x2495B3604);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          uint64_t v17 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
          v17((unint64_t)&a1[v8 + 8] & ~v8, a2);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v16 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v16 = (a2 - 1);
          }
          *(void *)a1 = v16;
        }
      }
      return;
  }
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t std.__1.chrono.duration<CLongLong, ratio<_CLong_1, _CLong_1>>.init(_:)()
{
  uint64_t v0 = sub_2495B8A70();
  return std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](v0);
}

uint64_t std.__1.chrono.duration<CLongLong, ratio<_CLong_1, _CLong_1000>>.init(_:)()
{
  uint64_t result = sub_2495B8A70();
  uint64_t v2 = 1000 * result;
  if ((unsigned __int128)(result * (__int128)1000) >> 64 == (1000 * result) >> 63)
  {
    uint64_t result = v2 + v1 / 1000000000000000;
    if (!__OFADD__(v2, v1 / 1000000000000000)) {
      return std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](result);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t std.__1.chrono.duration<CLongLong, ratio<_CLong_1, _CLong_1000000>>.init(_:)()
{
  uint64_t result = sub_2495B8A70();
  uint64_t v2 = 1000000 * result;
  if ((unsigned __int128)(result * (__int128)1000000) >> 64 == (1000000 * result) >> 63)
  {
    uint64_t result = v2 + v1 / 1000000000000;
    if (!__OFADD__(v2, v1 / 1000000000000)) {
      return std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](result);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t std.__1.chrono.duration<CLongLong, ratio<_CLong_1, _CLong_1000000000>>.init(_:)()
{
  uint64_t result = sub_2495B8A70();
  uint64_t v2 = 1000000000 * result;
  if ((unsigned __int128)(result * (__int128)1000000000) >> 64 == (1000000000 * result) >> 63)
  {
    uint64_t result = v2 + v1 / 1000000000;
    if (!__OFADD__(v2, v1 / 1000000000)) {
      return std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](result);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Duration.init(_:)(uint64_t a1)
{
  uint64_t v2 = a1;
  return 1000000000000000000
       * std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)&v2);
}

{
  uint64_t v2;

  uint64_t v2 = a1;
  return 1000000000000000
       * std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)&v2);
}

{
  uint64_t v2;

  uint64_t v2 = a1;
  return 1000000000000
       * std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)&v2);
}

{
  uint64_t v2;

  uint64_t v2 = a1;
  return 1000000000
       * std::__wrap_iter<ctb::ProvisioningConfiguration::AccessControl::Server const*>::operator*[abi:ne180100]((uint64_t)&v2);
}

uint64_t std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a3);
  unint64_t v6 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x1000000000000000) != 0)
  {
LABEL_35:
    std::string::size_type v7 = sub_2495B86E0();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    std::string::size_type v7 = HIBYTE(a2) & 0xF;
  }
  else
  {
    std::string::size_type v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  std::string::reserve(a3, v7);
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v9 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v9) = 1;
  }
  uint64_t v10 = 4 << v9;
  unint64_t v6 = 15;
  while (4 * v8 != v6 >> 14)
  {
    unint64_t v11 = v6 & 0xC;
    unint64_t v12 = v6;
    if (v11 == v10) {
      unint64_t v12 = sub_2495B4DB0(v6, a1, a2);
    }
    unint64_t v13 = v12 >> 16;
    if (v12 >> 16 >= v8)
    {
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      std::string::value_type v15 = sub_2495B8710();
      if (v11 != v10) {
        goto LABEL_24;
      }
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      std::string::value_type v15 = *((unsigned char *)v17 + v13);
      if (v11 != v10) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v14 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((a1 & 0x1000000000000000) == 0) {
        uint64_t v14 = sub_2495B88A0();
      }
      std::string::value_type v15 = *(unsigned char *)(v14 + v13);
      if (v11 != v10)
      {
LABEL_24:
        if ((a2 & 0x1000000000000000) == 0) {
          goto LABEL_11;
        }
        goto LABEL_25;
      }
    }
    unint64_t v6 = sub_2495B4DB0(v6, a1, a2);
    if ((a2 & 0x1000000000000000) == 0)
    {
LABEL_11:
      unint64_t v6 = (v6 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_12;
    }
LABEL_25:
    if (v8 <= v6 >> 16) {
      goto LABEL_34;
    }
    unint64_t v6 = sub_2495B86F0();
LABEL_12:
    std::string::push_back(a3, v15);
  }

  return swift_bridgeObjectRelease();
}

void std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(const char *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a2);
  if (a1)
  {
    size_t v4 = _swift_stdlib_strlen(a1);
    if ((v4 & 0x8000000000000000) != 0)
    {
LABEL_9:
      __break(1u);
    }
    else
    {
      for (size_t i = v4; i; --i)
      {
        int v6 = *a1;
        if (v6 < 0)
        {
          __break(1u);
          goto LABEL_9;
        }
        ++a1;
        std::string::push_back(a2, v6);
      }
    }
  }
}

uint64_t std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, std::basic_string<char16_t> *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a3);
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v6 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v6)
  {
    std::basic_string<char16_t>::value_type v7 = 0;
    uint64_t v8 = 0;
    if ((a2 & 0x1000000000000000) != 0) {
      goto LABEL_12;
    }
    if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
LABEL_8:
    }
      sub_2495B88A0();
LABEL_18:
    for (unsigned int i = sub_2495B88B0(); ; unsigned int i = sub_2495B8870())
    {
      unsigned int v11 = i;
      v8 += v10;
      if (i >= 0x10000)
      {
        std::basic_string<char16_t>::value_type v7 = sub_2495B8A60();
        LOWORD(i) = sub_2495B8A60();
      }
      std::basic_string<char16_t>::push_back(a3, i);
      if (v11 >= 0x10000)
      {
        std::basic_string<char16_t>::push_back(a3, v7);
        std::basic_string<char16_t>::value_type v7 = 0;
      }
      if (v8 >= v6) {
        break;
      }
      if ((a2 & 0x1000000000000000) == 0)
      {
        if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
          goto LABEL_8;
        }
        goto LABEL_18;
      }
LABEL_12:
      ;
    }
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return swift_bridgeObjectRelease();
}

uint64_t std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, std::basic_string<char32_t> *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::vector<ctb::ClientAuthenticityRequest::Method>::vector[abi:ne180100](a3);
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v6 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    while (1)
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        std::basic_string<char32_t>::value_type v9 = sub_2495B8870();
        uint64_t v12 = v11;
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          v16[0] = a1;
          v16[1] = a2 & 0xFFFFFFFFFFFFFFLL;
          std::basic_string<char32_t>::value_type v9 = *((unsigned __int8 *)v16 + v7);
          if (*((char *)v16 + v7) < 0)
          {
            switch(__clz(v9 ^ 0xFF))
            {
              case 0x1Au:
                uint64_t v10 = (char *)v16 + v7;
LABEL_20:
                std::basic_string<char32_t>::value_type v9 = v10[1] & 0x3F | ((v9 & 0x1F) << 6);
                uint64_t v12 = 2;
                break;
              case 0x1Bu:
                unint64_t v13 = (char *)v16 + v7;
LABEL_24:
                std::basic_string<char32_t>::value_type v9 = ((v9 & 0xF) << 12) | ((v13[1] & 0x3F) << 6) | v13[2] & 0x3F;
                uint64_t v12 = 3;
                break;
              case 0x1Cu:
                uint64_t v14 = (char *)v16 + v7;
LABEL_26:
                std::basic_string<char32_t>::value_type v9 = ((v9 & 0xF) << 18) | ((v14[1] & 0x3F) << 12) | ((v14[2] & 0x3F) << 6) | v14[3] & 0x3F;
                uint64_t v12 = 4;
                break;
              default:
                goto LABEL_15;
            }
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000) == 0) {
            uint64_t v8 = sub_2495B88A0();
          }
          std::basic_string<char32_t>::value_type v9 = *(unsigned __int8 *)(v8 + v7);
          if (*(char *)(v8 + v7) < 0)
          {
            switch(__clz(v9 ^ 0xFF))
            {
              case 0x1Au:
                uint64_t v10 = (char *)(v7 + v8);
                goto LABEL_20;
              case 0x1Bu:
                unint64_t v13 = (char *)(v7 + v8);
                goto LABEL_24;
              case 0x1Cu:
                uint64_t v14 = (char *)(v7 + v8);
                goto LABEL_26;
              default:
                break;
            }
          }
        }
LABEL_15:
        uint64_t v12 = 1;
      }
LABEL_16:
      std::basic_string<char32_t>::push_back(a3, v9);
      v7 += v12;
      if (v7 >= v6)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_2495B3F00@<X0>(unint64_t *a1@<X0>, std::string *a2@<X8>)
{
  return std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.init(_:)(*a1, a1[1], a2);
}

uint64_t sub_2495B3F10@<X0>(uint64_t a1@<X0>, std::basic_string<char16_t> *a2@<X8>)
{
  return std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>.init(_:)(*(void *)a1, *(void *)(a1 + 8), a2);
}

uint64_t sub_2495B3F20@<X0>(uint64_t a1@<X0>, std::basic_string<char32_t> *a2@<X8>)
{
  return std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>.init(_:)(*(void *)a1, *(void *)(a1 + 8), a2);
}

BOOL static std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.== infix(_:_:)(const void **a1, unsigned char *a2)
{
  return std::string::compare[abi:ne180100](a1, a2) == 0;
}

uint64_t static std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.+= infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  return std::string::append[abi:ne180100](a1, a2);
}

uint64_t std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.append(_:)(uint64_t *a1)
{
  return std::string::append[abi:ne180100](v1, a1);
}

uint64_t static std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.+ infix(_:_:)@<X0>(std::string *__str@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  size_t v4 = std::string::basic_string(a3, __str);
  return std::string::append[abi:ne180100]((uint64_t)v4, a2);
}

BOOL sub_2495B3FC8(const void **a1, unsigned char *a2)
{
  return std::string::compare[abi:ne180100](a1, a2) == 0;
}

BOOL static std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>.== infix(_:_:)(const std::basic_string<char16_t> *a1, const std::basic_string<char16_t> *a2)
{
  return std::basic_string<char16_t>::compare(a1, a2) == 0;
}

uint64_t static std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>.+= infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  return std::basic_string<char16_t>::append[abi:ne180100](a1, a2);
}

uint64_t std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>.append(_:)(uint64_t *a1)
{
  return std::basic_string<char16_t>::append[abi:ne180100](v1, a1);
}

uint64_t static std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>.+ infix(_:_:)@<X0>(std::basic_string<char16_t> *__str@<X0>, uint64_t *a2@<X1>, std::basic_string<char16_t> *a3@<X8>)
{
  size_t v4 = std::basic_string<char16_t>::basic_string(a3, __str);
  return std::basic_string<char16_t>::append[abi:ne180100]((uint64_t)v4, a2);
}

BOOL sub_2495B4084(const std::basic_string<char16_t> *a1, const std::basic_string<char16_t> *a2)
{
  return std::basic_string<char16_t>::compare(a1, a2) == 0;
}

BOOL static std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>.== infix(_:_:)(const std::basic_string<char32_t> *a1, const std::basic_string<char32_t> *a2)
{
  return std::basic_string<char32_t>::compare(a1, a2) == 0;
}

uint64_t static std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>.+= infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  return std::basic_string<char32_t>::append[abi:ne180100](a1, a2);
}

uint64_t std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>.append(_:)(uint64_t *a1)
{
  return std::basic_string<char32_t>::append[abi:ne180100](v1, a1);
}

uint64_t static std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>.+ infix(_:_:)@<X0>(std::basic_string<char32_t> *__str@<X0>, uint64_t *a2@<X1>, std::basic_string<char32_t> *a3@<X8>)
{
  size_t v4 = std::basic_string<char32_t>::basic_string(a3, __str);
  return std::basic_string<char32_t>::append[abi:ne180100]((uint64_t)v4, a2);
}

BOOL sub_2495B4140(const std::basic_string<char32_t> *a1, const std::basic_string<char32_t> *a2)
{
  return std::basic_string<char32_t>::compare(a1, a2) == 0;
}

uint64_t std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.hash(into:)(uint64_t a1)
{
  return sub_2495B4344(a1, (void (*)(char *))std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100], (void (*)(char *, uint64_t))std::hash<std::string>::__synthesizedBaseCall_operatorCall);
}

uint64_t std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.hashValue.getter()
{
  return sub_2495B43CC((void (*)(char *))std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100], (void (*)(char *, uint64_t))std::hash<std::string>::__synthesizedBaseCall_operatorCall);
}

uint64_t sub_2495B41B8(uint64_t a1, uint64_t a2)
{
  return sub_2495B4468(a1, a2, (void (*)(char *))sub_2495B51F8, (void (*)(char *, uint64_t))std::hash<std::string>::__synthesizedBaseCall_operatorCall);
}

uint64_t sub_2495B41E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2495B4500(a1, a2, a3, (void (*)(char *))sub_2495B51F8, (void (*)(char *, uint64_t))std::hash<std::string>::__synthesizedBaseCall_operatorCall);
}

uint64_t sub_2495B4210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2495B4584(a1, a2, a3, (void (*)(char *))sub_2495B51F8, (void (*)(char *, uint64_t))std::hash<std::string>::__synthesizedBaseCall_operatorCall);
}

uint64_t std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>.hash(into:)(uint64_t a1)
{
  return sub_2495B4344(a1, (void (*)(char *))std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100], (void (*)(char *, uint64_t))std::hash<std::basic_string<char16_t>>::__synthesizedBaseCall_operatorCall);
}

uint64_t std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>.hashValue.getter()
{
  return sub_2495B43CC((void (*)(char *))std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100], (void (*)(char *, uint64_t))std::hash<std::basic_string<char16_t>>::__synthesizedBaseCall_operatorCall);
}

uint64_t sub_2495B4294(uint64_t a1, uint64_t a2)
{
  return sub_2495B4468(a1, a2, (void (*)(char *))sub_2495B51F8, (void (*)(char *, uint64_t))std::hash<std::basic_string<char16_t>>::__synthesizedBaseCall_operatorCall);
}

uint64_t sub_2495B42C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2495B4500(a1, a2, a3, (void (*)(char *))sub_2495B51F8, (void (*)(char *, uint64_t))std::hash<std::basic_string<char16_t>>::__synthesizedBaseCall_operatorCall);
}

uint64_t sub_2495B42EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2495B4584(a1, a2, a3, (void (*)(char *))sub_2495B51F8, (void (*)(char *, uint64_t))std::hash<std::basic_string<char16_t>>::__synthesizedBaseCall_operatorCall);
}

uint64_t std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>.hash(into:)(uint64_t a1)
{
  return sub_2495B4344(a1, (void (*)(char *))std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100], (void (*)(char *, uint64_t))std::hash<std::basic_string<char32_t>>::__synthesizedBaseCall_operatorCall);
}

uint64_t sub_2495B4344(uint64_t a1, void (*a2)(char *), void (*a3)(char *, uint64_t))
{
  char v7 = 0;
  a2(&v7);
  a3(&v6, v3);
  return sub_2495B8A20();
}

uint64_t std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>.hashValue.getter()
{
  return sub_2495B43CC((void (*)(char *))std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100], (void (*)(char *, uint64_t))std::hash<std::basic_string<char32_t>>::__synthesizedBaseCall_operatorCall);
}

uint64_t sub_2495B43CC(void (*a1)(char *), void (*a2)(char *, uint64_t))
{
  sub_2495B8A10();
  char v7 = 0;
  a1(&v7);
  a2(&v6, v2);
  sub_2495B8A20();
  return sub_2495B8A30();
}

uint64_t sub_2495B443C(uint64_t a1, uint64_t a2)
{
  return sub_2495B4468(a1, a2, (void (*)(char *))sub_2495B51F8, (void (*)(char *, uint64_t))std::hash<std::basic_string<char32_t>>::__synthesizedBaseCall_operatorCall);
}

uint64_t sub_2495B4468(uint64_t a1, uint64_t a2, void (*a3)(char *), void (*a4)(char *, uint64_t))
{
  sub_2495B8A10();
  a3(&v9);
  a4(&v8, v4);
  sub_2495B8A20();
  return sub_2495B8A30();
}

uint64_t sub_2495B44D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2495B4500(a1, a2, a3, (void (*)(char *))sub_2495B51F8, (void (*)(char *, uint64_t))std::hash<std::basic_string<char32_t>>::__synthesizedBaseCall_operatorCall);
}

uint64_t sub_2495B4500(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), void (*a5)(char *, uint64_t))
{
  a4(&v9);
  a5(&v8, v5);
  return sub_2495B8A20();
}

uint64_t sub_2495B4558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2495B4584(a1, a2, a3, (void (*)(char *))sub_2495B51F8, (void (*)(char *, uint64_t))std::hash<std::basic_string<char32_t>>::__synthesizedBaseCall_operatorCall);
}

uint64_t sub_2495B4584(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), void (*a5)(char *, uint64_t))
{
  sub_2495B8A10();
  a4(&v10);
  a5(&v9, v5);
  sub_2495B8A20();
  return sub_2495B8A30();
}

uint64_t std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.debugDescription.getter()
{
  uint64_t v3 = 0x697274732E647473;
  unint64_t v4 = 0xEB0000000028676ELL;
  std::string::basic_string(&v2, v0);
  std::string::c_str[abi:ne180100]((char *)&v2);
  std::string::size[abi:ne180100]((uint64_t)&v2);
  sub_2495B86B0();
  std::string::~string(&v2);
  sub_2495B86D0();
  swift_bridgeObjectRelease();
  sub_2495B86D0();
  return v3;
}

uint64_t String.init(_:)(std::string *a1)
{
  std::string::c_str[abi:ne180100]((char *)a1);
  std::string::size[abi:ne180100]((uint64_t)a1);
  uint64_t v2 = sub_2495B86B0();
  std::string::~string(a1);
  return v2;
}

uint64_t std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>.debugDescription.getter()
{
  v3.__r_.__value_.__r.__words[0] = 0;
  v3.__r_.__value_.__l.__size_ = 0xE000000000000000;
  sub_2495B8880();
  swift_bridgeObjectRelease();
  strcpy((char *)v4, "std.u16string(");
  HIBYTE(v4[1]) = -18;
  std::basic_string<char16_t>::basic_string(&v3, v0);
  std::string::c_str[abi:ne180100]((char *)&v3);
  std::string::size[abi:ne180100]((uint64_t)&v3);
  swift_getCanonicalSpecializedMetadata();
  sub_2495B5284(&qword_2696C0130);
  sub_2495B5218();
  uint64_t result = sub_2495B86A0();
  if (v2)
  {
    ctb::chatbot::OrgNameEntry::~OrgNameEntry(&v3);
    sub_2495B86D0();
    swift_bridgeObjectRelease();
    sub_2495B86D0();
    return v4[0];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t String.init(_:)(char *a1)
{
  std::string::c_str[abi:ne180100](a1);
  std::string::size[abi:ne180100]((uint64_t)a1);
  swift_getCanonicalSpecializedMetadata();
  sub_2495B5284(&qword_2696C0130);
  sub_2495B5218();
  uint64_t result = sub_2495B86A0();
  if (v3)
  {
    uint64_t v4 = result;
    ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)a1);
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v2 = std::string::c_str[abi:ne180100](a1);
  std::string::size[abi:ne180100]((uint64_t)a1);
  if (v2)
  {
    swift_getCanonicalSpecializedMetadata();
    sub_2495B5284(&qword_2696C0148);
    sub_2495B52D4();
    uint64_t result = sub_2495B86A0();
    if (v4)
    {
LABEL_5:
      char v6 = result;
      ctb::chatbot::OrgNameEntry::~OrgNameEntry((std::basic_string<char16_t> *)a1);
      return v6;
    }
    __break(1u);
  }
  swift_getCanonicalSpecializedMetadata();
  sub_2495B5284(&qword_2696C0148);
  sub_2495B52D4();
  uint64_t result = sub_2495B86A0();
  if (v5) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>.debugDescription.getter()
{
  v2.__r_.__value_.__r.__words[0] = 0;
  v2.__r_.__value_.__l.__size_ = 0xE000000000000000;
  sub_2495B8880();
  swift_bridgeObjectRelease();
  strcpy((char *)v3, "std.u32string(");
  HIBYTE(v3[1]) = -18;
  std::basic_string<char32_t>::basic_string(&v2, v0);
  String.init(_:)((char *)&v2);
  sub_2495B86D0();
  swift_bridgeObjectRelease();
  sub_2495B86D0();
  return v3[0];
}

uint64_t std.__1.basic_string<CChar, char_traits<CChar>, allocator<CChar>>.description.getter()
{
  std::string::basic_string(&v3, v0);
  std::string::c_str[abi:ne180100]((char *)&v3);
  std::string::size[abi:ne180100]((uint64_t)&v3);
  uint64_t v1 = sub_2495B86B0();
  std::string::~string(&v3);
  return v1;
}

uint64_t std.__1.basic_string<CChar16, char_traits<CChar16>, allocator<CChar16>>.description.getter()
{
  std::basic_string<char16_t>::basic_string(&v4, v0);
  std::string::c_str[abi:ne180100]((char *)&v4);
  std::string::size[abi:ne180100]((uint64_t)&v4);
  swift_getCanonicalSpecializedMetadata();
  sub_2495B5284(&qword_2696C0130);
  sub_2495B5218();
  uint64_t result = sub_2495B86A0();
  if (v2)
  {
    uint64_t v3 = result;
    ctb::chatbot::OrgNameEntry::~OrgNameEntry(&v4);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_2495B4C70()
{
  std::basic_string<char16_t>::basic_string(&v4, v0);
  std::string::c_str[abi:ne180100]((char *)&v4);
  std::string::size[abi:ne180100]((uint64_t)&v4);
  swift_getCanonicalSpecializedMetadata();
  sub_2495B5284(&qword_2696C0130);
  sub_2495B5218();
  uint64_t result = sub_2495B86A0();
  if (v2)
  {
    uint64_t v3 = result;
    ctb::chatbot::OrgNameEntry::~OrgNameEntry(&v4);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std.__1.basic_string<CChar32, char_traits<CChar32>, allocator<CChar32>>.description.getter()
{
  std::basic_string<char32_t>::basic_string(&v2, v0);
  return String.init(_:)((char *)&v2);
}

uint64_t sub_2495B4D7C()
{
  std::basic_string<char32_t>::basic_string(&v2, v0);
  return String.init(_:)((char *)&v2);
}

uint64_t sub_2495B4DB0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = sub_2495B8720();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x24C5A3330](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

void std::basic_string<char16_t>::push_back(std::basic_string<char16_t> *this, std::basic_string<char16_t>::value_type __c)
{
  char v3 = this;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&this->__r_.__value_.__s + 23) != 10)
    {
      std::basic_string<char16_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      *((unsigned char *)&this->__r_.__value_.__s + 23) = (*((unsigned char *)&this->__r_.__value_.__s + 23) + 1) & 0x7F;
      goto LABEL_8;
    }
    std::basic_string<char16_t>::size_type v4 = 10;
    goto LABEL_5;
  }
  std::basic_string<char16_t>::size_type size = this->__r_.__value_.__l.__size_;
  std::basic_string<char16_t>::size_type v4 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (size == v4)
  {
LABEL_5:
    std::basic_string<char16_t>::__grow_by(this, v4, 1uLL, v4, v4, 0, 0);
    std::basic_string<char16_t>::size_type size = v4;
  }
  v3->__r_.__value_.__l.__size_ = size + 1;
  char v3 = (std::basic_string<char16_t> *)v3->__r_.__value_.__r.__words[0];
LABEL_8:
  uint64_t v6 = (std::basic_string<char16_t>::value_type *)((char *)v3 + 2 * size);
  *uint64_t v6 = __c;
  v6[1] = 0;
}

void std::basic_string<char32_t>::push_back(std::basic_string<char32_t> *this, std::basic_string<char32_t>::value_type __c)
{
  char v3 = this;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&this->__r_.__value_.__s + 23) != 4)
    {
      std::basic_string<char32_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      *((unsigned char *)&this->__r_.__value_.__s + 23) = (*((unsigned char *)&this->__r_.__value_.__s + 23) + 1) & 0x7F;
      goto LABEL_8;
    }
    std::basic_string<char32_t>::size_type v4 = 4;
    goto LABEL_5;
  }
  std::basic_string<char32_t>::size_type size = this->__r_.__value_.__l.__size_;
  std::basic_string<char32_t>::size_type v4 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (size == v4)
  {
LABEL_5:
    std::basic_string<char32_t>::__grow_by(this, v4, 1uLL, v4, v4, 0, 0);
    std::basic_string<char32_t>::size_type size = v4;
  }
  v3->__r_.__value_.__l.__size_ = size + 1;
  char v3 = (std::basic_string<char32_t> *)v3->__r_.__value_.__r.__words[0];
LABEL_8:
  uint64_t v6 = (std::basic_string<char32_t>::value_type *)((char *)v3 + 4 * size);
  *uint64_t v6 = __c;
  v6[1] = 0;
}

uint64_t std::string::compare[abi:ne180100](const void **a1, unsigned char *a2)
{
  char v2 = a2[23];
  if (*((char *)a1 + 23) < 0)
  {
    std::basic_string<char32_t>::size_type v4 = a1;
    a1 = (const void **)*a1;
    size_t v3 = (size_t)v4[1];
  }
  else
  {
    size_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  if (v2 >= 0) {
    size_t v5 = a2[23];
  }
  else {
    size_t v5 = *((void *)a2 + 1);
  }
  if (v2 < 0) {
    a2 = *(unsigned char **)a2;
  }
  if (v5 >= v3) {
    size_t v6 = v3;
  }
  else {
    size_t v6 = v5;
  }
  LODWORD(result) = memcmp(a1, a2, v6);
  if (v3 < v5) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = v5 < v3;
  }
  if (result) {
    return result;
  }
  else {
    return v8;
  }
}

uint64_t std::string::append[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  return std::string::append[abi:ne180100](a1, a2, MEMORY[0x263F8C0B0]);
}

int std::basic_string<char16_t>::compare(const std::basic_string<char16_t> *this, const std::basic_string<char16_t> *__str)
{
  std::basic_string<char16_t>::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    size_t v3 = __str;
  }
  else {
    size_t v3 = (const std::basic_string<char16_t> *)__str->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::basic_string<char16_t>::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size_t v5 = this;
    this = (const std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
    std::basic_string<char16_t>::size_type v4 = v5->__r_.__value_.__l.__size_;
  }
  else
  {
    std::basic_string<char16_t>::size_type v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (size >= v4) {
    std::basic_string<char16_t>::size_type v6 = v4;
  }
  else {
    std::basic_string<char16_t>::size_type v6 = size;
  }
  if (v6)
  {
    while (1)
    {
      unsigned int v7 = (unsigned __int16)this->__r_.__value_.__s.__data_[0];
      unsigned int v8 = (unsigned __int16)v3->__r_.__value_.__s.__data_[0];
      if (v7 < v8) {
        return -1;
      }
      if (v8 < v7) {
        return 1;
      }
      this = (const std::basic_string<char16_t> *)((char *)this + 2);
      size_t v3 = (const std::basic_string<char16_t> *)((char *)v3 + 2);
      if (!--v6) {
        goto LABEL_16;
      }
    }
  }
  else
  {
LABEL_16:
    if (v4 < size) {
      return -1;
    }
    else {
      return size < v4;
    }
  }
}

uint64_t std::basic_string<char16_t>::append[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  return std::string::append[abi:ne180100](a1, a2, (uint64_t (*)(uint64_t, uint64_t *, uint64_t))std::basic_string<char16_t>::append);
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::basic_string(std::basic_string<char16_t> *this, const std::basic_string<char16_t> *__str)
{
  return (std::basic_string<char16_t> *)std::basic_string<char16_t>::basic_string((uint64_t)this, (long long *)__str, (void (*)(uint64_t, void, void))std::basic_string<char16_t>::__init_copy_ctor_external);
}

int std::basic_string<char32_t>::compare(const std::basic_string<char32_t> *this, const std::basic_string<char32_t> *__str)
{
  std::basic_string<char32_t>::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    size_t v3 = __str;
  }
  else {
    size_t v3 = (const std::basic_string<char32_t> *)__str->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::basic_string<char32_t>::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size_t v5 = this;
    this = (const std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
    std::basic_string<char32_t>::size_type v4 = v5->__r_.__value_.__l.__size_;
  }
  else
  {
    std::basic_string<char32_t>::size_type v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (size >= v4) {
    std::basic_string<char32_t>::size_type v6 = v4;
  }
  else {
    std::basic_string<char32_t>::size_type v6 = size;
  }
  if (v6)
  {
    while (1)
    {
      if (this->__r_.__value_.__s.__data_[0] < (unsigned __int32)v3->__r_.__value_.__s.__data_[0]) {
        return -1;
      }
      if (v3->__r_.__value_.__s.__data_[0] < (unsigned __int32)this->__r_.__value_.__s.__data_[0]) {
        return 1;
      }
      this = (const std::basic_string<char32_t> *)((char *)this + 4);
      size_t v3 = (const std::basic_string<char32_t> *)((char *)v3 + 4);
      if (!--v6) {
        goto LABEL_16;
      }
    }
  }
  else
  {
LABEL_16:
    if (v4 < size) {
      return -1;
    }
    else {
      return size < v4;
    }
  }
}

uint64_t std::basic_string<char32_t>::append[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  return std::string::append[abi:ne180100](a1, a2, (uint64_t (*)(uint64_t, uint64_t *, uint64_t))std::basic_string<char32_t>::append);
}

uint64_t std::string::append[abi:ne180100](uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *, uint64_t))
{
  uint64_t v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    uint64_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (uint64_t *)*a2;
    uint64_t v5 = v4;
  }
  return a3(a1, a2, v5);
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::basic_string(std::basic_string<char32_t> *this, const std::basic_string<char32_t> *__str)
{
  return (std::basic_string<char32_t> *)std::basic_string<char16_t>::basic_string((uint64_t)this, (long long *)__str, (void (*)(uint64_t, void, void))std::basic_string<char32_t>::__init_copy_ctor_external);
}

uint64_t std::basic_string<char16_t>::basic_string(uint64_t a1, long long *a2, void (*a3)(uint64_t, void, void))
{
  if (*((char *)a2 + 23) < 0)
  {
    a3(a1, *(void *)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
  }
  return a1;
}

uint64_t sub_2495B51F8(unsigned char *a1)
{
  *a1 = 0;
  return std::optional<ctb::chatbot::SuggestedActionShowCoordinates>::operator*[abi:ne180100](a1);
}

char *std::string::c_str[abi:ne180100](char *result)
{
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

unint64_t sub_2495B5218()
{
  unint64_t result = qword_2696C0138;
  if (!qword_2696C0138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696C0138);
  }
  return result;
}

uint64_t std::string::size[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    return *(void *)(a1 + 8);
  }
  else {
    return *(unsigned __int8 *)(a1 + 23);
  }
}

uint64_t sub_2495B5284(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    swift_getCanonicalSpecializedMetadata();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_2495B52D4()
{
  unint64_t result = qword_2696C0150;
  if (!qword_2696C0150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2696C0150);
  }
  return result;
}

uint64_t sub_2495B5328()
{
  return sub_2495B53C4(&qword_2696C0158, type metadata accessor for std.__1.basic_string_CChar_ char_traits_CChar__ allocator_CChar__);
}

uint64_t sub_2495B5370()
{
  return MEMORY[0x263F8D388];
}

uint64_t sub_2495B537C()
{
  return sub_2495B53C4(&qword_2696C0160, type metadata accessor for std.__1.basic_string_CChar_ char_traits_CChar__ allocator_CChar__);
}

uint64_t sub_2495B53C4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2495B540C()
{
  return MEMORY[0x263F8D398];
}

uint64_t sub_2495B5418()
{
  return MEMORY[0x263F8D390];
}

uint64_t sub_2495B5424()
{
  return sub_2495B53C4(&qword_2696C0168, type metadata accessor for std.__1.basic_string_CChar16_ char_traits_CChar16__ allocator_CChar16__);
}

void type metadata accessor for std.__1.basic_string_CChar16_ char_traits_CChar16__ allocator_CChar16__(uint64_t a1)
{
}

uint64_t sub_2495B5480()
{
  return sub_2495B53C4(&qword_2696C0170, type metadata accessor for std.__1.basic_string_CChar16_ char_traits_CChar16__ allocator_CChar16__);
}

uint64_t sub_2495B54C8()
{
  return sub_2495B53C4(&qword_2696C0178, type metadata accessor for std.__1.basic_string_CChar32_ char_traits_CChar32__ allocator_CChar32__);
}

void type metadata accessor for std.__1.basic_string_CChar32_ char_traits_CChar32__ allocator_CChar32__(uint64_t a1)
{
}

uint64_t sub_2495B5524()
{
  return sub_2495B53C4(&qword_2696C0180, type metadata accessor for std.__1.basic_string_CChar32_ char_traits_CChar32__ allocator_CChar32__);
}

uint64_t sub_2495B556C()
{
  return sub_2495B53C4(&qword_2696C0188, type metadata accessor for std.__1.basic_string_CChar_ char_traits_CChar__ allocator_CChar__);
}

uint64_t sub_2495B55B4()
{
  return sub_2495B53C4(&qword_2696C0190, type metadata accessor for std.__1.basic_string_CChar16_ char_traits_CChar16__ allocator_CChar16__);
}

uint64_t sub_2495B55FC()
{
  return sub_2495B53C4(&qword_2696C0198, type metadata accessor for std.__1.basic_string_CChar32_ char_traits_CChar32__ allocator_CChar32__);
}

std::basic_string<char32_t> *sub_2495B5648(std::basic_string<char32_t> *a1, const std::basic_string<char32_t> *a2)
{
  return std::basic_string<char32_t>::basic_string(a1, a2);
}

std::basic_string<char32_t> *sub_2495B5664(std::basic_string<char16_t> *a1, const std::basic_string<char32_t> *a2)
{
  ctb::chatbot::OrgNameEntry::~OrgNameEntry(a1);
  return std::basic_string<char32_t>::basic_string(v3, a2);
}

__n128 *sub_2495B5694(__n128 *a1, __n128 *a2)
{
  return a1;
}

__n128 std::basic_string<char32_t>::basic_string[abi:ne180100](__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

uint64_t sub_2495B56E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2495B575C(a1, a2, a3, (void (*)(void))ctb::chatbot::OrgNameEntry::~OrgNameEntry, (void (*)(uint64_t, uint64_t))std::basic_string<char32_t>::basic_string[abi:ne180100]);
}

std::basic_string<char16_t> *sub_2495B5710(std::basic_string<char16_t> *a1, const std::basic_string<char16_t> *a2)
{
  return std::basic_string<char16_t>::basic_string(a1, a2);
}

std::basic_string<char16_t> *sub_2495B572C(std::basic_string<char16_t> *a1, const std::basic_string<char16_t> *a2)
{
  ctb::chatbot::OrgNameEntry::~OrgNameEntry(a1);
  return std::basic_string<char16_t>::basic_string(v3, a2);
}

uint64_t sub_2495B575C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(uint64_t, uint64_t))
{
  return a1;
}

void std::basic_string<char16_t>::__grow_by(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __old_cap, std::basic_string<char16_t>::size_type __delta_cap, std::basic_string<char16_t>::size_type __old_sz, std::basic_string<char16_t>::size_type __n_copy, std::basic_string<char16_t>::size_type __n_del, std::basic_string<char16_t>::size_type __n_add)
{
  if (0x7FFFFFFFFFFFFFF7 - __old_cap < __delta_cap) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v13 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    unint64_t v13 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
  }
  std::basic_string<char16_t>::size_type v14 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap) {
    std::basic_string<char16_t>::size_type v14 = 2 * __old_cap;
  }
  uint64_t v15 = (v14 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if ((v14 | 3) != 0xB) {
    uint64_t v15 = v14 | 3;
  }
  if (v14 >= 0xB) {
    uint64_t v16 = v15 + 1;
  }
  else {
    uint64_t v16 = 11;
  }
  if (__old_cap <= 0x3FFFFFFFFFFFFFF2) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0x7FFFFFFFFFFFFFF7;
  }
  uint64_t v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>((uint64_t)this, v17);
  std::basic_string<char16_t>::size_type v19 = (std::basic_string<char16_t>::size_type)v18;
  uint64_t v21 = v20;
  if (__n_copy) {
    memmove(v18, v13, 2 * __n_copy);
  }
  if (__old_sz != __n_del + __n_copy) {
    memmove((void *)(v19 + 2 * __n_copy + 2 * __n_add), (char *)v13 + 2 * __n_copy + 2 * __n_del, 2 * (__old_sz - (__n_del + __n_copy)));
  }
  if (__old_cap != 10) {
    operator delete(v13);
  }
  this->__r_.__value_.__r.__words[0] = v19;
  this->__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

void std::basic_string<char32_t>::__grow_by(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __old_cap, std::basic_string<char32_t>::size_type __delta_cap, std::basic_string<char32_t>::size_type __old_sz, std::basic_string<char32_t>::size_type __n_copy, std::basic_string<char32_t>::size_type __n_del, std::basic_string<char32_t>::size_type __n_add)
{
  if (0x3FFFFFFFFFFFFFF7 - __old_cap < __delta_cap) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v13 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    unint64_t v13 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
  }
  std::basic_string<char32_t>::size_type v14 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap) {
    std::basic_string<char32_t>::size_type v14 = 2 * __old_cap;
  }
  uint64_t v15 = (v14 & 0xFFFFFFFFFFFFFFFELL) + 2;
  if ((v14 | 1) != 5) {
    uint64_t v15 = v14 | 1;
  }
  if (v14 >= 5) {
    uint64_t v16 = v15 + 1;
  }
  else {
    uint64_t v16 = 5;
  }
  if (__old_cap <= 0x1FFFFFFFFFFFFFF2) {
    unint64_t v17 = v16;
  }
  else {
    unint64_t v17 = 0x3FFFFFFFFFFFFFF7;
  }
  uint64_t v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)this, v17);
  std::basic_string<char32_t>::size_type v19 = (std::basic_string<char32_t>::size_type)v18;
  uint64_t v21 = v20;
  if (__n_copy) {
    memmove(v18, v13, 4 * __n_copy);
  }
  if (__old_sz != __n_del + __n_copy) {
    memmove((void *)(v19 + 4 * __n_copy + 4 * __n_add), (char *)v13 + 4 * __n_copy + 4 * __n_del, 4 * (__old_sz - (__n_del + __n_copy)));
  }
  if (__old_cap != 4) {
    operator delete(v13);
  }
  this->__r_.__value_.__r.__words[0] = v19;
  this->__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::append(std::basic_string<char16_t> *this, const std::basic_string<char16_t>::value_type *__s, std::basic_string<char16_t>::size_type __n)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::basic_string<char16_t>::size_type size = this->__r_.__value_.__l.__size_;
    std::basic_string<char16_t>::size_type v6 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    std::basic_string<char16_t>::size_type v6 = 10;
    std::basic_string<char16_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (v6 - size >= __n)
  {
    if (__n)
    {
      unsigned int v8 = this;
      if ((*((unsigned char *)&this->__r_.__value_.__s + 23) & 0x80) != 0) {
        unsigned int v8 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
      }
      memmove((char *)v8 + 2 * size, __s, 2 * __n);
      std::basic_string<char16_t>::size_type v9 = size + __n;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        this->__r_.__value_.__l.__size_ = v9;
      }
      else {
        *((unsigned char *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
      }
      v8->__r_.__value_.__s.__data_[v9] = 0;
    }
  }
  else
  {
    std::basic_string<char16_t>::__grow_by_and_replace(this, v6, __n - v6 + size, size, size, 0, __n, __s);
  }
  return this;
}

void std::basic_string<char16_t>::__grow_by_and_replace(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __old_cap, std::basic_string<char16_t>::size_type __delta_cap, std::basic_string<char16_t>::size_type __old_sz, std::basic_string<char16_t>::size_type __n_copy, std::basic_string<char16_t>::size_type __n_del, std::basic_string<char16_t>::size_type __n_add, const std::basic_string<char16_t>::value_type *__p_new_stuff)
{
  if (0x7FFFFFFFFFFFFFF6 - __old_cap < __delta_cap) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v15 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v15 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
  }
  std::basic_string<char16_t>::size_type v16 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap) {
    std::basic_string<char16_t>::size_type v16 = 2 * __old_cap;
  }
  uint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if ((v16 | 3) != 0xB) {
    uint64_t v17 = v16 | 3;
  }
  if (v16 >= 0xB) {
    uint64_t v18 = v17 + 1;
  }
  else {
    uint64_t v18 = 11;
  }
  if (__old_cap > 0x3FFFFFFFFFFFFFF2) {
    uint64_t v19 = 0x7FFFFFFFFFFFFFF7;
  }
  else {
    uint64_t v19 = v18;
  }
  uint64_t v20 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>((uint64_t)this, v19);
  std::basic_string<char16_t>::size_type v21 = (std::basic_string<char16_t>::size_type)v20;
  uint64_t v23 = v22;
  if (__n_copy) {
    memmove(v20, v15, 2 * __n_copy);
  }
  if (__n_add) {
    memmove((void *)(v21 + 2 * __n_copy), __p_new_stuff, 2 * __n_add);
  }
  std::basic_string<char16_t>::size_type v24 = __old_sz - (__n_del + __n_copy);
  if (v24) {
    memmove((void *)(v21 + 2 * __n_copy + 2 * __n_add), (char *)v15 + 2 * __n_copy + 2 * __n_del, 2 * v24);
  }
  if (__old_cap != 10) {
    operator delete(v15);
  }
  std::basic_string<char16_t>::size_type v25 = __n_add + __n_copy + v24;
  this->__r_.__value_.__r.__words[0] = v21;
  this->__r_.__value_.__l.__size_ = v25;
  this->__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  *(_WORD *)(v21 + 2 * v25) = 0;
}

void std::basic_string<char16_t>::__init_copy_ctor_external(std::basic_string<char16_t> *this, const std::basic_string<char16_t>::value_type *__s, std::basic_string<char16_t>::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0xA)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::basic_string<char16_t>::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((__sz | 3) != 0xB) {
      std::basic_string<char16_t>::size_type v6 = __sz | 3;
    }
    unsigned int v7 = (std::basic_string<char16_t> *)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>((uint64_t)this, v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)v7;
    uint64_t v5 = v7;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, 2 * __sz + 2);
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::append(std::basic_string<char32_t> *this, const std::basic_string<char32_t>::value_type *__s, std::basic_string<char32_t>::size_type __n)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::basic_string<char32_t>::size_type size = this->__r_.__value_.__l.__size_;
    std::basic_string<char32_t>::size_type v6 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    std::basic_string<char32_t>::size_type v6 = 4;
    std::basic_string<char32_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (v6 - size >= __n)
  {
    if (__n)
    {
      uint64_t v8 = this;
      if ((*((unsigned char *)&this->__r_.__value_.__s + 23) & 0x80) != 0) {
        uint64_t v8 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
      }
      memmove((char *)v8 + 4 * size, __s, 4 * __n);
      std::basic_string<char32_t>::size_type v9 = size + __n;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        this->__r_.__value_.__l.__size_ = v9;
      }
      else {
        *((unsigned char *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
      }
      v8->__r_.__value_.__s.__data_[v9] = 0;
    }
  }
  else
  {
    std::basic_string<char32_t>::__grow_by_and_replace(this, v6, __n - v6 + size, size, size, 0, __n, __s);
  }
  return this;
}

void std::basic_string<char32_t>::__grow_by_and_replace(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __old_cap, std::basic_string<char32_t>::size_type __delta_cap, std::basic_string<char32_t>::size_type __old_sz, std::basic_string<char32_t>::size_type __n_copy, std::basic_string<char32_t>::size_type __n_del, std::basic_string<char32_t>::size_type __n_add, const std::basic_string<char32_t>::value_type *__p_new_stuff)
{
  if (0x3FFFFFFFFFFFFFF6 - __old_cap < __delta_cap) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v15 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v15 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
  }
  std::basic_string<char32_t>::size_type v16 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap) {
    std::basic_string<char32_t>::size_type v16 = 2 * __old_cap;
  }
  uint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFFELL) + 2;
  if ((v16 | 1) != 5) {
    uint64_t v17 = v16 | 1;
  }
  if (v16 >= 5) {
    uint64_t v18 = v17 + 1;
  }
  else {
    uint64_t v18 = 5;
  }
  if (__old_cap > 0x1FFFFFFFFFFFFFF2) {
    unint64_t v19 = 0x3FFFFFFFFFFFFFF7;
  }
  else {
    unint64_t v19 = v18;
  }
  uint64_t v20 = std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)this, v19);
  std::basic_string<char32_t>::size_type v21 = (std::basic_string<char32_t>::size_type)v20;
  uint64_t v23 = v22;
  if (__n_copy) {
    memmove(v20, v15, 4 * __n_copy);
  }
  if (__n_add) {
    memmove((void *)(v21 + 4 * __n_copy), __p_new_stuff, 4 * __n_add);
  }
  std::basic_string<char32_t>::size_type v24 = __old_sz - (__n_del + __n_copy);
  if (v24) {
    memmove((void *)(v21 + 4 * __n_copy + 4 * __n_add), (char *)v15 + 4 * __n_copy + 4 * __n_del, 4 * v24);
  }
  if (__old_cap != 4) {
    operator delete(v15);
  }
  std::basic_string<char32_t>::size_type v25 = __n_add + __n_copy + v24;
  this->__r_.__value_.__r.__words[0] = v21;
  this->__r_.__value_.__l.__size_ = v25;
  this->__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  *(_DWORD *)(v21 + 4 * v25) = 0;
}

void std::basic_string<char32_t>::__init_copy_ctor_external(std::basic_string<char32_t> *this, const std::basic_string<char32_t>::value_type *__s, std::basic_string<char32_t>::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 4)
  {
    if (__sz >= 0x3FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::basic_string<char32_t>::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((__sz | 1) != 5) {
      std::basic_string<char32_t>::size_type v6 = __sz | 1;
    }
    unsigned int v7 = (std::basic_string<char32_t> *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>((uint64_t)this, v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)v7;
    uint64_t v5 = v7;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, 4 * __sz + 4);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      uint64_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

unint64_t std::__string_hash<char16_t>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  uint64_t v3 = *(void *)(a2 + 8);
  if ((v2 & 0x80u) != 0)
  {
    a2 = *(void *)a2;
    uint64_t v2 = v3;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, 2 * v2);
}

unint64_t std::__string_hash<char32_t>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  uint64_t v3 = *(void *)(a2 + 8);
  if ((v2 & 0x80u) != 0)
  {
    a2 = *(void *)a2;
    uint64_t v2 = v3;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, 4 * v2);
}

void std::__variant_detail::__alt<2ul,ctb::FileTransferDescriptor>::__alt[abi:ne180100]<ctb::FileTransferDescriptor const&>(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(unsigned char *)(a1 + 48) && *(char *)(a1 + 47) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 24);
    operator delete(v2);
  }
}

void std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](void **a1)
{
  if (*((char *)a1 + 23) < 0) {
    OUTLINED_FUNCTION_0(a1);
  }
}

void ctb::ProvisioningConfiguration::ProvisioningConfiguration(uint64_t a1)
{
}

void std::__optional_copy_base<ctb::ProvisioningConfiguration::Token,false>::__optional_copy_base[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__optional_copy_base<ctb::CPMGroupManagement,false>::__optional_copy_base[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::__optional_copy_base<std::vector<unsigned char>,false>::__optional_copy_base[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<ctb::chatbot::SuggestedAction,ctb::chatbot::SuggestedReply>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v2;
    operator delete(v2);
  }
}

uint64_t sub_2495B65F0()
{
  return MEMORY[0x270EEF828]();
}

uint64_t sub_2495B6600()
{
  return MEMORY[0x270EEFC50]();
}

uint64_t sub_2495B6610()
{
  return MEMORY[0x270EEFC60]();
}

uint64_t sub_2495B6620()
{
  return MEMORY[0x270EEFCA8]();
}

uint64_t sub_2495B6630()
{
  return MEMORY[0x270EEFF70]();
}

uint64_t sub_2495B6640()
{
  return MEMORY[0x270EF0170]();
}

uint64_t sub_2495B6650()
{
  return MEMORY[0x270EF0228]();
}

uint64_t sub_2495B6660()
{
  return MEMORY[0x270EF0230]();
}

uint64_t sub_2495B6670()
{
  return MEMORY[0x270EF0240]();
}

uint64_t sub_2495B6680()
{
  return MEMORY[0x270EF0788]();
}

uint64_t sub_2495B6690()
{
  return MEMORY[0x270EF07F0]();
}

uint64_t sub_2495B66A0()
{
  return MEMORY[0x270EF0800]();
}

uint64_t sub_2495B66B0()
{
  return MEMORY[0x270EF0810]();
}

uint64_t sub_2495B66C0()
{
  return MEMORY[0x270EF0818]();
}

uint64_t sub_2495B66D0()
{
  return MEMORY[0x270EF0838]();
}

uint64_t sub_2495B66E0()
{
  return MEMORY[0x270EF0888]();
}

uint64_t sub_2495B66F0()
{
  return MEMORY[0x270EF0B00]();
}

uint64_t sub_2495B6700()
{
  return MEMORY[0x270EF0C38]();
}

uint64_t sub_2495B6710()
{
  return MEMORY[0x270EF15B0]();
}

uint64_t sub_2495B6720()
{
  return MEMORY[0x270EF1610]();
}

uint64_t sub_2495B6730()
{
  return MEMORY[0x270FA1758]();
}

uint64_t sub_2495B6740()
{
  return MEMORY[0x270FA1760]();
}

uint64_t sub_2495B6750()
{
  return MEMORY[0x270FA17F8]();
}

uint64_t sub_2495B6760()
{
  return MEMORY[0x270FA1940]();
}

uint64_t sub_2495B6770()
{
  return MEMORY[0x270F7CAF0]();
}

uint64_t sub_2495B6780()
{
  return MEMORY[0x270F7CAF8]();
}

uint64_t sub_2495B6790()
{
  return MEMORY[0x270F7CB00]();
}

uint64_t sub_2495B67A0()
{
  return MEMORY[0x270F7CB08]();
}

uint64_t sub_2495B67B0()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t sub_2495B67C0()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t sub_2495B67D0()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t sub_2495B67E0()
{
  return MEMORY[0x270F10CF0]();
}

uint64_t sub_2495B67F0()
{
  return MEMORY[0x270F10D08]();
}

uint64_t sub_2495B6800()
{
  return MEMORY[0x270F10D10]();
}

uint64_t sub_2495B6810()
{
  return MEMORY[0x270F10D28]();
}

uint64_t sub_2495B6820()
{
  return MEMORY[0x270F10D30]();
}

uint64_t sub_2495B6830()
{
  return MEMORY[0x270F10D38]();
}

uint64_t sub_2495B6840()
{
  return MEMORY[0x270F10D48]();
}

uint64_t sub_2495B6850()
{
  return MEMORY[0x270F10D60]();
}

uint64_t sub_2495B6860()
{
  return MEMORY[0x270F10D68]();
}

uint64_t sub_2495B6870()
{
  return MEMORY[0x270F10D78]();
}

uint64_t sub_2495B6880()
{
  return MEMORY[0x270F10D90]();
}

uint64_t sub_2495B6890()
{
  return MEMORY[0x270F10DA0]();
}

uint64_t sub_2495B68A0()
{
  return MEMORY[0x270F10DB0]();
}

uint64_t sub_2495B68B0()
{
  return MEMORY[0x270F10DC0]();
}

uint64_t sub_2495B68C0()
{
  return MEMORY[0x270F10DD0]();
}

uint64_t sub_2495B68D0()
{
  return MEMORY[0x270F10DD8]();
}

uint64_t sub_2495B68E0()
{
  return MEMORY[0x270F10DE8]();
}

uint64_t sub_2495B68F0()
{
  return MEMORY[0x270F10DF8]();
}

uint64_t sub_2495B6900()
{
  return MEMORY[0x270F10E08]();
}

uint64_t sub_2495B6910()
{
  return MEMORY[0x270F10E18]();
}

uint64_t sub_2495B6920()
{
  return MEMORY[0x270F10E20]();
}

uint64_t sub_2495B6930()
{
  return MEMORY[0x270F10E28]();
}

uint64_t sub_2495B6940()
{
  return MEMORY[0x270F10E30]();
}

uint64_t sub_2495B6950()
{
  return MEMORY[0x270F10E38]();
}

uint64_t sub_2495B6960()
{
  return MEMORY[0x270F10E40]();
}

uint64_t sub_2495B6970()
{
  return MEMORY[0x270F10E50]();
}

uint64_t sub_2495B6980()
{
  return MEMORY[0x270F10E58]();
}

uint64_t sub_2495B6990()
{
  return MEMORY[0x270F10E68]();
}

uint64_t sub_2495B69A0()
{
  return MEMORY[0x270F10E70]();
}

uint64_t sub_2495B69B0()
{
  return MEMORY[0x270F10E78]();
}

uint64_t sub_2495B69C0()
{
  return MEMORY[0x270F10E88]();
}

uint64_t sub_2495B69D0()
{
  return MEMORY[0x270F10EA0]();
}

uint64_t sub_2495B69E0()
{
  return MEMORY[0x270F10EB0]();
}

uint64_t sub_2495B69F0()
{
  return MEMORY[0x270F10EC0]();
}

uint64_t sub_2495B6A00()
{
  return MEMORY[0x270F10ED0]();
}

uint64_t sub_2495B6A10()
{
  return MEMORY[0x270F10ED8]();
}

uint64_t sub_2495B6A20()
{
  return MEMORY[0x270F10EE8]();
}

uint64_t sub_2495B6A30()
{
  return MEMORY[0x270F10EF0]();
}

uint64_t sub_2495B6A40()
{
  return MEMORY[0x270F10EF8]();
}

uint64_t sub_2495B6A50()
{
  return MEMORY[0x270F10F10]();
}

uint64_t sub_2495B6A60()
{
  return MEMORY[0x270F10F18]();
}

uint64_t sub_2495B6A70()
{
  return MEMORY[0x270F10F20]();
}

uint64_t sub_2495B6A80()
{
  return MEMORY[0x270F10F28]();
}

uint64_t sub_2495B6A90()
{
  return MEMORY[0x270F10F40]();
}

uint64_t sub_2495B6AA0()
{
  return MEMORY[0x270F10F48]();
}

uint64_t sub_2495B6AB0()
{
  return MEMORY[0x270F10FE0]();
}

uint64_t sub_2495B6AC0()
{
  return MEMORY[0x270F10FE8]();
}

uint64_t sub_2495B6AD0()
{
  return MEMORY[0x270F11000]();
}

uint64_t sub_2495B6AE0()
{
  return MEMORY[0x270F11008]();
}

uint64_t sub_2495B6AF0()
{
  return MEMORY[0x270F11018]();
}

uint64_t sub_2495B6B00()
{
  return MEMORY[0x270F11038]();
}

uint64_t sub_2495B6B10()
{
  return MEMORY[0x270F11050]();
}

uint64_t sub_2495B6B20()
{
  return MEMORY[0x270F11058]();
}

uint64_t sub_2495B6B30()
{
  return MEMORY[0x270F11060]();
}

uint64_t sub_2495B6B40()
{
  return MEMORY[0x270F11068]();
}

uint64_t sub_2495B6B50()
{
  return MEMORY[0x270F11078]();
}

uint64_t sub_2495B6B60()
{
  return MEMORY[0x270F11088]();
}

uint64_t sub_2495B6B70()
{
  return MEMORY[0x270F11098]();
}

uint64_t sub_2495B6B80()
{
  return MEMORY[0x270F110A0]();
}

uint64_t sub_2495B6B90()
{
  return MEMORY[0x270F110B0]();
}

uint64_t sub_2495B6BA0()
{
  return MEMORY[0x270F110C0]();
}

uint64_t sub_2495B6BB0()
{
  return MEMORY[0x270F110D8]();
}

uint64_t sub_2495B6BC0()
{
  return MEMORY[0x270F110E0]();
}

uint64_t sub_2495B6BD0()
{
  return MEMORY[0x270F110F0]();
}

uint64_t sub_2495B6BE0()
{
  return MEMORY[0x270F11100]();
}

uint64_t sub_2495B6BF0()
{
  return MEMORY[0x270F11108]();
}

uint64_t sub_2495B6C00()
{
  return MEMORY[0x270F11110]();
}

uint64_t sub_2495B6C10()
{
  return MEMORY[0x270F11140]();
}

uint64_t sub_2495B6C20()
{
  return MEMORY[0x270F11150]();
}

uint64_t sub_2495B6C30()
{
  return MEMORY[0x270F11158]();
}

uint64_t sub_2495B6C40()
{
  return MEMORY[0x270F11168]();
}

uint64_t sub_2495B6C50()
{
  return MEMORY[0x270F11170]();
}

uint64_t sub_2495B6C60()
{
  return MEMORY[0x270F11178]();
}

uint64_t sub_2495B6C70()
{
  return MEMORY[0x270F11180]();
}

uint64_t sub_2495B6C80()
{
  return MEMORY[0x270F11198]();
}

uint64_t sub_2495B6C90()
{
  return MEMORY[0x270F111A0]();
}

uint64_t sub_2495B6CA0()
{
  return MEMORY[0x270F111A8]();
}

uint64_t sub_2495B6CB0()
{
  return MEMORY[0x270F111B0]();
}

uint64_t sub_2495B6CC0()
{
  return MEMORY[0x270F111C8]();
}

uint64_t sub_2495B6CD0()
{
  return MEMORY[0x270F111D8]();
}

uint64_t sub_2495B6CE0()
{
  return MEMORY[0x270F111E8]();
}

uint64_t sub_2495B6CF0()
{
  return MEMORY[0x270F111F8]();
}

uint64_t sub_2495B6D00()
{
  return MEMORY[0x270F11200]();
}

uint64_t sub_2495B6D10()
{
  return MEMORY[0x270F11218]();
}

uint64_t sub_2495B6D20()
{
  return MEMORY[0x270F11220]();
}

uint64_t sub_2495B6D30()
{
  return MEMORY[0x270F11228]();
}

uint64_t sub_2495B6D40()
{
  return MEMORY[0x270F11230]();
}

uint64_t sub_2495B6D50()
{
  return MEMORY[0x270F11238]();
}

uint64_t sub_2495B6D60()
{
  return MEMORY[0x270F11240]();
}

uint64_t sub_2495B6D70()
{
  return MEMORY[0x270F11248]();
}

uint64_t sub_2495B6D80()
{
  return MEMORY[0x270F11250]();
}

uint64_t sub_2495B6D90()
{
  return MEMORY[0x270F11260]();
}

uint64_t sub_2495B6DA0()
{
  return MEMORY[0x270F11268]();
}

uint64_t sub_2495B6DB0()
{
  return MEMORY[0x270F11270]();
}

uint64_t sub_2495B6DC0()
{
  return MEMORY[0x270F11280]();
}

uint64_t sub_2495B6DD0()
{
  return MEMORY[0x270F112E0]();
}

uint64_t sub_2495B6DE0()
{
  return MEMORY[0x270F112E8]();
}

uint64_t sub_2495B6DF0()
{
  return MEMORY[0x270F11300]();
}

uint64_t sub_2495B6E00()
{
  return MEMORY[0x270F11310]();
}

uint64_t sub_2495B6E10()
{
  return MEMORY[0x270F11320]();
}

uint64_t sub_2495B6E20()
{
  return MEMORY[0x270F11328]();
}

uint64_t sub_2495B6E30()
{
  return MEMORY[0x270F11330]();
}

uint64_t sub_2495B6E40()
{
  return MEMORY[0x270F11338]();
}

uint64_t sub_2495B6E50()
{
  return MEMORY[0x270F11348]();
}

uint64_t sub_2495B6E60()
{
  return MEMORY[0x270F11398]();
}

uint64_t sub_2495B6E70()
{
  return MEMORY[0x270F113A0]();
}

uint64_t sub_2495B6E80()
{
  return MEMORY[0x270F113B0]();
}

uint64_t sub_2495B6E90()
{
  return MEMORY[0x270F113B8]();
}

uint64_t sub_2495B6EA0()
{
  return MEMORY[0x270F113C0]();
}

uint64_t sub_2495B6EB0()
{
  return MEMORY[0x270F113C8]();
}

uint64_t sub_2495B6EC0()
{
  return MEMORY[0x270F113D0]();
}

uint64_t sub_2495B6ED0()
{
  return MEMORY[0x270F113D8]();
}

uint64_t sub_2495B6EE0()
{
  return MEMORY[0x270F113E8]();
}

uint64_t sub_2495B6EF0()
{
  return MEMORY[0x270F113F0]();
}

uint64_t sub_2495B6F00()
{
  return MEMORY[0x270F11400]();
}

uint64_t sub_2495B6F10()
{
  return MEMORY[0x270F11410]();
}

uint64_t sub_2495B6F20()
{
  return MEMORY[0x270F11418]();
}

uint64_t sub_2495B6F30()
{
  return MEMORY[0x270F11420]();
}

uint64_t sub_2495B6F40()
{
  return MEMORY[0x270F11428]();
}

uint64_t sub_2495B6F50()
{
  return MEMORY[0x270F11430]();
}

uint64_t sub_2495B6F60()
{
  return MEMORY[0x270F11438]();
}

uint64_t sub_2495B6F70()
{
  return MEMORY[0x270F11440]();
}

uint64_t sub_2495B6F80()
{
  return MEMORY[0x270F11448]();
}

uint64_t sub_2495B6F90()
{
  return MEMORY[0x270F11450]();
}

uint64_t sub_2495B6FA0()
{
  return MEMORY[0x270F11458]();
}

uint64_t sub_2495B6FB0()
{
  return MEMORY[0x270F11468]();
}

uint64_t sub_2495B6FC0()
{
  return MEMORY[0x270F11470]();
}

uint64_t sub_2495B6FD0()
{
  return MEMORY[0x270F11478]();
}

uint64_t sub_2495B6FE0()
{
  return MEMORY[0x270F11480]();
}

uint64_t sub_2495B6FF0()
{
  return MEMORY[0x270F11490]();
}

uint64_t sub_2495B7000()
{
  return MEMORY[0x270F11498]();
}

uint64_t sub_2495B7010()
{
  return MEMORY[0x270F114A0]();
}

uint64_t sub_2495B7020()
{
  return MEMORY[0x270F114B0]();
}

uint64_t sub_2495B7030()
{
  return MEMORY[0x270F114B8]();
}

uint64_t sub_2495B7040()
{
  return MEMORY[0x270F114C8]();
}

uint64_t sub_2495B7050()
{
  return MEMORY[0x270F114D0]();
}

uint64_t sub_2495B7060()
{
  return MEMORY[0x270F114D8]();
}

uint64_t sub_2495B7070()
{
  return MEMORY[0x270F114E8]();
}

uint64_t sub_2495B7080()
{
  return MEMORY[0x270F114F8]();
}

uint64_t sub_2495B7090()
{
  return MEMORY[0x270F11500]();
}

uint64_t sub_2495B70A0()
{
  return MEMORY[0x270F11508]();
}

uint64_t sub_2495B70B0()
{
  return MEMORY[0x270F11520]();
}

uint64_t sub_2495B70C0()
{
  return MEMORY[0x270F11528]();
}

uint64_t sub_2495B70D0()
{
  return MEMORY[0x270F11530]();
}

uint64_t sub_2495B70E0()
{
  return MEMORY[0x270F11550]();
}

uint64_t sub_2495B70F0()
{
  return MEMORY[0x270F11558]();
}

uint64_t sub_2495B7100()
{
  return MEMORY[0x270F11568]();
}

uint64_t sub_2495B7110()
{
  return MEMORY[0x270F11570]();
}

uint64_t sub_2495B7120()
{
  return MEMORY[0x270F11580]();
}

uint64_t sub_2495B7130()
{
  return MEMORY[0x270F11588]();
}

uint64_t sub_2495B7140()
{
  return MEMORY[0x270F11590]();
}

uint64_t sub_2495B7150()
{
  return MEMORY[0x270F11598]();
}

uint64_t sub_2495B7160()
{
  return MEMORY[0x270F115A0]();
}

uint64_t sub_2495B7170()
{
  return MEMORY[0x270F115A8]();
}

uint64_t sub_2495B7180()
{
  return MEMORY[0x270F115B8]();
}

uint64_t sub_2495B7190()
{
  return MEMORY[0x270F115C8]();
}

uint64_t sub_2495B71A0()
{
  return MEMORY[0x270F115D8]();
}

uint64_t sub_2495B71B0()
{
  return MEMORY[0x270F115E0]();
}

uint64_t sub_2495B71C0()
{
  return MEMORY[0x270F115E8]();
}

uint64_t sub_2495B71D0()
{
  return MEMORY[0x270F115F0]();
}

uint64_t sub_2495B71E0()
{
  return MEMORY[0x270F115F8]();
}

uint64_t sub_2495B71F0()
{
  return MEMORY[0x270F11600]();
}

uint64_t sub_2495B7200()
{
  return MEMORY[0x270F11610]();
}

uint64_t sub_2495B7210()
{
  return MEMORY[0x270F11618]();
}

uint64_t sub_2495B7220()
{
  return MEMORY[0x270F11620]();
}

uint64_t sub_2495B7230()
{
  return MEMORY[0x270F11628]();
}

uint64_t sub_2495B7240()
{
  return MEMORY[0x270F11638]();
}

uint64_t sub_2495B7250()
{
  return MEMORY[0x270F11648]();
}

uint64_t sub_2495B7260()
{
  return MEMORY[0x270F11658]();
}

uint64_t sub_2495B7270()
{
  return MEMORY[0x270F11680]();
}

uint64_t sub_2495B7280()
{
  return MEMORY[0x270F11698]();
}

uint64_t sub_2495B7290()
{
  return MEMORY[0x270F116A0]();
}

uint64_t sub_2495B72A0()
{
  return MEMORY[0x270F116A8]();
}

uint64_t sub_2495B72B0()
{
  return MEMORY[0x270F116B8]();
}

uint64_t sub_2495B72C0()
{
  return MEMORY[0x270F116D0]();
}

uint64_t sub_2495B72D0()
{
  return MEMORY[0x270F116D8]();
}

uint64_t sub_2495B72E0()
{
  return MEMORY[0x270F116E0]();
}

uint64_t sub_2495B72F0()
{
  return MEMORY[0x270F116F0]();
}

uint64_t sub_2495B7300()
{
  return MEMORY[0x270F11700]();
}

uint64_t sub_2495B7310()
{
  return MEMORY[0x270F11708]();
}

uint64_t sub_2495B7320()
{
  return MEMORY[0x270F11718]();
}

uint64_t sub_2495B7330()
{
  return MEMORY[0x270F11728]();
}

uint64_t sub_2495B7340()
{
  return MEMORY[0x270F11730]();
}

uint64_t sub_2495B7350()
{
  return MEMORY[0x270F11738]();
}

uint64_t sub_2495B7360()
{
  return MEMORY[0x270F11748]();
}

uint64_t sub_2495B7370()
{
  return MEMORY[0x270F11750]();
}

uint64_t sub_2495B7380()
{
  return MEMORY[0x270F11760]();
}

uint64_t sub_2495B7390()
{
  return MEMORY[0x270F11768]();
}

uint64_t sub_2495B73A0()
{
  return MEMORY[0x270F11770]();
}

uint64_t sub_2495B73B0()
{
  return MEMORY[0x270F11778]();
}

uint64_t sub_2495B73C0()
{
  return MEMORY[0x270F11780]();
}

uint64_t sub_2495B73D0()
{
  return MEMORY[0x270F11790]();
}

uint64_t sub_2495B73E0()
{
  return MEMORY[0x270F117A0]();
}

uint64_t sub_2495B73F0()
{
  return MEMORY[0x270F117B8]();
}

uint64_t sub_2495B7400()
{
  return MEMORY[0x270F117C0]();
}

uint64_t sub_2495B7410()
{
  return MEMORY[0x270F117C8]();
}

uint64_t sub_2495B7420()
{
  return MEMORY[0x270F117D0]();
}

uint64_t sub_2495B7430()
{
  return MEMORY[0x270F117E0]();
}

uint64_t sub_2495B7440()
{
  return MEMORY[0x270F117E8]();
}

uint64_t sub_2495B7450()
{
  return MEMORY[0x270F117F0]();
}

uint64_t sub_2495B7460()
{
  return MEMORY[0x270F11800]();
}

uint64_t sub_2495B7470()
{
  return MEMORY[0x270F11808]();
}

uint64_t sub_2495B7480()
{
  return MEMORY[0x270F11810]();
}

uint64_t sub_2495B7490()
{
  return MEMORY[0x270F11818]();
}

uint64_t sub_2495B74A0()
{
  return MEMORY[0x270F11820]();
}

uint64_t sub_2495B74B0()
{
  return MEMORY[0x270F11828]();
}

uint64_t sub_2495B74C0()
{
  return MEMORY[0x270F11830]();
}

uint64_t sub_2495B74D0()
{
  return MEMORY[0x270F11838]();
}

uint64_t sub_2495B74E0()
{
  return MEMORY[0x270F11840]();
}

uint64_t sub_2495B74F0()
{
  return MEMORY[0x270F11850]();
}

uint64_t sub_2495B7500()
{
  return MEMORY[0x270F11858]();
}

uint64_t sub_2495B7510()
{
  return MEMORY[0x270F11860]();
}

uint64_t sub_2495B7520()
{
  return MEMORY[0x270F11868]();
}

uint64_t sub_2495B7530()
{
  return MEMORY[0x270F11878]();
}

uint64_t sub_2495B7540()
{
  return MEMORY[0x270F11888]();
}

uint64_t sub_2495B7550()
{
  return MEMORY[0x270F11890]();
}

uint64_t sub_2495B7560()
{
  return MEMORY[0x270F118A0]();
}

uint64_t sub_2495B7570()
{
  return MEMORY[0x270F118A8]();
}

uint64_t sub_2495B7580()
{
  return MEMORY[0x270F118C0]();
}

uint64_t sub_2495B7590()
{
  return MEMORY[0x270F118C8]();
}

uint64_t sub_2495B75A0()
{
  return MEMORY[0x270F118D8]();
}

uint64_t sub_2495B75B0()
{
  return MEMORY[0x270F118E0]();
}

uint64_t sub_2495B75C0()
{
  return MEMORY[0x270F118F0]();
}

uint64_t sub_2495B75D0()
{
  return MEMORY[0x270F11900]();
}

uint64_t sub_2495B75E0()
{
  return MEMORY[0x270F11910]();
}

uint64_t sub_2495B75F0()
{
  return MEMORY[0x270F11918]();
}

uint64_t sub_2495B7600()
{
  return MEMORY[0x270F11920]();
}

uint64_t sub_2495B7610()
{
  return MEMORY[0x270F11930]();
}

uint64_t sub_2495B7620()
{
  return MEMORY[0x270F11938]();
}

uint64_t sub_2495B7630()
{
  return MEMORY[0x270F11948]();
}

uint64_t sub_2495B7640()
{
  return MEMORY[0x270F11960]();
}

uint64_t sub_2495B7650()
{
  return MEMORY[0x270F11968]();
}

uint64_t sub_2495B7660()
{
  return MEMORY[0x270F11970]();
}

uint64_t sub_2495B7670()
{
  return MEMORY[0x270F11978]();
}

uint64_t sub_2495B7680()
{
  return MEMORY[0x270F11980]();
}

uint64_t sub_2495B7690()
{
  return MEMORY[0x270F11988]();
}

uint64_t sub_2495B76A0()
{
  return MEMORY[0x270F119A0]();
}

uint64_t sub_2495B76B0()
{
  return MEMORY[0x270F119B8]();
}

uint64_t sub_2495B76C0()
{
  return MEMORY[0x270F119C0]();
}

uint64_t sub_2495B76D0()
{
  return MEMORY[0x270F119C8]();
}

uint64_t sub_2495B76E0()
{
  return MEMORY[0x270F119D8]();
}

uint64_t sub_2495B76F0()
{
  return MEMORY[0x270F119E0]();
}

uint64_t sub_2495B7700()
{
  return MEMORY[0x270F119F0]();
}

uint64_t sub_2495B7710()
{
  return MEMORY[0x270F119F8]();
}

uint64_t sub_2495B7720()
{
  return MEMORY[0x270F11A00]();
}

uint64_t sub_2495B7730()
{
  return MEMORY[0x270F11A10]();
}

uint64_t sub_2495B7740()
{
  return MEMORY[0x270F11A18]();
}

uint64_t sub_2495B7750()
{
  return MEMORY[0x270F11A28]();
}

uint64_t sub_2495B7760()
{
  return MEMORY[0x270F11A30]();
}

uint64_t sub_2495B7770()
{
  return MEMORY[0x270F11A40]();
}

uint64_t sub_2495B7780()
{
  return MEMORY[0x270F11A48]();
}

uint64_t sub_2495B7790()
{
  return MEMORY[0x270F11A58]();
}

uint64_t sub_2495B77A0()
{
  return MEMORY[0x270F11A68]();
}

uint64_t sub_2495B77B0()
{
  return MEMORY[0x270F11A70]();
}

uint64_t sub_2495B77C0()
{
  return MEMORY[0x270F11A80]();
}

uint64_t sub_2495B77D0()
{
  return MEMORY[0x270F11A88]();
}

uint64_t sub_2495B77E0()
{
  return MEMORY[0x270F11A90]();
}

uint64_t sub_2495B77F0()
{
  return MEMORY[0x270F11A98]();
}

uint64_t sub_2495B7800()
{
  return MEMORY[0x270F11AA0]();
}

uint64_t sub_2495B7810()
{
  return MEMORY[0x270F11AA8]();
}

uint64_t sub_2495B7820()
{
  return MEMORY[0x270F11AB0]();
}

uint64_t sub_2495B7830()
{
  return MEMORY[0x270F11AC0]();
}

uint64_t sub_2495B7840()
{
  return MEMORY[0x270F11AC8]();
}

uint64_t sub_2495B7850()
{
  return MEMORY[0x270F11AD0]();
}

uint64_t sub_2495B7860()
{
  return MEMORY[0x270F11AD8]();
}

uint64_t sub_2495B7870()
{
  return MEMORY[0x270F11AE8]();
}

uint64_t sub_2495B7880()
{
  return MEMORY[0x270F11AF8]();
}

uint64_t sub_2495B7890()
{
  return MEMORY[0x270F11B80]();
}

uint64_t sub_2495B78A0()
{
  return MEMORY[0x270F11B90]();
}

uint64_t sub_2495B78B0()
{
  return MEMORY[0x270F11BA0]();
}

uint64_t sub_2495B78C0()
{
  return MEMORY[0x270F11BB0]();
}

uint64_t sub_2495B78D0()
{
  return MEMORY[0x270F11BB8]();
}

uint64_t sub_2495B78E0()
{
  return MEMORY[0x270F11BC0]();
}

uint64_t sub_2495B78F0()
{
  return MEMORY[0x270F11BD0]();
}

uint64_t sub_2495B7900()
{
  return MEMORY[0x270F11BE0]();
}

uint64_t sub_2495B7910()
{
  return MEMORY[0x270F11BF0]();
}

uint64_t sub_2495B7920()
{
  return MEMORY[0x270F11C10]();
}

uint64_t sub_2495B7930()
{
  return MEMORY[0x270F11C28]();
}

uint64_t sub_2495B7940()
{
  return MEMORY[0x270F11C38]();
}

uint64_t sub_2495B7950()
{
  return MEMORY[0x270F11C40]();
}

uint64_t sub_2495B7960()
{
  return MEMORY[0x270F11C50]();
}

uint64_t sub_2495B7970()
{
  return MEMORY[0x270F11C68]();
}

uint64_t sub_2495B7980()
{
  return MEMORY[0x270F11C78]();
}

uint64_t sub_2495B7990()
{
  return MEMORY[0x270F11C80]();
}

uint64_t sub_2495B79A0()
{
  return MEMORY[0x270F11C88]();
}

uint64_t sub_2495B79B0()
{
  return MEMORY[0x270F11C98]();
}

uint64_t sub_2495B79C0()
{
  return MEMORY[0x270F11CA8]();
}

uint64_t sub_2495B79D0()
{
  return MEMORY[0x270F11CB0]();
}

uint64_t sub_2495B79E0()
{
  return MEMORY[0x270F11CC0]();
}

uint64_t sub_2495B79F0()
{
  return MEMORY[0x270F11CD0]();
}

uint64_t sub_2495B7A00()
{
  return MEMORY[0x270F11CD8]();
}

uint64_t sub_2495B7A10()
{
  return MEMORY[0x270F11CE8]();
}

uint64_t sub_2495B7A20()
{
  return MEMORY[0x270F11CF8]();
}

uint64_t sub_2495B7A30()
{
  return MEMORY[0x270F11D00]();
}

uint64_t sub_2495B7A40()
{
  return MEMORY[0x270F11D10]();
}

uint64_t sub_2495B7A50()
{
  return MEMORY[0x270F11D20]();
}

uint64_t sub_2495B7A60()
{
  return MEMORY[0x270F11D30]();
}

uint64_t sub_2495B7A70()
{
  return MEMORY[0x270F11D38]();
}

uint64_t sub_2495B7A80()
{
  return MEMORY[0x270F11D40]();
}

uint64_t sub_2495B7A90()
{
  return MEMORY[0x270F11D48]();
}

uint64_t sub_2495B7AA0()
{
  return MEMORY[0x270F11D60]();
}

uint64_t sub_2495B7AB0()
{
  return MEMORY[0x270F11D68]();
}

uint64_t sub_2495B7AC0()
{
  return MEMORY[0x270F11D78]();
}

uint64_t sub_2495B7AD0()
{
  return MEMORY[0x270F11D88]();
}

uint64_t sub_2495B7AE0()
{
  return MEMORY[0x270F11D98]();
}

uint64_t sub_2495B7AF0()
{
  return MEMORY[0x270F11DA8]();
}

uint64_t sub_2495B7B00()
{
  return MEMORY[0x270F11DB0]();
}

uint64_t sub_2495B7B10()
{
  return MEMORY[0x270F11DC0]();
}

uint64_t sub_2495B7B20()
{
  return MEMORY[0x270F11DC8]();
}

uint64_t sub_2495B7B30()
{
  return MEMORY[0x270F11DD0]();
}

uint64_t sub_2495B7B40()
{
  return MEMORY[0x270F11DE0]();
}

uint64_t sub_2495B7B50()
{
  return MEMORY[0x270F11DE8]();
}

uint64_t sub_2495B7B60()
{
  return MEMORY[0x270F11DF8]();
}

uint64_t sub_2495B7B70()
{
  return MEMORY[0x270F11E00]();
}

uint64_t sub_2495B7B80()
{
  return MEMORY[0x270F11E08]();
}

uint64_t sub_2495B7B90()
{
  return MEMORY[0x270F11E10]();
}

uint64_t sub_2495B7BA0()
{
  return MEMORY[0x270F11E20]();
}

uint64_t sub_2495B7BB0()
{
  return MEMORY[0x270F11E38]();
}

uint64_t sub_2495B7BC0()
{
  return MEMORY[0x270F11E40]();
}

uint64_t sub_2495B7BD0()
{
  return MEMORY[0x270F11E58]();
}

uint64_t sub_2495B7BE0()
{
  return MEMORY[0x270F11E60]();
}

uint64_t sub_2495B7BF0()
{
  return MEMORY[0x270F11E68]();
}

uint64_t sub_2495B7C00()
{
  return MEMORY[0x270F11E80]();
}

uint64_t sub_2495B7C10()
{
  return MEMORY[0x270F11E88]();
}

uint64_t sub_2495B7C20()
{
  return MEMORY[0x270F11E98]();
}

uint64_t sub_2495B7C30()
{
  return MEMORY[0x270F11EA8]();
}

uint64_t sub_2495B7C40()
{
  return MEMORY[0x270F11EB8]();
}

uint64_t sub_2495B7C50()
{
  return MEMORY[0x270F11EC8]();
}

uint64_t sub_2495B7C60()
{
  return MEMORY[0x270F11ED0]();
}

uint64_t sub_2495B7C70()
{
  return MEMORY[0x270F11EE0]();
}

uint64_t sub_2495B7C80()
{
  return MEMORY[0x270F11EE8]();
}

uint64_t sub_2495B7C90()
{
  return MEMORY[0x270F11EF8]();
}

uint64_t sub_2495B7CA0()
{
  return MEMORY[0x270F11F00]();
}

uint64_t sub_2495B7CB0()
{
  return MEMORY[0x270F11F10]();
}

uint64_t sub_2495B7CC0()
{
  return MEMORY[0x270F11F20]();
}

uint64_t sub_2495B7CD0()
{
  return MEMORY[0x270F11F28]();
}

uint64_t sub_2495B7CE0()
{
  return MEMORY[0x270F11F38]();
}

uint64_t sub_2495B7CF0()
{
  return MEMORY[0x270F11F40]();
}

uint64_t sub_2495B7D00()
{
  return MEMORY[0x270F11F48]();
}

uint64_t sub_2495B7D10()
{
  return MEMORY[0x270F11F50]();
}

uint64_t sub_2495B7D20()
{
  return MEMORY[0x270F11F60]();
}

uint64_t sub_2495B7D30()
{
  return MEMORY[0x270F11F70]();
}

uint64_t sub_2495B7D40()
{
  return MEMORY[0x270F11F78]();
}

uint64_t sub_2495B7D50()
{
  return MEMORY[0x270F11F80]();
}

uint64_t sub_2495B7D60()
{
  return MEMORY[0x270F11F90]();
}

uint64_t sub_2495B7D70()
{
  return MEMORY[0x270F11FA0]();
}

uint64_t sub_2495B7D80()
{
  return MEMORY[0x270F11FA8]();
}

uint64_t sub_2495B7D90()
{
  return MEMORY[0x270F11FC0]();
}

uint64_t sub_2495B7DA0()
{
  return MEMORY[0x270F11FD8]();
}

uint64_t sub_2495B7DB0()
{
  return MEMORY[0x270F11FE0]();
}

uint64_t sub_2495B7DC0()
{
  return MEMORY[0x270F11FE8]();
}

uint64_t sub_2495B7DD0()
{
  return MEMORY[0x270F11FF0]();
}

uint64_t sub_2495B7DE0()
{
  return MEMORY[0x270F12000]();
}

uint64_t sub_2495B7DF0()
{
  return MEMORY[0x270F12010]();
}

uint64_t sub_2495B7E00()
{
  return MEMORY[0x270F12018]();
}

uint64_t sub_2495B7E10()
{
  return MEMORY[0x270F12020]();
}

uint64_t sub_2495B7E20()
{
  return MEMORY[0x270F12030]();
}

uint64_t sub_2495B7E30()
{
  return MEMORY[0x270F12040]();
}

uint64_t sub_2495B7E40()
{
  return MEMORY[0x270F12050]();
}

uint64_t sub_2495B7E50()
{
  return MEMORY[0x270F12058]();
}

uint64_t sub_2495B7E60()
{
  return MEMORY[0x270F12060]();
}

uint64_t sub_2495B7E70()
{
  return MEMORY[0x270F12068]();
}

uint64_t sub_2495B7E80()
{
  return MEMORY[0x270F12078]();
}

uint64_t sub_2495B7E90()
{
  return MEMORY[0x270F12080]();
}

uint64_t sub_2495B7EA0()
{
  return MEMORY[0x270F12090]();
}

uint64_t sub_2495B7EB0()
{
  return MEMORY[0x270F12098]();
}

uint64_t sub_2495B7EC0()
{
  return MEMORY[0x270F120A0]();
}

uint64_t sub_2495B7ED0()
{
  return MEMORY[0x270F120B8]();
}

uint64_t sub_2495B7EE0()
{
  return MEMORY[0x270F120C0]();
}

uint64_t sub_2495B7EF0()
{
  return MEMORY[0x270F120D0]();
}

uint64_t sub_2495B7F00()
{
  return MEMORY[0x270F120E0]();
}

uint64_t sub_2495B7F10()
{
  return MEMORY[0x270F120E8]();
}

uint64_t sub_2495B7F20()
{
  return MEMORY[0x270F120F0]();
}

uint64_t sub_2495B7F30()
{
  return MEMORY[0x270F12100]();
}

uint64_t sub_2495B7F40()
{
  return MEMORY[0x270F12108]();
}

uint64_t sub_2495B7F50()
{
  return MEMORY[0x270F12110]();
}

uint64_t sub_2495B7F60()
{
  return MEMORY[0x270F12120]();
}

uint64_t sub_2495B7F70()
{
  return MEMORY[0x270F12128]();
}

uint64_t sub_2495B7F80()
{
  return MEMORY[0x270F12130]();
}

uint64_t sub_2495B7F90()
{
  return MEMORY[0x270F12140]();
}

uint64_t sub_2495B7FA0()
{
  return MEMORY[0x270F12150]();
}

uint64_t sub_2495B7FB0()
{
  return MEMORY[0x270F12158]();
}

uint64_t sub_2495B7FC0()
{
  return MEMORY[0x270F12160]();
}

uint64_t sub_2495B7FD0()
{
  return MEMORY[0x270F12168]();
}

uint64_t sub_2495B7FE0()
{
  return MEMORY[0x270F12170]();
}

uint64_t sub_2495B7FF0()
{
  return MEMORY[0x270F12180]();
}

uint64_t sub_2495B8000()
{
  return MEMORY[0x270F12198]();
}

uint64_t sub_2495B8010()
{
  return MEMORY[0x270F121A8]();
}

uint64_t sub_2495B8020()
{
  return MEMORY[0x270F121B0]();
}

uint64_t sub_2495B8030()
{
  return MEMORY[0x270F121B8]();
}

uint64_t sub_2495B8040()
{
  return MEMORY[0x270F121C8]();
}

uint64_t sub_2495B8050()
{
  return MEMORY[0x270F121D8]();
}

uint64_t sub_2495B8060()
{
  return MEMORY[0x270F121F0]();
}

uint64_t sub_2495B8070()
{
  return MEMORY[0x270F12200]();
}

uint64_t sub_2495B8080()
{
  return MEMORY[0x270F12208]();
}

uint64_t sub_2495B8090()
{
  return MEMORY[0x270F12218]();
}

uint64_t sub_2495B80A0()
{
  return MEMORY[0x270F12228]();
}

uint64_t sub_2495B80B0()
{
  return MEMORY[0x270F12238]();
}

uint64_t sub_2495B80C0()
{
  return MEMORY[0x270F12240]();
}

uint64_t sub_2495B80D0()
{
  return MEMORY[0x270F12258]();
}

uint64_t sub_2495B80E0()
{
  return MEMORY[0x270F12260]();
}

uint64_t sub_2495B80F0()
{
  return MEMORY[0x270F12270]();
}

uint64_t sub_2495B8100()
{
  return MEMORY[0x270F12278]();
}

uint64_t sub_2495B8110()
{
  return MEMORY[0x270F12290]();
}

uint64_t sub_2495B8120()
{
  return MEMORY[0x270F12298]();
}

uint64_t sub_2495B8130()
{
  return MEMORY[0x270F122A0]();
}

uint64_t sub_2495B8140()
{
  return MEMORY[0x270F122B8]();
}

uint64_t sub_2495B8150()
{
  return MEMORY[0x270F122C8]();
}

uint64_t sub_2495B8160()
{
  return MEMORY[0x270F122D0]();
}

uint64_t sub_2495B8170()
{
  return MEMORY[0x270F122D8]();
}

uint64_t sub_2495B8180()
{
  return MEMORY[0x270F122E0]();
}

uint64_t sub_2495B8190()
{
  return MEMORY[0x270F122E8]();
}

uint64_t sub_2495B81A0()
{
  return MEMORY[0x270F122F8]();
}

uint64_t sub_2495B81B0()
{
  return MEMORY[0x270F12300]();
}

uint64_t sub_2495B81C0()
{
  return MEMORY[0x270F12308]();
}

uint64_t sub_2495B81D0()
{
  return MEMORY[0x270F12310]();
}

uint64_t sub_2495B81E0()
{
  return MEMORY[0x270F12318]();
}

uint64_t sub_2495B81F0()
{
  return MEMORY[0x270F12320]();
}

uint64_t sub_2495B8200()
{
  return MEMORY[0x270F12338]();
}

uint64_t sub_2495B8210()
{
  return MEMORY[0x270F12340]();
}

uint64_t sub_2495B8220()
{
  return MEMORY[0x270F12358]();
}

uint64_t sub_2495B8230()
{
  return MEMORY[0x270F12360]();
}

uint64_t sub_2495B8240()
{
  return MEMORY[0x270F12368]();
}

uint64_t sub_2495B8250()
{
  return MEMORY[0x270F12378]();
}

uint64_t sub_2495B8260()
{
  return MEMORY[0x270F12388]();
}

uint64_t sub_2495B8270()
{
  return MEMORY[0x270F12398]();
}

uint64_t sub_2495B8280()
{
  return MEMORY[0x270F123A0]();
}

uint64_t sub_2495B8290()
{
  return MEMORY[0x270F123B0]();
}

uint64_t sub_2495B82A0()
{
  return MEMORY[0x270F123B8]();
}

uint64_t sub_2495B82B0()
{
  return MEMORY[0x270F123C0]();
}

uint64_t sub_2495B82C0()
{
  return MEMORY[0x270F123C8]();
}

uint64_t sub_2495B82D0()
{
  return MEMORY[0x270F123D0]();
}

uint64_t sub_2495B82E0()
{
  return MEMORY[0x270F123D8]();
}

uint64_t sub_2495B82F0()
{
  return MEMORY[0x270F123F0]();
}

uint64_t sub_2495B8300()
{
  return MEMORY[0x270F123F8]();
}

uint64_t sub_2495B8310()
{
  return MEMORY[0x270F12400]();
}

uint64_t sub_2495B8320()
{
  return MEMORY[0x270F12410]();
}

uint64_t sub_2495B8330()
{
  return MEMORY[0x270F12418]();
}

uint64_t sub_2495B8340()
{
  return MEMORY[0x270F12420]();
}

uint64_t sub_2495B8350()
{
  return MEMORY[0x270F12430]();
}

uint64_t sub_2495B8360()
{
  return MEMORY[0x270F12440]();
}

uint64_t sub_2495B8370()
{
  return MEMORY[0x270F12448]();
}

uint64_t sub_2495B8380()
{
  return MEMORY[0x270F12460]();
}

uint64_t sub_2495B8390()
{
  return MEMORY[0x270F12468]();
}

uint64_t sub_2495B83A0()
{
  return MEMORY[0x270F12478]();
}

uint64_t sub_2495B83B0()
{
  return MEMORY[0x270F12488]();
}

uint64_t sub_2495B83C0()
{
  return MEMORY[0x270F12498]();
}

uint64_t sub_2495B83D0()
{
  return MEMORY[0x270F124A8]();
}

uint64_t sub_2495B83E0()
{
  return MEMORY[0x270F124B0]();
}

uint64_t sub_2495B83F0()
{
  return MEMORY[0x270F124C0]();
}

uint64_t sub_2495B8400()
{
  return MEMORY[0x270F124C8]();
}

uint64_t sub_2495B8410()
{
  return MEMORY[0x270F124E0]();
}

uint64_t sub_2495B8420()
{
  return MEMORY[0x270F124F0]();
}

uint64_t sub_2495B8430()
{
  return MEMORY[0x270F124F8]();
}

uint64_t sub_2495B8440()
{
  return MEMORY[0x270F12508]();
}

uint64_t sub_2495B8450()
{
  return MEMORY[0x270F12518]();
}

uint64_t sub_2495B8460()
{
  return MEMORY[0x270F12520]();
}

uint64_t sub_2495B8470()
{
  return MEMORY[0x270F12528]();
}

uint64_t sub_2495B8480()
{
  return MEMORY[0x270F12538]();
}

uint64_t sub_2495B8490()
{
  return MEMORY[0x270F12548]();
}

uint64_t sub_2495B84A0()
{
  return MEMORY[0x270F12550]();
}

uint64_t sub_2495B84B0()
{
  return MEMORY[0x270F12568]();
}

uint64_t sub_2495B84C0()
{
  return MEMORY[0x270F12570]();
}

uint64_t sub_2495B84D0()
{
  return MEMORY[0x270F12590]();
}

uint64_t sub_2495B84E0()
{
  return MEMORY[0x270F12598]();
}

uint64_t sub_2495B84F0()
{
  return MEMORY[0x270F125A8]();
}

uint64_t sub_2495B8500()
{
  return MEMORY[0x270F125B0]();
}

uint64_t sub_2495B8510()
{
  return MEMORY[0x270F125C0]();
}

uint64_t sub_2495B8520()
{
  return MEMORY[0x270F125C8]();
}

uint64_t sub_2495B8530()
{
  return MEMORY[0x270F125D8]();
}

uint64_t sub_2495B8540()
{
  return MEMORY[0x270F125E0]();
}

uint64_t sub_2495B8550()
{
  return MEMORY[0x270F125E8]();
}

uint64_t sub_2495B8560()
{
  return MEMORY[0x270F125F8]();
}

uint64_t sub_2495B8570()
{
  return MEMORY[0x270F12608]();
}

uint64_t sub_2495B8580()
{
  return MEMORY[0x270F12618]();
}

uint64_t sub_2495B8590()
{
  return MEMORY[0x270F12620]();
}

uint64_t sub_2495B85A0()
{
  return MEMORY[0x270F12630]();
}

uint64_t sub_2495B85B0()
{
  return MEMORY[0x270F12640]();
}

uint64_t sub_2495B85C0()
{
  return MEMORY[0x270F12648]();
}

uint64_t sub_2495B85D0()
{
  return MEMORY[0x270F12650]();
}

uint64_t sub_2495B85E0()
{
  return MEMORY[0x270F12678]();
}

uint64_t sub_2495B85F0()
{
  return MEMORY[0x270F12690]();
}

uint64_t sub_2495B8600()
{
  return MEMORY[0x270EF1810]();
}

uint64_t sub_2495B8610()
{
  return MEMORY[0x270EF1838]();
}

uint64_t sub_2495B8620()
{
  return MEMORY[0x270EF1848]();
}

uint64_t sub_2495B8630()
{
  return MEMORY[0x270F9D478]();
}

uint64_t sub_2495B8640()
{
  return MEMORY[0x270F9D488]();
}

uint64_t sub_2495B8650()
{
  return MEMORY[0x270F9D598]();
}

uint64_t sub_2495B8660()
{
  return MEMORY[0x270EF19A8]();
}

uint64_t sub_2495B8670()
{
  return MEMORY[0x270EF19F0]();
}

uint64_t sub_2495B8680()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t sub_2495B8690()
{
  return MEMORY[0x270F9D600]();
}

uint64_t sub_2495B86A0()
{
  return MEMORY[0x270F9D640]();
}

uint64_t sub_2495B86B0()
{
  return MEMORY[0x270F9D6B0]();
}

uint64_t sub_2495B86C0()
{
  return MEMORY[0x270F9D708]();
}

uint64_t sub_2495B86D0()
{
  return MEMORY[0x270F9D798]();
}

uint64_t sub_2495B86E0()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t sub_2495B86F0()
{
  return MEMORY[0x270F9D7E8]();
}

uint64_t sub_2495B8700()
{
  return MEMORY[0x270F9D800]();
}

uint64_t sub_2495B8710()
{
  return MEMORY[0x270F9D810]();
}

uint64_t sub_2495B8720()
{
  return MEMORY[0x270F9D860]();
}

uint64_t sub_2495B8730()
{
  return MEMORY[0x270F9D8E0]();
}

uint64_t sub_2495B8740()
{
  return MEMORY[0x270F9D8F8]();
}

uint64_t sub_2495B8750()
{
  return MEMORY[0x270F9DA70]();
}

uint64_t sub_2495B8760()
{
  return MEMORY[0x270F9DA80]();
}

uint64_t sub_2495B8770()
{
  return MEMORY[0x270F9DB00]();
}

uint64_t sub_2495B8780()
{
  return MEMORY[0x270F9DCD8]();
}

uint64_t sub_2495B87A0()
{
  return MEMORY[0x270F9E218]();
}

uint64_t sub_2495B87B0()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t sub_2495B87C0()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t sub_2495B87D0()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t sub_2495B87E0()
{
  return MEMORY[0x270F9E518]();
}

uint64_t sub_2495B87F0()
{
  return MEMORY[0x270F9E530]();
}

uint64_t sub_2495B8800()
{
  return MEMORY[0x270F9E560]();
}

uint64_t sub_2495B8810()
{
  return MEMORY[0x270F9E5B8]();
}

uint64_t sub_2495B8820()
{
  return MEMORY[0x270F9E640]();
}

uint64_t sub_2495B8830()
{
  return MEMORY[0x270F9E648]();
}

uint64_t sub_2495B8840()
{
  return MEMORY[0x270F9E650]();
}

uint64_t sub_2495B8850()
{
  return MEMORY[0x270F9E668]();
}

uint64_t sub_2495B8860()
{
  return MEMORY[0x270F9E760]();
}

uint64_t sub_2495B8870()
{
  return MEMORY[0x270F9E9A0]();
}

uint64_t sub_2495B8880()
{
  return MEMORY[0x270F9E9A8]();
}

uint64_t sub_2495B8890()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t sub_2495B88A0()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t sub_2495B88B0()
{
  return MEMORY[0x270F9EB30]();
}

uint64_t sub_2495B88C0()
{
  return MEMORY[0x270F9EFE8]();
}

uint64_t sub_2495B88D0()
{
  return MEMORY[0x270F9EFF0]();
}

uint64_t sub_2495B88E0()
{
  return MEMORY[0x270F9F0C0]();
}

uint64_t sub_2495B88F0()
{
  return MEMORY[0x270F9F230]();
}

uint64_t sub_2495B8900()
{
  return MEMORY[0x270F9F270]();
}

uint64_t sub_2495B8910()
{
  return MEMORY[0x270F9F2A0]();
}

uint64_t sub_2495B8920()
{
  return MEMORY[0x270F9F2E8]();
}

uint64_t sub_2495B8930()
{
  return MEMORY[0x270F9F308]();
}

uint64_t sub_2495B8940()
{
  return MEMORY[0x270F9F318]();
}

uint64_t sub_2495B8950()
{
  return MEMORY[0x270F9F3B0]();
}

uint64_t sub_2495B8960()
{
  return MEMORY[0x270F9F3E0]();
}

uint64_t sub_2495B8970()
{
  return MEMORY[0x270F9F428]();
}

uint64_t sub_2495B8980()
{
  return MEMORY[0x270F9F448]();
}

uint64_t sub_2495B8990()
{
  return MEMORY[0x270F9F458]();
}

uint64_t sub_2495B89A0()
{
  return MEMORY[0x270F9F7B0]();
}

uint64_t sub_2495B89B0()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t sub_2495B89C0()
{
  return MEMORY[0x270F9FA80]();
}

uint64_t sub_2495B89D0()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t sub_2495B89E0()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t sub_2495B89F0()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t sub_2495B8A00()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t sub_2495B8A10()
{
  return MEMORY[0x270F9FC48]();
}

uint64_t sub_2495B8A20()
{
  return MEMORY[0x270F9FC60]();
}

uint64_t sub_2495B8A30()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t sub_2495B8A40()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t sub_2495B8A50()
{
  return MEMORY[0x270F9FD98]();
}

uint64_t sub_2495B8A60()
{
  return MEMORY[0x270F9FF50]();
}

uint64_t sub_2495B8A70()
{
  return MEMORY[0x270F9FF70]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98530](this, __str);
}

void std::string::~string(std::string *this)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

void bzero(void *a1, size_t a2)
{
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x270FA02F8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getCanonicalSpecializedMetadata()
{
  return MEMORY[0x270FA0328]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}