void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1)
{
  void *v2;
  uint64_t vars8;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void *)(a1 + 8));
    if (*(char *)(a1 + 79) < 0)
    {
      operator delete(*(void **)(a1 + 56));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_4:
        v2 = (void *)a1;
LABEL_6:
        operator delete(v2);
        return;
      }
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(a1 + 32));
    v2 = (void *)a1;
    goto LABEL_6;
  }
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(std::regex_iterator<std::__wrap_iter<const char *>, char> *this, std::__wrap_iter<const char *> __a, std::__wrap_iter<const char *> __b, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *__re, std::regex_constants::match_flag_type __m)
{
  __int16 v5 = __m;
  this->__begin_ = __a;
  this->__end_ = __b;
  this->__pregex_ = __re;
  this->__flags_ = __m;
  *(_OWORD *)&this->__match_.__matches_.__begin_ = 0u;
  p_match = &this->__match_;
  this->__match_.__prefix_.first.__i_ = 0;
  this->__match_.__prefix_.second.__i_ = 0;
  this->__match_.__prefix_.matched = 0;
  this->__match_.__suffix_.first.__i_ = 0;
  this->__match_.__suffix_.second.__i_ = 0;
  this->__match_.__suffix_.matched = 0;
  this->__match_.__ready_ = 0;
  this->__match_.__position_start_.__i_ = 0;
  *(_OWORD *)&this->__match_.__matches_.__end_cap_.__value_ = 0u;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&this->__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                               + 1) = 0u;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v13 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = 0xAAAAAAAAAAAAAA00;
  long long v17 = v10;
  uint64_t v14 = 0;
  long long v16 = 0uLL;
  LOBYTE(v17) = 0;
  BYTE8(v17) = 0;
  uint64_t v18 = 0;
  memset(__p, 0, sizeof(__p));
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)__re, (std::sub_match<const char *> *)__a.__i_, (std::sub_match<const char *> *)__b.__i_, (std::vector<std::csub_match> *)__p, __m);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)__a.__i_, (std::sub_match<std::__wrap_iter<const char *>> *)__b.__i_, (uint64_t *)__p, (v5 & 0x800) != 0);
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  return this;
}

void sub_1A60A0F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
  {
    operator delete(__p);
    long long v13 = *v11;
    if (!*v11) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    long long v13 = *v11;
    if (!*v11) {
      goto LABEL_3;
    }
  }
  *(void *)(v10 + 40) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  int v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0) {
    this[4].__end_ = a2;
  }
  LOBYTE(this[4].__begin_) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28; {
    goto LABEL_13;
    }
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28; {
LABEL_13:
    }
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      int v12 = v9 | 0x80;
      for (i = (char *)&a2->first + 1; i != (const char *)a3; ++i)
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28; {
          }
            }
          else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)i, (uint64_t)a3, (uint64_t *)this, v12, 0))
          {
            goto LABEL_28;
          }
        }
        else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))
        {
          goto LABEL_28;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      }
      std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28; {
        }
          }
        else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a3, (uint64_t)a3, (uint64_t *)this, v12, 0))
        {
          goto LABEL_28;
        }
      }
      else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))
      {
        goto LABEL_28;
      }
    }
    uint64_t result = 0;
    this->__end_ = this->__begin_;
    return result;
  }
  if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) == 0)goto LABEL_13; {
LABEL_28:
  }
  if (this->__end_ == this->__begin_) {
    std::vector<std::csub_match>::pointer begin = (std::vector<std::csub_match>::pointer)v11;
  }
  else {
    std::vector<std::csub_match>::pointer begin = this->__begin_;
  }
  first = (std::sub_match<const char *> *)begin->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)begin->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)begin->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  v48 = 0;
  v49 = 0;
  unint64_t v50 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    return 0;
  }
  __x.second = a3;
  *(void *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)v46 = 0;
  memset(&v46[8], 0, 85);
  v49 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v48, (uint64_t)v46);
  if (*(void *)&v46[56])
  {
    *(void *)&v46[64] = *(void *)&v46[56];
    operator delete(*(void **)&v46[56]);
  }
  if (*(void *)&v46[32])
  {
    *(void *)&v46[40] = *(void *)&v46[32];
    operator delete(*(void **)&v46[32]);
  }
  long long v13 = v49;
  *((_DWORD *)v49 - 24) = 0;
  *((void *)v13 - 11) = a2;
  *((void *)v13 - 10) = a2;
  *((void *)v13 - 9) = a3;
  uint64_t v14 = *((void *)v13 - 8);
  unint64_t v15 = *(unsigned int *)(a1 + 28);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
  if (v15 <= v16)
  {
    if (v15 < v16) {
      *((void *)v13 - 7) = v14 + 24 * v15;
    }
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
    long long v13 = v49;
  }
  uint64_t v18 = *((void *)v13 - 5);
  unint64_t v19 = *(unsigned int *)(a1 + 32);
  unint64_t v20 = (*((void *)v13 - 4) - v18) >> 4;
  if (v19 <= v20)
  {
    if (v19 < v20) {
      *((void *)v13 - 4) = v18 + 16 * v19;
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v19 - v20);
    long long v13 = v49;
  }
  *((void *)v13 - 2) = v6;
  *((_DWORD *)v13 - 2) = a5;
  *(v13 - 4) = a6;
  unsigned int v21 = 1;
  while (2)
  {
    if ((v21 & 0xFFF) == 0 && (int)(v21 >> 12) >= (int)a3 - (int)a2) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    uint64_t v23 = *((void *)v13 - 2);
    if (v23) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v13 - 96);
    }
    switch(*((_DWORD *)v13 - 24))
    {
      case 0xFFFFFC18:
        v24 = (const char *)*((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v24 == a2 || (a5 & 0x1000) != 0 && v24 != a3) {
          goto LABEL_27;
        }
        uint64_t v37 = *a4;
        *(void *)uint64_t v37 = a2;
        *(void *)(v37 + 8) = v24;
        *(unsigned char *)(v37 + 16) = 1;
        uint64_t v38 = *((void *)v13 - 8);
        uint64_t v39 = *((void *)v13 - 7) - v38;
        if (v39)
        {
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (v39 >> 3);
          v41 = (unsigned char *)(v38 + 16);
          unsigned int v42 = 1;
          do
          {
            uint64_t v43 = v37 + 24 * v42;
            *(_OWORD *)uint64_t v43 = *((_OWORD *)v41 - 1);
            char v44 = *v41;
            v41 += 24;
            *(unsigned char *)(v43 + 16) = v44;
          }
          while (v40 > v42++);
        }
        uint64_t v17 = 1;
        v22 = v48;
        if (!v48) {
          return v17;
        }
        goto LABEL_38;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_17;
      case 0xFFFFFC1F:
LABEL_27:
        v25 = v49;
        v26 = (void *)*((void *)v49 - 5);
        if (v26)
        {
          *((void *)v49 - 4) = v26;
          operator delete(v26);
        }
        v27 = (void *)*((void *)v25 - 8);
        if (v27)
        {
          *((void *)v25 - 7) = v27;
          operator delete(v27);
        }
        v49 = v25 - 96;
        goto LABEL_17;
      case 0xFFFFFC20:
        *(void *)&long long v28 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v46[64] = v28;
        *(_OWORD *)&v46[80] = v28;
        *(_OWORD *)&v46[32] = v28;
        *(_OWORD *)&v46[48] = v28;
        *(_OWORD *)v46 = v28;
        *(_OWORD *)&v46[16] = v28;
        std::__state<char>::__state((uint64_t)v46, (long long *)v13 - 6);
        (*(void (**)(void, uint64_t, char *))(**((void **)v13 - 2) + 24))(*((void *)v13 - 2), 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v46[80] + 24))(*(void *)&v46[80], 0, v46);
        v29 = v49;
        if ((unint64_t)v49 >= v50)
        {
          v49 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v48, (uint64_t)v46);
          if (*(void *)&v46[56])
          {
            *(void *)&v46[64] = *(void *)&v46[56];
            operator delete(*(void **)&v46[56]);
          }
        }
        else
        {
          long long v30 = *(_OWORD *)&v46[16];
          *(_OWORD *)v49 = *(_OWORD *)v46;
          *((_OWORD *)v29 + 1) = v30;
          *((void *)v29 + 4) = 0;
          *((void *)v29 + 5) = 0;
          *((void *)v29 + 6) = 0;
          *((void *)v29 + 7) = 0;
          *((_OWORD *)v29 + 2) = *(_OWORD *)&v46[32];
          *((void *)v29 + 6) = *(void *)&v46[48];
          memset(&v46[32], 0, 24);
          *((void *)v29 + 8) = 0;
          *((void *)v29 + 9) = 0;
          *(_OWORD *)(v29 + 56) = *(_OWORD *)&v46[56];
          *((void *)v29 + 9) = *(void *)&v46[72];
          memset(&v46[56], 0, 24);
          uint64_t v31 = *(void *)&v46[80];
          *(void *)(v29 + 85) = *(void *)&v46[85];
          *((void *)v29 + 10) = v31;
          v49 = v29 + 96;
        }
        if (*(void *)&v46[32])
        {
          *(void *)&v46[40] = *(void *)&v46[32];
          operator delete(*(void **)&v46[32]);
        }
LABEL_17:
        v22 = v48;
        long long v13 = v49;
        ++v21;
        if (v48 != v49) {
          continue;
        }
        uint64_t v17 = 0;
        if (v48)
        {
LABEL_38:
          v32 = v49;
          v33 = v22;
          if (v49 != v22)
          {
            do
            {
              v34 = (void *)*((void *)v32 - 5);
              if (v34)
              {
                *((void *)v32 - 4) = v34;
                operator delete(v34);
              }
              v35 = (void *)*((void *)v32 - 8);
              if (v35)
              {
                *((void *)v32 - 7) = v35;
                operator delete(v35);
              }
              v32 -= 96;
            }
            while (v32 != v22);
            v33 = v48;
          }
          v49 = v22;
          operator delete(v33);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    return v17;
  }
}

void sub_1A60A16D0(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1A60A16E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__state<char>::~__state((uint64_t *)va);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_1A60A172C(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1A60A1740(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v25 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_245;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_34;
  }
  char v6 = *current;
  LOBYTE(__src) = *current;
  char v7 = current[1];
  HIBYTE(__src) = v7;
  if (this->__icase_)
  {
    LOBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>(&__src, (uint64_t)&this->__traits_, __p, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    v27 = __p[1];
    operator delete(__p[0]);
    if (v27) {
      goto LABEL_8;
    }
LABEL_34:
    BOOL negate = 0;
    uint64_t v25 = 1;
    unsigned __int8 v28 = *v2->__current_;
    LOBYTE(__src) = v28;
    if (!this->__icase_) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (!HIBYTE(__p[2])) {
    goto LABEL_34;
  }
LABEL_8:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    p_second = &begin->second;
    while (__src != *(p_second - 1) || HIBYTE(__src) != *p_second)
    {
      p_second += 2;
      if (!--v11) {
        goto LABEL_17;
      }
    }
    goto LABEL_227;
  }
LABEL_17:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
    goto LABEL_167;
  }
  memset(v136, 170, sizeof(v136));
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x2AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAA00AAAALL;
  LOWORD(__p[0]) = __src;
  (*(void (**)(void **__return_ptr))(*(void *)this->__traits_.__col_ + 32))(v136);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::vector<std::pair<std::string, std::string>>::pointer v14 = this->__ranges_.__begin_;
  char v15 = HIBYTE(v136[2]);
  int64_t v16 = (char *)this->__ranges_.__end_ - (char *)v14;
  if (!v16)
  {
    BOOL v24 = 0;
    int v70 = 0;
    int v69 = 0;
    goto LABEL_164;
  }
  v128 = v2;
  uint64_t v17 = 0;
  unint64_t v18 = v16 / 48;
  if (SHIBYTE(v136[2]) >= 0) {
    unint64_t v19 = v136;
  }
  else {
    unint64_t v19 = (void **)v136[0];
  }
  char v20 = HIBYTE(v136[2]);
  if (SHIBYTE(v136[2]) >= 0) {
    unsigned int v21 = (void *)HIBYTE(v136[2]);
  }
  else {
    unsigned int v21 = v136[1];
  }
  if (v18 <= 1) {
    uint64_t v22 = 1;
  }
  else {
    uint64_t v22 = v16 / 48;
  }
  uint64_t v23 = (unsigned __int8 *)&v14->second.__r_.__value_.__r.__words[2] + 7;
  BOOL v24 = 1;
  do
  {
    int v59 = (char)*(v23 - 24);
    if (v59 >= 0) {
      v60 = (char *)(v23 - 47);
    }
    else {
      v60 = *(char **)(v23 - 47);
    }
    if (v59 >= 0) {
      size_t v61 = *(v23 - 24);
    }
    else {
      size_t v61 = *(void *)(v23 - 39);
    }
    if ((unint64_t)v21 >= v61) {
      size_t v62 = v61;
    }
    else {
      size_t v62 = (size_t)v21;
    }
    int v63 = memcmp(v60, v19, v62);
    if (v63)
    {
      if ((v63 & 0x80000000) == 0) {
        goto LABEL_98;
      }
    }
    else if (v61 > (unint64_t)v21)
    {
      goto LABEL_98;
    }
    int v64 = (char)*v23;
    if (v64 >= 0) {
      v65 = (char *)(v23 - 23);
    }
    else {
      v65 = *(char **)(v23 - 23);
    }
    if (v64 >= 0) {
      size_t v66 = *v23;
    }
    else {
      size_t v66 = *(void *)(v23 - 15);
    }
    if (v66 >= (unint64_t)v21) {
      size_t v67 = (size_t)v21;
    }
    else {
      size_t v67 = v66;
    }
    int v68 = memcmp(v19, v65, v67);
    if (v68)
    {
      if (v68 < 0)
      {
LABEL_123:
        int v69 = 1;
        int v70 = 5;
        goto LABEL_162;
      }
    }
    else if ((unint64_t)v21 <= v66)
    {
      goto LABEL_123;
    }
LABEL_98:
    BOOL v24 = ++v17 < v18;
    v23 += 48;
  }
  while (v22 != v17);
  int v70 = 0;
  int v69 = 0;
LABEL_162:
  v2 = v128;
  p_traits = &this->__traits_;
  char v15 = v20;
LABEL_164:
  if (v15 < 0) {
    operator delete(v136[0]);
  }
  BOOL negate = v69;
  if (v24) {
    goto LABEL_207;
  }
LABEL_167:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_209;
  }
  int v133 = negate;
  v88 = v2;
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)p_traits, __p, __p);
  std::vector<std::string>::pointer v89 = this->__equivalences_.__begin_;
  int v90 = SHIBYTE(__p[2]);
  int64_t v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (!v91) {
    goto LABEL_188;
  }
  unint64_t v92 = v91 / 24;
  v93 = __p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    v94 = (void *)HIBYTE(__p[2]);
  }
  else {
    v94 = __p[1];
  }
  if (SHIBYTE(__p[2]) < 0)
  {
    int v135 = SHIBYTE(__p[2]);
    uint64_t v103 = 0;
    v104 = __p[0];
    if (v92 <= 1) {
      uint64_t v105 = 1;
    }
    else {
      uint64_t v105 = v91 / 24;
    }
    BOOL v97 = 1;
    do
    {
      std::string::size_type size = HIBYTE(v89->__r_.__value_.__r.__words[2]);
      int v107 = (char)size;
      if ((size & 0x80u) != 0) {
        std::string::size_type size = v89->__r_.__value_.__l.__size_;
      }
      if (v94 == (void *)size)
      {
        std::vector<std::string>::pointer v108 = v107 >= 0 ? v89 : (std::vector<std::string>::pointer)v89->__r_.__value_.__r.__words[0];
        if (!memcmp(v104, v108, (size_t)v93))
        {
          int v133 = 1;
          int v70 = 5;
          goto LABEL_203;
        }
      }
      BOOL v97 = ++v103 < v92;
      ++v89;
    }
    while (v105 != v103);
    int v70 = 0;
LABEL_203:
    v2 = v88;
    int v90 = v135;
    goto LABEL_204;
  }
  if (!HIBYTE(__p[2]))
  {
    std::string::size_type v114 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
    if ((v114 & 0x80u) != 0) {
      std::string::size_type v114 = v89->__r_.__value_.__l.__size_;
    }
    if (v114 != HIBYTE(__p[2]))
    {
      unint64_t v119 = 0;
      if (v92 <= 1) {
        uint64_t v120 = 1;
      }
      else {
        uint64_t v120 = v92;
      }
      uint64_t v121 = v120 - 1;
      v122 = &v89[1].__r_.__value_.__s.__data_[8];
      v2 = v88;
      while (v121 != v119)
      {
        ++v119;
        unint64_t v123 = v122[15];
        unint64_t v125 = *(void *)v122;
        v122 += 24;
        unint64_t v124 = v125;
        if ((v123 & 0x80u) != 0) {
          unint64_t v123 = v124;
        }
        if (v94 == (void *)v123)
        {
          BOOL v97 = v119 < v92;
          int v133 = 1;
          int v70 = 5;
          goto LABEL_204;
        }
      }
      BOOL v97 = 0;
      int v70 = 0;
      goto LABEL_204;
    }
    v2 = v88;
    BOOL negate = 1;
LABEL_208:
    uint64_t v25 = 2;
    goto LABEL_245;
  }
  uint64_t v95 = 0;
  uint64_t v96 = v92 <= 1 ? 1 : v91 / 24;
  BOOL v97 = 1;
  do
  {
    v98 = &v89[v95];
    v99 = (void *)HIBYTE(v98->__r_.__value_.__r.__words[2]);
    int v100 = (char)v99;
    if ((char)v99 < 0) {
      v99 = (void *)v98->__r_.__value_.__l.__size_;
    }
    if (v94 == v99)
    {
      if (v100 < 0) {
        v98 = (std::string *)v98->__r_.__value_.__r.__words[0];
      }
      v101 = __p;
      uint64_t v102 = HIBYTE(__p[2]);
      while (*(unsigned __int8 *)v101 == v98->__r_.__value_.__s.__data_[0])
      {
        v101 = (void **)((char *)v101 + 1);
        v98 = (std::string *)((char *)v98 + 1);
        if (!--v102)
        {
          int v133 = 1;
          int v70 = 5;
          v2 = v88;
          goto LABEL_204;
        }
      }
    }
    BOOL v97 = ++v95 < v92;
  }
  while (v95 != v96);
LABEL_188:
  BOOL v97 = 0;
  int v70 = 0;
  v2 = v88;
LABEL_204:
  if (v90 < 0) {
    operator delete(__p[0]);
  }
  BOOL negate = v133;
  if (!v97)
  {
LABEL_209:
    if ((char)__src < 0)
    {
      neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
    }
    else
    {
      std::regex_traits<char>::char_class_type mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      std::ctype_base::mask v111 = tab[__src];
      if (((v111 & mask) != 0 || __src == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(__src) & 0x80000000) == 0
        && ((tab[HIBYTE(__src)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(__src) == 95))
      {
        goto LABEL_227;
      }
      neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
      if ((neg_mask & v111) != 0 || __src == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_226:
        int v113 = negate;
LABEL_228:
        BOOL negate = v113;
        uint64_t v25 = 2;
        goto LABEL_245;
      }
    }
    if ((SHIBYTE(__src) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(__src)] & neg_mask) == 0)
      {
        int v113 = 1;
        if (HIBYTE(__src) != 95 || (neg_mask & 0x80) == 0) {
          goto LABEL_228;
        }
      }
      goto LABEL_226;
    }
LABEL_227:
    int v113 = 1;
    goto LABEL_228;
  }
LABEL_207:
  if (v70) {
    goto LABEL_208;
  }
  uint64_t v25 = 2;
  unsigned __int8 v28 = *v2->__current_;
  LOBYTE(__src) = v28;
  if (this->__icase_)
  {
LABEL_35:
    unsigned __int8 v28 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v28);
    LOBYTE(__src) = v28;
  }
LABEL_36:
  std::vector<char>::pointer v29 = this->__chars_.__begin_;
  unint64_t v30 = this->__chars_.__end_ - v29;
  if (v30)
  {
    if (v30 <= 1) {
      unint64_t v30 = 1;
    }
    while (1)
    {
      int v31 = *v29++;
      if (v31 == v28) {
        break;
      }
      if (!--v30) {
        goto LABEL_41;
      }
    }
LABEL_244:
    BOOL negate = 1;
    goto LABEL_245;
  }
LABEL_41:
  std::regex_traits<char>::char_class_type v32 = this->__neg_mask_;
  if (v32 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v28 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v28] & v32) == 0)
    {
      int v34 = (v32 >> 7) & 1;
      char v33 = v28 == 95 ? v34 : 0;
    }
    else
    {
      char v33 = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v36 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v28, end - this->__neg_chars_.__begin_);
    uint64_t v37 = v36 ? v36 : end;
    if ((v33 & 1) == 0 && v37 == end) {
      goto LABEL_244;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v38 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v39 = this->__ranges_.__end_;
  if (v38 == v39) {
    goto LABEL_128;
  }
  memset(v136, 170, sizeof(v136));
  if (!this->__collate_)
  {
    unsigned int v40 = 1;
    HIBYTE(v136[2]) = 1;
    LOWORD(v136[0]) = v28;
    int64_t v41 = (char *)v39 - (char *)v38;
    if (v41) {
      goto LABEL_59;
    }
LABEL_155:
    BOOL v48 = 0;
    if ((v40 & 0x80) != 0) {
      goto LABEL_126;
    }
    goto LABEL_127;
  }
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x1AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  LOWORD(__p[0]) = v28;
  (*(void (**)(void **__return_ptr))(*(void *)this->__traits_.__col_ + 32))(v136);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::vector<std::pair<std::string, std::string>>::pointer v38 = this->__ranges_.__begin_;
  unsigned int v40 = HIBYTE(v136[2]);
  int64_t v41 = (char *)this->__ranges_.__end_ - (char *)v38;
  if (!v41) {
    goto LABEL_155;
  }
LABEL_59:
  uint64_t v134 = v25;
  BOOL v131 = negate;
  v129 = v2;
  uint64_t v42 = 0;
  unint64_t v43 = v41 / 48;
  char v126 = v40;
  if ((v40 & 0x80u) == 0) {
    char v44 = v136;
  }
  else {
    char v44 = (void **)v136[0];
  }
  if ((v40 & 0x80u) == 0) {
    v45 = (void *)v40;
  }
  else {
    v45 = v136[1];
  }
  if (v43 <= 1) {
    uint64_t v46 = 1;
  }
  else {
    uint64_t v46 = v41 / 48;
  }
  v47 = (unsigned __int8 *)&v38->second.__r_.__value_.__r.__words[2] + 7;
  BOOL v48 = 1;
  while (2)
  {
    int v49 = (char)*(v47 - 24);
    if (v49 >= 0) {
      unint64_t v50 = (char *)(v47 - 47);
    }
    else {
      unint64_t v50 = *(char **)(v47 - 47);
    }
    if (v49 >= 0) {
      size_t v51 = *(v47 - 24);
    }
    else {
      size_t v51 = *(void *)(v47 - 39);
    }
    if ((unint64_t)v45 >= v51) {
      size_t v52 = v51;
    }
    else {
      size_t v52 = (size_t)v45;
    }
    int v53 = memcmp(v50, v44, v52);
    if (v53)
    {
      if (v53 < 0) {
        goto LABEL_84;
      }
    }
    else if (v51 <= (unint64_t)v45)
    {
LABEL_84:
      int v54 = (char)*v47;
      if (v54 >= 0) {
        v55 = (char *)(v47 - 23);
      }
      else {
        v55 = *(char **)(v47 - 23);
      }
      if (v54 >= 0) {
        size_t v56 = *v47;
      }
      else {
        size_t v56 = *(void *)(v47 - 15);
      }
      if (v56 >= (unint64_t)v45) {
        size_t v57 = (size_t)v45;
      }
      else {
        size_t v57 = v56;
      }
      int v58 = memcmp(v44, v55, v57);
      if (v58)
      {
        if (v58 < 0)
        {
LABEL_95:
          BOOL negate = 1;
          v2 = v129;
          uint64_t v25 = v134;
          if ((v126 & 0x80) == 0) {
            goto LABEL_127;
          }
          goto LABEL_126;
        }
      }
      else if ((unint64_t)v45 <= v56)
      {
        goto LABEL_95;
      }
    }
    BOOL v48 = ++v42 < v43;
    v47 += 48;
    if (v46 != v42) {
      continue;
    }
    break;
  }
  v2 = v129;
  BOOL negate = v131;
  uint64_t v25 = v134;
  if ((v126 & 0x80) == 0) {
    goto LABEL_127;
  }
LABEL_126:
  operator delete(v136[0]);
LABEL_127:
  if (v48) {
    goto LABEL_245;
  }
LABEL_128:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_239:
    if ((v28 & 0x80) != 0) {
      goto LABEL_245;
    }
    std::regex_traits<char>::char_class_type v115 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v28] & v115) == 0)
    {
      int v116 = (v115 >> 7) & 1;
      if (v28 != 95) {
        int v116 = 0;
      }
      if (v116 != 1) {
        goto LABEL_245;
      }
    }
    goto LABEL_244;
  }
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)&this->__traits_, (unsigned char *)&__src + 1, __p);
  std::vector<std::string>::pointer v71 = this->__equivalences_.__begin_;
  uint64_t v72 = HIBYTE(__p[2]);
  int64_t v73 = (char *)this->__equivalences_.__end_ - (char *)v71;
  if (!v73)
  {
    if ((HIBYTE(__p[2]) & 0x80) != 0) {
      operator delete(__p[0]);
    }
LABEL_238:
    unsigned __int8 v28 = __src;
    goto LABEL_239;
  }
  BOOL v132 = negate;
  v130 = v2;
  unint64_t v74 = 0;
  unint64_t v75 = v73 / 24;
  v76 = __p[0];
  v77 = __p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    v78 = (void *)HIBYTE(__p[2]);
  }
  else {
    v78 = __p[1];
  }
  if (v75 <= 1) {
    uint64_t v79 = 1;
  }
  else {
    uint64_t v79 = v73 / 24;
  }
  BOOL v80 = 1;
  while (2)
  {
    v81 = &v71[v74];
    v82 = (void *)HIBYTE(v81->__r_.__value_.__r.__words[2]);
    int v83 = (char)v82;
    if ((char)v82 < 0) {
      v82 = (void *)v81->__r_.__value_.__l.__size_;
    }
    if (v78 != v82)
    {
LABEL_149:
      if (++v74 == v79)
      {
        if ((v72 & 0x80) != 0) {
LABEL_236:
        }
          operator delete(__p[0]);
        v2 = v130;
        BOOL negate = v132;
        goto LABEL_238;
      }
      goto LABEL_153;
    }
    if (v83 >= 0) {
      v84 = &v71[v74];
    }
    else {
      v84 = (std::string *)v81->__r_.__value_.__r.__words[0];
    }
    if ((v72 & 0x80) == 0)
    {
      if (!v72)
      {
LABEL_157:
        v2 = v130;
        BOOL negate = 1;
        if (!v80) {
          goto LABEL_238;
        }
        goto LABEL_245;
      }
      uint64_t v85 = 0;
      while (*((unsigned __int8 *)__p + v85) == v84->__r_.__value_.__s.__data_[v85])
      {
        if (v72 == ++v85) {
          goto LABEL_157;
        }
      }
      goto LABEL_149;
    }
    BOOL v127 = v80;
    v86 = v76;
    v87 = v77;
    if (memcmp(v76, v84, (size_t)v77))
    {
      ++v74;
      v77 = v87;
      v76 = v86;
      if (v74 == v79) {
        goto LABEL_236;
      }
LABEL_153:
      BOOL v80 = v74 < v75;
      continue;
    }
    break;
  }
  operator delete(__p[0]);
  v2 = v130;
  BOOL negate = 1;
  if (!v127) {
    goto LABEL_238;
  }
LABEL_245:
  if (negate == this->__negate_)
  {
    first = 0;
    int v118 = -993;
  }
  else
  {
    v2->__current_ += v25;
    first = this->__first_;
    int v118 = -995;
  }
  v2->__do_ = v118;
  v2->__node_ = first;
}

void sub_1A60A2294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__loop<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 40);
  uint64_t v3 = *(void *)(a2 + 56);
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    unint64_t *v4 = 0;
    if (!*(void *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(void *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(void *)(a2 + 80) = *(void *)(result + 8);
      *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
      int v20 = *(_DWORD *)(result + 44);
      int v21 = *(_DWORD *)(result + 48);
      if (v20 == v21) {
        return result;
      }
      uint64_t v22 = (v21 - 1);
      uint64_t v23 = (v20 - 1);
      uint64_t v24 = *(void *)(a2 + 24);
      uint64_t v25 = *(void *)(a2 + 32);
      uint64_t v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        uint64_t v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        uint64_t v28 = v25 + 24 * v23 + 24;
        unint64_t v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(void *)(v28 - 24) = v24;
          *(void *)(v28 - 16) = v24;
          *(void *)uint64_t v28 = v24;
          *(void *)(v28 + 8) = v24;
          *(unsigned char *)(v28 - 8) = 0;
          *(unsigned char *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL)) {
          return result;
        }
      }
      else
      {
        uint64_t v27 = v23;
      }
      uint64_t v30 = v22 - v27;
      int v31 = (unsigned char *)(v25 + 24 * v27 + 16);
      do
      {
        *((void *)v31 - 2) = v24;
        *((void *)v31 - 1) = v24;
        *int v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  unint64_t v5 = *v4 + 1;
  unint64_t *v4 = v5;
  unint64_t v6 = *(void *)(result + 24);
  unint64_t v7 = *(void *)(result + 32);
  BOOL v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6) {
    BOOL v8 = v5 < v7 && *(void *)(v3 + 16 * v2 + 8) != *(void *)(a2 + 16);
  }
  if (v8 && v5 >= v6) {
    goto LABEL_26;
  }
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(void *)(a2 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a2 + 80) = *(void *)(result + 8);
  *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
  int v12 = *(_DWORD *)(result + 44);
  int v13 = *(_DWORD *)(result + 48);
  if (v12 == v13) {
    return result;
  }
  uint64_t v14 = (v13 - 1);
  uint64_t v15 = (v12 - 1);
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  uint64_t v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    uint64_t v19 = v15;
LABEL_39:
    uint64_t v34 = v14 - v19;
    v35 = (unsigned char *)(v17 + 24 * v19 + 16);
    do
    {
      *((void *)v35 - 2) = v16;
      *((void *)v35 - 1) = v16;
      unsigned char *v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  uint64_t v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  uint64_t v32 = v17 + 24 * v15 + 24;
  unint64_t v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(void *)(v32 - 24) = v16;
    *(void *)(v32 - 16) = v16;
    *(void *)uint64_t v32 = v16;
    *(void *)(v32 + 8) = v16;
    *(unsigned char *)(v32 - 8) = 0;
    *(unsigned char *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL)) {
    goto LABEL_39;
  }
  return result;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  std::vector<std::pair<char, char>>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) < __n)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    unint64_t v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    uint64_t v11 = v10;
    int v12 = (std::sub_match<const char *> *)operator new(24 * v10);
    this->__begin_ = v12;
    this->__end_ = v12;
    this->__end_cap_.__value_ = &v12[v11];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    uint64_t v14 = &v12[__n];
    do
    {
      v12->std::pair<const char *, const char *> = __u->std::pair<const char *, const char *>;
      *(void *)&v12->matched = *(void *)&__u->matched;
      ++v12;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  std::vector<std::csub_match>::pointer end = this->__end_;
  unint64_t v16 = end - begin;
  if (v16 >= __n) {
    std::vector<std::csub_match>::size_type v17 = __n;
  }
  else {
    std::vector<std::csub_match>::size_type v17 = end - begin;
  }
  if (v17)
  {
    uint64_t v18 = begin;
    do
    {
      *v18++ = *__u;
      --v17;
    }
    while (v17);
  }
  if (__n <= v16)
  {
    uint64_t v14 = &begin[__n];
LABEL_25:
    this->__end_ = v14;
    return;
  }
  uint64_t v19 = &end[__n - v16];
  std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
  do
  {
    std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
    *(void *)&end->matched = *(void *)&__u->matched;
    end->std::pair<const char *, const char *> = v21;
    ++end;
    v20 -= 24;
  }
  while (v20);
  this->__end_ = v19;
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      std::vector<std::pair<unsigned long, const char *>>::size_type v12 = 16 * __n;
      bzero(this->__end_, 16 * __n);
      std::vector<std::csub_match>::pointer end = (std::pair<unsigned long, const char *> *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
    uint64_t v7 = end - this->__begin_;
    unint64_t v8 = v7 + __n;
    if ((v7 + __n) >> 60) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)value - (char *)begin;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    std::vector<std::csub_match>::size_type v13 = (std::pair<unsigned long, const char *> *)&v11[16 * v7];
    size_t v14 = __n;
    uint64_t v15 = (std::pair<unsigned long, const char *> *)&v11[16 * v10];
    bzero(v13, v14 * 16);
    unint64_t v16 = &v13[v14];
    if (end != begin)
    {
      do
      {
        v13[-1] = end[-1];
        --v13;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
    {
      operator delete(end);
    }
  }
}

void std::__tree<std::string>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::string>::destroy(*(void *)a1);
    std::__tree<std::string>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      uint64_t v2 = a1;
    }
    else
    {
      uint64_t v2 = a1;
    }
    operator delete(v2);
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  uint64_t v1 = std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);

  operator delete(v1);
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

void std::__alternate<char>::~__alternate(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EFB08FF8;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  operator delete(__p);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::vector<std::csub_match>::pointer end = a1->__end_;
  uint64_t v7 = a2;
  do
  {
    unint64_t v8 = (std::basic_regex<char> *)v7;
    uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v7, a3);
    if (v7 != (char *)v8) {
      continue;
    }
    uint64_t v9 = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    uint64_t v11 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
    if (v11 == v8) {
      break;
    }
    uint64_t v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
  }
  while (v7 != (char *)v8);
  if (v8 == (std::basic_regex<char> *)a2)
  {
    std::vector<std::pair<unsigned long, const char *>>::size_type v12 = (std::__node<char> *)operator new(0x10uLL);
    std::vector<std::csub_match>::size_type v13 = a1->__end_;
    first = v13->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)first;
    v13->__first_ = v12;
    uint64_t v15 = (std::__owns_one_state<char> *)a1->__end_->__first_;
    goto LABEL_8;
  }
LABEL_9:
  if (v8 != (std::basic_regex<char> *)a3)
  {
    if (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
    {
      unint64_t v16 = a1->__end_;
      std::vector<std::csub_match>::size_type v17 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
      uint64_t v18 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
      while (1)
      {
        unint64_t v8 = (std::basic_regex<char> *)v18;
        uint64_t v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v18, a3);
        if (v18 == (char *)v8)
        {
          uint64_t v19 = a1->__end_;
          unsigned int v20 = a1->__marked_count_;
          std::pair<const char *, const char *> v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
          if (v21 == v8)
          {
LABEL_16:
            if (v8 == v17)
            {
              uint64_t v22 = (std::__node<char> *)operator new(0x10uLL);
              uint64_t v23 = a1->__end_;
              uint64_t v24 = v23->__first_;
              v22[1].__vftable = (std::__node<char>_vtbl *)v24;
              v23->__first_ = v22;
              a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
            }
            uint64_t v25 = (std::__node<char> *)operator new(0x18uLL);
            uint64_t v26 = v16->__first_;
            v25[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
            v25[2].__vftable = (std::__node<char>_vtbl *)v26;
            v25->__vftable = (std::__node<char>_vtbl *)&unk_1EFB09070;
            end->__first_ = v25;
            v16->__first_ = 0;
            uint64_t v27 = (std::__node<char> *)operator new(0x10uLL);
            uint64_t v28 = a1->__end_->__first_;
            v27[1].__vftable = (std::__node<char>_vtbl *)v28;
            v16->__first_ = v27;
            a1->__end_->__first_ = 0;
            unint64_t v29 = (std::__node<char> *)operator new(0x10uLL);
            uint64_t v30 = v16->__first_;
            v29->__vftable = (std::__node<char>_vtbl *)&unk_1EFB090B8;
            v29[1].__vftable = (std::__node<char>_vtbl *)v30;
            a1->__end_->__first_ = v29;
            uint64_t v15 = (std::__owns_one_state<char> *)v16->__first_;
LABEL_8:
            a1->__end_ = v15;
            goto LABEL_9;
          }
          uint64_t v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v21, (std::basic_regex<char> *)a3, v19, v20 + 1, a1->__marked_count_ + 1);
        }
        if (v18 == (char *)v8) {
          goto LABEL_16;
        }
      }
    }
    return (char *)v8;
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    int v5 = a2[1];
    char v6 = v5 == 94;
    uint64_t v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    unint64_t v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(void *)(*(void *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(void *)(*(void *)(a1 + 56) + 8) = v8;
    *(void *)(a1 + 56) = v8;
    if (v7 == a3) {
      goto LABEL_20;
    }
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3) {
      goto LABEL_20;
    }
    do
    {
      uint64_t v9 = v7;
      uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v7, a3, (uint64_t)v8);
    }
    while (v7 != v9);
    if (v9 == a3) {
      goto LABEL_20;
    }
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_1A60A2D54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  char v6 = (char *)a4;
  int v9 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v40 = 0;
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_38:
    int v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_33;
  }
  int v10 = a2[1];
  if (v10 != 46)
  {
    if (v10 != 58)
    {
      if (v10 == 61)
      {
        char v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
        char v11 = 0;
        if ((SHIBYTE(v40) & 0x80000000) == 0) {
          goto LABEL_64;
        }
        goto LABEL_63;
      }
      int v9 = 0;
      goto LABEL_38;
    }
    std::vector<std::pair<unsigned long, const char *>>::size_type v12 = a2 + 2;
    if (a3 - (v4 + 2) >= 2)
    {
      uint64_t v13 = 0;
      size_t v14 = (unsigned __int8 *)v4;
      if (v4[2] == 58) {
        goto LABEL_14;
      }
      do
      {
        do
        {
          if (a3 - v4 - 4 == v13) {
            goto LABEL_89;
          }
          size_t v14 = (unsigned __int8 *)&v4[++v13];
        }
        while (v4[v13 + 2] != 58);
LABEL_14:
        ;
      }
      while (v14[3] != 93);
      uint64_t v15 = &v4[v13 + 2];
      if (v15 != a3)
      {
        int v16 = std::regex_traits<char>::__lookup_classname<char const*>(a1, v12, v15, *(_DWORD *)(a1 + 24) & 1);
        if (!v16) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
        }
        char v11 = 0;
        *((_DWORD *)v6 + 40) |= v16;
        char v6 = &v4[v13 + 4];
        if (SHIBYTE(v40) < 0) {
          goto LABEL_63;
        }
        goto LABEL_64;
      }
    }
LABEL_89:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  std::vector<std::csub_match>::size_type v17 = a2 + 2;
  if (a3 - (v4 + 2) < 2) {
    goto LABEL_89;
  }
  uint64_t v18 = a3 - v4 - 4;
  uint64_t v19 = v4 + 2;
  unsigned int v20 = v17 + 1;
  if (*v17 == 46) {
    goto LABEL_23;
  }
  do
  {
    do
    {
      if (!v18) {
        goto LABEL_89;
      }
      --v18;
      uint64_t v19 = v20;
      int v21 = *v20++;
    }
    while (v21 != 46);
LABEL_23:
    ;
  }
  while (*v20 != 93);
  if (v19 == a3) {
    goto LABEL_89;
  }
  std::regex_traits<char>::__lookup_collatename<char *>(v17, a1, v19, (uint64_t)&v41);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v40 = v42;
  *(_OWORD *)__p = v41;
  uint64_t v22 = (char *)HIBYTE(v42);
  int v9 = SHIBYTE(v42);
  uint64_t v23 = *((void *)&v41 + 1);
  if (v42 < 0) {
    uint64_t v22 = (char *)__p[1];
  }
  if ((unint64_t)(v22 - 1) >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v4 = v19 + 2;
  int v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v42 >= 0) {
    uint64_t v23 = HIBYTE(v42);
  }
  if (v23)
  {
    uint64_t v28 = v4;
    if (v4 == a3) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
LABEL_33:
  if ((v24 | 0x40) != 0x40)
  {
    LOBYTE(v25) = *v4;
LABEL_57:
    if (v9 < 0)
    {
      uint64_t v34 = __p[0];
      __p[1] = (void *)1;
      *(unsigned char *)__p[0] = v25;
      v34[1] = 0;
      uint64_t v28 = v4 + 1;
      if (v4 + 1 == a3) {
        goto LABEL_41;
      }
    }
    else
    {
      HIBYTE(v40) = 1;
      LOWORD(__p[0]) = v25;
      uint64_t v28 = v4 + 1;
      if (v4 + 1 == a3) {
        goto LABEL_41;
      }
    }
    goto LABEL_40;
  }
  int v25 = *v4;
  if (v25 != 92) {
    goto LABEL_57;
  }
  uint64_t v26 = v4 + 1;
  if (v24) {
    uint64_t v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v26, a3, (uint64_t *)__p);
  }
  else {
    uint64_t v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v26, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v6);
  }
  uint64_t v28 = v27;
  if (v27 == a3)
  {
LABEL_41:
    if (SHIBYTE(v40) < 0)
    {
      if (!__p[1]) {
        goto LABEL_62;
      }
      if (__p[1] != (void *)1)
      {
        uint64_t v30 = (void **)__p[0];
LABEL_61:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v6, *(char *)v30, *((char *)v30 + 1));
LABEL_62:
        char v11 = 1;
        v4 = v28;
        if ((SHIBYTE(v40) & 0x80000000) == 0) {
          goto LABEL_64;
        }
        goto LABEL_63;
      }
      uint64_t v30 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v40)) {
        goto LABEL_62;
      }
      uint64_t v30 = __p;
      if (HIBYTE(v40) != 1) {
        goto LABEL_61;
      }
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, *(char *)v30);
    goto LABEL_62;
  }
LABEL_40:
  int v29 = *v28;
  if (v29 == 93) {
    goto LABEL_41;
  }
  int v31 = v28 + 1;
  if (v28 + 1 == a3 || v29 != 45 || *v31 == 93) {
    goto LABEL_41;
  }
  long long v41 = 0uLL;
  int64_t v42 = 0;
  v4 = v28 + 2;
  if (v28 + 2 == a3 || *v31 != 91 || *v4 != 46)
  {
    if ((v24 | 0x40) == 0x40)
    {
      LODWORD(v31) = *v31;
      if (v31 == 92)
      {
        if (v24) {
          uint64_t v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v28 + 2, a3, (uint64_t *)&v41);
        }
        else {
          uint64_t v32 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v28 + 2, (unsigned __int8 *)a3, (uint64_t)&v41, (uint64_t)v6);
        }
        goto LABEL_79;
      }
    }
    else
    {
      LOBYTE(v31) = *v31;
    }
    HIBYTE(v42) = 1;
    LOWORD(v41) = v31;
    goto LABEL_80;
  }
  uint64_t v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v28 + 3, a3, (uint64_t)&v41);
LABEL_79:
  v4 = v32;
LABEL_80:
  *(_OWORD *)uint64_t v37 = *(_OWORD *)__p;
  uint64_t v38 = v40;
  __p[1] = 0;
  uint64_t v40 = 0;
  __p[0] = 0;
  *(_OWORD *)v35 = v41;
  uint64_t v36 = v42;
  long long v41 = 0uLL;
  int64_t v42 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v6, (char *)v37, (uint64_t)v35);
  if (SHIBYTE(v36) < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v38) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v42) & 0x80000000) == 0) {
        goto LABEL_83;
      }
LABEL_87:
      operator delete((void *)v41);
      char v11 = 1;
      if (SHIBYTE(v40) < 0) {
        goto LABEL_63;
      }
      goto LABEL_64;
    }
  }
  else if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    goto LABEL_82;
  }
  operator delete(v37[0]);
  if (SHIBYTE(v42) < 0) {
    goto LABEL_87;
  }
LABEL_83:
  char v11 = 1;
  if (SHIBYTE(v40) < 0) {
LABEL_63:
  }
    operator delete(__p[0]);
LABEL_64:
  if (v11) {
    return v4;
  }
  return v6;
}

void sub_1A60A3270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      unint64_t v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v8 == a3;
      }
      if (!v20 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        int v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
        size_t v10 = 0;
        goto LABEL_35;
      }
      __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
      size_t v24 = 0;
      goto LABEL_44;
    }
    if (locale_low == 43)
    {
      unint64_t v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        int v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
        size_t v10 = 1;
LABEL_35:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v10, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v9;
      }
      __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
      size_t v24 = 1;
      goto LABEL_44;
    }
    return this;
  }
  if (locale_low == 63)
  {
    int v21 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6) {
      BOOL v22 = 1;
    }
    else {
      BOOL v22 = v21 == a3;
    }
    if (v22 || LOBYTE(v21->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v21;
    }
    else
    {
      uint64_t v23 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v23;
    }
  }
  else
  {
    if (locale_low != 123) {
      return this;
    }
    char v11 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_71;
    }
    int v12 = *v11;
    if ((v12 & 0xF8) != 0x30 && (v12 & 0xFE) != 0x38) {
      goto LABEL_71;
    }
    int v13 = v12 - 48;
    size_t v14 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_19:
      size_t v14 = (char *)a3;
    }
    else
    {
      while (1)
      {
        int v15 = *v14;
        if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38) {
          break;
        }
        if (v13 >= 214748364) {
          goto LABEL_71;
        }
        int v13 = v15 + 10 * v13 - 48;
        if (++v14 == (char *)a3) {
          goto LABEL_19;
        }
      }
    }
    if (v14 == v11) {
      goto LABEL_71;
    }
    if (v14 == (char *)a3) {
      goto LABEL_72;
    }
    int v16 = *v14;
    if (v16 != 44)
    {
      if (v16 == 125)
      {
        std::vector<std::csub_match>::size_type v17 = (std::basic_regex<char> *)(v14 + 1);
        if (v6 || v17 == a3 || LOBYTE(v17->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 1);
          return v17;
        }
        else
        {
          uint64_t v18 = (unsigned __int8 *)(v14 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v18;
        }
      }
LABEL_71:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    int v25 = (std::basic_regex<char> *)(v14 + 1);
    if (v14 + 1 == (char *)a3) {
      goto LABEL_71;
    }
    int v26 = LOBYTE(v25->__traits_.__loc_.__locale_);
    if (v26 == 125)
    {
      unint64_t v8 = (std::basic_regex<char> *)(v14 + 2);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        size_t v10 = v13;
        int v9 = v14 + 3;
        __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
        goto LABEL_35;
      }
      size_t v24 = v13;
      __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
LABEL_44:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v24, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v8;
    }
    if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38) {
      goto LABEL_72;
    }
    int v27 = v26 - 48;
    uint64_t v28 = (std::basic_regex<char> *)(v14 + 2);
    if (v28 == a3)
    {
LABEL_60:
      uint64_t v28 = a3;
    }
    else
    {
      while (1)
      {
        int v29 = LOBYTE(v28->__traits_.__loc_.__locale_);
        if ((v29 & 0xF8) != 0x30 && (v29 & 0xFE) != 0x38) {
          break;
        }
        if (v27 >= 214748364) {
          goto LABEL_71;
        }
        int v27 = v29 + 10 * v27 - 48;
        uint64_t v28 = (std::basic_regex<char> *)((char *)v28 + 1);
        if (v28 == a3) {
          goto LABEL_60;
        }
      }
    }
    if (v28 == v25 || v28 == a3 || LOBYTE(v28->__traits_.__loc_.__locale_) != 125) {
LABEL_72:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v27 < v13) {
      goto LABEL_71;
    }
    uint64_t v30 = (std::basic_regex<char> *)((char *)&v28->__traits_.__loc_.__locale_ + 1);
    if (v6 || v30 == a3 || LOBYTE(v30->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 1);
      return v30;
    }
    else
    {
      int v31 = (char *)&v28->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v31;
    }
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8 = __mexp_end;
  int v9 = __mexp_begin;
  size_t v14 = operator new(0x10uLL);
  std::vector<std::csub_match>::pointer end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  std::vector<std::csub_match>::size_type v17 = operator new(0x38uLL);
  unsigned int loop_count = this->__loop_count_;
  *((void *)v17 + 1) = __s->__first_;
  *((void *)v17 + 2) = v14;
  *(void *)std::vector<std::csub_match>::size_type v17 = &unk_1EFB08F98;
  *((void *)v17 + 3) = __min;
  *((void *)v17 + 4) = __max;
  *((_DWORD *)v17 + 10) = loop_count;
  *((_DWORD *)v17 + 11) = v9;
  *((_DWORD *)v17 + 12) = v8;
  *((unsigned char *)v17 + 52) = __greedy;
  __s->__first_ = 0;
  uint64_t v19 = (std::__node<char> *)operator new(0x10uLL);
  v19->__vftable = (std::__node<char>_vtbl *)&unk_1EFB09028;
  v19[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v19;
  this->__end_ = (std::__owns_one_state<char> *)*((void *)v17 + 2);
  __s->__first_ = (std::__node<char> *)v17;
  this->__loop_count_ = loop_count + 1;
}

void sub_1A60A380C(_Unwind_Exception *a1)
{
  std::__loop<char>::~__loop(v1);
  _Unwind_Resume(a1);
}

void sub_1A60A3820(_Unwind_Exception *a1)
{
  std::__empty_state<char>::~__empty_state(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        int v14 = a2[1];
        if (v14 == 66)
        {
          int v15 = (char *)operator new(0x30uLL);
          uint64_t v23 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)int v15 = &unk_1EFB08C38;
          *((void *)v15 + 1) = v23;
          std::locale::locale((std::locale *)v15 + 2, (const std::locale *)a1);
          *(_OWORD *)(v15 + 24) = *(_OWORD *)(a1 + 8);
          v15[40] = 1;
        }
        else
        {
          if (v14 != 98) {
            return a2;
          }
          int v15 = (char *)operator new(0x30uLL);
          uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)int v15 = &unk_1EFB08C38;
          *((void *)v15 + 1) = v16;
          std::locale::locale((std::locale *)v15 + 2, (const std::locale *)a1);
          *(_OWORD *)(v15 + 24) = *(_OWORD *)(a1 + 8);
          v15[40] = 0;
        }
        *(void *)(*(void *)(a1 + 56) + 8) = v15;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        return a2 + 2;
      }
      return a2;
    }
    if (v6 != 94) {
      return a2;
    }
    size_t v10 = operator new(0x18uLL);
    BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v12 = *(void *)(a1 + 56);
    v10[1] = *(void *)(v12 + 8);
    int v13 = &unk_1EFB08BA8;
LABEL_14:
    *size_t v10 = v13;
    *((unsigned char *)v10 + 16) = v11;
    *(void *)(v12 + 8) = v10;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    size_t v10 = operator new(0x18uLL);
    BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v12 = *(void *)(a1 + 56);
    v10[1] = *(void *)(v12 + 8);
    int v13 = &unk_1EFB08BF0;
    goto LABEL_14;
  }
  BOOL v8 = v6 == 40;
  uint64_t v7 = a2 + 1;
  BOOL v8 = !v8 || v7 == a3;
  if (v8) {
    return a2;
  }
  BOOL v8 = *v7 == 63;
  std::vector<std::csub_match>::size_type v17 = a2 + 2;
  if (!v8 || v17 == a3) {
    return a2;
  }
  int v19 = *v17;
  if (v19 == 33)
  {
    *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v26.__loop_count_ = v24;
    *(_OWORD *)&v26.__start_.__cntrl_ = v24;
    *(_OWORD *)&v26.__traits_.__loc_.__locale_ = v24;
    *(_OWORD *)&v26.__traits_.__col_ = v24;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v26);
    v26.__flags_ = *(_DWORD *)(a1 + 24);
    int v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v26, a2 + 3, a3);
    unsigned int marked_count = v26.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v26, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v21 == a3 || *v21 != 41) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    goto LABEL_32;
  }
  if (v19 != 61) {
    return a2;
  }
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v26.__loop_count_ = v20;
  *(_OWORD *)&v26.__start_.__cntrl_ = v20;
  *(_OWORD *)&v26.__traits_.__loc_.__locale_ = v20;
  *(_OWORD *)&v26.__traits_.__col_ = v20;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v26);
  v26.__flags_ = *(_DWORD *)(a1 + 24);
  int v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v26, a2 + 3, a3);
  unsigned int v22 = v26.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v26, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v22;
  if (v21 == a3 || *v21 != 41) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
LABEL_32:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v26.__traits_.__loc_);
  return v21 + 1;
}

void sub_1A60A3B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1A60A3B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1A60A3B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1A60A3BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    switch(LOBYTE(a2->__traits_.__loc_.__locale_))
    {
      case '(':
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3) {
          goto LABEL_32;
        }
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
          && BYTE1(a2->__traits_.__loc_.__locale_) == 63
          && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, (char *)a3);
          if (v7 == (char *)a3) {
            goto LABEL_32;
          }
          uint64_t v3 = (std::basic_regex<char> *)v7;
          if (*v7 != 41) {
            goto LABEL_32;
          }
        }
        else
        {
          if ((this->__flags_ & 2) != 0)
          {
            unsigned int marked_count = this->__marked_count_;
          }
          else
          {
            uint64_t v12 = (std::__node<char> *)operator new(0x18uLL);
            unsigned int marked_count = this->__marked_count_ + 1;
            this->__marked_count_ = marked_count;
            std::vector<std::csub_match>::pointer end = this->__end_;
            first = end->__first_;
            v12->__vftable = (std::__node<char>_vtbl *)&unk_1EFB08F08;
            v12[1].__vftable = (std::__node<char>_vtbl *)first;
            LODWORD(v12[2].__vftable) = marked_count;
            end->__first_ = v12;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          uint64_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, (char *)a3);
          if (v16 == (char *)a3 || (uint64_t v3 = (std::basic_regex<char> *)v16, *v16 != 41)) {
LABEL_32:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          if ((this->__flags_ & 2) == 0)
          {
            std::vector<std::csub_match>::size_type v17 = (std::__node<char> *)operator new(0x18uLL);
            uint64_t v18 = this->__end_;
            int v19 = v18->__first_;
            v17->__vftable = (std::__node<char>_vtbl *)&unk_1EFB08F50;
            v17[1].__vftable = (std::__node<char>_vtbl *)v19;
            LODWORD(v17[2].__vftable) = marked_count;
            v18->__first_ = v17;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
        }
        --*p_open_count;
LABEL_29:
        uint64_t v3 = (std::basic_regex<char> *)((char *)v3 + 1);
        break;
      case ')':
      case ',':
      case '-':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        goto LABEL_20;
      case '*':
      case '+':
      case '?':
        goto LABEL_31;
      case '.':
        BOOL v8 = (std::__node<char> *)operator new(0x10uLL);
        int v9 = this->__end_;
        size_t v10 = v9->__first_;
        v8->__vftable = (std::__node<char>_vtbl *)&unk_1EFB08CC8;
        v8[1].__vftable = (std::__node<char>_vtbl *)v10;
        v9->__first_ = v8;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        goto LABEL_29;
      case '[':
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      case '\\':
        return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      default:
        if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123) {
LABEL_31:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
LABEL_20:
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
  }
  return (unsigned __int8 *)v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  int v6 = operator new(8uLL);
  *int v6 = &unk_1EFB08A58;
  uint64_t v7 = operator new(0x10uLL);
  v7[1] = v6;
  BOOL v8 = operator new(0x20uLL);
  *BOOL v8 = &unk_1EFB08AB0;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  int v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v10 = *(void *)(a1 + 40);
    *(void *)(a1 + 56) = v10;
    unsigned int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v11 <= 0x3F) {
      goto LABEL_4;
    }
LABEL_9:
    if (v11 != 64)
    {
      if (v11 == 128)
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(a1, a2, a3);
      }
      if (v11 == 256)
      {
        return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
      }
LABEL_31:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
    }
LABEL_15:
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
  }
  uint64_t v10 = *(void *)(a1 + 40);
  *(void *)(a1 + 56) = v10;
  unsigned int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v11 > 0x3F) {
    goto LABEL_9;
  }
LABEL_4:
  if (v11)
  {
    if (v11 == 16)
    {
      return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, a2, a3);
    }
    if (v11 != 32) {
      goto LABEL_31;
    }
    goto LABEL_15;
  }
  int v13 = a2;
  while (1)
  {
    int v14 = (std::basic_regex<char> *)v13;
    int v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v13, a3);
    if (v13 == (char *)v14) {
      break;
    }
LABEL_19:
    if (v13 == (char *)v14) {
      goto LABEL_29;
    }
  }
  int v15 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v16 = *(_DWORD *)(a1 + 28);
  std::vector<std::csub_match>::size_type v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v14, (std::basic_regex<char> *)a3);
  if (v17 != (unsigned __int8 *)v14)
  {
    int v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    goto LABEL_19;
  }
LABEL_29:
  if (v14 == (std::basic_regex<char> *)a2)
  {
    uint64_t v18 = operator new(0x10uLL);
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v20 = *(void *)(v19 + 8);
    v18[1] = v20;
    *(void *)(v19 + 8) = v18;
    uint64_t v21 = *(void *)(*(void *)(a1 + 56) + 8);
    goto LABEL_32;
  }
LABEL_33:
  if (v14 != (std::basic_regex<char> *)a3)
  {
    if (LOBYTE(v14->__traits_.__loc_.__locale_) == 124)
    {
      uint64_t v22 = *(void *)(a1 + 56);
      uint64_t v23 = (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1);
      long long v24 = (char *)&v14->__traits_.__loc_.__locale_ + 1;
      while (1)
      {
        int v14 = (std::basic_regex<char> *)v24;
        long long v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v24, a3);
        if (v24 == (char *)v14)
        {
          int v25 = *(std::__owns_one_state<char> **)(a1 + 56);
          int v26 = *(_DWORD *)(a1 + 28);
          int v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v14, (std::basic_regex<char> *)a3);
          if (v27 == (unsigned __int8 *)v14)
          {
LABEL_40:
            if (v14 == v23)
            {
              uint64_t v28 = operator new(0x10uLL);
              uint64_t v29 = *(void *)(a1 + 56);
              uint64_t v30 = *(void *)(v29 + 8);
              v28[1] = v30;
              *(void *)(v29 + 8) = v28;
              *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
            }
            int v31 = operator new(0x18uLL);
            uint64_t v32 = *(void *)(v22 + 8);
            v31[1] = *(void *)(v10 + 8);
            v31[2] = v32;
            *int v31 = &unk_1EFB09070;
            *(void *)(v10 + 8) = v31;
            *(void *)(v22 + 8) = 0;
            unint64_t v33 = operator new(0x10uLL);
            uint64_t v34 = *(void *)(*(void *)(a1 + 56) + 8);
            v33[1] = v34;
            *(void *)(v22 + 8) = v33;
            *(void *)(*(void *)(a1 + 56) + 8) = 0;
            v35 = operator new(0x10uLL);
            uint64_t v36 = *(void *)(v22 + 8);
            void *v35 = &unk_1EFB090B8;
            v35[1] = v36;
            *(void *)(*(void *)(a1 + 56) + 8) = v35;
            uint64_t v21 = *(void *)(v22 + 8);
LABEL_32:
            *(void *)(a1 + 56) = v21;
            goto LABEL_33;
          }
          long long v24 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v27, (std::basic_regex<char> *)a3, v25, (v26 + 1), (*(_DWORD *)(a1 + 28) + 1));
        }
        if (v24 == (char *)v14) {
          goto LABEL_40;
        }
      }
    }
    return (char *)v14;
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      uint64_t result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__n > v8)
    {
      size_t v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __n - v8)
      {
        int v9 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          uint64_t v7 = operator new(v11);
          memcpy(v7, __s, __n);
          if (v8 != 22) {
            operator delete(v9);
          }
          this->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
          this->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
LABEL_23:
          this->__r_.__value_.__l.__size_ = __n;
          goto LABEL_24;
        }
LABEL_8:
        std::string::size_type v12 = 2 * v8;
        if (__n > 2 * v8) {
          std::string::size_type v12 = __n;
        }
        uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v13 = v12 | 7;
        }
        if (v12 >= 0x17) {
          size_t v11 = v13 + 1;
        }
        else {
          size_t v11 = 23;
        }
        goto LABEL_15;
      }
LABEL_25:
      std::string::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = HIBYTE(v10);
    uint64_t v7 = (void *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v7 = this;
    if (__n > 0x16)
    {
      if (__n - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        unint64_t v8 = 22;
        int v9 = this;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    goto LABEL_23;
  }
  *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_24:
  *((unsigned char *)v7 + __n) = 0;
  return this;
}

uint64_t diag::DIAGConfigurer::DIAGConfigurer(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v12, "com.apple.telephony.abm", "trace.diag.cfg");
  dispatch_object_t object = 0;
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::SharedSynchronizable((void *)(a1 + 72), "trace.diag.cfg", QOS_CLASS_USER_INITIATED, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::Loggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>((void *)a1, (uint64_t)v12, a2);
  *(void *)a1 = &unk_1EFB087F8;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v12);
  *(void *)a1 = &unk_1EFB084A8;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)a3;
  unint64_t v8 = *(const void **)(a3 + 8);
  *(void *)(a1 + 112) = v8;
  if (v8) {
    CFRetain(v8);
  }
  *(void *)(a1 + 120) = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(a3 + 24);
  *(void *)(a1 + 128) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 136) = *(void *)(a3 + 32);
  uint64_t v10 = *(void *)(a3 + 40);
  *(void *)(a1 + 144) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 168) = a4;
  return a1;
}

void sub_1A60A463C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::~SharedSynchronizable(v2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void sub_1A60A4658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a10);
  _Unwind_Resume(a1);
}

void diag::DIAGConfigurer::~DIAGConfigurer(diag::DIAGConfigurer *this)
{
  *(void *)this = &unk_1EFB084A8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    v4 = (const void *)*((void *)this + 14);
    if (!v4) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  v4 = (const void *)*((void *)this + 14);
  if (v4) {
LABEL_7:
  }
    CFRelease(v4);
LABEL_8:
  *(void *)this = &unk_1EFB087B8;
  MEMORY[0x1A6274710]((char *)this + 8);
  int v5 = *((void *)this + 12);
  if (v5) {
    dispatch_release(v5);
  }
  unint64_t v6 = *((void *)this + 11);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void diag::DIAGConfigurer::drain(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 72);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  int v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (unint64_t v8 = std::__shared_weak_count::lock(v4)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  v12[2] = ___ZN4diag14DIAGConfigurer5drainEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v12[3] = &__block_descriptor_tmp_6_0;
  v12[4] = a1;
  uint64_t v10 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v10 = _Block_copy(v10);
  }
  size_t v11 = *(NSObject **)(a2 + 8);
  aBlock = v10;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  uint64_t v15 = v6;
  int v16 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped(v5, (uint64_t)v12);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void ___ZN4diag14DIAGConfigurer5drainEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = v2[17];
  if (v3)
  {
    uint64_t v4 = v2[19];
    uint64_t v5 = v2[20];
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 1174405120;
    v15[2] = ___ZN4diag14DIAGConfigurer5drainEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2;
    v15[3] = &__block_descriptor_tmp_16;
    uint64_t v6 = (std::__shared_weak_count *)a1[8];
    v15[4] = a1[7];
    int v16 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = (void *)a1[5];
    if (v7) {
      uint64_t v7 = _Block_copy(v7);
    }
    unint64_t v8 = a1[6];
    std::vector<std::csub_match>::size_type v17 = v7;
    dispatch_object_t v18 = v8;
    if (v8) {
      dispatch_retain(v8);
    }
    uint64_t v9 = _Block_copy(v15);
    uint64_t v10 = v2[11];
    if (v10) {
      dispatch_retain(v10);
    }
    aBlock = v9;
    dispatch_object_t object = v10;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v3 + 48))(v3, 32, v4, v5, &aBlock);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v18) {
      dispatch_release(v18);
    }
    if (v17) {
      _Block_release(v17);
    }
    if (v16) {
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    size_t v11 = (const void *)a1[5];
    if (v11) {
      std::string::size_type v12 = _Block_copy(v11);
    }
    else {
      std::string::size_type v12 = 0;
    }
    uint64_t v13 = a1[6];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
    block[3] = &__block_descriptor_tmp_50;
    if (v12) {
      int v14 = _Block_copy(v12);
    }
    else {
      int v14 = 0;
    }
    uint64_t v22 = v14;
    char v23 = 0;
    dispatch_async(v13, block);
    if (v22) {
      _Block_release(v22);
    }
    if (v12) {
      _Block_release(v12);
    }
  }
}

void sub_1A60A4B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, char a17)
{
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)&a17);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v17);
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  _Unwind_Resume(a1);
}

void ___ZN4diag14DIAGConfigurer5drainEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2(void *a1, char a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      if (a1[4])
      {
        uint64_t v7 = (const void *)a1[6];
        if (v7) {
          unint64_t v8 = _Block_copy(v7);
        }
        else {
          unint64_t v8 = 0;
        }
        uint64_t v9 = a1[7];
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 1174405120;
        v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        v11[3] = &__block_descriptor_tmp_50;
        if (v8) {
          uint64_t v10 = _Block_copy(v8);
        }
        else {
          uint64_t v10 = 0;
        }
        aBlock = v10;
        char v13 = a2;
        dispatch_async(v9, v11);
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v8) {
          _Block_release(v8);
        }
      }
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void __copy_helper_block_e8_32c46_ZTSNSt3__18weak_ptrIN4diag14DIAGConfigurerEEE48c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[6];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  uint64_t v6 = a2[7];
  a1[6] = v5;
  a1[7] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_32c46_ZTSNSt3__18weak_ptrIN4diag14DIAGConfigurerEEE48c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(void *a1)
{
  uint64_t v2 = a1[7];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t dispatch::callback<void({block_pointer})(BOOL)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void __copy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE56c46_ZTSNSt3__18weak_ptrIN4diag14DIAGConfigurerEEE(void *a1, void *a2)
{
  uint64_t v4 = (void *)a2[5];
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = a2[6];
  a1[5] = v4;
  a1[6] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  uint64_t v6 = a2[8];
  a1[7] = a2[7];
  a1[8] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE56c46_ZTSNSt3__18weak_ptrIN4diag14DIAGConfigurerEEE(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[6];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)a1[5];
  if (v4) {
    _Block_release(v4);
  }
}

void diag::DIAGConfigurer::isActive(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (unint64_t v8 = std::__shared_weak_count::lock(v4)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  v12[2] = ___ZN4diag14DIAGConfigurer8isActiveEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v12[3] = &__block_descriptor_tmp_12_0;
  v12[4] = a1;
  uint64_t v10 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v10 = _Block_copy(v10);
  }
  size_t v11 = *(NSObject **)(a2 + 8);
  aBlock = v10;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  uint64_t v15 = v6;
  int v16 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped(v5, (uint64_t)v12);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void ___ZN4diag14DIAGConfigurer8isActiveEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = v2[17];
  if (v3)
  {
    uint64_t v4 = v2[19];
    uint64_t v5 = v2[20];
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 1174405120;
    v15[2] = ___ZN4diag14DIAGConfigurer8isActiveEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2;
    v15[3] = &__block_descriptor_tmp_9_0;
    uint64_t v6 = (std::__shared_weak_count *)a1[8];
    v15[4] = a1[7];
    int v16 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = (void *)a1[5];
    if (v7) {
      uint64_t v7 = _Block_copy(v7);
    }
    unint64_t v8 = a1[6];
    uint64_t v17 = v7;
    dispatch_object_t v18 = v8;
    if (v8) {
      dispatch_retain(v8);
    }
    uint64_t v9 = _Block_copy(v15);
    uint64_t v10 = v2[11];
    if (v10) {
      dispatch_retain(v10);
    }
    aBlock = v9;
    dispatch_object_t object = v10;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v3 + 48))(v3, 256, v4, v5, &aBlock);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v18) {
      dispatch_release(v18);
    }
    if (v17) {
      _Block_release(v17);
    }
    if (v16) {
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    size_t v11 = (const void *)a1[5];
    if (v11) {
      std::string::size_type v12 = _Block_copy(v11);
    }
    else {
      std::string::size_type v12 = 0;
    }
    char v13 = a1[6];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
    block[3] = &__block_descriptor_tmp_50;
    if (v12) {
      int v14 = _Block_copy(v12);
    }
    else {
      int v14 = 0;
    }
    uint64_t v22 = v14;
    char v23 = 0;
    dispatch_async(v13, block);
    if (v22) {
      _Block_release(v22);
    }
    if (v12) {
      _Block_release(v12);
    }
  }
}

void sub_1A60A51F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, char a17)
{
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)&a17);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v17);
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  _Unwind_Resume(a1);
}

void ___ZN4diag14DIAGConfigurer8isActiveEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2(void *a1, char a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      if (a1[4])
      {
        uint64_t v7 = (const void *)a1[6];
        if (v7) {
          unint64_t v8 = _Block_copy(v7);
        }
        else {
          unint64_t v8 = 0;
        }
        uint64_t v9 = a1[7];
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 1174405120;
        v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        v11[3] = &__block_descriptor_tmp_50;
        if (v8) {
          uint64_t v10 = _Block_copy(v8);
        }
        else {
          uint64_t v10 = 0;
        }
        aBlock = v10;
        char v13 = a2;
        dispatch_async(v9, v11);
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v8) {
          _Block_release(v8);
        }
      }
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void diag::DIAGConfigurer::bufferOff(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (unint64_t v8 = std::__shared_weak_count::lock(v4)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  v12[2] = ___ZN4diag14DIAGConfigurer9bufferOffEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v12[3] = &__block_descriptor_tmp_19;
  v12[4] = a1;
  uint64_t v10 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v10 = _Block_copy(v10);
  }
  size_t v11 = *(NSObject **)(a2 + 8);
  aBlock = v10;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  uint64_t v15 = v6;
  int v16 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped(v5, (uint64_t)v12);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void ___ZN4diag14DIAGConfigurer9bufferOffEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(void *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(v2 + 136);
  if (v3)
  {
    *(_DWORD *)(v2 + 156) = 1;
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      capabilities::diag::asString();
      if (SHIBYTE(v24) >= 0) {
        int v16 = block;
      }
      else {
        int v16 = (void **)block[0];
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v29 = v16;
      _os_log_debug_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEBUG, "#D Buffering Mode: %s", buf, 0xCu);
      if (SHIBYTE(v24) < 0) {
        operator delete(block[0]);
      }
      uint64_t v3 = *(void *)(v2 + 136);
    }
    uint64_t v5 = *(void *)(v2 + 152);
    uint64_t v6 = *(void *)(v2 + 160);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 1174405120;
    v17[2] = ___ZN4diag14DIAGConfigurer9bufferOffEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_13;
    v17[3] = &__block_descriptor_tmp_16_1;
    uint64_t v7 = (std::__shared_weak_count *)a1[8];
    v17[4] = a1[7];
    dispatch_object_t v18 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v8 = (void *)a1[5];
    if (v8) {
      unint64_t v8 = _Block_copy(v8);
    }
    uint64_t v9 = a1[6];
    uint64_t v19 = v8;
    dispatch_object_t v20 = v9;
    if (v9) {
      dispatch_retain(v9);
    }
    uint64_t v10 = _Block_copy(v17);
    size_t v11 = *(NSObject **)(v2 + 88);
    if (v11) {
      dispatch_retain(v11);
    }
    aBlock = v10;
    dispatch_object_t object = v11;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v3 + 48))(v3, 4, v5, v6, &aBlock);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v20) {
      dispatch_release(v20);
    }
    if (v19) {
      _Block_release(v19);
    }
    if (v18) {
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  else
  {
    std::string::size_type v12 = (const void *)a1[5];
    if (v12) {
      char v13 = _Block_copy(v12);
    }
    else {
      char v13 = 0;
    }
    int v14 = a1[6];
    block[0] = (void *)MEMORY[0x1E4F143A8];
    block[1] = (void *)1174405120;
    long long v24 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
    int v25 = &__block_descriptor_tmp_50;
    if (v13) {
      uint64_t v15 = _Block_copy(v13);
    }
    else {
      uint64_t v15 = 0;
    }
    int v26 = v15;
    char v27 = 0;
    dispatch_async(v14, block);
    if (v26) {
      _Block_release(v26);
    }
    if (v13) {
      _Block_release(v13);
    }
  }
}

void sub_1A60A5784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4diag14DIAGConfigurer9bufferOffEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_13(void *a1, char a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      if (a1[4])
      {
        uint64_t v7 = (const void *)a1[6];
        if (v7) {
          unint64_t v8 = _Block_copy(v7);
        }
        else {
          unint64_t v8 = 0;
        }
        uint64_t v9 = a1[7];
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 1174405120;
        v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        v11[3] = &__block_descriptor_tmp_50;
        if (v8) {
          uint64_t v10 = _Block_copy(v8);
        }
        else {
          uint64_t v10 = 0;
        }
        aBlock = v10;
        char v13 = a2;
        dispatch_async(v9, v11);
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v8) {
          _Block_release(v8);
        }
      }
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void diag::DIAGConfigurer::bufferOn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v6 = (uint64_t *)(a1 + 72);
  if (!v5 || (uint64_t v10 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v11 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 1174405120;
  v14[2] = ___ZN4diag14DIAGConfigurer8bufferOnEN12capabilities4diag15BufferingParamsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v14[3] = &__block_descriptor_tmp_26;
  v14[4] = a1;
  std::string::size_type v12 = *(void **)a3;
  if (*(void *)a3) {
    std::string::size_type v12 = _Block_copy(v12);
  }
  char v13 = *(NSObject **)(a3 + 8);
  aBlock = v12;
  dispatch_object_t object = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  dispatch_object_t v18 = v11;
  uint64_t v19 = a2;
  uint64_t v17 = v7;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped(v6, (uint64_t)v14);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  std::__shared_weak_count::__release_weak(v11);
}

void ___ZN4diag14DIAGConfigurer8bufferOnEN12capabilities4diag15BufferingParamsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(void *a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[4];
  if (*(void *)(v2 + 136))
  {
    *(void *)(v2 + 156) = a1[9];
    uint64_t v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      capabilities::diag::asString();
      dispatch_object_t v18 = SHIBYTE(v31) >= 0 ? (void **)&block : block;
      *(_DWORD *)buf = 136315138;
      uint64_t v28 = v18;
      _os_log_debug_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEBUG, "#D Buffering: %s", buf, 0xCu);
      if (SHIBYTE(v31) < 0) {
        operator delete(block);
      }
    }
    if (*((_DWORD *)a1 + 18) == 2)
    {
      uint64_t v4 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        int v19 = *(unsigned __int16 *)(v2 + 162);
        int v20 = *(unsigned __int16 *)(v2 + 160);
        LODWORD(block) = 67109376;
        HIDWORD(block) = v19;
        LOWORD(v30) = 1024;
        *(_DWORD *)((char *)&v30 + 2) = v20;
        _os_log_debug_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEBUG, "#D Water Marks: %d , %d", (uint8_t *)&block, 0xEu);
      }
      uint64_t v5 = 12;
    }
    else
    {
      uint64_t v5 = 4;
    }
    uint64_t v8 = *(void *)(v2 + 136);
    uint64_t v9 = *(void *)(v2 + 152);
    uint64_t v10 = *(void *)(v2 + 160);
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 1174405120;
    v21[2] = ___ZN4diag14DIAGConfigurer8bufferOnEN12capabilities4diag15BufferingParamsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_20;
    v21[3] = &__block_descriptor_tmp_23;
    size_t v11 = (std::__shared_weak_count *)a1[8];
    v21[4] = a1[7];
    uint64_t v22 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v12 = (void *)a1[5];
    if (v12) {
      std::string::size_type v12 = _Block_copy(v12);
    }
    char v13 = a1[6];
    char v23 = v12;
    dispatch_object_t v24 = v13;
    if (v13) {
      dispatch_retain(v13);
    }
    int v14 = _Block_copy(v21);
    uint64_t v15 = *(NSObject **)(v2 + 88);
    if (v15) {
      dispatch_retain(v15);
    }
    aBlock = v14;
    dispatch_object_t object = v15;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v8 + 48))(v8, v5, v9, v10, &aBlock);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v24) {
      dispatch_release(v24);
    }
    if (v23) {
      _Block_release(v23);
    }
    if (v22) {
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  else
  {
    uint64_t v6 = (const void *)a1[5];
    if (v6) {
      uint64_t v7 = _Block_copy(v6);
    }
    else {
      uint64_t v7 = 0;
    }
    int v16 = a1[6];
    block = (void **)MEMORY[0x1E4F143A8];
    uint64_t v30 = 1174405120;
    int v31 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
    uint64_t v32 = &__block_descriptor_tmp_50;
    if (v7) {
      uint64_t v17 = _Block_copy(v7);
    }
    else {
      uint64_t v17 = 0;
    }
    unint64_t v33 = v17;
    char v34 = 0;
    dispatch_async(v16, &block);
    if (v33) {
      _Block_release(v33);
    }
    if (v7) {
      _Block_release(v7);
    }
  }
}

void sub_1A60A5DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4diag14DIAGConfigurer8bufferOnEN12capabilities4diag15BufferingParamsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_20(void *a1, char a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      if (a1[4])
      {
        uint64_t v7 = (const void *)a1[6];
        if (v7) {
          uint64_t v8 = _Block_copy(v7);
        }
        else {
          uint64_t v8 = 0;
        }
        uint64_t v9 = a1[7];
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 1174405120;
        v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        v11[3] = &__block_descriptor_tmp_50;
        if (v8) {
          uint64_t v10 = _Block_copy(v8);
        }
        else {
          uint64_t v10 = 0;
        }
        aBlock = v10;
        char v13 = a2;
        dispatch_async(v9, v11);
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v8) {
          _Block_release(v8);
        }
      }
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void diag::DIAGConfigurer::switchMask(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v6 = (uint64_t *)(a1 + 72);
  if (!v5 || (uint64_t v10 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v11 = v10;
  p_shared_weak_owners = &v10->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1174405120;
  v15[2] = ___ZN4diag14DIAGConfigurer10switchMaskE20ETLDIAGLoggingMaskIDN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v15[3] = &__block_descriptor_tmp_31;
  int v19 = a2;
  v15[4] = a1;
  void v15[5] = v7;
  int v16 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  char v13 = *(void **)a3;
  if (*(void *)a3) {
    char v13 = _Block_copy(v13);
  }
  int v14 = *(NSObject **)(a3 + 8);
  aBlock = v13;
  dispatch_object_t object = v14;
  if (v14) {
    dispatch_retain(v14);
  }
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped(v6, (uint64_t)v15);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  std::__shared_weak_count::__release_weak(v11);
}

void ___ZN4diag14DIAGConfigurer10switchMaskE20ETLDIAGLoggingMaskIDN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 136);
  if (v3 && (int v4 = *(_DWORD *)(a1 + 72), (v4 - 1) <= 1))
  {
    *(unsigned char *)(v2 + 164) = v4;
    uint64_t v5 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(block[0]) = 67109120;
      HIDWORD(block[0]) = v4;
      _os_log_debug_impl(&dword_1A609F000, v5, OS_LOG_TYPE_DEBUG, "#D Logging Mask: %d", (uint8_t *)block, 8u);
      uint64_t v3 = *(void *)(v2 + 136);
    }
    uint64_t v6 = *(void *)(v2 + 152);
    uint64_t v7 = *(void *)(v2 + 160);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 1174405120;
    v17[2] = ___ZN4diag14DIAGConfigurer10switchMaskE20ETLDIAGLoggingMaskIDN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_27;
    v17[3] = &__block_descriptor_tmp_30_0;
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 48);
    v17[4] = *(void *)(a1 + 40);
    dispatch_object_t v18 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *(void **)(a1 + 56);
    if (v9) {
      uint64_t v9 = _Block_copy(v9);
    }
    uint64_t v10 = *(NSObject **)(a1 + 64);
    int v19 = v9;
    dispatch_object_t v20 = v10;
    if (v10) {
      dispatch_retain(v10);
    }
    size_t v11 = _Block_copy(v17);
    std::string::size_type v12 = *(NSObject **)(v2 + 88);
    if (v12) {
      dispatch_retain(v12);
    }
    aBlock = v11;
    dispatch_object_t object = v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v3 + 48))(v3, 64, v6, v7, &aBlock);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v20) {
      dispatch_release(v20);
    }
    if (v19) {
      _Block_release(v19);
    }
    if (v18) {
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  else
  {
    char v13 = *(const void **)(a1 + 56);
    if (v13) {
      int v14 = _Block_copy(v13);
    }
    else {
      int v14 = 0;
    }
    uint64_t v15 = *(NSObject **)(a1 + 64);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
    block[3] = &__block_descriptor_tmp_50;
    if (v14) {
      int v16 = _Block_copy(v14);
    }
    else {
      int v16 = 0;
    }
    dispatch_object_t v24 = v16;
    char v25 = 0;
    dispatch_async(v15, block);
    if (v24) {
      _Block_release(v24);
    }
    if (v14) {
      _Block_release(v14);
    }
  }
}

void sub_1A60A638C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4diag14DIAGConfigurer10switchMaskE20ETLDIAGLoggingMaskIDN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_27(void *a1, char a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      if (a1[4])
      {
        uint64_t v7 = (const void *)a1[6];
        if (v7) {
          uint64_t v8 = _Block_copy(v7);
        }
        else {
          uint64_t v8 = 0;
        }
        uint64_t v9 = a1[7];
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 1174405120;
        v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        v11[3] = &__block_descriptor_tmp_50;
        if (v8) {
          uint64_t v10 = _Block_copy(v8);
        }
        else {
          uint64_t v10 = 0;
        }
        aBlock = v10;
        char v13 = a2;
        dispatch_async(v9, v11);
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v8) {
          _Block_release(v8);
        }
      }
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN4diag14DIAGConfigurerEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[7];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  uint64_t v6 = a2[8];
  a1[7] = v5;
  a1[8] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN4diag14DIAGConfigurerEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void diag::DIAGConfigurer::getName(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "trace.diag.cfg");
}

void diag::DIAGConfigurer::abort(diag::DIAGConfigurer *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN4diag14DIAGConfigurer5abortEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_32;
  v1[4] = this;
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN4diag14DIAGConfigurer5abortEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1A609F000, v2, OS_LOG_TYPE_DEFAULT, "#I Stop and reset DIAG driver", v5, 2u);
  }
  uint64_t v3 = v1[17];
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
    uint64_t v4 = (std::__shared_weak_count *)v1[18];
    v1[17] = 0;
    v1[18] = 0;
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

uint64_t diag::DIAGConfigurer::isAborted(diag::DIAGConfigurer *this)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  char v9 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZN4diag14DIAGConfigurer9isAbortedEv_block_invoke;
  v5[3] = &unk_1E5C46B48;
  v5[4] = &v6;
  v5[5] = this;
  uint64_t v10 = v5;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_52;
  void block[4] = (char *)this + 72;
  block[5] = &v10;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
  uint64_t v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZN4diag14DIAGConfigurer9isAbortedEv_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(*(void *)(result + 40) + 136) == 0;
  return result;
}

uint64_t ctu::Loggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "trace.diag.cfg");
}

uint64_t ctu::Loggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void __clang_call_terminate(void *a1)
{
}

void *ctu::SharedSynchronizable<diag::DIAGConfigurer>::~SharedSynchronizable(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *ctu::Loggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1EFB087B8;
  MEMORY[0x1A6274710](a1 + 1);
  return a1;
}

void ctu::Loggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1EFB087B8;
  MEMORY[0x1A6274710](a1 + 1);

  operator delete(a1);
}

void *ctu::SharedSynchronizable<diag::DIAGConfigurer>::SharedSynchronizable(void *a1, const char *a2, dispatch_qos_class_t a3, dispatch_object_t *a4)
{
  uint64_t v8 = *a4;
  if (*a4) {
    dispatch_retain(*a4);
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v10 = dispatch_queue_create_with_target_V2(a2, initially_inactive, v8);
  dispatch_set_qos_class_floor(v10, a3, 0);
  dispatch_activate(v10);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  size_t v11 = *a4;
  a1[3] = *a4;
  if (v11) {
    dispatch_retain(v11);
  }
  if (v10) {
    dispatch_release(v10);
  }
  if (v8) {
    dispatch_release(v8);
  }
  return a1;
}

void *ctu::Loggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(void *a1, uint64_t a2, void *a3)
{
  *a1 = &unk_1EFB087B8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  a1[1] = &unk_1EFB08838;
  a1[7] = *a3;
  uint64_t v5 = a3[1];
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  return a1;
}

void sub_1A60A6B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *ctu::SharedLoggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1EFB087B8;
  MEMORY[0x1A6274710](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1EFB087B8;
  MEMORY[0x1A6274710](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA438] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA2E0], MEMORY[0x1E4FBA208]);
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1EFB088A0;
  block[5] = v5;
  std::string::size_type v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIKN4diag14DIAGConfigurerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIKN4diag14DIAGConfigurerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *___ZNK3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

uint64_t _GLOBAL__sub_I_DIAGConfigurer_cpp()
{
  uint64_t result = ETLDIAGLoggingGetDefaultView();
  dword_1EB5EE7F4 = result;
  return result;
}

void *CircularFileLogWriter::create@<X0>(CircularFileLogWriter *this@<X0>, void *a2@<X8>)
{
  uint64_t v5 = operator new(0xB8uLL);
  CircularFileLogWriter::CircularFileLogWriter((uint64_t)v5, (long long *)this);

  return std::shared_ptr<CircularFileLogWriter>::shared_ptr[abi:ne180100]<CircularFileLogWriter,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter*)#1},void>(a2, (uint64_t)v5);
}

void sub_1A60A6FB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t CircularFileLogWriter::CircularFileLogWriter(uint64_t a1, long long *a2)
{
  *(void *)a1 = MEMORY[0x1E4FBA1A8] + 16;
  uint64_t v4 = dispatch_queue_create("CircularFileLogWriter", 0);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v4;
  if (v4)
  {
    uint64_t v5 = v4;
    dispatch_retain(v4);
    *(void *)(a1 + 32) = 0;
    dispatch_release(v5);
    *(void *)a1 = &unk_1EFB088E0;
    *(void *)(a1 + 40) = 0;
    uint64_t v6 = (std::string *)(a1 + 48);
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      long long v7 = *a2;
      v6->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      goto LABEL_6;
    }
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1EFB088E0;
    uint64_t v6 = (std::string *)(a1 + 48);
    if ((*((char *)a2 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a2, *((void *)a2 + 1));
LABEL_6:
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 72), *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 88) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 72) = v8;
  }
  char v9 = (std::string *)(a1 + 96);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v10 = a2[3];
    *(void *)(a1 + 112) = *((void *)a2 + 8);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  long long v11 = *(long long *)((char *)a2 + 72);
  *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 88);
  *(_OWORD *)(a1 + 120) = v11;
  *(void *)(a1 + 144) = 1;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  return a1;
}

void sub_1A60A7148(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 95) < 0)
  {
    operator delete(*v4);
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v6 = *(void *)(v1 + 40);
      *(void *)(v1 + 40) = 0;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  uint64_t v6 = *(void *)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  if (!v6)
  {
LABEL_4:
    ctu::SharedSynchronizable<diag::DIAGConfigurer>::~SharedSynchronizable(v2);
    _Unwind_Resume(a1);
  }
LABEL_7:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::~SharedSynchronizable(v2);
  _Unwind_Resume(a1);
}

void CircularFileLogWriter::open(CircularFileLogWriter *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN21CircularFileLogWriter4openEv_block_invoke;
  v3[3] = &__block_descriptor_tmp;
  v3[4] = this;
  uint64_t v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_21;
  void block[4] = (char *)this + 8;
  block[5] = &v4;
  uint64_t v2 = (char *)this + 24;
  uint64_t v1 = *((void *)this + 3);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ___ZN21CircularFileLogWriter4openEv_block_invoke(uint64_t a1)
{
  v39[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  *(_DWORD *)(v1 + 152) = 0;
  *(_DWORD *)(v1 + 156) = 0;
  if (*(void *)(v1 + 40))
  {
    std::ostream::flush();
    uint64_t v2 = *(void **)(v1 + 40);
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 32) | 4);
    }
    uint64_t v3 = *(void *)(v1 + 40);
    *(void *)(v1 + 40) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    *(void *)(v1 + 40) = 0;
  }
  *(void *)(v1 + 144) = *(void *)(v1 + 120) / *(void *)(v1 + 128);
  int v4 = *(char *)(v1 + 95);
  if (v4 >= 0) {
    size_t v5 = *(unsigned __int8 *)(v1 + 95);
  }
  else {
    size_t v5 = *(void *)(v1 + 80);
  }
  unint64_t v6 = v5 + 8;
  memset(&__dst, 170, sizeof(__dst));
  if (v5 + 8 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v7 = (void **)(v1 + 72);
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v5 + 8;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5 + 8;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v4 >= 0) {
    long long v11 = (void *)(v1 + 72);
  }
  else {
    long long v11 = *v7;
  }
  memmove(p_dst, v11, v5);
LABEL_21:
  strcpy((char *)p_dst + v5, "/latest-");
  int v12 = *(char *)(v1 + 71);
  if (v12 >= 0) {
    char v13 = (const std::string::value_type *)(v1 + 48);
  }
  else {
    char v13 = *(const std::string::value_type **)(v1 + 48);
  }
  if (v12 >= 0) {
    std::string::size_type v14 = *(unsigned __int8 *)(v1 + 71);
  }
  else {
    std::string::size_type v14 = *(void *)(v1 + 56);
  }
  uint64_t v15 = std::string::append(&__dst, v13, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  *(void *)&v38.st_uid = *((void *)&v15->__r_.__value_.__l + 2);
  *(_OWORD *)&v38.st_dev = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  int v17 = *(char *)(v1 + 119);
  if (v17 >= 0) {
    dispatch_object_t v18 = (const std::string::value_type *)(v1 + 96);
  }
  else {
    dispatch_object_t v18 = *(const std::string::value_type **)(v1 + 96);
  }
  if (v17 >= 0) {
    std::string::size_type v19 = *(unsigned __int8 *)(v1 + 119);
  }
  else {
    std::string::size_type v19 = *(void *)(v1 + 104);
  }
  dispatch_object_t v20 = std::string::append((std::string *)&v38, v18, v19);
  std::string::size_type v21 = v20->__r_.__value_.__r.__words[0];
  v39[0] = v20->__r_.__value_.__l.__size_;
  *(void *)((char *)v39 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
  char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(v1 + 183) < 0) {
    operator delete(*(void **)(v1 + 160));
  }
  uint64_t v23 = v39[0];
  *(void *)(v1 + 160) = v21;
  *(void *)(v1 + 168) = v23;
  *(void *)(v1 + 175) = *(void *)((char *)v39 + 7);
  *(unsigned char *)(v1 + 183) = v22;
  if (SHIBYTE(v38.st_gid) < 0)
  {
    operator delete(*(void **)&v38.st_dev);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_37;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_37:
  int v24 = *(char *)(v1 + 95);
  if (v24 >= 0) {
    size_t v25 = *(unsigned __int8 *)(v1 + 95);
  }
  else {
    size_t v25 = *(void *)(v1 + 80);
  }
  unint64_t v26 = v25 + 1;
  memset(&v38, 170, 24);
  if (v25 + 1 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v26 >= 0x17)
  {
    uint64_t v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v30 = v26 | 7;
    }
    uint64_t v31 = v30 + 1;
    char v27 = (char *)operator new(v30 + 1);
    v38.st_ino = v25 + 1;
    *(void *)&v38.st_uid = v31 | 0x8000000000000000;
    *(void *)&v38.st_dev = v27;
  }
  else
  {
    memset(&v38, 0, 24);
    char v27 = (char *)&v38;
    HIBYTE(v38.st_gid) = v25 + 1;
    if (!v25)
    {
      LOWORD(v38.st_dev) = 47;
      if ((v24 & 0x80000000) == 0) {
        goto LABEL_44;
      }
      goto LABEL_57;
    }
  }
  if (v24 >= 0) {
    uint64_t v32 = (void *)(v1 + 72);
  }
  else {
    uint64_t v32 = *v7;
  }
  memmove(v27, v32, v25);
  *(_WORD *)&v27[v25] = 47;
  if (v24 < 0) {
LABEL_57:
  }
    operator delete(*v7);
LABEL_44:
  *(_OWORD *)long long v7 = *(_OWORD *)&v38.st_dev;
  *(void *)(v1 + 88) = *(void *)&v38.st_uid;
  v28.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v28.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v38.st_blkstd::string::size_type size = v28;
  *(timespec *)v38.st_qspare = v28;
  v38.st_birthtimespec = v28;
  *(timespec *)&v38.st_std::string::size_type size = v28;
  v38.st_mtimespec = v28;
  v38.st_ctimespec = v28;
  *(timespec *)&v38.st_uid = v28;
  v38.st_atimespec = v28;
  *(timespec *)&v38.st_dev = v28;
  if (*(char *)(v1 + 95) >= 0) {
    uint64_t v29 = (const char *)(v1 + 72);
  }
  else {
    uint64_t v29 = *(const char **)(v1 + 72);
  }
  if (!stat(v29, &v38)
    && (*(char *)(v1 + 95) >= 0 ? (unint64_t v33 = (const char *)(v1 + 72)) : (unint64_t v33 = *(const char **)(v1 + 72)),
        (char v34 = opendir(v33), (v35 = v34) != 0) && (v36 = readdir(v34), closedir(v35), v36)))
  {
    CircularFileLogWriter::getFileIndex_sync((CircularFileLogWriter *)v1, (unsigned int *)(v1 + 156), (unsigned int *)(v1 + 152));
  }
  else
  {
    support::fs::createDir((const char *)(v1 + 72), 0x1EDu, 1);
  }
  CircularFileLogWriter::openNewLog_sync((CircularFileLogWriter *)v1);
}

void sub_1A60A76D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CircularFileLogWriter::close_sync(CircularFileLogWriter *this)
{
  *((void *)this + 19) = 0;
  uint64_t result = *((void *)this + 5);
  if (!result)
  {
    *((void *)this + 5) = 0;
    return result;
  }
  std::ostream::flush();
  uint64_t v3 = (void *)*((void *)this + 5);
  if (std::filebuf::close())
  {
    uint64_t result = *((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!result) {
      return result;
    }
  }
  else
  {
    std::ios_base::clear((std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 32) | 4);
    uint64_t result = *((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!result) {
      return result;
    }
  }
  int v4 = *(uint64_t (**)(void))(*(void *)result + 8);

  return v4();
}

void CircularFileLogWriter::getFileIndex_sync(CircularFileLogWriter *this, unsigned int *a2, unsigned int *a3)
{
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v62 = v6;
  long long v63 = v6;
  *(_OWORD *)&v60[0].__locale_ = v6;
  long long v61 = v6;
  v50[23] = 10;
  strcpy(v50, "([0-9]{8})");
  int v7 = *((char *)this + 119);
  if (v7 >= 0) {
    long long v8 = (char *)this + 96;
  }
  else {
    long long v8 = (const std::string::value_type *)*((void *)this + 12);
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *((unsigned __int8 *)this + 119);
  }
  else {
    std::string::size_type v9 = *((void *)this + 13);
  }
  uint64_t v10 = std::string::append((std::string *)v50, v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  __str[0].__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v60, (uint64_t)__str, 0);
  if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str[0].__r_.__value_.__l.__data_);
    if ((v50[23] & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_66:
    operator delete(*(void **)v50);
    goto LABEL_9;
  }
  if ((v50[23] & 0x80000000) != 0) {
    goto LABEL_66;
  }
LABEL_9:
  __p = 0;
  int v58 = 0;
  uint64_t v59 = 0;
  support::fs::readDir((const char *)this + 72, (uint64_t)&__p);
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v51 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v53 = 0xAAAAAAAAAAAAAA00;
  long long v55 = v12;
  uint64_t v52 = 0;
  long long v54 = 0uLL;
  LOBYTE(v55) = 0;
  BYTE8(v55) = 0;
  uint64_t v56 = 0;
  memset(v50, 0, sizeof(v50));
  char v13 = (std::sub_match<const char *> *)__p;
  std::string::size_type v14 = v58;
  if (__p == v58)
  {
    *a2 = 0;
    *a3 = 0;
    char v44 = (std::sub_match<const char *> *)__p;
    if (!__p) {
      goto LABEL_63;
    }
    goto LABEL_68;
  }
  v47 = a2;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  char v17 = 1;
  do
  {
    *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v70 = v18;
    unint64_t v67 = 0xAAAAAAAAAAAAAA00;
    __str[1].__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    LOBYTE(v70) = 0;
    BYTE8(v70) = 0;
    uint64_t v71 = 0;
    memset(__str, 0, 41);
    second = (const char *)*((unsigned __int8 *)&v13->matched + 7);
    if ((char)second >= 0) {
      first = v13;
    }
    else {
      first = (std::sub_match<const char *> *)v13->first;
    }
    if ((char)second < 0) {
      second = v13->second;
    }
    int v21 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v60, first, (std::sub_match<const char *> *)&second[(void)first], (std::vector<std::csub_match> *)__str, 0);
    char v22 = (const char *)*((unsigned __int8 *)&v13->matched + 7);
    if ((char)v22 >= 0) {
      uint64_t v23 = (uint64_t)v13;
    }
    else {
      uint64_t v23 = (uint64_t)v13->first;
    }
    if ((char)v22 < 0) {
      char v22 = v13->second;
    }
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)v50, v23, (std::sub_match<std::__wrap_iter<const char *>> *)&v22[v23], (uint64_t *)__str, 0);
    if (__str[0].__r_.__value_.__r.__words[0])
    {
      __str[0].__r_.__value_.__l.__size_ = __str[0].__r_.__value_.__r.__words[0];
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    if (v21)
    {
      memset(__str, 170, 24);
      int v24 = &v51;
      if (*(void *)&v50[8] != *(void *)v50) {
        int v24 = (long long *)(*(void *)v50 + 16);
      }
      if (!*(unsigned char *)v24)
      {
        memset(__str, 0, 24);
LABEL_50:
        unsigned int v41 = std::stoul(__str, 0, 10);
        if (v17) {
          unsigned int v42 = v41;
        }
        else {
          unsigned int v42 = v16;
        }
        if (v42 >= v41) {
          unsigned int v16 = v41;
        }
        else {
          unsigned int v16 = v42;
        }
        if (v15 < v41) {
          unsigned int v15 = v41 + 1;
        }
        if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str[0].__r_.__value_.__l.__data_);
        }
        char v17 = 0;
        goto LABEL_12;
      }
      char v48 = v17;
      unsigned int v49 = v15;
      unsigned int v25 = v16;
      unint64_t v26 = (uint64_t *)&v50[24];
      if (*(void *)&v50[8] != *(void *)v50) {
        unint64_t v26 = *(uint64_t **)v50;
      }
      uint64_t v27 = *v26;
      timespec v28 = (std::string::value_type **)(*(void *)v50 + 8);
      if (*(void *)&v50[8] == *(void *)v50) {
        timespec v28 = (std::string::value_type **)&v50[32];
      }
      uint64_t v29 = *v28;
      std::string::size_type v30 = (std::string::size_type)&(*v28)[-v27];
      if (v30 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v30 > 0x16)
      {
        uint64_t v38 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17) {
          uint64_t v38 = v30 | 7;
        }
        uint64_t v39 = v38 + 1;
        uint64_t v31 = (std::string *)operator new(v38 + 1);
        __str[0].__r_.__value_.__l.__size_ = v30;
        __str[0].__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
        __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
        if ((std::string::value_type *)v27 != v29) {
          goto LABEL_36;
        }
      }
      else
      {
        *((unsigned char *)&__str[0].__r_.__value_.__s + 23) = *(unsigned char *)v28 - v27;
        uint64_t v31 = __str;
        if ((std::string::value_type *)v27 != v29)
        {
LABEL_36:
          if (v30 < 0x20 || (unint64_t)v31 - v27 < 0x20)
          {
            uint64_t v32 = v31;
            unint64_t v33 = (std::string::value_type *)v27;
          }
          else
          {
            uint64_t v32 = (std::string *)((char *)v31 + (v30 & 0xFFFFFFFFFFFFFFE0));
            unint64_t v33 = (std::string::value_type *)(v27 + (v30 & 0xFFFFFFFFFFFFFFE0));
            char v34 = (long long *)(v27 + 16);
            uint64_t v35 = &v31->__r_.__value_.__r.__words[2];
            unint64_t v36 = v30 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v37 = *v34;
              *((_OWORD *)v35 - 1) = *(v34 - 1);
              *(_OWORD *)uint64_t v35 = v37;
              v34 += 2;
              v35 += 4;
              v36 -= 32;
            }
            while (v36);
            if (v30 == (v30 & 0x7FFFFFFFFFFFFFE0)) {
              goto LABEL_49;
            }
          }
          do
          {
            std::string::value_type v40 = *v33++;
            v32->__r_.__value_.__s.__data_[0] = v40;
            uint64_t v32 = (std::string *)((char *)v32 + 1);
          }
          while (v33 != v29);
LABEL_49:
          v32->__r_.__value_.__s.__data_[0] = 0;
          unsigned int v16 = v25;
          char v17 = v48;
          unsigned int v15 = v49;
          goto LABEL_50;
        }
      }
      uint64_t v32 = v31;
      goto LABEL_49;
    }
LABEL_12:
    ++v13;
  }
  while (v13 != v14);
  unint64_t v43 = *(void **)v50;
  unsigned int *v47 = v16;
  *a3 = v15;
  if (v43)
  {
    *(void *)&v50[8] = v43;
    operator delete(v43);
  }
  char v44 = (std::sub_match<const char *> *)__p;
  if (!__p)
  {
LABEL_63:
    v45 = (std::__shared_weak_count *)v63;
    if (!(void)v63) {
      goto LABEL_77;
    }
LABEL_75:
    if (!atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
    goto LABEL_77;
  }
LABEL_68:
  uint64_t v46 = (void **)v58;
  if (v58 == v44)
  {
    int v58 = v44;
    operator delete(v44);
    v45 = (std::__shared_weak_count *)v63;
    if (!(void)v63) {
      goto LABEL_77;
    }
    goto LABEL_75;
  }
  do
  {
    if (*((char *)v46 - 1) < 0) {
      operator delete(*(v46 - 3));
    }
    v46 -= 3;
  }
  while (v46 != (void **)v44);
  int v58 = v44;
  operator delete(__p);
  v45 = (std::__shared_weak_count *)v63;
  if ((void)v63) {
    goto LABEL_75;
  }
LABEL_77:
  std::locale::~locale(v60);
}

void sub_1A60A7C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,std::locale a36)
{
}

void CircularFileLogWriter::openNewLog_sync(CircularFileLogWriter *this)
{
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 0;
    int v4 = (char *)this + 160;
    size_t v5 = (char *)this + 160;
    if ((*((char *)this + 183) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
  std::ostream::flush();
  uint64_t v2 = (void *)*((void *)this + 5);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 32) | 4);
  }
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (char *)this + 160;
  size_t v5 = (char *)this + 160;
  if (*((char *)this + 183) < 0) {
LABEL_31:
  }
    size_t v5 = *(const char **)v4;
LABEL_7:
  unlink(v5);
  uint64_t v6 = *((unsigned int *)this + 38);
  *((_DWORD *)this + 38) = v6 + 1;
  CircularFileLogWriter::generateFileName_sync(this, v6, &v20);
  int v7 = *((char *)this + 95);
  if (v7 >= 0) {
    long long v8 = (char *)this + 72;
  }
  else {
    long long v8 = (const std::string::value_type *)*((void *)this + 9);
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *((unsigned __int8 *)this + 95);
  }
  else {
    std::string::size_type v9 = *((void *)this + 10);
  }
  uint64_t v10 = std::string::insert(&v20, 0, v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  std::string::size_type v22 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  long long v12 = operator new(0x238uLL);
  uint64_t v13 = MEMORY[0x1E4FBA468] + 64;
  v12[52] = MEMORY[0x1E4FBA468] + 64;
  uint64_t v14 = *(void *)(MEMORY[0x1E4FBA400] + 16);
  uint64_t v15 = *(void *)(MEMORY[0x1E4FBA400] + 8);
  *long long v12 = v15;
  *(void *)((char *)v12 + *(void *)(v15 - 24)) = v14;
  unsigned int v16 = (std::ios_base *)((char *)v12 + *(void *)(*v12 - 24));
  std::ios_base::init(v16, v12 + 1);
  uint64_t v17 = MEMORY[0x1E4FBA468] + 24;
  v16[1].__vftable = 0;
  v16[1].__fmtflags_ = -1;
  *long long v12 = v17;
  v12[52] = v13;
  MEMORY[0x1A6274EA0](v12 + 1);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)), *(_DWORD *)((char *)v12 + *(void *)(*v12 - 24) + 32) | 4);
  }
  uint64_t v18 = *((void *)this + 5);
  *((void *)this + 5) = v12;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    long long v12 = (void *)*((void *)this + 5);
  }
  if (v12[16])
  {
    support::fs::getFileName(&v20);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v19 = &v20;
    }
    else {
      std::string::size_type v19 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    if (*((char *)this + 183) < 0) {
      int v4 = *(const char **)v4;
    }
    symlink((const char *)v19, v4);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  CircularFileLogWriter::clearOldLogs_sync(this);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1A60A8060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void CircularFileLogWriter::close(CircularFileLogWriter *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN21CircularFileLogWriter5closeEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_4;
  v3[4] = this;
  int v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_21;
  void block[4] = (char *)this + 8;
  block[5] = &v4;
  uint64_t v2 = (char *)this + 24;
  uint64_t v1 = *((void *)this + 3);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

uint64_t ___ZN21CircularFileLogWriter5closeEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(void *)(v1 + 152) = 0;
  uint64_t result = *(void *)(v1 + 40);
  if (!result)
  {
    *(void *)(v1 + 40) = 0;
    return result;
  }
  std::ostream::flush();
  uint64_t v3 = *(void **)(v1 + 40);
  if (std::filebuf::close())
  {
    uint64_t result = *(void *)(v1 + 40);
    *(void *)(v1 + 40) = 0;
    if (!result) {
      return result;
    }
  }
  else
  {
    std::ios_base::clear((std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 32) | 4);
    uint64_t result = *(void *)(v1 + 40);
    *(void *)(v1 + 40) = 0;
    if (!result) {
      return result;
    }
  }
  int v4 = *(uint64_t (**)(void))(*(void *)result + 8);

  return v4();
}

void CircularFileLogWriter::clear(CircularFileLogWriter *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN21CircularFileLogWriter5clearEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_5;
  v3[4] = this;
  int v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_21;
  void block[4] = (char *)this + 8;
  block[5] = &v4;
  uint64_t v2 = (char *)this + 24;
  uint64_t v1 = *((void *)this + 3);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

uint64_t ___ZN21CircularFileLogWriter5clearEv_block_invoke(uint64_t a1)
{
  return CircularFileLogWriter::clear_sync(*(CircularFileLogWriter **)(a1 + 32));
}

uint64_t CircularFileLogWriter::clear_sync(CircularFileLogWriter *this)
{
  *((void *)this + 19) = 0;
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 0;
    goto LABEL_8;
  }
  std::ostream::flush();
  uint64_t v2 = (void *)*((void *)this + 5);
  if (!std::filebuf::close())
  {
    std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 32) | 4);
    uint64_t v3 = *((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!v3) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
LABEL_7:
  }
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
LABEL_8:
  int v4 = (const char **)((char *)this + 160);
  if (*((char *)this + 183) < 0)
  {
    unlink(*v4);
    size_t v5 = (char *)this + 72;
  }
  else
  {
    unlink((const char *)v4);
    size_t v5 = (char *)this + 72;
  }
  return support::fs::removeDir(v5);
}

void CircularFileLogWriter::write(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN21CircularFileLogWriter5writeENSt3__110shared_ptrIN3ctu10LogMessageEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_6_1;
  uint64_t v5 = *a2;
  int v4 = (std::__shared_weak_count *)a2[1];
  v7[4] = a1;
  v7[5] = v5;
  long long v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::SharedSynchronizable<CircularFileLogWriter>::execute_wrapped(v3, (uint64_t)v7);
  uint64_t v6 = v8;
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void ___ZN21CircularFileLogWriter5writeENSt3__110shared_ptrIN3ctu10LogMessageEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  v4[0] = a1[5];
  v4[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CircularFileLogWriter::write_sync(v2, v4);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1A60A85E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CircularFileLogWriter::write_sync(uint64_t result, uint64_t *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (!*a2) {
    return result;
  }
  uint64_t v3 = (CircularFileLogWriter *)result;
  uint64_t v4 = *(void *)(result + 40);
  if (!v4 || !*(void *)(v4 + 128)) {
    return result;
  }
  if (*(char *)(v2 + 71) < 0)
  {
    unint64_t v6 = *(void *)(v2 + 56) + 1;
    if (v6 < 2) {
      return result;
    }
  }
  else
  {
    unint64_t v6 = *(unsigned __int8 *)(v2 + 71) + 1;
    if (v6 < 2) {
      return result;
    }
  }
  unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v42[7] = v7;
  v42[8] = v7;
  v42[5] = v7;
  v42[6] = v7;
  v42[3] = v7;
  v42[4] = v7;
  v42[1] = v7;
  v42[2] = v7;
  long long v41 = v7;
  v42[0] = v7;
  *(_OWORD *)__p = v7;
  long long v40 = v7;
  long long v37 = v7;
  long long v38 = v7;
  long long v35 = v7;
  long long v36 = v7;
  long long v34 = v7;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v34);
  uint64_t v8 = v35;
  *(_DWORD *)((char *)&v35 + *(void *)(v35 - 24) + 8) |= 4u;
  *(void *)((char *)&v35 + *(void *)(v8 - 24) + 16) = 3;
  std::string::size_type v9 = (void *)std::ostream::operator<<();
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" [", 2);
  LOBYTE(__dst.__locale_) = ctu::asChar();
  long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&__dst, 1);
  long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] ", 2);
  int v13 = *(char *)(*a2 + 47);
  if (v13 >= 0) {
    uint64_t v14 = *a2 + 24;
  }
  else {
    uint64_t v14 = *(void *)(*a2 + 24);
  }
  if (v13 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(*a2 + 47);
  }
  else {
    uint64_t v15 = *(void *)(*a2 + 32);
  }
  unsigned int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
  uint64_t v17 = (char *)&v35 + *(void *)(v35 - 24);
  if ((v17[32] & 5) != 0)
  {
    unint64_t v18 = v6 - 1;
    unint64_t v19 = *((void *)v3 + 16);
    if (v6 - 1 > v19) {
      goto LABEL_52;
    }
LABEL_18:
    uint64_t v20 = *((void *)v3 + 5) + *(void *)(**((void **)v3 + 5) - 24);
    if ((*(unsigned char *)(v20 + 32) & 5) != 0)
    {
      if (v18 - 1 <= v19)
      {
LABEL_23:
        if (*(char *)(*a2 + 71) < 0)
        {
          if (*(void *)(*a2 + 56)) {
            goto LABEL_27;
          }
        }
        else if (*(unsigned char *)(*a2 + 71))
        {
LABEL_27:
          int v21 = (void *)*((void *)v3 + 5);
          char v22 = BYTE8(v41);
          if ((BYTE8(v41) & 0x10) == 0)
          {
LABEL_28:
            if ((v22 & 8) == 0)
            {
              size_t v23 = 0;
              HIBYTE(v46) = 0;
              p_dst = (std::locale::__imp *)&__dst;
              goto LABEL_43;
            }
            unint64_t v26 = (const void **)&v36 + 1;
            uint64_t v25 = *((void *)&v37 + 1);
LABEL_35:
            uint64_t v27 = *v26;
            size_t v23 = v25 - (void)*v26;
            if (v23 >= 0x7FFFFFFFFFFFFFF8) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            if (v23 >= 0x17)
            {
              uint64_t v28 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v23 | 7) != 0x17) {
                uint64_t v28 = v23 | 7;
              }
              uint64_t v29 = v28 + 1;
              p_dst = (std::locale::__imp *)operator new(v28 + 1);
              size_t v45 = v23;
              int64_t v46 = v29 | 0x8000000000000000;
              __dst.__locale_ = p_dst;
            }
            else
            {
              HIBYTE(v46) = v25 - *(unsigned char *)v26;
              p_dst = (std::locale::__imp *)&__dst;
              if (!v23) {
                goto LABEL_43;
              }
            }
            memmove(p_dst, v27, v23);
LABEL_43:
            *((unsigned char *)p_dst + v23) = 0;
            if (v46 >= 0) {
              locale = (std::locale::__imp *)&__dst;
            }
            else {
              locale = __dst.__locale_;
            }
            if (v46 >= 0) {
              uint64_t v31 = HIBYTE(v46);
            }
            else {
              uint64_t v31 = v45;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)locale, v31);
            if (SHIBYTE(v46) < 0) {
              operator delete(__dst.__locale_);
            }
            std::ostream::write();
            std::ios_base::getloc((const std::ios_base *)(*((void *)v3 + 5) + *(void *)(**((void **)v3 + 5) - 24)));
            uint64_t v32 = std::locale::use_facet(&__dst, MEMORY[0x1E4FBA258]);
            ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
            std::locale::~locale(&__dst);
            std::ostream::put();
            std::ostream::flush();
            goto LABEL_52;
          }
LABEL_31:
          uint64_t v25 = v41;
          if ((unint64_t)v41 < *((void *)&v38 + 1))
          {
            *(void *)&long long v41 = *((void *)&v38 + 1);
            uint64_t v25 = *((void *)&v38 + 1);
          }
          unint64_t v26 = (const void **)&v38;
          goto LABEL_35;
        }
        int v21 = (void *)*((void *)v3 + 5);
        char v22 = BYTE8(v41);
        if ((BYTE8(v41) & 0x10) == 0) {
          goto LABEL_28;
        }
        goto LABEL_31;
      }
    }
    else
    {
      (*(void (**)(std::locale *__return_ptr))(**(void **)(v20 + 40) + 32))(&__dst);
      if (v47 + v18 <= *((void *)v3 + 16)) {
        goto LABEL_23;
      }
    }
    CircularFileLogWriter::openNewLog_sync(v3);
    goto LABEL_23;
  }
  (*(void (**)(std::locale *__return_ptr))(**((void **)v17 + 5) + 32))(&__dst);
  unint64_t v18 = v47 + v6;
  unint64_t v19 = *((void *)v3 + 16);
  if (v47 + v6 <= v19) {
    goto LABEL_18;
  }
LABEL_52:
  *(void *)&long long v34 = *MEMORY[0x1E4FBA408];
  uint64_t v33 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v34 + *(void *)(v34 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v35 = v33;
  *((void *)&v35 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62751A0](v42);
}

void sub_1A60A8C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A60A8C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A60A8C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A60A8C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 - 217) < 0)
  {
    operator delete(*(void **)(v9 - 240));
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIN3ctu10LogMessageEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIN3ctu10LogMessageEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void CircularFileLogWriter::write(CircularFileLogWriter *this, const char *a2, uint64_t a3)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZN21CircularFileLogWriter5writeEPKcm_block_invoke;
  v5[3] = &__block_descriptor_tmp_7;
  v5[4] = this;
  v5[5] = a2;
  void v5[6] = a3;
  unint64_t v6 = v5;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_21;
  void block[4] = (char *)this + 8;
  block[5] = &v6;
  uint64_t v4 = (char *)this + 24;
  uint64_t v3 = *((void *)this + 3);
  if (*((void *)v4 + 1)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
}

uint64_t ___ZN21CircularFileLogWriter5writeEPKcm_block_invoke(uint64_t a1)
{
  return CircularFileLogWriter::write_sync(*(void *)(a1 + 32), *(const char **)(a1 + 40), *(void *)(a1 + 48));
}

uint64_t CircularFileLogWriter::write_sync(uint64_t this, const char *a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v3 = a3;
    if (a3)
    {
      uint64_t v4 = (CircularFileLogWriter *)this;
      uint64_t v5 = *(void **)(this + 40);
      if (v5)
      {
        if (v5[16])
        {
          unint64_t v6 = a2;
          if (*(unsigned char *)(this + 136))
          {
            while (1)
            {
              uint64_t v9 = (char *)v5 + *(void *)(*v5 - 24);
              if ((v9[32] & 5) != 0)
              {
                unint64_t v10 = *((void *)v4 + 16);
                if (v3 - 1 <= v10) {
                  goto LABEL_20;
                }
              }
              else
              {
                (*(void (**)(void *__return_ptr))(**((void **)v9 + 5) + 32))(v13);
                unint64_t v10 = *((void *)v4 + 16);
                if (v14 + v3 <= v10) {
                  goto LABEL_20;
                }
              }
              uint64_t v11 = *((void *)v4 + 5) + *(void *)(**((void **)v4 + 5) - 24);
              if ((*(unsigned char *)(v11 + 32) & 5) != 0) {
                break;
              }
              (*(void (**)(void *__return_ptr))(**(void **)(v11 + 40) + 32))(v13);
              uint64_t v7 = v14;
              if (v10 != v14) {
                goto LABEL_8;
              }
LABEL_9:
              CircularFileLogWriter::openNewLog_sync(v4);
              uint64_t v5 = (void *)*((void *)v4 + 5);
            }
            uint64_t v7 = -1;
LABEL_8:
            unint64_t v8 = v10 - v7;
            std::ostream::write();
            v6 += v8;
            v3 -= v8;
            goto LABEL_9;
          }
          long long v12 = (char *)v5 + *(void *)(*v5 - 24);
          if ((v12[32] & 5) != 0)
          {
            if ((unint64_t)(a3 - 1) <= *(void *)(this + 128)) {
              goto LABEL_20;
            }
          }
          else
          {
            (*(void (**)(void *__return_ptr))(**((void **)v12 + 5) + 32))(v13);
            if ((unint64_t)(v14 + v3) <= *((void *)v4 + 16))
            {
LABEL_20:
              this = *((void *)v4 + 5);
              if (this) {
                return std::ostream::write();
              }
              return this;
            }
          }
          CircularFileLogWriter::openNewLog_sync(v4);
          goto LABEL_20;
        }
      }
    }
  }
  return this;
}

void CircularFileLogWriter::setCapacity(CircularFileLogWriter *this, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN21CircularFileLogWriter11setCapacityEm_block_invoke;
  v2[3] = &__block_descriptor_tmp_8;
  v2[4] = this;
  v2[5] = a2;
  ctu::SharedSynchronizable<CircularFileLogWriter>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v2);
}

void ___ZN21CircularFileLogWriter11setCapacityEm_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(CircularFileLogWriter **)(a1 + 32);
  unint64_t v2 = *(void *)(a1 + 40);
  *((void *)v1 + 15) = v2;
  *((void *)v1 + 18) = v2 / *((void *)v1 + 16);
  CircularFileLogWriter::clearOldLogs_sync(v1);
}

void CircularFileLogWriter::clearOldLogs_sync(CircularFileLogWriter *this)
{
  unsigned int v1 = *((_DWORD *)this + 39);
  if (*((void *)this + 18) < (unint64_t)(*((_DWORD *)this + 38) - v1))
  {
    uint64_t v3 = (char *)this + 72;
    do
    {
      *((_DWORD *)this + 39) = v1 + 1;
      CircularFileLogWriter::generateFileName_sync(this, v1, &v12);
      int v4 = *((char *)this + 95);
      if (v4 >= 0) {
        uint64_t v5 = v3;
      }
      else {
        uint64_t v5 = (const std::string::value_type *)*((void *)this + 9);
      }
      if (v4 >= 0) {
        std::string::size_type v6 = *((unsigned __int8 *)this + 95);
      }
      else {
        std::string::size_type v6 = *((void *)this + 10);
      }
      uint64_t v7 = std::string::insert(&v12, 0, v5, v6);
      std::string v13 = *v7;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v12.__r_.__value_.__l.__data_);
      }
      int v9 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
      unint64_t v10 = (void *)v13.__r_.__value_.__r.__words[0];
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v11 = (const std::__fs::filesystem::path *)&v13;
      }
      else {
        uint64_t v11 = (const std::__fs::filesystem::path *)v13.__r_.__value_.__r.__words[0];
      }
      if (remove(v11, v8)) {
        unlink((const char *)v11);
      }
      if (v9 < 0) {
        operator delete(v10);
      }
      unsigned int v1 = *((_DWORD *)this + 39);
    }
    while (*((void *)this + 18) < (unint64_t)(*((_DWORD *)this + 38) - v1));
  }
}

void sub_1A60A92B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  unint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  unsigned int v1 = this;
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    this = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  std::locale::~locale(this);
}

uint64_t CircularFileLogWriter::closeRunningLog_sync(CircularFileLogWriter *this)
{
  uint64_t result = *((void *)this + 5);
  if (!result)
  {
    *((void *)this + 5) = 0;
    return result;
  }
  std::ostream::flush();
  uint64_t v3 = (void *)*((void *)this + 5);
  if (std::filebuf::close())
  {
    uint64_t result = *((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!result) {
      return result;
    }
  }
  else
  {
    std::ios_base::clear((std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 32) | 4);
    uint64_t result = *((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!result) {
      return result;
    }
  }
  int v4 = *(uint64_t (**)(void))(*(void *)result + 8);

  return v4();
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  uint64_t v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  unint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1A60A9758(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1A62751A0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A62751A0](a1 + 128);
  return a1;
}

void CircularFileLogWriter::generateFileName_sync(CircularFileLogWriter *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v27 = v5;
  long long v28 = v5;
  *(_OWORD *)__s = v5;
  long long v26 = v5;
  sprintf(__s, "%08zu", a2);
  int v6 = *((char *)this + 71);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)this + 71);
  }
  else {
    size_t v7 = *((void *)this + 7);
  }
  unint64_t v8 = v7 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v8 >= 0x17)
  {
    uint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v10 = v8 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v7 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v7 + 1;
    if (!v7) {
      goto LABEL_15;
    }
  }
  if (v6 >= 0) {
    uint64_t v12 = (char *)this + 48;
  }
  else {
    uint64_t v12 = (char *)*((void *)this + 6);
  }
  memmove(p_dst, v12, v7);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v7) = 46;
  size_t v13 = strlen(__s);
  uint64_t v14 = std::string::append(&__dst, __s, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  unint64_t v18 = (const std::string::value_type *)*((void *)this + 12);
  uint64_t v17 = (char *)this + 96;
  unsigned int v16 = v18;
  int v19 = v17[23];
  if (v19 >= 0) {
    uint64_t v20 = v17;
  }
  else {
    uint64_t v20 = v16;
  }
  if (v19 >= 0) {
    std::string::size_type v21 = v17[23];
  }
  else {
    std::string::size_type v21 = *((void *)v17 + 1);
  }
  char v22 = std::string::append(&v24, v20, v21);
  *a3 = *v22;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_25:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_25;
  }
}

void sub_1A60A9AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void CircularFileLogWriter::~CircularFileLogWriter(void **this)
{
  CircularFileLogWriter::~CircularFileLogWriter(this);

  operator delete(v1);
}

{
  void *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  *this = &unk_1EFB088E0;
  if (*((char *)this + 183) < 0)
  {
    operator delete(this[20]);
    if ((*((char *)this + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 95) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*((char *)this + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[12]);
  if ((*((char *)this + 95) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 71) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(this[9]);
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
LABEL_5:
    uint64_t v2 = this[5];
    this[5] = 0;
    if (!v2) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_17:
  operator delete(this[6]);
  uint64_t v2 = this[5];
  this[5] = 0;
  if (v2) {
LABEL_6:
  }
    (*(void (**)(void *))(*(void *)v2 + 8))(v2);
LABEL_7:
  uint64_t v3 = this[4];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = this[3];
  if (v4) {
    dispatch_release(v4);
  }
  long long v5 = (std::__shared_weak_count *)this[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  long long v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    unint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    long long v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5C46960, MEMORY[0x1E4FBA1C8]);
}

void sub_1A60A9C1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5C46968, MEMORY[0x1E4FBA1D0]);
}

void sub_1A60A9CF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void *std::shared_ptr<CircularFileLogWriter>::shared_ptr[abi:ne180100]<CircularFileLogWriter,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB089D0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  std::string::size_type v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 8) = a2;
      *(void *)(a2 + 16) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 8) = a2;
  *(void *)(a2 + 16) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1A60A9F54(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter*)#1}::operator() const(CircularFileLogWriter*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1A60A9F7C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<CircularFileLogWriter *,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter *)#1},std::allocator<CircularFileLogWriter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<CircularFileLogWriter *,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter *)#1},std::allocator<CircularFileLogWriter>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<CircularFileLogWriter *,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter *)#1},std::allocator<CircularFileLogWriter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110sha"
                                "red_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter*)#1}::operator() const(CircularFileLogWriter*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ctu::SharedSynchronizable<CircularFileLogWriter>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  std::string::size_type v7 = v6;
  unint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1EFB08A18;
  block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIK21CircularFileLogWriterEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIK21CircularFileLogWriterEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(uint64_t a1, uint64_t a2, int a3)
{
  std::string::size_type v6 = (const std::locale *)MEMORY[0x1A6275150]();
  *(void *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x1E4FBA258]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E4FBA280]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0) {
    unint64_t v8 = (char *)a2;
  }
  else {
    unint64_t v8 = *(char **)a2;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (&v8[v7] != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(a1, v8, &v8[v7]))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>(); {
  return a1;
  }
}

void sub_1A60AA340(_Unwind_Exception *a1)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1A60AA35C(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  std::string::size_type v6 = operator new(8uLL);
  *std::string::size_type v6 = &unk_1EFB08A58;
  uint64_t v7 = operator new(0x10uLL);
  v7[1] = v6;
  unint64_t v8 = operator new(0x20uLL);
  *unint64_t v8 = &unk_1EFB08AB0;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    unsigned int v10 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v10 <= 0x3F)
    {
LABEL_4:
      if (v10)
      {
        if (v10 != 16)
        {
          if (v10 != 32) {
LABEL_27:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
          goto LABEL_15;
        }
        return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, a3);
      }
      else
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      }
    }
  }
  else
  {
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    unsigned int v10 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v10 <= 0x3F) {
      goto LABEL_4;
    }
  }
  switch(v10)
  {
    case 0x40u:
LABEL_15:
      return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
    case 0x80u:
      return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(a1, a2, a3);
    case 0x100u:
      return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
    default:
      goto LABEL_27;
  }
}

void sub_1A60AA5B0(_Unwind_Exception *a1)
{
  std::__empty_state<char>::~__empty_state(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A6274E10](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A60AA63C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::vector<std::csub_match>::pointer end = a1->__end_;
  uint64_t v7 = a2;
  while (1)
  {
    unint64_t v8 = (std::basic_regex<char> *)v7;
    uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v7, a3);
    if (v8 == (std::basic_regex<char> *)v7) {
      break;
    }
LABEL_2:
    if (v7 == (char *)v8) {
      goto LABEL_6;
    }
  }
  uint64_t v9 = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
  if (v8 != v11)
  {
    uint64_t v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 == (std::basic_regex<char> *)a2)
  {
    uint64_t v12 = (std::__node<char> *)operator new(0x10uLL);
    size_t v13 = a1->__end_;
    first = v13->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)first;
    v13->__first_ = v12;
    long long v15 = (std::__owns_one_state<char> *)a1->__end_->__first_;
    goto LABEL_8;
  }
LABEL_9:
  if (v8 == (std::basic_regex<char> *)a3) {
    return a3;
  }
  if (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    unsigned int v16 = a1->__end_;
    uint64_t v17 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    unint64_t v18 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (1)
    {
      unint64_t v8 = (std::basic_regex<char> *)v18;
      unint64_t v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v18, a3);
      if (v8 == (std::basic_regex<char> *)v18)
      {
        int v19 = a1->__end_;
        unsigned int v20 = a1->__marked_count_;
        std::string::size_type v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
        if (v8 == v21)
        {
LABEL_16:
          if (v8 == v17)
          {
            char v22 = (std::__node<char> *)operator new(0x10uLL);
            size_t v23 = a1->__end_;
            std::string v24 = v23->__first_;
            v22[1].__vftable = (std::__node<char>_vtbl *)v24;
            v23->__first_ = v22;
            a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
          }
          uint64_t v25 = (std::__node<char> *)operator new(0x18uLL);
          long long v26 = v16->__first_;
          v25[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
          v25[2].__vftable = (std::__node<char>_vtbl *)v26;
          v25->__vftable = (std::__node<char>_vtbl *)&unk_1EFB09070;
          end->__first_ = v25;
          v16->__first_ = 0;
          long long v27 = (std::__node<char> *)operator new(0x10uLL);
          long long v28 = a1->__end_->__first_;
          v27[1].__vftable = (std::__node<char>_vtbl *)v28;
          v16->__first_ = v27;
          a1->__end_->__first_ = 0;
          uint64_t v29 = (std::__node<char> *)operator new(0x10uLL);
          std::string::size_type v30 = v16->__first_;
          v29->__vftable = (std::__node<char>_vtbl *)&unk_1EFB090B8;
          v29[1].__vftable = (std::__node<char>_vtbl *)v30;
          a1->__end_->__first_ = v29;
          long long v15 = (std::__owns_one_state<char> *)v16->__first_;
LABEL_8:
          a1->__end_ = v15;
          goto LABEL_9;
        }
        unint64_t v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v21, (std::basic_regex<char> *)a3, v19, v20 + 1, a1->__marked_count_ + 1);
      }
      if (v18 == (char *)v8) {
        goto LABEL_16;
      }
    }
  }
  return (char *)v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3) {
    return a2;
  }
  if (*a2 == 94)
  {
    std::string::size_type v6 = operator new(0x18uLL);
    BOOL v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(v8 + 8);
    *std::string::size_type v6 = &unk_1EFB08BA8;
    v6[1] = v9;
    *((unsigned char *)v6 + 16) = v7;
    *(void *)(v8 + 8) = v6;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    unint64_t v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      unsigned int v10 = v3;
      uint64_t v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v12 = *(_DWORD *)(a1 + 28);
      size_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, (uint64_t)v10, a3);
      if (v10 != v13)
      {
        unint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v10 != (unsigned char *)v3) {
          continue;
        }
      }
      if (v10 + 1 != a3 || *v10 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      uint64_t v14 = operator new(0x18uLL);
      BOOL v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(v16 + 8);
      *uint64_t v14 = &unk_1EFB08BF0;
      v14[1] = v17;
      *((unsigned char *)v14 + 16) = v15;
      *(void *)(v16 + 8) = v14;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2) {
    goto LABEL_12;
  }
  do
  {
    uint64_t v8 = v7;
    BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2) {
LABEL_12:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3) {
    return a3;
  }
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    uint64_t v9 = *(void *)(a1 + 56);
    unsigned int v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if ((std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1) == v11) {
      goto LABEL_12;
    }
    do
    {
      uint64_t v8 = v11;
      uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v8 == v10) {
      goto LABEL_12;
    }
    int v12 = operator new(0x18uLL);
    uint64_t v13 = *(void *)(v9 + 8);
    v12[1] = *(void *)(v6 + 8);
    v12[2] = v13;
    *int v12 = &unk_1EFB09070;
    *(void *)(v6 + 8) = v12;
    *(void *)(v9 + 8) = 0;
    uint64_t v14 = operator new(0x10uLL);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    v14[1] = v15;
    *(void *)(v9 + 8) = v14;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v16 = operator new(0x10uLL);
    uint64_t v17 = *(void *)(v9 + 8);
    *uint64_t v16 = &unk_1EFB090B8;
    v16[1] = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = v16;
    *(void *)(a1 + 56) = *(void *)(v9 + 8);
    if (v8 == a3) {
      return a3;
    }
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    v9[1] = v10;
    *(void *)(v6 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v8 + 1;
    }
    if (v11 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v8 + 1;
    }
    if (v11 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    std::string::size_type v21 = (char *)memchr(v11, 10, a3 - v11);
    if (v21) {
      char v22 = v21;
    }
    else {
      char v22 = a3;
    }
    if (v22 == v11)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    *uint64_t v15 = &unk_1EFB09070;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    int v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    *int v19 = &unk_1EFB090B8;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v11 = v22;
    }
    else {
      uint64_t v11 = v22 + 1;
    }
  }
  while (v11 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    v9[1] = v10;
    *(void *)(v6 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v11 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v11 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    std::string::size_type v21 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v21) {
      char v22 = v21;
    }
    else {
      char v22 = a3;
    }
    if (v22 == v11)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    *uint64_t v15 = &unk_1EFB09070;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    int v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    *int v19 = &unk_1EFB090B8;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v11 = v22;
    }
    else {
      uint64_t v11 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
  }
  while (v11 != a3);
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A6274E10](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A60AB010(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001A61F6B20) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001A61F6B20 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001A61F6B20)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001A61F6B20 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  uint64_t vars8;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }

  operator delete(this);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        int v16 = a2[1];
        if (v16 == 66)
        {
          uint64_t v17 = (char *)operator new(0x30uLL);
          uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v17 = &unk_1EFB08C38;
          *((void *)v17 + 1) = v19;
          std::locale::locale((std::locale *)v17 + 2, (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          v17[40] = 1;
        }
        else
        {
          if (v16 != 98) {
            return v3;
          }
          uint64_t v17 = (char *)operator new(0x30uLL);
          uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v17 = &unk_1EFB08C38;
          *((void *)v17 + 1) = v18;
          std::locale::locale((std::locale *)v17 + 2, (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          v17[40] = 0;
        }
        *(void *)(*(void *)(a1 + 56) + 8) = v17;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        return v3 + 2;
      }
      return v3;
    }
    if (v6 != 94) {
      return v3;
    }
    uint64_t v11 = operator new(0x18uLL);
    BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v13 = *(void *)(a1 + 56);
    v11[1] = *(void *)(v13 + 8);
    uint64_t v14 = &unk_1EFB08BA8;
LABEL_17:
    void *v11 = v14;
    *((unsigned char *)v11 + 16) = v12;
    *(void *)(v13 + 8) = v11;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    return ++v3;
  }
  if (v6 == 36)
  {
    uint64_t v11 = operator new(0x18uLL);
    BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v13 = *(void *)(a1 + 56);
    v11[1] = *(void *)(v13 + 8);
    uint64_t v14 = &unk_1EFB08BF0;
    goto LABEL_17;
  }
  if (v6 != 40 || a2 + 1 == a3 || a2[1] != 63 || a2 + 2 == a3) {
    return v3;
  }
  int v7 = a2[2];
  if (v7 == 33)
  {
    *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v22.__loop_count_ = v20;
    *(_OWORD *)&v22.__start_.__cntrl_ = v20;
    *(_OWORD *)&v22.__traits_.__loc_.__locale_ = v20;
    *(_OWORD *)&v22.__traits_.__col_ = v20;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v22);
    v22.__flags_ = *(_DWORD *)(a1 + 24);
    uint64_t v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v22, v3 + 3, a3);
    unsigned int marked_count = v22.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v22, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v9 == a3 || *v9 != 41) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    goto LABEL_27;
  }
  if (v7 != 61) {
    return v3;
  }
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v22.__loop_count_ = v8;
  *(_OWORD *)&v22.__start_.__cntrl_ = v8;
  *(_OWORD *)&v22.__traits_.__loc_.__locale_ = v8;
  *(_OWORD *)&v22.__traits_.__col_ = v8;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v22);
  v22.__flags_ = *(_DWORD *)(a1 + 24);
  uint64_t v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v22, v3 + 3, a3);
  unsigned int v10 = v22.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v22, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v10;
  if (v9 == a3 || *v9 != 41) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
LABEL_27:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v22.__traits_.__loc_);
  return v9 + 1;
}

void sub_1A60AB5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1A60AB5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1A60AB5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1A60AB5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  switch(LOBYTE(a2->__traits_.__loc_.__locale_))
  {
    case '(':
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3) {
        goto LABEL_26;
      }
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
        && BYTE1(a2->__traits_.__loc_.__locale_) == 63
        && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
      {
        ++this->__open_count_;
        int v6 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, a3);
        if (v6 != a3 && LOBYTE(v6->__traits_.__loc_.__locale_) == 41)
        {
          --this->__open_count_;
          return (std::basic_regex<char> *)((char *)&v6->__traits_.__loc_.__locale_ + 1);
        }
LABEL_26:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((this->__flags_ & 2) != 0)
      {
        unsigned int marked_count = this->__marked_count_;
      }
      else
      {
        uint64_t v11 = (std::__node<char> *)operator new(0x18uLL);
        unsigned int marked_count = this->__marked_count_ + 1;
        this->__marked_count_ = marked_count;
        std::vector<std::csub_match>::pointer end = this->__end_;
        first = end->__first_;
        v11->__vftable = (std::__node<char>_vtbl *)&unk_1EFB08F08;
        v11[1].__vftable = (std::__node<char>_vtbl *)first;
        LODWORD(v11[2].__vftable) = marked_count;
        end->__first_ = v11;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      ++this->__open_count_;
      uint64_t v15 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, a3);
      if (v15 == a3) {
        goto LABEL_26;
      }
      int v16 = v15;
      if (LOBYTE(v15->__traits_.__loc_.__locale_) != 41) {
        goto LABEL_26;
      }
      if ((this->__flags_ & 2) == 0)
      {
        uint64_t v17 = (std::__node<char> *)operator new(0x18uLL);
        uint64_t v18 = this->__end_;
        uint64_t v19 = v18->__first_;
        v17->__vftable = (std::__node<char>_vtbl *)&unk_1EFB08F50;
        v17[1].__vftable = (std::__node<char>_vtbl *)v19;
        LODWORD(v17[2].__vftable) = marked_count;
        v18->__first_ = v17;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      --this->__open_count_;
      uint64_t result = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
      break;
    case ')':
    case ',':
    case '-':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
    case '*':
    case '+':
    case '?':
      goto LABEL_25;
    case '.':
      long long v8 = (std::__node<char> *)operator new(0x10uLL);
      uint64_t v9 = this->__end_;
      unsigned int v10 = v9->__first_;
      v8->__vftable = (std::__node<char>_vtbl *)&unk_1EFB08CC8;
      v8[1].__vftable = (std::__node<char>_vtbl *)v10;
      v9->__first_ = v8;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return (std::basic_regex<char> *)((char *)v3 + 1);
    case '[':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, (char *)a3);
    case '\\':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    default:
      if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123) {
LABEL_25:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6) {
        BOOL v21 = 1;
      }
      else {
        BOOL v21 = v9 == a3;
      }
      if (!v21 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        unsigned int v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
        size_t v11 = 0;
        goto LABEL_36;
      }
      __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
      size_t v25 = 0;
      goto LABEL_45;
    }
    long long v8 = this;
    if (locale_low == 43)
    {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        unsigned int v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
        size_t v11 = 1;
LABEL_36:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v10;
      }
      __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
      size_t v25 = 1;
      goto LABEL_45;
    }
    return v8;
  }
  if (locale_low == 63)
  {
    std::basic_regex<char> v22 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6) {
      BOOL v23 = 1;
    }
    else {
      BOOL v23 = v22 == a3;
    }
    if (v23 || LOBYTE(v22->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v22;
    }
    else
    {
      std::string v24 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v24;
    }
  }
  else
  {
    long long v8 = this;
    if (locale_low != 123) {
      return v8;
    }
    uint64_t v13 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_72;
    }
    int v14 = *v13;
    if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38) {
      goto LABEL_72;
    }
    int v15 = v14 - 48;
    int v16 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_21:
      int v16 = (char *)a3;
    }
    else
    {
      while (1)
      {
        int v17 = *v16;
        if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38) {
          break;
        }
        if (v15 >= 214748364) {
          goto LABEL_72;
        }
        int v15 = v17 + 10 * v15 - 48;
        if (++v16 == (char *)a3) {
          goto LABEL_21;
        }
      }
    }
    if (v16 == v13) {
      goto LABEL_72;
    }
    if (v16 == (char *)a3) {
      goto LABEL_73;
    }
    int v18 = *v16;
    if (v18 != 44)
    {
      if (v18 == 125)
      {
        uint64_t v19 = (std::basic_regex<char> *)(v16 + 1);
        if (v6 || v19 == a3 || LOBYTE(v19->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 1);
          return v19;
        }
        else
        {
          long long v20 = (unsigned __int8 *)(v16 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v20;
        }
      }
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    long long v26 = (std::basic_regex<char> *)(v16 + 1);
    if (v16 + 1 == (char *)a3) {
      goto LABEL_72;
    }
    int v27 = LOBYTE(v26->__traits_.__loc_.__locale_);
    if (v27 == 125)
    {
      uint64_t v9 = (std::basic_regex<char> *)(v16 + 2);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        size_t v11 = v15;
        unsigned int v10 = v16 + 3;
        __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
        goto LABEL_36;
      }
      size_t v25 = v15;
      __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
LABEL_45:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v25, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v9;
    }
    if ((v27 & 0xF8) != 0x30 && (v27 & 0xFE) != 0x38) {
      goto LABEL_73;
    }
    int v28 = v27 - 48;
    uint64_t v29 = (std::basic_regex<char> *)(v16 + 2);
    if (v29 == a3)
    {
LABEL_61:
      uint64_t v29 = a3;
    }
    else
    {
      while (1)
      {
        int v30 = LOBYTE(v29->__traits_.__loc_.__locale_);
        if ((v30 & 0xF8) != 0x30 && (v30 & 0xFE) != 0x38) {
          break;
        }
        if (v28 >= 214748364) {
          goto LABEL_72;
        }
        int v28 = v30 + 10 * v28 - 48;
        uint64_t v29 = (std::basic_regex<char> *)((char *)v29 + 1);
        if (v29 == a3) {
          goto LABEL_61;
        }
      }
    }
    if (v29 == v26 || v29 == a3 || LOBYTE(v29->__traits_.__loc_.__locale_) != 125) {
LABEL_73:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v28 < v15) {
      goto LABEL_72;
    }
    uint64_t v31 = (std::basic_regex<char> *)((char *)&v29->__traits_.__loc_.__locale_ + 1);
    if (v6 || v31 == a3 || LOBYTE(v31->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 1);
      return v31;
    }
    else
    {
      uint64_t v32 = (char *)&v29->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v32;
    }
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x1A6275150]();
  *(void *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x1E4FBA258]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E4FBA280]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  return a1;
}

void sub_1A60ABDC8(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  long long v8 = (char *)operator new(0x58uLL);
  first = this->__end_->__first_;
  *(void *)long long v8 = &unk_1EFB08C80;
  *((void *)v8 + 1) = first;
  std::locale::locale((std::locale *)v8 + 2, &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *((void *)v8 + 7) = a2->__start_.__ptr_;
  *((void *)v8 + 8) = cntrl;
  if (cntrl) {
    atomic_fetch_add_explicit(&cntrl->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v8 + 9) = a2->__end_;
  *((_DWORD *)v8 + 20) = a4;
  v8[84] = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A6274E10](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A60ABEE0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 92))
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
    return result;
  }
  if (*(void *)(a2 + 16) == *(void *)(a2 + 8) && (*(unsigned char *)(a2 + 88) & 1) == 0) {
    goto LABEL_11;
  }
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(void *)(a2 + 80) = 0;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EFB08C38;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EFB08C38;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_19;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      int v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          uint64_t v6 = *v2;
          if (v6 == 95) {
            goto LABEL_17;
          }
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    uint64_t v7 = *(v4 - 1);
    uint64_t v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      int v9 = 1;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    else
    {
      int v9 = 0;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(unsigned char *)(result + 40) == (v9 != 0)) {
        goto LABEL_20;
      }
      goto LABEL_27;
    }
LABEL_24:
    if (*(unsigned char *)(result + 40) != (v9 != 1)) {
      goto LABEL_27;
    }
    goto LABEL_20;
  }
  if ((*(unsigned char *)(a2 + 88) & 8) == 0)
  {
    uint64_t v6 = *(v3 - 1);
    if (v6 == 95) {
      goto LABEL_17;
    }
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(unsigned char *)(result + 40) != 1) {
        goto LABEL_27;
      }
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(void *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(unsigned char *)(result + 40)) {
    goto LABEL_20;
  }
LABEL_27:
  uint64_t v10 = *(void *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = v10;
  return result;
}

std::locale *std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EFB08C80;
  int v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(v2);
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      return a1;
    }
    goto LABEL_4;
  }
  std::locale::~locale(a1 + 2);
  BOOL v4 = a1[1].__locale_;
  if (v4) {
LABEL_4:
  }
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EFB08C80;
  int v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (!locale || atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    std::locale::~locale(a1 + 2);
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
  std::__shared_weak_count::__release_weak(locale);
  std::locale::~locale(v2);
  BOOL v4 = a1[1].__locale_;
  if (v4) {
LABEL_4:
  }
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
LABEL_5:

  operator delete(a1);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v20 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v22 = 0xAAAAAAAAAAAAAA00;
  long long v24 = v4;
  uint64_t v21 = 0;
  long long v23 = 0uLL;
  LOBYTE(v24) = 0;
  BYTE8(v24) = 0;
  uint64_t v25 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v5 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)&long long v19 = *(void *)(a2 + 24);
  *((void *)&v19 + 1) = v19;
  LOBYTE(v20) = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v5, (std::vector<std::csub_match>::const_reference)&v19);
  *((void *)&v20 + 1) = v6;
  uint64_t v21 = v6;
  LOBYTE(v22) = 0;
  long long v23 = v19;
  LOBYTE(v24) = v20;
  uint64_t v25 = v6;
  BYTE8(v24) = 1;
  uint64_t v7 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v8 = v7 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v8 = 0;
  }
  char v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v7, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    std::vector<std::pair<unsigned long, const char *>>::pointer begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  std::vector<std::pair<unsigned long, const char *>>::pointer begin = __p.__begin_;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v12 = 0;
  int v13 = *(_DWORD *)(a1 + 80);
  uint64_t v14 = *(void *)(a2 + 32);
  unint64_t v15 = 1;
  do
  {
    int v16 = &begin[v15];
    uint64_t v17 = v14 + 24 * (v13 + v12);
    *(std::pair<const char *, const char *> *)uint64_t v17 = v16->std::pair<const char *, const char *>;
    *(unsigned char *)(v17 + 16) = v16->matched;
    unint64_t v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_1A60AC7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]()
{
}

void *std::__state<char>::~__state(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A6274E10](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A60AC890(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A6274E10](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A60AC8E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::__state<char>>::~vector[abi:ne180100](void **a1)
{
  int v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    long long v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        std::vector<std::csub_match>::size_type v5 = (void *)*((void *)v3 - 5);
        if (v5)
        {
          *((void *)v3 - 4) = v5;
          operator delete(v5);
        }
        uint64_t v6 = (void *)*((void *)v3 - 8);
        if (v6)
        {
          *((void *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  char v9 = &v7[96 * v3];
  *(_OWORD *)char v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  uint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  int v13 = v9 + 96;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = &v9[v16];
      int v18 = &v15[v16];
      long long v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 7) = 0;
      *((void *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((void *)v17 - 6) = *(void *)&v15[v16 - 48];
      *((void *)v18 - 8) = 0;
      *((void *)v18 - 7) = 0;
      *((void *)v18 - 6) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((void *)v17 - 3) = *(void *)&v15[v16 - 24];
      *((void *)v18 - 5) = 0;
      *((void *)v18 - 4) = 0;
      *((void *)v18 - 3) = 0;
      uint64_t v20 = *(void *)&v15[v16 - 16];
      *(void *)(v17 - 11) = *(void *)&v15[v16 - 11];
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    unint64_t v15 = (char *)*a1;
    uint64_t v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      unint64_t v22 = (void *)*((void *)v21 - 5);
      if (v22)
      {
        *((void *)v21 - 4) = v22;
        operator delete(v22);
      }
      long long v23 = (void *)*((void *)v21 - 8);
      if (v23)
      {
        *((void *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      int v13 = &end[__n];
      std::vector<std::csub_match>::size_type v14 = 24 * __n;
      do
      {
        std::pair<const char *, const char *> v15 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      std::vector<std::csub_match>::pointer end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v12 = (char *)operator new(24 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    std::vector<std::csub_match>::size_type v17 = 24 * __n;
    int v18 = &v16[__n];
    long long v19 = v16;
    do
    {
      std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      *long long v19 = v20;
      long long v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    std::vector<std::csub_match>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<const char *, const char *> v22 = end[-1].std::pair<const char *, const char *>;
        *(void *)&v16[-1].matched = *(void *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
    {
      operator delete(end);
    }
  }
}

uint64_t std::__state<char>::__state(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = (unsigned char *)*((void *)a2 + 4);
  unint64_t v6 = (unsigned char *)*((void *)a2 + 5);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (char *)operator new(v8);
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    size_t v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(void *)(a1 + 40) = &v9[v10];
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v12 = (unsigned char *)*((void *)a2 + 7);
  unint64_t v11 = (unsigned char *)*((void *)a2 + 8);
  uint64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    std::vector<std::csub_match>::size_type v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFF0);
    *(void *)(a1 + 64) = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  uint64_t v15 = *((void *)a2 + 10);
  *(void *)(a1 + 85) = *(void *)((char *)a2 + 85);
  *(void *)(a1 + 80) = v15;
  return a1;
}

void sub_1A60ACE50(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  long long v4 = a2;
  if (*a2 == 92)
  {
    unint64_t v6 = a2 + 1;
    if (a2 + 1 == a3) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    int v8 = *v6;
    unsigned int v9 = v8 - 48;
    if (v8 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
      return a2 + 2;
    }
    if ((v8 - 49) <= 8)
    {
      long long v4 = a2 + 2;
      if (a2 + 2 == a3)
      {
        long long v4 = a3;
      }
      else
      {
        while (1)
        {
          int v11 = *v4;
          if ((v11 - 48) > 9) {
            break;
          }
          if (v9 >= 0x19999999) {
            goto LABEL_24;
          }
          ++v4;
          unsigned int v9 = v11 + 10 * v9 - 48;
          if (v4 == a3)
          {
            long long v4 = a3;
            break;
          }
        }
        if (!v9) {
LABEL_24:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
      }
      if (v9 > this->__marked_count_) {
        goto LABEL_24;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v9);
      if (v4 != v6) {
        return v4;
      }
    }
    long long v4 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 1, a3);
    if (v6 == v4)
    {
      uint64_t v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(this, a2 + 1, a3, 0);
      if (v6 == v12) {
        return a2;
      }
      else {
        return v12;
      }
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    int v5 = a2[1];
    char v6 = v5 == 94;
    uint64_t v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    int v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(void *)(*(void *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(void *)(*(void *)(a1 + 56) + 8) = v8;
    *(void *)(a1 + 56) = v8;
    if (v7 == a3) {
      goto LABEL_20;
    }
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3) {
      goto LABEL_20;
    }
    do
    {
      unsigned int v9 = v7;
      uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v7, a3, (uint64_t)v8);
    }
    while (v9 != v7);
    if (v9 == a3) {
      goto LABEL_20;
    }
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_1A60AD12C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A6274E10](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A60AD184(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      uint64_t result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A6274E10](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A60AD4A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  unint64_t v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(void *)(*(void *)(a1 + 56) + 8) = v6;
        *(void *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_1A60AD698(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A60AD6AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A60AD6C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A60AD6D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A60AD6E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A60AD6FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  long long v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  uint64_t v5 = *a2;
  std::basic_regex<char>::value_type v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3 || (char)v4[1] < 65) {
        goto LABEL_85;
      }
      unsigned int v8 = v4[1];
      if (v8 >= 0x5B && (v8 - 97) > 0x19u) {
        goto LABEL_85;
      }
      std::basic_regex<char>::value_type v10 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v10;
        *((unsigned char *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v10);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        int v11 = v4[1];
        if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            int v12 = *v4;
            if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38 || (v12 | 0x20u) - 97 < 6) {
              goto LABEL_42;
            }
          }
        }
      }
      goto LABEL_85;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char>::value_type v6 = 11;
LABEL_68:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_42:
      if (v4 + 1 == a3) {
        goto LABEL_85;
      }
      unsigned __int8 v13 = v4[1];
      char v14 = -48;
      if ((v13 & 0xF8) == 0x30 || (v13 & 0xFE) == 0x38) {
        goto LABEL_47;
      }
      v13 |= 0x20u;
      if ((v13 - 97) >= 6u) {
        goto LABEL_85;
      }
      char v14 = -87;
LABEL_47:
      if (v4 + 2 == a3) {
        goto LABEL_85;
      }
      unsigned __int8 v15 = v4[2];
      char v16 = -48;
      if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
      {
        v15 |= 0x20u;
        if ((v15 - 97) >= 6u) {
LABEL_85:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        char v16 = -87;
      }
      std::basic_regex<char>::value_type v17 = v15 + 16 * (v13 + v14) + v16;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v17;
      *((unsigned char *)a4 + 1) = 0;
      uint64_t result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0) {
        goto LABEL_85;
      }
      if (!a4) {
        goto LABEL_68;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v5;
      *((unsigned char *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2 = __c;
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if (flags)
  {
    unsigned int v8 = (char *)operator new(0x30uLL);
    first = this->__end_->__first_;
    *(void *)unsigned int v8 = &unk_1EFB08D10;
    *((void *)v8 + 1) = first;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    unsigned int v8 = (char *)operator new(0x30uLL);
    std::basic_regex<char>::value_type v10 = this->__end_->__first_;
    *(void *)unsigned int v8 = &unk_1EFB08D58;
    *((void *)v8 + 1) = v10;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = v2;
    goto LABEL_6;
  }
  uint64_t v5 = (std::__node<char> *)operator new(0x18uLL);
  std::vector<std::csub_match>::pointer end = this->__end_;
  int v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_1EFB08DA0;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LOBYTE(v5[2].__vftable) = v2;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1A60ADF24(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  long long v4 = v1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A6274E10](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A60ADFD0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if (flags)
  {
    unsigned int v8 = (std::locale *)operator new(0x30uLL);
    unsigned int v9 = v8;
    v8[1].__locale_ = (std::locale::__imp *)this->__end_->__first_;
    std::basic_regex<char>::value_type v10 = (std::locale::__imp *)&unk_1EFB08DE8;
LABEL_6:
    v8->__locale_ = v10;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    unsigned int v8 = (std::locale *)operator new(0x30uLL);
    unsigned int v9 = v8;
    v8[1].__locale_ = (std::locale::__imp *)this->__end_->__first_;
    std::basic_regex<char>::value_type v10 = (std::locale::__imp *)&unk_1EFB08E30;
    goto LABEL_6;
  }
  uint64_t v5 = (std::__node<char> *)operator new(0x18uLL);
  std::vector<std::csub_match>::pointer end = this->__end_;
  first = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_1EFB08E78;
  v5[1].__vftable = (std::__node<char>_vtbl *)first;
  LODWORD(v5[2].__vftable) = __i;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EFB08D10;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EFB08D10;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    *(void *)(a2 + 80) = *(void *)(v4 + 8);
  }
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EFB08D58;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EFB08D58;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EFB08DE8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EFB08DE8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(unsigned char *)(v3 + 16)
    || (v4 = *(void *)(v3 + 8) - *(void *)v3, uint64_t v5 = *(void *)(a2 + 16), *(void *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    return result;
  }
  uint64_t v6 = result;
  if (v4 >= 1)
  {
    uint64_t v7 = 0;
    while (1)
    {
      int v8 = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)v3 + v7));
      uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)(a2 + 16) + v7));
      if (v8 != result) {
        goto LABEL_3;
      }
      if (v4 == ++v7)
      {
        uint64_t v5 = *(void *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v5 + v4;
  *(void *)(a2 + 80) = *(void *)(v6 + 8);
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EFB08E30;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EFB08E30;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (!*(unsigned char *)(v3 + 24 * v2 + 16)
    || (uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2),
        uint64_t v5 = *v4,
        uint64_t v6 = v4[1] - *v4,
        uint64_t v7 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    uint64_t v8 = v6;
    unsigned int v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      int v11 = *v5++;
      int v10 = v11;
      int v12 = *v9++;
      if (v10 != v12) {
        goto LABEL_3;
      }
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v7 + v6;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  unsigned int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    *(void *)(a2 + 80) = *((void *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v6 = (void *)(a1 + 40);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v16 = *(void *)(a1 + 56);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16) {
        goto LABEL_24;
      }
      std::basic_regex<char>::value_type v17 = (unsigned char *)*v6;
      unint64_t v18 = (unint64_t)&v5[-*v6];
      unint64_t v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        unint64_t v20 = v16 - (void)v17;
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21)
        {
          int v12 = operator new(v21);
          unsigned __int8 v13 = &v12[v18];
          char v14 = &v12[v21];
          v12[v18] = v2;
          uint64_t v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        else
        {
          int v12 = 0;
          unsigned __int8 v13 = &v5[-*v6];
          char v14 = 0;
          *(unsigned char *)unint64_t v18 = a2;
          uint64_t v15 = v18 + 1;
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            unint64_t v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            long long v38 = (long long *)(v5 - 16);
            uint64_t v39 = &v12[v5 - 16 - v17];
            unint64_t v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *uint64_t v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28) {
              goto LABEL_86;
            }
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          unsigned int v42 = &v5[-v28 - 8];
          unint64_t v43 = &v12[v42 - v17];
          unint64_t v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_86;
          }
        }
LABEL_80:
        uint64_t v56 = v13 - 1;
        do
        {
          char v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16) {
      goto LABEL_24;
    }
    long long v23 = (unsigned char *)*v6;
    unint64_t v24 = (unint64_t)&v5[-*v6];
    unint64_t v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_89;
    }
    unint64_t v26 = v16 - (void)v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27)
    {
      int v12 = operator new(v27);
      unsigned __int8 v13 = &v12[v24];
      char v14 = &v12[v27];
      v12[v24] = v2;
      uint64_t v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(void *)(a1 + 40) = v13;
        *(void *)(a1 + 48) = v15;
        *(void *)(a1 + 56) = v14;
        if (!v5) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      int v12 = 0;
      unsigned __int8 v13 = &v5[-*v6];
      char v14 = 0;
      *(unsigned char *)unint64_t v24 = a2;
      uint64_t v15 = v24 + 1;
      if (v5 == v23) {
        goto LABEL_49;
      }
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        int64_t v46 = (long long *)(v5 - 16);
        uint64_t v47 = &v12[v5 - 16 - v23];
        unint64_t v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29) {
          goto LABEL_86;
        }
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v50 = &v5[-v29 - 8];
      long long v51 = &v12[v50 - v23];
      unint64_t v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v53 = *(void *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_86;
      }
    }
LABEL_84:
    int v58 = v13 - 1;
    do
    {
      char v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v4 = *(void *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *unsigned int v5 = v2;
    uint64_t v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  uint64_t v6 = (void *)(a1 + 40);
  uint64_t v7 = *(unsigned char **)(a1 + 40);
  unint64_t v8 = v5 - v7;
  uint64_t v9 = v5 - v7 + 1;
  if (v9 < 0) {
    goto LABEL_89;
  }
  unint64_t v10 = v4 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    int v12 = operator new(v11);
    unsigned __int8 v13 = &v12[v8];
    char v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  else
  {
    int v12 = 0;
    unsigned __int8 v13 = (char *)(v5 - v7);
    char v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v15 = v8 + 1;
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
    goto LABEL_76;
  }
  if (v8 < 0x20)
  {
    unint64_t v22 = 0;
    goto LABEL_55;
  }
  unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  int v30 = (long long *)(v5 - 16);
  uint64_t v31 = &v12[v5 - 16 - v7];
  unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *uint64_t v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    long long v34 = &v5[-v22 - 8];
    long long v35 = &v12[v34 - v7];
    unint64_t v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v37 = *(void *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_86;
    }
LABEL_76:
    long long v54 = v13 - 1;
    do
    {
      char v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  unsigned int v5 = (unsigned char *)*v6;
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = v14;
  if (v5) {
LABEL_87:
  }
    operator delete(v5);
LABEL_88:
  *(void *)(a1 + 48) = v15;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(a1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 170) = a6;
  std::locale::locale(&v16, v11);
  std::locale::name(&v17, &v16);
  std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  if (size == 1)
  {
    unsigned __int8 v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v13 = &v17;
    }
    BOOL v14 = v13->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v14 = 1;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
LABEL_9:
    }
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v16);
  *(unsigned char *)(a1 + 171) = v14;
  return a1;
}

void sub_1A60AF0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v9 + 136));
  uint64_t v15 = *(void **)(v9 + 112);
  if (v15)
  {
    *(void *)(v9 + 120) = v15;
    operator delete(v15);
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v12);
    std::locale v16 = *(void **)(v9 + 64);
    if (!v16)
    {
LABEL_3:
      std::string v17 = *v13;
      if (!*v13) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v12);
    std::locale v16 = *(void **)(v9 + 64);
    if (!v16) {
      goto LABEL_3;
    }
  }
  *(void *)(v9 + 72) = v16;
  operator delete(v16);
  std::string v17 = *v13;
  if (!*v13)
  {
LABEL_4:
    std::locale::~locale(v11);
    *(void *)uint64_t v9 = v10;
    uint64_t v18 = *(void *)(v9 + 8);
    if (!v18) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  *(void *)(v9 + 48) = v17;
  operator delete(v17);
  std::locale::~locale(v11);
  *(void *)uint64_t v9 = v10;
  uint64_t v18 = *(void *)(v9 + 8);
  if (!v18) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_9:
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](void **a1)
{
  char v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        unint64_t v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  locale = a1[17].__locale_;
  if (locale)
  {
    uint64_t v3 = a1[18].__locale_;
    unint64_t v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*((void **)v3 - 3));
        }
        uint64_t v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      unint64_t v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  unsigned int v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  uint64_t v6 = a1[11].__locale_;
  if (v6)
  {
    uint64_t v7 = a1[12].__locale_;
    unint64_t v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0) {
LABEL_19:
        }
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      uint64_t v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        unint64_t v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  uint64_t v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  size_t v11 = a1[1].__locale_;
  if (v11) {
    (*(void (**)(std::locale::__imp *))(*(void *)v11 + 8))(v11);
  }
  return a1;
}

void std::regex_traits<char>::__lookup_collatename<char *>(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    __dst[23] = (_BYTE)a3 - (_BYTE)__src;
    uint64_t v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v5);
    v9 += v5;
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  uint64_t v9 = operator new(v10 + 1);
  *(void *)&__dst[8] = v5;
  *(void *)&__dst[16] = v11 | 0x8000000000000000;
  *(void *)std::string __dst = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *uint64_t v9 = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if ((__dst[23] & 0x80000000) != 0)
  {
    int v12 = *(char **)__dst;
    if (!*(void *)&__dst[8]) {
      goto LABEL_18;
    }
  }
  else
  {
    if (!__dst[23]) {
      return;
    }
    int v12 = __dst;
  }
  std::__get_collation_name(&v19, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  unint64_t v13 = v19.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v19.__r_.__value_.__l + 2);
  unint64_t v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0) {
    unint64_t v14 = *(void *)(a4 + 8);
  }
  if (v14) {
    goto LABEL_16;
  }
  if ((__dst[23] & 0x80000000) != 0)
  {
    int v12 = *(char **)__dst;
    if (*(void *)&__dst[8] < 3uLL)
    {
LABEL_24:
      (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v19);
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      *(std::string *)a4 = v19;
      if (*(char *)(a4 + 23) < 0)
      {
        uint64_t v16 = *(void *)(a4 + 8);
        if (v16 == 1 || v16 == 12)
        {
          if (__dst != (unsigned char *)a4)
          {
            if (__dst[23] >= 0) {
              std::string v17 = __dst;
            }
            else {
              std::string v17 = *(unsigned char **)__dst;
            }
            if (__dst[23] >= 0) {
              size_t v18 = __dst[23];
            }
            else {
              size_t v18 = *(void *)&__dst[8];
            }
            std::string::__assign_no_alias<false>((void **)a4, v17, v18);
          }
        }
        else
        {
          **(unsigned char **)a4 = 0;
          *(void *)(a4 + 8) = 0;
        }
      }
      else
      {
        int v15 = *(unsigned __int8 *)(a4 + 23);
        if (v15 == 1 || v15 == 12)
        {
          if (__dst != (unsigned char *)a4)
          {
            if ((__dst[23] & 0x80000000) != 0)
            {
              std::string::__assign_no_alias<true>((void *)a4, *(void **)__dst, *(size_t *)&__dst[8]);
            }
            else
            {
              *(_OWORD *)a4 = *(_OWORD *)__dst;
              *(void *)(a4 + 16) = *(void *)&__dst[16];
            }
          }
        }
        else
        {
          *(unsigned char *)a4 = 0;
          *(unsigned char *)(a4 + 23) = 0;
        }
      }
LABEL_16:
      if ((__dst[23] & 0x80000000) == 0) {
        return;
      }
      int v12 = *(char **)__dst;
    }
LABEL_18:
    operator delete(v12);
    return;
  }
  if (__dst[23] < 3u) {
    goto LABEL_24;
  }
}

void sub_1A60AF68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::string::__assign_no_alias<true>(void *__dst, void *__src, size_t __len)
{
  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v7 = 44;
    if (__len > 0x2C) {
      size_t v7 = __len;
    }
    size_t v8 = (v7 | 7) + 1;
    uint64_t v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *std::string __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      uint64_t v6 = __dst;
    }
  }
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void **std::string::__assign_no_alias<false>(void **a1, void *__src, size_t __len)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) > __len)
  {
    size_t v8 = *a1;
    a1[1] = (void *)__len;
    if (__len) {
      memmove(v8, __src, __len);
    }
    goto LABEL_12;
  }
  size_t v9 = 0x7FFFFFFFFFFFFFF7;
  if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v10 = v7 - 1;
  uint64_t v11 = a1;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v10 > 0x3FFFFFFFFFFFFFF2) {
      goto LABEL_7;
    }
LABEL_14:
    unint64_t v13 = 2 * v10;
    if (__len > 2 * v10) {
      unint64_t v13 = __len;
    }
    uint64_t v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v14 = v13 | 7;
    }
    if (v13 >= 0x17) {
      size_t v9 = v14 + 1;
    }
    else {
      size_t v9 = 23;
    }
    size_t v8 = operator new(v9);
    if (!__len) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v11 = *a1;
  if (v10 <= 0x3FFFFFFFFFFFFFF2) {
    goto LABEL_14;
  }
LABEL_7:
  size_t v8 = operator new(0x7FFFFFFFFFFFFFF7uLL);
  if (__len) {
LABEL_8:
  }
    memcpy(v8, __src, __len);
LABEL_9:
  if (v10 != 22) {
    operator delete(v11);
  }
  a1[1] = (void *)__len;
  a1[2] = (void *)(v9 | 0x8000000000000000);
  *a1 = v8;
LABEL_12:
  *((unsigned char *)v8 + __len) = 0;
  return a1;
}

void std::regex_traits<char>::__transform_primary<char *>(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, void *a4@<X8>)
{
  size_t v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    size_t v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v5);
    size_t v9 = (void **)((char *)v9 + v5);
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  size_t v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v5;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)size_t v9 = 0;
  memset(a4, 170, 24);
  int v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0) {
    unint64_t v13 = __dst;
  }
  else {
    unint64_t v13 = (void **)__dst[0];
  }
  if (SHIBYTE(__dst[2]) < 0) {
    int v12 = (char *)__dst[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v13, &v12[(void)v13]);
  uint64_t v14 = *((unsigned __int8 *)a4 + 23);
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = a4[1];
  }
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0) {
      uint64_t v16 = a4;
    }
    else {
      uint64_t v16 = (unsigned char *)*a4;
    }
    v16[11] = v16[3];
    if (SHIBYTE(__dst[2]) < 0) {
      goto LABEL_26;
    }
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(unsigned char *)a4 = 0;
    *((unsigned char *)a4 + 23) = 0;
    goto LABEL_25;
  }
  *(unsigned char *)*a4 = 0;
  a4[1] = 0;
  if (SHIBYTE(__dst[2]) < 0) {
LABEL_26:
  }
    operator delete(__dst[0]);
}

void sub_1A60AFA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A6274E10](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A60AFAEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  unint64_t v4 = a2;
  int64_t v5 = a2 - a3;
  if (a2 == a3) {
    return a2;
  }
  int v6 = *a2;
  uint64_t v7 = a2;
  if (v6 == 93) {
    return v7;
  }
  size_t v8 = (char *)a4;
  int v11 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v42 = 0;
  if (a2 + 1 == a3 || v6 != 91)
  {
LABEL_36:
    int v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_39;
  }
  int v12 = a2[1];
  if (v12 != 46)
  {
    if (v12 == 58)
    {
      uint64_t v14 = (uint64_t)(a2 + 2);
      if (a3 - (v4 + 2) < 2) {
        goto LABEL_91;
      }
      uint64_t v15 = 0;
      int64_t v16 = v5 + 4;
      uint64_t v17 = (unsigned __int8 *)v4;
      uint64_t v18 = v16;
      if (v4[2] == 58) {
        goto LABEL_15;
      }
      do
      {
        do
        {
          if (!v18) {
            goto LABEL_91;
          }
          uint64_t v17 = (unsigned __int8 *)&v4[++v15];
          uint64_t v18 = v16 + v15;
        }
        while (v4[v15 + 2] != 58);
LABEL_15:
        ;
      }
      while (v17[3] != 93);
      std::string v19 = &v4[v15 + 2];
      if (v19 == a3) {
LABEL_91:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      int v20 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, v14, v19, *(_DWORD *)(a1 + 24) & 1);
      if (!v20) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
      }
      char v13 = 0;
      *((_DWORD *)v8 + 40) |= v20;
      size_t v8 = &v4[v15 + 4];
      uint64_t v7 = v4;
      if (SHIBYTE(v42) < 0) {
        goto LABEL_70;
      }
      goto LABEL_71;
    }
    if (v12 == 61)
    {
      size_t v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
      char v13 = 0;
      uint64_t v7 = v4;
      if ((SHIBYTE(v42) & 0x80000000) == 0) {
        goto LABEL_71;
      }
      goto LABEL_70;
    }
    int v11 = 0;
    goto LABEL_36;
  }
  size_t v21 = a2 + 2;
  if (a3 - (v4 + 2) < 2) {
    goto LABEL_92;
  }
  unint64_t v22 = (unsigned __int8 *)(v4 + 2);
  long long v23 = (unsigned __int8 *)(v4 + 3);
  if (*v21 == 46) {
    goto LABEL_24;
  }
  do
  {
    do
    {
      if (a3 - 4 == v4) {
        goto LABEL_92;
      }
      ++v4;
      unint64_t v22 = v23;
      int v24 = *v23++;
    }
    while (v24 != 46);
LABEL_24:
    ;
  }
  while (*v23 != 93);
  if (v22 == (unsigned __int8 *)a3) {
LABEL_92:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)v21, v4 + 2, (uint64_t)&v43);
  if (SHIBYTE(v42) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v42 = v44;
  *(_OWORD *)std::vector<std::csub_match> __p = v43;
  unint64_t v25 = (char *)HIBYTE(v44);
  int v11 = SHIBYTE(v44);
  uint64_t v26 = *((void *)&v43 + 1);
  if (v44 < 0) {
    unint64_t v25 = (char *)__p[1];
  }
  if ((unint64_t)(v25 - 1) >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  unint64_t v4 = (char *)(v22 + 2);
  int v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v44 >= 0) {
    uint64_t v26 = HIBYTE(v44);
  }
  if (v26)
  {
    if (v4 == a3) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
LABEL_39:
  if ((v27 | 0x40) != 0x40)
  {
    LOBYTE(v28) = *v4;
LABEL_44:
    if (v11 < 0)
    {
      uint64_t v31 = __p[0];
      __p[1] = (void *)1;
      *(unsigned char *)__p[0] = v28;
      v31[1] = 0;
      if (++v4 == a3) {
        goto LABEL_52;
      }
    }
    else
    {
      HIBYTE(v42) = 1;
      LOWORD(__p[0]) = v28;
      if (++v4 == a3) {
        goto LABEL_52;
      }
    }
    goto LABEL_51;
  }
  int v28 = *v4;
  if (v28 != 92) {
    goto LABEL_44;
  }
  unint64_t v29 = v4 + 1;
  if (v27) {
    int v30 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v29, a3, (uint64_t *)__p);
  }
  else {
    int v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v29, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v8);
  }
  unint64_t v4 = v30;
  if (v30 == a3)
  {
LABEL_52:
    if (SHIBYTE(v42) < 0)
    {
      if (!__p[1]) {
        goto LABEL_69;
      }
      if (__p[1] != (void *)1)
      {
        long long v33 = (void **)__p[0];
LABEL_68:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v8, *(char *)v33, *((char *)v33 + 1));
LABEL_69:
        char v13 = 1;
        uint64_t v7 = v4;
        if ((SHIBYTE(v42) & 0x80000000) == 0) {
          goto LABEL_71;
        }
        goto LABEL_70;
      }
      long long v33 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v42)) {
        goto LABEL_69;
      }
      long long v33 = __p;
      if (HIBYTE(v42) != 1) {
        goto LABEL_68;
      }
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, *(char *)v33);
    goto LABEL_69;
  }
LABEL_51:
  int v32 = *v4;
  if (v32 == 93) {
    goto LABEL_52;
  }
  long long v34 = v4 + 1;
  if (v4 + 1 == a3 || v32 != 45 || *v34 == 93) {
    goto LABEL_52;
  }
  long long v43 = 0uLL;
  int64_t v44 = 0;
  uint64_t v7 = v4 + 2;
  if (v4 + 2 == a3 || *v34 != 91 || *v7 != 46)
  {
    if ((v27 | 0x40) == 0x40)
    {
      LODWORD(v34) = *v34;
      if (v34 == 92)
      {
        if (v27) {
          long long v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4 + 2, a3, (uint64_t *)&v43);
        }
        else {
          long long v35 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v4 + 2, (unsigned __int8 *)a3, (uint64_t)&v43, (uint64_t)v8);
        }
        goto LABEL_81;
      }
    }
    else
    {
      LOBYTE(v34) = *v34;
    }
    HIBYTE(v44) = 1;
    LOWORD(v43) = v34;
    goto LABEL_82;
  }
  long long v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v4 + 3, a3, (uint64_t)&v43);
LABEL_81:
  uint64_t v7 = v35;
LABEL_82:
  *(_OWORD *)uint64_t v39 = *(_OWORD *)__p;
  uint64_t v40 = v42;
  __p[1] = 0;
  uint64_t v42 = 0;
  __p[0] = 0;
  *(_OWORD *)uint64_t v37 = v43;
  uint64_t v38 = v44;
  long long v43 = 0uLL;
  int64_t v44 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v8, (char *)v39, (uint64_t)v37);
  if (SHIBYTE(v38) < 0)
  {
    operator delete(v37[0]);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
    {
LABEL_84:
      if ((SHIBYTE(v44) & 0x80000000) == 0) {
        goto LABEL_85;
      }
LABEL_89:
      operator delete((void *)v43);
      char v13 = 1;
      if (SHIBYTE(v42) < 0) {
        goto LABEL_70;
      }
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    goto LABEL_84;
  }
  operator delete(v39[0]);
  if (SHIBYTE(v44) < 0) {
    goto LABEL_89;
  }
LABEL_85:
  char v13 = 1;
  if (SHIBYTE(v42) < 0) {
LABEL_70:
  }
    operator delete(__p[0]);
LABEL_71:
  if (v13) {
    return v7;
  }
  return v8;
}

void sub_1A60B0024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_39;
  }
  int v6 = a3 - 2;
  uint64_t v7 = a2;
  size_t v8 = a2;
  size_t v9 = a2 + 1;
  if (*a2 != 61) {
    goto LABEL_5;
  }
LABEL_4:
  if (*v9 != 93)
  {
LABEL_5:
    while (a2 != v6)
    {
      ++v7;
      --v6;
      size_t v8 = v9;
      int v10 = *v9++;
      if (v10 == 61) {
        goto LABEL_4;
      }
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v8 == a3) {
    goto LABEL_39;
  }
  memset(v20, 170, sizeof(v20));
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v7, (uint64_t)v20);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
    int v11 = (char *)HIBYTE(v20[2]);
    if (HIBYTE(v20[2]))
    {
      memset(__p, 170, sizeof(__p));
      int v12 = v20;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  int v11 = (char *)v20[1];
  if (!v20[1]) {
    goto LABEL_40;
  }
  memset(__p, 170, sizeof(__p));
  int v12 = (void **)v20[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v12, &v11[(void)v12], (unsigned char **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      unint64_t v13 = *(void *)(a4 + 144);
      if (v13 >= *(void *)(a4 + 152))
      {
        *(void *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v14 = *(_OWORD *)__p;
          *(void **)(v13 + 16) = __p[2];
          *(_OWORD *)unint64_t v13 = v14;
        }
        *(void *)(a4 + 144) = v13 + 24;
        *(void *)(a4 + 144) = v13 + 24;
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  uint64_t v15 = (void *)HIBYTE(v20[2]);
  if (SHIBYTE(v20[2]) < 0) {
    uint64_t v15 = v20[1];
  }
  if (v15 == (void *)2)
  {
    uint64_t v17 = v20;
    if (SHIBYTE(v20[2]) < 0) {
      uint64_t v17 = (void **)v20[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v17, *((char *)v17 + 1));
  }
  else
  {
    if (v15 != (void *)1) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    }
    int64_t v16 = v20;
    if (SHIBYTE(v20[2]) < 0) {
      int64_t v16 = (void **)v20[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v16);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v20[2]) < 0) {
      goto LABEL_38;
    }
    return v7 + 2;
  }
LABEL_33:
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0) {
    return v7 + 2;
  }
LABEL_38:
  operator delete(v20[0]);
  return v7 + 2;
}

void sub_1A60B032C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  int64_t v5 = a3 - 2;
  int v6 = a2;
  uint64_t v7 = a2;
  size_t v8 = a2 + 1;
  if (*a2 != 46) {
    goto LABEL_5;
  }
LABEL_4:
  if (*v8 != 93)
  {
LABEL_5:
    while (a2 != v5)
    {
      ++v6;
      --v5;
      uint64_t v7 = v8;
      int v9 = *v8++;
      if (v9 == 46) {
        goto LABEL_4;
      }
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v7 == a3) {
    goto LABEL_15;
  }
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v13;
  unint64_t v10 = v14;
  *(void *)(a4 + 16) = v14;
  unint64_t v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0) {
    unint64_t v11 = *(void *)(a4 + 8);
  }
  if (v11 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      uint64_t result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 1) = 0;
        uint64_t result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_70:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  std::basic_regex<char>::value_type v5 = *a2;
  switch(*a2)
  {
    case '""':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v5;
        *((unsigned char *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30) {
        goto LABEL_70;
      }
      std::basic_regex<char>::value_type v7 = *a2 - 48;
      size_t v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        size_t v8 = a3;
LABEL_42:
        if (a4) {
          goto LABEL_43;
        }
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30) {
        goto LABEL_42;
      }
      std::basic_regex<char>::value_type v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        size_t v8 = a3;
        if (a4) {
          goto LABEL_43;
        }
        goto LABEL_69;
      }
      std::basic_regex<char>::value_type v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::basic_regex<char>::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        size_t v8 = a2 + 3;
      }
      else {
        size_t v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::basic_regex<char>::value_type v7 = v11;
      }
      if (!a4) {
        goto LABEL_69;
      }
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v7;
      *((unsigned char *)a4 + 1) = 0;
      return v8;
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (uint64_t)a2;
  if (!*(unsigned char *)(a1 + 170))
  {
    uint64_t v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((void *)a2 + 1) != 1) {
        goto LABEL_74;
      }
    }
    else if (v16 != 1)
    {
LABEL_74:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(void *)(a3 + 8) != 1) {
        goto LABEL_74;
      }
    }
    else if (*(unsigned char *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(unsigned char *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)std::vector<std::csub_match> __p = *(_OWORD *)v4;
      uint64_t v49 = *(void *)(v4 + 16);
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      *(void *)uint64_t v4 = 0;
      *(_OWORD *)unint64_t v50 = *(_OWORD *)v3;
      uint64_t v51 = *(void *)(v3 + 16);
      *(void *)(v3 + 8) = 0;
      *(void *)(v3 + 16) = 0;
      *(void *)uint64_t v3 = 0;
      unint64_t v39 = *(void *)(a1 + 96);
      if (v39 < *(void *)(a1 + 104))
      {
        long long v40 = *(_OWORD *)__p;
        *(void *)(v39 + 16) = v49;
        *(_OWORD *)unint64_t v39 = v40;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        uint64_t v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(void *)(v39 + 40) = v41;
        v50[1] = 0;
        uint64_t v51 = 0;
        v50[0] = 0;
        *(void *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0) {
          goto LABEL_69;
        }
        return;
      }
      uint64_t v42 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
      int v43 = SHIBYTE(v51);
      *(void *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0) {
          goto LABEL_69;
        }
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0) {
        return;
      }
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    long long v34 = a2;
    if ((v16 & 0x80) != 0) {
      long long v34 = *(char **)a2;
    }
    char v35 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = v35;
      unint64_t v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0) {
        goto LABEL_64;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v4 = v35;
      unint64_t v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        char v37 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v36);
        uint64_t v38 = (unsigned char *)v3;
        if (*(char *)(v3 + 23) < 0) {
          uint64_t v38 = *(unsigned char **)v3;
        }
        *uint64_t v38 = v37;
        goto LABEL_67;
      }
    }
    unint64_t v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(unsigned char *)(a1 + 169))
  {
    for (unint64_t i = 0; ; ++i)
    {
      unint64_t v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(void *)(v4 + 8))
        {
LABEL_13:
          for (unint64_t j = 0; ; ++j)
          {
            unint64_t v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(void *)(v3 + 8)) {
                goto LABEL_44;
              }
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            uint64_t v13 = v3;
            if ((v12 & 0x80) != 0) {
              uint64_t v13 = *(void *)v3;
            }
            char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(char *)(v13 + j));
            uint64_t v15 = v3;
            if (*(char *)(v3 + 23) < 0) {
              uint64_t v15 = *(void *)v3;
            }
            *(unsigned char *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      uint64_t v8 = v4;
      if ((v7 & 0x80) != 0) {
        uint64_t v8 = *(void *)v4;
      }
      char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(char *)(v8 + i));
      uint64_t v10 = v4;
      if (*(char *)(v4 + 23) < 0) {
        uint64_t v10 = *(void *)v4;
      }
      *(unsigned char *)(v10 + i) = v9;
    }
  }
  for (unint64_t k = 0; ; ++k)
  {
    unint64_t v19 = a2[23];
    if (a2[23] < 0) {
      break;
    }
    if (k >= v19) {
      goto LABEL_35;
    }
LABEL_33:
    uint64_t v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      uint64_t v18 = *(char **)a2;
      uint64_t v20 = *(char **)a2;
    }
    else
    {
      uint64_t v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((void *)a2 + 1)) {
    goto LABEL_33;
  }
LABEL_35:
  for (unint64_t m = 0; ; ++m)
  {
    unint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0) {
      break;
    }
    if (m >= v23) {
      goto LABEL_44;
    }
LABEL_42:
    uint64_t v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      uint64_t v22 = *(void *)a3;
      uint64_t v24 = *(void *)a3;
    }
    else
    {
      uint64_t v24 = a3;
    }
    *(unsigned char *)(v24 + m) = *(unsigned char *)(v22 + m);
  }
  if (m < *(void *)(a3 + 8)) {
    goto LABEL_42;
  }
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    uint64_t v26 = v4;
    uint64_t v4 = *(void *)v4;
    uint64_t v25 = *(void *)(v26 + 8);
  }
  else
  {
    uint64_t v25 = *(unsigned __int8 *)(v4 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    uint64_t v28 = v3;
    uint64_t v3 = *(void *)v3;
    uint64_t v27 = *(void *)(v28 + 8);
  }
  else
  {
    uint64_t v27 = *(unsigned __int8 *)(v3 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)std::vector<std::csub_match> __p = *(_OWORD *)v46;
  uint64_t v49 = v47;
  *(_OWORD *)unint64_t v50 = *(_OWORD *)v44;
  uint64_t v51 = v45;
  unint64_t v29 = *(void *)(a1 + 96);
  if (v29 >= *(void *)(a1 + 104))
  {
    int v32 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
    int v33 = SHIBYTE(v51);
    *(void *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  long long v30 = *(_OWORD *)__p;
  *(void *)(v29 + 16) = v49;
  *(_OWORD *)unint64_t v29 = v30;
  __p[1] = 0;
  uint64_t v49 = 0;
  __p[0] = 0;
  uint64_t v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(void *)(v29 + 40) = v31;
  v50[1] = 0;
  uint64_t v51 = 0;
  v50[0] = 0;
  *(void *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0) {
    goto LABEL_69;
  }
}

void sub_1A60B11C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A60B11DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
    uint64_t v8 = *(char **)(a1 + 120);
    unint64_t v7 = *(void *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      char v9 = (char **)(a1 + 112);
      uint64_t v10 = *(char **)(a1 + 112);
      uint64_t v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        uint64_t v12 = v11 >> 1;
        unint64_t v13 = v7 - (void)v10;
        if (v13 <= (v11 >> 1) + 1) {
          unint64_t v14 = v12 + 1;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v13 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v15 = v14;
        }
        if (!v15)
        {
          uint64_t v16 = 0;
          uint64_t v17 = (_WORD *)(2 * v12);
          uint64_t v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          uint64_t v19 = 2 * v12 + 2;
          uint64_t v20 = (char *)(v8 - v10);
          if (v8 == v10) {
            goto LABEL_64;
          }
LABEL_30:
          unint64_t v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E) {
            goto LABEL_71;
          }
          if (v8 - v16 - (v11 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
            goto LABEL_71;
          }
          uint64_t v31 = (v30 >> 1) + 1;
          unint64_t v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          int v33 = &v8[-v32];
          uint64_t v17 = (_WORD *)((char *)v17 - v32);
          long long v34 = &v16[2 * v12 - 16];
          char v35 = v8 - 16;
          unint64_t v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            _OWORD *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          uint64_t v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              __int16 v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--uint64_t v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          uint64_t v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          uint64_t v16 = operator new(2 * v15);
          uint64_t v17 = &v16[2 * v12];
          uint64_t v18 = &v16[2 * v15];
          *uint64_t v17 = v6;
          uint64_t v19 = (uint64_t)(v17 + 1);
          uint64_t v20 = (char *)(v8 - v10);
          if (v8 == v10) {
            goto LABEL_64;
          }
          goto LABEL_30;
        }
LABEL_68:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
LABEL_67:
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
LABEL_28:
    *(_WORD *)uint64_t v8 = v6;
    uint64_t v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  char v9 = (char **)(a1 + 112);
  __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  uint64_t v8 = *(char **)(a1 + 120);
  unint64_t v21 = *(void *)(a1 + 128);
  if (*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21) {
      goto LABEL_28;
    }
    uint64_t v22 = *v9;
    uint64_t v23 = v8 - *v9;
    if (v23 <= -3) {
      goto LABEL_67;
    }
    uint64_t v24 = v23 >> 1;
    unint64_t v25 = v21 - (void)v22;
    if (v25 <= (v23 >> 1) + 1) {
      unint64_t v26 = v24 + 1;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v25 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v27 = v26;
    }
    if (v27)
    {
      if (v27 < 0) {
        goto LABEL_68;
      }
      uint64_t v28 = operator new(2 * v27);
      uint64_t v17 = &v28[2 * v24];
      uint64_t v18 = &v28[2 * v27];
      *uint64_t v17 = v6;
      uint64_t v19 = (uint64_t)(v17 + 1);
      unint64_t v29 = (char *)(v8 - v22);
      if (v8 == v22) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v17 = (_WORD *)(2 * v24);
      uint64_t v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      uint64_t v19 = 2 * v24 + 2;
      unint64_t v29 = (char *)(v8 - v22);
      if (v8 == v22) {
        goto LABEL_64;
      }
    }
    unint64_t v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E) {
      goto LABEL_72;
    }
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_72;
    }
    uint64_t v48 = (v47 >> 1) + 1;
    unint64_t v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    unint64_t v50 = &v8[-v49];
    uint64_t v17 = (_WORD *)((char *)v17 - v49);
    uint64_t v51 = &v28[2 * v24 - 16];
    unint64_t v52 = v8 - 16;
    unint64_t v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *uint64_t v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    uint64_t v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        __int16 v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--uint64_t v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21) {
    goto LABEL_28;
  }
  unint64_t v39 = *v9;
  uint64_t v40 = v8 - *v9;
  if (v40 <= -3) {
    goto LABEL_67;
  }
  uint64_t v41 = v40 >> 1;
  unint64_t v42 = v21 - (void)v39;
  if (v42 <= (v40 >> 1) + 1) {
    unint64_t v43 = v41 + 1;
  }
  else {
    unint64_t v43 = v42;
  }
  if (v42 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v44 = v43;
  }
  if (!v44)
  {
    uint64_t v45 = 0;
    uint64_t v17 = (_WORD *)(2 * v41);
    uint64_t v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    uint64_t v19 = 2 * v41 + 2;
    int64_t v46 = (char *)(v8 - v39);
    if (v8 == v39) {
      goto LABEL_64;
    }
    goto LABEL_57;
  }
  if (v44 < 0) {
    goto LABEL_68;
  }
  uint64_t v45 = operator new(2 * v44);
  uint64_t v17 = &v45[2 * v41];
  uint64_t v18 = &v45[2 * v44];
  *uint64_t v17 = v6;
  uint64_t v19 = (uint64_t)(v17 + 1);
  int64_t v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    unint64_t v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E) {
      goto LABEL_73;
    }
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_73;
    }
    uint64_t v57 = (v56 >> 1) + 1;
    unint64_t v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    char v59 = &v8[-v58];
    uint64_t v17 = (_WORD *)((char *)v17 - v58);
    v60 = &v45[2 * v41 - 16];
    long long v61 = v8 - 16;
    unint64_t v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      _OWORD *v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    uint64_t v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        __int16 v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--uint64_t v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(void *)(a1 + 112) = v17;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v18;
  if (v8) {
    operator delete(v8);
  }
LABEL_66:
  *(void *)(a1 + 120) = v19;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A6274E10](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A60B1658(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = (unint64_t)&a3[-a2];
  memset(__s, 170, sizeof(__s));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    __s[23] = (_BYTE)a3 - a2;
    char v9 = __s;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v10 = v9;
    goto LABEL_16;
  }
  uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v16 = v5 | 7;
  }
  uint64_t v17 = v16 + 1;
  char v9 = (char *)operator new(v16 + 1);
  *(void *)&__s[8] = v5;
  *(void *)&char __s[16] = v17 | 0x8000000000000000;
  *(void *)__s = v9;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v5 < 0x20 || (unint64_t)&v9[-a2] < 0x20)
  {
    uint64_t v10 = v9;
    uint64_t v11 = (char *)a2;
    do
    {
LABEL_15:
      char v18 = *v11++;
      *v10++ = v18;
    }
    while (v11 != a3);
    goto LABEL_16;
  }
  uint64_t v10 = &v9[v5 & 0xFFFFFFFFFFFFFFE0];
  uint64_t v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
  uint64_t v12 = (long long *)(a2 + 16);
  unint64_t v13 = v9 + 16;
  unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v15 = *v12;
    *(v13 - 1) = *(v12 - 1);
    *unint64_t v13 = v15;
    v12 += 2;
    v13 += 2;
    v14 -= 32;
  }
  while (v14);
  if (v5 != (v5 & 0xFFFFFFFFFFFFFFE0)) {
    goto LABEL_15;
  }
LABEL_16:
  *uint64_t v10 = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (__s[23] < 0)
  {
    uint64_t v19 = *(char **)__s;
    if (!*(void *)&__s[8]) {
      goto LABEL_29;
    }
  }
  else
  {
    if (!__s[23]) {
      return;
    }
    uint64_t v19 = __s;
  }
  std::__get_collation_name(&v26, v19);
  *(_OWORD *)a4 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  unint64_t v20 = v26.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v26.__r_.__value_.__l + 2);
  unint64_t v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0) {
    unint64_t v21 = *(void *)(a4 + 8);
  }
  if (v21)
  {
LABEL_23:
    if ((__s[23] & 0x80000000) == 0) {
      return;
    }
    uint64_t v19 = *(char **)__s;
LABEL_29:
    operator delete(v19);
    return;
  }
  if (__s[23] < 0)
  {
    uint64_t v19 = *(char **)__s;
    if (*(void *)&__s[8] >= 3uLL) {
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  if (__s[23] < 3u)
  {
LABEL_31:
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v26);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(std::string *)a4 = v26;
    if (*(char *)(a4 + 23) < 0)
    {
      uint64_t v23 = *(void *)(a4 + 8);
      if (v23 == 1 || v23 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] >= 0) {
            uint64_t v24 = __s;
          }
          else {
            uint64_t v24 = *(char **)__s;
          }
          if (__s[23] >= 0) {
            size_t v25 = __s[23];
          }
          else {
            size_t v25 = *(void *)&__s[8];
          }
          std::string::__assign_no_alias<false>((void **)a4, v24, v25);
        }
      }
      else
      {
        **(unsigned char **)a4 = 0;
        *(void *)(a4 + 8) = 0;
      }
    }
    else
    {
      int v22 = *(unsigned __int8 *)(a4 + 23);
      if (v22 == 1 || v22 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] < 0)
          {
            std::string::__assign_no_alias<true>((void *)a4, *(void **)__s, *(size_t *)&__s[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__s;
            *(void *)(a4 + 16) = *(void *)&__s[16];
          }
        }
      }
      else
      {
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 23) = 0;
      }
    }
    goto LABEL_23;
  }
}

void sub_1A60B1944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, unsigned char **a4@<X8>)
{
  unint64_t v5 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 > 0x16)
  {
    uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v16 = v5 | 7;
    }
    uint64_t v17 = v16 + 1;
    char v9 = operator new(v16 + 1);
    __p[1] = (void *)v5;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  char v9 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v5 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    uint64_t v10 = v9;
    uint64_t v11 = (char *)a2;
  }
  else
  {
    uint64_t v10 = (char *)v9 + (v5 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v12 = (long long *)(a2 + 16);
    unint64_t v13 = v9 + 1;
    unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *unint64_t v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *uint64_t v10 = 0;
  memset(a4, 170, 24);
  uint64_t v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v20 = __p;
  }
  else {
    unint64_t v20 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v19 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v20, &v19[(void)v20]);
  unint64_t v21 = (unsigned char *)*((unsigned __int8 *)a4 + 23);
  int v22 = (char)v21;
  if ((char)v21 < 0) {
    unint64_t v21 = a4[1];
  }
  if (v21 == (unsigned char *)1) {
    goto LABEL_32;
  }
  if (v21 != (unsigned char *)12)
  {
    if (v22 < 0)
    {
      **a4 = 0;
      a4[1] = 0;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_35:
      operator delete(__p[0]);
      return;
    }
    *(unsigned char *)a4 = 0;
    *((unsigned char *)a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_35;
  }
  if (v22 >= 0) {
    uint64_t v23 = a4;
  }
  else {
    uint64_t v23 = *a4;
  }
  v23[11] = v23[3];
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_35;
  }
}

void sub_1A60B1B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    char v9 = (char *)operator new(24 * v8);
  }
  else
  {
    char v9 = 0;
  }
  uint64_t v10 = (std::string *)&v9[24 * v5];
  uint64_t v16 = v10;
  uint64_t v17 = v10;
  char v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    uint64_t v10 = v16;
    uint64_t v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      unint64_t v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    uint64_t v11 = v10 + 1;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((void *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  unint64_t v13 = *a1;
  uint64_t v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    unint64_t v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    uint64_t v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_1A60B1D74(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A6274E10](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A60B1E34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, BOOL a4)
{
  unint64_t v4 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 > 0x16)
  {
    uint64_t v16 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v16 = v4 | 7;
    }
    uint64_t v17 = v16 + 1;
    char v9 = operator new(v16 + 1);
    __p[1] = (void *)v4;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  char v9 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v4 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    uint64_t v10 = v9;
    uint64_t v11 = (char *)a2;
  }
  else
  {
    uint64_t v10 = (char *)v9 + (v4 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v11 = (char *)(a2 + (v4 & 0xFFFFFFFFFFFFFFE0));
    long long v12 = (long long *)(a2 + 16);
    unint64_t v13 = v9 + 1;
    unint64_t v14 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *unint64_t v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *uint64_t v10 = 0;
  uint64_t v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v20 = __p;
  }
  else {
    unint64_t v20 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v19 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v20, &v19[(void)v20]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v21 = __p;
  }
  else {
    unint64_t v21 = (void **)__p[0];
  }
  uint64_t classname = std::__get_classname((const char *)v21, a4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return classname;
}

void sub_1A60B1FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    unint64_t v6 = (void *)(a1 + 64);
    unint64_t v5 = *(unsigned char **)(a1 + 72);
    unint64_t v16 = *(void *)(a1 + 80);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = (unsigned char *)*v6;
      unint64_t v18 = (unint64_t)&v5[-*v6];
      unint64_t v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        unint64_t v20 = v16 - (void)v17;
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21)
        {
          long long v12 = operator new(v21);
          unint64_t v13 = &v12[v18];
          unint64_t v14 = &v12[v21];
          v12[v18] = v2;
          uint64_t v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        else
        {
          long long v12 = 0;
          unint64_t v13 = &v5[-*v6];
          unint64_t v14 = 0;
          *(unsigned char *)unint64_t v18 = a2;
          uint64_t v15 = v18 + 1;
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            unint64_t v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            __int16 v38 = (long long *)(v5 - 16);
            unint64_t v39 = &v12[v5 - 16 - v17];
            unint64_t v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *unint64_t v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28) {
              goto LABEL_86;
            }
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v42 = &v5[-v28 - 8];
          unint64_t v43 = &v12[v42 - v17];
          unint64_t v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_86;
          }
        }
LABEL_80:
        unint64_t v56 = v13 - 1;
        do
        {
          char v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16) {
      goto LABEL_24;
    }
    uint64_t v23 = (unsigned char *)*v6;
    unint64_t v24 = (unint64_t)&v5[-*v6];
    unint64_t v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_89;
    }
    unint64_t v26 = v16 - (void)v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27)
    {
      long long v12 = operator new(v27);
      unint64_t v13 = &v12[v24];
      unint64_t v14 = &v12[v27];
      v12[v24] = v2;
      uint64_t v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(void *)(a1 + 64) = v13;
        *(void *)(a1 + 72) = v15;
        *(void *)(a1 + 80) = v14;
        if (!v5) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      long long v12 = 0;
      unint64_t v13 = &v5[-*v6];
      unint64_t v14 = 0;
      *(unsigned char *)unint64_t v24 = a2;
      uint64_t v15 = v24 + 1;
      if (v5 == v23) {
        goto LABEL_49;
      }
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        int64_t v46 = (long long *)(v5 - 16);
        unint64_t v47 = &v12[v5 - 16 - v23];
        unint64_t v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29) {
          goto LABEL_86;
        }
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v50 = &v5[-v29 - 8];
      uint64_t v51 = &v12[v50 - v23];
      unint64_t v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v53 = *(void *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_86;
      }
    }
LABEL_84:
    unint64_t v58 = v13 - 1;
    do
    {
      char v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  unint64_t v5 = *(unsigned char **)(a1 + 72);
  unint64_t v4 = *(void *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *unint64_t v5 = v2;
    uint64_t v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  unint64_t v6 = (void *)(a1 + 64);
  unint64_t v7 = *(unsigned char **)(a1 + 64);
  unint64_t v8 = v5 - v7;
  uint64_t v9 = v5 - v7 + 1;
  if (v9 < 0) {
    goto LABEL_89;
  }
  unint64_t v10 = v4 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    long long v12 = operator new(v11);
    unint64_t v13 = &v12[v8];
    unint64_t v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  else
  {
    long long v12 = 0;
    unint64_t v13 = (char *)(v5 - v7);
    unint64_t v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v15 = v8 + 1;
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
    goto LABEL_76;
  }
  if (v8 < 0x20)
  {
    unint64_t v22 = 0;
    goto LABEL_55;
  }
  unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  unint64_t v30 = (long long *)(v5 - 16);
  uint64_t v31 = &v12[v5 - 16 - v7];
  unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *uint64_t v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    long long v34 = &v5[-v22 - 8];
    char v35 = &v12[v34 - v7];
    unint64_t v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v37 = *(void *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_86;
    }
LABEL_76:
    long long v54 = v13 - 1;
    do
    {
      char v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  unint64_t v5 = (unsigned char *)*v6;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v15;
  *(void *)(a1 + 80) = v14;
  if (v5) {
LABEL_87:
  }
    operator delete(v5);
LABEL_88:
  *(void *)(a1 + 72) = v15;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3 > 0x16)
  {
    uint64_t v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v14 = v3 | 7;
    }
    uint64_t v15 = v14 + 1;
    unint64_t v7 = operator new(v14 + 1);
    __p[1] = (void *)v3;
    __p[2] = (void *)(v15 | 0x8000000000000000);
    __p[0] = v7;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    unint64_t v8 = v7;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  unint64_t v7 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v3 < 0x20 || (unint64_t)v7 - a2 < 0x20)
  {
    unint64_t v8 = v7;
    uint64_t v9 = (char *)a2;
  }
  else
  {
    unint64_t v8 = (char *)v7 + (v3 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    unint64_t v10 = (long long *)(a2 + 16);
    size_t v11 = v7 + 1;
    unint64_t v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      _OWORD *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  *unint64_t v8 = 0;
  uint64_t v17 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v18 = __p;
  }
  else {
    unint64_t v18 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v17 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v18, &v17[(void)v18]);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1A60B2634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A6274E10](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A60B2694(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[48 * v3];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  uint64_t v9 = &v7[48 * v6];
  long long v10 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  size_t v11 = v8 + 48;
  unint64_t v12 = (void **)*a1;
  long long v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      long long v14 = *((_OWORD *)v13 - 3);
      *((void *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      long long v15 = *(_OWORD *)(v13 - 3);
      *((void *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    long long v13 = (void **)*a1;
    char v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13) {
        goto LABEL_22;
      }
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0) {
          goto LABEL_14;
        }
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  char v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  char v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A6274E10](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A60B2AC4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A6274E10](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A60B2B1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EFB08FF8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  unint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EFB08FF8;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  unint64_t v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  operator delete(__p);
}

uint64_t std::__loop<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(void *)(a3 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a3 + 80) = *(void *)(result + 8);
  int v3 = *(_DWORD *)(result + 44);
  *(void *)(*(void *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(void *)(a3 + 16);
  int v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    uint64_t v5 = (v4 - 1);
    uint64_t v6 = (v3 - 1);
    uint64_t v7 = *(void *)(a3 + 24);
    uint64_t v8 = *(void *)(a3 + 32);
    uint64_t v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      uint64_t v10 = v6;
LABEL_9:
      uint64_t v13 = v5 - v10;
      long long v14 = (unsigned char *)(v8 + 24 * v10 + 16);
      do
      {
        *((void *)v14 - 2) = v7;
        *((void *)v14 - 1) = v7;
        *long long v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    uint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    uint64_t v11 = v8 + 24 * v6 + 24;
    unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(void *)(v11 - 24) = v7;
      *(void *)(v11 - 16) = v7;
      *(void *)uint64_t v11 = v7;
      *(void *)(v11 + 8) = v7;
      *(unsigned char *)(v11 - 8) = 0;
      *(unsigned char *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL)) {
      goto LABEL_9;
    }
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EFB08FF8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EFB08FF8;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  operator delete(__p);
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EFB08FF8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A6274E10](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1A60B2FFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (char *)a2, a3);
  if ((char *)a2 != v6 || (char *)a2 == a3 || (char *)(a2 + 1) == a3 || *(unsigned char *)a2 != 92) {
    return v6;
  }
  int v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    uint64_t v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      uint64_t v10 = operator new(0x18uLL);
      int v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v13 = *(void *)(v12 + 8);
      *uint64_t v10 = &unk_1EFB08F08;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(void *)(v12 + 8) = v10;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3) {
        goto LABEL_23;
      }
      long long v14 = v9;
      long long v15 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v16 = *(_DWORD *)(a1 + 28);
      uint64_t v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, v14, a3);
      if (v14 == v17) {
        break;
      }
      uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v14 != v9);
    if ((char *)&v14->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v14->__traits_.__loc_.__locale_) != 92
      || BYTE1(v14->__traits_.__loc_.__locale_) != 41)
    {
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    uint64_t v6 = (char *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 41);
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      unint64_t v18 = operator new(0x18uLL);
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = *(void *)(v19 + 8);
      *unint64_t v18 = &unk_1EFB08F50;
      v18[1] = v20;
      *((_DWORD *)v18 + 4) = v11;
      *(void *)(v19 + 8) = v18;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return v6;
    }
    return v6;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8) {
    return v6;
  }
  if ((v8 - 48) > *(_DWORD *)(a1 + 28)) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  uint64_t v9 = (unsigned __int8 *)a3;
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return this;
  }
  uint64_t v10 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v10 == a3) {
    goto LABEL_45;
  }
  int v11 = LOBYTE(v10->__traits_.__loc_.__locale_);
  if ((v11 & 0xF8) != 0x30 && (v11 & 0xFE) != 0x38) {
    goto LABEL_45;
  }
  int v12 = v11 - 48;
  uint64_t v13 = (std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_15:
    uint64_t v13 = a3;
  }
  else
  {
    while (1)
    {
      int v14 = LOBYTE(v13->__traits_.__loc_.__locale_);
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38) {
        break;
      }
      if (v12 >= 214748364) {
        goto LABEL_45;
      }
      int v12 = v14 + 10 * v12 - 48;
      uint64_t v13 = (std::basic_regex<char> *)((char *)v13 + 1);
      if (v13 == a3) {
        goto LABEL_15;
      }
    }
  }
  if (v13 == v10) {
    goto LABEL_45;
  }
  if (v13 == a3) {
LABEL_46:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  long long v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 1);
  int v16 = LOBYTE(v13->__traits_.__loc_.__locale_);
  if (v16 != 44)
  {
    if (v15 != a3 && v16 == 92 && LOBYTE(v15->__traits_.__loc_.__locale_) == 125)
    {
      uint64_t v19 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v12, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_46;
  }
  if (v15 == a3) {
    goto LABEL_46;
  }
  int v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
  if ((v17 & 0xF8) == 0x30 || (v17 & 0xFE) == 0x38)
  {
    int v18 = v17 - 48;
    long long v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_37:
      long long v15 = a3;
      goto LABEL_40;
    }
    while (1)
    {
      int v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
      if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38) {
        break;
      }
      if (v18 >= 214748364) {
        goto LABEL_45;
      }
      int v18 = v17 + 10 * v18 - 48;
      long long v15 = (std::basic_regex<char> *)((char *)v15 + 1);
      if (v15 == a3) {
        goto LABEL_37;
      }
    }
  }
  else
  {
    int v18 = -1;
  }
  if (v15 == a3)
  {
    uint64_t v20 = (unsigned __int8 *)v15;
    long long v15 = a3;
    uint64_t v9 = v20;
  }
  else if ((std::basic_regex<char> *)((char *)&v15->__traits_.__loc_.__locale_ + 1) == a3 || v17 != 92)
  {
    uint64_t v9 = (unsigned __int8 *)v15;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 125);
  }
LABEL_40:
  if (v15 == (std::basic_regex<char> *)v9) {
    goto LABEL_46;
  }
  if (v18 != -1)
  {
    if (v18 >= v12)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v18, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v9;
    }
LABEL_45:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v9;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 1;
    int v5 = *a2;
    if (a2 + 1 != a3 || v5 != 36)
    {
      if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
        return a2 + 1;
      }
      if (v6 != a3 && v5 == 92)
      {
        int v9 = *v6;
        if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
          return a2 + 2;
        }
      }
      if (*a2 == 46)
      {
        uint64_t v10 = (std::__node<char> *)operator new(0x10uLL);
        std::__split_buffer<std::string>::pointer end = this->__end_;
        first = end->__first_;
        v10->__vftable = (std::__node<char>_vtbl *)&unk_1EFB09100;
        v10[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v10;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        return a2 + 1;
      }
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2)
  {
    int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char>::value_type *)a2, (std::basic_regex<char>::value_type *)a3);
    if (v8 == a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, (char *)a2, (char *)a3);
      }
      else
      {
        int v9 = operator new(0x10uLL);
        uint64_t v10 = *(void *)(a1 + 56);
        uint64_t v11 = *(void *)(v10 + 8);
        *int v9 = &unk_1EFB09100;
        v9[1] = v11;
        *(void *)(v10 + 8) = v9;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      }
    }
  }
  if (v8 != a2 || v8 == a3)
  {
LABEL_23:
    if (v8 != a2) {
      goto LABEL_24;
    }
    return a2;
  }
  int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  if (locale_low == 36)
  {
    uint64_t v13 = operator new(0x18uLL);
    BOOL v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v15 = *(void *)(a1 + 56);
    v13[1] = *(void *)(v15 + 8);
    int v16 = &unk_1EFB08BF0;
    goto LABEL_14;
  }
  if (locale_low == 40)
  {
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v18 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      int v17 = operator new(0x18uLL);
      int v18 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v18;
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = *(void *)(v19 + 8);
      *int v17 = &unk_1EFB08F08;
      v17[1] = v20;
      *((_DWORD *)v17 + 4) = v18;
      *(void *)(v19 + 8) = v17;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    ++*(_DWORD *)(a1 + 36);
    size_t v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
    if (v21 == a3 || (unint64_t v22 = v21, LOBYTE(v21->__traits_.__loc_.__locale_) != 41)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      uint64_t v23 = operator new(0x18uLL);
      uint64_t v24 = *(void *)(a1 + 56);
      uint64_t v25 = *(void *)(v24 + 8);
      *uint64_t v23 = &unk_1EFB08F50;
      v23[1] = v25;
      *((_DWORD *)v23 + 4) = v18;
      *(void *)(v24 + 8) = v23;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    --*(_DWORD *)(a1 + 36);
    int v8 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    goto LABEL_23;
  }
  if (locale_low != 94) {
    return a2;
  }
  uint64_t v13 = operator new(0x18uLL);
  BOOL v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
  uint64_t v15 = *(void *)(a1 + 56);
  v13[1] = *(void *)(v15 + 8);
  int v16 = &unk_1EFB08BA8;
LABEL_14:
  *uint64_t v13 = v16;
  *((unsigned char *)v13 + 16) = v14;
  *(void *)(v15 + 8) = v13;
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
LABEL_24:
  size_t v26 = (*(_DWORD *)(a1 + 28) + 1);

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), v26);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_) {
        return this;
      }
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  int v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92) {
    return v3;
  }
  std::basic_regex<char>::value_type v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      v3 += 2;
      return v3;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
      }
      else
      {
        BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        uint64_t v8 = 2;
        if (!v7) {
          uint64_t v8 = 0;
        }
        uint64_t result = &v3[v8];
      }
      break;
  }
  return result;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *this, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  std::vector<std::ssub_match>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      std::__split_buffer<std::string>::pointer end = (std::vector<std::ssub_match>::pointer)((char *)begin + 8 * ((a4[1] - *a4) >> 3));
      this->__end_ = end;
    }
  }
  else
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v11 - v14);
    std::vector<std::ssub_match>::pointer begin = this->__begin_;
    std::__split_buffer<std::string>::pointer end = this->__end_;
  }
  if (end != begin)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v18 = *a4;
    uint64_t v17 = a4[1];
    do
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
      uint64_t v20 = (void *)(v18 + v15 * 24);
      if (v19 <= v16) {
        size_t v21 = a4 + 3;
      }
      else {
        size_t v21 = v20;
      }
      begin[v15].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v21 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v16) {
        uint64_t v22 = (uint64_t)(a4 + 3);
      }
      else {
        uint64_t v22 = *a4 + v15 * 24;
      }
      this->__begin_[v15].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *(void *)(v22 + 8) - v10);
      uint64_t v18 = *a4;
      uint64_t v17 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v17 - *a4) >> 3) <= v16) {
        uint64_t v23 = (uint64_t)(a4 + 3);
      }
      else {
        uint64_t v23 = *a4 + v15 * 24;
      }
      char v24 = *(unsigned char *)(v23 + 16);
      std::vector<std::ssub_match>::pointer begin = this->__begin_;
      std::vector<std::ssub_match>::pointer v25 = this->__end_;
      this->__begin_[v15].matched = v24;
      ++v16;
      ++v15;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)begin) >> 3));
  }
  this[1].__begin_ = a3;
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  size_t v26 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  this[2].__begin_ = v26;
  this[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(this[2].__end_cap_.__value_) = *((unsigned char *)a4 + 64);
  this[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  this[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(this[3].__end_cap_.__value_) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    this[4].__end_ = v26;
  }
  LOBYTE(this[4].__begin_) = *((unsigned char *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v100 = 0u;
  long long v101 = 0u;
  long long v99 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    uint64_t v85 = (void **)*((void *)&v99 + 1);
    v86 = (void **)v100;
    *((void *)&v101 + 1) = 0;
    unint64_t v87 = v100 - *((void *)&v99 + 1);
    if ((void)v100 - *((void *)&v99 + 1) < 0x11uLL) {
      goto LABEL_81;
    }
    do
    {
LABEL_80:
      operator delete(*v85);
      v86 = (void **)v100;
      uint64_t v85 = (void **)(*((void *)&v99 + 1) + 8);
      *((void *)&v99 + 1) = v85;
      unint64_t v87 = v100 - (void)v85;
    }
    while ((void)v100 - (void)v85 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)v98 = 0;
  memset(&v98[8], 0, 85);
  std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v99);
  unint64_t v11 = *(void *)(*((void *)&v99 + 1) + 8 * (((void)v101 + *((void *)&v101 + 1)) / 0x2AuLL))
      + 96 * (((void)v101 + *((void *)&v101 + 1)) % 0x2AuLL);
  long long v12 = *(_OWORD *)&v98[16];
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v98;
  *(_OWORD *)(v11 + 16) = v12;
  *(void *)(v11 + 40) = 0;
  *(void *)(v11 + 48) = 0;
  *(void *)(v11 + 32) = 0;
  memset(&v98[32], 0, 24);
  *(void *)(v11 + 56) = 0;
  *(void *)(v11 + 64) = 0;
  *(void *)(v11 + 72) = 0;
  memset(&v98[56], 0, 24);
  uint64_t v13 = *(void *)&v98[80];
  *(void *)(v11 + 85) = *(void *)&v98[85];
  *(void *)(v11 + 80) = v13;
  uint64_t v15 = *((void *)&v101 + 1);
  uint64_t v14 = v101;
  uint64_t v16 = ++*((void *)&v101 + 1);
  uint64_t v17 = *((void *)&v99 + 1);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = v101 + v15;
  unint64_t v20 = 8 * (v19 / 0x2A);
  unint64_t v21 = 96 * (v19 % 0x2A);
  unint64_t v22 = *(void *)(*((void *)&v99 + 1) + v20) + v21;
  *(_DWORD *)unint64_t v22 = 0;
  *(void *)(v22 + 8) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 16) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 24) = a3;
  unint64_t v23 = *(void *)(v17 + v20) + v21;
  uint64_t v26 = *(void *)(v23 + 56);
  char v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
  uint64_t v25 = v26;
  unint64_t v27 = ((uint64_t)v24->__end_ - v26) >> 4;
  unint64_t v92 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27) {
      v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(v24, v18 - v27);
    uint64_t v16 = *((void *)&v101 + 1);
    uint64_t v14 = v101;
    uint64_t v17 = *((void *)&v99 + 1);
  }
  uint64_t v94 = 0;
  char v95 = 0;
  unsigned int v28 = 0;
  unint64_t v29 = v14 + v16 - 1;
  unint64_t v30 = 8 * (v29 / 0x2A);
  unint64_t v31 = 96 * (v29 % 0x2A);
  *(void *)(*(void *)(v17 + v30) + v31 + 80) = v6;
  uint64_t v93 = a3;
  uint64_t v32 = a3 - a2;
  unint64_t v33 = *(void *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(unsigned char *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    unint64_t v35 = v16 + v101 - 1;
    uint64_t v36 = *(void *)(*((void *)&v99 + 1) + 8 * (v35 / 0x2A));
    unint64_t v37 = v35 % 0x2A;
    uint64_t v38 = v36 + 96 * (v35 % 0x2A);
    unint64_t v40 = (void *)(v38 + 80);
    uint64_t v39 = *(void *)(v38 + 80);
    if (v39) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v39 + 16))(v39, v36 + 96 * v37);
    }
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        uint64_t v41 = *(void *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != v93) {
          goto LABEL_21;
        }
        uint64_t v65 = v41 - *(void *)(v36 + 96 * v37 + 8);
        uint64_t v66 = v94;
        if ((v95 & (v94 >= v65)) == 0) {
          uint64_t v66 = v65;
        }
        if (v66 == v32)
        {
          unint64_t v67 = (void **)*((void *)&v99 + 1);
          uint64_t v68 = v100;
          if ((void)v100 == *((void *)&v99 + 1))
          {
            *((void *)&v101 + 1) = 0;
            unint64_t v82 = 0;
          }
          else
          {
            uint64_t v69 = (void *)(*((void *)&v99 + 1) + 8 * ((unint64_t)v101 / 0x2A));
            long long v70 = (void *)(*v69 + 96 * ((unint64_t)v101 % 0x2A));
            unint64_t v71 = *(void *)(*((void *)&v99 + 1) + 8 * ((*((void *)&v101 + 1) + (void)v101) / 0x2AuLL))
                + 96 * ((*((void *)&v101 + 1) + (void)v101) % 0x2AuLL);
            if (v70 != (void *)v71)
            {
              do
              {
                uint64_t v72 = (void *)v70[7];
                if (v72)
                {
                  v70[8] = v72;
                  operator delete(v72);
                }
                int64_t v73 = (void *)v70[4];
                if (v73)
                {
                  v70[5] = v73;
                  operator delete(v73);
                }
                v70 += 12;
                if ((void *)((char *)v70 - *v69) == (void *)4032)
                {
                  unint64_t v74 = (void *)v69[1];
                  ++v69;
                  long long v70 = v74;
                }
              }
              while (v70 != (void *)v71);
              unint64_t v67 = (void **)*((void *)&v99 + 1);
              uint64_t v68 = v100;
            }
            *((void *)&v101 + 1) = 0;
            unint64_t v82 = v68 - (void)v67;
            if (v82 >= 0x11)
            {
              do
              {
                operator delete(*v67);
                unint64_t v67 = (void **)(*((void *)&v99 + 1) + 8);
                *((void *)&v99 + 1) = v67;
                unint64_t v82 = v100 - (void)v67;
              }
              while ((void)v100 - (void)v67 > 0x10uLL);
            }
          }
          if (v82 >> 3 == 1)
          {
            uint64_t v83 = 21;
          }
          else
          {
            if (v82 >> 3 != 2)
            {
LABEL_76:
              char v95 = 1;
              uint64_t v94 = v32;
              goto LABEL_8;
            }
            uint64_t v83 = 42;
          }
          *(void *)&long long v101 = v83;
          goto LABEL_76;
        }
        uint64_t v94 = v66;
        unint64_t v75 = *((void *)&v101 + 1) + v101 - 1;
        uint64_t v76 = *(void *)(*((void *)&v99 + 1) + 8 * (v75 / 0x2A));
        unint64_t v77 = v75 % 0x2A;
        v78 = *(void **)(v76 + 96 * (v75 % 0x2A) + 56);
        if (v78)
        {
          *(void *)(v76 + 96 * v77 + 64) = v78;
          operator delete(v78);
        }
        uint64_t v79 = *(void **)(v76 + 96 * v77 + 32);
        if (v79)
        {
          *(void *)(v76 + 96 * v77 + 40) = v79;
          operator delete(v79);
        }
        uint64_t v80 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        long long v81 = v101;
        --*((void *)&v101 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v80 = 0;
        }
        if ((unint64_t)(v80 - (*((void *)&v81 + 1) + v81) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(void *)&long long v100 = v100 - 8;
        }
        char v95 = 1;
LABEL_8:
        uint64_t v16 = *((void *)&v101 + 1);
        if (*((void *)&v101 + 1)) {
          continue;
        }
        if (v95)
        {
          uint64_t v84 = *v92;
          *(void *)uint64_t v84 = a2;
          *(void *)(v84 + 8) = a2 + v94;
          uint64_t v6 = 1;
          *(unsigned char *)(v84 + 16) = 1;
          goto LABEL_79;
        }
        uint64_t v6 = 0;
        uint64_t v85 = (void **)*((void *)&v99 + 1);
        v86 = (void **)v100;
        *((void *)&v101 + 1) = 0;
        unint64_t v87 = v100 - *((void *)&v99 + 1);
        if ((void)v100 - *((void *)&v99 + 1) >= 0x11uLL) {
          goto LABEL_80;
        }
LABEL_81:
        unint64_t v88 = v87 >> 3;
        if (v88 == 1)
        {
          uint64_t v89 = 21;
LABEL_85:
          *(void *)&long long v101 = v89;
        }
        else if (v88 == 2)
        {
          uint64_t v89 = 42;
          goto LABEL_85;
        }
        if (v85 != v86)
        {
          do
          {
            int v90 = *v85++;
            operator delete(v90);
          }
          while (v85 != v86);
          if ((void)v100 != *((void *)&v99 + 1)) {
            *(void *)&long long v100 = v100 + ((*((void *)&v99 + 1) - v100 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
        }
        if ((void)v99) {
          operator delete((void *)v99);
        }
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        unint64_t v49 = v101;
        if (!(void)v101)
        {
          std::deque<std::__state<char>>::__add_front_capacity((uint64_t)&v99);
          unint64_t v49 = v101;
        }
        unint64_t v50 = (void *)(*((void *)&v99 + 1) + 8 * (v49 / 0x2A));
        uint64_t v51 = *v50 + 96 * (v49 % 0x2A);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v51 = 0;
        }
        if (v51 == *v50) {
          uint64_t v51 = *(v50 - 1) + 4032;
        }
        long long v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        uint64_t v53 = v36 + 96 * v37;
        *(void *)(v51 - 56) = 0;
        *(void *)(v51 - 48) = 0;
        *(void *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(void *)(v51 - 48) = *(void *)(v53 + 48);
        *(void *)(v53 + 32) = 0;
        *(void *)(v53 + 40) = 0;
        *(void *)(v53 + 48) = 0;
        *(void *)(v51 - 40) = 0;
        *(void *)(v51 - 32) = 0;
        *(void *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(void *)(v51 - 24) = *(void *)(v53 + 72);
        *(void *)(v53 + 56) = 0;
        *(void *)(v53 + 64) = 0;
        *(void *)(v53 + 72) = 0;
        uint64_t v54 = *v40;
        *(void *)(v51 - 11) = *(void *)(v38 + 85);
        *(void *)(v51 - 16) = v54;
        uint64_t v55 = *((void *)&v101 + 1);
        *(void *)&long long v101 = v101 - 1;
        ++*((void *)&v101 + 1);
        uint64_t v56 = v55 + v101;
        unint64_t v57 = (v55 + (uint64_t)v101) / 0x2AuLL;
        uint64_t v43 = *(void *)(*((void *)&v99 + 1) + 8 * v57);
        unint64_t v44 = v56 - 42 * v57;
        uint64_t v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45) {
          goto LABEL_23;
        }
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        unint64_t v42 = *((void *)&v101 + 1) + v101 - 1;
        uint64_t v43 = *(void *)(*((void *)&v99 + 1) + 8 * (v42 / 0x2A));
        unint64_t v44 = v42 % 0x2A;
        uint64_t v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(void *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        int64_t v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(void *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        uint64_t v47 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        long long v48 = v101;
        --*((void *)&v101 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v47 = 0;
        }
        if ((unint64_t)(v47 - (*((void *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(void *)&long long v100 = v100 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        *(void *)&long long v58 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v98[64] = v58;
        *(_OWORD *)&v98[80] = v58;
        *(_OWORD *)&v98[32] = v58;
        *(_OWORD *)&v98[48] = v58;
        *(_OWORD *)v98 = v58;
        *(_OWORD *)&v98[16] = v58;
        std::__state<char>::__state((uint64_t)v98, (long long *)(v36 + 96 * v37));
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v98[80] + 24))(*(void *)&v98[80], 0, v98);
        uint64_t v59 = *((void *)&v99 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v60 = 0;
        }
        else {
          uint64_t v60 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        }
        unint64_t v61 = *((void *)&v101 + 1) + v101;
        if (v60 == *((void *)&v101 + 1) + (void)v101)
        {
          std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v99);
          uint64_t v59 = *((void *)&v99 + 1);
          unint64_t v61 = *((void *)&v101 + 1) + v101;
        }
        unint64_t v62 = *(void *)(v59 + 8 * (v61 / 0x2A)) + 96 * (v61 % 0x2A);
        long long v63 = *(_OWORD *)&v98[16];
        *(_OWORD *)unint64_t v62 = *(_OWORD *)v98;
        *(_OWORD *)(v62 + 16) = v63;
        *(void *)(v62 + 40) = 0;
        *(void *)(v62 + 48) = 0;
        *(void *)(v62 + 32) = 0;
        *(_OWORD *)(v62 + 32) = *(_OWORD *)&v98[32];
        *(void *)(v62 + 48) = *(void *)&v98[48];
        memset(&v98[32], 0, 24);
        *(void *)(v62 + 56) = 0;
        *(void *)(v62 + 64) = 0;
        *(void *)(v62 + 72) = 0;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)&v98[56];
        *(void *)(v62 + 72) = *(void *)&v98[72];
        memset(&v98[56], 0, 24);
        uint64_t v64 = *(void *)&v98[80];
        *(void *)(v62 + 85) = *(void *)&v98[85];
        *(void *)(v62 + 80) = v64;
        ++*((void *)&v101 + 1);
        if (*(void *)&v98[56])
        {
          *(void *)&v98[64] = *(void *)&v98[56];
          operator delete(*(void **)&v98[56]);
        }
        if (*(void *)&v98[32])
        {
          *(void *)&v98[40] = *(void *)&v98[32];
          operator delete(*(void **)&v98[32]);
        }
        goto LABEL_8;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_1A60B497C(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1A60B4990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__state<char>::~__state((uint64_t *)va);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v9 - 144));
  _Unwind_Resume(a1);
}

void sub_1A60B49D8(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1A60B49EC(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  unint64_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0;
  *(_DWORD *)&v66[36] = -1431655766;
  *(void *)uint64_t v64 = 0xAAAAAAAA00000000;
  memset(&v64[8], 0, 32);
  *(_OWORD *)uint64_t v65 = 0u;
  memset(v66, 0, 36);
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    goto LABEL_63;
  }
  __x.second = a3;
  *(void *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)unint64_t v62 = 0;
  memset(&v62[8], 0, 85);
  uint64_t v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
  if (*(void *)&v62[56])
  {
    *(void *)&v62[64] = *(void *)&v62[56];
    operator delete(*(void **)&v62[56]);
  }
  if (*(void *)&v62[32])
  {
    *(void *)&v62[40] = *(void *)&v62[32];
    operator delete(*(void **)&v62[32]);
  }
  uint64_t v13 = v68;
  *((_DWORD *)v68 - 24) = 0;
  *((void *)v13 - 11) = a2;
  *((void *)v13 - 10) = a2;
  *((void *)v13 - 9) = a3;
  uint64_t v14 = *((void *)v13 - 8);
  unint64_t v15 = *(unsigned int *)(a1 + 28);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
  if (v15 <= v16)
  {
    if (v15 < v16) {
      *((void *)v13 - 7) = v14 + 24 * v15;
    }
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
    uint64_t v13 = v68;
  }
  uint64_t v17 = *((void *)v13 - 5);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = (*((void *)v13 - 4) - v17) >> 4;
  long long v58 = a4;
  if (v18 <= v19)
  {
    if (v18 < v19) {
      *((void *)v13 - 4) = v17 + 16 * v18;
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v18 - v19);
    uint64_t v13 = v68;
  }
  char v61 = 0;
  unsigned int v20 = 0;
  unint64_t v21 = (const char *)(a3 - a2);
  *((void *)v13 - 2) = v6;
  *((_DWORD *)v13 - 2) = a5;
  *(v13 - 4) = a6;
  uint64_t v60 = 0;
  uint64_t v59 = a3;
  do
  {
    BOOL v22 = (++v20 & 0xFFF) != 0 || (int)(v20 >> 12) < (int)v21;
    if (!v22) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    char v24 = v13 - 16;
    uint64_t v23 = *((void *)v13 - 2);
    uint64_t v25 = v13 - 96;
    if (v23) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v13 - 96);
    }
    switch(*(_DWORD *)v25)
    {
      case 0xFFFFFC18:
        uint64_t v26 = (const char *)*((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v26 == a2 || (a5 & 0x1000) != 0 && v26 != v59) {
          goto LABEL_29;
        }
        long long v34 = &v26[-*((void *)v13 - 11)];
        unint64_t v35 = v60;
        if ((v61 & ((uint64_t)v60 >= (uint64_t)v34)) == 0)
        {
          long long v36 = *((_OWORD *)v13 - 5);
          *(_OWORD *)uint64_t v64 = *(_OWORD *)v25;
          *(_OWORD *)&v64[16] = v36;
          if (v64 != v25)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char **)&v64[32], *((char **)v13 - 8), *((char **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((uint64_t)v66, *((const double **)v13 - 5), *((const double **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          }
          uint64_t v37 = *(void *)v24;
          *(void *)&v66[29] = *(void *)(v13 - 11);
          *(void *)&v66[24] = v37;
          unint64_t v35 = v34;
        }
        uint64_t v38 = v68;
        if (v35 == v21)
        {
          uint64_t v39 = v67;
          while (v38 != v39)
          {
            unint64_t v40 = (void *)*((void *)v38 - 5);
            if (v40)
            {
              *((void *)v38 - 4) = v40;
              operator delete(v40);
            }
            uint64_t v41 = (void *)*((void *)v38 - 8);
            if (v41)
            {
              *((void *)v38 - 7) = v41;
              operator delete(v41);
            }
            v38 -= 96;
          }
          uint64_t v68 = v39;
          char v61 = 1;
          uint64_t v60 = v21;
        }
        else
        {
          uint64_t v60 = v35;
          unint64_t v42 = (void *)*((void *)v68 - 5);
          if (v42)
          {
            *((void *)v68 - 4) = v42;
            operator delete(v42);
          }
          uint64_t v43 = (void *)*((void *)v38 - 8);
          if (v43)
          {
            *((void *)v38 - 7) = v43;
            operator delete(v43);
          }
          uint64_t v68 = v38 - 96;
          char v61 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        unint64_t v27 = v68;
        unsigned int v28 = (void *)*((void *)v68 - 5);
        if (v28)
        {
          *((void *)v68 - 4) = v28;
          operator delete(v28);
        }
        unint64_t v29 = (void *)*((void *)v27 - 8);
        if (v29)
        {
          *((void *)v27 - 7) = v29;
          operator delete(v29);
        }
        uint64_t v68 = v27 - 96;
        break;
      case 0xFFFFFC20:
        *(void *)&long long v30 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v62[64] = v30;
        *(_OWORD *)&v62[80] = v30;
        *(_OWORD *)&v62[32] = v30;
        *(_OWORD *)&v62[48] = v30;
        *(_OWORD *)unint64_t v62 = v30;
        *(_OWORD *)&v62[16] = v30;
        std::__state<char>::__state((uint64_t)v62, (long long *)v13 - 6);
        (*(void (**)(void, uint64_t, char *))(**(void **)v24 + 24))(*(void *)v24, 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v62[80] + 24))(*(void *)&v62[80], 0, v62);
        unint64_t v31 = v68;
        if ((unint64_t)v68 >= v69)
        {
          uint64_t v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
          if (*(void *)&v62[56])
          {
            *(void *)&v62[64] = *(void *)&v62[56];
            operator delete(*(void **)&v62[56]);
          }
        }
        else
        {
          long long v32 = *(_OWORD *)&v62[16];
          *(_OWORD *)uint64_t v68 = *(_OWORD *)v62;
          *((_OWORD *)v31 + 1) = v32;
          *((void *)v31 + 4) = 0;
          *((void *)v31 + 5) = 0;
          *((void *)v31 + 6) = 0;
          *((void *)v31 + 7) = 0;
          *((_OWORD *)v31 + 2) = *(_OWORD *)&v62[32];
          *((void *)v31 + 6) = *(void *)&v62[48];
          memset(&v62[32], 0, 24);
          *((void *)v31 + 8) = 0;
          *((void *)v31 + 9) = 0;
          *(_OWORD *)(v31 + 56) = *(_OWORD *)&v62[56];
          *((void *)v31 + 9) = *(void *)&v62[72];
          memset(&v62[56], 0, 24);
          uint64_t v33 = *(void *)&v62[80];
          *(void *)(v31 + 85) = *(void *)&v62[85];
          *((void *)v31 + 10) = v33;
          uint64_t v68 = v31 + 96;
        }
        if (*(void *)&v62[32])
        {
          *(void *)&v62[40] = *(void *)&v62[32];
          operator delete(*(void **)&v62[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    uint64_t v13 = v68;
  }
  while (v67 != v68);
  if ((v61 & 1) == 0)
  {
LABEL_63:
    uint64_t v50 = 0;
    uint64_t v51 = *(void **)v66;
    if (!*(void *)v66) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  uint64_t v44 = *v58;
  *(void *)uint64_t v44 = a2;
  *(void *)(v44 + 8) = &v60[(void)a2];
  *(unsigned char *)(v44 + 16) = 1;
  if (v65[0] != *(void **)&v64[32])
  {
    unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v65[0] - *(void *)&v64[32]) >> 3);
    int64_t v46 = (unsigned char *)(*(void *)&v64[32] + 16);
    unsigned int v47 = 1;
    do
    {
      uint64_t v48 = v44 + 24 * v47;
      *(_OWORD *)uint64_t v48 = *((_OWORD *)v46 - 1);
      char v49 = *v46;
      v46 += 24;
      *(unsigned char *)(v48 + 16) = v49;
      BOOL v22 = v45 > v47++;
    }
    while (v22);
  }
  uint64_t v50 = 1;
  uint64_t v51 = *(void **)v66;
  if (*(void *)v66)
  {
LABEL_64:
    *(void *)&v66[8] = v51;
    operator delete(v51);
  }
LABEL_65:
  if (*(void *)&v64[32])
  {
    v65[0] = *(void **)&v64[32];
    operator delete(*(void **)&v64[32]);
  }
  long long v52 = v67;
  if (v67)
  {
    uint64_t v53 = v68;
    uint64_t v54 = v67;
    if (v68 != v67)
    {
      do
      {
        uint64_t v55 = (void *)*((void *)v53 - 5);
        if (v55)
        {
          *((void *)v53 - 4) = v55;
          operator delete(v55);
        }
        uint64_t v56 = (void *)*((void *)v53 - 8);
        if (v56)
        {
          *((void *)v53 - 7) = v56;
          operator delete(v56);
        }
        v53 -= 96;
      }
      while (v53 != v52);
      uint64_t v54 = v67;
    }
    uint64_t v68 = v52;
    operator delete(v54);
  }
  return v50;
}

void sub_1A60B5020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__state<char>::~__state(&a33);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v33 - 120));
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::clear(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  int v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v4 = a1[4];
    std::basic_regex<char>::value_type v5 = &v2[v4 / 0x2A];
    uint64_t v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    unint64_t v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        uint64_t v8 = (void *)*((void *)v6 + 7);
        if (v8)
        {
          *((void *)v6 + 8) = v8;
          operator delete(v8);
        }
        uint64_t v9 = (void *)*((void *)v6 + 4);
        if (v9)
        {
          *((void *)v6 + 5) = v9;
          operator delete(v9);
        }
        v6 += 96;
        if (v6 - (unsigned char *)*v5 == 4032)
        {
          uint64_t v10 = (char *)v5[1];
          ++v5;
          uint64_t v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      uint64_t v2 = (void **)a1[1];
      int v3 = (void **)a1[2];
    }
    a1[5] = 0;
    unint64_t v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        uint64_t v12 = a1[2];
        uint64_t v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        unint64_t v11 = v12 - (void)v2;
      }
      while (v11 > 0x10);
    }
  }
  if (v11 >> 3 == 1)
  {
    uint64_t v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2) {
      return;
    }
    uint64_t v13 = 42;
  }
  a1[4] = v13;
}

void **std::deque<std::__state<char>>::~deque[abi:ne180100](void **a1)
{
  std::deque<std::__state<char>>::clear(a1);
  uint64_t v2 = (void **)a1[1];
  int v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      unint64_t v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    uint64_t v6 = a1[1];
    std::basic_regex<char>::value_type v5 = a1[2];
    if (v5 != v6) {
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(void *)std::basic_regex<char>::value_type v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v32 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v32 = 1;
      }
      if (!(v32 >> 61))
      {
        unint64_t v33 = v32 >> 2;
        uint64_t v34 = 8 * v32;
        unint64_t v35 = (char *)operator new(8 * v32);
        long long v36 = &v35[8 * v33];
        uint64_t v37 = &v35[v34];
        int64_t v39 = v5 - v7;
        BOOL v38 = v5 == v7;
        std::basic_regex<char>::value_type v5 = v36;
        if (!v38)
        {
          std::basic_regex<char>::value_type v5 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v40 = v39 - 8;
          if ((unint64_t)(v39 - 8) >= 0x38)
          {
            int64_t v73 = &v35[8 * v33];
            uint64_t v41 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              uint64_t v74 = (v40 >> 3) + 1;
              uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v41 = &v36[v75];
              v7 += v75;
              uint64_t v76 = (long long *)(v6 + 3);
              unint64_t v77 = v73 + 16;
              uint64_t v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                _OWORD *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            uint64_t v41 = &v35[8 * v33];
          }
          do
          {
            uint64_t v80 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v41 = v80;
            v41 += 8;
          }
          while (v41 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    unint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    std::basic_regex<char>::value_type v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v89 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v89);
      return;
    }
    uint64_t v89 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v89);
    unint64_t v42 = *(void **)(a1 + 8);
    std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v42 + 1);
    uint64_t v8 = *v42;
    *(void *)(a1 + 8) = v42 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_78;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v43 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v43 = 1;
      }
      if (!(v43 >> 61))
      {
        unint64_t v44 = v43 >> 2;
        uint64_t v45 = 8 * v43;
        unint64_t v35 = (char *)operator new(8 * v43);
        long long v36 = &v35[8 * v44];
        uint64_t v37 = &v35[v45];
        int64_t v46 = v5 - v7;
        BOOL v38 = v5 == v7;
        std::basic_regex<char>::value_type v5 = v36;
        if (!v38)
        {
          std::basic_regex<char>::value_type v5 = &v36[v46 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v47 = v46 - 8;
          if ((unint64_t)(v46 - 8) >= 0x38)
          {
            long long v81 = &v35[8 * v44];
            uint64_t v48 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              uint64_t v82 = (v47 >> 3) + 1;
              uint64_t v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v48 = &v36[v83];
              v7 += v83;
              uint64_t v84 = (long long *)(v42 + 3);
              uint64_t v85 = v81 + 16;
              uint64_t v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *uint64_t v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            uint64_t v48 = &v35[8 * v44];
          }
          do
          {
            uint64_t v88 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v48 = v88;
            v48 += 8;
          }
          while (v48 != v5);
        }
LABEL_76:
        *(void *)a1 = v35;
        *(void *)(a1 + 8) = v36;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v37;
        if (v9)
        {
          operator delete(v9);
          std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_87;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0xFC0uLL);
  unint64_t v27 = &v25[8 * v21];
  unsigned int v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    long long v30 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = v20 >> 2;
      }
      if (v49 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v27 = (char *)operator new(8 * v49);
      unsigned int v28 = &v27[8 * v49];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v27;
      *(void *)unint64_t v27 = v30;
      unint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v31 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v31 = v21 + 1;
      }
      v27 -= 8 * (v31 >> 1);
      *(void *)unint64_t v27 = v26;
      unint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    goto LABEL_51;
  }
  *(void *)unint64_t v27 = v26;
  unint64_t v29 = v27 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_51:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v25) {
            unint64_t v57 = 1;
          }
          else {
            unint64_t v57 = (v28 - v25) >> 2;
          }
          if (v57 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v58 = (char *)operator new(8 * v57);
          uint64_t v59 = v58;
          unint64_t v60 = (v57 + 3) >> 2;
          unint64_t v27 = &v58[8 * v60];
          int64_t v61 = v29 - v25;
          BOOL v38 = v29 == v25;
          unint64_t v29 = v27;
          if (!v38)
          {
            unint64_t v29 = &v27[v61 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v62 = v61 - 8;
            long long v63 = &v58[8 * v60];
            uint64_t v64 = v25;
            if (v62 < 0x38) {
              goto LABEL_91;
            }
            uint64_t v65 = 8 * v60;
            long long v63 = &v58[8 * v60];
            uint64_t v64 = v25;
            if ((unint64_t)(v63 - v25) < 0x20) {
              goto LABEL_91;
            }
            uint64_t v66 = (v62 >> 3) + 1;
            uint64_t v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
            long long v63 = &v27[v67];
            uint64_t v64 = &v25[v67];
            uint64_t v68 = (long long *)(v25 + 16);
            unint64_t v69 = &v58[v65 + 16];
            uint64_t v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v71 = *v68;
              *((_OWORD *)v69 - 1) = *(v68 - 1);
              *(_OWORD *)unint64_t v69 = v71;
              v68 += 2;
              v69 += 32;
              v70 -= 4;
            }
            while (v70);
            if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                uint64_t v72 = *(void *)v64;
                v64 += 8;
                *(void *)long long v63 = v72;
                v63 += 8;
              }
              while (v63 != v29);
            }
          }
          unsigned int v28 = &v58[8 * v57];
          operator delete(v25);
          uint64_t v25 = v59;
        }
        else
        {
          uint64_t v53 = (v28 - v29) >> 3;
          if (v53 >= -1) {
            uint64_t v54 = v53 + 1;
          }
          else {
            uint64_t v54 = v53 + 2;
          }
          uint64_t v55 = v54 >> 1;
          unint64_t v27 = &v25[8 * (v54 >> 1)];
          uint64_t v56 = v25;
          if (v29 != v25)
          {
            memmove(v27, v25, v29 - v25);
            uint64_t v56 = v29;
          }
          unint64_t v29 = (char *)v56 + 8 * v55;
        }
      }
      uint64_t v52 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v27 - 1) = v52;
      v27 -= 8;
    }
    while (v18 != *(void *)(a1 + 8));
  }
LABEL_45:
  uint64_t v51 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v27;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v51)
  {
    operator delete(v51);
  }
}

void sub_1A60B57CC(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(char **a1, void *a2)
{
  unint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_22;
  }
  std::basic_regex<char>::value_type v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6 > *a1)
  {
    uint64_t v7 = (v6 - *a1) >> 3;
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    uint64_t v11 = &v6[-8 * v9];
    int64_t v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      unint64_t v4 = a1[1];
    }
    uint64_t v13 = &v4[8 * v10];
    unint64_t v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  unint64_t v14 = (v4 - v5) >> 2;
  if (v4 == v5) {
    unint64_t v14 = 1;
  }
  if (v14 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v15 = v14 >> 2;
  uint64_t v16 = 8 * v14;
  uint64_t v17 = (char *)operator new(8 * v14);
  uint64_t v18 = &v17[8 * v15];
  int64_t v20 = v4 - v6;
  BOOL v19 = v4 == v6;
  unint64_t v4 = v18;
  if (!v19)
  {
    unint64_t v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      uint64_t v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        uint64_t v31 = *(void *)v6;
        v6 += 8;
        *(void *)uint64_t v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    uint64_t v23 = &v17[8 * v15];
    uint64_t v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20) {
      goto LABEL_19;
    }
    uint64_t v24 = (v21 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v22 = &v18[v25];
    uint64_t v26 = &v6[v25];
    unint64_t v27 = (long long *)(v6 + 16);
    unsigned int v28 = v23 + 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *unsigned int v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    uint64_t v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_19;
    }
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    unint64_t v4 = a1[2];
  }
LABEL_22:
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(void **a1, void *a2)
{
  unint64_t v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    uint64_t v7 = a1[2];
    uint64_t v6 = a1[3];
    if (v7 >= v6)
    {
      uint64_t v13 = v6 - v4;
      BOOL v12 = v13 == 0;
      unint64_t v14 = v13 >> 2;
      if (v12) {
        unint64_t v14 = 1;
      }
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v15 = (v14 + 3) >> 2;
      uint64_t v16 = 8 * v14;
      uint64_t v17 = (char *)operator new(8 * v14);
      std::basic_regex<char>::value_type v5 = &v17[8 * v15];
      uint64_t v18 = v5;
      uint64_t v19 = v7 - v4;
      if (v7 != v4)
      {
        uint64_t v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v20 = v19 - 8;
        unint64_t v21 = &v17[8 * v15];
        uint64_t v22 = v4;
        if (v20 < 0x38) {
          goto LABEL_27;
        }
        uint64_t v23 = &v17[8 * v15];
        unint64_t v21 = v23;
        uint64_t v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20) {
          goto LABEL_27;
        }
        uint64_t v24 = (v20 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v21 = &v5[v25];
        uint64_t v22 = &v4[v25];
        uint64_t v26 = (long long *)(v4 + 16);
        unint64_t v27 = v23 + 16;
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          _OWORD *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            uint64_t v30 = *(void *)v22;
            v22 += 8;
            *(void *)unint64_t v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        std::basic_regex<char>::value_type v5 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v8 = (v6 - v7) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v11 = &v7[8 * (v9 >> 1)];
      std::basic_regex<char>::value_type v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        unint64_t v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    std::basic_regex<char>::value_type v5 = (char *)a1[1];
  }
  *((void *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::deque<std::__state<char>>::__add_front_capacity(uint64_t a1)
{
  BOOL v3 = *(uint64_t **)(a1 + 8);
  unint64_t v2 = *(uint64_t **)(a1 + 16);
  unint64_t v4 = v2 - v3;
  if (v2 == v3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if ((unint64_t)(v5 - (*(void *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(void *)(a1 + 32) = v6 + 42;
    unint64_t v47 = (void *)*(v2 - 1);
    *(void *)(a1 + 16) = v2 - 1;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
    return;
  }
  uint64_t v7 = *(uint64_t **)(a1 + 24);
  uint64_t v8 = *(uint64_t **)a1;
  uint64_t v9 = (uint64_t)v7 - *(void *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      unint64_t v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v47);
      uint64_t v43 = *(void *)(a1 + 16);
      unint64_t v47 = *(void **)(v43 - 8);
      *(void *)(a1 + 16) = v43 - 8;
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8)
      {
LABEL_9:
        uint64_t v10 = 21;
LABEL_45:
        *(void *)(a1 + 32) = v10;
        return;
      }
    }
    uint64_t v10 = *(void *)(a1 + 32) + 42;
    goto LABEL_45;
  }
  if (v7 == v8) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = v9 >> 2;
  }
  if (v11 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  BOOL v12 = (char *)operator new(8 * v11);
  uint64_t v13 = operator new(0xFC0uLL);
  unint64_t v14 = v13;
  if (v11)
  {
    unint64_t v15 = &v12[8 * v11];
    *(void *)BOOL v12 = v13;
    uint64_t v16 = v12 + 8;
    if (v3 != v2)
    {
LABEL_16:
      uint64_t v17 = v12;
      while (1)
      {
        if (v16 == v15)
        {
          if (v17 <= v12)
          {
            if (v16 == v12) {
              unint64_t v26 = 1;
            }
            else {
              unint64_t v26 = (v16 - v12) >> 2;
            }
            if (v26 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v27 = (char *)operator new(8 * v26);
            uint64_t v28 = v27;
            unint64_t v29 = v26 >> 2;
            uint64_t v18 = &v27[8 * (v26 >> 2)];
            int64_t v31 = v16 - v17;
            BOOL v30 = v16 == v17;
            uint64_t v16 = v18;
            if (!v30)
            {
              uint64_t v16 = &v18[v31 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v32 = v31 - 8;
              if (v32 < 0x38 || (uint64_t v33 = 8 * v29, (unint64_t)(&v27[8 * v29] - v17) < 0x20))
              {
                uint64_t v34 = &v27[8 * (v26 >> 2)];
                unint64_t v35 = v17;
                goto LABEL_35;
              }
              uint64_t v37 = (v32 >> 3) + 1;
              uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v34 = &v18[v38];
              unint64_t v35 = &v17[v38];
              int64_t v39 = (long long *)(v17 + 16);
              unint64_t v40 = &v27[v33 + 16];
              uint64_t v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v42 = *v39;
                *((_OWORD *)v40 - 1) = *(v39 - 1);
                *(_OWORD *)unint64_t v40 = v42;
                v39 += 2;
                v40 += 32;
                v41 -= 4;
              }
              while (v41);
              if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_35:
                  uint64_t v36 = *(void *)v35;
                  v35 += 8;
                  *(void *)uint64_t v34 = v36;
                  v34 += 8;
                }
                while (v34 != v16);
              }
            }
            unint64_t v15 = &v27[8 * v26];
            if (v12) {
              operator delete(v12);
            }
            BOOL v12 = v28;
            goto LABEL_18;
          }
          uint64_t v20 = (v17 - v12) >> 3;
          if (v20 >= -1) {
            uint64_t v21 = v20 + 1;
          }
          else {
            uint64_t v21 = v20 + 2;
          }
          uint64_t v22 = v21 >> 1;
          uint64_t v23 = &v17[-8 * (v21 >> 1)];
          uint64_t v24 = v16;
          if (v16 != v17)
          {
            memmove(v23, v17, v16 - v17);
            uint64_t v24 = v17;
          }
          uint64_t v25 = -v22;
          unint64_t v15 = v16;
          uint64_t v16 = &v23[v16 - v17];
          uint64_t v18 = &v24[8 * v25];
        }
        else
        {
          uint64_t v18 = v17;
        }
LABEL_18:
        uint64_t v19 = *v3++;
        *(void *)uint64_t v16 = v19;
        v16 += 8;
        uint64_t v17 = v18;
        if (v3 == *(uint64_t **)(a1 + 16)) {
          goto LABEL_48;
        }
      }
    }
  }
  else
  {
    unint64_t v44 = (char *)operator new(8uLL);
    unint64_t v15 = v44 + 8;
    operator delete(v12);
    BOOL v3 = *(uint64_t **)(a1 + 8);
    uint64_t v45 = *(uint64_t **)(a1 + 16);
    BOOL v12 = v44;
    *(void *)unint64_t v44 = v14;
    uint64_t v16 = v44 + 8;
    if (v3 != v45) {
      goto LABEL_16;
    }
  }
  uint64_t v18 = v12;
LABEL_48:
  int64_t v46 = *(void **)a1;
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v18;
  *(void *)(a1 + 16) = v16;
  *(void *)(a1 + 24) = v15;
  if (v16 - v18 == 8)
  {
    *(void *)(a1 + 32) = 21;
    if (!v46) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 32) += 42;
    if (!v46) {
      return;
    }
  }

  operator delete(v46);
}

void sub_1A60B5E9C(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char **a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    uint64_t v18 = a1[1];
    uint64_t v17 = a1 + 1;
    unint64_t v14 = v18;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      uint64_t v24 = result;
      if (a2 != a3)
      {
        uint64_t v25 = result;
        do
        {
          *(_OWORD *)uint64_t v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      int64_t v16 = v24 - result;
      unint64_t v14 = result;
    }
    else
    {
      uint64_t v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      uint64_t v21 = v14;
      if (v20 != a3)
      {
        uint64_t v22 = v14;
        do
        {
          long long v23 = *(_OWORD *)v20;
          *((void *)v22 + 2) = *((void *)v20 + 2);
          *(_OWORD *)uint64_t v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      int64_t v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = 24 * v12;
    uint64_t result = (char *)operator new(24 * v12);
    unint64_t v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    unint64_t v15 = result;
    if (v6 != a3)
    {
      uint64_t result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      unint64_t v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    int64_t v16 = v15 - v14;
    uint64_t v17 = a1 + 1;
  }
  *uint64_t v17 = &v14[v16];
  return result;
}

double *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(uint64_t a1, const double *a2, const double *a3, size_t __sz)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = *(double **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 60) {
      goto LABEL_62;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v37) {
      unint64_t v11 = v10;
    }
    if (v11 >> 60) {
LABEL_62:
    }
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    uint64_t v12 = 2 * v11;
    uint64_t result = (double *)operator new(16 * v11);
    uint64_t v13 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v12];
    unint64_t v14 = result;
    if (a2 != a3)
    {
      uint64_t result = (double *)memcpy(result, a2, ((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0);
      unint64_t v14 = (double *)((char *)v13 + (((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0));
    }
    int64_t v15 = (char *)v14 - (char *)v13;
    int64_t v16 = (void *)(a1 + 8);
    goto LABEL_29;
  }
  uint64_t v17 = *(double **)(a1 + 8);
  int64_t v16 = (void *)(a1 + 8);
  uint64_t v13 = v17;
  int64_t v18 = (char *)v17 - (char *)result;
  unint64_t v19 = ((char *)v17 - (char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      BOOL v30 = (char *)result;
    }
    else
    {
      unint64_t v29 = (char *)a3 - (char *)a2 - 16;
      if (v29 < 0xF0
        || ((unint64_t v47 = v29 & 0xFFFFFFFFFFFFFFF0 | 8,
             uint64_t v48 = (char *)result + v47,
             unint64_t v49 = (unint64_t)a2 + v47,
             unint64_t v50 = (v29 & 0xFFFFFFFFFFFFFFF0) + 16,
             result + 1 < (const double *)((char *)a2 + v50))
          ? (BOOL v51 = a2 + 1 >= (double *)((char *)result + v50))
          : (BOOL v51 = 1),
            v51 ? (char v52 = 0) : (char v52 = 1),
            v48 > (char *)a2 ? (BOOL v53 = (unint64_t)result >= v49) : (BOOL v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        BOOL v30 = (char *)result;
        int64_t v31 = a2;
      }
      else
      {
        uint64_t v54 = (v29 >> 4) + 1;
        uint64_t v55 = 2 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
        BOOL v30 = (char *)&result[v55];
        int64_t v31 = &a2[v55];
        uint64_t v56 = a2 + 4;
        unint64_t v57 = result + 4;
        uint64_t v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v59 = v56 - 4;
          float64x2x2_t v62 = vld2q_f64(v59);
          float64x2x2_t v64 = vld2q_f64(v56);
          unint64_t v60 = v57 - 4;
          vst2q_f64(v60, v62);
          vst2q_f64(v57, v64);
          v56 += 8;
          v57 += 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL)) {
          goto LABEL_28;
        }
      }
      do
      {
        uint64_t v32 = *(void *)v31;
        uint64_t v33 = *((void *)v31 + 1);
        v31 += 2;
        *(void *)BOOL v30 = v32;
        *((void *)v30 + 1) = v33;
        v30 += 16;
      }
      while (v31 != a3);
    }
LABEL_28:
    int64_t v15 = v30 - (char *)result;
    uint64_t v13 = result;
    goto LABEL_29;
  }
  uint64_t v20 = &a2[2 * v19];
  if (v13 != result)
  {
    unint64_t v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((unint64_t v34 = v18 & 0xFFFFFFFFFFFFFFF0,
           unint64_t v35 = (char *)result + v34 - 8,
           unint64_t v36 = (unint64_t)a2 + v34 - 8,
           result + 1 < (const double *)((char *)a2 + v34))
        ? (BOOL v37 = a2 + 1 >= (double *)((char *)result + v34))
        : (BOOL v37 = 1),
          v37 ? (char v38 = 0) : (char v38 = 1),
          v35 > (char *)a2 ? (BOOL v39 = (unint64_t)result >= v36) : (BOOL v39 = 1),
          !v39 || (v38 & 1) != 0))
    {
      uint64_t v22 = result;
      long long v23 = a2;
    }
    else
    {
      uint64_t v40 = (v21 >> 4) + 1;
      uint64_t v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      uint64_t v22 = &result[v41];
      long long v23 = &a2[v41];
      long long v42 = a2 + 4;
      uint64_t v43 = result + 4;
      uint64_t v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v45 = v42 - 4;
        float64x2x2_t v61 = vld2q_f64(v45);
        float64x2x2_t v63 = vld2q_f64(v42);
        int64_t v46 = v43 - 4;
        vst2q_f64(v46, v61);
        vst2q_f64(v43, v63);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_18;
      }
    }
    do
    {
      uint64_t v24 = *(void *)v23;
      uint64_t v25 = *((void *)v23 + 1);
      v23 += 2;
      *(void *)uint64_t v22 = v24;
      *((void *)v22 + 1) = v25;
      v22 += 2;
    }
    while (v23 != v20);
  }
LABEL_18:
  unint64_t v26 = v13;
  if (v20 != a3)
  {
    unint64_t v27 = v13;
    do
    {
      long long v28 = *(_OWORD *)v20;
      v20 += 2;
      *(_OWORD *)unint64_t v27 = v28;
      v27 += 2;
      v26 += 2;
    }
    while (v20 != a3);
  }
  int64_t v15 = (char *)v26 - (char *)v13;
LABEL_29:
  *int64_t v16 = (char *)v13 + v15;
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::vector<std::ssub_match>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      unint64_t v11 = &end[__n];
      std::vector<std::ssub_match>::size_type v12 = 24 * __n;
      do
      {
        end->first.__i_ = 0;
        end->second.__i_ = 0;
        end->matched = 0;
        ++end;
        v12 -= 24;
      }
      while (v12);
      std::vector<std::ssub_match>::pointer end = v11;
    }
    this->__end_ = end;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v7 = v6 + __n;
    if (v6 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v13 = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v6];
    std::vector<std::ssub_match>::size_type v14 = 24 * __n;
    int64_t v15 = &v13[__n];
    int64_t v16 = v13;
    do
    {
      v16->first.__i_ = 0;
      v16->second.__i_ = 0;
      v16->matched = 0;
      ++v16;
      v14 -= 24;
    }
    while (v14);
    std::vector<std::ssub_match>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(void *)&v13[-1].matched = *(void *)&end[-1].matched;
        v13[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v18;
        --v13;
        --end;
      }
      while (end != begin);
      std::vector<std::ssub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v15;
    this->__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v9];
    if (end)
    {
      operator delete(end);
    }
  }
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x1A6274F50](v13, a1);
  if (LOBYTE(v13[0]))
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1A6274F60](v13);
  return a1;
}

void sub_1A60B6694(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x1A6274F60](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1A60B6674);
}

void sub_1A60B66E8(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if ((uint64_t)v12 >= 1)
    {
      memset(__b, 170, sizeof(__b));
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        uint64_t v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        __b[2] = (void *)(v15 | 0x8000000000000000);
        __b[0] = v13;
      }
      else
      {
        HIBYTE(__b[2]) = v12;
        uint64_t v13 = __b;
      }
      memset(v13, __c, v12);
      *((unsigned char *)v13 + v12) = 0;
      if (SHIBYTE(__b[2]) >= 0) {
        int64_t v16 = __b;
      }
      else {
        int64_t v16 = (void **)__b[0];
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v6 + 96))(v6, v16, v12);
      uint64_t v18 = v17;
      if (SHIBYTE(__b[2]) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12) {
          return 0;
        }
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    uint64_t v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(void *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_1A60B68DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void abm::debug::registerLogServer(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_0;
  void block[4] = a1;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce != -1) {
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
  }
}

void ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::LogServer::getConfig((uint64_t *)&xdict, **(ctu::LogServer ***)(a1 + 32));
  v26[0] = &xdict;
  v26[1] = "kDomainLogLevels";
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)v26, &object);
  uint64_t v2 = MEMORY[0x1A6275E60](object);
  uint64_t v3 = MEMORY[0x1E4F14590];
  if (v2 != MEMORY[0x1E4F14590])
  {
    xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
    if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A6275E60](v4) == v3)
      {
        xpc_retain(v4);
        xpc_object_t v5 = v4;
      }
      else
      {
        xpc_object_t v5 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
    }
    xpc_release(v4);
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v7 = object;
    xpc_object_t object = v5;
    xpc_release(v7);
    xpc_release(v6);
  }
  xpc_object_t v8 = xpc_int64_create(1);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(object, "libetl", v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(1);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(object, "libtu", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  xpc_object_t v12 = xpc_int64_create(1);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(object, "trace.diag.cfg", v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  xpc_object_t v14 = xpc_int64_create(1);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(object, "trace.diag.svc", v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = xpc_int64_create(1);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(object, "libktl", v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  xpc_object_t v18 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kDomainLogLevels", v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  xpc_object_t v25 = xdict;
  if (xdict) {
    xpc_retain(xdict);
  }
  else {
    xpc_object_t v25 = xpc_null_create();
  }
  ctu::LogServer::updateConfig();
  xpc_release(v25);
  uint64_t v20 = (capabilities::abs *)operator new(0x10uLL);
  unint64_t v21 = *(void **)(a1 + 32);
  *(void *)uint64_t v20 = *v21;
  uint64_t v22 = v21[1];
  *((void *)v20 + 1) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 16), 1uLL, memory_order_relaxed);
  }
  _MergedGlobals_0 = (uint64_t)v20;
  if (!qword_1EB5EE800)
  {
    uint64_t v20 = (capabilities::abs *)os_log_create("com.apple.telephony.abm", "libtu");
    qword_1EB5EE800 = (uint64_t)v20;
  }
  capabilities::abs::TUDebugFlags(v20);
  TelephonyUtilDebugSetFlags();
  long long v23 = (capabilities::radio *)TelephonyUtilDebugRegisterDelegate();
  uint64_t v24 = (capabilities::radio *)capabilities::radio::ice(v23);
  if (v24)
  {
    if (!qword_1EB5EE808) {
      qword_1EB5EE808 = (uint64_t)os_log_create("com.apple.telephony.abm", "libktl");
    }
    KTLDebugRegisterDelegate();
    KTLDebugSetFlags();
  }
  else if (capabilities::radio::maverick(v24))
  {
    if (!qword_1EB5EE810) {
      qword_1EB5EE810 = (uint64_t)os_log_create("com.apple.telephony.abm", "libetl");
    }
    ETLDebugRegisterDelegate();
  }
  if (!qword_1EB5EE818) {
    qword_1EB5EE818 = (uint64_t)os_log_create("com.apple.telephony.abm", "bbu");
  }
  BBUpdaterRegisterGlobalLogSink();
  xpc_release(object);
  xpc_release(xdict);
}

void sub_1A60B6DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, xpc_object_t a13, xpc_object_t a14)
{
}

void xpc::dict::object_proxy::operator xpc::dict(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    xpc_object_t v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A6275E60](v4) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

void abm::debug::handleDebugPrintTelephonyUtil(abm::debug *this, const char *a2, const char *a3, char *a4)
{
}

void abm::debug::handleDebugPrintBinaryTelephonyUtil(uint64_t a1, int a2, uint64_t a3, int a4)
{
  xpc_object_t v6 = "misc";
  if (!a2) {
    xpc_object_t v6 = "send";
  }
  if (a2 == 1) {
    xpc_object_t v7 = "recv";
  }
  else {
    xpc_object_t v7 = v6;
  }
  abm::debug::handleDebugPrintBinary(a1, 0, (uint64_t)v7, a3, a4);
}

void abm::debug::handleDebugPrintKTL(abm::debug *this, const char *a2, const char *a3, char *a4)
{
}

void abm::debug::handleErrorPrintKTL(abm::debug *this, const char *a2, const char *a3, char *a4)
{
}

void abm::debug::handleDebugPrintBinaryKTL(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  if (a2 > 3) {
    xpc_object_t v6 = (char *)&unk_1A61FC72E;
  }
  else {
    xpc_object_t v6 = off_1E5C46C88[a2];
  }
  abm::debug::handleDebugPrintBinary(a1, 2, (uint64_t)v6, a3, a4);
}

void abm::debug::handleDebugPrintETL(abm::debug *this, const char *a2, const char *a3, char *a4)
{
}

void abm::debug::handleDebugPrintBinaryETL(uint64_t a1, int a2, uint64_t a3, int a4)
{
  xpc_object_t v6 = "misc";
  if (!a2) {
    xpc_object_t v6 = "send";
  }
  if (a2 == 1) {
    xpc_object_t v7 = "recv";
  }
  else {
    xpc_object_t v7 = v6;
  }
  abm::debug::handleDebugPrintBinary(a1, 1, (uint64_t)v7, a3, a4);
}

uint64_t abm::debug::handleDebugPrintBBU(abm::debug *this, void *a2, const char *a3, const char *a4)
{
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29[7] = v5;
  v29[8] = v5;
  v29[5] = v5;
  v29[6] = v5;
  v29[3] = v5;
  v29[4] = v5;
  v29[1] = v5;
  v29[2] = v5;
  v29[0] = v5;
  long long v27 = v5;
  long long v28 = v5;
  long long v25 = v5;
  *(_OWORD *)std::vector<std::csub_match> __p = v5;
  long long v23 = v5;
  long long v24 = v5;
  long long v22 = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
  xpc_object_t v6 = (void *)std::ostream::operator<<();
  xpc_object_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  size_t v8 = strlen(a3);
  xpc_object_t v9 = (abm::debug *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a3, v8);
  memset(__dst, 170, sizeof(__dst));
  if ((BYTE8(v28) & 0x10) != 0)
  {
    uint64_t v15 = v28;
    if ((unint64_t)v28 < *((void *)&v25 + 1))
    {
      *(void *)&long long v28 = *((void *)&v25 + 1);
      uint64_t v15 = *((void *)&v25 + 1);
    }
    xpc_object_t v16 = (const void *)v25;
    size_t v13 = v15 - v25;
    if ((unint64_t)(v15 - v25) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_22;
    }
  }
  else
  {
    if ((BYTE8(v28) & 8) == 0)
    {
      size_t v13 = 0;
      HIBYTE(__dst[2]) = 0;
      xpc_object_t v14 = __dst;
      goto LABEL_14;
    }
    xpc_object_t v16 = (const void *)*((void *)&v23 + 1);
    size_t v13 = *((void *)&v24 + 1) - *((void *)&v23 + 1);
    if (*((void *)&v24 + 1) - *((void *)&v23 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_22:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 >= 0x17)
  {
    uint64_t v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v17 = v13 | 7;
    }
    uint64_t v18 = v17 + 1;
    xpc_object_t v14 = (void **)operator new(v17 + 1);
    __dst[1] = (void *)v13;
    __dst[2] = (void *)(v18 | 0x8000000000000000);
    __dst[0] = v14;
    goto LABEL_13;
  }
  HIBYTE(__dst[2]) = v13;
  xpc_object_t v14 = __dst;
  if (v13) {
LABEL_13:
  }
    xpc_object_t v9 = (abm::debug *)memmove(v14, v16, v13);
LABEL_14:
  *((unsigned char *)v14 + v13) = 0;
  xpc_object_t v19 = __dst;
  if (SHIBYTE(__dst[2]) < 0) {
    xpc_object_t v19 = (void **)__dst[0];
  }
  abm::debug::handleDebugPrintBBUHelper(v9, v10, v11, v12, v19);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  *(void *)&long long v22 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v22 + *(void *)(v22 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v22 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62751A0](v29);
}

void sub_1A60B72D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrint(uint64_t a1, int a2, unsigned char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  long long v5 = (void *)_MergedGlobals_0;
  if (_MergedGlobals_0)
  {
    xpc_object_t v6 = *(std::__shared_weak_count **)(_MergedGlobals_0 + 8);
    if (v6)
    {
      uint64_t v11 = std::__shared_weak_count::lock(v6);
      uint64_t v54 = v11;
      if (v11)
      {
        if (*v5)
        {
          unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v51[1] = v12;
          v51[2] = v12;
          v51[0] = v12;
          ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v51);
          if (a3 && *a3)
          {
            uint64_t v13 = MEMORY[0x1A6274B30](v51, a3);
            MEMORY[0x1A6274B30](v13, ": ");
          }
          MEMORY[0x1A6274810](&v49, a4, a5);
          ctu::operator<<();
          xpc_object_t v14 = (ctu::Clock *)MEMORY[0x1A6274830](&v49);
          ctu::Clock::now_in_nanoseconds(v14);
          uint64_t v15 = (std::string *)operator new(0x60uLL);
          xpc_object_t v16 = abm::debug::kLogDomainMap[a2];
          size_t v17 = strlen(v16);
          if (v17 >= 0x7FFFFFFFFFFFFFF8) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          uint64_t v18 = (void *)v17;
          if (v17 >= 0x17)
          {
            uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v17 | 7) != 0x17) {
              uint64_t v21 = v17 | 7;
            }
            uint64_t v22 = v21 + 1;
            xpc_object_t v19 = (void **)operator new(v21 + 1);
            __dst[1] = v18;
            unint64_t v48 = v22 | 0x8000000000000000;
            __dst[0] = v19;
          }
          else
          {
            HIBYTE(v48) = v17;
            xpc_object_t v19 = __dst;
            if (!v17)
            {
LABEL_17:
              *((unsigned char *)v18 + (void)v19) = 0;
              MEMORY[0x1A62747F0](v51);
              ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v51);
              ctu::LogMessage::LogMessage();
              unint64_t v49 = v15;
              long long v23 = (std::__shared_weak_count *)operator new(0x20uLL);
              v23->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB09180;
              v23->__shared_owners_ = 0;
              v23->__shared_weak_owners_ = 0;
              v23[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
              unint64_t v50 = v23;
              if (SHIBYTE(v48) < 0)
              {
                operator delete(__dst[0]);
                long long v24 = v15 + 2;
                int v25 = SHIBYTE(v15[2].__r_.__value_.__r.__words[2]);
                if ((v25 & 0x80000000) == 0) {
                  goto LABEL_19;
                }
              }
              else
              {
                long long v24 = v15 + 2;
                int v25 = SHIBYTE(v15[2].__r_.__value_.__r.__words[2]);
                if ((v25 & 0x80000000) == 0)
                {
LABEL_19:
                  size_t size = v25;
                  data = v24;
                  goto LABEL_22;
                }
              }
              data = (std::string *)v15[2].__r_.__value_.__l.__data_;
              size_t size = v15[2].__r_.__value_.__l.__size_;
LABEL_22:
              long long v28 = memchr(data, 10, size);
              if (v28) {
                unint64_t v29 = (unint64_t)v28;
              }
              else {
                unint64_t v29 = (unint64_t)data + size;
              }
              if (v29 - (void)data != size)
              {
                unint64_t v30 = (unsigned __int8 *)(v29 + 1);
                if ((std::string *)(v29 + 1) != (std::string *)((char *)data + size))
                {
                  int64_t v31 = (char *)data + size + ~v29;
                  do
                  {
                    int v32 = *v30;
                    if (v32 != 10) {
                      *(unsigned char *)v29++ = v32;
                    }
                    ++v30;
                    --v31;
                  }
                  while (v31);
                  LOBYTE(v25) = *((unsigned char *)&v15[2].__r_.__value_.__s + 23);
                }
              }
              if ((v25 & 0x80) != 0)
              {
                std::string::pointer v39 = v15[2].__r_.__value_.__l.__data_;
                std::string::size_type v38 = v15[2].__r_.__value_.__l.__size_;
                uint64_t v33 = &v39[v38];
                std::string::size_type v34 = v29 - (void)v39;
                if (v38 >= v29 - (unint64_t)v39)
                {
LABEL_34:
                  if (&v33[-v29] == (char *)-1)
                  {
                    if ((v25 & 0x80) != 0)
                    {
                      std::string::pointer v44 = v15[2].__r_.__value_.__l.__data_;
                      v15[2].__r_.__value_.__l.__size_ = v34;
                      v44[v34] = 0;
                      unint64_t v35 = v50;
                      int64_t v46 = v50;
                      if (!v50) {
                        goto LABEL_37;
                      }
                    }
                    else
                    {
                      *((unsigned char *)&v15[2].__r_.__value_.__s + 23) = v34 & 0x7F;
                      v24->__r_.__value_.__s.__data_[v34] = 0;
                      unint64_t v35 = v50;
                      int64_t v46 = v50;
                      if (!v50) {
                        goto LABEL_37;
                      }
                    }
                  }
                  else
                  {
                    std::string::__erase_external_with_move(v24, v34, (std::string::size_type)&v33[-v29]);
                    unint64_t v35 = v50;
                    int64_t v46 = v50;
                    if (!v50)
                    {
LABEL_37:
                      ctu::LogServer::log();
                      if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                        std::__shared_weak_count::__release_weak(v46);
                      }
                      switch(a2)
                      {
                        case 0:
                          unint64_t v36 = qword_1EB5EE800;
                          if (!qword_1EB5EE800 || !os_log_type_enabled((os_log_t)qword_1EB5EE800, OS_LOG_TYPE_DEFAULT)) {
                            goto LABEL_65;
                          }
                          BOOL v37 = (std::string::__raw *)&v49[2];
                          if (SHIBYTE(v49[2].__r_.__value_.__r.__words[2]) < 0) {
                            BOOL v37 = (std::string::__raw *)v37->__words[0];
                          }
                          *(_DWORD *)buf = 136315138;
                          uint64_t v56 = v37;
                          goto LABEL_61;
                        case 1:
                          uint64_t v40 = qword_1EB5EE810;
                          if (!qword_1EB5EE810 || !os_log_type_enabled((os_log_t)qword_1EB5EE810, OS_LOG_TYPE_DEBUG)) {
                            goto LABEL_65;
                          }
                          uint64_t v45 = (std::string::__raw *)&v49[2];
                          if (SHIBYTE(v49[2].__r_.__value_.__r.__words[2]) < 0) {
                            uint64_t v45 = (std::string::__raw *)v45->__words[0];
                          }
                          *(_DWORD *)buf = 136315138;
                          uint64_t v56 = v45;
                          goto LABEL_77;
                        case 2:
                          uint64_t v40 = qword_1EB5EE808;
                          if (!qword_1EB5EE808 || !os_log_type_enabled((os_log_t)qword_1EB5EE808, OS_LOG_TYPE_DEBUG)) {
                            goto LABEL_65;
                          }
                          uint64_t v41 = (std::string::__raw *)&v49[2];
                          if (SHIBYTE(v49[2].__r_.__value_.__r.__words[2]) < 0) {
                            uint64_t v41 = (std::string::__raw *)v41->__words[0];
                          }
                          *(_DWORD *)buf = 136315138;
                          uint64_t v56 = v41;
LABEL_77:
                          _os_log_debug_impl(&dword_1A609F000, v40, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
                          uint64_t v43 = v50;
                          if (!v50) {
                            goto LABEL_68;
                          }
                          goto LABEL_66;
                        case 3:
                          unint64_t v36 = qword_1EB5EE818;
                          if (!qword_1EB5EE818 || !os_log_type_enabled((os_log_t)qword_1EB5EE818, OS_LOG_TYPE_DEFAULT)) {
                            goto LABEL_65;
                          }
                          long long v42 = (std::string::__raw *)&v49[2];
                          if (SHIBYTE(v49[2].__r_.__value_.__r.__words[2]) < 0) {
                            long long v42 = (std::string::__raw *)v42->__words[0];
                          }
                          *(_DWORD *)buf = 136315138;
                          uint64_t v56 = v42;
LABEL_61:
                          _os_log_impl(&dword_1A609F000, v36, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
                          uint64_t v43 = v50;
                          if (!v50) {
                            goto LABEL_68;
                          }
                          goto LABEL_66;
                        default:
LABEL_65:
                          uint64_t v43 = v50;
                          if (v50)
                          {
LABEL_66:
                            if (!atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                              std::__shared_weak_count::__release_weak(v43);
                            }
                          }
LABEL_68:
                          MEMORY[0x1A6274830](v51);
                          uint64_t v20 = v54;
                          if (v54) {
                            goto LABEL_69;
                          }
                          return;
                      }
                    }
                  }
                  atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
                  goto LABEL_37;
                }
              }
              else
              {
                uint64_t v33 = (char *)v24 + v25;
                std::string::size_type v34 = v29 - (void)v24;
                if (v25 >= v29 - (unint64_t)v24) {
                  goto LABEL_34;
                }
              }
              std::string::__throw_out_of_range[abi:ne180100]();
            }
          }
          memmove(v19, v16, (size_t)v18);
          goto LABEL_17;
        }
        uint64_t v20 = v11;
LABEL_69:
        if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
  }
}

void sub_1A60B792C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  MEMORY[0x1A6274830](&a24);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v24 - 128);
  _Unwind_Resume(a1);
}

void sub_1A60B79DC(_Unwind_Exception *a1)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v1 - 128);
  _Unwind_Resume(a1);
}

void sub_1A60B79F0()
{
  operator delete(v0);
  JUMPOUT(0x1A60B7A38);
}

void sub_1A60B7A1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  operator delete(v16);
  JUMPOUT(0x1A60B7A38);
}

uint64_t std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001A61F6F51) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001A61F6F51 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001A61F6F51)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001A61F6F51 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::string::__erase_external_with_move(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  if (!__n) {
    return;
  }
  int v4 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v4 < 0)
  {
    xpc_object_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v7 = size - __pos;
    if (size - __pos >= __n) {
      std::string::size_type v8 = __n;
    }
    else {
      std::string::size_type v8 = size - __pos;
    }
    if (size - __pos <= __n) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    xpc_object_t v6 = this;
    std::string::size_type v7 = size - __pos;
    if (size - __pos >= __n) {
      std::string::size_type v8 = __n;
    }
    else {
      std::string::size_type v8 = HIBYTE(this->__r_.__value_.__r.__words[2]) - __pos;
    }
    if (v7 <= __n) {
      goto LABEL_8;
    }
  }
  memmove((char *)v6 + __pos, (char *)v6 + __pos + v8, v7 - v8);
  LOBYTE(v4) = *((unsigned char *)&this->__r_.__value_.__s + 23);
LABEL_8:
  std::string::size_type v9 = size - v8;
  if ((v4 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = v9;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
  }
  v6->__r_.__value_.__s.__data_[v9] = 0;
}

void abm::debug::handleDebugPrintBinary(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  long long v5 = (void *)_MergedGlobals_0;
  if (!_MergedGlobals_0) {
    return;
  }
  std::string::size_type v7 = *(std::__shared_weak_count **)(_MergedGlobals_0 + 8);
  if (!v7) {
    return;
  }
  uint64_t v11 = std::__shared_weak_count::lock(v7);
  std::string::pointer v39 = v11;
  if (!v11) {
    return;
  }
  if (!*v5)
  {
    long long v23 = v11;
LABEL_40:
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    return;
  }
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36[1] = v12;
  v36[2] = v12;
  v36[0] = v12;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v36);
  uint64_t v13 = MEMORY[0x1A6274B30](v36, a1);
  MEMORY[0x1A6274B30](v13, " (");
  uint64_t v14 = ctu::operator<<();
  uint64_t v15 = MEMORY[0x1A6274B30](v14, ") ");
  uint64_t v16 = MEMORY[0x1A6274B30](v15, a3);
  MEMORY[0x1A6274B30](v16, "\n");
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v35 = 0xAAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAA00;
  ctu::assign();
  size_t v17 = (ctu::Clock *)MEMORY[0x1A6274B40](v36, __p);
  ctu::Clock::now_in_nanoseconds(v17);
  uint64_t v18 = (std::__shared_weak_count_vtbl *)operator new(0x60uLL);
  xpc_object_t v19 = abm::debug::kLogDomainMap[a2];
  size_t v20 = strlen(v19);
  if (v20 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    uint64_t v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v24 = v20 | 7;
    }
    uint64_t v25 = v24 + 1;
    uint64_t v22 = (void **)operator new(v24 + 1);
    __dst[1] = v21;
    unint64_t v31 = v25 | 0x8000000000000000;
    __dst[0] = v22;
    goto LABEL_13;
  }
  HIBYTE(v31) = v20;
  uint64_t v22 = __dst;
  if (v20) {
LABEL_13:
  }
    memmove(v22, v19, (size_t)v21);
  *((unsigned char *)v21 + (void)v22) = 0;
  MEMORY[0x1A62747F0](v36);
  ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v36);
  ctu::LogMessage::LogMessage();
  int v32 = v18;
  unint64_t v26 = (std::__shared_weak_count *)operator new(0x20uLL);
  v26->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB09180;
  v26->__shared_owners_ = 0;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v18;
  uint64_t v33 = v26;
  if (SHIBYTE(v31) < 0) {
    operator delete(__dst[0]);
  }
  atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  ctu::LogServer::log();
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  switch(a2)
  {
    case 0:
      long long v27 = qword_1EB5EE800;
      if (!qword_1EB5EE800 || !os_log_type_enabled((os_log_t)qword_1EB5EE800, OS_LOG_TYPE_DEBUG)) {
        break;
      }
      long long v28 = __p;
      if (v35 < 0) {
        long long v28 = (void **)__p[0];
      }
LABEL_45:
      *(_DWORD *)buf = 67109634;
      int v41 = a5;
      __int16 v42 = 2080;
      uint64_t v43 = a3;
      __int16 v44 = 2080;
      uint64_t v45 = v28;
      _os_log_debug_impl(&dword_1A609F000, v27, OS_LOG_TYPE_DEBUG, "(%d) %s: %s", buf, 0x1Cu);
      unint64_t v29 = v33;
      if (!v33) {
        goto LABEL_37;
      }
      goto LABEL_35;
    case 1:
      long long v27 = qword_1EB5EE810;
      if (!qword_1EB5EE810 || !os_log_type_enabled((os_log_t)qword_1EB5EE810, OS_LOG_TYPE_DEBUG)) {
        break;
      }
      long long v28 = __p;
      if (v35 < 0) {
        long long v28 = (void **)__p[0];
      }
      goto LABEL_45;
    case 2:
      long long v27 = qword_1EB5EE808;
      if (qword_1EB5EE808)
      {
        if (os_log_type_enabled((os_log_t)qword_1EB5EE808, OS_LOG_TYPE_DEBUG))
        {
          long long v28 = __p;
          if (v35 < 0) {
            long long v28 = (void **)__p[0];
          }
          goto LABEL_45;
        }
      }
      break;
  }
  unint64_t v29 = v33;
  if (!v33) {
    goto LABEL_37;
  }
LABEL_35:
  if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_37:
  if (SHIBYTE(v35) < 0) {
    operator delete(__p[0]);
  }
  MEMORY[0x1A6274830](v36);
  long long v23 = v39;
  if (v39) {
    goto LABEL_40;
  }
}

void sub_1A60B812C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a24 < 0)
  {
    operator delete(__p);
    MEMORY[0x1A6274830](&a25);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1A6274830](&a25);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  long long v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1A60B837C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1A62751A0](v1);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrintBBUHelper(abm::debug *this, void *a2, uint64_t a3, const char *a4, ...)
{
  va_start(va, a4);
  abm::debug::handleDebugPrint(20, 3, &unk_1A61FC72E, (uint64_t)"%s", (uint64_t)va);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A62751A0](a1 + 112);
  return a1;
}

void *abm::TapToRadarTask::getName(abm::TapToRadarTask *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_1, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&_MergedGlobals_1))
  {
    return qword_1EB5EE828;
  }
  unsigned int v3 = *((_DWORD *)this + 26) - 1;
  if (v3 > 9) {
    uint64_t v4 = "invalid";
  }
  else {
    uint64_t v4 = off_1E5C46CC8[v3];
  }
  std::string::basic_string[abi:ne180100]<0>(qword_1EB5EE828, v4);
  __cxa_atexit(MEMORY[0x1E4FBA210], qword_1EB5EE828, &dword_1A609F000);
  __cxa_guard_release(&_MergedGlobals_1);
  return qword_1EB5EE828;
}

void sub_1A60B85B4(_Unwind_Exception *a1)
{
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t abm::TapToRadarTask::TapToRadarTask(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  size_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v11 = *a3;
  long long v12 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a4[1];
  uint64_t v9 = *a4;
  xpc_object_t v10 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  abm::HelperTask::HelperTask(a1, a2, &v11, &v9);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v7 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)a1 = &unk_1EFB091D0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return a1;
}

void sub_1A60B8770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void abm::TapToRadarTask::~TapToRadarTask(abm::TapToRadarTask *this)
{
  *(void *)this = &unk_1EFB091D0;
  uint64_t v2 = (void *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v2) {
    operator delete(v2);
  }
  unsigned int v3 = (void *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v3) {
    operator delete(v3);
  }
  size_t v4 = (void *)*((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v4) {
    operator delete(v4);
  }
  size_t v5 = (void *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v9) {
    operator delete(v9);
  }
  *(void *)this = &unk_1EFB0FCB8;
  xpc_object_t v10 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = *((void *)this + 14);
  if (v11) {
    dispatch_release(v11);
  }
  *(void *)this = &unk_1EFB09350;
  MEMORY[0x1A6274710]((char *)this + 8);
  long long v12 = *((void *)this + 12);
  if (v12) {
    dispatch_release(v12);
  }
  uint64_t v13 = *((void *)this + 11);
  if (v13) {
    dispatch_release(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
}

{
  void *v1;
  uint64_t vars8;

  abm::TapToRadarTask::~TapToRadarTask(this);

  operator delete(v1);
}

void abm::TapToRadarTask::init_sync(abm::TapToRadarTask *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v6) {
      goto LABEL_19;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v6) {
      goto LABEL_19;
    }
  }
  uint64_t v7 = std::__shared_weak_count::lock(v6);
  size_t v17 = v7;
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *((void *)this + 15);
    uint64_t v16 = v9;
    if (v9)
    {
      abm::TapToRadarTask::populateComponents_sync((NSObject **)this);
      v15[23] = 19;
      strcpy(v15, "CommandPrepareRadar");
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3321888768;
      aBlock[2] = ___ZN3abm14TapToRadarTask9init_syncEv_block_invoke;
      aBlock[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE_e242_v48__0_ServerClientState__shared_ptr_TelephonyXPC::ServerClientState::State____State_____shared_weak_count___8_dict__object__v__24_callback_void_____int__xpc::dict____block_void_____int__xpc::dict_______queue__object___dispatch_object_s____32l;
      aBlock[4] = this;
      aBlock[5] = v3;
      uint64_t v13 = v5;
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      xpc_object_t v10 = _Block_copy(aBlock);
      uint64_t v11 = *((void *)this + 11);
      if (v11) {
        dispatch_retain(v11);
      }
      v14[0] = v10;
      v14[1] = v11;
      abm::HelperServerInternal::setCommandHandler(v9, (uint64_t)v15, (uint64_t)v14);
      if (v11) {
        dispatch_release(v11);
      }
      if (v10) {
        _Block_release(v10);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_19:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1A60B8AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(int,xpc::dict)>)>::~callback((uint64_t)&a17);
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v18 - 64);
    std::__shared_weak_count::__release_weak(v17);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v18 - 64);
  std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(a1);
}

void abm::TapToRadarTask::populateComponents_sync(NSObject **this)
{
  memset(__s, 170, sizeof(__s));
  uint64_t v2 = (capabilities::abs *)capabilities::abs::radarComponentName((uint64_t *)__s, (capabilities::abs *)this);
  memset(v51, 170, sizeof(v51));
  uint64_t v3 = (capabilities::abs *)capabilities::abs::radarComponentVersion((uint64_t *)v51, v2);
  memset(__p, 170, sizeof(__p));
  capabilities::abs::radarComponentID((uint64_t *)__p, v3);
  size_t v4 = operator new(0x18uLL);
  v4->isa = (Class)"Telephony";
  v4[1].isa = (Class)"iOS";
  v4[2].isa = (Class)"230851";
  size_t v5 = this[24];
  this[24] = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = operator new(0x18uLL);
  v6->isa = (Class)"Telephony";
  v6[1].isa = (Class)"iOS";
  v6[2].isa = (Class)"230851";
  uint64_t v7 = this[17];
  this[17] = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = operator new(0x18uLL);
  v8->isa = (Class)"Telephony";
  v8[1].isa = (Class)"iOS";
  v8[2].isa = (Class)"230851";
  uint64_t v9 = this[18];
  this[18] = v8;
  if (v9) {
    operator delete(v9);
  }
  xpc_object_t v10 = operator new(0x18uLL);
  v10->isa = (Class)"Purple Baseband Updater";
  v10[1].isa = (Class)"1.0";
  v10[2].isa = (Class)"250082";
  uint64_t v11 = this[21];
  this[21] = v10;
  if (v11) {
    operator delete(v11);
  }
  long long v12 = operator new(0x18uLL);
  v12->isa = (Class)"Telephony";
  v12[1].isa = (Class)"iOS";
  v12[2].isa = (Class)"230851";
  uint64_t v13 = this[22];
  this[22] = v12;
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = operator new(0x18uLL);
  v14->isa = (Class)"Telephony";
  v14[1].isa = (Class)"iOS";
  v14[2].isa = (Class)"230851";
  uint64_t v15 = this[23];
  this[23] = v14;
  if (v15) {
    operator delete(v15);
  }
  if (__s[23] < 0)
  {
    if (!*(void *)&__s[8]) {
      goto LABEL_60;
    }
    uint64_t v16 = *(char **)__s;
    size_t v17 = strlen(*(const char **)__s);
    if (v17 < 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_16;
    }
LABEL_21:
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (!__s[23]) {
    goto LABEL_60;
  }
  uint64_t v16 = __s;
  size_t v17 = strlen(__s);
  if (v17 >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_21;
  }
LABEL_16:
  size_t v18 = v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    xpc_object_t v19 = operator new(v20 + 1);
    __dst[1] = v18;
    int64_t v49 = v21 | 0x8000000000000000;
    __dst[0] = v19;
    goto LABEL_25;
  }
  HIBYTE(v49) = v17;
  xpc_object_t v19 = __dst;
  if (v17) {
LABEL_25:
  }
    memmove(v19, v16, v18);
  *((unsigned char *)v19 + v18) = 0;
  v47[23] = 7;
  strcpy(v47, "Unknown");
  int v22 = SHIBYTE(v49);
  long long v23 = (void *)__dst[0];
  if (v49 >= 0) {
    uint64_t v24 = (const char *)__dst;
  }
  else {
    uint64_t v24 = (const char *)__dst[0];
  }
  int v25 = strcasecmp(v24, v47);
  int v26 = v25;
  if ((v22 & 0x80000000) == 0)
  {
    if (v25) {
      goto LABEL_31;
    }
LABEL_60:
    uint64_t v45 = this[5];
    if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
      goto LABEL_61;
    }
    LOWORD(__dst[0]) = 0;
    uint64_t v46 = "Unknown Radar component for this device";
    goto LABEL_71;
  }
  operator delete(v23);
  if (!v26) {
    goto LABEL_60;
  }
LABEL_31:
  long long v27 = (void *)HIBYTE(v51[2]);
  char v28 = HIBYTE(v51[2]);
  if (SHIBYTE(v51[2]) < 0) {
    long long v27 = v51[1];
  }
  if (!v27
    || ((HIBYTE(v49) = 7, strcpy((char *)__dst, "Unknown"), unint64_t v29 = (void **)v51[0], SHIBYTE(v51[2]) >= 0)
      ? (unint64_t v30 = v51)
      : (unint64_t v30 = (void **)v51[0]),
        !strcasecmp((const char *)v30, (const char *)__dst)))
  {
    uint64_t v45 = this[5];
    if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
      goto LABEL_61;
    }
    LOWORD(__dst[0]) = 0;
    uint64_t v46 = "Unknown Radar component version for this device";
LABEL_71:
    _os_log_error_impl(&dword_1A609F000, v45, OS_LOG_TYPE_ERROR, v46, (uint8_t *)__dst, 2u);
    goto LABEL_61;
  }
  unint64_t v31 = (void *)HIBYTE(__p[2]);
  char v32 = HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) < 0) {
    unint64_t v31 = __p[1];
  }
  if (!v31
    || ((HIBYTE(v49) = 7, strcpy((char *)__dst, "Unknown"), uint64_t v33 = (void **)__p[0], SHIBYTE(__p[2]) >= 0)
      ? (std::string::size_type v34 = __p)
      : (std::string::size_type v34 = (void **)__p[0]),
        !strcasecmp((const char *)v34, (const char *)__dst)))
  {
    uint64_t v45 = this[5];
    if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
      goto LABEL_61;
    }
    LOWORD(__dst[0]) = 0;
    uint64_t v46 = "Unknown Radar component ID for this device";
    goto LABEL_71;
  }
  int v35 = __s[23];
  unint64_t v36 = *(char **)__s;
  unint64_t v37 = operator new(0x18uLL);
  std::string::size_type v38 = __s;
  if (v35 < 0) {
    std::string::size_type v38 = v36;
  }
  v37->isa = (Class)v38;
  v37[1].isa = (Class)v30;
  v37[2].isa = (Class)v34;
  std::string::pointer v39 = this[20];
  this[20] = v37;
  if (v39)
  {
    operator delete(v39);
    LOBYTE(v35) = __s[23];
    unint64_t v36 = *(char **)__s;
    char v28 = HIBYTE(v51[2]);
    unint64_t v29 = (void **)v51[0];
    char v32 = HIBYTE(__p[2]);
    uint64_t v33 = (void **)__p[0];
  }
  uint64_t v40 = operator new(0x18uLL);
  int v41 = __p;
  if (v32 < 0) {
    int v41 = v33;
  }
  __int16 v42 = v51;
  if (v28 < 0) {
    __int16 v42 = v29;
  }
  uint64_t v43 = __s;
  if ((v35 & 0x80u) != 0) {
    uint64_t v43 = v36;
  }
  v40->isa = (Class)v43;
  v40[1].isa = (Class)v42;
  v40[2].isa = (Class)v41;
  __int16 v44 = this[19];
  this[19] = v40;
  if (v44) {
    operator delete(v44);
  }
LABEL_61:
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v51[2]) & 0x80000000) == 0)
    {
LABEL_63:
      if ((__s[23] & 0x80000000) == 0) {
        return;
      }
LABEL_67:
      operator delete(*(void **)__s);
      return;
    }
  }
  else if ((SHIBYTE(v51[2]) & 0x80000000) == 0)
  {
    goto LABEL_63;
  }
  operator delete(v51[0]);
  if (__s[23] < 0) {
    goto LABEL_67;
  }
}

void sub_1A60B9008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a27 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a27 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a22);
  if ((a33 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a28);
  _Unwind_Resume(exception_object);
}

void sub_1A60B908C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    JUMPOUT(0x1A60B907CLL);
  }
  JUMPOUT(0x1A60B9044);
}

void ___ZN3abm14TapToRadarTask9init_syncEv_block_invoke(void *a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1[4];
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    uint64_t v67 = std::__shared_weak_count::lock(v6);
    if (!v67) {
      return;
    }
    uint64_t v66 = a1[5];
    if (v66)
    {
      uint64_t v9 = *(NSObject **)(v5 + 112);
      if (v9)
      {
        dispatch_retain(*(dispatch_object_t *)(v5 + 112));
        dispatch_group_enter(v9);
      }
      xpc_object_t v10 = xpc_null_create();
      uint64_t v11 = MEMORY[0x1A6275E60](*a3);
      uint64_t v12 = MEMORY[0x1E4F14590];
      if (v11 == MEMORY[0x1E4F14590]
        && ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild()))
      {
        xpc_object_t value = xpc_dictionary_get_value(*a3, "RadarType");
        block[0] = (uint64_t)value;
        if (value) {
          xpc_retain(value);
        }
        else {
          block[0] = (uint64_t)xpc_null_create();
        }
        unsigned int v19 = xpc::dyn_cast_or_default();
        xpc_release((xpc_object_t)block[0]);
        memset(&v65, 170, sizeof(v65));
        xpc_object_t v20 = xpc_dictionary_get_value(*a3, "RadarTitle");
        block[0] = (uint64_t)v20;
        if (v20) {
          xpc_retain(v20);
        }
        else {
          block[0] = (uint64_t)xpc_null_create();
        }
        xpc::dyn_cast_or_default();
        xpc_release((xpc_object_t)block[0]);
        memset(&v64, 170, sizeof(v64));
        xpc_object_t v21 = xpc_dictionary_get_value(*a3, "RadarMessage");
        block[0] = (uint64_t)v21;
        if (v21) {
          xpc_retain(v21);
        }
        else {
          block[0] = (uint64_t)xpc_null_create();
        }
        xpc::dyn_cast_or_default();
        xpc_release((xpc_object_t)block[0]);
        memset(&__p, 170, sizeof(__p));
        xpc_object_t v22 = xpc_dictionary_get_value(*a3, "SysdiagnosePath");
        block[0] = (uint64_t)v22;
        if (v22) {
          xpc_retain(v22);
        }
        else {
          block[0] = (uint64_t)xpc_null_create();
        }
        xpc::dyn_cast_or_default();
        xpc_release((xpc_object_t)block[0]);
        xpc_object_t v62 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        xpc_object_t v23 = xpc_dictionary_get_value(*a3, "RadarAttachments");
        xpc_object_t v24 = v23;
        if (v23) {
          xpc_retain(v23);
        }
        else {
          xpc_object_t v24 = xpc_null_create();
        }
        xpc_object_t v25 = xpc_null_create();
        xpc_object_t v62 = v24;
        uint64_t v26 = MEMORY[0x1E4F14568];
        if (v24 && MEMORY[0x1A6275E60](v24) == v26) {
          xpc_retain(v24);
        }
        else {
          xpc_object_t v62 = xpc_null_create();
        }
        if (MEMORY[0x1A6275E60]() != v26)
        {
          if (v25)
          {
            xpc_retain(v25);
            xpc_object_t v27 = v25;
          }
          else
          {
            xpc_object_t v27 = xpc_null_create();
          }
          xpc_object_t v28 = v62;
          xpc_object_t v62 = v27;
          xpc_release(v28);
        }
        xpc_release(v25);
        xpc_release(v24);
        xpc_object_t v29 = xpc_dictionary_get_value(*a3, "RadarAction");
        block[0] = (uint64_t)v29;
        if (v29) {
          xpc_retain(v29);
        }
        else {
          block[0] = (uint64_t)xpc_null_create();
        }
        int v30 = xpc::dyn_cast_or_default();
        xpc_release((xpc_object_t)block[0]);
        unint64_t v31 = *(NSObject **)(v5 + 40);
        xpc_object_t v32 = v62;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          if (MEMORY[0x1A6275E60](v62) == v26) {
            size_t count = xpc_array_get_count(v62);
          }
          else {
            size_t count = 0;
          }
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(block[0]) = 67109890;
          HIDWORD(block[0]) = v19;
          LOWORD(block[1]) = 1024;
          *(_DWORD *)((char *)&block[1] + 2) = v30;
          HIWORD(block[1]) = 2048;
          block[2] = count;
          LOWORD(v69) = 2080;
          *(void *)((char *)&v69 + 2) = p_p;
          _os_log_impl(&dword_1A609F000, v31, OS_LOG_TYPE_DEFAULT, "#I Type = %d, Action = %d, Num of attachements: %zu, Sysdiagnose: %s", (uint8_t *)block, 0x22u);
        }
        if (MEMORY[0x1A6275E60](v62) == v26 && xpc_array_get_count(v62)) {
          goto LABEL_70;
        }
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        if (size)
        {
LABEL_70:
          if (abm::TapToRadarTask::validateAttachments_sync((abm::TapToRadarTask *)v5, &v62))
          {
            xpc_object_t v36 = xpc_dictionary_create(0, 0, 0);
            if (v36 || (xpc_object_t v36 = xpc_null_create()) != 0)
            {
              if (MEMORY[0x1A6275E60](v36) == v12)
              {
                xpc_retain(v36);
                xpc_object_t v37 = v36;
              }
              else
              {
                xpc_object_t v37 = xpc_null_create();
              }
            }
            else
            {
              xpc_object_t v37 = xpc_null_create();
              xpc_object_t v36 = 0;
            }
            xpc_release(v36);
            xpc_object_t v42 = xpc_null_create();
            xpc_release(v10);
            xpc_release(v42);
            if (abm::TapToRadarTask::checkAttachmentForRadarType_sync((capabilities::diag *)v5, v19, &v62))
            {
              xpc_object_t v43 = xpc_BOOL_create(1);
              if (!v43) {
                xpc_object_t v43 = xpc_null_create();
              }
              xpc_dictionary_set_value(v37, "AllRequiredLogsFound", v43);
              xpc_object_t v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
              *(void *)&long long v45 = 0xAAAAAAAAAAAAAAAALL;
              *((void *)&v45 + 1) = 0xAAAAAAAAAAAAAAAALL;
              long long v78 = v45;
              long long v79 = v45;
              long long v77 = v45;
              uint64_t v46 = *(NSObject **)(v5 + 40);
              os_signpost_id_t v47 = os_signpost_id_generate(v46);
              if (v47 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v48 = *(NSObject **)(v5 + 40);
                if (os_signpost_enabled(v48))
                {
                  if (v19 > 7) {
                    int64_t v49 = "Invalid";
                  }
                  else {
                    int64_t v49 = off_1E5C46D18[v19];
                  }
                  uint64_t v54 = &v65;
                  if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    uint64_t v54 = (std::string *)v65.__r_.__value_.__r.__words[0];
                  }
                  LODWORD(block[0]) = 136315394;
                  *(uint64_t *)((char *)block + 4) = (uint64_t)v49;
                  WORD2(block[1]) = 2080;
                  *(uint64_t *)((char *)&block[1] + 6) = (uint64_t)v54;
                  _os_signpost_emit_with_name_impl(&dword_1A609F000, v48, OS_SIGNPOST_INTERVAL_BEGIN, v47, "CellularTapToRadar", "Type=%{signpost.description:attribute}s, Title=%{signpost.description:attribute}s,", (uint8_t *)block, 0x16u);
                }
              }
              block[0] = (uint64_t)&unk_1EFB092A8;
              *(void *)&long long v69 = block;
              *(void *)&long long v77 = v47;
              *((void *)&v77 + 1) = os_retain(v46);
              if ((void)v69)
              {
                if ((uint64_t *)v69 == block)
                {
                  *((void *)&v79 + 1) = &v78;
                  (*(void (**)(uint64_t *))(block[0] + 24))(block);
                }
                else
                {
                  *((void *)&v79 + 1) = v69;
                  *(void *)&long long v69 = 0;
                }
              }
              else
              {
                *((void *)&v79 + 1) = 0;
              }
              if ((uint64_t *)v69 == block)
              {
                (*(void (**)(uint64_t *))(block[0] + 32))(block);
              }
              else if ((void)v69)
              {
                (*(void (**)(void))(*(void *)v69 + 40))();
              }
              if (v30 == 1)
              {
                memset(block, 170, sizeof(block));
                abm::TapToRadarTask::prepareRadar_sync(v19, (uint64_t)&v64, &v62, (uint64_t)&__p, (uint64_t)block);
                abm::TapToRadarTask::fileRadar_sync(v5, v55, (uint64_t)&v65, block, &v62, (uint64_t)&__p);
                if (SHIBYTE(block[2]) < 0) {
                  operator delete((void *)block[0]);
                }
              }
              else if (!v30)
              {
                ctu::os::signpost_interval::signpost_interval(block, &v77);
                int v71 = v19;
                if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v72, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v72 = v65;
                }
                uint64_t v73 = v5;
                if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v74, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v74 = v64;
                }
                xpc::array::array(&v75, v62);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v76, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v76 = __p;
                }
                _ZN8dispatch5asyncIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3EEvRKNS_5queueEOT_(*(NSObject **)(v5 + 88), (uint64_t)block);
                _ZZZN3abm14TapToRadarTask9init_syncEvEUb_EN3__3D1Ev((uint64_t)block);
              }
              ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)&v77);
            }
            else
            {
              unint64_t v50 = *(NSObject **)(v5 + 40);
              if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
              {
                LODWORD(block[0]) = 67109120;
                HIDWORD(block[0]) = v19;
                _os_log_error_impl(&dword_1A609F000, v50, OS_LOG_TYPE_ERROR, "required log missing for this type[%d]", (uint8_t *)block, 8u);
              }
              xpc_object_t v51 = xpc_BOOL_create(0);
              if (!v51) {
                xpc_object_t v51 = xpc_null_create();
              }
              xpc_dictionary_set_value(v37, "AllRequiredLogsFound", v51);
              xpc_object_t v52 = xpc_null_create();
              xpc_release(v51);
              xpc_release(v52);
            }
            if (v37)
            {
              xpc_retain(v37);
              xpc_object_t v56 = v37;
            }
            else
            {
              xpc_object_t v56 = xpc_null_create();
            }
            if (*(void *)a4) {
              uint64_t v57 = _Block_copy(*(const void **)a4);
            }
            else {
              uint64_t v57 = 0;
            }
            uint64_t v58 = *(NSObject **)(a4 + 8);
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 3321888768;
            block[2] = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke;
            *(void *)&long long v69 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
            if (v57) {
              uint64_t v59 = _Block_copy(v57);
            }
            else {
              uint64_t v59 = 0;
            }
            int v71 = 0;
            *((void *)&v69 + 1) = v59;
            xpc_object_t object = v56;
            if (v56) {
              xpc_retain(v56);
            }
            else {
              xpc_object_t object = xpc_null_create();
            }
            dispatch_async(v58, block);
            xpc_release(object);
            xpc_object_t object = 0;
            if (*((void *)&v69 + 1)) {
              _Block_release(*((const void **)&v69 + 1));
            }
            if (v57) {
              _Block_release(v57);
            }
            xpc_release(v56);
            xpc_release(v62);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_141:
                if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_142:
                  xpc_object_t v10 = v37;
                  goto LABEL_26;
                }
LABEL_145:
                operator delete(v65.__r_.__value_.__l.__data_);
                goto LABEL_142;
              }
            }
            else if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_141;
            }
            operator delete(v64.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_142;
            }
            goto LABEL_145;
          }
        }
        std::string::size_type v38 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          if (MEMORY[0x1A6275E60](v32) == v26) {
            size_t v53 = xpc_array_get_count(v32);
          }
          else {
            size_t v53 = 0;
          }
          LODWORD(block[0]) = 134217984;
          *(uint64_t *)((char *)block + 4) = v53;
          _os_log_error_impl(&dword_1A609F000, v38, OS_LOG_TYPE_ERROR, "Attachment error size: %zu", (uint8_t *)block, 0xCu);
          if (v10)
          {
LABEL_77:
            xpc_retain(v10);
            xpc_object_t v39 = v10;
            uint64_t v40 = *(const void **)a4;
            if (*(void *)a4)
            {
LABEL_78:
              int v41 = _Block_copy(v40);
              goto LABEL_150;
            }
LABEL_149:
            int v41 = 0;
LABEL_150:
            unint64_t v60 = *(NSObject **)(a4 + 8);
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 3321888768;
            block[2] = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke;
            *(void *)&long long v69 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
            if (v41)
            {
              float64x2x2_t v61 = _Block_copy(v41);
              int v71 = -534716414;
              *((void *)&v69 + 1) = v61;
              xpc_object_t object = v39;
              if (v39)
              {
LABEL_152:
                xpc_retain(v39);
                goto LABEL_155;
              }
            }
            else
            {
              int v71 = -534716414;
              *((void *)&v69 + 1) = 0;
              xpc_object_t object = v39;
              if (v39) {
                goto LABEL_152;
              }
            }
            xpc_object_t object = xpc_null_create();
LABEL_155:
            dispatch_async(v60, block);
            xpc_release(object);
            xpc_object_t object = 0;
            if (*((void *)&v69 + 1)) {
              _Block_release(*((const void **)&v69 + 1));
            }
            if (v41) {
              _Block_release(v41);
            }
            xpc_release(v39);
            xpc_release(v32);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_161:
                if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_26;
                }
LABEL_165:
                operator delete(v65.__r_.__value_.__l.__data_);
LABEL_26:
                xpc_release(v10);
                if (v9)
                {
                  dispatch_group_leave(v9);
                  dispatch_release(v9);
                }
                goto LABEL_28;
              }
            }
            else if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_161;
            }
            operator delete(v64.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_26;
            }
            goto LABEL_165;
          }
        }
        else if (v10)
        {
          goto LABEL_77;
        }
        xpc_object_t v39 = xpc_null_create();
        uint64_t v40 = *(const void **)a4;
        if (*(void *)a4) {
          goto LABEL_78;
        }
        goto LABEL_149;
      }
      if (v10)
      {
        xpc_retain(v10);
        xpc_object_t v13 = v10;
        uint64_t v14 = *(const void **)a4;
        if (*(void *)a4)
        {
LABEL_9:
          uint64_t v15 = _Block_copy(v14);
          goto LABEL_16;
        }
      }
      else
      {
        xpc_object_t v13 = xpc_null_create();
        uint64_t v14 = *(const void **)a4;
        if (*(void *)a4) {
          goto LABEL_9;
        }
      }
      uint64_t v15 = 0;
LABEL_16:
      size_t v17 = *(NSObject **)(a4 + 8);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3321888768;
      block[2] = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke;
      *(void *)&long long v69 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
      if (v15)
      {
        int v71 = -534716414;
        *((void *)&v69 + 1) = _Block_copy(v15);
        xpc_object_t object = v13;
        if (v13)
        {
LABEL_18:
          xpc_retain(v13);
LABEL_21:
          dispatch_async(v17, block);
          xpc_release(object);
          xpc_object_t object = 0;
          if (*((void *)&v69 + 1)) {
            _Block_release(*((const void **)&v69 + 1));
          }
          if (v15) {
            _Block_release(v15);
          }
          xpc_release(v13);
          goto LABEL_26;
        }
      }
      else
      {
        int v71 = -534716414;
        *((void *)&v69 + 1) = 0;
        xpc_object_t object = v13;
        if (v13) {
          goto LABEL_18;
        }
      }
      xpc_object_t object = xpc_null_create();
      goto LABEL_21;
    }
  }
LABEL_28:
  size_t v18 = v67;
  if (v67)
  {
    if (!atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1A60B9D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,xpc_object_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,xpc_object_t object)
{
  xpc_release(object);
  xpc_object_t object = 0;
  if (a52 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)&a30);
  ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)(v55 - 144));
  xpc_release(a9);
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  xpc_release(v54);
  if (v53)
  {
    dispatch_group_leave(v53);
    dispatch_release(v53);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t abm::TapToRadarTask::validateAttachments_sync(abm::TapToRadarTask *this, xpc_object_t *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
LABEL_4:
    xpc_retain(v4);
    uint64_t v5 = v4;
    goto LABEL_5;
  }
  xpc_object_t v4 = xpc_null_create();
  if (v4) {
    goto LABEL_4;
  }
  xpc_object_t v4 = xpc_null_create();
  uint64_t v5 = 0;
LABEL_5:
  xpc_release(v5);
  xpc_object_t v6 = *a2;
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_object_t v6 = xpc_null_create();
  }
  if (MEMORY[0x1A6275E60](*a2) == MEMORY[0x1E4F14568])
  {
    size_t count = xpc_array_get_count(*a2);
    if (v6) {
      goto LABEL_10;
    }
LABEL_12:
    xpc_object_t v8 = xpc_null_create();
    goto LABEL_13;
  }
  size_t count = 0;
  if (!v6) {
    goto LABEL_12;
  }
LABEL_10:
  xpc_retain(v6);
  xpc_object_t v8 = v6;
LABEL_13:
  xpc_release(v6);
  if (count || v4 != v8)
  {
    if (v4 == v8)
    {
      size_t v10 = 0;
      while (1)
      {
        memset(__p, 170, sizeof(__p));
        xpc_object_t value = xpc_array_get_value(v4, v10);
        *(void *)&object.st_dev = value;
        if (value) {
          xpc_retain(value);
        }
        else {
          *(void *)&object.st_dev = xpc_null_create();
        }
        xpc::dyn_cast_or_default();
        xpc_release(*(xpc_object_t *)&object.st_dev);
        uint64_t v12 = (void *)HIBYTE(__p[2]);
        if (SHIBYTE(__p[2]) < 0) {
          uint64_t v12 = __p[1];
        }
        if (!v12) {
          break;
        }
        v13.tv_sec = 0xAAAAAAAAAAAAAAAALL;
        v13.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
        *(timespec *)&object.st_blkstd::string::size_type size = v13;
        *(timespec *)object.st_qspare = v13;
        object.st_birthtimespec = v13;
        *(timespec *)&object.st_std::string::size_type size = v13;
        object.st_mtimespec = v13;
        object.st_ctimespec = v13;
        *(timespec *)&object.st_uid = v13;
        object.st_atimespec = v13;
        *(timespec *)&object.st_dev = v13;
        uint64_t v14 = SHIBYTE(__p[2]) >= 0 ? (const char *)__p : (const char *)__p[0];
        if (stat(v14, &object)) {
          break;
        }
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        if (count == ++v10) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      for (size_t i = 0; ; ++i)
      {
        memset(__p, 170, sizeof(__p));
        xpc_object_t v16 = xpc_array_get_value(v4, i);
        *(void *)&object.st_dev = v16;
        if (v16) {
          xpc_retain(v16);
        }
        else {
          *(void *)&object.st_dev = xpc_null_create();
        }
        xpc::dyn_cast_or_default();
        xpc_release(*(xpc_object_t *)&object.st_dev);
        size_t v17 = (void *)HIBYTE(__p[2]);
        if (SHIBYTE(__p[2]) < 0) {
          size_t v17 = __p[1];
        }
        if (!v17) {
          break;
        }
        v18.tv_sec = 0xAAAAAAAAAAAAAAAALL;
        v18.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
        *(timespec *)&object.st_blkstd::string::size_type size = v18;
        *(timespec *)object.st_qspare = v18;
        object.st_birthtimespec = v18;
        *(timespec *)&object.st_std::string::size_type size = v18;
        object.st_mtimespec = v18;
        object.st_ctimespec = v18;
        *(timespec *)&object.st_uid = v18;
        object.st_atimespec = v18;
        *(timespec *)&object.st_dev = v18;
        unsigned int v19 = SHIBYTE(__p[2]) >= 0 ? (const char *)__p : (const char *)__p[0];
        if (stat(v19, &object)) {
          break;
        }
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
      }
    }
    xpc_object_t v20 = *((void *)this + 5);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      if (SHIBYTE(__p[2]) >= 0) {
        xpc_object_t v22 = __p;
      }
      else {
        xpc_object_t v22 = (void **)__p[0];
      }
      xpc_object_t v23 = __error();
      xpc_object_t v24 = strerror(*v23);
      object.st_dev = 136315394;
      *(void *)&object.st_mode = v22;
      WORD2(object.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&object.st_ino + 6) = (__darwin_ino64_t)v24;
      _os_log_error_impl(&dword_1A609F000, v20, OS_LOG_TYPE_ERROR, "file [%s] error: %s", (uint8_t *)&object, 0x16u);
      if ((HIBYTE(__p[2]) & 0x80) == 0) {
        goto LABEL_48;
      }
    }
    else if ((HIBYTE(__p[2]) & 0x80) == 0)
    {
LABEL_48:
      uint64_t v9 = 0;
      goto LABEL_49;
    }
    operator delete(__p[0]);
    goto LABEL_48;
  }
LABEL_15:
  uint64_t v9 = 1;
LABEL_49:
  xpc_release(v8);
  xpc_release(v4);
  return v9;
}

void sub_1A60BA390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, xpc_object_t object)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  xpc_release(v17);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

BOOL abm::TapToRadarTask::checkAttachmentForRadarType_sync(capabilities::diag *a1, unsigned int a2, xpc_object_t *a3)
{
  v147 = a3;
  v144 = a1;
  uint64_t v181 = *MEMORY[0x1E4F143B8];
  v165 = 0;
  v166 = 0;
  unint64_t v167 = 0;
  v163 = 0;
  long long v164 = 0uLL;
  if (a2 <= 5)
  {
    if (((1 << a2) & 0x26) != 0)
    {
      BOOL v162 = 0;
      uint64_t v3 = (capabilities::radio *)capabilities::diag::supportsQDSS(a1);
      if (!v3) {
        goto LABEL_77;
      }
      v178[0].__locale_ = (std::locale::__imp *)0xAAAAAAAAAAAAAAAALL;
      v178[1].__locale_ = (std::locale::__imp *)0xAAAAAAAAAAAAAAAALL;
      strcpy(__p, "TapToRadar");
      abm::client::CreateManager();
      xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
      uint64_t v5 = MEMORY[0x1E4F14590];
      if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A6275E60](v4) == v5)
        {
          xpc_retain(v4);
          xpc_object_t v6 = v4;
        }
        else
        {
          xpc_object_t v6 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v6 = xpc_null_create();
        xpc_object_t v4 = 0;
      }
      xpc_release(v4);
      xpc_object_t v40 = xpc_string_create("BasebandTrace");
      if (!v40) {
        xpc_object_t v40 = xpc_null_create();
      }
      xpc_dictionary_set_value(v6, "kKeyTraceName", v40);
      xpc_object_t v41 = xpc_null_create();
      xpc_release(v40);
      xpc_release(v41);
      xpc_object_t v42 = xpc_string_create("High_Tput");
      if (!v42) {
        xpc_object_t v42 = xpc_null_create();
      }
      xpc_dictionary_set_value(v6, "kKeyTracePropertyName", v42);
      xpc_object_t v43 = xpc_null_create();
      xpc_release(v42);
      xpc_release(v43);
      v158[0] = xpc_null_create();
      *(void *)&long long v44 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v44 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)std::string __p = v44;
      *(_OWORD *)&__p[16] = v44;
      locale = v178[0].__locale_;
      v161 = v178[1].__locale_;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v178[1].__locale_ + 1, 1uLL, memory_order_relaxed);
      *(void *)v168 = operator new(0x20uLL);
      *(_OWORD *)&v168[8] = xmmword_1A61F6FD0;
      strcpy(*(char **)v168, "kCommandGetTraceProperty");
      abm::client::PerformCommand();
      operator delete(*(void **)v168);
      if (atomic_fetch_add((atomic_ullong *volatile)v178[1].__locale_ + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        xpc_object_t v45 = v158[0];
        if (v158[0]) {
          goto LABEL_62;
        }
      }
      else
      {
        (*(void (**)(std::locale::__imp *))(*(void *)v178[1].__locale_ + 16))(v178[1].__locale_);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v178[1].__locale_);
        xpc_object_t v45 = v158[0];
        if (v158[0]) {
          goto LABEL_62;
        }
      }
      xpc_object_t v45 = xpc_null_create();
      if (!v45)
      {
        xpc_object_t v46 = xpc_null_create();
        xpc_object_t v45 = 0;
        goto LABEL_65;
      }
LABEL_62:
      if (MEMORY[0x1A6275E60](v45) == v5)
      {
        xpc_retain(v45);
        xpc_object_t v46 = v45;
      }
      else
      {
        xpc_object_t v46 = xpc_null_create();
      }
LABEL_65:
      xpc_release(v45);
      if (!*(_DWORD *)__p && MEMORY[0x1A6275E60](v46) == v5)
      {
        memset(v168, 170, 24);
        xpc_object_t value = xpc_dictionary_get_value(v46, "kKeyTracePropertyValue");
        xpc_object_t object = value;
        if (value) {
          xpc_retain(value);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        xpc::dyn_cast_or_default();
        xpc_release(object);
        util::convert<BOOL>((const std::string *)v168, &v162, 0);
        if ((v168[23] & 0x80000000) != 0) {
          operator delete(*(void **)v168);
        }
      }
      xpc_release(v46);
      if ((__p[31] & 0x80000000) != 0) {
        operator delete(*(void **)&__p[8]);
      }
      xpc_release(v6);
      unint64_t v48 = v178[1].__locale_;
      if (v178[1].__locale_ && !atomic_fetch_add((atomic_ullong *volatile)v178[1].__locale_ + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(std::locale::__imp *))(*(void *)v48 + 16))(v48);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v48);
      }
LABEL_77:
      BOOL v49 = v162;
      *(void *)&v168[8] = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&v168[16] = 0xAAAAAAAAAAAAAALL;
      *(void *)v168 = 0xAAAAAAAAAAAAAA00;
      int v50 = capabilities::radio::vendor(v3);
      if ((v50 - 2) >= 2)
      {
        if (v50 != 1) {
          goto LABEL_83;
        }
        xpc_object_t v51 = abm::trace::kEURQDSSTraceSnapshotDirectorySuffix;
        if (!v49) {
          xpc_object_t v51 = abm::trace::kEURTraceSnapshotDirectorySuffix;
        }
      }
      else
      {
        xpc_object_t v51 = abm::trace::kICETraceSnapshotDirectorySuffix;
      }
      std::string::__assign_external((std::string *)v168, *v51);
LABEL_83:
      int v52 = v168[23];
      if (v168[23] >= 0) {
        size_t v53 = v168[23];
      }
      else {
        size_t v53 = *(void *)&v168[8];
      }
      unint64_t v54 = v53 + 2;
      memset(__p, 170, 24);
      if (v53 + 2 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v54 >= 0x17)
      {
        uint64_t v56 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v54 | 7) != 0x17) {
          uint64_t v56 = v54 | 7;
        }
        uint64_t v57 = v56 + 1;
        uint64_t v58 = operator new(v56 + 1);
        *(void *)&__p[8] = v53 + 2;
        *(void *)&__p[16] = v57 | 0x8000000000000000;
        *(void *)std::string __p = v58;
        *uint64_t v58 = 10798;
        uint64_t v55 = v58 + 1;
      }
      else
      {
        *(void *)&__p[8] = 0;
        *(void *)&__p[16] = 0;
        __p[23] = v53 + 2;
        uint64_t v55 = &__p[2];
        *(void *)std::string __p = 10798;
        if (!v53) {
          goto LABEL_97;
        }
      }
      if (v52 >= 0) {
        uint64_t v59 = v168;
      }
      else {
        uint64_t v59 = *(unsigned char **)v168;
      }
      memmove(v55, v59, v53);
LABEL_97:
      v55[v53] = 0;
      unint64_t v60 = std::string::append((std::string *)__p, "/.*", 3uLL);
      float64x2x2_t v61 = (void *)v60->__r_.__value_.__r.__words[0];
      v178[0] = (std::locale)v60->__r_.__value_.__r.__words[1];
      *(std::locale::__imp **)((char *)&v178[0].__locale_ + 7) = *(std::locale::__imp **)((char *)&v60->__r_.__value_.__r.__words[1]
                                                                                        + 7);
      char v62 = HIBYTE(v60->__r_.__value_.__r.__words[2]);
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v164) < 0) {
        operator delete(v163);
      }
      v163 = v61;
      *(std::locale *)&long long v164 = v178[0];
      *(std::locale *)((char *)&v164 + 7) = *(std::locale *)((char *)&v178[0].__locale_ + 7);
      HIBYTE(v164) = v62;
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if ((v168[23] & 0x80000000) == 0) {
          goto LABEL_101;
        }
      }
      else if ((v168[23] & 0x80000000) == 0)
      {
LABEL_101:
        if (v164 >= 0) {
          timespec v18 = &v163;
        }
        else {
          timespec v18 = v163;
        }
        unsigned int v19 = v166;
        if ((unint64_t)v166 < v167)
        {
LABEL_105:
          *(void *)unsigned int v19 = v18;
          uint64_t v29 = (uint64_t)(v19 + 8);
LABEL_128:
          v166 = (char *)v29;
          goto LABEL_129;
        }
        float64x2x2_t v63 = (char *)v165;
        int64_t v64 = v166 - (unsigned char *)v165;
        uint64_t v65 = (v166 - (unsigned char *)v165) >> 3;
        unint64_t v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 61) {
          std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v67 = v167 - (void)v165;
        if ((uint64_t)(v167 - (void)v165) >> 2 > v66) {
          unint64_t v66 = v67 >> 2;
        }
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v66;
        }
        if (v68)
        {
          if (v68 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v69 = operator new(8 * v68);
          uint64_t v27 = &v69[8 * v65];
          xpc_object_t v28 = &v69[8 * v68];
          void *v27 = v18;
          uint64_t v29 = (uint64_t)(v27 + 1);
          int64_t v70 = v19 - v63;
          if (v19 == v63) {
            goto LABEL_126;
          }
        }
        else
        {
          long long v69 = 0;
          uint64_t v27 = (void *)(8 * v65);
          xpc_object_t v28 = 0;
          *(void *)(8 * v65) = v18;
          uint64_t v29 = 8 * v65 + 8;
          int64_t v70 = v19 - v63;
          if (v19 == v63) {
            goto LABEL_126;
          }
        }
        unint64_t v71 = v70 - 8;
        if (v71 < 0x58) {
          goto LABEL_243;
        }
        if ((unint64_t)(v19 - v69 - v64) < 0x20) {
          goto LABEL_243;
        }
        uint64_t v72 = (v71 >> 3) + 1;
        uint64_t v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
        std::string v74 = &v19[-v73];
        uint64_t v27 = (void *)((char *)v27 - v73);
        xpc_object_t v75 = &v69[8 * v65 - 16];
        std::string v76 = v19 - 16;
        uint64_t v77 = v72 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v78 = *(_OWORD *)v76;
          *(v75 - 1) = *((_OWORD *)v76 - 1);
          *xpc_object_t v75 = v78;
          v75 -= 2;
          v76 -= 32;
          v77 -= 4;
        }
        while (v77);
        unsigned int v19 = v74;
        if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_243:
          do
          {
            uint64_t v79 = *((void *)v19 - 1);
            v19 -= 8;
            *--uint64_t v27 = v79;
          }
          while (v19 != v63);
        }
LABEL_125:
        unsigned int v19 = (char *)v165;
LABEL_126:
        v165 = v27;
        unint64_t v167 = (unint64_t)v28;
        if (v19) {
          operator delete(v19);
        }
        goto LABEL_128;
      }
      operator delete(*(void **)v168);
      goto LABEL_101;
    }
    if (((1 << a2) & 0x18) == 0) {
      goto LABEL_129;
    }
    abm::trace::getCoreDumpDirSuffix((std::string *)v168);
    int v7 = v168[23];
    if (v168[23] >= 0) {
      size_t v8 = v168[23];
    }
    else {
      size_t v8 = *(void *)&v168[8];
    }
    unint64_t v9 = v8 + 2;
    memset(__p, 170, 24);
    if (v8 + 2 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v9 >= 0x17)
    {
      uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v11 = v9 | 7;
      }
      uint64_t v12 = v11 + 1;
      timespec v13 = operator new(v11 + 1);
      *(void *)&__p[8] = v8 + 2;
      *(void *)&__p[16] = v12 | 0x8000000000000000;
      *(void *)std::string __p = v13;
      *timespec v13 = 10798;
      size_t v10 = v13 + 1;
    }
    else
    {
      *(void *)&__p[8] = 0;
      *(void *)&__p[16] = 0;
      __p[23] = v8 + 2;
      size_t v10 = &__p[2];
      *(void *)std::string __p = 10798;
      if (!v8) {
        goto LABEL_23;
      }
    }
    if (v7 >= 0) {
      uint64_t v14 = v168;
    }
    else {
      uint64_t v14 = *(unsigned char **)v168;
    }
    memmove(v10, v14, v8);
LABEL_23:
    v10[v8] = 0;
    uint64_t v15 = std::string::append((std::string *)__p, "/.*", 3uLL);
    xpc_object_t v16 = (void *)v15->__r_.__value_.__r.__words[0];
    v178[0] = (std::locale)v15->__r_.__value_.__r.__words[1];
    *(std::locale::__imp **)((char *)&v178[0].__locale_ + 7) = *(std::locale::__imp **)((char *)&v15->__r_.__value_.__r.__words[1]
                                                                                      + 7);
    char v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v164) < 0) {
      operator delete(v163);
    }
    v163 = v16;
    *(std::locale *)&long long v164 = v178[0];
    *(std::locale *)((char *)&v164 + 7) = *(std::locale *)((char *)&v178[0].__locale_ + 7);
    HIBYTE(v164) = v17;
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      if ((v168[23] & 0x80000000) == 0) {
        goto LABEL_27;
      }
    }
    else if ((v168[23] & 0x80000000) == 0)
    {
LABEL_27:
      if (v164 >= 0) {
        timespec v18 = &v163;
      }
      else {
        timespec v18 = v163;
      }
      unsigned int v19 = v166;
      if ((unint64_t)v166 < v167) {
        goto LABEL_105;
      }
      xpc_object_t v20 = (char *)v165;
      int64_t v21 = v166 - (unsigned char *)v165;
      uint64_t v22 = (v166 - (unsigned char *)v165) >> 3;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61) {
        std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v24 = v167 - (void)v165;
      if ((uint64_t)(v167 - (void)v165) >> 2 > v23) {
        unint64_t v23 = v24 >> 2;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25)
      {
        if (v25 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v26 = operator new(8 * v25);
        uint64_t v27 = &v26[8 * v22];
        xpc_object_t v28 = &v26[8 * v25];
        void *v27 = v18;
        uint64_t v29 = (uint64_t)(v27 + 1);
        int64_t v30 = v19 - v20;
        if (v19 == v20) {
          goto LABEL_126;
        }
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = (void *)(8 * v22);
        xpc_object_t v28 = 0;
        *(void *)(8 * v22) = v18;
        uint64_t v29 = 8 * v22 + 8;
        int64_t v30 = v19 - v20;
        if (v19 == v20) {
          goto LABEL_126;
        }
      }
      unint64_t v31 = v30 - 8;
      if (v31 < 0x58) {
        goto LABEL_244;
      }
      if ((unint64_t)(v19 - &v26[v21]) < 0x20) {
        goto LABEL_244;
      }
      uint64_t v32 = (v31 >> 3) + 1;
      uint64_t v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
      std::string::size_type v34 = &v19[-v33];
      uint64_t v27 = (void *)((char *)v27 - v33);
      int v35 = &v26[8 * v22 - 16];
      xpc_object_t v36 = v19 - 16;
      uint64_t v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v38 = *(_OWORD *)v36;
        *(v35 - 1) = *((_OWORD *)v36 - 1);
        _OWORD *v35 = v38;
        v35 -= 2;
        v36 -= 32;
        v37 -= 4;
      }
      while (v37);
      unsigned int v19 = v34;
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_244:
        do
        {
          uint64_t v39 = *((void *)v19 - 1);
          v19 -= 8;
          *--uint64_t v27 = v39;
        }
        while (v19 != v20);
      }
      goto LABEL_125;
    }
    operator delete(*(void **)v168);
    goto LABEL_27;
  }
LABEL_129:
  xpc_object_t v80 = *v147;
  if (*v147)
  {
    xpc_retain(*v147);
  }
  else
  {
    xpc_object_t v80 = xpc_null_create();
    if (!v80)
    {
      xpc_object_t v80 = xpc_null_create();
      long long v81 = 0;
      goto LABEL_133;
    }
  }
  xpc_retain(v80);
  long long v81 = v80;
LABEL_133:
  xpc_object_t xarray = v80;
  xpc_release(v81);
  v152 = &v168[48];
  v153 = (_OWORD *)((char *)v179 + 8);
  v150 = &__p[48];
  v151 = &v170;
  size_t index = 0;
  v149 = &v175;
  while (1)
  {
    xpc_object_t v83 = *v147;
    if (*v147) {
      xpc_retain(*v147);
    }
    else {
      xpc_object_t v83 = xpc_null_create();
    }
    if (MEMORY[0x1A6275E60](*v147) == MEMORY[0x1E4F14568])
    {
      size_t count = xpc_array_get_count(*v147);
      if (v83)
      {
LABEL_141:
        xpc_retain(v83);
        xpc_object_t v85 = v83;
        goto LABEL_144;
      }
    }
    else
    {
      size_t count = 0;
      if (v83) {
        goto LABEL_141;
      }
    }
    xpc_object_t v85 = xpc_null_create();
LABEL_144:
    xpc_release(v83);
    if (index >= count) {
      break;
    }
    long long v87 = (char *)v165;
    uint64_t v86 = v166;
    xpc_release(v85);
    if (v86 == v87) {
      goto LABEL_214;
    }
    memset(v158, 170, sizeof(v158));
    xpc_object_t v88 = xpc_array_get_value(xarray, index);
    *(void *)std::string __p = v88;
    if (v88) {
      xpc_retain(v88);
    }
    else {
      *(void *)std::string __p = xpc_null_create();
    }
    xpc::dyn_cast_or_default();
    xpc_release(*(xpc_object_t *)__p);
    uint64_t v89 = abm::trace::kLogTarExtension[0];
    int v90 = v158;
    if (SHIBYTE(v158[2]) < 0) {
      int v90 = (void **)v158[0];
    }
    __s = v90;
    int64_t v91 = strlen(abm::trace::kLogTarExtension[0]);
    if (v91)
    {
      int64_t v92 = v91;
      if (SHIBYTE(v158[2]) >= 0) {
        uint64_t v93 = (char *)HIBYTE(v158[2]);
      }
      else {
        uint64_t v93 = (char *)v158[1];
      }
      if ((uint64_t)v93 >= v91)
      {
        unint64_t v125 = __s;
        char v126 = &v93[(void)__s];
        int v127 = *abm::trace::kLogTarExtension[0];
        do
        {
          v128 = &v93[-v92];
          if (v128 == (char *)-1) {
            break;
          }
          v129 = (char *)memchr(v125, v127, (size_t)(v128 + 1));
          if (!v129) {
            break;
          }
          v130 = v129;
          if (!memcmp(v129, v89, v92))
          {
            if (v130 == v126 || v130 - (unsigned char *)__s == -1) {
              break;
            }
            goto LABEL_207;
          }
          unint64_t v125 = v130 + 1;
          uint64_t v93 = (char *)(v126 - (v130 + 1));
        }
        while ((uint64_t)v93 >= v92);
      }
      for (size_t i = (char *)v165; i < v166; i += 8)
      {
        *(void *)&long long v95 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v95 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v179[1] = v95;
        long long v180 = v95;
        *(_OWORD *)&v178[0].__locale_ = v95;
        v179[0] = v95;
        uint64_t v96 = *(char **)i;
        BOOL v97 = (const std::locale *)MEMORY[0x1A6275150](v178);
        v178[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v97, MEMORY[0x1E4FBA258]);
        *(void *)&v179[0] = std::locale::use_facet(v178, MEMORY[0x1E4FBA280]);
        v98 = v153;
        _OWORD *v153 = 0u;
        v98[1] = 0u;
        *((void *)v98 + 4) = 0;
        size_t v99 = strlen(v96);
        if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)v178, v96, &v96[v99]) != &v96[v99]) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
        }
        long long v100 = (char *)HIBYTE(v158[2]);
        if (SHIBYTE(v158[2]) >= 0) {
          long long v101 = (std::sub_match<const char *> *)v158;
        }
        else {
          long long v101 = (std::sub_match<const char *> *)v158[0];
        }
        if (SHIBYTE(v158[2]) < 0) {
          long long v100 = (char *)v158[1];
        }
        uint64_t v102 = (std::sub_match<const char *> *)&v100[(void)v101];
        *(void *)&long long v103 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v103 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v170 = v103;
        long long v171 = v103;
        *(_OWORD *)&v168[40] = v103;
        long long v169 = v103;
        v104 = v152;
        void *v152 = 0;
        v104[1] = 0;
        *((unsigned char *)v104 + 16) = 0;
        v106 = v150;
        uint64_t v105 = v151;
        *(void *)v151 = 0;
        *((void *)v105 + 1) = 0;
        *((unsigned char *)v105 + 16) = 0;
        BYTE8(v171) = 0;
        uint64_t v172 = 0;
        memset(v168, 0, 41);
        long long v175 = v103;
        long long v176 = v103;
        *(_OWORD *)&unsigned char __p[40] = v103;
        long long v174 = v103;
        *(void *)v106 = 0;
        *((void *)v106 + 1) = 0;
        v106[16] = 0;
        int v107 = v149;
        *(void *)v149 = 0;
        *((void *)v107 + 1) = 0;
        *((unsigned char *)v107 + 16) = 0;
        BYTE8(v176) = 0;
        uint64_t v177 = 0;
        memset(__p, 0, 41);
        int v108 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v178, v101, v102, (std::vector<std::csub_match> *)__p, 4160);
        uint64_t v109 = *(void *)&__p[48];
        unint64_t v110 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 3);
        uint64_t v112 = *(void *)&v168[8];
        std::ctype_base::mask v111 = *(char **)v168;
        unint64_t v113 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v168[8] - *(void *)v168) >> 3);
        if (v110 <= v113)
        {
          if (v110 < v113)
          {
            uint64_t v112 = *(void *)v168 + 8 * ((uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 3);
            *(void *)&v168[8] = v112;
          }
        }
        else
        {
          std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append((std::vector<std::ssub_match> *)v168, v110 - v113);
          uint64_t v112 = *(void *)&v168[8];
          std::ctype_base::mask v111 = *(char **)v168;
        }
        if ((char *)v112 == v111)
        {
          int v116 = *(char **)__p;
        }
        else
        {
          uint64_t v114 = 0;
          unint64_t v115 = 0;
          int v116 = *(char **)__p;
          uint64_t v117 = *(void *)&__p[8];
          do
          {
            unint64_t v118 = 0xAAAAAAAAAAAAAAABLL * ((v117 - (uint64_t)v116) >> 3);
            unint64_t v119 = &v116[v114];
            if (v118 <= v115) {
              unint64_t v119 = &__p[24];
            }
            *(void *)&v111[v114] = (char *)v101 + *(void *)v119 - v109;
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 3) <= v115) {
              uint64_t v120 = &__p[32];
            }
            else {
              uint64_t v120 = (void *)(*(void *)__p + v114 + 8);
            }
            *(void *)(*(void *)v168 + v114 + 8) = (char *)v101 + *v120 - v109;
            int v116 = *(char **)__p;
            uint64_t v117 = *(void *)&__p[8];
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 3) <= v115) {
              uint64_t v121 = &__p[40];
            }
            else {
              uint64_t v121 = (unsigned char *)(*(void *)__p + v114 + 16);
            }
            std::ctype_base::mask v111 = *(char **)v168;
            *(unsigned char *)(*(void *)v168 + v114 + 16) = *v121;
            ++v115;
            v114 += 24;
          }
          while (v115 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v168[8] - (void)v111) >> 3));
        }
        *(void *)&v168[24] = v102;
        *(void *)&v168[32] = v102;
        *(void *)&v168[48] = (char *)v101 + *(void *)&__p[48] - v109;
        *(void *)&long long v169 = (char *)v101 + v174 - v109;
        BYTE8(v169) = BYTE8(v174);
        v168[40] = 0;
        *(void *)&long long v170 = (char *)v101 + v175 - v109;
        *((void *)&v170 + 1) = (char *)v101 + *((void *)&v175 + 1) - v109;
        int v122 = v176;
        LOBYTE(v171) = v176;
        uint64_t v172 = *(void *)&v168[48];
        BYTE8(v171) = BYTE8(v176);
        if (v116)
        {
          *(void *)&__p[8] = v116;
          operator delete(v116);
          int v122 = v171;
          std::ctype_base::mask v111 = *(char **)v168;
        }
        if (v122) {
          int v123 = v108 ^ 1;
        }
        else {
          int v123 = 1;
        }
        if (v111)
        {
          *(void *)&v168[8] = v111;
          operator delete(v111);
        }
        if ((v108 & v123) != 0)
        {
          int64_t v131 = v166 - (i + 8);
          if (v166 != i + 8) {
            memmove(i, i + 8, v166 - (i + 8));
          }
          v166 = &i[v131];
          BOOL v132 = (std::__shared_weak_count *)v180;
          if ((void)v180 && !atomic_fetch_add((atomic_ullong *volatile)(v180 + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
            std::__shared_weak_count::__release_weak(v132);
          }
          std::locale::~locale(v178);
          break;
        }
        unint64_t v124 = (std::__shared_weak_count *)v180;
        if ((void)v180)
        {
          if (!atomic_fetch_add((atomic_ullong *volatile)(v180 + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
        }
        std::locale::~locale(v178);
      }
    }
    else
    {
LABEL_207:
      abm::TapToRadarTask::checkTraceLogsInArchive_sync((uint64_t)v144, (uint64_t *)v158, (char ***)&v165);
    }
    if (SHIBYTE(v158[2]) < 0)
    {
      operator delete(v158[0]);
      xpc_object_t v133 = xarray;
      if (!xarray)
      {
LABEL_134:
        xpc_object_t v82 = xpc_null_create();
        goto LABEL_135;
      }
    }
    else
    {
      xpc_object_t v133 = xarray;
      if (!xarray) {
        goto LABEL_134;
      }
    }
    xpc_retain(v133);
    xpc_object_t v82 = v133;
LABEL_135:
    ++index;
    xpc_release(v82);
  }
  xpc_release(v85);
LABEL_214:
  xpc_release(xarray);
  int v135 = (const char **)v165;
  uint64_t v134 = (const char **)v166;
  if (v166 != v165)
  {
    v154[0] = MEMORY[0x1E4F143A8];
    v154[1] = 3221225472;
    v155 = ___ZN3abm14TapToRadarTask32checkAttachmentForRadarType_syncENS_6helper9RadarTypeERN3xpc5arrayE_block_invoke;
    v156 = &__block_descriptor_40_e211_v32__0_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q______8l;
    uint64_t v157 = (uint64_t)v144;
    for (unint64_t j = (const char **)v165; j != v134; ++j)
    {
      v137 = *j;
      size_t v138 = strlen(*j);
      if (v138 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v139 = v138;
      if (v138 >= 0x17)
      {
        uint64_t v141 = (v138 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v138 | 7) != 0x17) {
          uint64_t v141 = v138 | 7;
        }
        uint64_t v142 = v141 + 1;
        v140 = operator new(v141 + 1);
        *(void *)&__p[8] = v139;
        *(void *)&__p[16] = v142 | 0x8000000000000000;
        *(void *)std::string __p = v140;
      }
      else
      {
        __p[23] = v138;
        v140 = __p;
        if (!v138) {
          goto LABEL_225;
        }
      }
      memmove(v140, v137, v139);
LABEL_225:
      v140[v139] = 0;
      v155((uint64_t)v154, (uint64_t *)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
  }
  if (SHIBYTE(v164) < 0) {
    operator delete(v163);
  }
  if (v165) {
    operator delete(v165);
  }
  return v134 == v135;
}

void sub_1A60BB570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,xpc_object_t object,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,xpc_object_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  xpc_release(v64);
  if (a63 < 0) {
    operator delete(a58);
  }
  xpc_release(v63);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v65 - 176);
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a37)
  {
    operator delete(a37);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *_ZN8dispatch5asyncIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3EEvRKNS_5queueEOT_(NSObject *a1, uint64_t a2)
{
  xpc_object_t v4 = operator new(0x90uLL);
  uint64_t v5 = v4;
  uint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = *(void *)(a2 + 8);
  void *v4 = *(void *)a2;
  v4[1] = v6;
  uint64_t v7 = a2 + 16;
  size_t v8 = (void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 40);
  if (!v9)
  {
    size_t v8 = v4 + 5;
    goto LABEL_5;
  }
  if (v9 != v7)
  {
    v4[5] = v9;
LABEL_5:
    *size_t v8 = 0;
    goto LABEL_7;
  }
  v4[5] = v4 + 2;
  (*(void (**)(uint64_t))(*(void *)v7 + 24))(a2 + 16);
LABEL_7:
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v10 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  if (v10 == v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 32))(a2 + 16);
  }
  else if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
  }
  *((_DWORD *)v5 + 12) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(v5 + 7) = *(_OWORD *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *(void *)(a2 + 72) = 0;
  v5[9] = v11;
  v5[10] = v12;
  *(_OWORD *)(v5 + 11) = *(_OWORD *)(a2 + 88);
  uint64_t v13 = *(void *)(a2 + 104);
  uint64_t v14 = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 88) = 0;
  v5[13] = v13;
  v5[14] = v14;
  xpc_object_t v15 = xpc_null_create();
  *(_OWORD *)(v5 + 15) = *(_OWORD *)(a2 + 120);
  v5[17] = *(void *)(a2 + 136);
  *(void *)(a2 + 112) = v15;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  dispatch_async_f(a1, v5, (dispatch_function_t)_ZZN8dispatch5asyncIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS6_14default_deleteIS8_EEEEENUlPvE_8__invokeESC_);
  _ZNSt3__110unique_ptrIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3NS_14default_deleteIS3_EEED1B8ne180100Ev(&v17);
  return _ZNSt3__110unique_ptrIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3NS_14default_deleteIS3_EEED1B8ne180100Ev(&v18);
}

void *ctu::os::signpost_interval::signpost_interval(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2 + 2;
  uint64_t v6 = a2 + 5;
  uint64_t v7 = (void *)a2[5];
  if (!v7)
  {
    uint64_t v6 = a1 + 5;
    goto LABEL_5;
  }
  if (v7 != v5)
  {
    a1[5] = v7;
LABEL_5:
    *uint64_t v6 = 0;
    goto LABEL_7;
  }
  a1[5] = a1 + 2;
  (*(void (**)(void))(*(void *)*v6 + 24))();
LABEL_7:
  *a2 = 0;
  a2[1] = 0;
  size_t v8 = (void *)a2[5];
  a2[5] = 0;
  if (v8 == v5)
  {
    (*(void (**)(void *))(*v5 + 32))(v5);
    return a1;
  }
  else
  {
    if (v8) {
      (*(void (**)(void *))(*v8 + 40))(v8);
    }
    return a1;
  }
}

xpc_object_t *xpc::array::array(xpc_object_t *a1, xpc_object_t object)
{
  *a1 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    *a1 = xpc_null_create();
  }
  return a1;
}

void _ZZZN3abm14TapToRadarTask9init_syncEvEUb_EN3__3D1Ev(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  xpc_release(*(xpc_object_t *)(a1 + 112));
  *(void *)(a1 + 112) = 0;
  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_5:
      uint64_t v2 = (ctu::os::signpost_interval *)a1;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 56));
  uint64_t v2 = (ctu::os::signpost_interval *)a1;

LABEL_7:
  ctu::os::signpost_interval::~signpost_interval(v2);
}

uint64_t abm::TapToRadarTask::prepareRadar_sync@<X0>(int a1@<W1>, uint64_t a2@<X2>, xpc_object_t *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t v137 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v136[7] = v8;
  v136[8] = v8;
  v136[5] = v8;
  v136[6] = v8;
  v136[3] = v8;
  v136[4] = v8;
  v136[1] = v8;
  v136[2] = v8;
  long long v135 = v8;
  v136[0] = v8;
  *(_OWORD *)xpc_object_t v133 = v8;
  long long v134 = v8;
  long long v131 = v8;
  long long v132 = v8;
  long long v129 = v8;
  long long v130 = v8;
  long long v128 = v8;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v128);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v129, (uint64_t)"--- Description:\n\n", 18);
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = *(void *)a2;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a2 + 8);
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n\n", 2);
  memset(v127, 170, 24);
  *((unsigned char *)&v142[0].__r_.__value_.__s + 23) = 2;
  strcpy((char *)v142, ".*");
  size_t v14 = strlen(abm::trace::kABMLogSummaryExtension[0]);
  xpc_object_t v15 = std::string::append(v142, abm::trace::kABMLogSummaryExtension[0], v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v127[2] = (void *)v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v127 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v142[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v142[0].__r_.__value_.__l.__data_);
  }
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v125 = v17;
  long long v126 = v17;
  *(_OWORD *)&v123[0].__locale_ = v17;
  long long v124 = v17;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v123, (uint64_t)v127, 0);
  memset(&__s, 0, sizeof(__s));
  xpc_object_t v18 = *a3;
  if (*a3)
  {
    xpc_retain(*a3);
LABEL_12:
    xpc_retain(v18);
    unsigned int v19 = v18;
    goto LABEL_13;
  }
  xpc_object_t v18 = xpc_null_create();
  if (v18) {
    goto LABEL_12;
  }
  xpc_object_t v18 = xpc_null_create();
  unsigned int v19 = 0;
LABEL_13:
  xpc_release(v19);
  xpc_object_t v20 = *a3;
  if (*a3) {
    xpc_retain(v20);
  }
  else {
    xpc_object_t v20 = xpc_null_create();
  }
  if (MEMORY[0x1A6275E60](*a3) == MEMORY[0x1E4F14568])
  {
    size_t count = xpc_array_get_count(*a3);
    if (v20) {
      goto LABEL_18;
    }
LABEL_20:
    xpc_object_t object = xpc_null_create();
    goto LABEL_21;
  }
  size_t count = 0;
  if (!v20) {
    goto LABEL_20;
  }
LABEL_18:
  xpc_retain(v20);
  xpc_object_t object = v20;
LABEL_21:
  uint64_t v117 = a3;
  uint64_t v114 = a4;
  xpc_release(v20);
  if (count || v18 != object)
  {
    size_t v22 = 0;
    size_t v119 = count - 1;
    while (1)
    {
      memset(&v121, 170, sizeof(v121));
      xpc_object_t value = xpc_array_get_value(v18, v22);
      v142[0].__r_.__value_.__r.__words[0] = (std::string::size_type)value;
      if (value) {
        xpc_retain(value);
      }
      else {
        v142[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      xpc::dyn_cast_or_default();
      xpc_release(v142[0].__r_.__value_.__l.__data_);
      std::string::size_type size = HIBYTE(v121.__r_.__value_.__r.__words[2]);
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v25 = (std::sub_match<const char *> *)&v121;
      }
      else {
        unint64_t v25 = (std::sub_match<const char *> *)v121.__r_.__value_.__r.__words[0];
      }
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v121.__r_.__value_.__l.__size_;
      }
      uint64_t v26 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v25 + size);
      *(void *)&long long v27 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v140 = v27;
      v139[6] = 0xAAAAAAAAAAAAAA00;
      v139[3] = 0xAAAAAAAAAAAAAAAALL;
      v139[4] = 0;
      v139[5] = 0;
      v139[7] = 0;
      v139[8] = 0;
      LOBYTE(v140) = 0;
      BYTE8(v140) = 0;
      uint64_t v141 = 0;
      *(_OWORD *)std::string __p = 0u;
      memset(v139, 0, 25);
      long long v148 = v27;
      unint64_t v145 = 0xAAAAAAAAAAAAAA00;
      v142[1].__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v143 = 0;
      uint64_t v144 = 0;
      uint64_t v146 = 0;
      uint64_t v147 = 0;
      LOBYTE(v148) = 0;
      BYTE8(v148) = 0;
      uint64_t v149 = 0;
      memset(v142, 0, 41);
      int v28 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v123, v25, (std::sub_match<const char *> *)((char *)v25 + size), (std::vector<std::csub_match> *)v142, 4160);
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v25, v26, (uint64_t *)v142, 0);
      if (v142[0].__r_.__value_.__r.__words[0])
      {
        v142[0].__r_.__value_.__l.__size_ = v142[0].__r_.__value_.__r.__words[0];
        operator delete(v142[0].__r_.__value_.__l.__data_);
      }
      if ((_BYTE)v140) {
        int v29 = v28 ^ 1;
      }
      else {
        int v29 = 1;
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if ((v28 & v29) == 0) {
        goto LABEL_52;
      }
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if ((*((unsigned char *)&v121.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(&__s, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
LABEL_52:
        if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v121.__r_.__value_.__l.__data_);
          size_t v30 = v22 + 1;
          BOOL v31 = v119 == v22++;
          if (v31) {
            goto LABEL_57;
          }
        }
        else
        {
          size_t v30 = v22 + 1;
          BOOL v31 = v119 == v22++;
          if (v31) {
            goto LABEL_57;
          }
        }
      }
      else
      {
        std::string __s = v121;
        size_t v30 = v22 + 1;
        BOOL v31 = v119 == v22++;
        if (v31)
        {
LABEL_57:
          size_t v22 = v30;
          if (v18 == object) {
            goto LABEL_58;
          }
        }
      }
    }
    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v32 = &v121;
    }
    else {
      uint64_t v32 = (std::string *)v121.__r_.__value_.__r.__words[0];
    }
    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v33 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v33 = v121.__r_.__value_.__l.__size_;
    }
    std::string::__assign_no_alias<false>((void **)&__s.__r_.__value_.__l.__data_, v32, v33);
    goto LABEL_52;
  }
LABEL_58:
  xpc_release(object);
  xpc_release(v18);
  std::string::size_type v34 = a3;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_87;
    }
    __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
    std::string::__init_copy_ctor_external(&v120, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      goto LABEL_87;
    }
    __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
    std::string v120 = __s;
  }
  util::readJSON((uint64_t *)&v120, __p);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v120.__r_.__value_.__l.__data_);
  }
  int v35 = operator new(8uLL);
  uint64_t v36 = *MEMORY[0x1E4F4C6B0];
  void *v35 = *MEMORY[0x1E4F4C6B0];
  uint64_t v37 = operator new(0x10uLL);
  uint64_t v38 = *MEMORY[0x1E4F4C5D0];
  *uint64_t v37 = v36;
  v37[1] = v38;
  operator delete(v35);
  uint64_t v39 = operator new(0x20uLL);
  v39[2] = *MEMORY[0x1E4F4C5D8];
  *(_OWORD *)uint64_t v39 = *(_OWORD *)v37;
  operator delete(v37);
  v39[3] = *MEMORY[0x1E4F4C948];
  xpc_object_t v40 = operator new(0x40uLL);
  v40[4] = *MEMORY[0x1E4F4CD90];
  long long v41 = *((_OWORD *)v39 + 1);
  *(_OWORD *)xpc_object_t v40 = *(_OWORD *)v39;
  *((_OWORD *)v40 + 1) = v41;
  operator delete(v39);
  uint64_t v42 = MEMORY[0x1A6275E60](__p[0]);
  uint64_t v43 = MEMORY[0x1E4F14590];
  if (v42 == MEMORY[0x1E4F14590])
  {
    uint64_t v44 = 0;
    int v45 = 0;
    do
    {
      xpc_object_t v46 = (const char *)v40[v44];
      v121.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
      xpc_object_t v47 = xpc_dictionary_get_value(__p[0], v46);
      xpc_object_t v48 = v47;
      if (v47) {
        xpc_retain(v47);
      }
      else {
        xpc_object_t v48 = xpc_null_create();
      }
      xpc_object_t v49 = xpc_null_create();
      v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
      if (v48 && MEMORY[0x1A6275E60](v48) == v43) {
        xpc_retain(v48);
      }
      else {
        v121.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      if (MEMORY[0x1A6275E60]() != v43)
      {
        if (v49)
        {
          xpc_retain(v49);
          xpc_object_t v50 = v49;
        }
        else
        {
          xpc_object_t v50 = xpc_null_create();
        }
        xpc_object_t v51 = (void *)v121.__r_.__value_.__r.__words[0];
        v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
        xpc_release(v51);
      }
      xpc_release(v49);
      xpc_release(v48);
      if (MEMORY[0x1A6275E60](v121.__r_.__value_.__r.__words[0]) == v43)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v129, (uint64_t)"[", 1);
        ++v45;
        int v52 = (void *)std::ostream::operator<<();
        size_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"] ", 2);
        size_t v54 = strlen(v46);
        uint64_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v46, v54);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"\n", 1);
        xpc::object::to_string((uint64_t *)v142, (xpc::object *)&v121);
        uint64_t v56 = (v142[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? v142
            : (std::string *)v142[0].__r_.__value_.__r.__words[0];
        size_t v57 = strlen((const char *)v56);
        uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v129, (uint64_t)v56, v57);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"\n", 1);
        if (SHIBYTE(v142[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v142[0].__r_.__value_.__l.__data_);
        }
      }
      xpc_release(v121.__r_.__value_.__l.__data_);
      ++v44;
    }
    while (v44 != 5);
  }
  operator delete(v40);
  xpc_release(__p[0]);
  std::string::size_type v34 = v117;
LABEL_87:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v129, (uint64_t)"\n--- Required Attachments:\n\n", 28);
  xpc_object_t v59 = *v34;
  if (*v34)
  {
    xpc_retain(*v34);
LABEL_90:
    xpc_retain(v59);
    unint64_t v60 = v59;
    goto LABEL_91;
  }
  xpc_object_t v59 = xpc_null_create();
  if (v59) {
    goto LABEL_90;
  }
  xpc_object_t v59 = xpc_null_create();
  unint64_t v60 = 0;
LABEL_91:
  xpc_release(v60);
  xpc_object_t v61 = *v34;
  if (*v34) {
    xpc_retain(*v34);
  }
  else {
    xpc_object_t v61 = xpc_null_create();
  }
  if (MEMORY[0x1A6275E60](*v34) == MEMORY[0x1E4F14568])
  {
    size_t v62 = xpc_array_get_count(*v34);
    if (v61) {
      goto LABEL_96;
    }
LABEL_98:
    xpc_object_t v63 = xpc_null_create();
    goto LABEL_99;
  }
  size_t v62 = 0;
  if (!v61) {
    goto LABEL_98;
  }
LABEL_96:
  xpc_retain(v61);
  xpc_object_t v63 = v61;
LABEL_99:
  xpc_release(v61);
  if (v62 || v59 != v63)
  {
    size_t v64 = 0;
    size_t v65 = v62 - 1;
    while (1)
    {
      while (1)
      {
        memset(v142, 170, 24);
        xpc_object_t v66 = xpc_array_get_value(v59, v64);
        __p[0] = v66;
        if (v66) {
          xpc_retain(v66);
        }
        else {
          __p[0] = xpc_null_create();
        }
        xpc::dyn_cast_or_default();
        xpc_release(__p[0]);
        support::fs::getFileName((std::string *)__p);
        uint64_t v67 = v139[0] >= 0 ? __p : (void **)__p[0];
        unint64_t v68 = v139[0] >= 0 ? (void *)HIBYTE(v139[0]) : __p[1];
        long long v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v129, (uint64_t)v67, (uint64_t)v68);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"\n", 1);
        if ((SHIBYTE(v139[0]) & 0x80000000) == 0) {
          break;
        }
        operator delete(__p[0]);
        if ((SHIBYTE(v142[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_113;
        }
LABEL_116:
        operator delete(v142[0].__r_.__value_.__l.__data_);
        size_t v70 = v64 + 1;
        BOOL v31 = v65 == v64++;
        if (v31) {
          goto LABEL_118;
        }
      }
      if (SHIBYTE(v142[0].__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_116;
      }
LABEL_113:
      size_t v70 = v64 + 1;
      BOOL v31 = v65 == v64++;
      if (v31)
      {
LABEL_118:
        size_t v64 = v70;
        if (v59 == v63) {
          break;
        }
      }
    }
  }
  xpc_release(v63);
  xpc_release(v59);
  int v71 = *(char *)(v114 + 23);
  if (v71 >= 0) {
    uint64_t v72 = *(unsigned __int8 *)(v114 + 23);
  }
  else {
    uint64_t v72 = *(void *)(v114 + 8);
  }
  if (v72)
  {
    if (v71 >= 0) {
      uint64_t v73 = v114;
    }
    else {
      uint64_t v73 = *(void *)v114;
    }
    std::string v74 = (long long *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v129, v73, v72);
    xpc_object_t v75 = "\n";
    uint64_t v76 = 1;
  }
  else
  {
    xpc_object_t v75 = "sysdiagnose\n\n";
    uint64_t v76 = 13;
    std::string v74 = &v129;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v75, v76);
  uint64_t v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v129, (uint64_t)"*** PLEASE READ ME ***\n", 23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"\nAfter filing your radar, please confirm the attachments listed above were successfully uploaded.\nOtherwise, please find the logs at the locations below and attach them manually:\n\n", 180);
  long long v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v129, (uint64_t)">> Mac:\n\n", 9);
  if (a1 == 6)
  {
    uint64_t v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"\t ~/Library/Logs/CrashReporter/MobileDevice/<DeviceName>/*CommCenter*.ips\n", 74);
    xpc_object_t v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"\t ~/Library/Logs/CrashReporter/MobileDevice/<DeviceName>/DiagnosticLogs/sysdiagnose/", 84);
    size_t v81 = strlen(abm::trace::kSysdiagnosePrefix[0]);
    xpc_object_t v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)abm::trace::kSysdiagnosePrefix[0], v81);
    xpc_object_t v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"<timestamp>*/crashes_and_spins/*CommCenter*.ips\n", 48);
    uint64_t v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"\n>> Device:\n", 12);
    xpc_object_t v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"\t /var/mobile/Library/Logs/CrashReporter/*CommCenter*.ips\n\n", 59);
    uint64_t v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"\t ", 2);
    size_t v87 = strlen(abm::trace::kSysdiagnoseFolder[0]);
    xpc_object_t v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)abm::trace::kSysdiagnoseFolder[0], v87);
    size_t v89 = strlen(abm::trace::kSysdiagnosePrefix[0]);
    int v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)abm::trace::kSysdiagnosePrefix[0], v89);
    int64_t v91 = "<timestamp>*/crashes_and_spins/*CommCenter*.ips\n";
    uint64_t v92 = 48;
  }
  else
  {
    uint64_t v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"\t ~/Library/Logs/CrashReporter/MobileDevice/<DeviceName>/Baseband/log-*<timestamp>*\n\n", 85);
    uint64_t v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"\t ~/Library/Logs/CrashReporter/MobileDevice/<DeviceName>/DiagnosticLogs/sysdiagnose/", 84);
    size_t v95 = strlen(abm::trace::kSysdiagnosePrefix[0]);
    uint64_t v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)abm::trace::kSysdiagnosePrefix[0], v95);
    BOOL v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"<timestamp>*\n", 13);
    v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"\n>> Device:\n\n", 13);
    size_t v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"\t /var/wireless/Library/Logs/CrashReporter/Baseband/log-*<timestamp>*\n\n", 71);
    long long v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"\t ", 2);
    size_t v101 = strlen(abm::trace::kSysdiagnoseFolder[0]);
    uint64_t v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)abm::trace::kSysdiagnoseFolder[0], v101);
    size_t v103 = strlen(abm::trace::kSysdiagnosePrefix[0]);
    int v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)abm::trace::kSysdiagnosePrefix[0], v103);
    int64_t v91 = "<timestamp>*\n";
    uint64_t v92 = 13;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)v91, v92);
  if ((BYTE8(v135) & 0x10) != 0)
  {
    uint64_t v106 = v135;
    if ((unint64_t)v135 < *((void *)&v132 + 1))
    {
      *(void *)&long long v135 = *((void *)&v132 + 1);
      uint64_t v106 = *((void *)&v132 + 1);
    }
    uint64_t v105 = (unsigned char *)a5;
    int v107 = (const void *)v132;
    size_t v104 = v106 - v132;
    if ((unint64_t)(v106 - v132) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_154;
    }
  }
  else
  {
    if ((BYTE8(v135) & 8) == 0)
    {
      size_t v104 = 0;
      uint64_t v105 = (unsigned char *)a5;
      *(unsigned char *)(a5 + 23) = 0;
      goto LABEL_144;
    }
    uint64_t v105 = (unsigned char *)a5;
    int v107 = (const void *)*((void *)&v130 + 1);
    size_t v104 = *((void *)&v131 + 1) - *((void *)&v130 + 1);
    if (*((void *)&v131 + 1) - *((void *)&v130 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_154:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v104 >= 0x17)
  {
    uint64_t v108 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v104 | 7) != 0x17) {
      uint64_t v108 = v104 | 7;
    }
    uint64_t v109 = v108 + 1;
    unint64_t v110 = operator new(v108 + 1);
    *(void *)(a5 + 8) = v104;
    *(void *)(a5 + 16) = v109 | 0x8000000000000000;
    *(void *)a5 = v110;
    uint64_t v105 = v110;
    goto LABEL_143;
  }
  v105[23] = v104;
  if (v104) {
LABEL_143:
  }
    memmove(v105, v107, v104);
LABEL_144:
  v105[v104] = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  std::ctype_base::mask v111 = (std::__shared_weak_count *)v126;
  if (!(void)v126 || atomic_fetch_add((atomic_ullong *volatile)(v126 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    std::locale::~locale(v123);
    if ((SHIBYTE(v127[2]) & 0x80000000) == 0) {
      goto LABEL_150;
    }
    goto LABEL_149;
  }
  ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
  std::__shared_weak_count::__release_weak(v111);
  std::locale::~locale(v123);
  if (SHIBYTE(v127[2]) < 0) {
LABEL_149:
  }
    operator delete(v127[0]);
LABEL_150:
  *(void *)&long long v128 = *MEMORY[0x1E4FBA408];
  uint64_t v112 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v128 + *(void *)(v128 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v129 = v112;
  *((void *)&v129 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v134) < 0) {
    operator delete(v133[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62751A0](v136);
}

void sub_1A60BC988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t a14, uint64_t a15, xpc_object_t a16, void *a17, uint64_t a18, uint64_t a19, xpc_object_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::locale a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a30);
  if (a43 < 0) {
    operator delete(a38);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a45);
  _Unwind_Resume(a1);
}

uint64_t abm::TapToRadarTask::fileRadar_sync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, xpc_object_t *a5, uint64_t a6)
{
  void (***v24)(stat *__return_ptr, void);
  long long v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  stat *v29;
  __darwin_ino64_t st_gid_high;
  void *v31;
  void *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  void *v37;
  uint64_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void **v43;
  size_t v44;
  _OWORD *v45;
  _OWORD *v46;
  uint64_t *v47;
  long long v48;
  xpc_object_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  xpc_object_t v53;
  size_t count;
  size_t v55;
  size_t v56;
  xpc_object_t value;
  void **v58;
  uint64_t v59;
  void *v60;
  timespec v61;
  void **v62;
  const char *v63;
  DIR *v64;
  DIR *v65;
  size_t v66;
  BOOL v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  __CFString *v72;
  void *v73;
  void *v74;
  __darwin_ino64_t v75;
  void *v76;
  uint64_t v77;
  const void *v78;
  uint64_t v79;
  uint64_t v80;
  stat *v81;
  void *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  void *v88;
  void *v89;
  xpc_object_t object;
  void *v91[3];
  void *__p[2];
  long long v93;
  long long v94;
  long long v95;
  long long v96;
  void *v97[2];
  long long v98;
  long long v99;
  _OWORD v100[9];
  unint64_t v101;
  _OWORD __dst[2];
  void (***v103)(stat *__return_ptr, void);
  uint64_t v104;
  long long v105;
  long long v106;
  long long v107;
  long long v108;
  long long v109;
  long long v110;
  long long v111;
  long long v112;
  _OWORD v113[9];
  unint64_t v114;
  stat v115;

  id v10 = objc_alloc_init(MEMORY[0x1E4F29088]);
  id v11 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  [v10 setScheme:@"tap-to-radar"];
  [v10 setHost:@"new"];
  objc_msgSend(v11, "addObject:", objc_msgSend(MEMORY[0x1E4F290C8], "queryItemWithName:value:", @"Keywords", @"677561"));
  objc_msgSend(v11, "addObject:", objc_msgSend(MEMORY[0x1E4F290C8], "queryItemWithName:value:", @"ComponentID", objc_msgSend(NSString, "stringWithUTF8String:", *(void *)(*(void *)(a1 + 136) + 16))));
  objc_msgSend(v11, "addObject:", objc_msgSend(MEMORY[0x1E4F290C8], "queryItemWithName:value:", @"ComponentName", objc_msgSend(NSString, "stringWithUTF8String:", **(void **)(a1 + 136))));
  objc_msgSend(v11, "addObject:", objc_msgSend(MEMORY[0x1E4F290C8], "queryItemWithName:value:", @"ComponentVersion", objc_msgSend(NSString, "stringWithUTF8String:", *(void *)(*(void *)(a1 + 136) + 8))));
  objc_msgSend(v11, "addObject:", objc_msgSend(MEMORY[0x1E4F290C8], "queryItemWithName:value:", @"Classification", @"Crash/Hang/Data Loss"));
  objc_msgSend(v11, "addObject:", objc_msgSend(MEMORY[0x1E4F290C8], "queryItemWithName:value:", @"Reproducibility", @"I Didn't Try"));
  uint64_t v114 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v113[7] = v12;
  v113[8] = v12;
  v113[5] = v12;
  v113[6] = v12;
  v113[3] = v12;
  v113[4] = v12;
  v113[1] = v12;
  v113[2] = v12;
  uint64_t v112 = v12;
  v113[0] = v12;
  unint64_t v110 = v12;
  std::ctype_base::mask v111 = v12;
  uint64_t v108 = v12;
  uint64_t v109 = v12;
  uint64_t v106 = v12;
  int v107 = v12;
  uint64_t v105 = v12;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v105);
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v106, (uint64_t)"[", 1);
  xpc_object_t v88 = v10;
  size_t v89 = v11;
  size_t v14 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  xpc_object_t v15 = (void *)off_1EB5EE630;
  if (!off_1EB5EE630)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v115.st_dev, v14);
    long long v16 = *(_OWORD *)&v115.st_dev;
    *(void *)&v115.st_dev = 0;
    v115.st_ino = 0;
    long long v17 = (std::__shared_weak_count *)*(&off_1EB5EE630 + 1);
    off_1EB5EE630 = v16;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    st_ino = (std::__shared_weak_count *)v115.st_ino;
    if (v115.st_ino && !atomic_fetch_add((atomic_ullong *volatile)(v115.st_ino + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))st_ino->__on_zero_shared)(st_ino);
      std::__shared_weak_count::__release_weak(st_ino);
    }
    xpc_object_t v15 = (void *)off_1EB5EE630;
  }
  v91[0] = v15;
  v91[1] = *((void **)&off_1EB5EE630 + 1);
  if (*(&off_1EB5EE630 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EB5EE630 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(void **__return_ptr, void *))(*(void *)v15 + 40))(__p, v15);
  if ((SBYTE7(v93) & 0x80u) == 0) {
    unsigned int v19 = __p;
  }
  else {
    unsigned int v19 = (void **)__p[0];
  }
  if ((SBYTE7(v93) & 0x80u) == 0) {
    uint64_t v20 = BYTE7(v93);
  }
  else {
    uint64_t v20 = (uint64_t)__p[1];
  }
  int64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v19, v20);
  size_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" | ", 3);
  unint64_t v23 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v24 = (void (***)(stat *__return_ptr, void))off_1EB5EE630;
  if (!off_1EB5EE630)
  {
    ctu::Gestalt::create_default_global((uint64_t *)__dst, v23);
    unint64_t v25 = __dst[0];
    __dst[0] = 0uLL;
    uint64_t v26 = (std::__shared_weak_count *)*(&off_1EB5EE630 + 1);
    off_1EB5EE630 = v25;
    if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    long long v27 = (std::__shared_weak_count *)*((void *)&__dst[0] + 1);
    if (*((void *)&__dst[0] + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    uint64_t v24 = (void (***)(stat *__return_ptr, void))off_1EB5EE630;
  }
  int v28 = (std::__shared_weak_count *)*(&off_1EB5EE630 + 1);
  size_t v103 = v24;
  size_t v104 = *(&off_1EB5EE630 + 1);
  if (*(&off_1EB5EE630 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EB5EE630 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (**v24)(&v115, v24);
  if ((v115.st_gid & 0x80000000) == 0) {
    int v29 = &v115;
  }
  else {
    int v29 = *(stat **)&v115.st_dev;
  }
  if ((v115.st_gid & 0x80000000) == 0) {
    st_gid_high = HIBYTE(v115.st_gid);
  }
  else {
    st_gid_high = v115.st_ino;
  }
  BOOL v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v29, st_gid_high);
  uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"] ", 2);
  size_t v33 = *(char *)(a3 + 23);
  if (v33 >= 0) {
    std::string::size_type v34 = a3;
  }
  else {
    std::string::size_type v34 = *(void *)a3;
  }
  if (v33 >= 0) {
    int v35 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    int v35 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
  if (SHIBYTE(v115.st_gid) < 0) {
    operator delete(*(void **)&v115.st_dev);
  }
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    if ((SBYTE7(v93) & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  if (SBYTE7(v93) < 0) {
LABEL_44:
  }
    operator delete(__p[0]);
LABEL_45:
  if (v91[1] && !atomic_fetch_add((atomic_ullong *volatile)v91[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void *))(*(void *)v91[1] + 16))(v91[1]);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v91[1]);
  }
  memset(__dst, 170, 24);
  if ((BYTE8(v112) & 0x10) != 0)
  {
    uint64_t v38 = v112;
    if ((unint64_t)v112 < *((void *)&v109 + 1))
    {
      *(void *)&uint64_t v112 = *((void *)&v109 + 1);
      uint64_t v38 = *((void *)&v109 + 1);
    }
    uint64_t v39 = (const void *)v109;
    uint64_t v36 = v38 - v109;
    if ((unint64_t)(v38 - v109) > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_160;
    }
  }
  else
  {
    if ((BYTE8(v112) & 8) == 0)
    {
      uint64_t v36 = 0;
      BYTE7(v93) = 0;
      uint64_t v37 = __p;
      goto LABEL_61;
    }
    uint64_t v39 = (const void *)*((void *)&v107 + 1);
    uint64_t v36 = *((void *)&v108 + 1) - *((void *)&v107 + 1);
    if (*((void *)&v108 + 1) - *((void *)&v107 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_160:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v36 >= 0x17)
  {
    xpc_object_t v40 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17) {
      xpc_object_t v40 = v36 | 7;
    }
    long long v41 = v40 + 1;
    uint64_t v37 = operator new(v40 + 1);
    __p[1] = (void *)v36;
    *(void *)&uint64_t v93 = v41 | 0x8000000000000000;
    __p[0] = v37;
    goto LABEL_60;
  }
  BYTE7(v93) = v36;
  uint64_t v37 = __p;
  if (v36) {
LABEL_60:
  }
    memmove(v37, v39, v36);
LABEL_61:
  *((unsigned char *)v37 + v36) = 0;
  uint64_t v42 = BYTE7(v93);
  if ((SBYTE7(v93) & 0x80u) == 0)
  {
    uint64_t v43 = __p;
  }
  else
  {
    uint64_t v42 = (unint64_t)__p[1];
    uint64_t v43 = (void **)__p[0];
  }
  if (v42 >= 0xC8) {
    uint64_t v44 = 200;
  }
  else {
    uint64_t v44 = v42;
  }
  if (v44 >= 0x17)
  {
    xpc_object_t v50 = (v44 & 0xF8) + 8;
    if ((v44 | 7) != 0x17) {
      xpc_object_t v50 = v44 | 7;
    }
    xpc_object_t v51 = v50 + 1;
    int v45 = operator new(v50 + 1);
    *((void *)&__dst[0] + 1) = v44;
    *(void *)&__dst[1] = v51 | 0x8000000000000000;
    *(void *)&__dst[0] = v45;
LABEL_81:
    memmove(v45, v43, v44);
    *((unsigned char *)v45 + v44) = 0;
    if ((SBYTE7(v93) & 0x80000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_82;
  }
  BYTE7(__dst[1]) = v44;
  int v45 = __dst;
  if (v44) {
    goto LABEL_81;
  }
  LOBYTE(__dst[0]) = 0;
  if ((SBYTE7(v93) & 0x80000000) == 0) {
    goto LABEL_70;
  }
LABEL_82:
  operator delete(__p[0]);
LABEL_70:
  if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
    xpc_object_t v46 = __dst;
  }
  else {
    xpc_object_t v46 = *(_OWORD **)&__dst[0];
  }
  objc_msgSend(v11, "addObject:", objc_msgSend(MEMORY[0x1E4F290C8], "queryItemWithName:value:", @"Title", objc_msgSend(NSString, "stringWithUTF8String:", v46, &v106)));
  if (*((char *)a4 + 23) >= 0) {
    xpc_object_t v47 = a4;
  }
  else {
    xpc_object_t v47 = (uint64_t *)*a4;
  }
  objc_msgSend(v11, "addObject:", objc_msgSend(MEMORY[0x1E4F290C8], "queryItemWithName:value:", @"Description", objc_msgSend(NSString, "stringWithUTF8String:", v47)));
  objc_msgSend(v11, "addObject:", objc_msgSend(MEMORY[0x1E4F290C8], "queryItemWithName:value:", @"DeleteOnAttach", @"1"));
  size_t v101 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&xpc_object_t v48 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v48 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v100[7] = v48;
  v100[8] = v48;
  v100[5] = v48;
  v100[6] = v48;
  v100[3] = v48;
  v100[4] = v48;
  v100[1] = v48;
  v100[2] = v48;
  size_t v99 = v48;
  v100[0] = v48;
  *(_OWORD *)BOOL v97 = v48;
  v98 = v48;
  size_t v95 = v48;
  uint64_t v96 = v48;
  uint64_t v93 = v48;
  uint64_t v94 = v48;
  *(_OWORD *)std::string __p = v48;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
  xpc_object_t v49 = *a5;
  if (*a5)
  {
    xpc_retain(*a5);
LABEL_84:
    xpc_retain(v49);
    int v52 = v49;
    goto LABEL_85;
  }
  xpc_object_t v49 = xpc_null_create();
  if (v49) {
    goto LABEL_84;
  }
  xpc_object_t v49 = xpc_null_create();
  int v52 = 0;
LABEL_85:
  xpc_release(v52);
  size_t v53 = *a5;
  if (*a5) {
    xpc_retain(*a5);
  }
  else {
    size_t v53 = xpc_null_create();
  }
  if (MEMORY[0x1A6275E60](*a5) == MEMORY[0x1E4F14568])
  {
    size_t count = xpc_array_get_count(*a5);
    if (v53) {
      goto LABEL_90;
    }
LABEL_92:
    xpc_object_t object = xpc_null_create();
    goto LABEL_93;
  }
  size_t count = 0;
  if (!v53) {
    goto LABEL_92;
  }
LABEL_90:
  xpc_retain(v53);
  xpc_object_t object = v53;
LABEL_93:
  xpc_release(v53);
  if (count || v49 != object)
  {
    uint64_t v55 = 0;
    uint64_t v56 = count - 1;
    while (1)
    {
      while (1)
      {
        memset(v91, 170, sizeof(v91));
        xpc_object_t value = xpc_array_get_value(v49, v55);
        *(void *)&v115.st_dev = value;
        if (value) {
          xpc_retain(value);
        }
        else {
          *(void *)&v115.st_dev = xpc_null_create();
        }
        xpc::dyn_cast_or_default();
        xpc_release(*(xpc_object_t *)&v115.st_dev);
        if (SHIBYTE(v91[2]) >= 0) {
          uint64_t v58 = v91;
        }
        else {
          uint64_t v58 = (void **)v91[0];
        }
        if (SHIBYTE(v91[2]) >= 0) {
          xpc_object_t v59 = HIBYTE(v91[2]);
        }
        else {
          xpc_object_t v59 = (uint64_t)v91[1];
        }
        unint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)v58, v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)",", 1);
        v61.tv_sec = 0xAAAAAAAAAAAAAAAALL;
        v61.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
        *(timespec *)&v115.st_blkstd::string::size_type size = v61;
        *(timespec *)v115.st_qspare = v61;
        v115.st_birthtimespec = v61;
        *(timespec *)&v115.st_std::string::size_type size = v61;
        v115.st_mtimespec = v61;
        v115.st_ctimespec = v61;
        *(timespec *)&v115.st_uid = v61;
        v115.st_atimespec = v61;
        *(timespec *)&v115.st_dev = v61;
        if (SHIBYTE(v91[2]) >= 0) {
          size_t v62 = v91;
        }
        else {
          size_t v62 = (void **)v91[0];
        }
        if (!stat((const char *)v62, &v115))
        {
          xpc_object_t v63 = SHIBYTE(v91[2]) >= 0 ? (const char *)v91 : (const char *)v91[0];
          size_t v64 = opendir(v63);
          size_t v65 = v64;
          if (v64)
          {
            readdir(v64);
            closedir(v65);
          }
        }
        ctu::fs::chmod();
        if ((SHIBYTE(v91[2]) & 0x80000000) == 0) {
          break;
        }
        operator delete(v91[0]);
        xpc_object_t v66 = v55 + 1;
        uint64_t v67 = v56 == v55++;
        if (v67) {
          goto LABEL_120;
        }
      }
      xpc_object_t v66 = v55 + 1;
      uint64_t v67 = v56 == v55++;
      if (v67)
      {
LABEL_120:
        uint64_t v55 = v66;
        if (v49 == object) {
          break;
        }
      }
    }
  }
  xpc_release(object);
  xpc_release(v49);
  strlen(abm::trace::kSnapshotFolder[0]);
  ctu::fs::chmod();
  unint64_t v68 = *(char *)(a6 + 23);
  if (v68 >= 0) {
    long long v69 = *(unsigned __int8 *)(a6 + 23);
  }
  else {
    long long v69 = *(void *)(a6 + 8);
  }
  if (v69)
  {
    if (v68 >= 0) {
      size_t v70 = a6;
    }
    else {
      size_t v70 = *(void *)a6;
    }
    int v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, v70, v69);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)",", 1);
    uint64_t v72 = @"-1";
  }
  else
  {
    uint64_t v72 = @"sysdiagnose-only";
  }
  objc_msgSend(v89, "addObject:", objc_msgSend(MEMORY[0x1E4F290C8], "queryItemWithName:value:", @"autodiagnostics", v72));
  uint64_t v73 = (void *)MEMORY[0x1E4F290C8];
  std::string v74 = NSString;
  if ((BYTE8(v99) & 0x10) != 0)
  {
    uint64_t v77 = v99;
    if ((unint64_t)v99 < *((void *)&v96 + 1))
    {
      *(void *)&size_t v99 = *((void *)&v96 + 1);
      uint64_t v77 = *((void *)&v96 + 1);
    }
    long long v78 = (const void *)v96;
    xpc_object_t v75 = v77 - v96;
    if ((unint64_t)(v77 - v96) > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_162;
    }
  }
  else
  {
    if ((BYTE8(v99) & 8) == 0)
    {
      xpc_object_t v75 = 0;
      HIBYTE(v115.st_gid) = 0;
      uint64_t v76 = &v115;
      goto LABEL_143;
    }
    long long v78 = (const void *)*((void *)&v94 + 1);
    xpc_object_t v75 = *((void *)&v95 + 1) - *((void *)&v94 + 1);
    if (*((void *)&v95 + 1) - *((void *)&v94 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_162:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v75 >= 0x17)
  {
    uint64_t v79 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v75 | 7) != 0x17) {
      uint64_t v79 = v75 | 7;
    }
    xpc_object_t v80 = v79 + 1;
    uint64_t v76 = operator new(v79 + 1);
    v115.st_ino = v75;
    *(void *)&v115.st_uid = v80 | 0x8000000000000000;
    *(void *)&v115.st_dev = v76;
    goto LABEL_142;
  }
  HIBYTE(v115.st_gid) = v75;
  uint64_t v76 = &v115;
  if (v75) {
LABEL_142:
  }
    memmove(v76, v78, v75);
LABEL_143:
  *((unsigned char *)v76 + v75) = 0;
  if ((v115.st_gid & 0x80000000) == 0) {
    size_t v81 = &v115;
  }
  else {
    size_t v81 = *(stat **)&v115.st_dev;
  }
  objc_msgSend(v89, "addObject:", objc_msgSend(v73, "queryItemWithName:value:", @"Attachments", objc_msgSend(v74, "stringWithUTF8String:", v81)));
  if (SHIBYTE(v115.st_gid) < 0) {
    operator delete(*(void **)&v115.st_dev);
  }
  [v88 setQueryItems:v89];
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F223E0], "defaultWorkspace"), "openURL:configuration:completionHandler:", objc_msgSend(v88, "URL"), 0, 0);
  if (v88) {

  }
  if (v89) {
  __p[0] = *(void **)MEMORY[0x1E4FBA408];
  }
  xpc_object_t v82 = __p[0];
  xpc_object_t v83 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  uint64_t v84 = *(void **)(MEMORY[0x1E4FBA408] + 64);
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = v84;
  xpc_object_t v85 = v83;
  *(void *)&uint64_t v93 = v83;
  *((void *)&v93 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v98) < 0) {
    operator delete(v97[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A62751A0](v100);
  if (SBYTE7(__dst[1]) < 0) {
    operator delete(*(void **)&__dst[0]);
  }
  *(void *)&uint64_t v105 = v82;
  *(void *)((char *)&v105 + *(v82 - 3)) = v84;
  *(void *)&uint64_t v106 = v85;
  *((void *)&v106 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v111) < 0) {
    operator delete(*((void **)&v110 + 1));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62751A0](v113);
}

void sub_1A60BDA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a62);
  _Unwind_Resume(a1);
}

void sub_1A60BDB74()
{
}

void sub_1A60BDB84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t dispatch::callback<void({block_pointer})(TelephonyXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(int,xpc::dict)>)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

BOOL abm::TapToRadarTask::checkTraceLogsInArchive_sync(uint64_t a1, uint64_t *a2, char ***a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  archive_read_new();
  unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
  if (archive_read_support_format_tar() || archive_read_support_filter_all())
  {
    uint64_t v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_error_impl(&dword_1A609F000, v6, OS_LOG_TYPE_ERROR, "Failed to open archive", __p, 2u);
    }
LABEL_5:
    archive_read_free();
    return 0;
  }
  int open_filename = archive_read_open_filename();
  if (open_filename)
  {
    int v9 = open_filename;
    id v10 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a2 + 23) >= 0) {
        int v28 = a2;
      }
      else {
        int v28 = (uint64_t *)*a2;
      }
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = v28;
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = v9;
      _os_log_error_impl(&dword_1A609F000, v10, OS_LOG_TYPE_ERROR, "Failed to open %s with Error %d", __p, 0x12u);
    }
    goto LABEL_5;
  }
  int v29 = a2;
  uint64_t v30 = a1;
  int next_header = archive_read_next_header();
  if (!next_header)
  {
    while (a3[1] != *a3)
    {
      uint64_t v12 = archive_entry_pathname();
      uint64_t v13 = *a3;
      if (*a3 < a3[1])
      {
        size_t v14 = (char *)v12;
        xpc_object_t v15 = *a3;
        while (1)
        {
          *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v33 = v16;
          long long v34 = v16;
          *(_OWORD *)&v31[0].__locale_ = v16;
          long long v32 = v16;
          std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)v31, *v15, 0);
          size_t v17 = strlen(v14);
          *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v42 = v18;
          unint64_t v39 = 0xAAAAAAAAAAAAAA00;
          *(void *)&unsigned char __p[40] = 0xAAAAAAAAAAAAAAAALL;
          uint64_t v37 = 0;
          uint64_t v38 = 0;
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          LOBYTE(v42) = 0;
          BYTE8(v42) = 0;
          uint64_t v43 = 0;
          memset(__p, 0, 41);
          int v19 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v31, (std::sub_match<const char *> *)v14, (std::sub_match<const char *> *)&v14[v17], (std::vector<std::csub_match> *)__p, 4160);
          int v20 = v42;
          if (*(void *)__p)
          {
            *(void *)&__p[8] = *(void *)__p;
            operator delete(*(void **)__p);
          }
          int v21 = v20 ? 0 : v19;
          if (v21 == 1) {
            break;
          }
          size_t v22 = (std::__shared_weak_count *)v34;
          if ((void)v34 && !atomic_fetch_add((atomic_ullong *volatile)(v34 + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
          std::locale::~locale(v31);
          ++v15;
          ++v13;
          if (v15 >= a3[1]) {
            goto LABEL_31;
          }
        }
        unint64_t v23 = a3[1];
        int64_t v24 = (char *)v23 - (char *)(v13 + 1);
        if (v23 != v13 + 1) {
          memmove(v13, v13 + 1, (char *)v23 - (char *)(v13 + 1));
        }
        a3[1] = (char **)((char *)v13 + v24);
        unint64_t v25 = (std::__shared_weak_count *)v34;
        if ((void)v34 && !atomic_fetch_add((atomic_ullong *volatile)(v34 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        std::locale::~locale(v31);
      }
LABEL_31:
      int next_header = archive_read_next_header();
      if (next_header) {
        goto LABEL_32;
      }
    }
    archive_read_free();
    return 1;
  }
LABEL_32:
  archive_read_free();
  if (next_header == 1) {
    return 1;
  }
  uint64_t v26 = *(NSObject **)(v30 + 40);
  BOOL result = os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
  if (result)
  {
    if (*((char *)v29 + 23) >= 0) {
      long long v27 = v29;
    }
    else {
      long long v27 = (uint64_t *)*v29;
    }
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v27;
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = next_header;
    _os_log_error_impl(&dword_1A609F000, v26, OS_LOG_TYPE_ERROR, "Failed while reading archive %s with Error %d", __p, 0x12u);
    return 0;
  }
  return result;
}

void sub_1A60BE058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a11);
  _Unwind_Resume(a1);
}

uint64_t util::convert<BOOL>(const std::string *a1, BOOL *a2, int a3)
{
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v6 = (const char *)a1->__r_.__value_.__r.__words[0];
    if (strcasecmp(a1->__r_.__value_.__l.__data_, "false") && strcasecmp(v6, "off") && strcasecmp(v6, "no"))
    {
      if (!strcasecmp(v6, "true")
        || !strcasecmp(v6, "on")
        || !strcasecmp(v6, "yes")
        || !strcasecmp(v6, "full")
        || !strcasecmp(v6, "streaming")
        || !strcasecmp(v6, "lite"))
      {
        goto LABEL_28;
      }
      goto LABEL_21;
    }
LABEL_27:
    unint64_t v7 = 0;
LABEL_29:
    *a2 = v7 != 0;
    return 1;
  }
  if (!strcasecmp((const char *)a1, "false")
    || !strcasecmp((const char *)a1, "off")
    || !strcasecmp((const char *)a1, "no"))
  {
    goto LABEL_27;
  }
  if (!strcasecmp((const char *)a1, "true")) {
    goto LABEL_28;
  }
  if (!strcasecmp((const char *)a1, "on")) {
    goto LABEL_28;
  }
  if (!strcasecmp((const char *)a1, "yes")) {
    goto LABEL_28;
  }
  if (!strcasecmp((const char *)a1, "full")) {
    goto LABEL_28;
  }
  if (!strcasecmp((const char *)a1, "streaming")) {
    goto LABEL_28;
  }
  uint64_t v6 = (const char *)a1;
  if (!strcasecmp((const char *)a1, "lite")) {
    goto LABEL_28;
  }
LABEL_21:
  if (!strcasecmp(v6, "background"))
  {
LABEL_28:
    unint64_t v7 = 1;
    goto LABEL_29;
  }
  size_t __idx = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v7 = std::stol(a1, &__idx, a3);
  uint64_t v8 = 0;
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (__idx == size && v7 < 2) {
    goto LABEL_29;
  }
  return v8;
}

uint64_t sub_1A60BE2B0(void *a1)
{
  return 0;
}

void ___ZN3abm14TapToRadarTask32checkAttachmentForRadarType_syncENS_6helper9RadarTypeERN3xpc5arrayE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) < 0) {
      a2 = (uint64_t *)*a2;
    }
    int v4 = 136315138;
    uint64_t v5 = a2;
    _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Failed to find logs with [%s]", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t ctu::Loggable<abm::HelperTask,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<abm::HelperTask,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  if (*(char *)(v3 + 23) < 0)
  {
    uint64_t v5 = *(const std::string::value_type **)v3;
    std::string::size_type v6 = *(void *)(v3 + 8);
    std::string::__init_copy_ctor_external(a2, v5, v6);
  }
  else
  {
    long long v4 = *(_OWORD *)v3;
    a2->__r_.__value_.__r.__words[2] = *(void *)(v3 + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

uint64_t ctu::Loggable<abm::HelperTask,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<abm::HelperTask,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1EFB09350;
  MEMORY[0x1A6274710](a1 + 1);
  return a1;
}

void ctu::Loggable<abm::HelperTask,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1EFB09350;
  MEMORY[0x1A6274710](a1 + 1);

  operator delete(a1);
}

void ctu::os::signpost_interval::~signpost_interval(ctu::os::signpost_interval *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2 && *(void *)this)
  {
    uint64_t v3 = *((void *)this + 1);
    uint64_t v8 = *(void *)this;
    uint64_t v9 = v3;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v2 + 48))(v2, &v9, &v8);
  }
  long long v4 = (void *)*((void *)this + 1);
  if (v4) {
    os_release(v4);
  }
  uint64_t v5 = (char *)this + 16;
  *((void *)this + 1) = 0;
  std::string::size_type v6 = (ctu::os::signpost_interval *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v6 == (ctu::os::signpost_interval *)((char *)this + 16))
  {
    (*(void (**)(char *))(*(void *)v5 + 32))((char *)this + 16);
    unint64_t v7 = (char *)*((void *)this + 5);
    *(void *)this = 0;
    if (v7 != v5) {
      goto LABEL_9;
    }
LABEL_13:
    (*(void (**)(char *))(*(void *)v5 + 32))((char *)this + 16);
    return;
  }
  if (!v6)
  {
    *(void *)this = 0;
    return;
  }
  (*(void (**)(ctu::os::signpost_interval *))(*(void *)v6 + 40))(v6);
  unint64_t v7 = (char *)*((void *)this + 5);
  *(void *)this = 0;
  if (v7 == v5) {
    goto LABEL_13;
  }
LABEL_9:
  if (v7) {
    (*(void (**)(char *))(*(void *)v7 + 40))(v7);
  }
}

void *std::function<void ()(os_log_s *,unsigned long long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v1, &object);
  xpc_release(object);
}

void sub_1A60BE72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t __copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  long long v4 = *(const void **)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = _Block_copy(v4);
    std::string::size_type v6 = *(void **)(a2 + 40);
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  else
  {
    std::string::size_type v6 = *(void **)(a2 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

void *_ZNKSt3__110__function6__funcIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__1NS_9allocatorIS4_EEFvP8os_log_syEE7__cloneEv()
{
  xpc_object_t result = operator new(0x10uLL);
  *xpc_object_t result = &unk_1EFB092A8;
  return result;
}

void _ZNKSt3__110__function6__funcIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__1NS_9allocatorIS4_EEFvP8os_log_syEE7__cloneEPNS0_6__baseIS9_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EFB092A8;
}

void _ZNSt3__110__function6__funcIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__1NS_9allocatorIS4_EEFvP8os_log_syEEclEOS8_Oy(uint64_t a1, os_log_t *a2, os_signpost_id_t *a3)
{
  os_signpost_id_t v3 = *a3;
  if (*a3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    long long v4 = *a2;
    if (os_signpost_enabled(*a2))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A609F000, v4, OS_SIGNPOST_INTERVAL_END, v3, "CellularTapToRadar", (const char *)&unk_1A6202E22, v5, 2u);
    }
  }
}

uint64_t _ZNKSt3__110__function6__funcIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__1NS_9allocatorIS4_EEFvP8os_log_syEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN3abm14TapToRadarTask9init_syncEvEUb_E3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZZN3abm14TapToRadarTask9init_syncEvEUb_E3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN3abm14TapToRadarTask9init_syncEvEUb_E3$_1")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN3abm14TapToRadarTask9init_syncEvEUb_E3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__1NS_9allocatorIS4_EEFvP8os_log_syEE11target_typeEv()
{
  return &_ZTIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__1;
}

uint64_t *_ZNSt3__110unique_ptrIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3NS_14default_deleteIS3_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 143) < 0) {
      operator delete(*(void **)(v2 + 120));
    }
    xpc_release(*(xpc_object_t *)(v2 + 112));
    *(void *)(v2 + 112) = 0;
    if (*(char *)(v2 + 111) < 0)
    {
      operator delete(*(void **)(v2 + 88));
      if ((*(char *)(v2 + 79) & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    else if ((*(char *)(v2 + 79) & 0x80000000) == 0)
    {
LABEL_6:
      ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)v2);
      operator delete(v3);
      return a1;
    }
    operator delete(*(void **)(v2 + 56));
    goto LABEL_6;
  }
  return a1;
}

uint64_t *_ZZN8dispatch5asyncIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS6_14default_deleteIS8_EEEEENUlPvE_8__invokeESC_(uint64_t a1)
{
  v30[0] = a1;
  uint64_t v2 = *(void *)(a1 + 80);
  unint64_t v3 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  [v3 setObject:@"Dismiss" forKeyedSubscript:*MEMORY[0x1E4F1D9E0]];
  if (*(_DWORD *)(a1 + 48) == 5) {
    long long v4 = @"Cellular Audio Problem Detected";
  }
  else {
    long long v4 = @"Cellular Problem Detected";
  }
  [v3 setObject:v4 forKeyedSubscript:*MEMORY[0x1E4F1D990]];
  [v3 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F1D9B8]];
  [v3 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4FA7340]];
  [v3 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:*MEMORY[0x1E4FA7328]];
  [v3 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4FA73C8]];
  if (TelephonyUtilIsInternalBuild()) {
    [v3 setObject:@"File Radar" forKeyedSubscript:*MEMORY[0x1E4F1D9D0]];
  }
  uint64_t v5 = (uint64_t *)(a1 + 56);
  uint64_t v6 = a1 + 56;
  if (*(char *)(a1 + 79) < 0) {
    uint64_t v6 = *v5;
  }
  uint64_t v7 = [NSString stringWithUTF8String:v6];
  [v3 setObject:v7 forKeyedSubscript:*MEMORY[0x1E4F1D9A8]];
  [v3 setObject:@"Disable notifications" forKeyedSubscript:*MEMORY[0x1E4F1DA10]];
  SInt32 error = 0;
  CFOptionFlags responseFlags = 3;
  uint64_t v8 = CFUserNotificationCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 300.0, 3uLL, &error, (CFDictionaryRef)v3);
  uint64_t v9 = v8;
  if (v8 && !error)
  {
    SInt32 error = CFUserNotificationReceiveResponse(v8, 0.0, &responseFlags);
    int IsInternalBuild = TelephonyUtilIsInternalBuild();
    if (responseFlags == 1) {
      int v11 = IsInternalBuild;
    }
    else {
      int v11 = 0;
    }
    if (v11 == 1 && !error)
    {
      memset(__p, 170, 24);
      int v12 = *(_DWORD *)(a1 + 48);
      uint64_t v13 = a1 + 88;
      size_t v14 = (xpc_object_t *)(a1 + 112);
      uint64_t v15 = a1 + 120;
      abm::TapToRadarTask::prepareRadar_sync(v12, v13, v14, v15, (uint64_t)__p);
      abm::TapToRadarTask::fileRadar_sync(v2, v16, (uint64_t)v5, (uint64_t *)__p, v14, v15);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      goto LABEL_18;
    }
    if (responseFlags == 2 && !error)
    {
      uint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v35 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
      __p[23] = 10;
      strcpy(__p, "TapToRadar");
      abm::client::CreateManager();
      xpc_object_t v18 = xpc_dictionary_create(0, 0, 0);
      if (v18 || (xpc_object_t v18 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A6275E60](v18) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v18);
          xpc_object_t v19 = v18;
        }
        else
        {
          xpc_object_t v19 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v19 = xpc_null_create();
        xpc_object_t v18 = 0;
      }
      xpc_release(v18);
      xpc_object_t v20 = xpc_string_create("TTR");
      if (!v20) {
        xpc_object_t v20 = xpc_null_create();
      }
      xpc_dictionary_set_value(v19, "kKeyTraceName", v20);
      xpc_object_t v21 = xpc_null_create();
      xpc_release(v20);
      xpc_release(v21);
      xpc_object_t v22 = xpc_string_create("Mode");
      if (!v22) {
        xpc_object_t v22 = xpc_null_create();
      }
      xpc_dictionary_set_value(v19, "kKeyTracePropertyName", v22);
      xpc_object_t v23 = xpc_null_create();
      xpc_release(v22);
      xpc_release(v23);
      memset(buf, 0, 24);
      std::to_string((std::string *)__p, 0);
      *(_OWORD *)buf = *(_OWORD *)__p;
      *(void *)&buf[16] = *(void *)&__p[16];
      if (__p[23] >= 0) {
        int64_t v24 = buf;
      }
      else {
        int64_t v24 = *(uint8_t **)buf;
      }
      xpc_object_t v25 = xpc_string_create((const char *)v24);
      if (!v25) {
        xpc_object_t v25 = xpc_null_create();
      }
      xpc_dictionary_set_value(v19, "kKeyTracePropertyValue", v25);
      xpc_object_t v26 = xpc_null_create();
      xpc_release(v25);
      xpc_release(v26);
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
      *(void *)&long long v27 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)std::string __p = v27;
      *(_OWORD *)&__p[16] = v27;
      v30[1] = v34;
      BOOL v31 = v35;
      if (v35) {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)buf = operator new(0x20uLL);
      *(_OWORD *)&buf[8] = xmmword_1A61F6FD0;
      strcpy(*(char **)buf, "kCommandSetTraceProperty");
      abm::client::PerformCommand();
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
      if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      if (*(_DWORD *)__p && (int v28 = *(NSObject **)(v2 + 40), os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1A609F000, v28, OS_LOG_TYPE_ERROR, "Failed to disable Radar Notifications", buf, 2u);
        if ((__p[31] & 0x80000000) == 0) {
          goto LABEL_50;
        }
      }
      else if ((__p[31] & 0x80000000) == 0)
      {
LABEL_50:
        xpc_release(v19);
        int v29 = v35;
        if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
        goto LABEL_18;
      }
      operator delete(*(void **)&__p[8]);
      goto LABEL_50;
    }
LABEL_18:
    CFRelease(v9);
    return _ZNSt3__110unique_ptrIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3NS_14default_deleteIS3_EEED1B8ne180100Ev(v30);
  }
  if (v8) {
    goto LABEL_18;
  }
  return _ZNSt3__110unique_ptrIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3NS_14default_deleteIS3_EEED1B8ne180100Ev(v30);
}

void sub_1A60BEFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  int v28 = a12;
  if (a12 && !atomic_fetch_add(&a12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  xpc_release(v25);
  int v29 = *(std::__shared_weak_count **)(v26 - 72);
  if (v29)
  {
    if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      _ZNSt3__110unique_ptrIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3NS_14default_deleteIS3_EEED1B8ne180100Ev(&a10);
      _Unwind_Resume(a1);
    }
  }
  _ZNSt3__110unique_ptrIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3NS_14default_deleteIS3_EEED1B8ne180100Ev(&a10);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1, char *a2, int a3)
{
  uint64_t v6 = (const std::locale *)MEMORY[0x1A6275150]();
  *(void *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x1E4FBA258]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E4FBA280]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  size_t v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(a1, a2, &a2[v7]) != &a2[v7]) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  }
  return a1;
}

void sub_1A60BF1B8(_Unwind_Exception *a1)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1A60BF1D4(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3) {
    return a2;
  }
  if (*a2 == 94)
  {
    uint64_t v6 = operator new(0x18uLL);
    BOOL v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(v8 + 8);
    *uint64_t v6 = &unk_1EFB08BA8;
    v6[1] = v9;
    *((unsigned char *)v6 + 16) = v7;
    *(void *)(v8 + 8) = v6;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    unint64_t v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      id v10 = v3;
      int v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v12 = *(_DWORD *)(a1 + 28);
      uint64_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, (uint64_t)v10, a3);
      if (v13 != (char *)v10)
      {
        unint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v3 != v10) {
          continue;
        }
      }
      if ((char *)&v10->__traits_.__loc_.__locale_ + 1 != a3 || LOBYTE(v10->__traits_.__loc_.__locale_) != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      size_t v14 = operator new(0x18uLL);
      BOOL v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(v16 + 8);
      *size_t v14 = &unk_1EFB08BF0;
      v14[1] = v17;
      *((unsigned char *)v14 + 16) = v15;
      *(void *)(v16 + 8) = v14;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v7 == a2) {
    goto LABEL_12;
  }
  do
  {
    uint64_t v8 = v7;
    BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
LABEL_12:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3) {
    return a3;
  }
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    uint64_t v9 = *(void *)(a1 + 56);
    id v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if (v11 == (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1)) {
      goto LABEL_12;
    }
    do
    {
      uint64_t v8 = v11;
      int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      goto LABEL_12;
    }
    int v12 = operator new(0x18uLL);
    uint64_t v13 = *(void *)(v9 + 8);
    v12[1] = *(void *)(v6 + 8);
    v12[2] = v13;
    *int v12 = &unk_1EFB09070;
    *(void *)(v6 + 8) = v12;
    *(void *)(v9 + 8) = 0;
    size_t v14 = operator new(0x10uLL);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    v14[1] = v15;
    *(void *)(v9 + 8) = v14;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v16 = operator new(0x10uLL);
    uint64_t v17 = *(void *)(v9 + 8);
    *uint64_t v16 = &unk_1EFB090B8;
    v16[1] = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = v16;
    *(void *)(a1 + 56) = *(void *)(v9 + 8);
    if (v8 == a3) {
      return a3;
    }
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    id v10 = operator new(0x10uLL);
    uint64_t v11 = *(void *)(v6 + 8);
    v10[1] = v11;
    *(void *)(v6 + 8) = v10;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = v8 + 1;
    }
    if (v9 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = v8 + 1;
    }
    if (v9 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    xpc_object_t v21 = (char *)memchr(v9, 10, a3 - v9);
    if (v21) {
      xpc_object_t v22 = v21;
    }
    else {
      xpc_object_t v22 = a3;
    }
    if (v22 == v9)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v9, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    *uint64_t v15 = &unk_1EFB09070;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    xpc_object_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    *xpc_object_t v19 = &unk_1EFB090B8;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v9 = v22;
    }
    else {
      uint64_t v9 = v22 + 1;
    }
  }
  while (v9 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    id v10 = operator new(0x10uLL);
    uint64_t v11 = *(void *)(v6 + 8);
    v10[1] = v11;
    *(void *)(v6 + 8) = v10;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v9 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v9 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    xpc_object_t v21 = (std::basic_regex<char> *)memchr(v9, 10, (char *)a3 - (char *)v9);
    if (v21) {
      xpc_object_t v22 = v21;
    }
    else {
      xpc_object_t v22 = a3;
    }
    if (v22 == v9)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v9, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    *uint64_t v15 = &unk_1EFB09070;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    xpc_object_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    *xpc_object_t v19 = &unk_1EFB090B8;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v9 = v22;
    }
    else {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
  }
  while (v9 != a3);
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  uint64_t v5 = a2 + 1;
  if (a2 + 1 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v7 = *v5;
  unsigned int v8 = v7 - 48;
  if (v7 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v8);
    return a2 + 2;
  }
  if ((v7 - 49) > 8) {
    goto LABEL_18;
  }
  id v10 = a2 + 2;
  if (a2 + 2 == a3)
  {
    id v10 = a3;
  }
  else
  {
    while (1)
    {
      int v11 = *v10;
      if ((v11 - 48) > 9) {
        break;
      }
      if (v8 >= 0x19999999) {
        goto LABEL_23;
      }
      ++v10;
      unsigned int v8 = v11 + 10 * v8 - 48;
      if (v10 == a3)
      {
        id v10 = a3;
        break;
      }
    }
    if (!v8) {
LABEL_23:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v8 > this->__marked_count_) {
    goto LABEL_23;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v8);
  if (v10 == v5)
  {
LABEL_18:
    id v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>((uint64_t)this, a2 + 1, a3);
    if (v10 == v5)
    {
      uint64_t v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, a3, 0);
      if (v12 == v5) {
        return a2;
      }
      else {
        return v12;
      }
    }
  }
  return v10;
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  unint64_t v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        uint64_t v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        uint64_t v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        uint64_t v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        uint64_t v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        uint64_t v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        uint64_t v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(void *)(*(void *)(a1 + 56) + 8) = v6;
        *(void *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_1A60BFE98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A60BFEAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A60BFEC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A60BFED4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A60BFEE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A60BFEFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  long long v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  uint64_t v5 = *a2;
  std::basic_regex<char>::value_type v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3) {
        goto LABEL_81;
      }
      unsigned __int8 v8 = v4[1];
      if (((v8 & 0xDF) - 65) > 0x19u) {
        goto LABEL_81;
      }
      std::basic_regex<char>::value_type v9 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v9;
        *((unsigned char *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v9);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        int v10 = v4[1];
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            int v11 = *v4;
            if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6) {
              goto LABEL_38;
            }
          }
        }
      }
      goto LABEL_81;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char>::value_type v6 = 11;
LABEL_65:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_38:
      if (v4 + 1 == a3) {
        goto LABEL_81;
      }
      unsigned __int8 v12 = v4[1];
      char v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
        goto LABEL_43;
      }
      v12 |= 0x20u;
      if ((v12 - 97) >= 6u) {
        goto LABEL_81;
      }
      char v13 = -87;
LABEL_43:
      if (v4 + 2 == a3) {
        goto LABEL_81;
      }
      unsigned __int8 v14 = v4[2];
      char v15 = -48;
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      {
        v14 |= 0x20u;
        if ((v14 - 97) >= 6u) {
LABEL_81:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        char v15 = -87;
      }
      std::basic_regex<char>::value_type v16 = v14 + 16 * (v12 + v13) + v15;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v16;
      *((unsigned char *)a4 + 1) = 0;
      xpc_object_t result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0) {
        goto LABEL_81;
      }
      if (!a4) {
        goto LABEL_65;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v5;
      *((unsigned char *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  if (a3 - __src < 2 || a3 - 1 == __src) {
    goto LABEL_39;
  }
  uint64_t v7 = 0;
  unsigned __int8 v8 = __src;
  if (*__src != 61) {
    goto LABEL_5;
  }
LABEL_4:
  if (v8[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v7)
    {
      unsigned __int8 v8 = &__src[++v7];
      if (__src[v7] == 61) {
        goto LABEL_4;
      }
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v7] == a3) {
    goto LABEL_39;
  }
  memset(v18, 170, sizeof(v18));
  std::regex_traits<char>::__lookup_collatename<char *>(__src, a1, &__src[v7], (uint64_t)v18);
  if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
  {
    std::basic_regex<char>::value_type v9 = (char *)HIBYTE(v18[2]);
    if (HIBYTE(v18[2]))
    {
      memset(__p, 170, sizeof(__p));
      int v10 = v18;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  std::basic_regex<char>::value_type v9 = (char *)v18[1];
  if (!v18[1]) {
    goto LABEL_40;
  }
  memset(__p, 170, sizeof(__p));
  int v10 = (void **)v18[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v10, &v9[(void)v10], (unsigned char **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      unint64_t v11 = *(void *)(a4 + 144);
      if (v11 >= *(void *)(a4 + 152))
      {
        *(void *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v12 = *(_OWORD *)__p;
          *(void **)(v11 + 16) = __p[2];
          *(_OWORD *)unint64_t v11 = v12;
        }
        *(void *)(a4 + 144) = v11 + 24;
        *(void *)(a4 + 144) = v11 + 24;
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  char v13 = (void *)HIBYTE(v18[2]);
  if (SHIBYTE(v18[2]) < 0) {
    char v13 = v18[1];
  }
  if (v13 == (void *)2)
  {
    char v15 = v18;
    if (SHIBYTE(v18[2]) < 0) {
      char v15 = (void **)v18[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v15, *((char *)v15 + 1));
  }
  else
  {
    if (v13 != (void *)1) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    }
    unsigned __int8 v14 = v18;
    if (SHIBYTE(v18[2]) < 0) {
      unsigned __int8 v14 = (void **)v18[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v14);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v18[2]) < 0) {
      goto LABEL_38;
    }
    return &__src[v7 + 2];
  }
LABEL_33:
  if (SHIBYTE(v18[2]) < 0) {
LABEL_38:
  }
    operator delete(v18[0]);
  return &__src[v7 + 2];
}

void sub_1A60C0810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  if (a3 - __src < 2 || a3 - 1 == __src) {
    goto LABEL_15;
  }
  uint64_t v6 = 0;
  uint64_t v7 = __src;
  if (*__src != 46) {
    goto LABEL_5;
  }
LABEL_4:
  if (v7[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v6)
    {
      uint64_t v7 = &__src[++v6];
      if (__src[v6] == 46) {
        goto LABEL_4;
      }
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v6] == a3) {
    goto LABEL_15;
  }
  std::regex_traits<char>::__lookup_collatename<char *>(__src, a1, &__src[v6], (uint64_t)&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v11;
  unint64_t v8 = v12;
  *(void *)(a4 + 16) = v12;
  unint64_t v9 = HIBYTE(v8);
  if ((v9 & 0x80u) != 0) {
    unint64_t v9 = *(void *)(a4 + 8);
  }
  if (v9 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return &__src[v6 + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      xpc_object_t result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      xpc_object_t result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      xpc_object_t result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      xpc_object_t result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      xpc_object_t result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      xpc_object_t result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      xpc_object_t result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        xpc_object_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 1) = 0;
        xpc_object_t result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_70:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  std::basic_regex<char>::value_type v5 = *a2;
  switch(*a2)
  {
    case '""':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v5;
        *((unsigned char *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30) {
        goto LABEL_70;
      }
      std::basic_regex<char>::value_type v7 = *a2 - 48;
      unint64_t v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        unint64_t v8 = a3;
LABEL_42:
        if (a4) {
          goto LABEL_43;
        }
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30) {
        goto LABEL_42;
      }
      std::basic_regex<char>::value_type v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        unint64_t v8 = a3;
        if (a4) {
          goto LABEL_43;
        }
        goto LABEL_69;
      }
      std::basic_regex<char>::value_type v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::basic_regex<char>::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        unint64_t v8 = a2 + 3;
      }
      else {
        unint64_t v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::basic_regex<char>::value_type v7 = v11;
      }
      if (!a4) {
        goto LABEL_69;
      }
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v7;
      *((unsigned char *)a4 + 1) = 0;
      return v8;
  }
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, unsigned char *__src, unsigned char *a3, BOOL a4)
{
  size_t v4 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    std::basic_regex<char>::value_type v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v4);
    std::basic_regex<char>::value_type v9 = (void **)((char *)v9 + v4);
    goto LABEL_9;
  }
  uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17) {
    uint64_t v10 = v4 | 7;
  }
  uint64_t v11 = v10 + 1;
  std::basic_regex<char>::value_type v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v4;
  void __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)std::basic_regex<char>::value_type v9 = 0;
  unint64_t v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0) {
    char v13 = __dst;
  }
  else {
    char v13 = (void **)__dst[0];
  }
  if (SHIBYTE(__dst[2]) < 0) {
    unint64_t v12 = (char *)__dst[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v13, &v12[(void)v13]);
  if (SHIBYTE(__dst[2]) >= 0) {
    unsigned __int8 v14 = (const char *)__dst;
  }
  else {
    unsigned __int8 v14 = (const char *)__dst[0];
  }
  uint64_t classname = std::__get_classname(v14, a4);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  return classname;
}

void sub_1A60C12CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>((std::basic_regex<char> *)a1, (char *)a2, a3);
  std::basic_regex<char>::value_type v7 = v6;
  if (v6 != (char *)a2 || v6 == a3) {
    return v7;
  }
  if ((char *)(a2 + 1) == a3) {
    return (char *)a2;
  }
  if (*(unsigned char *)a2 != 92) {
    return (char *)a2;
  }
  int v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    std::basic_regex<char>::value_type v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      uint64_t v10 = operator new(0x18uLL);
      int v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v13 = *(void *)(v12 + 8);
      *uint64_t v10 = &unk_1EFB08F08;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(void *)(v12 + 8) = v10;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3) {
        goto LABEL_25;
      }
      char v15 = v9;
      std::basic_regex<char>::value_type v16 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v17 = *(_DWORD *)(a1 + 28);
      uint64_t v18 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, v15, a3);
      if (v18 == v15) {
        break;
      }
      std::basic_regex<char>::value_type v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, v18, (std::basic_regex<char> *)a3, v16, (v17 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v9 != v15);
    if ((char *)&v15->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v15->__traits_.__loc_.__locale_) != 92
      || BYTE1(v15->__traits_.__loc_.__locale_) != 41)
    {
LABEL_25:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    std::basic_regex<char>::value_type v7 = (char *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 41);
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      xpc_object_t v19 = operator new(0x18uLL);
      uint64_t v20 = *(void *)(a1 + 56);
      uint64_t v21 = *(void *)(v20 + 8);
      *xpc_object_t v19 = &unk_1EFB08F50;
      v19[1] = v21;
      *((_DWORD *)v19 + 4) = v11;
      *(void *)(v20 + 8) = v19;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return v7;
    }
    return v7;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8) {
    return (char *)a2;
  }
  if ((v8 - 48) > *(_DWORD *)(a1 + 28)) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  uint64_t v6 = this;
  if (this == a3) {
    return v6;
  }
  int locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)v6 + 1);
  }
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return v6;
  }
  std::basic_regex<char>::value_type v9 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v9 == a3) {
    goto LABEL_43;
  }
  int v10 = LOBYTE(v9->__traits_.__loc_.__locale_);
  if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38) {
    goto LABEL_43;
  }
  int v11 = v10 - 48;
  uint64_t v12 = (std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_16:
    uint64_t v12 = a3;
  }
  else
  {
    while (1)
    {
      int v13 = LOBYTE(v12->__traits_.__loc_.__locale_);
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38) {
        break;
      }
      if (v11 >= 214748364) {
        goto LABEL_43;
      }
      int v11 = v13 + 10 * v11 - 48;
      uint64_t v12 = (std::basic_regex<char> *)((char *)v12 + 1);
      if (v12 == a3) {
        goto LABEL_16;
      }
    }
  }
  if (v12 == v9) {
    goto LABEL_43;
  }
  if (v12 == a3) {
    goto LABEL_41;
  }
  unsigned __int8 v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 1);
  int v15 = LOBYTE(v12->__traits_.__loc_.__locale_);
  if (v15 != 44)
  {
    if (v14 != a3 && v15 == 92 && LOBYTE(v14->__traits_.__loc_.__locale_) == 125)
    {
      xpc_object_t v19 = (unsigned __int8 *)&v12->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v11, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_41;
  }
  if (v14 == a3) {
    goto LABEL_41;
  }
  int v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
  if ((v16 & 0xF8) == 0x30 || (v16 & 0xFE) == 0x38)
  {
    unsigned __int8 v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2) == a3) {
      goto LABEL_41;
    }
    int v17 = v16 - 48;
    while (1)
    {
      int v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
      if ((v16 & 0xF8) != 0x30 && (v16 & 0xFE) != 0x38) {
        break;
      }
      if (v17 >= 214748364) {
        goto LABEL_43;
      }
      int v17 = v16 + 10 * v17 - 48;
      unsigned __int8 v14 = (std::basic_regex<char> *)((char *)v14 + 1);
      if (v14 == a3) {
        goto LABEL_41;
      }
    }
  }
  else
  {
    int v17 = -1;
  }
  if (v14 == a3
    || (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1) == a3
    || v16 != 92
    || BYTE1(v14->__traits_.__loc_.__locale_) != 125)
  {
LABEL_41:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  uint64_t v18 = (unsigned __int8 *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 125);
  if (v17 != -1)
  {
    if (v17 >= v11)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v17, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v18;
    }
LABEL_43:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 1;
    int v5 = *a2;
    if (a2 + 1 != a3 || v5 != 36)
    {
      if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
        return a2 + 1;
      }
      if (v6 == a3 || v5 != 92)
      {
        if (v5 == 46)
        {
          int v10 = (std::__node<char> *)operator new(0x10uLL);
          std::vector<std::ssub_match>::pointer end = this->__end_;
          first = end->__first_;
          v10->__vftable = (std::__node<char>_vtbl *)&unk_1EFB09100;
          v10[1].__vftable = (std::__node<char>_vtbl *)first;
          end->__first_ = v10;
          this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          return a2 + 1;
        }
      }
      else
      {
        int v9 = *v6;
        if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
          return a2 + 2;
        }
      }
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 != a2
    || (int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(a1, a2, a3), v8 != a2))
  {
    if (v8 != a2) {
      goto LABEL_25;
    }
LABEL_4:
    if (v8 != a3)
    {
      int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
      if (locale_low == 36)
      {
        int v10 = operator new(0x18uLL);
        BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
        uint64_t v12 = *(void *)(a1 + 56);
        v10[1] = *(void *)(v12 + 8);
        int v13 = &unk_1EFB08BF0;
        goto LABEL_13;
      }
      if (locale_low != 40)
      {
        if (locale_low == 94)
        {
          int v10 = operator new(0x18uLL);
          BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
          uint64_t v12 = *(void *)(a1 + 56);
          v10[1] = *(void *)(v12 + 8);
          int v13 = &unk_1EFB08BA8;
LABEL_13:
          *int v10 = v13;
          *((unsigned char *)v10 + 16) = v11;
          *(void *)(v12 + 8) = v10;
          goto LABEL_14;
        }
        return a2;
      }
      if ((*(unsigned char *)(a1 + 24) & 2) != 0)
      {
        int v18 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        int v17 = operator new(0x18uLL);
        int v18 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v18;
        uint64_t v19 = *(void *)(a1 + 56);
        uint64_t v20 = *(void *)(v19 + 8);
        *int v17 = &unk_1EFB08F08;
        v17[1] = v20;
        *((_DWORD *)v17 + 4) = v18;
        *(void *)(v19 + 8) = v17;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      uint64_t v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v21 == a3 || (xpc_object_t v22 = v21, LOBYTE(v21->__traits_.__loc_.__locale_) != 41)) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((*(unsigned char *)(a1 + 24) & 2) == 0)
      {
        xpc_object_t v23 = operator new(0x18uLL);
        uint64_t v24 = *(void *)(a1 + 56);
        uint64_t v25 = *(void *)(v24 + 8);
        *xpc_object_t v23 = &unk_1EFB08F50;
        v23[1] = v25;
        *((_DWORD *)v23 + 4) = v18;
        *(void *)(v24 + 8) = v23;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      int v8 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
LABEL_25:
    if (v8 != a2) {
      goto LABEL_26;
    }
    return a2;
  }
  if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
  {
    int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, (char *)a2, (char *)a3);
    if (v8 != a2) {
      goto LABEL_25;
    }
    goto LABEL_4;
  }
  unsigned __int8 v14 = operator new(0x10uLL);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(v15 + 8);
  *unsigned __int8 v14 = &unk_1EFB09100;
  v14[1] = v16;
  *(void *)(v15 + 8) = v14;
LABEL_14:
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
LABEL_26:
  size_t v26 = (*(_DWORD *)(a1 + 28) + 1);

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), v26);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_) {
        return this;
      }
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  unint64_t v3 = this;
  if (this == a3) {
    return (std::basic_regex<char>::value_type *)v3;
  }
  size_t v4 = (char *)&this->__traits_.__loc_.__locale_ + 1;
  if ((std::basic_regex<char> *)((char *)&v3->__traits_.__loc_.__locale_ + 1) == a3
    || LOBYTE(v3->__traits_.__loc_.__locale_) != 92)
  {
    return (std::basic_regex<char>::value_type *)v3;
  }
  std::basic_regex<char>::value_type v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      return (char *)v3 + 2;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        xpc_object_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, (std::basic_regex<char>::value_type *)a3, 0);
      }
      else
      {
        BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        uint64_t v8 = 2;
        if (!v7) {
          uint64_t v8 = 0;
        }
        xpc_object_t result = (char *)v3 + v8;
      }
      break;
  }
  return result;
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t __cxx_global_var_init_95()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_1A609F000);
  }
  return result;
}

SAHEURCoreDumpTraceProtocol *EURCoreDumpTraceProtocol::create(EURCoreDumpTraceProtocol *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (capabilities::coredump::getPersonality(this) != 2)
  {
    unint64_t v3 = GetOsLogContext()[1];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    {
      int v4 = 136315906;
      std::basic_regex<char>::value_type v5 = "ABM ASSERT";
      __int16 v6 = 2080;
      BOOL v7 = "false";
      __int16 v8 = 2080;
      int v9 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/ABMHelper/Server/Tas"
           "ks/Wireless/Trace/CoreDump/EURCoreDumpTraceProtocol.cpp";
      __int16 v10 = 1024;
      int v11 = 28;
      _os_log_fault_impl(&dword_1A609F000, v3, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v4, 0x26u);
    }
    __break(1u);
  }
  uint64_t v1 = (SAHEURCoreDumpTraceProtocol *)operator new(0x78uLL);
  SAHEURCoreDumpTraceProtocol::SAHEURCoreDumpTraceProtocol(v1);
  return v1;
}

void sub_1A60C2220(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void EURCoreDumpTraceProtocol::EURCoreDumpTraceProtocol(EURCoreDumpTraceProtocol *this)
{
  GetABMLogServer(&v3);
  ctu::Loggable<EURCoreDumpTraceProtocol,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const(&)[15],std::shared_ptr<ctu::LogServer>>(this, "trace.coredump", &v3);
  uint64_t v2 = v4;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EFB093C0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = 0;
}

void sub_1A60C22E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *ctu::Loggable<EURCoreDumpTraceProtocol,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const(&)[15],std::shared_ptr<ctu::LogServer>>(void *a1, char *__s, void *a3)
{
  *a1 = &unk_1EFB09410;
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  BOOL v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    __int16 v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v14 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v14) = v6;
  __int16 v8 = __dst;
  if (v6) {
LABEL_8:
  }
    memcpy(v8, __s, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  ctu::LoggerCommonBase::LoggerCommonBase();
  a1[1] = &unk_1EFB08838;
  a1[7] = *a3;
  uint64_t v11 = a3[1];
  a1[8] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
  return a1;
}

void sub_1A60C2438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL EURCoreDumpTraceProtocol::collectBasebandCrashList(uint64_t a1, void *a2)
{
  uint64_t v94 = a2;
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  unint64_t v111 = 0xAAAAAAAAAAAAAA00;
  uint64_t v112 = 0x8AAAAAAAAAAAAAALL;
  uint64_t v109 = 0x4AAAAAAAAAAAAAALL;
  unint64_t v110 = (void *)0x65726F635F76616DLL;
  unint64_t v108 = 0xAAAAAAAAAAAAAAAALL;
  int v107 = (void *)0xAAAAAA006E69622ELL;
  size_t v104 = 0;
  uint64_t v105 = 0;
  unint64_t v106 = 0;
  memset(&v103, 170, sizeof(v103));
  if (*(char *)(a1 + 95) < 0) {
    std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)(a1 + 72), *(void *)(a1 + 80));
  }
  else {
    std::string v103 = *(std::string *)(a1 + 72);
  }
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    xpc_object_t v88 = &v103;
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      xpc_object_t v88 = (std::string *)v103.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string __dst = 136315138;
    *(void *)&__dst[4] = v88;
    _os_log_debug_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEBUG, "#D \tScanning CoreDump folder. ScratchFolder=[%s]", __dst, 0xCu);
  }
  int v4 = &v110;
  if (v112 < 0) {
    int v4 = v110;
  }
  uint64_t v99 = a1;
  __int16 __src = v4;
  if (v112 >= 0) {
    size_t v5 = HIBYTE(v112);
  }
  else {
    size_t v5 = v111;
  }
  size_t v6 = &v107;
  if (v109 < 0) {
    size_t v6 = v107;
  }
  v97[0] = v6;
  if (v109 >= 0) {
    size_t v7 = HIBYTE(v109);
  }
  else {
    size_t v7 = v108;
  }
  memset(__p, 0, 24);
  int folder = ctu::fs::read_folder();
  char v10 = folder;
  uint64_t v11 = *(void ***)__p;
  if (folder)
  {
    uint64_t v12 = -1431655765 * ((*(void *)&__p[8] - *(void *)__p) >> 3);
    if (v12)
    {
      int v91 = folder;
      int v13 = 0;
      uint64_t v14 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v14 = v5 | 7;
      }
      size_t __sz = v14 + 1;
      std::string __s = (std::string::value_type *)((v14 + 1) | 0x8000000000000000);
      uint64_t v15 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v15 = v7 | 7;
      }
      size_t v93 = v15 + 1;
      unint64_t v92 = (v15 + 1) | 0x8000000000000000;
      v98 = (std::string *)(24 * v12);
      while (1)
      {
        uint64_t v17 = *(void *)__p;
        int v18 = __src;
        if (!__src)
        {
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          memset(__dst, 0, 24);
          goto LABEL_34;
        }
        if (v5 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_206;
        }
        if (v5 >= 0x17)
        {
          uint64_t v19 = operator new(__sz);
          *(void *)&__dst[8] = v5;
          *(void *)&__dst[16] = __s;
          *(void *)std::string __dst = v19;
        }
        else
        {
          __dst[23] = v5;
          uint64_t v19 = __dst;
          if (!v5) {
            goto LABEL_33;
          }
        }
        memmove(v19, __src, v5);
LABEL_33:
        v19[v5] = 0;
        int v18 = (void *)__dst[23];
        uint64_t v21 = *(unsigned char **)__dst;
        uint64_t v20 = *(void **)&__dst[8];
LABEL_34:
        xpc_object_t v22 = (std::string::size_type *)((char *)v13->__r_.__value_.__r.__words + v17);
        int v23 = (char)v18;
        if ((char)v18 >= 0) {
          uint64_t v24 = v18;
        }
        else {
          uint64_t v24 = v20;
        }
        uint64_t v25 = (char *)v13 + v17;
        if (*((char *)&v13->__r_.__value_.__r.__words[2] + v17 + 7) < 0)
        {
          if (v24 == (void *)-1) {
LABEL_204:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          long long v27 = *(std::string::pointer *)((char *)&v13->__r_.__value_.__l.__data_ + v17);
          if (*(std::string::size_type *)((char *)&v13->__r_.__value_.__l.__size_ + v17) >= v5) {
            size_t v26 = v5;
          }
          else {
            size_t v26 = *(std::string::size_type *)((char *)&v13->__r_.__value_.__l.__size_ + v17);
          }
        }
        else
        {
          if (v24 == (void *)-1) {
            goto LABEL_204;
          }
          if (*((unsigned __int8 *)&v13->__r_.__value_.__r.__words[2] + v17 + 7) >= v5) {
            size_t v26 = v5;
          }
          else {
            size_t v26 = *((unsigned __int8 *)&v13->__r_.__value_.__r.__words[2] + v17 + 7);
          }
          long long v27 = (char *)v13 + v17;
        }
        if ((char)v18 >= 0) {
          int v28 = __dst;
        }
        else {
          int v28 = v21;
        }
        if (v26 >= (unint64_t)v24) {
          size_t v29 = (size_t)v24;
        }
        else {
          size_t v29 = v26;
        }
        BOOL v30 = memcmp(v27, v28, v29) == 0;
        BOOL v31 = (void *)v26 == v24 && v30;
        if (v23 < 0)
        {
          operator delete(v21);
          if (!v31) {
            goto LABEL_24;
          }
        }
        else if (!v31)
        {
          goto LABEL_24;
        }
        if (!v7) {
          goto LABEL_100;
        }
        int v32 = v25[23];
        size_t v33 = v25[23];
        if (v32 < 0)
        {
          size_t v34 = *(std::string::size_type *)((char *)&v13->__r_.__value_.__l.__size_ + v17);
          if (v7 >= v34) {
            goto LABEL_100;
          }
        }
        else
        {
          size_t v34 = v33;
          if (v7 >= v33) {
            goto LABEL_100;
          }
        }
        if (v97[0])
        {
          if (v7 > 0x7FFFFFFFFFFFFFF7) {
LABEL_206:
          }
            std::string::__throw_length_error[abi:ne180100]();
          if (v7 >= 0x17)
          {
            unint64_t v35 = operator new(v93);
            *(void *)&__dst[8] = v7;
            *(void *)&__dst[16] = v92;
            *(void *)std::string __dst = v35;
          }
          else
          {
            __dst[23] = v7;
            unint64_t v35 = __dst;
          }
          memmove(v35, v97[0], v7);
          v35[v7] = 0;
          uint64_t v36 = *(unsigned char **)__dst;
          size_t v37 = v34 - v7;
          int v38 = __dst[23];
          if (__dst[23] >= 0) {
            size_t v39 = __dst[23];
          }
          else {
            size_t v39 = *(void *)&__dst[8];
          }
          if ((v33 & 0x80) == 0)
          {
LABEL_82:
            if (v33 < v37 || v39 == -1) {
              goto LABEL_209;
            }
            if (v33 - v37 >= v7) {
              size_t v43 = v7;
            }
            else {
              size_t v43 = v33 - v37;
            }
            goto LABEL_87;
          }
        }
        else
        {
          uint64_t v36 = 0;
          memset(__dst, 0, 24);
          size_t v37 = v34 - v7;
          int v38 = 0;
          size_t v39 = 0;
          if ((v33 & 0x80) == 0) {
            goto LABEL_82;
          }
        }
        if (v39 == -1
          || (size_t v40 = *(std::string::size_type *)((char *)&v13->__r_.__value_.__l.__size_ + v17),
              BOOL v41 = v40 >= v37,
              size_t v42 = v40 - v37,
              !v41))
        {
LABEL_209:
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        if (v42 >= v7) {
          size_t v43 = v7;
        }
        else {
          size_t v43 = v42;
        }
        xpc_object_t v22 = (void *)*v22;
LABEL_87:
        if (v38 >= 0) {
          uint64_t v44 = __dst;
        }
        else {
          uint64_t v44 = v36;
        }
        if (v43 >= v39) {
          size_t v45 = v39;
        }
        else {
          size_t v45 = v43;
        }
        BOOL v46 = memcmp((char *)v22 + v37, v44, v45) == 0;
        BOOL v47 = v43 == v39 && v46;
        if (v38 < 0)
        {
          operator delete(v36);
          if (v47)
          {
LABEL_100:
            uint64_t v48 = (uint64_t)v13 + *(void *)__p;
            xpc_object_t v49 = v105;
            if ((unint64_t)v105 >= v106)
            {
              uint64_t v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v104, v48);
            }
            else
            {
              if (*(char *)(v48 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v105, *(const std::string::value_type **)((char *)&v13->__r_.__value_.__l.__data_ + *(void *)__p), *(std::string::size_type *)((char *)&v13->__r_.__value_.__l.__size_ + *(void *)__p));
              }
              else
              {
                long long v9 = *(_OWORD *)v48;
                v105->__r_.__value_.__r.__words[2] = *(void *)(v48 + 16);
                *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v9;
              }
              uint64_t v16 = v49 + 1;
            }
            uint64_t v105 = v16;
          }
        }
        else if (v47)
        {
          goto LABEL_100;
        }
LABEL_24:
        if (v98 == ++v13)
        {
          uint64_t v11 = *(void ***)__p;
          char v10 = v91;
          break;
        }
      }
    }
  }
  if (v11)
  {
    xpc_object_t v50 = *(void ***)&__p[8];
    xpc_object_t v51 = v11;
    if (*(void ***)&__p[8] != v11)
    {
      do
      {
        if (*((char *)v50 - 1) < 0) {
          operator delete(*(v50 - 3));
        }
        v50 -= 3;
      }
      while (v50 != v11);
      xpc_object_t v51 = *(void ***)__p;
    }
    *(void *)&__p[8] = v11;
    operator delete(v51);
  }
  if ((v10 & 1) == 0)
  {
    xpc_object_t v82 = *(NSObject **)(v99 + 40);
    if (!os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
    {
      uint64_t v83 = 0;
      if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_181;
      }
      goto LABEL_180;
    }
    size_t v89 = &v103;
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      size_t v89 = (std::string *)v103.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string __dst = 136315138;
    *(void *)&__dst[4] = v89;
    _os_log_error_impl(&dword_1A609F000, v82, OS_LOG_TYPE_ERROR, "\tFailed: Scanning CoreDump folder. ScratchFolder=[%s]", __dst, 0xCu);
    uint64_t v83 = 0;
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
LABEL_180:
    }
      operator delete(v103.__r_.__value_.__l.__data_);
LABEL_181:
    uint64_t v84 = (std::string *)v104;
    if (v104)
    {
      xpc_object_t v85 = v105;
      uint64_t v86 = v104;
      if (v105 != v104)
      {
        do
        {
          if (SHIBYTE(v85[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v85[-1].__r_.__value_.__l.__data_);
          }
          --v85;
        }
        while (v85 != v84);
        uint64_t v86 = v104;
      }
      uint64_t v105 = v84;
      operator delete(v86);
    }
    if (SHIBYTE(v109) < 0)
    {
      operator delete(v107);
      if ((SHIBYTE(v112) & 0x80000000) == 0) {
        return v83;
      }
    }
    else if ((SHIBYTE(v112) & 0x80000000) == 0)
    {
      return v83;
    }
    operator delete(v110);
    return v83;
  }
  int v52 = (std::string *)v104;
  if (v104 == v105)
  {
    LODWORD(__src) = 0;
LABEL_195:
    uint64_t v83 = __src & 1;
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_180;
    }
    goto LABEL_181;
  }
  LODWORD(__src) = 0;
  std::string __s = &__dst[8];
  size_t __sz = (size_t)v119 + 8;
  v98 = (std::string *)&__p[24];
  *(void *)&long long v9 = 136315138;
  *(_OWORD *)BOOL v97 = v9;
  while (1)
  {
    while (1)
    {
      memset(v102, 170, 24);
      int v53 = SHIBYTE(v103.__r_.__value_.__r.__words[2]);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v103.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v103.__r_.__value_.__l.__size_;
      }
      unint64_t v55 = size + 1;
      memset(__dst, 170, 24);
      if (size + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v55 >= 0x17)
      {
        uint64_t v57 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v55 | 7) != 0x17) {
          uint64_t v57 = v55 | 7;
        }
        uint64_t v58 = v57 + 1;
        uint64_t v56 = operator new(v57 + 1);
        *(void *)&__dst[8] = size + 1;
        *(void *)&__dst[16] = v58 | 0x8000000000000000;
        *(void *)std::string __dst = v56;
      }
      else
      {
        memset(__dst, 0, 24);
        uint64_t v56 = __dst;
        __dst[23] = size + 1;
        if (!size) {
          goto LABEL_133;
        }
      }
      xpc_object_t v59 = v53 >= 0 ? &v103 : (std::string *)v103.__r_.__value_.__r.__words[0];
      memmove(v56, v59, size);
LABEL_133:
      uint64_t v60 = v99;
      *(_WORD *)&v56[size] = 47;
      int v61 = SHIBYTE(v52->__r_.__value_.__r.__words[2]);
      if (v61 >= 0) {
        size_t v62 = (const std::string::value_type *)v52;
      }
      else {
        size_t v62 = (const std::string::value_type *)v52->__r_.__value_.__r.__words[0];
      }
      if (v61 >= 0) {
        std::string::size_type v63 = HIBYTE(v52->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v63 = v52->__r_.__value_.__l.__size_;
      }
      size_t v64 = std::string::append((std::string *)__dst, v62, v63);
      long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v102[2] = (void *)v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v102 = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      xpc_object_t v66 = *(NSObject **)(v60 + 40);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
      {
        if (SHIBYTE(v102[2]) >= 0) {
          xpc_object_t v75 = v102;
        }
        else {
          xpc_object_t v75 = (void **)v102[0];
        }
        *(_DWORD *)std::string __dst = v97[0];
        *(void *)&__dst[4] = v75;
        _os_log_debug_impl(&dword_1A609F000, v66, OS_LOG_TYPE_DEBUG, "#D \tLooking for CoreDump reason in file [%s]", __dst, 0xCu);
      }
      uint64_t v67 = SHIBYTE(v102[2]) >= 0 ? (const char *)v102 : (const char *)v102[0];
      int v68 = open(v67, 0, 420);
      if ((v68 & 0x80000000) == 0) {
        break;
      }
LABEL_167:
      xpc_object_t v80 = *(NSObject **)(v60 + 40);
      if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
      {
        if (SHIBYTE(v102[2]) >= 0) {
          size_t v81 = v102;
        }
        else {
          size_t v81 = (void **)v102[0];
        }
        *(_DWORD *)std::string __dst = v97[0];
        *(void *)&__dst[4] = v81;
        _os_log_error_impl(&dword_1A609F000, v80, OS_LOG_TYPE_ERROR, "\tFailed: Looking for CoreDump reason in file [%s]", __dst, 0xCu);
        if (SHIBYTE(v102[2]) < 0) {
          goto LABEL_169;
        }
      }
      else if (SHIBYTE(v102[2]) < 0)
      {
        goto LABEL_169;
      }
LABEL_118:
      if (++v52 == v105) {
        goto LABEL_195;
      }
    }
    long long v69 = operator new[](0x10000uLL);
    if (read(v68, v69, 0x10000uLL) < 1)
    {
      char v71 = 0;
      goto LABEL_163;
    }
    uint64_t v101 = 0;
    int v70 = ETLEFSDumpInterpret();
    char v71 = v70;
    if (v70) {
      break;
    }
LABEL_163:
    operator delete[](v69);
    while (close(v68) && *__error() == 4)
      ;
    if ((v71 & 1) == 0) {
      goto LABEL_167;
    }
    LODWORD(__src) = 1;
    if ((SHIBYTE(v102[2]) & 0x80000000) == 0) {
      goto LABEL_118;
    }
LABEL_169:
    operator delete(v102[0]);
    if (++v52 == v105) {
      goto LABEL_195;
    }
  }
  unint64_t v120 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v72 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v72 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v119[14] = v72;
  v119[15] = v72;
  v119[12] = v72;
  v119[13] = v72;
  v119[10] = v72;
  v119[11] = v72;
  v119[8] = v72;
  v119[9] = v72;
  v119[6] = v72;
  v119[7] = v72;
  v119[4] = v72;
  v119[5] = v72;
  v119[2] = v72;
  v119[3] = v72;
  v119[0] = v72;
  v119[1] = v72;
  long long v117 = v72;
  long long v118 = v72;
  *(_OWORD *)std::string __dst = v72;
  *(_OWORD *)&__dst[16] = v72;
  if (!ETLEFSDUmpCopyCrashLocationDetails()) {
    goto LABEL_162;
  }
  int32x2_t v115 = (int32x2_t)0xAAAAAAAAAAAAAAAALL;
  memset(__p, 0, sizeof(__p));
  long long v114 = 0u;
  std::string::__assign_external((std::string *)__p, (const std::string::value_type *)__sz);
  std::string::__assign_external(v98, __s);
  int32x2_t v115 = vrev64_s32(*(int32x2_t *)__dst);
  uint64_t v73 = (char *)operator new(0x48uLL);
  std::string v74 = v73;
  *(void *)uint64_t v73 = 0;
  *((void *)v73 + 1) = 0;
  if ((__p[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v73 + 16), *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
  }
  else
  {
    *((_OWORD *)v73 + 1) = *(_OWORD *)__p;
    *((void *)v73 + 4) = *(void *)&__p[16];
  }
  uint64_t v76 = (std::string *)(v74 + 5);
  if (SHIBYTE(v114) < 0)
  {
    std::string::__init_copy_ctor_external(v76, *(const std::string::value_type **)&__p[24], v114);
  }
  else
  {
    uint64_t v77 = v98;
    *(_OWORD *)&v76->__r_.__value_.__l.__data_ = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
    v74[7] = *((void *)&v77->__r_.__value_.__l + 2);
  }
  v74[8] = v115;
  long long v78 = v94;
  uint64_t v79 = *v94;
  *std::string v74 = *v94;
  v74[1] = v78;
  *(void *)(v79 + 8) = v74;
  void *v78 = v74;
  ++v78[2];
  if (SHIBYTE(v114) < 0)
  {
    operator delete(*(void **)&__p[24]);
    if ((__p[23] & 0x80000000) != 0) {
      goto LABEL_177;
    }
  }
  else
  {
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_162;
    }
LABEL_177:
    operator delete(*(void **)__p);
  }
LABEL_162:
  if (ETLEFSDumpInfoFree()) {
    goto LABEL_163;
  }
  int v90 = GetOsLogContext()[1];
  BOOL result = os_log_type_enabled(v90, OS_LOG_TYPE_FAULT);
  if (result)
  {
    *(_DWORD *)std::string __p = 136315906;
    *(void *)&__p[4] = "ABM ASSERT";
    *(_WORD *)&__p[12] = 2080;
    *(void *)&__p[14] = "loop_success";
    *(_WORD *)&__p[22] = 2080;
    *(void *)&__p[24] = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/ABMHe"
                          "lper/Server/Tasks/Wireless/Trace/CoreDump/EURCoreDumpTraceProtocol.cpp";
    LOWORD(v114) = 1024;
    *(_DWORD *)((char *)&v114 + 2) = 99;
    _os_log_fault_impl(&dword_1A609F000, v90, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", __p, 0x26u);
    __break(1u);
    goto LABEL_209;
  }
  __break(1u);
  return result;
}

void sub_1A60C2FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51)
{
  if (v52[39] < 0) {
    operator delete(*v51);
  }
  operator delete(v52);
  std::pair<std::string,std::string>::~pair((uint64_t)&a51);
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0)
  {
    operator delete(a30);
    std::vector<std::string>::~vector[abi:ne180100](&a36);
    if ((a44 & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else
  {
    std::vector<std::string>::~vector[abi:ne180100](&a36);
    if ((a44 & 0x80000000) == 0)
    {
LABEL_7:
      if (a50 < 0) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  operator delete(a39);
  if (a50 < 0)
  {
LABEL_8:
    operator delete(a45);
    _Unwind_Resume(a1);
  }
LABEL_11:
  _Unwind_Resume(a1);
}

uint64_t EURCoreDumpTraceProtocol::collectBasebandCrashListM20(uint64_t a1, uint64_t a2)
{
  int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if (*(char *)(a1 + 95) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(a1 + 72), *(void *)(a1 + 80));
  }
  else {
    std::string v17 = *(std::string *)(a1 + 72);
  }
  uint64_t v4 = ETLEFSearchBasebandCrashReasonM20();
  uint64_t v5 = v4;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v17.__r_.__value_.__l.__data_);
    if (v5)
    {
LABEL_6:
      size_t v6 = v18;
      size_t v7 = v19;
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 0x40000000;
      int v13 = ___ZN24EURCoreDumpTraceProtocol27collectBasebandCrashListM20ERNSt3__14listIN8coredump13CommandDriver29EURCoreDumpTraceProtocolCrashENS0_9allocatorIS4_EEEE_block_invoke;
      uint64_t v14 = &__block_descriptor_tmp_1;
      uint64_t v15 = a1;
      for (uint64_t i = a2; v6 != v7; v6 += 388)
        v13((uint64_t)v12, v6);
      goto LABEL_11;
    }
  }
  else if (v4)
  {
    goto LABEL_6;
  }
  __int16 v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    v11[0] = 0;
    _os_log_error_impl(&dword_1A609F000, v8, OS_LOG_TYPE_ERROR, "\tFailed: Looking for CoreDump reason", (uint8_t *)v11, 2u);
    long long v9 = (std::string::value_type *)v18;
    if (!v18) {
      return v5;
    }
    goto LABEL_12;
  }
LABEL_11:
  long long v9 = (std::string::value_type *)v18;
  if (v18)
  {
LABEL_12:
    uint64_t v19 = v9;
    operator delete(v9);
  }
  return v5;
}

void sub_1A60C3268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN24EURCoreDumpTraceProtocol27collectBasebandCrashListM20ERNSt3__14listIN8coredump13CommandDriver29EURCoreDumpTraceProtocolCrashENS0_9allocatorIS4_EEEE_block_invoke(uint64_t a1, const std::string::value_type *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)int v13 = 0u;
  memset(__p, 0, sizeof(__p));
  std::string::__assign_external((std::string *)v13, a2 + 132);
  std::string::__assign_external((std::string *)&__p[1], a2 + 68);
  unint64_t v15 = *(unsigned int *)a2;
  uint64_t v5 = *(uint64_t **)(a1 + 40);
  size_t v6 = (char *)operator new(0x48uLL);
  size_t v7 = v6;
  *(void *)size_t v6 = 0;
  *((void *)v6 + 1) = 0;
  if (SHIBYTE(__p[0]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 16), (const std::string::value_type *)v13[0], (std::string::size_type)v13[1]);
  }
  else
  {
    *((_OWORD *)v6 + 1) = *(_OWORD *)v13;
    *((void **)v6 + 4) = __p[0];
  }
  __int16 v8 = (std::string *)(v7 + 40);
  if (SHIBYTE(__p[3]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)__p[1], (std::string::size_type)__p[2]);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&__p[1];
    *((void **)v7 + 7) = __p[3];
  }
  *((void *)v7 + 8) = v15;
  *((void *)v7 + 1) = v5;
  uint64_t v9 = *v5;
  *(void *)size_t v7 = *v5;
  *(void *)(v9 + 8) = v7;
  *uint64_t v5 = (uint64_t)v7;
  ++v5[2];
  char v10 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    if (SHIBYTE(__p[3]) >= 0) {
      uint64_t v11 = &__p[1];
    }
    else {
      uint64_t v11 = (void **)__p[1];
    }
    uint64_t v12 = v13;
    if (SHIBYTE(__p[0]) < 0) {
      uint64_t v12 = (void **)v13[0];
    }
    *(_DWORD *)buf = 136315650;
    std::string v17 = v11;
    __int16 v18 = 1024;
    int v19 = v15;
    __int16 v20 = 2080;
    uint64_t v21 = v12;
    _os_log_debug_impl(&dword_1A609F000, v10, OS_LOG_TYPE_DEBUG, "#D \tAdding Crash reason: File:%s, Line:%d, String:%s.", buf, 0x1Cu);
    if ((SHIBYTE(__p[3]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(__p[0]) & 0x80000000) == 0) {
        return;
      }
LABEL_18:
      operator delete(v13[0]);
      return;
    }
  }
  else if ((SHIBYTE(__p[3]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0) {
    goto LABEL_18;
  }
}

void sub_1A60C34C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9[39] < 0) {
    operator delete(*v10);
  }
  operator delete(v9);
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A60C34F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL EURCoreDumpTraceProtocol::moveToSnapshotPath(uint64_t a1, const __CFDictionary **a2)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (const std::__fs::filesystem::path *)(a1 + 72);
  uint64_t v4 = *(const char **)(a1 + 72);
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v112.st_blkstd::string::size_type size = v6;
  *(timespec *)v112.st_qspare = v6;
  v112.st_birthtimespec = v6;
  *(timespec *)&v112.st_std::string::size_type size = v6;
  v112.st_mtimespec = v6;
  v112.st_ctimespec = v6;
  *(timespec *)&v112.st_uid = v6;
  v112.st_atimespec = v6;
  *(timespec *)&v112.st_dev = v6;
  if (*(char *)(a1 + 95) >= 0) {
    size_t v7 = (const char *)(a1 + 72);
  }
  else {
    size_t v7 = v4;
  }
  if (!stat(v7, &v112))
  {
    uint64_t v11 = *(char *)(a1 + 95) >= 0 ? (const char *)v5 : *(const char **)(a1 + 72);
    uint64_t v12 = opendir(v11);
    int v13 = v12;
    if (v12)
    {
      uint64_t v14 = readdir(v12);
      closedir(v13);
      if (v14)
      {
        v110[0] = 0xAAAAAAAAAAAAAAAALL;
        v110[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v110, *a2);
        memset(&v112, 170, 24);
        unint64_t v15 = (const void *)*MEMORY[0x1E4F4C3A0];
        size_t v16 = strlen((const char *)*MEMORY[0x1E4F4C3A0]);
        if (v16 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        std::string v17 = (void *)v16;
        if (v16 >= 0x17)
        {
          uint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17) {
            uint64_t v19 = v16 | 7;
          }
          uint64_t v20 = v19 + 1;
          __int16 v18 = (void **)operator new(v19 + 1);
          __dst[1] = v17;
          void __dst[2] = (void *)(v20 | 0x8000000000000000);
          __dst[0] = v18;
        }
        else
        {
          HIBYTE(__dst[2]) = v16;
          __int16 v18 = __dst;
          if (!v16)
          {
LABEL_21:
            uint64_t v21 = (const char *)*MEMORY[0x1E4F4C4C8];
            *((unsigned char *)v17 + (void)v18) = 0;
            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, v21);
            ctu::cf::map_adapter::getString();
            MEMORY[0x1A62748E0](__p);
            if (SHIBYTE(__dst[2]) < 0) {
              operator delete(__dst[0]);
            }
            memset(__dst, 170, sizeof(__dst));
            uint64_t v22 = abm::trace::kSnapshotFolder[0];
            size_t v23 = strlen(abm::trace::kSnapshotFolder[0]);
            if (v23 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            uint64_t v24 = (void *)v23;
            if (v23 >= 0x17)
            {
              uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v23 | 7) != 0x17) {
                uint64_t v26 = v23 | 7;
              }
              uint64_t v27 = v26 + 1;
              uint64_t v25 = operator new(v26 + 1);
              __p[1] = v24;
              __p[2] = (void *)(v27 | 0x8000000000000000);
              __p[0] = v25;
            }
            else
            {
              HIBYTE(__p[2]) = v23;
              uint64_t v25 = __p;
              if (!v23)
              {
LABEL_31:
                *((unsigned char *)v24 + (void)v25) = 0;
                ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v107, "kKeyTraceDumpStatePath");
                ctu::cf::map_adapter::getString();
                MEMORY[0x1A62748E0](&v107);
                if (SHIBYTE(__p[2]) < 0) {
                  operator delete(__p[0]);
                }
                memset(__p, 170, sizeof(__p));
                strcpy((char *)&v107, "kTraceFilterActionNone");
                *((unsigned char *)&v107.__r_.__value_.__s + 23) = 22;
                ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v111, "kKeyTraceFilterAction");
                ctu::cf::map_adapter::getString();
                MEMORY[0x1A62748E0](&v111);
                if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v107.__r_.__value_.__l.__data_);
                }
                int v28 = (void *)HIBYTE(__p[2]);
                if (SHIBYTE(__p[2]) < 0) {
                  int v28 = __p[1];
                }
                if (v28 != (void *)22) {
                  goto LABEL_47;
                }
                size_t v29 = __p;
                if (SHIBYTE(__p[2]) < 0) {
                  size_t v29 = (void **)__p[0];
                }
                BOOL v30 = *v29;
                BOOL v31 = v29[1];
                uint64_t v32 = *(uint64_t *)((char *)v29 + 14);
                BOOL v33 = v30 == *(void **)"kTraceFilterActionNone" && v31 == *(void **)"lterActionNone";
                if (!v33 || v32 != *(void *)"tionNone")
                {
LABEL_47:
                  unint64_t v35 = abm::trace::kTrashFolder[0];
                  size_t v36 = strlen(abm::trace::kTrashFolder[0]);
                  if (v36 > 0x7FFFFFFFFFFFFFF7) {
                    std::string::__throw_length_error[abi:ne180100]();
                  }
                  std::string::size_type v37 = v36;
                  if (v36 >= 0x17)
                  {
                    uint64_t v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v36 | 7) != 0x17) {
                      uint64_t v39 = v36 | 7;
                    }
                    uint64_t v40 = v39 + 1;
                    int v38 = operator new(v39 + 1);
                    v106.__r_.__value_.__l.__size_ = v37;
                    v106.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
                    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
                  }
                  else
                  {
                    *((unsigned char *)&v106.__r_.__value_.__s + 23) = v36;
                    int v38 = &v106;
                    if (!v36)
                    {
LABEL_55:
                      v38[v37] = 0;
                      BOOL v41 = abm::trace::kLogDirPrefix[0];
                      size_t v42 = strlen(abm::trace::kLogDirPrefix[0]);
                      if (v42 > 0x7FFFFFFFFFFFFFF7) {
                        std::string::__throw_length_error[abi:ne180100]();
                      }
                      size_t v43 = v42;
                      if (v42 >= 0x17)
                      {
                        uint64_t v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v42 | 7) != 0x17) {
                          uint64_t v45 = v42 | 7;
                        }
                        uint64_t v46 = v45 + 1;
                        uint64_t v44 = operator new(v45 + 1);
                        size_t v104 = v43;
                        int64_t v105 = v46 | 0x8000000000000000;
                        std::string v103 = v44;
                      }
                      else
                      {
                        HIBYTE(v105) = v42;
                        uint64_t v44 = &v103;
                        if (!v42)
                        {
LABEL_63:
                          *((unsigned char *)v44 + v43) = 0;
                          if (v105 >= 0) {
                            BOOL v47 = (const std::string::value_type *)&v103;
                          }
                          else {
                            BOOL v47 = (const std::string::value_type *)v103;
                          }
                          if (v105 >= 0) {
                            std::string::size_type v48 = HIBYTE(v105);
                          }
                          else {
                            std::string::size_type v48 = v104;
                          }
                          xpc_object_t v49 = std::string::append(&v106, v47, v48);
                          long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
                          v111.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
                          *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v50;
                          v49->__r_.__value_.__l.__size_ = 0;
                          v49->__r_.__value_.__r.__words[2] = 0;
                          v49->__r_.__value_.__r.__words[0] = 0;
                          if ((v112.st_gid & 0x80000000) == 0) {
                            xpc_object_t v51 = &v112;
                          }
                          else {
                            xpc_object_t v51 = *(stat **)&v112.st_dev;
                          }
                          if ((v112.st_gid & 0x80000000) == 0) {
                            __darwin_ino64_t st_gid_high = HIBYTE(v112.st_gid);
                          }
                          else {
                            __darwin_ino64_t st_gid_high = v112.st_ino;
                          }
                          int v53 = std::string::append(&v111, (const std::string::value_type *)v51, st_gid_high);
                          long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
                          v107.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
                          *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v54;
                          v53->__r_.__value_.__l.__size_ = 0;
                          v53->__r_.__value_.__r.__words[2] = 0;
                          v53->__r_.__value_.__r.__words[0] = 0;
                          unint64_t v55 = abm::trace::kEURCoreDumpSnapshotDirectorySuffix[0];
                          size_t v56 = strlen(abm::trace::kEURCoreDumpSnapshotDirectorySuffix[0]);
                          if (v56 > 0x7FFFFFFFFFFFFFF7) {
                            std::string::__throw_length_error[abi:ne180100]();
                          }
                          size_t v57 = v56;
                          if (v56 >= 0x17)
                          {
                            uint64_t v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v56 | 7) != 0x17) {
                              uint64_t v59 = v56 | 7;
                            }
                            uint64_t v60 = v59 + 1;
                            uint64_t v58 = operator new(v59 + 1);
                            size_t v101 = v57;
                            int64_t v102 = v60 | 0x8000000000000000;
                            long long v100 = v58;
                          }
                          else
                          {
                            HIBYTE(v102) = v56;
                            uint64_t v58 = &v100;
                            if (!v56)
                            {
LABEL_83:
                              *((unsigned char *)v58 + v57) = 0;
                              if (v102 >= 0) {
                                int v61 = (const std::string::value_type *)&v100;
                              }
                              else {
                                int v61 = (const std::string::value_type *)v100;
                              }
                              if (v102 >= 0) {
                                std::string::size_type v62 = HIBYTE(v102);
                              }
                              else {
                                std::string::size_type v62 = v101;
                              }
                              std::string::size_type v63 = std::string::append(&v107, v61, v62);
                              size_t v64 = (std::string::value_type *)v63->__r_.__value_.__r.__words[0];
                              std::string::size_type size = v63->__r_.__value_.__l.__size_;
                              std::string::size_type v66 = v63->__r_.__value_.__r.__words[2];
                              v63->__r_.__value_.__l.__size_ = 0;
                              v63->__r_.__value_.__r.__words[2] = 0;
                              v63->__r_.__value_.__r.__words[0] = 0;
                              if (SHIBYTE(v102) < 0)
                              {
                                operator delete(v100);
                                if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                {
LABEL_91:
                                  if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                    goto LABEL_92;
                                  }
                                  goto LABEL_101;
                                }
                              }
                              else if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                              {
                                goto LABEL_91;
                              }
                              operator delete(v107.__r_.__value_.__l.__data_);
                              if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                              {
LABEL_92:
                                if ((SHIBYTE(v105) & 0x80000000) == 0) {
                                  goto LABEL_93;
                                }
                                goto LABEL_102;
                              }
LABEL_101:
                              operator delete(v111.__r_.__value_.__l.__data_);
                              if ((SHIBYTE(v105) & 0x80000000) == 0)
                              {
LABEL_93:
                                if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                  goto LABEL_94;
                                }
                                goto LABEL_103;
                              }
LABEL_102:
                              operator delete(v103);
                              if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                              {
LABEL_94:
                                char v67 = 0;
                                memset(&v107, 170, sizeof(v107));
                                if ((v66 & 0x8000000000000000) == 0)
                                {
LABEL_95:
                                  v99.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
                                  v99.__r_.__value_.__l.__size_ = size;
                                  v99.__r_.__value_.__r.__words[2] = v66;
                                  goto LABEL_105;
                                }
LABEL_104:
                                std::string::__init_copy_ctor_external(&v99, v64, size);
LABEL_105:
                                support::fs::createUniquePath((const char *)&v99, &v107);
                                if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
                                  operator delete(v99.__r_.__value_.__l.__data_);
                                }
                                support::fs::createDir((const char *)__dst, 0x1EDu, 1);
                                if (*(char *)(a1 + 95) >= 0) {
                                  long long v69 = v5;
                                }
                                else {
                                  long long v69 = *(const std::__fs::filesystem::path **)(a1 + 72);
                                }
                                if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                  int v70 = (const std::__fs::filesystem::path *)&v107;
                                }
                                else {
                                  int v70 = (const std::__fs::filesystem::path *)v107.__r_.__value_.__r.__words[0];
                                }
                                rename(v69, v70, v68);
                                BOOL v9 = v71 == 0;
                                long long v72 = *(NSObject **)(a1 + 40);
                                if (v67)
                                {
                                  if (v71)
                                  {
                                    if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
                                    {
                                      uint64_t v73 = &v107;
                                      if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                        uint64_t v73 = (std::string *)v107.__r_.__value_.__r.__words[0];
                                      }
                                      LODWORD(v111.__r_.__value_.__l.__data_) = 136315138;
                                      *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 4) = (std::string::size_type)v73;
                                      _os_log_error_impl(&dword_1A609F000, v72, OS_LOG_TYPE_ERROR, "Failed: Creating CoreDump snapshot path. snapshotUniquePath=[%s]", (uint8_t *)&v111, 0xCu);
                                    }
                                  }
                                  else if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
                                  {
                                    uint64_t v79 = &v107;
                                    if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                      uint64_t v79 = (std::string *)v107.__r_.__value_.__r.__words[0];
                                    }
                                    LODWORD(v111.__r_.__value_.__l.__data_) = 136315138;
                                    *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 4) = (std::string::size_type)v79;
                                    _os_log_impl(&dword_1A609F000, v72, OS_LOG_TYPE_DEFAULT, "#I Success: CoreDump files are placed in path [%s]", (uint8_t *)&v111, 0xCu);
                                  }
                                }
                                else
                                {
                                  if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
                                  {
                                    std::string v74 = __p;
                                    if (SHIBYTE(__p[2]) < 0) {
                                      std::string v74 = (void **)__p[0];
                                    }
                                    LODWORD(v111.__r_.__value_.__l.__data_) = 136315138;
                                    *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 4) = (std::string::size_type)v74;
                                    _os_log_impl(&dword_1A609F000, v72, OS_LOG_TYPE_DEFAULT, "#I Success: Trashing coredump logs. Trace filter is %s", (uint8_t *)&v111, 0xCu);
                                  }
                                  support::fs::removeDir((const char *)&v107);
                                }
                                if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
                                {
                                  operator delete(v107.__r_.__value_.__l.__data_);
                                  if ((v66 & 0x8000000000000000) == 0)
                                  {
LABEL_126:
                                    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
                                      goto LABEL_127;
                                    }
                                    goto LABEL_132;
                                  }
                                }
                                else if ((v66 & 0x8000000000000000) == 0)
                                {
                                  goto LABEL_126;
                                }
                                operator delete(v64);
                                if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
                                {
LABEL_127:
                                  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
                                    goto LABEL_128;
                                  }
                                  goto LABEL_133;
                                }
LABEL_132:
                                operator delete(__p[0]);
                                if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                                {
LABEL_128:
                                  if ((SHIBYTE(v112.st_gid) & 0x80000000) == 0)
                                  {
LABEL_129:
                                    MEMORY[0x1A6274930](v110);
                                    return v9;
                                  }
LABEL_134:
                                  operator delete(*(void **)&v112.st_dev);
                                  goto LABEL_129;
                                }
LABEL_133:
                                operator delete(__dst[0]);
                                if ((SHIBYTE(v112.st_gid) & 0x80000000) == 0) {
                                  goto LABEL_129;
                                }
                                goto LABEL_134;
                              }
LABEL_103:
                              operator delete(v106.__r_.__value_.__l.__data_);
                              char v67 = 0;
                              memset(&v107, 170, sizeof(v107));
                              if ((v66 & 0x8000000000000000) == 0) {
                                goto LABEL_95;
                              }
                              goto LABEL_104;
                            }
                          }
                          memmove(v58, v55, v57);
                          goto LABEL_83;
                        }
                      }
                      memmove(v44, v41, v43);
                      goto LABEL_63;
                    }
                  }
                  memmove(v38, v35, v37);
                  goto LABEL_55;
                }
                xpc_object_t v75 = abm::trace::kLogDirPrefix[0];
                size_t v76 = strlen(abm::trace::kLogDirPrefix[0]);
                if (v76 > 0x7FFFFFFFFFFFFFF7) {
                  std::string::__throw_length_error[abi:ne180100]();
                }
                std::string::size_type v77 = v76;
                if (v76 >= 0x17)
                {
                  uint64_t v80 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v76 | 7) != 0x17) {
                    uint64_t v80 = v76 | 7;
                  }
                  uint64_t v81 = v80 + 1;
                  long long v78 = operator new(v80 + 1);
                  v106.__r_.__value_.__l.__size_ = v77;
                  v106.__r_.__value_.__r.__words[2] = v81 | 0x8000000000000000;
                  v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
                }
                else
                {
                  *((unsigned char *)&v106.__r_.__value_.__s + 23) = v76;
                  long long v78 = &v106;
                  if (!v76)
                  {
LABEL_147:
                    v78[v77] = 0;
                    if (SHIBYTE(__dst[2]) >= 0) {
                      xpc_object_t v82 = (const std::string::value_type *)__dst;
                    }
                    else {
                      xpc_object_t v82 = (const std::string::value_type *)__dst[0];
                    }
                    if (SHIBYTE(__dst[2]) >= 0) {
                      std::string::size_type v83 = HIBYTE(__dst[2]);
                    }
                    else {
                      std::string::size_type v83 = (std::string::size_type)__dst[1];
                    }
                    uint64_t v84 = std::string::insert(&v106, 0, v82, v83);
                    long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
                    v111.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v85;
                    v84->__r_.__value_.__l.__size_ = 0;
                    v84->__r_.__value_.__r.__words[2] = 0;
                    v84->__r_.__value_.__r.__words[0] = 0;
                    if ((v112.st_gid & 0x80000000) == 0) {
                      uint64_t v86 = &v112;
                    }
                    else {
                      uint64_t v86 = *(stat **)&v112.st_dev;
                    }
                    if ((v112.st_gid & 0x80000000) == 0) {
                      __darwin_ino64_t st_ino = HIBYTE(v112.st_gid);
                    }
                    else {
                      __darwin_ino64_t st_ino = v112.st_ino;
                    }
                    xpc_object_t v88 = std::string::append(&v111, (const std::string::value_type *)v86, st_ino);
                    long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
                    v107.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v89;
                    v88->__r_.__value_.__l.__size_ = 0;
                    v88->__r_.__value_.__r.__words[2] = 0;
                    v88->__r_.__value_.__r.__words[0] = 0;
                    int v90 = abm::trace::kEURCoreDumpSnapshotDirectorySuffix[0];
                    size_t v91 = strlen(abm::trace::kEURCoreDumpSnapshotDirectorySuffix[0]);
                    if (v91 > 0x7FFFFFFFFFFFFFF7) {
                      std::string::__throw_length_error[abi:ne180100]();
                    }
                    size_t v92 = v91;
                    if (v91 >= 0x17)
                    {
                      uint64_t v94 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v91 | 7) != 0x17) {
                        uint64_t v94 = v91 | 7;
                      }
                      uint64_t v95 = v94 + 1;
                      size_t v93 = operator new(v94 + 1);
                      size_t v104 = v92;
                      int64_t v105 = v95 | 0x8000000000000000;
                      std::string v103 = v93;
                    }
                    else
                    {
                      HIBYTE(v105) = v91;
                      size_t v93 = &v103;
                      if (!v91)
                      {
LABEL_167:
                        *((unsigned char *)v93 + v92) = 0;
                        if (v105 >= 0) {
                          uint64_t v96 = (const std::string::value_type *)&v103;
                        }
                        else {
                          uint64_t v96 = (const std::string::value_type *)v103;
                        }
                        if (v105 >= 0) {
                          std::string::size_type v97 = HIBYTE(v105);
                        }
                        else {
                          std::string::size_type v97 = v104;
                        }
                        v98 = std::string::append(&v107, v96, v97);
                        size_t v64 = (std::string::value_type *)v98->__r_.__value_.__r.__words[0];
                        std::string::size_type size = v98->__r_.__value_.__l.__size_;
                        std::string::size_type v66 = v98->__r_.__value_.__r.__words[2];
                        v98->__r_.__value_.__l.__size_ = 0;
                        v98->__r_.__value_.__r.__words[2] = 0;
                        v98->__r_.__value_.__r.__words[0] = 0;
                        if (SHIBYTE(v105) < 0)
                        {
                          operator delete(v103);
                          if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          {
LABEL_175:
                            if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                              goto LABEL_176;
                            }
                            goto LABEL_181;
                          }
                        }
                        else if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
                          goto LABEL_175;
                        }
                        operator delete(v107.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
LABEL_176:
                          if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                            goto LABEL_177;
                          }
                          goto LABEL_182;
                        }
LABEL_181:
                        operator delete(v111.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
LABEL_177:
                          char v67 = 1;
                          memset(&v107, 170, sizeof(v107));
                          if ((v66 & 0x8000000000000000) == 0) {
                            goto LABEL_95;
                          }
                          goto LABEL_104;
                        }
LABEL_182:
                        operator delete(v106.__r_.__value_.__l.__data_);
                        char v67 = 1;
                        memset(&v107, 170, sizeof(v107));
                        if ((v66 & 0x8000000000000000) == 0) {
                          goto LABEL_95;
                        }
                        goto LABEL_104;
                      }
                    }
                    memmove(v93, v90, v92);
                    goto LABEL_167;
                  }
                }
                memmove(v78, v75, v77);
                goto LABEL_147;
              }
            }
            memmove(v25, v22, (size_t)v24);
            goto LABEL_31;
          }
        }
        memmove(v18, v15, (size_t)v17);
        goto LABEL_21;
      }
    }
  }
  __int16 v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v5 = (const std::__fs::filesystem::path *)v5->__pn_.__r_.__value_.__r.__words[0];
    }
    v112.st_dev = 136315138;
    *(void *)&v112.st_mode = v5;
    _os_log_error_impl(&dword_1A609F000, v8, OS_LOG_TYPE_ERROR, "Failed: Couldn't find Scratch path [%s] to move to Snapshot path", (uint8_t *)&v112, 0xCu);
  }
  return 0;
}

void sub_1A60C400C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if (a32 < 0)
    {
LABEL_5:
      operator delete(a27);
      if ((a53 & 0x80000000) == 0) {
        goto LABEL_9;
      }
LABEL_8:
      operator delete(a48);
LABEL_9:
      if (a26 < 0) {
        operator delete(a21);
      }
      if (a39 < 0) {
        operator delete(a34);
      }
      if (a45 < 0) {
        operator delete(a40);
      }
      if (a60 < 0) {
        operator delete(a55);
      }
      MEMORY[0x1A6274930](&a46);
      _Unwind_Resume(a1);
    }
  }
  else if (a32 < 0)
  {
    goto LABEL_5;
  }
  if ((a53 & 0x80000000) == 0) {
    goto LABEL_9;
  }
  goto LABEL_8;
}

void sub_1A60C421C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if ((a42 & 0x80000000) == 0) {
    JUMPOUT(0x1A60C420CLL);
  }
  JUMPOUT(0x1A60C4204);
}

BOOL EURCoreDumpTraceProtocol::createScratchPath(EURCoreDumpTraceProtocol *this)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*((char *)this + 95) < 0)
  {
    **((unsigned char **)this + 9) = 0;
    *((void *)this + 10) = 0;
  }
  else
  {
    *((unsigned char *)this + 72) = 0;
    *((unsigned char *)this + 95) = 0;
  }
  uint64_t v2 = abm::trace::kScratchFolder[0];
  size_t v3 = strlen(abm::trace::kScratchFolder[0]);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_dst = (std::string *)operator new(v6 + 1);
    __dst.__r_.__value_.__l.__size_ = v4;
    __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_11;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v3;
  p_dst = &__dst;
  if (v3) {
LABEL_11:
  }
    memmove(p_dst, v2, v4);
  p_dst->__r_.__value_.__s.__data_[v4] = 0;
  __int16 v8 = EURCoreDumpTrace::kCoreDumpScratchFolder[0];
  size_t v9 = strlen(EURCoreDumpTrace::kCoreDumpScratchFolder[0]);
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_p = operator new(v12 + 1);
    size_t v30 = v10;
    int64_t v31 = v13 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_19;
  }
  HIBYTE(v31) = v9;
  p_p = &__p;
  if (v9) {
LABEL_19:
  }
    memmove(p_p, v8, v10);
  *((unsigned char *)p_p + v10) = 0;
  if (v31 >= 0) {
    uint64_t v14 = (const std::string::value_type *)&__p;
  }
  else {
    uint64_t v14 = (const std::string::value_type *)__p;
  }
  if (v31 >= 0) {
    std::string::size_type v15 = HIBYTE(v31);
  }
  else {
    std::string::size_type v15 = v30;
  }
  size_t v16 = std::string::append(&__dst, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  char v28 = 8;
  strcpy(__s, "coredump");
  __int16 v18 = std::string::append(&v33, __s, 8uLL);
  uint64_t v19 = (std::string::value_type *)v18->__r_.__value_.__r.__words[0];
  std::string::size_type size = v18->__r_.__value_.__l.__size_;
  std::string::size_type v21 = v18->__r_.__value_.__r.__words[2];
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (v28 < 0)
  {
    operator delete(*(void **)__s);
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      if ((SHIBYTE(v31) & 0x80000000) == 0) {
        goto LABEL_29;
      }
      goto LABEL_34;
    }
  }
  else if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete(v33.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
LABEL_35:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v21 & 0x8000000000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_36;
  }
LABEL_34:
  operator delete(__p);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_35;
  }
LABEL_30:
  if ((v21 & 0x8000000000000000) == 0)
  {
LABEL_31:
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    v26.__r_.__value_.__l.__size_ = size;
    v26.__r_.__value_.__r.__words[2] = v21;
    goto LABEL_37;
  }
LABEL_36:
  std::string::__init_copy_ctor_external(&v26, v19, size);
LABEL_37:
  support::fs::createUniquePath((const char *)&v26, &v33);
  uint64_t v22 = (void **)((char *)this + 72);
  if (*((char *)this + 95) < 0) {
    operator delete(*v22);
  }
  *(_OWORD *)uint64_t v22 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
  *((void *)this + 11) = *((void *)&v33.__r_.__value_.__l + 2);
  *((unsigned char *)&v33.__r_.__value_.__s + 23) = 0;
  v33.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  BOOL Dir = support::fs::createDir((const char *)this + 72, 0x1EDu, 1);
  if (!Dir && (uint64_t v24 = *((void *)this + 5), os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)))
  {
    if (*((char *)this + 95) < 0) {
      uint64_t v22 = (void **)*v22;
    }
    LODWORD(v33.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v33.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
    _os_log_error_impl(&dword_1A609F000, v24, OS_LOG_TYPE_ERROR, "Failed: Creating CoreDump scratch path. fScratchFolder=[%s]", (uint8_t *)&v33, 0xCu);
    if ((v21 & 0x8000000000000000) != 0) {
      goto LABEL_44;
    }
  }
  else if ((v21 & 0x8000000000000000) != 0)
  {
LABEL_44:
    operator delete(v19);
  }
  return Dir;
}

void sub_1A60C45A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (v33 < 0)
  {
    operator delete(v32);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::Loggable<EURCoreDumpTraceProtocol,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<EURCoreDumpTraceProtocol,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  if (*(char *)(v3 + 23) < 0)
  {
    uint64_t v5 = *(const std::string::value_type **)v3;
    std::string::size_type v6 = *(void *)(v3 + 8);
    std::string::__init_copy_ctor_external(a2, v5, v6);
  }
  else
  {
    long long v4 = *(_OWORD *)v3;
    a2->__r_.__value_.__r.__words[2] = *(void *)(v3 + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

uint64_t ctu::Loggable<EURCoreDumpTraceProtocol,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);

  return std::string::__assign_external(this, __s, v4);
}

void *ctu::Loggable<EURCoreDumpTraceProtocol,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1EFB09410;
  MEMORY[0x1A6274710](a1 + 1);
  return a1;
}

void ctu::Loggable<EURCoreDumpTraceProtocol,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1EFB09410;
  MEMORY[0x1A6274710](a1 + 1);

  operator delete(a1);
}

void KernelPCITrace::KernelPCITrace(KernelPCITrace *this)
{
  char v4 = 9;
  strcpy((char *)__p, "trace.pci");
  uint64_t v2 = (capabilities::ipc *)Trace::Trace((uint64_t)this, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)this = &unk_1EFB09450;
  *((_DWORD *)this + 38) = capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(v2);
  *((unsigned char *)this + 156) = 0;
  *((_DWORD *)this + 40) = 4;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 21) = (char *)this + 176;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((unsigned char *)this + 216) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((void *)this + 32) = 0;
}

void sub_1A60C4898(_Unwind_Exception *a1)
{
  Trace::~Trace(v1);
  _Unwind_Resume(a1);
}

void sub_1A60C48AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Trace::~Trace(Trace *this)
{
  *(void *)this = &unk_1EFB095E8;
  uint64_t v2 = *((void *)this + 18);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  if ((*((char *)this + 127) & 0x80000000) == 0)
  {
    *(void *)this = &unk_1EFB09728;
    MEMORY[0x1A6274710]((char *)this + 8);
    char v4 = *((void *)this + 12);
    if (!v4) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  operator delete(*((void **)this + 13));
  *(void *)this = &unk_1EFB09728;
  MEMORY[0x1A6274710]((char *)this + 8);
  char v4 = *((void *)this + 12);
  if (v4) {
LABEL_7:
  }
    dispatch_release(v4);
LABEL_8:
  uint64_t v5 = *((void *)this + 11);
  if (v5) {
    dispatch_release(v5);
  }
  std::string::size_type v6 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void KernelPCITrace::~KernelPCITrace(KernelPCITrace *this)
{
  *(void *)this = &unk_1EFB09450;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 30);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 30);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  char v4 = *((void *)this + 28);
  if (v4)
  {
    dispatch_group_leave(v4);
    uint64_t v5 = *((void *)this + 28);
    if (v5) {
      dispatch_release(v5);
    }
  }
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  std::__tree<KernelPCITrace::BuffContext *>::destroy(*((void **)this + 22));

  Trace::~Trace(this);
}

{
  void *v1;
  uint64_t vars8;

  KernelPCITrace::~KernelPCITrace(this);

  operator delete(v1);
}

double KernelPCITrace::createInternal@<D0>(void *a1@<X8>)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = (KernelPCITrace *)operator new(0x110uLL);
  KernelPCITrace::KernelPCITrace(v3);
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<KernelPCITrace>::shared_ptr[abi:ne180100]<KernelPCITrace,std::shared_ptr<KernelPCITrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<KernelPCITrace>(KernelPCITrace*)::{lambda(KernelPCITrace*)#1},void>(&v5, (uint64_t)v3);
  ctu::Loggable<Trace,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v5);
  double result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  return result;
}

void sub_1A60C4B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A60C4B70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t KernelPCITrace::init(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject **a4)
{
  *(unsigned char *)(a1 + 264) = 0;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    std::string v16 = *(std::string *)a2;
    uint64_t v7 = (std::__shared_weak_count *)a3[1];
    uint64_t v14 = *a3;
    std::string::size_type v15 = v7;
    if (!v7) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  uint64_t v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v14 = *a3;
  std::string::size_type v15 = v7;
  if (v7) {
LABEL_3:
  }
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
LABEL_4:
  __int16 v8 = *a4;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  uint64_t v9 = Trace::init(a1, (void **)&v16.__r_.__value_.__l.__data_, &v14, &object);
  if (object) {
    dispatch_release(object);
  }
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v16.__r_.__value_.__l.__data_);
    if (!v9) {
      return v9;
    }
  }
  else if (!v9)
  {
    return v9;
  }
  uint64_t v12 = a1;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIZN14KernelPCITrace4initENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_8weak_ptrIN3abm19BasebandTracingTaskEEEN8dispatch5groupEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSJ__block_invoke;
  uint64_t block[3] = &__block_descriptor_tmp_48;
  void block[4] = a1 + 72;
  void block[5] = &v12;
  uint64_t v11 = *(NSObject **)(a1 + 88);
  if (*(void *)(a1 + 96)) {
    dispatch_async_and_wait(v11, block);
  }
  else {
    dispatch_sync(v11, block);
  }
  return v9;
}

void sub_1A60C4D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (object)
  {
    dispatch_release(object);
    uint64_t v19 = a12;
    if (!a12)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v19 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v19);
  if ((a18 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Trace::init(uint64_t a1, void **a2, uint64_t *a3, NSObject **a4)
{
  uint64_t v7 = (void **)(a1 + 104);
  if (v7 == a2) {
    goto LABEL_10;
  }
  if (*(char *)(a1 + 127) < 0)
  {
    size_t v11 = (size_t)a2[1];
    if (*((char *)a2 + 23) >= 0)
    {
      size_t v12 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (void **)*a2;
      size_t v12 = v11;
    }
    std::string::__assign_no_alias<false>(v7, a2, v12);
LABEL_10:
    uint64_t v10 = *a3;
    uint64_t v9 = a3[1];
    if (!v9) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if ((*((unsigned char *)a2 + 23) & 0x80) == 0)
  {
    long long v8 = *(_OWORD *)a2;
    v7[2] = a2[2];
    *(_OWORD *)uint64_t v7 = v8;
    uint64_t v10 = *a3;
    uint64_t v9 = a3[1];
    if (!v9) {
      goto LABEL_12;
    }
LABEL_11:
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
    goto LABEL_12;
  }
  std::string::__assign_no_alias<true>(v7, *a2, (size_t)a2[1]);
  uint64_t v10 = *a3;
  uint64_t v9 = a3[1];
  if (v9) {
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 136);
  *(void *)(a1 + 128) = v10;
  *(void *)(a1 + 136) = v9;
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = *a4;
  if (v14) {
    dispatch_retain(v14);
  }
  std::string::size_type v15 = *(NSObject **)(a1 + 144);
  *(void *)(a1 + 144) = v14;
  if (v15) {
    dispatch_release(v15);
  }
  return 1;
}

void KernelPCITrace::initProperty_sync(KernelPCITrace *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"initProperty_sync";
    _os_log_debug_impl(&dword_1A609F000, v2, OS_LOG_TYPE_DEBUG, "#D %s", (uint8_t *)&buf, 0xCu);
  }
  char v7 = 7;
  strcpy((char *)v6, "Enabled");
  memset(&__p, 0, sizeof(__p));
  char v10 = 3;
  LOWORD(v9[0]) = *(_WORD *)"IPC";
  WORD1(v9[0]) = str_42[2];
  memset(&buf, 0, sizeof(buf));
  BOOL v3 = defaults::get((char *)v9, (char *)v6, &buf);
  if (v3)
  {
    prop::file::get<std::string>((const void **)v9, (uint64_t)v6, (uint64_t)&buf, &v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v11;
  }
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_12:
    operator delete(v9[0]);
    if (!v3) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
  if (v10 < 0) {
    goto LABEL_12;
  }
LABEL_9:
  if (v3) {
LABEL_13:
  }
    util::convert<BOOL>(&__p, (BOOL *)this + 156, 0);
LABEL_14:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(v6[0]);
LABEL_16:
  char v7 = 7;
  strcpy((char *)v6, "History");
  memset(&__p, 0, sizeof(__p));
  char v10 = 3;
  LOWORD(v9[0]) = *(_WORD *)"IPC";
  WORD1(v9[0]) = str_42[2];
  memset(&buf, 0, sizeof(buf));
  BOOL v4 = defaults::get((char *)v9, (char *)v6, &buf);
  if (v4)
  {
    prop::file::get<std::string>((const void **)v9, (uint64_t)v6, (uint64_t)&buf, &v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v11;
  }
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_27:
    operator delete(v9[0]);
    if (!v4) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
  if (v10 < 0) {
    goto LABEL_27;
  }
LABEL_22:
  if (v4) {
LABEL_28:
  }
    util::convert<int>(&__p, (_DWORD *)this + 38, 0);
LABEL_29:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_31;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v6[0]);
LABEL_31:
  char v7 = 11;
  strcpy((char *)v6, "BufferCount");
  memset(&__p, 0, sizeof(__p));
  char v10 = 3;
  LOWORD(v9[0]) = *(_WORD *)"IPC";
  WORD1(v9[0]) = str_42[2];
  memset(&buf, 0, sizeof(buf));
  BOOL v5 = defaults::get((char *)v9, (char *)v6, &buf);
  if (v5)
  {
    prop::file::get<std::string>((const void **)v9, (uint64_t)v6, (uint64_t)&buf, &v11);
    std::string __p = v11;
  }
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_40:
    operator delete(v9[0]);
    if (!v5) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
  if (v10 < 0) {
    goto LABEL_40;
  }
LABEL_35:
  if (v5) {
LABEL_41:
  }
    util::convert<unsigned int>(&__p, (_DWORD *)this + 40, 0);
LABEL_42:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_46:
    operator delete(v6[0]);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v7 < 0) {
    goto LABEL_46;
  }
}

void sub_1A60C5204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *KernelPCITrace::createBuffContext_sync(KernelPCITrace *this, uint64_t a2)
{
  BOOL v4 = operator new(0x20uLL);
  BOOL v5 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v5 || (uint64_t v6 = *((void *)this + 9), (v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v8 = v7;
  p_shared_weak_owners = &v7->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    void *v4 = 0;
    v4[1] = a2;
    uint64_t v4[2] = v6;
    v4[3] = v7;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    size_t v10 = v4[1];
    if (!v10) {
      goto LABEL_5;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
    void *v4 = 0;
    v4[1] = a2;
    uint64_t v4[2] = v6;
    v4[3] = v8;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    size_t v10 = v4[1];
    if (!v10)
    {
LABEL_5:
      std::__shared_weak_count::__release_weak(v8);
      size_t v12 = (uint64_t **)((char *)this + 176);
      std::string v11 = (uint64_t *)*((void *)this + 22);
      if (v11) {
        goto LABEL_11;
      }
LABEL_9:
      uint64_t v13 = v12;
LABEL_15:
      std::string::size_type v15 = (uint64_t *)operator new(0x28uLL);
      v15[4] = (uint64_t)v4;
      *std::string::size_type v15 = 0;
      v15[1] = 0;
      v15[2] = (uint64_t)v13;
      *size_t v12 = v15;
      uint64_t v16 = **((void **)this + 21);
      if (v16)
      {
        *((void *)this + 21) = v16;
        long long v17 = *v12;
      }
      else
      {
        long long v17 = v15;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 22), v17);
      ++*((void *)this + 23);
      return v4;
    }
  }
  void *v4 = malloc_type_malloc(v10, 0xA158526EuLL);
  std::__shared_weak_count::__release_weak(v8);
  size_t v12 = (uint64_t **)((char *)this + 176);
  std::string v11 = (uint64_t *)*((void *)this + 22);
  if (!v11) {
    goto LABEL_9;
  }
  while (1)
  {
LABEL_11:
    while (1)
    {
      uint64_t v13 = (uint64_t **)v11;
      unint64_t v14 = v11[4];
      if ((unint64_t)v4 >= v14) {
        break;
      }
      std::string v11 = *v13;
      size_t v12 = v13;
      if (!*v13) {
        goto LABEL_15;
      }
    }
    if (v14 >= (unint64_t)v4) {
      return v4;
    }
    std::string v11 = v13[1];
    if (!v11)
    {
      size_t v12 = v13 + 1;
      goto LABEL_15;
    }
  }
}

void sub_1A60C544C(_Unwind_Exception *a1)
{
  BOOL v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  std::__shared_weak_count::__release_weak(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A60C5474(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void KernelPCITrace::deleteBuffContext_sync(void *a1, unint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (uint64_t *)a1[22];
    if (v2)
    {
      BOOL v4 = a1 + 22;
      BOOL v5 = (void *)a1[22];
      do
      {
        unint64_t v6 = v5[4];
        BOOL v7 = v6 >= a2;
        if (v6 >= a2) {
          long long v8 = v5;
        }
        else {
          long long v8 = v5 + 1;
        }
        if (v7) {
          BOOL v4 = v5;
        }
        BOOL v5 = (void *)*v8;
      }
      while (*v8);
      if (v4 != a1 + 22 && v4[4] <= a2)
      {
        uint64_t v9 = (uint64_t *)v4[1];
        if (v9)
        {
          do
          {
            size_t v10 = v9;
            uint64_t v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
        else
        {
          std::string v11 = v4;
          do
          {
            size_t v10 = (uint64_t *)v11[2];
            BOOL v12 = *v10 == (void)v11;
            std::string v11 = v10;
          }
          while (!v12);
        }
        if ((uint64_t *)a1[21] == v4) {
          a1[21] = v10;
        }
        --a1[23];
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v2, v4);
        operator delete(v4);
        if (*(void *)a2) {
          free(*(void **)a2);
        }
        uint64_t v13 = *(std::__shared_weak_count **)(a2 + 24);
        if (v13) {
          std::__shared_weak_count::__release_weak(v13);
        }
        operator delete((void *)a2);
      }
    }
  }
}

void KernelPCITrace::deleteAllBuffContext_sync(KernelPCITrace *this)
{
  uint64_t v2 = (char *)*((void *)this + 21);
  BOOL v3 = (char *)this + 176;
  if (v2 != (char *)this + 176)
  {
    do
    {
      uint64_t v4 = *((void *)v2 + 4);
      if (v4)
      {
        if (*(void *)v4) {
          free(*(void **)v4);
        }
        BOOL v5 = *(std::__shared_weak_count **)(v4 + 24);
        if (v5) {
          std::__shared_weak_count::__release_weak(v5);
        }
        operator delete((void *)v4);
      }
      unint64_t v6 = (char *)*((void *)v2 + 1);
      if (v6)
      {
        do
        {
          BOOL v7 = v6;
          unint64_t v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          BOOL v7 = (char *)*((void *)v2 + 2);
          BOOL v8 = *(void *)v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
    }
    while (v7 != v3);
  }
  std::__tree<KernelPCITrace::BuffContext *>::destroy(*((void **)this + 22));
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 21) = v3;
}

void KernelPCITrace::updateTraceState_sync(uint64_t a1, NSObject **a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t v32 = 136315138;
    *(void *)&v32[4] = "updateTraceState_sync";
    _os_log_debug_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEBUG, "#D %s", v32, 0xCu);
    if (*(unsigned char *)(a1 + 156))
    {
LABEL_3:
      if (*(unsigned char *)(a1 + 216)) {
        return;
      }
      *(unsigned char *)(a1 + 216) = 1;
      BOOL v5 = *(std::__shared_weak_count **)(a1 + 240);
      *(void *)(a1 + 232) = 0;
      *(void *)(a1 + 240) = 0;
      if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v36 = v6;
      long long v35 = v6;
      long long v34 = v6;
      long long v33 = v6;
      *(_OWORD *)&v32[8] = v6;
      BOOL v7 = (char *)operator new(0x40uLL);
      strcpy(v7, "/var/wireless/Library/Logs/AppleBasebandManager/pci.scratch/");
      uint64_t v8 = *(int *)(a1 + 152);
      *(void *)uint64_t v32 = 6906736;
      v32[23] = 3;
      std::string::__init_copy_ctor_external((std::string *)&v33, v7, 0x3CuLL);
      *(void *)&long long v35 = 0;
      *((void *)&v35 + 1) = 0x400000000000000;
      *(void *)&long long v36 = v8 << 20;
      *((void *)&v36 + 1) = 0x100000;
      LOBYTE(v37) = 1;
      *((void *)&v34 + 1) = 1735355438;
      operator delete(v7);
      uint64_t v9 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1A609F000, v9, OS_LOG_TYPE_DEFAULT, "#I Create and open log writer", buf, 2u);
      }
      size_t v10 = operator new(0xB8uLL);
      CircularFileLogWriter::CircularFileLogWriter((uint64_t)v10, (long long *)v32);
      std::shared_ptr<CircularFileLogWriter>::shared_ptr[abi:ne180100]<CircularFileLogWriter,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter*)#1},void>(buf, (uint64_t)v10);
      long long v11 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      BOOL v12 = *(std::__shared_weak_count **)(a1 + 240);
      *(_OWORD *)(a1 + 232) = v11;
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      uint64_t v13 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      uint64_t v14 = *(void *)(a1 + 232);
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 0x40000000;
      v25[2] = ___ZN21CircularFileLogWriter4openEv_block_invoke;
      v25[3] = &__block_descriptor_tmp;
      v25[4] = v14;
      std::string v26 = v25;
      *(void *)std::string buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      char v28 = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
      size_t v29 = &__block_descriptor_tmp_21;
      uint64_t v30 = v14 + 8;
      int64_t v31 = &v26;
      std::string::size_type v15 = *(NSObject **)(v14 + 24);
      if (*(void *)(v14 + 32)) {
        dispatch_async_and_wait(v15, buf);
      }
      else {
        dispatch_sync(v15, buf);
      }
      if ((KernelPCITrace::registerWithKernel_sync((KernelPCITrace *)a1) & 1) == 0)
      {
        uint64_t v16 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_1A609F000, v16, OS_LOG_TYPE_DEFAULT, "#E Registering with Kernel driver failed. De-register to cleanup", buf, 2u);
        }
        KernelPCITrace::deregisterWithKernel_sync((KernelPCITrace *)a1);
      }
      if (SHIBYTE(v35) < 0)
      {
        operator delete(*((void **)&v34 + 1));
        if ((SBYTE7(v34) & 0x80000000) == 0)
        {
LABEL_24:
          if ((v32[23] & 0x80000000) == 0) {
            return;
          }
LABEL_28:
          operator delete(*(void **)v32);
          return;
        }
      }
      else if ((SBYTE7(v34) & 0x80000000) == 0)
      {
        goto LABEL_24;
      }
      operator delete((void *)v33);
      if ((v32[23] & 0x80000000) == 0) {
        return;
      }
      goto LABEL_28;
    }
  }
  else if (*(unsigned char *)(a1 + 156))
  {
    goto LABEL_3;
  }
  *(unsigned char *)(a1 + 216) = 0;
  long long v17 = dispatch_group_create();
  __int16 v18 = v17;
  uint64_t v24 = v17;
  if (v17)
  {
    dispatch_retain(v17);
    dispatch_group_enter(v18);
  }
  CFDictionaryRef v23 = 0;
  KernelPCITrace::snapshot_sync(a1, &v24, &v23);
  if (v18)
  {
    dispatch_group_leave(v18);
    dispatch_release(v18);
  }
  uint64_t v19 = *(NSObject **)(a1 + 88);
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 1174405120;
  v21[2] = ___ZN14KernelPCITrace21updateTraceState_syncEN8dispatch13group_sessionE_block_invoke;
  v21[3] = &__block_descriptor_tmp_17;
  uint64_t v20 = *a2;
  v21[4] = a1;
  dispatch_group_t group = v20;
  if (v20)
  {
    dispatch_retain(v20);
    dispatch_group_enter(group);
  }
  dispatch_group_notify(v18, v19, v21);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v18) {
    dispatch_release(v18);
  }
}

void sub_1A60C5B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  operator delete(v29);
  CircularFileLogWriter::Params::~Params(&a29);
  _Unwind_Resume(a1);
}

void sub_1A60C5B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  operator delete(v34);
  _Unwind_Resume(a1);
}

void sub_1A60C5B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
}

void sub_1A60C5B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  if (!v7) {
    _Unwind_Resume(a1);
  }
  dispatch_group_leave(v7);
  dispatch_release(v7);
  dispatch_release(v7);
  _Unwind_Resume(a1);
}

void sub_1A60C5BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
}

uint64_t KernelPCITrace::registerWithKernel_sync(KernelPCITrace *this)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG);
  if (v3)
  {
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = "registerWithKernel_sync";
    _os_log_debug_impl(&dword_1A609F000, v2, OS_LOG_TYPE_DEBUG, "#D %s", buf, 0xCu);
    if (*((unsigned char *)this + 264)) {
      goto LABEL_5;
    }
  }
  else if (*((unsigned char *)this + 264))
  {
    goto LABEL_5;
  }
  BOOL v3 = *((void *)this + 18);
  if (v3)
  {
    dispatch_group_enter(v3);
    *((unsigned char *)this + 264) = 1;
  }
LABEL_5:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 32);
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  pci::transport::kernelControl::create((uint64_t *)buf, (pci::transport::kernelControl *)v3);
  uint64_t v5 = *(void *)buf;
  if (*(void *)buf)
  {
    long long v6 = operator new(0x20uLL);
    *long long v6 = &unk_1EFB09598;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v5;
    *(void *)std::string buf = 0;
    BOOL v7 = (std::__shared_weak_count *)*((void *)this + 32);
    *((void *)this + 31) = v5;
    *((void *)this + 32) = v6;
    if (v7) {
      goto LABEL_10;
    }
LABEL_18:
    if (!v5) {
      goto LABEL_15;
    }
    goto LABEL_19;
  }
  *(void *)std::string buf = 0;
  BOOL v7 = (std::__shared_weak_count *)*((void *)this + 32);
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  if (!v7) {
    goto LABEL_18;
  }
LABEL_10:
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *(void *)buf;
  *(void *)std::string buf = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v5 = *((void *)this + 31);
  if (!v5)
  {
LABEL_15:
    uint64_t v9 = *((void *)this + 5);
    uint64_t v10 = 0;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      long long v11 = "#E ABP Control object creation failed";
LABEL_29:
      _os_log_impl(&dword_1A609F000, v9, OS_LOG_TYPE_DEFAULT, v11, buf, 2u);
      return 0;
    }
    return v10;
  }
LABEL_19:
  if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5))
  {
    BOOL v12 = (std::__shared_weak_count *)*((void *)this + 17);
    if (!v12) {
      return 0;
    }
    uint64_t v13 = std::__shared_weak_count::lock(v12);
    if (!v13) {
      return 0;
    }
    uint64_t v14 = v13;
    std::string::size_type v15 = (abm::BasebandTracingTask *)*((void *)this + 16);
    if (!v15) {
      goto LABEL_54;
    }
    uint64_t v16 = *((void *)this + 31);
    long long v17 = (std::__shared_weak_count *)*((void *)v15 + 16);
    if (v17 && (__int16 v18 = std::__shared_weak_count::lock(v17)) != 0)
    {
      uint64_t v19 = v18;
      uint64_t v20 = *((void *)v15 + 15);
      if (v20) {
        uint64_t v21 = *(void *)(v20 + 168);
      }
      else {
        uint64_t v21 = 0;
      }
      if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    else
    {
      uint64_t v21 = 0;
    }
    int v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v16 + 40))(v16, v21);
    uint64_t v24 = *((void *)this + 5);
    BOOL v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    if (v23)
    {
      if (!v25)
      {
LABEL_54:
        uint64_t v10 = 0;
LABEL_55:
        if (atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return v10;
        }
LABEL_56:
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        return v10;
      }
      *(_WORD *)std::string buf = 0;
      std::string v26 = "#E ABP Control open failed";
      uint64_t v27 = v24;
    }
    else
    {
      if (v25)
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1A609F000, v24, OS_LOG_TYPE_DEFAULT, "#I Started and opened ABP control interface", buf, 2u);
      }
      int v28 = (*(uint64_t (**)(void, int *))(**((void **)this + 31) + 96))(*((void *)this + 31), &KernelPCITrace::registerWithKernel_sync(void)::bufferSize);
      if (KernelPCITrace::registerWithKernel_sync(void)::bufferSize) {
        int v29 = v28;
      }
      else {
        int v29 = 0;
      }
      if (v29 == 1)
      {
        BuffContext_sync = KernelPCITrace::createBuffContext_sync(this, KernelPCITrace::registerWithKernel_sync(void)::bufferSize);
        int v31 = (*(uint64_t (**)(void, void, void, uint64_t, void (*)(void *, int, uint64_t), void *))(**((void **)this + 31) + 64))(*((void *)this + 31), *BuffContext_sync, *((unsigned int *)BuffContext_sync + 2), 1, flushLogsCompletionCB, BuffContext_sync);
        uint64_t v32 = *((void *)this + 5);
        BOOL v33 = os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
        if (v31)
        {
          if (v33)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = KernelPCITrace::registerWithKernel_sync(void)::bufferSize >> 10;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v31;
            _os_log_impl(&dword_1A609F000, v32, OS_LOG_TYPE_DEFAULT, "#E Failed assigning buffer of size '%u KB' to fetch logs during init. Status [0x%x]", buf, 0xEu);
          }
          KernelPCITrace::deleteBuffContext_sync(this, (unint64_t)BuffContext_sync);
        }
        else
        {
          if (v33)
          {
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = KernelPCITrace::registerWithKernel_sync(void)::bufferSize >> 10;
            _os_log_impl(&dword_1A609F000, v32, OS_LOG_TYPE_DEFAULT, "#I Assign buffer of size '%u KB' to fetch logs during init", buf, 8u);
          }
          if (!*((_DWORD *)this + 40))
          {
LABEL_65:
            RunLoop = (__CFRunLoop *)abm::BasebandTracingTask::getRunLoop(v15);
            CFRunLoopWakeUp(RunLoop);
            uint64_t v10 = 1;
            if (atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
              return v10;
            }
            goto LABEL_56;
          }
          unsigned int v35 = 0;
          while (1)
          {
            long long v36 = KernelPCITrace::createBuffContext_sync(this, 0x10000);
            int v37 = (*(uint64_t (**)(void, void, void, void, void (*)(void *, int, uint64_t), void *))(**((void **)this + 31) + 64))(*((void *)this + 31), *v36, *((unsigned int *)v36 + 2), 0, readLogsCompletionCB, v36);
            uint64_t v38 = *((void *)this + 5);
            if (v37) {
              break;
            }
            ++v35;
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v35;
              *(_WORD *)&buf[8] = 2048;
              *(void *)&buf[10] = 64;
              _os_log_impl(&dword_1A609F000, v38, OS_LOG_TYPE_DEFAULT, "#I Pre-assign buffer # %d of size '%ld KB' to fetch logs", buf, 0x12u);
            }
            if (v35 >= *((_DWORD *)this + 40)) {
              goto LABEL_65;
            }
          }
          if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 67109632;
            *(_DWORD *)&uint8_t buf[4] = v35 + 1;
            *(_WORD *)&buf[8] = 2048;
            *(void *)&buf[10] = 64;
            __int16 v41 = 1024;
            int v42 = v37;
            _os_log_error_impl(&dword_1A609F000, v38, OS_LOG_TYPE_ERROR, "Failed pre-assigning buffer # %d of size '%ld KB' to fetch logs. Status [0x%x]", buf, 0x18u);
          }
          KernelPCITrace::deleteBuffContext_sync(this, (unint64_t)v36);
        }
        goto LABEL_54;
      }
      long long v34 = *((void *)this + 5);
      uint64_t v10 = 0;
      if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_55;
      }
      *(_WORD *)std::string buf = 0;
      std::string v26 = "#E Failed to get internal buffer size from kernel";
      uint64_t v27 = v34;
    }
    _os_log_impl(&dword_1A609F000, v27, OS_LOG_TYPE_DEFAULT, v26, buf, 2u);
    goto LABEL_54;
  }
  uint64_t v9 = *((void *)this + 5);
  uint64_t v10 = 0;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    long long v11 = "#E ABP Control start failed";
    goto LABEL_29;
  }
  return v10;
}

void sub_1A60C6310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A60C6324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A60C6338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A60C634C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A60C6360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A60C6374(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void KernelPCITrace::deregisterWithKernel_sync(KernelPCITrace *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 136315138;
    uint64_t v9 = "deregisterWithKernel_sync";
    _os_log_debug_impl(&dword_1A609F000, v2, OS_LOG_TYPE_DEBUG, "#D %s", (uint8_t *)&v8, 0xCu);
    uint64_t v3 = *((void *)this + 31);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *((void *)this + 31);
    if (!v3) {
      return;
    }
  }
  uint64_t v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8) = 0;
    _os_log_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEFAULT, "#I Close ABM Control port", (uint8_t *)&v8, 2u);
    uint64_t v3 = *((void *)this + 31);
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
  uint64_t v5 = *((void *)this + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8) = 0;
    _os_log_impl(&dword_1A609F000, v5, OS_LOG_TYPE_DEFAULT, "#I Stop ABP control interface", (uint8_t *)&v8, 2u);
  }
  (*(void (**)(void))(**((void **)this + 31) + 32))(*((void *)this + 31));
  long long v6 = *((void *)this + 5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8) = 0;
    _os_log_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEFAULT, "#I Destroy ABP control object", (uint8_t *)&v8, 2u);
  }
  BOOL v7 = (std::__shared_weak_count *)*((void *)this + 32);
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (*((unsigned char *)this + 264))
  {
    dispatch_group_leave(*((dispatch_group_t *)this + 18));
    *((unsigned char *)this + 264) = 0;
  }
}

void CircularFileLogWriter::Params::~Params(void **this)
{
  if (*((char *)this + 71) < 0)
  {
    operator delete(this[6]);
    if ((*((char *)this + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 23) & 0x80000000) == 0) {
        return;
      }
LABEL_7:
      operator delete(*this);
      return;
    }
  }
  else if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[3]);
  if (*((char *)this + 23) < 0) {
    goto LABEL_7;
  }
}

void KernelPCITrace::snapshot_sync(uint64_t a1, NSObject **a2, const __CFDictionary **a3)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  long long v6 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    if (!*(void *)(a1 + 248)) {
      return;
    }
LABEL_3:
    v63[0] = 0xAAAAAAAAAAAAAAAALL;
    v63[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v63, *a3);
    memset(buf, 170, sizeof(buf));
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_1A61F71C0;
    strcpy((char *)__p[0], "kCollectTelephonyLogsWithCoredump");
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v61, "kKeyTraceAction");
    ctu::cf::map_adapter::getString();
    MEMORY[0x1A62748E0](v61);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    memset(__p, 170, sizeof(__p));
    BOOL v7 = (const char *)*MEMORY[0x1E4F4C4C8];
    memset(v61, 0, sizeof(v61));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__dst, v7);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1A62748E0](&__dst);
    if (SHIBYTE(v61[2]) < 0) {
      operator delete(v61[0]);
    }
    memset(v61, 170, sizeof(v61));
    int v8 = (void *)HIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) < 0) {
      int v8 = __p[1];
    }
    if (v8) {
      uint64_t v9 = abm::trace::kSnapshotFolder;
    }
    else {
      uint64_t v9 = abm::trace::kTrashFolder;
    }
    uint64_t v10 = *v9;
    size_t v11 = strlen(*v9);
    if (v11 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v12 = v11;
    if (v11 >= 0x17)
    {
      uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v14 = v11 | 7;
      }
      uint64_t v15 = v14 + 1;
      p_dst = (std::string *)operator new(v14 + 1);
      __dst.__r_.__value_.__l.__size_ = v12;
      __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v11;
      p_dst = &__dst;
      if (!v11)
      {
LABEL_20:
        p_dst->__r_.__value_.__s.__data_[v12] = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v59, "kKeyTraceDumpStatePath");
        ctu::cf::map_adapter::getString();
        MEMORY[0x1A62748E0](&v59);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        uint64_t v16 = abm::trace::kLogDirPrefix[0];
        size_t v17 = strlen(abm::trace::kLogDirPrefix[0]);
        if (v17 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        std::string::size_type v18 = v17;
        if (v17 >= 0x17)
        {
          uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17) {
            uint64_t v20 = v17 | 7;
          }
          uint64_t v21 = v20 + 1;
          uint64_t v19 = operator new(v20 + 1);
          v57.__r_.__value_.__l.__size_ = v18;
          v57.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
          v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
        }
        else
        {
          *((unsigned char *)&v57.__r_.__value_.__s + 23) = v17;
          uint64_t v19 = &v57;
          if (!v17)
          {
LABEL_30:
            v19[v18] = 0;
            if (SHIBYTE(v61[2]) >= 0) {
              uint64_t v22 = v61;
            }
            else {
              uint64_t v22 = (void **)v61[0];
            }
            if (SHIBYTE(v61[2]) >= 0) {
              std::string::size_type v23 = HIBYTE(v61[2]);
            }
            else {
              std::string::size_type v23 = (std::string::size_type)v61[1];
            }
            uint64_t v24 = std::string::insert(&v57, 0, (const std::string::value_type *)v22, v23);
            long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
            v58.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v25;
            v24->__r_.__value_.__l.__size_ = 0;
            v24->__r_.__value_.__r.__words[2] = 0;
            v24->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__p[2]) >= 0) {
              std::string v26 = __p;
            }
            else {
              std::string v26 = (void **)__p[0];
            }
            if (SHIBYTE(__p[2]) >= 0) {
              std::string::size_type v27 = HIBYTE(__p[2]);
            }
            else {
              std::string::size_type v27 = (std::string::size_type)__p[1];
            }
            int v28 = std::string::append(&v58, (const std::string::value_type *)v26, v27);
            long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
            v59.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v29;
            v28->__r_.__value_.__l.__size_ = 0;
            v28->__r_.__value_.__r.__words[2] = 0;
            v28->__r_.__value_.__r.__words[0] = 0;
            uint64_t v30 = std::string::append(&v59, "-", 1uLL);
            long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
            __dst.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v31;
            v30->__r_.__value_.__l.__size_ = 0;
            v30->__r_.__value_.__r.__words[2] = 0;
            v30->__r_.__value_.__r.__words[0] = 0;
            char v56 = 3;
            LODWORD(v55) = 6906736;
            uint64_t v32 = std::string::append(&__dst, (const std::string::value_type *)&v55, 3uLL);
            std::string::size_type v33 = v32->__r_.__value_.__r.__words[0];
            v64[0] = v32->__r_.__value_.__l.__size_;
            *(void *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
            char v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
            v32->__r_.__value_.__l.__size_ = 0;
            v32->__r_.__value_.__r.__words[2] = 0;
            v32->__r_.__value_.__r.__words[0] = 0;
            if (*(char *)(a1 + 215) < 0) {
              operator delete(*(void **)(a1 + 192));
            }
            uint64_t v35 = v64[0];
            *(void *)(a1 + 192) = v33;
            *(void *)(a1 + 200) = v35;
            *(void *)(a1 + 207) = *(void *)((char *)v64 + 7);
            *(unsigned char *)(a1 + 215) = v34;
            if (v56 < 0)
            {
              operator delete(v55);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_46:
                if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_47;
                }
                goto LABEL_75;
              }
            }
            else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_46;
            }
            operator delete(__dst.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_47:
              if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_48;
              }
              goto LABEL_76;
            }
LABEL_75:
            operator delete(v59.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_48:
              if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_49;
              }
LABEL_77:
              operator delete(v57.__r_.__value_.__l.__data_);
LABEL_49:
              uint64_t v36 = buf[23];
              if ((buf[23] & 0x80u) != 0) {
                uint64_t v36 = *(void *)&buf[8];
              }
              if (v36 == 17)
              {
                int v37 = buf;
                if ((buf[23] & 0x80u) != 0) {
                  int v37 = *(uint8_t **)buf;
                }
                uint64_t v38 = *(void *)v37;
                uint64_t v39 = *((void *)v37 + 1);
                uint64_t v40 = v37[16];
                if (v38 == *(void *)"kShutdownAllTrace"
                  && v39 == *(void *)"nAllTrace"
                  && v40 == str_72[16])
                {
                  uint64_t v43 = *(NSObject **)(a1 + 40);
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                  {
                    LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
                    _os_log_impl(&dword_1A609F000, v43, OS_LOG_TYPE_DEFAULT, "#I Snapshot requested as part of shutdown", (uint8_t *)&__dst, 2u);
                  }
                  *(unsigned char *)(a1 + 216) = 0;
                }
              }
              uint64_t v44 = *a2;
              if (v44)
              {
                dispatch_retain(v44);
                dispatch_group_enter(v44);
              }
              uint64_t v45 = *(NSObject **)(a1 + 224);
              *(void *)(a1 + 224) = v44;
              if (v45)
              {
                dispatch_group_leave(v45);
                dispatch_release(v45);
              }
              BuffContext_sync = KernelPCITrace::createBuffContext_sync((KernelPCITrace *)a1, 0x10000);
              int v47 = (*(uint64_t (**)(void, void, void, uint64_t, void (*)(void *, int, uint64_t), void *))(**(void **)(a1 + 248) + 64))(*(void *)(a1 + 248), *BuffContext_sync, *((unsigned int *)BuffContext_sync + 2), 1, flushLogsCompletionCB, BuffContext_sync);
              std::string::size_type v48 = *(NSObject **)(a1 + 40);
              BOOL v49 = os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);
              if (v47)
              {
                if (v49)
                {
                  LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
                  _os_log_impl(&dword_1A609F000, v48, OS_LOG_TYPE_DEFAULT, "#E Failed assigning additional buffer for snapshot", (uint8_t *)&__dst, 2u);
                }
                KernelPCITrace::deleteBuffContext_sync((void *)a1, (unint64_t)BuffContext_sync);
              }
              else if (v49)
              {
                LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
                _os_log_impl(&dword_1A609F000, v48, OS_LOG_TYPE_DEFAULT, "#I Assign additional buffer for snapshot", (uint8_t *)&__dst, 2u);
              }
              long long v50 = KernelPCITrace::createBuffContext_sync((KernelPCITrace *)a1, 0);
              int v51 = (*(uint64_t (**)(void, void, void, uint64_t, void (*)(void *, int, uint64_t), void *))(**(void **)(a1 + 248) + 64))(*(void *)(a1 + 248), *v50, *((unsigned int *)v50 + 2), 1, flushLogsCompletionCB, v50);
              int v52 = *(NSObject **)(a1 + 40);
              BOOL v53 = os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
              if (v51)
              {
                if (v53)
                {
                  LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
                  _os_log_impl(&dword_1A609F000, v52, OS_LOG_TYPE_DEFAULT, "#E Failed assigning null-buffer to trigger snapshot", (uint8_t *)&__dst, 2u);
                }
                KernelPCITrace::deleteBuffContext_sync((void *)a1, (unint64_t)v50);
                long long v54 = *(NSObject **)(a1 + 224);
                *(void *)(a1 + 224) = 0;
                if (v54)
                {
                  dispatch_group_leave(v54);
                  dispatch_release(v54);
                }
              }
              else if (v53)
              {
                LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
                _os_log_impl(&dword_1A609F000, v52, OS_LOG_TYPE_DEFAULT, "#I Assign null-buffer to trigger snapshot", (uint8_t *)&__dst, 2u);
              }
              if (SHIBYTE(v61[2]) < 0)
              {
                operator delete(v61[0]);
                if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
                {
LABEL_89:
                  if (((char)buf[23] & 0x80000000) == 0)
                  {
LABEL_90:
                    MEMORY[0x1A6274930](v63);
                    return;
                  }
LABEL_94:
                  operator delete(*(void **)buf);
                  goto LABEL_90;
                }
              }
              else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
              {
                goto LABEL_89;
              }
              operator delete(__p[0]);
              if (((char)buf[23] & 0x80000000) == 0) {
                goto LABEL_90;
              }
              goto LABEL_94;
            }
LABEL_76:
            operator delete(v58.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_49;
            }
            goto LABEL_77;
          }
        }
        memmove(v19, v16, v18);
        goto LABEL_30;
      }
    }
    memmove(p_dst, v10, v12);
    goto LABEL_20;
  }
  *(_DWORD *)std::string buf = 136315138;
  *(void *)&uint8_t buf[4] = "snapshot_sync";
  _os_log_debug_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEBUG, "#D %s", buf, 0xCu);
  if (*(void *)(a1 + 248)) {
    goto LABEL_3;
  }
}

void sub_1A60C6DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  if (*(char *)(v53 - 89) < 0) {
    operator delete(*(void **)(v53 - 112));
  }
  MEMORY[0x1A6274930](v53 - 144);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void ___ZN14KernelPCITrace21updateTraceState_syncEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(KernelPCITrace **)(a1 + 32);
  KernelPCITrace::deregisterWithKernel_sync(v1);
  uint64_t v2 = *((void *)v1 + 29);
  if (v2)
  {
    uint64_t v3 = *((void *)v1 + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Closing log writer", buf, 2u);
      uint64_t v2 = *((void *)v1 + 29);
    }
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    uint64_t v4 = *((void *)v1 + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v8 = 0;
      _os_log_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEFAULT, "#I Clearing log writer files", v8, 2u);
    }
    (*(void (**)(void))(**((void **)v1 + 29) + 64))(*((void *)v1 + 29));
    uint64_t v5 = *((void *)v1 + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v7 = 0;
      _os_log_impl(&dword_1A609F000, v5, OS_LOG_TYPE_DEFAULT, "#I Releasing log writer object", v7, 2u);
    }
    long long v6 = (std::__shared_weak_count *)*((void *)v1 + 30);
    *((void *)v1 + 29) = 0;
    *((void *)v1 + 30) = 0;
    if (v6)
    {
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void KernelPCITrace::flushLogsCompletion(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v16 = 136315138;
    size_t v17 = "flushLogsCompletion";
    _os_log_debug_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEBUG, "#D %s", (uint8_t *)&v16, 0xCu);
    uint64_t v9 = (std::__shared_weak_count *)a1[10];
    if (!v9) {
LABEL_8:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    uint64_t v9 = (std::__shared_weak_count *)a1[10];
    if (!v9) {
      goto LABEL_8;
    }
  }
  uint64_t v10 = a1[9];
  size_t v11 = std::__shared_weak_count::lock(v9);
  if (!v11) {
    goto LABEL_8;
  }
  std::string::size_type v12 = v11;
  uint64_t v13 = operator new(0x20uLL);
  *uint64_t v13 = a1;
  v13[1] = a2;
  *((_DWORD *)v13 + 4) = a4;
  v13[3] = a3;
  uint64_t v14 = a1[11];
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v15 = operator new(0x18uLL);
  *uint64_t v15 = v13;
  v15[1] = v10;
  v15[2] = v12;
  dispatch_async_f(v14, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::flushLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0>(KernelPCITrace::flushLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::flushLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0,dispatch_queue_s *::default_delete<KernelPCITrace::flushLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_1A60C7394(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void KernelPCITrace::readLogsCompletion(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v16 = 136315138;
    size_t v17 = "readLogsCompletion";
    _os_log_debug_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEBUG, "#D %s", (uint8_t *)&v16, 0xCu);
    uint64_t v9 = (std::__shared_weak_count *)a1[10];
    if (!v9) {
LABEL_8:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    uint64_t v9 = (std::__shared_weak_count *)a1[10];
    if (!v9) {
      goto LABEL_8;
    }
  }
  uint64_t v10 = a1[9];
  size_t v11 = std::__shared_weak_count::lock(v9);
  if (!v11) {
    goto LABEL_8;
  }
  std::string::size_type v12 = v11;
  uint64_t v13 = operator new(0x20uLL);
  *uint64_t v13 = a1;
  v13[1] = a2;
  *((_DWORD *)v13 + 4) = a4;
  v13[3] = a3;
  uint64_t v14 = a1[11];
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v15 = operator new(0x18uLL);
  *uint64_t v15 = v13;
  v15[1] = v10;
  v15[2] = v12;
  dispatch_async_f(v14, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::readLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0>(KernelPCITrace::readLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::readLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0,dispatch_queue_s *::default_delete<KernelPCITrace::readLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_1A60C7524(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void flushLogsCompletionCB(void *a1, int a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = (std::__shared_weak_count *)a1[3];
    if (v4)
    {
      BOOL v7 = std::__shared_weak_count::lock(v4);
      if (v7)
      {
        int v8 = v7;
        uint64_t v9 = (const void *)a1[2];
        if (v9)
        {
          KernelPCITrace::flushLogsCompletion(v10, (uint64_t)a1, a3, a2);
        }
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  const void *v9;
  void *v10;

  if (a1)
  {
    uint64_t v4 = (std::__shared_weak_count *)a1[3];
    if (v4)
    {
      BOOL v7 = std::__shared_weak_count::lock(v4);
      if (v7)
      {
        int v8 = v7;
        uint64_t v9 = (const void *)a1[2];
        if (v9)
        {
          KernelPCIABPTrace::flushLogsCompletion(v10, (uint64_t)a1, a3, a2);
        }
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_1A60C7638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void readLogsCompletionCB(void *a1, int a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = (std::__shared_weak_count *)a1[3];
    if (v4)
    {
      BOOL v7 = std::__shared_weak_count::lock(v4);
      if (v7)
      {
        int v8 = v7;
        uint64_t v9 = (const void *)a1[2];
        if (v9)
        {
          KernelPCITrace::readLogsCompletion(v10, (uint64_t)a1, a3, a2);
        }
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  const void *v9;
  void *v10;

  if (a1)
  {
    uint64_t v4 = (std::__shared_weak_count *)a1[3];
    if (v4)
    {
      BOOL v7 = std::__shared_weak_count::lock(v4);
      if (v7)
      {
        int v8 = v7;
        uint64_t v9 = (const void *)a1[2];
        if (v9)
        {
          KernelPCIABPTrace::readLogsCompletion(v10, (uint64_t)a1, a3, a2);
        }
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_1A60C7750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t KernelPCITrace::setProperty_sync(uint64_t a1, NSObject **a2, char *a3, char *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"setProperty_sync";
    _os_log_debug_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEBUG, "#D %s", (uint8_t *)&buf, 0xCu);
  }
  if (prop::ipc::set(a3, a4))
  {
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&buf, "Enabled");
    if (a3[23] >= 0) {
      uint64_t v9 = a3;
    }
    else {
      uint64_t v9 = *(const char **)a3;
    }
    if (strcasecmp(v9, (const char *)&buf))
    {
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&buf, "History");
      if (strcasecmp(v9, (const char *)&buf))
      {
        *((unsigned char *)&buf.__r_.__value_.__s + 23) = 11;
        strcpy((char *)&buf, "BufferCount");
        if (strcasecmp(v9, (const char *)&buf))
        {
          uint64_t v10 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            if (a4[23] >= 0) {
              std::string::size_type v22 = (std::string::size_type)a4;
            }
            else {
              std::string::size_type v22 = *(void *)a4;
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v22;
            _os_log_error_impl(&dword_1A609F000, v10, OS_LOG_TYPE_ERROR, "Unrecognized Set property request. Key=%s, Value=%s", (uint8_t *)&buf, 0x16u);
          }
          return 1;
        }
        memset(&v25, 0, sizeof(v25));
        char v27 = 3;
        LOWORD(__p[0]) = *(_WORD *)"IPC";
        WORD1(__p[0]) = str_42[2];
        memset(&buf, 0, sizeof(buf));
        BOOL v16 = defaults::get((char *)__p, a3, &buf);
        if (v16)
        {
          prop::file::get<std::string>((const void **)__p, (uint64_t)a3, (uint64_t)&buf, &v28);
          std::string v25 = v28;
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(buf.__r_.__value_.__l.__data_);
          if ((v27 & 0x80000000) == 0)
          {
LABEL_33:
            if (v16) {
              goto LABEL_34;
            }
            goto LABEL_63;
          }
        }
        else if ((v27 & 0x80000000) == 0)
        {
          goto LABEL_33;
        }
        operator delete(__p[0]);
        if (v16)
        {
LABEL_34:
          uint64_t v11 = util::convert<unsigned int>(&v25, (_DWORD *)(a1 + 160), 0);
          if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return v11;
          }
LABEL_64:
          operator delete(v25.__r_.__value_.__l.__data_);
          return v11;
        }
LABEL_63:
        uint64_t v11 = 0;
        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return v11;
        }
        goto LABEL_64;
      }
      int v23 = -1431655766;
      memset(&v25, 0, sizeof(v25));
      char v27 = 3;
      LOWORD(__p[0]) = *(_WORD *)"IPC";
      WORD1(__p[0]) = str_42[2];
      memset(&buf, 0, sizeof(buf));
      BOOL v15 = defaults::get((char *)__p, a3, &buf);
      if (v15)
      {
        prop::file::get<std::string>((const void **)__p, (uint64_t)a3, (uint64_t)&buf, &v28);
        std::string v25 = v28;
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(buf.__r_.__value_.__l.__data_);
        if ((v27 & 0x80000000) == 0)
        {
LABEL_26:
          if (v15) {
            goto LABEL_27;
          }
          goto LABEL_48;
        }
      }
      else if ((v27 & 0x80000000) == 0)
      {
        goto LABEL_26;
      }
      operator delete(__p[0]);
      if (v15)
      {
LABEL_27:
        uint64_t v11 = util::convert<int>(&v25, &v23, 0);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_49;
        }
        goto LABEL_50;
      }
LABEL_48:
      uint64_t v11 = 0;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
LABEL_49:
      }
        operator delete(v25.__r_.__value_.__l.__data_);
LABEL_50:
      if (v11)
      {
        int v18 = v23;
        if (*(_DWORD *)(a1 + 152) != v23)
        {
          *(_DWORD *)(a1 + 152) = v23;
          uint64_t v19 = *(CircularFileLogWriter **)(a1 + 232);
          if (v19) {
            CircularFileLogWriter::setCapacity(v19, (uint64_t)v18 << 20);
          }
        }
      }
      return v11;
    }
    LOBYTE(v23) = -86;
    memset(&v25, 0, sizeof(v25));
    char v27 = 3;
    LOWORD(__p[0]) = *(_WORD *)"IPC";
    WORD1(__p[0]) = str_42[2];
    memset(&buf, 0, sizeof(buf));
    BOOL v14 = defaults::get((char *)__p, a3, &buf);
    if (v14)
    {
      prop::file::get<std::string>((const void **)__p, (uint64_t)a3, (uint64_t)&buf, &v28);
      std::string v25 = v28;
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_19:
        if (v14) {
          goto LABEL_20;
        }
        goto LABEL_38;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(__p[0]);
    if (v14)
    {
LABEL_20:
      uint64_t v11 = util::convert<BOOL>(&v25, (BOOL *)&v23, 0);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_39;
      }
      goto LABEL_40;
    }
LABEL_38:
    uint64_t v11 = 0;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
LABEL_39:
    }
      operator delete(v25.__r_.__value_.__l.__data_);
LABEL_40:
    if (v11 && v23 != *(unsigned __int8 *)(a1 + 156))
    {
      *(unsigned char *)(a1 + 156) = v23;
      size_t v17 = *a2;
      uint64_t v24 = v17;
      if (v17)
      {
        dispatch_retain(v17);
        dispatch_group_enter(v17);
      }
      KernelPCITrace::updateTraceState_sync(a1, &v24);
      if (v17)
      {
        dispatch_group_leave(v17);
        dispatch_release(v17);
      }
    }
    return v11;
  }
  std::string::size_type v12 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    if (a3[23] >= 0) {
      std::string::size_type v20 = (std::string::size_type)a3;
    }
    else {
      std::string::size_type v20 = *(void *)a3;
    }
    if (a4[23] >= 0) {
      std::string::size_type v21 = (std::string::size_type)a4;
    }
    else {
      std::string::size_type v21 = *(void *)a4;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v20;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v21;
    _os_log_error_impl(&dword_1A609F000, v12, OS_LOG_TYPE_ERROR, "Set property to file failed; key=%s value=%s",
      (uint8_t *)&buf,
      0x16u);
  }
  return 0;
}

void sub_1A60C7CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t KernelPCITrace::getProperty_sync(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = "getProperty_sync";
    _os_log_debug_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEBUG, "#D %s", (uint8_t *)__p, 0xCu);
  }
  HIBYTE(v15) = 5;
  LODWORD(__p[0]) = *(_DWORD *)"State";
  WORD2(__p[0]) = str_23_0[4];
  if (a2[23] >= 0) {
    BOOL v7 = a2;
  }
  else {
    BOOL v7 = *(const char **)a2;
  }
  if (!strcasecmp(v7, (const char *)__p))
  {
    char v13 = 0;
    LOBYTE(v12) = 0;
    KernelPCITrace::dumpState_sync(a1, (uint64_t)&v12, 0, 10, __p);
    if (__p != (void **)a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        if (v15 >= 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        if (v15 >= 0) {
          size_t v10 = HIBYTE(v15);
        }
        else {
          size_t v10 = (size_t)__p[1];
        }
        std::string::__assign_no_alias<false>((void **)a3, v9, v10);
      }
      else if (v15 < 0)
      {
        std::string::__assign_no_alias<true>((void *)a3, __p[0], (size_t)__p[1]);
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(void *)(a3 + 16) = v15;
      }
    }
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p[0]);
      if ((v13 & 0x80000000) == 0) {
        return 1;
      }
    }
    else if ((v13 & 0x80000000) == 0)
    {
      return 1;
    }
    operator delete(v12);
    return 1;
  }
  HIBYTE(v15) = 3;
  LOWORD(__p[0]) = *(_WORD *)"IPC";
  WORD1(__p[0]) = str_42[2];
  BOOL v8 = prop::get_from_file((char *)__p, a2, a3);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  return v8;
}

void sub_1A60C7F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t KernelPCITrace::dumpState_sync@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, unsigned char *a5@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_2, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_2))
  {
    std::string::basic_string[abi:ne180100]<0>(&qword_1EB5EE848, "\n----- KernelPCI Trace Dump State -----\n");
    __cxa_atexit(MEMORY[0x1E4FBA210], &qword_1EB5EE848, &dword_1A609F000);
    __cxa_guard_release(&_MergedGlobals_2);
  }
  unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v45[7] = v10;
  v45[8] = v10;
  v45[5] = v10;
  v45[6] = v10;
  v45[3] = v10;
  v45[4] = v10;
  v45[1] = v10;
  v45[2] = v10;
  v45[0] = v10;
  long long v43 = v10;
  long long v44 = v10;
  long long v41 = v10;
  *(_OWORD *)int v42 = v10;
  long long v39 = v10;
  long long v40 = v10;
  long long v38 = v10;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v38);
  if (a3)
  {
    if (byte_1EB5EE85F >= 0) {
      uint64_t v11 = &qword_1EB5EE848;
    }
    else {
      uint64_t v11 = (uint64_t *)qword_1EB5EE848;
    }
    if (byte_1EB5EE85F >= 0) {
      uint64_t v12 = byte_1EB5EE85F;
    }
    else {
      uint64_t v12 = unk_1EB5EE850;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)v11, v12);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Enabled: ", 9);
  char v13 = (void *)std::ostream::operator<<();
  LOBYTE(__p[0]) = a4;
  BOOL v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)__p, 1);
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"History: ", 9);
  KernelPCITrace::historyAsString(a1, (char *)__p);
  if ((v37 & 0x80u) == 0) {
    uint64_t v16 = __p;
  }
  else {
    uint64_t v16 = (void **)__p[0];
  }
  if ((v37 & 0x80u) == 0) {
    uint64_t v17 = v37;
  }
  else {
    uint64_t v17 = (uint64_t)__p[1];
  }
  int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
  char v47 = a4;
  uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v47, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Buffer size: ", 13);
  std::string::size_type v20 = (void *)std::ostream::operator<<();
  std::string::size_type v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" bytes", 6);
  char v47 = a4;
  std::string::size_type v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)&v47, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Buffer count: ", 14);
  std::ostream::operator<<();
  if ((char)v37 < 0)
  {
    operator delete(__p[0]);
    int v23 = *(char *)(a2 + 23);
    if ((v23 & 0x80000000) == 0)
    {
LABEL_18:
      if (!(_BYTE)v23) {
        goto LABEL_29;
      }
      goto LABEL_22;
    }
  }
  else
  {
    int v23 = *(char *)(a2 + 23);
    if ((v23 & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  if (!*(void *)(a2 + 8)) {
    goto LABEL_29;
  }
LABEL_22:
  LOBYTE(__p[0]) = a4;
  uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)__p, 1);
  std::string v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Reason: ", 8);
  int v26 = *(char *)(a2 + 23);
  if (v26 >= 0) {
    uint64_t v27 = a2;
  }
  else {
    uint64_t v27 = *(void *)a2;
  }
  if (v26 >= 0) {
    uint64_t v28 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v28 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
LABEL_29:
  if (a3) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"\n--------------------------------------\n", 40);
  }
  if ((BYTE8(v44) & 0x10) != 0)
  {
    uint64_t v30 = v44;
    if ((unint64_t)v44 < *((void *)&v41 + 1))
    {
      *(void *)&long long v44 = *((void *)&v41 + 1);
      uint64_t v30 = *((void *)&v41 + 1);
    }
    long long v31 = (const void *)v41;
    size_t v29 = v30 - v41;
    if ((unint64_t)(v30 - v41) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_48;
    }
  }
  else
  {
    if ((BYTE8(v44) & 8) == 0)
    {
      size_t v29 = 0;
      a5[23] = 0;
      goto LABEL_44;
    }
    long long v31 = (const void *)*((void *)&v39 + 1);
    size_t v29 = *((void *)&v40 + 1) - *((void *)&v39 + 1);
    if (*((void *)&v40 + 1) - *((void *)&v39 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_48:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v29 >= 0x17)
  {
    uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17) {
      uint64_t v32 = v29 | 7;
    }
    uint64_t v33 = v32 + 1;
    char v34 = operator new(v32 + 1);
    *((void *)a5 + 1) = v29;
    *((void *)a5 + 2) = v33 | 0x8000000000000000;
    *(void *)a5 = v34;
    a5 = v34;
    goto LABEL_43;
  }
  a5[23] = v29;
  if (v29) {
LABEL_43:
  }
    memmove(a5, v31, v29);
LABEL_44:
  a5[v29] = 0;
  *(void *)&long long v38 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v38 + *(void *)(v38 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v38 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v43) < 0) {
    operator delete(v42[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62751A0](v45);
}

void sub_1A60C83DC(_Unwind_Exception *a1)
{
}

void sub_1A60C83F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t KernelPCITrace::historyAsString@<X0>(uint64_t this@<X0>, char *a2@<X8>)
{
  uint64_t v2 = a2;
  if (!*(_DWORD *)(this + 152))
  {
    a2[23] = 8;
    strcpy(a2, "Infinite");
    return this;
  }
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[7] = v3;
  v18[8] = v3;
  v18[5] = v3;
  v18[6] = v3;
  v18[3] = v3;
  v18[4] = v3;
  v18[1] = v3;
  v18[2] = v3;
  long long v17 = v3;
  v18[0] = v3;
  *(_OWORD *)std::string __p = v3;
  long long v16 = v3;
  long long v13 = v3;
  *(_OWORD *)__int16 __src = v3;
  long long v11 = v3;
  long long v12 = v3;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v11);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" MB", 3);
  if ((BYTE8(v17) & 0x10) != 0)
  {
    long long v6 = (unsigned char *)v17;
    if ((void *)v17 < __src[1])
    {
      *(void **)&long long v17 = __src[1];
      long long v6 = __src[1];
    }
    BOOL v7 = __src[0];
    size_t v5 = v6 - (char *)__src[0];
    if ((unint64_t)(v6 - (char *)__src[0]) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_20;
    }
  }
  else
  {
    if ((BYTE8(v17) & 8) == 0)
    {
      size_t v5 = 0;
      v2[23] = 0;
      goto LABEL_16;
    }
    BOOL v7 = (const void *)*((void *)&v12 + 1);
    size_t v5 = *((void *)&v13 + 1) - *((void *)&v12 + 1);
    if (*((void *)&v13 + 1) - *((void *)&v12 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_20:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    long long v10 = (char *)operator new(v8 + 1);
    *((void *)v2 + 1) = v5;
    *((void *)v2 + 2) = v9 | 0x8000000000000000;
    *(void *)uint64_t v2 = v10;
    uint64_t v2 = v10;
  }
  else
  {
    v2[23] = v5;
    if (!v5) {
      goto LABEL_16;
    }
  }
  memmove(v2, v7, v5);
LABEL_16:
  v2[v5] = 0;
  *(void *)&long long v11 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v11 + *(void *)(v11 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v11 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62751A0](v18);
}

void sub_1A60C86A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void KernelPCITrace::start(void *a1, dispatch_object_t *a2)
{
  long long v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (uint64_t v5 = a1[9], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  BOOL v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *uint64_t v8 = a1;
  v8[1] = v3;
  uint64_t v9 = a1[11];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = operator new(0x18uLL);
  *long long v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::start(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>(KernelPCITrace::start(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::start(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,dispatch_queue_s *::default_delete<KernelPCITrace::start(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void KernelPCITrace::shutdown(void *a1, dispatch_object_t *a2)
{
  long long v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (uint64_t v5 = a1[9], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  BOOL v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *uint64_t v8 = a1;
  v8[1] = v3;
  uint64_t v9 = a1[11];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = operator new(0x18uLL);
  *long long v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::shutdown(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>(KernelPCITrace::shutdown(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::shutdown(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,dispatch_queue_s *::default_delete<KernelPCITrace::shutdown(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void KernelPCITrace::snapshot(void *a1, dispatch_object_t *a2, const void **a3)
{
  uint64_t v5 = *a2;
  if (!*a2)
  {
    BOOL v7 = 0;
    uint64_t v8 = *a3;
    if (!*a3) {
      goto LABEL_8;
    }
LABEL_7:
    CFRetain(v8);
    goto LABEL_8;
  }
  dispatch_retain(*a2);
  dispatch_group_enter(v5);
  BOOL v7 = *a2;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = *a3;
  if (*a3) {
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v9 = (std::__shared_weak_count *)a1[10];
  if (!v9 || (uint64_t v10 = a1[9], (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v12 = v11;
  long long v13 = operator new(0x20uLL);
  *long long v13 = a1;
  v13[1] = v5;
  void v13[2] = v7;
  v13[3] = v8;
  BOOL v14 = a1[11];
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v15 = operator new(0x18uLL);
  *uint64_t v15 = v13;
  v15[1] = v10;
  v15[2] = v12;
  dispatch_async_f(v14, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>(KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,dispatch_queue_s *::default_delete<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void KernelPCITrace::dumpState(NSObject *a1, NSObject **a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  group[0] = a1;
  group[1] = *a2;
  if (*a2)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  isa = (std::__shared_weak_count *)a1[10].isa;
  if (!isa || (Class v7 = a1[9].isa, (v8 = std::__shared_weak_count::lock(isa)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  uint64_t v10 = (char *)operator new(0x28uLL);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)group;
  long long v11 = (std::string *)(v10 + 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v10 + 4) = *((void *)&__p.__r_.__value_.__l + 2);
  }
  long long v12 = a1[11].isa;
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v13 = operator new(0x18uLL);
  *long long v13 = v10;
  v13[1] = v7;
  void v13[2] = v9;
  dispatch_async_f(v12, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::dumpState(dispatch::group,std::string)::$_0>(KernelPCITrace::dumpState(dispatch::group,std::string)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::dumpState(dispatch::group,std::string)::$_0,std::default_delete<KernelPCITrace::dumpState(dispatch::group,std::string)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_15;
  }
}

void sub_1A60C8C10(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  long long v12 = *(NSObject **)(v10 + 8);
  if (v12)
  {
    dispatch_group_leave(v12);
    long long v13 = *(NSObject **)(v10 + 8);
    if (v13)
    {
      dispatch_release(v13);
      __clang_call_terminate(a1);
    }
  }
  __clang_call_terminate(a1);
}

BOOL KernelPCITrace::setProperty(uint64_t a1, NSObject **a2, uint64_t a3, uint64_t a4)
{
  char v21 = 0;
  char v20 = 3;
  LOWORD(__p) = *(_WORD *)"IPC";
  WORD1(__p) = str_42[2];
  char isSupported = abm::trace::isSupported((uint64_t)&__p);
  char v9 = isSupported;
  if ((v20 & 0x80000000) == 0)
  {
    if (isSupported) {
      goto LABEL_3;
    }
    return 0;
  }
  operator delete(__p);
  if ((v9 & 1) == 0) {
    return 0;
  }
LABEL_3:
  uint64_t v10 = *a2;
  uint64_t v14 = a1;
  dispatch_group_t group = v10;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(v10);
  }
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  int v18 = &v21;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIZN14KernelPCITrace11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESF_E3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSH__block_invoke;
  uint64_t block[3] = &__block_descriptor_tmp_60;
  void block[4] = a1 + 72;
  void block[5] = &v14;
  long long v11 = *(NSObject **)(a1 + 88);
  if (*(void *)(a1 + 96))
  {
    dispatch_async_and_wait(v11, block);
    long long v12 = group;
    if (!group) {
      return v21 != 0;
    }
LABEL_11:
    dispatch_group_leave(v12);
    if (group) {
      dispatch_release(group);
    }
    return v21 != 0;
  }
  dispatch_sync(v11, block);
  long long v12 = group;
  if (group) {
    goto LABEL_11;
  }
  return v21 != 0;
}

void sub_1A60C8DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t KernelPCITrace::getProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v7 = 0;
  v6[0] = a1;
  v6[1] = a2;
  v6[2] = a3;
  v6[3] = &v7;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIZN14KernelPCITrace11getPropertyERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERSB_E3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSG__block_invoke;
  uint64_t block[3] = &__block_descriptor_tmp_63;
  void block[4] = a1 + 72;
  void block[5] = v6;
  uint64_t v4 = a1 + 88;
  long long v3 = *(NSObject **)(a1 + 88);
  if (*(void *)(v4 + 8)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
  return v7;
}

uint64_t ctu::Loggable<Trace,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<Trace,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 104), *(void *)(a1 + 112));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 104);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 120);
  }
}

uint64_t ctu::Loggable<Trace,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void KernelPCITrace::getSettingPrefix(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a1 + 16) = 0xAAAAAAAAAAAAAAAALL;
  *(unsigned char *)(a1 + 23) = 11;
  strcpy((char *)a1, "KernelPCI::");
}

void *ctu::Loggable<Trace,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1EFB09728;
  MEMORY[0x1A6274710](a1 + 1);
  return a1;
}

void ctu::Loggable<Trace,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1EFB09728;
  MEMORY[0x1A6274710](a1 + 1);

  operator delete(a1);
}

void std::__tree<KernelPCITrace::BuffContext *>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<KernelPCITrace::BuffContext *>::destroy(*a1);
    std::__tree<KernelPCITrace::BuffContext *>::destroy(a1[1]);
    operator delete(a1);
  }
}

void ctu::Loggable<Trace,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    long long v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1A60C9118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1A60C9134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<KernelPCITrace>::shared_ptr[abi:ne180100]<KernelPCITrace,std::shared_ptr<KernelPCITrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<KernelPCITrace>(KernelPCITrace*)::{lambda(KernelPCITrace*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB09548;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  long long v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1A60C9260(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<KernelPCITrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<KernelPCITrace>(KernelPCITrace*)::{lambda(KernelPCITrace*)#1}::operator() const(KernelPCITrace*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1A60C9288(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<KernelPCITrace *,std::shared_ptr<KernelPCITrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<KernelPCITrace>(KernelPCITrace*)::{lambda(KernelPCITrace *)#1},std::allocator<KernelPCITrace>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<KernelPCITrace *,std::shared_ptr<KernelPCITrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<KernelPCITrace>(KernelPCITrace*)::{lambda(KernelPCITrace *)#1},std::allocator<KernelPCITrace>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<KernelPCITrace *,std::shared_ptr<KernelPCITrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<KernelPCITrace>(KernelPCITrace*)::{lambda(KernelPCITrace *)#1},std::allocator<KernelPCITrace>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI14KernelPCITraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI14KernelPCITraceEENSt3__110shared_"
                                "ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI14KernelPCITraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI14KernelPCITraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<KernelPCITrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<KernelPCITrace>(KernelPCITrace*)::{lambda(KernelPCITrace*)#1}::operator() const(KernelPCITrace*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIZN14KernelPCITrace4initENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_8weak_ptrIN3abm19BasebandTracingTaskEEEN8dispatch5groupEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSJ__block_invoke(uint64_t a1)
{
  uint64_t v1 = **(KernelPCITrace ***)(a1 + 40);
  KernelPCITrace::initProperty_sync(v1);
  uint64_t v2 = 0;
  KernelPCITrace::updateTraceState_sync((uint64_t)v1, &v2);
}

uint64_t util::convert<int>(const std::string *a1, _DWORD *a2, int a3)
{
  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    LODWORD(v6) = strcasecmp((const char *)a1, "false");
    if (!v6) {
      goto LABEL_29;
    }
    LODWORD(v6) = strcasecmp((const char *)a1, "off");
    if (!v6) {
      goto LABEL_29;
    }
    LODWORD(v6) = strcasecmp((const char *)a1, "no");
    if (!v6) {
      goto LABEL_29;
    }
    if (strcasecmp((const char *)a1, "true")
      && strcasecmp((const char *)a1, "on")
      && strcasecmp((const char *)a1, "yes")
      && strcasecmp((const char *)a1, "full")
      && strcasecmp((const char *)a1, "streaming"))
    {
      unsigned __int8 v7 = (const char *)a1;
      if (!strcasecmp((const char *)a1, "lite")) {
        goto LABEL_30;
      }
      goto LABEL_21;
    }
LABEL_28:
    LODWORD(v6) = 1;
    goto LABEL_29;
  }
  unsigned __int8 v7 = (const char *)a1->__r_.__value_.__r.__words[0];
  LODWORD(v6) = strcasecmp(a1->__r_.__value_.__l.__data_, "false");
  if (!v6) {
    goto LABEL_29;
  }
  LODWORD(v6) = strcasecmp(v7, "off");
  if (!v6) {
    goto LABEL_29;
  }
  LODWORD(v6) = strcasecmp(v7, "no");
  if (!v6) {
    goto LABEL_29;
  }
  if (!strcasecmp(v7, "true")
    || !strcasecmp(v7, "on")
    || !strcasecmp(v7, "yes")
    || !strcasecmp(v7, "full")
    || !strcasecmp(v7, "streaming"))
  {
    goto LABEL_28;
  }
  if (!strcasecmp(v7, "lite"))
  {
LABEL_30:
    LODWORD(v6) = 2;
    goto LABEL_29;
  }
LABEL_21:
  if (!strcasecmp(v7, "background")) {
    goto LABEL_30;
  }
  size_t __idx = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = std::stol(a1, &__idx, a3);
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (__idx != size || v6 < (uint64_t)0xFFFFFFFF80000000 || v6 > 0x7FFFFFFF) {
    return 0;
  }
LABEL_29:
  *a2 = v6;
  return 1;
}

uint64_t sub_1A60C960C(void *a1)
{
  return 0;
}

uint64_t util::convert<unsigned int>(const std::string *a1, _DWORD *a2, int a3)
{
  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    LODWORD(v6) = strcasecmp((const char *)a1, "false");
    if (!v6) {
      goto LABEL_29;
    }
    LODWORD(v6) = strcasecmp((const char *)a1, "off");
    if (!v6) {
      goto LABEL_29;
    }
    LODWORD(v6) = strcasecmp((const char *)a1, "no");
    if (!v6) {
      goto LABEL_29;
    }
    if (strcasecmp((const char *)a1, "true")
      && strcasecmp((const char *)a1, "on")
      && strcasecmp((const char *)a1, "yes")
      && strcasecmp((const char *)a1, "full")
      && strcasecmp((const char *)a1, "streaming"))
    {
      unsigned __int8 v7 = (const char *)a1;
      if (!strcasecmp((const char *)a1, "lite")) {
        goto LABEL_30;
      }
      goto LABEL_21;
    }
LABEL_28:
    LODWORD(v6) = 1;
    goto LABEL_29;
  }
  unsigned __int8 v7 = (const char *)a1->__r_.__value_.__r.__words[0];
  LODWORD(v6) = strcasecmp(a1->__r_.__value_.__l.__data_, "false");
  if (!v6) {
    goto LABEL_29;
  }
  LODWORD(v6) = strcasecmp(v7, "off");
  if (!v6) {
    goto LABEL_29;
  }
  LODWORD(v6) = strcasecmp(v7, "no");
  if (!v6) {
    goto LABEL_29;
  }
  if (!strcasecmp(v7, "true")
    || !strcasecmp(v7, "on")
    || !strcasecmp(v7, "yes")
    || !strcasecmp(v7, "full")
    || !strcasecmp(v7, "streaming"))
  {
    goto LABEL_28;
  }
  if (!strcasecmp(v7, "lite"))
  {
LABEL_30:
    LODWORD(v6) = 2;
    goto LABEL_29;
  }
LABEL_21:
  if (!strcasecmp(v7, "background")) {
    goto LABEL_30;
  }
  size_t __idx = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v6 = std::stol(a1, &__idx, a3);
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (__idx != size || (v6 & 0x8000000000000000) != 0 || HIDWORD(v6)) {
    return 0;
  }
LABEL_29:
  *a2 = v6;
  return 1;
}

uint64_t sub_1A60C9864(void *a1)
{
  return 0;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 == result) {
    return result;
  }
  while (1)
  {
    uint64_t v2 = a2[2];
    if (*(unsigned char *)(v2 + 24)) {
      return result;
    }
    unint64_t v3 = *(uint64_t **)(v2 + 16);
    uint64_t v4 = *v3;
    if (*v3 != v2) {
      break;
    }
    uint64_t v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(unsigned char *)(v2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        *unint64_t v3 = v11;
        if (v11) {
          goto LABEL_15;
        }
      }
      else
      {
        char v9 = *(uint64_t **)(v2 + 8);
        uint64_t v10 = *v9;
        *(void *)(v2 + 8) = *v9;
        if (v10)
        {
          *(void *)(v10 + 16) = v2;
          unint64_t v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
        *char v9 = v2;
        *(void *)(v2 + 16) = v9;
        unint64_t v3 = (uint64_t *)v9[2];
        uint64_t v2 = *v3;
        *((unsigned char *)v9 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        *unint64_t v3 = v11;
        if (v11) {
LABEL_15:
        }
          *(void *)(v11 + 16) = v3;
      }
      *(void *)(v2 + 16) = v3[2];
      *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
      *(void *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(unsigned char *)(v2 + 24) = 1;
    a2 = v3;
    *((unsigned char *)v3 + 24) = v3 == result;
    *uint64_t v5 = 1;
    if (v3 == result) {
      return result;
    }
  }
  if (v4)
  {
    int v6 = *(unsigned __int8 *)(v4 + 24);
    uint64_t v5 = (unsigned char *)(v4 + 24);
    if (!v6) {
      goto LABEL_3;
    }
  }
  if (*(uint64_t **)v2 == a2)
  {
    uint64_t v12 = a2[1];
    *(void *)uint64_t v2 = v12;
    if (v12)
    {
      *(void *)(v12 + 16) = v2;
      unint64_t v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(void *)(v2 + 16) = a2;
    unint64_t v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((unsigned char *)a2 + 24) = 1;
  *((unsigned char *)v3 + 24) = 0;
  long long v13 = (uint64_t *)v3[1];
  uint64_t v14 = *v13;
  v3[1] = *v13;
  if (v14) {
    *(void *)(v14 + 16) = v3;
  }
  void v13[2] = v3[2];
  *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v13;
  *long long v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unint64_t v3 = a2;
      goto LABEL_10;
    }
    do
    {
      unint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (!v2)
  {
    int v5 = 1;
    int v6 = (uint64_t **)v3[2];
    uint64_t v7 = *v6;
    if (*v6 == v3) {
      goto LABEL_6;
    }
LABEL_11:
    v6[1] = (uint64_t *)v2;
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
LABEL_10:
  int v5 = 0;
  *(void *)(v2 + 16) = v3[2];
  int v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 != v3) {
    goto LABEL_11;
  }
LABEL_6:
  *int v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    uint64_t v7 = v6[1];
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
LABEL_12:
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *unint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      double result = v3;
    }
    goto LABEL_16;
  }
  uint64_t v7 = 0;
  double result = (uint64_t *)v2;
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2) {
    goto LABEL_12;
  }
LABEL_16:
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v14 = (uint64_t **)v7[2];
    if (*v14 != v7) {
      break;
    }
    if (*((unsigned char *)v7 + 24))
    {
      uint64_t v16 = (void *)*v7;
      if (*v7) {
        goto LABEL_48;
      }
    }
    else
    {
      *((unsigned char *)v7 + 24) = 1;
      *((unsigned char *)v14 + 24) = 0;
      char v20 = (uint64_t *)v7[1];
      *uint64_t v14 = v20;
      if (v20) {
        v20[2] = (uint64_t)v14;
      }
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (void)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      void v14[2] = v7;
      if (result == (uint64_t *)v14) {
        double result = v7;
      }
      uint64_t v7 = *v14;
      uint64_t v16 = (void *)**v14;
      if (v16)
      {
LABEL_48:
        if (!*((unsigned char *)v16 + 24)) {
          goto LABEL_71;
        }
      }
    }
    char v21 = (uint64_t *)v7[1];
    if (v21 && !*((unsigned char *)v21 + 24))
    {
      if (v16 && !*((unsigned char *)v16 + 24))
      {
LABEL_71:
        char v21 = v7;
      }
      else
      {
        *((unsigned char *)v21 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = *v21;
        v7[1] = *v21;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v21[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v21;
        *char v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        uint64_t v16 = v7;
      }
      uint64_t v27 = (uint64_t *)v21[2];
      *((unsigned char *)v21 + 24) = *((unsigned char *)v27 + 24);
      *((unsigned char *)v27 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v28 = *v27;
      uint64_t v29 = *(void *)(*v27 + 8);
      uint64_t *v27 = v29;
      if (v29) {
        *(void *)(v29 + 16) = v27;
      }
      *(void *)(v28 + 16) = v27[2];
      *(void *)(v27[2] + 8 * (*(void *)v27[2] != (void)v27)) = v28;
      *(void *)(v28 + 8) = v27;
      v27[2] = v28;
      return result;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v12 = (uint64_t *)v7[2];
    if (*((unsigned char *)v12 + 24)) {
      BOOL v13 = v12 == result;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      goto LABEL_61;
    }
LABEL_24:
    uint64_t v7 = *(uint64_t **)(v12[2] + 8 * (*(void *)v12[2] == (void)v12));
  }
  if (*((unsigned char *)v7 + 24))
  {
    uint64_t v15 = (void *)*v7;
    if (!*v7)
    {
LABEL_38:
      unint64_t v19 = (uint64_t *)v7[1];
      if (v19 && !*((unsigned char *)v19 + 24)) {
        goto LABEL_67;
      }
      *((unsigned char *)v7 + 24) = 0;
      uint64_t v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        uint64_t v12 = result;
LABEL_61:
        *((unsigned char *)v12 + 24) = 1;
        return result;
      }
      if (!*((unsigned char *)v12 + 24)) {
        goto LABEL_61;
      }
      goto LABEL_24;
    }
  }
  else
  {
    *((unsigned char *)v7 + 24) = 1;
    *((unsigned char *)v14 + 24) = 0;
    uint64_t v17 = v14[1];
    int v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18) {
      v18[2] = (uint64_t)v14;
    }
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (void)v14] = (uint64_t)v17;
    *uint64_t v17 = (uint64_t)v14;
    void v14[2] = v17;
    if (result == (uint64_t *)*v7) {
      double result = v7;
    }
    uint64_t v7 = *(uint64_t **)(*v7 + 8);
    uint64_t v15 = (void *)*v7;
    if (!*v7) {
      goto LABEL_38;
    }
  }
  if (*((unsigned char *)v15 + 24)) {
    goto LABEL_38;
  }
  unint64_t v19 = (uint64_t *)v7[1];
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_67:
    uint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v23 = v15[1];
    *uint64_t v7 = v23;
    if (v23) {
      *(void *)(v23 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    unint64_t v19 = v7;
  }
  uint64_t v24 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v24 + 24);
  *(unsigned char *)(v24 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  std::string v25 = *(uint64_t **)(v24 + 8);
  uint64_t v26 = *v25;
  *(void *)(v24 + 8) = *v25;
  if (v26) {
    *(void *)(v26 + 16) = v24;
  }
  v25[2] = *(void *)(v24 + 16);
  *(void *)(*(void *)(v24 + 16) + 8 * (**(void **)(v24 + 16) != v24)) = v25;
  uint64_t *v25 = v24;
  *(void *)(v24 + 16) = v25;
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::flushLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0>(KernelPCITrace::flushLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::flushLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0,dispatch_queue_s *::default_delete<KernelPCITrace::flushLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(NSObject **)(v3 + 144);
  if (v4)
  {
    dispatch_retain(*(dispatch_object_t *)(v3 + 144));
    dispatch_group_enter(v4);
  }
  if (*(unsigned char *)(v3 + 156))
  {
    int v5 = (unint64_t *)(v2 + 1);
    if (*(void *)v2[1])
    {
      int v6 = *((_DWORD *)v2 + 4);
      uint64_t v7 = *(NSObject **)(v3 + 40);
      BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      if (v6)
      {
        if (v8)
        {
          buf.st_dev = 67109120;
          *(_DWORD *)&buf.st_mode = v6;
          _os_log_impl(&dword_1A609F000, v7, OS_LOG_TYPE_DEFAULT, "#E Flush logs completion returned error. Error [0x%x]", (uint8_t *)&buf, 8u);
        }
      }
      else
      {
        if (v8)
        {
          uint64_t v16 = v2[3];
          buf.st_dev = 134217984;
          *(void *)&buf.st_mode = v16;
          _os_log_impl(&dword_1A609F000, v7, OS_LOG_TYPE_DEFAULT, "#I Flush logs completion of size '%ld' bytes", (uint8_t *)&buf, 0xCu);
        }
        uint64_t v17 = *(void *)(v3 + 232);
        if (v17) {
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)v17 + 72))(v17, *(void *)v2[1], v2[3]);
        }
      }
      goto LABEL_62;
    }
    uint64_t v11 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.st_dev) = 0;
      _os_log_impl(&dword_1A609F000, v11, OS_LOG_TYPE_DEFAULT, "#I Snapshot received (flush completion with null-log)", (uint8_t *)&buf, 2u);
    }
    uint64_t v12 = *(void *)(v3 + 232);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    }
    if (!*(unsigned char *)(v3 + 216)) {
      goto LABEL_59;
    }
    BOOL v13 = (char *)operator new(0x40uLL);
    *(void *)long long v41 = v13;
    *(_OWORD *)&v41[8] = xmmword_1A61F71D0;
    strcpy(v13, "/var/wireless/Library/Logs/AppleBasebandManager/pci.scratch/");
    qmemcpy(v37, "ger/pci.scratch/BasebandManager/brary/Logs/Apple/var/wireless/Li", sizeof(v37));
    v14.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v14.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&buf.st_blkstd::string::size_type size = v14;
    *(timespec *)buf.st_qspare = v14;
    buf.st_birthtimespec = v14;
    *(timespec *)&buf.st_std::string::size_type size = v14;
    buf.st_mtimespec = v14;
    buf.st_ctimespec = v14;
    *(timespec *)&buf.st_uid = v14;
    buf.st_atimespec = v14;
    *(timespec *)&buf.st_dev = v14;
    if (stat(v13, &buf))
    {
      LODWORD(v15) = 0;
    }
    else
    {
      if (v41[23] >= 0) {
        int v18 = v41;
      }
      else {
        int v18 = *(const char **)v41;
      }
      unint64_t v19 = opendir(v18);
      uint64_t v15 = v19;
      if (v19)
      {
        char v20 = readdir(v19);
        closedir(v15);
        LODWORD(v15) = v20 != 0;
      }
    }
    if ((v41[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v41);
      if (v15)
      {
LABEL_31:
        support::fs::getBasePath((unsigned __int8 *)(v3 + 192), (uint64_t)&buf);
        support::fs::createDir((const char *)&buf, 0x1EDu, 1);
        if (SHIBYTE(buf.st_gid) < 0) {
          operator delete(*(void **)&buf.st_dev);
        }
        memset(&buf, 170, 24);
        if (*(char *)(v3 + 215) < 0) {
          std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(v3 + 192), *(void *)(v3 + 200));
        }
        else {
          std::string v38 = *(std::string *)(v3 + 192);
        }
        support::fs::createUniquePath((const char *)&v38, (std::string *)&buf);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v38.__r_.__value_.__l.__data_);
        }
        uint64_t v22 = (char *)operator new(0x40uLL);
        uint64_t v24 = v22;
        *(_OWORD *)uint64_t v22 = v37[3];
        *((_OWORD *)v22 + 1) = v37[2];
        *((_OWORD *)v22 + 2) = v37[1];
        *(_OWORD *)(v22 + 44) = v37[0];
        v22[60] = 0;
        if ((buf.st_gid & 0x80000000) == 0) {
          p_stat buf = (const std::__fs::filesystem::path *)&buf;
        }
        else {
          p_stat buf = *(const std::__fs::filesystem::path **)&buf.st_dev;
        }
        rename((const std::__fs::filesystem::path *)v22, p_buf, v23);
        int v27 = v26;
        operator delete(v24);
        uint64_t v28 = *(NSObject **)(v3 + 40);
        BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
        if (v27)
        {
          if (!v29) {
            goto LABEL_54;
          }
          uint64_t v30 = &buf;
          if ((buf.st_gid & 0x80000000) != 0) {
            uint64_t v30 = *(stat **)&buf.st_dev;
          }
          *(_DWORD *)long long v41 = 136315138;
          *(void *)&v41[4] = v30;
          long long v31 = "#E Failed to move scratch logs to snapshot path [%s]";
        }
        else
        {
          if (!v29) {
            goto LABEL_54;
          }
          uint64_t v32 = &buf;
          if ((buf.st_gid & 0x80000000) != 0) {
            uint64_t v32 = *(stat **)&buf.st_dev;
          }
          *(_DWORD *)long long v41 = 136315138;
          *(void *)&v41[4] = v32;
          long long v31 = "#I Snapshot files are in path [%s]";
        }
        _os_log_impl(&dword_1A609F000, v28, OS_LOG_TYPE_DEFAULT, v31, v41, 0xCu);
LABEL_54:
        if (SHIBYTE(buf.st_gid) < 0) {
          operator delete(*(void **)&buf.st_dev);
        }
        goto LABEL_56;
      }
    }
    else if (v15)
    {
      goto LABEL_31;
    }
    char v21 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      buf.st_dev = 136315138;
      *(void *)&buf.st_mode = "/var/wireless/Library/Logs/AppleBasebandManager/pci.scratch/";
      _os_log_impl(&dword_1A609F000, v21, OS_LOG_TYPE_DEFAULT, "#E Couldn't find scratch path [%s]", (uint8_t *)&buf, 0xCu);
    }
LABEL_56:
    uint64_t v33 = *(void *)(v3 + 232);
    if (v33)
    {
      *(void *)long long v41 = MEMORY[0x1E4F143A8];
      *(void *)&v41[8] = 0x40000000;
      *(void *)&v41[16] = ___ZN21CircularFileLogWriter4openEv_block_invoke;
      int v42 = &__block_descriptor_tmp;
      uint64_t v43 = v33;
      long long v39 = v41;
      *(void *)&buf.st_dev = MEMORY[0x1E4F143A8];
      buf.__darwin_ino64_t st_ino = 0x40000000;
      *(void *)&buf.st_uid = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
      *(void *)&buf.st_rdev = &__block_descriptor_tmp_21;
      buf.st_atimespec.tv_sec = v33 + 8;
      buf.st_atimespec.tv_nsec = (uint64_t)&v39;
      char v34 = *(NSObject **)(v33 + 24);
      if (!*(void *)(v33 + 32))
      {
        dispatch_sync(v34, &buf);
        if ((*(char *)(v3 + 215) & 0x80000000) == 0)
        {
LABEL_60:
          *(unsigned char *)(v3 + 192) = 0;
          *(unsigned char *)(v3 + 215) = 0;
          uint64_t v35 = *(NSObject **)(v3 + 224);
          *(void *)(v3 + 224) = 0;
          if (!v35) {
            goto LABEL_62;
          }
          goto LABEL_61;
        }
LABEL_69:
        **(unsigned char **)(v3 + 192) = 0;
        *(void *)(v3 + 200) = 0;
        uint64_t v35 = *(NSObject **)(v3 + 224);
        *(void *)(v3 + 224) = 0;
        if (!v35) {
          goto LABEL_62;
        }
LABEL_61:
        dispatch_group_leave(v35);
        dispatch_release(v35);
        goto LABEL_62;
      }
      dispatch_async_and_wait(v34, &buf);
    }
LABEL_59:
    if ((*(char *)(v3 + 215) & 0x80000000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_69;
  }
  uint64_t v9 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.st_dev) = 0;
    _os_log_impl(&dword_1A609F000, v9, OS_LOG_TYPE_DEFAULT, "#I Flush logs completion for Disabled case", (uint8_t *)&buf, 2u);
  }
  uint64_t v10 = *(NSObject **)(v3 + 224);
  *(void *)(v3 + 224) = 0;
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
  }
  int v5 = (unint64_t *)(v2 + 1);
LABEL_62:
  KernelPCITrace::deleteBuffContext_sync((void *)v3, *v5);
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
  operator delete(v2);
  uint64_t v36 = (std::__shared_weak_count *)a1[2];
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  operator delete(a1);
}

void sub_1A60CA44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (v31)
  {
    dispatch_group_leave(v31);
    dispatch_release(v31);
  }
  operator delete(v30);
  uint64_t v33 = (std::__shared_weak_count *)v29[2];
  if (v33)
  {
    if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  operator delete(v29);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::readLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0>(KernelPCITrace::readLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::readLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0,dispatch_queue_s *::default_delete<KernelPCITrace::readLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(NSObject **)(v3 + 144);
  if (v4)
  {
    dispatch_retain(*(dispatch_object_t *)(v3 + 144));
    dispatch_group_enter(v4);
  }
  if (!*(unsigned char *)(v3 + 156))
  {
    BOOL v13 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v19) = 0;
      _os_log_impl(&dword_1A609F000, v13, OS_LOG_TYPE_DEFAULT, "#I Read log completion for Disabled case", (uint8_t *)&v19, 2u);
    }
    unint64_t v12 = v2[1];
    uint64_t v11 = (void *)v3;
    goto LABEL_15;
  }
  int v5 = *((_DWORD *)v2 + 4);
  if (v5 || !*(void *)v2[1])
  {
    int v6 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v19 = 67109120;
      LODWORD(v20) = v5;
      _os_log_error_impl(&dword_1A609F000, v6, OS_LOG_TYPE_ERROR, "Read logs completion has some failure. Error [0x%x]", (uint8_t *)&v19, 8u);
    }
  }
  else
  {
    uint64_t v15 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = *(void *)(v3 + 232);
      if (!v16) {
        goto LABEL_7;
      }
      goto LABEL_25;
    }
    uint64_t v18 = v2[3];
    int v19 = 134217984;
    uint64_t v20 = v18;
    _os_log_debug_impl(&dword_1A609F000, v15, OS_LOG_TYPE_DEBUG, "#D Read logs completion of size '%ld' bytes", (uint8_t *)&v19, 0xCu);
    uint64_t v16 = *(void *)(v3 + 232);
    if (v16) {
LABEL_25:
    }
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v16 + 72))(v16, *(void *)v2[1], v2[3]);
  }
LABEL_7:
  unint64_t v7 = v2[1];
  if (!*(unsigned char *)(v3 + 216))
  {
LABEL_11:
    uint64_t v11 = (void *)v3;
    unint64_t v12 = v7;
LABEL_15:
    KernelPCITrace::deleteBuffContext_sync(v11, v12);
    goto LABEL_16;
  }
  int v8 = (*(uint64_t (**)(void, void, void, void, uint64_t (*)(void *, int, void *), uint64_t))(**(void **)(v3 + 248) + 64))(*(void *)(v3 + 248), *(void *)v7, *(unsigned int *)(v7 + 8), 0, readLogsCompletionCB, v2[1]);
  uint64_t v9 = *(NSObject **)(v3 + 40);
  if (v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(v7 + 8) >> 10;
      int v19 = 134218240;
      uint64_t v20 = v10;
      __int16 v21 = 1024;
      int v22 = v8;
      _os_log_impl(&dword_1A609F000, v9, OS_LOG_TYPE_DEFAULT, "#E Failed re-assigning new buffer of size '%ld KB' to fetch logs. Error [0x%x]", (uint8_t *)&v19, 0x12u);
    }
    goto LABEL_11;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v17 = *(void *)(v7 + 8) >> 10;
    int v19 = 134217984;
    uint64_t v20 = v17;
    _os_log_debug_impl(&dword_1A609F000, v9, OS_LOG_TYPE_DEBUG, "#D Assign new buffer of size '%ld KB' to fetch logs", (uint8_t *)&v19, 0xCu);
  }
LABEL_16:
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
  operator delete(v2);
  timespec v14 = (std::__shared_weak_count *)a1[2];
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  operator delete(a1);
}

void sub_1A60CA878(_Unwind_Exception *a1)
{
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<pci::transport::kernelControl  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<pci::transport::kernelControl  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<pci::transport::kernelControl  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001A61F737CLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001A61F737CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001A61F737CLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001A61F737CLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::start(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>(KernelPCITrace::start(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::start(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,dispatch_queue_s *::default_delete<KernelPCITrace::start(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v4 = **(void **)a1;
  uint64_t v3 = *(NSObject **)(*(void *)a1 + 8);
  int v8 = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  KernelPCITrace::updateTraceState_sync(v4, &v8);
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
  int v5 = v2[1];
  if (v5)
  {
    dispatch_group_leave(v5);
    int v6 = v2[1];
    if (v6) {
      dispatch_release(v6);
    }
  }
  operator delete(v2);
  unint64_t v7 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }

  operator delete(a1);
}

void sub_1A60CAAC0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  if (v4)
  {
    int v6 = v4;
    dispatch_group_leave(v4);
    dispatch_release(v6);
  }
  unint64_t v7 = v2[1];
  if (v7)
  {
    dispatch_group_leave(v7);
    int v8 = v2[1];
    if (v8) {
      dispatch_release(v8);
    }
  }
  operator delete(v2);
  uint64_t v9 = (std::__shared_weak_count *)v1[2];
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::shutdown(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>(KernelPCITrace::shutdown(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::shutdown(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,dispatch_queue_s *::default_delete<KernelPCITrace::shutdown(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(NSObject **)(v3 + 144);
  if (v4)
  {
    dispatch_retain(*(dispatch_object_t *)(v3 + 144));
    dispatch_group_enter(v4);
  }
  if (*(unsigned char *)(v3 + 156)) {
    KernelPCITrace::deregisterWithKernel_sync((KernelPCITrace *)v3);
  }
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
  int v5 = v2[1];
  if (v5)
  {
    dispatch_group_leave(v5);
    int v6 = v2[1];
    if (v6) {
      dispatch_release(v6);
    }
  }
  operator delete(v2);
  unint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    int v8 = a1;
  }
  else
  {
    int v8 = a1;
  }
  operator delete(v8);
}

void sub_1A60CAC64(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  if (v4)
  {
    int v6 = v4;
    dispatch_group_leave(v4);
    dispatch_release(v6);
  }
  unint64_t v7 = v2[1];
  if (v7)
  {
    dispatch_group_leave(v7);
    int v8 = v2[1];
    if (v8) {
      dispatch_release(v8);
    }
  }
  operator delete(v2);
  uint64_t v9 = (std::__shared_weak_count *)v1[2];
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>(KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,dispatch_queue_s *::default_delete<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  __p[3] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  int v26 = (void *)v2;
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = *(NSObject **)(*(void *)v2 + 144);
  if (v4)
  {
    dispatch_retain(*(dispatch_object_t *)(*(void *)v2 + 144));
    dispatch_group_enter(v4);
  }
  v32[0] = 0xAAAAAAAAAAAAAAAALL;
  v32[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v32, *(const __CFDictionary **)(v2 + 24));
  memset(v31, 170, sizeof(v31));
  strcpy((char *)__p, "kTraceFilterActionNone");
  HIBYTE(__p[2]) = 22;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v29, "kKeyTraceFilterAction");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A62748E0](&v29);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v5 = (void *)HIBYTE(v31[2]);
  int v6 = SHIBYTE(v31[2]);
  if (SHIBYTE(v31[2]) < 0) {
    int v5 = v31[1];
  }
  if (v5 != (void *)22) {
    goto LABEL_17;
  }
  unint64_t v7 = (void **)v31[0];
  if (SHIBYTE(v31[2]) >= 0) {
    unint64_t v7 = v31;
  }
  int v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = *(uint64_t *)((char *)v7 + 14);
  BOOL v11 = v8 == *(void **)"kTraceFilterActionNone" && v9 == *(void **)"lterActionNone";
  if (v11 && v10 == *(void *)"tionNone")
  {
    uint64_t v16 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = *(unsigned __int8 *)(v3 + 156);
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v17;
      _os_log_impl(&dword_1A609F000, v16, OS_LOG_TYPE_DEFAULT, "#I Snapshot requested. Enabled = %d", (uint8_t *)__p, 8u);
    }
    if (*(unsigned char *)(v3 + 156))
    {
      unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v18 = (ctu::XpcJetsamAssertion *)pthread_mutex_lock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
      if (!(void)xmmword_1EB5EE590)
      {
        ctu::XpcJetsamAssertion::create_default_global((uint64_t *)__p, v18);
        long long v19 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v20 = (std::__shared_weak_count *)*((void *)&xmmword_1EB5EE590 + 1);
        xmmword_1EB5EE590 = v19;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
        __int16 v21 = (std::__shared_weak_count *)__p[1];
        if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      int v22 = (std::__shared_weak_count *)*((void *)&xmmword_1EB5EE590 + 1);
      if (*((void *)&xmmword_1EB5EE590 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1EB5EE590 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
      __p[0] = operator new(0x20uLL);
      *(_OWORD *)&__p[1] = xmmword_1A61F71E0;
      strcpy((char *)__p[0], "Kernel PCI Trace Snapshot");
      ctu::XpcJetsamAssertion::createActivity();
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      uint64_t v23 = *(NSObject **)(v2 + 8);
      uint64_t v28 = v23;
      if (v23)
      {
        dispatch_retain(v23);
        dispatch_group_enter(v23);
      }
      CFDictionaryRef v24 = *(const __CFDictionary **)(v2 + 24);
      CFDictionaryRef v27 = v24;
      if (v24) {
        CFRetain(v24);
      }
      KernelPCITrace::snapshot_sync(v3, &v28, &v27);
      if (v24) {
        CFRelease(v24);
      }
      if (v23)
      {
        dispatch_group_leave(v23);
        dispatch_release(v23);
      }
      std::string v25 = (std::__shared_weak_count *)v30;
      if (v30 && !atomic_fetch_add((atomic_ullong *volatile)(v30 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  else
  {
LABEL_17:
    BOOL v13 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      timespec v14 = (void **)v31[0];
      if (v6 >= 0) {
        timespec v14 = v31;
      }
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v14;
      _os_log_impl(&dword_1A609F000, v13, OS_LOG_TYPE_DEFAULT, "#I Skipping snapshot as trace filter is '%s'", (uint8_t *)__p, 0xCu);
    }
  }
  if (SHIBYTE(v31[2]) < 0) {
    operator delete(v31[0]);
  }
  MEMORY[0x1A6274930](v32);
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
  std::unique_ptr<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,std::default_delete<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>::~unique_ptr[abi:ne180100](&v26);
  uint64_t v15 = (std::__shared_weak_count *)a1[2];
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  operator delete(a1);
}

void sub_1A60CB288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  if (a19 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1A6274930](&a20);
  if (v28)
  {
    dispatch_group_leave(v28);
    dispatch_release(v28);
  }
  std::unique_ptr<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,std::default_delete<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>::~unique_ptr[abi:ne180100]((void **)&a9);
  unint64_t v30 = (std::__shared_weak_count *)v27[2];
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  operator delete(v27);
  _Unwind_Resume(a1);
}

void sub_1A60CB404()
{
  if (!v0) {
    JUMPOUT(0x1A60CB3A4);
  }
  JUMPOUT(0x1A60CB394);
}

void **std::unique_ptr<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,std::default_delete<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (const void *)v2[3];
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = v2[2];
    if (v4) {
      dispatch_release(v4);
    }
    int v5 = v2[1];
    if (v5)
    {
      dispatch_group_leave(v5);
      int v6 = v2[1];
      if (v6) {
        dispatch_release(v6);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::dumpState(dispatch::group,std::string)::$_0>(KernelPCITrace::dumpState(dispatch::group,std::string)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::dumpState(dispatch::group,std::string)::$_0,std::default_delete<KernelPCITrace::dumpState(dispatch::group,std::string)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  uint64_t v4 = *(NSObject **)(v3 + 144);
  if (v4)
  {
    dispatch_retain(*(dispatch_object_t *)(v3 + 144));
    dispatch_group_enter(v4);
  }
  int v5 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_12;
  }
  if (*((char *)v2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v10, (const std::string::value_type *)v2[2], v2[3]);
  }
  else {
    std::string v10 = *(std::string *)(v2 + 2);
  }
  KernelPCITrace::dumpState_sync(v3, (uint64_t)&v10, 1, 10, __p);
  if (v12 >= 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  *(_DWORD *)stat buf = 136315138;
  timespec v14 = v6;
  _os_log_impl(&dword_1A609F000, v5, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_24;
    }
LABEL_12:
    if (!v4) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_12;
  }
LABEL_24:
  operator delete(v10.__r_.__value_.__l.__data_);
  if (v4)
  {
LABEL_13:
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
LABEL_14:
  if (*((char *)v2 + 39) < 0) {
    operator delete((void *)v2[2]);
  }
  unint64_t v7 = v2[1];
  if (v7)
  {
    dispatch_group_leave(v7);
    int v8 = v2[1];
    if (v8) {
      dispatch_release(v8);
    }
  }
  operator delete(v2);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(a1);
}

void sub_1A60CB66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v16)
  {
    dispatch_group_leave(v16);
    dispatch_release(v16);
    if ((*(char *)(v15 + 39) & 0x80000000) == 0)
    {
LABEL_3:
      long long v19 = *(NSObject **)(v15 + 8);
      if (!v19) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v15 + 39) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v17);
  long long v19 = *(NSObject **)(v15 + 8);
  if (!v19) {
    goto LABEL_9;
  }
LABEL_7:
  dispatch_group_leave(v19);
  uint64_t v20 = *(NSObject **)(v15 + 8);
  if (v20) {
    dispatch_release(v20);
  }
LABEL_9:
  operator delete((void *)v15);
  __int16 v21 = (std::__shared_weak_count *)v14[2];
  if (v21)
  {
    if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  operator delete(v14);
  _Unwind_Resume(a1);
}

void ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIZN14KernelPCITrace11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESF_E3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSH__block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(NSObject **)(v1 + 8);
  BOOL v13 = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  int v4 = KernelPCITrace::setProperty_sync(v2, &v13, *(char **)(v1 + 16), *(char **)(v1 + 24));
  **(unsigned char **)(v1 + 32) = v4;
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
    int v4 = **(unsigned __int8 **)(v1 + 32);
  }
  if (v4) {
    int v5 = "Success";
  }
  else {
    int v5 = "Failed";
  }
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  int64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  if (v4) {
    size_t v6 = 7;
  }
  else {
    size_t v6 = 6;
  }
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  HIBYTE(v12) = v6;
  memcpy(__p, v5, v6);
  *(unsigned char *)((unint64_t)__p | v6) = 0;
  unint64_t v7 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if ((SHIBYTE(v12) & 0x80000000) == 0) {
      return;
    }
LABEL_19:
    operator delete(__p[0]);
    return;
  }
  int v8 = (void **)__p[0];
  if (v12 >= 0) {
    int v8 = __p;
  }
  uint64_t v9 = *(uint64_t **)(v1 + 16);
  if (*((char *)v9 + 23) < 0)
  {
    uint64_t v9 = (uint64_t *)*v9;
    std::string v10 = *(uint64_t **)(v1 + 24);
    if ((*((char *)v10 + 23) & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  else
  {
    std::string v10 = *(uint64_t **)(v1 + 24);
    if ((*((char *)v10 + 23) & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  std::string v10 = (uint64_t *)*v10;
LABEL_18:
  *(_DWORD *)stat buf = 136315650;
  uint64_t v15 = v8;
  __int16 v16 = 2080;
  int v17 = v9;
  __int16 v18 = 2080;
  long long v19 = v10;
  _os_log_impl(&dword_1A609F000, v7, OS_LOG_TYPE_DEFAULT, "#I Set property [%s], Key=%s, Value=%s", buf, 0x20u);
  if (SHIBYTE(v12) < 0) {
    goto LABEL_19;
  }
}

void sub_1A60CB900(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIZN14KernelPCITrace11getPropertyERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERSB_E3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSG__block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int Property_sync = KernelPCITrace::getProperty_sync(*(void *)v1, *(char **)(v1 + 8), *(void *)(v1 + 16));
  **(unsigned char **)(v1 + 24) = Property_sync;
  if (Property_sync) {
    int v4 = "Success";
  }
  else {
    int v4 = "Failed";
  }
  __dst[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  int64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  if (Property_sync) {
    size_t v5 = 7;
  }
  else {
    size_t v5 = 6;
  }
  __dst[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  HIBYTE(v11) = v5;
  memcpy(__dst, v4, v5);
  *(unsigned char *)((unint64_t)__dst | v5) = 0;
  size_t v6 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if ((SHIBYTE(v11) & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(__dst[0]);
    return;
  }
  unint64_t v7 = (void **)__dst[0];
  if (v11 >= 0) {
    unint64_t v7 = __dst;
  }
  int v8 = *(uint64_t **)(v1 + 8);
  if (*((char *)v8 + 23) < 0)
  {
    int v8 = (uint64_t *)*v8;
    uint64_t v9 = *(uint64_t **)(v1 + 16);
    if ((*((char *)v9 + 23) & 0x80000000) == 0) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v1 + 16);
    if ((*((char *)v9 + 23) & 0x80000000) == 0) {
      goto LABEL_14;
    }
  }
  uint64_t v9 = (uint64_t *)*v9;
LABEL_14:
  *(_DWORD *)stat buf = 136315650;
  BOOL v13 = v7;
  __int16 v14 = 2080;
  uint64_t v15 = v8;
  __int16 v16 = 2080;
  int v17 = v9;
  _os_log_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEFAULT, "#I Get property [%s], Key=%s, Value=%s", buf, 0x20u);
  if (SHIBYTE(v11) < 0) {
    goto LABEL_15;
  }
}

uint64_t __cxx_global_var_init_18()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance, &dword_1A609F000);
  }
  return result;
}

void ResetReasonEncoder::Mapping::~Mapping(ResetReasonEncoder::Mapping *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 5);
    int v4 = (void *)*((void *)this + 4);
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 40;
      do
      {
        while (1)
        {
          if (*(unsigned char *)(v3 - 8))
          {
            uint64_t v6 = *(void *)(v3 - 16);
            if (v3 - 40 == v6)
            {
              (*(void (**)(uint64_t))(*(void *)(v3 - 40) + 32))(v3 - 40);
            }
            else if (v6)
            {
              (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
            }
          }
          if (*(char *)(v3 - 49) < 0) {
            break;
          }
          v3 -= 72;
          v5 -= 72;
          if (v3 == v2) {
            goto LABEL_12;
          }
        }
        operator delete(*(void **)(v3 - 72));
        v3 -= 72;
        v5 -= 72;
      }
      while (v3 != v2);
LABEL_12:
      int v4 = (void *)*((void *)this + 4);
    }
    *((void *)this + 5) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

BOOL ResetReasonEncoder::findMatchingMapping(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = qword_1EB5EE868;
  uint64_t v63 = qword_1EB5EE870;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    std::string v64 = *(std::string *)a1;
    if (qword_1EB5EE868 != qword_1EB5EE870) {
      goto LABEL_3;
    }
LABEL_42:
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_50;
    }
LABEL_43:
    uint64_t v18 = qword_1EB5EE870;
    if (v3 != a2 && qword_1EB5EE870 != v3) {
      goto LABEL_54;
    }
    return v18 != v3;
  }
  std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  if (v3 == v63) {
    goto LABEL_42;
  }
  do
  {
LABEL_3:
    if (*(char *)(v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)v3, *(void *)(v3 + 8));
    }
    else
    {
      long long v4 = *(_OWORD *)v3;
      v65.__r_.__value_.__r.__words[2] = *(void *)(v3 + 16);
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v4;
    }
    char v66 = *(unsigned char *)(v3 + 24);
    int v68 = 0;
    uint64_t v69 = 0;
    char v67 = 0;
    std::vector<ResetReasonEncoder::SubmatchInfo>::__init_with_size[abi:ne180100]<ResetReasonEncoder::SubmatchInfo*,ResetReasonEncoder::SubmatchInfo*>(&v67, *(void *)(v3 + 32), *(void *)(v3 + 40), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v3 + 40) - *(void *)(v3 + 32)) >> 3));
    *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v72 = v5;
    long long v73 = v5;
    *(_OWORD *)&v70[0].__locale_ = v5;
    long long v71 = v5;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v70, (uint64_t)&v65, 0);
    std::string::size_type size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v7 = (std::sub_match<const char *> *)&v64;
    }
    else {
      unint64_t v7 = (std::sub_match<const char *> *)v64.__r_.__value_.__r.__words[0];
    }
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v64.__r_.__value_.__l.__size_;
    }
    int v8 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v7 + size);
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v76 = v9;
    v75[6] = 0xAAAAAAAAAAAAAA00;
    v75[3] = 0xAAAAAAAAAAAAAAAALL;
    v75[4] = 0;
    v75[5] = 0;
    v75[7] = 0;
    v75[8] = 0;
    LOBYTE(v76) = 0;
    BYTE8(v76) = 0;
    uint64_t v77 = 0;
    *(_OWORD *)std::string __p = 0u;
    memset(v75, 0, 25);
    long long v84 = v9;
    unint64_t v81 = 0xAAAAAAAAAAAAAA00;
    v78[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    LOBYTE(v84) = 0;
    BYTE8(v84) = 0;
    uint64_t v85 = 0;
    memset(v78, 0, 41);
    char v10 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v70, v7, (std::sub_match<const char *> *)((char *)v7 + size), v78, 4160);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v7, v8, (uint64_t *)v78, 0);
    if (v78[0].__begin_)
    {
      v78[0].__end_ = v78[0].__begin_;
      operator delete(v78[0].__begin_);
    }
    int v11 = v76;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    int64_t v12 = (std::__shared_weak_count *)v73;
    if ((void)v73 && !atomic_fetch_add((atomic_ullong *volatile)(v73 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v11) {
        char v10 = 0;
      }
      std::locale::~locale(v70);
      BOOL v13 = (char *)v67;
      if (!v67) {
        goto LABEL_32;
      }
    }
    else
    {
      if (v11) {
        char v10 = 0;
      }
      std::locale::~locale(v70);
      BOOL v13 = (char *)v67;
      if (!v67) {
        goto LABEL_32;
      }
    }
    __int16 v14 = v68;
    uint64_t v15 = v13;
    if (v68 != v13)
    {
      __int16 v16 = v68 - 40;
      do
      {
        while (1)
        {
          if (*(v14 - 8))
          {
            int v17 = (char *)*((void *)v14 - 2);
            if (v14 - 40 == v17)
            {
              (*(void (**)(char *))(*((void *)v14 - 5) + 32))(v14 - 40);
            }
            else if (v17)
            {
              (*(void (**)(char *))(*(void *)v17 + 40))(v17);
            }
          }
          if (*(v14 - 49) < 0) {
            break;
          }
          v14 -= 72;
          v16 -= 72;
          if (v14 == v13) {
            goto LABEL_30;
          }
        }
        operator delete(*((void **)v14 - 9));
        v14 -= 72;
        v16 -= 72;
      }
      while (v14 != v13);
LABEL_30:
      uint64_t v15 = v67;
    }
    int v68 = v13;
    operator delete(v15);
LABEL_32:
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    if (v10) {
      goto LABEL_49;
    }
    v3 += 56;
  }
  while (v3 != v63);
  uint64_t v3 = v63;
LABEL_49:
  if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_43;
  }
LABEL_50:
  operator delete(v64.__r_.__value_.__l.__data_);
  uint64_t v18 = qword_1EB5EE870;
  if (v3 != a2 && qword_1EB5EE870 != v3)
  {
LABEL_54:
    char v21 = *(unsigned char *)(v3 + 23);
    if (*(char *)(a2 + 23) < 0)
    {
      if (v21 >= 0) {
        uint64_t v23 = (std::string::value_type *)v3;
      }
      else {
        uint64_t v23 = *(std::string::value_type **)v3;
      }
      if (v21 >= 0) {
        size_t v24 = *(unsigned __int8 *)(v3 + 23);
      }
      else {
        size_t v24 = *(void *)(v3 + 8);
      }
      std::string::__assign_no_alias<false>((void **)a2, v23, v24);
    }
    else if ((*(unsigned char *)(v3 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>((void *)a2, *(void **)v3, *(void *)(v3 + 8));
    }
    else
    {
      long long v22 = *(_OWORD *)v3;
      *(void *)(a2 + 16) = *(void *)(v3 + 16);
      *(_OWORD *)a2 = v22;
    }
    std::string v25 = (void **)(a2 + 32);
    int v26 = *(char **)(a2 + 32);
    *(unsigned char *)(a2 + 24) = *(unsigned char *)(v3 + 24);
    uint64_t v28 = *(char **)(v3 + 32);
    CFDictionaryRef v27 = *(char **)(v3 + 40);
    unint64_t v29 = 0x8E38E38E38E38E39 * ((v27 - v28) >> 3);
    uint64_t v30 = *(void *)(a2 + 48);
    if (0x8E38E38E38E38E39 * ((v30 - (uint64_t)v26) >> 3) < v29)
    {
      if (v26)
      {
        long long v31 = *(char **)(a2 + 40);
        uint64_t v32 = v26;
        if (v31 != v26)
        {
          uint64_t v33 = v31 - 40;
          do
          {
            while (1)
            {
              if (*(v31 - 8))
              {
                char v34 = (char *)*((void *)v31 - 2);
                if (v31 - 40 == v34)
                {
                  (*(void (**)(char *))(*((void *)v31 - 5) + 32))(v31 - 40);
                }
                else if (v34)
                {
                  (*(void (**)(char *))(*(void *)v34 + 40))(v34);
                }
              }
              if (*(v31 - 49) < 0) {
                break;
              }
              v31 -= 72;
              v33 -= 72;
              if (v31 == v26) {
                goto LABEL_77;
              }
            }
            operator delete(*((void **)v31 - 9));
            v31 -= 72;
            v33 -= 72;
          }
          while (v31 != v26);
LABEL_77:
          uint64_t v32 = *v25;
        }
        *(void *)(a2 + 40) = v26;
        operator delete(v32);
        uint64_t v30 = 0;
        std::__shared_weak_count *v25 = 0;
        *(void *)(a2 + 40) = 0;
        *(void *)(a2 + 48) = 0;
      }
      if (v29 > 0x38E38E38E38E38ELL) {
        goto LABEL_140;
      }
      unint64_t v35 = 0x8E38E38E38E38E39 * (v30 >> 3);
      uint64_t v36 = 2 * v35;
      if (2 * v35 <= v29) {
        uint64_t v36 = 0x8E38E38E38E38E39 * ((v27 - v28) >> 3);
      }
      unint64_t v37 = v35 >= 0x1C71C71C71C71C7 ? 0x38E38E38E38E38ELL : v36;
      if (v37 > 0x38E38E38E38E38ELL) {
LABEL_140:
      }
        std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
      uint64_t v38 = 72 * v37;
      int v26 = (char *)operator new(72 * v37);
      *(void *)(a2 + 32) = v26;
      *(void *)(a2 + 40) = v26;
      *(void *)(a2 + 48) = &v26[v38];
      if (v28 != v27)
      {
        uint64_t v39 = 0;
        do
        {
          ResetReasonEncoder::SubmatchInfo::SubmatchInfo((std::string *)&v26[v39], (long long *)&v28[v39]);
          v39 += 72;
        }
        while (&v28[v39] != v27);
        v26 += v39;
      }
      goto LABEL_138;
    }
    long long v40 = *(char **)(a2 + 40);
    if (0x8E38E38E38E38E39 * ((v40 - v26) >> 3) >= v29)
    {
      if (v28 != v27)
      {
        uint64_t v50 = 0;
        do
        {
          uint64_t v53 = &v26[v50];
          long long v54 = &v28[v50];
          if (v28 != v26)
          {
            char v55 = v54[23];
            if (v53[23] < 0)
            {
              if (v55 >= 0) {
                int v51 = &v28[v50];
              }
              else {
                int v51 = *(char **)&v28[v50];
              }
              if (v55 >= 0) {
                size_t v52 = v54[23];
              }
              else {
                size_t v52 = *(void *)&v28[v50 + 8];
              }
              std::string::__assign_no_alias<false>((void **)&v26[v50], v51, v52);
            }
            else if (v54[23] < 0)
            {
              std::string::__assign_no_alias<true>(&v26[v50], *(void **)&v28[v50], *(void *)&v28[v50 + 8]);
            }
            else
            {
              long long v56 = *(_OWORD *)v54;
              *((void *)v53 + 2) = *((void *)v54 + 2);
              *(_OWORD *)uint64_t v53 = v56;
            }
          }
          *((_DWORD *)v53 + 6) = *((_DWORD *)v54 + 6);
          std::__optional_storage_base<std::function<std::string ()(std::string,std::string)>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::function<std::string ()(std::string,std::string)>,false> const&>(v53 + 32, v54 + 32);
          v50 += 72;
        }
        while (&v28[v50] != v27);
        long long v40 = *(char **)(a2 + 40);
        v26 += v50;
      }
      if (v40 != v26)
      {
        std::string v59 = v40 - 40;
        do
        {
          while (1)
          {
            if (*(v40 - 8))
            {
              uint64_t v60 = (char *)*((void *)v40 - 2);
              if (v40 - 40 == v60)
              {
                (*(void (**)(char *))(*((void *)v40 - 5) + 32))(v40 - 40);
              }
              else if (v60)
              {
                (*(void (**)(char *))(*(void *)v60 + 40))(v60);
              }
            }
            if (*(v40 - 49) < 0) {
              break;
            }
            v40 -= 72;
            v59 -= 72;
            if (v40 == v26) {
              goto LABEL_138;
            }
          }
          operator delete(*((void **)v40 - 9));
          v40 -= 72;
          v59 -= 72;
        }
        while (v40 != v26);
      }
LABEL_138:
      *(void *)(a2 + 40) = v26;
    }
    else
    {
      long long v41 = &v28[8 * ((v40 - v26) >> 3)];
      if (v40 != v26)
      {
        uint64_t v62 = a2;
        uint64_t v42 = 0;
        uint64_t v43 = 8 * ((v40 - v26) >> 3);
        do
        {
          unint64_t v46 = &v26[v42];
          char v47 = &v28[v42];
          if (v28 != v26)
          {
            char v48 = v47[23];
            if (v46[23] < 0)
            {
              if (v48 >= 0) {
                uint64_t v44 = &v28[v42];
              }
              else {
                uint64_t v44 = *(char **)&v28[v42];
              }
              if (v48 >= 0) {
                size_t v45 = v47[23];
              }
              else {
                size_t v45 = *(void *)&v28[v42 + 8];
              }
              std::string::__assign_no_alias<false>((void **)&v26[v42], v44, v45);
            }
            else if (v47[23] < 0)
            {
              std::string::__assign_no_alias<true>(&v26[v42], *(void **)&v28[v42], *(void *)&v28[v42 + 8]);
            }
            else
            {
              long long v49 = *(_OWORD *)v47;
              *((void *)v46 + 2) = *((void *)v47 + 2);
              *(_OWORD *)unint64_t v46 = v49;
            }
          }
          *((_DWORD *)v46 + 6) = *((_DWORD *)v47 + 6);
          std::__optional_storage_base<std::function<std::string ()(std::string,std::string)>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::function<std::string ()(std::string,std::string)>,false> const&>(v46 + 32, v47 + 32);
          v42 += 72;
        }
        while (v43 != v42);
        a2 = v62;
        int v26 = *(char **)(v62 + 40);
      }
      std::string v57 = v26;
      if (v41 != v27)
      {
        uint64_t v58 = 0;
        do
        {
          ResetReasonEncoder::SubmatchInfo::SubmatchInfo((std::string *)&v26[v58], (long long *)&v41[v58]);
          v58 += 72;
        }
        while (&v41[v58] != v27);
        std::string v57 = &v26[v58];
      }
      *(void *)(a2 + 40) = v57;
    }
  }
  return v18 != v3;
}

void sub_1A60CC5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, char a10, char a11, uint64_t a12, ...)
{
  va_start(va, a12);
  ResetReasonEncoder::Mapping::~Mapping((ResetReasonEncoder::Mapping *)va);
  if ((a11 & 0x80000000) == 0) {
    JUMPOUT(0x1A60CC630);
  }
  operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_1A60CC5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if (a18 < 0)
    {
LABEL_5:
      operator delete(v26);
      _Unwind_Resume(a1);
    }
  }
  else if (a18 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

void sub_1A60CC5F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::locale a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  unint64_t v35 = *(void **)(v34 - 208);
  if (v35)
  {
    *(void *)(v34 - 200) = v35;
    operator delete(v35);
  }
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a25);
  JUMPOUT(0x1A60CC620);
}

void ResetReasonEncoder::parse(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  *(void *)(a2 + 32) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v4;
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  long long v5 = (std::string *)(a2 + 8);
  *(unsigned char *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v113 = (void **)(a2 + 40);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  unint64_t v125 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v124 = 0;
  v123[0] = 0;
  v123[1] = 0;
  uint64_t v128 = 0;
  long long v126 = 0;
  int v127 = 0;
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v122, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v122 = *(std::string *)a1;
  }
  BOOL MatchingMapping = ResetReasonEncoder::findMatchingMapping((uint64_t)&v122, (uint64_t)v123);
  BOOL v7 = MatchingMapping;
  if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    unint64_t v8 = 0x1EB5EE000uLL;
    if (MatchingMapping) {
      goto LABEL_6;
    }
LABEL_155:
    size_t v101 = _MergedGlobals_3;
    if (os_log_type_enabled((os_log_t)_MergedGlobals_3, OS_LOG_TYPE_DEBUG))
    {
      int64_t v102 = (const char *)a1;
      if (*(char *)(a1 + 23) < 0) {
        int64_t v102 = *(const char **)a1;
      }
      LODWORD(v130.__position_.__begin_.__i_) = 136315138;
      *(std::__wrap_iter<const char *>::iterator_type *)((char *)&v130.__position_.__begin_.__i_ + 4) = v102;
      _os_log_debug_impl(&dword_1A609F000, v101, OS_LOG_TYPE_DEBUG, "Reason string \"%s\" did not match any existing regex pattern", (uint8_t *)&v130, 0xCu);
    }
LABEL_160:
    std::string v103 = *(NSObject **)(v8 + 2144);
    if (os_log_type_enabled(v103, OS_LOG_TYPE_INFO))
    {
      size_t v104 = (const char *)a1;
      if (*(char *)(a1 + 23) < 0) {
        size_t v104 = *(const char **)a1;
      }
      LODWORD(v130.__position_.__begin_.__i_) = 136315138;
      *(std::__wrap_iter<const char *>::iterator_type *)((char *)&v130.__position_.__begin_.__i_ + 4) = v104;
      _os_log_impl(&dword_1A609F000, v103, OS_LOG_TYPE_INFO, "A problem occurred trying to parse reason string \"%s\", so attempting to send as much of the raw reason string as will fit", (uint8_t *)&v130, 0xCu);
    }
    *(unsigned char *)uint64_t v3 = 12;
    if (*(unsigned char *)(v3 + 32))
    {
      if (v5 != (std::string *)a1)
      {
        char v105 = *(unsigned char *)(a1 + 23);
        if (*(char *)(v3 + 31) < 0)
        {
          if (v105 >= 0) {
            std::string v106 = (void *)a1;
          }
          else {
            std::string v106 = *(void **)a1;
          }
          if (v105 >= 0) {
            size_t v107 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            size_t v107 = *(void *)(a1 + 8);
          }
          std::string::__assign_no_alias<false>((void **)&v5->__r_.__value_.__l.__data_, v106, v107);
        }
        else if ((*(unsigned char *)(a1 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v5, *(void **)a1, *(void *)(a1 + 8));
        }
        else
        {
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
          v5->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
        }
      }
    }
    else
    {
      if (*(char *)(a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
      }
      else
      {
        *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
        v5->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      }
      *(unsigned char *)(v3 + 32) = 1;
    }
LABEL_180:
    long long v9 = (char *)v126;
    goto LABEL_181;
  }
  operator delete(v122.__r_.__value_.__l.__data_);
  unint64_t v8 = 0x1EB5EE000uLL;
  if (!v7) {
    goto LABEL_155;
  }
LABEL_6:
  *(unsigned char *)uint64_t v3 = v125;
  long long v9 = (char *)v126;
  char v10 = v127;
  if (v126 != v127)
  {
    char v116 = 1;
    stat v112 = v5;
    int32x2_t v115 = v127;
    while (1)
    {
      __p.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
      __p.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
      __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
      if (!v9[64]) {
        break;
      }
      if (*(char *)(a1 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v120, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
      }
      else {
        std::string v120 = *(std::string *)a1;
      }
      if (v9[23] < 0)
      {
        std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v15 = *(_OWORD *)v9;
        v119.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
        *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v15;
      }
      uint64_t v16 = *((void *)v9 + 7);
      if (!v16) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__return_ptr))(*(void *)v16 + 48))(&v130);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v130.__position_.__begin_.__i_;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v130.__position_.__pregex_;
      HIBYTE(v130.__position_.__pregex_) = 0;
      LOBYTE(v130.__position_.__begin_.__i_) = 0;
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v119.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_63;
        }
      }
      else if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_63;
      }
      operator delete(v120.__r_.__value_.__l.__data_);
LABEL_63:
      int v41 = *((_DWORD *)v9 + 6);
      if (v41 == 2)
      {
        uint64_t v45 = std::stol(&__p, 0, 16);
        int v46 = v45;
        if (v45 > 0xFFFFFFFFLL)
        {
          char v116 = 0;
          char v47 = *(NSObject **)(v8 + 2144);
          if (!os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_145;
          }
          goto LABEL_110;
        }
        long long v54 = *(char **)(v3 + 48);
        unint64_t v53 = *(void *)(v3 + 56);
        if ((unint64_t)v54 < v53)
        {
          *(_DWORD *)long long v54 = v45;
          char v55 = v54 + 4;
          unint64_t v8 = 0x1EB5EE000;
          *(void *)(v3 + 48) = v55;
          if (v116)
          {
LABEL_114:
            int v25 = 0;
            char v10 = v115;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_148;
            }
            goto LABEL_147;
          }
          goto LABEL_109;
        }
        long long v56 = (char *)*v113;
        uint64_t v57 = v54 - (unsigned char *)*v113;
        uint64_t v58 = v57 >> 2;
        unint64_t v59 = (v57 >> 2) + 1;
        if (v59 >> 62) {
          std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v60 = v53 - (void)v56;
        if (v60 >> 1 > v59) {
          unint64_t v59 = v60 >> 1;
        }
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v59;
        }
        if (v61)
        {
          if (v61 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v62 = operator new(4 * v61);
          uint64_t v63 = &v62[4 * v58];
          *uint64_t v63 = v46;
          uint64_t v64 = (uint64_t)(v63 + 1);
          int64_t v65 = v54 - v56;
          if (v54 != v56)
          {
LABEL_98:
            unint64_t v66 = v65 - 4;
            if (v66 < 0x2C)
            {
              uint64_t v3 = a2;
              goto LABEL_106;
            }
            unint64_t v67 = v54 - v62 - v57;
            uint64_t v3 = a2;
            if (v67 < 0x20) {
              goto LABEL_206;
            }
            uint64_t v68 = (v66 >> 2) + 1;
            uint64_t v69 = 4 * (v68 & 0x7FFFFFFFFFFFFFF8);
            int v70 = &v54[-v69];
            uint64_t v63 = (_DWORD *)((char *)v63 - v69);
            long long v71 = &v62[4 * v58 - 16];
            long long v72 = v54 - 16;
            uint64_t v73 = v68 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v74 = *(_OWORD *)v72;
              *(v71 - 1) = *((_OWORD *)v72 - 1);
              *long long v71 = v74;
              v71 -= 2;
              v72 -= 32;
              v73 -= 8;
            }
            while (v73);
            long long v54 = v70;
            if (v68 != (v68 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_206:
              do
              {
LABEL_106:
                int v75 = *((_DWORD *)v54 - 1);
                v54 -= 4;
                *--uint64_t v63 = v75;
              }
              while (v54 != v56);
            }
LABEL_107:
            *(void *)(v3 + 40) = v63;
            *(void *)(v3 + 48) = v64;
            *(void *)(v3 + 56) = &v62[4 * v61];
            if (v56)
            {
              operator delete(v56);
              long long v5 = v112;
              unint64_t v8 = 0x1EB5EE000uLL;
              *(void *)(v3 + 48) = v64;
              if (v116) {
                goto LABEL_114;
              }
            }
            else
            {
              long long v5 = v112;
              unint64_t v8 = 0x1EB5EE000;
              *(void *)(v3 + 48) = v64;
              if (v116) {
                goto LABEL_114;
              }
            }
LABEL_109:
            char v10 = v115;
            char v47 = *(NSObject **)(v8 + 2144);
            if (!os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_145;
            }
LABEL_110:
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            LODWORD(v130.__position_.__begin_.__i_) = 136315138;
            *(std::__wrap_iter<const char *>::iterator_type *)((char *)&v130.__position_.__begin_.__i_ + 4) = (std::__wrap_iter<const char *>::iterator_type)p_p;
            long long v49 = v47;
            uint64_t v50 = "An error occurred converting hex string argument %s to unsigned integer";
            goto LABEL_143;
          }
        }
        else
        {
          uint64_t v62 = 0;
          uint64_t v63 = (_DWORD *)(4 * v58);
          *(_DWORD *)(4 * v58) = v46;
          uint64_t v64 = 4 * v58 + 4;
          int64_t v65 = v54 - v56;
          if (v54 != v56) {
            goto LABEL_98;
          }
        }
        uint64_t v3 = a2;
        goto LABEL_107;
      }
      if (v41 != 1)
      {
        if (!v41)
        {
          if (*(unsigned char *)(v3 + 32))
          {
            char v116 = 0;
          }
          else
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(v5, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            }
            else {
              *long long v5 = __p;
            }
            *(unsigned char *)(v3 + 32) = 1;
            if (v116) {
              goto LABEL_145;
            }
          }
          char v48 = *(NSObject **)(v8 + 2144);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(v130.__position_.__begin_.__i_) = 0;
            long long v49 = v48;
            uint64_t v50 = "Expected to find a text argument, but none was found";
            uint32_t v51 = 2;
            goto LABEL_144;
          }
        }
LABEL_145:
        int v25 = 0;
LABEL_146:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_148;
        }
LABEL_147:
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_148;
      }
      uint64_t v42 = std::stol(&__p, 0, 10);
      int v43 = v42;
      if (v42 > 0xFFFFFFFFLL)
      {
        char v116 = 0;
        uint64_t v44 = *(NSObject **)(v8 + 2144);
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_145;
        }
LABEL_140:
        long long v100 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v100 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        LODWORD(v130.__position_.__begin_.__i_) = 136315138;
        *(std::__wrap_iter<const char *>::iterator_type *)((char *)&v130.__position_.__begin_.__i_ + 4) = (std::__wrap_iter<const char *>::iterator_type)v100;
        long long v49 = v44;
        uint64_t v50 = "An error occurred converting decimal string argument %s to unsigned integer";
LABEL_143:
        uint32_t v51 = 12;
LABEL_144:
        _os_log_debug_impl(&dword_1A609F000, v49, OS_LOG_TYPE_DEBUG, v50, (uint8_t *)&v130, v51);
        goto LABEL_145;
      }
      long long v78 = *(char **)(v3 + 48);
      unint64_t v77 = *(void *)(v3 + 56);
      if ((unint64_t)v78 < v77)
      {
        *(_DWORD *)long long v78 = v42;
        uint64_t v79 = v78 + 4;
        char v10 = v115;
        *(void *)(v3 + 48) = v79;
        if ((v116 & 1) == 0) {
          goto LABEL_139;
        }
        goto LABEL_152;
      }
      uint64_t v80 = (char *)*v113;
      uint64_t v81 = v78 - (unsigned char *)*v113;
      uint64_t v82 = v81 >> 2;
      unint64_t v83 = (v81 >> 2) + 1;
      if (v83 >> 62) {
        std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v84 = v77 - (void)v80;
      if (v84 >> 1 > v83) {
        unint64_t v83 = v84 >> 1;
      }
      if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v85 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v85 = v83;
      }
      if (v85)
      {
        if (v85 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v86 = operator new(4 * v85);
        size_t v87 = &v86[4 * v82];
        _DWORD *v87 = v43;
        uint64_t v88 = (uint64_t)(v87 + 1);
        int64_t v89 = v78 - v80;
        if (v78 == v80)
        {
LABEL_131:
          uint64_t v3 = a2;
          goto LABEL_137;
        }
      }
      else
      {
        uint64_t v86 = 0;
        size_t v87 = (_DWORD *)(4 * v82);
        *(_DWORD *)(4 * v82) = v43;
        uint64_t v88 = 4 * v82 + 4;
        int64_t v89 = v78 - v80;
        if (v78 == v80) {
          goto LABEL_131;
        }
      }
      unint64_t v90 = v89 - 4;
      if (v90 < 0x2C)
      {
        uint64_t v3 = a2;
        do
        {
LABEL_136:
          int v99 = *((_DWORD *)v78 - 1);
          v78 -= 4;
          *--size_t v87 = v99;
        }
        while (v78 != v80);
        goto LABEL_137;
      }
      unint64_t v91 = v78 - v86 - v81;
      uint64_t v3 = a2;
      if (v91 < 0x20) {
        goto LABEL_136;
      }
      uint64_t v92 = (v90 >> 2) + 1;
      uint64_t v93 = 4 * (v92 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v94 = &v78[-v93];
      size_t v87 = (_DWORD *)((char *)v87 - v93);
      uint64_t v95 = &v86[4 * v82 - 16];
      uint64_t v96 = v78 - 16;
      uint64_t v97 = v92 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v98 = *(_OWORD *)v96;
        *(v95 - 1) = *((_OWORD *)v96 - 1);
        *uint64_t v95 = v98;
        v95 -= 2;
        v96 -= 32;
        v97 -= 8;
      }
      while (v97);
      long long v78 = v94;
      if (v92 != (v92 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_136;
      }
LABEL_137:
      *(void *)(v3 + 40) = v87;
      *(void *)(v3 + 48) = v88;
      *(void *)(v3 + 56) = &v86[4 * v85];
      if (v80)
      {
        operator delete(v80);
        long long v5 = v112;
        char v10 = v115;
        *(void *)(v3 + 48) = v88;
        if ((v116 & 1) == 0) {
          goto LABEL_139;
        }
      }
      else
      {
        long long v5 = v112;
        char v10 = v115;
        *(void *)(v3 + 48) = v88;
        if ((v116 & 1) == 0)
        {
LABEL_139:
          unint64_t v8 = 0x1EB5EE000uLL;
          uint64_t v44 = _MergedGlobals_3;
          if (os_log_type_enabled((os_log_t)_MergedGlobals_3, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_140;
          }
          goto LABEL_145;
        }
      }
LABEL_152:
      int v25 = 0;
      unint64_t v8 = 0x1EB5EE000;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_147;
      }
LABEL_148:
      if (!v25)
      {
        v9 += 72;
        if (v9 != v10) {
          continue;
        }
      }
      if ((v116 & 1) == 0) {
        goto LABEL_160;
      }
      goto LABEL_180;
    }
    *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&__re.__loop_count_ = v11;
    *(_OWORD *)&__re.__start_.__cntrl_ = v11;
    *(_OWORD *)&__re.__traits_.__loc_.__locale_ = v11;
    *(_OWORD *)&__re.__traits_.__col_ = v11;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)&__re, (uint64_t)v9, 0);
    *(void *)&v130.__suffix_.matched = 0xAAAAAAAAAAAAAA00;
    v12.first.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
    v12.second.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v130.__position_.__match_.__suffix_.matched = v12;
    *(void *)&v130.__position_.__match_.__prefix_.matched = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&v130.__position_.__match_.__unmatched_.matched = 0xAAAAAAAAAAAAAAAALL;
    *((_DWORD *)&v130.__position_.__flags_ + 1) = -1431655766;
    memset(&v130.__position_.__match_.__prefix_, 0, 17);
    memset(&v130.__position_.__match_.__suffix_, 0, 17);
    v130.__position_.__match_.__ready_ = 0;
    memset(&v130.__position_.__match_, 0, 41);
    memset(&v130, 0, 28);
    memset(&v130.__position_.__match_.__position_start_, 0, 32);
    memset(&v130.__n_, 0, 32);
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v117.__n_ = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v117.__subs_.__end_ = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v117.__result_ = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v117.__suffix_.second.__i_ = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v117.__position_.__match_.__suffix_.second.__i_ = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v117.__position_.__match_.__ready_ = v12;
    v117.__position_.__match_.__prefix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v117.__position_.__match_.__prefix_.matched = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v117.__position_.__match_.__matches_.__end_cap_.__value_ = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v117.__position_.__match_.__unmatched_.second.__i_ = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v117.__position_.__pregex_ = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v117.__position_.__match_.__matches_.__begin_ = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v117.__position_.__begin_.__i_ = v12;
    if (*(char *)(a1 + 23) < 0)
    {
      __int16 v14 = *(const char **)a1;
      uint64_t v13 = *(void *)(a1 + 8);
    }
    else
    {
      uint64_t v13 = *(unsigned __int8 *)(a1 + 23);
      __int16 v14 = (const char *)a1;
    }
    int v17 = &v14[v13];
    v18.__i_ = v14;
    v19.__i_ = &v14[v13];
    std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(&v117.__position_, v18, v19, &__re, match_default);
    memset(&v117.__suffix_, 0, 17);
    memset(&v117.__n_, 0, 32);
    uint64_t v20 = (int *)operator new(4uLL);
    v117.__subs_.__begin_ = v20;
    *uint64_t v20 = -1;
    v117.__subs_.__end_ = v20 + 1;
    v117.__subs_.__end_cap_.__value_ = v20 + 1;
    p_prefix = &v117.__position_.__match_.__prefix_;
    if (v117.__position_.__match_.__matches_.__end_ == v117.__position_.__match_.__matches_.__begin_)
    {
      v117.__suffix_.matched = 1;
      p_prefix = &v117.__suffix_;
      v117.__suffix_.first.__i_ = v14;
      v117.__suffix_.second.__i_ = v17;
    }
    v117.__result_ = p_prefix;
    std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&v117);
    BOOL v22 = std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v130, &v117);
    BOOL v23 = v22;
    if (v22)
    {
      size_t v24 = *(NSObject **)(v8 + 2144);
      int v25 = 2;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        size_t v52 = v9;
        if (v9[23] < 0) {
          size_t v52 = *(const std::string::value_type **)v9;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v52;
        _os_log_debug_impl(&dword_1A609F000, v24, OS_LOG_TYPE_DEBUG, "Failed to parse out submatch with pattern %s", (uint8_t *)&buf, 0xCu);
        char v116 = 0;
        std::vector<std::ssub_match>::pointer begin = v117.__subs_.__begin_;
        if (!v117.__subs_.__begin_)
        {
LABEL_54:
          if (v117.__position_.__match_.__matches_.__begin_)
          {
            v117.__position_.__match_.__matches_.__end_ = v117.__position_.__match_.__matches_.__begin_;
            operator delete(v117.__position_.__match_.__matches_.__begin_);
          }
          if (v130.__subs_.__begin_)
          {
            v130.__subs_.__end_ = v130.__subs_.__begin_;
            operator delete(v130.__subs_.__begin_);
          }
          if (v130.__position_.__match_.__matches_.__begin_)
          {
            v130.__position_.__match_.__matches_.__end_ = v130.__position_.__match_.__matches_.__begin_;
            operator delete(v130.__position_.__match_.__matches_.__begin_);
          }
          cntrl = __re.__start_.__cntrl_;
          if (__re.__start_.__cntrl_
            && !atomic_fetch_add(&__re.__start_.__cntrl_->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
            std::__shared_weak_count::__release_weak(cntrl);
            std::locale::~locale(&__re.__traits_.__loc_);
            if (v23) {
              goto LABEL_146;
            }
          }
          else
          {
            std::locale::~locale(&__re.__traits_.__loc_);
            if (v23) {
              goto LABEL_146;
            }
          }
          goto LABEL_63;
        }
      }
      else
      {
        char v116 = 0;
        std::vector<std::ssub_match>::pointer begin = v117.__subs_.__begin_;
        if (!v117.__subs_.__begin_) {
          goto LABEL_54;
        }
      }
LABEL_53:
      v117.__subs_.__end_ = begin;
      operator delete(begin);
      goto LABEL_54;
    }
    if (!v117.__result_->matched)
    {
      memset(&buf, 0, sizeof(buf));
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_52;
      }
LABEL_51:
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_52:
      int v25 = 0;
      std::string __p = buf;
      std::vector<std::ssub_match>::pointer begin = v117.__subs_.__begin_;
      if (!v117.__subs_.__begin_) {
        goto LABEL_54;
      }
      goto LABEL_53;
    }
    std::__wrap_iter<const char *>::iterator_type i = v117.__result_->first.__i_;
    std::__wrap_iter<const char *>::iterator_type v28 = v117.__result_->second.__i_;
    std::string::size_type v29 = v28 - v117.__result_->first.__i_;
    if (v29 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v29 > 0x16)
    {
      uint64_t v37 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17) {
        uint64_t v37 = v29 | 7;
      }
      uint64_t v38 = v37 + 1;
      p_std::string buf = (std::string *)operator new(v37 + 1);
      buf.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
      buf.__r_.__value_.__l.__size_ = v29;
      if (i != v28)
      {
LABEL_36:
        if (v29 < 0x20 || (unint64_t)((char *)p_buf - i) < 0x20)
        {
          long long v31 = p_buf;
          uint64_t v32 = i;
          unint64_t v8 = 0x1EB5EE000uLL;
        }
        else
        {
          long long v31 = (std::string *)((char *)p_buf + (v29 & 0xFFFFFFFFFFFFFFE0));
          uint64_t v32 = &i[v29 & 0xFFFFFFFFFFFFFFE0];
          uint64_t v33 = (long long *)(i + 16);
          uint64_t v34 = &p_buf->__r_.__value_.__r.__words[2];
          unint64_t v35 = v29 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v36 = *v33;
            *((_OWORD *)v34 - 1) = *(v33 - 1);
            *(_OWORD *)uint64_t v34 = v36;
            v33 += 2;
            v34 += 4;
            v35 -= 32;
          }
          while (v35);
          unint64_t v8 = 0x1EB5EE000;
          if (v29 == (v29 & 0x7FFFFFFFFFFFFFE0))
          {
LABEL_50:
            v31->__r_.__value_.__s.__data_[0] = 0;
            char v10 = v115;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_52;
            }
            goto LABEL_51;
          }
        }
        do
        {
          std::string::value_type v39 = *v32++;
          v31->__r_.__value_.__s.__data_[0] = v39;
          long long v31 = (std::string *)((char *)v31 + 1);
        }
        while (v32 != v28);
        goto LABEL_50;
      }
    }
    else
    {
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = (_BYTE)v28 - (unint64_t)v117.__result_->first.__i_;
      p_std::string buf = &buf;
      if (i != v28) {
        goto LABEL_36;
      }
    }
    long long v31 = p_buf;
    unint64_t v8 = 0x1EB5EE000;
    goto LABEL_50;
  }
LABEL_181:
  if (v9)
  {
    unint64_t v108 = v127;
    uint64_t v109 = v9;
    if (v127 != v9)
    {
      unint64_t v110 = v127 - 40;
      do
      {
        while (1)
        {
          if (*(v108 - 8))
          {
            std::string v111 = (char *)*((void *)v108 - 2);
            if (v108 - 40 == v111)
            {
              (*(void (**)(char *))(*((void *)v108 - 5) + 32))(v108 - 40);
            }
            else if (v111)
            {
              (*(void (**)(char *))(*(void *)v111 + 40))(v111);
            }
          }
          if (*(v108 - 49) < 0) {
            break;
          }
          v108 -= 72;
          v110 -= 72;
          if (v108 == v9) {
            goto LABEL_192;
          }
        }
        operator delete(*((void **)v108 - 9));
        v108 -= 72;
        v110 -= 72;
      }
      while (v108 != v9);
LABEL_192:
      uint64_t v109 = v126;
    }
    int v127 = v9;
    operator delete(v109);
  }
  if (SHIBYTE(v124) < 0) {
    operator delete(v123[0]);
  }
}

void sub_1A60CD450(_Unwind_Exception *a1)
{
  if (v4 < 0) {
    operator delete(v3);
  }
  ResetReasonEncoder::Mapping::~Mapping((ResetReasonEncoder::Mapping *)&v5);
  ResetReasonEncoder::ParsedReason::~ParsedReason(v2);
  _Unwind_Resume(a1);
}

void sub_1A60CD4D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x1A60CD530);
}

void sub_1A60CD4F0()
{
}

void sub_1A60CD4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    operator delete(__p);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  JUMPOUT(0x1A60CD540);
}

std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(std::regex_token_iterator<std::__wrap_iter<const char *>, char> *this)
{
  std::vector<std::ssub_match>::pointer begin = this->__position_.__match_.__matches_.__begin_;
  std::vector<std::ssub_match>::pointer end = this->__position_.__match_.__matches_.__end_;
  size_t v4 = (char *)end - (char *)begin;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
  if (end == begin)
  {
    uint64_t v6 = 0;
  }
  else
  {
    if (v5 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = operator new(v4);
    memcpy(v6, begin, 24 * ((v4 - 24) / 0x18) + 24);
  }
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22 = this->__position_.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  long long v23 = *(_OWORD *)&this->__position_.__match_.__suffix_.matched;
  if (this->__result_ == &this->__suffix_) {
    goto LABEL_28;
  }
  std::vector<int>::pointer v7 = this->__subs_.__begin_;
  unint64_t v8 = this->__n_ + 1;
  if (v8 < this->__subs_.__end_ - v7)
  {
    this->__n_ = v8;
    unint64_t v9 = v7[v8];
    p_unmatched = &begin[(int)v9];
    if (v5 <= v9) {
      p_unmatched = &this->__position_.__match_.__unmatched_;
    }
    if (v9 == -1) {
      p_prefix = &this->__position_.__match_.__prefix_;
    }
    else {
      p_prefix = p_unmatched;
    }
    this->__result_ = p_prefix;
    if (!v6) {
      return this;
    }
LABEL_32:
    operator delete(v6);
    return this;
  }
  this->__n_ = 0;
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&this->__position_);
  std::vector<std::ssub_match>::pointer v12 = this->__position_.__match_.__matches_.__begin_;
  std::vector<std::ssub_match>::pointer v13 = this->__position_.__match_.__matches_.__end_;
  uint64_t v14 = (char *)v13 - (char *)v12;
  if (v13 == v12)
  {
    std::vector<int>::pointer v17 = this->__subs_.__end_;
    std::__wrap_iter<const char *> v18 = wmemchr(this->__subs_.__begin_, -1, v17 - this->__subs_.__begin_);
    std::__wrap_iter<const char *> v19 = 0;
    if (v18) {
      uint64_t v20 = v18;
    }
    else {
      uint64_t v20 = v17;
    }
    if (v20 == this->__subs_.__end_ || !(_BYTE)v23)
    {
LABEL_31:
      this->__result_ = v19;
      if (!v6) {
        return this;
      }
      goto LABEL_32;
    }
    if (v22.second.__i_ != v22.first.__i_)
    {
      this->__suffix_.matched = 1;
      this->__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v22;
      this->__result_ = &this->__suffix_;
      if (!v6) {
        return this;
      }
      goto LABEL_32;
    }
LABEL_28:
    this->__result_ = 0;
    if (!v6) {
      return this;
    }
    goto LABEL_32;
  }
  unint64_t v15 = this->__subs_.__begin_[this->__n_];
  if (v15 == -1)
  {
    std::__wrap_iter<const char *> v19 = &this->__position_.__match_.__prefix_;
    goto LABEL_31;
  }
  uint64_t v16 = &v12[(int)v15];
  if (0xAAAAAAAAAAAAAAABLL * (v14 >> 3) <= v15) {
    uint64_t v16 = &this->__position_.__match_.__unmatched_;
  }
  this->__result_ = v16;
  if (v6) {
    goto LABEL_32;
  }
  return this;
}

void sub_1A60CD7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_token_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  uint64_t v3 = (std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *)this->__result_;
  size_t v4 = (std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *)__x->__result_;
  if (!((unint64_t)v3 | (unint64_t)v4)) {
    return 1;
  }
  p_suffix = &this->__suffix_;
  unint64_t v8 = &__x->__suffix_;
  if (v3 == &this->__suffix_ && v4 == v8)
  {
    if (!std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t *)this->__result_, (uint64_t *)v4))return 1; {
    uint64_t v3 = (std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *)this->__result_;
    }
  }
  if (!v3) {
    return 0;
  }
  char v10 = __x->__result_;
  if (!v10) {
    return 0;
  }
  BOOL result = 0;
  if (v3 != p_suffix && v10 != v8)
  {
    std::vector<std::ssub_match>::pointer begin = this->__position_.__match_.__matches_.__begin_;
    std::vector<std::ssub_match>::pointer end = this->__position_.__match_.__matches_.__end_;
    std::vector<std::ssub_match>::pointer v13 = (uint64_t *)__x->__position_.__match_.__matches_.__begin_;
    std::vector<std::ssub_match>::pointer v14 = __x->__position_.__match_.__matches_.__end_;
    if (end != begin && v14 != (std::vector<std::ssub_match>::pointer)v13)
    {
      if (this->__position_.__begin_.__i_ == __x->__position_.__begin_.__i_
        && this->__position_.__end_.__i_ == __x->__position_.__end_.__i_
        && this->__position_.__pregex_ == __x->__position_.__pregex_
        && this->__position_.__flags_ == __x->__position_.__flags_
        && !std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t *)this->__position_.__match_.__matches_.__begin_, v13))
      {
        goto LABEL_26;
      }
      return 0;
    }
    BOOL result = 0;
    if (end == begin && v14 == (std::vector<std::ssub_match>::pointer)v13)
    {
LABEL_26:
      if (this->__n_ == __x->__n_)
      {
        std::vector<int>::pointer v15 = this->__subs_.__begin_;
        uint64_t v16 = (int *)((char *)this->__subs_.__end_ - (char *)v15);
        std::vector<int>::pointer v17 = __x->__subs_.__begin_;
        if (v16 == (int *)((char *)__x->__subs_.__end_ - (char *)v17)) {
          return memcmp(v15, v17, (size_t)v16) == 0;
        }
      }
      return 0;
    }
  }
  return result;
}

void *std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::~regex_token_iterator(void *a1)
{
  uint64_t v2 = (void *)a1[23];
  if (v2)
  {
    a1[24] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void ResetReasonEncoder::ParsedReason::~ParsedReason(ResetReasonEncoder::ParsedReason *this)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  if (*((unsigned char *)this + 32))
  {
    if (*((char *)this + 31) < 0) {
      operator delete(*((void **)this + 1));
    }
  }
}

double ResetReasonEncoder::encode@<D0>(ResetReasonEncoder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 33) = v4;
  *(_OWORD *)(a2 + 17) = v4;
  *(_OWORD *)(a2 + 1) = v4;
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 64) = 0;
  memset((char *)v33 + 2, 0, 62);
  uint64_t v5 = *((void *)this + 5);
  uint64_t v6 = *((void *)this + 6);
  uint64_t v7 = v6 - v5;
  unint64_t v8 = (v6 - v5) >> 2;
  LOBYTE(v33[0]) = *(unsigned char *)this;
  BYTE1(v33[0]) = v8;
  if ((unint64_t)(v6 - v5) >= 0x3F)
  {
    unint64_t v9 = _MergedGlobals_3;
    if (os_log_type_enabled((os_log_t)_MergedGlobals_3, OS_LOG_TYPE_ERROR))
    {
      int v29 = 134218240;
      uint64_t v30 = v7;
      __int16 v31 = 1024;
      int v32 = 62;
      _os_log_error_impl(&dword_1A609F000, v9, OS_LOG_TYPE_ERROR, "Failed to encode parsed reason because the size of the numeric arguments (%zu bytes) exceeds the maximum size (%d bytes) of the reset reason", (uint8_t *)&v29, 0x12u);
    }
    return result;
  }
  if (v6 != v5)
  {
    if (v8 <= 1) {
      unint64_t v11 = 1;
    }
    else {
      unint64_t v11 = (v6 - v5) >> 2;
    }
    if (v11 >= 0x14
      && (v8 <= 1 ? (uint64_t v12 = 1) : (uint64_t v12 = (v6 - v5) >> 2),
          (unint64_t v13 = v12 - 1, v15 = v13 == -1, v14 = HIDWORD(v13), !v15) ? (v15 = v14 == 0) : (v15 = 0),
          v15 && (unint64_t)v33 - v5 + 2 >= 0x20))
    {
      unint64_t v16 = v11 & 0xFFFFFFFFFFFFFFF8;
      int v17 = v11 & 0xFFFFFFF8;
      int v25 = (long long *)(v5 + 16);
      int v26 = (_OWORD *)((char *)&v33[1] + 2);
      unint64_t v27 = v11 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        long long v28 = *v25;
        *(v26 - 1) = *(v25 - 1);
        _OWORD *v26 = v28;
        v25 += 2;
        v26 += 2;
        v27 -= 8;
      }
      while (v27);
      if (v11 == v16) {
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v16 = 0;
      int v17 = 0;
    }
    unsigned int v18 = v17 + 1;
    do
    {
      *(_DWORD *)((char *)v33 + 4 * v16 + 2) = *(_DWORD *)(v5 + 4 * v16);
      unint64_t v16 = v18++;
    }
    while (v8 > v16);
  }
LABEL_21:
  if (*((unsigned char *)this + 32))
  {
    char v21 = (const char *)*((void *)this + 1);
    std::__wrap_iter<const char *> v19 = (char *)this + 8;
    uint64_t v20 = v21;
    if (v19[23] >= 0) {
      std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22 = v19;
    }
    else {
      std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22 = v20;
    }
    strlcpy((char *)v33 + v7 + 2, v22, 62 - v7);
  }
  long long v23 = v33[1];
  *(_OWORD *)a2 = v33[0];
  *(_OWORD *)(a2 + 16) = v23;
  double result = *(double *)&v33[2];
  long long v24 = v33[3];
  *(_OWORD *)(a2 + 32) = v33[2];
  *(_OWORD *)(a2 + 48) = v24;
  *(unsigned char *)(a2 + 64) = 1;
  return result;
}

void ResetReasonEncoder::encode(const std::string::value_type *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = 0x1EB5EE000uLL;
  uint64_t v5 = _MergedGlobals_3;
  if (os_log_type_enabled((os_log_t)_MergedGlobals_3, OS_LOG_TYPE_DEBUG))
  {
    if (a1[23] >= 0) {
      unint64_t v14 = a1;
    }
    else {
      unint64_t v14 = *(const std::string::value_type **)a1;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v14;
    _os_log_debug_impl(&dword_1A609F000, v5, OS_LOG_TYPE_DEBUG, "Attempting to parse and encode reason string: \"%s\"", buf, 0xCu);
  }
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a2 + 48) = v6;
  *(_OWORD *)(a2 + 33) = v6;
  *(_OWORD *)(a2 + 17) = v6;
  *(_OWORD *)(a2 + 1) = v6;
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 64) = 0;
  *(_OWORD *)std::string __p = v6;
  long long v49 = v6;
  *(_OWORD *)int v46 = v6;
  long long v47 = v6;
  if (a1[23] < 0) {
    std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)a1, *((void *)a1 + 1));
  }
  else {
    std::string v45 = *(std::string *)a1;
  }
  ResetReasonEncoder::parse((uint64_t)&v45, (uint64_t)v46);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = _MergedGlobals_3;
  if (os_log_type_enabled((os_log_t)_MergedGlobals_3, OS_LOG_TYPE_DEBUG))
  {
    log = v7;
    int v41 = a1[23];
    long long v40 = *(uint64_t **)a1;
    unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v62[7] = v15;
    v62[8] = v15;
    v62[5] = v15;
    v62[6] = v15;
    v62[3] = v15;
    v62[4] = v15;
    v62[1] = v15;
    v62[2] = v15;
    long long v61 = v15;
    v62[0] = v15;
    long long v59 = v15;
    long long v60 = v15;
    long long v57 = v15;
    long long v58 = v15;
    long long v55 = v15;
    long long v56 = v15;
    *(_OWORD *)std::string buf = v15;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"\tParsed Reason:\n", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"\t\tError Code:\t", 14);
    unint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n", 1);
    if (LOBYTE(__p[0]))
    {
      int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"\t\tFree Text:\t", 13);
      if (!LOBYTE(__p[0])) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      if (v47 >= 0) {
        unsigned int v18 = &v46[1];
      }
      else {
        unsigned int v18 = (void **)v46[1];
      }
      if (v47 >= 0) {
        uint64_t v19 = HIBYTE(v47);
      }
      else {
        uint64_t v19 = v47;
      }
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
    }
    if ((void *)v49 != __p[1])
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"\t\tNumeric Arguments:\n", 21);
      std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22 = (char *)__p[1];
      char v21 = (char *)v49;
      if (__p[1] != (void *)v49)
      {
        int v23 = 0;
        do
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"\t\t\t[", 4);
          long long v24 = (void *)std::ostream::operator<<();
          int v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
          *(_DWORD *)((char *)v25 + *(void *)(*v25 - 24) + 8) = *(_DWORD *)((unsigned char *)v25
                                                                              + *(void *)(*v25 - 24)
                                                                              + 8) & 0xFFFFFFB5 | 2;
          int v26 = (void *)std::ostream::operator<<();
          unint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" (0x", 4);
          *(_DWORD *)((char *)v27 + *(void *)(*v27 - 24) + 8) = *(_DWORD *)((unsigned char *)v27
                                                                              + *(void *)(*v27 - 24)
                                                                              + 8) & 0xFFFFFFB5 | 8;
          long long v28 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)")\n", 2);
          v22 += 4;
          ++v23;
        }
        while (v22 != v21);
      }
    }
    if ((BYTE8(v61) & 0x10) != 0)
    {
      uint64_t v31 = v61;
      if ((unint64_t)v61 < *((void *)&v58 + 1))
      {
        *(void *)&long long v61 = *((void *)&v58 + 1);
        uint64_t v31 = *((void *)&v58 + 1);
      }
      int v32 = (const void **)&v58;
    }
    else
    {
      if ((BYTE8(v61) & 8) == 0)
      {
        size_t v29 = 0;
        HIBYTE(v44) = 0;
        uint64_t v30 = __dst;
        goto LABEL_59;
      }
      int v32 = (const void **)&v56 + 1;
      uint64_t v31 = *((void *)&v57 + 1);
    }
    uint64_t v34 = *v32;
    size_t v29 = v31 - (void)*v32;
    if (v29 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v29 >= 0x17)
    {
      uint64_t v35 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17) {
        uint64_t v35 = v29 | 7;
      }
      uint64_t v36 = v35 + 1;
      uint64_t v30 = (void **)operator new(v35 + 1);
      __dst[1] = (void *)v29;
      int64_t v44 = v36 | 0x8000000000000000;
      __dst[0] = v30;
    }
    else
    {
      HIBYTE(v44) = v31 - *(unsigned char *)v32;
      uint64_t v30 = __dst;
      if (!v29) {
        goto LABEL_59;
      }
    }
    memmove(v30, v34, v29);
LABEL_59:
    unint64_t v4 = 0x1EB5EE000;
    *((unsigned char *)v30 + v29) = 0;
    *(void *)std::string buf = *MEMORY[0x1E4FBA408];
    uint64_t v37 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
    *(void *)&long long v55 = v37;
    *((void *)&v55 + 1) = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v60) < 0) {
      operator delete(*((void **)&v59 + 1));
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1A62751A0](v62);
    uint64_t v38 = v40;
    if (v41 >= 0) {
      uint64_t v38 = (uint64_t *)a1;
    }
    std::string::value_type v39 = __dst;
    if (v44 < 0) {
      std::string::value_type v39 = (void **)__dst[0];
    }
    *(_DWORD *)uint64_t v50 = 136315394;
    uint32_t v51 = v38;
    __int16 v52 = 2080;
    unint64_t v53 = v39;
    _os_log_debug_impl(&dword_1A609F000, log, OS_LOG_TYPE_DEBUG, "Reason string \"%s\" parsed to:\n%s", v50, 0x16u);
    if (SHIBYTE(v44) < 0) {
      operator delete(__dst[0]);
    }
  }
  ResetReasonEncoder::encode((ResetReasonEncoder *)v46, (uint64_t)buf);
  long long v8 = v57;
  *(_OWORD *)(a2 + 32) = v56;
  *(_OWORD *)(a2 + 48) = v8;
  char v9 = v58;
  *(unsigned char *)(a2 + 64) = v58;
  long long v10 = v55;
  *(_OWORD *)a2 = *(_OWORD *)buf;
  *(_OWORD *)(a2 + 16) = v10;
  unint64_t v11 = *(NSObject **)(v4 + 2144);
  if (v9)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      if (a1[23] >= 0) {
        uint64_t v12 = a1;
      }
      else {
        uint64_t v12 = *(const std::string::value_type **)a1;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_debug_impl(&dword_1A609F000, v11, OS_LOG_TYPE_DEBUG, "Successfully encoded reason string: \"%s\"", buf, 0xCu);
      unint64_t v13 = __p[1];
      if (!__p[1]) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
LABEL_16:
    unint64_t v13 = __p[1];
    if (!__p[1]) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
    goto LABEL_16;
  }
  if (a1[23] >= 0) {
    uint64_t v33 = a1;
  }
  else {
    uint64_t v33 = *(const std::string::value_type **)a1;
  }
  *(_DWORD *)std::string buf = 136315138;
  *(void *)&uint8_t buf[4] = v33;
  _os_log_error_impl(&dword_1A609F000, v11, OS_LOG_TYPE_ERROR, "Failed to encode reason string: \"%s\"", buf, 0xCu);
  unint64_t v13 = __p[1];
  if (!__p[1]) {
    goto LABEL_18;
  }
LABEL_17:
  *(void *)&long long v49 = v13;
  operator delete(v13);
LABEL_18:
  if (LOBYTE(__p[0]))
  {
    if (SHIBYTE(v47) < 0) {
      operator delete(v46[1]);
    }
  }
}

void sub_1A60CE2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  ResetReasonEncoder::ParsedReason::~ParsedReason((ResetReasonEncoder::ParsedReason *)va);
  _Unwind_Resume(a1);
}

void sub_1A60CE2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  ResetReasonEncoder::ParsedReason::~ParsedReason((ResetReasonEncoder::ParsedReason *)va);
  _Unwind_Resume(a1);
}

void sub_1A60CE2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A60CE304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void *std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x38E38E38E38E38FLL) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = 72 * a3;
    long long v6 = (char *)operator new(72 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      ResetReasonEncoder::SubmatchInfo::SubmatchInfo((std::string *)&v6[v7], (long long *)(a2 + v7));
      v7 += 72;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_1A60CE3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1A60CE3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 72)
  {
    while (1)
    {
      uint64_t v13 = v10 + v11;
      if (*(unsigned char *)(v10 + v11 - 8))
      {
        uint64_t v14 = *(void *)(v13 - 16);
        if (v13 - 40 == v14)
        {
          (*(void (**)(uint64_t))(*(void *)(v13 - 40) + 32))(v13 - 40);
        }
        else if (v14)
        {
          (*(void (**)(uint64_t))(*(void *)v14 + 40))(v14);
        }
      }
      if (*(char *)(v13 - 49) < 0) {
        break;
      }
      v11 -= 72;
      if (!v11) {
        goto LABEL_11;
      }
    }
    operator delete(*(void **)(v13 - 72));
  }
LABEL_11:
  *(void *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<ResetReasonEncoder::SubmatchInfo>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<ResetReasonEncoder::SubmatchInfo>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      unint64_t v4 = (char *)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        long long v6 = v4 - 40;
        do
        {
          while (1)
          {
            if (*(v4 - 8))
            {
              uint64_t v7 = (char *)*((void *)v4 - 2);
              if (v4 - 40 == v7)
              {
                (*(void (**)(char *))(*((void *)v4 - 5) + 32))(v4 - 40);
              }
              else if (v7)
              {
                (*(void (**)(char *))(*(void *)v7 + 40))(v7);
              }
            }
            if (*(v4 - 49) < 0) {
              break;
            }
            v4 -= 72;
            v6 -= 72;
            if (v4 == v3) {
              goto LABEL_14;
            }
          }
          operator delete(*((void **)v4 - 9));
          v4 -= 72;
          v6 -= 72;
        }
        while (v4 != v3);
LABEL_14:
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

std::string *ResetReasonEncoder::SubmatchInfo::SubmatchInfo(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  int v5 = *((_DWORD *)a2 + 6);
  this[1].__r_.__value_.__s.__data_[8] = 0;
  LODWORD(this[1].__r_.__value_.__l.__data_) = v5;
  this[2].__r_.__value_.__s.__data_[16] = 0;
  if (*((unsigned char *)a2 + 64))
  {
    std::string::size_type v6 = *((void *)a2 + 7);
    if (v6)
    {
      if ((long long *)v6 == a2 + 2)
      {
        this[2].__r_.__value_.__l.__size_ = (std::string::size_type)&this[1].__r_.__value_.__l.__size_;
        (*(void (**)(void, std::string::size_type *))(**((void **)a2 + 7) + 24))(*((void *)a2 + 7), &this[1].__r_.__value_.__l.__size_);
        goto LABEL_10;
      }
      std::string::size_type v6 = (*(uint64_t (**)(std::string::size_type))(*(void *)v6 + 16))(v6);
    }
    this[2].__r_.__value_.__l.__size_ = v6;
LABEL_10:
    this[2].__r_.__value_.__s.__data_[16] = 1;
  }
  return this;
}

void sub_1A60CE6BC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 64))
  {
    uint64_t v4 = *(void *)(v1 + 56);
    if (v4 == v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    }
    else if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
    }
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<$_0,std::allocator<$_0>,std::string ()(std::string,std::string)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EFB09768;
  return result;
}

void std::__function::__func<$_0,std::allocator<$_0>,std::string ()(std::string,std::string)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EFB09768;
}

void std::__function::__func<$_0,std::allocator<$_0>,std::string ()(std::string,std::string)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  *(_OWORD *)long long v56 = *(_OWORD *)a1;
  uint64_t v57 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_OWORD *)long long v54 = *(_OWORD *)a2;
  uint64_t v55 = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v77 = 0uLL;
  pregex = 0;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v75 = v4;
  long long v76 = v4;
  *(_OWORD *)&v73[0].__locale_ = v4;
  long long v74 = v4;
  uint64_t v5 = std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v73, (uint64_t)v54, 0);
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v68 = 0xAAAAAAAAAAAAAA00;
  v65[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
  long long v71 = v6;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v70 = 0;
  uint64_t v69 = 0;
  LOBYTE(v71) = 0;
  BYTE8(v71) = 0;
  uint64_t v72 = 0;
  memset(v65, 0, 41);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  __p.__position_.__match_.__unmatched_.second.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  __p.__position_.__match_.__matches_.__end_ = (std::vector<std::ssub_match>::pointer)0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&__p.__position_.__match_.__prefix_.second.__i_ = v6;
  memset(&__p.__position_.__match_.__matches_.__end_cap_, 0, 17);
  memset(&__p.__position_.__match_.__unmatched_.matched, 0, 17);
  __p.__position_.__match_.__prefix_.matched = 0;
  __p.__position_.__match_.__suffix_.first.__i_ = 0;
  memset(&__p, 0, 32);
  uint64_t v7 = (char *)HIBYTE(v57);
  if (v57 >= 0) {
    long long v8 = (std::sub_match<const char *> *)v56;
  }
  else {
    long long v8 = (std::sub_match<const char *> *)v56[0];
  }
  if (v57 < 0) {
    uint64_t v7 = (char *)v56[1];
  }
  *(_OWORD *)((char *)&__p.__position_.__flags_ + 1) = 0uLL;
  int v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v5, v8, (std::sub_match<const char *> *)&v7[(void)v8], (std::vector<std::csub_match> *)&__p, 0);
  uint64_t v10 = (char *)HIBYTE(v57);
  if (v57 >= 0) {
    uint64_t v11 = v56;
  }
  else {
    uint64_t v11 = (void **)v56[0];
  }
  if (v57 < 0) {
    uint64_t v10 = (char *)v56[1];
  }
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v65, (uint64_t)v11, (std::sub_match<std::__wrap_iter<const char *>> *)&v10[(void)v11], (uint64_t *)&__p, 0);
  if (__p.__position_.__begin_.__i_)
  {
    __p.__position_.__end_.__i_ = __p.__position_.__begin_.__i_;
    operator delete((void *)__p.__position_.__begin_.__i_);
  }
  if (v9)
  {
    p_end_cap = &v65[1].__end_cap_;
    if (v65[0].__end_ != v65[0].__begin_) {
      p_end_cap = &v65[0].__begin_->matched;
    }
    if (!*p_end_cap)
    {
      memset(&__p, 0, 24);
      if (SHIBYTE(pregex) < 0) {
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    if (v65[0].__end_ == v65[0].__begin_) {
      std::vector<std::ssub_match>::pointer begin = (std::vector<std::ssub_match>::pointer)&v65[1];
    }
    else {
      std::vector<std::ssub_match>::pointer begin = v65[0].__begin_;
    }
    std::__wrap_iter<const char *>::iterator_type i = begin->first.__i_;
    p_std::__wrap_iter<const char *>::iterator_type i = &v65[0].__begin_->second.__i_;
    if (v65[0].__end_ == v65[0].__begin_) {
      p_std::__wrap_iter<const char *>::iterator_type i = (const char **)&v65[1].__end_;
    }
    unint64_t v16 = *p_i;
    unint64_t v17 = *p_i - i;
    if (v17 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v17 > 0x16)
    {
      uint64_t v25 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17) {
        uint64_t v25 = v17 | 7;
      }
      uint64_t v26 = v25 + 1;
      p_p = (const char *)operator new(v25 + 1);
      __p.__position_.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)(v26 | 0x8000000000000000);
      __p.__position_.__begin_.__i_ = p_p;
      __p.__position_.__end_.__i_ = (std::__wrap_iter<const char *>::iterator_type)v17;
      if (i != v16)
      {
LABEL_25:
        if (v17 < 0x20 || (unint64_t)(p_p - i) < 0x20)
        {
          uint64_t v19 = (char *)p_p;
          uint64_t v20 = i;
        }
        else
        {
          uint64_t v19 = (char *)&p_p[v17 & 0xFFFFFFFFFFFFFFE0];
          uint64_t v20 = &i[v17 & 0xFFFFFFFFFFFFFFE0];
          char v21 = (long long *)(i + 16);
          std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22 = p_p + 16;
          unint64_t v23 = v17 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v24 = *v21;
            *(v22 - 1) = *(v21 - 1);
            _OWORD *v22 = v24;
            v21 += 2;
            v22 += 2;
            v23 -= 32;
          }
          while (v23);
          if (v17 == (v17 & 0x7FFFFFFFFFFFFFE0))
          {
LABEL_40:
            *uint64_t v19 = 0;
            if (SHIBYTE(pregex) < 0) {
LABEL_41:
            }
              operator delete((void *)v77);
LABEL_42:
            long long v77 = *(_OWORD *)&__p.__position_.__begin_.__i_;
            pregex = __p.__position_.__pregex_;
            goto LABEL_43;
          }
        }
        do
        {
          char v27 = *v20++;
          *v19++ = v27;
        }
        while (v20 != v16);
        goto LABEL_40;
      }
    }
    else
    {
      HIBYTE(__p.__position_.__pregex_) = *(unsigned char *)p_i - (_BYTE)i;
      p_p = (const char *)&__p;
      if (i != v16) {
        goto LABEL_25;
      }
    }
    const char *p_p = 0;
    if (SHIBYTE(pregex) < 0) {
      goto LABEL_41;
    }
    goto LABEL_42;
  }
LABEL_43:
  *(void *)&long long v28 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&__re.__loop_count_ = v28;
  *(_OWORD *)&__re.__start_.__cntrl_ = v28;
  *(_OWORD *)&__re.__traits_.__loc_.__locale_ = v28;
  *(_OWORD *)&__re.__traits_.__col_ = v28;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&__re, "\\s+", 0);
  v29.first.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  v29.second.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  *(void *)&__p.__position_.__match_.__prefix_.matched = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__p.__position_.__match_.__unmatched_.matched = 0xAAAAAAAAAAAAAAAALL;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__position_.__match_.__suffix_.matched = v29;
  *((_DWORD *)&__p.__position_.__flags_ + 1) = -1431655766;
  *(void *)&__p.__suffix_.matched = 0xAAAAAAAAAAAAAA00;
  memset(&__p.__position_.__match_.__prefix_, 0, 17);
  memset(&__p.__position_.__match_.__suffix_, 0, 17);
  __p.__position_.__match_.__ready_ = 0;
  memset(&__p.__position_.__match_, 0, 41);
  memset(&__p, 0, 28);
  memset(&__p.__position_.__match_.__position_start_, 0, 32);
  memset(&__p.__n_, 0, 32);
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v62.__n_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v62.__subs_.__end_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v62.__result_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v62.__suffix_.second.__i_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v62.__position_.__match_.__suffix_.second.__i_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v62.__position_.__match_.__ready_ = v29;
  v62.__position_.__match_.__prefix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v62.__position_.__match_.__prefix_.matched = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v62.__position_.__match_.__matches_.__end_cap_.__value_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v62.__position_.__match_.__unmatched_.second.__i_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v62.__position_.__pregex_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v62.__position_.__match_.__matches_.__begin_ = v29;
  uint64_t v30 = HIBYTE(pregex);
  if (SHIBYTE(pregex) >= 0) {
    uint64_t v31 = (const char *)&v77;
  }
  else {
    uint64_t v31 = (const char *)v77;
  }
  if (SHIBYTE(pregex) < 0) {
    uint64_t v30 = *((void *)&v77 + 1);
  }
  int v32 = &v31[v30];
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v62.__position_.__begin_.__i_ = v29;
  v33.__i_ = v31;
  v34.__i_ = &v31[v30];
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(&v62.__position_, v33, v34, &__re, match_default);
  memset(&v62.__suffix_, 0, 17);
  memset(&v62.__n_, 0, 32);
  uint64_t v35 = (int *)operator new(4uLL);
  v62.__subs_.__begin_ = v35;
  int *v35 = -1;
  v62.__subs_.__end_cap_.__value_ = v35 + 1;
  v62.__subs_.__end_ = v35 + 1;
  if (v62.__position_.__match_.__matches_.__end_ == v62.__position_.__match_.__matches_.__begin_)
  {
    v62.__suffix_.matched = 1;
    p_suffix = &v62.__suffix_;
    v62.__suffix_.first.__i_ = v31;
    v62.__suffix_.second.__i_ = v32;
  }
  else
  {
    p_suffix = &v62.__position_.__match_.__prefix_;
  }
  v62.__result_ = p_suffix;
  v37.first.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  v37.second.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__position_.__begin_.__i_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__position_.__pregex_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__position_.__match_.__matches_.__begin_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__position_.__match_.__matches_.__end_cap_.__value_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__position_.__match_.__unmatched_.second.__i_ = v37;
  v61.__position_.__match_.__prefix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__position_.__match_.__prefix_.matched = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__position_.__match_.__suffix_.second.__i_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__position_.__match_.__ready_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__result_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__suffix_.second.__i_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__n_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v61.__subs_.__end_ = v37;
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v61, &v62);
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&v62);
  if (v61.__subs_.__begin_)
  {
    v61.__subs_.__end_ = v61.__subs_.__begin_;
    operator delete(v61.__subs_.__begin_);
  }
  if (v61.__position_.__match_.__matches_.__begin_)
  {
    v61.__position_.__match_.__matches_.__end_ = v61.__position_.__match_.__matches_.__begin_;
    operator delete(v61.__position_.__match_.__matches_.__begin_);
  }
  v38.first.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  v38.second.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__n_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__subs_.__end_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__result_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__suffix_.second.__i_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__position_.__match_.__suffix_.second.__i_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__position_.__match_.__ready_ = v38;
  v60.__position_.__match_.__prefix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__position_.__match_.__prefix_.matched = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__position_.__match_.__matches_.__end_cap_.__value_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__position_.__match_.__unmatched_.second.__i_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__position_.__pregex_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__position_.__match_.__matches_.__begin_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v60.__position_.__begin_.__i_ = v38;
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v60, &v62);
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&v62);
  if (v60.__subs_.__begin_)
  {
    v60.__subs_.__end_ = v60.__subs_.__begin_;
    operator delete(v60.__subs_.__begin_);
  }
  if (v60.__position_.__match_.__matches_.__begin_)
  {
    v60.__position_.__match_.__matches_.__end_ = v60.__position_.__match_.__matches_.__begin_;
    operator delete(v60.__position_.__match_.__matches_.__begin_);
  }
  if (!std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&__p, &v62))
  {
    if (v62.__result_->matched)
    {
      std::__wrap_iter<const char *>::iterator_type v40 = v62.__result_->first.__i_;
      std::__wrap_iter<const char *>::iterator_type v39 = v62.__result_->second.__i_;
      unint64_t v41 = v39 - v62.__result_->first.__i_;
      if (v41 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v41 > 0x16)
      {
        uint64_t v49 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v41 | 7) != 0x17) {
          uint64_t v49 = v41 | 7;
        }
        uint64_t v50 = v49 + 1;
        uint64_t v42 = (long long *)operator new(v49 + 1);
        *((void *)&v58 + 1) = v41;
        unint64_t v59 = v50 | 0x8000000000000000;
        *(void *)&long long v58 = v42;
        if (v40 != v39)
        {
LABEL_64:
          if (v41 < 0x20 || (unint64_t)((char *)v42 - v40) < 0x20)
          {
            int v43 = v42;
            int64_t v44 = v40;
          }
          else
          {
            int v43 = (long long *)((char *)v42 + (v41 & 0xFFFFFFFFFFFFFFE0));
            int64_t v44 = &v40[v41 & 0xFFFFFFFFFFFFFFE0];
            std::string v45 = (long long *)(v40 + 16);
            int v46 = v42 + 1;
            unint64_t v47 = v41 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v48 = *v45;
              *(v46 - 1) = *(v45 - 1);
              *int v46 = v48;
              v45 += 2;
              v46 += 2;
              v47 -= 32;
            }
            while (v47);
            if (v41 == (v41 & 0x7FFFFFFFFFFFFFE0)) {
              goto LABEL_77;
            }
          }
          do
          {
            char v51 = *v44++;
            *(unsigned char *)int v43 = v51;
            int v43 = (long long *)((char *)v43 + 1);
          }
          while (v44 != v39);
LABEL_77:
          *(unsigned char *)int v43 = 0;
          goto LABEL_78;
        }
      }
      else
      {
        HIBYTE(v59) = (_BYTE)v39 - (unint64_t)v62.__result_->first.__i_;
        uint64_t v42 = &v58;
        if (v40 != v39) {
          goto LABEL_64;
        }
      }
      *(unsigned char *)uint64_t v42 = 0;
    }
    else
    {
      long long v58 = 0uLL;
      unint64_t v59 = 0;
    }
LABEL_78:
    *(_OWORD *)a3 = v58;
    a3[2] = v59;
  }
  if (v62.__subs_.__begin_)
  {
    v62.__subs_.__end_ = v62.__subs_.__begin_;
    operator delete(v62.__subs_.__begin_);
  }
  if (v62.__position_.__match_.__matches_.__begin_)
  {
    v62.__position_.__match_.__matches_.__end_ = v62.__position_.__match_.__matches_.__begin_;
    operator delete(v62.__position_.__match_.__matches_.__begin_);
  }
  if (__p.__subs_.__begin_)
  {
    __p.__subs_.__end_ = __p.__subs_.__begin_;
    operator delete(__p.__subs_.__begin_);
  }
  if (__p.__position_.__match_.__matches_.__begin_)
  {
    __p.__position_.__match_.__matches_.__end_ = __p.__position_.__match_.__matches_.__begin_;
    operator delete(__p.__position_.__match_.__matches_.__begin_);
  }
  cntrl = __re.__start_.__cntrl_;
  if (__re.__start_.__cntrl_ && !atomic_fetch_add(&__re.__start_.__cntrl_->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
    std::__shared_weak_count::__release_weak(cntrl);
  }
  std::locale::~locale(&__re.__traits_.__loc_);
  if (v65[0].__begin_)
  {
    v65[0].__end_ = v65[0].__begin_;
    operator delete(v65[0].__begin_);
  }
  unint64_t v53 = (std::__shared_weak_count *)v76;
  if ((void)v76 && !atomic_fetch_add((atomic_ullong *volatile)(v76 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
    std::locale::~locale(v73);
    if ((SHIBYTE(pregex) & 0x80000000) == 0)
    {
LABEL_95:
      if ((SHIBYTE(v55) & 0x80000000) == 0) {
        goto LABEL_96;
      }
      goto LABEL_100;
    }
  }
  else
  {
    std::locale::~locale(v73);
    if ((SHIBYTE(pregex) & 0x80000000) == 0) {
      goto LABEL_95;
    }
  }
  operator delete((void *)v77);
  if ((SHIBYTE(v55) & 0x80000000) == 0)
  {
LABEL_96:
    if ((SHIBYTE(v57) & 0x80000000) == 0) {
      return;
    }
LABEL_101:
    operator delete(v56[0]);
    return;
  }
LABEL_100:
  operator delete(v54[0]);
  if (SHIBYTE(v57) < 0) {
    goto LABEL_101;
  }
}

void sub_1A60CEF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  long long v24 = (void *)STACK[0x2A8];
  if (STACK[0x2A8])
  {
    STACK[0x2B0] = (unint64_t)v24;
    operator delete(v24);
    uint64_t v25 = (void *)STACK[0x210];
    if (!STACK[0x210])
    {
LABEL_6:
      uint64_t v26 = (void *)STACK[0x378];
      if (!STACK[0x378]) {
        goto LABEL_7;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v25 = (void *)STACK[0x210];
    if (!STACK[0x210]) {
      goto LABEL_6;
    }
  }
  STACK[0x218] = (unint64_t)v25;
  operator delete(v25);
  uint64_t v26 = (void *)STACK[0x378];
  if (!STACK[0x378])
  {
LABEL_7:
    char v27 = (void *)STACK[0x2E0];
    if (!STACK[0x2E0]) {
      goto LABEL_8;
    }
    goto LABEL_13;
  }
LABEL_12:
  STACK[0x380] = (unint64_t)v26;
  operator delete(v26);
  char v27 = (void *)STACK[0x2E0];
  if (!STACK[0x2E0])
  {
LABEL_8:
    long long v28 = (std::__shared_weak_count *)STACK[0x3C0];
    if (!STACK[0x3C0]) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
LABEL_13:
  STACK[0x2E8] = (unint64_t)v27;
  operator delete(v27);
  long long v28 = (std::__shared_weak_count *)STACK[0x3C0];
  if (!STACK[0x3C0]) {
    goto LABEL_16;
  }
LABEL_14:
  if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
LABEL_16:
  std::locale::~locale((std::locale *)&STACK[0x390]);
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v29 = (void *)STACK[0x3D0];
  if (STACK[0x3D0])
  {
    STACK[0x3D8] = (unint64_t)v29;
    operator delete(v29);
    std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22 = *(std::__shared_weak_count **)(v21 - 112);
    if (!v22) {
      goto LABEL_20;
    }
  }
  else
  {
    std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22 = *(std::__shared_weak_count **)(v21 - 112);
    if (!v22) {
      goto LABEL_20;
    }
  }
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_20:
  std::locale::~locale((std::locale *)(v21 - 160));
  if (*(char *)(v21 - 73) < 0)
  {
    operator delete(*(void **)(v21 - 96));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_22:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_23;
      }
      goto LABEL_26;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(a9);
  if ((a21 & 0x80000000) == 0) {
LABEL_23:
  }
    _Unwind_Resume(a1);
LABEL_26:
  operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<$_0,std::allocator<$_0>,std::string ()(std::string,std::string)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<$_0,std::allocator<$_0>,std::string ()(std::string,std::string)>::target_type()
{
}

std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(std::regex_token_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_token_iterator<std::__wrap_iter<const char *>, char> *a2)
{
  long long v4 = *(_OWORD *)&a2->__position_.__begin_.__i_;
  *(_OWORD *)((char *)&this->__position_.__end_.__i_ + 4) = *(_OWORD *)((char *)&a2->__position_.__end_.__i_ + 4);
  this->__position_.__match_.__matches_.__begin_ = 0;
  *(_OWORD *)&this->__position_.__begin_.__i_ = v4;
  this->__position_.__match_.__matches_.__end_ = 0;
  this->__position_.__match_.__matches_.__end_cap_.__value_ = 0;
  std::vector<std::ssub_match>::pointer begin = a2->__position_.__match_.__matches_.__begin_;
  std::vector<std::ssub_match>::pointer end = a2->__position_.__match_.__matches_.__end_;
  int64_t v7 = (char *)end - (char *)begin;
  if (end == begin)
  {
    long long v8 = 0;
    uint64_t v25 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    long long v8 = (std::sub_match<std::__wrap_iter<const char *>> *)operator new(v7);
    this->__position_.__match_.__matches_.__begin_ = v8;
    this->__position_.__match_.__matches_.__end_ = v8;
    this->__position_.__match_.__matches_.__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v8 + 8 * (v7 >> 3));
    size_t v9 = 24 * ((v7 - 24) / 0x18uLL) + 24;
    memcpy(v8, begin, v9);
    uint64_t v25 = (char *)v8 + v9;
    this->__position_.__match_.__matches_.__end_ = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v8 + v9);
  }
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v10 = a2->__position_.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  *(_OWORD *)&this->__position_.__match_.__unmatched_.matched = *(_OWORD *)&a2->__position_.__match_.__unmatched_.matched;
  this->__position_.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v10;
  long long v11 = *(_OWORD *)&a2->__position_.__match_.__prefix_.second.__i_;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v12 = a2->__position_.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  long long v13 = *(_OWORD *)&a2->__position_.__match_.__suffix_.matched;
  this->__position_.__match_.__position_start_.__i_ = a2->__position_.__match_.__position_start_.__i_;
  *(_OWORD *)&this->__position_.__match_.__suffix_.matched = v13;
  this->__position_.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v12;
  *(_OWORD *)&this->__position_.__match_.__prefix_.second.__i_ = v11;
  uint64_t v14 = a2->__result_;
  this->__result_ = v14;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v15 = a2->__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  *(void *)&this->__suffix_.matched = *(void *)&a2->__suffix_.matched;
  this->__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v15;
  ptrdiff_t n = a2->__n_;
  this->__subs_.__begin_ = 0;
  this->__n_ = n;
  this->__subs_.__end_ = 0;
  this->__subs_.__end_cap_.__value_ = 0;
  std::vector<int>::pointer v18 = a2->__subs_.__begin_;
  std::vector<int>::pointer v17 = a2->__subs_.__end_;
  int64_t v19 = (char *)v17 - (char *)v18;
  if (v17 == v18)
  {
    uint64_t v20 = 0;
    if (a2->__result_ != &a2->__suffix_) {
      goto LABEL_8;
    }
LABEL_14:
    p_suffix = &this->__suffix_;
LABEL_16:
    this->__result_ = p_suffix;
    return this;
  }
  if (v19 < 0) {
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v20 = (int *)operator new((char *)v17 - (char *)v18);
  this->__subs_.__begin_ = v20;
  this->__subs_.__end_ = v20;
  uint64_t v21 = &v20[v19 >> 2];
  this->__subs_.__end_cap_.__value_ = v21;
  memcpy(v20, v18, v19);
  this->__subs_.__end_ = v21;
  if (a2->__result_ == &a2->__suffix_) {
    goto LABEL_14;
  }
LABEL_8:
  if (v14)
  {
    unint64_t v22 = v20[n];
    if (v22 == -1)
    {
      p_suffix = &this->__position_.__match_.__prefix_;
    }
    else if (0xAAAAAAAAAAAAAAABLL * ((v25 - (char *)v8) >> 3) <= v22)
    {
      p_suffix = &this->__position_.__match_.__unmatched_;
    }
    else
    {
      p_suffix = &v8[(int)v22];
    }
    goto LABEL_16;
  }
  return this;
}

void sub_1A60CF3D4(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v1;
  if (*v1)
  {
    *(void *)(v2 + 192) = v5;
    operator delete(v5);
  }
  long long v6 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<ResetReasonEncoder::SubmatchInfo>::__init_with_size[abi:ne180100]<ResetReasonEncoder::SubmatchInfo*,ResetReasonEncoder::SubmatchInfo*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x38E38E38E38E38FLL) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v7 = result;
    double result = operator new(72 * a4);
    long long v8 = result;
    *int64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[9 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        double result = ResetReasonEncoder::SubmatchInfo::SubmatchInfo((std::string *)&v8[v9 / 8], (long long *)(a2 + v9));
        v9 += 72;
      }
      while (a2 + v9 != a3);
      long long v8 = (void *)((char *)v8 + v9);
    }
    v7[1] = v8;
  }
  return result;
}

void sub_1A60CF4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1A60CF4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 72)
  {
    while (1)
    {
      uint64_t v13 = v10 + v11;
      if (*(unsigned char *)(v10 + v11 - 8))
      {
        uint64_t v14 = *(void *)(v13 - 16);
        if (v13 - 40 == v14)
        {
          (*(void (**)(uint64_t))(*(void *)(v13 - 40) + 32))(v13 - 40);
        }
        else if (v14)
        {
          (*(void (**)(uint64_t))(*(void *)v14 + 40))(v14);
        }
      }
      if (*(char *)(v13 - 49) < 0) {
        break;
      }
      v11 -= 72;
      if (!v11) {
        goto LABEL_11;
      }
    }
    operator delete(*(void **)(v13 - 72));
  }
LABEL_11:
  *(void *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<ResetReasonEncoder::SubmatchInfo>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<ResetReasonEncoder::Mapping,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    long long v4 = *(void **)(a1 + 32);
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 40;
      do
      {
        while (1)
        {
          if (*(unsigned char *)(v3 - 8))
          {
            uint64_t v6 = *(void *)(v3 - 16);
            if (v3 - 40 == v6)
            {
              (*(void (**)(uint64_t))(*(void *)(v3 - 40) + 32))(v3 - 40);
            }
            else if (v6)
            {
              (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
            }
          }
          if (*(char *)(v3 - 49) < 0) {
            break;
          }
          v3 -= 72;
          v5 -= 72;
          if (v3 == v2) {
            goto LABEL_12;
          }
        }
        operator delete(*(void **)(v3 - 72));
        v3 -= 72;
        v5 -= 72;
      }
      while (v3 != v2);
LABEL_12:
      long long v4 = *(void **)(a1 + 32);
    }
    *(void *)(a1 + 40) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int64_t v7 = *(void **)a1;
    operator delete(v7);
  }
}

unsigned char *std::__optional_storage_base<std::function<std::string ()(std::string,std::string)>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::function<std::string ()(std::string,std::string)>,false> const&>(unsigned char *result, unsigned char *a2)
{
  uint64_t v2 = result;
  v9[3] = *MEMORY[0x1E4F143B8];
  if (result[32] == a2[32])
  {
    if (!result[32]) {
      return result;
    }
    uint64_t v3 = (unsigned char *)*((void *)a2 + 3);
    if (v3)
    {
      if (v3 == a2)
      {
        long long v8 = v7;
        (*(void (**)(unsigned char *, void *))(*(void *)a2 + 24))(a2, v7);
      }
      else
      {
        long long v8 = (void *)(*(uint64_t (**)(unsigned char *))(*(void *)v3 + 16))(v3);
      }
    }
    else
    {
      long long v8 = 0;
    }
    if (v7 != v2)
    {
      long long v4 = v8;
      uint64_t v5 = (void *)v2[3];
      if (v8 == v7)
      {
        if (v5 == v2)
        {
          memset(v9, 170, 24);
          (*(void (**)(void *, void *))(v7[0] + 24))(v7, v9);
          (*(void (**)(void *))(*v8 + 32))(v8);
          long long v8 = 0;
          (*(void (**)(void, void *))(*(void *)v2[3] + 24))(v2[3], v7);
          (*(void (**)(void))(*(void *)v2[3] + 32))(v2[3]);
          v2[3] = 0;
          long long v8 = v7;
          (*(void (**)(void *, void *))(v9[0] + 24))(v9, v2);
          (*(void (**)(void *))(v9[0] + 32))(v9);
          v2[3] = v2;
          double result = v8;
          if (v8 == v7) {
            return (unsigned char *)(*(uint64_t (**)(void *))(v7[0] + 32))(v7);
          }
        }
        else
        {
          (*(void (**)(void *, void *))(v7[0] + 24))(v7, v2);
          (*(void (**)(void *))(*v8 + 32))(v8);
          long long v8 = (void *)v2[3];
          uint64_t v6 = v8;
          v2[3] = v2;
          double result = v6;
          if (v6 == v7) {
            return (unsigned char *)(*(uint64_t (**)(void *))(v7[0] + 32))(v7);
          }
        }
LABEL_28:
        if (result) {
          return (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 40))(result);
        }
        return result;
      }
      if (v5 != v2)
      {
        long long v8 = (void *)v2[3];
        v2[3] = v4;
        double result = v5;
        if (v5 == v7) {
          return (unsigned char *)(*(uint64_t (**)(void *))(v7[0] + 32))(v7);
        }
        goto LABEL_28;
      }
      (*(void (**)(void *, void *))(*v2 + 24))(v2, v7);
      (*(void (**)(void))(*(void *)v2[3] + 32))(v2[3]);
      v2[3] = v8;
      long long v8 = v7;
    }
    double result = v8;
    if (v8 == v7) {
      return (unsigned char *)(*(uint64_t (**)(void *))(v7[0] + 32))(v7);
    }
    goto LABEL_28;
  }
  if (result[32])
  {
    double result = (unsigned char *)*((void *)result + 3);
    if (result == (unsigned char *)v2)
    {
      double result = (unsigned char *)(*(uint64_t (**)(void *))(*v2 + 32))(v2);
    }
    else if (result)
    {
      double result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 40))(result);
    }
    *((unsigned char *)v2 + 32) = 0;
  }
  else
  {
    double result = (unsigned char *)*((void *)a2 + 3);
    if (result)
    {
      if (result == a2)
      {
        v2[3] = v2;
        double result = (unsigned char *)(*(uint64_t (**)(void, void *))(**((void **)a2 + 3) + 24))(*((void *)a2 + 3), v2);
      }
      else
      {
        double result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 16))(result);
        v2[3] = result;
      }
    }
    else
    {
      v2[3] = 0;
    }
    *((unsigned char *)v2 + 32) = 1;
  }
  return result;
}

void sub_1A60CFB84(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exceptioptrdiff_t n = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F8] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA348], MEMORY[0x1E4FBA1F0]);
}

uint64_t std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  if (!*((unsigned char *)a1 + 16))
  {
    std::string v45 = 0;
    unint64_t v46 = 0;
    int64_t v47 = 0;
    if (*((unsigned char *)a2 + 16)) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v4 = *a1;
  uint64_t v3 = (char *)a1[1];
  unint64_t v5 = (unint64_t)&v3[-*a1];
  if (v5 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    HIBYTE(v47) = (_BYTE)v3 - *(unsigned char *)a1;
    uint64_t v6 = &v45;
    if ((char *)v4 != v3) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
  uint64_t v13 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v13 = v5 | 7;
  }
  uint64_t v14 = v13 + 1;
  uint64_t v6 = operator new(v13 + 1);
  unint64_t v46 = v5;
  int64_t v47 = v14 | 0x8000000000000000;
  std::string v45 = v6;
  if ((char *)v4 == v3)
  {
LABEL_16:
    *uint64_t v6 = 0;
    if (*((unsigned char *)a2 + 16)) {
      goto LABEL_21;
    }
LABEL_17:
    size_t v15 = 0;
    unint64_t v16 = 0;
    unsigned int v17 = 0;
    uint64_t v42 = 0;
    unint64_t v43 = 0;
    unint64_t v44 = 0;
    goto LABEL_37;
  }
LABEL_5:
  if (v5 < 0x20 || (unint64_t)&v6[-v4] < 0x20)
  {
    int64_t v7 = v6;
    long long v8 = (char *)v4;
    do
    {
LABEL_19:
      char v18 = *v8++;
      *v7++ = v18;
    }
    while (v8 != v3);
    goto LABEL_20;
  }
  int64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
  long long v8 = (char *)(v4 + (v5 & 0xFFFFFFFFFFFFFFE0));
  uint64_t v9 = (long long *)(v4 + 16);
  uint64_t v10 = v6 + 16;
  unint64_t v11 = v5 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v12 = *v9;
    *(v10 - 1) = *(v9 - 1);
    *uint64_t v10 = v12;
    v9 += 2;
    v10 += 2;
    v11 -= 32;
  }
  while (v11);
  if (v5 != (v5 & 0x7FFFFFFFFFFFFFE0)) {
    goto LABEL_19;
  }
LABEL_20:
  *int64_t v7 = 0;
  if (!*((unsigned char *)a2 + 16)) {
    goto LABEL_17;
  }
LABEL_21:
  uint64_t v20 = *a2;
  int64_t v19 = (char *)a2[1];
  unint64_t v21 = (unint64_t)&v19[-*a2];
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v21 > 0x16)
  {
    uint64_t v29 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v29 = v21 | 7;
    }
    uint64_t v30 = v29 + 1;
    unint64_t v22 = operator new(v29 + 1);
    unint64_t v43 = v21;
    unint64_t v44 = v30 | 0x8000000000000000;
    uint64_t v42 = v22;
    if ((char *)v20 != v19) {
      goto LABEL_24;
    }
LABEL_33:
    unint64_t v23 = v22;
    goto LABEL_36;
  }
  HIBYTE(v44) = (_BYTE)v19 - *(unsigned char *)a2;
  unint64_t v22 = &v42;
  if ((char *)v20 == v19) {
    goto LABEL_33;
  }
LABEL_24:
  if (v21 < 0x20 || (unint64_t)v22 - v20 < 0x20)
  {
    unint64_t v23 = v22;
    long long v24 = (char *)v20;
  }
  else
  {
    unint64_t v23 = (char *)v22 + (v21 & 0xFFFFFFFFFFFFFFE0);
    long long v24 = (char *)(v20 + (v21 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v25 = (long long *)(v20 + 16);
    uint64_t v26 = v22 + 2;
    unint64_t v27 = v21 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v28 = *v25;
      *(v26 - 1) = *(v25 - 1);
      _OWORD *v26 = v28;
      v25 += 2;
      v26 += 2;
      v27 -= 32;
    }
    while (v27);
    if (v21 == (v21 & 0x7FFFFFFFFFFFFFE0)) {
      goto LABEL_36;
    }
  }
  do
  {
    char v31 = *v24++;
    *v23++ = v31;
  }
  while (v24 != v19);
LABEL_36:
  *unint64_t v23 = 0;
  unsigned int v17 = HIBYTE(v44);
  unint64_t v16 = v42;
  size_t v15 = v43;
LABEL_37:
  int v32 = SHIBYTE(v47);
  std::__wrap_iter<const char *> v33 = v45;
  if (v47 >= 0) {
    size_t v34 = HIBYTE(v47);
  }
  else {
    size_t v34 = v46;
  }
  if (v47 >= 0) {
    uint64_t v35 = &v45;
  }
  else {
    uint64_t v35 = v45;
  }
  if ((v17 & 0x80u) == 0) {
    size_t v36 = v17;
  }
  else {
    size_t v36 = v15;
  }
  if ((v17 & 0x80u) == 0) {
    std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v37 = &v42;
  }
  else {
    std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v37 = v16;
  }
  if (v36 >= v34) {
    size_t v38 = v34;
  }
  else {
    size_t v38 = v36;
  }
  unsigned int v39 = memcmp(v35, v37, v38);
  if ((v17 & 0x80) != 0)
  {
    operator delete(v16);
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_54;
    }
  }
  else if ((v32 & 0x80000000) == 0)
  {
    goto LABEL_54;
  }
  operator delete(v33);
LABEL_54:
  unsigned int v40 = v36 < v34;
  if (v34 < v36) {
    unsigned int v40 = -1;
  }
  if (v39) {
    return v39;
  }
  else {
    return v40;
  }
}

void sub_1A60CFEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exceptioptrdiff_t n = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  operator delete(v1);
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(std::regex_iterator<std::__wrap_iter<const char *>, char> *this)
{
  p_match = &this->__match_;
  std::vector<std::ssub_match>::pointer begin = this->__match_.__matches_.__begin_;
  int i = (int)p_match[-1].__position_start_.__i_;
  unsigned __int32 flags = i | 0x800;
  LODWORD(p_match[-1].__position_start_.__i_) = i | 0x800;
  if (p_match->__matches_.__end_ == begin) {
    p_unmatched = &p_match->__unmatched_;
  }
  else {
    p_unmatched = begin;
  }
  int64_t v7 = (std::sub_match<const char *> *)p_unmatched->second.__i_;
  if ((std::sub_match<const char *> *)p_unmatched->first.__i_ != v7)
  {
LABEL_5:
    this->__flags_ = flags | 0x80;
    uint64_t v9 = (std::sub_match<const char *> *)this->__end_.__i_;
    pregex = this->__pregex_;
    *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v18 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v20 = 0xAAAAAAAAAAAAAA00;
    long long v22 = v10;
    uint64_t v19 = 0;
    long long v21 = 0uLL;
    LOBYTE(v22) = 0;
    BYTE8(v22) = 0;
    uint64_t v23 = 0;
    memset(__p, 0, sizeof(__p));
    char v11 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)pregex, v7, v9, (std::vector<std::csub_match> *)__p, flags | 0x80);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const char *>> *)v9, (uint64_t *)__p, (flags & 0x800) != 0);
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
    if ((v11 & 1) == 0)
    {
      std::vector<std::ssub_match>::pointer begin = p_match->__matches_.__begin_;
      if (!p_match->__matches_.__begin_)
      {
LABEL_10:
        this->__match_.__ready_ = 0;
        *(_OWORD *)&p_match->__matches_.__begin_ = 0u;
        *(_OWORD *)&p_match->__matches_.__end_cap_.__value_ = 0u;
        *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&p_match->__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                                     + 1) = 0u;
        this->__match_.__prefix_.first.__i_ = 0;
        this->__match_.__prefix_.second.__i_ = 0;
        this->__match_.__prefix_.matched = 0;
        this->__match_.__suffix_.first.__i_ = 0;
        this->__match_.__suffix_.second.__i_ = 0;
        this->__match_.__suffix_.matched = 0;
        this->__match_.__position_start_.__i_ = 0;
        return this;
      }
LABEL_9:
      this->__match_.__matches_.__end_ = begin;
      operator delete(begin);
      p_match->__matches_.__begin_ = 0;
      p_match->__matches_.__end_ = 0;
      p_match->__matches_.__end_cap_.__value_ = 0;
      goto LABEL_10;
    }
    return this;
  }
  uint64_t v13 = (std::sub_match<const char *> *)this->__end_.__i_;
  if (v13 == v7)
  {
    if (!begin) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v14 = this->__pregex_;
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v18 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v20 = 0xAAAAAAAAAAAAAA00;
  long long v22 = v15;
  uint64_t v19 = 0;
  long long v21 = 0uLL;
  LOBYTE(v22) = 0;
  BYTE8(v22) = 0;
  uint64_t v23 = 0;
  memset(__p, 0, sizeof(__p));
  char v16 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v14, v7, v13, (std::vector<std::csub_match> *)__p, i | 0x860u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const char *>> *)v13, (uint64_t *)__p, 1);
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  if ((v16 & 1) == 0)
  {
    int64_t v7 = (std::sub_match<const char *> *)((char *)v7 + 1);
    unsigned __int32 flags = this->__flags_;
    goto LABEL_5;
  }
  return this;
}

void sub_1A60D0104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_ResetReasonEncoder_cpp()
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&_MergedGlobals_3, "com.apple.telephony.abm", "ResetReasonEncoder");
  long long v98 = (char *)operator new(0x48uLL);
  long long v99 = xmmword_1A61F74B0;
  strcpy(v98, "AP forced coredump via SPMI - Please analyze reason from AP perspective");
  v100[0] = 0;
  v102[1] = 0;
  uint64_t v101 = 0;
  v102[0] = 0;
  std::string v103 = (char *)operator new(0x60uLL);
  long long v104 = xmmword_1A61F74C0;
  strcpy(v103, "ARI_CLI_ERR - All transaction IDs exhausted for msg\\(.*\\), for client\\(0[xX][0-9a-fA-F]+\\)");
  char v105 = 1;
  strcpy((char *)v87, "(msg\\(|\\), for client)");
  HIBYTE(v87[2]) = 22;
  int v88 = 0;
  LOBYTE(v89[0]) = 0;
  char v91 = 0;
  char v93 = 12;
  strcpy((char *)v92, "for client\\(");
  int v94 = 2;
  LOBYTE(v95[0]) = 0;
  char v97 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v106, (uint64_t)v87, 2uLL);
  size_t v107 = (char *)operator new(0x50uLL);
  long long v108 = xmmword_1A61F74D0;
  strcpy(v107, "ARI_CLI_ERR - Tracking receipt of unrecognized transaction 0[xX][0-9a-fA-F]+");
  char v109 = 2;
  uint64_t v81 = operator new(0x40uLL);
  long long v82 = xmmword_1A61F74E0;
  strcpy((char *)v81, "ARI_CLI_ERR - Tracking receipt of unrecognized transaction ");
  int v83 = 2;
  LOBYTE(v84[0]) = 0;
  char v86 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](&v110, (uint64_t)&v81, 1uLL);
  std::string v111 = (char *)operator new(0xA8uLL);
  long long v112 = xmmword_1A61F74F0;
  strcpy(v111, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\([0-9]+-[0-9a-fA-F]+\\) SZ\\([0-9]+\\) TRX\\(0x[0-9a-f]+\\) AP\\.SEQ\\(0x[0-9a-f]+\\).*");
  char v113 = 3;
  unint64_t v44 = operator new(0xB0uLL);
  long long v45 = xmmword_1A61F7500;
  strcpy((char *)v44, "(ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\(([a-zA-Z]+\\.){0,}|\\) [0-9a-zA-Z]+\\([0-9]+-[0-9a-fA-F]+\\) SZ\\([0-9]+\\) TRX\\(0x[0-9a-f]+\\) AP\\.SEQ\\(0x[0-9a-f]+\\).*)");
  int v46 = 0;
  LOBYTE(v47[0]) = 0;
  char v49 = 0;
  uint64_t v50 = operator new(0x68uLL);
  long long v51 = xmmword_1A61F7510;
  strcpy((char *)v50, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\(|-[0-9a-fA-F]+\\).*");
  int v52 = 1;
  LOBYTE(v53) = 0;
  char v55 = 0;
  long long v56 = operator new(0x60uLL);
  long long v57 = xmmword_1A61F7520;
  strcpy((char *)v56, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\([0-9]+-|\\).*");
  int v58 = 2;
  LOBYTE(v59[0]) = 0;
  char v61 = 0;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v62 = operator new(0xA0uLL);
  long long v63 = xmmword_1A61F7530;
  strcpy((char *)v62, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\([0-9]+-[0-9a-fA-F]+\\) SZ\\(|\\) TRX\\(0x[0-9a-f]+\\) AP\\.SEQ\\(0x[0-9a-f]+\\).*");
  int v64 = 1;
  LOBYTE(v65[0]) = 0;
  char v67 = 0;
  unint64_t v70 = 0x8000000000000098;
  unint64_t v68 = operator new(0x98uLL);
  uint64_t v69 = 151;
  strcpy((char *)v68, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\([0-9]+-[0-9a-fA-F]+\\) SZ\\([0-9]+\\) TRX\\(|\\) AP\\.SEQ\\(0x[0-9a-f]+\\).*");
  int v71 = 2;
  LOBYTE(v72[0]) = 0;
  char v74 = 0;
  long long v75 = operator new(0x98uLL);
  long long v76 = xmmword_1A61F7540;
  strcpy((char *)v75, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\([0-9]+-[0-9a-fA-F]+\\) SZ\\([0-9]+\\) TRX\\(0x[0-9a-f]+\\) AP\\.SEQ\\(|\\).*");
  int v77 = 2;
  LOBYTE(v78[0]) = 0;
  char v80 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v114, (uint64_t)&v44, 6uLL);
  int32x2_t v115 = (char *)operator new(0x40uLL);
  long long v116 = xmmword_1A61F7550;
  strcpy(v115, "Baseband got stuck in data context .* state: resetting baseband");
  char v117 = 4;
  size_t v38 = operator new(0x48uLL);
  long long v39 = xmmword_1A61F7560;
  strcpy((char *)v38, "(Baseband got stuck in data context | state: resetting baseband)");
  int v40 = 0;
  LOBYTE(v41) = 0;
  char v43 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](&v118, (uint64_t)&v38, 1uLL);
  std::string v119 = (char *)operator new(0x20uLL);
  long long v120 = xmmword_1A61F7570;
  strcpy(v119, "Baseband ARI engage timeout");
  char v121 = 5;
  uint64_t v124 = 0;
  uint64_t v122 = 0;
  uint64_t v123 = 0;
  uint64_t v0 = (char *)operator new(0x38uLL);
  unint64_t v127 = 0x8000000000000038;
  unint64_t v125 = v0;
  uint64_t v126 = 55;
  strcpy(v0, "Failed to open transport to communicate with baseband.*");
  char v128 = 6;
  uint64_t v131 = 0;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  long long v132 = (char *)operator new(0x20uLL);
  long long v133 = xmmword_1A61F6FD0;
  strcpy(v132, "PCI-EVENT: pci error: .*");
  char v134 = 7;
  strcpy((char *)v33, "PCI-EVENT: pci error: ");
  HIBYTE(v33[2]) = 22;
  int v34 = 0;
  LOBYTE(v35[0]) = 0;
  char v37 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v135, (uint64_t)v33, 1uLL);
  uint64_t v1 = (char *)operator new(0x40uLL);
  v135[5] = 0x8000000000000040;
  v135[3] = v1;
  v135[4] = 62;
  strcpy(v1, "filesystem flush operation failed -- check ARI and BB state --");
  char v136 = 8;
  uint64_t v139 = 0;
  uint64_t v137 = 0;
  uint64_t v138 = 0;
  long long v140 = (char *)operator new(0x20uLL);
  long long v141 = xmmword_1A61F7580;
  strcpy(v140, "modem boot up failure \\[.+\\]");
  char v142 = 9;
  unint64_t v27 = operator new(0x19uLL);
  long long v28 = xmmword_1A61F7590;
  strcpy((char *)v27, "BBUpdater error  [0-9]+");
  int v29 = 1;
  v30[0] = &unk_1EFB09768;
  char v31 = v30;
  char v32 = 1;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v143, (uint64_t)&v27, 1uLL);
  __int16 v145 = 2574;
  strcpy(v144, "^\\[abmtool\\].*");
  char v22 = 13;
  strcpy((char *)v21, "^\\[abmtool\\] ");
  int v23 = 0;
  LOBYTE(v24[0]) = 0;
  char v26 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v146, (uint64_t)v21, 1uLL);
  __int16 v148 = 2829;
  strcpy(v147, "^\\[bbutil\\].*");
  char v16 = 12;
  strcpy((char *)__p, "^\\[bbutil\\] ");
  int v17 = 0;
  LOBYTE(v18[0]) = 0;
  char v20 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v149, (uint64_t)__p, 1uLL);
  qword_1EB5EE868 = 0;
  qword_1EB5EE870 = 0;
  qword_1EB5EE878 = 0;
  uint64_t v2 = (char *)operator new(0x2A0uLL);
  uint64_t v3 = 0;
  qword_1EB5EE868 = (uint64_t)v2;
  qword_1EB5EE870 = (uint64_t)v2;
  qword_1EB5EE878 = (uint64_t)(v2 + 672);
  uint64_t v4 = &v150;
  do
  {
    unint64_t v5 = (std::string *)&v2[v3 * 8];
    uint64_t v6 = &(&v98)[v3];
    if ((char)v100[v3 * 8 - 1] < 0)
    {
      std::string::__init_copy_ctor_external(v5, *v6, (std::string::size_type)v6[1]);
    }
    else
    {
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
      v5->__r_.__value_.__r.__words[2] = (std::string::size_type)v6[2];
    }
    char v7 = v100[v3 * 8];
    *(void *)&v2[v3 * 8 + 32] = 0;
    long long v8 = &v2[v3 * 8 + 32];
    *(v8 - 8) = v7;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
    std::vector<ResetReasonEncoder::SubmatchInfo>::__init_with_size[abi:ne180100]<ResetReasonEncoder::SubmatchInfo*,ResetReasonEncoder::SubmatchInfo*>(v8, v102[v3 - 1], v102[v3], 0x8E38E38E38E38E39 * ((v102[v3] - v102[v3 - 1]) >> 3));
    v3 += 7;
  }
  while (v3 != 84);
  qword_1EB5EE870 = (uint64_t)(v2 + 672);
  do
  {
    uint64_t v9 = *(v4 - 3);
    if (v9)
    {
      uint64_t v10 = *(v4 - 2);
      char v11 = (void *)*(v4 - 3);
      if (v10 != v9)
      {
        uint64_t v12 = v10 - 40;
        do
        {
          while (1)
          {
            if (*(unsigned char *)(v10 - 8))
            {
              uint64_t v13 = *(void *)(v10 - 16);
              if (v10 - 40 == v13)
              {
                (*(void (**)(uint64_t))(*(void *)(v10 - 40) + 32))(v10 - 40);
              }
              else if (v13)
              {
                (*(void (**)(uint64_t))(*(void *)v13 + 40))(v13);
              }
            }
            if (*(char *)(v10 - 49) < 0) {
              break;
            }
            v10 -= 72;
            v12 -= 72;
            if (v10 == v9) {
              goto LABEL_19;
            }
          }
          operator delete(*(void **)(v10 - 72));
          v10 -= 72;
          v12 -= 72;
        }
        while (v10 != v9);
LABEL_19:
        char v11 = (void *)*(v4 - 3);
      }
      *(v4 - 2) = v9;
      operator delete(v11);
    }
    uint64_t v14 = (void **)(v4 - 7);
    if (*((char *)v4 - 33) < 0) {
      operator delete(*v14);
    }
    v4 -= 7;
  }
  while (v14 != (void **)&v98);
  if (!v20)
  {
LABEL_27:
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (v19 != v18)
  {
    if (v19) {
      (*(void (**)(void))(*v19 + 40))();
    }
    goto LABEL_27;
  }
  (*(void (**)(void *))(v18[0] + 32))(v18);
  if (v16 < 0) {
LABEL_28:
  }
    operator delete(__p[0]);
LABEL_29:
  if (!v26) {
    goto LABEL_33;
  }
  if (v25 != v24)
  {
    if (v25) {
      (*(void (**)(void))(*v25 + 40))();
    }
LABEL_33:
    if ((v22 & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  (*(void (**)(void *))(v24[0] + 32))(v24);
  if (v22 < 0) {
LABEL_34:
  }
    operator delete(v21[0]);
LABEL_35:
  if (!v32) {
    goto LABEL_39;
  }
  if (v31 != v30)
  {
    if (v31) {
      (*(void (**)(void))(*v31 + 40))();
    }
LABEL_39:
    if ((SHIBYTE(v28) & 0x80000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  (*(void (**)(void *))(v30[0] + 32))(v30);
  if (SHIBYTE(v28) < 0) {
LABEL_40:
  }
    operator delete(v27);
LABEL_41:
  if (!v37) {
    goto LABEL_45;
  }
  if (v36 != v35)
  {
    if (v36) {
      (*(void (**)(void))(*v36 + 40))();
    }
LABEL_45:
    if ((SHIBYTE(v33[2]) & 0x80000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  (*(void (**)(void *))(v35[0] + 32))(v35);
  if (SHIBYTE(v33[2]) < 0) {
LABEL_46:
  }
    operator delete(v33[0]);
LABEL_47:
  if (!v43) {
    goto LABEL_51;
  }
  if (v42 != &v41)
  {
    if (v42) {
      (*(void (**)(void))(*v42 + 40))();
    }
LABEL_51:
    if ((SHIBYTE(v39) & 0x80000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  (*(void (**)(uint64_t *))(v41 + 32))(&v41);
  if (SHIBYTE(v39) < 0) {
LABEL_52:
  }
    operator delete(v38);
LABEL_53:
  if (!v80) {
    goto LABEL_57;
  }
  if (v79 != v78)
  {
    if (v79) {
      (*(void (**)(void))(*v79 + 40))();
    }
LABEL_57:
    if ((SHIBYTE(v76) & 0x80000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  (*(void (**)(void *))(v78[0] + 32))(v78);
  if (SHIBYTE(v76) < 0) {
LABEL_58:
  }
    operator delete(v75);
LABEL_59:
  if (!v74) {
    goto LABEL_63;
  }
  if (v73 != v72)
  {
    if (v73) {
      (*(void (**)(void))(*v73 + 40))();
    }
LABEL_63:
    if ((SHIBYTE(v70) & 0x80000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  (*(void (**)(void *))(v72[0] + 32))(v72);
  if (SHIBYTE(v70) < 0) {
LABEL_64:
  }
    operator delete(v68);
LABEL_65:
  if (!v67) {
    goto LABEL_69;
  }
  if (v66 != v65)
  {
    if (v66) {
      (*(void (**)(void))(*v66 + 40))();
    }
LABEL_69:
    if ((SHIBYTE(v63) & 0x80000000) == 0) {
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  (*(void (**)(void *))(v65[0] + 32))(v65);
  if (SHIBYTE(v63) < 0) {
LABEL_70:
  }
    operator delete(v62);
LABEL_71:
  if (!v61) {
    goto LABEL_75;
  }
  if (v60 != v59)
  {
    if (v60) {
      (*(void (**)(void))(*v60 + 40))();
    }
LABEL_75:
    if ((SHIBYTE(v57) & 0x80000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  (*(void (**)(void *))(v59[0] + 32))(v59);
  if (SHIBYTE(v57) < 0) {
LABEL_76:
  }
    operator delete(v56);
LABEL_77:
  if (!v55) {
    goto LABEL_81;
  }
  if (v54 != &v53)
  {
    if (v54) {
      (*(void (**)(void))(*v54 + 40))();
    }
LABEL_81:
    if ((SHIBYTE(v51) & 0x80000000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_82;
  }
  (*(void (**)(uint64_t *))(v53 + 32))(&v53);
  if (SHIBYTE(v51) < 0) {
LABEL_82:
  }
    operator delete(v50);
LABEL_83:
  if (!v49) {
    goto LABEL_87;
  }
  if (v48 != v47)
  {
    if (v48) {
      (*(void (**)(void))(*v48 + 40))();
    }
LABEL_87:
    if ((SHIBYTE(v45) & 0x80000000) == 0) {
      goto LABEL_89;
    }
    goto LABEL_88;
  }
  (*(void (**)(void *))(v47[0] + 32))(v47);
  if (SHIBYTE(v45) < 0) {
LABEL_88:
  }
    operator delete(v44);
LABEL_89:
  if (!v86) {
    goto LABEL_93;
  }
  if (v85 != v84)
  {
    if (v85) {
      (*(void (**)(void))(*v85 + 40))();
    }
LABEL_93:
    if ((SHIBYTE(v82) & 0x80000000) == 0) {
      goto LABEL_95;
    }
    goto LABEL_94;
  }
  (*(void (**)(void *))(v84[0] + 32))(v84);
  if (SHIBYTE(v82) < 0) {
LABEL_94:
  }
    operator delete(v81);
LABEL_95:
  if (!v97) {
    goto LABEL_99;
  }
  if (v96 != v95)
  {
    if (v96) {
      (*(void (**)(void))(*v96 + 40))();
    }
LABEL_99:
    if ((v93 & 0x80000000) == 0) {
      goto LABEL_101;
    }
    goto LABEL_100;
  }
  (*(void (**)(void *))(v95[0] + 32))(v95);
  if (v93 < 0) {
LABEL_100:
  }
    operator delete(v92[0]);
LABEL_101:
  if (!v91) {
    goto LABEL_105;
  }
  if (v90 != v89)
  {
    if (v90) {
      (*(void (**)(void))(*v90 + 40))();
    }
LABEL_105:
    if ((SHIBYTE(v87[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_106;
  }
  (*(void (**)(void *))(v89[0] + 32))(v89);
  if (SHIBYTE(v87[2]) < 0) {
LABEL_106:
  }
    operator delete(v87[0]);
}

void sub_1A60D139C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  unint64_t v81 = STACK[0x6F0];
  if (STACK[0x6F0])
  {
    unint64_t v93 = STACK[0x6F8];
    int v94 = (void *)STACK[0x6F0];
    if (STACK[0x6F8] != v81)
    {
      unint64_t v95 = v93 - 40;
      do
      {
        while (1)
        {
          if (*(unsigned char *)(v93 - 8))
          {
            uint64_t v96 = *(void *)(v93 - 16);
            if (v93 - 40 == v96)
            {
              (*(void (**)(unint64_t))(*(void *)(v93 - 40) + 32))(v93 - 40);
            }
            else if (v96)
            {
              (*(void (**)(uint64_t))(*(void *)v96 + 40))(v96);
            }
          }
          if (*(char *)(v93 - 49) < 0) {
            break;
          }
          v93 -= 72;
          v95 -= 72;
          if (v93 == v81) {
            goto LABEL_37;
          }
        }
        operator delete(*(void **)(v93 - 72));
        v93 -= 72;
        v95 -= 72;
      }
      while (v93 != v81);
LABEL_37:
      int v94 = (void *)STACK[0x6F0];
    }
    STACK[0x6F8] = v81;
    operator delete(v94);
    if ((SLOBYTE(STACK[0x6E7]) & 0x80000000) == 0)
    {
LABEL_3:
      unint64_t v82 = STACK[0x6B8];
      if (!STACK[0x6B8]) {
        goto LABEL_4;
      }
      goto LABEL_40;
    }
  }
  else if ((SLOBYTE(STACK[0x6E7]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x6D0]);
  unint64_t v82 = STACK[0x6B8];
  if (!STACK[0x6B8])
  {
LABEL_4:
    if ((SLOBYTE(STACK[0x6AF]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_52;
  }
LABEL_40:
  unint64_t v97 = STACK[0x6C0];
  long long v98 = (void *)v82;
  if (STACK[0x6C0] != v82)
  {
    unint64_t v99 = v97 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v97 - 8))
        {
          uint64_t v100 = *(void *)(v97 - 16);
          if (v97 - 40 == v100)
          {
            (*(void (**)(unint64_t))(*(void *)(v97 - 40) + 32))(v97 - 40);
          }
          else if (v100)
          {
            (*(void (**)(uint64_t))(*(void *)v100 + 40))(v100);
          }
        }
        if (*(char *)(v97 - 49) < 0) {
          break;
        }
        v97 -= 72;
        v99 -= 72;
        if (v97 == v82) {
          goto LABEL_50;
        }
      }
      operator delete(*(void **)(v97 - 72));
      v97 -= 72;
      v99 -= 72;
    }
    while (v97 != v82);
LABEL_50:
    long long v98 = (void *)STACK[0x6B8];
  }
  STACK[0x6C0] = v82;
  operator delete(v98);
  if ((SLOBYTE(STACK[0x6AF]) & 0x80000000) == 0)
  {
LABEL_5:
    unint64_t v83 = STACK[0x680];
    if (!STACK[0x680]) {
      goto LABEL_6;
    }
    goto LABEL_53;
  }
LABEL_52:
  operator delete((void *)STACK[0x698]);
  unint64_t v83 = STACK[0x680];
  if (!STACK[0x680])
  {
LABEL_6:
    if ((SLOBYTE(STACK[0x677]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_65;
  }
LABEL_53:
  unint64_t v101 = STACK[0x688];
  int64_t v102 = (void *)v83;
  if (STACK[0x688] != v83)
  {
    unint64_t v103 = v101 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v101 - 8))
        {
          uint64_t v104 = *(void *)(v101 - 16);
          if (v101 - 40 == v104)
          {
            (*(void (**)(unint64_t))(*(void *)(v101 - 40) + 32))(v101 - 40);
          }
          else if (v104)
          {
            (*(void (**)(uint64_t))(*(void *)v104 + 40))(v104);
          }
        }
        if (*(char *)(v101 - 49) < 0) {
          break;
        }
        v101 -= 72;
        v103 -= 72;
        if (v101 == v83) {
          goto LABEL_63;
        }
      }
      operator delete(*(void **)(v101 - 72));
      v101 -= 72;
      v103 -= 72;
    }
    while (v101 != v83);
LABEL_63:
    int64_t v102 = (void *)STACK[0x680];
  }
  STACK[0x688] = v83;
  operator delete(v102);
  if ((SLOBYTE(STACK[0x677]) & 0x80000000) == 0)
  {
LABEL_7:
    unint64_t v84 = STACK[0x648];
    if (!STACK[0x648]) {
      goto LABEL_8;
    }
    goto LABEL_66;
  }
LABEL_65:
  operator delete((void *)STACK[0x660]);
  unint64_t v84 = STACK[0x648];
  if (!STACK[0x648])
  {
LABEL_8:
    if ((SLOBYTE(STACK[0x63F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_78;
  }
LABEL_66:
  unint64_t v105 = STACK[0x650];
  std::string v106 = (void *)v84;
  if (STACK[0x650] != v84)
  {
    unint64_t v107 = v105 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v105 - 8))
        {
          uint64_t v108 = *(void *)(v105 - 16);
          if (v105 - 40 == v108)
          {
            (*(void (**)(unint64_t))(*(void *)(v105 - 40) + 32))(v105 - 40);
          }
          else if (v108)
          {
            (*(void (**)(uint64_t))(*(void *)v108 + 40))(v108);
          }
        }
        if (*(char *)(v105 - 49) < 0) {
          break;
        }
        v105 -= 72;
        v107 -= 72;
        if (v105 == v84) {
          goto LABEL_76;
        }
      }
      operator delete(*(void **)(v105 - 72));
      v105 -= 72;
      v107 -= 72;
    }
    while (v105 != v84);
LABEL_76:
    std::string v106 = (void *)STACK[0x648];
  }
  STACK[0x650] = v84;
  operator delete(v106);
  if ((SLOBYTE(STACK[0x63F]) & 0x80000000) == 0)
  {
LABEL_9:
    unint64_t v85 = STACK[0x610];
    if (!STACK[0x610]) {
      goto LABEL_10;
    }
    goto LABEL_79;
  }
LABEL_78:
  operator delete((void *)STACK[0x628]);
  unint64_t v85 = STACK[0x610];
  if (!STACK[0x610])
  {
LABEL_10:
    if ((SLOBYTE(STACK[0x607]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_91;
  }
LABEL_79:
  unint64_t v109 = STACK[0x618];
  uint64_t v110 = (void *)v85;
  if (STACK[0x618] != v85)
  {
    unint64_t v111 = v109 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v109 - 8))
        {
          uint64_t v112 = *(void *)(v109 - 16);
          if (v109 - 40 == v112)
          {
            (*(void (**)(unint64_t))(*(void *)(v109 - 40) + 32))(v109 - 40);
          }
          else if (v112)
          {
            (*(void (**)(uint64_t))(*(void *)v112 + 40))(v112);
          }
        }
        if (*(char *)(v109 - 49) < 0) {
          break;
        }
        v109 -= 72;
        v111 -= 72;
        if (v109 == v85) {
          goto LABEL_89;
        }
      }
      operator delete(*(void **)(v109 - 72));
      v109 -= 72;
      v111 -= 72;
    }
    while (v109 != v85);
LABEL_89:
    uint64_t v110 = (void *)STACK[0x610];
  }
  STACK[0x618] = v85;
  operator delete(v110);
  if ((SLOBYTE(STACK[0x607]) & 0x80000000) == 0)
  {
LABEL_11:
    unint64_t v86 = STACK[0x5D8];
    if (!STACK[0x5D8]) {
      goto LABEL_12;
    }
    goto LABEL_92;
  }
LABEL_91:
  operator delete((void *)STACK[0x5F0]);
  unint64_t v86 = STACK[0x5D8];
  if (!STACK[0x5D8])
  {
LABEL_12:
    if ((SLOBYTE(STACK[0x5CF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_104;
  }
LABEL_92:
  unint64_t v113 = STACK[0x5E0];
  long long v114 = (void *)v86;
  if (STACK[0x5E0] != v86)
  {
    unint64_t v115 = v113 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v113 - 8))
        {
          uint64_t v116 = *(void *)(v113 - 16);
          if (v113 - 40 == v116)
          {
            (*(void (**)(unint64_t))(*(void *)(v113 - 40) + 32))(v113 - 40);
          }
          else if (v116)
          {
            (*(void (**)(uint64_t))(*(void *)v116 + 40))(v116);
          }
        }
        if (*(char *)(v113 - 49) < 0) {
          break;
        }
        v113 -= 72;
        v115 -= 72;
        if (v113 == v86) {
          goto LABEL_102;
        }
      }
      operator delete(*(void **)(v113 - 72));
      v113 -= 72;
      v115 -= 72;
    }
    while (v113 != v86);
LABEL_102:
    long long v114 = (void *)STACK[0x5D8];
  }
  STACK[0x5E0] = v86;
  operator delete(v114);
  if ((SLOBYTE(STACK[0x5CF]) & 0x80000000) == 0)
  {
LABEL_13:
    unint64_t v87 = STACK[0x5A0];
    if (!STACK[0x5A0]) {
      goto LABEL_14;
    }
    goto LABEL_105;
  }
LABEL_104:
  operator delete((void *)STACK[0x5B8]);
  unint64_t v87 = STACK[0x5A0];
  if (!STACK[0x5A0])
  {
LABEL_14:
    if ((SLOBYTE(STACK[0x597]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_117;
  }
LABEL_105:
  unint64_t v117 = STACK[0x5A8];
  uint64_t v118 = (void *)v87;
  if (STACK[0x5A8] != v87)
  {
    unint64_t v119 = v117 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v117 - 8))
        {
          uint64_t v120 = *(void *)(v117 - 16);
          if (v117 - 40 == v120)
          {
            (*(void (**)(unint64_t))(*(void *)(v117 - 40) + 32))(v117 - 40);
          }
          else if (v120)
          {
            (*(void (**)(uint64_t))(*(void *)v120 + 40))(v120);
          }
        }
        if (*(char *)(v117 - 49) < 0) {
          break;
        }
        v117 -= 72;
        v119 -= 72;
        if (v117 == v87) {
          goto LABEL_115;
        }
      }
      operator delete(*(void **)(v117 - 72));
      v117 -= 72;
      v119 -= 72;
    }
    while (v117 != v87);
LABEL_115:
    uint64_t v118 = (void *)STACK[0x5A0];
  }
  STACK[0x5A8] = v87;
  operator delete(v118);
  if ((SLOBYTE(STACK[0x597]) & 0x80000000) == 0)
  {
LABEL_15:
    unint64_t v88 = STACK[0x568];
    if (!STACK[0x568]) {
      goto LABEL_16;
    }
    goto LABEL_118;
  }
LABEL_117:
  operator delete((void *)STACK[0x580]);
  unint64_t v88 = STACK[0x568];
  if (!STACK[0x568])
  {
LABEL_16:
    if ((SLOBYTE(STACK[0x55F]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_130;
  }
LABEL_118:
  unint64_t v121 = STACK[0x570];
  uint64_t v122 = (void *)v88;
  if (STACK[0x570] != v88)
  {
    unint64_t v123 = v121 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v121 - 8))
        {
          uint64_t v124 = *(void *)(v121 - 16);
          if (v121 - 40 == v124)
          {
            (*(void (**)(unint64_t))(*(void *)(v121 - 40) + 32))(v121 - 40);
          }
          else if (v124)
          {
            (*(void (**)(uint64_t))(*(void *)v124 + 40))(v124);
          }
        }
        if (*(char *)(v121 - 49) < 0) {
          break;
        }
        v121 -= 72;
        v123 -= 72;
        if (v121 == v88) {
          goto LABEL_128;
        }
      }
      operator delete(*(void **)(v121 - 72));
      v121 -= 72;
      v123 -= 72;
    }
    while (v121 != v88);
LABEL_128:
    uint64_t v122 = (void *)STACK[0x568];
  }
  STACK[0x570] = v88;
  operator delete(v122);
  if ((SLOBYTE(STACK[0x55F]) & 0x80000000) == 0)
  {
LABEL_17:
    unint64_t v89 = STACK[0x530];
    if (!STACK[0x530]) {
      goto LABEL_18;
    }
    goto LABEL_131;
  }
LABEL_130:
  operator delete((void *)STACK[0x548]);
  unint64_t v89 = STACK[0x530];
  if (!STACK[0x530])
  {
LABEL_18:
    if ((SLOBYTE(STACK[0x527]) & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_143;
  }
LABEL_131:
  unint64_t v125 = STACK[0x538];
  uint64_t v126 = (void *)v89;
  if (STACK[0x538] != v89)
  {
    unint64_t v127 = v125 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v125 - 8))
        {
          uint64_t v128 = *(void *)(v125 - 16);
          if (v125 - 40 == v128)
          {
            (*(void (**)(unint64_t))(*(void *)(v125 - 40) + 32))(v125 - 40);
          }
          else if (v128)
          {
            (*(void (**)(uint64_t))(*(void *)v128 + 40))(v128);
          }
        }
        if (*(char *)(v125 - 49) < 0) {
          break;
        }
        v125 -= 72;
        v127 -= 72;
        if (v125 == v89) {
          goto LABEL_141;
        }
      }
      operator delete(*(void **)(v125 - 72));
      v125 -= 72;
      v127 -= 72;
    }
    while (v125 != v89);
LABEL_141:
    uint64_t v126 = (void *)STACK[0x530];
  }
  STACK[0x538] = v89;
  operator delete(v126);
  if ((SLOBYTE(STACK[0x527]) & 0x80000000) == 0)
  {
LABEL_19:
    unint64_t v90 = STACK[0x4F8];
    if (!STACK[0x4F8]) {
      goto LABEL_20;
    }
    goto LABEL_144;
  }
LABEL_143:
  operator delete((void *)STACK[0x510]);
  unint64_t v90 = STACK[0x4F8];
  if (!STACK[0x4F8])
  {
LABEL_20:
    if ((SLOBYTE(STACK[0x4EF]) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_156;
  }
LABEL_144:
  unint64_t v129 = STACK[0x500];
  uint64_t v130 = (void *)v90;
  if (STACK[0x500] != v90)
  {
    unint64_t v131 = v129 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v129 - 8))
        {
          uint64_t v132 = *(void *)(v129 - 16);
          if (v129 - 40 == v132)
          {
            (*(void (**)(unint64_t))(*(void *)(v129 - 40) + 32))(v129 - 40);
          }
          else if (v132)
          {
            (*(void (**)(uint64_t))(*(void *)v132 + 40))(v132);
          }
        }
        if (*(char *)(v129 - 49) < 0) {
          break;
        }
        v129 -= 72;
        v131 -= 72;
        if (v129 == v90) {
          goto LABEL_154;
        }
      }
      operator delete(*(void **)(v129 - 72));
      v129 -= 72;
      v131 -= 72;
    }
    while (v129 != v90);
LABEL_154:
    uint64_t v130 = (void *)STACK[0x4F8];
  }
  STACK[0x500] = v90;
  operator delete(v130);
  if ((SLOBYTE(STACK[0x4EF]) & 0x80000000) == 0)
  {
LABEL_21:
    unint64_t v91 = STACK[0x4C0];
    if (!STACK[0x4C0]) {
      goto LABEL_22;
    }
    goto LABEL_157;
  }
LABEL_156:
  operator delete((void *)STACK[0x4D8]);
  unint64_t v91 = STACK[0x4C0];
  if (!STACK[0x4C0])
  {
LABEL_22:
    if ((SLOBYTE(STACK[0x4B7]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_169;
  }
LABEL_157:
  unint64_t v133 = STACK[0x4C8];
  char v134 = (void *)v91;
  if (STACK[0x4C8] != v91)
  {
    unint64_t v135 = v133 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v133 - 8))
        {
          uint64_t v136 = *(void *)(v133 - 16);
          if (v133 - 40 == v136)
          {
            (*(void (**)(unint64_t))(*(void *)(v133 - 40) + 32))(v133 - 40);
          }
          else if (v136)
          {
            (*(void (**)(uint64_t))(*(void *)v136 + 40))(v136);
          }
        }
        if (*(char *)(v133 - 49) < 0) {
          break;
        }
        v133 -= 72;
        v135 -= 72;
        if (v133 == v91) {
          goto LABEL_167;
        }
      }
      operator delete(*(void **)(v133 - 72));
      v133 -= 72;
      v135 -= 72;
    }
    while (v133 != v91);
LABEL_167:
    char v134 = (void *)STACK[0x4C0];
  }
  STACK[0x4C8] = v91;
  operator delete(v134);
  if ((SLOBYTE(STACK[0x4B7]) & 0x80000000) == 0)
  {
LABEL_23:
    unint64_t v92 = STACK[0x488];
    if (!STACK[0x488]) {
      goto LABEL_24;
    }
    goto LABEL_170;
  }
LABEL_169:
  operator delete((void *)STACK[0x4A0]);
  unint64_t v92 = STACK[0x488];
  if (!STACK[0x488])
  {
LABEL_24:
    if ((SLOBYTE(STACK[0x47F]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_182;
  }
LABEL_170:
  unint64_t v137 = STACK[0x490];
  uint64_t v138 = (void *)v92;
  if (STACK[0x490] != v92)
  {
    unint64_t v139 = v137 - 40;
    do
    {
      while (1)
      {
        if (*(unsigned char *)(v137 - 8))
        {
          uint64_t v140 = *(void *)(v137 - 16);
          if (v137 - 40 == v140)
          {
            (*(void (**)(unint64_t))(*(void *)(v137 - 40) + 32))(v137 - 40);
          }
          else if (v140)
          {
            (*(void (**)(uint64_t))(*(void *)v140 + 40))(v140);
          }
        }
        if (*(char *)(v137 - 49) < 0) {
          break;
        }
        v137 -= 72;
        v139 -= 72;
        if (v137 == v92) {
          goto LABEL_180;
        }
      }
      operator delete(*(void **)(v137 - 72));
      v137 -= 72;
      v139 -= 72;
    }
    while (v137 != v92);
LABEL_180:
    uint64_t v138 = (void *)STACK[0x488];
  }
  STACK[0x490] = v92;
  operator delete(v138);
  if ((SLOBYTE(STACK[0x47F]) & 0x80000000) == 0)
  {
LABEL_25:
    if (!a33) {
      goto LABEL_187;
    }
    goto LABEL_183;
  }
LABEL_182:
  operator delete((void *)STACK[0x468]);
  if (!a33) {
    goto LABEL_187;
  }
LABEL_183:
  if (a32 == v79)
  {
    (*(void (**)(uint64_t))(a29 + 32))(v79);
  }
  else if (a32)
  {
    (*(void (**)(void))(*(void *)a32 + 40))();
  }
LABEL_187:
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a45)
  {
    if (a44 == a10)
    {
      (*(void (**)(void))(a41 + 32))();
    }
    else if (a44)
    {
      (*(void (**)(void))(*(void *)a44 + 40))();
    }
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a57)
  {
    if (a56 == v78)
    {
      (*(void (**)(uint64_t))(a53 + 32))(v78);
    }
    else if (a56)
    {
      (*(void (**)(void))(*(void *)a56 + 40))();
    }
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a69)
  {
    if (a68 == a11)
    {
      (*(void (**)(void))(a65 + 32))();
    }
    else if (a68)
    {
      (*(void (**)(void))(*(void *)a68 + 40))();
    }
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a75)
  {
    if (a74 == a12)
    {
      (*(void (**)(void))(a73 + 32))();
    }
    else if (a74)
    {
      (*(void (**)(void))(*(void *)a74 + 40))();
    }
  }
  if (a72 < 0) {
    operator delete(a71);
  }
  if (LOBYTE(STACK[0x380]))
  {
    unint64_t v141 = STACK[0x378];
    if (STACK[0x378] == a13)
    {
      (*(void (**)(void))(STACK[0x360] + 32))();
    }
    else if (v141)
    {
      (*(void (**)(unint64_t))(*(void *)v141 + 40))(v141);
    }
  }
  if (SLOBYTE(STACK[0x357]) < 0) {
    operator delete((void *)STACK[0x340]);
  }
  if (LOBYTE(STACK[0x338]))
  {
    unint64_t v142 = STACK[0x330];
    if (STACK[0x330] == a14)
    {
      (*(void (**)(void))(STACK[0x318] + 32))();
    }
    else if (v142)
    {
      (*(void (**)(unint64_t))(*(void *)v142 + 40))(v142);
    }
  }
  if (SLOBYTE(STACK[0x30F]) < 0) {
    operator delete((void *)STACK[0x2F8]);
  }
  if (LOBYTE(STACK[0x2F0]))
  {
    unint64_t v143 = STACK[0x2E8];
    if (STACK[0x2E8] == a15)
    {
      (*(void (**)(void))(STACK[0x2D0] + 32))();
    }
    else if (v143)
    {
      (*(void (**)(unint64_t))(*(void *)v143 + 40))(v143);
    }
  }
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (LOBYTE(STACK[0x2A8]))
  {
    unint64_t v144 = STACK[0x2A0];
    if (STACK[0x2A0] == a16)
    {
      (*(void (**)(void))(STACK[0x288] + 32))();
    }
    else if (v144)
    {
      (*(void (**)(unint64_t))(*(void *)v144 + 40))(v144);
    }
  }
  if (SLOBYTE(STACK[0x27F]) < 0) {
    operator delete((void *)STACK[0x268]);
  }
  if (LOBYTE(STACK[0x260]))
  {
    unint64_t v145 = STACK[0x258];
    if (STACK[0x258] == a17)
    {
      (*(void (**)(void))(STACK[0x240] + 32))();
    }
    else if (v145)
    {
      (*(void (**)(unint64_t))(*(void *)v145 + 40))(v145);
    }
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  if (LOBYTE(STACK[0x218]))
  {
    unint64_t v146 = STACK[0x210];
    if (STACK[0x210] == a18)
    {
      (*(void (**)(void))(a78 + 32))();
    }
    else if (v146)
    {
      (*(void (**)(unint64_t))(*(void *)v146 + 40))(v146);
    }
  }
  if (a77 < 0) {
    operator delete(a76);
  }
  if (LOBYTE(STACK[0x3C8]))
  {
    unint64_t v147 = STACK[0x3C0];
    if (STACK[0x3C0] == a19)
    {
      (*(void (**)(void))(STACK[0x3A8] + 32))();
    }
    else if (v147)
    {
      (*(void (**)(unint64_t))(*(void *)v147 + 40))(v147);
    }
  }
  if (SLOBYTE(STACK[0x39F]) < 0) {
    operator delete((void *)STACK[0x388]);
  }
  if (LOBYTE(STACK[0x458]))
  {
    unint64_t v148 = STACK[0x450];
    if (STACK[0x450] == a20)
    {
      (*(void (**)(void))(STACK[0x438] + 32))();
    }
    else if (v148)
    {
      (*(void (**)(unint64_t))(*(void *)v148 + 40))(v148);
    }
  }
  if (SLOBYTE(STACK[0x42F]) < 0) {
    operator delete((void *)STACK[0x418]);
  }
  if (LOBYTE(STACK[0x410]))
  {
    unint64_t v149 = STACK[0x408];
    if (STACK[0x408] == a21)
    {
      (*(void (**)(void))(STACK[0x3F0] + 32))();
    }
    else if (v149)
    {
      (*(void (**)(unint64_t))(*(void *)v149 + 40))(v149);
    }
  }
  if (SLOBYTE(STACK[0x3E7]) < 0) {
    operator delete((void *)STACK[0x3D0]);
  }
  _Unwind_Resume(a1);
}

uint64_t config::hw::watch(config::hw *this)
{
  uint64_t v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v2 = off_1EB5EE630;
  if (!off_1EB5EE630)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v9, v1);
    long long v3 = v9;
    long long v9 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EB5EE630 + 1);
    off_1EB5EE630 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    unint64_t v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
    if (*((void *)&v9 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EB5EE630;
  }
  uint64_t v6 = (std::__shared_weak_count *)*(&off_1EB5EE630 + 1);
  if (*(&off_1EB5EE630 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EB5EE630 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 144))(v2);
  uint64_t v8 = result;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v8;
    }
  }
  return result;
}

void sub_1A60D2DD4(_Unwind_Exception *a1)
{
}

void sub_1A60D2DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t config::hw::iPad(config::hw *this)
{
  uint64_t v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v2 = off_1EB5EE630;
  if (!off_1EB5EE630)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v9, v1);
    long long v3 = v9;
    long long v9 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EB5EE630 + 1);
    off_1EB5EE630 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    unint64_t v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
    if (*((void *)&v9 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EB5EE630;
  }
  uint64_t v6 = (std::__shared_weak_count *)*(&off_1EB5EE630 + 1);
  if (*(&off_1EB5EE630 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EB5EE630 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 136))(v2);
  uint64_t v8 = result;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v8;
    }
  }
  return result;
}

void sub_1A60D2F98(_Unwind_Exception *a1)
{
}

void sub_1A60D2FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void config::hw::product(config::hw *this)
{
  uint64_t v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v2 = off_1EB5EE630;
  if (!off_1EB5EE630)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v7, v1);
    long long v3 = v7;
    long long v7 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EB5EE630 + 1);
    off_1EB5EE630 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    unint64_t v5 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EB5EE630;
  }
  uint64_t v6 = (std::__shared_weak_count *)*(&off_1EB5EE630 + 1);
  if (*(&off_1EB5EE630 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EB5EE630 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A60D3164(_Unwind_Exception *a1)
{
}

void sub_1A60D3180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void config::hw::deviceMaterial(config::hw *this)
{
  uint64_t v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v2 = off_1EB5EE630;
  if (!off_1EB5EE630)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v7, v1);
    long long v3 = v7;
    long long v7 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EB5EE630 + 1);
    off_1EB5EE630 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    unint64_t v5 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EB5EE630;
  }
  uint64_t v6 = (std::__shared_weak_count *)*(&off_1EB5EE630 + 1);
  if (*(&off_1EB5EE630 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EB5EE630 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(void *)v2 + 104))(v2);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A60D3330(_Unwind_Exception *a1)
{
}

void sub_1A60D334C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void config::hw::getBootArgs(std::string *a1@<X8>)
{
  memset(v27, 170, 24);
  long long v3 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v4 = off_1EB5EE630;
  if (!off_1EB5EE630)
  {
    ctu::Gestalt::create_default_global((uint64_t *)__p, v3);
    long long v5 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v6 = (std::__shared_weak_count *)*(&off_1EB5EE630 + 1);
    off_1EB5EE630 = v5;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    long long v7 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    uint64_t v4 = off_1EB5EE630;
  }
  uint64_t v8 = (std::__shared_weak_count *)*(&off_1EB5EE630 + 1);
  v27[3] = v4;
  v27[4] = *(&off_1EB5EE630 + 1);
  if (*(&off_1EB5EE630 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EB5EE630 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v4 + 112))(v27, v4);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  HIBYTE(v26) = 9;
  strcpy((char *)__p, "boot-args");
  long long v9 = (uint64_t *)v27[1];
  if (v27[1])
  {
    while (1)
    {
      char v11 = (uint64_t **)v9;
      uint64_t v14 = (const void *)v9[4];
      uint64_t v12 = v9 + 4;
      uint64_t v13 = v14;
      int v15 = *((char *)v12 + 23);
      if (v15 >= 0) {
        char v16 = v12;
      }
      else {
        char v16 = v13;
      }
      if (v15 >= 0) {
        unint64_t v17 = *((unsigned __int8 *)v12 + 23);
      }
      else {
        unint64_t v17 = v12[1];
      }
      if (v17 >= 9) {
        size_t v18 = 9;
      }
      else {
        size_t v18 = v17;
      }
      int v19 = memcmp(__p, v16, v18);
      if (v19)
      {
        if (v19 < 0) {
          goto LABEL_16;
        }
LABEL_30:
        int v20 = memcmp(v16, __p, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0) {
            goto LABEL_41;
          }
        }
        else if (v17 >= 9)
        {
LABEL_41:
          long long v21 = (char *)v11;
          if (*((char *)v11 + 79) < 0) {
            goto LABEL_42;
          }
LABEL_40:
          long long v24 = *(_OWORD *)(v21 + 56);
          a1->__r_.__value_.__r.__words[2] = *((void *)v21 + 9);
          *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v24;
          goto LABEL_43;
        }
        long long v9 = v11[1];
        if (!v9)
        {
          uint64_t v10 = v11 + 1;
          goto LABEL_37;
        }
      }
      else
      {
        if (v17 <= 9) {
          goto LABEL_30;
        }
LABEL_16:
        long long v9 = *v11;
        uint64_t v10 = v11;
        if (!*v11) {
          goto LABEL_37;
        }
      }
    }
  }
  uint64_t v10 = (uint64_t **)&v27[1];
  char v11 = (uint64_t **)&v27[1];
LABEL_37:
  long long v21 = (char *)operator new(0x50uLL);
  *((_OWORD *)v21 + 2) = *(_OWORD *)__p;
  uint64_t v22 = v26;
  __p[1] = 0;
  uint64_t v26 = 0;
  __p[0] = 0;
  *((void *)v21 + 6) = v22;
  *((void *)v21 + 7) = 0;
  *((void *)v21 + 8) = 0;
  *((void *)v21 + 9) = 0;
  *(void *)long long v21 = 0;
  *((void *)v21 + 1) = 0;
  *((void *)v21 + 2) = v11;
  *uint64_t v10 = (uint64_t *)v21;
  int v23 = (uint64_t *)v21;
  if (*(void *)v27[0])
  {
    v27[0] = *(void *)v27[0];
    int v23 = *v10;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v27[1], v23);
  ++v27[2];
  if ((v21[79] & 0x80000000) == 0) {
    goto LABEL_40;
  }
LABEL_42:
  std::string::__init_copy_ctor_external(a1, *((const std::string::value_type **)v21 + 7), *((void *)v21 + 8));
LABEL_43:
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v27[1]);
}

void sub_1A60D3674(_Unwind_Exception *a1)
{
}

void sub_1A60D3690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A60D36A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a16);
  _Unwind_Resume(a1);
}

void config::hw::regionCode(config::hw *this)
{
  uint64_t v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v2 = off_1EB5EE630;
  if (!off_1EB5EE630)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v7, v1);
    long long v3 = v7;
    long long v7 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EB5EE630 + 1);
    off_1EB5EE630 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    long long v5 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EB5EE630;
  }
  uint64_t v6 = (std::__shared_weak_count *)*(&off_1EB5EE630 + 1);
  if (*(&off_1EB5EE630 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EB5EE630 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A60D3864(_Unwind_Exception *a1)
{
}

void sub_1A60D3880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void config::hw::regionInfo(config::hw *this)
{
  uint64_t v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v2 = off_1EB5EE630;
  if (!off_1EB5EE630)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v7, v1);
    long long v3 = v7;
    long long v7 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EB5EE630 + 1);
    off_1EB5EE630 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    long long v5 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EB5EE630;
  }
  uint64_t v6 = (std::__shared_weak_count *)*(&off_1EB5EE630 + 1);
  if (*(&off_1EB5EE630 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EB5EE630 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(void *)v2 + 64))(v2);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A60D3A30(_Unwind_Exception *a1)
{
}

void sub_1A60D3A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t config::build::carrier(config::build *this)
{
  uint64_t result = TelephonyUtilIsCarrierBuild();
  if (result) {
    return TelephonyUtilIsInternalBuild() ^ 1;
  }
  return result;
}

uint64_t config::build::internal_or_carrier(config::build *this)
{
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }

  return TelephonyUtilIsCarrierBuild();
}

void config::build::version(config::build *this)
{
  uint64_t v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v2 = (void (***)(void))off_1EB5EE630;
  if (!off_1EB5EE630)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v7, v1);
    long long v3 = v7;
    long long v7 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EB5EE630 + 1);
    off_1EB5EE630 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    long long v5 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = (void (***)(void))off_1EB5EE630;
  }
  uint64_t v6 = (std::__shared_weak_count *)*(&off_1EB5EE630 + 1);
  if (*(&off_1EB5EE630 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EB5EE630 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (**v2)(v2);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A60D3C5C(_Unwind_Exception *a1)
{
}

void sub_1A60D3C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __cxx_global_var_init()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_1A609F000);
  }
  return result;
}

void DIAGTrace::DIAGTrace(DIAGTrace *this)
{
  char v3 = 10;
  strcpy((char *)__p, "trace.diag");
  Trace::Trace((uint64_t)this, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  *(void *)this = &unk_1EFB09838;
  *((void *)this + 19) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 49) = TelephonyBasebandCreateController();
  *((unsigned char *)this + 400) = 0;
}

void sub_1A60D3DB8(_Unwind_Exception *a1)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 + 376);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v2);
  if (*(char *)(v1 + 359) < 0)
  {
    operator delete(*(void **)(v1 + 336));
    if ((*(char *)(v1 + 335) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*(char *)(v1 + 335) & 0x80000000) == 0)
  {
LABEL_3:
    if (*(char *)(v1 + 279) < 0) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  operator delete(*v4);
  if (*(char *)(v1 + 279) < 0)
  {
LABEL_4:
    operator delete(*(void **)(v1 + 256));
    if ((*(char *)(v1 + 255) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  if ((*(char *)(v1 + 255) & 0x80000000) == 0)
  {
LABEL_5:
    if (*(char *)(v1 + 231) < 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(v1 + 232));
  if (*(char *)(v1 + 231) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v1 + 208));
    if ((*(char *)(v1 + 207) & 0x80000000) == 0)
    {
LABEL_14:
      Trace::~Trace((Trace *)v1);
      _Unwind_Resume(a1);
    }
LABEL_13:
    operator delete(*v3);
    goto LABEL_14;
  }
LABEL_12:
  if ((*(char *)(v1 + 207) & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_1A60D3E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void **ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void DIAGTrace::~DIAGTrace(DIAGTrace *this)
{
  *(void *)this = &unk_1EFB09838;
  uint64_t v2 = (const void *)*((void *)this + 49);
  if (v2) {
    CFRelease(v2);
  }
  char v3 = (std::__shared_weak_count *)*((void *)this + 48);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v4 = (const void *)*((void *)this + 46);
    if (!v4) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  uint64_t v4 = (const void *)*((void *)this + 46);
  if (v4) {
LABEL_6:
  }
    CFRelease(v4);
LABEL_7:
  if (*((char *)this + 359) < 0)
  {
    operator delete(*((void **)this + 42));
    if ((*((char *)this + 335) & 0x80000000) == 0)
    {
LABEL_9:
      if ((*((char *)this + 279) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_18;
    }
  }
  else if ((*((char *)this + 335) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*((void **)this + 39));
  if ((*((char *)this + 279) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*((char *)this + 255) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*((void **)this + 32));
  if ((*((char *)this + 255) & 0x80000000) == 0)
  {
LABEL_11:
    if ((*((char *)this + 231) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(*((void **)this + 29));
  if ((*((char *)this + 231) & 0x80000000) == 0)
  {
LABEL_12:
    if ((*((char *)this + 207) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(*((void **)this + 26));
  if ((*((char *)this + 207) & 0x80000000) == 0)
  {
LABEL_13:
    long long v5 = this;
    goto LABEL_15;
  }
LABEL_21:
  operator delete(*((void **)this + 23));
  long long v5 = this;

LABEL_15:
  Trace::~Trace(v5);
}

{
  void *v1;
  uint64_t vars8;

  DIAGTrace::~DIAGTrace(this);

  operator delete(v1);
}

double DIAGTrace::createInternal@<D0>(_OWORD *a1@<X8>)
{
  char v3 = (DIAGTrace *)operator new(0x198uLL);
  DIAGTrace::DIAGTrace(v3);
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<DIAGTrace>::shared_ptr[abi:ne180100]<DIAGTrace,std::shared_ptr<DIAGTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<DIAGTrace>(DIAGTrace*)::{lambda(DIAGTrace*)#1},void>(&v5, (uint64_t)v3);
  ctu::Loggable<Trace,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v5);
  double result = *(double *)&v5;
  *a1 = v5;
  return result;
}

void sub_1A60D40B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A60D40C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t DIAGTrace::init(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject **a4)
{
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    std::string v16 = *(std::string *)a2;
    long long v7 = (std::__shared_weak_count *)a3[1];
    uint64_t v14 = *a3;
    int v15 = v7;
    if (!v7) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  long long v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v14 = *a3;
  int v15 = v7;
  if (v7) {
LABEL_3:
  }
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
LABEL_4:
  uint64_t v8 = *a4;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  uint64_t v9 = Trace::init(a1, (void **)&v16.__r_.__value_.__l.__data_, &v14, &object);
  if (object) {
    dispatch_release(object);
  }
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v16.__r_.__value_.__l.__data_);
    if (!v9) {
      return v9;
    }
  }
  else if (!v9)
  {
    return v9;
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  void v12[2] = ___ZN9DIAGTrace4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_8weak_ptrIN3abm19BasebandTracingTaskEEEN8dispatch5groupE_block_invoke;
  v12[3] = &__block_descriptor_tmp_2;
  v12[4] = a1;
  unint64_t v17 = v12;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t block[3] = &__block_descriptor_tmp_126;
  void block[4] = a1 + 72;
  void block[5] = &v17;
  char v11 = *(NSObject **)(a1 + 88);
  if (*(void *)(a1 + 96)) {
    dispatch_async_and_wait(v11, block);
  }
  else {
    dispatch_sync(v11, block);
  }
  return v9;
}

void sub_1A60D4294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (object)
  {
    dispatch_release(object);
    int v23 = a16;
    if (!a16)
    {
LABEL_3:
      if ((a22 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int v23 = a16;
    if (!a16) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v23);
  if ((a22 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN9DIAGTrace4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_8weak_ptrIN3abm19BasebandTracingTaskEEEN8dispatch5groupE_block_invoke(uint64_t a1)
{
  return DIAGTrace::initProperty_sync(*(DIAGTrace **)(a1 + 32));
}

uint64_t DIAGTrace::initProperty_sync(DIAGTrace *this)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v4 = Mutable;
    long long v5 = (const void *)*((void *)this + 46);
    *((void *)this + 46) = v4;
    if (v5) {
      CFRelease(v5);
    }
  }
  *((unsigned char *)this + 301) = 0;
  HIBYTE(v81[2]) = 7;
  strcpy((char *)v81, "Enabled");
  memset(&__p, 0, sizeof(__p));
  char v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  BOOL v7 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v7)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __dst[0];
  }
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v84 & 0x80000000) == 0) {
      goto LABEL_10;
    }
LABEL_13:
    operator delete(v83[0]);
    if (!v7) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (v84 < 0) {
    goto LABEL_13;
  }
LABEL_10:
  if (v7) {
LABEL_14:
  }
    util::convert<BOOL>(&__p, (BOOL *)this + 300, 0);
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(v81[0]);
LABEL_17:
  ctu::cf::update<char const*,BOOL>(*((__CFDictionary **)this + 46), (const __CFString **)"Enabled", *((unsigned __int8 *)this + 300), (uint64_t)v2, v6);
  HIBYTE(v81[2]) = 9;
  v81[0] = *(void **)"High_Tput";
  LOWORD(v81[1]) = str_14[8];
  memset(&__p, 0, sizeof(__p));
  char v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  BOOL v9 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v9)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __dst[0];
  }
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v84 & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_28:
    operator delete(v83[0]);
    if (!v9) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (v84 < 0) {
    goto LABEL_28;
  }
LABEL_23:
  if (v9) {
LABEL_29:
  }
    util::convert<BOOL>(&__p, (BOOL *)this + 180, 0);
LABEL_30:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0) {
      goto LABEL_32;
    }
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_32;
  }
  operator delete(v81[0]);
LABEL_32:
  ctu::cf::update<char const*,BOOL>(*((__CFDictionary **)this + 46), (const __CFString **)"High_Tput", *((unsigned __int8 *)this + 180), (uint64_t)v2, v8);
  HIBYTE(v81[2]) = 12;
  strcpy((char *)v81, "Data_Logging");
  memset(&__p, 0, sizeof(__p));
  char v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  BOOL v11 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v11)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __dst[0];
  }
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v84 & 0x80000000) == 0) {
      goto LABEL_38;
    }
LABEL_43:
    operator delete(v83[0]);
    if (!v11) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (v84 < 0) {
    goto LABEL_43;
  }
LABEL_38:
  if (v11) {
LABEL_44:
  }
    util::convert<BOOL>(&__p, (BOOL *)this + 181, 0);
LABEL_45:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0) {
      goto LABEL_47;
    }
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_47;
  }
  operator delete(v81[0]);
LABEL_47:
  ctu::cf::update<char const*,BOOL>(*((__CFDictionary **)this + 46), (const __CFString **)"Data_Logging", *((unsigned __int8 *)this + 181), (uint64_t)v2, v10);
  DIAGTrace::initTraceMode_sync(this);
  HIBYTE(v81[2]) = 7;
  strcpy((char *)v81, "History");
  memset(&__p, 0, sizeof(__p));
  char v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  BOOL v13 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v13)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __dst[0];
  }
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v84 & 0x80000000) == 0) {
      goto LABEL_53;
    }
LABEL_58:
    operator delete(v83[0]);
    if (!v13) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (v84 < 0) {
    goto LABEL_58;
  }
LABEL_53:
  if (v13) {
LABEL_59:
  }
    util::convert<int>(&__p, (_DWORD *)this + 70, 0);
LABEL_60:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0) {
      goto LABEL_62;
    }
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_62;
  }
  operator delete(v81[0]);
LABEL_62:
  int v14 = *((_DWORD *)this + 70);
  BOOL v15 = v14 < 0;
  if (!v14) {
    int v14 = 2048;
  }
  if (v15) {
    int v16 = 256;
  }
  else {
    int v16 = v14;
  }
  *((_DWORD *)this + 70) = v16;
  ctu::cf::update<char const*,int>(*((__CFDictionary **)this + 46), (const __CFString **)"History", v16, v2, v12);
  *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = 4;
  strcpy((char *)__dst, "File");
  *((unsigned char *)&__dst[1].__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst[1], "BBTrace");
  prop::get_from_file((char *)&__dst[1], (char *)__dst, (uint64_t)this + 184);
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_69;
    }
LABEL_74:
    operator delete(__dst[0].__r_.__value_.__l.__data_);
    size_t v18 = (__CFDictionary *)*((void *)this + 46);
    if ((*((char *)this + 207) & 0x80000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_75;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_74;
  }
LABEL_69:
  size_t v18 = (__CFDictionary *)*((void *)this + 46);
  if ((*((char *)this + 207) & 0x80000000) == 0)
  {
LABEL_70:
    __dst[1] = *(std::string *)((char *)this + 184);
    goto LABEL_76;
  }
LABEL_75:
  std::string::__init_copy_ctor_external(&__dst[1], *((const std::string::value_type **)this + 23), *((void *)this + 24));
LABEL_76:
  ctu::cf::update<char const*,std::string>(v18, (const __CFString **)"File", (uint64_t)&__dst[1], (uint64_t)v2, v17);
  if (SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst[1].__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = 14;
  strcpy((char *)__dst, "File_Secondary");
  *((unsigned char *)&__dst[1].__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst[1], "BBTrace");
  prop::get_from_file((char *)&__dst[1], (char *)__dst, (uint64_t)this + 208);
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_80;
    }
LABEL_83:
    operator delete(__dst[0].__r_.__value_.__l.__data_);
    int v20 = (__CFDictionary *)*((void *)this + 46);
    if ((*((char *)this + 231) & 0x80000000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_84;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_83;
  }
LABEL_80:
  int v20 = (__CFDictionary *)*((void *)this + 46);
  if ((*((char *)this + 231) & 0x80000000) == 0)
  {
LABEL_81:
    __dst[1] = *(std::string *)((char *)this + 208);
    goto LABEL_85;
  }
LABEL_84:
  std::string::__init_copy_ctor_external(&__dst[1], *((const std::string::value_type **)this + 26), *((void *)this + 27));
LABEL_85:
  ctu::cf::update<char const*,std::string>(v20, (const __CFString **)"File_Secondary", (uint64_t)&__dst[1], (uint64_t)v2, v19);
  if (SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst[1].__r_.__value_.__l.__data_);
  }
  long long v21 = diag::config::kExtraDMCFileKey[0];
  size_t v22 = strlen(diag::config::kExtraDMCFileKey[0]);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v23 = v22;
  if (v22 >= 0x17)
  {
    uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v25 = v22 | 7;
    }
    uint64_t v26 = v25 + 1;
    long long v24 = (std::string *)operator new(v25 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v23;
    __dst[0].__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    goto LABEL_94;
  }
  *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = v22;
  long long v24 = __dst;
  if (v22) {
LABEL_94:
  }
    memmove(v24, v21, v23);
  v24->__r_.__value_.__s.__data_[v23] = 0;
  *((unsigned char *)&__dst[1].__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst[1], "BBTrace");
  prop::get_from_file((char *)&__dst[1], (char *)__dst, (uint64_t)this + 232);
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_97;
    }
LABEL_100:
    operator delete(__dst[0].__r_.__value_.__l.__data_);
    long long v28 = (__CFDictionary *)*((void *)this + 46);
    int v29 = (const __CFString **)diag::config::kExtraDMCFileKey[0];
    if ((*((char *)this + 255) & 0x80000000) == 0) {
      goto LABEL_98;
    }
    goto LABEL_101;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_100;
  }
LABEL_97:
  long long v28 = (__CFDictionary *)*((void *)this + 46);
  int v29 = (const __CFString **)diag::config::kExtraDMCFileKey[0];
  if ((*((char *)this + 255) & 0x80000000) == 0)
  {
LABEL_98:
    __dst[1] = *(std::string *)((char *)this + 232);
    goto LABEL_102;
  }
LABEL_101:
  std::string::__init_copy_ctor_external(&__dst[1], *((const std::string::value_type **)this + 29), *((void *)this + 30));
LABEL_102:
  ctu::cf::update<char const*,std::string>(v28, v29, (uint64_t)&__dst[1], (uint64_t)v2, v27);
  if (SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst[1].__r_.__value_.__l.__data_);
  }
  strcpy((char *)&__dst[0].__r_.__value_.__r.__words[2] + 7, "\nBBTrace");
  strcpy((char *)__dst, "File_Sleep");
  *((unsigned char *)&__dst[1].__r_.__value_.__s + 23) = 7;
  prop::get_from_file((char *)&__dst[1], (char *)__dst, (uint64_t)this + 256);
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_106;
    }
LABEL_109:
    operator delete(__dst[0].__r_.__value_.__l.__data_);
    char v31 = (__CFDictionary *)*((void *)this + 46);
    if ((*((char *)this + 279) & 0x80000000) == 0) {
      goto LABEL_107;
    }
    goto LABEL_110;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_109;
  }
LABEL_106:
  char v31 = (__CFDictionary *)*((void *)this + 46);
  if ((*((char *)this + 279) & 0x80000000) == 0)
  {
LABEL_107:
    __dst[1] = *(std::string *)((char *)this + 256);
    goto LABEL_111;
  }
LABEL_110:
  std::string::__init_copy_ctor_external(&__dst[1], *((const std::string::value_type **)this + 32), *((void *)this + 33));
LABEL_111:
  ctu::cf::update<char const*,std::string>(v31, (const __CFString **)"File_Sleep", (uint64_t)&__dst[1], (uint64_t)v2, v30);
  if (SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst[1].__r_.__value_.__l.__data_);
  }
  char v32 = diag::config::kEnabledDuringSleepKey[0];
  size_t v33 = strlen(diag::config::kEnabledDuringSleepKey[0]);
  if (v33 > 0x7FFFFFFFFFFFFFF7) {
LABEL_282:
  }
    std::string::__throw_length_error[abi:ne180100]();
  int v34 = (void *)v33;
  if (v33 >= 0x17)
  {
    uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17) {
      uint64_t v36 = v33 | 7;
    }
    uint64_t v37 = v36 + 1;
    uint64_t v35 = (void **)operator new(v36 + 1);
    v81[1] = v34;
    v81[2] = (void *)(v37 | 0x8000000000000000);
    v81[0] = v35;
    goto LABEL_120;
  }
  HIBYTE(v81[2]) = v33;
  uint64_t v35 = v81;
  if (v33) {
LABEL_120:
  }
    memmove(v35, v32, (size_t)v34);
  *((unsigned char *)v34 + (void)v35) = 0;
  memset(&__p, 0, sizeof(__p));
  char v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  BOOL v39 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v39)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __dst[0];
  }
  if (SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst[1].__r_.__value_.__l.__data_);
    if ((v84 & 0x80000000) == 0)
    {
LABEL_127:
      if (!v39) {
        goto LABEL_133;
      }
      goto LABEL_131;
    }
  }
  else if ((v84 & 0x80000000) == 0)
  {
    goto LABEL_127;
  }
  operator delete(v83[0]);
  if (!v39) {
    goto LABEL_133;
  }
LABEL_131:
  LODWORD(__dst[1].__r_.__value_.__l.__data_) = -1431655766;
  if (util::convert<int>(&__p, &__dst[1], 0)) {
    *((_DWORD *)this + 44) = __dst[1].__r_.__value_.__l.__data_;
  }
LABEL_133:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0) {
      goto LABEL_135;
    }
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_135;
  }
  operator delete(v81[0]);
LABEL_135:
  ctu::cf::update<char const*,int>(*((__CFDictionary **)this + 46), (const __CFString **)diag::config::kEnabledDuringSleepKey[0], *((_DWORD *)this + 44), v2, v38);
  int v40 = diag::config::kBufferingOnAPAwake[0];
  size_t v41 = strlen(diag::config::kBufferingOnAPAwake[0]);
  if (v41 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_282;
  }
  uint64_t v42 = (void *)v41;
  if (v41 >= 0x17)
  {
    uint64_t v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17) {
      uint64_t v44 = v41 | 7;
    }
    uint64_t v45 = v44 + 1;
    char v43 = (void **)operator new(v44 + 1);
    v81[1] = v42;
    v81[2] = (void *)(v45 | 0x8000000000000000);
    v81[0] = v43;
    goto LABEL_142;
  }
  HIBYTE(v81[2]) = v41;
  char v43 = v81;
  if (v41) {
LABEL_142:
  }
    memmove(v43, v40, (size_t)v42);
  *((unsigned char *)v42 + (void)v43) = 0;
  memset(&__p, 0, sizeof(__p));
  char v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  BOOL v47 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v47)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __dst[0];
  }
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v84 & 0x80000000) == 0) {
      goto LABEL_149;
    }
LABEL_154:
    operator delete(v83[0]);
    if (!v47) {
      goto LABEL_156;
    }
    goto LABEL_155;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (v84 < 0) {
    goto LABEL_154;
  }
LABEL_149:
  if (v47) {
LABEL_155:
  }
    util::convert<BOOL>(&__p, (BOOL *)this + 302, 0);
LABEL_156:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0) {
      goto LABEL_158;
    }
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_158;
  }
  operator delete(v81[0]);
LABEL_158:
  ctu::cf::update<char const*,BOOL>(*((__CFDictionary **)this + 46), (const __CFString **)diag::config::kBufferingOnAPAwake[0], *((unsigned __int8 *)this + 302), (uint64_t)v2, v46);
  long long v48 = diag::config::kStallDetectionKey[0];
  size_t v49 = strlen(diag::config::kStallDetectionKey[0]);
  if (v49 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_282;
  }
  uint64_t v50 = (void *)v49;
  if (v49 >= 0x17)
  {
    uint64_t v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17) {
      uint64_t v52 = v49 | 7;
    }
    uint64_t v53 = v52 + 1;
    long long v51 = (void **)operator new(v52 + 1);
    v81[1] = v50;
    v81[2] = (void *)(v53 | 0x8000000000000000);
    v81[0] = v51;
    goto LABEL_165;
  }
  HIBYTE(v81[2]) = v49;
  long long v51 = v81;
  if (v49) {
LABEL_165:
  }
    memmove(v51, v48, (size_t)v50);
  *((unsigned char *)v50 + (void)v51) = 0;
  memset(&__p, 0, sizeof(__p));
  char v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  BOOL v54 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v54)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __dst[0];
  }
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v84 & 0x80000000) == 0) {
      goto LABEL_172;
    }
LABEL_177:
    operator delete(v83[0]);
    if (!v54) {
      goto LABEL_179;
    }
    goto LABEL_178;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (v84 < 0) {
    goto LABEL_177;
  }
LABEL_172:
  if (v54) {
LABEL_178:
  }
    util::convert<BOOL>(&__p, (BOOL *)this + 288, 0);
LABEL_179:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0) {
      goto LABEL_181;
    }
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_181;
  }
  operator delete(v81[0]);
LABEL_181:
  char v55 = diag::config::kStallDetectionRetriesKey[0];
  size_t v56 = strlen(diag::config::kStallDetectionRetriesKey[0]);
  if (v56 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_282;
  }
  long long v57 = (void *)v56;
  if (v56 >= 0x17)
  {
    uint64_t v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17) {
      uint64_t v59 = v56 | 7;
    }
    uint64_t v60 = v59 + 1;
    int v58 = (void **)operator new(v59 + 1);
    v81[1] = v57;
    v81[2] = (void *)(v60 | 0x8000000000000000);
    v81[0] = v58;
    goto LABEL_188;
  }
  HIBYTE(v81[2]) = v56;
  int v58 = v81;
  if (v56) {
LABEL_188:
  }
    memmove(v58, v55, (size_t)v57);
  *((unsigned char *)v57 + (void)v58) = 0;
  memset(&__p, 0, sizeof(__p));
  char v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  BOOL v61 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v61)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __dst[0];
  }
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v84 & 0x80000000) == 0) {
      goto LABEL_195;
    }
LABEL_200:
    operator delete(v83[0]);
    if (!v61) {
      goto LABEL_202;
    }
    goto LABEL_201;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (v84 < 0) {
    goto LABEL_200;
  }
LABEL_195:
  if (v61) {
LABEL_201:
  }
    util::convert<unsigned int>(&__p, (_DWORD *)this + 73, 0);
LABEL_202:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0) {
      goto LABEL_204;
    }
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_204;
  }
  operator delete(v81[0]);
LABEL_204:
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v62 = diag::config::kStallDetectionRecoveryKey[0];
  size_t v63 = strlen(diag::config::kStallDetectionRecoveryKey[0]);
  if (v63 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_282;
  }
  int v64 = (void *)v63;
  if (v63 >= 0x17)
  {
    uint64_t v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v63 | 7) != 0x17) {
      uint64_t v66 = v63 | 7;
    }
    uint64_t v67 = v66 + 1;
    int64_t v65 = (void **)operator new(v66 + 1);
    v81[1] = v64;
    v81[2] = (void *)(v67 | 0x8000000000000000);
    v81[0] = v65;
    goto LABEL_211;
  }
  HIBYTE(v81[2]) = v63;
  int64_t v65 = v81;
  if (v63) {
LABEL_211:
  }
    memmove(v65, v62, (size_t)v64);
  *((unsigned char *)v64 + (void)v65) = 0;
  memset(&__p, 0, sizeof(__p));
  char v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  BOOL v68 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v68)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __dst[0];
  }
  if (SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst[1].__r_.__value_.__l.__data_);
    if ((v84 & 0x80000000) == 0)
    {
LABEL_218:
      if (!v68) {
        goto LABEL_226;
      }
      goto LABEL_224;
    }
  }
  else if ((v84 & 0x80000000) == 0)
  {
    goto LABEL_218;
  }
  operator delete(v83[0]);
  if (!v68) {
    goto LABEL_226;
  }
LABEL_224:
  LODWORD(__dst[1].__r_.__value_.__l.__data_) = -1431655766;
  if (util::convert<int>(&__p, &__dst[1], 0)) {
    *((_DWORD *)this + 43) = __dst[1].__r_.__value_.__l.__data_;
  }
LABEL_226:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0) {
      goto LABEL_228;
    }
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_228;
  }
  operator delete(v81[0]);
LABEL_228:
  uint64_t v69 = diag::config::kKeepScratchLogsKey[0];
  size_t v70 = strlen(diag::config::kKeepScratchLogsKey[0]);
  if (v70 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_282;
  }
  int v71 = (void *)v70;
  if (v70 >= 0x17)
  {
    uint64_t v73 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17) {
      uint64_t v73 = v70 | 7;
    }
    uint64_t v74 = v73 + 1;
    uint64_t v72 = (void **)operator new(v73 + 1);
    v81[1] = v71;
    v81[2] = (void *)(v74 | 0x8000000000000000);
    v81[0] = v72;
    goto LABEL_235;
  }
  HIBYTE(v81[2]) = v70;
  uint64_t v72 = v81;
  if (v70) {
LABEL_235:
  }
    memmove(v72, v69, (size_t)v71);
  *((unsigned char *)v71 + (void)v72) = 0;
  memset(&__p, 0, sizeof(__p));
  char v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  BOOL v75 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v75)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __dst[0];
  }
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v84 & 0x80000000) == 0) {
      goto LABEL_242;
    }
LABEL_247:
    operator delete(v83[0]);
    if (!v75) {
      goto LABEL_249;
    }
    goto LABEL_248;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (v84 < 0) {
    goto LABEL_247;
  }
LABEL_242:
  if (v75) {
LABEL_248:
  }
    util::convert<BOOL>(&__p, (BOOL *)this + 303, 0);
LABEL_249:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0) {
      goto LABEL_251;
    }
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_251;
  }
  operator delete(v81[0]);
LABEL_251:
  HIBYTE(v81[2]) = 18;
  strcpy((char *)v81, "MaxMemoryFileCount");
  memset(&__p, 0, sizeof(__p));
  char v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  BOOL v77 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v77)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __dst[0];
  }
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v84 & 0x80000000) == 0) {
      goto LABEL_257;
    }
LABEL_262:
    operator delete(v83[0]);
    if (!v77) {
      goto LABEL_264;
    }
    goto LABEL_263;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (v84 < 0) {
    goto LABEL_262;
  }
LABEL_257:
  if (v77) {
LABEL_263:
  }
    util::convert<unsigned int>(&__p, (_DWORD *)this + 71, 0);
LABEL_264:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0) {
      goto LABEL_266;
    }
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_266;
  }
  operator delete(v81[0]);
LABEL_266:
  ctu::cf::update<char const*,unsigned int>(*((__CFDictionary **)this + 46), (const __CFString **)"MaxMemoryFileCount", *((_DWORD *)this + 71), v2, v76);
  HIBYTE(v81[2]) = 8;
  strcpy((char *)v81, "FileSize");
  memset(&__p, 0, sizeof(__p));
  char v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  BOOL v79 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v79)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    std::string __p = __dst[0];
  }
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v84 & 0x80000000) == 0) {
      goto LABEL_270;
    }
LABEL_275:
    operator delete(v83[0]);
    if (!v79) {
      goto LABEL_277;
    }
    goto LABEL_276;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (v84 < 0) {
    goto LABEL_275;
  }
LABEL_270:
  if (v79) {
LABEL_276:
  }
    util::convert<unsigned int>(&__p, (_DWORD *)this + 90, 0);
LABEL_277:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0) {
      goto LABEL_279;
    }
LABEL_281:
    operator delete(v81[0]);
    goto LABEL_279;
  }
  if (SHIBYTE(v81[2]) < 0) {
    goto LABEL_281;
  }
LABEL_279:
  uint64_t result = ctu::cf::update<char const*,unsigned int>(*((__CFDictionary **)this + 46), (const __CFString **)"FileSize", *((_DWORD *)this + 90), v2, v78);
  *((void *)this + 19) |= 1uLL;
  return result;
}

void sub_1A60D5670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void DIAGTrace::reinitService_sync(DIAGTrace *this, int a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  CFMutableDictionaryRef v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v25 = a2;
    _os_log_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEFAULT, "#I Service reinit requested with preserve = %d", buf, 8u);
  }
  if (a2)
  {
    long long v5 = (diag::Service::Internal **)*((void *)this + 47);
    CFAllocatorRef v6 = *((void *)this + 5);
    if (v5)
    {
      if (os_log_type_enabled(*((os_log_t *)this + 5), OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEFAULT, "#I Service will be reinitialized", buf, 2u);
        long long v5 = (diag::Service::Internal **)*((void *)this + 47);
      }
      diag::Service::Internal::init(*v5);
      return;
    }
  }
  else
  {
    CFAllocatorRef v6 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEFAULT, "#I Service will be created", buf, 2u);
  }
  BOOL v7 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v7 || (v8 = *((void *)this + 9), (BOOL v9 = std::__shared_weak_count::lock(v7)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFAllocatorRef v10 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
  }
  BOOL v11 = operator new(0x10uLL);
  GetABMLogServer(&v22);
  int v12 = *((_DWORD *)this + 40);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN9DIAGTrace18reinitService_syncEb_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_7_2;
  aBlock[4] = this;
  aBlock[5] = v8;
  CFAllocatorRef v19 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  BOOL v13 = _Block_copy(aBlock);
  int v14 = *((void *)this + 11);
  if (v14) {
    dispatch_retain(*((dispatch_object_t *)this + 11));
  }
  int v20 = v13;
  dispatch_object_t object = v14;
  diag::Service::Service(v11, &v22, v12, (uint64_t)&v20);
  BOOL v15 = operator new(0x20uLL);
  *BOOL v15 = &unk_1EFB09D78;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = v11;
  int v16 = (std::__shared_weak_count *)*((void *)this + 48);
  *((void *)this + 47) = v11;
  *((void *)this + 48) = v15;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v20) {
    _Block_release(v20);
  }
  CFAllocatorRef v17 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  std::__shared_weak_count::__release_weak(v10);
}

void sub_1A60D5B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN9DIAGTrace18reinitService_syncEb_block_invoke(void *a1, int a2, size_t *a3)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  CFMutableDictionaryRef v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    BOOL v7 = (void *)a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    int v58 = v8;
    if (v8)
    {
      BOOL v9 = v8;
      uint64_t v10 = a1[5];
      uint64_t v57 = v10;
      if (a2 != 4 || !v10)
      {
LABEL_72:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      BOOL v11 = v7[5];
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        size_t v36 = (size_t)a3;
        if (*((char *)a3 + 23) < 0) {
          size_t v36 = *a3;
        }
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v36;
        _os_log_error_impl(&dword_1A609F000, v11, OS_LOG_TYPE_ERROR, "Service error. %s", buf, 0xCu);
      }
      uint64_t v56 = 0x13AAAAAA00AAAAAALL;
      qmemcpy(v55, "Diag trace faile", sizeof(v55));
      *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v64 = v12;
      long long v65 = v12;
      long long v62 = v12;
      long long v63 = v12;
      long long v60 = v12;
      long long v61 = v12;
      *(_OWORD *)std::string buf = v12;
      BOOL v13 = (const void *)*MEMORY[0x1E4F4C6E8];
      size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
      if (v14 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v15 = v14;
      if (v14 >= 0x17)
      {
        uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17) {
          uint64_t v17 = v14 | 7;
        }
        uint64_t v18 = v17 + 1;
        p_dst = (long long *)operator new(v17 + 1);
        *((void *)&__dst + 1) = v15;
        unint64_t v54 = v18 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v54) = v14;
        p_dst = &__dst;
        if (!v14)
        {
LABEL_14:
          *((unsigned char *)p_dst + v15) = 0;
          CFAllocatorRef v19 = (const void *)*MEMORY[0x1E4F4CF30];
          size_t v20 = strlen((const char *)*MEMORY[0x1E4F4CF30]);
          if (v20 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v21 = v20;
          if (v20 >= 0x17)
          {
            uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v20 | 7) != 0x17) {
              uint64_t v23 = v20 | 7;
            }
            uint64_t v24 = v23 + 1;
            uint64_t v22 = operator new(v23 + 1);
            *((void *)&v51 + 1) = v21;
            unint64_t v52 = v24 | 0x8000000000000000;
            *(void *)&long long v51 = v22;
          }
          else
          {
            HIBYTE(v52) = v20;
            uint64_t v22 = &v51;
            if (!v20)
            {
LABEL_22:
              v22[v21] = 0;
              int v25 = SHIBYTE(v56);
              if (v56 >= 0) {
                size_t v26 = HIBYTE(v56);
              }
              else {
                size_t v26 = (size_t)v55[1];
              }
              int v27 = *((char *)a3 + 23);
              if (v27 >= 0) {
                size_t v28 = *((unsigned __int8 *)a3 + 23);
              }
              else {
                size_t v28 = a3[1];
              }
              unint64_t v29 = v28 + v26;
              memset(v50, 170, sizeof(v50));
              if (v28 + v26 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              if (v29 > 0x16)
              {
                uint64_t v34 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v29 | 7) != 0x17) {
                  uint64_t v34 = v29 | 7;
                }
                uint64_t v35 = v34 + 1;
                CFAllocatorRef v30 = (char *)operator new(v34 + 1);
                v50[1] = (void *)(v28 + v26);
                v50[2] = (void *)(v35 | 0x8000000000000000);
                v50[0] = v30;
                if (!v26)
                {
LABEL_35:
                  char v32 = &v30[v26];
                  if (v28)
                  {
                    if (v27 >= 0) {
                      size_t v33 = a3;
                    }
                    else {
                      size_t v33 = (const void *)*a3;
                    }
                    memmove(v32, v33, v28);
                  }
                  v32[v28] = 0;
                  Timestamp::Timestamp((Timestamp *)v46);
                  Timestamp::asString((uint64_t)v46, 0, 9, __p);
                  char v45 = 0;
                  LOBYTE(v44) = 0;
                  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v51, (long long *)v50, (uint64_t)__p, 7, &v44);
                  if (v49 < 0)
                  {
                    operator delete(__p[0]);
                    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v46, v47);
                    if ((SHIBYTE(v50[2]) & 0x80000000) == 0)
                    {
LABEL_42:
                      if ((SHIBYTE(v52) & 0x80000000) == 0) {
                        goto LABEL_43;
                      }
                      goto LABEL_61;
                    }
                  }
                  else
                  {
                    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v46, v47);
                    if ((SHIBYTE(v50[2]) & 0x80000000) == 0) {
                      goto LABEL_42;
                    }
                  }
                  operator delete(v50[0]);
                  if ((SHIBYTE(v52) & 0x80000000) == 0)
                  {
LABEL_43:
                    if ((SHIBYTE(v54) & 0x80000000) == 0) {
                      goto LABEL_44;
                    }
LABEL_62:
                    operator delete((void *)__dst);
LABEL_44:
                    ResetInfo::ResetInfo(&v37, (long long *)buf);
                    DIAGTrace::commandResetModem_sync(v7, (long long *)&v37);
                    if (v43 < 0)
                    {
                      operator delete(v42);
                      if ((v41 & 0x80000000) == 0)
                      {
LABEL_46:
                        if ((v39 & 0x80000000) == 0) {
                          goto LABEL_47;
                        }
                        goto LABEL_65;
                      }
                    }
                    else if ((v41 & 0x80000000) == 0)
                    {
                      goto LABEL_46;
                    }
                    operator delete(v40);
                    if ((v39 & 0x80000000) == 0)
                    {
LABEL_47:
                      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                        goto LABEL_48;
                      }
                      goto LABEL_66;
                    }
LABEL_65:
                    operator delete(v38);
                    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_48:
                      if ((SHIBYTE(v65) & 0x80000000) == 0) {
                        goto LABEL_49;
                      }
                      goto LABEL_67;
                    }
LABEL_66:
                    operator delete(v37.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v65) & 0x80000000) == 0)
                    {
LABEL_49:
                      if ((SBYTE7(v63) & 0x80000000) == 0) {
                        goto LABEL_50;
                      }
                      goto LABEL_68;
                    }
LABEL_67:
                    operator delete(*((void **)&v64 + 1));
                    if ((SBYTE7(v63) & 0x80000000) == 0)
                    {
LABEL_50:
                      if ((SHIBYTE(v61) & 0x80000000) == 0) {
                        goto LABEL_51;
                      }
                      goto LABEL_69;
                    }
LABEL_68:
                    operator delete((void *)v62);
                    if ((SHIBYTE(v61) & 0x80000000) == 0)
                    {
LABEL_51:
                      if ((SBYTE7(v60) & 0x80000000) == 0) {
                        goto LABEL_52;
                      }
                      goto LABEL_70;
                    }
LABEL_69:
                    operator delete(*((void **)&v60 + 1));
                    if ((SBYTE7(v60) & 0x80000000) == 0)
                    {
LABEL_52:
                      if ((v25 & 0x80000000) == 0) {
                        goto LABEL_53;
                      }
                      goto LABEL_71;
                    }
LABEL_70:
                    operator delete(*(void **)buf);
                    if ((v25 & 0x80000000) == 0)
                    {
LABEL_53:
                      BOOL v9 = v58;
                      if (!v58) {
                        return;
                      }
                      goto LABEL_72;
                    }
LABEL_71:
                    operator delete(v55[0]);
                    BOOL v9 = v58;
                    if (!v58) {
                      return;
                    }
                    goto LABEL_72;
                  }
LABEL_61:
                  operator delete((void *)v51);
                  if ((SHIBYTE(v54) & 0x80000000) == 0) {
                    goto LABEL_44;
                  }
                  goto LABEL_62;
                }
              }
              else
              {
                memset(v50, 0, sizeof(v50));
                CFAllocatorRef v30 = (char *)v50;
                HIBYTE(v50[2]) = v28 + v26;
                if (!v26) {
                  goto LABEL_35;
                }
              }
              if (v25 >= 0) {
                char v31 = v55;
              }
              else {
                char v31 = (void **)v55[0];
              }
              memmove(v30, v31, v26);
              goto LABEL_35;
            }
          }
          memmove(v22, v19, v21);
          goto LABEL_22;
        }
      }
      memmove(p_dst, v13, v15);
      goto LABEL_14;
    }
  }
}

void sub_1A60D60F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  ResetInfo::~ResetInfo((void **)&a9);
  ResetInfo::~ResetInfo((void **)(v59 - 224));
  if (v58 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v59 - 240);
  _Unwind_Resume(a1);
}

void DIAGTrace::commandResetModem_sync(void *a1, long long *a2)
{
  char v3 = (std::__shared_weak_count *)a1[17];
  if (!v3) {
    return;
  }
  long long v5 = std::__shared_weak_count::lock(v3);
  uint64_t v18 = v5;
  if (!v5) {
    return;
  }
  CFAllocatorRef v6 = v5;
  uint64_t v7 = a1[16];
  uint64_t v17 = v7;
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEFAULT, "#I Request to reset baseband", buf, 2u);
  }
  ResetInfo::ResetInfo(&v9, a2);
  abm::BasebandTracingTask::commandResetModem(v7, (ResetInfo *)&v9);
  if (v15 < 0)
  {
    operator delete(__p);
    if ((v13 & 0x80000000) == 0)
    {
LABEL_8:
      if ((v11 & 0x80000000) == 0) {
        goto LABEL_9;
      }
LABEL_14:
      operator delete(v10);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_10:
        if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
LABEL_16:
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        return;
      }
      goto LABEL_15;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v12);
  if (v11 < 0) {
    goto LABEL_14;
  }
LABEL_9:
  if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_10;
  }
LABEL_15:
  operator delete(v9.__r_.__value_.__l.__data_);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_16;
  }
}

void sub_1A60D6338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  ResetInfo::~ResetInfo(&a9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v9 - 48);
  _Unwind_Resume(a1);
}

void sub_1A60D6354(_Unwind_Exception *a1)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c29_ZTSNSt3__18weak_ptrI5TraceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c29_ZTSNSt3__18weak_ptrI5TraceEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t DIAGTrace::getDefaultEnabled(DIAGTrace *this)
{
  unsigned int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
  int IsInternalBuild = (config::hw *)TelephonyUtilIsInternalBuild();
  int v3 = (int)IsInternalBuild;
  LODWORD(result) = config::hw::watch(IsInternalBuild);
  if (v3) {
    return result;
  }
  else {
    return IsCarrierBuild;
  }
}

uint64_t prop::bbtrace::get<BOOL>(char *a1, BOOL *a2)
{
  memset(&v7, 0, sizeof(v7));
  char v9 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&v11, 0, sizeof(v11));
  BOOL v4 = defaults::get((char *)__p, a1, &v11);
  if (v4)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a1, (uint64_t)&v11, &v10);
    std::string v7 = v10;
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_5:
      if (v4) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p[0]);
  if (v4)
  {
LABEL_6:
    uint64_t v5 = util::convert<BOOL>(&v7, a2, 0);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_12;
    }
    return v5;
  }
LABEL_10:
  uint64_t v5 = 0;
  if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return v5;
  }
LABEL_12:
  operator delete(v7.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1A60D6530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL DIAGTrace::initTraceMode_sync(DIAGTrace *this)
{
  char v23 = 15;
  strcpy((char *)v22, "Reset_Mode_Boot");
  memset(&__p, 0, sizeof(__p));
  *((unsigned char *)&v25.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v25, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  uint64_t v2 = defaults::get((char *)&v25, (char *)v22, &buf);
  int v3 = v2;
  if (v2)
  {
    prop::file::get<std::string>((const void **)&v25.__r_.__value_.__l.__data_, (uint64_t)v22, (uint64_t)&buf, &v26);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v26;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_7:
      if (!v3) {
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if (!v3) {
    goto LABEL_13;
  }
LABEL_11:
  LODWORD(buf.__r_.__value_.__l.__data_) = -1431655766;
  uint64_t v2 = util::convert<int>(&__p, &buf, 0);
  if (v2) {
    *((_DWORD *)this + 41) = buf.__r_.__value_.__l.__data_;
  }
LABEL_13:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v23 & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_18:
    operator delete(v22[0]);
    if (!sys::isBootSessionChanged(v4)) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v23 < 0) {
    goto LABEL_18;
  }
LABEL_15:
  if (!sys::isBootSessionChanged((sys *)v2))
  {
LABEL_20:
    char v23 = 4;
    strcpy((char *)v22, "Mode");
    memset(&__p, 0, sizeof(__p));
    *((unsigned char *)&v25.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&v25, "BBTrace");
    memset(&buf, 0, sizeof(buf));
    BOOL v5 = defaults::get((char *)&v25, (char *)v22, &buf);
    if (v5)
    {
      prop::file::get<std::string>((const void **)&v25.__r_.__value_.__l.__data_, (uint64_t)v22, (uint64_t)&buf, &v26);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v26;
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_26:
        if (!v5) {
          goto LABEL_32;
        }
        goto LABEL_30;
      }
    }
    else if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_26;
    }
    operator delete(v25.__r_.__value_.__l.__data_);
    if (!v5) {
      goto LABEL_32;
    }
LABEL_30:
    LODWORD(buf.__r_.__value_.__l.__data_) = -1431655766;
    int v6 = util::convert<int>(&__p, &buf, 0);
    LOBYTE(v5) = v6;
    if (v6) {
      *((_DWORD *)this + 40) = buf.__r_.__value_.__l.__data_;
    }
LABEL_32:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v23 & 0x80000000) == 0)
      {
LABEL_34:
        if (v5) {
          goto LABEL_35;
        }
        goto LABEL_43;
      }
    }
    else if ((v23 & 0x80000000) == 0)
    {
      goto LABEL_34;
    }
    operator delete(v22[0]);
    if (v5)
    {
LABEL_35:
      char v23 = 14;
      strcpy((char *)v22, "TraceOwnership");
      memset(&__p, 0, sizeof(__p));
      *((unsigned char *)&v25.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v25, "BBTrace");
      memset(&buf, 0, sizeof(buf));
      BOOL v8 = defaults::get((char *)&v25, (char *)v22, &buf);
      if (v8)
      {
        prop::file::get<std::string>((const void **)&v25.__r_.__value_.__l.__data_, (uint64_t)v22, (uint64_t)&buf, &v26);
        std::string __p = v26;
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(buf.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_39:
          if (!v8) {
            goto LABEL_59;
          }
          goto LABEL_57;
        }
      }
      else if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_39;
      }
      operator delete(v25.__r_.__value_.__l.__data_);
      if (!v8)
      {
LABEL_59:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((v23 & 0x80000000) == 0)
          {
LABEL_61:
            if (v8) {
              goto LABEL_104;
            }
            goto LABEL_65;
          }
        }
        else if ((v23 & 0x80000000) == 0)
        {
          goto LABEL_61;
        }
        operator delete(v22[0]);
        if (!v8)
        {
LABEL_65:
          char v9 = *((void *)this + 5);
          BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          std::string v11 = "Failed to get transport owner id from preferences for same boot instance";
          goto LABEL_86;
        }
LABEL_104:
        CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        ctu::cf::update<char const*,int>(*((__CFDictionary **)this + 46), (const __CFString **)"Mode", *((_DWORD *)this + 40), (const __CFAllocator *)*MEMORY[0x1E4F1CF80], v7);
        ctu::cf::update<char const*,int>(*((__CFDictionary **)this + 46), (const __CFString **)"Mode", *((_DWORD *)this + 42), v20, v21);
        return 1;
      }
LABEL_57:
      LODWORD(buf.__r_.__value_.__l.__data_) = -1431655766;
      int v14 = util::convert<int>(&__p, &buf, 0);
      LOBYTE(v8) = v14;
      if (v14) {
        *((_DWORD *)this + 42) = buf.__r_.__value_.__l.__data_;
      }
      goto LABEL_59;
    }
LABEL_43:
    char v9 = *((void *)this + 5);
    BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    std::string v11 = "Failed to get trace mode from preferences for same boot instance";
    goto LABEL_86;
  }
LABEL_19:
  if (*((_DWORD *)this + 41)) {
    goto LABEL_20;
  }
  long long v12 = *((void *)this + 5);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1A609F000, v12, OS_LOG_TYPE_DEFAULT, "#I AP reboot detected, resetting trace properties", (uint8_t *)&buf, 2u);
  }
  char v23 = 4;
  strcpy((char *)v22, "Mode");
  memset(&__p, 0, sizeof(__p));
  *((unsigned char *)&v25.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v25, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  BOOL v13 = defaults::get((char *)&v25, (char *)v22, &buf);
  if (v13)
  {
    prop::file::get<std::string>((const void **)&v25.__r_.__value_.__l.__data_, (uint64_t)v22, (uint64_t)&buf, &v26);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v26;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_53:
      if (!v13) {
        goto LABEL_71;
      }
      goto LABEL_69;
    }
  }
  else if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_53;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if (!v13) {
    goto LABEL_71;
  }
LABEL_69:
  LODWORD(buf.__r_.__value_.__l.__data_) = -1431655766;
  int v15 = util::convert<int>(&__p, &buf, 0);
  LOBYTE(v13) = v15;
  if (v15) {
    *((_DWORD *)this + 40) = buf.__r_.__value_.__l.__data_;
  }
LABEL_71:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v23 & 0x80000000) == 0)
    {
LABEL_73:
      if (v13) {
        goto LABEL_74;
      }
LABEL_84:
      char v9 = *((void *)this + 5);
      BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      std::string v11 = "Failed to get trace mode from preferences";
LABEL_86:
      _os_log_error_impl(&dword_1A609F000, v9, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&buf, 2u);
      return 0;
    }
  }
  else if ((v23 & 0x80000000) == 0)
  {
    goto LABEL_73;
  }
  operator delete(v22[0]);
  if (!v13) {
    goto LABEL_84;
  }
LABEL_74:
  char v23 = 14;
  strcpy((char *)v22, "TraceOwnership");
  memset(&__p, 0, sizeof(__p));
  *((unsigned char *)&v25.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v25, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  BOOL v16 = defaults::get((char *)&v25, (char *)v22, &buf);
  if (v16)
  {
    prop::file::get<std::string>((const void **)&v25.__r_.__value_.__l.__data_, (uint64_t)v22, (uint64_t)&buf, &v26);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v26;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_80:
      if (!v16) {
        goto LABEL_91;
      }
      goto LABEL_89;
    }
  }
  else if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_80;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if (!v16) {
    goto LABEL_91;
  }
LABEL_89:
  LODWORD(buf.__r_.__value_.__l.__data_) = -1431655766;
  if (util::convert<int>(&__p, &buf, 0)) {
    *((_DWORD *)this + 42) = buf.__r_.__value_.__l.__data_;
  }
LABEL_91:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v23 & 0x80000000) == 0)
    {
LABEL_93:
      int v17 = *((_DWORD *)this + 40);
      if (v17 != 4) {
        goto LABEL_104;
      }
      goto LABEL_97;
    }
  }
  else if ((v23 & 0x80000000) == 0)
  {
    goto LABEL_93;
  }
  operator delete(v22[0]);
  int v17 = *((_DWORD *)this + 40);
  if (v17 != 4) {
    goto LABEL_104;
  }
LABEL_97:
  *((unsigned char *)&v26.__r_.__value_.__s + 23) = v17;
  strcpy((char *)&v26, "Mode");
  memset(&v25, 0, sizeof(v25));
  std::to_string(&buf, 0);
  std::string v25 = buf;
  char v18 = prop::bbtrace::set((char *)&v26, (const char *)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_99:
      if (v18) {
        goto LABEL_100;
      }
      goto LABEL_108;
    }
  }
  else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_99;
  }
  operator delete(v26.__r_.__value_.__l.__data_);
  if (v18)
  {
LABEL_100:
    *((_DWORD *)this + 40) = 0;
    *((unsigned char *)&v26.__r_.__value_.__s + 23) = 14;
    strcpy((char *)&v26, "TraceOwnership");
    memset(&v25, 0, sizeof(v25));
    std::to_string(&buf, 0);
    std::string v25 = buf;
    char v19 = prop::bbtrace::set((char *)&v26, (const char *)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v25.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_102:
        if (v19)
        {
LABEL_103:
          *((_DWORD *)this + 42) = 0;
          goto LABEL_104;
        }
        goto LABEL_112;
      }
    }
    else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_102;
    }
    operator delete(v26.__r_.__value_.__l.__data_);
    if (v19) {
      goto LABEL_103;
    }
LABEL_112:
    char v9 = *((void *)this + 5);
    BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (result)
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      std::string v11 = "Failed to reset trace transport owner id for new boot instance";
      goto LABEL_86;
    }
    return result;
  }
LABEL_108:
  char v9 = *((void *)this + 5);
  BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (result)
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    std::string v11 = "Failed to reset diag trace mode for new boot instance";
    goto LABEL_86;
  }
  return result;
}

void sub_1A60D6DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::bbtrace::get<int>(char *a1, _DWORD *a2)
{
  memset(&v7, 0, sizeof(v7));
  char v9 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&v11, 0, sizeof(v11));
  BOOL v4 = defaults::get((char *)__p, a1, &v11);
  if (v4)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a1, (uint64_t)&v11, &v10);
    std::string v7 = v10;
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_5:
      if (v4) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p[0]);
  if (v4)
  {
LABEL_6:
    uint64_t v5 = util::convert<int>(&v7, a2, 0);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_12;
    }
    return v5;
  }
LABEL_10:
  uint64_t v5 = 0;
  if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return v5;
  }
LABEL_12:
  operator delete(v7.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1A60D7004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DIAGTrace::filterHistory(DIAGTrace *this)
{
  if (this) {
    unsigned int v1 = this;
  }
  else {
    unsigned int v1 = 2048;
  }
  if ((int)this >= 0) {
    return v1;
  }
  else {
    return 256;
  }
}

uint64_t prop::bbtrace::get<diag::config::DuringAPSleep>(char *a1, _DWORD *a2)
{
  memset(&v6, 0, sizeof(v6));
  char v8 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&v10, 0, sizeof(v10));
  uint64_t v4 = defaults::get((char *)__p, a1, &v10);
  if (v4)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a1, (uint64_t)&v10, &v9);
    std::string v6 = v9;
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v10.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
    {
LABEL_5:
      if (!v4) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  else if ((v8 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p[0]);
  if (!v4) {
    goto LABEL_11;
  }
LABEL_9:
  LODWORD(v10.__r_.__value_.__l.__data_) = -1431655766;
  uint64_t v4 = util::convert<int>(&v6, &v10, 0);
  if (v4) {
    *a2 = v10.__r_.__value_.__l.__data_;
  }
LABEL_11:
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_1A60D718C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::bbtrace::get<unsigned int>(char *a1, _DWORD *a2)
{
  memset(&v7, 0, sizeof(v7));
  char v9 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&v11, 0, sizeof(v11));
  BOOL v4 = defaults::get((char *)__p, a1, &v11);
  if (v4)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a1, (uint64_t)&v11, &v10);
    std::string v7 = v10;
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_5:
      if (v4) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p[0]);
  if (v4)
  {
LABEL_6:
    uint64_t v5 = util::convert<unsigned int>(&v7, a2, 0);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_12;
    }
    return v5;
  }
LABEL_10:
  uint64_t v5 = 0;
  if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return v5;
  }
LABEL_12:
  operator delete(v7.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1A60D72F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::bbtrace::get<diag::config::Recovery>(char *a1, _DWORD *a2)
{
  memset(&v6, 0, sizeof(v6));
  char v8 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&v10, 0, sizeof(v10));
  uint64_t v4 = defaults::get((char *)__p, a1, &v10);
  if (v4)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a1, (uint64_t)&v10, &v9);
    std::string v6 = v9;
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v10.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
    {
LABEL_5:
      if (!v4) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  else if ((v8 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p[0]);
  if (!v4) {
    goto LABEL_11;
  }
LABEL_9:
  LODWORD(v10.__r_.__value_.__l.__data_) = -1431655766;
  uint64_t v4 = util::convert<int>(&v6, &v10, 0);
  if (v4) {
    *a2 = v10.__r_.__value_.__l.__data_;
  }
LABEL_11:
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_1A60D7464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::bbtrace::get<abm::ResetTraceModeOnAPBoot>(char *a1, _DWORD *a2)
{
  memset(&v6, 0, sizeof(v6));
  char v8 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&v10, 0, sizeof(v10));
  uint64_t v4 = defaults::get((char *)__p, a1, &v10);
  if (v4)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a1, (uint64_t)&v10, &v9);
    std::string v6 = v9;
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v10.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
    {
LABEL_5:
      if (!v4) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  else if ((v8 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p[0]);
  if (!v4) {
    goto LABEL_11;
  }
LABEL_9:
  LODWORD(v10.__r_.__value_.__l.__data_) = -1431655766;
  uint64_t v4 = util::convert<int>(&v6, &v10, 0);
  if (v4) {
    *a2 = v10.__r_.__value_.__l.__data_;
  }
LABEL_11:
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_1A60D75D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::bbtrace::get<diag::config::Mode>(char *a1, _DWORD *a2)
{
  memset(&v6, 0, sizeof(v6));
  char v8 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&v10, 0, sizeof(v10));
  uint64_t v4 = defaults::get((char *)__p, a1, &v10);
  if (v4)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a1, (uint64_t)&v10, &v9);
    std::string v6 = v9;
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v10.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
    {
LABEL_5:
      if (!v4) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  else if ((v8 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p[0]);
  if (!v4) {
    goto LABEL_11;
  }
LABEL_9:
  LODWORD(v10.__r_.__value_.__l.__data_) = -1431655766;
  uint64_t v4 = util::convert<int>(&v6, &v10, 0);
  if (v4) {
    *a2 = v10.__r_.__value_.__l.__data_;
  }
LABEL_11:
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_1A60D7744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void DIAGTrace::pushServiceConfig_sync(DIAGTrace *this)
{
  unsigned int v1 = (uint64_t *)*((void *)this + 47);
  if (v1)
  {
    int v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string v10 = 0;
      _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Pushing config dictionary to Diag service", v10, 2u);
      unsigned int v1 = (uint64_t *)*((void *)this + 47);
    }
    uint64_t v4 = (const void *)*((void *)this + 46);
    if (v4 && (CFTypeID v5 = CFGetTypeID(v4), v5 == CFDictionaryGetTypeID()))
    {
      CFRetain(v4);
      uint64_t v6 = *v1;
      CFTypeRef cf = v4;
      CFRetain(v4);
      char v7 = 0;
      diag::Service::Internal::updateConfig(v6, &cf);
      CFTypeRef v8 = cf;
      if (!cf)
      {
LABEL_10:
        if ((v7 & 1) == 0) {
          CFRelease(v4);
        }
        return;
      }
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v9 = *v1;
      CFTypeRef cf = 0;
      char v7 = 1;
      diag::Service::Internal::updateConfig(v9, &cf);
      CFTypeRef v8 = cf;
      if (!cf) {
        goto LABEL_10;
      }
    }
    CFRelease(v8);
    goto LABEL_10;
  }
}

void DIAGTrace::start_sync(DIAGTrace *this, NSObject **a2, uint64_t a3, char a4)
{
  if (*((void *)this + 47))
  {
    DIAGTrace::pushServiceConfig_sync(this);
    char v7 = *a2;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(v7);
    }
    CFTypeRef v8 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v8 || (v9 = *((void *)this + 9), (std::string v10 = std::__shared_weak_count::lock(v8)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    std::string v11 = v10;
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    long long v12 = (uint64_t *)*((void *)this + 47);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN9DIAGTrace10start_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEb_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_9_1;
    aBlock[4] = this;
    dispatch_group_t group = v7;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(group);
    }
    uint64_t v19 = v9;
    CFAllocatorRef v20 = v11;
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    char v21 = a4;
    BOOL v13 = _Block_copy(aBlock);
    int v14 = v13;
    int v15 = *((void *)this + 11);
    if (v15)
    {
      dispatch_retain(v15);
      uint64_t v22 = v14;
      char v23 = v15;
      diag::Service::start(v12, (uint64_t)&v22, a4);
      dispatch_release(v15);
      if (!v14) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v22 = v13;
      char v23 = 0;
      diag::Service::start(v12, (uint64_t)&v22, a4);
      if (!v14)
      {
LABEL_18:
        if (v20) {
          std::__shared_weak_count::__release_weak(v20);
        }
        if (group)
        {
          dispatch_group_leave(group);
          if (group) {
            dispatch_release(group);
          }
        }
        std::__shared_weak_count::__release_weak(v11);
        if (v7)
        {
          dispatch_group_leave(v7);
          dispatch_release(v7);
        }
        return;
      }
    }
    _Block_release(v14);
    goto LABEL_18;
  }
  BOOL v16 = *((void *)this + 5);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1A609F000, v16, OS_LOG_TYPE_DEFAULT, "#I Can not start without a service object", buf, 2u);
  }
}

void sub_1A60D7AE0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN9DIAGTrace10start_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEb_block_invoke(uint64_t a1, int a2, void *a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFTypeRef v8 = std::__shared_weak_count::lock(v4);
    long long v60 = v8;
    if (v8)
    {
      uint64_t v9 = v8;
      if (!*(void *)(a1 + 48))
      {
LABEL_83:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (a2 != 4)
      {
        if (a2 == 1)
        {
          std::string v10 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl(&dword_1A609F000, v10, OS_LOG_TYPE_DEFAULT, "#I Start complete", buf, 2u);
          }
          DIAGTrace::stallDetection_sync((const __CFDictionary **)v7, *(unsigned __int8 *)(v7 + 288));
          if (!*(unsigned char *)(v7 + 400))
          {
            std::string v11 = *(NSObject **)(v7 + 144);
            if (v11)
            {
              if (!*(unsigned char *)(a1 + 64))
              {
                dispatch_group_enter(v11);
                *(unsigned char *)(v7 + 400) = 1;
              }
            }
          }
        }
        else
        {
          char v18 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            if (*((char *)a3 + 23) < 0) {
              a3 = (void *)*a3;
            }
            *(_DWORD *)std::string buf = 136315138;
            *(void *)&uint8_t buf[4] = a3;
            _os_log_impl(&dword_1A609F000, v18, OS_LOG_TYPE_DEFAULT, "#I Start skipped. %s", buf, 0xCu);
          }
        }
        goto LABEL_83;
      }
      long long v12 = *(NSObject **)(v7 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        CFAllocatorRef v38 = a3;
        if (*((char *)a3 + 23) < 0) {
          CFAllocatorRef v38 = (void *)*a3;
        }
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v38;
        _os_log_error_impl(&dword_1A609F000, v12, OS_LOG_TYPE_ERROR, "Start error. %s", buf, 0xCu);
      }
      uint64_t v58 = 0x13AAAAAA00AAAAAALL;
      qmemcpy(v57, "Diag start faile", sizeof(v57));
      *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v66 = v13;
      long long v67 = v13;
      long long v64 = v13;
      long long v65 = v13;
      long long v62 = v13;
      long long v63 = v13;
      *(_OWORD *)std::string buf = v13;
      int v14 = (const void *)*MEMORY[0x1E4F4C6E8];
      size_t v15 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
      if (v15 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v16 = v15;
      if (v15 >= 0x17)
      {
        uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17) {
          uint64_t v19 = v15 | 7;
        }
        uint64_t v20 = v19 + 1;
        p_dst = (long long *)operator new(v19 + 1);
        *((void *)&__dst + 1) = v16;
        unint64_t v56 = v20 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v56) = v15;
        p_dst = &__dst;
        if (!v15)
        {
LABEL_25:
          *((unsigned char *)p_dst + v16) = 0;
          char v21 = (const void *)*MEMORY[0x1E4F4CF30];
          size_t v22 = strlen((const char *)*MEMORY[0x1E4F4CF30]);
          if (v22 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v23 = v22;
          if (v22 >= 0x17)
          {
            uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v22 | 7) != 0x17) {
              uint64_t v25 = v22 | 7;
            }
            uint64_t v26 = v25 + 1;
            uint64_t v24 = operator new(v25 + 1);
            *((void *)&v53 + 1) = v23;
            unint64_t v54 = v26 | 0x8000000000000000;
            *(void *)&long long v53 = v24;
          }
          else
          {
            HIBYTE(v54) = v22;
            uint64_t v24 = &v53;
            if (!v22)
            {
LABEL_33:
              v24[v23] = 0;
              int v27 = SHIBYTE(v58);
              if (v58 >= 0) {
                size_t v28 = HIBYTE(v58);
              }
              else {
                size_t v28 = (size_t)v57[1];
              }
              int v29 = *((char *)a3 + 23);
              if (v29 >= 0) {
                size_t v30 = *((unsigned __int8 *)a3 + 23);
              }
              else {
                size_t v30 = a3[1];
              }
              unint64_t v31 = v30 + v28;
              memset(v52, 170, sizeof(v52));
              if (v30 + v28 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              if (v31 > 0x16)
              {
                uint64_t v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v31 | 7) != 0x17) {
                  uint64_t v33 = v31 | 7;
                }
                uint64_t v34 = v33 + 1;
                char v32 = (char *)operator new(v33 + 1);
                v52[1] = (void *)(v30 + v28);
                v52[2] = (void *)(v34 | 0x8000000000000000);
                v52[0] = v32;
              }
              else
              {
                memset(v52, 0, sizeof(v52));
                char v32 = (char *)v52;
                HIBYTE(v52[2]) = v30 + v28;
              }
              if (v28)
              {
                if (v27 >= 0) {
                  uint64_t v35 = v57;
                }
                else {
                  uint64_t v35 = (void **)v57[0];
                }
                memmove(v32, v35, v28);
              }
              size_t v36 = &v32[v28];
              if (v30)
              {
                if (v29 >= 0) {
                  std::string v37 = a3;
                }
                else {
                  std::string v37 = (const void *)*a3;
                }
                memmove(v36, v37, v30);
              }
              v36[v30] = 0;
              Timestamp::Timestamp((Timestamp *)v48);
              Timestamp::asString((uint64_t)v48, 0, 9, __p);
              char v47 = 0;
              LOBYTE(v46) = 0;
              ResetInfo::ResetInfo((std::string *)buf, &__dst, &v53, (long long *)v52, (uint64_t)__p, 7, &v46);
              if (v51 < 0)
              {
                operator delete(__p[0]);
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v48, v49);
                if ((SHIBYTE(v52[2]) & 0x80000000) == 0)
                {
LABEL_57:
                  if ((SHIBYTE(v54) & 0x80000000) == 0) {
                    goto LABEL_58;
                  }
                  goto LABEL_72;
                }
              }
              else
              {
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v48, v49);
                if ((SHIBYTE(v52[2]) & 0x80000000) == 0) {
                  goto LABEL_57;
                }
              }
              operator delete(v52[0]);
              if ((SHIBYTE(v54) & 0x80000000) == 0)
              {
LABEL_58:
                if ((SHIBYTE(v56) & 0x80000000) == 0) {
                  goto LABEL_59;
                }
LABEL_73:
                operator delete((void *)__dst);
LABEL_59:
                ResetInfo::ResetInfo(&v39, (long long *)buf);
                DIAGTrace::commandResetModem_sync((void *)v7, (long long *)&v39);
                if (v45 < 0)
                {
                  operator delete(v44);
                  if ((v43 & 0x80000000) == 0)
                  {
LABEL_61:
                    if ((v41 & 0x80000000) == 0) {
                      goto LABEL_62;
                    }
                    goto LABEL_76;
                  }
                }
                else if ((v43 & 0x80000000) == 0)
                {
                  goto LABEL_61;
                }
                operator delete(v42);
                if ((v41 & 0x80000000) == 0)
                {
LABEL_62:
                  if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_63;
                  }
                  goto LABEL_77;
                }
LABEL_76:
                operator delete(v40);
                if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_63:
                  if ((SHIBYTE(v67) & 0x80000000) == 0) {
                    goto LABEL_64;
                  }
                  goto LABEL_78;
                }
LABEL_77:
                operator delete(v39.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v67) & 0x80000000) == 0)
                {
LABEL_64:
                  if ((SBYTE7(v65) & 0x80000000) == 0) {
                    goto LABEL_65;
                  }
                  goto LABEL_79;
                }
LABEL_78:
                operator delete(*((void **)&v66 + 1));
                if ((SBYTE7(v65) & 0x80000000) == 0)
                {
LABEL_65:
                  if ((SHIBYTE(v63) & 0x80000000) == 0) {
                    goto LABEL_66;
                  }
                  goto LABEL_80;
                }
LABEL_79:
                operator delete((void *)v64);
                if ((SHIBYTE(v63) & 0x80000000) == 0)
                {
LABEL_66:
                  if ((SBYTE7(v62) & 0x80000000) == 0) {
                    goto LABEL_67;
                  }
                  goto LABEL_81;
                }
LABEL_80:
                operator delete(*((void **)&v62 + 1));
                if ((SBYTE7(v62) & 0x80000000) == 0)
                {
LABEL_67:
                  if ((v27 & 0x80000000) == 0) {
                    goto LABEL_68;
                  }
                  goto LABEL_82;
                }
LABEL_81:
                operator delete(*(void **)buf);
                if ((v27 & 0x80000000) == 0)
                {
LABEL_68:
                  uint64_t v9 = v60;
                  if (!v60) {
                    return;
                  }
                  goto LABEL_83;
                }
LABEL_82:
                operator delete(v57[0]);
                uint64_t v9 = v60;
                if (!v60) {
                  return;
                }
                goto LABEL_83;
              }
LABEL_72:
              operator delete((void *)v53);
              if ((SHIBYTE(v56) & 0x80000000) == 0) {
                goto LABEL_59;
              }
              goto LABEL_73;
            }
          }
          memmove(v24, v21, v23);
          goto LABEL_33;
        }
      }
      memmove(p_dst, v14, v16);
      goto LABEL_25;
    }
  }
}

void sub_1A60D80FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  ResetInfo::~ResetInfo((void **)&a9);
  ResetInfo::~ResetInfo((void **)(v59 - 224));
  if (v58 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v59 - 240);
  _Unwind_Resume(a1);
}

void DIAGTrace::stallDetection_sync(const __CFDictionary **this, int a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (this[47])
  {
    memset(v24, 170, sizeof(v24));
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v24, this[46]);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, diag::config::kBufferingOnAPAwake[0]);
    int Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v24, *(const __CFString **)buf);
    MEMORY[0x1A62748E0](buf);
    if (((a2 ^ 1 | Bool) & 1) != 0 || *((_DWORD *)this + 40))
    {
      BOOL v5 = 0;
      uint64_t v6 = this[5];
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_8;
      }
    }
    else
    {
      BOOL v5 = *((_DWORD *)this + 73) != 0;
      uint64_t v6 = this[5];
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_8;
      }
    }
    uint64_t v7 = "disabled";
    if (v5) {
      uint64_t v7 = "enabled";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEFAULT, "#I DIAG: stall detection is %s", buf, 0xCu);
LABEL_8:
    if (!v5)
    {
      char v18 = (uint64_t *)this[47];
      v19[0] = 0;
      v19[1] = 0;
      diag::Service::setStallHandler(v18, 15, (uint64_t)v19);
LABEL_26:
      MEMORY[0x1A6274930](v24);
      return;
    }
    *((_DWORD *)this + 74) = *((_DWORD *)this + 73);
    CFTypeRef v8 = (std::__shared_weak_count *)this[10];
    if (!v8 || (v9 = this[9], (std::string v10 = std::__shared_weak_count::lock(v8)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    std::string v11 = v10;
    p_shared_weak_owners = &v10->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    long long v13 = (uint64_t *)this[47];
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN9DIAGTrace19stallDetection_syncEb_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_99;
    aBlock[4] = this;
    void aBlock[5] = v9;
    char v21 = v11;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    int v14 = _Block_copy(aBlock);
    size_t v15 = v14;
    size_t v16 = this[11];
    if (v16)
    {
      dispatch_retain(v16);
      size_t v22 = v15;
      size_t v23 = v16;
      diag::Service::setStallHandler(v13, 15, (uint64_t)&v22);
      dispatch_release(v16);
      if (!v15) {
        goto LABEL_23;
      }
    }
    else
    {
      size_t v22 = v14;
      size_t v23 = 0;
      diag::Service::setStallHandler(v13, 15, (uint64_t)&v22);
      if (!v15)
      {
LABEL_23:
        if (v21) {
          std::__shared_weak_count::__release_weak(v21);
        }
        std::__shared_weak_count::__release_weak(v11);
        goto LABEL_26;
      }
    }
    _Block_release(v15);
    goto LABEL_23;
  }
  int v17 = this[5];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl(&dword_1A609F000, v17, OS_LOG_TYPE_DEFAULT, "#I No DIAG service", v24, 2u);
  }
}

void sub_1A60D84E4(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c29_ZTSNSt3__18weak_ptrI5TraceEE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    BOOL v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c29_ZTSNSt3__18weak_ptrI5TraceEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (v4)
    {
      dispatch_release(v4);
    }
  }
}

void DIAGTrace::destroyService_sync(uint64_t a1, NSObject **a2, const void **a3)
{
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEFAULT, "#I Request to destroy service", buf, 2u);
  }
  uint64_t v7 = *a2;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  CFTypeRef v8 = dispatch_group_create();
  std::string v10 = v8;
  if ((*(unsigned char *)(a1 + 152) & 2) == 0)
  {
    char v21 = v8;
    if (v8) {
      dispatch_retain(v8);
    }
    std::string v11 = *a3;
    uint64_t v20 = v11;
    if (v11) {
      CFRetain(v11);
    }
    DIAGTrace::stop_sync((DIAGTrace *)a1, &v21, v9, 0);
    if (v11) {
      CFRelease(v11);
    }
    if (v10) {
      dispatch_release(v10);
    }
  }
  long long v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12 || (uint64_t v13 = *(void *)(a1 + 72), (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v15 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 1174405120;
  v16[2] = ___ZN9DIAGTrace19destroyService_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v16[3] = &__block_descriptor_tmp_14_0;
  v16[4] = a1;
  dispatch_group_t group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(group);
  }
  uint64_t v18 = v13;
  uint64_t v19 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  dispatch_group_notify(v10, *(dispatch_queue_t *)(a1 + 88), v16);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  std::__shared_weak_count::__release_weak(v15);
  if (v10) {
    dispatch_release(v10);
  }
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
}

void sub_1A60D882C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  if (v10)
  {
    dispatch_release(v10);
    dispatch_release(v10);
  }
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
  }
  _Unwind_Resume(a1);
}

void DIAGTrace::stop_sync(DIAGTrace *this, NSObject **a2, uint64_t a3, char a4)
{
  if (*((void *)this + 47))
  {
    DIAGTrace::stallDetection_sync(this, 0);
    uint64_t v7 = *a2;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(v7);
    }
    CFTypeRef v8 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v8 || (v9 = *((void *)this + 9), (std::string v10 = std::__shared_weak_count::lock(v8)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    std::string v11 = v10;
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v12 = (uint64_t *)*((void *)this + 47);
      if ((*((unsigned char *)this + 152) & 2) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
      long long v12 = (uint64_t *)*((void *)this + 47);
      if ((*((unsigned char *)this + 152) & 2) == 0)
      {
LABEL_8:
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN9DIAGTrace9stop_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEb_block_invoke;
        aBlock[3] = &__block_descriptor_tmp_20_1;
        aBlock[4] = this;
        dispatch_group_t group = v7;
        if (v7)
        {
          dispatch_retain(v7);
          dispatch_group_enter(group);
        }
        uint64_t v28 = v9;
        int v29 = v11;
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        char v30 = a4;
        uint64_t v13 = _Block_copy(aBlock);
        int v14 = *((void *)this + 11);
        if (v14) {
          dispatch_retain(v14);
        }
        v31[0] = v13;
        v31[1] = v14;
        diag::Service::stop(v12, (uint64_t)v31, a4);
        if (v14) {
          dispatch_release(v14);
        }
        if (v13) {
          _Block_release(v13);
        }
        if (v29) {
          std::__shared_weak_count::__release_weak(v29);
        }
        if (!group) {
          goto LABEL_36;
        }
        dispatch_group_leave(group);
        size_t v15 = group;
        if (!group) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
    }
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 1174405120;
    v20[2] = ___ZN9DIAGTrace9stop_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEb_block_invoke_21;
    v20[3] = &__block_descriptor_tmp_24;
    v20[4] = this;
    dispatch_group_t object = v7;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(object);
    }
    uint64_t v22 = v9;
    size_t v23 = v11;
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    int v17 = _Block_copy(v20);
    uint64_t v18 = v17;
    uint64_t v19 = *((void *)this + 11);
    if (v19)
    {
      dispatch_retain(v19);
      uint64_t v24 = v18;
      uint64_t v25 = v19;
      diag::Service::reset(v12, (uint64_t)&v24);
      dispatch_release(v19);
      if (!v18)
      {
LABEL_31:
        if (v23) {
          std::__shared_weak_count::__release_weak(v23);
        }
        if (!object) {
          goto LABEL_36;
        }
        dispatch_group_leave(object);
        size_t v15 = object;
        if (!object) {
          goto LABEL_36;
        }
LABEL_35:
        dispatch_release(v15);
LABEL_36:
        std::__shared_weak_count::__release_weak(v11);
        if (v7)
        {
          dispatch_group_leave(v7);
          dispatch_release(v7);
        }
        return;
      }
    }
    else
    {
      uint64_t v24 = v17;
      uint64_t v25 = 0;
      diag::Service::reset(v12, (uint64_t)&v24);
      if (!v18) {
        goto LABEL_31;
      }
    }
    _Block_release(v18);
    goto LABEL_31;
  }
  size_t v16 = *((void *)this + 5);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1A609F000, v16, OS_LOG_TYPE_DEFAULT, "#I Service not initialized. Ignoring stop request", buf, 2u);
  }
}

void sub_1A60D8B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,dispatch_group_t group,uint64_t a26,std::__shared_weak_count *a27)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v29 - 96);
  if (a27) {
    std::__shared_weak_count::__release_weak(a27);
  }
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  std::__shared_weak_count::__release_weak(v28);
  if (v27)
  {
    dispatch_group_leave(v27);
    dispatch_release(v27);
  }
  _Unwind_Resume(a1);
}

void ___ZN9DIAGTrace19destroyService_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      BOOL v5 = v4;
      if (!a1[6] || (uint64_t v6 = *(uint64_t **)(v3 + 376)) == 0)
      {
LABEL_17:
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
      uint64_t v7 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1A609F000, v7, OS_LOG_TYPE_DEFAULT, "#I Reset service before destroying it", buf, 2u);
        uint64_t v6 = *(uint64_t **)(v3 + 376);
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      void v12[2] = ___ZN9DIAGTrace19destroyService_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_10;
      v12[3] = &__block_descriptor_tmp_11_1;
      CFTypeRef v8 = a1[5];
      v12[4] = v3;
      dispatch_group_t group = v8;
      if (v8)
      {
        dispatch_retain(v8);
        dispatch_group_enter(group);
      }
      uint64_t v9 = _Block_copy(v12);
      std::string v10 = v9;
      std::string v11 = *(NSObject **)(v3 + 88);
      if (v11)
      {
        dispatch_retain(*(dispatch_object_t *)(v3 + 88));
        int v14 = v10;
        size_t v15 = v11;
        diag::Service::reset(v6, (uint64_t)&v14);
        dispatch_release(v11);
        if (!v10) {
          goto LABEL_14;
        }
      }
      else
      {
        int v14 = v9;
        size_t v15 = 0;
        diag::Service::reset(v6, (uint64_t)&v14);
        if (!v10)
        {
LABEL_14:
          if (group)
          {
            dispatch_group_leave(group);
            if (group) {
              dispatch_release(group);
            }
          }
          goto LABEL_17;
        }
      }
      _Block_release(v10);
      goto LABEL_14;
    }
  }
}

void ___ZN9DIAGTrace19destroyService_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_10(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  BOOL v5 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a3 + 23) < 0) {
      a3 = (uint64_t *)*a3;
    }
    int v9 = 136315138;
    std::string v10 = a3;
    _os_log_impl(&dword_1A609F000, v5, OS_LOG_TYPE_DEFAULT, "#I Reset complete. %s", (uint8_t *)&v9, 0xCu);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 384);
  *(void *)(v4 + 376) = 0;
  *(void *)(v4 + 384) = 0;
  if (!v6 || atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v7 = *(NSObject **)(v4 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  uint64_t v7 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
LABEL_8:
    LOWORD(v9) = 0;
    _os_log_impl(&dword_1A609F000, v7, OS_LOG_TYPE_DEFAULT, "#I Destroyed service", (uint8_t *)&v9, 2u);
  }
LABEL_9:
  if (*(unsigned char *)(v4 + 400))
  {
    CFTypeRef v8 = *(NSObject **)(v4 + 144);
    if (v8)
    {
      dispatch_group_leave(v8);
      *(unsigned char *)(v4 + 400) = 0;
    }
  }
}

void DIAGTrace::abort_sync(const __CFDictionary **this, uint64_t a2, const __CFDictionary **a3)
{
  if (this[47])
  {
    DIAGTrace::stallDetection_sync(this, 0);
    v36[0] = 0xAAAAAAAAAAAAAAAALL;
    v36[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v36, *a3);
    memset(buf, 170, sizeof(buf));
    BOOL v5 = (const char *)*MEMORY[0x1E4F4C690];
    memset(__p, 0, sizeof(__p));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v32, v5);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1A62748E0](&v32);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    memset(__p, 170, sizeof(__p));
    char v32 = operator new(0x28uLL);
    long long v33 = xmmword_1A61F71C0;
    strcpy((char *)v32, "kCollectTelephonyLogsWithCoredump");
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v37, "kKeyTraceAction");
    ctu::cf::map_adapter::getString();
    MEMORY[0x1A62748E0](&v37);
    if (SHIBYTE(v33) < 0) {
      operator delete(v32);
    }
    if ((buf[23] & 0x80u) == 0) {
      size_t v6 = buf[23];
    }
    else {
      size_t v6 = *(void *)&buf[8];
    }
    if (v6 != strlen((const char *)*MEMORY[0x1E4F4C6E8])
      || ((buf[23] & 0x80u) == 0 ? (uint64_t v7 = buf) : (uint64_t v7 = *(uint8_t **)buf),
          memcmp(v7, (const void *)*MEMORY[0x1E4F4C6E8], v6)))
    {
      CFTypeRef v8 = (void *)HIBYTE(__p[2]);
      if (SHIBYTE(__p[2]) < 0) {
        CFTypeRef v8 = __p[1];
      }
      if (v8 == (void *)17)
      {
        size_t v16 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          size_t v16 = (void **)__p[0];
        }
        int v17 = *v16;
        uint64_t v18 = v16[1];
        uint64_t v19 = *((unsigned __int8 *)v16 + 16);
        if (v17 != *(void **)"kShutdownAllTrace" || v18 != *(void **)"nAllTrace" || v19 != str_72[16])
        {
LABEL_24:
          char v13 = 1;
          int v14 = (std::__shared_weak_count *)this[10];
          if (!v14) {
LABEL_56:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_40:
          CFDictionaryRef v22 = this[9];
          size_t v23 = std::__shared_weak_count::lock(v14);
          if (!v23) {
            goto LABEL_56;
          }
          uint64_t v24 = v23;
          p_shared_weak_owners = &v23->__shared_weak_owners_;
          atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v24);
          }
          uint64_t v26 = (uint64_t *)this[47];
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZN9DIAGTrace10abort_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
          aBlock[3] = &__block_descriptor_tmp_17;
          aBlock[4] = this;
          void aBlock[5] = v22;
          char v30 = v24;
          atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
          int v27 = _Block_copy(aBlock);
          uint64_t v28 = this[11];
          if (v28) {
            dispatch_retain(v28);
          }
          v31[0] = v27;
          v31[1] = v28;
          diag::Service::abort(v26, v13, (uint64_t)v31);
          if (v28) {
            dispatch_release(v28);
          }
          if (v27) {
            _Block_release(v27);
          }
          if (v30) {
            std::__shared_weak_count::__release_weak(v30);
          }
          std::__shared_weak_count::__release_weak(v24);
          if (SHIBYTE(__p[2]) < 0)
          {
            operator delete(__p[0]);
            if (((char)buf[23] & 0x80000000) == 0) {
              goto LABEL_53;
            }
          }
          else if (((char)buf[23] & 0x80000000) == 0)
          {
LABEL_53:
            MEMORY[0x1A6274930](v36);
            return;
          }
          operator delete(*(void **)buf);
          goto LABEL_53;
        }
      }
      else
      {
        if (v8 != (void *)15) {
          goto LABEL_24;
        }
        int v9 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          int v9 = (void **)__p[0];
        }
        std::string v10 = *v9;
        uint64_t v11 = *(uint64_t *)((char *)v9 + 7);
        if (v10 != *(void **)"kReinitAllTrace" || v11 != *(void *)"AllTrace") {
          goto LABEL_24;
        }
      }
    }
    char v13 = 0;
    int v14 = (std::__shared_weak_count *)this[10];
    if (!v14) {
      goto LABEL_56;
    }
    goto LABEL_40;
  }
  size_t v15 = this[5];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1A609F000, v15, OS_LOG_TYPE_DEFAULT, "#I Service not initialized. Ignoring abort request", buf, 2u);
  }
}

void sub_1A60D9314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a17);
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  std::__shared_weak_count::__release_weak(v30);
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v31 - 73) < 0) {
    operator delete(*(void **)(v31 - 96));
  }
  MEMORY[0x1A6274930](v31 - 72);
  _Unwind_Resume(a1);
}

void ___ZN9DIAGTrace10abort_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      CFTypeRef v8 = v7;
      if (a1[5])
      {
        int v9 = *(NSObject **)(v6 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          if (*((char *)a3 + 23) < 0) {
            a3 = (uint64_t *)*a3;
          }
          int v11 = 136315138;
          long long v12 = a3;
          _os_log_impl(&dword_1A609F000, v9, OS_LOG_TYPE_DEFAULT, "#I Abort complete. %s", (uint8_t *)&v11, 0xCu);
        }
        if (*(unsigned char *)(v6 + 400))
        {
          std::string v10 = *(NSObject **)(v6 + 144);
          if (v10)
          {
            dispatch_group_leave(v10);
            *(unsigned char *)(v6 + 400) = 0;
          }
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN9DIAGTrace9stop_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEb_block_invoke(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFTypeRef v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      int v9 = v8;
      if (!*(void *)(a1 + 48))
      {
LABEL_22:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (a2 == 4)
      {
        int v14 = *(NSObject **)(v7 + 40);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_18;
        }
        if (*((char *)a3 + 23) < 0) {
          a3 = (uint64_t *)*a3;
        }
        int v16 = 136315138;
        int v17 = a3;
        int v11 = "#I Stop error. %s";
      }
      else
      {
        if (!a2)
        {
          std::string v10 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v16) = 0;
            int v11 = "#I Stop complete";
            long long v12 = v10;
            uint32_t v13 = 2;
LABEL_17:
            _os_log_impl(&dword_1A609F000, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v16, v13);
          }
LABEL_18:
          if (*(unsigned char *)(v7 + 400))
          {
            size_t v15 = *(NSObject **)(v7 + 144);
            if (v15)
            {
              if (!*(unsigned char *)(a1 + 64))
              {
                dispatch_group_leave(v15);
                *(unsigned char *)(v7 + 400) = 0;
              }
            }
          }
          goto LABEL_22;
        }
        int v14 = *(NSObject **)(v7 + 40);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_18;
        }
        if (*((char *)a3 + 23) < 0) {
          a3 = (uint64_t *)*a3;
        }
        int v16 = 136315138;
        int v17 = a3;
        int v11 = "#I Stop skipped. %s";
      }
      long long v12 = v14;
      uint32_t v13 = 12;
      goto LABEL_17;
    }
  }
}

void ___ZN9DIAGTrace9stop_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEb_block_invoke_21(void *a1, int a2, uint64_t *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    uint64_t v7 = a1[4];
    CFTypeRef v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      int v9 = v8;
      if (!a1[6])
      {
LABEL_21:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (a2 == 4)
      {
        int v14 = *(NSObject **)(v7 + 40);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_18;
        }
        if (*((char *)a3 + 23) < 0) {
          a3 = (uint64_t *)*a3;
        }
        int v16 = 136315138;
        int v17 = a3;
        int v11 = "#I Reset error. %s";
      }
      else
      {
        if (!a2)
        {
          std::string v10 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v16) = 0;
            int v11 = "#I Reset complete";
            long long v12 = v10;
            uint32_t v13 = 2;
LABEL_17:
            _os_log_impl(&dword_1A609F000, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v16, v13);
          }
LABEL_18:
          if (*(unsigned char *)(v7 + 400))
          {
            size_t v15 = *(NSObject **)(v7 + 144);
            if (v15)
            {
              dispatch_group_leave(v15);
              *(unsigned char *)(v7 + 400) = 0;
            }
          }
          goto LABEL_21;
        }
        int v14 = *(NSObject **)(v7 + 40);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_18;
        }
        if (*((char *)a3 + 23) < 0) {
          a3 = (uint64_t *)*a3;
        }
        int v16 = 136315138;
        int v17 = a3;
        int v11 = "#I Reset skipped. %s";
      }
      long long v12 = v14;
      uint32_t v13 = 12;
      goto LABEL_17;
    }
  }
}

void DIAGTrace::restartService_sync(DIAGTrace *this, group *a2)
{
  if (*((unsigned char *)this + 300))
  {
    gr_name = a2->gr_name;
    if (a2->gr_name)
    {
      dispatch_retain((dispatch_object_t)a2->gr_name);
      dispatch_group_enter((dispatch_group_t)gr_name);
    }
    BOOL v5 = *((void *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1A609F000, v5, OS_LOG_TYPE_DEFAULT, "#I Restarting service", buf, 2u);
    }
    *(void *)std::string buf = 0;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFTypeRef v7 = *(CFTypeRef *)buf;
      *(void *)std::string buf = Mutable;
      if (v7) {
        CFRelease(v7);
      }
    }
    CFTypeRef v8 = dispatch_group_create();
    std::string v10 = v8;
    uint64_t v20 = v8;
    if (v8) {
      dispatch_retain(v8);
    }
    CFTypeRef v11 = *(CFTypeRef *)buf;
    if (*(void *)buf && (CFTypeID v12 = CFGetTypeID(*(CFTypeRef *)buf), v12 == CFDictionaryGetTypeID()))
    {
      CFTypeRef v19 = v11;
      CFRetain(v11);
    }
    else
    {
      CFTypeRef v11 = 0;
      CFTypeRef v19 = 0;
    }
    DIAGTrace::stop_sync(this, &v20, v9, 0);
    if (v11) {
      CFRelease(v11);
    }
    if (v10) {
      dispatch_release(v10);
    }
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 1174405120;
    v15[2] = ___ZN9DIAGTrace19restartService_syncEN8dispatch5groupE_block_invoke;
    v15[3] = &__block_descriptor_tmp_25;
    v15[4] = this;
    dispatch_group_t group = (dispatch_group_t)gr_name;
    if (gr_name)
    {
      dispatch_retain((dispatch_object_t)gr_name);
      dispatch_group_enter(group);
    }
    uint32_t v13 = a2->gr_name;
    dispatch_object_t object = (dispatch_object_t)v13;
    if (v13) {
      dispatch_retain((dispatch_object_t)v13);
    }
    CFTypeRef cf = *(CFTypeRef *)buf;
    if (*(void *)buf) {
      CFRetain(*(CFTypeRef *)buf);
    }
    dispatch_group_notify(v10, *((dispatch_queue_t *)this + 11), v15);
    if (cf) {
      CFRelease(cf);
    }
    if (object) {
      dispatch_release(object);
    }
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    if (v10) {
      dispatch_release(v10);
    }
    if (*(void *)buf) {
      CFRelease(*(CFTypeRef *)buf);
    }
    if (gr_name)
    {
      dispatch_group_leave((dispatch_group_t)gr_name);
      dispatch_release((dispatch_object_t)gr_name);
    }
  }
  else
  {
    int v14 = *((void *)this + 5);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1A609F000, v14, OS_LOG_TYPE_DEFAULT, "#I Restart skipped. Diag trace is disabled", buf, 2u);
    }
  }
}

void sub_1A60D9B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  if (v10)
  {
    dispatch_release(v10);
    dispatch_release(v10);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v11 - 64));
    if (!v9) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v11 - 64));
    if (!v9) {
      goto LABEL_3;
    }
  }
  dispatch_group_leave(v9);
  dispatch_release(v9);
  _Unwind_Resume(a1);
}

void ___ZN9DIAGTrace19restartService_syncEN8dispatch5groupE_block_invoke(void *a1)
{
  uint64_t v2 = (DIAGTrace *)a1[4];
  uint64_t v3 = a1[6];
  if (v3) {
    dispatch_retain(v3);
  }
  uint64_t v4 = (const void *)a1[7];
  if (v4 && (CFTypeID v5 = CFGetTypeID(v4), v5 == CFDictionaryGetTypeID())) {
    CFRetain(v4);
  }
  else {
    uint64_t v4 = 0;
  }
  DIAGTrace::start_sync(v2);
  if (v4) {
    CFRelease(v4);
  }
  if (v3)
  {
    dispatch_release(v3);
  }
}

void sub_1A60D9C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9) {
    dispatch_release(v9);
  }
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c21_ZTSN8dispatch5groupE56c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    CFTypeID v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = a2[6];
  a1[6] = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  CFTypeRef result = (CFTypeRef)a2[7];
  a1[7] = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c21_ZTSN8dispatch5groupE56c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(void *a1)
{
  uint64_t v2 = (const void *)a1[7];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = a1[6];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = a1[5];
  if (v4)
  {
    dispatch_group_leave(v4);
    CFTypeID v5 = a1[5];
    if (v5)
    {
      dispatch_release(v5);
    }
  }
}

void DIAGTrace::enterLowPower_sync(DIAGTrace *this, group *a2)
{
  if (*((void *)this + 47))
  {
    gr_name = a2->gr_name;
    if (a2->gr_name)
    {
      dispatch_retain((dispatch_object_t)a2->gr_name);
      dispatch_group_enter((dispatch_group_t)gr_name);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v4 || (uint64_t v5 = *((void *)this + 9), (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    CFTypeRef v7 = v6;
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
    }
    CFTypeRef v8 = (uint64_t *)*((void *)this + 47);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 1174405120;
    void v13[2] = ___ZN9DIAGTrace18enterLowPower_syncEN8dispatch5groupE_block_invoke;
    v13[3] = &__block_descriptor_tmp_29_0;
    v13[4] = this;
    dispatch_group_t group = (dispatch_group_t)gr_name;
    if (gr_name)
    {
      dispatch_retain((dispatch_object_t)gr_name);
      dispatch_group_enter(group);
    }
    uint64_t v15 = v5;
    int v16 = v7;
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = _Block_copy(v13);
    std::string v10 = v9;
    uint64_t v11 = *((void *)this + 11);
    if (v11)
    {
      dispatch_retain(v11);
      int v17 = v10;
      uint64_t v18 = v11;
      diag::Service::sleep(v8, (uint64_t)&v17);
      dispatch_release(v11);
      if (!v10) {
        goto LABEL_18;
      }
    }
    else
    {
      int v17 = v9;
      uint64_t v18 = 0;
      diag::Service::sleep(v8, (uint64_t)&v17);
      if (!v10)
      {
LABEL_18:
        if (v16) {
          std::__shared_weak_count::__release_weak(v16);
        }
        if (group)
        {
          dispatch_group_leave(group);
          if (group) {
            dispatch_release(group);
          }
        }
        std::__shared_weak_count::__release_weak(v7);
        if (gr_name)
        {
          dispatch_group_leave((dispatch_group_t)gr_name);
          dispatch_release((dispatch_object_t)gr_name);
        }
        return;
      }
    }
    _Block_release(v10);
    goto LABEL_18;
  }
  CFTypeID v12 = *((void *)this + 5);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1A609F000, v12, OS_LOG_TYPE_DEFAULT, "#I Service not initialized. Ignoring enter low-power request", buf, 2u);
  }
}

void sub_1A60D9F8C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN9DIAGTrace18enterLowPower_syncEN8dispatch5groupE_block_invoke(void *a1, int a2, void *a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    uint64_t v7 = a1[4];
    CFTypeRef v8 = std::__shared_weak_count::lock(v4);
    uint64_t v59 = v8;
    if (v8)
    {
      uint64_t v9 = v8;
      if (!a1[6])
      {
LABEL_83:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (a2 != 4)
      {
        if (a2 == 2)
        {
          std::string v10 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_1A609F000, v10, OS_LOG_TYPE_DEFAULT, "#I Enter low-power complete", (uint8_t *)&buf, 2u);
          }
          DIAGTrace::stallDetection_sync((const __CFDictionary **)v7, 0);
        }
        else
        {
          uint64_t v18 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            if (*((char *)a3 + 23) < 0) {
              a3 = (void *)*a3;
            }
            LODWORD(buf) = 136315138;
            *(void *)((char *)&buf + 4) = a3;
            _os_log_impl(&dword_1A609F000, v18, OS_LOG_TYPE_DEFAULT, "#I Enter low-power skipped. %s", (uint8_t *)&buf, 0xCu);
          }
        }
        goto LABEL_83;
      }
      uint64_t v11 = *(NSObject **)(v7 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        CFTypeID v12 = a3;
        if (*((char *)a3 + 23) < 0) {
          CFTypeID v12 = (void *)*a3;
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v12;
        _os_log_impl(&dword_1A609F000, v11, OS_LOG_TYPE_DEFAULT, "#I Enter low-power error. %s", (uint8_t *)&buf, 0xCu);
      }
      unint64_t v56 = operator new(0x20uLL);
      long long v57 = xmmword_1A61F6FD0;
      strcpy((char *)v56, "Enter low-power failed. ");
      *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v66 = v13;
      long long v65 = v13;
      long long v64 = v13;
      long long v63 = v13;
      long long v62 = v13;
      long long v61 = v13;
      long long buf = v13;
      int v14 = (const void *)*MEMORY[0x1E4F4C6E8];
      size_t v15 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
      if (v15 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v16 = v15;
      if (v15 >= 0x17)
      {
        uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17) {
          uint64_t v19 = v15 | 7;
        }
        uint64_t v20 = v19 + 1;
        p_dst = (long long *)operator new(v19 + 1);
        *((void *)&__dst + 1) = v16;
        unint64_t v55 = v20 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v55) = v15;
        p_dst = &__dst;
        if (!v15)
        {
LABEL_25:
          *((unsigned char *)p_dst + v16) = 0;
          char v21 = (const void *)*MEMORY[0x1E4F4CF30];
          size_t v22 = strlen((const char *)*MEMORY[0x1E4F4CF30]);
          if (v22 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v23 = v22;
          if (v22 >= 0x17)
          {
            uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v22 | 7) != 0x17) {
              uint64_t v25 = v22 | 7;
            }
            uint64_t v26 = v25 + 1;
            uint64_t v24 = operator new(v25 + 1);
            *((void *)&v52 + 1) = v23;
            unint64_t v53 = v26 | 0x8000000000000000;
            *(void *)&long long v52 = v24;
          }
          else
          {
            HIBYTE(v53) = v22;
            uint64_t v24 = &v52;
            if (!v22)
            {
LABEL_33:
              v24[v23] = 0;
              int v27 = SHIBYTE(v57);
              if (v57 >= 0) {
                size_t v28 = HIBYTE(v57);
              }
              else {
                size_t v28 = v57;
              }
              int v29 = *((char *)a3 + 23);
              if (v29 >= 0) {
                size_t v30 = *((unsigned __int8 *)a3 + 23);
              }
              else {
                size_t v30 = a3[1];
              }
              unint64_t v31 = v30 + v28;
              memset(v51, 170, sizeof(v51));
              if (v30 + v28 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              if (v31 > 0x16)
              {
                uint64_t v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v31 | 7) != 0x17) {
                  uint64_t v33 = v31 | 7;
                }
                uint64_t v34 = v33 + 1;
                char v32 = (char *)operator new(v33 + 1);
                v51[1] = (void *)(v30 + v28);
                v51[2] = (void *)(v34 | 0x8000000000000000);
                v51[0] = v32;
              }
              else
              {
                memset(v51, 0, sizeof(v51));
                char v32 = (char *)v51;
                HIBYTE(v51[2]) = v30 + v28;
              }
              if (v28)
              {
                if (v27 >= 0) {
                  uint64_t v35 = &v56;
                }
                else {
                  uint64_t v35 = v56;
                }
                memmove(v32, v35, v28);
              }
              size_t v36 = &v32[v28];
              if (v30)
              {
                if (v29 >= 0) {
                  uint64_t v37 = a3;
                }
                else {
                  uint64_t v37 = (const void *)*a3;
                }
                memmove(v36, v37, v30);
              }
              v36[v30] = 0;
              Timestamp::Timestamp((Timestamp *)v47);
              Timestamp::asString((uint64_t)v47, 0, 9, __p);
              char v46 = 0;
              LOBYTE(v45) = 0;
              ResetInfo::ResetInfo((std::string *)&buf, &__dst, &v52, (long long *)v51, (uint64_t)__p, 7, &v45);
              if (v50 < 0)
              {
                operator delete(__p[0]);
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v47, v48);
                if ((SHIBYTE(v51[2]) & 0x80000000) == 0)
                {
LABEL_57:
                  if ((SHIBYTE(v53) & 0x80000000) == 0) {
                    goto LABEL_58;
                  }
                  goto LABEL_72;
                }
              }
              else
              {
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v47, v48);
                if ((SHIBYTE(v51[2]) & 0x80000000) == 0) {
                  goto LABEL_57;
                }
              }
              operator delete(v51[0]);
              if ((SHIBYTE(v53) & 0x80000000) == 0)
              {
LABEL_58:
                if ((SHIBYTE(v55) & 0x80000000) == 0) {
                  goto LABEL_59;
                }
LABEL_73:
                operator delete((void *)__dst);
LABEL_59:
                ResetInfo::ResetInfo(&v38, &buf);
                DIAGTrace::commandResetModem_sync((void *)v7, (long long *)&v38);
                if (v44 < 0)
                {
                  operator delete(v43);
                  if ((v42 & 0x80000000) == 0)
                  {
LABEL_61:
                    if ((v40 & 0x80000000) == 0) {
                      goto LABEL_62;
                    }
                    goto LABEL_76;
                  }
                }
                else if ((v42 & 0x80000000) == 0)
                {
                  goto LABEL_61;
                }
                operator delete(v41);
                if ((v40 & 0x80000000) == 0)
                {
LABEL_62:
                  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_63;
                  }
                  goto LABEL_77;
                }
LABEL_76:
                operator delete(v39);
                if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_63:
                  if ((SHIBYTE(v66) & 0x80000000) == 0) {
                    goto LABEL_64;
                  }
                  goto LABEL_78;
                }
LABEL_77:
                operator delete(v38.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v66) & 0x80000000) == 0)
                {
LABEL_64:
                  if ((SBYTE7(v64) & 0x80000000) == 0) {
                    goto LABEL_65;
                  }
                  goto LABEL_79;
                }
LABEL_78:
                operator delete(*((void **)&v65 + 1));
                if ((SBYTE7(v64) & 0x80000000) == 0)
                {
LABEL_65:
                  if ((SHIBYTE(v62) & 0x80000000) == 0) {
                    goto LABEL_66;
                  }
                  goto LABEL_80;
                }
LABEL_79:
                operator delete((void *)v63);
                if ((SHIBYTE(v62) & 0x80000000) == 0)
                {
LABEL_66:
                  if ((SBYTE7(v61) & 0x80000000) == 0) {
                    goto LABEL_67;
                  }
                  goto LABEL_81;
                }
LABEL_80:
                operator delete(*((void **)&v61 + 1));
                if ((SBYTE7(v61) & 0x80000000) == 0)
                {
LABEL_67:
                  if ((v27 & 0x80000000) == 0) {
                    goto LABEL_68;
                  }
                  goto LABEL_82;
                }
LABEL_81:
                operator delete((void *)buf);
                if ((v27 & 0x80000000) == 0)
                {
LABEL_68:
                  uint64_t v9 = v59;
                  if (!v59) {
                    return;
                  }
                  goto LABEL_83;
                }
LABEL_82:
                operator delete(v56);
                uint64_t v9 = v59;
                if (!v59) {
                  return;
                }
                goto LABEL_83;
              }
LABEL_72:
              operator delete((void *)v52);
              if ((SHIBYTE(v55) & 0x80000000) == 0) {
                goto LABEL_59;
              }
              goto LABEL_73;
            }
          }
          memmove(v24, v21, v23);
          goto LABEL_33;
        }
      }
      memmove(p_dst, v14, v16);
      goto LABEL_25;
    }
  }
}

void sub_1A60DA594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  ResetInfo::~ResetInfo(&a10);
  ResetInfo::~ResetInfo((void **)(v60 - 224));
  if (v59 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v60 - 240);
  _Unwind_Resume(a1);
}

void DIAGTrace::exitLowPower_sync(DIAGTrace *this, group *a2)
{
  if (*((void *)this + 47))
  {
    gr_name = a2->gr_name;
    if (a2->gr_name)
    {
      dispatch_retain((dispatch_object_t)a2->gr_name);
      dispatch_group_enter((dispatch_group_t)gr_name);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v4 || (uint64_t v5 = *((void *)this + 9), (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v7 = v6;
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
    }
    CFTypeRef v8 = (uint64_t *)*((void *)this + 47);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 1174405120;
    void v13[2] = ___ZN9DIAGTrace17exitLowPower_syncEN8dispatch5groupE_block_invoke;
    v13[3] = &__block_descriptor_tmp_33_0;
    v13[4] = this;
    dispatch_group_t group = (dispatch_group_t)gr_name;
    if (gr_name)
    {
      dispatch_retain((dispatch_object_t)gr_name);
      dispatch_group_enter(group);
    }
    uint64_t v15 = v5;
    size_t v16 = v7;
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = _Block_copy(v13);
    std::string v10 = v9;
    uint64_t v11 = *((void *)this + 11);
    if (v11)
    {
      dispatch_retain(v11);
      int v17 = v10;
      uint64_t v18 = v11;
      diag::Service::wake(v8, (uint64_t)&v17);
      dispatch_release(v11);
      if (!v10) {
        goto LABEL_18;
      }
    }
    else
    {
      int v17 = v9;
      uint64_t v18 = 0;
      diag::Service::wake(v8, (uint64_t)&v17);
      if (!v10)
      {
LABEL_18:
        if (v16) {
          std::__shared_weak_count::__release_weak(v16);
        }
        if (group)
        {
          dispatch_group_leave(group);
          if (group) {
            dispatch_release(group);
          }
        }
        std::__shared_weak_count::__release_weak(v7);
        if (gr_name)
        {
          dispatch_group_leave((dispatch_group_t)gr_name);
          dispatch_release((dispatch_object_t)gr_name);
        }
        return;
      }
    }
    _Block_release(v10);
    goto LABEL_18;
  }
  CFTypeID v12 = *((void *)this + 5);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A609F000, v12, OS_LOG_TYPE_DEFAULT, "#I Service not initialized. Ignoring exit low-power request", buf, 2u);
  }
}

void sub_1A60DA8C4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN9DIAGTrace17exitLowPower_syncEN8dispatch5groupE_block_invoke(void *a1, int a2, void *a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    uint64_t v7 = a1[4];
    CFTypeRef v8 = std::__shared_weak_count::lock(v4);
    char v59 = v8;
    if (v8)
    {
      uint64_t v9 = v8;
      if (!a1[6])
      {
LABEL_83:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (a2 != 4)
      {
        if (a2 == 1)
        {
          std::string v10 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_1A609F000, v10, OS_LOG_TYPE_DEFAULT, "#I Exit low-power complete", (uint8_t *)&buf, 2u);
          }
          DIAGTrace::stallDetection_sync((const __CFDictionary **)v7, *(unsigned __int8 *)(v7 + 288));
        }
        else
        {
          uint64_t v18 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            if (*((char *)a3 + 23) < 0) {
              a3 = (void *)*a3;
            }
            LODWORD(buf) = 136315138;
            *(void *)((char *)&buf + 4) = a3;
            _os_log_impl(&dword_1A609F000, v18, OS_LOG_TYPE_DEFAULT, "#I Exit low-power skipped. %s", (uint8_t *)&buf, 0xCu);
          }
        }
        goto LABEL_83;
      }
      uint64_t v11 = *(NSObject **)(v7 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        CFTypeID v12 = a3;
        if (*((char *)a3 + 23) < 0) {
          CFTypeID v12 = (void *)*a3;
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v12;
        _os_log_impl(&dword_1A609F000, v11, OS_LOG_TYPE_DEFAULT, "#I Exit low-power error. %s", (uint8_t *)&buf, 0xCu);
      }
      unint64_t v56 = operator new(0x20uLL);
      long long v57 = xmmword_1A61F7580;
      strcpy((char *)v56, "Diag exit low-power failed. ");
      *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v66 = v13;
      long long v65 = v13;
      long long v64 = v13;
      long long v63 = v13;
      long long v62 = v13;
      long long v61 = v13;
      long long buf = v13;
      int v14 = (const void *)*MEMORY[0x1E4F4C6E8];
      size_t v15 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
      if (v15 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v16 = v15;
      if (v15 >= 0x17)
      {
        uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17) {
          uint64_t v19 = v15 | 7;
        }
        uint64_t v20 = v19 + 1;
        p_dst = (long long *)operator new(v19 + 1);
        *((void *)&__dst + 1) = v16;
        unint64_t v55 = v20 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v55) = v15;
        p_dst = &__dst;
        if (!v15)
        {
LABEL_25:
          *((unsigned char *)p_dst + v16) = 0;
          char v21 = (const void *)*MEMORY[0x1E4F4CF30];
          size_t v22 = strlen((const char *)*MEMORY[0x1E4F4CF30]);
          if (v22 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v23 = v22;
          if (v22 >= 0x17)
          {
            uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v22 | 7) != 0x17) {
              uint64_t v25 = v22 | 7;
            }
            uint64_t v26 = v25 + 1;
            uint64_t v24 = operator new(v25 + 1);
            *((void *)&v52 + 1) = v23;
            unint64_t v53 = v26 | 0x8000000000000000;
            *(void *)&long long v52 = v24;
          }
          else
          {
            HIBYTE(v53) = v22;
            uint64_t v24 = &v52;
            if (!v22)
            {
LABEL_33:
              v24[v23] = 0;
              int v27 = SHIBYTE(v57);
              if (v57 >= 0) {
                size_t v28 = HIBYTE(v57);
              }
              else {
                size_t v28 = v57;
              }
              int v29 = *((char *)a3 + 23);
              if (v29 >= 0) {
                size_t v30 = *((unsigned __int8 *)a3 + 23);
              }
              else {
                size_t v30 = a3[1];
              }
              unint64_t v31 = v30 + v28;
              memset(v51, 170, sizeof(v51));
              if (v30 + v28 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              if (v31 > 0x16)
              {
                uint64_t v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v31 | 7) != 0x17) {
                  uint64_t v33 = v31 | 7;
                }
                uint64_t v34 = v33 + 1;
                char v32 = (char *)operator new(v33 + 1);
                v51[1] = (void *)(v30 + v28);
                v51[2] = (void *)(v34 | 0x8000000000000000);
                v51[0] = v32;
              }
              else
              {
                memset(v51, 0, sizeof(v51));
                char v32 = (char *)v51;
                HIBYTE(v51[2]) = v30 + v28;
              }
              if (v28)
              {
                if (v27 >= 0) {
                  uint64_t v35 = &v56;
                }
                else {
                  uint64_t v35 = v56;
                }
                memmove(v32, v35, v28);
              }
              size_t v36 = &v32[v28];
              if (v30)
              {
                if (v29 >= 0) {
                  uint64_t v37 = a3;
                }
                else {
                  uint64_t v37 = (const void *)*a3;
                }
                memmove(v36, v37, v30);
              }
              v36[v30] = 0;
              Timestamp::Timestamp((Timestamp *)v47);
              Timestamp::asString((uint64_t)v47, 0, 9, __p);
              char v46 = 0;
              LOBYTE(v45) = 0;
              ResetInfo::ResetInfo((std::string *)&buf, &__dst, &v52, (long long *)v51, (uint64_t)__p, 7, &v45);
              if (v50 < 0)
              {
                operator delete(__p[0]);
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v47, v48);
                if ((SHIBYTE(v51[2]) & 0x80000000) == 0)
                {
LABEL_57:
                  if ((SHIBYTE(v53) & 0x80000000) == 0) {
                    goto LABEL_58;
                  }
                  goto LABEL_72;
                }
              }
              else
              {
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v47, v48);
                if ((SHIBYTE(v51[2]) & 0x80000000) == 0) {
                  goto LABEL_57;
                }
              }
              operator delete(v51[0]);
              if ((SHIBYTE(v53) & 0x80000000) == 0)
              {
LABEL_58:
                if ((SHIBYTE(v55) & 0x80000000) == 0) {
                  goto LABEL_59;
                }
LABEL_73:
                operator delete((void *)__dst);
LABEL_59:
                ResetInfo::ResetInfo(&v38, &buf);
                DIAGTrace::commandResetModem_sync((void *)v7, (long long *)&v38);
                if (v44 < 0)
                {
                  operator delete(v43);
                  if ((v42 & 0x80000000) == 0)
                  {
LABEL_61:
                    if ((v40 & 0x80000000) == 0) {
                      goto LABEL_62;
                    }
                    goto LABEL_76;
                  }
                }
                else if ((v42 & 0x80000000) == 0)
                {
                  goto LABEL_61;
                }
                operator delete(v41);
                if ((v40 & 0x80000000) == 0)
                {
LABEL_62:
                  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_63;
                  }
                  goto LABEL_77;
                }
LABEL_76:
                operator delete(v39);
                if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_63:
                  if ((SHIBYTE(v66) & 0x80000000) == 0) {
                    goto LABEL_64;
                  }
                  goto LABEL_78;
                }
LABEL_77:
                operator delete(v38.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v66) & 0x80000000) == 0)
                {
LABEL_64:
                  if ((SBYTE7(v64) & 0x80000000) == 0) {
                    goto LABEL_65;
                  }
                  goto LABEL_79;
                }
LABEL_78:
                operator delete(*((void **)&v65 + 1));
                if ((SBYTE7(v64) & 0x80000000) == 0)
                {
LABEL_65:
                  if ((SHIBYTE(v62) & 0x80000000) == 0) {
                    goto LABEL_66;
                  }
                  goto LABEL_80;
                }
LABEL_79:
                operator delete((void *)v63);
                if ((SHIBYTE(v62) & 0x80000000) == 0)
                {
LABEL_66:
                  if ((SBYTE7(v61) & 0x80000000) == 0) {
                    goto LABEL_67;
                  }
                  goto LABEL_81;
                }
LABEL_80:
                operator delete(*((void **)&v61 + 1));
                if ((SBYTE7(v61) & 0x80000000) == 0)
                {
LABEL_67:
                  if ((v27 & 0x80000000) == 0) {
                    goto LABEL_68;
                  }
                  goto LABEL_82;
                }
LABEL_81:
                operator delete((void *)buf);
                if ((v27 & 0x80000000) == 0)
                {
LABEL_68:
                  uint64_t v9 = v59;
                  if (!v59) {
                    return;
                  }
                  goto LABEL_83;
                }
LABEL_82:
                operator delete(v56);
                uint64_t v9 = v59;
                if (!v59) {
                  return;
                }
                goto LABEL_83;
              }
LABEL_72:
              operator delete((void *)v52);
              if ((SHIBYTE(v55) & 0x80000000) == 0) {
                goto LABEL_59;
              }
              goto LABEL_73;
            }
          }
          memmove(v24, v21, v23);
          goto LABEL_33;
        }
      }
      memmove(p_dst, v14, v16);
      goto LABEL_25;
    }
  }
}

void sub_1A60DAECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  ResetInfo::~ResetInfo(&a10);
  ResetInfo::~ResetInfo((void **)(v60 - 224));
  if (v59 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v60 - 240);
  _Unwind_Resume(a1);
}

void DIAGTrace::snapshot_sync(uint64_t a1, dispatch_object_t *a2, const __CFDictionary **a3)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v6 || (uint64_t v7 = *(void *)(a1 + 72), (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v95[0] = 0xAAAAAAAAAAAAAAAALL;
  v95[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v95, *a3);
  memset(v94, 170, sizeof(v94));
  std::string v10 = (const void *)*MEMORY[0x1E4F4C3A0];
  size_t v11 = strlen((const char *)*MEMORY[0x1E4F4C3A0]);
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  CFTypeID v12 = (void *)v11;
  uint64_t v78 = v7;
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    long long v13 = (void **)operator new(v14 + 1);
    __dst[1] = v12;
    std::string __dst[2] = (void *)(v15 | 0x8000000000000000);
    __dst[0] = v13;
    goto LABEL_14;
  }
  HIBYTE(__dst[2]) = v11;
  long long v13 = __dst;
  if (v11) {
LABEL_14:
  }
    memmove(v13, v10, (size_t)v12);
  size_t v16 = (const char *)*MEMORY[0x1E4F4C4C8];
  *((unsigned char *)v12 + (void)v13) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, v16);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A62748E0](__p);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  memset(__dst, 170, sizeof(__dst));
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_1A61F71C0;
  strcpy((char *)__p[0], "kCollectTelephonyLogsWithCoredump");
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v98, "kKeyTraceAction");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A62748E0](&v98);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  memset(__p, 170, sizeof(__p));
  strcpy((char *)&v98, "kTraceFilterActionNone");
  *((unsigned char *)&v98.__r_.__value_.__s + 23) = 22;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v91, "kKeyTraceFilterAction");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A62748E0](&v91);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  int v17 = abm::trace::kSnapshotFolder[0];
  size_t v18 = strlen(abm::trace::kSnapshotFolder[0]);
  if (v18 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v19 = v18;
  if (v18 >= 0x17)
  {
    uint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v21 = v18 | 7;
    }
    uint64_t v22 = v21 + 1;
    uint64_t v20 = operator new(v21 + 1);
    v90.__r_.__value_.__l.__size_ = v19;
    v90.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
    v90.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    goto LABEL_28;
  }
  *((unsigned char *)&v90.__r_.__value_.__s + 23) = v18;
  uint64_t v20 = &v90;
  if (v18) {
LABEL_28:
  }
    memmove(v20, v17, v19);
  *((unsigned char *)v20 + v19) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v96, "kKeyTraceDumpStatePath");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A62748E0](&v96);
  size_t v23 = abm::trace::kLogDirPrefix[0];
  size_t v24 = strlen(abm::trace::kLogDirPrefix[0]);
  if (v24 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v25 = v24;
  if (v24 >= 0x17)
  {
    uint64_t v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17) {
      uint64_t v27 = v24 | 7;
    }
    uint64_t v28 = v27 + 1;
    uint64_t v26 = (long long *)operator new(v27 + 1);
    *((void *)&v96 + 1) = v25;
    int64_t v97 = v28 | 0x8000000000000000;
    *(void *)&long long v96 = v26;
    goto LABEL_36;
  }
  HIBYTE(v97) = v24;
  uint64_t v26 = &v96;
  if (v24) {
LABEL_36:
  }
    memmove(v26, v23, v25);
  *((unsigned char *)v26 + v25) = 0;
  if (v97 >= 0) {
    int v29 = (const std::string::value_type *)&v96;
  }
  else {
    int v29 = (const std::string::value_type *)v96;
  }
  if (v97 >= 0) {
    std::string::size_type v30 = HIBYTE(v97);
  }
  else {
    std::string::size_type v30 = *((void *)&v96 + 1);
  }
  unint64_t v31 = std::string::append(&v91, v29, v30);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v98.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v94[2]) >= 0) {
    uint64_t v33 = (const std::string::value_type *)v94;
  }
  else {
    uint64_t v33 = (const std::string::value_type *)v94[0];
  }
  if (SHIBYTE(v94[2]) >= 0) {
    std::string::size_type v34 = HIBYTE(v94[2]);
  }
  else {
    std::string::size_type v34 = (std::string::size_type)v94[1];
  }
  uint64_t v35 = std::string::append(&v98, v33, v34);
  std::string::size_type size = v35->__r_.__value_.__l.__size_;
  std::string __s = (std::string::value_type *)v35->__r_.__value_.__r.__words[0];
  std::string::size_type v80 = v35->__r_.__value_.__r.__words[2];
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v98.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v97) & 0x80000000) == 0)
    {
LABEL_51:
      if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_52;
      }
LABEL_76:
      operator delete(v91.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_53;
      }
      goto LABEL_77;
    }
  }
  else if ((SHIBYTE(v97) & 0x80000000) == 0)
  {
    goto LABEL_51;
  }
  operator delete((void *)v96);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_76;
  }
LABEL_52:
  if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_53;
  }
LABEL_77:
  operator delete(v90.__r_.__value_.__l.__data_);
LABEL_53:
  uint64_t v37 = (void *)HIBYTE(__p[2]);
  int v38 = SHIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v37 = __p[1];
  }
  if (v37 == (void *)22)
  {
    std::string v39 = (void **)__p[0];
    if (SHIBYTE(__p[2]) >= 0) {
      std::string v39 = __p;
    }
    char v40 = *v39;
    char v41 = v39[1];
    uint64_t v42 = *(uint64_t *)((char *)v39 + 14);
    BOOL v43 = v40 == *(void **)"kTraceFilterActionNone" && v41 == *(void **)"lterActionNone";
    if (v43 && v42 == *(void *)"tionNone")
    {
      char v49 = (void *)HIBYTE(__dst[2]);
      if (SHIBYTE(__dst[2]) < 0) {
        char v49 = __dst[1];
      }
      if (v49 != (void *)17) {
        goto LABEL_90;
      }
      char v50 = __dst;
      if (SHIBYTE(__dst[2]) < 0) {
        char v50 = (void **)__dst[0];
      }
      char v51 = *v50;
      long long v52 = v50[1];
      uint64_t v53 = *((unsigned __int8 *)v50 + 16);
      BOOL v54 = v51 == *(void **)"kShutdownAllTrace" && v52 == *(void **)"nAllTrace";
      if (v54 && v53 == str_72[16]) {
        char v56 = *(unsigned char *)(a1 + 303) != 0;
      }
      else {
LABEL_90:
      }
        char v56 = 1;
      memset(&v98, 170, sizeof(v98));
      memset(&v91, 0, sizeof(v91));
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v90, "kKeyTraceDumpStateReason");
      ctu::cf::map_adapter::getString();
      MEMORY[0x1A62748E0](&v90);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v91.__r_.__value_.__l.__data_);
      }
      memset(&v91, 170, sizeof(v91));
      long long v57 = (const char *)*MEMORY[0x1E4F4C8D8];
      memset(&v90, 0, sizeof(v90));
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v96, v57);
      ctu::cf::map_adapter::getString();
      MEMORY[0x1A62748E0](&v96);
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v90.__r_.__value_.__l.__data_);
        int v58 = SHIBYTE(v91.__r_.__value_.__r.__words[2]);
        if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v59 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v59 = v91.__r_.__value_.__l.__size_;
        }
        if (v59)
        {
LABEL_98:
          std::string::size_type v77 = size;
          int v60 = SHIBYTE(v98.__r_.__value_.__r.__words[2]);
          if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v61 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v61 = v98.__r_.__value_.__l.__size_;
          }
          unint64_t v62 = v61 + 4;
          memset(&v90, 170, sizeof(v90));
          if (v61 + 4 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v62 >= 0x17)
          {
            char v76 = v56;
            uint64_t v65 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v62 | 7) != 0x17) {
              uint64_t v65 = v62 | 7;
            }
            uint64_t v66 = v65 + 1;
            long long v63 = operator new(v65 + 1);
            v90.__r_.__value_.__l.__size_ = v61 + 4;
            v90.__r_.__value_.__r.__words[2] = v66 | 0x8000000000000000;
            v90.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
            char v56 = v76;
          }
          else
          {
            memset(&v90, 0, sizeof(v90));
            long long v63 = &v90;
            *((unsigned char *)&v90.__r_.__value_.__s + 23) = v61 + 4;
            if (!v61) {
              goto LABEL_118;
            }
          }
          if (v60 >= 0) {
            uint64_t v67 = &v98;
          }
          else {
            uint64_t v67 = (std::string *)v98.__r_.__value_.__r.__words[0];
          }
          memmove(v63, v67, v61);
LABEL_118:
          strcpy((char *)v63 + v61, " w/ ");
          if (v58 >= 0) {
            uint64_t v68 = &v91;
          }
          else {
            uint64_t v68 = (std::string *)v91.__r_.__value_.__r.__words[0];
          }
          uint64_t v69 = std::string::append(&v90, (const std::string::value_type *)v68, v59);
          std::string::size_type v70 = v69->__r_.__value_.__r.__words[0];
          *(void *)&long long v96 = v69->__r_.__value_.__l.__size_;
          *(void *)((char *)&v96 + 7) = *(std::string::size_type *)((char *)&v69->__r_.__value_.__r.__words[1] + 7);
          char v71 = HIBYTE(v69->__r_.__value_.__r.__words[2]);
          v69->__r_.__value_.__l.__size_ = 0;
          v69->__r_.__value_.__r.__words[2] = 0;
          v69->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v98.__r_.__value_.__l.__data_);
          }
          v98.__r_.__value_.__r.__words[0] = v70;
          v98.__r_.__value_.__l.__size_ = v96;
          *(std::string::size_type *)((char *)&v98.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v96 + 7);
          *((unsigned char *)&v98.__r_.__value_.__s + 23) = v71;
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v90.__r_.__value_.__l.__data_);
          }
          std::string::size_type size = v77;
          long long v64 = *(uint64_t **)(a1 + 376);
          std::string::size_type v47 = v80;
          char v46 = v5;
          if (!v64)
          {
LABEL_144:
            if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v91.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_146:
                if ((v47 & 0x8000000000000000) != 0) {
                  goto LABEL_69;
                }
                goto LABEL_147;
              }
            }
            else if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_146;
            }
            operator delete(v98.__r_.__value_.__l.__data_);
            if ((v47 & 0x8000000000000000) != 0) {
              goto LABEL_69;
            }
            goto LABEL_147;
          }
LABEL_126:
          uint64_t v72 = (char *)operator new(0x20uLL);
          unint64_t v88 = v72;
          long long v89 = xmmword_1A61F71E0;
          strcpy(v72, "Trace State Configuration");
          DIAGTrace::getStateAsDict_sync(a1, (uint64_t)&v98, &object);
          diag::Service::pushInfo(v64, (uint64_t)&v88, &object);
          xpc_release(object);
          xpc_object_t object = 0;
          operator delete(v72);
          uint64_t v73 = *(uint64_t **)(a1 + 376);
          if ((v47 & 0x8000000000000000) != 0)
          {
            std::string::__init_copy_ctor_external(&v86, __s, size);
          }
          else
          {
            v86.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
            v86.__r_.__value_.__l.__size_ = size;
            v86.__r_.__value_.__r.__words[2] = v47;
          }
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZN9DIAGTrace13snapshot_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
          aBlock[3] = &__block_descriptor_tmp_38_0;
          aBlock[4] = a1;
          dispatch_group_t group = v46;
          if (v46)
          {
            dispatch_retain(v46);
            dispatch_group_enter(group);
          }
          uint64_t v83 = v78;
          char v84 = v9;
          atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v74 = _Block_copy(aBlock);
          BOOL v75 = *(NSObject **)(a1 + 88);
          if (v75) {
            dispatch_retain(v75);
          }
          v85[0] = v74;
          v85[1] = v75;
          diag::Service::snapshot(v73, (uint64_t)&v86, (uint64_t)&v98, v56, (uint64_t)v85);
          if (v75) {
            dispatch_release(v75);
          }
          if (v74) {
            _Block_release(v74);
          }
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v86.__r_.__value_.__l.__data_);
          }
          if (v84) {
            std::__shared_weak_count::__release_weak(v84);
          }
          if (group)
          {
            dispatch_group_leave(group);
            if (group) {
              dispatch_release(group);
            }
          }
          goto LABEL_144;
        }
      }
      else
      {
        int v58 = SHIBYTE(v91.__r_.__value_.__r.__words[2]);
        if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v59 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v59 = v91.__r_.__value_.__l.__size_;
        }
        if (v59) {
          goto LABEL_98;
        }
      }
      long long v64 = *(uint64_t **)(a1 + 376);
      std::string::size_type v47 = v80;
      char v46 = v5;
      if (!v64) {
        goto LABEL_144;
      }
      goto LABEL_126;
    }
  }
  long long v45 = *(NSObject **)(a1 + 40);
  std::string::size_type v47 = v80;
  char v46 = v5;
  if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_146;
  }
  long long v48 = (void **)__p[0];
  if (v38 >= 0) {
    long long v48 = __p;
  }
  LODWORD(v98.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)v98.__r_.__value_.__r.__words + 4) = (std::string::size_type)v48;
  _os_log_impl(&dword_1A609F000, v45, OS_LOG_TYPE_DEFAULT, "#I Skipping snapshot as trace filter is '%s'", (uint8_t *)&v98, 0xCu);
  if ((v80 & 0x8000000000000000) != 0)
  {
LABEL_69:
    operator delete(__s);
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_70;
    }
    goto LABEL_148;
  }
LABEL_147:
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_70:
    operator delete(__p[0]);
    if (SHIBYTE(__dst[2]) < 0) {
      goto LABEL_71;
    }
    goto LABEL_149;
  }
LABEL_148:
  if (SHIBYTE(__dst[2]) < 0)
  {
LABEL_71:
    operator delete(__dst[0]);
    if (SHIBYTE(v94[2]) < 0) {
      goto LABEL_72;
    }
LABEL_150:
    MEMORY[0x1A6274930](v95);
    std::__shared_weak_count::__release_weak(v9);
    if (!v46) {
      return;
    }
    goto LABEL_151;
  }
LABEL_149:
  if ((SHIBYTE(v94[2]) & 0x80000000) == 0) {
    goto LABEL_150;
  }
LABEL_72:
  operator delete(v94[0]);
  MEMORY[0x1A6274930](v95);
  std::__shared_weak_count::__release_weak(v9);
  if (!v46) {
    return;
  }
LABEL_151:
  dispatch_group_leave(v46);
  dispatch_release(v46);
}

void sub_1A60DBA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, dispatch_group_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,dispatch_group_t group,uint64_t a22,std::__shared_weak_count *a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,xpc_object_t object,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void DIAGTrace::getStateAsDict_sync(uint64_t a1@<X0>, uint64_t a2@<X1>, xpc_object_t *a3@<X8>)
{
  *a3 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v7 = v6;
  uint64_t v8 = MEMORY[0x1E4F14590];
  if (v6)
  {
    *a3 = v6;
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    *a3 = v7;
    if (!v7)
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A6275E60](v7) == v8)
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  xpc_object_t v9 = xpc_null_create();
LABEL_8:
  *a3 = v9;
LABEL_9:
  xpc_release(v7);
  xpc_object_t v10 = *a3;
  if (MEMORY[0x1A6275E60](*a3) != v8)
  {
    size_t v11 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1A609F000, v11, OS_LOG_TYPE_ERROR, "Failed to create state dump dictionary", (uint8_t *)&buf, 2u);
    }
    return;
  }
  if (*(unsigned char *)(a1 + 300)) {
    CFTypeID v12 = "true";
  }
  else {
    CFTypeID v12 = "false";
  }
  xpc_object_t v13 = xpc_string_create(v12);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "Enabled", v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (*(unsigned char *)(a1 + 180)) {
    uint64_t v15 = "true";
  }
  else {
    uint64_t v15 = "false";
  }
  xpc_object_t v16 = xpc_string_create(v15);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "High_Tput", v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  if (*(unsigned char *)(a1 + 181)) {
    size_t v18 = "true";
  }
  else {
    size_t v18 = "false";
  }
  xpc_object_t v19 = xpc_string_create(v18);
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "Data_Logging", v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  DIAGTrace::historyAsString(a1, (char *)&buf);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string buf = &buf;
  }
  else {
    p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v22 = xpc_string_create((const char *)p_buf);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "History", v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    uint64_t v24 = *(int *)(a1 + 160);
    if (v24 <= 4) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v24 = *(int *)(a1 + 160);
    if (v24 <= 4)
    {
LABEL_34:
      size_t v25 = off_1E5C46E60[v24];
      goto LABEL_37;
    }
  }
  size_t v25 = "Unknown";
LABEL_37:
  xpc_object_t v26 = xpc_string_create(v25);
  if (!v26) {
    xpc_object_t v26 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "Mode", v26);
  xpc_object_t v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  int v28 = *(_DWORD *)(a1 + 164);
  if (v28 == 1)
  {
    uint64_t v29 = 9;
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = 9;
    qmemcpy(&buf, "Last_Used", 9);
  }
  else if (v28)
  {
    uint64_t v29 = 11;
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = 11;
    qmemcpy(&buf, "UnSpecified", 11);
  }
  else
  {
    uint64_t v29 = 7;
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = 7;
    qmemcpy(&buf, "Default", 7);
  }
  buf.__r_.__value_.__s.__data_[v29] = 0;
  xpc_object_t v30 = xpc_string_create((const char *)&buf);
  if (!v30) {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "Reset_Mode_Boot", v30);
  xpc_object_t v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::to_string(&buf, *(_DWORD *)(a1 + 168));
  std::string __p = buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v33 = xpc_string_create((const char *)p_p);
  if (!v33) {
    xpc_object_t v33 = xpc_null_create();
  }
  xpc_object_t v34 = *a3;
  xpc_dictionary_set_value(*a3, "TraceOwnership", v33);
  xpc_object_t v35 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    size_t v36 = (const char *)(a1 + 184);
    if ((*(char *)(a1 + 207) & 0x80000000) == 0) {
      goto LABEL_55;
    }
  }
  else
  {
    size_t v36 = (const char *)(a1 + 184);
    if ((*(char *)(a1 + 207) & 0x80000000) == 0) {
      goto LABEL_55;
    }
  }
  size_t v36 = *(const char **)v36;
LABEL_55:
  xpc_object_t v37 = xpc_string_create(v36);
  if (!v37) {
    xpc_object_t v37 = xpc_null_create();
  }
  xpc_dictionary_set_value(v34, "File", v37);
  xpc_object_t v38 = xpc_null_create();
  xpc_release(v37);
  xpc_release(v38);
  std::string v39 = (const char *)(a1 + 208);
  if (*(char *)(a1 + 231) < 0) {
    std::string v39 = *(const char **)v39;
  }
  xpc_object_t v40 = xpc_string_create(v39);
  if (!v40) {
    xpc_object_t v40 = xpc_null_create();
  }
  xpc_dictionary_set_value(v34, "File_Secondary", v40);
  xpc_object_t v41 = xpc_null_create();
  xpc_release(v40);
  xpc_release(v41);
  uint64_t v42 = (const char *)(a1 + 232);
  if (*(char *)(a1 + 255) < 0) {
    uint64_t v42 = *(const char **)v42;
  }
  xpc_object_t v43 = xpc_string_create(v42);
  if (!v43) {
    xpc_object_t v43 = xpc_null_create();
  }
  xpc_dictionary_set_value(v34, diag::config::kExtraDMCFileKey[0], v43);
  xpc_object_t v44 = xpc_null_create();
  xpc_release(v43);
  xpc_release(v44);
  uint64_t v45 = *(int *)(a1 + 176);
  if (v45 > 2) {
    char v46 = "Unknown";
  }
  else {
    char v46 = off_1E5C46E88[v45];
  }
  xpc_object_t v47 = xpc_string_create(v46);
  if (!v47) {
    xpc_object_t v47 = xpc_null_create();
  }
  xpc_dictionary_set_value(v34, diag::config::kEnabledDuringSleepKey[0], v47);
  xpc_object_t v48 = xpc_null_create();
  xpc_release(v47);
  xpc_release(v48);
  if (*(unsigned char *)(a1 + 288)) {
    char v49 = "true";
  }
  else {
    char v49 = "false";
  }
  xpc_object_t v50 = xpc_string_create(v49);
  if (!v50) {
    xpc_object_t v50 = xpc_null_create();
  }
  xpc_dictionary_set_value(v34, diag::config::kStallDetectionKey[0], v50);
  xpc_object_t v51 = xpc_null_create();
  xpc_release(v50);
  xpc_release(v51);
  unsigned int v52 = *(_DWORD *)(a1 + 292);
  memset(&__p, 0, sizeof(__p));
  std::to_string(&buf, v52);
  std::string __p = buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v53 = &__p;
  }
  else {
    uint64_t v53 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v54 = xpc_string_create((const char *)v53);
  if (!v54) {
    xpc_object_t v54 = xpc_null_create();
  }
  xpc_object_t v55 = *a3;
  xpc_dictionary_set_value(*a3, diag::config::kStallDetectionRetriesKey[0], v54);
  xpc_object_t v56 = xpc_null_create();
  xpc_release(v54);
  xpc_release(v56);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t v57 = *(int *)(a1 + 172);
    if (v57 <= 2) {
      goto LABEL_82;
    }
LABEL_86:
    int v58 = "Unknown";
    goto LABEL_87;
  }
  uint64_t v57 = *(int *)(a1 + 172);
  if (v57 > 2) {
    goto LABEL_86;
  }
LABEL_82:
  int v58 = off_1E5C46EA0[v57];
LABEL_87:
  xpc_object_t v59 = xpc_string_create(v58);
  if (!v59) {
    xpc_object_t v59 = xpc_null_create();
  }
  xpc_dictionary_set_value(v55, diag::config::kStallDetectionRecoveryKey[0], v59);
  xpc_object_t v60 = xpc_null_create();
  xpc_release(v59);
  xpc_release(v60);
  unsigned int v61 = *(_DWORD *)(a1 + 360);
  memset(&__p, 0, sizeof(__p));
  std::to_string(&buf, v61);
  std::string __p = buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v62 = &__p;
  }
  else {
    unint64_t v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v63 = xpc_string_create((const char *)v62);
  if (!v63) {
    xpc_object_t v63 = xpc_null_create();
  }
  xpc_object_t v64 = *a3;
  xpc_dictionary_set_value(v64, "FileSize", v63);
  xpc_object_t v65 = xpc_null_create();
  xpc_release(v63);
  xpc_release(v65);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v66 = (const char *)a2;
  }
  else {
    uint64_t v66 = *(const char **)a2;
  }
  xpc_object_t v67 = xpc_string_create(v66);
  if (!v67) {
    xpc_object_t v67 = xpc_null_create();
  }
  xpc_dictionary_set_value(v64, (const char *)*MEMORY[0x1E4F4CA90], v67);
  xpc_object_t v68 = xpc_null_create();
  xpc_release(v67);
  xpc_release(v68);
}

void sub_1A60DC580(void *a1)
{
}

void sub_1A60DC58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    xpc::dict::~dict(v14);
    _Unwind_Resume(a1);
  }
  xpc::dict::~dict(v14);
  _Unwind_Resume(a1);
}

void xpc::dict::~dict(xpc_object_t *this)
{
  *this = 0;
}

void ___ZN9DIAGTrace13snapshot_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    uint64_t v6 = a1[4];
    xpc_object_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      if (a1[6])
      {
        xpc_object_t v9 = *(NSObject **)(v6 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          if (*((char *)a3 + 23) < 0) {
            a3 = (uint64_t *)*a3;
          }
          int v10 = 136315138;
          size_t v11 = a3;
          _os_log_impl(&dword_1A609F000, v9, OS_LOG_TYPE_DEFAULT, "#I Snapshot complete. %s", (uint8_t *)&v10, 0xCu);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

uint64_t DIAGTrace::updateEnableProperty_sync(uint64_t a1, int a2, int *a3, uint64_t a4, const __CFAllocator *a5)
{
  if (*(unsigned char *)(a1 + 301)) {
    return 0;
  }
  uint64_t result = ctu::cf::update<char const*,BOOL>(*(__CFDictionary **)(a1 + 368), (const __CFString **)"Enabled", a2, *MEMORY[0x1E4F1CF80], a5);
  if (result)
  {
    if (*(unsigned __int8 *)(a1 + 300) != a2)
    {
      *a3 = a2 ^ 1;
      *(unsigned char *)(a1 + 300) = a2;
    }
    return 1;
  }
  return result;
}

BOOL DIAGTrace::checkAllDMCName_sync(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 207) >= 0) {
    uint64_t v3 = (const char *)(a1 + 184);
  }
  else {
    uint64_t v3 = *(const char **)(a1 + 184);
  }
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v4 = (const char *)a2;
  }
  else {
    uint64_t v4 = *(const char **)a2;
  }
  if (strcasecmp(v3, v4)) {
    return 0;
  }
  if (*(char *)(a1 + 231) >= 0) {
    uint64_t v6 = (const char *)(a1 + 208);
  }
  else {
    uint64_t v6 = *(const char **)(a1 + 208);
  }
  if (strcasecmp(v6, v4)) {
    return 0;
  }
  xpc_object_t v9 = *(const char **)(a1 + 232);
  uint64_t v8 = a1 + 232;
  xpc_object_t v7 = v9;
  if (*(char *)(v8 + 23) >= 0) {
    int v10 = (const char *)v8;
  }
  else {
    int v10 = v7;
  }
  return strcasecmp(v10, v4) == 0;
}

BOOL DIAGTrace::checkOneOfDMCName_sync(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 207) >= 0) {
    uint64_t v3 = (const char *)(a1 + 184);
  }
  else {
    uint64_t v3 = *(const char **)(a1 + 184);
  }
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v4 = (const char *)a2;
  }
  else {
    uint64_t v4 = *(const char **)a2;
  }
  if (!strcasecmp(v3, v4)) {
    return 1;
  }
  uint64_t v5 = *(char *)(a1 + 231) >= 0 ? (const char *)(a1 + 208) : *(const char **)(a1 + 208);
  if (!strcasecmp(v5, v4)) {
    return 1;
  }
  uint64_t v8 = *(const char **)(a1 + 232);
  uint64_t v7 = a1 + 232;
  uint64_t v6 = v8;
  if (*(char *)(v7 + 23) >= 0) {
    xpc_object_t v9 = (const char *)v7;
  }
  else {
    xpc_object_t v9 = v6;
  }
  return strcasecmp(v9, v4) == 0;
}

uint64_t DIAGTrace::updateDMCSetting_sync(uint64_t a1, char *a2, long long *a3)
{
  uint64_t v4 = a2;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int v6 = a2[23];
  if ((v6 & 0x80000000) == 0)
  {
    if (strcasecmp(a2, "File"))
    {
      uint64_t v7 = v4;
      if (strcasecmp(v4, "File_Secondary")) {
        goto LABEL_4;
      }
LABEL_11:
      int v10 = (void **)(a1 + 208);
      if ((long long *)(a1 + 208) != a3)
      {
        char v11 = *((unsigned char *)a3 + 23);
        if ((*(char *)(a1 + 231) & 0x80000000) == 0)
        {
          if ((*((unsigned char *)a3 + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(v10, *(void **)a3, *((void *)a3 + 1));
            if ((v4[23] & 0x80000000) == 0)
            {
LABEL_67:
              strcpy(v4, "File_Secondary");
              v4[23] = 14;
              if (prop::bbtrace::set(v4, (const char *)a3)) {
                goto LABEL_35;
              }
              return 0;
            }
          }
          else
          {
            long long v12 = *a3;
            *(void *)(a1 + 224) = *((void *)a3 + 2);
            *(_OWORD *)int v10 = v12;
            if ((v4[23] & 0x80000000) == 0) {
              goto LABEL_67;
            }
          }
LABEL_66:
          operator delete(*(void **)v4);
          goto LABEL_67;
        }
        if (v11 >= 0) {
          size_t v25 = a3;
        }
        else {
          size_t v25 = *(long long **)a3;
        }
        if (v11 >= 0) {
          size_t v26 = *((unsigned __int8 *)a3 + 23);
        }
        else {
          size_t v26 = *((void *)a3 + 1);
        }
        std::string::__assign_no_alias<false>(v10, v25, v26);
      }
      if ((v4[23] & 0x80000000) == 0) {
        goto LABEL_67;
      }
      goto LABEL_66;
    }
LABEL_16:
    xpc_object_t v13 = (void **)(a1 + 184);
    if ((long long *)(a1 + 184) != a3)
    {
      char v14 = *((unsigned char *)a3 + 23);
      if ((*(char *)(a1 + 207) & 0x80000000) == 0)
      {
        if ((*((unsigned char *)a3 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v13, *(void **)a3, *((void *)a3 + 1));
          if ((v4[23] & 0x80000000) == 0)
          {
LABEL_34:
            strcpy(v4, "File");
            v4[23] = 4;
            if (prop::bbtrace::set(v4, (const char *)a3)) {
              goto LABEL_35;
            }
            return 0;
          }
        }
        else
        {
          long long v15 = *a3;
          *(void *)(a1 + 200) = *((void *)a3 + 2);
          *(_OWORD *)xpc_object_t v13 = v15;
          if ((v4[23] & 0x80000000) == 0) {
            goto LABEL_34;
          }
        }
LABEL_33:
        operator delete(*(void **)v4);
        goto LABEL_34;
      }
      if (v14 >= 0) {
        xpc_object_t v19 = a3;
      }
      else {
        xpc_object_t v19 = *(long long **)a3;
      }
      if (v14 >= 0) {
        size_t v20 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v20 = *((void *)a3 + 1);
      }
      std::string::__assign_no_alias<false>(v13, v19, v20);
    }
    if ((v4[23] & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  uint64_t v7 = *(const char **)a2;
  if (!strcasecmp(*(const char **)a2, "File")) {
    goto LABEL_16;
  }
  if (!strcasecmp(v7, "File_Secondary")) {
    goto LABEL_11;
  }
LABEL_4:
  if (!strcasecmp(v7, diag::config::kExtraDMCFileKey[0]))
  {
    xpc_object_t v16 = (void **)(a1 + 232);
    if ((long long *)(a1 + 232) != a3)
    {
      char v17 = *((unsigned char *)a3 + 23);
      if (*(char *)(a1 + 255) < 0)
      {
        if (v17 >= 0) {
          int v28 = a3;
        }
        else {
          int v28 = *(long long **)a3;
        }
        if (v17 >= 0) {
          size_t v29 = *((unsigned __int8 *)a3 + 23);
        }
        else {
          size_t v29 = *((void *)a3 + 1);
        }
        std::string::__assign_no_alias<false>(v16, v28, v29);
      }
      else if ((*((unsigned char *)a3 + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v16, *(void **)a3, *((void *)a3 + 1));
      }
      else
      {
        long long v18 = *a3;
        *(void *)(a1 + 248) = *((void *)a3 + 2);
        *(_OWORD *)xpc_object_t v16 = v18;
      }
    }
    xpc_object_t v30 = diag::config::kExtraDMCFileKey[0];
    size_t v31 = strlen(diag::config::kExtraDMCFileKey[0]);
    if (v31 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v32 = v31;
    if (v31 >= 0x17)
    {
      uint64_t v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v31 | 7) != 0x17) {
        uint64_t v34 = v31 | 7;
      }
      uint64_t v35 = v34 + 1;
      p_std::string buf = (std::string *)operator new(v34 + 1);
      buf.__r_.__value_.__l.__size_ = v32;
      buf.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    }
    else
    {
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = v31;
      p_std::string buf = &buf;
      if (!v31)
      {
LABEL_90:
        p_buf->__r_.__value_.__s.__data_[v32] = 0;
        if (v4[23] < 0) {
          operator delete(*(void **)v4);
        }
        *(std::string *)uint64_t v4 = buf;
        if (!prop::bbtrace::set(v4, (const char *)a3)) {
          return 0;
        }
LABEL_35:
        uint64_t v21 = *(__CFDictionary **)(a1 + 368);
        if (v4[23] < 0) {
          std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v4, *((void *)v4 + 1));
        }
        else {
          std::string buf = *(std::string *)v4;
        }
        if (*((char *)a3 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *((void *)a3 + 1));
        }
        else {
          std::string __p = *(std::string *)a3;
        }
        xpc_object_t value = 0;
        ctu::cf::convert_copy();
        xpc_object_t v22 = value;
        xpc_object_t v38 = value;
        xpc_object_t value = 0;
        ctu::cf::convert_copy();
        xpc_object_t v23 = value;
        xpc_object_t v37 = value;
        if (v22) {
          BOOL v24 = value == 0;
        }
        else {
          BOOL v24 = 1;
        }
        uint64_t v9 = !v24;
        if (v24)
        {
          if (!value) {
            goto LABEL_51;
          }
        }
        else
        {
          CFDictionarySetValue(v21, v22, value);
        }
        CFRelease(v23);
LABEL_51:
        if (v22) {
          CFRelease(v22);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return v9;
          }
        }
        else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          return v9;
        }
        operator delete(buf.__r_.__value_.__l.__data_);
        return v9;
      }
    }
    memmove(p_buf, v30, v32);
    goto LABEL_90;
  }
  uint64_t v8 = *(NSObject **)(a1 + 40);
  uint64_t v9 = 0;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    if (v6 < 0) {
      uint64_t v4 = *(char **)v4;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    _os_log_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEFAULT, "#I Failed to get matched DMC file key: %s", (uint8_t *)&buf, 0xCu);
    return 0;
  }
  return v9;
}

void sub_1A60DCEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DIAGTrace::ratifyDMCFile_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a3 + 8);
  }
  if (!v5) {
    return 0;
  }
  uint64_t v8 = diag::config::kThroughputDMCFile[0];
  size_t v9 = strlen(diag::config::kThroughputDMCFile[0]);
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_201;
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    int64_t v123 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_15;
  }
  HIBYTE(v123) = v9;
  p_dst = &__dst;
  if (v9) {
LABEL_15:
  }
    memmove(p_dst, v8, v10);
  *((unsigned char *)p_dst + v10) = 0;
  if (*(char *)(a1 + 207) >= 0) {
    long long v15 = (const char *)(a1 + 184);
  }
  else {
    long long v15 = *(const char **)(a1 + 184);
  }
  int v16 = SHIBYTE(v123);
  char v17 = (void *)__dst;
  if (v123 >= 0) {
    long long v18 = (const char *)&__dst;
  }
  else {
    long long v18 = (const char *)__dst;
  }
  if (!strcasecmp(v15, v18)
    || (*(char *)(a1 + 231) >= 0 ? (xpc_object_t v19 = (const char *)(a1 + 208)) : (xpc_object_t v19 = *(const char **)(a1 + 208)),
        !strcasecmp(v19, v18)))
  {
    BOOL v21 = 1;
    if (v16 < 0) {
      goto LABEL_35;
    }
  }
  else
  {
    if (*(char *)(a1 + 255) >= 0) {
      size_t v20 = (const char *)(a1 + 232);
    }
    else {
      size_t v20 = *(const char **)(a1 + 232);
    }
    BOOL v21 = strcasecmp(v20, v18) == 0;
    if (v16 < 0)
    {
LABEL_35:
      operator delete(v17);
      if (*(char *)(a2 + 23) < 0) {
        goto LABEL_36;
      }
LABEL_34:
      std::string v121 = *(std::string *)a2;
      goto LABEL_37;
    }
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
    goto LABEL_34;
  }
LABEL_36:
  std::string::__init_copy_ctor_external(&v121, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
LABEL_37:
  uint64_t updated = DIAGTrace::updateDMCSetting_sync(a1, (char *)&v121, (long long *)a3);
  uint64_t v12 = updated;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v121.__r_.__value_.__l.__data_);
    if (!v12) {
      return v12;
    }
  }
  else if (!updated)
  {
    return v12;
  }
  xpc_object_t v23 = diag::config::kThroughputDMCFile[0];
  size_t v24 = strlen(diag::config::kThroughputDMCFile[0]);
  if (v24 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_201;
  }
  size_t v25 = v24;
  if (v24 >= 0x17)
  {
    uint64_t v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17) {
      uint64_t v27 = v24 | 7;
    }
    uint64_t v28 = v27 + 1;
    size_t v26 = (long long *)operator new(v27 + 1);
    *((void *)&__dst + 1) = v25;
    int64_t v123 = v28 | 0x8000000000000000;
    *(void *)&long long __dst = v26;
    goto LABEL_48;
  }
  HIBYTE(v123) = v24;
  size_t v26 = &__dst;
  if (v24) {
LABEL_48:
  }
    memmove(v26, v23, v25);
  *((unsigned char *)v26 + v25) = 0;
  if (*(char *)(a1 + 207) >= 0) {
    size_t v29 = (const char *)(a1 + 184);
  }
  else {
    size_t v29 = *(const char **)(a1 + 184);
  }
  int v30 = SHIBYTE(v123);
  size_t v31 = (void *)__dst;
  if (v123 >= 0) {
    std::string::size_type v32 = (const char *)&__dst;
  }
  else {
    std::string::size_type v32 = (const char *)__dst;
  }
  if (!strcasecmp(v29, v32)
    || (*(char *)(a1 + 231) >= 0 ? (xpc_object_t v33 = (const char *)(a1 + 208)) : (xpc_object_t v33 = *(const char **)(a1 + 208)),
        !strcasecmp(v33, v32)))
  {
    BOOL v35 = 1;
    if (v30 < 0) {
      goto LABEL_71;
    }
LABEL_66:
    if (!v35) {
      goto LABEL_72;
    }
    goto LABEL_67;
  }
  if (*(char *)(a1 + 255) >= 0) {
    uint64_t v34 = (const char *)(a1 + 232);
  }
  else {
    uint64_t v34 = *(const char **)(a1 + 232);
  }
  BOOL v35 = strcasecmp(v34, v32) == 0;
  if ((v30 & 0x80000000) == 0) {
    goto LABEL_66;
  }
LABEL_71:
  operator delete(v31);
  if (!v35)
  {
LABEL_72:
    xpc_object_t v40 = diag::config::kNoneDMCFile;
    size_t v41 = strlen(diag::config::kNoneDMCFile);
    if (v41 <= 0x7FFFFFFFFFFFFFF7)
    {
      size_t v42 = v41;
      if (v41 >= 0x17)
      {
        uint64_t v55 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v41 | 7) != 0x17) {
          uint64_t v55 = v41 | 7;
        }
        uint64_t v56 = v55 + 1;
        xpc_object_t v43 = (long long *)operator new(v55 + 1);
        *((void *)&__dst + 1) = v42;
        int64_t v123 = v56 | 0x8000000000000000;
        *(void *)&long long __dst = v43;
      }
      else
      {
        HIBYTE(v123) = v41;
        xpc_object_t v43 = &__dst;
        if (!v41)
        {
LABEL_97:
          *((unsigned char *)v43 + v42) = 0;
          if (*(char *)(a1 + 207) >= 0) {
            uint64_t v57 = (const char *)(a1 + 184);
          }
          else {
            uint64_t v57 = *(const char **)(a1 + 184);
          }
          int v58 = SHIBYTE(v123);
          xpc_object_t v59 = (void *)__dst;
          if (v123 >= 0) {
            xpc_object_t v60 = (const char *)&__dst;
          }
          else {
            xpc_object_t v60 = (const char *)__dst;
          }
          unsigned int v61 = (config::hw *)strcasecmp(v57, v60);
          if (v61)
          {
            int v62 = v21;
            if ((v58 & 0x80000000) == 0) {
              goto LABEL_105;
            }
LABEL_123:
            operator delete(v59);
            if (v62)
            {
LABEL_106:
              char v113 = 4;
              strcpy(v112, "File");
              int v63 = config::hw::watch(v61);
              if (v63) {
                xpc_object_t v64 = "Lite";
              }
              else {
                xpc_object_t v64 = "Default";
              }
              if (v63) {
                size_t v65 = 4;
              }
              else {
                size_t v65 = 7;
              }
              HIBYTE(v123) = v65;
              memcpy(&__dst, v64, v65);
              *(unsigned char *)((unint64_t)&__dst | v65) = 0;
              uint64_t v12 = DIAGTrace::updateDMCSetting_sync(a1, v112, &__dst);
              if (SHIBYTE(v123) < 0) {
                operator delete((void *)__dst);
              }
              if (v113 < 0)
              {
                uint64_t v66 = v112;
LABEL_197:
                operator delete(*(void **)v66);
                return v12;
              }
              return v12;
            }
            return 1;
          }
          if (*(char *)(a1 + 231) >= 0) {
            uint64_t v69 = (const char *)(a1 + 208);
          }
          else {
            uint64_t v69 = *(const char **)(a1 + 208);
          }
          unsigned int v61 = (config::hw *)strcasecmp(v69, v60);
          if (v61)
          {
            int v62 = v21;
            if (v58 < 0) {
              goto LABEL_123;
            }
          }
          else
          {
            if (*(char *)(a1 + 255) >= 0) {
              unint64_t v111 = (const char *)(a1 + 232);
            }
            else {
              unint64_t v111 = *(const char **)(a1 + 232);
            }
            unsigned int v61 = (config::hw *)strcasecmp(v111, v60);
            int v62 = v21 || v61 == 0;
            if (v58 < 0) {
              goto LABEL_123;
            }
          }
LABEL_105:
          if (v62) {
            goto LABEL_106;
          }
          return 1;
        }
      }
      memmove(v43, v40, v42);
      goto LABEL_97;
    }
LABEL_201:
    std::string::__throw_length_error[abi:ne180100]();
  }
LABEL_67:
  size_t v36 = diag::config::kThroughputDMCFile[0];
  size_t v37 = strlen(diag::config::kThroughputDMCFile[0]);
  if (v37 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_201;
  }
  size_t v38 = v37;
  if (v37 >= 0x17)
  {
    uint64_t v44 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17) {
      uint64_t v44 = v37 | 7;
    }
    uint64_t v45 = v44 + 1;
    std::string v39 = (long long *)operator new(v44 + 1);
    *((void *)&__dst + 1) = v38;
    int64_t v123 = v45 | 0x8000000000000000;
    *(void *)&long long __dst = v39;
    goto LABEL_79;
  }
  HIBYTE(v123) = v37;
  std::string v39 = &__dst;
  if (v37) {
LABEL_79:
  }
    memmove(v39, v36, v38);
  *((unsigned char *)v39 + v38) = 0;
  if (*(char *)(a1 + 207) >= 0) {
    char v46 = (const char *)(a1 + 184);
  }
  else {
    char v46 = *(const char **)(a1 + 184);
  }
  int v47 = SHIBYTE(v123);
  xpc_object_t v48 = (void *)__dst;
  if (v123 >= 0) {
    char v49 = (const char *)&__dst;
  }
  else {
    char v49 = (const char *)__dst;
  }
  int v50 = strcasecmp(v46, v49);
  if (v47 < 0) {
    operator delete(v48);
  }
  if (!v50)
  {
    uint64_t v12 = 1;
    xpc_object_t v67 = diag::config::kThroughputDMCFile[0];
    size_t v68 = strlen(diag::config::kThroughputDMCFile[0]);
    if (v68 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_201;
    }
    goto LABEL_132;
  }
  char v120 = 4;
  strcpy((char *)v119, "File");
  xpc_object_t v51 = diag::config::kNoneDMCFile;
  size_t v52 = strlen(diag::config::kNoneDMCFile);
  if (v52 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v53 = v52;
  if (v52 >= 0x17)
  {
    uint64_t v70 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v52 | 7) != 0x17) {
      uint64_t v70 = v52 | 7;
    }
    uint64_t v71 = v70 + 1;
    xpc_object_t v54 = (long long *)operator new(v70 + 1);
    *((void *)&__dst + 1) = v53;
    int64_t v123 = v71 | 0x8000000000000000;
    *(void *)&long long __dst = v54;
  }
  else
  {
    HIBYTE(v123) = v52;
    xpc_object_t v54 = &__dst;
    if (!v52) {
      goto LABEL_129;
    }
  }
  memmove(v54, v51, v53);
LABEL_129:
  *((unsigned char *)v54 + v53) = 0;
  uint64_t v12 = DIAGTrace::updateDMCSetting_sync(a1, (char *)v119, &__dst);
  if (SHIBYTE(v123) < 0)
  {
    operator delete((void *)__dst);
    if ((v120 & 0x80000000) == 0)
    {
LABEL_131:
      xpc_object_t v67 = diag::config::kThroughputDMCFile[0];
      size_t v68 = strlen(diag::config::kThroughputDMCFile[0]);
      if (v68 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_201;
      }
      goto LABEL_132;
    }
  }
  else if ((v120 & 0x80000000) == 0)
  {
    goto LABEL_131;
  }
  operator delete(v119[0]);
  xpc_object_t v67 = diag::config::kThroughputDMCFile[0];
  size_t v68 = strlen(diag::config::kThroughputDMCFile[0]);
  if (v68 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_201;
  }
LABEL_132:
  size_t v72 = v68;
  if (v68 >= 0x17)
  {
    uint64_t v74 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v68 | 7) != 0x17) {
      uint64_t v74 = v68 | 7;
    }
    uint64_t v75 = v74 + 1;
    uint64_t v73 = (long long *)operator new(v74 + 1);
    *((void *)&__dst + 1) = v72;
    int64_t v123 = v75 | 0x8000000000000000;
    *(void *)&long long __dst = v73;
    goto LABEL_138;
  }
  HIBYTE(v123) = v68;
  uint64_t v73 = &__dst;
  if (v68) {
LABEL_138:
  }
    memmove(v73, v67, v72);
  *((unsigned char *)v73 + v72) = 0;
  if (*(char *)(a1 + 231) >= 0) {
    char v76 = (const char *)(a1 + 208);
  }
  else {
    char v76 = *(const char **)(a1 + 208);
  }
  int v77 = SHIBYTE(v123);
  uint64_t v78 = (void *)__dst;
  if (v123 >= 0) {
    BOOL v79 = (const char *)&__dst;
  }
  else {
    BOOL v79 = (const char *)__dst;
  }
  int v80 = strcasecmp(v76, v79);
  if (v77 < 0) {
    operator delete(v78);
  }
  if (v80)
  {
    char v118 = 14;
    strcpy((char *)__p, "File_Secondary");
    unint64_t v81 = diag::config::kNoneDMCFile;
    size_t v82 = strlen(diag::config::kNoneDMCFile);
    if (v82 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v83 = v82;
    if (v82 >= 0x17)
    {
      uint64_t v85 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v82 | 7) != 0x17) {
        uint64_t v85 = v82 | 7;
      }
      uint64_t v86 = v85 + 1;
      char v84 = (long long *)operator new(v85 + 1);
      *((void *)&__dst + 1) = v83;
      int64_t v123 = v86 | 0x8000000000000000;
      *(void *)&long long __dst = v84;
    }
    else
    {
      HIBYTE(v123) = v82;
      char v84 = &__dst;
      if (!v82) {
        goto LABEL_156;
      }
    }
    memmove(v84, v81, v83);
LABEL_156:
    *((unsigned char *)v84 + v83) = 0;
    uint64_t v12 = DIAGTrace::updateDMCSetting_sync(a1, (char *)__p, &__dst);
    if (SHIBYTE(v123) < 0) {
      operator delete((void *)__dst);
    }
    if (v118 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v87 = diag::config::kThroughputDMCFile[0];
  size_t v88 = strlen(diag::config::kThroughputDMCFile[0]);
  if (v88 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_201;
  }
  size_t v89 = v88;
  if (v88 >= 0x17)
  {
    uint64_t v91 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v91 = v88 | 7;
    }
    uint64_t v92 = v91 + 1;
    std::string v90 = (long long *)operator new(v91 + 1);
    *((void *)&__dst + 1) = v89;
    int64_t v123 = v92 | 0x8000000000000000;
    *(void *)&long long __dst = v90;
    goto LABEL_167;
  }
  HIBYTE(v123) = v88;
  std::string v90 = &__dst;
  if (v88) {
LABEL_167:
  }
    memmove(v90, v87, v89);
  *((unsigned char *)v90 + v89) = 0;
  if (*(char *)(a1 + 255) >= 0) {
    unint64_t v93 = (const char *)(a1 + 232);
  }
  else {
    unint64_t v93 = *(const char **)(a1 + 232);
  }
  int v94 = SHIBYTE(v123);
  unint64_t v95 = (void *)__dst;
  if (v123 >= 0) {
    long long v96 = (const char *)&__dst;
  }
  else {
    long long v96 = (const char *)__dst;
  }
  int v97 = strcasecmp(v93, v96);
  if (v94 < 0) {
    operator delete(v95);
  }
  if (!v97) {
    return v12;
  }
  std::string v98 = diag::config::kExtraDMCFileKey[0];
  size_t v99 = strlen(diag::config::kExtraDMCFileKey[0]);
  if (v99 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v100 = v99;
  if (v99 >= 0x17)
  {
    uint64_t v102 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v99 | 7) != 0x17) {
      uint64_t v102 = v99 | 7;
    }
    uint64_t v103 = v102 + 1;
    unint64_t v101 = operator new(v102 + 1);
    size_t v115 = v100;
    unint64_t v116 = v103 | 0x8000000000000000;
    *(void *)long long v114 = v101;
    goto LABEL_184;
  }
  HIBYTE(v116) = v99;
  unint64_t v101 = v114;
  if (v99) {
LABEL_184:
  }
    memmove(v101, v98, v100);
  *((unsigned char *)v101 + v100) = 0;
  uint64_t v104 = diag::config::kNoneDMCFile;
  size_t v105 = strlen(diag::config::kNoneDMCFile);
  if (v105 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v106 = v105;
  if (v105 >= 0x17)
  {
    uint64_t v108 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v105 | 7) != 0x17) {
      uint64_t v108 = v105 | 7;
    }
    uint64_t v109 = v108 + 1;
    unint64_t v107 = (long long *)operator new(v108 + 1);
    *((void *)&__dst + 1) = v106;
    int64_t v123 = v109 | 0x8000000000000000;
    *(void *)&long long __dst = v107;
    goto LABEL_192;
  }
  HIBYTE(v123) = v105;
  unint64_t v107 = &__dst;
  if (v105) {
LABEL_192:
  }
    memmove(v107, v104, v106);
  *((unsigned char *)v107 + v106) = 0;
  uint64_t v12 = DIAGTrace::updateDMCSetting_sync(a1, v114, &__dst);
  if (SHIBYTE(v123) < 0) {
    operator delete((void *)__dst);
  }
  if (SHIBYTE(v116) < 0)
  {
    uint64_t v66 = v114;
    goto LABEL_197;
  }
  return v12;
}

void sub_1A60DD964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (*(char *)(v38 - 81) < 0) {
    operator delete(*(void **)(v38 - 104));
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DIAGTrace::handleTputDMCforADPL_sync(config::hw *a1, int *a2)
{
  char v39 = 4;
  strcpy((char *)__p, "File");
  int v4 = config::hw::watch(a1);
  if (v4) {
    uint64_t v5 = "Lite";
  }
  else {
    uint64_t v5 = "Default";
  }
  if (v4) {
    size_t v6 = 4;
  }
  else {
    size_t v6 = 7;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v6;
  memcpy(&__dst, v5, v6);
  *(unsigned char *)((unint64_t)&__dst | v6) = 0;
  int updated = DIAGTrace::updateDMCSetting_sync((uint64_t)a1, (char *)__p, (long long *)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v39 & 0x80000000) == 0)
    {
LABEL_9:
      if (!updated) {
        return 0;
      }
      goto LABEL_13;
    }
  }
  else if ((v39 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
  if (!updated) {
    return 0;
  }
LABEL_13:
  char v37 = 14;
  strcpy((char *)v36, "File_Secondary");
  uint64_t v8 = diag::config::kNoneDMCFile;
  size_t v9 = strlen(diag::config::kNoneDMCFile);
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v10;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_20;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v9;
  p_dst = &__dst;
  if (v9) {
LABEL_20:
  }
    memmove(p_dst, v8, v10);
  p_dst->__r_.__value_.__s.__data_[v10] = 0;
  int v14 = DIAGTrace::updateDMCSetting_sync((uint64_t)a1, (char *)v36, (long long *)&__dst);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v37 & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_26:
    operator delete(v36[0]);
    if ((v14 & 1) == 0) {
      return 0;
    }
    goto LABEL_27;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (v37 < 0) {
    goto LABEL_26;
  }
LABEL_23:
  if (!v14) {
    return 0;
  }
LABEL_27:
  long long v15 = diag::config::kExtraDMCFileKey[0];
  size_t v16 = strlen(diag::config::kExtraDMCFileKey[0]);
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  char v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    uint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v19 = v16 | 7;
    }
    uint64_t v20 = v19 + 1;
    long long v18 = operator new(v19 + 1);
    v34[1] = v17;
    unint64_t v35 = v20 | 0x8000000000000000;
    v34[0] = v18;
    goto LABEL_34;
  }
  HIBYTE(v35) = v16;
  long long v18 = v34;
  if (v16) {
LABEL_34:
  }
    memmove(v18, v15, (size_t)v17);
  *((unsigned char *)v17 + (void)v18) = 0;
  BOOL v21 = diag::config::kNoneDMCFile;
  size_t v22 = strlen(diag::config::kNoneDMCFile);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v23 = v22;
  if (v22 >= 0x17)
  {
    uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v25 = v22 | 7;
    }
    uint64_t v26 = v25 + 1;
    size_t v24 = (std::string *)operator new(v25 + 1);
    __dst.__r_.__value_.__l.__size_ = v23;
    __dst.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    goto LABEL_42;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v22;
  size_t v24 = &__dst;
  if (v22) {
LABEL_42:
  }
    memmove(v24, v21, v23);
  v24->__r_.__value_.__s.__data_[v23] = 0;
  int v27 = DIAGTrace::updateDMCSetting_sync((uint64_t)a1, (char *)v34, (long long *)&__dst);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v35) & 0x80000000) == 0) {
      goto LABEL_45;
    }
LABEL_48:
    operator delete(v34[0]);
    int v33 = 5;
    if ((v27 & 1) == 0) {
      return 0;
    }
    goto LABEL_49;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0) {
    goto LABEL_48;
  }
LABEL_45:
  int v33 = 5;
  if (!v27) {
    return 0;
  }
LABEL_49:
  char v32 = 12;
  strcpy((char *)v31, "Data_Logging");
  std::to_string(&__dst, 0);
  std::string v30 = __dst;
  int v28 = DIAGTrace::setProperty_sync(a1, v31, &v30, &v33);
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_51;
    }
LABEL_54:
    operator delete(v31[0]);
    if (v28) {
      goto LABEL_52;
    }
    return 0;
  }
  operator delete(v30.__r_.__value_.__l.__data_);
  if (v32 < 0) {
    goto LABEL_54;
  }
LABEL_51:
  if (v28)
  {
LABEL_52:
    *a2 = v33;
    return 1;
  }
  return 0;
}

void sub_1A60DDE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DIAGTrace::setProperty_sync(uint64_t a1, char *a2, uint64_t a3, int *a4)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  *a4 = 5;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "Enabled");
  if (a2[23] >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(const char **)a2;
  }
  if (!strcasecmp(v8, (const char *)&__dst))
  {
    BOOL v104 = 0;
    int v13 = prop::bbtrace::set(a2, (const char *)a3);
    uint64_t v14 = 0;
    if (!v13) {
      return v14;
    }
    memset(&__p, 0, sizeof(__p));
    char v107 = 7;
    strcpy((char *)v106, "BBTrace");
    memset(&__dst, 0, sizeof(__dst));
    BOOL v16 = defaults::get((char *)v106, a2, &__dst);
    if (v16)
    {
      prop::file::get<std::string>((const void **)v106, (uint64_t)a2, (uint64_t)&__dst, &v108);
      std::string __p = v108;
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v107 & 0x80000000) == 0)
      {
LABEL_16:
        if (v16) {
          goto LABEL_17;
        }
        goto LABEL_65;
      }
    }
    else if ((v107 & 0x80000000) == 0)
    {
      goto LABEL_16;
    }
    operator delete(v106[0]);
    if (v16)
    {
LABEL_17:
      int v17 = util::convert<BOOL>(&__p, &v104, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_18;
      }
      goto LABEL_66;
    }
LABEL_65:
    int v17 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_18:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v17) {
        return 0;
      }
LABEL_67:
      if (*(unsigned char *)(a1 + 301)) {
        return 1;
      }
      int v37 = v104;
      if (!ctu::cf::update<char const*,BOOL>(*(__CFDictionary **)(a1 + 368), (const __CFString **)"Enabled", v104, *MEMORY[0x1E4F1CF80], v15))return 1; {
LABEL_69:
      }
      if (*(unsigned __int8 *)(a1 + 300) != v37)
      {
        *a4 = v37 == 0;
        *(unsigned char *)(a1 + 300) = v37;
      }
      return 1;
    }
LABEL_66:
    if (!v17) {
      return 0;
    }
    goto LABEL_67;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__dst, "High_Tput");
  if (!strcasecmp(v8, (const char *)&__dst))
  {
    BOOL v104 = 0;
    int v18 = prop::bbtrace::set(a2, (const char *)a3);
    uint64_t v14 = 0;
    if (!v18) {
      return v14;
    }
    memset(&__p, 0, sizeof(__p));
    char v107 = 7;
    strcpy((char *)v106, "BBTrace");
    memset(&__dst, 0, sizeof(__dst));
    BOOL v20 = defaults::get((char *)v106, a2, &__dst);
    if (v20)
    {
      prop::file::get<std::string>((const void **)v106, (uint64_t)a2, (uint64_t)&__dst, &v108);
      std::string __p = v108;
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v107 & 0x80000000) == 0)
      {
LABEL_25:
        if (v20) {
          goto LABEL_26;
        }
        goto LABEL_79;
      }
    }
    else if ((v107 & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v106[0]);
    if (v20)
    {
LABEL_26:
      int v21 = util::convert<BOOL>(&__p, &v104, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_80;
      }
      goto LABEL_81;
    }
LABEL_79:
    int v21 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_80:
    }
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_81:
    if (!v21) {
      return 0;
    }
    BOOL v42 = v104;
    if (*(unsigned char *)(a1 + 180) == v104) {
      return 1;
    }
    *(unsigned char *)(a1 + 180) = v104;
    ctu::cf::update<char const*,BOOL>(*(__CFDictionary **)(a1 + 368), (const __CFString **)"High_Tput", v42, *MEMORY[0x1E4F1CF80], v19);
LABEL_110:
    if (*(unsigned char *)(a1 + 300)) {
      *a4 = 4;
    }
    return 1;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&__dst, "Data_Logging");
  if (!strcasecmp(v8, (const char *)&__dst))
  {
    BOOL v104 = 0;
    int v22 = prop::bbtrace::set(a2, (const char *)a3);
    uint64_t v14 = 0;
    if (!v22) {
      return v14;
    }
    memset(&__p, 0, sizeof(__p));
    char v107 = 7;
    strcpy((char *)v106, "BBTrace");
    memset(&__dst, 0, sizeof(__dst));
    BOOL v24 = defaults::get((char *)v106, a2, &__dst);
    if (v24)
    {
      prop::file::get<std::string>((const void **)v106, (uint64_t)a2, (uint64_t)&__dst, &v108);
      std::string __p = v108;
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v107 & 0x80000000) == 0)
      {
LABEL_33:
        if (v24) {
          goto LABEL_34;
        }
        goto LABEL_105;
      }
    }
    else if ((v107 & 0x80000000) == 0)
    {
      goto LABEL_33;
    }
    operator delete(v106[0]);
    if (v24)
    {
LABEL_34:
      int v25 = util::convert<BOOL>(&__p, &v104, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_106;
      }
      goto LABEL_107;
    }
LABEL_105:
    int v25 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_106:
    }
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_107:
    if (!v25) {
      return 0;
    }
    BOOL v48 = v104;
    if (*(unsigned char *)(a1 + 181) == v104) {
      return 1;
    }
    *(unsigned char *)(a1 + 181) = v104;
    ctu::cf::update<char const*,BOOL>(*(__CFDictionary **)(a1 + 368), (const __CFString **)"Data_Logging", v48, *MEMORY[0x1E4F1CF80], v23);
    goto LABEL_110;
  }
  size_t v9 = diag::config::kTempEnabledKey[0];
  size_t v10 = strlen(diag::config::kTempEnabledKey[0]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v11 = v10;
  if (v10 >= 0x17)
  {
    uint64_t v26 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v26 = v10 | 7;
    }
    uint64_t v27 = v26 + 1;
    p_dst = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = v11;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_39;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v10;
  p_dst = &__dst;
  if (v10) {
LABEL_39:
  }
    memmove(p_dst, v9, v11);
  p_dst->__r_.__value_.__s.__data_[v11] = 0;
  if (a2[23] >= 0) {
    int v28 = a2;
  }
  else {
    int v28 = *(const char **)a2;
  }
  int v29 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  std::string v30 = (void *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v31 = &__dst;
  }
  else {
    size_t v31 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  int v32 = strcasecmp(v28, (const char *)v31);
  int v33 = v32;
  if ((v29 & 0x80000000) == 0)
  {
    if (v32) {
      goto LABEL_48;
    }
    goto LABEL_59;
  }
  operator delete(v30);
  if (!v33)
  {
LABEL_59:
    __dst.__r_.__value_.__s.__data_[0] = -86;
    if (!util::convert<BOOL>((const std::string *)a3, (BOOL *)&__dst, 0)) {
      return 0;
    }
    if (*(unsigned char *)(a1 + 301)) {
      return 0;
    }
    int v37 = __dst.__r_.__value_.__s.__data_[0];
    if (!ctu::cf::update<char const*,BOOL>(*(__CFDictionary **)(a1 + 368), (const __CFString **)"Enabled", __dst.__r_.__value_.__s.__data_[0] != 0, *MEMORY[0x1E4F1CF80], v36))return 0; {
    goto LABEL_69;
    }
  }
LABEL_48:
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&__dst, "Mode");
  if (a2[23] >= 0) {
    uint64_t v34 = a2;
  }
  else {
    uint64_t v34 = *(const char **)a2;
  }
  if (!strcasecmp(v34, (const char *)&__dst))
  {
    LODWORD(__dst.__r_.__value_.__l.__data_) = -1431655766;
    if (util::convert<int>((const std::string *)a3, &__dst, 0))
    {
      unsigned int data = __dst.__r_.__value_.__l.__data_;
      if (LODWORD(__dst.__r_.__value_.__l.__data_) == 4)
      {
        if (*(unsigned char *)(a1 + 300))
        {
          char v39 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            uint64_t v40 = *(int *)(a1 + 160);
            if (v40 > 4) {
              size_t v41 = "Unknown";
            }
            else {
              size_t v41 = off_1E5C46E60[v40];
            }
            LODWORD(__dst.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
            WORD2(__dst.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"Passive With Logging Configuration";
            char v76 = "Mode transitioning %s -> %s, enabled must be set to false";
            int v77 = v39;
            goto LABEL_223;
          }
          return 0;
        }
        int v58 = *(_DWORD *)(a1 + 168);
        if ((v58 - 1) < 2)
        {
LABEL_131:
          if (!prop::bbtrace::set(a2, (const char *)a3)) {
            return 0;
          }
          LODWORD(v106[0]) = -1431655766;
          LODWORD(__p.__r_.__value_.__l.__data_) = 5;
          if (!prop::bbtrace::get<diag::config::Mode>(a2, v106)) {
            return 0;
          }
          std::string::basic_string[abi:ne180100]<0>(&__dst, diag::config::kTempEnabledKey[0]);
          std::string::basic_string[abi:ne180100]<0>(&v108, "false");
          int v59 = DIAGTrace::setProperty_sync(a1, &__dst, &v108, &__p);
          if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v108.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_135:
              if (!v59) {
                return 0;
              }
LABEL_153:
              int v67 = (int)v106[0];
              if (*(_DWORD *)(a1 + 160) != LODWORD(v106[0]))
              {
                *(_DWORD *)(a1 + 160) = v106[0];
                *a4 = (int)__p.__r_.__value_.__l.__data_;
                uint64_t v14 = 1;
                if ((v67 | 4) != 4) {
                  *(unsigned char *)(a1 + 301) = 1;
                }
                return v14;
              }
              return 1;
            }
          }
          else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_135;
          }
          operator delete(__dst.__r_.__value_.__l.__data_);
          if (!v59) {
            return 0;
          }
          goto LABEL_153;
        }
        xpc_object_t v64 = *(NSObject **)(a1 + 40);
        if (!os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        uint64_t v65 = *(int *)(a1 + 160);
        if (v65 > 4) {
          uint64_t v66 = "Unknown";
        }
        else {
          uint64_t v66 = off_1E5C46E60[v65];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v66;
        WORD2(__dst.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"Passive With Logging Configuration";
        HIWORD(__dst.__r_.__value_.__r.__words[2]) = 1024;
        int v110 = v58;
        char v76 = "Mode transitioning %s -> %s, trace channel owner (%d) not set properly";
        int v77 = v64;
LABEL_250:
        uint32_t v82 = 28;
        goto LABEL_251;
      }
    }
    else
    {
      unsigned int data = -1431655766;
    }
    if (*(_DWORD *)(a1 + 160) != 4) {
      goto LABEL_131;
    }
    if (*(unsigned char *)(a1 + 300))
    {
      char v46 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      if (data > 3) {
        int v47 = "Unknown";
      }
      else {
        int v47 = off_1E5C46E40[data];
      }
      LODWORD(__dst.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Passive With Logging Configuration";
      WORD2(__dst.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v47;
      char v76 = "Mode transitioning %s -> %s, enabled must be set to false";
LABEL_198:
      int v77 = v46;
LABEL_223:
      uint32_t v82 = 22;
LABEL_251:
      _os_log_error_impl(&dword_1A609F000, v77, OS_LOG_TYPE_ERROR, v76, (uint8_t *)&__dst, v82);
      return 0;
    }
    int v52 = *(_DWORD *)(a1 + 168);
    if ((v52 - 1) > 1) {
      goto LABEL_131;
    }
    size_t v53 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    if (data > 3) {
      xpc_object_t v54 = "Unknown";
    }
    else {
      xpc_object_t v54 = off_1E5C46E40[data];
    }
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Passive With Logging Configuration";
    WORD2(__dst.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v54;
    HIWORD(__dst.__r_.__value_.__r.__words[2]) = 1024;
    int v110 = v52;
    char v76 = "Mode transitioning %s -> %s and trace transport owner can't be %d";
    int v77 = v53;
    goto LABEL_250;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&__dst, "Reset_Mode_Boot");
  if (strcasecmp(v34, (const char *)&__dst))
  {
    std::string::basic_string[abi:ne180100]<0>(&__dst, "TraceOwnership");
    BOOL v35 = util::equal_nocase(a2, (const char *)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (v35)
    {
      std::string::basic_string[abi:ne180100]<0>(&__dst, "TraceOwnership");
      uint64_t v14 = DIAGTrace::setPropTraceOwnership_sync(a1, (char *)&__dst, (const char *)a3);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      return v14;
    }
    std::string::basic_string[abi:ne180100]<0>(&__dst, diag::config::kTempModeKey[0]);
    BOOL v44 = util::equal_nocase(a2, (const char *)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (v44)
    {
      LODWORD(__dst.__r_.__value_.__l.__data_) = -1431655766;
      if ((util::convert<int>((const std::string *)a3, &__dst, 0) & 1) == 0
        || LODWORD(__dst.__r_.__value_.__l.__data_) > 4)
      {
        return 0;
      }
      if (*(_DWORD *)(a1 + 160) != LODWORD(__dst.__r_.__value_.__l.__data_))
      {
        if (*(unsigned char *)(a1 + 300))
        {
          uint64_t v45 = *(NSObject **)(a1 + 40);
          uint64_t v14 = 0;
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_1A609F000, v45, OS_LOG_TYPE_DEFAULT, "#I Cannot change mode while trace is enabled", (uint8_t *)&__dst, 2u);
            return 0;
          }
        }
        else
        {
          *(_DWORD *)(a1 + 160) = __dst.__r_.__value_.__l.__data_;
          return 1;
        }
        return v14;
      }
      return 1;
    }
    std::string::basic_string[abi:ne180100]<0>(&__dst, "History");
    BOOL v49 = util::equal_nocase(a2, (const char *)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (v49)
    {
      if (!prop::bbtrace::set(a2, (const char *)a3)) {
        return 0;
      }
      LODWORD(__dst.__r_.__value_.__l.__data_) = -1431655766;
      uint64_t v14 = prop::bbtrace::get<int>(a2, &__dst);
      int v51 = (int)__dst.__r_.__value_.__l.__data_;
      if (*(_DWORD *)(a1 + 280) == LODWORD(__dst.__r_.__value_.__l.__data_)) {
        return v14;
      }
      *(_DWORD *)(a1 + 280) = __dst.__r_.__value_.__l.__data_;
      ctu::cf::update<char const*,int>(*(__CFDictionary **)(a1 + 368), (const __CFString **)"History", v51, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], v50);
LABEL_129:
      *a4 = 3;
      return v14;
    }
    std::string::basic_string[abi:ne180100]<0>(&__dst, "MaxMemoryFileCount");
    BOOL v55 = util::equal_nocase(a2, (const char *)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (v55)
    {
      if (!prop::bbtrace::set(a2, (const char *)a3)) {
        return 0;
      }
      LODWORD(__dst.__r_.__value_.__l.__data_) = -1431655766;
      uint64_t v14 = prop::bbtrace::get<unsigned int>(a2, &__dst);
      unsigned int v57 = __dst.__r_.__value_.__l.__data_;
      if (*(_DWORD *)(a1 + 284) == LODWORD(__dst.__r_.__value_.__l.__data_)) {
        return v14;
      }
      *(_DWORD *)(a1 + 284) = __dst.__r_.__value_.__l.__data_;
      ctu::cf::update<char const*,unsigned int>(*(__CFDictionary **)(a1 + 368), (const __CFString **)"MaxMemoryFileCount", v57, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], v56);
      goto LABEL_129;
    }
    std::string::basic_string[abi:ne180100]<0>(&__dst, "File");
    if (util::equal_nocase(a2, (const char *)&__dst))
    {
      BOOL v60 = 1;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_139;
      }
LABEL_163:
      if (!v60) {
        goto LABEL_140;
      }
      goto LABEL_164;
    }
    std::string::basic_string[abi:ne180100]<0>(&v108, "File_Secondary");
    if (util::equal_nocase(a2, (const char *)&v108))
    {
      BOOL v60 = 1;
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_158;
      }
LABEL_162:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_163;
      }
LABEL_139:
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (!v60)
      {
LABEL_140:
        std::string::basic_string[abi:ne180100]<0>(&__dst, "File_Sleep");
        BOOL v61 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (v61)
        {
          int v62 = (std::string *)(a1 + 256);
          if (util::equal_nocase((const char *)(a1 + 256), (const char *)a3)) {
            return 1;
          }
          diag::getFileInfo(a3, (uint64_t)&__dst);
          if (v111)
          {
            BOOL v63 = 1;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_146;
            }
LABEL_233:
            if (!v63) {
              goto LABEL_205;
            }
            goto LABEL_234;
          }
          std::string::basic_string[abi:ne180100]<0>(&v108, diag::config::kNoneDMCFile);
          BOOL v63 = util::equal_nocase((const char *)a3, (const char *)&v108);
          if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v108.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_233;
            }
          }
          else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_233;
          }
LABEL_146:
          operator delete(__dst.__r_.__value_.__l.__data_);
          if (!v63) {
            goto LABEL_205;
          }
LABEL_234:
          if (prop::bbtrace::set(a2, (const char *)a3))
          {
            unint64_t v87 = *(__CFDictionary **)(a1 + 368);
            if (*(char *)(a3 + 23) < 0) {
              std::string::__init_copy_ctor_external(&__dst, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
            }
            else {
              std::string __dst = *(std::string *)a3;
            }
            int v94 = ctu::cf::update<char const*,std::string>(v87, (const __CFString **)"File_Sleep", (uint64_t)&__dst, *MEMORY[0x1E4F1CF80], v86);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            if (v94)
            {
              std::string::operator=(v62, (const std::string *)a3);
              *a4 = 2;
              return 1;
            }
          }
          return 0;
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, diag::config::kEnabledDuringSleepKey[0]);
        BOOL v69 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (v69)
        {
          if (!prop::bbtrace::set(a2, (const char *)a3)) {
            return 0;
          }
          LODWORD(__dst.__r_.__value_.__l.__data_) = -1431655766;
          if (!prop::bbtrace::get<diag::config::DuringAPSleep>(a2, &__dst)) {
            return 0;
          }
          int v71 = (int)__dst.__r_.__value_.__l.__data_;
          if (*(_DWORD *)(a1 + 176) == LODWORD(__dst.__r_.__value_.__l.__data_)) {
            return 1;
          }
          *(_DWORD *)(a1 + 176) = __dst.__r_.__value_.__l.__data_;
          uint64_t v72 = ctu::cf::update<char const*,int>(*(__CFDictionary **)(a1 + 368), (const __CFString **)diag::config::kEnabledDuringSleepKey[0], v71, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], v70);
          goto LABEL_195;
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, diag::config::kBufferingOnAPAwake[0]);
        BOOL v73 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (v73)
        {
          if (!prop::bbtrace::set(a2, (const char *)a3)) {
            return 0;
          }
          __dst.__r_.__value_.__s.__data_[0] = -86;
          if (!prop::bbtrace::get<BOOL>(a2, (BOOL *)&__dst)) {
            return 0;
          }
          int v75 = __dst.__r_.__value_.__s.__data_[0];
          if (*(unsigned __int8 *)(a1 + 302) == __dst.__r_.__value_.__s.__data_[0]) {
            return 1;
          }
          *(unsigned char *)(a1 + 302) = __dst.__r_.__value_.__s.__data_[0];
          uint64_t v72 = ctu::cf::update<char const*,int>(*(__CFDictionary **)(a1 + 368), (const __CFString **)diag::config::kBufferingOnAPAwake[0], v75, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], v74);
LABEL_195:
          uint64_t v14 = v72;
          *a4 = 2;
          return v14;
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, diag::config::kStallDetectionKey[0]);
        BOOL v83 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (v83)
        {
          if (!prop::bbtrace::set(a2, (const char *)a3)) {
            return 0;
          }
          __dst.__r_.__value_.__s.__data_[0] = -86;
          if (!prop::bbtrace::get<BOOL>(a2, (BOOL *)&__dst)) {
            return 0;
          }
          int v85 = __dst.__r_.__value_.__s.__data_[0];
          if (*(unsigned __int8 *)(a1 + 288) != __dst.__r_.__value_.__s.__data_[0])
          {
            *(unsigned char *)(a1 + 288) = __dst.__r_.__value_.__s.__data_[0];
            uint64_t v14 = ctu::cf::update<char const*,int>(*(__CFDictionary **)(a1 + 368), (const __CFString **)diag::config::kStallDetectionKey[0], v85, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], v84);
            DIAGTrace::stallDetection_sync((const __CFDictionary **)a1, *(unsigned __int8 *)(a1 + 288));
            return v14;
          }
          return 1;
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, diag::config::kStallDetectionRetriesKey[0]);
        BOOL v88 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (v88)
        {
          if (!prop::bbtrace::set(a2, (const char *)a3)) {
            return 0;
          }
          LODWORD(__dst.__r_.__value_.__l.__data_) = -1431655766;
          if (!prop::bbtrace::get<unsigned int>(a2, &__dst)) {
            return 0;
          }
          unsigned int v90 = __dst.__r_.__value_.__l.__data_;
          if (*(_DWORD *)(a1 + 292) != LODWORD(__dst.__r_.__value_.__l.__data_))
          {
            *(_DWORD *)(a1 + 292) = __dst.__r_.__value_.__l.__data_;
            uint64_t v14 = ctu::cf::update<char const*,unsigned int>(*(__CFDictionary **)(a1 + 368), (const __CFString **)diag::config::kStallDetectionRetriesKey[0], v90, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], v89);
            DIAGTrace::stallDetection_sync((const __CFDictionary **)a1, *(unsigned __int8 *)(a1 + 288));
            return v14;
          }
          return 1;
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, diag::config::kStallDetectionRecoveryKey[0]);
        BOOL v91 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (v91)
        {
          if (!prop::bbtrace::set(a2, (const char *)a3)) {
            return 0;
          }
          LODWORD(__dst.__r_.__value_.__l.__data_) = -1431655766;
          if (!prop::bbtrace::get<diag::config::Recovery>(a2, &__dst)) {
            return 0;
          }
          unsigned int v93 = __dst.__r_.__value_.__l.__data_;
          if (*(_DWORD *)(a1 + 172) != LODWORD(__dst.__r_.__value_.__l.__data_))
          {
            *(_DWORD *)(a1 + 172) = __dst.__r_.__value_.__l.__data_;
            uint64_t v14 = ctu::cf::update<char const*,unsigned int>(*(__CFDictionary **)(a1 + 368), (const __CFString **)diag::config::kStallDetectionRecoveryKey[0], v93, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], v92);
            DIAGTrace::stallDetection_sync((const __CFDictionary **)a1, *(unsigned __int8 *)(a1 + 288));
            return v14;
          }
          return 1;
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, diag::config::kKeepScratchLogsKey[0]);
        BOOL v95 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (v95)
        {
          if (!prop::bbtrace::set(a2, (const char *)a3)) {
            return 0;
          }
          return prop::bbtrace::get<BOOL>(a2, (BOOL *)(a1 + 303));
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, "CellularLoggingAllowed");
        BOOL v96 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (v96)
        {
          if (!prop::bbtrace::set(a2, (const char *)a3)) {
            return 0;
          }
          return prop::bbtrace::get<BOOL>(a2, (BOOL *)(a1 + 304));
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, "CarrierName1");
        BOOL v97 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (v97)
        {
          if (!prop::bbtrace::set(a2, (const char *)a3)) {
            return 0;
          }
          return prop::bbtrace::get(a2, a1 + 312);
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, "CarrierName2");
        BOOL v98 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (v98)
        {
          if (!prop::bbtrace::set(a2, (const char *)a3)) {
            return 0;
          }
          return prop::bbtrace::get(a2, a1 + 336);
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, "FileSize");
        BOOL v99 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (v99)
        {
          if (!prop::bbtrace::set(a2, (const char *)a3)) {
            return 0;
          }
          LODWORD(__dst.__r_.__value_.__l.__data_) = -1431655766;
          uint64_t v14 = prop::bbtrace::get<unsigned int>(a2, &__dst);
          unsigned int v101 = __dst.__r_.__value_.__l.__data_;
          if (*(_DWORD *)(a1 + 360) == LODWORD(__dst.__r_.__value_.__l.__data_)) {
            return v14;
          }
          *(_DWORD *)(a1 + 360) = __dst.__r_.__value_.__l.__data_;
          ctu::cf::update<char const*,unsigned int>(*(__CFDictionary **)(a1 + 368), (const __CFString **)"FileSize", v101, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], v100);
          goto LABEL_129;
        }
        char v46 = *(NSObject **)(a1 + 40);
        if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        if (a2[23] >= 0) {
          std::string::size_type v102 = (std::string::size_type)a2;
        }
        else {
          std::string::size_type v102 = *(void *)a2;
        }
        if (*(char *)(a3 + 23) >= 0) {
          std::string::size_type v103 = a3;
        }
        else {
          std::string::size_type v103 = *(void *)a3;
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = v102;
        WORD2(__dst.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = v103;
        char v76 = "Unrecognized Set property request. Key=%s, Value=%s";
        goto LABEL_198;
      }
LABEL_164:
      std::string::basic_string[abi:ne180100]<0>(&__dst, "File");
      if (util::equal_nocase(a2, (const char *)&__dst)
        && util::equal_nocase((const char *)(a1 + 184), (const char *)a3))
      {
        BOOL v68 = 1;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_201:
          operator delete(__dst.__r_.__value_.__l.__data_);
          if (v68) {
            return 1;
          }
          goto LABEL_202;
        }
LABEL_186:
        if (v68) {
          return 1;
        }
LABEL_202:
        diag::getFileInfo(a3, (uint64_t)&__dst);
        if (v111)
        {
          BOOL v78 = 1;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_204;
          }
LABEL_213:
          if (!v78) {
            goto LABEL_205;
          }
          goto LABEL_214;
        }
        std::string::basic_string[abi:ne180100]<0>(&v108, diag::config::kNoneDMCFile);
        BOOL v78 = util::equal_nocase((const char *)a3, (const char *)&v108);
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v108.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_213;
          }
        }
        else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_213;
        }
LABEL_204:
        operator delete(__dst.__r_.__value_.__l.__data_);
        if (!v78)
        {
LABEL_205:
          std::string::basic_string[abi:ne180100]<0>(&__dst, "Setting DMC File Failed");
          std::string::basic_string[abi:ne180100]<0>(&v108, "File does not exist");
          if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v108.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          return 0;
        }
LABEL_214:
        BOOL v79 = (capabilities::diag *)DIAGTrace::ratifyDMCFile_sync(a1, (uint64_t)a2, a3);
        if (!v79) {
          return 0;
        }
        *a4 = 2;
        if (!capabilities::diag::supportsADPL(v79)) {
          return 1;
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, diag::config::kThroughputDMCFile[0]);
        BOOL v80 = DIAGTrace::checkOneOfDMCName_sync(a1, (uint64_t)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (!v80) {
          return 1;
        }
        return DIAGTrace::handleTputDMCforADPL_sync((config::hw *)a1, a4);
      }
      std::string::basic_string[abi:ne180100]<0>(&v108, "File_Secondary");
      if (util::equal_nocase(a2, (const char *)&v108) && util::equal_nocase((const char *)(a1 + 208), (const char *)a3))
      {
        BOOL v68 = 1;
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_200:
          operator delete(v108.__r_.__value_.__l.__data_);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_201;
          }
          goto LABEL_186;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v106, diag::config::kExtraDMCFileKey[0]);
        BOOL v68 = util::equal_nocase(a2, (const char *)v106)
           && util::equal_nocase((const char *)(a1 + 232), (const char *)a3);
        if (v107 < 0)
        {
          operator delete(v106[0]);
          if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_200;
          }
        }
        else if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_200;
        }
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_201;
      }
      goto LABEL_186;
    }
    std::string::basic_string[abi:ne180100]<0>(v106, diag::config::kExtraDMCFileKey[0]);
    BOOL v60 = util::equal_nocase(a2, (const char *)v106);
    if (v107 < 0)
    {
      operator delete(v106[0]);
      if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_162;
      }
    }
    else if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_162;
    }
LABEL_158:
    operator delete(v108.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_163;
    }
    goto LABEL_139;
  }
  if (!prop::bbtrace::set(a2, (const char *)a3)) {
    return 0;
  }

  return prop::bbtrace::get<abm::ResetTraceModeOnAPBoot>(a2, (_DWORD *)(a1 + 164));
}

void sub_1A60DF514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double util::to_str<BOOL>@<D0>(int a1@<W0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, a1);
  double result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a2 = v4;
  return result;
}

void sub_1A60DF628(void *a1)
{
}

void sub_1A60DF634(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL DIAGTrace::setPropTraceOwnership_sync(uint64_t a1, char *a2, const char *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 300))
  {
    std::string v4 = *(NSObject **)(a1 + 40);
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    size_t v6 = "Setting trace ownership, enabled must be set to false";
LABEL_27:
    _os_log_error_impl(&dword_1A609F000, v4, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&buf, 2u);
    return 0;
  }
  if ((prop::bbtrace::set(a2, a3) & 1) == 0)
  {
    std::string v4 = *(NSObject **)(a1 + 40);
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    size_t v6 = "Failed to set trace ownership property!";
    goto LABEL_27;
  }
  memset(&v15, 0, sizeof(v15));
  char v17 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  BOOL v8 = defaults::get((char *)__p, a2, &buf);
  if (v8)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a2, (uint64_t)&buf, &v18);
    std::string v15 = v18;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_9:
      int data = -1431655766;
      if (v8) {
        goto LABEL_10;
      }
LABEL_19:
      char v11 = 0;
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_24;
      }
      goto LABEL_20;
    }
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
  int data = -1431655766;
  if (!v8) {
    goto LABEL_19;
  }
LABEL_10:
  LODWORD(buf.__r_.__value_.__l.__data_) = -1431655766;
  int v10 = util::convert<int>(&v15, &buf, 0);
  char v11 = v10;
  if (v10) {
    int data = (int)buf.__r_.__value_.__l.__data_;
  }
  else {
    int data = -1431655766;
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_24:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((v11 & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((v11 & 1) == 0)
  {
LABEL_25:
    std::string v4 = *(NSObject **)(a1 + 40);
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    size_t v6 = "Failed to get trace ownership";
    goto LABEL_27;
  }
LABEL_21:
  int v12 = *(_DWORD *)(a1 + 168);
  int v13 = *(NSObject **)(a1 + 40);
  BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  if (data == v12)
  {
    if (v14)
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = data;
      _os_log_impl(&dword_1A609F000, v13, OS_LOG_TYPE_DEFAULT, "#I Trace ownership is already set to %d", (uint8_t *)&buf, 8u);
    }
  }
  else
  {
    if (v14)
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v12;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = data;
      _os_log_impl(&dword_1A609F000, v13, OS_LOG_TYPE_DEFAULT, "#I Setting trace ownership from %d to %d", (uint8_t *)&buf, 0xEu);
    }
    *(_DWORD *)(a1 + 168) = data;
  }
  return 1;
}

void sub_1A60DF8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL DIAGTrace::getProperty_sync(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v6 = a2[23];
  if ((v6 & 0x80000000) == 0)
  {
    if (strcasecmp(a2, "Enabled") && strcasecmp(a2, diag::config::kTempEnabledKey[0]))
    {
      if (strcasecmp(a2, "Mode"))
      {
        if (strcasecmp(a2, "Reset_Mode_Boot"))
        {
          if (strcasecmp(a2, "TraceOwnership"))
          {
            if (strcasecmp(a2, "History"))
            {
              if (strcasecmp(a2, "MaxMemoryFileCount"))
              {
                if (strcasecmp(a2, "File"))
                {
                  if (strcasecmp(a2, "File_Secondary"))
                  {
                    if (strcasecmp(a2, diag::config::kExtraDMCFileKey[0]))
                    {
                      if (strcasecmp(a2, "File_Sleep"))
                      {
                        if (strcasecmp(a2, diag::config::kEnabledDuringSleepKey[0]))
                        {
                          if (strcasecmp(a2, diag::config::kBufferingOnAPAwake[0]))
                          {
                            if (strcasecmp(a2, diag::config::kStallDetectionKey[0]))
                            {
                              if (strcasecmp(a2, diag::config::kStallDetectionRetriesKey[0]))
                              {
                                if (strcasecmp(a2, diag::config::kStallDetectionRecoveryKey[0]))
                                {
                                  if (strcasecmp(a2, "State"))
                                  {
                                    if (strcasecmp(a2, diag::config::kKeepScratchLogsKey[0]))
                                    {
                                      if (strcasecmp(a2, "CellularLoggingAllowed"))
                                      {
                                        if (strcasecmp(a2, "CarrierName1"))
                                        {
                                          if (strcasecmp(a2, "CarrierName2"))
                                          {
                                            if (strcasecmp(a2, "High_Tput"))
                                            {
                                              uint64_t v7 = a2;
                                              if (strcasecmp(a2, "Data_Logging")) {
                                                goto LABEL_25;
                                              }
                                              goto LABEL_53;
                                            }
LABEL_97:
                                            util::to_str<BOOL>(*(unsigned __int8 *)(a1 + 180), &buf);
                                            goto LABEL_82;
                                          }
                                          goto LABEL_96;
                                        }
                                        goto LABEL_95;
                                      }
LABEL_94:
                                      util::to_str<BOOL>(*(unsigned __int8 *)(a1 + 304), &buf);
                                      goto LABEL_82;
                                    }
LABEL_93:
                                    util::to_str<BOOL>(*(unsigned __int8 *)(a1 + 303), &buf);
                                    goto LABEL_82;
                                  }
LABEL_89:
                                  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_1A61FC72E);
                                  DIAGTrace::dumpState_sync(a1, (uint64_t)__p, 0, 10, &buf);
                                  std::string::operator=((std::string *)a3, &buf);
                                  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                                    operator delete(buf.__r_.__value_.__l.__data_);
                                  }
                                  if (v27 < 0) {
                                    operator delete(__p[0]);
                                  }
                                  return 1;
                                }
LABEL_85:
                                uint64_t v23 = *(int *)(a1 + 172);
                                if (v23 <= 2)
                                {
                                  BOOL v24 = off_1E5C46EA0;
                                  goto LABEL_78;
                                }
                                goto LABEL_87;
                              }
LABEL_81:
                              util::to_str<unsigned int>(*(_DWORD *)(a1 + 292), &buf);
                              goto LABEL_82;
                            }
LABEL_80:
                            util::to_str<BOOL>(*(unsigned __int8 *)(a1 + 288), &buf);
                            goto LABEL_82;
                          }
LABEL_79:
                          util::to_str<BOOL>(*(unsigned __int8 *)(a1 + 302), &buf);
                          goto LABEL_82;
                        }
LABEL_76:
                        uint64_t v23 = *(int *)(a1 + 176);
                        if (v23 <= 2)
                        {
                          BOOL v24 = off_1E5C46E88;
LABEL_78:
                          int v25 = v24[v23];
LABEL_88:
                          std::string::__assign_external((std::string *)a3, v25);
                          return 1;
                        }
LABEL_87:
                        int v25 = "Unknown";
                        goto LABEL_88;
                      }
                      goto LABEL_74;
                    }
                    goto LABEL_73;
                  }
                  goto LABEL_72;
                }
LABEL_71:
                int v22 = (const std::string *)(a1 + 184);
LABEL_75:
                std::string::operator=((std::string *)a3, v22);
                return 1;
              }
              goto LABEL_65;
            }
LABEL_59:
            int v15 = *(_DWORD *)(a1 + 280);
            BOOL v16 = v15 < 0;
            if (!v15) {
              int v15 = 2048;
            }
            if (v16) {
              int v17 = 256;
            }
            else {
              int v17 = v15;
            }
            v28[0] = 0;
            *(void *)((char *)v28 + 7) = 0;
            std::to_string(&buf, v17);
            goto LABEL_66;
          }
          goto LABEL_58;
        }
        goto LABEL_57;
      }
      goto LABEL_56;
    }
LABEL_54:
    int v11 = *(unsigned __int8 *)(a1 + 300);
    v28[0] = 0;
    *(void *)((char *)v28 + 7) = 0;
    std::to_string(&buf, v11);
LABEL_66:
    v28[0] = buf.__r_.__value_.__l.__size_;
    std::string::size_type v19 = buf.__r_.__value_.__r.__words[0];
    *(void *)((char *)v28 + 7) = *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7);
    char v20 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    uint64_t v21 = v28[0];
    *(void *)a3 = v19;
    *(void *)(a3 + 8) = v21;
    *(void *)(a3 + 15) = *(void *)((char *)v28 + 7);
    *(unsigned char *)(a3 + 23) = v20;
    return 1;
  }
  uint64_t v7 = *(const char **)a2;
  if (!strcasecmp(*(const char **)a2, "Enabled") || !strcasecmp(v7, diag::config::kTempEnabledKey[0])) {
    goto LABEL_54;
  }
  if (!strcasecmp(v7, "Mode"))
  {
LABEL_56:
    int v12 = *(_DWORD *)(a1 + 160);
    v28[0] = 0;
    *(void *)((char *)v28 + 7) = 0;
    std::to_string(&buf, v12);
    goto LABEL_66;
  }
  if (!strcasecmp(v7, "Reset_Mode_Boot"))
  {
LABEL_57:
    int v13 = *(_DWORD *)(a1 + 164);
    v28[0] = 0;
    *(void *)((char *)v28 + 7) = 0;
    std::to_string(&buf, v13);
    goto LABEL_66;
  }
  if (!strcasecmp(v7, "TraceOwnership"))
  {
LABEL_58:
    int v14 = *(_DWORD *)(a1 + 168);
    v28[0] = 0;
    *(void *)((char *)v28 + 7) = 0;
    std::to_string(&buf, v14);
    goto LABEL_66;
  }
  if (!strcasecmp(v7, "History")) {
    goto LABEL_59;
  }
  if (!strcasecmp(v7, "MaxMemoryFileCount"))
  {
LABEL_65:
    unsigned int v18 = *(_DWORD *)(a1 + 284);
    v28[0] = 0;
    *(void *)((char *)v28 + 7) = 0;
    std::to_string(&buf, v18);
    goto LABEL_66;
  }
  if (!strcasecmp(v7, "File")) {
    goto LABEL_71;
  }
  if (!strcasecmp(v7, "File_Secondary"))
  {
LABEL_72:
    int v22 = (const std::string *)(a1 + 208);
    goto LABEL_75;
  }
  if (!strcasecmp(v7, diag::config::kExtraDMCFileKey[0]))
  {
LABEL_73:
    int v22 = (const std::string *)(a1 + 232);
    goto LABEL_75;
  }
  if (!strcasecmp(v7, "File_Sleep"))
  {
LABEL_74:
    int v22 = (const std::string *)(a1 + 256);
    goto LABEL_75;
  }
  if (!strcasecmp(v7, diag::config::kEnabledDuringSleepKey[0])) {
    goto LABEL_76;
  }
  if (!strcasecmp(v7, diag::config::kBufferingOnAPAwake[0])) {
    goto LABEL_79;
  }
  if (!strcasecmp(v7, diag::config::kStallDetectionKey[0])) {
    goto LABEL_80;
  }
  if (!strcasecmp(v7, diag::config::kStallDetectionRetriesKey[0])) {
    goto LABEL_81;
  }
  if (!strcasecmp(v7, diag::config::kStallDetectionRecoveryKey[0])) {
    goto LABEL_85;
  }
  if (!strcasecmp(v7, "State")) {
    goto LABEL_89;
  }
  if (!strcasecmp(v7, diag::config::kKeepScratchLogsKey[0])) {
    goto LABEL_93;
  }
  if (!strcasecmp(v7, "CellularLoggingAllowed")) {
    goto LABEL_94;
  }
  if (!strcasecmp(v7, "CarrierName1"))
  {
LABEL_95:
    int v22 = (const std::string *)(a1 + 312);
    goto LABEL_75;
  }
  if (!strcasecmp(v7, "CarrierName2"))
  {
LABEL_96:
    int v22 = (const std::string *)(a1 + 336);
    goto LABEL_75;
  }
  if (!strcasecmp(v7, "High_Tput")) {
    goto LABEL_97;
  }
  if (!strcasecmp(v7, "Data_Logging"))
  {
LABEL_53:
    util::to_str<BOOL>(*(unsigned __int8 *)(a1 + 181), &buf);
LABEL_82:
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(std::string *)a3 = buf;
    return 1;
  }
LABEL_25:
  if (!strcasecmp(v7, "FileSize"))
  {
    util::to_str<unsigned int>(*(_DWORD *)(a1 + 360), &buf);
    goto LABEL_82;
  }
  BOOL v8 = *(NSObject **)(a1 + 40);
  BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v10 = *(char **)a2;
    if (v6 >= 0) {
      int v10 = a2;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
    _os_log_error_impl(&dword_1A609F000, v8, OS_LOG_TYPE_ERROR, "Unrecognized Get property request. Key=%s", (uint8_t *)&buf, 0xCu);
    return 0;
  }
  return result;
}

void sub_1A60E0070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double util::to_str<unsigned int>@<D0>(unsigned int a1@<W0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, a1);
  double result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a2 = v4;
  return result;
}

void sub_1A60E01B0(void *a1)
{
}

void sub_1A60E01BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DIAGTrace::dumpState_sync@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, std::string::value_type a4@<W3>, unsigned char *a5@<X8>)
{
  unint64_t v109 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v108[7] = v10;
  v108[8] = v10;
  v108[5] = v10;
  v108[6] = v10;
  v108[3] = v10;
  v108[4] = v10;
  v108[1] = v10;
  v108[2] = v10;
  long long v107 = v10;
  v108[0] = v10;
  *(_OWORD *)size_t v105 = v10;
  long long v106 = v10;
  long long v103 = v10;
  long long v104 = v10;
  long long v101 = v10;
  long long v102 = v10;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v101);
  if (a3) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v101, (uint64_t)"\n----- DIAG Trace Dump State -----\n", 35);
  }
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v101, (uint64_t)"Enabled: ", 9);
  *(_DWORD *)((char *)v11 + *(void *)(*v11 - 24) + 8) |= 1u;
  int v12 = (void *)std::ostream::operator<<();
  v110.__r_.__value_.__s.__data_[0] = a4;
  int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v110, 1);
  int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"QDSS: ", 6);
  *(_DWORD *)((char *)v14 + *(void *)(*v14 - 24) + 8) |= 1u;
  int v15 = (void *)std::ostream::operator<<();
  v110.__r_.__value_.__s.__data_[0] = a4;
  BOOL v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v110, 1);
  int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"ADPL: ", 6);
  *(_DWORD *)((char *)v17 + *(void *)(*v17 - 24) + 8) |= 1u;
  unsigned int v18 = (void *)std::ostream::operator<<();
  v110.__r_.__value_.__s.__data_[0] = a4;
  std::string::size_type v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v110, 1);
  char v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"History: ", 9);
  DIAGTrace::historyAsString(a1, (char *)v99);
  if ((v100 & 0x80u) == 0) {
    uint64_t v21 = v99;
  }
  else {
    uint64_t v21 = (void **)v99[0];
  }
  if ((v100 & 0x80u) == 0) {
    uint64_t v22 = v100;
  }
  else {
    uint64_t v22 = (uint64_t)v99[1];
  }
  uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
  v110.__r_.__value_.__s.__data_[0] = a4;
  BOOL v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)&v110, 1);
  int v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Mode: ", 6);
  uint64_t v26 = *(int *)(a1 + 160);
  if (v26 > 4) {
    char v27 = "Unknown";
  }
  else {
    char v27 = off_1E5C46E60[v26];
  }
  size_t v28 = strlen(v27);
  int v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
  v110.__r_.__value_.__s.__data_[0] = a4;
  uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)&v110, 1);
  size_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Reset Mode On AP Boot  : ", 25);
  int v32 = *(_DWORD *)(a1 + 164);
  if (v32 == 1)
  {
    uint64_t v33 = 9;
    char v98 = 9;
    qmemcpy(v97, "Last_Used", 9);
  }
  else if (v32)
  {
    uint64_t v33 = 11;
    char v98 = 11;
    qmemcpy(v97, "UnSpecified", 11);
  }
  else
  {
    uint64_t v33 = 7;
    char v98 = 7;
    qmemcpy(v97, "Default", 7);
  }
  *((unsigned char *)v97 + v33) = 0;
  uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v97, v33);
  v110.__r_.__value_.__s.__data_[0] = a4;
  BOOL v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)&v110, 1);
  CFAllocatorRef v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Trace Ownership: ", 17);
  std::to_string(&v110, *(_DWORD *)(a1 + 168));
  std::string v96 = v110;
  if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v37 = &v96;
  }
  else {
    int v37 = (std::string *)v96.__r_.__value_.__r.__words[0];
  }
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v96.__r_.__value_.__l.__size_;
  }
  char v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, size);
  v110.__r_.__value_.__s.__data_[0] = a4;
  uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)&v110, 1);
  size_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"DMC 1: ", 7);
  int v42 = *(char *)(a1 + 207);
  if (v42 >= 0) {
    uint64_t v43 = a1 + 184;
  }
  else {
    uint64_t v43 = *(void *)(a1 + 184);
  }
  if (v42 >= 0) {
    uint64_t v44 = *(unsigned __int8 *)(a1 + 207);
  }
  else {
    uint64_t v44 = *(void *)(a1 + 192);
  }
  uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, v43, v44);
  v110.__r_.__value_.__s.__data_[0] = a4;
  char v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)&v110, 1);
  int v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"DMC 2: ", 7);
  int v48 = *(char *)(a1 + 231);
  if (v48 >= 0) {
    uint64_t v49 = a1 + 208;
  }
  else {
    uint64_t v49 = *(void *)(a1 + 208);
  }
  if (v48 >= 0) {
    uint64_t v50 = *(unsigned __int8 *)(a1 + 231);
  }
  else {
    uint64_t v50 = *(void *)(a1 + 216);
  }
  int v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
  v110.__r_.__value_.__s.__data_[0] = a4;
  int v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)&v110, 1);
  size_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"DMC 3: ", 7);
  int v54 = *(char *)(a1 + 255);
  if (v54 >= 0) {
    uint64_t v55 = a1 + 232;
  }
  else {
    uint64_t v55 = *(void *)(a1 + 232);
  }
  if (v54 >= 0) {
    uint64_t v56 = *(unsigned __int8 *)(a1 + 255);
  }
  else {
    uint64_t v56 = *(void *)(a1 + 240);
  }
  unsigned int v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v55, v56);
  v110.__r_.__value_.__s.__data_[0] = a4;
  int v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)&v110, 1);
  int v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Enabled During Sleep: ", 22);
  uint64_t v60 = *(int *)(a1 + 176);
  if (v60 > 2) {
    BOOL v61 = "Unknown";
  }
  else {
    BOOL v61 = off_1E5C46E88[v60];
  }
  size_t v62 = strlen(v61);
  BOOL v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v61, v62);
  v110.__r_.__value_.__s.__data_[0] = a4;
  xpc_object_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)&v110, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Stall Detection: ", 17);
  uint64_t v65 = (void *)std::ostream::operator<<();
  v110.__r_.__value_.__s.__data_[0] = a4;
  uint64_t v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)&v110, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Stall Retries: ", 15);
  int v67 = (void *)std::ostream::operator<<();
  v110.__r_.__value_.__s.__data_[0] = a4;
  BOOL v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)&v110, 1);
  BOOL v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Stall Recovery: ", 16);
  uint64_t v70 = *(int *)(a1 + 172);
  if (v70 > 2) {
    int v71 = "Unknown";
  }
  else {
    int v71 = off_1E5C46EA0[v70];
  }
  size_t v72 = strlen(v71);
  BOOL v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v71, v72);
  v110.__r_.__value_.__s.__data_[0] = a4;
  CFAllocatorRef v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)&v110, 1);
  int v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Max memory file count: ", 23);
  unsigned int v76 = *(_DWORD *)(a1 + 284);
  if (v76)
  {
    std::to_string(&v110, v76);
    std::string __p = v110;
  }
  else
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
    strcpy((char *)&__p, "No limit");
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v78 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v78 = __p.__r_.__value_.__l.__size_;
  }
  BOOL v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)p_p, v78);
  v110.__r_.__value_.__s.__data_[0] = a4;
  BOOL v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)&v110, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"File Size : ", 12);
  unint64_t v81 = (void *)std::ostream::operator<<();
  v110.__r_.__value_.__s.__data_[0] = a4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)&v110, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_58:
      if ((v98 & 0x80000000) == 0) {
        goto LABEL_59;
      }
      goto LABEL_65;
    }
  }
  else if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_58;
  }
  operator delete(v96.__r_.__value_.__l.__data_);
  if ((v98 & 0x80000000) == 0)
  {
LABEL_59:
    if (((char)v100 & 0x80000000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_66;
  }
LABEL_65:
  operator delete(v97[0]);
  if (((char)v100 & 0x80000000) == 0)
  {
LABEL_60:
    int v82 = *(char *)(a2 + 23);
    if ((v82 & 0x80000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_67;
  }
LABEL_66:
  operator delete(v99[0]);
  int v82 = *(char *)(a2 + 23);
  if ((v82 & 0x80000000) == 0)
  {
LABEL_61:
    if (!(_BYTE)v82) {
      goto LABEL_75;
    }
    goto LABEL_68;
  }
LABEL_67:
  if (!*(void *)(a2 + 8)) {
    goto LABEL_75;
  }
LABEL_68:
  v110.__r_.__value_.__s.__data_[0] = a4;
  BOOL v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v101, (uint64_t)&v110, 1);
  CFAllocatorRef v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"Reason: ", 8);
  int v85 = *(char *)(a2 + 23);
  if (v85 >= 0) {
    uint64_t v86 = a2;
  }
  else {
    uint64_t v86 = *(void *)a2;
  }
  if (v85 >= 0) {
    uint64_t v87 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v87 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, v86, v87);
LABEL_75:
  if (a3) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v101, (uint64_t)"\n---------------------------------\n", 35);
  }
  if ((BYTE8(v107) & 0x10) != 0)
  {
    uint64_t v89 = v107;
    if ((unint64_t)v107 < *((void *)&v104 + 1))
    {
      *(void *)&long long v107 = *((void *)&v104 + 1);
      uint64_t v89 = *((void *)&v104 + 1);
    }
    unsigned int v90 = (const void *)v104;
    size_t v88 = v89 - v104;
    if ((unint64_t)(v89 - v104) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_94;
    }
  }
  else
  {
    if ((BYTE8(v107) & 8) == 0)
    {
      size_t v88 = 0;
      a5[23] = 0;
      goto LABEL_90;
    }
    unsigned int v90 = (const void *)*((void *)&v102 + 1);
    size_t v88 = *((void *)&v103 + 1) - *((void *)&v102 + 1);
    if (*((void *)&v103 + 1) - *((void *)&v102 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_94:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v88 >= 0x17)
  {
    uint64_t v91 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v91 = v88 | 7;
    }
    uint64_t v92 = v91 + 1;
    unsigned int v93 = operator new(v91 + 1);
    *((void *)a5 + 1) = v88;
    *((void *)a5 + 2) = v92 | 0x8000000000000000;
    *(void *)a5 = v93;
    a5 = v93;
    goto LABEL_89;
  }
  a5[23] = v88;
  if (v88) {
LABEL_89:
  }
    memmove(a5, v90, v88);
LABEL_90:
  a5[v88] = 0;
  *(void *)&long long v101 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v101 + *(void *)(v101 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v101 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v106) < 0) {
    operator delete(v105[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62751A0](v108);
}

void sub_1A60E0A44(void *a1)
{
}

void sub_1A60E0A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a28 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a34 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a23);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_5:
    std::ostringstream::~ostringstream((uint64_t)&a35);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(a29);
  std::ostringstream::~ostringstream((uint64_t)&a35);
  _Unwind_Resume(a1);
}

uint64_t DIAGTrace::historyAsString@<X0>(uint64_t this@<X0>, char *a2@<X8>)
{
  uint64_t v2 = a2;
  if (!*(_DWORD *)(this + 280))
  {
    a2[23] = 8;
    strcpy(a2, "Infinite");
    return this;
  }
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[7] = v3;
  v18[8] = v3;
  v18[5] = v3;
  v18[6] = v3;
  void v18[3] = v3;
  v18[4] = v3;
  v18[1] = v3;
  v18[2] = v3;
  long long v17 = v3;
  v18[0] = v3;
  *(_OWORD *)std::string __p = v3;
  long long v16 = v3;
  long long v13 = v3;
  *(_OWORD *)__int16 __src = v3;
  long long v11 = v3;
  long long v12 = v3;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v11);
  std::string v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" MB", 3);
  if ((BYTE8(v17) & 0x10) != 0)
  {
    int v6 = (unsigned char *)v17;
    if ((void *)v17 < __src[1])
    {
      *(void **)&long long v17 = __src[1];
      int v6 = __src[1];
    }
    uint64_t v7 = __src[0];
    size_t v5 = v6 - (char *)__src[0];
    if ((unint64_t)(v6 - (char *)__src[0]) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_20;
    }
  }
  else
  {
    if ((BYTE8(v17) & 8) == 0)
    {
      size_t v5 = 0;
      v2[23] = 0;
      goto LABEL_16;
    }
    uint64_t v7 = (const void *)*((void *)&v12 + 1);
    size_t v5 = *((void *)&v13 + 1) - *((void *)&v12 + 1);
    if (*((void *)&v13 + 1) - *((void *)&v12 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_20:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    long long v10 = (char *)operator new(v8 + 1);
    *((void *)v2 + 1) = v5;
    *((void *)v2 + 2) = v9 | 0x8000000000000000;
    *(void *)uint64_t v2 = v10;
    uint64_t v2 = v10;
  }
  else
  {
    v2[23] = v5;
    if (!v5) {
      goto LABEL_16;
    }
  }
  memmove(v2, v7, v5);
LABEL_16:
  v2[v5] = 0;
  *(void *)&long long v11 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v11 + *(void *)(v11 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v11 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62751A0](v18);
}

void sub_1A60E0DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t DIAGTrace::stateFlagsAsString@<X0>(DIAGTrace *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v20[7] = v4;
  v20[8] = v4;
  void v20[5] = v4;
  v20[6] = v4;
  v20[3] = v4;
  v20[4] = v4;
  v20[1] = v4;
  v20[2] = v4;
  long long v19 = v4;
  v20[0] = v4;
  *(_OWORD *)std::string __p = v4;
  long long v18 = v4;
  long long v15 = v4;
  *(_OWORD *)__int16 __src = v4;
  long long v13 = v4;
  long long v14 = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Trace Flags(", 12);
  uint64_t v5 = *((void *)this + 19);
  if (v5)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)" Start", 6);
    uint64_t v5 = *((void *)this + 19);
  }
  if ((v5 & 2) != 0) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)" Abort", 6);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)")", 2);
  if ((BYTE8(v19) & 0x10) != 0)
  {
    uint64_t v7 = (unsigned char *)v19;
    if ((void *)v19 < __src[1])
    {
      *(void **)&long long v19 = __src[1];
      uint64_t v7 = __src[1];
    }
    uint64_t v8 = __src[0];
    size_t v6 = v7 - (char *)__src[0];
    if ((unint64_t)(v7 - (char *)__src[0]) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_22;
    }
  }
  else
  {
    if ((BYTE8(v19) & 8) == 0)
    {
      size_t v6 = 0;
      a2[23] = 0;
      goto LABEL_18;
    }
    uint64_t v8 = (const void *)*((void *)&v14 + 1);
    size_t v6 = *((void *)&v15 + 1) - *((void *)&v14 + 1);
    if (*((void *)&v15 + 1) - *((void *)&v14 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_22:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    long long v11 = operator new(v9 + 1);
    *((void *)a2 + 1) = v6;
    *((void *)a2 + 2) = v10 | 0x8000000000000000;
    *(void *)a2 = v11;
    a2 = v11;
    goto LABEL_17;
  }
  a2[23] = v6;
  if (v6) {
LABEL_17:
  }
    memmove(a2, v8, v6);
LABEL_18:
  a2[v6] = 0;
  *(void *)&long long v13 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v13 + *(void *)(v13 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v13 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62751A0](v20);
}

void sub_1A60E1044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void DIAGTrace::prepare(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 300) && !*(unsigned char *)(a1 + 400))
  {
    uint64_t v2 = *(NSObject **)(a1 + 144);
    if (v2)
    {
      dispatch_group_enter(v2);
      *(unsigned char *)(a1 + 400) = 1;
    }
  }
}

void DIAGTrace::start(uint64_t a1, NSObject **a2, const void **a3)
{
  long long v4 = *a2;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN9DIAGTrace5startEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_68_0;
  uint64_t v5 = *a3;
  void v9[4] = a1;
  CFTypeRef cf = v5;
  size_t v6 = v4;
  if (v5)
  {
    CFRetain(v5);
    size_t v6 = *a2;
  }
  uint64_t v8 = (uint64_t *)(a1 + 72);
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<Trace>::execute_wrapped(v8, v4, (uint64_t)v9);
  if (object) {
    dispatch_release(object);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void ___ZN9DIAGTrace5startEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(v2 + 152) = *(void *)(v2 + 152) & 0xFFFFFFFFFFFFFFFCLL | 1;
  long long v3 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_6;
  }
  int v4 = *(unsigned __int8 *)(v2 + 300);
  DIAGTrace::stateFlagsAsString((DIAGTrace *)v2, __p);
  uint64_t v5 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
  *(_DWORD *)std::string buf = 67109378;
  *(_DWORD *)&uint8_t buf[4] = v4;
  LOWORD(v18) = 2080;
  *(void *)((char *)&v18 + 2) = v5;
  _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Start requested. Enabled = %d; %s", buf, 0x12u);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (!*(unsigned char *)(v2 + 300)) {
      return;
    }
  }
  else
  {
LABEL_6:
    if (!*(unsigned char *)(v2 + 300)) {
      return;
    }
  }
  v14[0] = 0xAAAAAAAAAAAAAAAALL;
  v14[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v14, *(const __CFDictionary **)(a1 + 40));
  memset(__p, 170, sizeof(__p));
  size_t v6 = (const char *)*MEMORY[0x1E4F4C688];
  *(void *)std::string buf = 0;
  long long v18 = 0uLL;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v16, v6);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A62748E0](&v16);
  if (SHIBYTE(v18) < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    size_t v7 = HIBYTE(__p[2]);
  }
  else {
    size_t v7 = (size_t)__p[1];
  }
  if (v7 == strlen((const char *)*MEMORY[0x1E4F4CAE8]))
  {
    uint64_t v9 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
    if (!memcmp(v9, (const void *)*MEMORY[0x1E4F4CAE8], v7))
    {
      uint64_t v10 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1A609F000, v10, OS_LOG_TYPE_DEFAULT, "#I Start requested after baseband booted", buf, 2u);
      }
      DIAGTrace::reinitService_sync((DIAGTrace *)v2, 1);
    }
  }
  long long v11 = *(NSObject **)(a1 + 48);
  long long v13 = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  long long v12 = *(const void **)(a1 + 40);
  if (v12) {
    CFRetain(v12);
  }
  DIAGTrace::start_sync((DIAGTrace *)v2, &v13, v8, 0);
  if (v12) {
    CFRelease(v12);
  }
  if (v11) {
    dispatch_release(v11);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  MEMORY[0x1A6274930](v14);
}

void sub_1A60E1400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1A6274930](&a11);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE48c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  int v4 = *(const void **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE48c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
}

void DIAGTrace::stop(uint64_t a1, NSObject **a2, const void **a3)
{
  uint64_t v5 = *a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN9DIAGTrace4stopEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  void v7[3] = &__block_descriptor_tmp_69;
  v7[4] = a1;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  size_t v6 = *a3;
  CFTypeRef cf = v6;
  if (v6) {
    CFRetain(v6);
  }
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), v5, (uint64_t)v7);
  if (cf) {
    CFRelease(cf);
  }
  if (object) {
    dispatch_release(object);
  }
}

void ___ZN9DIAGTrace4stopEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[4];
  long long v3 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_6;
  }
  int v5 = *(unsigned __int8 *)(v2 + 300);
  DIAGTrace::stateFlagsAsString((DIAGTrace *)v2, __p);
  size_t v6 = v11 >= 0 ? __p : (void **)__p[0];
  *(_DWORD *)std::string buf = 67109378;
  int v13 = v5;
  __int16 v14 = 2080;
  long long v15 = v6;
  _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Stop requested. Enabled = %d; %s", buf, 0x12u);
  if (v11 < 0)
  {
    operator delete(__p[0]);
    *(void *)(v2 + 152) &= ~1uLL;
    if (!*(unsigned char *)(v2 + 300)) {
      return;
    }
  }
  else
  {
LABEL_6:
    *(void *)(v2 + 152) &= ~1uLL;
    if (!*(unsigned char *)(v2 + 300)) {
      return;
    }
  }
  if (*(void *)(v2 + 376))
  {
    size_t v7 = a1[5];
    uint64_t v9 = v7;
    if (v7) {
      dispatch_retain(v7);
    }
    uint64_t v8 = (const void *)a1[6];
    if (v8) {
      CFRetain(v8);
    }
    DIAGTrace::stop_sync((DIAGTrace *)v2, &v9, v4, 0);
    if (v8) {
      CFRelease(v8);
    }
    if (v7) {
      dispatch_release(v7);
    }
  }
}

void sub_1A60E1760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  CFTypeRef result = *(CFTypeRef *)(a2 + 48);
  *(void *)(a1 + 48) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  long long v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_release(v3);
  }
}

void DIAGTrace::abort(uint64_t a1, NSObject **a2, const void **a3)
{
  int v5 = *a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN9DIAGTrace5abortEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  void v7[3] = &__block_descriptor_tmp_72;
  v7[4] = a1;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  size_t v6 = *a3;
  CFTypeRef cf = v6;
  if (v6) {
    CFRetain(v6);
  }
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), v5, (uint64_t)v7);
  if (cf) {
    CFRelease(cf);
  }
  if (object) {
    dispatch_release(object);
  }
}

void ___ZN9DIAGTrace5abortEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_6;
  }
  int v5 = *(unsigned __int8 *)(v2 + 300);
  DIAGTrace::stateFlagsAsString((DIAGTrace *)v2, __p);
  size_t v6 = v11 >= 0 ? __p : (void **)__p[0];
  *(_DWORD *)std::string buf = 67109378;
  int v13 = v5;
  __int16 v14 = 2080;
  long long v15 = v6;
  _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Abort requested. Enabled = %d; %s", buf, 0x12u);
  if (v11 < 0)
  {
    operator delete(__p[0]);
    *(void *)(v2 + 152) |= 2uLL;
    if (!*(unsigned char *)(v2 + 300)) {
      return;
    }
  }
  else
  {
LABEL_6:
    *(void *)(v2 + 152) |= 2uLL;
    if (!*(unsigned char *)(v2 + 300)) {
      return;
    }
  }
  if (*(void *)(v2 + 376))
  {
    size_t v7 = *(NSObject **)(a1 + 40);
    if (v7) {
      dispatch_retain(*(dispatch_object_t *)(a1 + 40));
    }
    CFDictionaryRef v8 = *(const __CFDictionary **)(a1 + 48);
    CFDictionaryRef v9 = v8;
    if (v8) {
      CFRetain(v8);
    }
    DIAGTrace::abort_sync((const __CFDictionary **)v2, v4, &v9);
    if (v8) {
      CFRelease(v8);
    }
    if (v7) {
      dispatch_release(v7);
    }
  }
}

void sub_1A60E1A74(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void DIAGTrace::shutdown(uint64_t a1, NSObject **a2, const void **a3)
{
  int v5 = *a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN9DIAGTrace8shutdownEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  void v7[3] = &__block_descriptor_tmp_75;
  v7[4] = a1;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  size_t v6 = *a3;
  CFTypeRef cf = v6;
  if (v6) {
    CFRetain(v6);
  }
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), v5, (uint64_t)v7);
  if (cf) {
    CFRelease(cf);
  }
  if (object) {
    dispatch_release(object);
  }
}

void ___ZN9DIAGTrace8shutdownEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[4];
  long long v3 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_6;
  }
  int v4 = *(unsigned __int8 *)(v2 + 300);
  DIAGTrace::stateFlagsAsString((DIAGTrace *)v2, __p);
  int v5 = v11 >= 0 ? __p : (void **)__p[0];
  *(_DWORD *)std::string buf = 67109378;
  int v13 = v4;
  __int16 v14 = 2080;
  long long v15 = v5;
  _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Shutting down. Enabled = %d; %s", buf, 0x12u);
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if (!*(unsigned char *)(v2 + 300)) {
      return;
    }
  }
  else
  {
LABEL_6:
    if (!*(unsigned char *)(v2 + 300)) {
      return;
    }
  }
  if (*(void *)(v2 + 376))
  {
    size_t v6 = a1[5];
    CFDictionaryRef v9 = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    size_t v7 = (const void *)a1[6];
    CFDictionaryRef v8 = v7;
    if (v7) {
      CFRetain(v7);
    }
    DIAGTrace::destroyService_sync(v2, &v9, &v8);
    if (v7) {
      CFRelease(v7);
    }
    if (v6) {
      dispatch_release(v6);
    }
  }
}

void sub_1A60E1CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void DIAGTrace::enterLowPower(DIAGTrace *this, group *a2)
{
  gr_name = a2->gr_name;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1174405120;
  uint64_t v4[2] = ___ZN9DIAGTrace13enterLowPowerEN8dispatch5groupE_block_invoke;
  v4[3] = &__block_descriptor_tmp_76_0;
  long long v3 = (uint64_t *)((char *)this + 72);
  v4[4] = this;
  dispatch_object_t object = (dispatch_object_t)gr_name;
  if (gr_name) {
    dispatch_retain((dispatch_object_t)gr_name);
  }
  ctu::SharedSynchronizable<Trace>::execute_wrapped(v3, gr_name, (uint64_t)v4);
  if (object) {
    dispatch_release(object);
  }
}

void ___ZN9DIAGTrace13enterLowPowerEN8dispatch5groupE_block_invoke(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_6;
  }
  int v4 = *(unsigned __int8 *)(v2 + 300);
  DIAGTrace::stateFlagsAsString((DIAGTrace *)v2, &v14.gr_passwd);
  int v5 = SHIBYTE(v14.gr_mem) >= 0 ? &v14.gr_passwd : (char **)v14.gr_passwd;
  *(_DWORD *)std::string buf = 67109378;
  int v16 = v4;
  __int16 v17 = 2080;
  long long v18 = v5;
  _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Enter low-power requested. Enabled = %d; %s", buf, 0x12u);
  if (SHIBYTE(v14.gr_mem) < 0)
  {
    operator delete(v14.gr_passwd);
    if (!*(unsigned char *)(v2 + 300)) {
      return;
    }
  }
  else
  {
LABEL_6:
    if (!*(unsigned char *)(v2 + 300)) {
      return;
    }
  }
  if (*(void *)(v2 + 376))
  {
    if (*(_DWORD *)(v2 + 176))
    {
      size_t v6 = *(char **)(a1 + 40);
      v14.gr_name = v6;
      if (v6) {
        dispatch_retain((dispatch_object_t)v6);
      }
      DIAGTrace::enterLowPower_sync((DIAGTrace *)v2, &v14);
      if (v6) {
        dispatch_release((dispatch_object_t)v6);
      }
    }
    else
    {
      v14.gr_passwd = 0;
      CFMutableDictionaryRef Mutable = (char *)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryRef v9 = Mutable;
      if (Mutable) {
        v14.gr_passwd = Mutable;
      }
      uint64_t v10 = *(NSObject **)(a1 + 40);
      int v13 = v10;
      if (v10) {
        dispatch_retain(v10);
      }
      if (v9 && (CFTypeID v11 = CFGetTypeID(v9), v11 == CFDictionaryGetTypeID()))
      {
        CFRetain(v9);
        long long v12 = v9;
      }
      else
      {
        long long v12 = 0;
      }
      DIAGTrace::stop_sync((DIAGTrace *)v2, &v13, v8, 1);
      if (v12) {
        CFRelease(v12);
      }
      if (v10) {
        dispatch_release(v10);
      }
      if (v9) {
        CFRelease(v9);
      }
    }
  }
}

void sub_1A60E1FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  long long v3 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void __destroy_helper_block_e8_40c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (v1) {
    dispatch_release(v1);
  }
}

void DIAGTrace::exitLowPower(DIAGTrace *this, group *a2)
{
  gr_name = a2->gr_name;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1174405120;
  uint64_t v4[2] = ___ZN9DIAGTrace12exitLowPowerEN8dispatch5groupE_block_invoke;
  v4[3] = &__block_descriptor_tmp_79;
  long long v3 = (uint64_t *)((char *)this + 72);
  v4[4] = this;
  dispatch_object_t object = (dispatch_object_t)gr_name;
  if (gr_name) {
    dispatch_retain((dispatch_object_t)gr_name);
  }
  ctu::SharedSynchronizable<Trace>::execute_wrapped(v3, gr_name, (uint64_t)v4);
  if (object) {
    dispatch_release(object);
  }
}

void ___ZN9DIAGTrace12exitLowPowerEN8dispatch5groupE_block_invoke(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_6;
  }
  int v4 = *(unsigned __int8 *)(v2 + 300);
  DIAGTrace::stateFlagsAsString((DIAGTrace *)v2, &v14.gr_passwd);
  int v5 = SHIBYTE(v14.gr_mem) >= 0 ? &v14.gr_passwd : (char **)v14.gr_passwd;
  *(_DWORD *)std::string buf = 67109378;
  int v16 = v4;
  __int16 v17 = 2080;
  long long v18 = v5;
  _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Exit low-power requested. Enabled = %d; %s", buf, 0x12u);
  if (SHIBYTE(v14.gr_mem) < 0)
  {
    operator delete(v14.gr_passwd);
    if (!*(unsigned char *)(v2 + 300)) {
      return;
    }
  }
  else
  {
LABEL_6:
    if (!*(unsigned char *)(v2 + 300)) {
      return;
    }
  }
  if (*(void *)(v2 + 376))
  {
    if (*(_DWORD *)(v2 + 176))
    {
      size_t v6 = *(char **)(a1 + 40);
      v14.gr_name = v6;
      if (v6) {
        dispatch_retain((dispatch_object_t)v6);
      }
      DIAGTrace::exitLowPower_sync((DIAGTrace *)v2, &v14);
      if (v6) {
        dispatch_release((dispatch_object_t)v6);
      }
    }
    else
    {
      v14.gr_passwd = 0;
      CFMutableDictionaryRef Mutable = (char *)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryRef v9 = Mutable;
      if (Mutable) {
        v14.gr_passwd = Mutable;
      }
      uint64_t v10 = *(NSObject **)(a1 + 40);
      int v13 = v10;
      if (v10) {
        dispatch_retain(v10);
      }
      if (v9 && (CFTypeID v11 = CFGetTypeID(v9), v11 == CFDictionaryGetTypeID()))
      {
        CFRetain(v9);
        long long v12 = v9;
      }
      else
      {
        long long v12 = 0;
      }
      DIAGTrace::start_sync((DIAGTrace *)v2, &v13, v8, 1);
      if (v12) {
        CFRelease(v12);
      }
      if (v10) {
        dispatch_release(v10);
      }
      if (v9) {
        CFRelease(v9);
      }
    }
  }
}

void sub_1A60E22EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void DIAGTrace::snapshot(uint64_t a1, NSObject **a2, const void **a3)
{
  int v5 = *a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN9DIAGTrace8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  void v7[3] = &__block_descriptor_tmp_82_0;
  v7[4] = a1;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  size_t v6 = *a3;
  CFTypeRef cf = v6;
  if (v6) {
    CFRetain(v6);
  }
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), v5, (uint64_t)v7);
  if (cf) {
    CFRelease(cf);
  }
  if (object) {
    dispatch_release(object);
  }
}

void ___ZN9DIAGTrace8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[4];
  long long v3 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_6;
  }
  int v4 = *(unsigned __int8 *)(v2 + 300);
  DIAGTrace::stateFlagsAsString((DIAGTrace *)v2, __p);
  int v5 = v11 >= 0 ? __p : (void **)__p[0];
  *(_DWORD *)std::string buf = 67109378;
  int v13 = v4;
  __int16 v14 = 2080;
  long long v15 = v5;
  _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Snapshot requested. Enabled = %d; %s", buf, 0x12u);
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if (!*(unsigned char *)(v2 + 300)) {
      return;
    }
  }
  else
  {
LABEL_6:
    if (!*(unsigned char *)(v2 + 300)) {
      return;
    }
  }
  if (*(void *)(v2 + 376))
  {
    size_t v6 = a1[5];
    dispatch_object_t v9 = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    CFDictionaryRef v7 = (const __CFDictionary *)a1[6];
    CFDictionaryRef v8 = v7;
    if (v7) {
      CFRetain(v7);
    }
    DIAGTrace::snapshot_sync(v2, &v9, &v8);
    if (v7) {
      CFRelease(v7);
    }
    if (v6) {
      dispatch_release(v6);
    }
  }
}

void sub_1A60E2594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void DIAGTrace::dumpState(uint64_t a1, NSObject **a2, uint64_t a3)
{
  long long v3 = (uint64_t *)(a1 + 72);
  int v4 = *a2;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  v5[2] = ___ZN9DIAGTrace9dumpStateEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
  v5[3] = &__block_descriptor_tmp_83;
  v5[4] = a1;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    std::string __p = *(std::string *)a3;
    ctu::SharedSynchronizable<Trace>::execute_wrapped(v3, v4, (uint64_t)v5);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  ctu::SharedSynchronizable<Trace>::execute_wrapped(v3, v4, (uint64_t)v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_5;
  }
}

void ___ZN9DIAGTrace9dumpStateEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 300))
  {
    long long v3 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 63) < 0) {
        std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
      }
      else {
        std::string v5 = *(std::string *)(a1 + 40);
      }
      DIAGTrace::dumpState_sync(v1, (uint64_t)&v5, 1, 10, __p);
      if (v7 >= 0) {
        int v4 = __p;
      }
      else {
        int v4 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      dispatch_object_t v9 = v4;
      _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
      if ((v7 & 0x80000000) == 0)
      {
        if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
LABEL_13:
        operator delete(v5.__r_.__value_.__l.__data_);
        return;
      }
      operator delete(__p[0]);
      if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_13;
      }
    }
  }
}

void sub_1A60E2800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

BOOL DIAGTrace::setProperty(uint64_t a1, NSObject **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = 0;
  char v20 = &v19;
  uint64_t v21 = 0x2000000000;
  char v22 = 0;
  char v18 = 13;
  strcpy((char *)__p, "BasebandTrace");
  char isSupported = abm::trace::isSupported((uint64_t)__p);
  char v9 = isSupported;
  if (v18 < 0)
  {
    operator delete(__p[0]);
    if (v9) {
      goto LABEL_3;
    }
LABEL_9:
    BOOL v12 = 0;
    goto LABEL_12;
  }
  if ((isSupported & 1) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1174405120;
  v15[2] = ___ZN9DIAGTrace11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke;
  v15[3] = &unk_1EFB09CA0;
  v15[4] = &v19;
  void v15[5] = a1;
  void v15[6] = a3;
  v15[7] = a4;
  uint64_t v10 = *a2;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v23 = v15;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t block[3] = &__block_descriptor_tmp_126;
  void block[4] = a1 + 72;
  void block[5] = &v23;
  char v11 = *(NSObject **)(a1 + 88);
  if (*(void *)(a1 + 96))
  {
    dispatch_async_and_wait(v11, block);
    BOOL v12 = *((unsigned char *)v20 + 24) != 0;
    int v13 = object;
    if (!object) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  dispatch_sync(v11, block);
  BOOL v12 = *((unsigned char *)v20 + 24) != 0;
  int v13 = object;
  if (object) {
LABEL_11:
  }
    dispatch_release(v13);
LABEL_12:
  _Block_object_dispose(&v19, 8);
  return v12;
}

void sub_1A60E2A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void ___ZN9DIAGTrace11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke(uint64_t a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  int v45 = 5;
  uint64_t v2 = *(void *)(a1 + 40);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = DIAGTrace::setProperty_sync(v2, *(char **)(a1 + 48), *(void *)(a1 + 56), &v45);
  long long v3 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_11;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    int v4 = "True";
  }
  else {
    int v4 = "False";
  }
  std::string::size_type v5 = *(void *)(a1 + 48);
  if (*(char *)(v5 + 23) < 0)
  {
    std::string::size_type v5 = *(void *)v5;
    size_t v6 = *(uint64_t **)(a1 + 56);
    if ((*((char *)v6 + 23) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else
  {
    size_t v6 = *(uint64_t **)(a1 + 56);
    if ((*((char *)v6 + 23) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  size_t v6 = (uint64_t *)*v6;
LABEL_7:
  int v7 = v45;
  DIAGTrace::stateFlagsAsString((DIAGTrace *)v2, __p);
  if (v47 >= 0) {
    CFDictionaryRef v8 = __p;
  }
  else {
    CFDictionaryRef v8 = (void **)__p[0];
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
  WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v5;
  HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
  uint64_t v49 = v6;
  __int16 v50 = 1024;
  int v51 = v7;
  __int16 v52 = 2080;
  size_t v53 = v8;
  _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Set property. Success=%s, Key=%s, Value=%s, Action=%d, %s", (uint8_t *)&buf, 0x30u);
  if (v47 < 0)
  {
    operator delete(__p[0]);
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      return;
    }
    goto LABEL_12;
  }
LABEL_11:
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    return;
  }
LABEL_12:
  char v9 = *(uint64_t **)(v2 + 376);
  if (v9)
  {
    uint64_t v10 = *(const void ***)(a1 + 48);
    int v11 = *((char *)v10 + 23);
    if (v11 >= 0) {
      size_t v12 = *((unsigned __int8 *)v10 + 23);
    }
    else {
      size_t v12 = (size_t)v10[1];
    }
    unint64_t v13 = v12 + 3;
    memset(&buf, 170, sizeof(buf));
    if (v12 + 3 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v13 >= 0x17)
    {
      uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17) {
        uint64_t v15 = v13 | 7;
      }
      uint64_t v16 = v15 + 1;
      p_std::string buf = (std::string *)operator new(v15 + 1);
      buf.__r_.__value_.__l.__size_ = v12 + 3;
      buf.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    }
    else
    {
      memset(&buf, 0, sizeof(buf));
      p_std::string buf = &buf;
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = v12 + 3;
      if (!v12) {
        goto LABEL_27;
      }
    }
    if (v11 >= 0) {
      __int16 v17 = v10;
    }
    else {
      __int16 v17 = *v10;
    }
    memmove(p_buf, v17, v12);
LABEL_27:
    *(_DWORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v12) = 2112800;
    uint64_t v18 = *(void *)(a1 + 56);
    int v19 = *(char *)(v18 + 23);
    if (v19 >= 0) {
      char v20 = *(const std::string::value_type **)(a1 + 56);
    }
    else {
      char v20 = *(const std::string::value_type **)v18;
    }
    if (v19 >= 0) {
      std::string::size_type v21 = *(unsigned __int8 *)(v18 + 23);
    }
    else {
      std::string::size_type v21 = *(void *)(v18 + 8);
    }
    char v22 = std::string::append(&buf, v20, v21);
    std::string v44 = *v22;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    diag::Service::pushInfo(v9, 3, (uint64_t)&v44);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v44.__r_.__value_.__l.__data_);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_35;
      }
    }
    else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_35;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
  }
LABEL_35:
  buf.__r_.__value_.__r.__words[0] = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  BOOL v24 = (char **)Mutable;
  if (Mutable) {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
  }
  int v25 = v45;
  if (v45 == 1)
  {
    uint64_t v26 = *(NSObject **)(a1 + 64);
    uint64_t v43 = v26;
    if (v26) {
      dispatch_retain(v26);
    }
    if (v24 && (CFTypeID v27 = CFGetTypeID(v24), v27 == CFDictionaryGetTypeID()))
    {
      v42.gr_meunint64_t m = v24;
      CFRetain(v24);
      size_t v28 = v24;
    }
    else
    {
      size_t v28 = 0;
      v42.gr_meunint64_t m = 0;
    }
    DIAGTrace::destroyService_sync(v2, &v43, (const void **)&v42.gr_mem);
    if (v28) {
      CFRelease(v28);
    }
LABEL_53:
    if (v26) {
      dispatch_release(v26);
    }
  }
  else if ((*(void *)(v2 + 152) & 3) == 1)
  {
    switch(v45)
    {
      case 0:
        DIAGTrace::reinitService_sync((DIAGTrace *)v2, 0);
        uint64_t v26 = *(NSObject **)(a1 + 64);
        *(void *)&v42.gr_gid = v26;
        if (v26) {
          dispatch_retain(v26);
        }
        if (v24 && (CFTypeID v30 = CFGetTypeID(v24), v30 == CFDictionaryGetTypeID()))
        {
          v42.gr_passwd = (char *)v24;
          CFRetain(v24);
          size_t v31 = v24;
        }
        else
        {
          size_t v31 = 0;
          v42.gr_passwd = 0;
        }
        DIAGTrace::start_sync((DIAGTrace *)v2, (NSObject **)&v42.gr_gid, v29, 0);
        if (v31) {
          CFRelease(v31);
        }
        goto LABEL_53;
      case 2:
        uint64_t v26 = *(NSObject **)(a1 + 64);
        v42.gr_name = (char *)v26;
        if (v26) {
          dispatch_retain(v26);
        }
        DIAGTrace::restartService_sync((DIAGTrace *)v2, &v42);
        goto LABEL_53;
      case 3:
        DIAGTrace::pushServiceConfig_sync((DIAGTrace *)v2);
        break;
      case 4:
        uint64_t v33 = *(NSObject **)(a1 + 64);
        size_t v41 = v33;
        if (v33) {
          dispatch_retain(v33);
        }
        if (v24 && (CFTypeID v34 = CFGetTypeID(v24), v34 == CFDictionaryGetTypeID()))
        {
          uint64_t v40 = v24;
          CFRetain(v24);
          BOOL v35 = v24;
        }
        else
        {
          BOOL v35 = 0;
          uint64_t v40 = 0;
        }
        DIAGTrace::destroyService_sync(v2, &v41, (const void **)&v40);
        if (v35) {
          CFRelease(v35);
        }
        if (v33) {
          dispatch_release(v33);
        }
        v37[0] = MEMORY[0x1E4F143A8];
        v37[1] = 1174405120;
        v37[2] = ___ZN9DIAGTrace11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke_87;
        v37[3] = &__block_descriptor_tmp_88;
        CFAllocatorRef v36 = *(NSObject **)(a1 + 64);
        _OWORD v37[4] = v2;
        dispatch_object_t object = v36;
        if (v36) {
          dispatch_retain(v36);
        }
        CFTypeRef cf = v24;
        if (v24) {
          CFRetain(v24);
        }
        dispatch_group_notify(*(dispatch_group_t *)(a1 + 64), *(dispatch_queue_t *)(v2 + 88), v37);
        if (cf) {
          CFRelease(cf);
        }
        if (object) {
          dispatch_release(object);
        }
        break;
      default:
        break;
    }
  }
  else
  {
    int v32 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v25;
      _os_log_impl(&dword_1A609F000, v32, OS_LOG_TYPE_DEFAULT, "#I State is aborted or stopped. Skip service action [%d]", (uint8_t *)__p, 8u);
    }
    int v45 = 5;
  }
  if (v24) {
    CFRelease(v24);
  }
}

void sub_1A60E3034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN9DIAGTrace11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke_87(void *a1)
{
  uint64_t v2 = (DIAGTrace *)a1[4];
  DIAGTrace::reinitService_sync(v2, 0);
  int v4 = a1[5];
  int v7 = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  std::string::size_type v5 = (const void *)a1[6];
  if (v5 && (CFTypeID v6 = CFGetTypeID(v5), v6 == CFDictionaryGetTypeID())) {
    CFRetain(v5);
  }
  else {
    std::string::size_type v5 = 0;
  }
  DIAGTrace::start_sync(v2, &v7, v3, 0);
  if (v5) {
    CFRelease(v5);
  }
  if (v4)
  {
    dispatch_release(v4);
  }
}

void sub_1A60E3234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9) {
    dispatch_release(v9);
  }
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  int v4 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  CFTypeRef result = *(CFTypeRef *)(a2 + 48);
  *(void *)(a1 + 48) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_release(v3);
  }
}

void __copy_helper_block_e8_64c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 64);
  *(void *)(a1 + 64) = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void __destroy_helper_block_e8_64c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 64);
  if (v1) {
    dispatch_release(v1);
  }
}

uint64_t DIAGTrace::getProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = 0;
  char v9 = &v8;
  uint64_t v10 = 0x2000000000;
  char v11 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZN9DIAGTrace11getPropertyERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6__block_invoke;
  void v7[3] = &unk_1E5C46E00;
  v7[4] = &v8;
  void v7[5] = a1;
  void v7[6] = a2;
  v7[7] = a3;
  size_t v12 = v7;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t block[3] = &__block_descriptor_tmp_126;
  void block[4] = a1 + 72;
  void block[5] = &v12;
  uint64_t v4 = a1 + 88;
  uint64_t v3 = *(NSObject **)(a1 + 88);
  if (*(void *)(v4 + 8)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

BOOL ___ZN9DIAGTrace11getPropertyERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6__block_invoke(uint64_t a1)
{
  BOOL result = DIAGTrace::getProperty_sync(*(void *)(a1 + 40), *(char **)(a1 + 48), *(void *)(a1 + 56));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t DIAGTrace::getBasebandOperatingMode(DIAGTrace *this)
{
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  if (*((char *)this + 127) < 0) {
    std::string::__init_copy_ctor_external(&v26, *((const std::string::value_type **)this + 13), *((void *)this + 14));
  }
  else {
    std::string v26 = *(std::string *)((char *)this + 104);
  }
  abm::client::CreateManager();
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  xpc_object_t v1 = xpc_dictionary_create(0, 0, 0);
  uint64_t v2 = MEMORY[0x1E4F14590];
  if (v1 || (xpc_object_t v1 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v1) == v2)
    {
      xpc_retain(v1);
      xpc_object_t v3 = v1;
    }
    else
    {
      xpc_object_t v3 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v1 = 0;
  }
  xpc_release(v1);
  xpc_object_t v28 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v28 = xpc_null_create();
  xpc_object_t v4 = xpc_int64_create(1500);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E4F4C0F8], v4);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  unint64_t v24 = v29;
  int v25 = (std::__shared_weak_count *)v30;
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  CFTypeID v6 = (const void *)*MEMORY[0x1E4F4D058];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4D058]);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    char v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v23 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_23;
  }
  HIBYTE(v23) = v7;
  char v9 = __dst;
  if (v7) {
LABEL_23:
  }
    memmove(v9, v6, (size_t)v8);
  *((unsigned char *)v8 + (void)v9) = 0;
  abm::client::PerformCommand();
  int data = (int)v26.__r_.__value_.__l.__data_;
  std::string::size_type size = (void *)v26.__r_.__value_.__l.__size_;
  int v14 = v27;
  char v27 = 0;
  v26.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(v23) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v15 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    xpc_object_t v16 = v28;
    if (v28) {
      goto LABEL_32;
    }
  }
  else
  {
    xpc_object_t v16 = v28;
    if (v28) {
      goto LABEL_32;
    }
  }
  xpc_object_t v16 = xpc_null_create();
  if (!v16)
  {
    xpc_object_t v17 = xpc_null_create();
    xpc_object_t v16 = 0;
    goto LABEL_35;
  }
LABEL_32:
  if (MEMORY[0x1A6275E60](v16) == v2)
  {
    xpc_retain(v16);
    xpc_object_t v17 = v16;
  }
  else
  {
    xpc_object_t v17 = xpc_null_create();
  }
LABEL_35:
  xpc_release(v16);
  if (!data && MEMORY[0x1A6275E60](v17) == v2)
  {
    xpc_object_t value = xpc_dictionary_get_value(v17, (const char *)*MEMORY[0x1E4F4CB50]);
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
    if (value) {
      xpc_retain(value);
    }
    else {
      v26.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    unsigned __int8 v18 = xpc::dyn_cast_or_default();
    xpc_release(v26.__r_.__value_.__l.__data_);
  }
  else
  {
    unsigned __int8 v18 = 8;
  }
  xpc_release(v17);
  xpc_release(v3);
  if (v14 < 0) {
    operator delete(size);
  }
  int v19 = (std::__shared_weak_count *)v30;
  if (v30 && !atomic_fetch_add((atomic_ullong *volatile)(v30 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  return v18;
}

void sub_1A60E3800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, xpc_object_t object, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  xpc_release(object);
  xpc_release(v25);
  xpc_release(v23);
  if (v26 < 0) {
    operator delete(v24);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v27 - 80);
  _Unwind_Resume(a1);
}

void ___ZN9DIAGTrace19stallDetection_syncEb_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  CFTypeID v6 = std::__shared_weak_count::lock(v3);
  int v58 = v6;
  if (!v6) {
    return;
  }
  size_t v7 = v6;
  if (!a1[5]) {
    goto LABEL_83;
  }
  int BasebandOperatingMode = DIAGTrace::getBasebandOperatingMode((DIAGTrace *)v5);
  char v9 = (const char **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    uint64_t v10 = *v9;
    if (strcasecmp(*v9, "false") && strcasecmp(v10, "off") && strcasecmp(v10, "no"))
    {
      if (strcasecmp(v10, "true")
        && strcasecmp(v10, "on")
        && strcasecmp(v10, "yes")
        && strcasecmp(v10, "full")
        && strcasecmp(v10, "streaming"))
      {
        if (!strcasecmp(v10, "lite")) {
          goto LABEL_38;
        }
LABEL_24:
        if (!strcasecmp(v10, "background")) {
          goto LABEL_38;
        }
        *(void *)size_t __idx = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v11 = std::stol((const std::string *)(a2 + 32), (size_t *)__idx, 0);
        uint64_t v12 = *(unsigned __int8 *)(a2 + 55);
        if ((v12 & 0x80u) != 0) {
          uint64_t v12 = *(void *)(a2 + 40);
        }
        if (*(void *)__idx != v12 || (uint64_t v13 = v11, v11 < 0))
        {
          int v14 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)size_t __idx = 0;
            _os_log_error_impl(&dword_1A609F000, v14, OS_LOG_TYPE_ERROR, "DIAG: Failed to convert the count string to integer", __idx, 2u);
          }
          goto LABEL_83;
        }
LABEL_34:
        uint64_t v15 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_39;
        }
        goto LABEL_35;
      }
LABEL_33:
      uint64_t v13 = 1;
      goto LABEL_34;
    }
  }
  else if (strcasecmp((const char *)(a2 + 32), "false") {
         && strcasecmp((const char *)(a2 + 32), "off")
  }
         && strcasecmp((const char *)(a2 + 32), "no"))
  {
    if (strcasecmp((const char *)(a2 + 32), "true")
      && strcasecmp((const char *)(a2 + 32), "on")
      && strcasecmp((const char *)(a2 + 32), "yes")
      && strcasecmp((const char *)(a2 + 32), "full")
      && strcasecmp((const char *)(a2 + 32), "streaming"))
    {
      uint64_t v10 = (const char *)(a2 + 32);
      if (!strcasecmp((const char *)(a2 + 32), "lite"))
      {
LABEL_38:
        uint64_t v13 = 2;
        uint64_t v15 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_39;
        }
        goto LABEL_35;
      }
      goto LABEL_24;
    }
    goto LABEL_33;
  }
  uint64_t v13 = 0;
  uint64_t v15 = *(NSObject **)(v5 + 40);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
LABEL_39:
    *(_DWORD *)size_t __idx = 134217984;
    *(void *)&__idx[4] = v13;
    _os_log_debug_impl(&dword_1A609F000, v15, OS_LOG_TYPE_DEBUG, "#D DIAG: Entry count is %llu", __idx, 0xCu);
    if (!v13) {
      goto LABEL_40;
    }
LABEL_36:
    *(_DWORD *)(v5 + 296) = *(_DWORD *)(v5 + 292);
    xpc_object_t v16 = *(NSObject **)(v5 + 40);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_41;
    }
    *(_WORD *)size_t __idx = 0;
    xpc_object_t v17 = "#D DIAG: Resetting retry counter";
    unsigned __int8 v18 = v16;
    uint32_t v19 = 2;
    goto LABEL_92;
  }
LABEL_35:
  if (v13) {
    goto LABEL_36;
  }
LABEL_40:
  int v20 = *(_DWORD *)(v5 + 296) - 1;
  *(_DWORD *)(v5 + 296) = v20;
  std::string::size_type v21 = *(NSObject **)(v5 + 40);
  if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
LABEL_41:
    if (!*(_DWORD *)(v5 + 296)) {
      goto LABEL_42;
    }
LABEL_83:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  *(_DWORD *)size_t __idx = 67109120;
  *(_DWORD *)&__idx[4] = v20;
  xpc_object_t v17 = "#D DIAG: Stall retries left: %u";
  unsigned __int8 v18 = v21;
  uint32_t v19 = 8;
LABEL_92:
  _os_log_debug_impl(&dword_1A609F000, v18, OS_LOG_TYPE_DEBUG, v17, __idx, v19);
  if (*(_DWORD *)(v5 + 296)) {
    goto LABEL_83;
  }
LABEL_42:
  memset(&__dst, 170, sizeof(__dst));
  uint64_t v22 = *(int *)(v5 + 172);
  if (v22 > 2) {
    unint64_t v23 = "Unknown";
  }
  else {
    unint64_t v23 = off_1E5C46EA0[v22];
  }
  size_t v24 = strlen(v23);
  if (v24 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v25 = v24;
  if (v24 >= 0x17)
  {
    uint64_t v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17) {
      uint64_t v27 = v24 | 7;
    }
    uint64_t v28 = v27 + 1;
    p_dst = (std::string *)operator new(v27 + 1);
    __dst.__r_.__value_.__l.__size_ = v25;
    __dst.__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_52;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v24;
  p_dst = &__dst;
  if (v24) {
LABEL_52:
  }
    memcpy(p_dst, v23, v25);
  p_dst->__r_.__value_.__s.__data_[v25] = 0;
  unint64_t v29 = *(NSObject **)(v5 + 40);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    int v30 = *(_DWORD *)(v5 + 292);
    *(_DWORD *)size_t __idx = 136315394;
    *(void *)&__idx[4] = "DIAG: stall detected";
    *(_WORD *)&__idx[12] = 1024;
    *(_DWORD *)&__idx[14] = v30;
    _os_log_impl(&dword_1A609F000, v29, OS_LOG_TYPE_DEFAULT, "#I %s after %u minute(s)", __idx, 0x12u);
  }
  *(_DWORD *)(v5 + 296) = *(_DWORD *)(v5 + 292);
  if (BasebandOperatingMode == 1)
  {
    size_t v31 = *(NSObject **)(v5 + 40);
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_80;
    }
    int v32 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v32 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)size_t __idx = 136315138;
    *(void *)&__idx[4] = v32;
    uint64_t v33 = "#I DIAG: Forgoing stall recovery action (%s) because modem is in low power mode";
    CFTypeID v34 = v31;
    uint32_t v35 = 12;
LABEL_79:
    _os_log_impl(&dword_1A609F000, v34, OS_LOG_TYPE_DEFAULT, v33, __idx, v35);
    goto LABEL_80;
  }
  CFAllocatorRef v36 = *(uint64_t **)(v5 + 376);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v55, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else {
    std::string v55 = __dst;
  }
  diag::Service::pushInfo(v36, 11, (uint64_t)&v55);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  int v37 = *(_DWORD *)(v5 + 172);
  if (v37 == 1)
  {
    *(void *)&long long v40 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v63 = v40;
    long long v64 = v40;
    long long v61 = v40;
    long long v62 = v40;
    *(_OWORD *)&__idx[16] = v40;
    long long v60 = v40;
    *(_OWORD *)size_t __idx = v40;
    std::string::basic_string[abi:ne180100]<0>(v53, (char *)*MEMORY[0x1E4F4C6E8]);
    std::string::basic_string[abi:ne180100]<0>(v51, (char *)*MEMORY[0x1E4F4CF30]);
    std::string::basic_string[abi:ne180100]<0>(v49, "DIAG: stall detected");
    Timestamp::Timestamp((Timestamp *)v45);
    Timestamp::asString((uint64_t)v45, 0, 9, v47);
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_1A61FC72E);
    ResetInfo::ResetInfo((std::string *)__idx, (long long *)v53, (long long *)v51, (long long *)v49, (uint64_t)v47, 7, (long long *)__p);
    if (v44 < 0)
    {
      operator delete(__p[0]);
      if ((v48 & 0x80000000) == 0)
      {
LABEL_73:
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v45, v46);
        if ((v50 & 0x80000000) == 0) {
          goto LABEL_74;
        }
        goto LABEL_88;
      }
    }
    else if ((v48 & 0x80000000) == 0)
    {
      goto LABEL_73;
    }
    operator delete(v47[0]);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v45, v46);
    if ((v50 & 0x80000000) == 0)
    {
LABEL_74:
      if ((v52 & 0x80000000) == 0) {
        goto LABEL_75;
      }
      goto LABEL_89;
    }
LABEL_88:
    operator delete(v49[0]);
    if ((v52 & 0x80000000) == 0)
    {
LABEL_75:
      if ((v54 & 0x80000000) == 0)
      {
LABEL_76:
        ResetInfo::ResetInfo((std::string *)&v42.gr_passwd, (long long *)__idx);
        DIAGTrace::commandResetModem_sync((void *)v5, (long long *)&v42.gr_passwd);
        ResetInfo::~ResetInfo((void **)&v42.gr_passwd);
        ResetInfo::~ResetInfo((void **)__idx);
        goto LABEL_80;
      }
LABEL_90:
      operator delete(v53[0]);
      goto LABEL_76;
    }
LABEL_89:
    operator delete(v51[0]);
    if ((v54 & 0x80000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_90;
  }
  if (v37 != 2)
  {
    size_t v41 = *(NSObject **)(v5 + 40);
    if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_80;
    }
    *(_WORD *)size_t __idx = 0;
    uint64_t v33 = "#I No action for DIAG stall detected";
    CFTypeID v34 = v41;
    uint32_t v35 = 2;
    goto LABEL_79;
  }
  uint64_t v38 = (char *)dispatch_group_create();
  char v39 = v38;
  v42.gr_name = v38;
  if (v38) {
    dispatch_retain((dispatch_object_t)v38);
  }
  DIAGTrace::restartService_sync((DIAGTrace *)v5, &v42);
  if (v39)
  {
    dispatch_release(v39);
    dispatch_release(v39);
  }
LABEL_80:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  size_t v7 = v58;
  if (v58) {
    goto LABEL_83;
  }
}

void sub_1A60E40D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1A60E3B24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void DIAGTrace::getSettingPrefix(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 0xFAAAAAAAAAAAAAALL;
  strcpy((char *)a1, "BasebandTrace::");
}

void std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void ResetInfo::ResetInfo(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    uint64_t v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    uint64_t v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(long long *)((char *)a2 + 24);
      v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  std::string::size_type v8 = *((void *)a2 + 9);
  LODWORD(this[3].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 20);
  this[3].__r_.__value_.__r.__words[0] = v8;
  char v9 = (std::string *)((char *)this + 88);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v10 = *(long long *)((char *)a2 + 88);
    this[4].__r_.__value_.__l.__size_ = *((void *)a2 + 13);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1A60E43F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void *std::shared_ptr<DIAGTrace>::shared_ptr[abi:ne180100]<DIAGTrace,std::shared_ptr<DIAGTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<DIAGTrace>(DIAGTrace*)::{lambda(DIAGTrace*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB09D28;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  long long v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1A60E4580(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<DIAGTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<DIAGTrace>(DIAGTrace*)::{lambda(DIAGTrace*)#1}::operator() const(DIAGTrace*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1A60E45A8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<DIAGTrace *,std::shared_ptr<DIAGTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<DIAGTrace>(DIAGTrace*)::{lambda(DIAGTrace *)#1},std::allocator<DIAGTrace>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<DIAGTrace *,std::shared_ptr<DIAGTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<DIAGTrace>(DIAGTrace*)::{lambda(DIAGTrace *)#1},std::allocator<DIAGTrace>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<DIAGTrace *,std::shared_ptr<DIAGTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<DIAGTrace>(DIAGTrace*)::{lambda(DIAGTrace *)#1},std::allocator<DIAGTrace>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI9DIAGTraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI9DIAGTraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI9DIAGTraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI9DIAGTraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<DIAGTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<DIAGTrace>(DIAGTrace*)::{lambda(DIAGTrace*)#1}::operator() const(DIAGTrace*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void std::__shared_ptr_pointer<diag::Service *,std::shared_ptr<diag::Service>::__shared_ptr_default_delete<diag::Service,diag::Service>,std::allocator<diag::Service>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<diag::Service *,std::shared_ptr<diag::Service>::__shared_ptr_default_delete<diag::Service,diag::Service>,std::allocator<diag::Service>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count ***)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = v1[1];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      unint64_t v3 = v1;
    }
    else
    {
      unint64_t v3 = v1;
    }
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<diag::Service *,std::shared_ptr<diag::Service>::__shared_ptr_default_delete<diag::Service,diag::Service>,std::allocator<diag::Service>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001A61F782BLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001A61F782BLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001A61F782BLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001A61F782BLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ctu::cf::update<char const*,BOOL>(__CFDictionary *a1, const __CFString **a2, int a3, uint64_t a4, const __CFAllocator *a5)
{
  key = 0;
  ctu::cf::convert_copy((ctu::cf *)&key, a2, (const char *)0x8000100, a4, a5);
  long long v7 = key;
  std::string::size_type v8 = (void **)MEMORY[0x1E4F1CFD0];
  if (!a3) {
    std::string::size_type v8 = (void **)MEMORY[0x1E4F1CFC8];
  }
  char v9 = *v8;
  key = *v8;
  if (v7) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  uint64_t v11 = !v10;
  if (v10)
  {
    if (!v9) {
      goto LABEL_13;
    }
  }
  else
  {
    CFDictionarySetValue(a1, v7, v9);
  }
  CFRelease(v9);
LABEL_13:
  if (v7) {
    CFRelease(v7);
  }
  return v11;
}

void sub_1A60E48C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t ctu::cf::update<char const*,int>(__CFDictionary *a1, const __CFString **a2, int a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  CFNumberRef v14 = 0;
  ctu::cf::convert_copy((ctu::cf *)&v14, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  CFNumberRef v8 = v14;
  int valuePtr = a3;
  CFNumberRef v9 = CFNumberCreate(a4, kCFNumberIntType, &valuePtr);
  CFNumberRef v10 = v9;
  CFNumberRef v14 = v9;
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  uint64_t v12 = !v11;
  if (v11)
  {
    if (!v9) {
      goto LABEL_11;
    }
  }
  else
  {
    CFDictionarySetValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_11:
  if (v8) {
    CFRelease(v8);
  }
  return v12;
}

void sub_1A60E49CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1A60E49F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::update<char const*,std::string>(__CFDictionary *a1, const __CFString **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  xpc_object_t value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  long long v6 = value;
  xpc_object_t value = 0;
  ctu::cf::convert_copy();
  long long v7 = value;
  if (v6) {
    BOOL v8 = value == 0;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = !v8;
  if (v8)
  {
    if (!value) {
      goto LABEL_11;
    }
  }
  else
  {
    CFDictionarySetValue(a1, v6, value);
  }
  CFRelease(v7);
LABEL_11:
  if (v6) {
    CFRelease(v6);
  }
  return v9;
}

void sub_1A60E4AB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1A60E4ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::update<char const*,unsigned int>(__CFDictionary *a1, const __CFString **a2, unsigned int a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  unint64_t valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  BOOL v8 = (const void *)valuePtr;
  unint64_t valuePtr = a3;
  CFNumberRef v9 = CFNumberCreate(a4, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v10 = v9;
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  uint64_t v12 = !v11;
  if (v11)
  {
    if (!v9) {
      goto LABEL_11;
    }
  }
  else
  {
    CFDictionarySetValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_11:
  if (v8) {
    CFRelease(v8);
  }
  return v12;
}

void sub_1A60E4BA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1A60E4BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<Trace>::execute_wrapped(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  long long v4 = (std::__shared_weak_count *)a1[1];
  if (!v4 || (uint64_t v7 = *a1, (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFNumberRef v9 = v8;
  CFNumberRef v10 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE15execute_wrappedEP16dispatch_group_sU13block_pointerFvvE_block_invoke;
  uint64_t block[3] = &unk_1EFB09DC0;
  void block[5] = v7;
  CFNumberRef v14 = v8;
  p_shared_owners = &v8->__shared_owners_;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a3;
  dispatch_group_async(a2, v10, block);
  uint64_t v12 = v14;
  if (!v14 || atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI5TraceE15execute_wrappedEP16dispatch_group_sU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__110shared_ptrIK5TraceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__110shared_ptrIK5TraceEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t _GLOBAL__sub_I_DIAGTrace_cpp()
{
  uint64_t result = ETLDIAGLoggingGetDefaultView();
  dword_1EB5EE884 = result;
  return result;
}

uint64_t abm::tailspin::dumpOutputWithOptions_sync(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  long long v6 = [MEMORY[0x1E4F1CA60] dictionary];
  if (qword_1EB5EE8A8 == -1)
  {
    if (off_1EB5EE8A0) {
      goto LABEL_3;
    }
LABEL_45:
    unsigned __int8 v18 = GetOsLogContext()[1];
    uint64_t v19 = 0;
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_49;
    }
    LOWORD(info[0].numer) = 0;
    int v20 = "TailspinHelper: unable to link tailspin";
    goto LABEL_47;
  }
  dispatch_once(&qword_1EB5EE8A8, &__block_literal_global);
  if (!off_1EB5EE8A0) {
    goto LABEL_45;
  }
LABEL_3:
  if (*((char *)a2 + 23) < 0)
  {
    if (!a2[1]) {
      goto LABEL_9;
    }
    a2 = (uint64_t *)*a2;
    goto LABEL_8;
  }
  if (*((unsigned char *)a2 + 23))
  {
LABEL_8:
    uint64_t v7 = [NSString stringWithUTF8String:a2];
    [v6 setObject:v7 forKeyedSubscript:_MergedGlobals_5];
  }
LABEL_9:
  if (a3 >= 1)
  {
    info[0] = 0;
    if (mach_timebase_info(info))
    {
      BOOL v8 = GetOsLogContext()[1];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEFAULT, "TailspinHelper: unable to initialize timebase", buf, 2u);
      }
    }
    else
    {
      CFNumberRef v9 = [NSNumber numberWithUnsignedLongLong:mach_absolute_time() - 1000000000 * info[0].denom * (unint64_t)a3 / info[0].numer];
      [v6 setObject:v9 forKeyedSubscript:qword_1EB5EE890];

      [v6 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:qword_1EB5EE898];
    }
  }
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8))
    {
      a1 = *(void *)a1;
      goto LABEL_20;
    }
  }
  else if (*(unsigned char *)(a1 + 23))
  {
    goto LABEL_20;
  }
  id v10 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  [v10 setDateStyle:1];
  [v10 setDateFormat:@"yyyy-MM-dd-HH-mm-ss-SSS"];
  BOOL v11 = NSString;
  uint64_t v12 = [MEMORY[0x1E4F1C9C8] date];
  uint64_t v13 = [v10 stringFromDate:v12];
  id v14 = [v11 stringWithFormat:@"log-bb-%@.tailspin", v13];
  a1 = [v14 UTF8String];

LABEL_20:
  mode_t v15 = umask(0);
  uint64_t v16 = open((const char *)a1, 1538, 432);
  umask(v15);
  if (v16 != -1)
  {
    if (fchown(v16, 0, 0x50u))
    {
      xpc_object_t v17 = GetOsLogContext()[1];
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(info[0].numer) = 0;
        _os_log_impl(&dword_1A609F000, v17, OS_LOG_TYPE_DEFAULT, "TailspinHelper: unable to change file ownership of tailspin file", (uint8_t *)info, 2u);
      }
      close(v16);
      goto LABEL_48;
    }
    if (off_1EB5EE8A0(v16, v6))
    {
      gid_t v33 = -1431655766;
      uid_t v34 = -1431655766;
      if (!support::fs::getUidGid(1, &v34, &v33))
      {
LABEL_40:
        uint64_t v27 = GetOsLogContext()[1];
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          char v30 = 9;
          strcpy((char *)info, "_wireless");
          *(_DWORD *)std::string buf = 136315394;
          CFAllocatorRef v36 = info;
          __int16 v37 = 2080;
          uint64_t v38 = a1;
          _os_log_impl(&dword_1A609F000, v27, OS_LOG_TYPE_DEFAULT, "Failed to update to %s - %s", buf, 0x16u);
          if (v30 < 0) {
            operator delete(*(void **)info);
          }
        }
LABEL_43:
        uint64_t v19 = 1;
        goto LABEL_49;
      }
      size_t v21 = strlen((const char *)a1);
      if (v21 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v22 = (void *)v21;
      if (v21 >= 0x17)
      {
        uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17) {
          uint64_t v24 = v21 | 7;
        }
        uint64_t v25 = v24 + 1;
        unint64_t v23 = (void **)operator new(v24 + 1);
        __dst[1] = v22;
        unint64_t v32 = v25 | 0x8000000000000000;
        __dst[0] = v23;
      }
      else
      {
        HIBYTE(v32) = v21;
        unint64_t v23 = __dst;
        if (!v21)
        {
LABEL_37:
          *((unsigned char *)v22 + (void)v23) = 0;
          char updated = support::fs::updateOwner((const char *)__dst, v34, v33);
          if (SHIBYTE(v32) < 0) {
            operator delete(__dst[0]);
          }
          if (updated) {
            goto LABEL_43;
          }
          goto LABEL_40;
        }
      }
      memmove(v23, (const void *)a1, (size_t)v22);
      goto LABEL_37;
    }
LABEL_48:
    uint64_t v19 = 0;
    goto LABEL_49;
  }
  unsigned __int8 v18 = GetOsLogContext()[1];
  uint64_t v19 = 0;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(info[0].numer) = 0;
    int v20 = "TailspinHelper: unable to create tailspin file";
LABEL_47:
    _os_log_impl(&dword_1A609F000, v18, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)info, 2u);
    goto LABEL_48;
  }
LABEL_49:

  return v19;
}

void sub_1A60E5320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ___ZL21sLinkTailspinIfNeededv_block_invoke()
{
  uint64_t v0 = dlopen("/usr/lib/libtailspin.dylib", 1);
  qword_1EB5EE8B0 = (uint64_t)v0;
  if (v0)
  {
    off_1EB5EE8A0 = dlsym(v0, "tailspin_dump_output_with_options_sync");
    uint64_t v1 = (id *)dlsym((void *)qword_1EB5EE8B0, "TSPDumpOptions_ReasonString");
    objc_storeStrong((id *)&_MergedGlobals_5, *v1);
    uint64_t v2 = (id *)dlsym((void *)qword_1EB5EE8B0, "TSPDumpOptions_MinTimestamp");
    objc_storeStrong((id *)&qword_1EB5EE890, *v2);
    uint64_t v3 = *(void **)dlsym((void *)qword_1EB5EE8B0, "TSPDumpOptions_NoSymbolicate");
    objc_storeStrong((id *)&qword_1EB5EE898, v3);
  }
}

void abm::HelperServerInternal::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  long long v4 = operator new(0xB0uLL);
  uint64_t v5 = (uint64_t)v4;
  long long v6 = (std::__shared_weak_count *)a1[1];
  uint64_t v8 = *a1;
  CFNumberRef v9 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  abm::HelperServerInternal::HelperServerInternal((uint64_t)v4, &v8);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<abm::HelperServerInternal>::shared_ptr[abi:ne180100]<abm::HelperServerInternal,std::shared_ptr<abm::HelperServerInternal> ctu::SharedSynchronizable<abm::HelperServerInternal>::make_shared_ptr<abm::HelperServerInternal>(abm::HelperServerInternal*)::{lambda(abm::HelperServerInternal*)#1},void>(a2, v5);
  ctu::Loggable<abm::HelperServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2);
  uint64_t v7 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  abm::HelperServerInternal::init((abm::HelperServerInternal *)*a2);
}

void sub_1A60E5560(_Unwind_Exception *a1)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1A60E5574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A60E5590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A60E55A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10 = v9;
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v10);
  _Unwind_Resume(a1);
}

void abm::HelperServerInternal::init(abm::HelperServerInternal *this)
{
  uint64_t v5 = *((void *)this + 9);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  long long v4 = (char *)this + 72;
  if (!v3 || (long long v6 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN3abm20HelperServerInternal4initEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_10_0;
  void v11[4] = this;
  v11[5] = v5;
  uint64_t v12 = v7;
  uint64_t v13 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  uint64_t block[3] = &__block_descriptor_tmp_42;
  void block[4] = v4;
  void block[5] = &v13;
  uint64_t v9 = *((void *)this + 11);
  if (!*((void *)this + 12))
  {
    dispatch_sync(v9, block);
    id v10 = v12;
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_async_and_wait(v9, block);
  id v10 = v12;
  if (v12) {
LABEL_7:
  }
    std::__shared_weak_count::__release_weak(v10);
LABEL_8:
  std::__shared_weak_count::__release_weak(v7);
}

uint64_t abm::HelperServerInternal::HelperServerInternal(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EFB09E20;
  Name = abm::HelperServerInternal::getName((abm::HelperServerInternal *)a1);
  if (byte_1EB5EE8D7 >= 0) {
    uint64_t v5 = (const char *)&xmmword_1EB5EE8C0;
  }
  else {
    uint64_t v5 = (const char *)xmmword_1EB5EE8C0;
  }
  abm::HelperServerInternal::getName((abm::HelperServerInternal *)Name);
  if (byte_1EB5EE8D7 >= 0) {
    long long v6 = (const char *)&xmmword_1EB5EE8C0;
  }
  else {
    long long v6 = (const char *)xmmword_1EB5EE8C0;
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v17, v6, "server");
  uint64_t v7 = dispatch_queue_create(v5, 0);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v7;
  if (v7)
  {
    uint64_t v8 = v7;
    dispatch_retain(v7);
    *(void *)(a1 + 96) = 0;
    dispatch_release(v8);
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = &unk_1EFB09FF0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(void *)(a1 + 8) = &unk_1EFB08838;
  *(void *)(a1 + 56) = *a2;
  uint64_t v9 = a2[1];
  *(void *)(a1 + 64) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v18);
  *(void *)a1 = &unk_1EFB0A080;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v17);
  *(void *)a1 = &unk_1EFB09E20;
  uid_t v10 = getuid();
  abm::helper::getUserConfig(v10, (xpc_object_t *)(a1 + 104));
  *(void *)(a1 + 112) = *a2;
  uint64_t v11 = a2[1];
  *(void *)(a1 + 120) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = a1 + 152;
  if (*a2)
  {
    uint64_t v12 = (std::__shared_weak_count *)a2[1];
    uint64_t v15 = *a2;
    uint64_t v16 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    uint64_t block[3] = &__block_descriptor_tmp_0;
    void block[4] = &v15;
    if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      uint64_t v13 = v16;
      if (!v16) {
        return a1;
      }
    }
    else
    {
      dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
      uint64_t v13 = v16;
      if (!v16) {
        return a1;
      }
    }
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a1;
}

void sub_1A60E59EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::~SharedSynchronizable(v4);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void sub_1A60E5A18(_Unwind_Exception *a1)
{
  ctu::SharedLoggable<abm::HelperServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

long long *abm::HelperServerInternal::getName(abm::HelperServerInternal *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_6, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&_MergedGlobals_6))
  {
    return &xmmword_1EB5EE8C0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "com.apple.abm.helper");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(".", &v6, &__p);
  uid_t v2 = getuid();
  uint64_t v3 = "mobile";
  long long v4 = "";
  if (v2 == 25) {
    long long v4 = "wireless";
  }
  if (v2 != 501) {
    uint64_t v3 = v4;
  }
  if (v2) {
    uint64_t v5 = (char *)v3;
  }
  else {
    uint64_t v5 = "root";
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, &__p, (std::string *)&xmmword_1EB5EE8C0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  __cxa_guard_release(&_MergedGlobals_6);
  return &xmmword_1EB5EE8C0;
}

void sub_1A60E5B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a14 & 0x80000000) == 0)
  {
    __cxa_guard_abort(&_MergedGlobals_6);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  __cxa_guard_abort(&_MergedGlobals_6);
  _Unwind_Resume(a1);
}

void *ctu::SharedLoggable<abm::HelperServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1EFB09FF0;
  MEMORY[0x1A6274710](a1 + 1);
  uid_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1EFB09FF0;
  MEMORY[0x1A6274710](a1 + 1);
  uid_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void abm::HelperServerInternal::~HelperServerInternal(abm::HelperServerInternal *this)
{
  *(void *)this = &unk_1EFB09E20;
  std::__tree<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::__map_value_compare<abm::helper::TaskID,std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::less<abm::helper::TaskID>,true>,std::allocator<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>>>::destroy(*((void **)this + 19));
  uid_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 13) = 0;
  *(void *)this = &unk_1EFB09FF0;
  MEMORY[0x1A6274710]((char *)this + 8);
  long long v4 = *((void *)this + 12);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *((void *)this + 11);
  if (v5) {
    dispatch_release(v5);
  }
  std::string v6 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

{
  void *v1;
  uint64_t vars8;

  abm::HelperServerInternal::~HelperServerInternal(this);

  operator delete(v1);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  size_t v6 = strlen(__s);
  uint64_t v7 = (__n128 *)std::string::append(a2, __s, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void ___ZN3abm20HelperServerInternal4initEv_block_invoke(void *a1)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[4];
  if (MEMORY[0x1A6275E60](*(void *)(v2 + 104)) != MEMORY[0x1E4F14590])
  {
    uint64_t v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = getuid();
      _os_log_error_impl(&dword_1A609F000, v3, OS_LOG_TYPE_ERROR, "XPC config is invalid for user: %d", buf, 8u);
    }
    return;
  }
  *(void *)(v2 + 168) = CFRunLoopGetCurrent();
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 104), "UserID");
  *(void *)std::string buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)std::string buf = xpc_null_create();
  }
  int v5 = xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)buf);
  if (v5 && v5 != 501 && v5 != 25) {
    return;
  }
  memset(v110, 170, sizeof(v110));
  abm::helper::getTasksForUser(v5, (char **)v110);
  size_t v6 = v110[0];
  if (v110[0] == v110[1])
  {
    if (!v110[0]) {
      return;
    }
    goto LABEL_159;
  }
  unint64_t v118 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v117[7] = v7;
  v117[8] = v7;
  v117[5] = v7;
  v117[6] = v7;
  v117[3] = v7;
  v117[4] = v7;
  v117[1] = v7;
  v117[2] = v7;
  long long v116 = v7;
  v117[0] = v7;
  *(_OWORD *)std::string __p = v7;
  long long v115 = v7;
  v113[2] = v7;
  v113[3] = v7;
  v113[0] = v7;
  v113[1] = v7;
  *(_OWORD *)std::string buf = v7;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
  uint64_t v8 = v110[0];
  for (int i = v110[1]; v8 != i; ++v8)
  {
    unsigned int v10 = *v8 - 1;
    uint64_t v11 = "invalid";
    if (v10 <= 9) {
      uint64_t v11 = off_1E5C46F60[v10];
    }
    size_t v12 = strlen(v11);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" ", 1);
  }
  id v14 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str[abi:ne180100](buf, &block);
    unsigned __int8 v100 = SHIBYTE(v124) >= 0 ? &block : (long long *)block;
    LODWORD(v119) = 136315138;
    *(void *)((char *)&v119 + 4) = v100;
    _os_log_debug_impl(&dword_1A609F000, v14, OS_LOG_TYPE_DEBUG, "#D Available tasks: %s", (uint8_t *)&v119, 0xCu);
    if (SHIBYTE(v124) < 0) {
      operator delete((void *)block);
    }
  }
  uint64_t v15 = *(void **)(v2 + 104);
  xpc_object_t v109 = v15;
  if (v15)
  {
    xpc_retain(v15);
    uint64_t v107 = *(void *)(v2 + 112);
    uint64_t v16 = *(std::__shared_weak_count **)(v2 + 120);
    std::string v108 = v16;
    if (!v16) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  xpc_object_t v109 = xpc_null_create();
  uint64_t v107 = *(void *)(v2 + 112);
  uint64_t v16 = *(std::__shared_weak_count **)(v2 + 120);
  std::string v108 = v16;
  if (v16) {
LABEL_18:
  }
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_19:
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN3abm20HelperServerInternal4initEv_block_invoke_5;
  aBlock[3] = &__block_descriptor_tmp_18;
  uint64_t v18 = a1[5];
  xpc_object_t v17 = (std::__shared_weak_count *)a1[6];
  aBlock[4] = v2;
  void aBlock[5] = v18;
  long long v104 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = _Block_copy(aBlock);
  int v20 = *(NSObject **)(v2 + 88);
  if (v20) {
    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
  }
  size_t v105 = v19;
  dispatch_object_t object = v20;
  TelephonyXPC::Server::create();
  long long v21 = block;
  blocunint64_t k = 0uLL;
  uint64_t v22 = *(std::__shared_weak_count **)(v2 + 136);
  *(_OWORD *)(v2 + 128) = v21;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  unint64_t v23 = (std::__shared_weak_count *)*((void *)&block + 1);
  if (*((void *)&block + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&block + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v105) {
    _Block_release(v105);
  }
  uint64_t v24 = v108;
  if (v108 && !atomic_fetch_add(&v108->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  xpc_release(v109);
  xpc_object_t v109 = 0;
  uint64_t v25 = (int *)v110[0];
  long long v101 = (int *)v110[1];
  if (v110[0] != v110[1])
  {
    while (1)
    {
      int v26 = *v25;
      long long v102 = 0uLL;
      uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
      if ((IsInternalBuild & 1) == 0)
      {
        uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild();
        if (!IsInternalBuild)
        {
          switch(v26)
          {
            case 4:
LABEL_114:
              BOOL v79 = *(std::__shared_weak_count **)(v2 + 80);
              if (!v79 || (uint64_t v80 = *(void *)(v2 + 72), (v81 = std::__shared_weak_count::lock(v79)) == 0)) {
                std::__throw_bad_weak_ptr[abi:ne180100]();
              }
              int v82 = v81;
              *(void *)&long long v119 = v80;
              *((void *)&v119 + 1) = v81;
              atomic_fetch_add_explicit(&v81->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              if (!atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v82);
              }
              std::allocate_shared[abi:ne180100]<abm::SystemLogsTask,std::allocator<abm::SystemLogsTask>,abm::helper::TaskID &,std::shared_ptr<ctu::LogServer> &,std::weak_ptr<abm::HelperServerInternal>,void>((std::__shared_weak_count_vtbl **)&block, v26, *(void *)(v2 + 112), *(std::__shared_weak_count **)(v2 + 120), (uint64_t *)&v119);
              goto LABEL_119;
            case 5:
LABEL_79:
              int v58 = *(std::__shared_weak_count **)(v2 + 80);
              if (!v58 || (uint64_t v59 = *(void *)(v2 + 72), (v60 = std::__shared_weak_count::lock(v58)) == 0)) {
                std::__throw_bad_weak_ptr[abi:ne180100]();
              }
              long long v61 = v60;
              *(void *)&long long v119 = v59;
              *((void *)&v119 + 1) = v60;
              atomic_fetch_add_explicit(&v60->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              if (!atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v61);
              }
              std::allocate_shared[abi:ne180100]<abm::LogCompressionTask,std::allocator<abm::LogCompressionTask>,abm::helper::TaskID &,std::shared_ptr<ctu::LogServer> &,std::weak_ptr<abm::HelperServerInternal>,void>((std::__shared_weak_count_vtbl **)&block, v26, *(void *)(v2 + 112), *(std::__shared_weak_count **)(v2 + 120), (uint64_t *)&v119);
LABEL_119:
              long long v83 = block;
              blocunint64_t k = 0uLL;
              CFAllocatorRef v84 = (std::__shared_weak_count *)*((void *)&v102 + 1);
              long long v102 = v83;
              if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                std::__shared_weak_count::__release_weak(v84);
              }
              int v85 = (std::__shared_weak_count *)*((void *)&block + 1);
              if (*((void *)&block + 1)
                && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&block + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
              if (*((void *)&v119 + 1)) {
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v119 + 1));
              }
              goto LABEL_127;
            case 7:
LABEL_50:
              uint64_t v38 = *(std::__shared_weak_count **)(v2 + 80);
              if (!v38 || (uint64_t v39 = *(void *)(v2 + 72), (v40 = std::__shared_weak_count::lock(v38)) == 0)) {
                std::__throw_bad_weak_ptr[abi:ne180100]();
              }
              size_t v31 = v40;
              atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v31);
              }
              uint64_t v41 = *(void *)(v2 + 112);
              gid_t v33 = *(std::__shared_weak_count **)(v2 + 120);
              group v42 = (std::__shared_weak_count *)operator new(0xA8uLL);
              uint32_t v35 = v42;
              v42->__shared_owners_ = 0;
              p_shared_owners = &v42->__shared_owners_;
              v42->__shared_weak_owners_ = 0;
              v42->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A250;
              *(void *)&blocunint64_t k = v41;
              *((void *)&block + 1) = v33;
              if (v33) {
                atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              __int16 v37 = (std::__shared_weak_count_vtbl *)&v42[1];
              *(void *)&long long v119 = v39;
              *((void *)&v119 + 1) = v31;
              abm::LogManagementTask::LogManagementTask(&v42[1].__vftable, v26, (uint64_t *)&block, (uint64_t *)&v119);
              goto LABEL_71;
            case 8:
LABEL_57:
              uint64_t v43 = *(std::__shared_weak_count **)(v2 + 80);
              if (!v43 || (uint64_t v44 = *(void *)(v2 + 72), (v45 = std::__shared_weak_count::lock(v43)) == 0)) {
                std::__throw_bad_weak_ptr[abi:ne180100]();
              }
              size_t v31 = v45;
              atomic_fetch_add_explicit(&v45->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              if (!atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v31);
              }
              uint64_t v46 = *(void *)(v2 + 112);
              gid_t v33 = *(std::__shared_weak_count **)(v2 + 120);
              char v47 = (std::__shared_weak_count *)operator new(0xB0uLL);
              uint32_t v35 = v47;
              v47->__shared_owners_ = 0;
              p_shared_owners = &v47->__shared_owners_;
              v47->__shared_weak_owners_ = 0;
              v47->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A2A0;
              *(void *)&blocunint64_t k = v46;
              *((void *)&block + 1) = v33;
              if (v33) {
                atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              __int16 v37 = (std::__shared_weak_count_vtbl *)&v47[1];
              *(void *)&long long v119 = v44;
              *((void *)&v119 + 1) = v31;
              abm::ProfileManagementTask::ProfileManagementTask(&v47[1].__vftable, v26, (uint64_t *)&block, (uint64_t *)&v119);
              goto LABEL_71;
            case 9:
LABEL_64:
              char v48 = *(std::__shared_weak_count **)(v2 + 80);
              if (!v48 || (v49 = *(void *)(v2 + 72), (char v50 = std::__shared_weak_count::lock(v48)) == 0)) {
                std::__throw_bad_weak_ptr[abi:ne180100]();
              }
              size_t v31 = v50;
              atomic_fetch_add_explicit(&v50->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              if (!atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v31);
              }
              uint64_t v51 = *(void *)(v2 + 112);
              gid_t v33 = *(std::__shared_weak_count **)(v2 + 120);
              char v52 = (std::__shared_weak_count *)operator new(0x150uLL);
              uint32_t v35 = v52;
              v52->__shared_owners_ = 0;
              p_shared_owners = &v52->__shared_owners_;
              v52->__shared_weak_owners_ = 0;
              v52->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A2F0;
              *(void *)&blocunint64_t k = v51;
              *((void *)&block + 1) = v33;
              if (v33) {
                atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              __int16 v37 = (std::__shared_weak_count_vtbl *)&v52[1];
              *(void *)&long long v119 = v49;
              *((void *)&v119 + 1) = v31;
              abm::BasebandTracingTask::BasebandTracingTask((uint64_t)&v52[1], v26, (uint64_t *)&block, (uint64_t *)&v119);
LABEL_71:
              std::__shared_weak_count::__release_weak(v31);
              if (!v33) {
                goto LABEL_101;
              }
              goto LABEL_100;
            default:
LABEL_127:
              __int16 v37 = (std::__shared_weak_count_vtbl *)v102;
              if ((void)v102) {
                goto LABEL_128;
              }
              goto LABEL_145;
          }
        }
      }
      switch(v26)
      {
        case 3:
          uint64_t v28 = *(std::__shared_weak_count **)(v2 + 80);
          if (!v28 || (v29 = *(void *)(v2 + 72), (char v30 = std::__shared_weak_count::lock(v28)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          size_t v31 = v30;
          atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v31);
          }
          uint64_t v32 = *(void *)(v2 + 112);
          gid_t v33 = *(std::__shared_weak_count **)(v2 + 120);
          uid_t v34 = (std::__shared_weak_count *)operator new(0xE0uLL);
          uint32_t v35 = v34;
          v34->__shared_owners_ = 0;
          p_shared_owners = &v34->__shared_owners_;
          v34->__shared_weak_owners_ = 0;
          v34->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A1B0;
          *(void *)&blocunint64_t k = v32;
          *((void *)&block + 1) = v33;
          if (v33) {
            atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          __int16 v37 = (std::__shared_weak_count_vtbl *)&v34[1];
          *(void *)&long long v119 = v29;
          *((void *)&v119 + 1) = v31;
          abm::TapToRadarTask::TapToRadarTask((uint64_t)&v34[1], 3, (uint64_t *)&block, (uint64_t *)&v119);
          goto LABEL_71;
        case 4:
          CFAllocatorRef v74 = *(std::__shared_weak_count **)(v2 + 80);
          if (!v74 || (uint64_t v75 = *(void *)(v2 + 72), (v76 = std::__shared_weak_count::lock(v74)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          int v77 = v76;
          *(void *)&long long v119 = v75;
          *((void *)&v119 + 1) = v76;
          atomic_fetch_add_explicit(&v76->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v77);
          }
          std::allocate_shared[abi:ne180100]<abm::SystemLogsTask,std::allocator<abm::SystemLogsTask>,abm::helper::TaskID &,std::shared_ptr<ctu::LogServer> &,std::weak_ptr<abm::HelperServerInternal>,void>((std::__shared_weak_count_vtbl **)&block, 4, *(void *)(v2 + 112), *(std::__shared_weak_count **)(v2 + 120), (uint64_t *)&v119);
          uint64_t v78 = *((void *)&block + 1);
          blocunint64_t k = 0uLL;
          *((void *)&v102 + 1) = v78;
          if (*((void *)&v119 + 1)) {
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v119 + 1));
          }
          goto LABEL_114;
        case 5:
          size_t v53 = *(std::__shared_weak_count **)(v2 + 80);
          if (!v53 || (uint64_t v54 = *(void *)(v2 + 72), (v55 = std::__shared_weak_count::lock(v53)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          uint64_t v56 = v55;
          *(void *)&long long v119 = v54;
          *((void *)&v119 + 1) = v55;
          atomic_fetch_add_explicit(&v55->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v56);
          }
          std::allocate_shared[abi:ne180100]<abm::LogCompressionTask,std::allocator<abm::LogCompressionTask>,abm::helper::TaskID &,std::shared_ptr<ctu::LogServer> &,std::weak_ptr<abm::HelperServerInternal>,void>((std::__shared_weak_count_vtbl **)&block, 5, *(void *)(v2 + 112), *(std::__shared_weak_count **)(v2 + 120), (uint64_t *)&v119);
          uint64_t v57 = *((void *)&block + 1);
          blocunint64_t k = 0uLL;
          *((void *)&v102 + 1) = v57;
          if (*((void *)&v119 + 1)) {
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v119 + 1));
          }
          goto LABEL_79;
        case 6:
          long long v62 = *(std::__shared_weak_count **)(v2 + 80);
          if (!v62 || (uint64_t v63 = *(void *)(v2 + 72), (v64 = std::__shared_weak_count::lock(v62)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          uint64_t v65 = v64;
          atomic_fetch_add_explicit(&v64->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v65);
          }
          uint64_t v66 = *(void *)(v2 + 112);
          gid_t v33 = *(std::__shared_weak_count **)(v2 + 120);
          int v67 = (std::__shared_weak_count *)operator new(0xA0uLL);
          uint32_t v35 = v67;
          v67->__shared_owners_ = 0;
          p_shared_owners = &v67->__shared_owners_;
          v67->__shared_weak_owners_ = 0;
          v67->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A160;
          *(void *)&blocunint64_t k = v66;
          *((void *)&block + 1) = v33;
          if (v33) {
            atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          __int16 v37 = (std::__shared_weak_count_vtbl *)&v67[1];
          *(void *)&long long v119 = v63;
          *((void *)&v119 + 1) = v65;
          abm::DiagnosticToolsTask::DiagnosticToolsTask(&v67[1].__vftable, 6, (uint64_t *)&block, (uint64_t *)&v119);
          break;
        case 7:
          goto LABEL_50;
        case 8:
          goto LABEL_57;
        case 9:
          goto LABEL_64;
        case 10:
          if (!capabilities::abs::supportsCellularLogging((capabilities::abs *)IsInternalBuild)) {
            goto LABEL_127;
          }
          BOOL v68 = *(std::__shared_weak_count **)(v2 + 80);
          if (!v68 || (uint64_t v69 = *(void *)(v2 + 72), (v70 = std::__shared_weak_count::lock(v68)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          uint64_t v65 = v70;
          atomic_fetch_add_explicit(&v70->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v65);
          }
          uint64_t v71 = *(void *)(v2 + 112);
          gid_t v33 = *(std::__shared_weak_count **)(v2 + 120);
          size_t v72 = (std::__shared_weak_count *)operator new(0xE0uLL);
          uint32_t v35 = v72;
          v72->__shared_owners_ = 0;
          p_shared_owners = &v72->__shared_owners_;
          v72->__shared_weak_owners_ = 0;
          v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A200;
          *(void *)&blocunint64_t k = v71;
          *((void *)&block + 1) = v33;
          if (v33) {
            atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          __int16 v37 = (std::__shared_weak_count_vtbl *)&v72[1];
          *(void *)&long long v119 = v69;
          *((void *)&v119 + 1) = v65;
          abm::CellularLoggingTask::CellularLoggingTask((uint64_t)&v72[1], 10, (uint64_t *)&block, (uint64_t *)&v119);
          break;
        default:
          goto LABEL_127;
      }
      std::__shared_weak_count::__release_weak(v65);
      if (!v33) {
        break;
      }
LABEL_100:
      if (atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        break;
      }
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      shared_owners = (std::__shared_weak_count *)v35[4].__shared_owners_;
      if (!shared_owners)
      {
LABEL_106:
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v35->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v35[4].__vftable = v37;
        v35[4].__shared_owners_ = (uint64_t)v35;
        if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_107;
        }
        goto LABEL_104;
      }
LABEL_102:
      if (shared_owners->__shared_owners_ != -1
        || (atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed),
            atomic_fetch_add_explicit(&v35->__shared_weak_owners_, 1uLL, memory_order_relaxed),
            v35[4].__vftable = v37,
            v35[4].__shared_owners_ = (uint64_t)v35,
            std::__shared_weak_count::__release_weak(shared_owners),
            atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)))
      {
LABEL_107:
        *(void *)&long long v102 = v37;
        *((void *)&v102 + 1) = v35;
        goto LABEL_128;
      }
LABEL_104:
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      *(void *)&long long v102 = v37;
      *((void *)&v102 + 1) = v35;
LABEL_128:
      *(void *)&long long v119 = MEMORY[0x1E4F143A8];
      *((void *)&v119 + 1) = 0x40000000;
      char v120 = ___ZN3abm10HelperTask4initEv_block_invoke;
      std::string v121 = &__block_descriptor_tmp_12;
      uint64_t v122 = v37;
      char v111 = &v119;
      *(void *)&blocunint64_t k = MEMORY[0x1E4F143A8];
      *((void *)&block + 1) = 0x40000000;
      uint64_t v124 = ___ZNK3ctu20SharedSynchronizableIN3abm10HelperTaskEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
      unint64_t v125 = &__block_descriptor_tmp_18;
      p_on_zero_shared_weaunint64_t k = &v37[1].__on_zero_shared_weak;
      unint64_t v127 = &v111;
      uint64_t v86 = v37[2].~__shared_weak_count_0;
      if (v37[2].__on_zero_shared) {
        dispatch_async_and_wait(v86, &block);
      }
      else {
        dispatch_sync(v86, &block);
      }
      uint64_t v87 = (uint64_t **)(v2 + 152);
      while (1)
      {
        size_t v88 = *v87;
        uint64_t v89 = v87;
        if (!*v87) {
          break;
        }
        while (1)
        {
          uint64_t v87 = (uint64_t **)v88;
          int v90 = *((_DWORD *)v88 + 8);
          if (v26 < v90) {
            break;
          }
          if (v90 >= v26)
          {
            uint64_t v91 = v87;
            uint64_t v94 = *((void *)&v102 + 1);
            if (*((void *)&v102 + 1)) {
              goto LABEL_140;
            }
            goto LABEL_141;
          }
          size_t v88 = v87[1];
          if (!v88)
          {
            uint64_t v89 = v87 + 1;
            goto LABEL_137;
          }
        }
      }
LABEL_137:
      uint64_t v91 = operator new(0x38uLL);
      *((_DWORD *)v91 + 8) = v26;
      *((void *)v91 + 5) = 0;
      *((void *)v91 + 6) = 0;
      *(void *)uint64_t v91 = 0;
      *((void *)v91 + 1) = 0;
      *((void *)v91 + 2) = v87;
      *uint64_t v89 = (uint64_t *)v91;
      uint64_t v92 = **(void **)(v2 + 144);
      unsigned int v93 = (uint64_t *)v91;
      if (v92)
      {
        *(void *)(v2 + 144) = v92;
        unsigned int v93 = *v89;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 152), v93);
      ++*(void *)(v2 + 160);
      uint64_t v94 = *((void *)&v102 + 1);
      __int16 v37 = (std::__shared_weak_count_vtbl *)v102;
      if (*((void *)&v102 + 1)) {
LABEL_140:
      }
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v94 + 8), 1uLL, memory_order_relaxed);
LABEL_141:
      BOOL v95 = (std::__shared_weak_count *)*((void *)v91 + 6);
      *((void *)v91 + 5) = v37;
      *((void *)v91 + 6) = v94;
      if (v95 && !atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
      std::string v96 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
      {
        char v98 = "invalid";
        if ((v26 - 1) <= 9) {
          char v98 = off_1E5C46F60[v26 - 1];
        }
        LODWORD(block) = 136315138;
        *(void *)((char *)&block + 4) = v98;
        _os_log_debug_impl(&dword_1A609F000, v96, OS_LOG_TYPE_DEBUG, "#D Task: %s added", (uint8_t *)&block, 0xCu);
        BOOL v97 = (std::__shared_weak_count *)*((void *)&v102 + 1);
        if (!*((void *)&v102 + 1)) {
          goto LABEL_38;
        }
LABEL_146:
        if (!atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
        goto LABEL_38;
      }
LABEL_145:
      BOOL v97 = (std::__shared_weak_count *)*((void *)&v102 + 1);
      if (*((void *)&v102 + 1)) {
        goto LABEL_146;
      }
LABEL_38:
      if (++v25 == v101) {
        goto LABEL_154;
      }
    }
LABEL_101:
    shared_owners = (std::__shared_weak_count *)v35[4].__shared_owners_;
    if (!shared_owners) {
      goto LABEL_106;
    }
    goto LABEL_102;
  }
LABEL_154:
  if (v104) {
    std::__shared_weak_count::__release_weak(v104);
  }
  *(void *)std::string buf = *MEMORY[0x1E4FBA408];
  uint64_t v99 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&v113[0] = v99;
  *((void *)&v113[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v115) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A62751A0](v117);
  size_t v6 = v110[0];
  if (v110[0])
  {
LABEL_159:
    v110[1] = v6;
    operator delete(v6);
  }
}

void sub_1A60E70B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,char a24,uint64_t a25,char a26,uint64_t a27,xpc_object_t object,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,xpc_object_t a33)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str[abi:ne180100]@<X0>(_DWORD *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = result[30];
  if ((v3 & 0x10) != 0)
  {
    unint64_t v4 = *((void *)result + 14);
    unint64_t v5 = *((void *)result + 9);
    if (v4 < v5)
    {
      *((void *)result + 14) = v5;
      unint64_t v4 = v5;
    }
    size_t v6 = (const void *)*((void *)result + 8);
    size_t v7 = v4 - (void)v6;
    if (v4 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_16;
    }
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      a2[23] = 0;
LABEL_4:
      *a2 = 0;
      return result;
    }
    size_t v6 = (const void *)*((void *)result + 5);
    size_t v7 = *((void *)result + 7) - (void)v6;
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_16:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v8 = v7 | 7;
    }
    uint64_t v9 = v8 + 1;
    unsigned int v10 = operator new(v8 + 1);
    *((void *)a2 + 1) = v7;
    *((void *)a2 + 2) = v9 | 0x8000000000000000;
    *(void *)a2 = v10;
    a2 = v10;
  }
  else
  {
    a2[23] = v7;
    if (!v7) {
      goto LABEL_4;
    }
  }
  __n128 result = memmove(a2, v6, v7);
  a2[v7] = 0;
  return result;
}

void ___ZN3abm20HelperServerInternal4initEv_block_invoke_5(void *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    unint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      unint64_t v5 = v4;
      if (!a1[5] || (size_t v6 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)))
      {
        if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
        goto LABEL_6;
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v8 = TelephonyXPC::Server::asString();
      _os_log_debug_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEBUG, "#D Server status: %s", buf, 0xCu);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_6:
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1A60E74A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __copy_helper_block_e8_40c51_ZTSNSt3__18weak_ptrIN3abm20HelperServerInternalEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c51_ZTSNSt3__18weak_ptrIN3abm20HelperServerInternalEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t dispatch::callback<void({block_pointer})(TelephonyXPC::Server::ServerStatus)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void abm::HelperServerInternal::start(abm::HelperServerInternal *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN3abm20HelperServerInternal5startEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_11;
  v1[4] = this;
  ctu::SharedSynchronizable<abm::HelperServerInternal>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN3abm20HelperServerInternal5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(TelephonyXPC::Server **)(v1 + 128);
  if (v2)
  {
    TelephonyXPC::Server::start(v2);
    uint64_t v3 = *(void **)(v1 + 144);
    unint64_t v4 = (void *)(v1 + 152);
    if (v3 != (void *)(v1 + 152))
    {
      while (1)
      {
        uint64_t v5 = v3[5];
        size_t v6 = (std::__shared_weak_count *)v3[6];
        if (v6)
        {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v5)
        {
          size_t v7 = *(NSObject **)(v5 + 112);
          uint64_t v8 = *(NSObject **)(v5 + 88);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 0x40000000;
          block[2] = ___ZN3abm10HelperTask5startEv_block_invoke;
          uint64_t block[3] = &__block_descriptor_tmp_5_1;
          void block[4] = v5;
          dispatch_group_notify(v7, v8, block);
        }
        if (!v6) {
          break;
        }
        p_shared_owners = &v6->__shared_owners_;
        if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
          if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        unsigned int v10 = (void *)v3[1];
        if (!v10)
        {
          do
          {
LABEL_17:
            uint64_t v11 = (void *)v3[2];
            BOOL v12 = *v11 == (void)v3;
            uint64_t v3 = v11;
          }
          while (!v12);
          goto LABEL_4;
        }
        do
        {
LABEL_13:
          uint64_t v11 = v10;
          unsigned int v10 = (void *)*v10;
        }
        while (v10);
LABEL_4:
        uint64_t v3 = v11;
        if (v11 == v4) {
          return;
        }
      }
      unsigned int v10 = (void *)v3[1];
      if (!v10) {
        goto LABEL_17;
      }
      goto LABEL_13;
    }
  }
}

uint64_t abm::HelperServerInternal::isBusy(abm::HelperServerInternal *this)
{
  uint64_t v6 = 0;
  size_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  char v9 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZN3abm20HelperServerInternal6isBusyEv_block_invoke;
  v5[3] = &unk_1E5C46F00;
  v5[4] = &v6;
  void v5[5] = this;
  unsigned int v10 = v5;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  uint64_t block[3] = &__block_descriptor_tmp_42;
  void block[4] = (char *)this + 72;
  void block[5] = &v10;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
  uint64_t v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void ___ZN3abm20HelperServerInternal6isBusyEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (!v1[16]) {
    return;
  }
  uint64_t v2 = (void *)v1[18];
  uint64_t v3 = v1 + 19;
  if (v2 == v1 + 19) {
    return;
  }
  while (1)
  {
    uint64_t v5 = v2[5];
    uint64_t v6 = (std::__shared_weak_count *)v2[6];
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v5)
    {
      size_t v7 = *(NSObject **)(v5 + 112);
      if (v7)
      {
        dispatch_time_t v8 = dispatch_time(0, 5000000);
        BOOL v9 = dispatch_group_wait(v7, v8) != 0;
      }
      else
      {
        BOOL v9 = 0;
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v9;
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
        break;
      }
    }
    if (!v6) {
      goto LABEL_15;
    }
    p_shared_owners = &v6->__shared_owners_;
    if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_15;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_15:
        uint64_t v11 = (void *)v2[1];
        if (!v11) {
          goto LABEL_20;
        }
        goto LABEL_16;
      }
    }
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v11 = (void *)v2[1];
    if (!v11)
    {
      do
      {
LABEL_20:
        BOOL v12 = (void *)v2[2];
        BOOL v13 = *v12 == (void)v2;
        uint64_t v2 = v12;
      }
      while (!v13);
      goto LABEL_4;
    }
    do
    {
LABEL_16:
      BOOL v12 = v11;
      uint64_t v11 = (void *)*v11;
    }
    while (v11);
LABEL_4:
    uint64_t v2 = v12;
    if (v12 == v3) {
      return;
    }
  }
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void abm::HelperServerInternal::stop(abm::HelperServerInternal *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN3abm20HelperServerInternal4stopEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_15;
  v3[4] = this;
  unint64_t v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  uint64_t block[3] = &__block_descriptor_tmp_42;
  void block[4] = (char *)this + 72;
  void block[5] = &v4;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ___ZN3abm20HelperServerInternal4stopEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1[16])
  {
    uint64_t v2 = (void *)v1[18];
    uint64_t v3 = v1 + 19;
    if (v2 != v1 + 19)
    {
      do
      {
        uint64_t v5 = (void *)v2[5];
        unint64_t v4 = (std::__shared_weak_count *)v2[6];
        if (v4)
        {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!v5) {
          goto LABEL_11;
        }
        v12[0] = MEMORY[0x1E4F143A8];
        v12[1] = 0x40000000;
        void v12[2] = ___ZN3abm10HelperTask4stopEv_block_invoke;
        v12[3] = &__block_descriptor_tmp_7_0;
        v12[4] = v5;
        BOOL v13 = v12;
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = ___ZNK3ctu20SharedSynchronizableIN3abm10HelperTaskEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
        uint64_t block[3] = &__block_descriptor_tmp_18;
        void block[4] = v5 + 9;
        void block[5] = &v13;
        uint64_t v6 = v5[11];
        if (v5[12])
        {
          dispatch_async_and_wait(v6, block);
          size_t v7 = v5[14];
          if (v7) {
            goto LABEL_10;
          }
        }
        else
        {
          dispatch_sync(v6, block);
          size_t v7 = v5[14];
          if (v7)
          {
LABEL_10:
            dispatch_retain(v7);
            dispatch_group_wait(v7, 0xFFFFFFFFFFFFFFFFLL);
            dispatch_release(v7);
LABEL_11:
            if (!v4) {
              goto LABEL_20;
            }
            goto LABEL_12;
          }
        }
        dispatch_group_wait(0, 0xFFFFFFFFFFFFFFFFLL);
        if (!v4) {
          goto LABEL_20;
        }
LABEL_12:
        p_shared_owners = &v4->__shared_owners_;
        if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
            goto LABEL_19;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
          if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
          {
LABEL_19:
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
LABEL_20:
        BOOL v9 = (void *)v2[1];
        if (v9)
        {
          do
          {
            unsigned int v10 = v9;
            BOOL v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            unsigned int v10 = (void *)v2[2];
            BOOL v11 = *v10 == (void)v2;
            uint64_t v2 = v10;
          }
          while (!v11);
        }
        uint64_t v2 = v10;
      }
      while (v10 != v3);
    }
  }
}

void abm::HelperServerInternal::setCommandHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  v8[2] = ___ZN3abm20HelperServerInternal17setCommandHandlerENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC17ServerClientStateEN3xpc4dictENS9_IU13block_pointerFviSD_EEEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_16_2;
  v8[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v5 = *(void **)a3;
    if (!*(void *)a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string __p = *(std::string *)a2;
  uint64_t v5 = *(void **)a3;
  if (*(void *)a3) {
LABEL_5:
  }
    uint64_t v5 = _Block_copy(v5);
LABEL_6:
  uint64_t v6 = (uint64_t *)(a1 + 72);
  size_t v7 = *(NSObject **)(a3 + 8);
  aBlocunint64_t k = v5;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  ctu::SharedSynchronizable<abm::HelperServerInternal>::execute_wrapped(v6, (uint64_t)v8);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void ___ZN3abm20HelperServerInternal17setCommandHandlerENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC17ServerClientStateEN3xpc4dictENS9_IU13block_pointerFviSD_EEEEEE_block_invoke(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 32) + 128)) {
    return;
  }
  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    std::string v6 = *(std::string *)(a1 + 40);
    uint64_t v2 = *(void **)(a1 + 64);
    if (!v2) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2) {
LABEL_6:
  }
    uint64_t v2 = _Block_copy(v2);
LABEL_7:
  uint64_t v3 = *(NSObject **)(a1 + 72);
  aBlocunint64_t k = v2;
  dispatch_object_t object = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  TelephonyXPC::Server::setCommandHandler();
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1A60E7F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c121_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC17ServerClientStateEN3xpc4dictENS0_IU13block_pointerFviS4_EEEEEE(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    std::string v6 = *(void **)(a2 + 64);
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  std::string v6 = *(void **)(a2 + 64);
  if (v6) {
LABEL_5:
  }
    std::string v6 = _Block_copy(v6);
LABEL_6:
  size_t v7 = *(NSObject **)(a2 + 72);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v7;
  if (v7)
  {
    dispatch_retain(v7);
  }
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c121_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC17ServerClientStateEN3xpc4dictENS0_IU13block_pointerFviS4_EEEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    unint64_t v4 = *(void **)(a1 + 40);
    operator delete(v4);
  }
}

void abm::HelperServerInternal::sendCommandToBasebandManager(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN3abm20HelperServerInternal28sendCommandToBasebandManagerENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN3xpc4dictEU13block_pointerFvN12TelephonyXPC6ResultEPvE_block_invoke;
  void v7[3] = &unk_1EFB09F20;
  v7[4] = a4;
  void v7[5] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    std::string v6 = *a3;
    xpc_object_t object = v6;
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string __p = *(std::string *)a2;
    std::string v6 = *a3;
    xpc_object_t object = v6;
    if (v6)
    {
LABEL_3:
      xpc_retain(v6);
      goto LABEL_6;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_6:
  ctu::SharedSynchronizable<abm::HelperServerInternal>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v7);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void ___ZN3abm20HelperServerInternal28sendCommandToBasebandManagerENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN3xpc4dictEU13block_pointerFvN12TelephonyXPC6ResultEPvE_block_invoke()
{
  unint64_t v1 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v2 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v0[23] = 12;
  strcpy(v0, "helperserver");
  abm::client::CreateManager();
  atomic_fetch_add_explicit((atomic_ullong *volatile)0xAAAAAAAAAAAAAAB2, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit((atomic_ullong *volatile)0xAAAAAAAAAAAAAAB2, 1uLL, memory_order_relaxed);
  abm::client::PerformCommand();
  if (!atomic_fetch_add((atomic_ullong *volatile)0xAAAAAAAAAAAAAAB2, 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1A60E8390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v10 - 32);
  _Unwind_Resume(a1);
}

void sub_1A60E83B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 33) < 0) {
    operator delete(*(void **)(v1 - 56));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3abm20HelperServerInternal28sendCommandToBasebandManagerENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN3xpc4dictEU13block_pointerFvN12TelephonyXPC6ResultEPvE_block_invoke_2(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    int v5 = *a2;
    if (*((char *)a2 + 31) < 0) {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
    }
    else {
      std::string __p = *(std::string *)(a2 + 2);
    }
    (*(void (**)(uint64_t, int *, uint64_t))(v3 + 16))(v3, &v5, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1A60E8480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIN3abm6client7ManagerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIN3abm6client7ManagerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

xpc_object_t __copy_helper_block_e8_48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c15_ZTSN3xpc4dictE(std::string *a1, uint64_t a2)
{
  unint64_t v4 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
    std::string v6 = *(void **)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    std::string v6 = *(void **)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  xpc_object_t result = xpc_null_create();
  a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)result;
  return result;
}

void __destroy_helper_block_e8_48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(void *)(a1 + 72) = 0;
  if (*(char *)(a1 + 71) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 48);
    operator delete(v2);
  }
}

uint64_t abm::HelperServerInternal::getRunLoop(abm::HelperServerInternal *this)
{
  return *((void *)this + 21);
}

uint64_t ctu::Loggable<abm::HelperServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<abm::HelperServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(abm::HelperServerInternal *a1@<X0>, std::string *a2@<X8>)
{
  abm::HelperServerInternal::getName(a1);
  if (byte_1EB5EE8D7 < 0)
  {
    long long v3 = xmmword_1EB5EE8C0;
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)v3, *((std::string::size_type *)&v3 + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = xmmword_1EB5EE8C0;
    a2->__r_.__value_.__r.__words[2] = unk_1EB5EE8D0;
  }
}

uint64_t ctu::Loggable<abm::HelperServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<abm::HelperServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1EFB09FF0;
  MEMORY[0x1A6274710](a1 + 1);
  return a1;
}

void ctu::Loggable<abm::HelperServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1EFB09FF0;
  MEMORY[0x1A6274710](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<abm::HelperServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    long long v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1A60E8854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1A60E8870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<abm::HelperServerInternal>::shared_ptr[abi:ne180100]<abm::HelperServerInternal,std::shared_ptr<abm::HelperServerInternal> ctu::SharedSynchronizable<abm::HelperServerInternal>::make_shared_ptr<abm::HelperServerInternal>(abm::HelperServerInternal*)::{lambda(abm::HelperServerInternal*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  unint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A030;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  std::string v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1A60E899C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<abm::HelperServerInternal> ctu::SharedSynchronizable<abm::HelperServerInternal>::make_shared_ptr<abm::HelperServerInternal>(abm::HelperServerInternal*)::{lambda(abm::HelperServerInternal*)#1}::operator() const(abm::HelperServerInternal*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1A60E89C4(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<abm::HelperServerInternal *,std::shared_ptr<abm::HelperServerInternal> ctu::SharedSynchronizable<abm::HelperServerInternal>::make_shared_ptr<abm::HelperServerInternal>(abm::HelperServerInternal*)::{lambda(abm::HelperServerInternal *)#1},std::allocator<abm::HelperServerInternal>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<abm::HelperServerInternal *,std::shared_ptr<abm::HelperServerInternal> ctu::SharedSynchronizable<abm::HelperServerInternal>::make_shared_ptr<abm::HelperServerInternal>(abm::HelperServerInternal*)::{lambda(abm::HelperServerInternal *)#1},std::allocator<abm::HelperServerInternal>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<abm::HelperServerInternal *,std::shared_ptr<abm::HelperServerInternal> ctu::SharedSynchronizable<abm::HelperServerInternal>::make_shared_ptr<abm::HelperServerInternal>(abm::HelperServerInternal*)::{lambda(abm::HelperServerInternal *)#1},std::allocator<abm::HelperServerInternal>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE15make_shared_ptrIS2_EENSt3__110shared_pt"
                     "rIT_EEPS7_EUlPS2_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE15make_shared_ptrIS2_EENSt3__1"
                                "10shared_ptrIT_EEPS7_EUlPS2_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<abm::HelperServerInternal> ctu::SharedSynchronizable<abm::HelperServerInternal>::make_shared_ptr<abm::HelperServerInternal>(abm::HelperServerInternal*)::{lambda(abm::HelperServerInternal*)#1}::operator() const(abm::HelperServerInternal*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<abm::HelperServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1EFB09FF0;
  MEMORY[0x1A6274710](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void std::__tree<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::__map_value_compare<abm::helper::TaskID,std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::less<abm::helper::TaskID>,true>,std::allocator<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::__map_value_compare<abm::helper::TaskID,std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::less<abm::helper::TaskID>,true>,std::allocator<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>>>::destroy(*a1);
    std::__tree<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::__map_value_compare<abm::helper::TaskID,std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::less<abm::helper::TaskID>,true>,std::allocator<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[6];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      unint64_t v3 = a1;
    }
    else
    {
      unint64_t v3 = a1;
    }
    operator delete(v3);
  }
}

void std::allocate_shared[abi:ne180100]<abm::LogCompressionTask,std::allocator<abm::LogCompressionTask>,abm::helper::TaskID &,std::shared_ptr<ctu::LogServer> &,std::weak_ptr<abm::HelperServerInternal>,void>(std::__shared_weak_count_vtbl **a1, int a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t *a5)
{
  uint64_t v10 = (std::__shared_weak_count *)operator new(0xB0uLL);
  BOOL v11 = v10;
  v10->__shared_owners_ = 0;
  p_shared_owners = &v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A0C0;
  BOOL v13 = (std::__shared_weak_count_vtbl *)&v10[1];
  v17[0] = a3;
  v17[1] = (uint64_t)a4;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v14 = (std::__shared_weak_count *)a5[1];
  v16[0] = *a5;
  v16[1] = (uint64_t)v14;
  *a5 = 0;
  a5[1] = 0;
  abm::LogCompressionTask::LogCompressionTask(&v10[1].__vftable, a2, v17, v16);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  if (a4 && !atomic_fetch_add(&a4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
    std::__shared_weak_count::__release_weak(a4);
    *a1 = v13;
    a1[1] = (std::__shared_weak_count_vtbl *)v11;
    shared_owners = (std::__shared_weak_count *)v11[4].__shared_owners_;
    if (shared_owners) {
      goto LABEL_8;
    }
  }
  else
  {
    *a1 = v13;
    a1[1] = (std::__shared_weak_count_vtbl *)v11;
    shared_owners = (std::__shared_weak_count *)v11[4].__shared_owners_;
    if (shared_owners)
    {
LABEL_8:
      if (shared_owners->__shared_owners_ != -1) {
        return;
      }
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v11[4].__vftable = v13;
      v11[4].__shared_owners_ = (uint64_t)v11;
      std::__shared_weak_count::__release_weak(shared_owners);
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        return;
      }
      goto LABEL_10;
    }
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v11[4].__vftable = v13;
  v11[4].__shared_owners_ = (uint64_t)v11;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return;
  }
LABEL_10:
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);

  std::__shared_weak_count::__release_weak(v11);
}

void sub_1A60E8E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<abm::LogCompressionTask>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A0C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<abm::LogCompressionTask>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A0C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<abm::LogCompressionTask>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocate_shared[abi:ne180100]<abm::SystemLogsTask,std::allocator<abm::SystemLogsTask>,abm::helper::TaskID &,std::shared_ptr<ctu::LogServer> &,std::weak_ptr<abm::HelperServerInternal>,void>(std::__shared_weak_count_vtbl **a1, int a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t *a5)
{
  uint64_t v10 = (std::__shared_weak_count *)operator new(0xC8uLL);
  BOOL v11 = v10;
  v10->__shared_owners_ = 0;
  p_shared_owners = &v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A110;
  BOOL v13 = (std::__shared_weak_count_vtbl *)&v10[1];
  v17[0] = a3;
  v17[1] = (uint64_t)a4;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v14 = (std::__shared_weak_count *)a5[1];
  v16[0] = *a5;
  v16[1] = (uint64_t)v14;
  *a5 = 0;
  a5[1] = 0;
  abm::SystemLogsTask::SystemLogsTask((uint64_t)&v10[1], a2, v17, v16);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  if (a4 && !atomic_fetch_add(&a4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
    std::__shared_weak_count::__release_weak(a4);
    *a1 = v13;
    a1[1] = (std::__shared_weak_count_vtbl *)v11;
    shared_owners = (std::__shared_weak_count *)v11[4].__shared_owners_;
    if (shared_owners) {
      goto LABEL_8;
    }
  }
  else
  {
    *a1 = v13;
    a1[1] = (std::__shared_weak_count_vtbl *)v11;
    shared_owners = (std::__shared_weak_count *)v11[4].__shared_owners_;
    if (shared_owners)
    {
LABEL_8:
      if (shared_owners->__shared_owners_ != -1) {
        return;
      }
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v11[4].__vftable = v13;
      v11[4].__shared_owners_ = (uint64_t)v11;
      std::__shared_weak_count::__release_weak(shared_owners);
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        return;
      }
      goto LABEL_10;
    }
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v11[4].__vftable = v13;
  v11[4].__shared_owners_ = (uint64_t)v11;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return;
  }
LABEL_10:
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);

  std::__shared_weak_count::__release_weak(v11);
}

void sub_1A60E90B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<abm::SystemLogsTask>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<abm::SystemLogsTask>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A110;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<abm::SystemLogsTask>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<abm::DiagnosticToolsTask>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<abm::DiagnosticToolsTask>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A160;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<abm::DiagnosticToolsTask>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<abm::TapToRadarTask>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A1B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<abm::TapToRadarTask>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A1B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<abm::TapToRadarTask>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<abm::CellularLoggingTask>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<abm::CellularLoggingTask>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A200;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<abm::CellularLoggingTask>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<abm::LogManagementTask>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A250;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<abm::LogManagementTask>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A250;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<abm::LogManagementTask>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<abm::ProfileManagementTask>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A2A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<abm::ProfileManagementTask>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A2A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<abm::ProfileManagementTask>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<abm::BasebandTracingTask>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A2F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<abm::BasebandTracingTask>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A2F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<abm::BasebandTracingTask>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *___ZNK3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ctu::SharedSynchronizable<abm::HelperServerInternal>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  dispatch_time_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  uint64_t block[3] = &unk_1EFB0A338;
  void block[5] = v5;
  BOOL v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c55_ZTSNSt3__110shared_ptrIKN3abm20HelperServerInternalEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c55_ZTSNSt3__110shared_ptrIKN3abm20HelperServerInternalEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void SAHEURCoreDumpTraceProtocol::SAHEURCoreDumpTraceProtocol(SAHEURCoreDumpTraceProtocol *this)
{
  GetABMLogServer(&v8);
  ctu::Loggable<EURCoreDumpTraceProtocol,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const(&)[15],std::shared_ptr<ctu::LogServer>>(this, "trace.coredump", &v8);
  uint64_t v2 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *(void *)this = &unk_1EFB0A378;
  GetABMLogServer(&v6);
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_object_t object = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  BasebandTransport::create((capabilities::radio *)&v6, &object, (uint64_t)this + 104);
  if (object) {
    dispatch_release(object);
  }
  unint64_t v4 = v7;
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1A60E9820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  EURCoreDumpTraceProtocol::~EURCoreDumpTraceProtocol(v11);
  _Unwind_Resume(a1);
}

void sub_1A60E9848(_Unwind_Exception *a1)
{
  EURCoreDumpTraceProtocol::~EURCoreDumpTraceProtocol(v1);
  _Unwind_Resume(a1);
}

void sub_1A60E985C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void EURCoreDumpTraceProtocol::~EURCoreDumpTraceProtocol(void **this)
{
  *this = &unk_1EFB093C0;
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  *this = &unk_1EFB09410;
  MEMORY[0x1A6274710](this + 1);
}

void SAHEURCoreDumpTraceProtocol::~SAHEURCoreDumpTraceProtocol(SAHEURCoreDumpTraceProtocol *this)
{
  *(void *)this = &unk_1EFB0A378;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(void *)this = &unk_1EFB093C0;
    if ((*((char *)this + 95) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  *(void *)this = &unk_1EFB093C0;
  if (*((char *)this + 95) < 0) {
LABEL_4:
  }
    operator delete(*((void **)this + 9));
LABEL_5:
  *(void *)this = &unk_1EFB09410;
  MEMORY[0x1A6274710]((char *)this + 8);
}

{
  std::__shared_weak_count *v2;

  *(void *)this = &unk_1EFB0A378;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(void *)this = &unk_1EFB093C0;
    if ((*((char *)this + 95) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  *(void *)this = &unk_1EFB093C0;
  if (*((char *)this + 95) < 0) {
LABEL_4:
  }
    operator delete(*((void **)this + 9));
LABEL_5:
  *(void *)this = &unk_1EFB09410;
  MEMORY[0x1A6274710]((char *)this + 8);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EFB0A378;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    *(void *)this = &unk_1EFB093C0;
    if ((*((char *)this + 95) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  *(void *)this = &unk_1EFB093C0;
  if (*((char *)this + 95) < 0) {
LABEL_4:
  }
    operator delete(*((void **)this + 9));
LABEL_5:
  *(void *)this = &unk_1EFB09410;
  MEMORY[0x1A6274710]((char *)this + 8);

  operator delete(this);
}

uint64_t SAHEURCoreDumpTraceProtocol::resetInternalState(uint64_t this)
{
  *(_DWORD *)(this + 96) = 0;
  if (*(char *)(this + 95) < 0)
  {
    **(unsigned char **)(this + 72) = 0;
    *(void *)(this + 80) = 0;
  }
  else
  {
    *(unsigned char *)(this + 72) = 0;
    *(unsigned char *)(this + 95) = 0;
  }
  return this;
}

uint64_t SAHEURCoreDumpTraceProtocol::createTransport(SAHEURCoreDumpTraceProtocol *this)
{
  uint64_t v2 = *((void *)this + 13);
  int v9 = 2;
  char v10 = 0;
  uint64_t v11 = 10;
  shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(this);
  if (shouldUseMinBasebandTransportIOReadSize) {
    int v4 = 0x4000;
  }
  else {
    int v4 = 0x8000;
  }
  int v12 = v4;
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize)) {
    int v5 = 4;
  }
  else {
    int v5 = 16;
  }
  int v13 = v5;
  uint64_t v14 = 0;
  char v15 = 0;
  aBlocunint64_t k = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, int *, void **))(*(void *)v2 + 48))(v2, &v9, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if ((v6 & 1) == 0) {
    *((_DWORD *)this + 24) = 1;
  }
  return v6;
}

void sub_1A60E9CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(exception_object);
}

void SAHEURCoreDumpTraceProtocol::generateCrashReason(uint64_t a1, const __CFDictionary **a2, void *a3, size_t a4)
{
  if (a3
    && a4
    && (*a2
      ? (uint64_t v6 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      : (uint64_t v6 = 0),
        v6))
  {
    bzero(a3, a4);
    v16[0] = 0xAAAAAAAAAAAAAAAALL;
    v16[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v16, *a2);
    int v12 = (char *)operator new(0x20uLL);
    strcpy(v12, "*** NO REASON SPECIFIED ***");
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v17, "kKeyTraceDumpStateReason");
    ctu::cf::map_adapter::getString();
    MEMORY[0x1A62748E0](&v17);
    uint64_t v8 = std::string::insert(&v13, 0, "AP-Triggered: ", 0xEuLL);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    int64_t v15 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    operator delete(v12);
    if (v15 >= 0) {
      char v10 = __p;
    }
    else {
      char v10 = (void **)__p[0];
    }
    strlcpy((char *)a3, (const char *)v10, a4);
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
    MEMORY[0x1A6274930](v16);
  }
  else
  {
    uint64_t v11 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl(&dword_1A609F000, v11, OS_LOG_TYPE_ERROR, "No space to store reason string or empty dictionary provided\n", (uint8_t *)__p, 2u);
    }
  }
}

void sub_1A60E9ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    MEMORY[0x1A6274930](v26 - 56);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1A6274930](v26 - 56);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t SAHEURCoreDumpTraceProtocol::crashBasebandOverDIAG(SAHEURCoreDumpTraceProtocol *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (TelephonyBasebandGetReset())
  {
    uint64_t v2 = *((void *)a1 + 5);
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1A609F000, v2, OS_LOG_TYPE_DEFAULT, "#I Crashing baseband over DIAG interface", buf, 2u);
    }
    __int16 v5 = capabilities::diag::supportedInterfaces((capabilities::diag *)v3);
    uint64_t v6 = v5 & 0x1FF;
    if ((v5 & 0x1FF) != 0)
    {
      uint64_t v7 = 0;
      do
      {
        if (v7 == 9) {
          std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
        }
        if (((1 << v7) & v6) != 0)
        {
          v6 &= ~(1 << v7);
          if (SAHEURCoreDumpTraceProtocol::createTransport(a1))
          {
            uint64_t v8 = *((void *)a1 + 5);
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string buf = 67109120;
              int v12 = 1 << v7;
              _os_log_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEFAULT, "#I Triggering crash on interface %u", buf, 8u);
            }
            BasebandTransport::operator*(*((void *)a1 + 13));
            char v9 = ETLBBSimulateCrashExt();
            BasebandTransport::close(*((BasebandTransport **)a1 + 13));
            if (v9) {
              break;
            }
          }
          else
          {
            BasebandTransport::close(*((BasebandTransport **)a1 + 13));
          }
        }
        ++v7;
      }
      while ((v6 & 0x1FF) != 0);
    }
    TelephonyBasebandGetReset();
  }
  else
  {
    int v4 = *((void *)a1 + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1A609F000, v4, OS_LOG_TYPE_ERROR, "Failed to get baseband reset state", buf, 2u);
    }
  }
  return 0;
}

BOOL SAHEURCoreDumpTraceProtocol::crashBasebandWithGPIO(capabilities::coredump *a1)
{
  char v9 = 0;
  int v2 = capabilities::coredump::supportsGPIOSignalling(a1);
  BOOL result = 0;
  if (v2)
  {
    if (TelephonyBasebandGetReset())
    {
      int v4 = *((void *)a1 + 5);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEFAULT, "#I Crashing baseband with GPIO", v7, 2u);
      }
      TelephonyBasebandSetModemCoredumpGPIO();
      usleep(0xF4240u);
      TelephonyBasebandSetModemCoredumpGPIO();
    }
    else
    {
      uint64_t v6 = *((void *)a1 + 5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v8 = 0;
        _os_log_error_impl(&dword_1A609F000, v6, OS_LOG_TYPE_ERROR, "Failed to get Baseband Reset state", v8, 2u);
      }
    }
    return v9 != 0;
  }
  return result;
}

void SAHEURCoreDumpTraceProtocol::handleLog(SAHEURCoreDumpTraceProtocol *this, int a2, const char *__s)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  memset(&__dst, 170, sizeof(__dst));
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v6;
  p_dst = &__dst;
  if (v6) {
LABEL_8:
  }
    memcpy(p_dst, __s, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  std::string::size_type v11 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  char v12 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  std::string::size_type v13 = __dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v15 = &__dst;
  }
  else {
    int64_t v15 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v16 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v16 = __dst.__r_.__value_.__l.__size_;
  }
  uint64_t v17 = memchr(v15, 10, v16);
  if (v17) {
    unint64_t v18 = (unint64_t)v17;
  }
  else {
    unint64_t v18 = (unint64_t)v15 + v16;
  }
  uint64_t v19 = (std::string *)(v18 + 1);
  if (v18 - (void)v15 != v16 && v19 != (std::string *)((char *)v15 + v16))
  {
    long long v21 = (char *)v15 + v16 + ~v18;
    do
    {
      int v22 = v19->__r_.__value_.__s.__data_[0];
      if (v22 != 10) {
        *(unsigned char *)v18++ = v22;
      }
      uint64_t v19 = (std::string *)((char *)v19 + 1);
      --v21;
    }
    while (v21);
    std::string::size_type v11 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    std::string::size_type v13 = __dst.__r_.__value_.__r.__words[0];
    char v12 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  if (v12 >= 0) {
    unint64_t v23 = (char *)&__dst + v11;
  }
  else {
    unint64_t v23 = (char *)(v13 + size);
  }
  if (v12 >= 0) {
    uint64_t v24 = &__dst;
  }
  else {
    uint64_t v24 = (std::string *)v13;
  }
  if (v12 >= 0) {
    std::string::size_type v25 = v11;
  }
  else {
    std::string::size_type v25 = size;
  }
  std::string::size_type v26 = v18 - (void)v24;
  if (v25 < v18 - (unint64_t)v24) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (&v23[-v18] == (char *)-1)
  {
    if (v12 < 0)
    {
      __dst.__r_.__value_.__l.__size_ = v18 - (void)v24;
      *(unsigned char *)(v13 + v26) = 0;
      uint64_t v27 = *((void *)this + 5);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_45;
      }
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v26 & 0x7F;
      __dst.__r_.__value_.__s.__data_[v26] = 0;
      uint64_t v27 = *((void *)this + 5);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_45;
      }
    }
LABEL_39:
    uint64_t v28 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v28 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 67109378;
    int v31 = a2;
    __int16 v32 = 2080;
    gid_t v33 = v28;
    _os_log_impl(&dword_1A609F000, v27, OS_LOG_TYPE_DEFAULT, "#I bbu: %04x:%s", buf, 0x12u);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_42;
    }
    return;
  }
  std::string::__erase_external_with_move(&__dst, v26, (std::string::size_type)&v23[-v18]);
  uint64_t v27 = *((void *)this + 5);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_39;
  }
LABEL_45:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_42:
  }
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1A60EA578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SAHEURCoreDumpTraceProtocol::crashBasebandForCoreDump(SAHEURCoreDumpTraceProtocol *a1, const __CFDictionary **a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t Controller = TelephonyBasebandCreateController();
  if (Controller)
  {
    __int16 v5 = (const void *)Controller;
    if (!SAHEURCoreDumpTraceProtocol::crashBasebandWithGPIO(a1))
    {
      __int16 v18 = 0;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      *(_OWORD *)std::string buf = 0u;
      CFDictionaryRef v6 = *a2;
      CFDictionaryRef v12 = v6;
      if (v6) {
        CFRetain(v6);
      }
      SAHEURCoreDumpTraceProtocol::generateCrashReason((uint64_t)a1, &v12, &buf[2], 0x50uLL);
      if (v6) {
        CFRelease(v6);
      }
      if ((SAHEURCoreDumpTraceProtocol::crashBasebandOverDIAG(a1) & 1) == 0)
      {
        std::string::size_type v7 = *((void *)a1 + 5);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string::size_type v11 = 0;
          _os_log_error_impl(&dword_1A609F000, v7, OS_LOG_TYPE_ERROR, "Unable to gracefully crash baseband", v11, 2u);
        }
      }
    }
    v11[0] = 0;
    TelephonyBasebandGetReset();
    uint64_t v8 = *((void *)a1 + 5);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      if (v11[0]) {
        uint64_t v9 = (const char *)&unk_1A61FC72E;
      }
      else {
        uint64_t v9 = "not ";
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband is %sin reset", buf, 0xCu);
    }
    CFRelease(v5);
  }
  return 1;
}

void sub_1A60EA740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SAHEURCoreDumpTraceProtocol::collectBasebandCoreDump(SAHEURCoreDumpTraceProtocol *this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t result = BBUpdaterExtremeCreate();
  int v3 = 2;
  if (result)
  {
    int v4 = (const void *)result;
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, @"DisallowFusing", (const void *)*MEMORY[0x1E4F1CFD0]);
    int valuePtr = 2;
    CFNumberRef v7 = CFNumberCreate(v5, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(Mutable, @"BootMode", v7);
    CFRelease(v7);
    value[0] = 0;
    uint64_t v8 = (void *)((char *)this + 72);
    if (ctu::cf::convert_copy())
    {
      CFDictionarySetValue(Mutable, @"coreDumpPath", value[0]);
      CFRelease(value[0]);
      if (BBUpdaterSetOptions())
      {
        *(void *)std::string buf = 0;
        int v9 = BBUpdaterExecCommand();
        BOOL v10 = v9 != 0;
        std::string::size_type v11 = *((void *)this + 5);
        if (v9)
        {
          if (os_log_type_enabled(*((os_log_t *)this + 5), OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(value[0]) = 0;
            _os_log_impl(&dword_1A609F000, v11, OS_LOG_TYPE_DEFAULT, "#I Success: Executing command to collect CoreDump", (uint8_t *)value, 2u);
            CFDictionaryRef v12 = *(const void **)buf;
            if (!*(void *)buf) {
              goto LABEL_17;
            }
            goto LABEL_16;
          }
        }
        else if (os_log_type_enabled(*((os_log_t *)this + 5), OS_LOG_TYPE_ERROR))
        {
          LOWORD(value[0]) = 0;
          _os_log_error_impl(&dword_1A609F000, v11, OS_LOG_TYPE_ERROR, "Failed: Executing command to collect CoreDump", (uint8_t *)value, 2u);
          CFDictionaryRef v12 = *(const void **)buf;
          if (!*(void *)buf)
          {
LABEL_17:
            CFRelease(v4);
            if (Mutable) {
              CFRelease(Mutable);
            }
            if (cf)
            {
              CFRelease(cf);
              if (v10)
              {
LABEL_21:
                int v3 = 0;
                uint64_t result = 1;
                goto LABEL_24;
              }
            }
            else if (v10)
            {
              goto LABEL_21;
            }
            uint64_t result = 0;
            int v3 = 2;
            goto LABEL_24;
          }
LABEL_16:
          CFRelease(v12);
          goto LABEL_17;
        }
        CFDictionaryRef v12 = *(const void **)buf;
        if (!*(void *)buf) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
      long long v14 = *((void *)this + 5);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_error_impl(&dword_1A609F000, v14, OS_LOG_TYPE_ERROR, "Failed: Setting CoreDump options for BBUpdater", buf, 2u);
        BOOL v10 = 0;
        goto LABEL_17;
      }
    }
    else
    {
      std::string::size_type v13 = *((void *)this + 5);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)this + 95) < 0) {
          uint64_t v8 = (void *)*v8;
        }
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_error_impl(&dword_1A609F000, v13, OS_LOG_TYPE_ERROR, "Failed: Converting CoreDump path to CFStringRef. fScratchFolder=[%s]", buf, 0xCu);
      }
    }
    BOOL v10 = 0;
    goto LABEL_17;
  }
LABEL_24:
  *((_DWORD *)this + 24) = v3;
  return result;
}

uint64_t SAHEURCoreDumpTraceProtocol::snapshotInternal(EURCoreDumpTraceProtocol *a1, const __CFDictionary **a2, void *a3)
{
  (*(void (**)(EURCoreDumpTraceProtocol *))(*(void *)a1 + 64))(a1);
  BOOL ScratchPath = EURCoreDumpTraceProtocol::createScratchPath(a1);
  if (ScratchPath)
  {
    CFDictionaryRef v7 = *a2;
    CFDictionaryRef v13 = v7;
    if (v7) {
      CFRetain(v7);
    }
    SAHEURCoreDumpTraceProtocol::crashBasebandForCoreDump(a1, &v13);
    if (v7) {
      CFRelease(v7);
    }
    uint64_t v8 = (capabilities::radio *)SAHEURCoreDumpTraceProtocol::collectBasebandCoreDump(a1);
    int v9 = (int)v8;
    if (capabilities::radio::mav20Plus(v8))
    {
      if (v9) {
        EURCoreDumpTraceProtocol::collectBasebandCrashListM20((uint64_t)a1, (uint64_t)a3);
      }
    }
    else if (v9)
    {
      EURCoreDumpTraceProtocol::collectBasebandCrashList((uint64_t)a1, a3);
    }
  }
  else
  {
    *((_DWORD *)a1 + 24) = 2;
    capabilities::radio::mav20Plus((capabilities::radio *)ScratchPath);
  }
  CFDictionaryRef v10 = *a2;
  CFTypeRef cf = v10;
  if (v10) {
    CFRetain(v10);
  }
  EURCoreDumpTraceProtocol::moveToSnapshotPath((uint64_t)a1, (const __CFDictionary **)&cf);
  if (cf) {
    CFRelease(cf);
  }
  return *((unsigned int *)a1 + 24);
}

void sub_1A60EAB6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1A60EAB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t SAHEURCoreDumpTraceProtocol::snapshot(uint64_t a1, const void **a2, uint64_t a3)
{
  CFAllocatorRef v5 = *a2;
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, CFTypeRef *, uint64_t))(*(void *)a1 + 72))(a1, &cf, a3);
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

void sub_1A60EAC24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

const char *SAHEURCoreDumpTraceProtocol::getName(SAHEURCoreDumpTraceProtocol *this)
{
  return "trace.coredump";
}

char *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *bsp::tlv::abm::writeField(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t bsp::tlv::abm::getFieldSize()
{
  return 4;
}

{
  return 80;
}

{
  return 131;
}

{
  return 2;
}

{
  return 131;
}

{
  return 2;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 2;
}

{
  return 2;
}

{
  return 20;
}

{
  return 2;
}

{
  return 10;
}

{
  return 14;
}

{
  return 22;
}

{
  return 6;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 6;
}

{
  return 10;
}

{
  return 2;
}

{
  return 2;
}

{
  return 6;
}

{
  return 6;
}

{
  return 14;
}

{
  return 22;
}

{
  return 2;
}

{
  return 28;
}

{
  return 46;
}

{
  return 12;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 2;
}

{
  return 2;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

uint64_t tlv::parseV<bsp::tlv::abm::CoreDumpEnabledType>(tlv **a1, int a2)
{
  int v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1A60EACCC(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::CoreDumpEnabledType>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::CoreDumpEnabledType>(_DWORD **result, _DWORD *a2)
{
  int v2 = *result;
  _DWORD *v2 = *a2;
  *uint64_t result = v2 + 1;
  return result;
}

_OWORD *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _OWORD *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)0x50);
  *a3 = *(_OWORD *)a1;
  long long v5 = *((_OWORD *)a1 + 1);
  long long v6 = *((_OWORD *)a1 + 2);
  long long v7 = *((_OWORD *)a1 + 4);
  a3[3] = *((_OWORD *)a1 + 3);
  a3[4] = v7;
  a3[1] = v5;
  a3[2] = v6;
  return (_OWORD *)((char *)a1 + 80);
}

_OWORD *bsp::tlv::abm::writeField(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  long long v2 = a2[1];
  long long v3 = a2[2];
  long long v4 = a2[4];
  a1[3] = a2[3];
  a1[4] = v4;
  a1[1] = v2;
  a1[2] = v3;
  return a1 + 5;
}

__n128 tlv::parseV<bsp::tlv::abm::CrashReason>@<Q0>(tlv **a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  long long v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)0x50);
  long long v6 = *((_OWORD *)v5 + 3);
  a3[2] = *((_OWORD *)v5 + 2);
  a3[3] = v6;
  a3[4] = *((_OWORD *)v5 + 4);
  __n128 result = *((__n128 *)v5 + 1);
  *a3 = *(_OWORD *)v5;
  a3[1] = result;
  *a1 = (tlv *)((char *)v5 + 80);
  return result;
}

void sub_1A60EADE4(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::CrashReason>()
{
  return 83;
}

__n128 tlv::writeV<bsp::tlv::abm::CrashReason>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v2 + 64) = v5;
  *(__n128 *)(v2 + 16) = result;
  *(_OWORD *)(v2 + 32) = v4;
  *a1 = v2 + 80;
  return result;
}

uint64_t bsp::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)0x83);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v6 = *(_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a3 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 64) = v7;
  *(_OWORD *)(a3 + 16) = v5;
  *(_OWORD *)(a3 + 32) = v6;
  long long v8 = *(_OWORD *)(a1 + 80);
  long long v9 = *(_OWORD *)(a1 + 96);
  long long v10 = *(_OWORD *)(a1 + 112);
  *(_DWORD *)(a3 + 127) = *(_DWORD *)(a1 + 127);
  *(_OWORD *)(a3 + 96) = v9;
  *(_OWORD *)(a3 + 112) = v10;
  *(_OWORD *)(a3 + 80) = v8;
  return a1 + 131;
}

{
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)0x83);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v6 = *(_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a3 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 64) = v7;
  *(_OWORD *)(a3 + 16) = v5;
  *(_OWORD *)(a3 + 32) = v6;
  long long v8 = *(_OWORD *)(a1 + 80);
  long long v9 = *(_OWORD *)(a1 + 96);
  long long v10 = *(_OWORD *)(a1 + 112);
  *(_DWORD *)(a3 + 127) = *(_DWORD *)(a1 + 127);
  *(_OWORD *)(a3 + 96) = v9;
  *(_OWORD *)(a3 + 112) = v10;
  *(_OWORD *)(a3 + 80) = v8;
  return a1 + 131;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)0x10);
  *(_OWORD *)(a3 + 4) = *(_OWORD *)(a1 + 4);
  return a1 + 20;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *(unsigned char *)a3 = *(unsigned char *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 1) = *(unsigned char *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 2) = *(unsigned char *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 3), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 3) = *(unsigned char *)(a1 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 4) = *(unsigned char *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 5) = *(unsigned char *)(a1 + 5);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 6) = *(unsigned char *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 7), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 7) = *(unsigned char *)(a1 + 7);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 8) = *(unsigned char *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 9), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 9) = *(unsigned char *)(a1 + 9);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 10);
  return a1 + 14;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 14), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 14);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 18), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a1 + 18);
  return a1 + 22;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 14), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 14);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 18), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a1 + 18);
  return a1 + 22;
}

{
  uint64_t v6;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 2) = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 4) = *(_WORD *)(a1 + 4);
  long long v6 = bsp::tlv::abm::parseField(a1 + 6, a2, a3 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)v6, a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 24) = *(_WORD *)v6;
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 2), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 28) = *(_WORD *)(v6 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(v6 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 36) = *(_DWORD *)(v6 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(v6 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 16), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 44) = *(_DWORD *)(v6 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 20), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 48) = *(_DWORD *)(v6 + 20);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 24), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 52) = *(_WORD *)(v6 + 24);
  return v6 + 26;
}

uint64_t bsp::tlv::abm::writeField(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 127) = *(_DWORD *)(a2 + 127);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  return a1 + 131;
}

{
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 127) = *(_DWORD *)(a2 + 127);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  return a1 + 131;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  return a1 + 20;
}

{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5) = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6) = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a1 + 7) = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 12);
  return a1 + 14;
}

{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 6) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 14) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 18) = *(_DWORD *)(a2 + 20);
  return a1 + 22;
}

{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5) = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6) = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a1 + 7) = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 12);
  return a1 + 14;
}

{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 6) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 14) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 18) = *(_DWORD *)(a2 + 20);
  return a1 + 22;
}

{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(unsigned char *)(a1 + 6) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 7) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 11) = *(unsigned char *)(a2 + 13);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 14);
  *(unsigned char *)(a1 + 13) = *(unsigned char *)(a2 + 15);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 15) = *(unsigned char *)(a2 + 17);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 20);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 24);
  *(_WORD *)(a1 + 22) = *(_WORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 52);
  return a1 + 46;
}

__n128 tlv::parseV<bsp::tlv::abm::CoreDumpCrashReasonA5String>@<Q0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_DWORD *)(a3 + 127) = 0;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  long long v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)0x83);
  long long v6 = *((_OWORD *)v5 + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)v5 + 6);
  *(_OWORD *)(a3 + 112) = v6;
  *(_DWORD *)(a3 + 127) = *(_DWORD *)((char *)v5 + 127);
  long long v7 = *((_OWORD *)v5 + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)v5 + 2);
  *(_OWORD *)(a3 + 48) = v7;
  long long v8 = *((_OWORD *)v5 + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)v5 + 4);
  *(_OWORD *)(a3 + 80) = v8;
  __n128 result = *((__n128 *)v5 + 1);
  *(_OWORD *)a3 = *(_OWORD *)v5;
  *(__n128 *)(a3 + 16) = result;
  *a1 = (tlv *)((char *)v5 + 131);
  return result;
}

void sub_1A60EAF64(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::CoreDumpCrashReasonA5String>()
{
  return 134;
}

__n128 tlv::writeV<bsp::tlv::abm::CoreDumpCrashReasonA5String>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v2 + 64) = v5;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(v2 + 127) = *(_DWORD *)(a2 + 127);
  *(_OWORD *)(v2 + 96) = v7;
  *(_OWORD *)(v2 + 112) = v8;
  *(__n128 *)(v2 + 80) = result;
  *a1 = v2 + 131;
  return result;
}

char *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _WORD *a3)
{
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

_WORD *bsp::tlv::abm::writeField(_WORD *a1, _WORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1 + 5;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1 + 3;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1 + 3;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1 + 5;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1 + 3;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1 + 3;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  return a1 + 14;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<bsp::tlv::abm::CoreDumpCrashReasonA5Line>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1A60EB05C(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::CoreDumpCrashReasonA5Line>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::CoreDumpCrashReasonA5Line>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  _WORD *v2 = *a2;
  *uint64_t result = v2 + 1;
  return result;
}

__n128 tlv::parseV<bsp::tlv::abm::CoreDumpCrashReasonQ6String>@<Q0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_DWORD *)(a3 + 127) = 0;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  long long v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)0x83);
  long long v6 = *((_OWORD *)v5 + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)v5 + 6);
  *(_OWORD *)(a3 + 112) = v6;
  *(_DWORD *)(a3 + 127) = *(_DWORD *)((char *)v5 + 127);
  long long v7 = *((_OWORD *)v5 + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)v5 + 2);
  *(_OWORD *)(a3 + 48) = v7;
  long long v8 = *((_OWORD *)v5 + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)v5 + 4);
  *(_OWORD *)(a3 + 80) = v8;
  __n128 result = *((__n128 *)v5 + 1);
  *(_OWORD *)a3 = *(_OWORD *)v5;
  *(__n128 *)(a3 + 16) = result;
  *a1 = (tlv *)((char *)v5 + 131);
  return result;
}

void sub_1A60EB1BC(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::CoreDumpCrashReasonQ6String>()
{
  return 134;
}

__n128 tlv::writeV<bsp::tlv::abm::CoreDumpCrashReasonQ6String>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v2 + 64) = v5;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(v2 + 127) = *(_DWORD *)(a2 + 127);
  *(_OWORD *)(v2 + 96) = v7;
  *(_OWORD *)(v2 + 112) = v8;
  *(__n128 *)(v2 + 80) = result;
  *a1 = v2 + 131;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CoreDumpCrashReasonQ6Line>(tlv **a1, int a2)
{
  long long v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1A60EB2B4(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::CoreDumpCrashReasonQ6Line>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::CoreDumpCrashReasonQ6Line>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  _WORD *v2 = *a2;
  *uint64_t result = v2 + 1;
  return result;
}

char *abm::data::getDataPropertyNameFromDict(xpc_object_t *a1)
{
  if (MEMORY[0x1A6275E60](*a1) != MEMORY[0x1E4F14590]) {
    return "Unknown";
  }
  xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataProperty");
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  unsigned int v3 = xpc::dyn_cast_or_default();
  xpc_release(object);
  if (v3 < 5) {
    return off_1E5C46FC0[v3];
  }
  else {
    return "Unknown";
  }
}

void sub_1A60EB3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::getDataPropertyTypeFromDict(xpc_object_t *a1)
{
  if (MEMORY[0x1A6275E60](*a1) != MEMORY[0x1E4F14590]) {
    return 5;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataProperty");
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  unsigned int v4 = xpc::dyn_cast_or_default();
  xpc_release(object);
  if (v4 >= 5) {
    return 5;
  }
  else {
    return v4;
  }
}

void sub_1A60EB460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void abm::data::DataAggregationProtocol::toDict(abm::data::DataAggregationProtocol *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A6275E60](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(0);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  long long v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataAggregationProtocol", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationProtocol::addToDict(abm::data::DataAggregationProtocol *this, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataAggregationProtocol", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

const char *abm::data::DataAggregationProtocol::asString(abm::data::DataAggregationProtocol *this)
{
  uint64_t v1 = *((int *)this + 3);
  if (v1 > 2) {
    return "unknown";
  }
  else {
    return off_1E5C46FE8[v1];
  }
}

void abm::data::DataProperty<abm::data::DataAggregationProtocol>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A6275E60](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(0);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationProtocol>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1EFB0A3F0;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1A6275E60](*a1) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(*a1, "kDataAggregationProtocol"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataAggregationProtocol");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    int v5 = xpc::dyn_cast_or_default();
    xpc_release(object);
    if (v5)
    {
      if (v5 == 1)
      {
        *(_DWORD *)(a2 + 12) = 1;
      }
      else if (v5 == 2)
      {
        *(_DWORD *)(a2 + 12) = 2;
      }
      else
      {
        *(unsigned char *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 12) = 3;
      }
    }
    else
    {
      *(_DWORD *)(a2 + 12) = 0;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1A60EB8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationProtocol>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1EFB0A3F0;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (result >= 3)
  {
    *(unsigned char *)(a2 + 8) = 0;
    uint64_t result = 3;
  }
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataAggregationMaxDatagrams::toDict(abm::data::DataAggregationMaxDatagrams *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A6275E60](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(1);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  long long v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataAggregationMaxDatagrams", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationMaxDatagrams::addToDict(abm::data::DataAggregationMaxDatagrams *this, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataAggregationMaxDatagrams", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A6275E60](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(1);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1EFB0A438;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1A6275E60](*a1) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(*a1, "kDataAggregationMaxDatagrams"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataAggregationMaxDatagrams");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(_DWORD *)(a2 + 12) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1A60EBCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1EFB0A438;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataAggregationMaxSize::toDict(abm::data::DataAggregationMaxSize *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A6275E60](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(2);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  long long v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataAggregationMaxSize", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationMaxSize::addToDict(abm::data::DataAggregationMaxSize *this, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataAggregationMaxSize", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxSize>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A6275E60](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxSize>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1EFB0A480;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1A6275E60](*a1) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(*a1, "kDataAggregationMaxSize"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataAggregationMaxSize");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(_DWORD *)(a2 + 12) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1A60EC0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationMaxSize>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1EFB0A480;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataFlowControl::toDict(abm::data::DataFlowControl *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A6275E60](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(3);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  long long v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_BOOL_create(*((unsigned char *)this + 9));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataFlowControl", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataFlowControl::addToDict(abm::data::DataFlowControl *this, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_BOOL_create(*((unsigned char *)this + 9));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataFlowControl", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataFlowControl>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A6275E60](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(3);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataFlowControl>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1EFB0A4C8;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1A6275E60](*a1) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(*a1, "kDataFlowControl"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataFlowControl");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(unsigned char *)(a2 + 9) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1A60EC500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataFlowControl>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1EFB0A4C8;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(unsigned char *)(a2 + 9) = result != 0;
  return result;
}

void abm::data::DataPowerSave::toDict(abm::data::DataPowerSave *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A6275E60](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(4);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  long long v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_BOOL_create(*((unsigned char *)this + 9));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataPowerSave", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataPowerSave::addToDict(abm::data::DataPowerSave *this, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_BOOL_create(*((unsigned char *)this + 9));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataPowerSave", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataPowerSave>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A6275E60](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(4);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataPowerSave>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1EFB0A510;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1A6275E60](*a1) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(*a1, "kDataPowerSave"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataPowerSave");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(unsigned char *)(a2 + 9) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1A60EC914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataPowerSave>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1EFB0A510;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(unsigned char *)(a2 + 9) = result != 0;
  return result;
}

void abm::HelperServer::create(uint64_t *a1@<X0>, uint64_t **a2@<X8>)
{
  xpc_object_t v4 = (uint64_t *)operator new(0x28uLL);
  v4[1] = 0;
  uint64_t v4[2] = 0;
  uint64_t *v4 = (uint64_t)&unk_1EFB0A558;
  xpc_object_t v5 = v4 + 3;
  uint64_t v6 = *a1;
  xpc_object_t v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v9 = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v11 = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    xpc_object_t v9 = 0;
    xpc_object_t v11 = 0;
  }
  uint64_t v10 = v6;
  abm::HelperServerInternal::create(&v10, v5);
  long long v8 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *a2 = v5;
  a2[1] = v4;
}

void sub_1A60ECAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v14);
  _Unwind_Resume(a1);
}

uint64_t *abm::HelperServer::HelperServer(uint64_t *a1, uint64_t *a2)
{
  xpc_object_t v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  abm::HelperServerInternal::create(v5, a1);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

{
  std::__shared_weak_count *v3;
  uint64_t v5[2];

  xpc_object_t v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  abm::HelperServerInternal::create(v5, a1);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_1A60ECC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A60ECCBC(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void abm::HelperServer::~HelperServer(abm::HelperServer *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;

  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void abm::HelperServer::start(abm::HelperServer *this)
{
  uint64_t v1 = *(void *)this;
  xpc_object_t v2 = (uint64_t *)(*(void *)this + 72);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN3abm20HelperServerInternal5startEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_11;
  v3[4] = v1;
  ctu::SharedSynchronizable<abm::HelperServerInternal>::execute_wrapped(v2, (uint64_t)v3);
}

uint64_t abm::HelperServer::isBusy(abm::HelperServerInternal **this)
{
  return abm::HelperServerInternal::isBusy(*this);
}

void abm::HelperServer::stop(abm::HelperServer *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *(void *)this + 72;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  uint64_t v4[2] = ___ZN3abm20HelperServerInternal4stopEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_15;
  v4[4] = v1;
  xpc_object_t v5 = v4;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  uint64_t block[3] = &__block_descriptor_tmp_42;
  void block[4] = v2;
  void block[5] = &v5;
  xpc_object_t v3 = *(NSObject **)(v1 + 88);
  if (*(void *)(v1 + 96)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
}

void std::__shared_ptr_emplace<abm::HelperServerWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<abm::HelperServerWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0A558;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<abm::HelperServerWrapper>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

double ICETrace::createInternal@<D0>(_OWORD *a1@<X8>)
{
  xpc_object_t v3 = (ICETrace *)operator new(0x1F0uLL);
  ICETrace::ICETrace(v3);
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<ICETrace>::shared_ptr[abi:ne180100]<ICETrace,std::shared_ptr<ICETrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<ICETrace>(ICETrace*)::{lambda(ICETrace*)#1},void>(&v5, (uint64_t)v3);
  ctu::Loggable<Trace,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v5);
  double result = *(double *)&v5;
  *a1 = v5;
  return result;
}

void sub_1A60ED090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A60ED0A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ICETrace::ICETrace(ICETrace *this)
{
  char v17 = 8;
  strcpy((char *)__p, "trace.bb");
  uint64_t v2 = (capabilities::trace *)Trace::Trace((uint64_t)this, (uint64_t)__p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  *(void *)this = &unk_1EFB0A5A8;
  *((_DWORD *)this + 38) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((unsigned char *)this + 317) = 1;
  *((void *)this + 40) = 0;
  *((_WORD *)this + 164) = 0;
  *((unsigned char *)this + 336) = 0;
  xpc_object_t v3 = (capabilities::trace *)capabilities::trace::defaultHistorySizeMB(v2);
  *((_DWORD *)this + 85) = v3;
  *((unsigned char *)this + 344) = 0;
  xpc_object_t v4 = (capabilities::radio *)capabilities::trace::defaultFileSizeBytes(v3);
  *((_DWORD *)this + 87) = v4;
  long long v5 = (capabilities::abs *)capabilities::radio::vendor(v4);
  shouldUseMinBasebandTransportIOReadSize = (capabilities::radio *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v5);
  if (shouldUseMinBasebandTransportIOReadSize) {
    int v7 = 0x4000;
  }
  else {
    int v7 = 0x8000;
  }
  *((_DWORD *)this + 88) = v7;
  long long v8 = (capabilities::abs *)capabilities::radio::vendor(shouldUseMinBasebandTransportIOReadSize);
  if ((v8 - 1) > 2) {
    int v9 = 23;
  }
  else {
    int v9 = dword_1A61F81A0[(int)v8 - 1];
  }
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadCount(v8)) {
    goto LABEL_10;
  }
  if (v9 == 2)
  {
    int v10 = 16;
  }
  else
  {
    if (v9 != 16 && v9 != 15)
    {
LABEL_10:
      int v10 = 4;
      goto LABEL_16;
    }
    int v10 = 36;
  }
LABEL_16:
  *((_DWORD *)this + 89) = v10;
  *((unsigned char *)this + 360) = 0;
  *((_DWORD *)this + 95) = 0;
  *(void *)((char *)this + 372) = 0;
  *(void *)((char *)this + 364) = 0;
  *((void *)this + 48) = TelephonyBasebandCreateController();
  GetABMLogServer(&v14);
  xpc_object_t v11 = *((void *)this + 11);
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  BasebandTransport::create((capabilities::radio *)&v14, &object, (uint64_t)this + 392);
  if (object) {
    dispatch_release(object);
  }
  CFDictionaryRef v12 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  *((unsigned char *)this + 473) = 0;
  *((void *)this + 60) = 0;
  *((void *)this + 61) = 0;
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 51) = 0;
  *((unsigned char *)this + 432) = 0;
  *((unsigned char *)this + 471) = 0;
  *(void *)((char *)this + 463) = 0;
  *(void *)((char *)this + 455) = 0;
}

void sub_1A60ED2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v17 + 368);
  int v20 = *(NSObject **)(v17 + 320);
  if (v20)
  {
    dispatch_group_leave(v20);
    long long v21 = *(NSObject **)(v17 + 320);
    if (v21) {
      dispatch_release(v21);
    }
  }
  int v22 = *(void **)(v17 + 280);
  if (v22)
  {
    *(void *)(v17 + 288) = v22;
    operator delete(v22);
    unint64_t v23 = *(void **)(v17 + 256);
    if (!v23)
    {
LABEL_8:
      uint64_t v24 = *(void **)(v17 + 232);
      if (!v24) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else
  {
    unint64_t v23 = *(void **)(v17 + 256);
    if (!v23) {
      goto LABEL_8;
    }
  }
  *(void *)(v17 + 264) = v23;
  operator delete(v23);
  uint64_t v24 = *(void **)(v17 + 232);
  if (!v24)
  {
LABEL_9:
    if ((*(char *)(v17 + 231) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  *(void *)(v17 + 240) = v24;
  operator delete(v24);
  if ((*(char *)(v17 + 231) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(v17 + 207) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(v17 + 208));
  if ((*(char *)(v17 + 207) & 0x80000000) == 0)
  {
LABEL_11:
    if ((*(char *)(v17 + 183) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_18:
  operator delete(*(void **)(v17 + 184));
  if ((*(char *)(v17 + 183) & 0x80000000) == 0)
  {
LABEL_13:
    Trace::~Trace((Trace *)v17);
    _Unwind_Resume(a1);
  }
LABEL_12:
  operator delete(*v18);
  goto LABEL_13;
}

uint64_t ICETrace::getDefaultEnabled(ICETrace *this)
{
  int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
  return IsCarrierBuild & (TelephonyUtilIsInternalBuild() ^ 1);
}

BOOL ICETrace::init(void *a1, uint64_t a2, uint64_t *a3, NSObject **a4)
{
  uint64_t v24 = 0;
  std::string::size_type v25 = &v24;
  uint64_t v26 = 0x2000000000;
  char v27 = 0;
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 1174405120;
  void v19[2] = ___ZN8ICETrace4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_8weak_ptrIN3abm19BasebandTracingTaskEEEN8dispatch5groupE_block_invoke;
  v19[3] = &unk_1EFB0A678;
  v19[4] = &v24;
  v19[5] = a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  int v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v21 = *a3;
  int v22 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v8 = *a4;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  uint64_t v28 = v19;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_0;
  uint64_t block[3] = &__block_descriptor_tmp_186;
  void block[4] = a1 + 9;
  void block[5] = &v28;
  int v9 = a1[11];
  if (a1[12])
  {
    dispatch_async_and_wait(v9, block);
    int v10 = (std::__shared_weak_count *)a1[10];
    if (!v10) {
LABEL_22:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    dispatch_sync(v9, block);
    int v10 = (std::__shared_weak_count *)a1[10];
    if (!v10) {
      goto LABEL_22;
    }
  }
  uint64_t v11 = a1[9];
  CFDictionaryRef v12 = std::__shared_weak_count::lock(v10);
  if (!v12) {
    goto LABEL_22;
  }
  CFDictionaryRef v13 = v12;
  uint64_t v14 = operator new(8uLL);
  *uint64_t v14 = a1;
  long long v15 = a1[11];
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v16 = operator new(0x18uLL);
  *long long v16 = v14;
  v16[1] = v11;
  void v16[2] = v13;
  dispatch_async_f(v15, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<ICETrace::init(std::string,std::weak_ptr<abm::BasebandTracingTask>,dispatch::group)::$_0>(ICETrace::init(std::string,std::weak_ptr<abm::BasebandTracingTask>,dispatch::group)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ICETrace::init(std::string,std::weak_ptr<abm::BasebandTracingTask>,dispatch::group)::$_0,std::default_delete<ICETrace::init(std::string,std::weak_ptr<abm::BasebandTracingTask>,dispatch::group)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  int v17 = *((unsigned __int8 *)v25 + 24);
  if (object) {
    dispatch_release(object);
  }
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(&v24, 8);
  return v17 != 0;
}

void sub_1A60ED664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_8weak_ptrIN3abm19BasebandTracingTaskEEEN8dispatch5groupE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    std::string v21 = *(std::string *)(a1 + 48);
    xpc_object_t v3 = *(std::__shared_weak_count **)(a1 + 80);
    uint64_t v19 = *(void *)(a1 + 72);
    int v20 = v3;
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
  xpc_object_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v19 = *(void *)(a1 + 72);
  int v20 = v3;
  if (v3) {
LABEL_3:
  }
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
LABEL_4:
  xpc_object_t v4 = *(NSObject **)(a1 + 88);
  dispatch_object_t object = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = Trace::init(v2, (void **)&v21.__r_.__value_.__l.__data_, &v19, &object);
  if (object) {
    dispatch_release(object);
  }
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      goto LABEL_205;
    }
LABEL_16:
    HIBYTE(v17[2]) = 7;
    strcpy((char *)v17, "Enabled");
    memset(&__p, 0, sizeof(__p));
    char v24 = 7;
    strcpy((char *)v23, "BBTrace");
    memset(&v25[24], 0, 24);
    BOOL v5 = defaults::get((char *)v23, (char *)v17, (std::string *)&v25[24]);
    if (v5)
    {
      prop::file::get<std::string>((const void **)v23, (uint64_t)v17, (uint64_t)&v25[24], (std::string *)v25);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = *(std::string *)v25;
    }
    if ((v25[47] & 0x80000000) != 0)
    {
      operator delete(*(void **)&v25[24]);
      if ((v24 & 0x80000000) == 0)
      {
LABEL_22:
        if (!v5)
        {
LABEL_27:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v17[2]) & 0x80000000) == 0) {
              goto LABEL_29;
            }
          }
          else if ((SHIBYTE(v17[2]) & 0x80000000) == 0)
          {
            goto LABEL_29;
          }
          operator delete(v17[0]);
LABEL_29:
          HIBYTE(v17[2]) = 4;
          strcpy((char *)v17, "Mode");
          memset(&__p, 0, sizeof(__p));
          char v24 = 7;
          strcpy((char *)v23, "BBTrace");
          memset(&v25[24], 0, 24);
          BOOL v6 = defaults::get((char *)v23, (char *)v17, (std::string *)&v25[24]);
          if (v6)
          {
            prop::file::get<std::string>((const void **)v23, (uint64_t)v17, (uint64_t)&v25[24], (std::string *)v25);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::string __p = *(std::string *)v25;
          }
          if ((v25[47] & 0x80000000) != 0)
          {
            operator delete(*(void **)&v25[24]);
            if ((v24 & 0x80000000) == 0)
            {
LABEL_35:
              if (!v6) {
                goto LABEL_43;
              }
              goto LABEL_41;
            }
          }
          else if ((v24 & 0x80000000) == 0)
          {
            goto LABEL_35;
          }
          operator delete(v23[0]);
          if (!v6) {
            goto LABEL_43;
          }
LABEL_41:
          *(_DWORD *)&v25[24] = -1431655766;
          if (util::convert<int>(&__p, &v25[24], 0)) {
            *(_DWORD *)(v2 + 152) = *(_DWORD *)&v25[24];
          }
LABEL_43:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v17[2]) & 0x80000000) == 0) {
              goto LABEL_45;
            }
          }
          else if ((SHIBYTE(v17[2]) & 0x80000000) == 0)
          {
            goto LABEL_45;
          }
          operator delete(v17[0]);
LABEL_45:
          HIBYTE(v17[2]) = 7;
          strcpy((char *)v17, "History");
          memset(&__p, 0, sizeof(__p));
          char v24 = 7;
          strcpy((char *)v23, "BBTrace");
          memset(&v25[24], 0, 24);
          BOOL v7 = defaults::get((char *)v23, (char *)v17, (std::string *)&v25[24]);
          if (v7)
          {
            prop::file::get<std::string>((const void **)v23, (uint64_t)v17, (uint64_t)&v25[24], (std::string *)v25);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::string __p = *(std::string *)v25;
          }
          if ((v25[47] & 0x80000000) != 0)
          {
            operator delete(*(void **)&v25[24]);
            if ((v24 & 0x80000000) == 0)
            {
LABEL_51:
              if (!v7)
              {
LABEL_58:
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__p.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v17[2]) & 0x80000000) == 0) {
                    goto LABEL_60;
                  }
                }
                else if ((SHIBYTE(v17[2]) & 0x80000000) == 0)
                {
                  goto LABEL_60;
                }
                operator delete(v17[0]);
LABEL_60:
                v25[23] = 4;
                strcpy(v25, "File");
                v25[47] = 7;
                strcpy(&v25[24], "BBTrace");
                prop::get_from_file(&v25[24], v25, v2 + 160);
                if ((v25[47] & 0x80000000) != 0)
                {
                  operator delete(*(void **)&v25[24]);
                  if ((v25[23] & 0x80000000) == 0) {
                    goto LABEL_62;
                  }
                }
                else if ((v25[23] & 0x80000000) == 0)
                {
                  goto LABEL_62;
                }
                operator delete(*(void **)v25);
LABEL_62:
                strcpy(&v25[23], "\nBBTrace");
                strcpy(v25, "File_Sleep");
                v25[47] = 7;
                prop::get_from_file(&v25[24], v25, v2 + 184);
                if ((v25[47] & 0x80000000) != 0)
                {
                  operator delete(*(void **)&v25[24]);
                  if ((v25[23] & 0x80000000) == 0) {
                    goto LABEL_64;
                  }
                }
                else if ((v25[23] & 0x80000000) == 0)
                {
                  goto LABEL_64;
                }
                operator delete(*(void **)v25);
LABEL_64:
                HIBYTE(v17[2]) = 20;
                strcpy((char *)v17, "Enabled_During_Sleep");
                memset(&__p, 0, sizeof(__p));
                char v24 = 7;
                strcpy((char *)v23, "BBTrace");
                memset(&v25[24], 0, 24);
                BOOL v8 = defaults::get((char *)v23, (char *)v17, (std::string *)&v25[24]);
                if (v8)
                {
                  prop::file::get<std::string>((const void **)v23, (uint64_t)v17, (uint64_t)&v25[24], (std::string *)v25);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  std::string __p = *(std::string *)v25;
                }
                if ((v25[47] & 0x80000000) != 0)
                {
                  operator delete(*(void **)&v25[24]);
                  if ((v24 & 0x80000000) == 0)
                  {
LABEL_70:
                    if (!v8)
                    {
LABEL_81:
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(__p.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v17[2]) & 0x80000000) == 0) {
                          goto LABEL_83;
                        }
                      }
                      else if ((SHIBYTE(v17[2]) & 0x80000000) == 0)
                      {
                        goto LABEL_83;
                      }
                      operator delete(v17[0]);
LABEL_83:
                      HIBYTE(v17[2]) = 14;
                      strcpy((char *)v17, "BackgroundMode");
                      memset(&__p, 0, sizeof(__p));
                      char v24 = 7;
                      strcpy((char *)v23, "BBTrace");
                      memset(&v25[24], 0, 24);
                      BOOL v9 = defaults::get((char *)v23, (char *)v17, (std::string *)&v25[24]);
                      if (v9)
                      {
                        prop::file::get<std::string>((const void **)v23, (uint64_t)v17, (uint64_t)&v25[24], (std::string *)v25);
                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(__p.__r_.__value_.__l.__data_);
                        }
                        std::string __p = *(std::string *)v25;
                      }
                      if ((v25[47] & 0x80000000) != 0)
                      {
                        operator delete(*(void **)&v25[24]);
                        if ((v24 & 0x80000000) == 0)
                        {
LABEL_89:
                          if (!v9)
                          {
LABEL_96:
                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                            {
                              operator delete(__p.__r_.__value_.__l.__data_);
                              if ((SHIBYTE(v17[2]) & 0x80000000) == 0) {
                                goto LABEL_98;
                              }
                            }
                            else if ((SHIBYTE(v17[2]) & 0x80000000) == 0)
                            {
                              goto LABEL_98;
                            }
                            operator delete(v17[0]);
LABEL_98:
                            HIBYTE(v17[2]) = 14;
                            strcpy((char *)v17, "High_Watermark");
                            memset(&__p, 0, sizeof(__p));
                            char v24 = 7;
                            strcpy((char *)v23, "BBTrace");
                            memset(&v25[24], 0, 24);
                            BOOL v10 = defaults::get((char *)v23, (char *)v17, (std::string *)&v25[24]);
                            if (v10)
                            {
                              prop::file::get<std::string>((const void **)v23, (uint64_t)v17, (uint64_t)&v25[24], (std::string *)v25);
                              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(__p.__r_.__value_.__l.__data_);
                              }
                              std::string __p = *(std::string *)v25;
                            }
                            if ((v25[47] & 0x80000000) != 0)
                            {
                              operator delete(*(void **)&v25[24]);
                              if ((v24 & 0x80000000) == 0)
                              {
LABEL_104:
                                if (!v10)
                                {
LABEL_111:
                                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                  {
                                    operator delete(__p.__r_.__value_.__l.__data_);
                                    if ((SHIBYTE(v17[2]) & 0x80000000) == 0) {
                                      goto LABEL_113;
                                    }
                                  }
                                  else if ((SHIBYTE(v17[2]) & 0x80000000) == 0)
                                  {
                                    goto LABEL_113;
                                  }
                                  operator delete(v17[0]);
LABEL_113:
                                  HIBYTE(v17[2]) = 13;
                                  strcpy((char *)v17, "Low_Watermark");
                                  memset(&__p, 0, sizeof(__p));
                                  char v24 = 7;
                                  strcpy((char *)v23, "BBTrace");
                                  memset(&v25[24], 0, 24);
                                  BOOL v11 = defaults::get((char *)v23, (char *)v17, (std::string *)&v25[24]);
                                  if (v11)
                                  {
                                    prop::file::get<std::string>((const void **)v23, (uint64_t)v17, (uint64_t)&v25[24], (std::string *)v25);
                                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                                      operator delete(__p.__r_.__value_.__l.__data_);
                                    }
                                    std::string __p = *(std::string *)v25;
                                  }
                                  if ((v25[47] & 0x80000000) != 0)
                                  {
                                    operator delete(*(void **)&v25[24]);
                                    if ((v24 & 0x80000000) == 0)
                                    {
LABEL_119:
                                      if (!v11)
                                      {
LABEL_126:
                                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                        {
                                          operator delete(__p.__r_.__value_.__l.__data_);
                                          if ((SHIBYTE(v17[2]) & 0x80000000) == 0) {
                                            goto LABEL_128;
                                          }
                                        }
                                        else if ((SHIBYTE(v17[2]) & 0x80000000) == 0)
                                        {
                                          goto LABEL_128;
                                        }
                                        operator delete(v17[0]);
LABEL_128:
                                        v25[23] = 7;
                                        strcpy(v25, "ETBFile");
                                        v25[47] = 7;
                                        strcpy(&v25[24], "BBTrace");
                                        prop::get_from_file(&v25[24], v25, v2 + 208);
                                        if ((v25[47] & 0x80000000) != 0)
                                        {
                                          operator delete(*(void **)&v25[24]);
                                          if ((v25[23] & 0x80000000) == 0) {
                                            goto LABEL_130;
                                          }
                                        }
                                        else if ((v25[23] & 0x80000000) == 0)
                                        {
                                          goto LABEL_130;
                                        }
                                        operator delete(*(void **)v25);
LABEL_130:
                                        HIBYTE(v17[2]) = 18;
                                        strcpy((char *)v17, "MaxMemoryFileCount");
                                        memset(&__p, 0, sizeof(__p));
                                        char v24 = 7;
                                        strcpy((char *)v23, "BBTrace");
                                        memset(&v25[24], 0, 24);
                                        BOOL v12 = defaults::get((char *)v23, (char *)v17, (std::string *)&v25[24]);
                                        if (v12)
                                        {
                                          prop::file::get<std::string>((const void **)v23, (uint64_t)v17, (uint64_t)&v25[24], (std::string *)v25);
                                          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                                            operator delete(__p.__r_.__value_.__l.__data_);
                                          }
                                          std::string __p = *(std::string *)v25;
                                        }
                                        if ((v25[47] & 0x80000000) != 0)
                                        {
                                          operator delete(*(void **)&v25[24]);
                                          if ((v24 & 0x80000000) == 0)
                                          {
LABEL_136:
                                            if (!v12)
                                            {
LABEL_145:
                                              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                              {
                                                operator delete(__p.__r_.__value_.__l.__data_);
                                                if ((SHIBYTE(v17[2]) & 0x80000000) == 0) {
                                                  goto LABEL_147;
                                                }
                                              }
                                              else if ((SHIBYTE(v17[2]) & 0x80000000) == 0)
                                              {
                                                goto LABEL_147;
                                              }
                                              operator delete(v17[0]);
LABEL_147:
                                              HIBYTE(v17[2]) = 15;
                                              strcpy((char *)v17, "KeepScratchLogs");
                                              memset(&__p, 0, sizeof(__p));
                                              char v24 = 7;
                                              strcpy((char *)v23, "BBTrace");
                                              memset(&v25[24], 0, 24);
                                              BOOL v13 = defaults::get((char *)v23, (char *)v17, (std::string *)&v25[24]);
                                              if (v13)
                                              {
                                                prop::file::get<std::string>((const void **)v23, (uint64_t)v17, (uint64_t)&v25[24], (std::string *)v25);
                                                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                                                  operator delete(__p.__r_.__value_.__l.__data_);
                                                }
                                                std::string __p = *(std::string *)v25;
                                              }
                                              if ((v25[47] & 0x80000000) != 0)
                                              {
                                                operator delete(*(void **)&v25[24]);
                                                if ((v24 & 0x80000000) == 0)
                                                {
LABEL_153:
                                                  if (!v13)
                                                  {
LABEL_160:
                                                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                    {
                                                      operator delete(__p.__r_.__value_.__l.__data_);
                                                      if ((SHIBYTE(v17[2]) & 0x80000000) == 0) {
                                                        goto LABEL_162;
                                                      }
                                                    }
                                                    else if ((SHIBYTE(v17[2]) & 0x80000000) == 0)
                                                    {
                                                      goto LABEL_162;
                                                    }
                                                    operator delete(v17[0]);
LABEL_162:
                                                    HIBYTE(v17[2]) = 8;
                                                    strcpy((char *)v17, "FileSize");
                                                    memset(&__p, 0, sizeof(__p));
                                                    char v24 = 7;
                                                    strcpy((char *)v23, "BBTrace");
                                                    memset(&v25[24], 0, 24);
                                                    BOOL v14 = defaults::get((char *)v23, (char *)v17, (std::string *)&v25[24]);
                                                    if (v14)
                                                    {
                                                      prop::file::get<std::string>((const void **)v23, (uint64_t)v17, (uint64_t)&v25[24], (std::string *)v25);
                                                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                                                        operator delete(__p.__r_.__value_.__l.__data_);
                                                      }
                                                      std::string __p = *(std::string *)v25;
                                                    }
                                                    if ((v25[47] & 0x80000000) != 0)
                                                    {
                                                      operator delete(*(void **)&v25[24]);
                                                      if ((v24 & 0x80000000) == 0)
                                                      {
LABEL_168:
                                                        if (!v14)
                                                        {
LABEL_175:
                                                          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                          {
                                                            operator delete(__p.__r_.__value_.__l.__data_);
                                                            if ((SHIBYTE(v17[2]) & 0x80000000) == 0) {
                                                              goto LABEL_177;
                                                            }
                                                          }
                                                          else if ((SHIBYTE(v17[2]) & 0x80000000) == 0)
                                                          {
                                                            goto LABEL_177;
                                                          }
                                                          operator delete(v17[0]);
LABEL_177:
                                                          HIBYTE(v17[2]) = 6;
                                                          strcpy((char *)v17, "SizeIO");
                                                          memset(&__p, 0, sizeof(__p));
                                                          char v24 = 7;
                                                          strcpy((char *)v23, "BBTrace");
                                                          memset(&v25[24], 0, 24);
                                                          BOOL v15 = defaults::get((char *)v23, (char *)v17, (std::string *)&v25[24]);
                                                          if (v15)
                                                          {
                                                            prop::file::get<std::string>((const void **)v23, (uint64_t)v17, (uint64_t)&v25[24], (std::string *)v25);
                                                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                                                              operator delete(__p.__r_.__value_.__l.__data_);
                                                            }
                                                            std::string __p = *(std::string *)v25;
                                                          }
                                                          if ((v25[47] & 0x80000000) != 0)
                                                          {
                                                            operator delete(*(void **)&v25[24]);
                                                            if ((v24 & 0x80000000) == 0)
                                                            {
LABEL_183:
                                                              if (!v15)
                                                              {
LABEL_190:
                                                                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                                {
                                                                  operator delete(__p.__r_.__value_.__l.__data_);
                                                                  if ((SHIBYTE(v17[2]) & 0x80000000) == 0) {
                                                                    goto LABEL_192;
                                                                  }
                                                                }
                                                                else if ((SHIBYTE(v17[2]) & 0x80000000) == 0)
                                                                {
                                                                  goto LABEL_192;
                                                                }
                                                                operator delete(v17[0]);
LABEL_192:
                                                                HIBYTE(v17[2]) = 14;
                                                                strcpy((char *)v17, "NumberOfReadIO");
                                                                memset(&__p, 0, sizeof(__p));
                                                                char v24 = 7;
                                                                strcpy((char *)v23, "BBTrace");
                                                                memset(&v25[24], 0, 24);
                                                                BOOL v16 = defaults::get((char *)v23, (char *)v17, (std::string *)&v25[24]);
                                                                if (v16)
                                                                {
                                                                  prop::file::get<std::string>((const void **)v23, (uint64_t)v17, (uint64_t)&v25[24], (std::string *)v25);
                                                                  std::string __p = *(std::string *)v25;
                                                                }
                                                                if ((v25[47] & 0x80000000) != 0)
                                                                {
                                                                  operator delete(*(void **)&v25[24]);
                                                                  if ((v24 & 0x80000000) == 0)
                                                                  {
LABEL_196:
                                                                    if (!v16)
                                                                    {
LABEL_203:
                                                                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                                      {
                                                                        operator delete(__p.__r_.__value_.__l.__data_);
                                                                        if ((SHIBYTE(v17[2]) & 0x80000000) == 0) {
                                                                          goto LABEL_205;
                                                                        }
                                                                      }
                                                                      else if ((SHIBYTE(v17[2]) & 0x80000000) == 0)
                                                                      {
                                                                        goto LABEL_205;
                                                                      }
                                                                      operator delete(v17[0]);
                                                                      goto LABEL_205;
                                                                    }
LABEL_202:
                                                                    util::convert<unsigned int>(&__p, (_DWORD *)(v2 + 356), 0);
                                                                    goto LABEL_203;
                                                                  }
                                                                }
                                                                else if ((v24 & 0x80000000) == 0)
                                                                {
                                                                  goto LABEL_196;
                                                                }
                                                                operator delete(v23[0]);
                                                                if (!v16) {
                                                                  goto LABEL_203;
                                                                }
                                                                goto LABEL_202;
                                                              }
LABEL_189:
                                                              util::convert<unsigned int>(&__p, (_DWORD *)(v2 + 352), 0);
                                                              goto LABEL_190;
                                                            }
                                                          }
                                                          else if ((v24 & 0x80000000) == 0)
                                                          {
                                                            goto LABEL_183;
                                                          }
                                                          operator delete(v23[0]);
                                                          if (!v15) {
                                                            goto LABEL_190;
                                                          }
                                                          goto LABEL_189;
                                                        }
LABEL_174:
                                                        util::convert<unsigned int>(&__p, (_DWORD *)(v2 + 348), 0);
                                                        goto LABEL_175;
                                                      }
                                                    }
                                                    else if ((v24 & 0x80000000) == 0)
                                                    {
                                                      goto LABEL_168;
                                                    }
                                                    operator delete(v23[0]);
                                                    if (!v14) {
                                                      goto LABEL_175;
                                                    }
                                                    goto LABEL_174;
                                                  }
LABEL_159:
                                                  util::convert<BOOL>(&__p, (BOOL *)(v2 + 344), 0);
                                                  goto LABEL_160;
                                                }
                                              }
                                              else if ((v24 & 0x80000000) == 0)
                                              {
                                                goto LABEL_153;
                                              }
                                              operator delete(v23[0]);
                                              if (!v13) {
                                                goto LABEL_160;
                                              }
                                              goto LABEL_159;
                                            }
LABEL_144:
                                            util::convert<unsigned int>(&__p, (_DWORD *)(v2 + 332), 0);
                                            goto LABEL_145;
                                          }
                                        }
                                        else if ((v24 & 0x80000000) == 0)
                                        {
                                          goto LABEL_136;
                                        }
                                        operator delete(v23[0]);
                                        if (!v12) {
                                          goto LABEL_145;
                                        }
                                        goto LABEL_144;
                                      }
LABEL_125:
                                      util::convert<int>(&__p, (_DWORD *)(v2 + 312), 0);
                                      goto LABEL_126;
                                    }
                                  }
                                  else if ((v24 & 0x80000000) == 0)
                                  {
                                    goto LABEL_119;
                                  }
                                  operator delete(v23[0]);
                                  if (!v11) {
                                    goto LABEL_126;
                                  }
                                  goto LABEL_125;
                                }
LABEL_110:
                                util::convert<int>(&__p, (_DWORD *)(v2 + 308), 0);
                                goto LABEL_111;
                              }
                            }
                            else if ((v24 & 0x80000000) == 0)
                            {
                              goto LABEL_104;
                            }
                            operator delete(v23[0]);
                            if (!v10) {
                              goto LABEL_111;
                            }
                            goto LABEL_110;
                          }
LABEL_95:
                          util::convert<BOOL>(&__p, (BOOL *)(v2 + 304), 0);
                          goto LABEL_96;
                        }
                      }
                      else if ((v24 & 0x80000000) == 0)
                      {
                        goto LABEL_89;
                      }
                      operator delete(v23[0]);
                      if (!v9) {
                        goto LABEL_96;
                      }
                      goto LABEL_95;
                    }
LABEL_80:
                    util::convert<BOOL>(&__p, (BOOL *)(v2 + 316), 0);
                    goto LABEL_81;
                  }
                }
                else if ((v24 & 0x80000000) == 0)
                {
                  goto LABEL_70;
                }
                operator delete(v23[0]);
                if (!v8) {
                  goto LABEL_81;
                }
                goto LABEL_80;
              }
LABEL_57:
              util::convert<int>(&__p, (_DWORD *)(v2 + 340), 0);
              goto LABEL_58;
            }
          }
          else if ((v24 & 0x80000000) == 0)
          {
            goto LABEL_51;
          }
          operator delete(v23[0]);
          if (!v7) {
            goto LABEL_58;
          }
          goto LABEL_57;
        }
LABEL_26:
        util::convert<BOOL>(&__p, (BOOL *)(v2 + 336), 0);
        goto LABEL_27;
      }
    }
    else if ((v24 & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v23[0]);
    if (!v5) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    goto LABEL_16;
  }
LABEL_205:
  *(unsigned char *)(v2 + 472) = 0;
}

void sub_1A60EE510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A60EE654(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_object_t object, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (object)
  {
    dispatch_release(object);
    int v20 = a14;
    if (!a14)
    {
LABEL_3:
      if (a20 < 0) {
        goto LABEL_10;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v20 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v20);
  if (a20 < 0) {
LABEL_10:
  }
    JUMPOUT(0x1A60EE648);
LABEL_11:
  JUMPOUT(0x1A60EE64CLL);
}

void __copy_helper_block_e8_48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c50_ZTSNSt3__18weak_ptrIN3abm19BasebandTracingTaskEEE88c21_ZTSN8dispatch5groupE(std::string *a1, uint64_t a2)
{
  xpc_object_t v4 = a1 + 2;
  if ((*(char *)(a2 + 71) & 0x80000000) == 0)
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    std::string::size_type v6 = *(void *)(a2 + 80);
    a1[3].__r_.__value_.__r.__words[0] = *(void *)(a2 + 72);
    a1[3].__r_.__value_.__l.__size_ = v6;
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  std::string::size_type v6 = *(void *)(a2 + 80);
  a1[3].__r_.__value_.__r.__words[0] = *(void *)(a2 + 72);
  a1[3].__r_.__value_.__l.__size_ = v6;
  if (v6) {
LABEL_3:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
LABEL_4:
  BOOL v7 = *(NSObject **)(a2 + 88);
  a1[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
  if (v7)
  {
    dispatch_retain(v7);
  }
}

void __destroy_helper_block_e8_48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c50_ZTSNSt3__18weak_ptrIN3abm19BasebandTracingTaskEEE88c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 88);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_object_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  if (*(char *)(a1 + 71) < 0)
  {
    xpc_object_t v4 = *(void **)(a1 + 48);
    operator delete(v4);
  }
}

void ICETrace::~ICETrace(ICETrace *this)
{
  *(void *)this = &unk_1EFB0A5A8;
  BasebandTransport::close(*((BasebandTransport **)this + 49));
  if (*((unsigned char *)this + 472))
  {
    dispatch_group_leave(*((dispatch_group_t *)this + 18));
    *((unsigned char *)this + 472) = 0;
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 47);
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *((unsigned char *)this + 336) = 0;
  xpc_object_t v3 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)*((void *)this + 58);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if ((*((char *)this + 455) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (*((char *)this + 455) < 0) {
LABEL_12:
  }
    operator delete(*((void **)this + 54));
LABEL_13:
  long long v5 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    std::string::size_type v6 = (const void *)*((void *)this + 51);
    if (!v6) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  std::string::size_type v6 = (const void *)*((void *)this + 51);
  if (v6) {
LABEL_16:
  }
    _Block_release(v6);
LABEL_17:
  BOOL v7 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  BOOL v8 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  BOOL v9 = *((void *)this + 40);
  if (v9)
  {
    dispatch_group_leave(v9);
    BOOL v10 = *((void *)this + 40);
    if (v10) {
      dispatch_release(v10);
    }
  }
  BOOL v11 = (void *)*((void *)this + 35);
  if (v11)
  {
    *((void *)this + 36) = v11;
    operator delete(v11);
  }
  BOOL v12 = (void *)*((void *)this + 32);
  if (v12)
  {
    *((void *)this + 33) = v12;
    operator delete(v12);
  }
  BOOL v13 = (void *)*((void *)this + 29);
  if (v13)
  {
    *((void *)this + 30) = v13;
    operator delete(v13);
  }
  if (*((char *)this + 231) < 0)
  {
    operator delete(*((void **)this + 26));
    if ((*((char *)this + 207) & 0x80000000) == 0)
    {
LABEL_34:
      if ((*((char *)this + 183) & 0x80000000) == 0) {
        goto LABEL_35;
      }
      goto LABEL_40;
    }
  }
  else if ((*((char *)this + 207) & 0x80000000) == 0)
  {
    goto LABEL_34;
  }
  operator delete(*((void **)this + 23));
  if ((*((char *)this + 183) & 0x80000000) == 0)
  {
LABEL_35:
    BOOL v14 = this;
    goto LABEL_37;
  }
LABEL_40:
  operator delete(*((void **)this + 20));
  BOOL v14 = this;

LABEL_37:
  Trace::~Trace(v14);
}

{
  void *v1;
  uint64_t vars8;

  ICETrace::~ICETrace(this);

  operator delete(v1);
}

void ICETrace::closeTransport_sync(ICETrace *this)
{
  if (*((unsigned char *)this + 472))
  {
    dispatch_group_leave(*((dispatch_group_t *)this + 18));
    *((unsigned char *)this + 472) = 0;
  }
}

void std::shared_ptr<TraceFileCollection>::reset[abi:ne180100](void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

const char *ICETrace::getName(ICETrace *this)
{
  return "trace.bb";
}

void ICETrace::getSettingPrefix(char *a1@<X8>)
{
  a1[23] = 15;
  strcpy(a1, "BasebandTrace::");
}

uint64_t ICETrace::openTransport_sync(ICETrace *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (*(_DWORD *)(*((void *)this + 49) + 328) == 1)
    {
LABEL_5:
      std::string::size_type v6 = *((void *)this + 5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEFAULT, "#I Transport is open already", buf, 2u);
      }
      uint64_t v7 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    if (*(_DWORD *)(*((void *)this + 49) + 328) == 1) {
      goto LABEL_5;
    }
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN8ICETrace18openTransport_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_6_2;
  aBlock[4] = this;
  void aBlock[5] = v3;
  gid_t v33 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  BOOL v8 = _Block_copy(aBlock);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 1174405120;
  void v30[2] = ___ZN8ICETrace18openTransport_syncEv_block_invoke_7;
  v30[3] = &__block_descriptor_tmp_12_1;
  v30[4] = this;
  v30[5] = v3;
  int v31 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  BOOL v9 = _Block_copy(v30);
  BOOL v10 = (void *)*((void *)this + 51);
  *((void *)this + 51) = v9;
  if (v10) {
    _Block_release(v10);
  }
  shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)v10);
  capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize);
  uint64_t v12 = *((void *)this + 49);
  int v21 = 9;
  char v22 = 0;
  __int16 v23 = -21846;
  char v24 = -86;
  uint64_t v25 = 10;
  uint64_t v26 = *((void *)this + 44);
  uint64_t v27 = 0;
  char v28 = 0;
  memset(v29, 170, sizeof(v29));
  if (v8) {
    BOOL v13 = _Block_copy(v8);
  }
  else {
    BOOL v13 = 0;
  }
  int v20 = v13;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, int *, void **))(*(void *)v12 + 48))(v12, &v21, &v20);
  BOOL v14 = (config::hw *)v20;
  if (v20) {
    _Block_release(v20);
  }
  if (v7 && (config::hw::watch(v14) & 1) == 0 && !*((unsigned char *)this + 304))
  {
    uint64_t v16 = *((void *)this + 49);
    int v17 = (const void *)*((void *)this + 51);
    if (v17)
    {
      __int16 v18 = _Block_copy(v17);
      uint64_t v19 = v18;
      BasebandTransport::reportStatus(v16, 600, &v19);
      if (v18) {
        _Block_release(v18);
      }
    }
    else
    {
      uint64_t v19 = 0;
      BasebandTransport::reportStatus(v16, 600, &v19);
    }
  }
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  if (v8) {
    _Block_release(v8);
  }
  if (v33) {
    std::__shared_weak_count::__release_weak(v33);
  }
LABEL_25:
  std::__shared_weak_count::__release_weak(v5);
  return v7;
}

void sub_1A60EEEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *aBlock, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  if (v31) {
    _Block_release(v31);
  }
  if (a30) {
    std::__shared_weak_count::__release_weak(a30);
  }
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace18openTransport_syncEv_block_invoke(void *a1, const unsigned __int8 *a2, int a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    BOOL v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      BOOL v9 = v8;
      if (a1[5])
      {
        if (*(unsigned char *)(v7 + 336) && !*(unsigned char *)(v7 + 360) && (BOOL v11 = *(TraceFileCollection **)(v7 + 368)) != 0)
        {
          uint64_t v12 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::string buf = 67109120;
            int v18 = a3;
            _os_log_debug_impl(&dword_1A609F000, v12, OS_LOG_TYPE_DEBUG, "#D Received TRACE chunk size %d", buf, 8u);
            BOOL v11 = *(TraceFileCollection **)(v7 + 368);
          }
          TraceFileCollection::handleReadData(v11, a2);
          BOOL v13 = (capabilities::abs *)TraceFileCollection::getInMemoryRemaining(*(TraceFileCollection **)(v7 + 368));
          unsigned int v14 = v13;
          if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v13)) {
            unsigned int v15 = 0x8000;
          }
          else {
            unsigned int v15 = 0x10000;
          }
          if (v14 <= v15)
          {
            uint64_t v16 = *(NSObject **)(v7 + 40);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_debug_impl(&dword_1A609F000, v16, OS_LOG_TYPE_DEBUG, "#D Archiving...", buf, 2u);
            }
            TraceFileCollection::archive(*(TraceFileCollection **)(v7 + 368));
          }
        }
        else
        {
          BOOL v10 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::string buf = 67109120;
            int v18 = a3;
            _os_log_debug_impl(&dword_1A609F000, v10, OS_LOG_TYPE_DEBUG, "#D Trace disabled. Dropping received TRACE chunk size %d", buf, 8u);
          }
        }
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1A60EF148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN8ICETrace18openTransport_syncEv_block_invoke_7(void *a1, _DWORD *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    std::string::size_type v6 = std::__shared_weak_count::lock(v3);
    uint64_t v49 = v6;
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        if (*a2 == 3)
        {
          unsigned int v14 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_1A609F000, v14, OS_LOG_TYPE_DEFAULT, "#E No Logging Traffic detected (Stalled?)", (uint8_t *)&buf, 2u);
          }
        }
        else if (*a2 == 2)
        {
          BOOL v8 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEFAULT, "#E TRACE transport error", (uint8_t *)&buf, 2u);
          }
          *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v46 = v9;
          long long v47 = v9;
          long long v44 = v9;
          long long v45 = v9;
          long long v42 = v9;
          long long v43 = v9;
          long long buf = v9;
          BOOL v10 = (const void *)*MEMORY[0x1E4F4C6E8];
          size_t v11 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
          if (v11 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v12 = v11;
          if (v11 >= 0x17)
          {
            uint64_t v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v11 | 7) != 0x17) {
              uint64_t v15 = v11 | 7;
            }
            uint64_t v16 = v15 + 1;
            p_dst = (long long *)operator new(v15 + 1);
            *((void *)&__dst + 1) = v12;
            unint64_t v40 = v16 | 0x8000000000000000;
            *(void *)&long long __dst = p_dst;
          }
          else
          {
            HIBYTE(v40) = v11;
            p_dst = &__dst;
            if (!v11)
            {
LABEL_18:
              *((unsigned char *)p_dst + v12) = 0;
              int v17 = (const void *)*MEMORY[0x1E4F4D1A0];
              size_t v18 = strlen((const char *)*MEMORY[0x1E4F4D1A0]);
              if (v18 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              size_t v19 = v18;
              if (v18 >= 0x17)
              {
                uint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v18 | 7) != 0x17) {
                  uint64_t v21 = v18 | 7;
                }
                uint64_t v22 = v21 + 1;
                int v20 = operator new(v21 + 1);
                *((void *)&v37 + 1) = v19;
                unint64_t v38 = v22 | 0x8000000000000000;
                *(void *)&long long v37 = v20;
              }
              else
              {
                HIBYTE(v38) = v18;
                int v20 = &v37;
                if (!v18)
                {
LABEL_26:
                  v20[v19] = 0;
                  BYTE7(v36[1]) = 21;
                  strcpy((char *)v36, "TRACE transport error");
                  Timestamp::Timestamp((Timestamp *)v32);
                  Timestamp::asString((uint64_t)v32, 0, 9, __p);
                  char v31 = 0;
                  LOBYTE(v30) = 0;
                  ResetInfo::ResetInfo((std::string *)&buf, &__dst, &v37, v36, (uint64_t)__p, 7, &v30);
                  if (v35 < 0)
                  {
                    operator delete(__p[0]);
                    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v32, v33);
                    if ((SHIBYTE(v38) & 0x80000000) == 0)
                    {
LABEL_28:
                      if ((SHIBYTE(v40) & 0x80000000) == 0) {
                        goto LABEL_29;
                      }
LABEL_41:
                      operator delete((void *)__dst);
LABEL_29:
                      ResetInfo::ResetInfo(&v23, &buf);
                      ICETrace::commandResetModem_sync(v5, (long long *)&v23);
                      if (v29 < 0)
                      {
                        operator delete(v28);
                        if ((v27 & 0x80000000) == 0)
                        {
LABEL_31:
                          if ((v25 & 0x80000000) == 0) {
                            goto LABEL_32;
                          }
                          goto LABEL_44;
                        }
                      }
                      else if ((v27 & 0x80000000) == 0)
                      {
                        goto LABEL_31;
                      }
                      operator delete(v26);
                      if ((v25 & 0x80000000) == 0)
                      {
LABEL_32:
                        if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                          goto LABEL_33;
                        }
                        goto LABEL_45;
                      }
LABEL_44:
                      operator delete(v24);
                      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_33:
                        if ((SHIBYTE(v47) & 0x80000000) == 0) {
                          goto LABEL_34;
                        }
                        goto LABEL_46;
                      }
LABEL_45:
                      operator delete(v23.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v47) & 0x80000000) == 0)
                      {
LABEL_34:
                        if ((SBYTE7(v45) & 0x80000000) == 0) {
                          goto LABEL_35;
                        }
                        goto LABEL_47;
                      }
LABEL_46:
                      operator delete(*((void **)&v46 + 1));
                      if ((SBYTE7(v45) & 0x80000000) == 0)
                      {
LABEL_35:
                        if ((SHIBYTE(v43) & 0x80000000) == 0) {
                          goto LABEL_36;
                        }
                        goto LABEL_48;
                      }
LABEL_47:
                      operator delete((void *)v44);
                      if ((SHIBYTE(v43) & 0x80000000) == 0)
                      {
LABEL_36:
                        if ((SBYTE7(v42) & 0x80000000) == 0) {
                          goto LABEL_37;
                        }
                        goto LABEL_49;
                      }
LABEL_48:
                      operator delete(*((void **)&v42 + 1));
                      if ((SBYTE7(v42) & 0x80000000) == 0)
                      {
LABEL_37:
                        uint64_t v7 = v49;
                        if (!v49) {
                          return;
                        }
                        goto LABEL_50;
                      }
LABEL_49:
                      operator delete((void *)buf);
                      uint64_t v7 = v49;
                      if (!v49) {
                        return;
                      }
                      goto LABEL_50;
                    }
                  }
                  else
                  {
                    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v32, v33);
                    if ((SHIBYTE(v38) & 0x80000000) == 0) {
                      goto LABEL_28;
                    }
                  }
                  operator delete((void *)v37);
                  if ((SHIBYTE(v40) & 0x80000000) == 0) {
                    goto LABEL_29;
                  }
                  goto LABEL_41;
                }
              }
              memmove(v20, v17, v19);
              goto LABEL_26;
            }
          }
          memmove(p_dst, v10, v12);
          goto LABEL_18;
        }
      }
LABEL_50:
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1A60EF570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ResetInfo::~ResetInfo((void **)va);
  ResetInfo::~ResetInfo((void **)(v2 - 192));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v2 - 80);
  _Unwind_Resume(a1);
}

void sub_1A60EF59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,void *a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a27, a28);
  if (a45 < 0)
  {
    operator delete(a40);
    if ((*(char *)(v45 - 193) & 0x80000000) == 0)
    {
LABEL_5:
      std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v45 - 80);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v45 - 193) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v45 - 216));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v45 - 80);
  _Unwind_Resume(a1);
}

void sub_1A60EF624(_Unwind_Exception *a1)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void ICETrace::commandResetModem_sync(uint64_t a1, long long *a2)
{
  xpc_object_t v4 = *(NSObject **)(a1 + 144);
  if (v4)
  {
    dispatch_retain(*(dispatch_object_t *)(a1 + 144));
    dispatch_group_enter(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 136);
  if (!v5) {
    goto LABEL_21;
  }
  std::string::size_type v6 = std::__shared_weak_count::lock(v5);
  size_t v19 = v6;
  if (!v6) {
    goto LABEL_21;
  }
  uint64_t v7 = *(void *)(a1 + 128);
  uint64_t v18 = v7;
  if (!v7)
  {
    long long v9 = v6;
    if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  BOOL v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEFAULT, "#I Request to reset baseband", buf, 2u);
  }
  ResetInfo::ResetInfo(&v10, a2);
  abm::BasebandTracingTask::commandResetModem(v7, (ResetInfo *)&v10);
  if (v16 < 0)
  {
    operator delete(__p);
    if ((v14 & 0x80000000) == 0)
    {
LABEL_10:
      if ((v12 & 0x80000000) == 0) {
        goto LABEL_11;
      }
LABEL_19:
      operator delete(v11);
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_12:
        long long v9 = v19;
        if (!v19) {
          goto LABEL_21;
        }
LABEL_13:
        if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_21;
        }
LABEL_16:
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        goto LABEL_21;
      }
      goto LABEL_20;
    }
  }
  else if ((v14 & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(v13);
  if (v12 < 0) {
    goto LABEL_19;
  }
LABEL_11:
  if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_12;
  }
LABEL_20:
  operator delete(v10.__r_.__value_.__l.__data_);
  long long v9 = v19;
  if (v19) {
    goto LABEL_13;
  }
LABEL_21:
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
}

void sub_1A60EF7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  ResetInfo::~ResetInfo(&a9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v10 - 64);
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t ICETrace::issueStartCommands_sync(ICETrace *this, group *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v3 || (uint64_t v5 = *((void *)this + 9), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  gr_name = a2->gr_name;
  if (gr_name)
  {
    dispatch_retain((dispatch_object_t)gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }
  unint64_t v69 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v70 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN8ICETrace23issueStartCommands_syncEN8dispatch5groupE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_16_3;
  aBlock[4] = this;
  uint64_t v66 = gr_name;
  if (gr_name)
  {
    dispatch_retain((dispatch_object_t)gr_name);
    dispatch_group_enter((dispatch_group_t)v66);
  }
  uint64_t v67 = v5;
  BOOL v68 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v9 = _Block_copy(aBlock);
  uint64_t v10 = *((void *)this + 11);
  if (v10) {
    dispatch_retain(*((dispatch_object_t *)this + 11));
  }
  unint64_t v69 = (unint64_t)v9;
  unint64_t v70 = (unint64_t)v10;
  unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v64 = 0xAAAAAAAAAAAAAAAALL;
  v59[0] = MEMORY[0x1E4F143A8];
  v59[1] = 1174405120;
  v59[2] = ___ZN8ICETrace23issueStartCommands_syncEN8dispatch5groupE_block_invoke_17;
  void v59[3] = &__block_descriptor_tmp_21_0;
  v59[4] = this;
  dispatch_group_t group = (dispatch_group_t)gr_name;
  if (gr_name)
  {
    dispatch_retain((dispatch_object_t)gr_name);
    dispatch_group_enter(group);
  }
  uint64_t v61 = v5;
  long long v62 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v11 = _Block_copy(v59);
  char v12 = *((void *)this + 11);
  if (v12) {
    dispatch_retain(*((dispatch_object_t *)this + 11));
  }
  unint64_t v63 = (unint64_t)v11;
  unint64_t v64 = (unint64_t)v12;
  unint64_t v57 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v58 = 0xAAAAAAAAAAAAAAAALL;
  v51[0] = MEMORY[0x1E4F143A8];
  v51[1] = 1174405120;
  v51[2] = ___ZN8ICETrace23issueStartCommands_syncEN8dispatch5groupE_block_invoke_22;
  _OWORD v51[3] = &__block_descriptor_tmp_23_0;
  v51[4] = this;
  dispatch_group_t v52 = (dispatch_group_t)gr_name;
  if (gr_name)
  {
    dispatch_retain((dispatch_object_t)gr_name);
    dispatch_group_enter(v52);
  }
  uint64_t v53 = v5;
  uint64_t v54 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (v11)
  {
    std::string v55 = _Block_copy(v11);
    dispatch_object_t v56 = v12;
    if (!v12) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  std::string v55 = 0;
  dispatch_object_t v56 = v12;
  if (v12) {
LABEL_19:
  }
    dispatch_retain(v12);
LABEL_20:
  BOOL v13 = _Block_copy(v51);
  char v14 = *((void *)this + 11);
  CFAllocatorRef v36 = v13;
  if (v14)
  {
    dispatch_retain(v14);
    BOOL v13 = v36;
  }
  unint64_t v57 = (unint64_t)v13;
  unint64_t v58 = (unint64_t)v14;
  unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v50 = 0xAAAAAAAAAAAAAAAALL;
  v41[0] = MEMORY[0x1E4F143A8];
  v41[1] = 1174405120;
  v41[2] = ___ZN8ICETrace23issueStartCommands_syncEN8dispatch5groupE_block_invoke_24;
  v41[3] = &__block_descriptor_tmp_31_0;
  v41[4] = this;
  dispatch_group_t v42 = (dispatch_group_t)gr_name;
  if (gr_name)
  {
    dispatch_retain((dispatch_object_t)gr_name);
    dispatch_group_enter(v42);
  }
  uint64_t v43 = v5;
  long long v44 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v15 = v36;
  if (v36) {
    uint64_t v15 = _Block_copy(v36);
  }
  uint64_t v45 = v15;
  dispatch_object_t v46 = v14;
  if (v14) {
    dispatch_retain(v14);
  }
  if (v9)
  {
    long long v47 = _Block_copy(v9);
    dispatch_object_t v48 = v10;
    if (!v10) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  long long v47 = 0;
  dispatch_object_t v48 = v10;
  if (v10) {
LABEL_30:
  }
    dispatch_retain(v10);
LABEL_31:
  uint64_t v34 = v11;
  char v35 = v9;
  TraceConfigFile_sync = (capabilities::abs *)_Block_copy(v41);
  int v17 = TraceConfigFile_sync;
  uint64_t v18 = *((void *)this + 11);
  if (v18) {
    dispatch_retain(*((dispatch_object_t *)this + 11));
  }
  unint64_t v49 = (unint64_t)v17;
  unint64_t v50 = (unint64_t)v18;
  if (*((void *)this + 30) != *((void *)this + 29)) {
    goto LABEL_42;
  }
  if (*((char *)this + 183) < 0) {
    std::string::__init_copy_ctor_external(&v40, *((const std::string::value_type **)this + 20), *((void *)this + 21));
  }
  else {
    std::string v40 = *(std::string *)((char *)this + 160);
  }
  TraceConfigFile_sync = (capabilities::abs *)ICETrace::loadTraceConfigFile_sync((uint64_t)this, (std::string::size_type)&v40, (void *)this + 29, 0);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v40.__r_.__value_.__l.__data_);
    if (*((void *)this + 33) != *((void *)this + 32)) {
      goto LABEL_49;
    }
  }
  else
  {
LABEL_42:
    if (*((void *)this + 33) != *((void *)this + 32)) {
      goto LABEL_49;
    }
  }
  if (*((char *)this + 207) < 0) {
    std::string::__init_copy_ctor_external(&v39, *((const std::string::value_type **)this + 23), *((void *)this + 24));
  }
  else {
    std::string v39 = *(std::string *)((char *)this + 184);
  }
  TraceConfigFile_sync = (capabilities::abs *)ICETrace::loadTraceConfigFile_sync((uint64_t)this, (std::string::size_type)&v39, (void *)this + 32, 0);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
LABEL_49:
  if (*((void *)this + 30) != *((void *)this + 29) && *((void *)this + 33) != *((void *)this + 32))
  {
    if (capabilities::abs::supportsBBUSBMux(TraceConfigFile_sync))
    {
      uint64_t v19 = *((void *)this + 52);
      if (v17)
      {
        long long v37 = _Block_copy(v17);
        dispatch_object_t object = v18;
        if (!v18)
        {
LABEL_55:
          (*(void (**)(uint64_t, void **))(*(void *)v19 + 72))(v19, &v37);
          if (object) {
            dispatch_release(object);
          }
          if (v37) {
            _Block_release(v37);
          }
          goto LABEL_143;
        }
      }
      else
      {
        long long v37 = 0;
        dispatch_object_t object = v18;
        if (!v18) {
          goto LABEL_55;
        }
      }
      dispatch_retain(v18);
      goto LABEL_55;
    }
    int64_t v23 = *((unsigned int *)this + 38);
    xpc_object_t v24 = xpc_dictionary_create(0, 0, 0);
    if (v24 || (xpc_object_t v24 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A6275E60](v24) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v24);
        xpc_object_t xdict = v24;
      }
      else
      {
        xpc_object_t xdict = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t xdict = xpc_null_create();
      xpc_object_t v24 = 0;
    }
    xpc_release(v24);
    xpc_object_t v25 = xpc_null_create();
    xpc_release(v25);
    xpc_object_t v26 = xpc_int64_create(v23);
    if (v26 || (xpc_object_t v26 = xpc_null_create()) != 0)
    {
      xpc_retain(v26);
      xpc_object_t v27 = v26;
    }
    else
    {
      xpc_object_t v27 = xpc_null_create();
      xpc_object_t v26 = 0;
    }
    xpc_dictionary_set_value(xdict, "Mode", v27);
    xpc_object_t v28 = xpc_null_create();
    xpc_release(v27);
    xpc_release(v28);
    xpc_object_t v29 = xdict;
    if (xdict) {
      xpc_retain(xdict);
    }
    else {
      xpc_object_t v29 = xpc_null_create();
    }
    xpc_release(v26);
    xpc_release(xdict);
    xpc_object_t v30 = xpc_null_create();
    xpc_release(v30);
    if (v29)
    {
      xpc_retain(v29);
      xpc_object_t v31 = v29;
      if (v17)
      {
LABEL_128:
        __int16 v32 = _Block_copy(v17);
        goto LABEL_131;
      }
    }
    else
    {
      xpc_object_t v31 = xpc_null_create();
      if (v17) {
        goto LABEL_128;
      }
    }
    __int16 v32 = 0;
LABEL_131:
    *(void *)long long buf = MEMORY[0x1E4F143A8];
    uint64_t v72 = 1174405120;
    BOOL v73 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEclIJS5_S7_EEEvDpT__block_invoke;
    CFAllocatorRef v74 = &__block_descriptor_tmp_188;
    if (v32)
    {
      uint64_t v75 = _Block_copy(v32);
      CFTypeRef v76 = 0;
      xpc_object_t v77 = v31;
      if (v31)
      {
LABEL_133:
        xpc_retain(v31);
LABEL_136:
        dispatch_async(v18, buf);
        xpc_release(v77);
        xpc_object_t v77 = 0;
        if (v76) {
          CFRelease(v76);
        }
        if (v75) {
          _Block_release(v75);
        }
        if (v32) {
          _Block_release(v32);
        }
        xpc_release(v31);
        xpc_release(v29);
LABEL_143:
        uint64_t v21 = 1;
        if (!v18) {
          goto LABEL_63;
        }
LABEL_62:
        dispatch_release(v18);
        goto LABEL_63;
      }
    }
    else
    {
      uint64_t v75 = 0;
      CFTypeRef v76 = 0;
      xpc_object_t v77 = v31;
      if (v31) {
        goto LABEL_133;
      }
    }
    xpc_object_t v77 = xpc_null_create();
    goto LABEL_136;
  }
  int v20 = *((void *)this + 5);
  uint64_t v21 = 0;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A609F000, v20, OS_LOG_TYPE_DEFAULT, "#E Cannot find trace config file!", buf, 2u);
    uint64_t v21 = 0;
  }
  if (v18) {
    goto LABEL_62;
  }
LABEL_63:
  if (v17) {
    _Block_release(v17);
  }
  if (v48) {
    dispatch_release(v48);
  }
  if (v47) {
    _Block_release(v47);
  }
  if (v46) {
    dispatch_release(v46);
  }
  if (v45) {
    _Block_release(v45);
  }
  if (v44) {
    std::__shared_weak_count::__release_weak(v44);
  }
  if (v42)
  {
    dispatch_group_leave(v42);
    if (v42) {
      dispatch_release(v42);
    }
  }
  if (v14) {
    dispatch_release(v14);
  }
  if (v36) {
    _Block_release(v36);
  }
  if (v56) {
    dispatch_release(v56);
  }
  if (v55) {
    _Block_release(v55);
  }
  if (v54) {
    std::__shared_weak_count::__release_weak(v54);
  }
  if (v52)
  {
    dispatch_group_leave(v52);
    if (v52) {
      dispatch_release(v52);
    }
  }
  if (v12) {
    dispatch_release(v12);
  }
  if (v34) {
    _Block_release(v34);
  }
  if (v62) {
    std::__shared_weak_count::__release_weak(v62);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v10) {
    dispatch_release(v10);
  }
  if (v35) {
    _Block_release(v35);
  }
  if (v68) {
    std::__shared_weak_count::__release_weak(v68);
  }
  if (v66)
  {
    dispatch_group_leave((dispatch_group_t)v66);
    if (v66) {
      dispatch_release((dispatch_object_t)v66);
    }
  }
  if (gr_name)
  {
    dispatch_group_leave((dispatch_group_t)gr_name);
    dispatch_release((dispatch_object_t)gr_name);
  }
  std::__shared_weak_count::__release_weak(v7);
  return v21;
}

void sub_1A60F0134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,dispatch_group_t group,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,dispatch_group_t object,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,dispatch_group_t a60,uint64_t a61,std::__shared_weak_count *a62)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::dict)>::~callback((uint64_t)&a13);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::dict)>::~callback((uint64_t)&a41);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a39);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v64 + 64);
  if (a36) {
    std::__shared_weak_count::__release_weak(a36);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a53);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a51);
  if (a50) {
    std::__shared_weak_count::__release_weak(a50);
  }
  if (object)
  {
    dispatch_group_leave(object);
    if (object) {
      dispatch_release(object);
    }
  }
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v65 - 256);
  if (a62) {
    std::__shared_weak_count::__release_weak(a62);
  }
  if (a60)
  {
    dispatch_group_leave(a60);
    if (a60) {
      dispatch_release(a60);
    }
  }
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v65 - 176);
  uint64_t v67 = *(std::__shared_weak_count **)(v65 - 184);
  if (v67) {
    std::__shared_weak_count::__release_weak(v67);
  }
  BOOL v68 = *(NSObject **)(v65 - 200);
  if (v68)
  {
    dispatch_group_leave(v68);
    unint64_t v69 = *(NSObject **)(v65 - 200);
    if (v69) {
      dispatch_release(v69);
    }
  }
  if (v63)
  {
    dispatch_group_leave(v63);
    dispatch_release(v63);
  }
  std::__shared_weak_count::__release_weak(v62);
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace23issueStartCommands_syncEN8dispatch5groupE_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[4];
  uint64_t v5 = *(NSObject **)(v4 + 144);
  if (v5)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 144));
    dispatch_group_enter(v5);
  }
  uint64_t v69 = 0;
  unint64_t v70 = 0;
  std::string::size_type v6 = (std::__shared_weak_count *)a1[7];
  if (!v6) {
    goto LABEL_80;
  }
  unint64_t v70 = std::__shared_weak_count::lock(v6);
  if (!v70) {
    goto LABEL_83;
  }
  uint64_t v69 = a1[6];
  if (!v69) {
    goto LABEL_80;
  }
  uint64_t v7 = *a2;
  if (*a2) {
    BOOL v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    BOOL v8 = 0;
  }
  long long v9 = *(NSObject **)(v4 + 40);
  if (!v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1A609F000, v9, OS_LOG_TYPE_DEFAULT, "#I Successfully set mode", buf, 2u);
    }
    *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v76 = v15;
    long long v77 = v15;
    long long v74 = v15;
    long long v75 = v15;
    long long v72 = v15;
    long long v73 = v15;
    *(_OWORD *)long long buf = v15;
    char v16 = (const void *)*MEMORY[0x1E4F4C6F0];
    size_t v17 = strlen((const char *)*MEMORY[0x1E4F4C6F0]);
    if (v17 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v18 = v17;
    if (v17 >= 0x17)
    {
      uint64_t v30 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17) {
        uint64_t v30 = v17 | 7;
      }
      uint64_t v31 = v30 + 1;
      p_dst = (long long *)operator new(v30 + 1);
      *((void *)&__dst + 1) = v18;
      unint64_t v68 = v31 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v68) = v17;
      p_dst = &__dst;
      if (!v17)
      {
LABEL_58:
        *((unsigned char *)p_dst + v18) = 0;
        __int16 v32 = (const void *)*MEMORY[0x1E4F4D038];
        size_t v33 = strlen((const char *)*MEMORY[0x1E4F4D038]);
        if (v33 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v34 = v33;
        if (v33 >= 0x17)
        {
          uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v33 | 7) != 0x17) {
            uint64_t v36 = v33 | 7;
          }
          uint64_t v37 = v36 + 1;
          char v35 = operator new(v36 + 1);
          *((void *)&v65 + 1) = v34;
          unint64_t v66 = v37 | 0x8000000000000000;
          *(void *)&long long v65 = v35;
        }
        else
        {
          HIBYTE(v66) = v33;
          char v35 = &v65;
          if (!v33)
          {
LABEL_66:
            v35[v34] = 0;
            unint64_t v38 = (char *)operator new(0x40uLL);
            unint64_t v63 = v38;
            long long v64 = xmmword_1A61F7FD0;
            strcpy(v38, "Requesting Soft Reset to make the sync'd trace mode active");
            Timestamp::Timestamp((Timestamp *)v59);
            Timestamp::asString((uint64_t)v59, 0, 9, v48);
            char v47 = 0;
            LOBYTE(v46) = 0;
            ResetInfo::ResetInfo((std::string *)buf, &__dst, &v65, (long long *)&v63, (uint64_t)v48, 7, &v46);
            if (v49 < 0) {
              operator delete(v48[0]);
            }
            std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v59, v60);
            operator delete(v38);
            if (SHIBYTE(v66) < 0) {
              operator delete((void *)v65);
            }
            if (SHIBYTE(v68) < 0) {
              operator delete((void *)__dst);
            }
            ResetInfo::ResetInfo(&v39, (long long *)buf);
            ICETrace::commandResetModem_sync(v4, (long long *)&v39);
            if (v45 < 0)
            {
              operator delete(v44);
              if ((v43 & 0x80000000) == 0)
              {
LABEL_74:
                if ((v41 & 0x80000000) == 0) {
                  goto LABEL_75;
                }
                goto LABEL_88;
              }
            }
            else if ((v43 & 0x80000000) == 0)
            {
              goto LABEL_74;
            }
            operator delete(v42);
            if ((v41 & 0x80000000) == 0)
            {
LABEL_75:
              if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_76;
              }
              goto LABEL_89;
            }
LABEL_88:
            operator delete(v40);
            if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_76:
              if ((SHIBYTE(v77) & 0x80000000) == 0) {
                goto LABEL_77;
              }
              goto LABEL_49;
            }
LABEL_89:
            operator delete(v39.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v77) & 0x80000000) == 0) {
              goto LABEL_77;
            }
LABEL_49:
            operator delete(*((void **)&v76 + 1));
            if (SBYTE7(v75) < 0) {
              goto LABEL_50;
            }
            goto LABEL_78;
          }
        }
        memmove(v35, v32, v34);
        goto LABEL_66;
      }
    }
    memmove(p_dst, v16, v18);
    goto LABEL_58;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_error_impl(&dword_1A609F000, v9, OS_LOG_TYPE_ERROR, "Unable to set mode %@", buf, 0xCu);
  }
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v76 = v10;
  long long v77 = v10;
  long long v74 = v10;
  long long v75 = v10;
  long long v72 = v10;
  long long v73 = v10;
  *(_OWORD *)long long buf = v10;
  size_t v11 = (const void *)*MEMORY[0x1E4F4C6E8];
  size_t v12 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v20 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v20 = v12 | 7;
    }
    uint64_t v21 = v20 + 1;
    char v14 = (long long *)operator new(v20 + 1);
    *((void *)&__dst + 1) = v13;
    unint64_t v68 = v21 | 0x8000000000000000;
    *(void *)&long long __dst = v14;
    goto LABEL_25;
  }
  HIBYTE(v68) = v12;
  char v14 = &__dst;
  if (v12) {
LABEL_25:
  }
    memmove(v14, v11, v13);
  *((unsigned char *)v14 + v13) = 0;
  uint64_t v22 = (const void *)*MEMORY[0x1E4F4D038];
  size_t v23 = strlen((const char *)*MEMORY[0x1E4F4D038]);
  if (v23 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v24 = v23;
  if (v23 >= 0x17)
  {
    uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v26 = v23 | 7;
    }
    uint64_t v27 = v26 + 1;
    xpc_object_t v25 = operator new(v26 + 1);
    *((void *)&v65 + 1) = v24;
    unint64_t v66 = v27 | 0x8000000000000000;
    *(void *)&long long v65 = v25;
    goto LABEL_33;
  }
  HIBYTE(v66) = v23;
  xpc_object_t v25 = &v65;
  if (v23) {
LABEL_33:
  }
    memmove(v25, v22, v24);
  *((unsigned char *)v25 + v24) = 0;
  xpc_object_t v28 = (char *)operator new(0x28uLL);
  unint64_t v63 = v28;
  long long v64 = xmmword_1A61F7FC0;
  strcpy(v28, "Failed to sync trace mode between AP/BB");
  Timestamp::Timestamp((Timestamp *)v59);
  Timestamp::asString((uint64_t)v59, 0, 9, __p);
  char v58 = 0;
  LOBYTE(v57) = 0;
  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v65, (long long *)&v63, (uint64_t)__p, 7, &v57);
  if (v62 < 0) {
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v59, v60);
  operator delete(v28);
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)v65);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete((void *)__dst);
  }
  ResetInfo::ResetInfo(&v50, (long long *)buf);
  ICETrace::commandResetModem_sync(v4, (long long *)&v50);
  if (v56 < 0)
  {
    operator delete(v55);
    if ((v54 & 0x80000000) == 0)
    {
LABEL_42:
      if ((v52 & 0x80000000) == 0) {
        goto LABEL_43;
      }
LABEL_47:
      operator delete(v51);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_48;
      }
      goto LABEL_76;
    }
  }
  else if ((v54 & 0x80000000) == 0)
  {
    goto LABEL_42;
  }
  operator delete(v53);
  if (v52 < 0) {
    goto LABEL_47;
  }
LABEL_43:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_76;
  }
LABEL_48:
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77) < 0) {
    goto LABEL_49;
  }
LABEL_77:
  if (SBYTE7(v75) < 0)
  {
LABEL_50:
    operator delete((void *)v74);
    if (SHIBYTE(v73) < 0) {
      goto LABEL_51;
    }
    goto LABEL_79;
  }
LABEL_78:
  if (SHIBYTE(v73) < 0)
  {
LABEL_51:
    operator delete(*((void **)&v72 + 1));
    if (SBYTE7(v72) < 0) {
      goto LABEL_52;
    }
    goto LABEL_80;
  }
LABEL_79:
  if (SBYTE7(v72) < 0)
  {
LABEL_52:
    operator delete(*(void **)buf);
    xpc_object_t v29 = v70;
    if (!v70) {
      goto LABEL_83;
    }
    goto LABEL_81;
  }
LABEL_80:
  xpc_object_t v29 = v70;
  if (!v70) {
    goto LABEL_83;
  }
LABEL_81:
  if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_83:
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A60F09A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  ResetInfo::~ResetInfo(&a9);
  ResetInfo::~ResetInfo((void **)(v10 - 208));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v10 - 224);
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1A60F0AF4()
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 224);
  if (v0) {
    JUMPOUT(0x1A60F0AC8);
  }
  JUMPOUT(0x1A60F0AECLL);
}

uint64_t ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get(uint64_t a1)
{
  return *(void *)a1;
}

void ___ZN8ICETrace23issueStartCommands_syncEN8dispatch5groupE_block_invoke_17(void *a1, __CFError **a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[4];
  uint64_t v5 = *(NSObject **)(v4 + 144);
  if (v5)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 144));
    dispatch_group_enter(v5);
  }
  uint64_t v45 = 0;
  long long v46 = 0;
  std::string::size_type v6 = (std::__shared_weak_count *)a1[7];
  if (!v6) {
    goto LABEL_49;
  }
  long long v46 = std::__shared_weak_count::lock(v6);
  if (!v46) {
    goto LABEL_52;
  }
  uint64_t v45 = a1[6];
  if (!v45) {
    goto LABEL_49;
  }
  uint64_t v7 = *a2;
  if (*a2) {
    BOOL v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    BOOL v8 = 0;
  }
  long long v9 = *(NSObject **)(v4 + 40);
  if (v8)
  {
    if (os_log_type_enabled(*(os_log_t *)(v4 + 40), OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_error_impl(&dword_1A609F000, v9, OS_LOG_TYPE_ERROR, "Failed ARI trace command: %@", buf, 0xCu);
      uint64_t v7 = *a2;
    }
    if (CFErrorGetCode(v7) == 2)
    {
      uint64_t v10 = *(NSObject **)(v4 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1A609F000, v10, OS_LOG_TYPE_ERROR, "File access error!", buf, 2u);
        size_t v11 = v46;
        goto LABEL_50;
      }
LABEL_49:
      size_t v11 = v46;
      if (!v46) {
        goto LABEL_52;
      }
      goto LABEL_50;
    }
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v52 = v12;
    long long v53 = v12;
    long long v50 = v12;
    long long v51 = v12;
    long long v48 = v12;
    long long v49 = v12;
    *(_OWORD *)long long buf = v12;
    size_t v13 = (const void *)*MEMORY[0x1E4F4C6E8];
    size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
    if (v14 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v15 = v14;
    if (v14 >= 0x17)
    {
      uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v17 = v14 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_dst = (long long *)operator new(v17 + 1);
      *((void *)&__dst + 1) = v15;
      unint64_t v44 = v18 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v44) = v14;
      p_dst = &__dst;
      if (!v14)
      {
LABEL_27:
        *((unsigned char *)p_dst + v15) = 0;
        uint64_t v19 = (const void *)*MEMORY[0x1E4F4D038];
        size_t v20 = strlen((const char *)*MEMORY[0x1E4F4D038]);
        if (v20 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v21 = v20;
        if (v20 >= 0x17)
        {
          uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17) {
            uint64_t v23 = v20 | 7;
          }
          uint64_t v24 = v23 + 1;
          uint64_t v22 = operator new(v23 + 1);
          *((void *)&v41 + 1) = v21;
          unint64_t v42 = v24 | 0x8000000000000000;
          *(void *)&long long v41 = v22;
        }
        else
        {
          HIBYTE(v42) = v20;
          uint64_t v22 = &v41;
          if (!v20)
          {
LABEL_35:
            v22[v21] = 0;
            xpc_object_t v25 = (char *)operator new(0x20uLL);
            std::string v39 = v25;
            long long v40 = xmmword_1A61F6FD0;
            strcpy(v25, "Failed ARI trace command");
            Timestamp::Timestamp((Timestamp *)v35);
            Timestamp::asString((uint64_t)v35, 0, 9, __p);
            char v34 = 0;
            LOBYTE(v33) = 0;
            ResetInfo::ResetInfo((std::string *)buf, &__dst, &v41, (long long *)&v39, (uint64_t)__p, 7, &v33);
            if (v38 < 0) {
              operator delete(__p[0]);
            }
            std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v35, v36);
            operator delete(v25);
            if (SHIBYTE(v42) < 0) {
              operator delete((void *)v41);
            }
            if (SHIBYTE(v44) < 0) {
              operator delete((void *)__dst);
            }
            ResetInfo::ResetInfo(&v26, (long long *)buf);
            ICETrace::commandResetModem_sync(v4, (long long *)&v26);
            if (v32 < 0)
            {
              operator delete(v31);
              if ((v30 & 0x80000000) == 0)
              {
LABEL_43:
                if ((v28 & 0x80000000) == 0) {
                  goto LABEL_44;
                }
                goto LABEL_57;
              }
            }
            else if ((v30 & 0x80000000) == 0)
            {
              goto LABEL_43;
            }
            operator delete(v29);
            if ((v28 & 0x80000000) == 0)
            {
LABEL_44:
              if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_45;
              }
              goto LABEL_58;
            }
LABEL_57:
            operator delete(v27);
            if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_45:
              if ((SHIBYTE(v53) & 0x80000000) == 0) {
                goto LABEL_46;
              }
              goto LABEL_59;
            }
LABEL_58:
            operator delete(v26.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v53) & 0x80000000) == 0)
            {
LABEL_46:
              if ((SBYTE7(v51) & 0x80000000) == 0) {
                goto LABEL_47;
              }
              goto LABEL_60;
            }
LABEL_59:
            operator delete(*((void **)&v52 + 1));
            if ((SBYTE7(v51) & 0x80000000) == 0)
            {
LABEL_47:
              if ((SHIBYTE(v49) & 0x80000000) == 0) {
                goto LABEL_48;
              }
              goto LABEL_61;
            }
LABEL_60:
            operator delete((void *)v50);
            if ((SHIBYTE(v49) & 0x80000000) == 0)
            {
LABEL_48:
              if ((SBYTE7(v48) & 0x80000000) == 0) {
                goto LABEL_49;
              }
              goto LABEL_62;
            }
LABEL_61:
            operator delete(*((void **)&v48 + 1));
            if ((SBYTE7(v48) & 0x80000000) == 0) {
              goto LABEL_49;
            }
LABEL_62:
            operator delete(*(void **)buf);
            size_t v11 = v46;
            if (!v46) {
              goto LABEL_52;
            }
            goto LABEL_50;
          }
        }
        memmove(v22, v19, v21);
        goto LABEL_35;
      }
    }
    memmove(p_dst, v13, v15);
    goto LABEL_27;
  }
  if (!os_log_type_enabled(*(os_log_t *)(v4 + 40), OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_49;
  }
  *(_WORD *)long long buf = 0;
  _os_log_impl(&dword_1A609F000, v9, OS_LOG_TYPE_DEFAULT, "#I Trace command succeeded.", buf, 2u);
  size_t v11 = v46;
LABEL_50:
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_52:
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A60F0FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  ResetInfo::~ResetInfo((void **)&a9);
  ResetInfo::~ResetInfo((void **)(v50 - 208));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v50 - 224);
  if (!v49) {
    _Unwind_Resume(a1);
  }
  dispatch_group_leave(v49);
  dispatch_release(v49);
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace23issueStartCommands_syncEN8dispatch5groupE_block_invoke_22(void *a1, __CFError **a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[4];
  uint64_t v5 = *(NSObject **)(v4 + 144);
  if (v5)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 144));
    dispatch_group_enter(v5);
  }
  uint64_t v56 = 0;
  long long v57 = 0;
  std::string::size_type v6 = (std::__shared_weak_count *)a1[7];
  if (!v6) {
    goto LABEL_61;
  }
  long long v57 = std::__shared_weak_count::lock(v6);
  if (!v57) {
    goto LABEL_64;
  }
  uint64_t v56 = a1[6];
  if (!v56) {
    goto LABEL_61;
  }
  uint64_t v7 = *a2;
  if (*a2) {
    BOOL v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8)
  {
    *(void *)&uint8_t buf[8] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&uint8_t buf[16] = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v12 = *(unsigned __int8 *)(v4 + 304);
    *(void *)long long buf = &unk_1EFB0ABE8;
    uint8_t buf[8] = 1;
    buf[9] = v12;
    *(void *)&buf[12] = *(void *)(v4 + 308);
    uint64_t v13 = *(void *)(v4 + 416);
    size_t v14 = (void *)a1[8];
    if (v14) {
      size_t v14 = _Block_copy(v14);
    }
    size_t v15 = a1[9];
    aBlocunint64_t k = v14;
    dispatch_object_t object = v15;
    if (v15) {
      dispatch_retain(v15);
    }
    (*(void (**)(uint64_t, unsigned char *, void **))(*(void *)v13 + 96))(v13, buf, &aBlock);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    uint64_t v16 = *(void *)(v4 + 416);
    uint64_t v17 = (void *)a1[8];
    if (v17) {
      uint64_t v17 = _Block_copy(v17);
    }
    uint64_t v18 = a1[9];
    long long v33 = v17;
    dispatch_object_t v34 = v18;
    if (v18) {
      dispatch_retain(v18);
    }
    (*(void (**)(uint64_t, void **))(*(void *)v16 + 48))(v16, &v33);
    if (v34) {
      dispatch_release(v34);
    }
    if (v33) {
      _Block_release(v33);
    }
    goto LABEL_61;
  }
  long long v9 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_error_impl(&dword_1A609F000, v9, OS_LOG_TYPE_ERROR, "Failed to set masks: %@", buf, 0xCu);
    uint64_t v7 = *a2;
  }
  if (CFErrorGetCode(v7) != 2)
  {
    *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v62 = v19;
    long long v63 = v19;
    long long v60 = v19;
    long long v61 = v19;
    *(_OWORD *)&uint8_t buf[16] = v19;
    long long v59 = v19;
    *(_OWORD *)long long buf = v19;
    size_t v20 = (const void *)*MEMORY[0x1E4F4C6E8];
    size_t v21 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
    if (v21 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v22 = v21;
    if (v21 >= 0x17)
    {
      uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17) {
        uint64_t v24 = v21 | 7;
      }
      uint64_t v25 = v24 + 1;
      p_dst = (long long *)operator new(v24 + 1);
      *((void *)&__dst + 1) = v22;
      unint64_t v55 = v25 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v55) = v21;
      p_dst = &__dst;
      if (!v21)
      {
LABEL_39:
        *((unsigned char *)p_dst + v22) = 0;
        std::string v26 = (const void *)*MEMORY[0x1E4F4D038];
        size_t v27 = strlen((const char *)*MEMORY[0x1E4F4D038]);
        if (v27 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v28 = v27;
        if (v27 >= 0x17)
        {
          uint64_t v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v27 | 7) != 0x17) {
            uint64_t v30 = v27 | 7;
          }
          uint64_t v31 = v30 + 1;
          xpc_object_t v29 = operator new(v30 + 1);
          *((void *)&v52 + 1) = v28;
          unint64_t v53 = v31 | 0x8000000000000000;
          *(void *)&long long v52 = v29;
        }
        else
        {
          HIBYTE(v53) = v27;
          xpc_object_t v29 = &v52;
          if (!v27)
          {
LABEL_47:
            v29[v28] = 0;
            char v32 = (char *)operator new(0x20uLL);
            uint64_t v50 = v32;
            long long v51 = xmmword_1A61F6FD0;
            strcpy(v32, "Failed ARI trace command");
            Timestamp::Timestamp((Timestamp *)v46);
            Timestamp::asString((uint64_t)v46, 0, 9, __p);
            char v45 = 0;
            LOBYTE(v44) = 0;
            ResetInfo::ResetInfo((std::string *)buf, &__dst, &v52, (long long *)&v50, (uint64_t)__p, 7, &v44);
            if (v49 < 0) {
              operator delete(__p[0]);
            }
            std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v46, v47);
            operator delete(v32);
            if (SHIBYTE(v53) < 0) {
              operator delete((void *)v52);
            }
            if (SHIBYTE(v55) < 0) {
              operator delete((void *)__dst);
            }
            ResetInfo::ResetInfo(&v37, (long long *)buf);
            ICETrace::commandResetModem_sync(v4, (long long *)&v37);
            if (v43 < 0)
            {
              operator delete(v42);
              if ((v41 & 0x80000000) == 0)
              {
LABEL_55:
                if ((v39 & 0x80000000) == 0) {
                  goto LABEL_56;
                }
                goto LABEL_69;
              }
            }
            else if ((v41 & 0x80000000) == 0)
            {
              goto LABEL_55;
            }
            operator delete(v40);
            if ((v39 & 0x80000000) == 0)
            {
LABEL_56:
              if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_57;
              }
              goto LABEL_70;
            }
LABEL_69:
            operator delete(v38);
            if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_57:
              if ((SHIBYTE(v63) & 0x80000000) == 0) {
                goto LABEL_58;
              }
              goto LABEL_71;
            }
LABEL_70:
            operator delete(v37.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v63) & 0x80000000) == 0)
            {
LABEL_58:
              if ((SBYTE7(v61) & 0x80000000) == 0) {
                goto LABEL_59;
              }
              goto LABEL_72;
            }
LABEL_71:
            operator delete(*((void **)&v62 + 1));
            if ((SBYTE7(v61) & 0x80000000) == 0)
            {
LABEL_59:
              if ((SHIBYTE(v59) & 0x80000000) == 0) {
                goto LABEL_60;
              }
LABEL_73:
              operator delete(*(void **)&buf[24]);
              if ((buf[23] & 0x80000000) != 0) {
                goto LABEL_74;
              }
LABEL_61:
              size_t v11 = v57;
              if (!v57) {
                goto LABEL_64;
              }
              goto LABEL_62;
            }
LABEL_72:
            operator delete((void *)v60);
            if ((SHIBYTE(v59) & 0x80000000) == 0)
            {
LABEL_60:
              if ((buf[23] & 0x80000000) == 0) {
                goto LABEL_61;
              }
LABEL_74:
              operator delete(*(void **)buf);
              size_t v11 = v57;
              if (!v57) {
                goto LABEL_64;
              }
              goto LABEL_62;
            }
            goto LABEL_73;
          }
        }
        memmove(v29, v26, v28);
        goto LABEL_47;
      }
    }
    memmove(p_dst, v20, v22);
    goto LABEL_39;
  }
  uint64_t v10 = *(NSObject **)(v4 + 40);
  if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
    goto LABEL_61;
  }
  *(_WORD *)long long buf = 0;
  _os_log_error_impl(&dword_1A609F000, v10, OS_LOG_TYPE_ERROR, "File access error!", buf, 2u);
  size_t v11 = v57;
LABEL_62:
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_64:
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A60F16B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A60F1784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v10 - 224);
  if (!v9) {
    JUMPOUT(0x1A60F1768);
  }
  JUMPOUT(0x1A60F1758);
}

void sub_1A60F17AC()
{
  if (*(char *)(v0 - 225) < 0) {
    JUMPOUT(0x1A60F17B8);
  }
  JUMPOUT(0x1A60F174CLL);
}

void sub_1A60F17D0()
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 224);
  if (!v0) {
    JUMPOUT(0x1A60F1768);
  }
  JUMPOUT(0x1A60F1758);
}

void sub_1A60F17E4()
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 224);
  if (!v0) {
    JUMPOUT(0x1A60F1768);
  }
  JUMPOUT(0x1A60F1758);
}

void *dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::callback(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 8);
  *a1 = v4;
  a1[1] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c29_ZTSNSt3__18weak_ptrI5TraceEE64c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (void *)a2[8];
  if (v7) {
    uint64_t v7 = _Block_copy(v7);
  }
  BOOL v8 = a2[9];
  a1[8] = v7;
  a1[9] = v8;
  if (v8)
  {
    dispatch_retain(v8);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c29_ZTSNSt3__18weak_ptrI5TraceEE64c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1)
{
  uint64_t v2 = a1[9];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[8];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = a1[5];
  if (v5)
  {
    dispatch_group_leave(v5);
    uint64_t v6 = a1[5];
    if (v6)
    {
      dispatch_release(v6);
    }
  }
}

void ___ZN8ICETrace23issueStartCommands_syncEN8dispatch5groupE_block_invoke_24(void *a1, uint64_t *a2, xpc_object_t *a3)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[4];
  uint64_t v7 = *(NSObject **)(v6 + 144);
  if (v7)
  {
    dispatch_retain(*(dispatch_object_t *)(v6 + 144));
    dispatch_group_enter(v7);
  }
  uint64_t v128 = 0;
  uint64_t v127 = 0;
  BOOL v8 = (std::__shared_weak_count *)a1[7];
  if (!v8) {
    goto LABEL_158;
  }
  uint64_t v128 = std::__shared_weak_count::lock(v8);
  if (!v128) {
    goto LABEL_161;
  }
  uint64_t v127 = a1[6];
  if (!v127) {
    goto LABEL_158;
  }
  uint64_t v9 = *a2;
  if (v9) {
    uint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v10 = 0;
  }
  if (!v10)
  {
    xpc_object_t value = xpc_dictionary_get_value(*a3, "Mode");
    *(void *)long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    unsigned int v27 = xpc::dyn_cast_or_default();
    xpc_release(*(xpc_object_t *)buf);
    if (*(_DWORD *)(v6 + 152) == v27)
    {
      size_t v28 = *(NSObject **)(v6 + 40);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        if (v27 > 6) {
          xpc_object_t v29 = "Unknown";
        }
        else {
          xpc_object_t v29 = off_1E5C470C8[v27];
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v29;
        _os_log_impl(&dword_1A609F000, v28, OS_LOG_TYPE_DEFAULT, "#I Trace mode (%s) get success.  Baseband mode matches AP setting.", buf, 0xCu);
        unsigned int v27 = *(_DWORD *)(v6 + 152);
      }
      *(_DWORD *)(v6 + 364) = 0;
      if (v27 != 6 && v27) {
        goto LABEL_86;
      }
      int v51 = ICETrace::openTransport_sync((ICETrace *)v6);
      long long v52 = *(NSObject **)(v6 + 40);
      BOOL v53 = os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
      if (v51)
      {
        if (v53)
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1A609F000, v52, OS_LOG_TYPE_DEFAULT, "#I Transport open success", buf, 2u);
        }
LABEL_86:
        *(void *)&long long v132 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v54 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v54 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v131 = v54;
        long long v130 = v54;
        *(_OWORD *)long long buf = v54;
        trace::TraceMaskInfo::TraceMaskInfo(buf, v6 + 232, v6 + 256);
        uint64_t v55 = *(void *)(v6 + 416);
        uint64_t v56 = (void *)a1[8];
        if (v56) {
          uint64_t v56 = _Block_copy(v56);
        }
        long long v57 = a1[9];
        size_t v105 = v56;
        dispatch_object_t v106 = v57;
        if (v57) {
          dispatch_retain(v57);
        }
        (*(void (**)(uint64_t, uint8_t *, void **))(*(void *)v55 + 88))(v55, buf, &v105);
        if (v106) {
          dispatch_release(v106);
        }
        if (v105) {
          _Block_release(v105);
        }
        *(void *)long long buf = &unk_1EFB0AC10;
        if ((void)v131)
        {
          *((void *)&v131 + 1) = v131;
          operator delete((void *)v131);
        }
        if (*(void *)&buf[8])
        {
          *(void *)&long long v130 = *(void *)&buf[8];
          operator delete(*(void **)&buf[8]);
        }
        goto LABEL_158;
      }
      if (v53)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1A609F000, v52, OS_LOG_TYPE_DEFAULT, "#E Failed to open TRACE transport", buf, 2u);
      }
      *(void *)&long long v58 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v135 = v58;
      long long v134 = v58;
      long long v133 = v58;
      long long v132 = v58;
      long long v131 = v58;
      long long v130 = v58;
      *(_OWORD *)long long buf = v58;
      long long v59 = (const void *)*MEMORY[0x1E4F4C6E8];
      size_t v60 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
      if (v60 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v61 = v60;
      if (v60 >= 0x17)
      {
        uint64_t v63 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v60 | 7) != 0x17) {
          uint64_t v63 = v60 | 7;
        }
        uint64_t v64 = v63 + 1;
        p_dst = (long long *)operator new(v63 + 1);
        *((void *)&__dst + 1) = v61;
        *(void *)&long long v97 = v64 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        BYTE7(v97) = v60;
        p_dst = &__dst;
        if (!v60)
        {
LABEL_108:
          *((unsigned char *)p_dst + v61) = 0;
          long long v65 = (const void *)*MEMORY[0x1E4F4D1A0];
          size_t v66 = strlen((const char *)*MEMORY[0x1E4F4D1A0]);
          if (v66 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v67 = v66;
          if (v66 >= 0x17)
          {
            uint64_t v69 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v66 | 7) != 0x17) {
              uint64_t v69 = v66 | 7;
            }
            uint64_t v70 = v69 + 1;
            unint64_t v68 = operator new(v69 + 1);
            *((void *)&v138 + 1) = v67;
            unint64_t v139 = v70 | 0x8000000000000000;
            *(void *)&long long v138 = v68;
          }
          else
          {
            HIBYTE(v139) = v66;
            unint64_t v68 = &v138;
            if (!v66) {
              goto LABEL_116;
            }
          }
          memmove(v68, v65, v67);
LABEL_116:
          *((unsigned char *)v68 + v67) = 0;
          uint64_t v71 = operator new(0x20uLL);
          unint64_t v125 = v71;
          long long v126 = xmmword_1A61F7FE0;
          strcpy((char *)v71, "Failed to open TRACE transport");
          Timestamp::Timestamp((Timestamp *)&v121);
          Timestamp::asString((uint64_t)&v121, 0, 9, v110);
          char v109 = 0;
          LOBYTE(v108) = 0;
          ResetInfo::ResetInfo((std::string *)buf, &__dst, &v138, (long long *)&v125, (uint64_t)v110, 7, &v108);
          if (v111 < 0) {
            operator delete(v110[0]);
          }
          std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v121, *((void **)&v121 + 1));
          operator delete(v71);
          if (SHIBYTE(v139) < 0) {
            operator delete((void *)v138);
          }
          if (SBYTE7(v97) < 0) {
            operator delete((void *)__dst);
          }
          ResetInfo::ResetInfo(&v107, (long long *)buf);
          ICETrace::commandResetModem_sync(v6, (long long *)&v107);
          ResetInfo::~ResetInfo((void **)&v107.__r_.__value_.__l.__data_);
          ResetInfo::~ResetInfo((void **)buf);
          goto LABEL_158;
        }
      }
      memmove(p_dst, v59, v61);
      goto LABEL_108;
    }
    ++*(_DWORD *)(v6 + 364);
    unint64_t v137 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v30 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v136[7] = v30;
    v136[8] = v30;
    v136[5] = v30;
    v136[6] = v30;
    v136[3] = v30;
    v136[4] = v30;
    v136[1] = v30;
    v136[2] = v30;
    long long v135 = v30;
    v136[0] = v30;
    long long v133 = v30;
    long long v134 = v30;
    long long v131 = v30;
    long long v132 = v30;
    *(_OWORD *)long long buf = v30;
    long long v130 = v30;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
    uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"AP STT (Mode = ", 15);
    uint64_t v32 = *(int *)(v6 + 152);
    if (v32 > 6) {
      long long v33 = "Unknown";
    }
    else {
      long long v33 = off_1E5C470C8[v32];
    }
    size_t v34 = strlen(v33);
    char v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v33, v34);
    uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") mismatch with BB XSIO mode (XSIO = ", 37);
    if (v27 > 6) {
      std::string v37 = "Unknown";
    }
    else {
      std::string v37 = off_1E5C470C8[v27];
    }
    size_t v38 = strlen(v37);
    char v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)") count=", 8);
    std::ostream::operator<<();
    long long v40 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      std::ostringstream::str[abi:ne180100](&__dst, (uint64_t)buf);
      size_t v88 = (SBYTE7(v97) & 0x80u) == 0 ? &__dst : (long long *)__dst;
      LODWORD(v138) = 136315138;
      *(void *)((char *)&v138 + 4) = v88;
      _os_log_error_impl(&dword_1A609F000, v40, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v138, 0xCu);
      if (SBYTE7(v97) < 0) {
        operator delete((void *)__dst);
      }
    }
    unsigned int v41 = *(_DWORD *)(v6 + 364);
    if (v41 <= 2)
    {
      uint64_t v42 = *(void *)(v6 + 416);
      uint64_t v43 = *(unsigned int *)(v6 + 152);
      long long v44 = (void *)a1[10];
      if (v44) {
        long long v44 = _Block_copy(v44);
      }
      char v45 = a1[11];
      aBlocunint64_t k = v44;
      dispatch_object_t object = v45;
      if (v45) {
        dispatch_retain(v45);
      }
      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v42 + 80))(v42, v43, &aBlock);
      if (object) {
        dispatch_release(object);
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      goto LABEL_155;
    }
    if (v41 != 3)
    {
LABEL_155:
      *(void *)long long buf = *MEMORY[0x1E4FBA418];
      *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
      *(void *)&uint8_t buf[8] = MEMORY[0x1E4FBA470] + 16;
      if (SHIBYTE(v134) < 0) {
        operator delete(*((void **)&v133 + 1));
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1A62751A0](v136);
      goto LABEL_158;
    }
    *(void *)&long long v46 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v46 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v101 = v46;
    long long v102 = v46;
    long long v99 = v46;
    long long v100 = v46;
    long long v97 = v46;
    long long v98 = v46;
    long long __dst = v46;
    char v47 = (const void *)*MEMORY[0x1E4F4C6E8];
    size_t v48 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
    if (v48 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v49 = v48;
    if (v48 >= 0x17)
    {
      uint64_t v72 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v48 | 7) != 0x17) {
        uint64_t v72 = v48 | 7;
      }
      uint64_t v73 = v72 + 1;
      uint64_t v50 = operator new(v72 + 1);
      *((void *)&v138 + 1) = v49;
      unint64_t v139 = v73 | 0x8000000000000000;
      *(void *)&long long v138 = v50;
    }
    else
    {
      HIBYTE(v139) = v48;
      uint64_t v50 = &v138;
      if (!v48)
      {
LABEL_127:
        v50[v49] = 0;
        long long v74 = (const void *)*MEMORY[0x1E4F4D1A0];
        size_t v75 = strlen((const char *)*MEMORY[0x1E4F4D1A0]);
        if (v75 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v76 = v75;
        if (v75 >= 0x17)
        {
          uint64_t v78 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v75 | 7) != 0x17) {
            uint64_t v78 = v75 | 7;
          }
          uint64_t v79 = v78 + 1;
          long long v77 = operator new(v78 + 1);
          *((void *)&v126 + 1) = v79 | 0x8000000000000000;
          unint64_t v125 = v77;
          *(void *)&long long v126 = v76;
        }
        else
        {
          HIBYTE(v126) = v75;
          long long v77 = &v125;
          if (!v75)
          {
LABEL_135:
            *((unsigned char *)v77 + v76) = 0;
            if ((BYTE8(v135) & 0x10) != 0)
            {
              uint64_t v82 = v135;
              if ((unint64_t)v135 < *((void *)&v132 + 1))
              {
                *(void *)&long long v135 = *((void *)&v132 + 1);
                uint64_t v82 = *((void *)&v132 + 1);
              }
              long long v83 = (const void **)&v132;
            }
            else
            {
              if ((BYTE8(v135) & 8) == 0)
              {
                size_t v80 = 0;
                HIBYTE(v122) = 0;
                unint64_t v81 = &v121;
                goto LABEL_150;
              }
              long long v83 = (const void **)&v130 + 1;
              uint64_t v82 = *((void *)&v131 + 1);
            }
            CFAllocatorRef v84 = *v83;
            size_t v80 = v82 - (void)*v83;
            if (v80 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            if (v80 >= 0x17)
            {
              uint64_t v85 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v80 | 7) != 0x17) {
                uint64_t v85 = v80 | 7;
              }
              uint64_t v86 = v85 + 1;
              unint64_t v81 = operator new(v85 + 1);
              unint64_t v122 = v86 | 0x8000000000000000;
              *(void *)&long long v121 = v81;
              *((void *)&v121 + 1) = v80;
            }
            else
            {
              HIBYTE(v122) = v82 - *(unsigned char *)v83;
              unint64_t v81 = &v121;
              if (!v80)
              {
LABEL_150:
                v81[v80] = 0;
                Timestamp::Timestamp((Timestamp *)v92);
                Timestamp::asString((uint64_t)v92, 0, 9, v94);
                char v91 = 0;
                LOBYTE(v90) = 0;
                ResetInfo::ResetInfo((std::string *)&__dst, &v138, (long long *)&v125, &v121, (uint64_t)v94, 3, &v90);
                if (v95 < 0)
                {
                  operator delete(v94[0]);
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v92, v93);
                  if ((SHIBYTE(v122) & 0x80000000) == 0)
                  {
LABEL_152:
                    if ((SHIBYTE(v126) & 0x80000000) == 0) {
                      goto LABEL_153;
                    }
                    goto LABEL_166;
                  }
                }
                else
                {
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v92, v93);
                  if ((SHIBYTE(v122) & 0x80000000) == 0) {
                    goto LABEL_152;
                  }
                }
                operator delete((void *)v121);
                if ((SHIBYTE(v126) & 0x80000000) == 0)
                {
LABEL_153:
                  if ((SHIBYTE(v139) & 0x80000000) == 0)
                  {
LABEL_154:
                    ResetInfo::ResetInfo(&v89, &__dst);
                    ICETrace::commandResetModem_sync(v6, (long long *)&v89);
                    ResetInfo::~ResetInfo((void **)&v89.__r_.__value_.__l.__data_);
                    *(_DWORD *)(v6 + 364) = 0;
                    ResetInfo::~ResetInfo((void **)&__dst);
                    goto LABEL_155;
                  }
LABEL_167:
                  operator delete((void *)v138);
                  goto LABEL_154;
                }
LABEL_166:
                operator delete(v125);
                if ((SHIBYTE(v139) & 0x80000000) == 0) {
                  goto LABEL_154;
                }
                goto LABEL_167;
              }
            }
            memmove(v81, v84, v80);
            goto LABEL_150;
          }
        }
        memmove(v77, v74, v76);
        goto LABEL_135;
      }
    }
    memmove(v50, v47, v49);
    goto LABEL_127;
  }
  size_t v11 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl(&dword_1A609F000, v11, OS_LOG_TYPE_DEFAULT, "#E Failed to get trace mode: %@", buf, 0xCu);
  }
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v135 = v12;
  long long v134 = v12;
  long long v133 = v12;
  long long v132 = v12;
  long long v131 = v12;
  long long v130 = v12;
  *(_OWORD *)long long buf = v12;
  uint64_t v13 = (const void *)*MEMORY[0x1E4F4C6E8];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v18 = v14 | 7;
    }
    uint64_t v19 = v18 + 1;
    uint64_t v16 = (long long *)operator new(v18 + 1);
    *((void *)&__dst + 1) = v15;
    *(void *)&long long v97 = v19 | 0x8000000000000000;
    *(void *)&long long __dst = v16;
    goto LABEL_21;
  }
  BYTE7(v97) = v14;
  uint64_t v16 = &__dst;
  if (v14) {
LABEL_21:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  size_t v20 = (const void *)*MEMORY[0x1E4F4D038];
  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4D038]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    uint64_t v23 = operator new(v24 + 1);
    *((void *)&v138 + 1) = v22;
    unint64_t v139 = v25 | 0x8000000000000000;
    *(void *)&long long v138 = v23;
    goto LABEL_29;
  }
  HIBYTE(v139) = v21;
  uint64_t v23 = &v138;
  if (v21) {
LABEL_29:
  }
    memmove(v23, v20, v22);
  *((unsigned char *)v23 + v22) = 0;
  std::string v26 = operator new(0x20uLL);
  unint64_t v125 = v26;
  long long v126 = xmmword_1A61F6FD0;
  strcpy((char *)v26, "Failed to get trace mode");
  Timestamp::Timestamp((Timestamp *)&v121);
  Timestamp::asString((uint64_t)&v121, 0, 9, __p);
  char v120 = 0;
  LOBYTE(v119) = 0;
  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v138, (long long *)&v125, (uint64_t)__p, 7, &v119);
  if (v124 < 0) {
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v121, *((void **)&v121 + 1));
  operator delete(v26);
  if (SHIBYTE(v139) < 0) {
    operator delete((void *)v138);
  }
  if (SBYTE7(v97) < 0) {
    operator delete((void *)__dst);
  }
  ResetInfo::ResetInfo(&v112, (long long *)buf);
  ICETrace::commandResetModem_sync(v6, (long long *)&v112);
  if (v118 < 0)
  {
    operator delete(v117);
    if ((v116 & 0x80000000) == 0)
    {
LABEL_38:
      if ((v114 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_47;
    }
  }
  else if ((v116 & 0x80000000) == 0)
  {
    goto LABEL_38;
  }
  operator delete(v115);
  if ((v114 & 0x80000000) == 0)
  {
LABEL_39:
    if ((SHIBYTE(v112.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_48;
  }
LABEL_47:
  operator delete(v113);
  if ((SHIBYTE(v112.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_40:
    if ((SHIBYTE(v135) & 0x80000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_49;
  }
LABEL_48:
  operator delete(v112.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v135) & 0x80000000) == 0)
  {
LABEL_41:
    if ((SBYTE7(v133) & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_50;
  }
LABEL_49:
  operator delete(*((void **)&v134 + 1));
  if ((SBYTE7(v133) & 0x80000000) == 0)
  {
LABEL_42:
    if ((SHIBYTE(v131) & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_51;
  }
LABEL_50:
  operator delete((void *)v132);
  if ((SHIBYTE(v131) & 0x80000000) == 0)
  {
LABEL_43:
    if (SBYTE7(v130) < 0) {
      goto LABEL_52;
    }
    goto LABEL_158;
  }
LABEL_51:
  operator delete(*((void **)&v130 + 1));
  if (SBYTE7(v130) < 0) {
LABEL_52:
  }
    operator delete(*(void **)buf);
LABEL_158:
  uint64_t v87 = v128;
  if (v128 && !atomic_fetch_add(&v128->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
  }
LABEL_161:
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
}

void sub_1A60F27E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33)
{
  ResetInfo::~ResetInfo(&a10);
  ResetInfo::~ResetInfo(&a33);
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x2D0]);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2C0]);
  if (v33)
  {
    dispatch_group_leave(v33);
    dispatch_release(v33);
  }
  _Unwind_Resume(a1);
}

void trace::TraceMaskInfo::~TraceMaskInfo(trace::TraceMaskInfo *this)
{
  *(void *)this = &unk_1EFB0AC10;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

unsigned char *std::ostringstream::str[abi:ne180100](unsigned char *__dst, uint64_t a2)
{
  uint64_t v2 = __dst;
  int v3 = *(_DWORD *)(a2 + 104);
  if ((v3 & 0x10) != 0)
  {
    unint64_t v4 = *(void *)(a2 + 96);
    unint64_t v5 = *(void *)(a2 + 56);
    if (v4 < v5)
    {
      *(void *)(a2 + 96) = v5;
      unint64_t v4 = v5;
    }
    uint64_t v6 = *(const void **)(a2 + 48);
    size_t v7 = v4 - (void)v6;
    if (v4 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_16;
    }
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      __dst[23] = 0;
LABEL_4:
      *long long __dst = 0;
      return __dst;
    }
    uint64_t v6 = *(const void **)(a2 + 24);
    size_t v7 = *(void *)(a2 + 40) - (void)v6;
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_16:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v8 = v7 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v10 = operator new(v8 + 1);
    v2[1] = v7;
    v2[2] = v9 | 0x8000000000000000;
    void *v2 = v10;
    uint64_t v2 = v10;
  }
  else
  {
    __dst[23] = v7;
    if (!v7) {
      goto LABEL_4;
    }
  }
  long long __dst = memmove(v2, v6, v7);
  *((unsigned char *)v2 + v7) = 0;
  return __dst;
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c29_ZTSNSt3__18weak_ptrI5TraceEE64c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE80c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1, void *a2)
{
  unint64_t v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    unint64_t v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  size_t v7 = (void *)a2[8];
  if (v7) {
    size_t v7 = _Block_copy(v7);
  }
  uint64_t v8 = a2[9];
  a1[8] = v7;
  a1[9] = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  uint64_t v9 = (void *)a2[10];
  if (v9) {
    uint64_t v9 = _Block_copy(v9);
  }
  uint64_t v10 = a2[11];
  a1[10] = v9;
  a1[11] = v10;
  if (v10)
  {
    dispatch_retain(v10);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c29_ZTSNSt3__18weak_ptrI5TraceEE64c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE80c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1)
{
  uint64_t v2 = a1[11];
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = (const void *)a1[10];
  if (v3) {
    _Block_release(v3);
  }
  unint64_t v4 = a1[9];
  if (v4) {
    dispatch_release(v4);
  }
  unint64_t v5 = (const void *)a1[8];
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[7];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  size_t v7 = a1[5];
  if (v7)
  {
    dispatch_group_leave(v7);
    uint64_t v8 = a1[5];
    if (v8)
    {
      dispatch_release(v8);
    }
  }
}

BOOL ICETrace::loadTraceConfigFile_sync(uint64_t a1, std::string::size_type a2, void *a3, int a4)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v69 = 0;
  size_t v70 = 0;
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = 19;
  uint64_t v71 = 0;
  strcpy((char *)&buf, "kKeyTraceConfigPath");
  defaults::bbtrace::get((char *)&buf, (std::string::size_type *)&v69);
  long long v58 = a3;
  std::string::size_type v7 = a2;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  uint64_t v67 = 0;
  memset(v68, 170, sizeof(v68));
  HIBYTE(v68[2]) = 0;
  LOBYTE(v68[0]) = 0;
  long long v65 = 0;
  size_t v66 = 0;
  uint64_t v8 = (const char *)KTLGetKDMProductName();
  size_t v9 = strlen(v8);
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v10;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v9;
  p_dst = &__dst;
  if (v9) {
LABEL_10:
  }
    memmove(p_dst, v8, v10);
  p_dst->__r_.__value_.__s.__data_[v10] = 0;
  size_t v14 = std::string::append(&__dst, ".*\\.", 4uLL);
  std::string::size_type v15 = a2;
  long long v16 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v76.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v16;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  KTLGetMaskFileExtensionName();
  if (v61 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  size_t v18 = strlen(p_p);
  uint64_t v19 = std::string::append(&v76, p_p, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  buf.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)&v63, (uint64_t)&buf, 0);
  int filtered_files = ctu::fs::get_filtered_files();
  size_t v22 = v64;
  if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    std::locale::~locale(&v63);
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if ((v61 & 0x80000000) == 0) {
        goto LABEL_18;
      }
      goto LABEL_27;
    }
  }
  else
  {
    std::locale::~locale(&v63);
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
  }
  operator delete(buf.__r_.__value_.__l.__data_);
  if ((v61 & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete(__p);
  if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(v76.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_20:
    if (filtered_files) {
      goto LABEL_21;
    }
LABEL_30:
    uint64_t v24 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1A609F000, v24, OS_LOG_TYPE_ERROR, "Failed to get files", (uint8_t *)&buf, 2u);
    }
    goto LABEL_81;
  }
LABEL_29:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (!filtered_files) {
    goto LABEL_30;
  }
LABEL_21:
  if (a4)
  {
    uint64_t v23 = (const char *)a2;
    if (*(char *)(a2 + 23) < 0) {
      uint64_t v23 = *(const char **)a2;
    }
    KTLGetETBFilename((uint64_t *)&v76, v23);
  }
  else
  {
    uint64_t v25 = (const char *)a2;
    if (*(char *)(a2 + 23) < 0) {
      uint64_t v25 = *(const char **)a2;
    }
    KTLGetKDMFilename((uint64_t *)&v76, v25);
  }
  std::string buf = v76;
  std::string v26 = (void **)v65;
  unsigned int v27 = v66;
  int v28 = SHIBYTE(v76.__r_.__value_.__r.__words[2]);
  if (v65 != v66)
  {
    if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    while (1)
    {
      int v30 = *((char *)v26 + 23);
      uint64_t v31 = (const char *)v26;
      if (v30 < 0) {
        uint64_t v31 = (const char *)*v26;
      }
      if (!strcasecmp((const char *)p_buf, v31)) {
        break;
      }
      v26 += 3;
      if (v26 == v27) {
        goto LABEL_56;
      }
    }
    if (v26 != v68)
    {
      if (SHIBYTE(v68[2]) < 0)
      {
        if ((v30 & 0x80u) == 0) {
          long long v33 = v26;
        }
        else {
          long long v33 = *v26;
        }
        if ((v30 & 0x80u) == 0) {
          size_t v34 = v30;
        }
        else {
          size_t v34 = (size_t)v26[1];
        }
        std::string::__assign_no_alias<false>(v68, v33, v34);
      }
      else if ((v30 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v68, *v26, (size_t)v26[1]);
      }
      else
      {
        long long v32 = *(_OWORD *)v26;
        v68[2] = v26[2];
        *(_OWORD *)unint64_t v68 = v32;
      }
    }
  }
LABEL_56:
  if (v28 < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    int v35 = SHIBYTE(v68[2]);
    if (SHIBYTE(v68[2]) >= 0) {
      size_t v36 = HIBYTE(v68[2]);
    }
    else {
      size_t v36 = (size_t)v68[1];
    }
    if (v36)
    {
LABEL_61:
      int v37 = SHIBYTE(v71);
      if (v71 >= 0) {
        size_t v38 = HIBYTE(v71);
      }
      else {
        size_t v38 = v70;
      }
      unint64_t v39 = v38 + v36;
      memset(&v76, 170, sizeof(v76));
      if (v38 + v36 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v39 > 0x16)
      {
        uint64_t v48 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v39 | 7) != 0x17) {
          uint64_t v48 = v39 | 7;
        }
        uint64_t v49 = v48 + 1;
        long long v40 = (char *)operator new(v48 + 1);
        v76.__r_.__value_.__l.__size_ = v38 + v36;
        v76.__r_.__value_.__r.__words[2] = v49 | 0x8000000000000000;
        v76.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
        if (!v38)
        {
LABEL_71:
          uint64_t v42 = &v40[v38];
          if (v35 >= 0) {
            uint64_t v43 = v68;
          }
          else {
            uint64_t v43 = (void **)v68[0];
          }
          memmove(v42, v43, v36);
          v42[v36] = 0;
          std::string::size_type v44 = v7;
          if (ctu::fs::load_file())
          {
            BOOL v45 = 1;
            long long v46 = *(NSObject **)(a1 + 40);
            if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_101;
            }
          }
          else if (a4 == 1)
          {
            *((unsigned char *)&buf.__r_.__value_.__s + 23) = 8;
            strcpy((char *)&buf, "Disabled");
            if (*(char *)(v7 + 23) >= 0) {
              uint64_t v50 = (const char *)v7;
            }
            else {
              uint64_t v50 = *(const char **)v7;
            }
            BOOL v45 = strcasecmp((const char *)&buf, v50) == 0;
            long long v46 = *(NSObject **)(a1 + 40);
            if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            {
LABEL_101:
              if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v76.__r_.__value_.__l.__data_);
              }
              goto LABEL_103;
            }
          }
          else
          {
            BOOL v45 = 0;
            long long v46 = *(NSObject **)(a1 + 40);
            if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_101;
            }
          }
          if (*(char *)(v44 + 23) < 0) {
            std::string::size_type v44 = *(void *)v44;
          }
          KTLGetMaskFileExtensionName();
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v51 = &__dst;
          }
          else {
            int v51 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          uint64_t v52 = v58[1] - *v58;
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v44;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v51;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
          uint64_t v73 = v52;
          __int16 v74 = 1024;
          BOOL v75 = v45;
          _os_log_impl(&dword_1A609F000, v46, OS_LOG_TYPE_DEFAULT, "#I Read file %s.%s(%lu bytes) success: %d", (uint8_t *)&buf, 0x26u);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          goto LABEL_101;
        }
      }
      else
      {
        memset(&v76, 0, sizeof(v76));
        long long v40 = (char *)&v76;
        *((unsigned char *)&v76.__r_.__value_.__s + 23) = v38 + v36;
        if (!v38) {
          goto LABEL_71;
        }
      }
      if (v37 >= 0) {
        unsigned int v41 = &v69;
      }
      else {
        unsigned int v41 = v69;
      }
      memmove(v40, v41, v38);
      goto LABEL_71;
    }
  }
  else
  {
    int v35 = SHIBYTE(v68[2]);
    if (SHIBYTE(v68[2]) >= 0) {
      size_t v36 = HIBYTE(v68[2]);
    }
    else {
      size_t v36 = (size_t)v68[1];
    }
    if (v36) {
      goto LABEL_61;
    }
  }
LABEL_81:
  char v47 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
  {
    KTLGetMaskFileExtensionName();
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v57 = &buf;
    }
    else {
      long long v57 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    if (*(char *)(v7 + 23) < 0) {
      std::string::size_type v15 = *(void *)v7;
    }
    LODWORD(v76.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 4) = (std::string::size_type)v57;
    WORD2(v76.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v76.__r_.__value_.__r.__words[1] + 6) = v15;
    _os_log_error_impl(&dword_1A609F000, v47, OS_LOG_TYPE_ERROR, "Error loading baseband %s file: %s", (uint8_t *)&v76, 0x16u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  BOOL v45 = 0;
LABEL_103:
  BOOL v53 = (void **)v65;
  if (v65)
  {
    long long v54 = v66;
    uint64_t v55 = v65;
    if (v66 != v65)
    {
      do
      {
        if (*((char *)v54 - 1) < 0) {
          operator delete(*(v54 - 3));
        }
        v54 -= 3;
      }
      while (v54 != v53);
      uint64_t v55 = v65;
    }
    size_t v66 = v53;
    operator delete(v55);
  }
  if (SHIBYTE(v68[2]) < 0)
  {
    operator delete(v68[0]);
    if ((SHIBYTE(v71) & 0x80000000) == 0) {
      return v45;
    }
LABEL_115:
    operator delete(v69);
    return v45;
  }
  if (SHIBYTE(v71) < 0) {
    goto LABEL_115;
  }
  return v45;
}

void sub_1A60F34A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::locale a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (v47 < 0) {
    operator delete(v46);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a32);
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::dict)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ICETrace::setLPMHandlers_sync(ICETrace *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN8ICETrace19setLPMHandlers_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_37;
  aBlock[4] = this;
  void aBlock[5] = v3;
  size_t v22 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  std::string::size_type v7 = _Block_copy(aBlock);
  uint64_t v8 = *((void *)this + 11);
  if (v8) {
    dispatch_retain(*((dispatch_object_t *)this + 11));
  }
  unint64_t v23 = (unint64_t)v7;
  unint64_t v24 = (unint64_t)v8;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 1174405120;
  uint64_t v17[2] = ___ZN8ICETrace19setLPMHandlers_syncEv_block_invoke_38;
  v17[3] = &__block_descriptor_tmp_47;
  v17[4] = this;
  void v17[5] = v3;
  size_t v18 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v9 = _Block_copy(v17);
  std::string::size_type v10 = *((void *)this + 11);
  if (v10) {
    dispatch_retain(*((dispatch_object_t *)this + 11));
  }
  unint64_t v19 = (unint64_t)v9;
  unint64_t v20 = (unint64_t)v10;
  uint64_t v11 = *((void *)this + 52);
  if (v11)
  {
    if (v7)
    {
      std::string::size_type v15 = _Block_copy(v7);
      dispatch_object_t object = v8;
      if (!v8) {
        goto LABEL_13;
      }
    }
    else
    {
      std::string::size_type v15 = 0;
      dispatch_object_t object = v8;
      if (!v8)
      {
LABEL_13:
        (*(void (**)(uint64_t, void **))(*(void *)v11 + 112))(v11, &v15);
        if (object) {
          dispatch_release(object);
        }
        if (v15) {
          _Block_release(v15);
        }
        uint64_t v12 = *((void *)this + 52);
        if (v9)
        {
          uint64_t v13 = _Block_copy(v9);
          dispatch_object_t v14 = v10;
          if (!v10)
          {
LABEL_20:
            (*(void (**)(uint64_t, void **))(*(void *)v12 + 120))(v12, &v13);
            if (v14) {
              dispatch_release(v14);
            }
            if (v13) {
              _Block_release(v13);
            }
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t v13 = 0;
          dispatch_object_t v14 = v10;
          if (!v10) {
            goto LABEL_20;
          }
        }
        dispatch_retain(v10);
        goto LABEL_20;
      }
    }
    dispatch_retain(v8);
    goto LABEL_13;
  }
LABEL_24:
  if (v10) {
    dispatch_release(v10);
  }
  if (v9) {
    _Block_release(v9);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v8) {
    dispatch_release(v8);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1A60F3904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a9);
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a20);
  if (a19)
  {
    std::__shared_weak_count::__release_weak(a19);
    dispatch::callback<void({block_pointer})(dispatch::group_session)>::~callback(v29 - 96);
    uint64_t v31 = a28;
    if (!a28)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v28);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    dispatch::callback<void({block_pointer})(dispatch::group_session)>::~callback(v29 - 96);
    uint64_t v31 = a28;
    if (!a28) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v31);
  std::__shared_weak_count::__release_weak(v28);
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace19setLPMHandlers_syncEv_block_invoke(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    int v47 = v6;
    if (v6)
    {
      std::string::size_type v7 = v6;
      if (!a1[5])
      {
LABEL_69:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      uint64_t v8 = *(NSObject **)(v5 + 144);
      if (v8)
      {
        dispatch_retain(*(dispatch_object_t *)(v5 + 144));
        dispatch_group_enter(v8);
      }
      size_t v9 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1A609F000, v9, OS_LOG_TYPE_DEFAULT, "#I ARI Low Power enter event received", buf, 2u);
      }
      if (*(void *)(v5 + 480))
      {
        char v45 = 0;
        LOBYTE(v44) = 0;
        Timestamp::Timestamp((Timestamp *)v42);
        char v41 = 0;
        LOBYTE(v40) = 0;
        char v39 = 0;
        LOBYTE(__p) = 0;
        abm::trace::TraceInfo::push();
        if (v39 < 0)
        {
          operator delete(__p);
          if ((v41 & 0x80000000) == 0)
          {
LABEL_11:
            std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v42, v43);
            if ((v45 & 0x80000000) == 0) {
              goto LABEL_12;
            }
LABEL_21:
            operator delete(v44);
            if (*(unsigned char *)(v5 + 328)) {
              goto LABEL_22;
            }
            goto LABEL_13;
          }
        }
        else if ((v41 & 0x80000000) == 0)
        {
          goto LABEL_11;
        }
        operator delete(v40);
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v42, v43);
        if (v45 < 0) {
          goto LABEL_21;
        }
      }
LABEL_12:
      if (*(unsigned char *)(v5 + 328)) {
        goto LABEL_22;
      }
LABEL_13:
      std::string::size_type v10 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1A609F000, v10, OS_LOG_TYPE_DEFAULT, "#I Holding ARI LPM Enter session until EnterLowPower call", buf, 2u);
      }
      uint64_t v11 = *a2;
      if (*a2)
      {
        dispatch_retain(*a2);
        dispatch_group_enter(v11);
      }
      uint64_t v12 = *(NSObject **)(v5 + 320);
      *(void *)(v5 + 320) = v11;
      if (v12)
      {
        dispatch_group_leave(v12);
        dispatch_release(v12);
      }
LABEL_22:
      memset(buf, 170, sizeof(buf));
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN8ICETrace19setLPMHandlers_syncEv_block_invoke_32;
      aBlock[3] = &__block_descriptor_tmp_33_1;
      uint64_t v13 = *a2;
      aBlock[4] = v5;
      dispatch_group_t group = v13;
      if (v13)
      {
        dispatch_retain(v13);
        dispatch_group_enter(group);
      }
      dispatch_group_t v34 = v8;
      if (v8)
      {
        dispatch_retain(v8);
        dispatch_group_enter(v34);
      }
      dispatch_object_t v14 = (std::__shared_weak_count *)a1[6];
      uint64_t v35 = a1[5];
      size_t v36 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::size_type v15 = _Block_copy(aBlock);
      long long v16 = *(NSObject **)(v5 + 88);
      if (v16) {
        dispatch_retain(*(dispatch_object_t *)(v5 + 88));
      }
      *(void *)std::string buf = v15;
      *(void *)&uint8_t buf[8] = v16;
      *(unsigned char *)(v5 + 317) = 0;
      uint64_t v17 = *(void *)(v5 + 392);
      size_t v18 = *(const void **)(v5 + 408);
      if (v18)
      {
        unint64_t v19 = _Block_copy(v18);
        uint64_t v31 = v19;
        BasebandTransport::reportStatus(v17, 0, &v31);
        if (v19) {
          _Block_release(v19);
        }
        int v20 = *(unsigned __int8 *)(v5 + 316);
        size_t v21 = *(NSObject **)(v5 + 40);
        BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
        if (v20)
        {
LABEL_34:
          if (v22)
          {
            *(_WORD *)int v30 = 0;
            _os_log_impl(&dword_1A609F000, v21, OS_LOG_TYPE_DEFAULT, "#I Enabling sleep profile for LPM", v30, 2u);
          }
          uint64_t v23 = *(void *)(v5 + 416);
          if (!v23) {
            goto LABEL_55;
          }
          if (v15)
          {
            int v28 = _Block_copy(v15);
            dispatch_object_t object = v16;
            if (!v16)
            {
LABEL_40:
              (*(void (**)(uint64_t, void **))(*(void *)v23 + 56))(v23, &v28);
              if (object) {
                dispatch_release(object);
              }
              if (v28) {
                _Block_release(v28);
              }
LABEL_55:
              if (v16) {
                dispatch_release(v16);
              }
              if (v15) {
                _Block_release(v15);
              }
              if (v36) {
                std::__shared_weak_count::__release_weak(v36);
              }
              if (v34)
              {
                dispatch_group_leave(v34);
                if (v34) {
                  dispatch_release(v34);
                }
              }
              if (group)
              {
                dispatch_group_leave(group);
                if (group) {
                  dispatch_release(group);
                }
              }
              if (v8)
              {
                dispatch_group_leave(v8);
                dispatch_release(v8);
              }
              goto LABEL_69;
            }
          }
          else
          {
            int v28 = 0;
            dispatch_object_t object = v16;
            if (!v16) {
              goto LABEL_40;
            }
          }
          dispatch_retain(v16);
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v31 = 0;
        BasebandTransport::reportStatus(v17, 0, &v31);
        int v24 = *(unsigned __int8 *)(v5 + 316);
        size_t v21 = *(NSObject **)(v5 + 40);
        BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
        if (v24) {
          goto LABEL_34;
        }
      }
      if (v22)
      {
        *(_WORD *)int v30 = 0;
        _os_log_impl(&dword_1A609F000, v21, OS_LOG_TYPE_DEFAULT, "#I Pausing traffic for LPM", v30, 2u);
      }
      uint64_t v25 = *(void *)(v5 + 416);
      if (!v25) {
        goto LABEL_55;
      }
      if (v15)
      {
        std::string v26 = _Block_copy(v15);
        dispatch_object_t v27 = v16;
        if (!v16)
        {
LABEL_51:
          (*(void (**)(uint64_t, void **))(*(void *)v25 + 64))(v25, &v26);
          if (v27) {
            dispatch_release(v27);
          }
          if (v26) {
            _Block_release(v26);
          }
          goto LABEL_55;
        }
      }
      else
      {
        std::string v26 = 0;
        dispatch_object_t v27 = v16;
        if (!v16) {
          goto LABEL_51;
        }
      }
      dispatch_retain(v16);
      goto LABEL_51;
    }
  }
}

void sub_1A60F3E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,dispatch_group_t object,dispatch_group_t group,uint64_t a23,std::__shared_weak_count *a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a9);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a25);
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (object)
  {
    dispatch_group_leave(object);
    if (object) {
      dispatch_release(object);
    }
  }
  if (v32)
  {
    dispatch_group_leave(v32);
    dispatch_release(v32);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v33 - 80);
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace19setLPMHandlers_syncEv_block_invoke_32(void *a1, uint64_t *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      std::string::size_type v7 = v6;
      if (!a1[7])
      {
LABEL_17:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      uint64_t v8 = *a2;
      if (*a2) {
        size_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        size_t v9 = 0;
      }
      std::string::size_type v10 = *(NSObject **)(v5 + 40);
      BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
        if (v11)
        {
          int v16 = 138412290;
          uint64_t v17 = v8;
          uint64_t v12 = "#E Unable to switch to sleep configuration: %@";
          uint64_t v13 = v10;
          uint32_t v14 = 12;
LABEL_12:
          _os_log_impl(&dword_1A609F000, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v16, v14);
        }
      }
      else if (v11)
      {
        LOWORD(v16) = 0;
        uint64_t v12 = "#I Successfully configured sleep";
        uint64_t v13 = v10;
        uint32_t v14 = 2;
        goto LABEL_12;
      }
      if (*a2) {
        std::string::size_type v15 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        std::string::size_type v15 = 0;
      }
      *(unsigned char *)(v5 + 317) = v15 == 0;
      goto LABEL_17;
    }
  }
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c30_ZTSN8dispatch13group_sessionE56c29_ZTSNSt3__18weak_ptrI5TraceEE(void *a1, void *a2)
{
  unint64_t v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = a2[6];
  a1[6] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    std::string::size_type v7 = a1[6];
    if (v7) {
      dispatch_group_enter(v7);
    }
  }
  uint64_t v8 = a2[8];
  a1[7] = a2[7];
  a1[8] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c30_ZTSN8dispatch13group_sessionE56c29_ZTSNSt3__18weak_ptrI5TraceEE(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[6];
  if (v3)
  {
    dispatch_group_leave(v3);
    unint64_t v4 = a1[6];
    if (v4) {
      dispatch_release(v4);
    }
  }
  uint64_t v5 = a1[5];
  if (v5)
  {
    dispatch_group_leave(v5);
    uint64_t v6 = a1[5];
    if (v6)
    {
      dispatch_release(v6);
    }
  }
}

void ___ZN8ICETrace19setLPMHandlers_syncEv_block_invoke_38(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    goto LABEL_75;
  }
  uint64_t v79 = std::__shared_weak_count::lock(v3);
  if (!v79) {
    return;
  }
  uint64_t v78 = a1[5];
  if (!v78) {
    goto LABEL_75;
  }
  unint64_t v4 = *(NSObject **)(v2 + 144);
  if (v4)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 144));
    dispatch_group_enter(v4);
  }
  if (!*(void *)(v2 + 480)) {
    goto LABEL_101;
  }
  char v77 = 0;
  LOBYTE(v76) = 0;
  Timestamp::Timestamp((Timestamp *)v74);
  char v73 = 0;
  LOWORD(v72) = 0;
  LOBYTE(v71) = 0;
  abm::trace::TraceInfo::push();
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v74, v75);
  if (v77 < 0)
  {
    operator delete(v76);
    if (*(unsigned char *)(v2 + 317))
    {
LABEL_9:
      memset(buf, 170, sizeof(buf));
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN8ICETrace19setLPMHandlers_syncEv_block_invoke_40;
      aBlock[3] = &__block_descriptor_tmp_44;
      aBlock[4] = v2;
      dispatch_group_t group = v4;
      if (v4)
      {
        dispatch_retain(v4);
        dispatch_group_enter(group);
      }
      uint64_t v5 = (std::__shared_weak_count *)a1[6];
      uint64_t v35 = a1[5];
      size_t v36 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v6 = (config::hw *)_Block_copy(aBlock);
      std::string::size_type v7 = v6;
      uint64_t v8 = *(NSObject **)(v2 + 88);
      if (v8) {
        dispatch_retain(*(dispatch_object_t *)(v2 + 88));
      }
      *(void *)std::string buf = v7;
      *(void *)&uint8_t buf[8] = v8;
      uint64_t v9 = *(void *)(v2 + 416);
      if (!v9) {
        goto LABEL_23;
      }
      if (v7)
      {
        uint64_t v31 = _Block_copy(v7);
        dispatch_object_t object = v8;
        if (!v8)
        {
LABEL_19:
          (*(void (**)(uint64_t, void **))(*(void *)v9 + 48))(v9, &v31);
          if (object) {
            dispatch_release(object);
          }
          uint64_t v6 = (config::hw *)v31;
          if (v31) {
            _Block_release(v31);
          }
LABEL_23:
          int v10 = *(_DWORD *)(v2 + 152);
          if ((v10 == 6 || !v10) && (config::hw::watch(v6) & 1) == 0 && !*(unsigned char *)(v2 + 304))
          {
            uint64_t v27 = *(void *)(v2 + 392);
            int v28 = *(const void **)(v2 + 408);
            if (v28)
            {
              uint64_t v29 = _Block_copy(v28);
              int v30 = v29;
              BasebandTransport::reportStatus(v27, 600, &v30);
              if (v29) {
                _Block_release(v29);
              }
            }
            else
            {
              int v30 = 0;
              BasebandTransport::reportStatus(v27, 600, &v30);
            }
          }
          if (v8) {
            dispatch_release(v8);
          }
          if (v7) {
            _Block_release(v7);
          }
          if (v36) {
            std::__shared_weak_count::__release_weak(v36);
          }
          if (group)
          {
            dispatch_group_leave(group);
            if (group) {
              dispatch_release(group);
            }
          }
LABEL_73:
          if (!v4) {
            goto LABEL_75;
          }
          goto LABEL_74;
        }
      }
      else
      {
        uint64_t v31 = 0;
        dispatch_object_t object = v8;
        if (!v8) {
          goto LABEL_19;
        }
      }
      dispatch_retain(v8);
      goto LABEL_19;
    }
  }
  else
  {
LABEL_101:
    if (*(unsigned char *)(v2 + 317)) {
      goto LABEL_9;
    }
  }
  BOOL v11 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1A609F000, v11, OS_LOG_TYPE_DEFAULT, "#E Detected failure on last LPM entry", buf, 2u);
  }
  if (*(void *)(v2 + 480))
  {
    char v70 = 0;
    LOBYTE(v69) = 0;
    Timestamp::Timestamp((Timestamp *)v67);
    char v66 = 0;
    LOBYTE(v65) = 0;
    char v64 = 0;
    LOBYTE(v63) = 0;
    abm::trace::TraceInfo::push();
    if (v64 < 0)
    {
      operator delete(v63);
      if ((v66 & 0x80000000) == 0)
      {
LABEL_42:
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v67, v68);
        if ((v70 & 0x80000000) == 0) {
          goto LABEL_43;
        }
LABEL_92:
        operator delete(v69);
        goto LABEL_43;
      }
    }
    else if ((v66 & 0x80000000) == 0)
    {
      goto LABEL_42;
    }
    operator delete(v65);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v67, v68);
    if ((v70 & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_92;
  }
LABEL_43:
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v62 = v12;
  long long v61 = v12;
  long long v60 = v12;
  long long v59 = v12;
  long long v58 = v12;
  long long v57 = v12;
  *(_OWORD *)std::string buf = v12;
  uint64_t v13 = (const void *)*MEMORY[0x1E4F4C6E8];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (long long *)operator new(v17 + 1);
    *((void *)&__dst + 1) = v15;
    unint64_t v55 = v18 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_50;
  }
  HIBYTE(v55) = v14;
  p_dst = &__dst;
  if (v14) {
LABEL_50:
  }
    memmove(p_dst, v13, v15);
  *((unsigned char *)p_dst + v15) = 0;
  unint64_t v19 = (const void *)*MEMORY[0x1E4F4D038];
  size_t v20 = strlen((const char *)*MEMORY[0x1E4F4D038]);
  if (v20 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v21 = v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    BOOL v22 = operator new(v23 + 1);
    *((void *)&v52 + 1) = v21;
    unint64_t v53 = v24 | 0x8000000000000000;
    *(void *)&long long v52 = v22;
    goto LABEL_58;
  }
  HIBYTE(v53) = v20;
  BOOL v22 = &v52;
  if (v20) {
LABEL_58:
  }
    memmove(v22, v19, v21);
  *((unsigned char *)v22 + v21) = 0;
  uint64_t v25 = (char *)operator new(0x28uLL);
  uint64_t v50 = v25;
  long long v51 = xmmword_1A61F7FF0;
  strcpy(v25, "Detected failure on last LPM entry");
  Timestamp::Timestamp((Timestamp *)v46);
  Timestamp::asString((uint64_t)v46, 0, 9, __p);
  char v45 = 0;
  LOBYTE(v44) = 0;
  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v52, (long long *)&v50, (uint64_t)__p, 7, &v44);
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v46, v47);
  operator delete(v25);
  if (SHIBYTE(v53) < 0) {
    operator delete((void *)v52);
  }
  if (SHIBYTE(v55) < 0) {
    operator delete((void *)__dst);
  }
  ResetInfo::ResetInfo(&v37, (long long *)buf);
  ICETrace::commandResetModem_sync(v2, (long long *)&v37);
  if (v43 < 0)
  {
    operator delete(v42);
    if ((v41 & 0x80000000) == 0)
    {
LABEL_67:
      if ((v39 & 0x80000000) == 0) {
        goto LABEL_68;
      }
      goto LABEL_83;
    }
  }
  else if ((v41 & 0x80000000) == 0)
  {
    goto LABEL_67;
  }
  operator delete(v40);
  if ((v39 & 0x80000000) == 0)
  {
LABEL_68:
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_84;
  }
LABEL_83:
  operator delete(v38);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_69:
    if ((SHIBYTE(v62) & 0x80000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_85;
  }
LABEL_84:
  operator delete(v37.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v62) & 0x80000000) == 0)
  {
LABEL_70:
    if ((SBYTE7(v60) & 0x80000000) == 0) {
      goto LABEL_71;
    }
    goto LABEL_86;
  }
LABEL_85:
  operator delete(*((void **)&v61 + 1));
  if ((SBYTE7(v60) & 0x80000000) == 0)
  {
LABEL_71:
    if ((SHIBYTE(v58) & 0x80000000) == 0) {
      goto LABEL_72;
    }
LABEL_87:
    operator delete(*((void **)&v57 + 1));
    if ((SBYTE7(v57) & 0x80000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_88;
  }
LABEL_86:
  operator delete((void *)v59);
  if (SHIBYTE(v58) < 0) {
    goto LABEL_87;
  }
LABEL_72:
  if ((SBYTE7(v57) & 0x80000000) == 0) {
    goto LABEL_73;
  }
LABEL_88:
  operator delete(*(void **)buf);
  if (v4)
  {
LABEL_74:
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
LABEL_75:
  std::string v26 = v79;
  if (v79)
  {
    if (!atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1A60F48F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, dispatch_group_t group, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72 < 0) {
    operator delete(__p);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v75 - 240, *(void **)(v75 - 232));
  if (*(char *)(v75 - 193) < 0) {
    operator delete(*(void **)(v75 - 216));
  }
  if (v74)
  {
    dispatch_group_leave(v74);
    dispatch_release(v74);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v75 - 96);
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace19setLPMHandlers_syncEv_block_invoke_40(void *a1, uint64_t *a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    long long v46 = v6;
    if (v6)
    {
      std::string::size_type v7 = v6;
      if (a1[6])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        int v10 = *(NSObject **)(v5 + 40);
        BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        if (v9)
        {
          if (v11)
          {
            *(_DWORD *)std::string buf = 138412290;
            *(void *)&uint8_t buf[4] = v8;
            _os_log_impl(&dword_1A609F000, v10, OS_LOG_TYPE_DEFAULT, "#E Unable to switch to active configuration: %@", buf, 0xCu);
          }
          *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v52 = v12;
          long long v53 = v12;
          long long v50 = v12;
          long long v51 = v12;
          long long v48 = v12;
          long long v49 = v12;
          *(_OWORD *)std::string buf = v12;
          uint64_t v13 = (const void *)*MEMORY[0x1E4F4C6E8];
          size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
          if (v14 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v15 = v14;
          if (v14 >= 0x17)
          {
            uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17) {
              uint64_t v17 = v14 | 7;
            }
            uint64_t v18 = v17 + 1;
            p_dst = (long long *)operator new(v17 + 1);
            *((void *)&__dst + 1) = v15;
            unint64_t v44 = v18 | 0x8000000000000000;
            *(void *)&long long __dst = p_dst;
          }
          else
          {
            HIBYTE(v44) = v14;
            p_dst = &__dst;
            if (!v14)
            {
LABEL_20:
              *((unsigned char *)p_dst + v15) = 0;
              unint64_t v19 = (const void *)*MEMORY[0x1E4F4D038];
              size_t v20 = strlen((const char *)*MEMORY[0x1E4F4D038]);
              if (v20 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              size_t v21 = v20;
              if (v20 >= 0x17)
              {
                uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v20 | 7) != 0x17) {
                  uint64_t v23 = v20 | 7;
                }
                uint64_t v24 = v23 + 1;
                BOOL v22 = operator new(v23 + 1);
                *((void *)&v41 + 1) = v21;
                unint64_t v42 = v24 | 0x8000000000000000;
                *(void *)&long long v41 = v22;
              }
              else
              {
                HIBYTE(v42) = v20;
                BOOL v22 = &v41;
                if (!v20)
                {
LABEL_28:
                  v22[v21] = 0;
                  uint64_t v25 = (char *)operator new(0x38uLL);
                  char v39 = v25;
                  long long v40 = xmmword_1A61F8000;
                  strcpy(v25, "Failed to enable active trace profile with ARI command");
                  Timestamp::Timestamp((Timestamp *)v35);
                  Timestamp::asString((uint64_t)v35, 0, 9, __p);
                  char v34 = 0;
                  LOBYTE(v33) = 0;
                  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v41, (long long *)&v39, (uint64_t)__p, 7, &v33);
                  if (v38 < 0) {
                    operator delete(__p[0]);
                  }
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v35, v36);
                  operator delete(v25);
                  if (SHIBYTE(v42) < 0) {
                    operator delete((void *)v41);
                  }
                  if (SHIBYTE(v44) < 0) {
                    operator delete((void *)__dst);
                  }
                  ResetInfo::ResetInfo(&v26, (long long *)buf);
                  ICETrace::commandResetModem_sync(v5, (long long *)&v26);
                  if (v32 < 0)
                  {
                    operator delete(v31);
                    if ((v30 & 0x80000000) == 0)
                    {
LABEL_36:
                      if ((v28 & 0x80000000) == 0) {
                        goto LABEL_37;
                      }
                      goto LABEL_46;
                    }
                  }
                  else if ((v30 & 0x80000000) == 0)
                  {
                    goto LABEL_36;
                  }
                  operator delete(v29);
                  if ((v28 & 0x80000000) == 0)
                  {
LABEL_37:
                    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                      goto LABEL_38;
                    }
                    goto LABEL_47;
                  }
LABEL_46:
                  operator delete(v27);
                  if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_38:
                    if ((SHIBYTE(v53) & 0x80000000) == 0) {
                      goto LABEL_39;
                    }
                    goto LABEL_48;
                  }
LABEL_47:
                  operator delete(v26.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v53) & 0x80000000) == 0)
                  {
LABEL_39:
                    if ((SBYTE7(v51) & 0x80000000) == 0) {
                      goto LABEL_40;
                    }
                    goto LABEL_49;
                  }
LABEL_48:
                  operator delete(*((void **)&v52 + 1));
                  if ((SBYTE7(v51) & 0x80000000) == 0)
                  {
LABEL_40:
                    if ((SHIBYTE(v49) & 0x80000000) == 0) {
                      goto LABEL_41;
                    }
                    goto LABEL_50;
                  }
LABEL_49:
                  operator delete((void *)v50);
                  if ((SHIBYTE(v49) & 0x80000000) == 0)
                  {
LABEL_41:
                    if ((SBYTE7(v48) & 0x80000000) == 0) {
                      goto LABEL_42;
                    }
                    goto LABEL_51;
                  }
LABEL_50:
                  operator delete(*((void **)&v48 + 1));
                  if ((SBYTE7(v48) & 0x80000000) == 0)
                  {
LABEL_42:
                    std::string::size_type v7 = v46;
                    if (!v46) {
                      return;
                    }
                    goto LABEL_52;
                  }
LABEL_51:
                  operator delete(*(void **)buf);
                  std::string::size_type v7 = v46;
                  if (!v46) {
                    return;
                  }
                  goto LABEL_52;
                }
              }
              memmove(v22, v19, v21);
              goto LABEL_28;
            }
          }
          memmove(p_dst, v13, v15);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_1A609F000, v10, OS_LOG_TYPE_DEFAULT, "#I Successfully configured active trace", buf, 2u);
        }
      }
LABEL_52:
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1A60F4EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  ResetInfo::~ResetInfo(&a9);
  ResetInfo::~ResetInfo((void **)(v9 - 192));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v9 - 208);
  _Unwind_Resume(a1);
}

void sub_1A60F4F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a26, a27);
  operator delete(v49);
  if (a43 < 0)
  {
    operator delete(a38);
    if ((a49 & 0x80000000) == 0)
    {
LABEL_5:
      std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v50 - 208);
      _Unwind_Resume(a1);
    }
  }
  else if ((a49 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a44);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v50 - 208);
  _Unwind_Resume(a1);
}

void sub_1A60F4FBC(_Unwind_Exception *a1)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 208);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(dispatch::group_session)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(void)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ICETrace::clearLPMHandlers_sync(ICETrace *this)
{
  uint64_t v2 = *((void *)this + 52);
  if (v2)
  {
    aBlocunint64_t k = 0;
    dispatch_object_t object = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v2 + 112))(v2, &aBlock);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    uint64_t v3 = *((void *)this + 52);
    unint64_t v4 = 0;
    dispatch_object_t v5 = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v3 + 120))(v3, &v4);
    if (v5) {
      dispatch_release(v5);
    }
    if (v4) {
      _Block_release(v4);
    }
  }
}

void sub_1A60F5114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A60F5128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  dispatch::callback<void({block_pointer})(dispatch::group_session)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void ICETrace::prepare_sync(ICETrace *this)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((int *)this + 38);
    if (v3 > 6) {
      unint64_t v4 = "Unknown";
    }
    else {
      unint64_t v4 = off_1E5C470C8[v3];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    _os_log_impl(&dword_1A609F000, v2, OS_LOG_TYPE_DEFAULT, "#I Preparing BB Trace with mode: %s", (uint8_t *)&buf, 0xCu);
  }
  *((unsigned char *)this + 360) = 0;
  ICETrace::setTraceMode_sync((uint64_t)this, *((_DWORD *)this + 38));
  dispatch_object_t v5 = abm::trace::kScratchFolder[0];
  size_t v6 = strlen(abm::trace::kScratchFolder[0]);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_std::string buf = (std::string *)operator new(v9 + 1);
    buf.__r_.__value_.__l.__size_ = v7;
    buf.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_13;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = v6;
  p_std::string buf = &buf;
  if (v6) {
LABEL_13:
  }
    memmove(p_buf, v5, v7);
  p_buf->__r_.__value_.__s.__data_[v7] = 0;
  BOOL v11 = std::string::append(&buf, "BBTrace.scratch/", 0x10uLL);
  long long v12 = (void *)v11->__r_.__value_.__r.__words[0];
  size_t size = v11->__r_.__value_.__l.__size_;
  v33[0] = v11->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v33 + 3) = *(_DWORD *)((char *)&v11->__r_.__value_.__r.__words[2] + 3);
  int v14 = SHIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if (*((void *)this + 46)) {
      goto LABEL_28;
    }
  }
  else if (*((void *)this + 46))
  {
    goto LABEL_28;
  }
  int v15 = *((_DWORD *)this + 38);
  if (v15 == 6 || !v15)
  {
    HIBYTE(v32[2]) = 18;
    strcpy((char *)v32, "MaxMemoryFileCount");
    memset(&__p, 0, sizeof(__p));
    char v36 = 7;
    strcpy((char *)v35, "BBTrace");
    memset(&buf, 0, sizeof(buf));
    BOOL v16 = defaults::get((char *)v35, (char *)v32, &buf);
    if (v16)
    {
      prop::file::get<std::string>((const void **)v35, (uint64_t)v32, (uint64_t)&buf, &v37);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v37;
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      if ((v36 & 0x80000000) == 0)
      {
LABEL_26:
        if (!v16)
        {
LABEL_33:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v32[2]) & 0x80000000) == 0) {
              goto LABEL_35;
            }
          }
          else if ((SHIBYTE(v32[2]) & 0x80000000) == 0)
          {
            goto LABEL_35;
          }
          operator delete(v32[0]);
LABEL_35:
          buf.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAA0000;
          *(_OWORD *)&v43[8] = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0u;
          long long v39 = 0u;
          *(_OWORD *)long long v40 = 0u;
          *(_OWORD *)long long v41 = 0u;
          long long v42 = 0u;
          *(_OWORD *)char v43 = 0u;
          unint64_t v44 = 0xAAAAAAAA00100000;
          if (v14 < 0)
          {
            std::string::__assign_no_alias<true>((void *)&v42 + 1, v12, size);
            if (SBYTE7(v42) < 0)
            {
              v41[1] = (void *)5;
              unint64_t v19 = (char *)v41[0];
              goto LABEL_41;
            }
          }
          else
          {
            *((void *)&v42 + 1) = v12;
            *(void *)char v43 = size;
            *(_DWORD *)&v43[8] = v33[0];
            *(_DWORD *)&v43[11] = *(_DWORD *)((char *)v33 + 3);
            v43[15] = v14;
          }
          unint64_t v19 = (char *)v41;
          BYTE7(v42) = 5;
LABEL_41:
          strcpy(v19, ".istp");
          int v20 = *((_DWORD *)this + 83);
          *(_DWORD *)&v43[16] = *((_DWORD *)this + 85);
          *(_DWORD *)&v43[20] = v20;
          LODWORD(v44) = *((_DWORD *)this + 87);
          GetABMLogServer(&v30);
          TraceFileCollection::create();
          long long v21 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
          *(_OWORD *)&v37.__r_.__value_.__l.__data_ = 0uLL;
          BOOL v22 = (std::__shared_weak_count *)*((void *)this + 47);
          *((_OWORD *)this + 23) = v21;
          if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
          uint64_t v23 = (std::__shared_weak_count *)v37.__r_.__value_.__l.__size_;
          if (v37.__r_.__value_.__l.__size_
            && !atomic_fetch_add((atomic_ullong *volatile)(v37.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
          uint64_t v24 = v31;
          if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
            if ((v43[15] & 0x80000000) == 0)
            {
LABEL_50:
              if ((SBYTE7(v42) & 0x80000000) == 0) {
                goto LABEL_51;
              }
              goto LABEL_72;
            }
          }
          else if ((v43[15] & 0x80000000) == 0)
          {
            goto LABEL_50;
          }
          operator delete(*((void **)&v42 + 1));
          if ((SBYTE7(v42) & 0x80000000) == 0)
          {
LABEL_51:
            uint64_t v18 = (void *)*((void *)&v39 + 1);
            if (!*((void *)&v39 + 1)) {
              goto LABEL_53;
            }
            goto LABEL_52;
          }
LABEL_72:
          operator delete(v41[0]);
          uint64_t v18 = (void *)*((void *)&v39 + 1);
          if (!*((void *)&v39 + 1))
          {
LABEL_53:
            if (SBYTE7(v39) < 0) {
              operator delete((void *)buf.__r_.__value_.__l.__size_);
            }
            goto LABEL_55;
          }
LABEL_52:
          v40[0] = v18;
          operator delete(v18);
          goto LABEL_53;
        }
LABEL_32:
        util::convert<unsigned int>(&__p, (_DWORD *)this + 83, 0);
        goto LABEL_33;
      }
    }
    else if ((v36 & 0x80000000) == 0)
    {
      goto LABEL_26;
    }
    operator delete(v35[0]);
    if (!v16) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
LABEL_28:
  uint64_t v17 = *((void *)this + 5);
  uint64_t v18 = (void *)os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  if (v18)
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1A609F000, v17, OS_LOG_TYPE_DEFAULT, "#I Continuing trace with previous TraceFileCollection instance", (uint8_t *)&buf, 2u);
  }
LABEL_55:
  if (config::hw::watch((config::hw *)v18) && !*((_DWORD *)this + 38))
  {
    int v25 = ICETrace::openTransport_sync(this);
    std::string v26 = *((void *)this + 5);
    BOOL v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    if (v25)
    {
      if (v27)
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        char v28 = "#I Transport open success";
LABEL_62:
        _os_log_impl(&dword_1A609F000, v26, OS_LOG_TYPE_DEFAULT, v28, (uint8_t *)&buf, 2u);
      }
    }
    else if (v27)
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      char v28 = "#E Failed to open TRACE transport during prepare stage; ignore this failure and proceed";
      goto LABEL_62;
    }
  }
  if (*((void *)this + 46))
  {
    if (!*((unsigned char *)this + 472))
    {
      uint64_t v29 = *((void *)this + 18);
      if (v29)
      {
        dispatch_group_enter(v29);
        *((unsigned char *)this + 472) = 1;
      }
    }
  }
  *((unsigned char *)this + 473) = 1;
  if (v14 < 0) {
    operator delete(v12);
  }
}

void sub_1A60F5740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  TraceFileCollection::Parameters::~Parameters(&a34);
  if (v40 < 0)
  {
    operator delete(v39);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ICETrace::setTraceMode_sync(uint64_t a1, unsigned int a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (!a2 && !*(unsigned char *)(a1 + 329))
  {
    unint64_t v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = "Active on AP";
      _os_log_debug_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEBUG, "#D Mode (%s) has not changed", buf, 0xCu);
    }
    return 1;
  }
  if (a2 > 6 || ((1 << a2) & 0x45) == 0)
  {
    int v15 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_error_impl(&dword_1A609F000, v15, OS_LOG_TYPE_ERROR, "Invalid Mode selected: %d", buf, 8u);
    }
    *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v63 = v16;
    long long v64 = v16;
    long long v61 = v16;
    long long v62 = v16;
    *(_OWORD *)&uint8_t buf[16] = v16;
    long long v60 = v16;
    *(_OWORD *)std::string buf = v16;
    uint64_t v17 = (const void *)*MEMORY[0x1E4F4C6E8];
    size_t v18 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
    if (v18 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v19 = v18;
    if (v18 >= 0x17)
    {
      uint64_t v33 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17) {
        uint64_t v33 = v18 | 7;
      }
      uint64_t v34 = v33 + 1;
      p_dst = (long long *)operator new(v33 + 1);
      *((void *)&__dst + 1) = v19;
      unint64_t v58 = v34 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v58) = v18;
      p_dst = &__dst;
      if (!v18)
      {
LABEL_59:
        *((unsigned char *)p_dst + v19) = 0;
        uint64_t v35 = (const void *)*MEMORY[0x1E4F4D038];
        size_t v36 = strlen((const char *)*MEMORY[0x1E4F4D038]);
        if (v36 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v37 = v36;
        if (v36 >= 0x17)
        {
          uint64_t v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v36 | 7) != 0x17) {
            uint64_t v39 = v36 | 7;
          }
          uint64_t v40 = v39 + 1;
          char v38 = operator new(v39 + 1);
          *((void *)&v55 + 1) = v37;
          unint64_t v56 = v40 | 0x8000000000000000;
          *(void *)&long long v55 = v38;
        }
        else
        {
          HIBYTE(v56) = v36;
          char v38 = &v55;
          if (!v36)
          {
LABEL_67:
            v38[v37] = 0;
            BYTE7(v54[1]) = 21;
            strcpy((char *)v54, "Invalid Mode selected");
            Timestamp::Timestamp((Timestamp *)v50);
            Timestamp::asString((uint64_t)v50, 0, 9, __p);
            char v49 = 0;
            LOBYTE(v48) = 0;
            ResetInfo::ResetInfo((std::string *)buf, &__dst, &v55, v54, (uint64_t)__p, 7, &v48);
            if (v53 < 0)
            {
              operator delete(__p[0]);
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v50, v51);
              if ((SHIBYTE(v56) & 0x80000000) == 0)
              {
LABEL_69:
                if ((SHIBYTE(v58) & 0x80000000) == 0) {
                  goto LABEL_70;
                }
LABEL_81:
                operator delete((void *)__dst);
LABEL_70:
                ResetInfo::ResetInfo(&v41, (long long *)buf);
                ICETrace::commandResetModem_sync(a1, (long long *)&v41);
                if (v47 < 0)
                {
                  operator delete(v46);
                  if ((v45 & 0x80000000) == 0)
                  {
LABEL_72:
                    if ((v43 & 0x80000000) == 0) {
                      goto LABEL_73;
                    }
                    goto LABEL_84;
                  }
                }
                else if ((v45 & 0x80000000) == 0)
                {
                  goto LABEL_72;
                }
                operator delete(v44);
                if ((v43 & 0x80000000) == 0)
                {
LABEL_73:
                  if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_74;
                  }
                  goto LABEL_85;
                }
LABEL_84:
                operator delete(v42);
                if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_74:
                  *(_DWORD *)(a1 + 152) = 0;
                  if ((SHIBYTE(v64) & 0x80000000) == 0) {
                    goto LABEL_75;
                  }
                  goto LABEL_86;
                }
LABEL_85:
                operator delete(v41.__r_.__value_.__l.__data_);
                *(_DWORD *)(a1 + 152) = 0;
                if ((SHIBYTE(v64) & 0x80000000) == 0)
                {
LABEL_75:
                  if ((SBYTE7(v62) & 0x80000000) == 0) {
                    goto LABEL_76;
                  }
                  goto LABEL_87;
                }
LABEL_86:
                operator delete(*((void **)&v63 + 1));
                if ((SBYTE7(v62) & 0x80000000) == 0)
                {
LABEL_76:
                  if ((SHIBYTE(v60) & 0x80000000) == 0) {
                    goto LABEL_77;
                  }
                  goto LABEL_88;
                }
LABEL_87:
                operator delete((void *)v61);
                if ((SHIBYTE(v60) & 0x80000000) == 0)
                {
LABEL_77:
                  if ((buf[23] & 0x80000000) == 0) {
                    return 0;
                  }
LABEL_89:
                  operator delete(*(void **)buf);
                  return 0;
                }
LABEL_88:
                operator delete(*(void **)&buf[24]);
                if ((buf[23] & 0x80000000) == 0) {
                  return 0;
                }
                goto LABEL_89;
              }
            }
            else
            {
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v50, v51);
              if ((SHIBYTE(v56) & 0x80000000) == 0) {
                goto LABEL_69;
              }
            }
            operator delete((void *)v55);
            if ((SHIBYTE(v58) & 0x80000000) == 0) {
              goto LABEL_70;
            }
            goto LABEL_81;
          }
        }
        memmove(v38, v35, v37);
        goto LABEL_67;
      }
    }
    memmove(p_dst, v17, v19);
    goto LABEL_59;
  }
  if (!capabilities::abs::supportsBBUSBMux((capabilities::abs *)a1))
  {
    std::string::size_type v7 = (SoftwareBypassShim **)(a1 + 456);
    uint64_t v8 = *(SoftwareBypassShim **)(a1 + 456);
    if (v8)
    {
      if (*((void *)v8 + 2)) {
        goto LABEL_15;
      }
    }
    else
    {
      SoftwareBypassShim::create((std::__shared_weak_count **)buf);
      long long v28 = *(_OWORD *)buf;
      *(void *)std::string buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      uint64_t v29 = *(std::__shared_weak_count **)(a1 + 464);
      *(_OWORD *)std::string::size_type v7 = v28;
      if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
      uint64_t v30 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
      uint64_t v8 = *v7;
      if (*((void *)*v7 + 2))
      {
LABEL_15:
        if (a2 == 6) {
          unsigned int v9 = 56;
        }
        else {
          unsigned int v9 = 0;
        }
        if (a2 == 2) {
          uint64_t v10 = 9;
        }
        else {
          uint64_t v10 = v9;
        }
        uint64_t v5 = SoftwareBypassShim::bypassCtl(v8, v10);
        BOOL v11 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          long long v12 = SoftwareBypassShim::bypassInterfaceMaskAsString(*v7, v10);
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v12;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v5;
          _os_log_impl(&dword_1A609F000, v11, OS_LOG_TYPE_DEFAULT, "#I bypassCtl( %s): success: %d", buf, 0x12u);
          uint64_t v13 = *(NSObject **)(a1 + 40);
          if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
            return v5;
          }
        }
        else
        {
          uint64_t v13 = *(NSObject **)(a1 + 40);
          if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
            return v5;
          }
        }
        goto LABEL_25;
      }
    }
    uint64_t v31 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      goto LABEL_53;
    }
    *(_WORD *)std::string buf = 0;
    int v25 = "expected to use software bypass, but it is not supported";
    std::string v26 = v31;
    uint32_t v27 = 2;
LABEL_93:
    _os_log_error_impl(&dword_1A609F000, v26, OS_LOG_TYPE_ERROR, v25, buf, v27);
LABEL_53:
    uint64_t v5 = 0;
    uint64_t v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      return v5;
    }
    goto LABEL_25;
  }
  if (a2 == 2)
  {
    int v6 = TelephonyBasebandEnableModemMux();
    usleep(0x186A0u);
    if (!v6 || !TelephonyBasebandEnableModemVBUS())
    {
LABEL_41:
      uint64_t v23 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        goto LABEL_53;
      }
      uint64_t v24 = "On";
      if (a2 == 2) {
        uint64_t v24 = "Off";
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v24;
      int v25 = "Failed to set VBUS/Mux %s";
      std::string v26 = v23;
      uint32_t v27 = 12;
      goto LABEL_93;
    }
  }
  else if (!TelephonyBasebandEnableModemVBUS() || (TelephonyBasebandEnableModemMux() & 1) == 0)
  {
    goto LABEL_41;
  }
  long long v21 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = 1;
    uint64_t v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      return v5;
    }
    goto LABEL_25;
  }
  BOOL v22 = "Off";
  if (a2 == 2) {
    BOOL v22 = "On";
  }
  *(_DWORD *)std::string buf = 136315138;
  *(void *)&uint8_t buf[4] = v22;
  _os_log_impl(&dword_1A609F000, v21, OS_LOG_TYPE_DEFAULT, "#I Set VBUS/Mux %s", buf, 0xCu);
  uint64_t v5 = 1;
  uint64_t v13 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
LABEL_25:
    int v14 = "failure";
    if (v5) {
      int v14 = "success";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v14;
    _os_log_impl(&dword_1A609F000, v13, OS_LOG_TYPE_DEFAULT, "#I Set mode %s", buf, 0xCu);
  }
  return v5;
}

void sub_1A60F5FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ResetInfo::~ResetInfo((void **)va);
  ResetInfo::~ResetInfo((void **)(v2 - 192));
  _Unwind_Resume(a1);
}

void sub_1A60F6018(_Unwind_Exception *a1)
{
  ResetInfo::~ResetInfo((void **)(v1 - 192));
  _Unwind_Resume(a1);
}

void sub_1A60F602C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,void *a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a27, a28);
  if (a45 < 0) {
    operator delete(a40);
  }
  if (*(char *)(v45 - 193) < 0)
  {
    operator delete(*(void **)(v45 - 216));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void TraceFileCollection::Parameters::~Parameters(void **this)
{
  if (*((char *)this + 103) < 0)
  {
    operator delete(this[10]);
    if ((*((char *)this + 79) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = this[4];
      if (!v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((char *)this + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[7]);
  uint64_t v2 = this[4];
  if (v2)
  {
LABEL_4:
    this[5] = v2;
    operator delete(v2);
  }
LABEL_5:
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void ICETrace::start_sync(uint64_t a1, char **a2, const void **a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 473))
  {
    int v6 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_3;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 176))(a1);
    int v6 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
LABEL_3:
      if (!*(void *)(a1 + 480)) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  uint64_t v7 = *(int *)(a1 + 152);
  if (v7 > 6) {
    uint64_t v8 = "Unknown";
  }
  else {
    uint64_t v8 = off_1E5C470C8[v7];
  }
  *(_DWORD *)std::string buf = 136315138;
  uint64_t v30 = v8;
  _os_log_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEFAULT, "#I Starting BB Trace with mode: %s", buf, 0xCu);
  if (!*(void *)(a1 + 480))
  {
LABEL_11:
    unsigned int v9 = *a2;
    v22.gr_name = v9;
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_10:
  char v28 = 0;
  LOBYTE(v27) = 0;
  Timestamp::Timestamp((Timestamp *)v25);
  char v24 = 0;
  LOBYTE(v23) = 0;
  HIBYTE(v22.gr_mem) = 0;
  LOBYTE(v22.gr_passwd) = 0;
  abm::trace::TraceInfo::push();
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v25, v26);
  if ((v28 & 0x80000000) == 0) {
    goto LABEL_11;
  }
  operator delete(v27);
  unsigned int v9 = *a2;
  v22.gr_name = v9;
  if (v9) {
LABEL_12:
  }
    dispatch_retain((dispatch_object_t)v9);
LABEL_13:
  int started = ICETrace::issueStartCommands_sync((ICETrace *)a1, &v22);
  if (v9) {
    dispatch_release((dispatch_object_t)v9);
  }
  if (started)
  {
    ICETrace::setLPMHandlers_sync((ICETrace *)a1);
    if (*(void *)(a1 + 480))
    {
      char v21 = 0;
      LOBYTE(v20) = 0;
      Timestamp::Timestamp((Timestamp *)v18);
      LOBYTE(v17) = 0;
      LOBYTE(v16) = 0;
      abm::trace::TraceInfo::push();
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v18, v19);
      if (v21 < 0) {
        operator delete(v20);
      }
    }
  }
  else
  {
    BOOL v11 = *(std::__shared_weak_count **)(a1 + 376);
    *(void *)(a1 + 368) = 0;
    *(void *)(a1 + 376) = 0;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    ICETrace::setTraceMode_sync(a1, 0);
    *(unsigned char *)(a1 + 336) = 0;
    long long v12 = *a2;
    dispatch_object_t object = v12;
    if (v12) {
      dispatch_retain(v12);
    }
    uint64_t v13 = *a3;
    CFTypeRef cf = v13;
    if (v13) {
      CFRetain(v13);
    }
    (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(void *)a1 + 192))(a1, &object, &cf);
    if (cf) {
      CFRelease(cf);
    }
    if (object) {
      dispatch_release(object);
    }
  }
}

void sub_1A60F6498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, dispatch_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ICETrace::reinit(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1174405120;
  uint64_t v4[2] = ___ZN8ICETrace6reinitEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v4[3] = &__block_descriptor_tmp_50_0;
  v4[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v4);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void ___ZN8ICETrace6reinitEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 320);
  *(void *)(v1 + 320) = 0;
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
  *(unsigned char *)(v1 + 328) = 0;
}

void ICETrace::prepare(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1174405120;
  uint64_t v4[2] = ___ZN8ICETrace7prepareEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v4[3] = &__block_descriptor_tmp_53_0;
  v4[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v4);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void ___ZN8ICETrace7prepareEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 144);
  if (v2)
  {
    dispatch_retain(*(dispatch_object_t *)(v1 + 144));
    dispatch_group_enter(v2);
  }
  if (*(unsigned char *)(v1 + 336)) {
    (*(void (**)(uint64_t))(*(void *)v1 + 176))(v1);
  }
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void sub_1A60F6844(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void ICETrace::start(uint64_t a1, dispatch_object_t *a2, const void **a3)
{
  int v6 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v6);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1174405120;
  v10[2] = ___ZN8ICETrace5startEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v10[3] = &__block_descriptor_tmp_54;
  v10[4] = a1;
  dispatch_group_t group = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(group);
  }
  uint64_t v7 = *a3;
  CFTypeRef cf = v7;
  if (v7) {
    CFRetain(v7);
  }
  uint64_t v8 = (uint64_t *)(a1 + 72);
  unsigned int v9 = *a2;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  ctu::SharedSynchronizable<Trace>::execute_wrapped(v8, (uint64_t)v10);
  if (object) {
    dispatch_release(object);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v6)
  {
    dispatch_group_leave(v6);
    dispatch_release(v6);
  }
}

void ___ZN8ICETrace5startEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 144);
  if (v3)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 144));
    dispatch_group_enter(v3);
  }
  v27[0] = 0xAAAAAAAAAAAAAAAALL;
  v27[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v27, *(const __CFDictionary **)(a1 + 48));
  memset(v26, 170, sizeof(v26));
  unint64_t v4 = (const char *)*MEMORY[0x1E4F4C688];
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v25 = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v23, v4);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A62748E0](&v23);
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    uint64_t v5 = *(void *)(v2 + 416);
    if (v5) {
      goto LABEL_5;
    }
LABEL_8:
    int v6 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    uint64_t v7 = off_1EB5EE540;
    if (!off_1EB5EE540)
    {
      CommandDriverFactory::create_default_global((uint64_t *)__p, v6);
      long long v8 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      unsigned int v9 = (std::__shared_weak_count *)*(&off_1EB5EE540 + 1);
      off_1EB5EE540 = v8;
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      uint64_t v10 = (std::__shared_weak_count *)__p[1];
      if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      uint64_t v7 = off_1EB5EE540;
    }
    object[1] = v7;
    group v22 = (std::__shared_weak_count *)*(&off_1EB5EE540 + 1);
    if (*(&off_1EB5EE540 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EB5EE540 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*((void (**)(long long *__return_ptr, NSObject *))v7->isa + 17))(&v23, v7);
    long long v11 = v23;
    long long v23 = 0uLL;
    long long v12 = *(std::__shared_weak_count **)(v2 + 424);
    *(_OWORD *)(v2 + 416) = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    if (*((void *)&v23 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    goto LABEL_27;
  }
  operator delete(__p[0]);
  uint64_t v5 = *(void *)(v2 + 416);
  if (!v5) {
    goto LABEL_8;
  }
LABEL_5:
  if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 152))(v5) & 1) == 0) {
    goto LABEL_36;
  }
LABEL_27:
  ICETrace::processETB_sync((ICETrace *)v2);
  int v14 = *(NSObject **)(a1 + 56);
  if (*(unsigned char *)(v2 + 336))
  {
    object[0] = *(dispatch_object_t *)(a1 + 56);
    if (v14) {
      dispatch_retain(v14);
    }
    int v15 = *(const void **)(a1 + 48);
    CFTypeRef cf = v15;
    if (v15) {
      CFRetain(v15);
    }
    (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(void *)v2 + 184))(v2, object, &cf);
    if (cf) {
      CFRelease(cf);
    }
    long long v16 = object[0];
    if (object[0]) {
LABEL_35:
    }
      dispatch_release(v16);
  }
  else
  {
    size_t v19 = *(NSObject **)(a1 + 56);
    if (v14) {
      dispatch_retain(v14);
    }
    uint64_t v17 = *(const void **)(a1 + 48);
    CFTypeRef v18 = v17;
    if (v17) {
      CFRetain(v17);
    }
    (*(void (**)(uint64_t, NSObject **, CFTypeRef *))(*(void *)v2 + 192))(v2, &v19, &v18);
    if (v18) {
      CFRelease(v18);
    }
    long long v16 = v19;
    if (v19) {
      goto LABEL_35;
    }
  }
LABEL_36:
  if (SHIBYTE(v26[2]) < 0) {
    operator delete(v26[0]);
  }
  MEMORY[0x1A6274930](v27);
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_1A60F6D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (a28 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1A6274930](v29 - 64);
  if (v28)
  {
    dispatch_group_leave(v28);
    dispatch_release(v28);
  }
  _Unwind_Resume(a1);
}

void ICETrace::processETB_sync(ICETrace *this)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!capabilities::abs::supportsETB(this)) {
    return;
  }
  HIBYTE(v30) = 8;
  strcpy((char *)v29, "Disabled");
  uint64_t v3 = (_OWORD *)((char *)this + 208);
  uint64_t v2 = (const std::string::value_type *)*((void *)this + 26);
  int v4 = *((char *)this + 231);
  uint64_t v5 = v4 >= 0 ? (char *)this + 208 : (const char *)*((void *)this + 26);
  if (!strcasecmp((const char *)v29, v5)) {
    return;
  }
  if (v4 < 0)
  {
    if (!*((void *)this + 27)) {
      return;
    }
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v30 = 0;
    std::string::__init_copy_ctor_external(&v28, v2, *((void *)this + 27));
  }
  else
  {
    if (!v4) {
      return;
    }
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v30 = 0;
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *v3;
    v28.__r_.__value_.__r.__words[2] = *((void *)this + 28);
  }
  BOOL TraceConfigFile_sync = ICETrace::loadTraceConfigFile_sync((uint64_t)this, (std::string::size_type)&v28, v29, 1);
  BOOL v7 = TraceConfigFile_sync;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v28.__r_.__value_.__l.__data_);
    if (v7)
    {
LABEL_13:
      if ((char **)((char *)this + 280) != v29) {
        std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>((void *)this + 35, v29[0], v29[1], v29[1] - v29[0]);
      }
      long long v8 = (std::__shared_weak_count *)*((void *)this + 10);
      if (!v8 || (v9 = *((void *)this + 9), (uint64_t v10 = std::__shared_weak_count::lock(v8)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      long long v11 = v10;
      p_shared_weak_owners = &v10->__shared_weak_owners_;
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
      memset(buf, 170, 16);
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN8ICETrace15processETB_syncEv_block_invoke;
      aBlock[3] = &__block_descriptor_tmp_143;
      aBlock[4] = this;
      void aBlock[5] = v9;
      uint32_t v27 = v11;
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      uint64_t v13 = _Block_copy(aBlock);
      int v14 = *((void *)this + 11);
      if (v14) {
        dispatch_retain(*((dispatch_object_t *)this + 11));
      }
      *(void *)std::string buf = v13;
      *(void *)&uint8_t buf[8] = v14;
      uint64_t v15 = *((void *)this + 52);
      if (!v15)
      {
LABEL_34:
        if (v14) {
          dispatch_release(v14);
        }
        if (v13) {
          _Block_release(v13);
        }
        if (v27) {
          std::__shared_weak_count::__release_weak(v27);
        }
        std::__shared_weak_count::__release_weak(v11);
        size_t v19 = v29[0];
        if (!v29[0]) {
          return;
        }
        goto LABEL_45;
      }
      std::string __p = 0;
      char v24 = 0;
      uint64_t v25 = 0;
      uint64_t v17 = (unsigned char *)*((void *)this + 35);
      long long v16 = (unsigned char *)*((void *)this + 36);
      size_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if ((v18 & 0x8000000000000000) != 0) {
          std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
        }
        std::string __p = operator new(v16 - v17);
        uint64_t v25 = (char *)__p + v18;
        memcpy(__p, v17, v18);
        char v24 = (char *)__p + v18;
      }
      if (v13)
      {
        char v21 = _Block_copy(v13);
        dispatch_object_t object = v14;
        if (!v14)
        {
LABEL_28:
          (*(void (**)(uint64_t, void **, void **))(*(void *)v15 + 128))(v15, &__p, &v21);
          if (object) {
            dispatch_release(object);
          }
          if (v21) {
            _Block_release(v21);
          }
          if (__p)
          {
            char v24 = (char *)__p;
            operator delete(__p);
          }
          goto LABEL_34;
        }
      }
      else
      {
        char v21 = 0;
        dispatch_object_t object = v14;
        if (!v14) {
          goto LABEL_28;
        }
      }
      dispatch_retain(v14);
      goto LABEL_28;
    }
  }
  else if (TraceConfigFile_sync)
  {
    goto LABEL_13;
  }
  int v20 = *((void *)this + 5);
  if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    size_t v19 = v29[0];
    if (!v29[0]) {
      return;
    }
    goto LABEL_45;
  }
  if (*((char *)this + 231) < 0) {
    uint64_t v3 = *(_OWORD **)v3;
  }
  *(_DWORD *)std::string buf = 136315138;
  *(void *)&uint8_t buf[4] = v3;
  _os_log_error_impl(&dword_1A609F000, v20, OS_LOG_TYPE_ERROR, "Failed to load ETB config: %s", buf, 0xCu);
  size_t v19 = v29[0];
  if (v29[0])
  {
LABEL_45:
    v29[1] = v19;
    operator delete(v19);
  }
}

void sub_1A60F7208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE56c21_ZTSN8dispatch5groupE(void *a1, void *a2)
{
  int v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  int v6 = (const void *)a2[6];
  a1[6] = v6;
  if (v6) {
    CFRetain(v6);
  }
  BOOL v7 = a2[7];
  a1[7] = v7;
  if (v7)
  {
    dispatch_retain(v7);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE56c21_ZTSN8dispatch5groupE(void *a1)
{
  uint64_t v2 = a1[7];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  int v4 = a1[5];
  if (v4)
  {
    dispatch_group_leave(v4);
    uint64_t v5 = a1[5];
    if (v5)
    {
      dispatch_release(v5);
    }
  }
}

void ICETrace::stop_sync(uint64_t a1, NSObject **a2)
{
  int v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEFAULT, "#I Stopping", buf, 2u);
  }
  if (!*(void *)(a1 + 480)) {
    goto LABEL_7;
  }
  char v36 = 0;
  LOBYTE(v35) = 0;
  Timestamp::Timestamp((Timestamp *)v33);
  char v32 = 0;
  *(_WORD *)uint64_t v31 = 0;
  LOBYTE(v30) = 0;
  abm::trace::TraceInfo::push();
  if ((v31[0] & 0x80000000) == 0)
  {
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }
  operator delete(v30);
  if (v32 < 0)
  {
LABEL_35:
    operator delete(*(void **)&v31[1]);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v33, v34);
    if (v36 < 0) {
      goto LABEL_36;
    }
LABEL_7:
    BasebandTransport::close(*(BasebandTransport **)(a1 + 392));
    if (!*(unsigned char *)(a1 + 472)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_6:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v33, v34);
  if ((v36 & 0x80000000) == 0) {
    goto LABEL_7;
  }
LABEL_36:
  operator delete(v35);
  BasebandTransport::close(*(BasebandTransport **)(a1 + 392));
  if (*(unsigned char *)(a1 + 472))
  {
LABEL_8:
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 144));
    *(unsigned char *)(a1 + 472) = 0;
  }
LABEL_9:
  ICETrace::setTraceMode_sync(a1, 0);
  uint64_t v5 = *a2;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  int v6 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v6 || (uint64_t v7 = *(void *)(a1 + 72), (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  std::string v28 = (const void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v29 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN8ICETrace9stop_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_58;
  aBlock[4] = a1;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    if (group) {
      dispatch_group_enter(group);
    }
  }
  uint64_t v26 = v7;
  uint32_t v27 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = _Block_copy(aBlock);
  long long v11 = *(NSObject **)(a1 + 88);
  if (v11) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  }
  std::string v28 = v10;
  dispatch_object_t v29 = v11;
  uint64_t v12 = *(void *)(a1 + 416);
  if (v12 && (*(unsigned int (**)(uint64_t))(*(void *)v12 + 152))(v12))
  {
    *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
    char v13 = *(unsigned char *)(a1 + 304);
    *(void *)std::string buf = &unk_1EFB0ABE8;
    LOBYTE(v23) = 0;
    BYTE1(v23) = v13;
    *(void *)((char *)&v23 + 4) = *(void *)(a1 + 308);
    uint64_t v14 = *(void *)(a1 + 416);
    if (v10)
    {
      int v20 = _Block_copy(v10);
      dispatch_object_t object = v11;
      if (!v11)
      {
LABEL_25:
        (*(void (**)(uint64_t, uint8_t *, void **))(*(void *)v14 + 96))(v14, buf, &v20);
        if (object) {
          dispatch_release(object);
        }
        if (v20) {
          _Block_release(v20);
        }
        goto LABEL_29;
      }
    }
    else
    {
      int v20 = 0;
      dispatch_object_t object = v11;
      if (!v11) {
        goto LABEL_25;
      }
    }
    dispatch_retain(v11);
    goto LABEL_25;
  }
LABEL_29:
  ICETrace::clearLPMHandlers_sync((ICETrace *)a1);
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 424);
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    *(unsigned char *)(a1 + 473) = 0;
    if (!*(void *)(a1 + 480)) {
      goto LABEL_39;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 473) = 0;
    if (!*(void *)(a1 + 480)) {
      goto LABEL_39;
    }
  }
  char v19 = 0;
  LOBYTE(v18) = 0;
  Timestamp::Timestamp((Timestamp *)v16);
  abm::trace::TraceInfo::push();
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v16, v17);
  if (v19 < 0) {
    operator delete(v18);
  }
LABEL_39:
  if (v29) {
    dispatch_release(v29);
  }
  if (v28) {
    _Block_release(v28);
  }
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  std::__shared_weak_count::__release_weak(v9);
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A60F7848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,dispatch_group_t group,uint64_t a42,std::__shared_weak_count *a43)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a30);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v45 - 176);
  if (a43)
  {
    std::__shared_weak_count::__release_weak(a43);
    char v47 = group;
    if (!group) {
      goto LABEL_7;
    }
  }
  else
  {
    char v47 = group;
    if (!group) {
      goto LABEL_7;
    }
  }
  dispatch_group_leave(v47);
  if (group) {
    dispatch_release(group);
  }
LABEL_7:
  std::__shared_weak_count::__release_weak(v44);
  if (v43)
  {
    dispatch_group_leave(v43);
    dispatch_release(v43);
  }
  _Unwind_Resume(a1);
}

void sub_1A60F798C()
{
  if (!v0) {
    JUMPOUT(0x1A60F7984);
  }
  JUMPOUT(0x1A60F7974);
}

void ___ZN8ICETrace9stop_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[4];
  uint64_t v5 = *(NSObject **)(v4 + 144);
  if (v5)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 144));
    dispatch_group_enter(v5);
  }
  int v6 = (std::__shared_weak_count *)a1[7];
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    char v47 = v7;
    if (v7)
    {
      long long v8 = v7;
      if (a1[6])
      {
        uint64_t v9 = *a2;
        if (*a2) {
          uint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v10 = 0;
        }
        long long v11 = *(NSObject **)(v4 + 40);
        BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        if (v10)
        {
          if (v12)
          {
            *(_DWORD *)std::string buf = 138412290;
            *(void *)&uint8_t buf[4] = v9;
            _os_log_impl(&dword_1A609F000, v11, OS_LOG_TYPE_DEFAULT, "#E Stop failed: %@", buf, 0xCu);
          }
          *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v53 = v13;
          long long v54 = v13;
          long long v51 = v13;
          long long v52 = v13;
          long long v49 = v13;
          long long v50 = v13;
          *(_OWORD *)std::string buf = v13;
          uint64_t v14 = (const void *)*MEMORY[0x1E4F4C6E8];
          size_t v15 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
          if (v15 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v16 = v15;
          if (v15 >= 0x17)
          {
            uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v15 | 7) != 0x17) {
              uint64_t v18 = v15 | 7;
            }
            uint64_t v19 = v18 + 1;
            p_dst = (long long *)operator new(v18 + 1);
            *((void *)&__dst + 1) = v16;
            unint64_t v45 = v19 | 0x8000000000000000;
            *(void *)&long long __dst = p_dst;
          }
          else
          {
            HIBYTE(v45) = v15;
            p_dst = &__dst;
            if (!v15)
            {
LABEL_22:
              *((unsigned char *)p_dst + v16) = 0;
              int v20 = (const void *)*MEMORY[0x1E4F4D038];
              size_t v21 = strlen((const char *)*MEMORY[0x1E4F4D038]);
              if (v21 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              size_t v22 = v21;
              if (v21 >= 0x17)
              {
                uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v21 | 7) != 0x17) {
                  uint64_t v24 = v21 | 7;
                }
                uint64_t v25 = v24 + 1;
                long long v23 = operator new(v24 + 1);
                *((void *)&v42 + 1) = v22;
                unint64_t v43 = v25 | 0x8000000000000000;
                *(void *)&long long v42 = v23;
              }
              else
              {
                HIBYTE(v43) = v21;
                long long v23 = &v42;
                if (!v21)
                {
LABEL_30:
                  v23[v22] = 0;
                  uint64_t v26 = (char *)operator new(0x28uLL);
                  uint64_t v40 = v26;
                  long long v41 = xmmword_1A61F8010;
                  strcpy(v26, "Failed to stop trace with ARI command");
                  Timestamp::Timestamp((Timestamp *)v36);
                  Timestamp::asString((uint64_t)v36, 0, 9, __p);
                  char v35 = 0;
                  LOBYTE(v34) = 0;
                  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v42, (long long *)&v40, (uint64_t)__p, 7, &v34);
                  if (v39 < 0) {
                    operator delete(__p[0]);
                  }
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v36, v37);
                  operator delete(v26);
                  if (SHIBYTE(v43) < 0) {
                    operator delete((void *)v42);
                  }
                  if (SHIBYTE(v45) < 0) {
                    operator delete((void *)__dst);
                  }
                  ResetInfo::ResetInfo(&v27, (long long *)buf);
                  ICETrace::commandResetModem_sync(v4, (long long *)&v27);
                  if (v33 < 0)
                  {
                    operator delete(v32);
                    if ((v31 & 0x80000000) == 0)
                    {
LABEL_38:
                      if ((v29 & 0x80000000) == 0) {
                        goto LABEL_39;
                      }
                      goto LABEL_48;
                    }
                  }
                  else if ((v31 & 0x80000000) == 0)
                  {
                    goto LABEL_38;
                  }
                  operator delete(v30);
                  if ((v29 & 0x80000000) == 0)
                  {
LABEL_39:
                    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                      goto LABEL_40;
                    }
                    goto LABEL_49;
                  }
LABEL_48:
                  operator delete(v28);
                  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_40:
                    if ((SHIBYTE(v54) & 0x80000000) == 0) {
                      goto LABEL_41;
                    }
                    goto LABEL_50;
                  }
LABEL_49:
                  operator delete(v27.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v54) & 0x80000000) == 0)
                  {
LABEL_41:
                    if ((SBYTE7(v52) & 0x80000000) == 0) {
                      goto LABEL_42;
                    }
                    goto LABEL_51;
                  }
LABEL_50:
                  operator delete(*((void **)&v53 + 1));
                  if ((SBYTE7(v52) & 0x80000000) == 0)
                  {
LABEL_42:
                    if ((SHIBYTE(v50) & 0x80000000) == 0) {
                      goto LABEL_43;
                    }
                    goto LABEL_52;
                  }
LABEL_51:
                  operator delete((void *)v51);
                  if ((SHIBYTE(v50) & 0x80000000) == 0)
                  {
LABEL_43:
                    if ((SBYTE7(v49) & 0x80000000) == 0) {
                      goto LABEL_44;
                    }
LABEL_53:
                    operator delete(*(void **)buf);
                    long long v8 = v47;
                    if (!v47) {
                      goto LABEL_56;
                    }
                    goto LABEL_54;
                  }
LABEL_52:
                  operator delete(*((void **)&v49 + 1));
                  if ((SBYTE7(v49) & 0x80000000) == 0)
                  {
LABEL_44:
                    long long v8 = v47;
                    if (!v47) {
                      goto LABEL_56;
                    }
                    goto LABEL_54;
                  }
                  goto LABEL_53;
                }
              }
              memmove(v23, v20, v22);
              goto LABEL_30;
            }
          }
          memmove(p_dst, v14, v16);
          goto LABEL_22;
        }
        if (v12)
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_1A609F000, v11, OS_LOG_TYPE_DEFAULT, "#I Stop successful.", buf, 2u);
        }
      }
LABEL_54:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
LABEL_56:
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A60F7E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  ResetInfo::~ResetInfo((void **)&a9);
  ResetInfo::~ResetInfo((void **)(v50 - 208));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v50 - 224);
  if (!v49) {
    _Unwind_Resume(a1);
  }
  dispatch_group_leave(v49);
  dispatch_release(v49);
  _Unwind_Resume(a1);
}

void ICETrace::stop(uint64_t a1, dispatch_object_t *a2, const void **a3)
{
  int v6 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v6);
  }
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v7 || (uint64_t v9 = std::__shared_weak_count::lock(v7)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v10 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  void v13[2] = ___ZN8ICETrace4stopEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_59_0;
  v13[4] = a1;
  dispatch_group_t group = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(group);
  }
  uint64_t v15 = v8;
  size_t v16 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v11 = *a2;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  BOOL v12 = *a3;
  CFTypeRef cf = v12;
  if (v12) {
    CFRetain(v12);
  }
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v13);
  if (cf) {
    CFRelease(cf);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  std::__shared_weak_count::__release_weak(v10);
  if (v6)
  {
    dispatch_group_leave(v6);
    dispatch_release(v6);
  }
}

void sub_1A60F80C8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8ICETrace4stopEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(NSObject **)(v2 + 144);
  if (v3)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 144));
    dispatch_group_enter(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    BOOL v12 = v5;
    if (v5)
    {
      int v6 = v5;
      uint64_t v11 = a1[6];
      if (v11 && *(unsigned char *)(v2 + 336))
      {
        uint64_t v7 = a1[8];
        dispatch_object_t object = v7;
        if (v7) {
          dispatch_retain(v7);
        }
        uint64_t v8 = (const void *)a1[9];
        CFTypeRef cf = v8;
        if (v8) {
          CFRetain(v8);
        }
        (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(void *)v2 + 192))(v2, &object, &cf);
        if (cf) {
          CFRelease(cf);
        }
        if (object) {
          dispatch_release(object);
        }
      }
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_1A60F8224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)&a9);
  if (object)
  {
    dispatch_release(object);
    std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
    if (!v11) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
    if (!v11) {
      goto LABEL_3;
    }
  }
  dispatch_group_leave(v11);
  dispatch_release(v11);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c29_ZTSNSt3__18weak_ptrI5TraceEE64c21_ZTSN8dispatch5groupE72c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a2[8];
  a1[8] = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  CFTypeRef result = (CFTypeRef)a2[9];
  a1[9] = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c29_ZTSNSt3__18weak_ptrI5TraceEE64c21_ZTSN8dispatch5groupE72c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(void *a1)
{
  uint64_t v2 = (const void *)a1[9];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = a1[8];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = a1[5];
  if (v5)
  {
    dispatch_group_leave(v5);
    uint64_t v6 = a1[5];
    if (v6)
    {
      dispatch_release(v6);
    }
  }
}

void ICETrace::abort(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v4 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v4);
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1174405120;
  v6[2] = ___ZN8ICETrace5abortEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v6[3] = &__block_descriptor_tmp_60_1;
  void v6[4] = a1;
  dispatch_group_t group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(group);
  }
  uint64_t v5 = *a2;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v6);
  if (object) {
    dispatch_release(object);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
}

void ___ZN8ICETrace5abortEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 144);
  if (v3)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 144));
    dispatch_group_enter(v3);
  }
  uint64_t v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEFAULT, "#I Abort received", buf, 2u);
  }
  if (!*(void *)(v2 + 480)) {
    goto LABEL_7;
  }
  char v15 = 0;
  LOBYTE(v14) = 0;
  Timestamp::Timestamp((Timestamp *)v12);
  char v11 = 0;
  LOBYTE(v10) = 0;
  char v9 = 0;
  LOBYTE(__p) = 0;
  abm::trace::TraceInfo::push();
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v12, v13);
  if (v15 < 0)
  {
    operator delete(v14);
    uint64_t v5 = *(void *)(v2 + 416);
    if (!v5) {
      goto LABEL_12;
    }
  }
  else
  {
LABEL_7:
    uint64_t v5 = *(void *)(v2 + 416);
    if (!v5) {
      goto LABEL_12;
    }
  }
  uint64_t v6 = *(NSObject **)(a1 + 48);
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  (*(void (**)(uint64_t, dispatch_object_t *))(*(void *)v5 + 144))(v5, &object);
  if (object) {
    dispatch_release(object);
  }
LABEL_12:
  BasebandTransport::close(*(BasebandTransport **)(v2 + 392));
  if (*(unsigned char *)(v2 + 472))
  {
    dispatch_group_leave(*(dispatch_group_t *)(v2 + 144));
    *(unsigned char *)(v2 + 472) = 0;
  }
  *(unsigned char *)(v2 + 473) = 0;
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_1A60F8620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24)
{
  if (object) {
    dispatch_release(object);
  }
  if (v24)
  {
    dispatch_group_leave(v24);
    dispatch_release(v24);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A60F8698()
{
  if (!v0) {
    JUMPOUT(0x1A60F8690);
  }
  JUMPOUT(0x1A60F8680);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = *(NSObject **)(a1 + 40);
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 48) = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (v4)
    {
      dispatch_release(v4);
    }
  }
}

void ICETrace::shutdown(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v4 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v4);
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1174405120;
  v6[2] = ___ZN8ICETrace8shutdownEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v6[3] = &__block_descriptor_tmp_63_0;
  void v6[4] = a1;
  dispatch_group_t group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(group);
  }
  uint64_t v5 = *a2;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v6);
  if (object) {
    dispatch_release(object);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
}

void ___ZN8ICETrace8shutdownEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 144);
  if (v3)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 144));
    dispatch_group_enter(v3);
  }
  uint64_t v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEFAULT, "#I shutdown received", buf, 2u);
  }
  uint64_t v5 = *(void *)(v2 + 416);
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(a1 + 48);
    dispatch_object_t object = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    (*(void (**)(uint64_t, dispatch_object_t *))(*(void *)v5 + 144))(v5, &object);
    if (object) {
      dispatch_release(object);
    }
  }
  BasebandTransport::close(*(BasebandTransport **)(v2 + 392));
  if (*(unsigned char *)(v2 + 472))
  {
    dispatch_group_leave(*(dispatch_group_t *)(v2 + 144));
    *(unsigned char *)(v2 + 472) = 0;
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v2 + 424);
  *(void *)(v2 + 416) = 0;
  *(void *)(v2 + 424) = 0;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(v2 + 376);
  *(void *)(v2 + 368) = 0;
  *(void *)(v2 + 376) = 0;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(unsigned char *)(v2 + 473) = 0;
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_1A60F8A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object)
  {
    dispatch_release(object);
    if (!v10) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v10)
  {
    goto LABEL_6;
  }
  dispatch_group_leave(v10);
  dispatch_release(v10);
  goto LABEL_6;
}

void ICETrace::enterLowPower(ICETrace *this, group *a2)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  uint64_t v4[2] = ___ZN8ICETrace13enterLowPowerEN8dispatch5groupE_block_invoke;
  v4[3] = &__block_descriptor_tmp_64;
  v4[4] = this;
  uint64_t v5 = v4;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_0;
  uint64_t block[3] = &__block_descriptor_tmp_186;
  void block[4] = (char *)this + 72;
  void block[5] = &v5;
  uint64_t v3 = (char *)this + 88;
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)v3 + 1)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
}

void ___ZN8ICETrace13enterLowPowerEN8dispatch5groupE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 328) = 1;
  uint64_t v2 = *(NSObject **)(v1 + 320);
  *(void *)(v1 + 320) = 0;
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
  uint64_t v3 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I EnterLowPower received", v4, 2u);
  }
}

void ICETrace::exitLowPower(ICETrace *this, group *a2)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  uint64_t v4[2] = ___ZN8ICETrace12exitLowPowerEN8dispatch5groupE_block_invoke;
  v4[3] = &__block_descriptor_tmp_65;
  v4[4] = this;
  uint64_t v5 = v4;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_0;
  uint64_t block[3] = &__block_descriptor_tmp_186;
  void block[4] = (char *)this + 72;
  void block[5] = &v5;
  uint64_t v3 = (char *)this + 88;
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)v3 + 1)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
}

void ___ZN8ICETrace12exitLowPowerEN8dispatch5groupE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 328) = 0;
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1A609F000, v2, OS_LOG_TYPE_DEFAULT, "#I ExitLowPower received", v3, 2u);
  }
}

void ICETrace::snapshot(uint64_t a1, dispatch_object_t *a2, const __CFDictionary **a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v5);
  }
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = "snapshot";
    _os_log_debug_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEBUG, "#D %s", buf, 0xCu);
  }
  v65[0] = 0xAAAAAAAAAAAAAAAALL;
  v65[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v65, *a3);
  memset(buf, 170, sizeof(buf));
  uint64_t v7 = (const void *)*MEMORY[0x1E4F4C3A0];
  size_t v8 = strlen((const char *)*MEMORY[0x1E4F4C3A0]);
  if (v8 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v9 = v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v9;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_12;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8;
  p_dst = &__dst;
  if (v8) {
LABEL_12:
  }
    memmove(p_dst, v7, v9);
  long long v13 = (const char *)*MEMORY[0x1E4F4C4C8];
  p_dst->__r_.__value_.__s.__data_[v9] = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, v13);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A62748E0](__p);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  memset(&__dst, 170, sizeof(__dst));
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_1A61F71C0;
  strcpy((char *)__p[0], "kCollectTelephonyLogsWithCoredump");
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v62, "kKeyTraceAction");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A62748E0](&v62);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  memset(__p, 170, sizeof(__p));
  strcpy((char *)&v62, "kTraceFilterActionNone");
  *((unsigned char *)&v62.__r_.__value_.__s + 23) = 22;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v66, "kKeyTraceFilterAction");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A62748E0](&v66);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = abm::trace::kSnapshotFolder[0];
  size_t v15 = strlen(abm::trace::kSnapshotFolder[0]);
  if (v15 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v16 = (void *)v15;
  if (v15 >= 0x17)
  {
    uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v18 = v15 | 7;
    }
    uint64_t v19 = v18 + 1;
    uint64_t v17 = operator new(v18 + 1);
    v59[1] = v16;
    unint64_t v60 = v19 | 0x8000000000000000;
    v59[0] = v17;
    goto LABEL_26;
  }
  HIBYTE(v60) = v15;
  uint64_t v17 = v59;
  if (v15) {
LABEL_26:
  }
    memmove(v17, v14, (size_t)v16);
  *((unsigned char *)v16 + (void)v17) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v56, "kKeyTraceDumpStatePath");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A62748E0](&v56);
  int v20 = abm::trace::kLogDirPrefix[0];
  size_t v21 = strlen(abm::trace::kLogDirPrefix[0]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    long long v23 = operator new(v24 + 1);
    size_t v57 = v22;
    int64_t v58 = v25 | 0x8000000000000000;
    unint64_t v56 = v23;
    goto LABEL_34;
  }
  HIBYTE(v58) = v21;
  long long v23 = &v56;
  if (v21) {
LABEL_34:
  }
    memmove(v23, v20, v22);
  *((unsigned char *)v23 + v22) = 0;
  if (v58 >= 0) {
    uint64_t v26 = (const std::string::value_type *)&v56;
  }
  else {
    uint64_t v26 = (const std::string::value_type *)v56;
  }
  if (v58 >= 0) {
    std::string::size_type v27 = HIBYTE(v58);
  }
  else {
    std::string::size_type v27 = v57;
  }
  std::string v28 = std::string::append(&v61, v26, v27);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if ((buf[23] & 0x80u) == 0) {
    uint64_t v30 = buf;
  }
  else {
    uint64_t v30 = *(uint8_t **)buf;
  }
  if ((buf[23] & 0x80u) == 0) {
    std::string::size_type v31 = buf[23];
  }
  else {
    std::string::size_type v31 = *(void *)&buf[8];
  }
  char v32 = std::string::append(&v66, (const std::string::value_type *)v30, v31);
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  size_t v34 = strlen(abm::trace::kICETraceSnapshotDirectorySuffix[0]);
  char v35 = std::string::append(&v62, abm::trace::kICETraceSnapshotDirectorySuffix[0], v34);
  char v36 = (std::string::value_type *)v35->__r_.__value_.__r.__words[0];
  std::string::size_type size = v35->__r_.__value_.__l.__size_;
  std::string::size_type v38 = v35->__r_.__value_.__r.__words[2];
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v62.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_49:
      if ((SHIBYTE(v58) & 0x80000000) == 0) {
        goto LABEL_50;
      }
      goto LABEL_82;
    }
  }
  else if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_49;
  }
  operator delete(v66.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v58) & 0x80000000) == 0)
  {
LABEL_50:
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_51;
    }
LABEL_83:
    operator delete(v61.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v60) & 0x80000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_84;
  }
LABEL_82:
  operator delete(v56);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_83;
  }
LABEL_51:
  if ((SHIBYTE(v60) & 0x80000000) == 0) {
    goto LABEL_52;
  }
LABEL_84:
  operator delete(v59[0]);
LABEL_52:
  memset(&v62, 170, sizeof(v62));
  memset(&v66, 0, sizeof(v66));
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v61, "kKeyTraceDumpStateReason");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A62748E0](&v61);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v61, (const char *)*MEMORY[0x1E4F4C488]);
  char v39 = (void **)(a1 + 432);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A62748E0](&v61);
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*v39);
  }
  *(_OWORD *)char v39 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
  *(void *)(a1 + 448) = *((void *)&v66.__r_.__value_.__l + 2);
  uint64_t v40 = (void *)HIBYTE(__p[2]);
  int v41 = SHIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v40 = __p[1];
  }
  if (v40 != (void *)22) {
    goto LABEL_68;
  }
  long long v42 = (void **)__p[0];
  if (SHIBYTE(__p[2]) >= 0) {
    long long v42 = __p;
  }
  unint64_t v43 = *v42;
  unint64_t v44 = v42[1];
  uint64_t v45 = *(uint64_t *)((char *)v42 + 14);
  BOOL v46 = v43 == *(void **)"kTraceFilterActionNone" && v44 == *(void **)"lterActionNone";
  if (!v46 || v45 != *(void *)"tionNone")
  {
LABEL_68:
    long long v48 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      long long v49 = (void **)__p[0];
      if (v41 >= 0) {
        long long v49 = __p;
      }
      LODWORD(v66.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words + 4) = (std::string::size_type)v49;
      _os_log_impl(&dword_1A609F000, v48, OS_LOG_TYPE_DEFAULT, "#I Skipping snapshot as trace filter is '%s'", (uint8_t *)&v66, 0xCu);
    }
    goto LABEL_72;
  }
  v51[0] = MEMORY[0x1E4F143A8];
  v51[1] = 1174405120;
  v51[2] = ___ZN8ICETrace8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  _OWORD v51[3] = &__block_descriptor_tmp_69_0;
  v51[4] = a1;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v53, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else {
    std::string v53 = __dst;
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v54, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  }
  else {
    std::string v54 = v62;
  }
  if ((v38 & 0x8000000000000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v55, v36, size);
  }
  else
  {
    v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
    v55.__r_.__value_.__l.__size_ = size;
    v55.__r_.__value_.__r.__words[2] = v38;
  }
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v51);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v55.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_104:
      if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_105;
      }
      goto LABEL_109;
    }
  }
  else if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_104;
  }
  operator delete(v54.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_105:
    uint64_t v50 = group;
    if (!group) {
      goto LABEL_72;
    }
    goto LABEL_110;
  }
LABEL_109:
  operator delete(v53.__r_.__value_.__l.__data_);
  uint64_t v50 = group;
  if (!group) {
    goto LABEL_72;
  }
LABEL_110:
  dispatch_group_leave(v50);
  if (group) {
    dispatch_release(group);
  }
LABEL_72:
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v62.__r_.__value_.__l.__data_);
    if ((v38 & 0x8000000000000000) == 0)
    {
LABEL_74:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        goto LABEL_75;
      }
      goto LABEL_87;
    }
  }
  else if ((v38 & 0x8000000000000000) == 0)
  {
    goto LABEL_74;
  }
  operator delete(v36);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
LABEL_75:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_88;
  }
LABEL_87:
  operator delete(__p[0]);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_76:
    if (((char)buf[23] & 0x80000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_89;
  }
LABEL_88:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (((char)buf[23] & 0x80000000) == 0)
  {
LABEL_77:
    MEMORY[0x1A6274930](v65);
    if (!v5) {
      return;
    }
    goto LABEL_78;
  }
LABEL_89:
  operator delete(*(void **)buf);
  MEMORY[0x1A6274930](v65);
  if (v5)
  {
LABEL_78:
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A60F950C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v65 = group;
      if (!group)
      {
LABEL_8:
        if (a53 < 0) {
          operator delete(a48);
        }
        if (v62 < 0) {
          operator delete(v61);
        }
        if (a60 < 0) {
          operator delete(a55);
        }
        if (*(char *)(v63 - 177) < 0) {
          operator delete(*(void **)(v63 - 200));
        }
        if (*(char *)(v63 - 105) < 0) {
          operator delete(*(void **)(v63 - 128));
        }
        MEMORY[0x1A6274930](v63 - 176);
        if (v60)
        {
          dispatch_group_leave(v60);
          dispatch_release(v60);
        }
        _Unwind_Resume(a1);
      }
LABEL_7:
      dispatch_group_leave(v65);
      dispatch_release(group);
      goto LABEL_8;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  uint64_t v65 = group;
  if (!group) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void ___ZN8ICETrace8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 144);
  if (v3)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 144));
    dispatch_group_enter(v3);
  }
  if (*(unsigned char *)(v2 + 336) && *(void *)(v2 + 368))
  {
    capabilities::radio::firmwarePrefix((uint64_t *)&v34, (capabilities::radio *)a1);
    uint64_t v4 = std::string::insert(&v34, 0, "Baseband Trace\nBBFW Version: ", 0x1DuLL);
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    uint64_t v6 = (void *)(v2 + 432);
    int v7 = *(char *)(v2 + 455);
    if (v7 >= 0) {
      size_t v8 = (const std::string::value_type *)(v2 + 432);
    }
    else {
      size_t v8 = *(const std::string::value_type **)(v2 + 432);
    }
    if (v7 >= 0) {
      std::string::size_type v9 = *(unsigned __int8 *)(v2 + 455);
    }
    else {
      std::string::size_type v9 = *(void *)(v2 + 440);
    }
    uint64_t v10 = std::string::append(&v35, v8, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = std::string::append(&v38, "\n", 1uLL);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v37 = v12->__r_.__value_.__r.__words[2];
    long long v36 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v38.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_13:
        if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_14;
        }
LABEL_39:
        operator delete(v34.__r_.__value_.__l.__data_);
LABEL_14:
        uint64_t v14 = *(unsigned __int8 *)(a1 + 71);
        int v15 = (char)v14;
        if ((v14 & 0x80u) != 0) {
          uint64_t v14 = *(void *)(a1 + 56);
        }
        if (v14 == 17)
        {
          if (v15 >= 0) {
            size_t v16 = (uint64_t *)(a1 + 48);
          }
          else {
            size_t v16 = *(uint64_t **)(a1 + 48);
          }
          uint64_t v17 = *v16;
          uint64_t v18 = v16[1];
          uint64_t v19 = *((unsigned __int8 *)v16 + 16);
          BOOL v21 = v17 == *(void *)"kShutdownAllTrace"
             && v18 == *(void *)"nAllTrace"
             && v19 == str_72[16];
          BOOL v22 = 1;
          if (v21)
          {
            int v23 = *(unsigned __int8 *)(v2 + 344);
            *(unsigned char *)(v2 + 360) = 1;
            BasebandTransport::close(*(BasebandTransport **)(v2 + 392));
            if (*(unsigned char *)(v2 + 472))
            {
              dispatch_group_leave(*(dispatch_group_t *)(v2 + 144));
              *(unsigned char *)(v2 + 472) = 0;
            }
            BOOL v22 = v23 != 0;
            ICETrace::setTraceMode_sync(v2, 0);
          }
          if (!*(void *)(v2 + 480)) {
            goto LABEL_43;
          }
        }
        else
        {
          BOOL v22 = 1;
          if (!*(void *)(v2 + 480)) {
            goto LABEL_43;
          }
        }
        v38.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        *(_OWORD *)&v38.__r_.__value_.__r.__words[1] = xmmword_1A61F71E0;
        strcpy(v38.__r_.__value_.__l.__data_, "Trace State Configuration");
        ICETrace::getStateAsDict_sync(v2, a1 + 72, &object);
        abm::trace::TraceInfo::push();
        xpc_release(object);
        xpc_object_t object = 0;
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v38.__r_.__value_.__l.__data_);
          if ((*(char *)(a1 + 119) & 0x80000000) == 0) {
            goto LABEL_36;
          }
        }
        else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
        {
LABEL_36:
          std::string v32 = *(std::string *)(a1 + 96);
          goto LABEL_42;
        }
        std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
LABEL_42:
        Timestamp::Timestamp((Timestamp *)v30);
        abm::trace::TraceInfo::push();
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v30, v31);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v32.__r_.__value_.__l.__data_);
          uint64_t v24 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_44;
          }
          goto LABEL_47;
        }
LABEL_43:
        uint64_t v24 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
LABEL_44:
          if (*(char *)(v2 + 455) < 0) {
            uint64_t v6 = (void *)*v6;
          }
          LODWORD(v38.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v38.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
          _os_log_impl(&dword_1A609F000, v24, OS_LOG_TYPE_DEFAULT, "#I Snapshot: BBFW=%s", (uint8_t *)&v38, 0xCu);
          uint64_t v24 = *(NSObject **)(v2 + 40);
        }
LABEL_47:
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v25 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            uint64_t v25 = (void *)*v25;
          }
          LODWORD(v38.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v38.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
          WORD2(v38.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v38.__r_.__value_.__r.__words[1] + 6) = v22;
          _os_log_impl(&dword_1A609F000, v24, OS_LOG_TYPE_DEFAULT, "#I Snapshot: Path=%s [move=%d]", (uint8_t *)&v38, 0x12u);
        }
        uint64_t v26 = *(void *)(v2 + 392);
        v38.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
        v38.__r_.__value_.__l.__size_ = 0x40000000;
        v38.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN17BasebandTransport9dumpStateEb_block_invoke;
        char v39 = &__block_descriptor_tmp_80;
        uint64_t v40 = v26;
        char v41 = 1;
        ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)(v26 + 72), (uint64_t)&v38);
        std::string::size_type v27 = *(std::__shared_weak_count **)(v2 + 488);
        long long v29 = v27;
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        TraceFileCollection::snapshot();
        if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
        std::string v28 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v38.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1A609F000, v28, OS_LOG_TYPE_DEFAULT, "#I snapshot complete", (uint8_t *)&v38, 2u);
        }
        if (SHIBYTE(v37) < 0) {
          operator delete((void *)v36);
        }
        goto LABEL_60;
      }
    }
    else if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v35.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_60:
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_1A60F9D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,xpc_object_t object,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a24, a25);
  if (a32 < 0) {
    operator delete(a27);
  }
  if (*(char *)(v47 - 137) < 0)
  {
    operator delete(*(void **)(v47 - 160));
    if (!v46) {
LABEL_12:
    }
      _Unwind_Resume(a1);
  }
  else if (!v46)
  {
    goto LABEL_12;
  }
  dispatch_group_leave(v46);
  dispatch_release(v46);
  goto LABEL_12;
}

void sub_1A60F9E3C()
{
  if (!v0) {
    JUMPOUT(0x1A60F9E34);
  }
  JUMPOUT(0x1A60F9E24);
}

void ICETrace::getStateAsDict_sync(uint64_t a1@<X0>, uint64_t a2@<X1>, xpc_object_t *a3@<X8>)
{
  *a3 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v7 = v6;
  uint64_t v8 = MEMORY[0x1E4F14590];
  if (v6)
  {
    *a3 = v6;
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    *a3 = v7;
    if (!v7)
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A6275E60](v7) == v8)
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  xpc_object_t v9 = xpc_null_create();
LABEL_8:
  *a3 = v9;
LABEL_9:
  xpc_release(v7);
  xpc_object_t v10 = *a3;
  if (MEMORY[0x1A6275E60](*a3) != v8)
  {
    long long v11 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1A609F000, v11, OS_LOG_TYPE_ERROR, "Failed to create state dump dictionary", (uint8_t *)&buf, 2u);
    }
    return;
  }
  if (*(unsigned char *)(a1 + 336)) {
    uint64_t v12 = "true";
  }
  else {
    uint64_t v12 = "false";
  }
  xpc_object_t v13 = xpc_string_create(v12);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "Enabled", v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  uint64_t v15 = *(int *)(a1 + 152);
  if (v15 > 7) {
    size_t v16 = "Unknown";
  }
  else {
    size_t v16 = off_1E5C47088[v15];
  }
  xpc_object_t v17 = xpc_string_create(v16);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "Mode", v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  ICETrace::historyAsString_sync(a1, (char *)&buf);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string buf = &buf;
  }
  else {
    p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v20 = xpc_string_create((const char *)p_buf);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "History", v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a1 + 304)) {
    BOOL v22 = "true";
  }
  else {
    BOOL v22 = "false";
  }
  xpc_object_t v23 = xpc_string_create(v22);
  if (!v23) {
    xpc_object_t v23 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "BackgroundMode", v23);
  xpc_object_t v24 = xpc_null_create();
  xpc_release(v23);
  xpc_release(v24);
  std::to_string(&buf, *(_DWORD *)(a1 + 308));
  std::string __p = buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v26 = xpc_string_create((const char *)p_p);
  if (!v26) {
    xpc_object_t v26 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a3, "High_Watermark", v26);
  xpc_object_t v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v28 = *(_DWORD *)(a1 + 312);
  memset(&__p, 0, sizeof(__p));
  std::to_string(&buf, v28);
  std::string __p = buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v29 = &__p;
  }
  else {
    long long v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v30 = xpc_string_create((const char *)v29);
  if (!v30) {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_object_t v31 = *a3;
  xpc_dictionary_set_value(*a3, "Low_Watermark", v30);
  xpc_object_t v32 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    long long v33 = (const char *)(a1 + 160);
    if ((*(char *)(a1 + 183) & 0x80000000) == 0) {
      goto LABEL_48;
    }
  }
  else
  {
    long long v33 = (const char *)(a1 + 160);
    if ((*(char *)(a1 + 183) & 0x80000000) == 0) {
      goto LABEL_48;
    }
  }
  long long v33 = *(const char **)v33;
LABEL_48:
  xpc_object_t v34 = xpc_string_create(v33);
  if (!v34) {
    xpc_object_t v34 = xpc_null_create();
  }
  xpc_dictionary_set_value(v31, "File", v34);
  xpc_object_t v35 = xpc_null_create();
  xpc_release(v34);
  xpc_release(v35);
  if (*(unsigned char *)(a1 + 316)) {
    long long v36 = "true";
  }
  else {
    long long v36 = "false";
  }
  xpc_object_t v37 = xpc_string_create(v36);
  if (!v37) {
    xpc_object_t v37 = xpc_null_create();
  }
  xpc_dictionary_set_value(v31, "Enabled_During_Sleep", v37);
  xpc_object_t v38 = xpc_null_create();
  xpc_release(v37);
  xpc_release(v38);
  char v39 = (const char *)(a1 + 184);
  if (*(char *)(a1 + 207) < 0) {
    char v39 = *(const char **)v39;
  }
  xpc_object_t v40 = xpc_string_create(v39);
  if (!v40) {
    xpc_object_t v40 = xpc_null_create();
  }
  xpc_dictionary_set_value(v31, "File_Sleep", v40);
  xpc_object_t v41 = xpc_null_create();
  xpc_release(v40);
  xpc_release(v41);
  unsigned int v42 = *(_DWORD *)(a1 + 348);
  memset(&__p, 0, sizeof(__p));
  std::to_string(&buf, v42);
  std::string __p = buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v43 = &__p;
  }
  else {
    unint64_t v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v44 = xpc_string_create((const char *)v43);
  if (!v44) {
    xpc_object_t v44 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a3, "FileSize", v44);
  xpc_object_t v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unsigned int v46 = *(_DWORD *)(a1 + 352);
  memset(&__p, 0, sizeof(__p));
  std::to_string(&buf, v46);
  std::string __p = buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v47 = &__p;
  }
  else {
    uint64_t v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v48 = xpc_string_create((const char *)v47);
  if (!v48) {
    xpc_object_t v48 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a3, "SizeIO", v48);
  xpc_object_t v49 = xpc_null_create();
  xpc_release(v48);
  xpc_release(v49);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unsigned int v50 = *(_DWORD *)(a1 + 356);
  memset(&__p, 0, sizeof(__p));
  std::to_string(&buf, v50);
  std::string __p = buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v51 = &__p;
  }
  else {
    long long v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v52 = xpc_string_create((const char *)v51);
  if (!v52) {
    xpc_object_t v52 = xpc_null_create();
  }
  xpc_object_t v53 = *a3;
  xpc_dictionary_set_value(*a3, "NumberOfReadIO", v52);
  xpc_object_t v54 = xpc_null_create();
  xpc_release(v52);
  xpc_release(v54);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    std::string v55 = (const char *)(a1 + 208);
    if ((*(char *)(a1 + 231) & 0x80000000) == 0) {
      goto LABEL_80;
    }
  }
  else
  {
    std::string v55 = (const char *)(a1 + 208);
    if ((*(char *)(a1 + 231) & 0x80000000) == 0) {
      goto LABEL_80;
    }
  }
  std::string v55 = *(const char **)v55;
LABEL_80:
  xpc_object_t v56 = xpc_string_create(v55);
  if (!v56) {
    xpc_object_t v56 = xpc_null_create();
  }
  xpc_dictionary_set_value(v53, "ETBFile", v56);
  xpc_object_t v57 = xpc_null_create();
  xpc_release(v56);
  xpc_release(v57);
  if (*(char *)(a2 + 23) >= 0) {
    int64_t v58 = (const char *)a2;
  }
  else {
    int64_t v58 = *(const char **)a2;
  }
  xpc_object_t v59 = xpc_string_create(v58);
  if (!v59) {
    xpc_object_t v59 = xpc_null_create();
  }
  xpc_dictionary_set_value(v53, (const char *)*MEMORY[0x1E4F4CA90], v59);
  xpc_object_t v60 = xpc_null_create();
  xpc_release(v59);
  xpc_release(v60);
  uint64_t v62 = *(void *)(a1 + 232);
  std::string v61 = *(std::string::value_type **)(a1 + 240);
  unint64_t v63 = (unint64_t)&v61[-v62];
  if ((unint64_t)&v61[-v62] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v63 > 0x16)
  {
    uint64_t v71 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v63 | 7) != 0x17) {
      uint64_t v71 = v63 | 7;
    }
    uint64_t v72 = v71 + 1;
    long long v64 = (std::string *)operator new(v71 + 1);
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)&v61[-v62];
    buf.__r_.__value_.__r.__words[2] = v72 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
    if ((std::string::value_type *)v62 != v61) {
      goto LABEL_90;
    }
LABEL_99:
    uint64_t v65 = v64;
    goto LABEL_106;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = (_BYTE)v61 - v62;
  long long v64 = &buf;
  if ((std::string::value_type *)v62 == v61) {
    goto LABEL_99;
  }
LABEL_90:
  if (v63 < 0x20 || (unint64_t)v64 - v62 < 0x20)
  {
    uint64_t v65 = v64;
    std::string v66 = (std::string::value_type *)v62;
  }
  else
  {
    uint64_t v65 = (std::string *)((char *)v64 + (v63 & 0xFFFFFFFFFFFFFFE0));
    std::string v66 = (std::string::value_type *)(v62 + (v63 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v67 = (long long *)(v62 + 16);
    uint64_t v68 = &v64->__r_.__value_.__r.__words[2];
    unint64_t v69 = v63 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v70 = *v67;
      *((_OWORD *)v68 - 1) = *(v67 - 1);
      *(_OWORD *)uint64_t v68 = v70;
      v67 += 2;
      v68 += 4;
      v69 -= 32;
    }
    while (v69);
    if (v63 == (v63 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_106;
    }
  }
  do
  {
    std::string::value_type v73 = *v66++;
    v65->__r_.__value_.__s.__data_[0] = v73;
    uint64_t v65 = (std::string *)((char *)v65 + 1);
  }
  while (v66 != v61);
LABEL_106:
  v65->__r_.__value_.__s.__data_[0] = 0;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v74 = &buf;
  }
  else {
    __int16 v74 = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v75 = xpc_string_create((const char *)v74);
  if (!v75) {
    xpc_object_t v75 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a3, "Active Mask", v75);
  xpc_object_t v76 = xpc_null_create();
  xpc_release(v75);
  xpc_release(v76);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  uint64_t v78 = *(void *)(a1 + 256);
  char v77 = *(std::string::value_type **)(a1 + 264);
  unint64_t v79 = (unint64_t)&v77[-v78];
  if ((unint64_t)&v77[-v78] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v79 <= 0x16)
  {
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = (_BYTE)v77 - v78;
    size_t v80 = &buf;
    if ((std::string::value_type *)v78 != v77) {
      goto LABEL_116;
    }
LABEL_125:
    unint64_t v81 = v80;
    goto LABEL_128;
  }
  uint64_t v87 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v79 | 7) != 0x17) {
    uint64_t v87 = v79 | 7;
  }
  uint64_t v88 = v87 + 1;
  size_t v80 = (std::string *)operator new(v87 + 1);
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)&v77[-v78];
  buf.__r_.__value_.__r.__words[2] = v88 | 0x8000000000000000;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
  if ((std::string::value_type *)v78 == v77) {
    goto LABEL_125;
  }
LABEL_116:
  if (v79 < 0x20 || (unint64_t)v80 - v78 < 0x20)
  {
    unint64_t v81 = v80;
    uint64_t v82 = (std::string::value_type *)v78;
    do
    {
LABEL_127:
      std::string::value_type v89 = *v82++;
      v81->__r_.__value_.__s.__data_[0] = v89;
      unint64_t v81 = (std::string *)((char *)v81 + 1);
    }
    while (v82 != v77);
    goto LABEL_128;
  }
  unint64_t v81 = (std::string *)((char *)v80 + (v79 & 0xFFFFFFFFFFFFFFE0));
  uint64_t v82 = (std::string::value_type *)(v78 + (v79 & 0xFFFFFFFFFFFFFFE0));
  long long v83 = (long long *)(v78 + 16);
  CFAllocatorRef v84 = &v80->__r_.__value_.__r.__words[2];
  unint64_t v85 = v79 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v86 = *v83;
    *((_OWORD *)v84 - 1) = *(v83 - 1);
    *(_OWORD *)CFAllocatorRef v84 = v86;
    v83 += 2;
    v84 += 4;
    v85 -= 32;
  }
  while (v85);
  if (v79 != (v79 & 0xFFFFFFFFFFFFFFE0)) {
    goto LABEL_127;
  }
LABEL_128:
  v81->__r_.__value_.__s.__data_[0] = 0;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v90 = &buf;
  }
  else {
    long long v90 = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v91 = xpc_string_create((const char *)v90);
  if (!v91) {
    xpc_object_t v91 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a3, "Sleep Mask", v91);
  xpc_object_t v92 = xpc_null_create();
  xpc_release(v91);
  xpc_release(v92);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
}

void sub_1A60FA864(void *a1)
{
}

void sub_1A60FA870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    xpc::dict::~dict(v14);
    _Unwind_Resume(a1);
  }
  xpc::dict::~dict(v14);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a2 + 40);
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
  if (v4)
  {
    dispatch_retain(v4);
    long long v5 = a1[1].__r_.__value_.__r.__words[2];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 2, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&a1[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 3, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(void *)(a2 + 88);
    *(_OWORD *)&a1[3].__r_.__value_.__l.__data_ = v7;
  }
  uint64_t v8 = a1 + 4;
  if (*(char *)(a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 96);
    a1[4].__r_.__value_.__r.__words[2] = *(void *)(a2 + 112);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
}

void sub_1A60FAAC0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 95) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      long long v5 = *(NSObject **)(v1 + 40);
      if (!v5) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  long long v5 = *(NSObject **)(v1 + 40);
  if (!v5) {
    goto LABEL_9;
  }
LABEL_7:
  dispatch_group_leave(v5);
  long long v6 = *(NSObject **)(v1 + 40);
  if (v6) {
    dispatch_release(v6);
  }
LABEL_9:
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_4:
    uint64_t v2 = *(NSObject **)(a1 + 40);
    if (!v2) {
      return;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*(void **)(a1 + 48));
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (!v2) {
    return;
  }
LABEL_9:
  dispatch_group_leave(v2);
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_release(v3);
  }
}

void ICETrace::dumpState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (uint64_t *)(a1 + 72);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1174405120;
  uint64_t v4[2] = ___ZN8ICETrace9dumpStateEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
  v4[3] = &__block_descriptor_tmp_70;
  v4[4] = a1;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    std::string __p = *(std::string *)a3;
    ctu::SharedSynchronizable<Trace>::execute_wrapped(v3, (uint64_t)v4);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  ctu::SharedSynchronizable<Trace>::execute_wrapped(v3, (uint64_t)v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_5;
  }
}

void ___ZN8ICETrace9dumpStateEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 144);
  if (v3)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 144));
    dispatch_group_enter(v3);
  }
  uint64_t v4 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_12;
  }
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string v6 = *(std::string *)(a1 + 40);
  }
  ICETrace::dumpState_sync(v2, (uint64_t)&v6, 1, 10, __p);
  if (v8 >= 0) {
    long long v5 = __p;
  }
  else {
    long long v5 = (void **)__p[0];
  }
  *(_DWORD *)std::string buf = 136315138;
  xpc_object_t v10 = v5;
  _os_log_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_16;
    }
LABEL_12:
    if (!v3) {
      return;
    }
    goto LABEL_13;
  }
  if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_12;
  }
LABEL_16:
  operator delete(v6.__r_.__value_.__l.__data_);
  if (!v3) {
    return;
  }
LABEL_13:
  dispatch_group_leave(v3);
  dispatch_release(v3);
}

void sub_1A60FAE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (!v14) {
    _Unwind_Resume(exception_object);
  }
  dispatch_group_leave(v14);
  dispatch_release(v14);
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::dumpState_sync@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, std::string::value_type a4@<W3>, unsigned char *a5@<X8>)
{
  unint64_t v124 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v123[7] = v10;
  v123[8] = v10;
  v123[5] = v10;
  v123[6] = v10;
  v123[3] = v10;
  v123[4] = v10;
  v123[1] = v10;
  std::locale v123[2] = v10;
  long long v122 = v10;
  v123[0] = v10;
  *(_OWORD *)char v120 = v10;
  long long v121 = v10;
  long long v118 = v10;
  long long v119 = v10;
  long long v116 = v10;
  long long v117 = v10;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v116);
  if (a3) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v116, (uint64_t)"\n----- BB Trace Dump State -----\n", 33);
  }
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v116, (uint64_t)"Enabled         : ", 18);
  *(_DWORD *)((char *)v11 + *(void *)(*v11 - 24) + 8) |= 1u;
  uint64_t v12 = (void *)std::ostream::operator<<();
  v125.__r_.__value_.__s.__data_[0] = a4;
  xpc_object_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v125, 1);
  xpc_object_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Mode            : ", 18);
  uint64_t v15 = *(int *)(a1 + 152);
  if (v15 > 6) {
    size_t v16 = "Unknown";
  }
  else {
    size_t v16 = off_1E5C470C8[v15];
  }
  size_t v17 = strlen(v16);
  xpc_object_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
  v125.__r_.__value_.__s.__data_[0] = a4;
  uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v125, 1);
  xpc_object_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"History         : ", 18);
  ICETrace::historyAsString_sync(a1, (char *)&v113);
  if (v115 >= 0) {
    xpc_object_t v21 = &v113;
  }
  else {
    xpc_object_t v21 = v113;
  }
  if (v115 >= 0) {
    uint64_t v22 = HIBYTE(v115);
  }
  else {
    uint64_t v22 = v114;
  }
  xpc_object_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
  v125.__r_.__value_.__s.__data_[0] = a4;
  xpc_object_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)&v125, 1);
  uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"BackgroundMode  : ", 18);
  *(_DWORD *)((char *)v25 + *(void *)(*v25 - 24) + 8) |= 1u;
  xpc_object_t v26 = (void *)std::ostream::operator<<();
  v125.__r_.__value_.__s.__data_[0] = a4;
  xpc_object_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)&v125, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"HighWatermark   : ", 18);
  int v28 = (void *)std::ostream::operator<<();
  v125.__r_.__value_.__s.__data_[0] = a4;
  long long v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)&v125, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"LowWatermark    : ", 18);
  xpc_object_t v30 = (void *)std::ostream::operator<<();
  v125.__r_.__value_.__s.__data_[0] = a4;
  xpc_object_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)&v125, 1);
  xpc_object_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"ActiveConfigFile: ", 18);
  int v33 = *(char *)(a1 + 183);
  if (v33 >= 0) {
    uint64_t v34 = a1 + 160;
  }
  else {
    uint64_t v34 = *(void *)(a1 + 160);
  }
  if (v33 >= 0) {
    uint64_t v35 = *(unsigned __int8 *)(a1 + 183);
  }
  else {
    uint64_t v35 = *(void *)(a1 + 168);
  }
  long long v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
  v125.__r_.__value_.__s.__data_[0] = a4;
  xpc_object_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)&v125, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Enabled During Sleep  : ", 24);
  xpc_object_t v38 = (void *)std::ostream::operator<<();
  v125.__r_.__value_.__s.__data_[0] = a4;
  char v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)&v125, 1);
  xpc_object_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"SleepConfigFile\t   : ", 21);
  int v41 = *(char *)(a1 + 207);
  if (v41 >= 0) {
    uint64_t v42 = a1 + 184;
  }
  else {
    uint64_t v42 = *(void *)(a1 + 184);
  }
  if (v41 >= 0) {
    uint64_t v43 = *(unsigned __int8 *)(a1 + 207);
  }
  else {
    uint64_t v43 = *(void *)(a1 + 192);
  }
  xpc_object_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
  v125.__r_.__value_.__s.__data_[0] = a4;
  xpc_object_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)&v125, 1);
  unsigned int v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Max memory file count :", 23);
  unsigned int v47 = *(_DWORD *)(a1 + 332);
  if (v47)
  {
    std::to_string(&v125, v47);
    std::string __p = v125;
  }
  else
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
    strcpy((char *)&__p, "No limit");
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unsigned int v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)p_p, size);
  v125.__r_.__value_.__s.__data_[0] = a4;
  long long v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)&v125, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"File Size : ", 12);
  xpc_object_t v52 = (void *)std::ostream::operator<<();
  v125.__r_.__value_.__s.__data_[0] = a4;
  xpc_object_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)&v125, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Transport Read Size   : ", 24);
  xpc_object_t v54 = (void *)std::ostream::operator<<();
  v125.__r_.__value_.__s.__data_[0] = a4;
  std::string v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)&v125, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Transport Read Count  : ", 24);
  xpc_object_t v56 = (void *)std::ostream::operator<<();
  v125.__r_.__value_.__s.__data_[0] = a4;
  xpc_object_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)&v125, 1);
  int64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"ETB Config File :", 17);
  int v59 = *(char *)(a1 + 231);
  if (v59 >= 0) {
    uint64_t v60 = a1 + 208;
  }
  else {
    uint64_t v60 = *(void *)(a1 + 208);
  }
  if (v59 >= 0) {
    uint64_t v61 = *(unsigned __int8 *)(a1 + 231);
  }
  else {
    uint64_t v61 = *(void *)(a1 + 216);
  }
  uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v60, v61);
  v125.__r_.__value_.__s.__data_[0] = a4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)&v125, 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v115) & 0x80000000) == 0) {
      goto LABEL_41;
    }
LABEL_44:
    operator delete(v113);
    if (!a3) {
      goto LABEL_103;
    }
LABEL_45:
    unint64_t v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v116, (uint64_t)"ActiveMask      : ", 18);
    uint64_t v65 = *(void *)(a1 + 232);
    long long v64 = *(char **)(a1 + 240);
    unint64_t v66 = (unint64_t)&v64[-v65];
    if ((unint64_t)&v64[-v65] > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v67 = v63;
    if (v66 > 0x16)
    {
      uint64_t v75 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v66 | 7) != 0x17) {
        uint64_t v75 = v66 | 7;
      }
      uint64_t v76 = v75 + 1;
      uint64_t v68 = (char *)operator new(v75 + 1);
      v125.__r_.__value_.__l.__size_ = (std::string::size_type)&v64[-v65];
      v125.__r_.__value_.__r.__words[2] = v76 | 0x8000000000000000;
      v125.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
      if ((char *)v65 != v64) {
        goto LABEL_48;
      }
    }
    else
    {
      *((unsigned char *)&v125.__r_.__value_.__s + 23) = (_BYTE)v64 - v65;
      uint64_t v68 = (char *)&v125;
      if ((char *)v65 != v64)
      {
LABEL_48:
        if (v66 < 0x20 || (unint64_t)&v68[-v65] < 0x20)
        {
          unint64_t v69 = v68;
          long long v70 = (char *)v65;
        }
        else
        {
          unint64_t v69 = &v68[v66 & 0xFFFFFFFFFFFFFFE0];
          long long v70 = (char *)(v65 + (v66 & 0xFFFFFFFFFFFFFFE0));
          uint64_t v71 = (long long *)(v65 + 16);
          uint64_t v72 = v68 + 16;
          unint64_t v73 = v66 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v74 = *v71;
            *(v72 - 1) = *(v71 - 1);
            *uint64_t v72 = v74;
            v71 += 2;
            v72 += 2;
            v73 -= 32;
          }
          while (v73);
          if (v66 == (v66 & 0xFFFFFFFFFFFFFFE0)) {
            goto LABEL_60;
          }
        }
        do
        {
          char v77 = *v70++;
          *v69++ = v77;
        }
        while (v70 != v64);
LABEL_60:
        *unint64_t v69 = 0;
        if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v78 = &v125;
        }
        else {
          uint64_t v78 = (std::string *)v125.__r_.__value_.__r.__words[0];
        }
        if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v79 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v79 = v125.__r_.__value_.__l.__size_;
        }
        size_t v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v78, v79);
        LOBYTE(v113) = a4;
        unint64_t v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)&v113, 1);
        uint64_t v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"SleepMask       : ", 18);
        uint64_t v84 = *(void *)(a1 + 256);
        long long v83 = *(char **)(a1 + 264);
        unint64_t v85 = (unint64_t)&v83[-v84];
        if ((unint64_t)&v83[-v84] > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        long long v86 = v82;
        if (v85 > 0x16)
        {
          uint64_t v94 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v85 | 7) != 0x17) {
            uint64_t v94 = v85 | 7;
          }
          uint64_t v95 = v94 + 1;
          uint64_t v87 = operator new(v94 + 1);
          uint64_t v114 = (uint64_t)&v83[-v84];
          int64_t v115 = v95 | 0x8000000000000000;
          char v113 = v87;
          if ((char *)v84 != v83) {
            goto LABEL_69;
          }
        }
        else
        {
          HIBYTE(v115) = (_BYTE)v83 - v84;
          uint64_t v87 = &v113;
          if ((char *)v84 != v83)
          {
LABEL_69:
            if (v85 < 0x20 || (unint64_t)v87 - v84 < 0x20)
            {
              uint64_t v88 = v87;
              std::string::value_type v89 = (char *)v84;
            }
            else
            {
              uint64_t v88 = (char *)v87 + (v85 & 0xFFFFFFFFFFFFFFE0);
              std::string::value_type v89 = (char *)(v84 + (v85 & 0xFFFFFFFFFFFFFFE0));
              long long v90 = (long long *)(v84 + 16);
              xpc_object_t v91 = v87 + 1;
              unint64_t v92 = v85 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v93 = *v90;
                *(v91 - 1) = *(v90 - 1);
                *xpc_object_t v91 = v93;
                v90 += 2;
                v91 += 2;
                v92 -= 32;
              }
              while (v92);
              if (v85 == (v85 & 0xFFFFFFFFFFFFFFE0)) {
                goto LABEL_81;
              }
            }
            do
            {
              char v96 = *v89++;
              *v88++ = v96;
            }
            while (v89 != v83);
LABEL_81:
            unsigned char *v88 = 0;
            if (v115 >= 0) {
              long long v97 = &v113;
            }
            else {
              long long v97 = v113;
            }
            if (v115 >= 0) {
              uint64_t v98 = HIBYTE(v115);
            }
            else {
              uint64_t v98 = v114;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)v97, v98);
            if (SHIBYTE(v115) < 0)
            {
              operator delete(v113);
              if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_89:
                int v99 = *(char *)(a2 + 23);
                if ((v99 & 0x80000000) == 0) {
                  goto LABEL_90;
                }
                goto LABEL_94;
              }
            }
            else if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_89;
            }
            operator delete(v125.__r_.__value_.__l.__data_);
            int v99 = *(char *)(a2 + 23);
            if ((v99 & 0x80000000) == 0)
            {
LABEL_90:
              if (!(_BYTE)v99) {
                goto LABEL_102;
              }
              goto LABEL_95;
            }
LABEL_94:
            if (!*(void *)(a2 + 8))
            {
LABEL_102:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v116, (uint64_t)"\n---------------------------------\n", 35);
              goto LABEL_103;
            }
LABEL_95:
            v125.__r_.__value_.__s.__data_[0] = a4;
            long long v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v116, (uint64_t)&v125, 1);
            long long v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"Reason: ", 8);
            int v102 = *(char *)(a2 + 23);
            if (v102 >= 0) {
              uint64_t v103 = a2;
            }
            else {
              uint64_t v103 = *(void *)a2;
            }
            if (v102 >= 0) {
              uint64_t v104 = *(unsigned __int8 *)(a2 + 23);
            }
            else {
              uint64_t v104 = *(void *)(a2 + 8);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, v103, v104);
            goto LABEL_102;
          }
        }
        uint64_t v88 = v87;
        goto LABEL_81;
      }
    }
    unint64_t v69 = v68;
    goto LABEL_60;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v115) < 0) {
    goto LABEL_44;
  }
LABEL_41:
  if (a3) {
    goto LABEL_45;
  }
LABEL_103:
  if ((BYTE8(v122) & 0x10) != 0)
  {
    uint64_t v106 = v122;
    if ((unint64_t)v122 < *((void *)&v119 + 1))
    {
      *(void *)&long long v122 = *((void *)&v119 + 1);
      uint64_t v106 = *((void *)&v119 + 1);
    }
    std::string v107 = (const void *)v119;
    size_t v105 = v106 - v119;
    if ((unint64_t)(v106 - v119) > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_120;
    }
  }
  else
  {
    if ((BYTE8(v122) & 8) == 0)
    {
      size_t v105 = 0;
      a5[23] = 0;
      goto LABEL_116;
    }
    std::string v107 = (const void *)*((void *)&v117 + 1);
    size_t v105 = *((void *)&v118 + 1) - *((void *)&v117 + 1);
    if (*((void *)&v118 + 1) - *((void *)&v117 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_120:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v105 >= 0x17)
  {
    uint64_t v108 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v105 | 7) != 0x17) {
      uint64_t v108 = v105 | 7;
    }
    uint64_t v109 = v108 + 1;
    std::string v110 = operator new(v108 + 1);
    *((void *)a5 + 1) = v105;
    *((void *)a5 + 2) = v109 | 0x8000000000000000;
    *(void *)a5 = v110;
    a5 = v110;
    goto LABEL_115;
  }
  a5[23] = v105;
  if (v105) {
LABEL_115:
  }
    memmove(a5, v107, v105);
LABEL_116:
  a5[v105] = 0;
  *(void *)&long long v116 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v116 + *(void *)(v116 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v116 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v121) < 0) {
    operator delete(v120[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62751A0](v123);
}

void sub_1A60FB750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 - 89) < 0)
  {
    operator delete(*(void **)(v21 - 112));
    std::ostringstream::~ostringstream((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

BOOL ICETrace::setProperty(void *a1, dispatch_object_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  char v8 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v8);
  }
  uint64_t v22 = 0;
  xpc_object_t v23 = &v22;
  uint64_t v24 = 0x2000000000;
  char v25 = 0;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 1174405120;
  uint64_t v17[2] = ___ZN8ICETrace11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke;
  v17[3] = &unk_1EFB0AA40;
  void v17[5] = a1;
  dispatch_group_t group = v8;
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_group_enter(group);
  }
  v17[4] = &v22;
  long long v9 = *a2;
  uint64_t v19 = a3;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  uint64_t v21 = a4;
  xpc_object_t v26 = v17;
  *(void *)blocunint64_t k = MEMORY[0x1E4F143A8];
  *(void *)&block[8] = 0x40000000;
  *(void *)&block[16] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_0;
  int v28 = &__block_descriptor_tmp_186;
  long long v29 = a1 + 9;
  xpc_object_t v30 = &v26;
  long long v10 = a1[11];
  if (a1[12])
  {
    dispatch_async_and_wait(v10, block);
    if (*((unsigned char *)v23 + 24)) {
      goto LABEL_9;
    }
  }
  else
  {
    dispatch_sync(v10, block);
    if (*((unsigned char *)v23 + 24))
    {
LABEL_9:
      int v11 = 1;
      uint64_t v12 = object;
      if (!object) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }
  xpc_object_t v13 = a1[5];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = (uint64_t *)*a3;
    }
    if (*((char *)a4 + 23) >= 0) {
      size_t v16 = a4;
    }
    else {
      size_t v16 = (uint64_t *)*a4;
    }
    *(_DWORD *)blocunint64_t k = 136315394;
    *(void *)&void block[4] = v15;
    *(_WORD *)&block[12] = 2080;
    *(void *)&block[14] = v16;
    _os_log_error_impl(&dword_1A609F000, v13, OS_LOG_TYPE_ERROR, "Set %s to %s failed.", block, 0x16u);
    int v11 = *((unsigned __int8 *)v23 + 24);
    uint64_t v12 = object;
    if (object) {
      goto LABEL_14;
    }
  }
  else
  {
    int v11 = 0;
    uint64_t v12 = object;
    if (object) {
LABEL_14:
    }
      dispatch_release(v12);
  }
LABEL_15:
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  _Block_object_dispose(&v22, 8);
  if (v8)
  {
    dispatch_group_leave(v8);
    dispatch_release(v8);
  }
  return v11 != 0;
}

void ___ZN8ICETrace11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke(uint64_t a1)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  std::string::size_type v3 = *(void *)(a1 + 56);
  int v4 = *(char *)(v3 + 23);
  if ((v4 & 0x80000000) == 0)
  {
    if (strcasecmp(*(const char **)(a1 + 56), "Enabled"))
    {
      if (strcasecmp((const char *)v3, "History"))
      {
        if (strcasecmp((const char *)v3, "Mode"))
        {
          if (strcasecmp((const char *)v3, "File"))
          {
            if (strcasecmp((const char *)v3, "File_Sleep"))
            {
              if (strcasecmp((const char *)v3, "BackgroundMode"))
              {
                if (strcasecmp((const char *)v3, "High_Watermark"))
                {
                  if (strcasecmp((const char *)v3, "Low_Watermark"))
                  {
                    if (strcasecmp((const char *)v3, "Enabled_During_Sleep"))
                    {
                      if (strcasecmp((const char *)v3, "ETBFile"))
                      {
                        if (strcasecmp((const char *)v3, "MaxMemoryFileCount"))
                        {
                          if (strcasecmp((const char *)v3, "KeepScratchLogs"))
                          {
                            if (strcasecmp((const char *)v3, "FileSize"))
                            {
                              std::string v6 = (const char *)v3;
                              if (strcasecmp((const char *)v3, "SizeIO")) {
                                goto LABEL_16;
                              }
LABEL_35:
                              char v8 = *(NSObject **)(a1 + 64);
                              uint64_t v65 = v8;
                              if (v8) {
                                dispatch_retain(v8);
                              }
                              std::string::basic_string[abi:ne180100]<0>(v63, "SizeIO");
                              long long v9 = *(long long **)(a1 + 72);
                              if (*((char *)v9 + 23) < 0)
                              {
                                std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v9, *((void *)v9 + 1));
                              }
                              else
                              {
                                long long v10 = *v9;
                                v62.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
                                *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v10;
                              }
                              *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = ICETrace::setPropTransportReadSize_sync((unsigned char *)v2, &v65, (char *)v63, (const char *)&v62);
                              if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
                              {
                                operator delete(v62.__r_.__value_.__l.__data_);
                                if ((v64 & 0x80000000) == 0) {
                                  goto LABEL_188;
                                }
                              }
                              else if ((v64 & 0x80000000) == 0)
                              {
                                goto LABEL_188;
                              }
                              operator delete(v63[0]);
                              if (!v8) {
                                goto LABEL_190;
                              }
                              goto LABEL_189;
                            }
LABEL_155:
                            char v8 = *(NSObject **)(a1 + 64);
                            if (v8) {
                              dispatch_retain(*(dispatch_object_t *)(a1 + 64));
                            }
                            std::string::basic_string[abi:ne180100]<0>(v67, "FileSize");
                            long long v36 = *(long long **)(a1 + 72);
                            if (*((char *)v36 + 23) < 0)
                            {
                              std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)v36, *((void *)v36 + 1));
                            }
                            else
                            {
                              long long v37 = *v36;
                              v66.__r_.__value_.__r.__words[2] = *((void *)v36 + 2);
                              *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v37;
                            }
                            *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = ICETrace::setPropFileSize_sync(v2, v35, (char *)v67, (const char *)&v66);
                            if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
                            {
                              operator delete(v66.__r_.__value_.__l.__data_);
                              if ((v68 & 0x80000000) == 0) {
                                goto LABEL_188;
                              }
                            }
                            else if ((v68 & 0x80000000) == 0)
                            {
                              goto LABEL_188;
                            }
                            operator delete(v67[0]);
                            if (!v8) {
                              goto LABEL_190;
                            }
                            goto LABEL_189;
                          }
LABEL_146:
                          *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = prop::bbtrace::set((char *)v3, *(const char **)(a1 + 72));
                          uint64_t v34 = *(void *)(*(void *)(a1 + 32) + 8);
                          if (*(unsigned char *)(v34 + 24)) {
                            *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = prop::bbtrace::get<BOOL>(*(char **)(a1 + 56), (BOOL *)(v2 + 344));
                          }
                          else {
                            *(unsigned char *)(v34 + 24) = 0;
                          }
                          goto LABEL_190;
                        }
LABEL_135:
                        char v8 = *(NSObject **)(a1 + 64);
                        dispatch_object_t v72 = v8;
                        if (v8) {
                          dispatch_retain(v8);
                        }
                        std::string::basic_string[abi:ne180100]<0>(v70, "MaxMemoryFileCount");
                        xpc_object_t v32 = *(long long **)(a1 + 72);
                        if (*((char *)v32 + 23) < 0)
                        {
                          std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)v32, *((void *)v32 + 1));
                        }
                        else
                        {
                          long long v33 = *v32;
                          v69.__r_.__value_.__r.__words[2] = *((void *)v32 + 2);
                          *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v33;
                        }
                        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = ICETrace::setPropMaxMemoryFileCount_sync(v2, &v72, (char *)v70, (const char *)&v69);
                        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
                        {
                          operator delete(v69.__r_.__value_.__l.__data_);
                          if ((v71 & 0x80000000) == 0) {
                            goto LABEL_188;
                          }
                        }
                        else if ((v71 & 0x80000000) == 0)
                        {
                          goto LABEL_188;
                        }
                        operator delete(v70[0]);
                        if (!v8) {
                          goto LABEL_190;
                        }
                        goto LABEL_189;
                      }
LABEL_124:
                      char v8 = *(NSObject **)(a1 + 64);
                      if (v8) {
                        dispatch_retain(*(dispatch_object_t *)(a1 + 64));
                      }
                      std::string::basic_string[abi:ne180100]<0>(v74, "ETBFile");
                      xpc_object_t v30 = *(long long **)(a1 + 72);
                      if (*((char *)v30 + 23) < 0)
                      {
                        std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)v30, *((void *)v30 + 1));
                      }
                      else
                      {
                        long long v31 = *v30;
                        v73.__r_.__value_.__r.__words[2] = *((void *)v30 + 2);
                        *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v31;
                      }
                      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = ICETrace::setPropETBSetup_sync(v2, v29, (char *)v74, (uint64_t *)&v73);
                      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(v73.__r_.__value_.__l.__data_);
                        if ((v75 & 0x80000000) == 0) {
                          goto LABEL_188;
                        }
                      }
                      else if ((v75 & 0x80000000) == 0)
                      {
                        goto LABEL_188;
                      }
                      operator delete(v74[0]);
                      if (!v8) {
                        goto LABEL_190;
                      }
                      goto LABEL_189;
                    }
LABEL_113:
                    char v8 = *(NSObject **)(a1 + 64);
                    dispatch_object_t v79 = v8;
                    if (v8) {
                      dispatch_retain(v8);
                    }
                    std::string::basic_string[abi:ne180100]<0>(v77, "Enabled_During_Sleep");
                    xpc_object_t v27 = *(long long **)(a1 + 72);
                    if (*((char *)v27 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)v27, *((void *)v27 + 1));
                    }
                    else
                    {
                      long long v28 = *v27;
                      v76.__r_.__value_.__r.__words[2] = *((void *)v27 + 2);
                      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v28;
                    }
                    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = ICETrace::setPropSleepTraceEnabled_sync(v2, &v79, (char *)v77, (const char *)&v76);
                    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v76.__r_.__value_.__l.__data_);
                      if ((v78 & 0x80000000) == 0) {
                        goto LABEL_188;
                      }
                    }
                    else if ((v78 & 0x80000000) == 0)
                    {
                      goto LABEL_188;
                    }
                    operator delete(v77[0]);
                    if (!v8) {
                      goto LABEL_190;
                    }
                    goto LABEL_189;
                  }
LABEL_102:
                  char v8 = *(NSObject **)(a1 + 64);
                  dispatch_object_t v83 = v8;
                  if (v8) {
                    dispatch_retain(v8);
                  }
                  std::string::basic_string[abi:ne180100]<0>(v81, "Low_Watermark");
                  char v25 = *(long long **)(a1 + 72);
                  if (*((char *)v25 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)v25, *((void *)v25 + 1));
                  }
                  else
                  {
                    long long v26 = *v25;
                    v80.__r_.__value_.__r.__words[2] = *((void *)v25 + 2);
                    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v26;
                  }
                  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = ICETrace::setPropLowWatermark_sync(v2, &v83, (char *)v81, (const char *)&v80);
                  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(v80.__r_.__value_.__l.__data_);
                    if ((v82 & 0x80000000) == 0) {
                      goto LABEL_188;
                    }
                  }
                  else if ((v82 & 0x80000000) == 0)
                  {
                    goto LABEL_188;
                  }
                  operator delete(v81[0]);
                  if (!v8) {
                    goto LABEL_190;
                  }
                  goto LABEL_189;
                }
LABEL_91:
                char v8 = *(NSObject **)(a1 + 64);
                dispatch_object_t v87 = v8;
                if (v8) {
                  dispatch_retain(v8);
                }
                char v86 = 14;
                strcpy((char *)v85, "High_Watermark");
                xpc_object_t v23 = *(long long **)(a1 + 72);
                if (*((char *)v23 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)v23, *((void *)v23 + 1));
                }
                else
                {
                  long long v24 = *v23;
                  v84.__r_.__value_.__r.__words[2] = *((void *)v23 + 2);
                  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v24;
                }
                *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = ICETrace::setPropHighWatermark_sync(v2, &v87, (char *)v85, (const char *)&v84);
                if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v84.__r_.__value_.__l.__data_);
                  if ((v86 & 0x80000000) == 0) {
                    goto LABEL_188;
                  }
                }
                else if ((v86 & 0x80000000) == 0)
                {
                  goto LABEL_188;
                }
                operator delete(v85[0]);
                if (!v8) {
                  goto LABEL_190;
                }
                goto LABEL_189;
              }
LABEL_80:
              char v8 = *(NSObject **)(a1 + 64);
              xpc_object_t v91 = v8;
              if (v8) {
                dispatch_retain(v8);
              }
              char v90 = 14;
              strcpy((char *)v89, "BackgroundMode");
              uint64_t v21 = *(long long **)(a1 + 72);
              if (*((char *)v21 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v21, *((void *)v21 + 1));
              }
              else
              {
                long long v22 = *v21;
                v88.__r_.__value_.__r.__words[2] = *((void *)v21 + 2);
                *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v22;
              }
              *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = ICETrace::setPropBackgroundMode_sync(v2, &v91, (char *)v89, (const char *)&v88);
              if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v88.__r_.__value_.__l.__data_);
                if ((v90 & 0x80000000) == 0) {
                  goto LABEL_188;
                }
              }
              else if ((v90 & 0x80000000) == 0)
              {
                goto LABEL_188;
              }
              operator delete(v89[0]);
              if (!v8) {
                goto LABEL_190;
              }
              goto LABEL_189;
            }
LABEL_69:
            char v8 = *(NSObject **)(a1 + 64);
            dispatch_object_t v95 = v8;
            if (v8) {
              dispatch_retain(v8);
            }
            char v94 = 10;
            strcpy((char *)v93, "File_Sleep");
            uint64_t v19 = *(long long **)(a1 + 72);
            if (*((char *)v19 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)v19, *((void *)v19 + 1));
            }
            else
            {
              long long v20 = *v19;
              v92.__r_.__value_.__r.__words[2] = *((void *)v19 + 2);
              *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v20;
            }
            *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = ICETrace::setPropSleepConfig_sync(v2, &v95, (char *)v93, (uint64_t *)&v92);
            if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v92.__r_.__value_.__l.__data_);
              if ((v94 & 0x80000000) == 0) {
                goto LABEL_188;
              }
            }
            else if ((v94 & 0x80000000) == 0)
            {
              goto LABEL_188;
            }
            operator delete(v93[0]);
            if (!v8) {
              goto LABEL_190;
            }
            goto LABEL_189;
          }
LABEL_58:
          char v8 = *(NSObject **)(a1 + 64);
          dispatch_object_t v99 = v8;
          if (v8) {
            dispatch_retain(v8);
          }
          char v98 = 4;
          strcpy((char *)__p, "File");
          size_t v17 = *(long long **)(a1 + 72);
          if (*((char *)v17 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)v17, *((void *)v17 + 1));
          }
          else
          {
            long long v18 = *v17;
            v96.__r_.__value_.__r.__words[2] = *((void *)v17 + 2);
            *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v18;
          }
          *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = ICETrace::setPropActiveConfig_sync(v2, &v99, (char *)__p, (uint64_t *)&v96);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v96.__r_.__value_.__l.__data_);
            if ((v98 & 0x80000000) == 0) {
              goto LABEL_188;
            }
          }
          else if ((v98 & 0x80000000) == 0)
          {
            goto LABEL_188;
          }
          operator delete(__p[0]);
          if (!v8) {
            goto LABEL_190;
          }
          goto LABEL_189;
        }
LABEL_47:
        char v8 = *(NSObject **)(a1 + 64);
        dispatch_object_t v103 = v8;
        if (v8) {
          dispatch_retain(v8);
        }
        char v102 = 4;
        strcpy((char *)v101, "Mode");
        uint64_t v15 = *(long long **)(a1 + 72);
        if (*((char *)v15 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v100, *(const std::string::value_type **)v15, *((void *)v15 + 1));
        }
        else
        {
          long long v16 = *v15;
          v100.__r_.__value_.__r.__words[2] = *((void *)v15 + 2);
          *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v16;
        }
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = ICETrace::setPropMode_sync(v2, &v103, (char *)v101, (const char *)&v100);
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v100.__r_.__value_.__l.__data_);
          if ((v102 & 0x80000000) == 0) {
            goto LABEL_188;
          }
        }
        else if ((v102 & 0x80000000) == 0)
        {
          goto LABEL_188;
        }
        operator delete(v101[0]);
        if (!v8) {
          goto LABEL_190;
        }
        goto LABEL_189;
      }
LABEL_43:
      char v8 = *(NSObject **)(a1 + 64);
      if (v8) {
        dispatch_retain(*(dispatch_object_t *)(a1 + 64));
      }
      char v106 = 7;
      strcpy((char *)v105, "History");
      xpc_object_t v13 = *(long long **)(a1 + 72);
      if (*((char *)v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v13, *((void *)v13 + 1));
      }
      else
      {
        long long v14 = *v13;
        v104.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
        *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v14;
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = ICETrace::setPropHistory_sync(v2, v5, (char *)v105, (const char *)&v104);
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v104.__r_.__value_.__l.__data_);
        if ((v106 & 0x80000000) == 0) {
          goto LABEL_188;
        }
      }
      else if ((v106 & 0x80000000) == 0)
      {
        goto LABEL_188;
      }
      operator delete(v105[0]);
      if (!v8) {
        goto LABEL_190;
      }
      goto LABEL_189;
    }
LABEL_39:
    char v8 = *(NSObject **)(a1 + 64);
    std::string v110 = v8;
    if (v8) {
      dispatch_retain(v8);
    }
    char v109 = 7;
    strcpy((char *)v108, "Enabled");
    int v11 = *(long long **)(a1 + 72);
    if (*((char *)v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)v11, *((void *)v11 + 1));
    }
    else
    {
      long long v12 = *v11;
      v107.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v12;
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = ICETrace::setPropEnabled_sync(v2, &v110, (char *)v108, (const char *)&v107);
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v107.__r_.__value_.__l.__data_);
      if ((v109 & 0x80000000) == 0) {
        goto LABEL_188;
      }
    }
    else if ((v109 & 0x80000000) == 0)
    {
      goto LABEL_188;
    }
    operator delete(v108[0]);
    if (!v8) {
      goto LABEL_190;
    }
    goto LABEL_189;
  }
  std::string v6 = *(const char **)v3;
  if (!strcasecmp(*(const char **)v3, "Enabled")) {
    goto LABEL_39;
  }
  if (!strcasecmp(v6, "History")) {
    goto LABEL_43;
  }
  if (!strcasecmp(v6, "Mode")) {
    goto LABEL_47;
  }
  if (!strcasecmp(v6, "File")) {
    goto LABEL_58;
  }
  if (!strcasecmp(v6, "File_Sleep")) {
    goto LABEL_69;
  }
  if (!strcasecmp(v6, "BackgroundMode")) {
    goto LABEL_80;
  }
  if (!strcasecmp(v6, "High_Watermark")) {
    goto LABEL_91;
  }
  if (!strcasecmp(v6, "Low_Watermark")) {
    goto LABEL_102;
  }
  if (!strcasecmp(v6, "Enabled_During_Sleep")) {
    goto LABEL_113;
  }
  if (!strcasecmp(v6, "ETBFile")) {
    goto LABEL_124;
  }
  if (!strcasecmp(v6, "MaxMemoryFileCount")) {
    goto LABEL_135;
  }
  if (!strcasecmp(v6, "KeepScratchLogs")) {
    goto LABEL_146;
  }
  if (!strcasecmp(v6, "FileSize")) {
    goto LABEL_155;
  }
  if (!strcasecmp(v6, "SizeIO")) {
    goto LABEL_35;
  }
LABEL_16:
  if (!strcasecmp(v6, "NumberOfReadIO"))
  {
    char v8 = *(NSObject **)(a1 + 64);
    uint64_t v61 = v8;
    if (v8) {
      dispatch_retain(v8);
    }
    std::string::basic_string[abi:ne180100]<0>(v59, "NumberOfReadIO");
    xpc_object_t v38 = *(long long **)(a1 + 72);
    if (*((char *)v38 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)v38, *((void *)v38 + 1));
    }
    else
    {
      long long v39 = *v38;
      v58.__r_.__value_.__r.__words[2] = *((void *)v38 + 2);
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v39;
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = ICETrace::setPropTransportReadCount_sync((unsigned char *)v2, &v61, (char *)v59, (const char *)&v58);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v58.__r_.__value_.__l.__data_);
      if ((v60 & 0x80000000) == 0)
      {
LABEL_188:
        if (!v8) {
          goto LABEL_190;
        }
        goto LABEL_189;
      }
    }
    else if ((v60 & 0x80000000) == 0)
    {
      goto LABEL_188;
    }
    operator delete(v59[0]);
    if (!v8) {
      goto LABEL_190;
    }
LABEL_189:
    dispatch_release(v8);
    goto LABEL_190;
  }
  long long v7 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    if (v4 < 0) {
      std::string::size_type v3 = *(void *)v3;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v3;
    _os_log_error_impl(&dword_1A609F000, v7, OS_LOG_TYPE_ERROR, "Key not handled: %s", (uint8_t *)&buf, 0xCu);
  }
LABEL_190:
  if (!*(void *)(v2 + 480)) {
    return;
  }
  xpc_object_t v40 = *(const void ***)(a1 + 56);
  int v41 = *((char *)v40 + 23);
  if (v41 >= 0) {
    size_t v42 = *((unsigned __int8 *)v40 + 23);
  }
  else {
    size_t v42 = (size_t)v40[1];
  }
  unint64_t v43 = v42 + 3;
  memset(&buf, 170, sizeof(buf));
  if (v42 + 3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v43 >= 0x17)
  {
    uint64_t v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17) {
      uint64_t v45 = v43 | 7;
    }
    uint64_t v46 = v45 + 1;
    p_std::string buf = (std::string *)operator new(v45 + 1);
    buf.__r_.__value_.__l.__size_ = v42 + 3;
    buf.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
  }
  else
  {
    memset(&buf, 0, sizeof(buf));
    p_std::string buf = &buf;
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = v42 + 3;
    if (!v42) {
      goto LABEL_205;
    }
  }
  if (v41 >= 0) {
    unsigned int v47 = v40;
  }
  else {
    unsigned int v47 = *v40;
  }
  memmove(p_buf, v47, v42);
LABEL_205:
  *(_DWORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v42) = 2112800;
  uint64_t v48 = *(void *)(a1 + 72);
  int v49 = *(char *)(v48 + 23);
  if (v49 >= 0) {
    unsigned int v50 = *(const std::string::value_type **)(a1 + 72);
  }
  else {
    unsigned int v50 = *(const std::string::value_type **)v48;
  }
  if (v49 >= 0) {
    std::string::size_type v51 = *(unsigned __int8 *)(v48 + 23);
  }
  else {
    std::string::size_type v51 = *(void *)(v48 + 8);
  }
  xpc_object_t v52 = std::string::append(&buf, v50, v51);
  long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  std::string::size_type v57 = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)xpc_object_t v56 = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  Timestamp::Timestamp((Timestamp *)v54);
  abm::trace::TraceInfo::push();
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v54, v55);
  if ((SHIBYTE(v57) & 0x80000000) == 0)
  {
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_215:
    operator delete(buf.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v56[0]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_215;
  }
}

void sub_1A60FC934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
  {
    operator delete(__p);
    if (!v32) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v32)
  {
    goto LABEL_6;
  }
  dispatch_release(v32);
  _Unwind_Resume(a1);
}

uint64_t ICETrace::setPropEnabled_sync(uint64_t a1, NSObject **a2, char *a3, const char *a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!prop::bbtrace::set(a3, a4)) {
    return 0;
  }
  int v32 = -1431655766;
  memset(&__p, 0, sizeof(__p));
  char v36 = 7;
  strcpy((char *)&v34, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  uint64_t v7 = defaults::get((char *)&v34, a3, &buf);
  if (v7)
  {
    prop::file::get<std::string>((const void **)&v34, (uint64_t)a3, (uint64_t)&buf, &v37);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v37;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v36 & 0x80000000) == 0)
    {
LABEL_8:
      if (v7) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v36 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v34);
  if (v7)
  {
LABEL_9:
    uint64_t v7 = util::convert<int>(&__p, &v32, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_10:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v7) {
      return v7;
    }
    goto LABEL_17;
  }
LABEL_16:
  if (!v7) {
    return v7;
  }
LABEL_17:
  int v8 = v32;
  int v9 = *(unsigned __int8 *)(a1 + 336);
  if (v32 != v9)
  {
    long long v10 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v9;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v8;
      _os_log_impl(&dword_1A609F000, v10, OS_LOG_TYPE_DEFAULT, "#I Setting enable from %d to %d", (uint8_t *)&buf, 0xEu);
      int v8 = v32;
    }
    *(unsigned char *)(a1 + 336) = v8 != 0;
    __p.__r_.__value_.__r.__words[0] = 0;
    uint64_t v11 = *(void *)(a1 + 416);
    if (v11)
    {
      if (((*(uint64_t (**)(uint64_t))(*(void *)v11 + 152))(v11) & 1) == 0) {
        return 1;
      }
    }
    else
    {
      long long v12 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
      xpc_object_t v13 = (void *)off_1EB5EE540;
      if (!off_1EB5EE540)
      {
        CommandDriverFactory::create_default_global((uint64_t *)&buf, v12);
        long long v14 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
        uint64_t v15 = (std::__shared_weak_count *)*(&off_1EB5EE540 + 1);
        off_1EB5EE540 = v14;
        if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        std::string::size_type size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
        if (buf.__r_.__value_.__l.__size_
          && !atomic_fetch_add((atomic_ullong *volatile)(buf.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
        xpc_object_t v13 = (void *)off_1EB5EE540;
      }
      uint64_t v34 = v13;
      uint64_t v35 = (std::__shared_weak_count *)*(&off_1EB5EE540 + 1);
      if (*(&off_1EB5EE540 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EB5EE540 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
      (*(void (**)(std::string *__return_ptr, void *))(*(void *)v13 + 136))(&v37, v13);
      long long v17 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = 0uLL;
      long long v18 = *(std::__shared_weak_count **)(a1 + 424);
      *(_OWORD *)(a1 + 416) = v17;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      uint64_t v19 = (std::__shared_weak_count *)v37.__r_.__value_.__l.__size_;
      if (v37.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(v37.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      long long v20 = v35;
      if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (*(unsigned char *)(a1 + 336))
    {
      uint64_t v21 = *a2;
      dispatch_object_t object = v21;
      if (v21) {
        dispatch_retain(v21);
      }
      long long v22 = (const void *)__p.__r_.__value_.__r.__words[0];
      CFTypeRef cf = (CFTypeRef)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        CFRetain(__p.__r_.__value_.__l.__data_);
      }
      (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(void *)a1 + 184))(a1, &object, &cf);
      if (cf) {
        CFRelease(cf);
      }
      if (object) {
        dispatch_release(object);
      }
    }
    else if (*(void *)(a1 + 416))
    {
      xpc_object_t v23 = *a2;
      dispatch_object_t v29 = v23;
      if (v23) {
        dispatch_retain(v23);
      }
      long long v22 = (const void *)__p.__r_.__value_.__r.__words[0];
      CFTypeRef v28 = (CFTypeRef)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        CFRetain(__p.__r_.__value_.__l.__data_);
      }
      (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(void *)a1 + 192))(a1, &v29, &v28);
      if (v28) {
        CFRelease(v28);
      }
      if (v29) {
        dispatch_release(v29);
      }
      if (*(void *)(a1 + 368))
      {
        std::string::basic_string[abi:ne180100]<0>(&v26, abm::trace::kTrashFolder[0]);
        TraceFileCollection::clear();
        long long v24 = (void *)(a1 + 368);
        if (v27 < 0) {
          operator delete(v26);
        }
        std::shared_ptr<TraceFileCollection>::reset[abi:ne180100](v24);
      }
    }
    else
    {
      long long v22 = (const void *)__p.__r_.__value_.__r.__words[0];
    }
    if (v22) {
      CFRelease(v22);
    }
  }
  return v7;
}

void sub_1A60FD360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, dispatch_object_t object, char a17, uint64_t a18, uint64_t a19, const void *a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a14 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a20);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a20);
  _Unwind_Resume(a1);
}

void sub_1A60FD434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ICETrace::setPropHistory_sync(uint64_t a1, uint64_t a2, char *a3, const char *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!prop::bbtrace::set(a3, a4)) {
    return 0;
  }
  int v13 = -1431655766;
  memset(&__p, 0, sizeof(__p));
  char v16 = 7;
  strcpy((char *)v15, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  BOOL v6 = defaults::get((char *)v15, a3, &buf);
  if (v6)
  {
    prop::file::get<std::string>((const void **)v15, (uint64_t)a3, (uint64_t)&buf, &v17);
    std::string __p = v17;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_6:
      if (v6) {
        goto LABEL_7;
      }
      goto LABEL_13;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(v15[0]);
  if (v6)
  {
LABEL_7:
    uint64_t v7 = util::convert<int>(&__p, &v13, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_8;
    }
LABEL_14:
    if (!v7) {
      return v7;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t v7 = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_14;
  }
LABEL_8:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v7) {
    return v7;
  }
LABEL_15:
  int v8 = v13;
  int v9 = *(_DWORD *)(a1 + 340);
  if (v13 != v9)
  {
    long long v10 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v9;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v8;
      _os_log_impl(&dword_1A609F000, v10, OS_LOG_TYPE_DEFAULT, "#I Setting history from %d MB to %d MB", (uint8_t *)&buf, 0xEu);
      int v8 = v13;
    }
    *(_DWORD *)(a1 + 340) = v8;
    uint64_t v11 = *(TraceFileCollection **)(a1 + 368);
    if (v11) {
      TraceFileCollection::setHistory(v11);
    }
  }
  return v7;
}

void sub_1A60FD684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::setPropMode_sync(uint64_t a1, dispatch_object_t *a2, char *a3, const char *a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  if (prop::bbtrace::set(a3, a4))
  {
    memset(&__p, 0, sizeof(__p));
    char v47 = 7;
    strcpy(v46, "BBTrace");
    memset(&buf, 0, sizeof(buf));
    BOOL v8 = defaults::get(v46, a3, &buf);
    if (v8)
    {
      prop::file::get<std::string>((const void **)v46, (uint64_t)a3, (uint64_t)&buf, &v48);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v48;
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      if ((v47 & 0x80000000) == 0)
      {
LABEL_10:
        uint64_t data_low = 2863311530;
        if (v8) {
          goto LABEL_11;
        }
        goto LABEL_27;
      }
    }
    else if ((v47 & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(*(void **)v46);
    uint64_t data_low = 2863311530;
    if (v8)
    {
LABEL_11:
      LODWORD(buf.__r_.__value_.__l.__data_) = -1431655766;
      int v10 = util::convert<int>(&__p, &buf, 0);
      LOBYTE(v8) = v10;
      if (v10) {
        uint64_t data_low = LODWORD(buf.__r_.__value_.__l.__data_);
      }
      else {
        uint64_t data_low = 2863311530;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_15:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v8) {
          goto LABEL_16;
        }
        goto LABEL_29;
      }
LABEL_28:
      if (!v8)
      {
LABEL_16:
        uint64_t v11 = *(NSObject **)(a1 + 40);
        uint64_t v12 = 0;
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_41;
        }
        if (a3[23] < 0)
        {
          a3 = *(char **)a3;
          uint64_t v13 = *(int *)(a1 + 152);
          if (v13 <= 6)
          {
LABEL_19:
            long long v14 = off_1E5C470C8[v13];
            if (data_low > 6)
            {
LABEL_20:
              uint64_t v15 = "Unknown";
LABEL_39:
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a3;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v14;
              HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
              unsigned int v50 = v15;
              std::string v17 = "#I Failed to get %s property as mode from %s to %s";
              long long v18 = v11;
              uint32_t v19 = 32;
              goto LABEL_40;
            }
LABEL_38:
            uint64_t v15 = off_1E5C470C8[(int)data_low];
            goto LABEL_39;
          }
        }
        else
        {
          uint64_t v13 = *(int *)(a1 + 152);
          if (v13 <= 6) {
            goto LABEL_19;
          }
        }
        long long v14 = "Unknown";
        if (data_low > 6) {
          goto LABEL_20;
        }
        goto LABEL_38;
      }
LABEL_29:
      uint64_t v20 = *(int *)(a1 + 152);
      if (v20 == data_low)
      {
        if (!*(unsigned char *)(a1 + 329))
        {
LABEL_34:
          uint64_t v12 = 1;
          if (!v7) {
            return v12;
          }
          goto LABEL_42;
        }
LABEL_33:
        *(_DWORD *)(a1 + 152) = data_low;
        goto LABEL_34;
      }
      if (*(unsigned char *)(a1 + 329)) {
        goto LABEL_33;
      }
      long long v22 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        if (v20 > 6) {
          xpc_object_t v23 = "Unknown";
        }
        else {
          xpc_object_t v23 = off_1E5C470C8[v20];
        }
        if (data_low > 6) {
          long long v24 = "Unknown";
        }
        else {
          long long v24 = off_1E5C470C8[(int)data_low];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v24;
        _os_log_impl(&dword_1A609F000, v22, OS_LOG_TYPE_DEFAULT, "#I Setting mode from %s to %s", (uint8_t *)&buf, 0x16u);
      }
      char v25 = *(std::__shared_weak_count **)(a1 + 80);
      if (!v25 || (uint64_t v26 = *(void *)(a1 + 72), (v27 = std::__shared_weak_count::lock(v25)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      CFTypeRef v28 = v27;
      atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
      *(_DWORD *)(a1 + 152) = data_low;
      *(unsigned char *)(a1 + 329) = 1;
      if (capabilities::abs::supportsBBUSBMux((capabilities::abs *)v27))
      {
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN8ICETrace16setPropMode_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke;
        aBlock[3] = &__block_descriptor_tmp_113;
        aBlock[4] = a1;
        dispatch_group_t group = v7;
        if (v7)
        {
          dispatch_retain(v7);
          dispatch_group_enter(group);
        }
        uint64_t v43 = v26;
        xpc_object_t v44 = v28;
        atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        dispatch_object_t v29 = _Block_copy(aBlock);
        xpc_object_t v30 = *(NSObject **)(a1 + 88);
        if (v30) {
          dispatch_retain(*(dispatch_object_t *)(a1 + 88));
        }
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)v30;
        uint64_t v31 = *(void *)(a1 + 416);
        if (v31)
        {
          dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::callback(v40, (uint64_t)&buf);
          (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v31 + 80))(v31, data_low, v40);
          dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)v40);
        }
        if (v44) {
          std::__shared_weak_count::__release_weak(v44);
        }
        if (!group) {
          goto LABEL_79;
        }
        dispatch_group_leave(group);
        int v32 = group;
        if (!group) {
          goto LABEL_79;
        }
      }
      else
      {
        v35[0] = MEMORY[0x1E4F143A8];
        v35[1] = 1174405120;
        void v35[2] = ___ZN8ICETrace16setPropMode_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke_114;
        v35[3] = &__block_descriptor_tmp_117;
        v35[4] = a1;
        dispatch_group_t object = v7;
        if (v7)
        {
          dispatch_retain(v7);
          dispatch_group_enter(object);
        }
        uint64_t v37 = v26;
        xpc_object_t v38 = v28;
        atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        int v39 = data_low;
        dispatch_object_t v29 = _Block_copy(v35);
        xpc_object_t v30 = *(NSObject **)(a1 + 88);
        if (v30) {
          dispatch_retain(*(dispatch_object_t *)(a1 + 88));
        }
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)v30;
        uint64_t v33 = *(void *)(a1 + 416);
        if (v33)
        {
          dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::callback(v34, (uint64_t)&buf);
          (*(void (**)(uint64_t, void, void *))(*(void *)v33 + 80))(v33, 0, v34);
          dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)v34);
        }
        if (v38) {
          std::__shared_weak_count::__release_weak(v38);
        }
        if (!object || (dispatch_group_leave(object), (int v32 = object) == 0))
        {
LABEL_79:
          if (v30)
          {
            dispatch_release(v30);
            dispatch_object_t v29 = (void *)buf.__r_.__value_.__r.__words[0];
          }
          if (v29) {
            _Block_release(v29);
          }
          std::__shared_weak_count::__release_weak(v28);
          uint64_t v12 = 1;
          if (v7) {
            goto LABEL_42;
          }
          return v12;
        }
      }
      dispatch_release(v32);
      goto LABEL_79;
    }
LABEL_27:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
  char v16 = *(NSObject **)(a1 + 40);
  uint64_t v12 = 0;
  if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_41;
  }
  if (a3[23] < 0) {
    a3 = *(char **)a3;
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a3;
  std::string v17 = "#I Failed to set %s property";
  long long v18 = v16;
  uint32_t v19 = 12;
LABEL_40:
  _os_log_impl(&dword_1A609F000, v18, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&buf, v19);
  uint64_t v12 = 0;
LABEL_41:
  if (v7)
  {
LABEL_42:
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  return v12;
}

void sub_1A60FDD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, dispatch_group_t group, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,dispatch_group_t a28,uint64_t a29,std::__shared_weak_count *a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a10);
  if (a19) {
    std::__shared_weak_count::__release_weak(a19);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v38 - 112);
  std::__shared_weak_count::__release_weak(v37);
  if (v36)
  {
    dispatch_group_leave(v36);
    dispatch_release(v36);
  }
  _Unwind_Resume(a1);
}

uint64_t ICETrace::setPropActiveConfig_sync(uint64_t a1, dispatch_object_t *a2, char *a3, uint64_t *a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  BOOL v8 = (uint64_t *)(a1 + 160);
  if (*(char *)(a1 + 183) >= 0) {
    int v9 = (const char *)(a1 + 160);
  }
  else {
    int v9 = *(const char **)(a1 + 160);
  }
  int v10 = *((char *)a4 + 23);
  uint64_t v11 = (const std::string::value_type *)*a4;
  if (v10 >= 0) {
    uint64_t v12 = (const char *)a4;
  }
  else {
    uint64_t v12 = (const char *)*a4;
  }
  if (!strcasecmp(v9, v12))
  {
    uint64_t v13 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_1A609F000, v13, OS_LOG_TYPE_DEFAULT, "#I Trace config already set: %s", buf, 0xCu);
    }
    uint64_t v14 = 1;
  }
  else
  {
    std::string __p = 0;
    xpc_object_t v44 = 0;
    uint64_t v45 = 0;
    if (v10 < 0) {
      std::string::__init_copy_ctor_external(&v42, v11, a4[1]);
    }
    else {
      std::string v42 = *(std::string *)a4;
    }
    BOOL v15 = ICETrace::loadTraceConfigFile_sync(a1, (std::string::size_type)&v42, &__p, 0);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v42.__r_.__value_.__l.__data_);
      char v16 = *(NSObject **)(a1 + 40);
      std::string v17 = v16;
      if (v15)
      {
LABEL_18:
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = a1 + 160;
          if (*(char *)(a1 + 183) < 0) {
            uint64_t v18 = *v8;
          }
          uint32_t v19 = a4;
          if (*((char *)a4 + 23) < 0) {
            uint32_t v19 = (uint64_t *)*a4;
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v18;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v19;
          _os_log_impl(&dword_1A609F000, v16, OS_LOG_TYPE_DEFAULT, "#I Setting Active Config File from %s to %s", buf, 0x16u);
        }
        if (prop::bbtrace::set(a3, (const char *)a4))
        {
          if (v8 != a4)
          {
            char v20 = *((unsigned char *)a4 + 23);
            if (*(char *)(a1 + 183) < 0)
            {
              if (v20 >= 0) {
                long long v24 = (std::string::value_type *)a4;
              }
              else {
                long long v24 = (std::string::value_type *)*a4;
              }
              if (v20 >= 0) {
                size_t v25 = *((unsigned __int8 *)a4 + 23);
              }
              else {
                size_t v25 = a4[1];
              }
              std::string::__assign_no_alias<false>((void **)(a1 + 160), v24, v25);
            }
            else if ((*((unsigned char *)a4 + 23) & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>((void *)(a1 + 160), (void *)*a4, a4[1]);
            }
            else
            {
              long long v21 = *(_OWORD *)a4;
              *(void *)(a1 + 176) = a4[2];
              *(_OWORD *)BOOL v8 = v21;
            }
          }
          if ((void **)(a1 + 232) != &__p) {
            std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>((void *)(a1 + 232), (char *)__p, v44, v44 - (unsigned char *)__p);
          }
          uint64_t v26 = *(std::__shared_weak_count **)(a1 + 80);
          if (!v26 || (v27 = *(void *)(a1 + 72), (CFTypeRef v28 = std::__shared_weak_count::lock(v26)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          dispatch_object_t v29 = v28;
          atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v29);
          }
          unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
          unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZN8ICETrace24setPropActiveConfig_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke;
          aBlock[3] = &__block_descriptor_tmp_127;
          aBlock[4] = a1;
          dispatch_group_t group = v7;
          if (v7)
          {
            dispatch_retain(v7);
            dispatch_group_enter(group);
          }
          uint64_t v38 = v27;
          int v39 = v29;
          atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          xpc_object_t v30 = _Block_copy(aBlock);
          uint64_t v31 = *(NSObject **)(a1 + 88);
          if (v31) {
            dispatch_retain(*(dispatch_object_t *)(a1 + 88));
          }
          unint64_t v40 = (unint64_t)v30;
          unint64_t v41 = (unint64_t)v31;
          if (!*(void *)(a1 + 416))
          {
LABEL_66:
            if (v31) {
              dispatch_release(v31);
            }
            if (v30) {
              _Block_release(v30);
            }
            if (v39) {
              std::__shared_weak_count::__release_weak(v39);
            }
            if (group)
            {
              dispatch_group_leave(group);
              if (group) {
                dispatch_release(group);
              }
            }
            std::__shared_weak_count::__release_weak(v29);
            uint64_t v14 = 1;
            long long v22 = (char *)__p;
            if (!__p) {
              goto LABEL_33;
            }
LABEL_32:
            xpc_object_t v44 = v22;
            operator delete(v22);
            goto LABEL_33;
          }
          unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v32 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&uint8_t buf[16] = v32;
          *(_OWORD *)char v47 = v32;
          *(_OWORD *)std::string buf = v32;
          trace::TraceMaskInfo::TraceMaskInfo(buf, a1 + 232, a1 + 256);
          uint64_t v33 = *(void *)(a1 + 416);
          if (v30)
          {
            uint64_t v34 = _Block_copy(v30);
            dispatch_object_t object = v31;
            if (!v31)
            {
LABEL_58:
              (*(void (**)(uint64_t, unsigned char *, void **))(*(void *)v33 + 88))(v33, buf, &v34);
              if (object) {
                dispatch_release(object);
              }
              if (v34) {
                _Block_release(v34);
              }
              *(void *)std::string buf = &unk_1EFB0AC10;
              if (v47[0])
              {
                v47[1] = v47[0];
                operator delete(v47[0]);
              }
              if (*(void *)&buf[8])
              {
                *(void *)&uint8_t buf[16] = *(void *)&buf[8];
                operator delete(*(void **)&buf[8]);
              }
              goto LABEL_66;
            }
          }
          else
          {
            uint64_t v34 = 0;
            dispatch_object_t object = v31;
            if (!v31) {
              goto LABEL_58;
            }
          }
          dispatch_retain(v31);
          goto LABEL_58;
        }
LABEL_31:
        uint64_t v14 = 0;
        long long v22 = (char *)__p;
        if (!__p) {
          goto LABEL_33;
        }
        goto LABEL_32;
      }
    }
    else
    {
      char v16 = *(NSObject **)(a1 + 40);
      std::string v17 = v16;
      if (v15) {
        goto LABEL_18;
      }
    }
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      goto LABEL_31;
    }
    if (*((char *)a4 + 23) < 0) {
      a4 = (uint64_t *)*a4;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = a4;
    _os_log_error_impl(&dword_1A609F000, v16, OS_LOG_TYPE_ERROR, "Failed to load trace config %s", buf, 0xCu);
    uint64_t v14 = 0;
    long long v22 = (char *)__p;
    if (__p) {
      goto LABEL_32;
    }
  }
LABEL_33:
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  return v14;
}

void sub_1A60FE374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, dispatch_group_t group, uint64_t a17, std::__shared_weak_count *a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,uint64_t a29,char a30)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::setPropSleepConfig_sync(uint64_t a1, dispatch_object_t *a2, char *a3, uint64_t *a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  BOOL v8 = (uint64_t *)(a1 + 184);
  if (*(char *)(a1 + 207) >= 0) {
    int v9 = (const char *)(a1 + 184);
  }
  else {
    int v9 = *(const char **)(a1 + 184);
  }
  int v10 = *((char *)a4 + 23);
  uint64_t v11 = (const std::string::value_type *)*a4;
  if (v10 >= 0) {
    uint64_t v12 = (const char *)a4;
  }
  else {
    uint64_t v12 = (const char *)*a4;
  }
  if (!strcasecmp(v9, v12))
  {
    uint64_t v13 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_1A609F000, v13, OS_LOG_TYPE_DEFAULT, "#I Trace config already set: %s", buf, 0xCu);
    }
    uint64_t v14 = 1;
  }
  else
  {
    std::string __p = 0;
    xpc_object_t v44 = 0;
    uint64_t v45 = 0;
    if (v10 < 0) {
      std::string::__init_copy_ctor_external(&v42, v11, a4[1]);
    }
    else {
      std::string v42 = *(std::string *)a4;
    }
    BOOL v15 = ICETrace::loadTraceConfigFile_sync(a1, (std::string::size_type)&v42, &__p, 0);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v42.__r_.__value_.__l.__data_);
      char v16 = *(NSObject **)(a1 + 40);
      std::string v17 = v16;
      if (v15)
      {
LABEL_18:
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = a1 + 184;
          if (*(char *)(a1 + 207) < 0) {
            uint64_t v18 = *v8;
          }
          uint32_t v19 = a4;
          if (*((char *)a4 + 23) < 0) {
            uint32_t v19 = (uint64_t *)*a4;
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v18;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v19;
          _os_log_impl(&dword_1A609F000, v16, OS_LOG_TYPE_DEFAULT, "#I Setting Sleep Config File from %s to %s", buf, 0x16u);
        }
        if (prop::bbtrace::set(a3, (const char *)a4))
        {
          if (v8 != a4)
          {
            char v20 = *((unsigned char *)a4 + 23);
            if (*(char *)(a1 + 207) < 0)
            {
              if (v20 >= 0) {
                long long v24 = (std::string::value_type *)a4;
              }
              else {
                long long v24 = (std::string::value_type *)*a4;
              }
              if (v20 >= 0) {
                size_t v25 = *((unsigned __int8 *)a4 + 23);
              }
              else {
                size_t v25 = a4[1];
              }
              std::string::__assign_no_alias<false>((void **)(a1 + 184), v24, v25);
            }
            else if ((*((unsigned char *)a4 + 23) & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>((void *)(a1 + 184), (void *)*a4, a4[1]);
            }
            else
            {
              long long v21 = *(_OWORD *)a4;
              *(void *)(a1 + 200) = a4[2];
              *(_OWORD *)BOOL v8 = v21;
            }
          }
          if ((void **)(a1 + 256) != &__p) {
            std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>((void *)(a1 + 256), (char *)__p, v44, v44 - (unsigned char *)__p);
          }
          uint64_t v26 = *(std::__shared_weak_count **)(a1 + 80);
          if (!v26 || (v27 = *(void *)(a1 + 72), (CFTypeRef v28 = std::__shared_weak_count::lock(v26)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          dispatch_object_t v29 = v28;
          atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v29);
          }
          unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
          unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZN8ICETrace23setPropSleepConfig_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke;
          aBlock[3] = &__block_descriptor_tmp_131;
          aBlock[4] = a1;
          dispatch_group_t group = v7;
          if (v7)
          {
            dispatch_retain(v7);
            dispatch_group_enter(group);
          }
          uint64_t v38 = v27;
          int v39 = v29;
          atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          xpc_object_t v30 = _Block_copy(aBlock);
          uint64_t v31 = *(NSObject **)(a1 + 88);
          if (v31) {
            dispatch_retain(*(dispatch_object_t *)(a1 + 88));
          }
          unint64_t v40 = (unint64_t)v30;
          unint64_t v41 = (unint64_t)v31;
          if (!*(void *)(a1 + 416))
          {
LABEL_66:
            if (v31) {
              dispatch_release(v31);
            }
            if (v30) {
              _Block_release(v30);
            }
            if (v39) {
              std::__shared_weak_count::__release_weak(v39);
            }
            if (group)
            {
              dispatch_group_leave(group);
              if (group) {
                dispatch_release(group);
              }
            }
            std::__shared_weak_count::__release_weak(v29);
            uint64_t v14 = 1;
            long long v22 = (char *)__p;
            if (!__p) {
              goto LABEL_33;
            }
LABEL_32:
            xpc_object_t v44 = v22;
            operator delete(v22);
            goto LABEL_33;
          }
          unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v32 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&uint8_t buf[16] = v32;
          *(_OWORD *)char v47 = v32;
          *(_OWORD *)std::string buf = v32;
          trace::TraceMaskInfo::TraceMaskInfo(buf, a1 + 232, a1 + 256);
          uint64_t v33 = *(void *)(a1 + 416);
          if (v30)
          {
            uint64_t v34 = _Block_copy(v30);
            dispatch_object_t object = v31;
            if (!v31)
            {
LABEL_58:
              (*(void (**)(uint64_t, unsigned char *, void **))(*(void *)v33 + 88))(v33, buf, &v34);
              if (object) {
                dispatch_release(object);
              }
              if (v34) {
                _Block_release(v34);
              }
              *(void *)std::string buf = &unk_1EFB0AC10;
              if (v47[0])
              {
                v47[1] = v47[0];
                operator delete(v47[0]);
              }
              if (*(void *)&buf[8])
              {
                *(void *)&uint8_t buf[16] = *(void *)&buf[8];
                operator delete(*(void **)&buf[8]);
              }
              goto LABEL_66;
            }
          }
          else
          {
            uint64_t v34 = 0;
            dispatch_object_t object = v31;
            if (!v31) {
              goto LABEL_58;
            }
          }
          dispatch_retain(v31);
          goto LABEL_58;
        }
LABEL_31:
        uint64_t v14 = 0;
        long long v22 = (char *)__p;
        if (!__p) {
          goto LABEL_33;
        }
        goto LABEL_32;
      }
    }
    else
    {
      char v16 = *(NSObject **)(a1 + 40);
      std::string v17 = v16;
      if (v15) {
        goto LABEL_18;
      }
    }
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      goto LABEL_31;
    }
    if (*((char *)a4 + 23) < 0) {
      a4 = (uint64_t *)*a4;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = a4;
    _os_log_error_impl(&dword_1A609F000, v16, OS_LOG_TYPE_ERROR, "Failed to load trace config %s", buf, 0xCu);
    uint64_t v14 = 0;
    long long v22 = (char *)__p;
    if (__p) {
      goto LABEL_32;
    }
  }
LABEL_33:
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  return v14;
}

void sub_1A60FE990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, dispatch_group_t group, uint64_t a17, std::__shared_weak_count *a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,uint64_t a29,char a30)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::setPropBackgroundMode_sync(uint64_t a1, NSObject **a2, char *a3, const char *a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (!capabilities::abs::supportsTraceBackgroundMode((capabilities::abs *)a1)) {
    return 0;
  }
  int v8 = prop::bbtrace::set(a3, a4);
  int v9 = *a2;
  if (v9)
  {
    dispatch_retain(v9);
    dispatch_group_enter(v9);
  }
  int v10 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v10 || (v11 = *(void *)(a1 + 72), (uint64_t v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v13 = v12;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v8) {
      goto LABEL_8;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
    if (v8)
    {
LABEL_8:
      char v45 = -86;
      memset(&__p, 0, sizeof(__p));
      char v48 = 7;
      strcpy((char *)v47, "BBTrace");
      memset(&buf, 0, sizeof(buf));
      BOOL v14 = defaults::get((char *)v47, a3, &buf);
      if (v14)
      {
        prop::file::get<std::string>((const void **)v47, (uint64_t)a3, (uint64_t)&buf, &v49);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string __p = v49;
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(buf.__r_.__value_.__l.__data_);
        if ((v48 & 0x80000000) == 0)
        {
LABEL_14:
          if (v14) {
            goto LABEL_15;
          }
          goto LABEL_25;
        }
      }
      else if ((v48 & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(v47[0]);
      if (v14)
      {
LABEL_15:
        uint64_t v15 = util::convert<BOOL>(&__p, (BOOL *)&v45, 0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_16;
        }
        goto LABEL_26;
      }
LABEL_25:
      uint64_t v15 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_16:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v15)
        {
LABEL_53:
          std::__shared_weak_count::__release_weak(v13);
          if (!v9) {
            return v15;
          }
          goto LABEL_21;
        }
LABEL_27:
        int v17 = v45;
        if (v45 == *(unsigned char *)(a1 + 304)) {
          goto LABEL_53;
        }
        uint64_t v18 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          uint32_t v19 = "enabled";
          if (!v17) {
            uint32_t v19 = "disabled";
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
          _os_log_impl(&dword_1A609F000, v18, OS_LOG_TYPE_DEFAULT, "#I Setting BB Trace BackgroundMode to %s", (uint8_t *)&buf, 0xCu);
          LOBYTE(v17) = v45;
        }
        *(unsigned char *)(a1 + 304) = v17;
        if (!*(unsigned char *)(a1 + 336)
          || (uint64_t v20 = *(void *)(a1 + 416)) == 0
          || !(*(unsigned int (**)(uint64_t))(*(void *)v20 + 152))(v20))
        {
          xpc_object_t v30 = *(NSObject **)(a1 + 40);
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_53;
          }
          if (v45) {
            uint64_t v31 = "enable";
          }
          else {
            uint64_t v31 = "disable";
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
          _os_log_impl(&dword_1A609F000, v30, OS_LOG_TYPE_DEFAULT, "#I Trace is not enabled/started. Restart Trace for 'BackgroundMode %s' action to take effect", (uint8_t *)&buf, 0xCu);
LABEL_51:
          std::__shared_weak_count::__release_weak(v13);
          uint64_t v15 = 1;
          if (!v9) {
            return v15;
          }
          goto LABEL_21;
        }
        v49.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
        v49.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN8ICETrace26setPropBackgroundMode_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke;
        aBlock[3] = &__block_descriptor_tmp_104_0;
        aBlock[4] = a1;
        dispatch_group_t group = v9;
        if (v9)
        {
          dispatch_retain(v9);
          dispatch_group_enter(group);
        }
        uint64_t v43 = v11;
        xpc_object_t v44 = v13;
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        long long v21 = _Block_copy(aBlock);
        std::string::size_type v22 = *(void *)(a1 + 88);
        if (v22) {
          dispatch_retain(*(dispatch_object_t *)(a1 + 88));
        }
        v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
        v49.__r_.__value_.__l.__size_ = v22;
        buf.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
        buf.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
        std::string::value_type v23 = *(unsigned char *)(a1 + 304);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EFB0ABE8;
        buf.__r_.__value_.__s.__data_[8] = 1;
        buf.__r_.__value_.__s.__data_[9] = v23;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 4) = *(void *)(a1 + 308);
        uint64_t v24 = *(void *)(a1 + 416);
        dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::callback(v40, (uint64_t)&v49);
        (*(void (**)(uint64_t, std::string *, void *))(*(void *)v24 + 96))(v24, &buf, v40);
        size_t v25 = (config::hw *)dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)v40);
        int v26 = *(_DWORD *)(a1 + 152);
        if (v26 != 6 && v26 || (config::hw::watch(v25) & 1) != 0 || *(unsigned char *)(a1 + 304))
        {
          uint64_t v27 = *(void *)(a1 + 392);
          CFTypeRef v28 = *(const void **)(a1 + 408);
          if (v28)
          {
            dispatch_object_t v29 = _Block_copy(v28);
            uint64_t v38 = v29;
            BasebandTransport::reportStatus(v27, 0, &v38);
            if (v29) {
              _Block_release(v29);
            }
            goto LABEL_57;
          }
          uint64_t v38 = 0;
          long long v32 = &v38;
          uint64_t v33 = v27;
          int v34 = 0;
        }
        else
        {
          uint64_t v35 = *(void *)(a1 + 392);
          char v36 = *(const void **)(a1 + 408);
          if (v36)
          {
            uint64_t v37 = _Block_copy(v36);
            int v39 = v37;
            BasebandTransport::reportStatus(v35, 600, &v39);
            if (v37) {
              _Block_release(v37);
            }
            goto LABEL_57;
          }
          int v39 = 0;
          long long v32 = &v39;
          uint64_t v33 = v35;
          int v34 = 600;
        }
        BasebandTransport::reportStatus(v33, v34, v32);
LABEL_57:
        dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&v49);
        if (v44) {
          std::__shared_weak_count::__release_weak(v44);
        }
        if (group)
        {
          dispatch_group_leave(group);
          if (group) {
            dispatch_release(group);
          }
        }
        goto LABEL_51;
      }
LABEL_26:
      if (!v15) {
        goto LABEL_53;
      }
      goto LABEL_27;
    }
  }
  std::__shared_weak_count::__release_weak(v13);
  uint64_t v15 = 0;
  if (v9)
  {
LABEL_21:
    dispatch_group_leave(v9);
    dispatch_release(v9);
  }
  return v15;
}

void sub_1A60FEFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, dispatch_group_t group, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::setPropHighWatermark_sync(uint64_t a1, dispatch_object_t *a2, char *a3, const char *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  if (!prop::bbtrace::set(a3, a4))
  {
    uint64_t v9 = 0;
    goto LABEL_21;
  }
  int v14 = -1431655766;
  memset(&v15, 0, sizeof(v15));
  char v17 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  BOOL v8 = defaults::get((char *)__p, a3, &buf);
  if (v8)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a3, (uint64_t)&buf, &v18);
    std::string v15 = v18;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_8:
      if (v8) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(__p[0]);
  if (v8)
  {
LABEL_9:
    uint64_t v9 = util::convert<int>(&v15, &v14, 0);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }
LABEL_14:
  uint64_t v9 = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
LABEL_15:
  }
    operator delete(v15.__r_.__value_.__l.__data_);
LABEL_16:
  if (v9)
  {
    int v10 = v14;
    int v11 = *(_DWORD *)(a1 + 308);
    if (v14 != v11)
    {
      uint64_t v12 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v11;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v10;
        _os_log_impl(&dword_1A609F000, v12, OS_LOG_TYPE_DEFAULT, "#I Setting high watermark from %d to %d", (uint8_t *)&buf, 0xEu);
        int v10 = v14;
      }
      *(_DWORD *)(a1 + 308) = v10;
    }
  }
LABEL_21:
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  return v9;
}

void sub_1A60FF2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (v23)
  {
    dispatch_group_leave(v23);
    dispatch_release(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::setPropLowWatermark_sync(uint64_t a1, dispatch_object_t *a2, char *a3, const char *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  if (!prop::bbtrace::set(a3, a4))
  {
    uint64_t v9 = 0;
    goto LABEL_21;
  }
  int v14 = -1431655766;
  memset(&v15, 0, sizeof(v15));
  char v17 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  BOOL v8 = defaults::get((char *)__p, a3, &buf);
  if (v8)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a3, (uint64_t)&buf, &v18);
    std::string v15 = v18;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_8:
      if (v8) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(__p[0]);
  if (v8)
  {
LABEL_9:
    uint64_t v9 = util::convert<int>(&v15, &v14, 0);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }
LABEL_14:
  uint64_t v9 = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
LABEL_15:
  }
    operator delete(v15.__r_.__value_.__l.__data_);
LABEL_16:
  if (v9)
  {
    int v10 = v14;
    int v11 = *(_DWORD *)(a1 + 312);
    if (v14 != v11)
    {
      uint64_t v12 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v11;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v10;
        _os_log_impl(&dword_1A609F000, v12, OS_LOG_TYPE_DEFAULT, "#I Setting low watermark from %d to %d", (uint8_t *)&buf, 0xEu);
        int v10 = v14;
      }
      *(_DWORD *)(a1 + 312) = v10;
    }
  }
LABEL_21:
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  return v9;
}

void sub_1A60FF558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (v23)
  {
    dispatch_group_leave(v23);
    dispatch_release(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::setPropSleepTraceEnabled_sync(uint64_t a1, dispatch_object_t *a2, char *a3, const char *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  if (!prop::bbtrace::set(a3, a4))
  {
    uint64_t v9 = 0;
    goto LABEL_21;
  }
  char v14 = -86;
  memset(&v15, 0, sizeof(v15));
  char v17 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  BOOL v8 = defaults::get((char *)__p, a3, &buf);
  if (v8)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a3, (uint64_t)&buf, &v18);
    std::string v15 = v18;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_8:
      if (v8) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(__p[0]);
  if (v8)
  {
LABEL_9:
    uint64_t v9 = util::convert<BOOL>(&v15, (BOOL *)&v14, 0);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }
LABEL_14:
  uint64_t v9 = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
LABEL_15:
  }
    operator delete(v15.__r_.__value_.__l.__data_);
LABEL_16:
  if (v9)
  {
    int v10 = v14;
    int v11 = *(unsigned __int8 *)(a1 + 316);
    if (v14 != v11)
    {
      uint64_t v12 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v11;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v10;
        _os_log_impl(&dword_1A609F000, v12, OS_LOG_TYPE_DEFAULT, "#I Setting sleep trace enabled from %d to %d", (uint8_t *)&buf, 0xEu);
        LOBYTE(v10) = v14;
      }
      *(unsigned char *)(a1 + 316) = v10;
    }
  }
LABEL_21:
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  return v9;
}

void sub_1A60FF7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (v23)
  {
    dispatch_group_leave(v23);
    dispatch_release(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::setPropETBSetup_sync(uint64_t a1, uint64_t a2, char *a3, uint64_t *a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (!capabilities::abs::supportsETB((capabilities::abs *)a1)) {
    return 0;
  }
  if ((*(char *)(a1 + 231) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 231)) {
      return 0;
    }
LABEL_6:
    uint64_t v7 = (uint64_t *)(a1 + 208);
    if (*(char *)(a1 + 231) >= 0) {
      BOOL v8 = (const char *)(a1 + 208);
    }
    else {
      BOOL v8 = *(const char **)(a1 + 208);
    }
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v9 = (const char *)a4;
    }
    else {
      uint64_t v9 = (const char *)*a4;
    }
    if (!strcasecmp(v8, v9)) {
      return 0;
    }
    *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v55 = v10;
    long long v56 = v10;
    long long v53 = v10;
    long long v54 = v10;
    long long v51 = v10;
    long long v52 = v10;
    long long v50 = v10;
    int v11 = (const void *)*MEMORY[0x1E4F4C6F0];
    size_t v12 = strlen((const char *)*MEMORY[0x1E4F4C6F0]);
    if (v12 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v13 = v12;
    if (v12 >= 0x17)
    {
      uint64_t v17 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v17 = v12 | 7;
      }
      uint64_t v18 = v17 + 1;
      char v14 = operator new(v17 + 1);
      *(void *)&__dst[8] = v13;
      *(void *)&__dst[16] = v18 | 0x8000000000000000;
      *(void *)std::string __dst = v14;
    }
    else
    {
      __dst[23] = v12;
      char v14 = __dst;
      if (!v12)
      {
LABEL_23:
        v14[v13] = 0;
        uint32_t v19 = (const void *)*MEMORY[0x1E4F4D138];
        size_t v20 = strlen((const char *)*MEMORY[0x1E4F4D138]);
        if (v20 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v21 = v20;
        if (v20 >= 0x17)
        {
          uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17) {
            uint64_t v23 = v20 | 7;
          }
          uint64_t v24 = v23 + 1;
          std::string::size_type v22 = operator new(v23 + 1);
          *((void *)&v48 + 1) = v21;
          unint64_t v49 = v24 | 0x8000000000000000;
          *(void *)&long long v48 = v22;
        }
        else
        {
          HIBYTE(v49) = v20;
          std::string::size_type v22 = &v48;
          if (!v20)
          {
LABEL_31:
            v22[v21] = 0;
            size_t v25 = (char *)operator new(0x20uLL);
            uint64_t v46 = v25;
            long long v47 = xmmword_1A61F7570;
            strcpy(v25, "ETB Config file has changed");
            Timestamp::Timestamp((Timestamp *)v42);
            Timestamp::asString((uint64_t)v42, 0, 9, __p);
            char v41 = 0;
            LOBYTE(v40) = 0;
            ResetInfo::ResetInfo((std::string *)&v50, (long long *)__dst, &v48, (long long *)&v46, (uint64_t)__p, 7, &v40);
            if (v45 < 0) {
              operator delete(__p[0]);
            }
            std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v42, v43);
            operator delete(v25);
            if (SHIBYTE(v49) < 0)
            {
              operator delete((void *)v48);
              if ((__dst[23] & 0x80000000) == 0) {
                goto LABEL_35;
              }
            }
            else if ((__dst[23] & 0x80000000) == 0)
            {
              goto LABEL_35;
            }
            operator delete(*(void **)__dst);
LABEL_35:
            ResetInfo::ResetInfo(&v33, &v50);
            ICETrace::commandResetModem_sync(a1, (long long *)&v33);
            if (v39 < 0)
            {
              operator delete(v38);
              if ((v37 & 0x80000000) == 0)
              {
LABEL_37:
                if ((v35 & 0x80000000) == 0) {
                  goto LABEL_38;
                }
                goto LABEL_54;
              }
            }
            else if ((v37 & 0x80000000) == 0)
            {
              goto LABEL_37;
            }
            operator delete(v36);
            if ((v35 & 0x80000000) == 0)
            {
LABEL_38:
              if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_39;
              }
LABEL_55:
              operator delete(v33.__r_.__value_.__l.__data_);
LABEL_39:
              uint64_t v15 = prop::bbtrace::set(a3, (const char *)a4);
              if (v15)
              {
                int v26 = *(NSObject **)(a1 + 40);
                if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v27 = a1 + 208;
                  if (*(char *)(a1 + 231) < 0) {
                    uint64_t v27 = *v7;
                  }
                  CFTypeRef v28 = a4;
                  if (*((char *)a4 + 23) < 0) {
                    CFTypeRef v28 = (uint64_t *)*a4;
                  }
                  *(_DWORD *)std::string __dst = 136315394;
                  *(void *)&__dst[4] = v27;
                  *(_WORD *)&__dst[12] = 2080;
                  *(void *)&__dst[14] = v28;
                  _os_log_impl(&dword_1A609F000, v26, OS_LOG_TYPE_DEFAULT, "#I Setting ETB Config File from %s to %s", __dst, 0x16u);
                }
                if (v7 != a4)
                {
                  char v29 = *((unsigned char *)a4 + 23);
                  if (*(char *)(a1 + 231) < 0)
                  {
                    if (v29 >= 0) {
                      uint64_t v31 = a4;
                    }
                    else {
                      uint64_t v31 = (void *)*a4;
                    }
                    if (v29 >= 0) {
                      size_t v32 = *((unsigned __int8 *)a4 + 23);
                    }
                    else {
                      size_t v32 = a4[1];
                    }
                    std::string::__assign_no_alias<false>((void **)(a1 + 208), v31, v32);
                  }
                  else if ((*((unsigned char *)a4 + 23) & 0x80) != 0)
                  {
                    std::string::__assign_no_alias<true>((void *)(a1 + 208), (void *)*a4, a4[1]);
                  }
                  else
                  {
                    long long v30 = *(_OWORD *)a4;
                    *(void *)(a1 + 224) = a4[2];
                    *(_OWORD *)uint64_t v7 = v30;
                  }
                }
              }
              if (SHIBYTE(v56) < 0)
              {
                operator delete(*((void **)&v55 + 1));
                if ((SBYTE7(v54) & 0x80000000) == 0)
                {
LABEL_66:
                  if ((SHIBYTE(v52) & 0x80000000) == 0) {
                    goto LABEL_67;
                  }
                  goto LABEL_71;
                }
              }
              else if ((SBYTE7(v54) & 0x80000000) == 0)
              {
                goto LABEL_66;
              }
              operator delete((void *)v53);
              if ((SHIBYTE(v52) & 0x80000000) == 0)
              {
LABEL_67:
                if ((SBYTE7(v51) & 0x80000000) == 0) {
                  return v15;
                }
LABEL_72:
                operator delete((void *)v50);
                return v15;
              }
LABEL_71:
              operator delete(*((void **)&v51 + 1));
              if ((SBYTE7(v51) & 0x80000000) == 0) {
                return v15;
              }
              goto LABEL_72;
            }
LABEL_54:
            operator delete(v34);
            if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_39;
            }
            goto LABEL_55;
          }
        }
        memmove(v22, v19, v21);
        goto LABEL_31;
      }
    }
    memmove(v14, v11, v13);
    goto LABEL_23;
  }
  if (*(void *)(a1 + 216)) {
    goto LABEL_6;
  }
  return 0;
}

void sub_1A60FFCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
}

void sub_1A60FFCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,void *a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a27, a28);
  operator delete(v44);
  if (a44 < 0) {
    operator delete(a39);
  }
  if (*(char *)(v45 - 105) < 0) {
    operator delete(*(void **)(v45 - 128));
  }
  _Unwind_Resume(a1);
}

void sub_1A60FFD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
}

uint64_t ICETrace::setPropMaxMemoryFileCount_sync(uint64_t a1, dispatch_object_t *a2, char *a3, const char *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  if (!prop::bbtrace::set(a3, a4))
  {
    uint64_t v9 = 0;
    goto LABEL_23;
  }
  int v15 = -1431655766;
  memset(&v16, 0, sizeof(v16));
  char v18 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  BOOL v8 = defaults::get((char *)__p, a3, &buf);
  if (v8)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a3, (uint64_t)&buf, &v19);
    std::string v16 = v19;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v18 & 0x80000000) == 0)
    {
LABEL_8:
      if (v8) {
        goto LABEL_9;
      }
LABEL_14:
      uint64_t v9 = 0;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_17;
      }
LABEL_15:
      if (!v9) {
        goto LABEL_23;
      }
      goto LABEL_18;
    }
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(__p[0]);
  if (!v8) {
    goto LABEL_14;
  }
LABEL_9:
  uint64_t v9 = util::convert<unsigned int>(&v16, &v15, 0);
  if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_15;
  }
LABEL_17:
  operator delete(v16.__r_.__value_.__l.__data_);
  if (!v9) {
    goto LABEL_23;
  }
LABEL_18:
  int v10 = v15;
  int v11 = *(_DWORD *)(a1 + 332);
  if (v15 != v11)
  {
    size_t v12 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v11;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v10;
      _os_log_impl(&dword_1A609F000, v12, OS_LOG_TYPE_DEFAULT, "#I Setting max memory file count from %u to %u", (uint8_t *)&buf, 0xEu);
      int v10 = v15;
    }
    *(_DWORD *)(a1 + 332) = v10;
    size_t v13 = *(TraceFileCollection **)(a1 + 368);
    if (v13) {
      TraceFileCollection::setMaxMemoryFileCount(v13);
    }
  }
LABEL_23:
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  return v9;
}

void sub_1A60FFF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23)
  {
    dispatch_group_leave(v23);
    dispatch_release(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::setPropFileSize_sync(uint64_t a1, uint64_t a2, char *a3, const char *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!prop::bbtrace::set(a3, a4)) {
    return 0;
  }
  int v13 = -1431655766;
  memset(&__p, 0, sizeof(__p));
  char v16 = 7;
  strcpy((char *)v15, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  BOOL v6 = defaults::get((char *)v15, a3, &buf);
  if (v6)
  {
    prop::file::get<std::string>((const void **)v15, (uint64_t)a3, (uint64_t)&buf, &v17);
    std::string __p = v17;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_6:
      if (v6) {
        goto LABEL_7;
      }
      goto LABEL_13;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(v15[0]);
  if (v6)
  {
LABEL_7:
    uint64_t v7 = util::convert<unsigned int>(&__p, &v13, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_8;
    }
LABEL_14:
    if (!v7) {
      return v7;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t v7 = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_14;
  }
LABEL_8:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v7) {
    return v7;
  }
LABEL_15:
  unsigned int v8 = v13;
  unsigned int v9 = *(_DWORD *)(a1 + 348);
  if (v13 != v9)
  {
    int v10 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v9 >> 10;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v8 >> 10;
      _os_log_impl(&dword_1A609F000, v10, OS_LOG_TYPE_DEFAULT, "#I Changing file size from %d KB to %d KB", (uint8_t *)&buf, 0xEu);
      unsigned int v8 = v13;
    }
    *(_DWORD *)(a1 + 348) = v8;
    int v11 = *(TraceFileCollection **)(a1 + 368);
    if (v11) {
      TraceFileCollection::setFileSize(v11);
    }
  }
  return v7;
}

void sub_1A61001BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::setPropTransportReadSize_sync(unsigned char *a1, NSObject **a2, char *a3, const char *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!prop::bbtrace::set(a3, a4)) {
    return 0;
  }
  unsigned int v18 = 0;
  memset(&__p, 0, sizeof(__p));
  char v21 = 7;
  strcpy((char *)v20, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  uint64_t v7 = defaults::get((char *)v20, a3, &buf);
  if (v7)
  {
    prop::file::get<std::string>((const void **)v20, (uint64_t)a3, (uint64_t)&buf, &v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v22;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_8:
      if (!v7) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v21 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v20[0]);
  if (!v7)
  {
LABEL_9:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v7 = util::convert<unsigned int>(&__p, &v18, 0);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if (!v7) {
      return v7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v7) {
    return v7;
  }
LABEL_18:
  unsigned int v9 = v18;
  unsigned int v10 = *((_DWORD *)a1 + 88);
  if (v18 != v10)
  {
    int v11 = *((void *)a1 + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v10 >> 10;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v9 >> 10;
      _os_log_impl(&dword_1A609F000, v11, OS_LOG_TYPE_DEFAULT, "#I Updating trace transport read-size from %u KB to %u KB", (uint8_t *)&buf, 0xEu);
      unsigned int v9 = v18;
    }
    *((_DWORD *)a1 + 88) = v9;
    if (a1[336])
    {
      size_t v12 = *a2;
      dispatch_object_t object = v12;
      if (v12) {
        dispatch_retain(v12);
      }
      CFTypeRef cf = 0;
      (*(void (**)(unsigned char *, dispatch_object_t *, CFTypeRef *))(*(void *)a1 + 192))(a1, &object, &cf);
      if (cf) {
        CFRelease(cf);
      }
      if (object) {
        dispatch_release(object);
      }
      int v13 = *a2;
      dispatch_object_t v15 = v13;
      if (v13) {
        dispatch_retain(v13);
      }
      CFTypeRef v14 = 0;
      (*(void (**)(unsigned char *, dispatch_object_t *, CFTypeRef *))(*(void *)a1 + 184))(a1, &v15, &v14);
      if (v14) {
        CFRelease(v14);
      }
      if (v15) {
        dispatch_release(v15);
      }
    }
  }
  return v7;
}

void sub_1A61004B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, dispatch_object_t object, char a12, dispatch_object_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::setPropTransportReadCount_sync(unsigned char *a1, NSObject **a2, char *a3, const char *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!prop::bbtrace::set(a3, a4)) {
    return 0;
  }
  int v18 = 0;
  memset(&__p, 0, sizeof(__p));
  char v21 = 7;
  strcpy((char *)v20, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  uint64_t v7 = defaults::get((char *)v20, a3, &buf);
  if (v7)
  {
    prop::file::get<std::string>((const void **)v20, (uint64_t)a3, (uint64_t)&buf, &v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v22;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_8:
      if (!v7) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v21 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v20[0]);
  if (!v7)
  {
LABEL_9:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v7 = util::convert<unsigned int>(&__p, &v18, 0);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if (!v7) {
      return v7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v7) {
    return v7;
  }
LABEL_18:
  int v9 = v18;
  int v10 = *((_DWORD *)a1 + 89);
  if (v18 != v10)
  {
    int v11 = *((void *)a1 + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v10;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v9;
      _os_log_impl(&dword_1A609F000, v11, OS_LOG_TYPE_DEFAULT, "#I Updating trace transport read-count from %d to %d", (uint8_t *)&buf, 0xEu);
      int v9 = v18;
    }
    *((_DWORD *)a1 + 89) = v9;
    if (a1[336])
    {
      size_t v12 = *a2;
      dispatch_object_t object = v12;
      if (v12) {
        dispatch_retain(v12);
      }
      CFTypeRef cf = 0;
      (*(void (**)(unsigned char *, dispatch_object_t *, CFTypeRef *))(*(void *)a1 + 192))(a1, &object, &cf);
      if (cf) {
        CFRelease(cf);
      }
      if (object) {
        dispatch_release(object);
      }
      int v13 = *a2;
      dispatch_object_t v15 = v13;
      if (v13) {
        dispatch_retain(v13);
      }
      CFTypeRef v14 = 0;
      (*(void (**)(unsigned char *, dispatch_object_t *, CFTypeRef *))(*(void *)a1 + 184))(a1, &v15, &v14);
      if (v14) {
        CFRelease(v14);
      }
      if (v15) {
        dispatch_release(v15);
      }
    }
  }
  return v7;
}

void sub_1A6100800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, dispatch_object_t object, char a12, dispatch_object_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE64c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  int v4 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 48) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = *(NSObject **)(a1 + 48);
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  BOOL v6 = *(NSObject **)(a2 + 64);
  *(void *)(a1 + 64) = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE64c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 64);
  if (v2) {
    dispatch_release(v2);
  }
  std::string::size_type v3 = *(NSObject **)(a1 + 48);
  if (v3)
  {
    dispatch_group_leave(v3);
    int v4 = *(NSObject **)(a1 + 48);
    if (v4)
    {
      dispatch_release(v4);
    }
  }
}

uint64_t ICETrace::getProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = 0;
  int v9 = &v8;
  uint64_t v10 = 0x2000000000;
  char v11 = 1;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZN8ICETrace11getPropertyERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6__block_invoke;
  void v7[3] = &unk_1E5C47048;
  void v7[6] = a2;
  v7[7] = a3;
  v7[4] = &v8;
  void v7[5] = a1;
  size_t v12 = v7;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_0;
  uint64_t block[3] = &__block_descriptor_tmp_186;
  void block[4] = a1 + 72;
  void block[5] = &v12;
  uint64_t v4 = a1 + 88;
  std::string::size_type v3 = *(NSObject **)(a1 + 88);
  if (*(void *)(v4 + 8)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void ___ZN8ICETrace11getPropertyERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6__block_invoke(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  std::string::size_type v3 = *(void *)(a1 + 48);
  if ((*(char *)(v3 + 23) & 0x80000000) == 0)
  {
    if (strcasecmp(*(const char **)(a1 + 48), "Enabled"))
    {
      if (strcasecmp((const char *)v3, "History"))
      {
        if (strcasecmp((const char *)v3, "Mode"))
        {
          if (strcasecmp((const char *)v3, "File"))
          {
            if (strcasecmp((const char *)v3, "File_Sleep"))
            {
              if (strcasecmp((const char *)v3, "BackgroundMode"))
              {
                if (strcasecmp((const char *)v3, "High_Watermark"))
                {
                  if (strcasecmp((const char *)v3, "Low_Watermark"))
                  {
                    if (strcasecmp((const char *)v3, "Enabled_During_Sleep"))
                    {
                      if (strcasecmp((const char *)v3, "State"))
                      {
                        if (strcasecmp((const char *)v3, "ETBFile"))
                        {
                          if (strcasecmp((const char *)v3, "MaxMemoryFileCount"))
                          {
                            if (strcasecmp((const char *)v3, "KeepScratchLogs"))
                            {
                              if (strcasecmp((const char *)v3, "FileSize"))
                              {
                                uint64_t v4 = (const char *)v3;
                                if (strcasecmp((const char *)v3, "SizeIO"))
                                {
LABEL_17:
                                  if (strcasecmp(v4, "NumberOfReadIO"))
                                  {
                                    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
                                    uint64_t v5 = *(NSObject **)(v2 + 40);
                                    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
                                    {
                                      if (*(char *)(v3 + 23) < 0) {
                                        std::string::size_type v3 = *(void *)v3;
                                      }
                                      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                                      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v3;
                                      _os_log_error_impl(&dword_1A609F000, v5, OS_LOG_TYPE_ERROR, "Key not handled: %s", (uint8_t *)&buf, 0xCu);
                                    }
                                    return;
                                  }
                                  util::to_str<unsigned int>(*(_DWORD *)(v2 + 356), &buf);
                                  goto LABEL_68;
                                }
                                goto LABEL_37;
                              }
                              goto LABEL_84;
                            }
                            goto LABEL_83;
                          }
                          goto LABEL_82;
                        }
LABEL_79:
                        CFTypeRef v28 = *(std::string **)(a1 + 56);
                        std::string::operator=(v28, (const std::string *)(v2 + 208));
                        return;
                      }
LABEL_75:
                      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_1A61FC72E);
                      ICETrace::dumpState_sync(v2, (uint64_t)__p, 0, 10, &buf);
                      std::string::operator=(*(std::string **)(a1 + 56), &buf);
                      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(buf.__r_.__value_.__l.__data_);
                      }
                      if (v30 < 0) {
                        operator delete(__p[0]);
                      }
                      return;
                    }
                    goto LABEL_67;
                  }
                  goto LABEL_56;
                }
LABEL_54:
                int v20 = *(_DWORD *)(v2 + 308);
                v31[0] = 0;
                *(void *)((char *)v31 + 7) = 0;
                std::to_string(&buf, v20);
                goto LABEL_41;
              }
LABEL_53:
              int v19 = *(unsigned __int8 *)(v2 + 304);
              v31[0] = 0;
              *(void *)((char *)v31 + 7) = 0;
              std::to_string(&buf, v19);
              goto LABEL_41;
            }
LABEL_49:
            int v13 = (void *)(v2 + 184);
            uint64_t v14 = *(void *)(a1 + 56);
            if (v14 == v2 + 184) {
              return;
            }
            size_t v15 = *(unsigned __int8 *)(v2 + 207);
            if ((*(char *)(v14 + 23) & 0x80000000) == 0)
            {
              if ((v15 & 0x80) == 0) {
                goto LABEL_52;
              }
              char v16 = *(void **)(v2 + 184);
              size_t v17 = *(void *)(v2 + 192);
LABEL_72:
              std::string::__assign_no_alias<true>((void *)v14, v16, v17);
              return;
            }
            int v21 = (char)v15;
            std::string v22 = *(void **)(v2 + 184);
            size_t v23 = *(void *)(v2 + 192);
            goto LABEL_58;
          }
          goto LABEL_45;
        }
        goto LABEL_40;
      }
      goto LABEL_39;
    }
LABEL_38:
    int v6 = *(unsigned __int8 *)(v2 + 336);
    v31[0] = 0;
    *(void *)((char *)v31 + 7) = 0;
    std::to_string(&buf, v6);
LABEL_41:
    v31[0] = buf.__r_.__value_.__l.__size_;
    std::string::size_type v9 = buf.__r_.__value_.__r.__words[0];
    *(void *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7);
    char v10 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    uint64_t v11 = *(void *)(a1 + 56);
    if (*(char *)(v11 + 23) < 0) {
      operator delete(*(void **)v11);
    }
    uint64_t v12 = v31[0];
    *(void *)uint64_t v11 = v9;
    *(void *)(v11 + 8) = v12;
    *(void *)(v11 + 15) = *(void *)((char *)v31 + 7);
    *(unsigned char *)(v11 + 23) = v10;
    return;
  }
  uint64_t v4 = *(const char **)v3;
  if (!strcasecmp(*(const char **)v3, "Enabled")) {
    goto LABEL_38;
  }
  if (!strcasecmp(v4, "History"))
  {
LABEL_39:
    int v7 = *(_DWORD *)(v2 + 340);
    v31[0] = 0;
    *(void *)((char *)v31 + 7) = 0;
    std::to_string(&buf, v7);
    goto LABEL_41;
  }
  if (!strcasecmp(v4, "Mode"))
  {
LABEL_40:
    int v8 = *(_DWORD *)(v2 + 152);
    v31[0] = 0;
    *(void *)((char *)v31 + 7) = 0;
    std::to_string(&buf, v8);
    goto LABEL_41;
  }
  if (strcasecmp(v4, "File"))
  {
    if (strcasecmp(v4, "File_Sleep"))
    {
      if (strcasecmp(v4, "BackgroundMode"))
      {
        if (strcasecmp(v4, "High_Watermark"))
        {
          if (strcasecmp(v4, "Low_Watermark"))
          {
            if (strcasecmp(v4, "Enabled_During_Sleep"))
            {
              if (strcasecmp(v4, "State"))
              {
                if (strcasecmp(v4, "ETBFile"))
                {
                  if (strcasecmp(v4, "MaxMemoryFileCount"))
                  {
                    if (strcasecmp(v4, "KeepScratchLogs"))
                    {
                      if (strcasecmp(v4, "FileSize"))
                      {
                        if (strcasecmp(v4, "SizeIO")) {
                          goto LABEL_17;
                        }
LABEL_37:
                        util::to_str<unsigned int>(*(_DWORD *)(v2 + 352), &buf);
LABEL_68:
                        uint64_t v26 = *(void *)(a1 + 56);
                        if (*(char *)(v26 + 23) < 0) {
                          operator delete(*(void **)v26);
                        }
                        long long v27 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
                        *(void *)(v26 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
                        *(_OWORD *)uint64_t v26 = v27;
                        return;
                      }
LABEL_84:
                      util::to_str<unsigned int>(*(_DWORD *)(v2 + 348), &buf);
                      goto LABEL_68;
                    }
LABEL_83:
                    util::to_str<BOOL>(*(unsigned __int8 *)(v2 + 344), &buf);
                    goto LABEL_68;
                  }
LABEL_82:
                  util::to_str<unsigned int>(*(_DWORD *)(v2 + 332), &buf);
                  goto LABEL_68;
                }
                goto LABEL_79;
              }
              goto LABEL_75;
            }
LABEL_67:
            util::to_str<BOOL>(*(unsigned __int8 *)(v2 + 316), &buf);
            goto LABEL_68;
          }
LABEL_56:
          util::to_str<BOOL>(*(_DWORD *)(v2 + 312), &buf);
          goto LABEL_68;
        }
        goto LABEL_54;
      }
      goto LABEL_53;
    }
    goto LABEL_49;
  }
LABEL_45:
  int v13 = (void *)(v2 + 160);
  uint64_t v14 = *(void *)(a1 + 56);
  if (v14 == v2 + 160) {
    return;
  }
  size_t v15 = *(unsigned __int8 *)(v2 + 183);
  if ((*(char *)(v14 + 23) & 0x80000000) == 0)
  {
    if ((v15 & 0x80) == 0)
    {
LABEL_52:
      long long v18 = *(_OWORD *)v13;
      *(void *)(v14 + 16) = v13[2];
      *(_OWORD *)uint64_t v14 = v18;
      return;
    }
    char v16 = *(void **)(v2 + 160);
    size_t v17 = *(void *)(v2 + 168);
    goto LABEL_72;
  }
  int v21 = (char)v15;
  std::string v22 = *(void **)(v2 + 160);
  size_t v23 = *(void *)(v2 + 168);
LABEL_58:
  if (v21 >= 0) {
    uint64_t v24 = v13;
  }
  else {
    uint64_t v24 = v22;
  }
  if (v21 >= 0) {
    size_t v25 = v15;
  }
  else {
    size_t v25 = v23;
  }

  std::string::__assign_no_alias<false>((void **)v14, v24, v25);
}

void sub_1A6101090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::historyAsString_sync@<X0>(uint64_t this@<X0>, char *a2@<X8>)
{
  uint64_t v2 = a2;
  if (!*(_DWORD *)(this + 340))
  {
    a2[23] = 8;
    strcpy(a2, "Infinite");
    return this;
  }
  uint64_t v3 = this;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[7] = v4;
  v23[8] = v4;
  v23[5] = v4;
  v23[6] = v4;
  v23[3] = v4;
  v23[4] = v4;
  v23[1] = v4;
  v23[2] = v4;
  long long v22 = v4;
  v23[0] = v4;
  *(_OWORD *)int v20 = v4;
  long long v21 = v4;
  long long v18 = v4;
  long long v19 = v4;
  long long v16 = v4;
  long long v17 = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
  std::to_string(&v25, *(_DWORD *)(v3 + 340));
  std::string __p = v25;
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" MB", 3);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    char v8 = BYTE8(v22);
    if ((BYTE8(v22) & 0x10) == 0) {
      goto LABEL_10;
    }
LABEL_14:
    uint64_t v10 = v22;
    if ((unint64_t)v22 < *((void *)&v19 + 1))
    {
      *(void *)&long long v22 = *((void *)&v19 + 1);
      uint64_t v10 = *((void *)&v19 + 1);
    }
    uint64_t v11 = (const void *)v19;
    size_t v9 = v10 - v19;
    if ((unint64_t)(v10 - v19) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_28;
    }
    goto LABEL_17;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  char v8 = BYTE8(v22);
  if ((BYTE8(v22) & 0x10) != 0) {
    goto LABEL_14;
  }
LABEL_10:
  if ((v8 & 8) == 0)
  {
    size_t v9 = 0;
    v2[23] = 0;
    goto LABEL_24;
  }
  uint64_t v11 = (const void *)*((void *)&v17 + 1);
  size_t v9 = *((void *)&v18 + 1) - *((void *)&v17 + 1);
  if (*((void *)&v18 + 1) - *((void *)&v17 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_28:
  }
    std::string::__throw_length_error[abi:ne180100]();
LABEL_17:
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v14 = (char *)operator new(v12 + 1);
    *((void *)v2 + 1) = v9;
    *((void *)v2 + 2) = v13 | 0x8000000000000000;
    *(void *)uint64_t v2 = v14;
    uint64_t v2 = v14;
  }
  else
  {
    v2[23] = v9;
    if (!v9) {
      goto LABEL_24;
    }
  }
  memmove(v2, v11, v9);
LABEL_24:
  v2[v9] = 0;
  *(void *)&long long v16 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v16 + *(void *)(v16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v16 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62751A0](v23);
}

void sub_1A6101424(void *a1)
{
}

void sub_1A6101430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace26setPropBackgroundMode_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke(void *a1, void *a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[4];
  uint64_t v5 = *(NSObject **)(v4 + 144);
  if (v5)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 144));
    dispatch_group_enter(v5);
  }
  int v6 = (std::__shared_weak_count *)a1[7];
  if (v6)
  {
    int v7 = std::__shared_weak_count::lock(v6);
    uint64_t v46 = v7;
    if (v7)
    {
      char v8 = v7;
      uint64_t v45 = a1[6];
      if (!v45
        || (*a2
          ? (size_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get)
          : (size_t v9 = 0),
            !v9))
      {
LABEL_51:
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        goto LABEL_53;
      }
      uint64_t v10 = *(NSObject **)(v4 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        if (*(unsigned char *)(v4 + 304)) {
          std::string v25 = "enabled";
        }
        else {
          std::string v25 = "disabled";
        }
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v25;
        _os_log_error_impl(&dword_1A609F000, v10, OS_LOG_TYPE_ERROR, "Failed to set BB Trace BackgroundMode to %s", buf, 0xCu);
      }
      *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v52 = v11;
      long long v53 = v11;
      long long v50 = v11;
      long long v51 = v11;
      long long v48 = v11;
      long long v49 = v11;
      *(_OWORD *)std::string buf = v11;
      uint64_t v12 = (const void *)*MEMORY[0x1E4F4C6E8];
      size_t v13 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
      if (v13 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v14 = v13;
      if (v13 >= 0x17)
      {
        uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17) {
          uint64_t v16 = v13 | 7;
        }
        uint64_t v17 = v16 + 1;
        p_dst = (long long *)operator new(v16 + 1);
        *((void *)&__dst + 1) = v14;
        unint64_t v44 = v17 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v44) = v13;
        p_dst = &__dst;
        if (!v13)
        {
LABEL_19:
          *((unsigned char *)p_dst + v14) = 0;
          long long v18 = (const void *)*MEMORY[0x1E4F4D038];
          size_t v19 = strlen((const char *)*MEMORY[0x1E4F4D038]);
          if (v19 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v20 = v19;
          if (v19 >= 0x17)
          {
            uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v19 | 7) != 0x17) {
              uint64_t v22 = v19 | 7;
            }
            uint64_t v23 = v22 + 1;
            long long v21 = operator new(v22 + 1);
            *((void *)&v41 + 1) = v20;
            unint64_t v42 = v23 | 0x8000000000000000;
            *(void *)&long long v41 = v21;
          }
          else
          {
            HIBYTE(v42) = v19;
            long long v21 = &v41;
            if (!v19)
            {
LABEL_27:
              v21[v20] = 0;
              unint64_t v24 = (char *)operator new(0x20uLL);
              char v39 = v24;
              long long v40 = xmmword_1A61F8020;
              strcpy(v24, "Failed to set trace params");
              Timestamp::Timestamp((Timestamp *)v35);
              Timestamp::asString((uint64_t)v35, 0, 9, __p);
              char v34 = 0;
              LOBYTE(v33) = 0;
              ResetInfo::ResetInfo((std::string *)buf, &__dst, &v41, (long long *)&v39, (uint64_t)__p, 7, &v33);
              if (v38 < 0) {
                operator delete(__p[0]);
              }
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v35, v36);
              operator delete(v24);
              if (SHIBYTE(v42) < 0) {
                operator delete((void *)v41);
              }
              if (SHIBYTE(v44) < 0) {
                operator delete((void *)__dst);
              }
              ResetInfo::ResetInfo(&v26, (long long *)buf);
              ICETrace::commandResetModem_sync(v4, (long long *)&v26);
              if (v32 < 0)
              {
                operator delete(v31);
                if ((v30 & 0x80000000) == 0)
                {
LABEL_35:
                  if ((v28 & 0x80000000) == 0) {
                    goto LABEL_36;
                  }
                  goto LABEL_45;
                }
              }
              else if ((v30 & 0x80000000) == 0)
              {
                goto LABEL_35;
              }
              operator delete(v29);
              if ((v28 & 0x80000000) == 0)
              {
LABEL_36:
                if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_37;
                }
                goto LABEL_46;
              }
LABEL_45:
              operator delete(v27);
              if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_37:
                if ((SHIBYTE(v53) & 0x80000000) == 0) {
                  goto LABEL_38;
                }
                goto LABEL_47;
              }
LABEL_46:
              operator delete(v26.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v53) & 0x80000000) == 0)
              {
LABEL_38:
                if ((SBYTE7(v51) & 0x80000000) == 0) {
                  goto LABEL_39;
                }
                goto LABEL_48;
              }
LABEL_47:
              operator delete(*((void **)&v52 + 1));
              if ((SBYTE7(v51) & 0x80000000) == 0)
              {
LABEL_39:
                if ((SHIBYTE(v49) & 0x80000000) == 0) {
                  goto LABEL_40;
                }
                goto LABEL_49;
              }
LABEL_48:
              operator delete((void *)v50);
              if ((SHIBYTE(v49) & 0x80000000) == 0)
              {
LABEL_40:
                if ((SBYTE7(v48) & 0x80000000) == 0) {
                  goto LABEL_41;
                }
LABEL_50:
                operator delete(*(void **)buf);
                char v8 = v46;
                if (!v46) {
                  goto LABEL_53;
                }
                goto LABEL_51;
              }
LABEL_49:
              operator delete(*((void **)&v48 + 1));
              if ((SBYTE7(v48) & 0x80000000) == 0)
              {
LABEL_41:
                char v8 = v46;
                if (!v46) {
                  goto LABEL_53;
                }
                goto LABEL_51;
              }
              goto LABEL_50;
            }
          }
          memmove(v21, v18, v20);
          goto LABEL_27;
        }
      }
      memmove(p_dst, v12, v14);
      goto LABEL_19;
    }
  }
LABEL_53:
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A61018D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  ResetInfo::~ResetInfo((void **)&a9);
  ResetInfo::~ResetInfo((void **)(v50 - 208));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v50 - 224);
  if (!v49) {
    _Unwind_Resume(a1);
  }
  dispatch_group_leave(v49);
  dispatch_release(v49);
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace16setPropMode_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[4];
  uint64_t v5 = *(NSObject **)(v4 + 144);
  if (v5)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 144));
    dispatch_group_enter(v5);
  }
  uint64_t v69 = 0;
  long long v70 = 0;
  int v6 = (std::__shared_weak_count *)a1[7];
  if (!v6) {
    goto LABEL_80;
  }
  long long v70 = std::__shared_weak_count::lock(v6);
  if (!v70) {
    goto LABEL_83;
  }
  uint64_t v69 = a1[6];
  if (!v69) {
    goto LABEL_80;
  }
  uint64_t v7 = *a2;
  if (*a2) {
    char v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    char v8 = 0;
  }
  size_t v9 = *(NSObject **)(v4 + 40);
  if (!v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1A609F000, v9, OS_LOG_TYPE_DEFAULT, "#I Successfully set mode", buf, 2u);
    }
    *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v76 = v15;
    long long v77 = v15;
    long long v74 = v15;
    long long v75 = v15;
    long long v72 = v15;
    long long v73 = v15;
    *(_OWORD *)std::string buf = v15;
    uint64_t v16 = (const void *)*MEMORY[0x1E4F4C6F0];
    size_t v17 = strlen((const char *)*MEMORY[0x1E4F4C6F0]);
    if (v17 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v18 = v17;
    if (v17 >= 0x17)
    {
      uint64_t v30 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17) {
        uint64_t v30 = v17 | 7;
      }
      uint64_t v31 = v30 + 1;
      p_dst = (long long *)operator new(v30 + 1);
      *((void *)&__dst + 1) = v18;
      unint64_t v68 = v31 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v68) = v17;
      p_dst = &__dst;
      if (!v17)
      {
LABEL_58:
        *((unsigned char *)p_dst + v18) = 0;
        char v32 = (const void *)*MEMORY[0x1E4F4D038];
        size_t v33 = strlen((const char *)*MEMORY[0x1E4F4D038]);
        if (v33 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v34 = v33;
        if (v33 >= 0x17)
        {
          uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v33 | 7) != 0x17) {
            uint64_t v36 = v33 | 7;
          }
          uint64_t v37 = v36 + 1;
          char v35 = operator new(v36 + 1);
          *((void *)&v65 + 1) = v34;
          unint64_t v66 = v37 | 0x8000000000000000;
          *(void *)&long long v65 = v35;
        }
        else
        {
          HIBYTE(v66) = v33;
          char v35 = &v65;
          if (!v33)
          {
LABEL_66:
            v35[v34] = 0;
            char v38 = (char *)operator new(0x38uLL);
            unint64_t v63 = v38;
            long long v64 = xmmword_1A61F8030;
            strcpy(v38, "Requesting Soft Reset to make the new trace mode active");
            Timestamp::Timestamp((Timestamp *)v59);
            Timestamp::asString((uint64_t)v59, 0, 9, v48);
            char v47 = 0;
            LOBYTE(v46) = 0;
            ResetInfo::ResetInfo((std::string *)buf, &__dst, &v65, (long long *)&v63, (uint64_t)v48, 7, &v46);
            if (v49 < 0) {
              operator delete(v48[0]);
            }
            std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v59, v60);
            operator delete(v38);
            if (SHIBYTE(v66) < 0) {
              operator delete((void *)v65);
            }
            if (SHIBYTE(v68) < 0) {
              operator delete((void *)__dst);
            }
            ResetInfo::ResetInfo(&v39, (long long *)buf);
            ICETrace::commandResetModem_sync(v4, (long long *)&v39);
            if (v45 < 0)
            {
              operator delete(v44);
              if ((v43 & 0x80000000) == 0)
              {
LABEL_74:
                if ((v41 & 0x80000000) == 0) {
                  goto LABEL_75;
                }
                goto LABEL_88;
              }
            }
            else if ((v43 & 0x80000000) == 0)
            {
              goto LABEL_74;
            }
            operator delete(v42);
            if ((v41 & 0x80000000) == 0)
            {
LABEL_75:
              if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_76;
              }
              goto LABEL_89;
            }
LABEL_88:
            operator delete(v40);
            if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_76:
              if ((SHIBYTE(v77) & 0x80000000) == 0) {
                goto LABEL_77;
              }
              goto LABEL_49;
            }
LABEL_89:
            operator delete(v39.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v77) & 0x80000000) == 0) {
              goto LABEL_77;
            }
LABEL_49:
            operator delete(*((void **)&v76 + 1));
            if (SBYTE7(v75) < 0) {
              goto LABEL_50;
            }
            goto LABEL_78;
          }
        }
        memmove(v35, v32, v34);
        goto LABEL_66;
      }
    }
    memmove(p_dst, v16, v18);
    goto LABEL_58;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 138412290;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_error_impl(&dword_1A609F000, v9, OS_LOG_TYPE_ERROR, "Unable to set mode %@", buf, 0xCu);
  }
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v76 = v10;
  long long v77 = v10;
  long long v74 = v10;
  long long v75 = v10;
  long long v72 = v10;
  long long v73 = v10;
  *(_OWORD *)std::string buf = v10;
  long long v11 = (const void *)*MEMORY[0x1E4F4C6E8];
  size_t v12 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v20 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v20 = v12 | 7;
    }
    uint64_t v21 = v20 + 1;
    size_t v14 = (long long *)operator new(v20 + 1);
    *((void *)&__dst + 1) = v13;
    unint64_t v68 = v21 | 0x8000000000000000;
    *(void *)&long long __dst = v14;
    goto LABEL_25;
  }
  HIBYTE(v68) = v12;
  size_t v14 = &__dst;
  if (v12) {
LABEL_25:
  }
    memmove(v14, v11, v13);
  *((unsigned char *)v14 + v13) = 0;
  uint64_t v22 = (const void *)*MEMORY[0x1E4F4D038];
  size_t v23 = strlen((const char *)*MEMORY[0x1E4F4D038]);
  if (v23 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v24 = v23;
  if (v23 >= 0x17)
  {
    uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v26 = v23 | 7;
    }
    uint64_t v27 = v26 + 1;
    std::string v25 = operator new(v26 + 1);
    *((void *)&v65 + 1) = v24;
    unint64_t v66 = v27 | 0x8000000000000000;
    *(void *)&long long v65 = v25;
    goto LABEL_33;
  }
  HIBYTE(v66) = v23;
  std::string v25 = &v65;
  if (v23) {
LABEL_33:
  }
    memmove(v25, v22, v24);
  *((unsigned char *)v25 + v24) = 0;
  char v28 = (char *)operator new(0x20uLL);
  unint64_t v63 = v28;
  long long v64 = xmmword_1A61F6FD0;
  strcpy(v28, "Failed to set trace mode");
  Timestamp::Timestamp((Timestamp *)v59);
  Timestamp::asString((uint64_t)v59, 0, 9, __p);
  char v58 = 0;
  LOBYTE(v57) = 0;
  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v65, (long long *)&v63, (uint64_t)__p, 7, &v57);
  if (v62 < 0) {
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v59, v60);
  operator delete(v28);
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)v65);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete((void *)__dst);
  }
  ResetInfo::ResetInfo(&v50, (long long *)buf);
  ICETrace::commandResetModem_sync(v4, (long long *)&v50);
  if (v56 < 0)
  {
    operator delete(v55);
    if ((v54 & 0x80000000) == 0)
    {
LABEL_42:
      if ((v52 & 0x80000000) == 0) {
        goto LABEL_43;
      }
LABEL_47:
      operator delete(v51);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_48;
      }
      goto LABEL_76;
    }
  }
  else if ((v54 & 0x80000000) == 0)
  {
    goto LABEL_42;
  }
  operator delete(v53);
  if (v52 < 0) {
    goto LABEL_47;
  }
LABEL_43:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_76;
  }
LABEL_48:
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77) < 0) {
    goto LABEL_49;
  }
LABEL_77:
  if (SBYTE7(v75) < 0)
  {
LABEL_50:
    operator delete((void *)v74);
    if (SHIBYTE(v73) < 0) {
      goto LABEL_51;
    }
    goto LABEL_79;
  }
LABEL_78:
  if (SHIBYTE(v73) < 0)
  {
LABEL_51:
    operator delete(*((void **)&v72 + 1));
    if (SBYTE7(v72) < 0) {
      goto LABEL_52;
    }
    goto LABEL_80;
  }
LABEL_79:
  if (SBYTE7(v72) < 0)
  {
LABEL_52:
    operator delete(*(void **)buf);
    char v29 = v70;
    if (!v70) {
      goto LABEL_83;
    }
    goto LABEL_81;
  }
LABEL_80:
  char v29 = v70;
  if (!v70) {
    goto LABEL_83;
  }
LABEL_81:
  if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_83:
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A61020B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  ResetInfo::~ResetInfo(&a9);
  ResetInfo::~ResetInfo((void **)(v10 - 208));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v10 - 224);
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1A6102204()
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 224);
  if (v0) {
    JUMPOUT(0x1A61021D8);
  }
  JUMPOUT(0x1A61021FCLL);
}

void ___ZN8ICETrace16setPropMode_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke_114(uint64_t a1, uint64_t *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 144);
  if (v5)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 144));
    dispatch_group_enter(v5);
  }
  uint64_t v44 = 0;
  char v45 = 0;
  int v6 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v6) {
    goto LABEL_43;
  }
  char v45 = std::__shared_weak_count::lock(v6);
  if (!v45) {
    goto LABEL_46;
  }
  uint64_t v44 = *(void *)(a1 + 48);
  if (!v44) {
    goto LABEL_43;
  }
  uint64_t v7 = *a2;
  if (v7) {
    char v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    char v8 = 0;
  }
  if (!v8)
  {
    ICETrace::setTraceMode_sync(v4, *(_DWORD *)(a1 + 64));
    goto LABEL_43;
  }
  size_t v9 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 138412290;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_error_impl(&dword_1A609F000, v9, OS_LOG_TYPE_ERROR, "Unable to set mode %@", buf, 0xCu);
  }
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v51 = v10;
  long long v52 = v10;
  long long v49 = v10;
  long long v50 = v10;
  long long v47 = v10;
  long long v48 = v10;
  *(_OWORD *)std::string buf = v10;
  long long v11 = (const void *)*MEMORY[0x1E4F4C6E8];
  size_t v12 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    p_dst = (long long *)operator new(v15 + 1);
    *((void *)&__dst + 1) = v13;
    unint64_t v43 = v16 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_20;
  }
  HIBYTE(v43) = v12;
  p_dst = &__dst;
  if (v12) {
LABEL_20:
  }
    memmove(p_dst, v11, v13);
  *((unsigned char *)p_dst + v13) = 0;
  size_t v17 = (const void *)*MEMORY[0x1E4F4D038];
  size_t v18 = strlen((const char *)*MEMORY[0x1E4F4D038]);
  if (v18 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v19 = v18;
  if (v18 >= 0x17)
  {
    uint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v21 = v18 | 7;
    }
    uint64_t v22 = v21 + 1;
    uint64_t v20 = operator new(v21 + 1);
    *((void *)&v40 + 1) = v19;
    unint64_t v41 = v22 | 0x8000000000000000;
    *(void *)&long long v40 = v20;
    goto LABEL_28;
  }
  HIBYTE(v41) = v18;
  uint64_t v20 = &v40;
  if (v18) {
LABEL_28:
  }
    memmove(v20, v17, v19);
  *((unsigned char *)v20 + v19) = 0;
  size_t v23 = (char *)operator new(0x20uLL);
  char v38 = v23;
  long long v39 = xmmword_1A61F6FD0;
  strcpy(v23, "Failed to set trace mode");
  Timestamp::Timestamp((Timestamp *)v34);
  Timestamp::asString((uint64_t)v34, 0, 9, __p);
  char v33 = 0;
  LOBYTE(v32) = 0;
  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v40, (long long *)&v38, (uint64_t)__p, 7, &v32);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v34, v35);
  operator delete(v23);
  if (SHIBYTE(v41) < 0) {
    operator delete((void *)v40);
  }
  if (SHIBYTE(v43) < 0) {
    operator delete((void *)__dst);
  }
  ResetInfo::ResetInfo(&v25, (long long *)buf);
  ICETrace::commandResetModem_sync(v4, (long long *)&v25);
  if (v31 < 0)
  {
    operator delete(v30);
    if ((v29 & 0x80000000) == 0)
    {
LABEL_37:
      if ((v27 & 0x80000000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_51;
    }
  }
  else if ((v29 & 0x80000000) == 0)
  {
    goto LABEL_37;
  }
  operator delete(v28);
  if ((v27 & 0x80000000) == 0)
  {
LABEL_38:
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_52;
  }
LABEL_51:
  operator delete(v26);
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_39:
    if ((SHIBYTE(v52) & 0x80000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_53;
  }
LABEL_52:
  operator delete(v25.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v52) & 0x80000000) == 0)
  {
LABEL_40:
    if ((SBYTE7(v50) & 0x80000000) == 0) {
      goto LABEL_41;
    }
LABEL_54:
    operator delete((void *)v49);
    if ((SHIBYTE(v48) & 0x80000000) == 0)
    {
LABEL_42:
      if ((SBYTE7(v47) & 0x80000000) == 0) {
        goto LABEL_43;
      }
LABEL_56:
      operator delete(*(void **)buf);
      size_t v24 = v45;
      if (!v45) {
        goto LABEL_46;
      }
      goto LABEL_44;
    }
    goto LABEL_55;
  }
LABEL_53:
  operator delete(*((void **)&v51 + 1));
  if (SBYTE7(v50) < 0) {
    goto LABEL_54;
  }
LABEL_41:
  if ((SHIBYTE(v48) & 0x80000000) == 0) {
    goto LABEL_42;
  }
LABEL_55:
  operator delete(*((void **)&v47 + 1));
  if (SBYTE7(v47) < 0) {
    goto LABEL_56;
  }
LABEL_43:
  size_t v24 = v45;
  if (!v45) {
    goto LABEL_46;
  }
LABEL_44:
  if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_46:
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A6102674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v50 - 224);
  if (v49)
  {
    dispatch_group_leave(v49);
    dispatch_release(v49);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace24setPropActiveConfig_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke(void *a1, __CFError **a2)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[4];
  uint64_t v5 = *(NSObject **)(v4 + 144);
  if (v5)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 144));
    dispatch_group_enter(v5);
  }
  uint64_t v61 = 0;
  char v62 = 0;
  int v6 = (std::__shared_weak_count *)a1[7];
  if (!v6) {
    goto LABEL_89;
  }
  char v62 = std::__shared_weak_count::lock(v6);
  if (!v62) {
    goto LABEL_92;
  }
  uint64_t v61 = a1[6];
  if (!v61) {
    goto LABEL_89;
  }
  uint64_t v7 = *a2;
  if (*a2) {
    char v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    char v8 = 0;
  }
  if (!v8)
  {
    int v11 = *(unsigned __int8 *)(v4 + 336);
    size_t v12 = *(NSObject **)(v4 + 40);
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      if (v13)
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1A609F000, v12, OS_LOG_TYPE_DEFAULT, "#I Sending command to enable new active trace mask", buf, 2u);
      }
      memset(buf, 170, sizeof(buf));
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN8ICETrace24setPropActiveConfig_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke_120;
      aBlock[3] = &__block_descriptor_tmp_124;
      size_t v14 = a1[5];
      aBlock[4] = v4;
      dispatch_group_t group = v14;
      if (v14)
      {
        dispatch_retain(v14);
        dispatch_group_enter(group);
      }
      dispatch_group_t v39 = v5;
      if (v5)
      {
        dispatch_retain(v5);
        dispatch_group_enter(v39);
      }
      uint64_t v15 = (std::__shared_weak_count *)a1[7];
      uint64_t v40 = a1[6];
      unint64_t v41 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v16 = _Block_copy(aBlock);
      size_t v17 = *(NSObject **)(v4 + 88);
      if (v17) {
        dispatch_retain(*(dispatch_object_t *)(v4 + 88));
      }
      *(void *)std::string buf = v16;
      *(void *)&uint8_t buf[8] = v17;
      uint64_t v18 = *(void *)(v4 + 416);
      if (v18)
      {
        if (v16) {
          size_t v19 = _Block_copy(v16);
        }
        else {
          size_t v19 = 0;
        }
        char v35 = v19;
        dispatch_object_t object = v17;
        if (v17) {
          dispatch_retain(v17);
        }
        (*(void (**)(uint64_t, void **))(*(void *)v18 + 48))(v18, &v35);
        if (object) {
          dispatch_release(object);
        }
        if (v35) {
          _Block_release(v35);
        }
      }
      if (v17) {
        dispatch_release(v17);
      }
      if (v16) {
        _Block_release(v16);
      }
      if (v41) {
        std::__shared_weak_count::__release_weak(v41);
      }
      if (v39)
      {
        dispatch_group_leave(v39);
        if (v39) {
          dispatch_release(v39);
        }
      }
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
    }
    else if (v13)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1A609F000, v12, OS_LOG_TYPE_DEFAULT, "#I Successfully set active trace mask", buf, 2u);
    }
    goto LABEL_89;
  }
  size_t v9 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 138412290;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_error_impl(&dword_1A609F000, v9, OS_LOG_TYPE_ERROR, "Unable to set active trace mask: %@", buf, 0xCu);
    uint64_t v7 = *a2;
  }
  if (CFErrorGetCode(v7) == 2)
  {
    long long v10 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1A609F000, v10, OS_LOG_TYPE_ERROR, "File access error!", buf, 2u);
    }
    goto LABEL_89;
  }
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v69 = v20;
  long long v68 = v20;
  long long v67 = v20;
  long long v66 = v20;
  long long v65 = v20;
  long long v64 = v20;
  *(_OWORD *)std::string buf = v20;
  uint64_t v21 = (const void *)*MEMORY[0x1E4F4C6E8];
  size_t v22 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v23 = v22;
  if (v22 >= 0x17)
  {
    uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v25 = v22 | 7;
    }
    uint64_t v26 = v25 + 1;
    p_dst = (long long *)operator new(v25 + 1);
    *((void *)&__dst + 1) = v23;
    unint64_t v60 = v26 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_36;
  }
  HIBYTE(v60) = v22;
  p_dst = &__dst;
  if (v22) {
LABEL_36:
  }
    memmove(p_dst, v21, v23);
  *((unsigned char *)p_dst + v23) = 0;
  char v27 = (const void *)*MEMORY[0x1E4F4D038];
  size_t v28 = strlen((const char *)*MEMORY[0x1E4F4D038]);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v29 = v28;
  if (v28 >= 0x17)
  {
    uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v31 = v28 | 7;
    }
    uint64_t v32 = v31 + 1;
    uint64_t v30 = operator new(v31 + 1);
    *((void *)&v57 + 1) = v29;
    unint64_t v58 = v32 | 0x8000000000000000;
    *(void *)&long long v57 = v30;
    goto LABEL_44;
  }
  HIBYTE(v58) = v28;
  uint64_t v30 = &v57;
  if (v28) {
LABEL_44:
  }
    memmove(v30, v27, v29);
  *((unsigned char *)v30 + v29) = 0;
  char v33 = (char *)operator new(0x20uLL);
  long long v55 = v33;
  long long v56 = xmmword_1A61F8040;
  strcpy(v33, "Failed to set trace active mask");
  Timestamp::Timestamp((Timestamp *)v51);
  Timestamp::asString((uint64_t)v51, 0, 9, __p);
  char v50 = 0;
  LOBYTE(v49) = 0;
  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v57, (long long *)&v55, (uint64_t)__p, 7, &v49);
  if (v54 < 0) {
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v51, v52);
  operator delete(v33);
  if (SHIBYTE(v58) < 0) {
    operator delete((void *)v57);
  }
  if (SHIBYTE(v60) < 0) {
    operator delete((void *)__dst);
  }
  ResetInfo::ResetInfo(&v42, (long long *)buf);
  ICETrace::commandResetModem_sync(v4, (long long *)&v42);
  if (v48 < 0)
  {
    operator delete(v47);
    if ((v46 & 0x80000000) == 0)
    {
LABEL_53:
      if ((v44 & 0x80000000) == 0) {
        goto LABEL_54;
      }
      goto LABEL_64;
    }
  }
  else if ((v46 & 0x80000000) == 0)
  {
    goto LABEL_53;
  }
  operator delete(v45);
  if ((v44 & 0x80000000) == 0)
  {
LABEL_54:
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_65;
  }
LABEL_64:
  operator delete(v43);
  if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_55:
    if ((SHIBYTE(v69) & 0x80000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_66;
  }
LABEL_65:
  operator delete(v42.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v69) & 0x80000000) == 0)
  {
LABEL_56:
    if ((SBYTE7(v67) & 0x80000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_67;
  }
LABEL_66:
  operator delete(*((void **)&v68 + 1));
  if ((SBYTE7(v67) & 0x80000000) == 0)
  {
LABEL_57:
    if ((SHIBYTE(v65) & 0x80000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_68;
  }
LABEL_67:
  operator delete((void *)v66);
  if ((SHIBYTE(v65) & 0x80000000) == 0)
  {
LABEL_58:
    if (SBYTE7(v64) < 0) {
      goto LABEL_69;
    }
    goto LABEL_89;
  }
LABEL_68:
  operator delete(*((void **)&v64 + 1));
  if (SBYTE7(v64) < 0) {
LABEL_69:
  }
    operator delete(*(void **)buf);
LABEL_89:
  size_t v34 = v62;
  if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_92:
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A6102E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, dispatch_group_t object, dispatch_group_t group, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8ICETrace24setPropActiveConfig_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke_120(void *a1, uint64_t *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3)
  {
    uint64_t v5 = a1[4];
    int v6 = std::__shared_weak_count::lock(v3);
    char v45 = v6;
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[7])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          size_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          size_t v9 = 0;
        }
        long long v10 = *(NSObject **)(v5 + 40);
        if (v9)
        {
          if (os_log_type_enabled(*(os_log_t *)(v5 + 40), OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 138412290;
            *(void *)&uint8_t buf[4] = v8;
            _os_log_error_impl(&dword_1A609F000, v10, OS_LOG_TYPE_ERROR, "Failed to enable active trace profile: %@", buf, 0xCu);
          }
          *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v51 = v11;
          long long v52 = v11;
          long long v49 = v11;
          long long v50 = v11;
          long long v47 = v11;
          long long v48 = v11;
          *(_OWORD *)std::string buf = v11;
          size_t v12 = (const void *)*MEMORY[0x1E4F4C6E8];
          size_t v13 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
          if (v13 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v14 = v13;
          if (v13 >= 0x17)
          {
            uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v13 | 7) != 0x17) {
              uint64_t v16 = v13 | 7;
            }
            uint64_t v17 = v16 + 1;
            p_dst = (long long *)operator new(v16 + 1);
            *((void *)&__dst + 1) = v14;
            unint64_t v43 = v17 | 0x8000000000000000;
            *(void *)&long long __dst = p_dst;
          }
          else
          {
            HIBYTE(v43) = v13;
            p_dst = &__dst;
            if (!v13)
            {
LABEL_20:
              *((unsigned char *)p_dst + v14) = 0;
              uint64_t v18 = (const void *)*MEMORY[0x1E4F4D038];
              size_t v19 = strlen((const char *)*MEMORY[0x1E4F4D038]);
              if (v19 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              size_t v20 = v19;
              if (v19 >= 0x17)
              {
                uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v19 | 7) != 0x17) {
                  uint64_t v22 = v19 | 7;
                }
                uint64_t v23 = v22 + 1;
                uint64_t v21 = operator new(v22 + 1);
                *((void *)&v40 + 1) = v20;
                unint64_t v41 = v23 | 0x8000000000000000;
                *(void *)&long long v40 = v21;
              }
              else
              {
                HIBYTE(v41) = v19;
                uint64_t v21 = &v40;
                if (!v19)
                {
LABEL_28:
                  v21[v20] = 0;
                  size_t v24 = (char *)operator new(0x28uLL);
                  char v38 = v24;
                  long long v39 = xmmword_1A61F8010;
                  strcpy(v24, "Failed to enable active trace profile");
                  Timestamp::Timestamp((Timestamp *)v34);
                  Timestamp::asString((uint64_t)v34, 0, 9, __p);
                  char v33 = 0;
                  LOBYTE(v32) = 0;
                  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v40, (long long *)&v38, (uint64_t)__p, 7, &v32);
                  if (v37 < 0) {
                    operator delete(__p[0]);
                  }
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v34, v35);
                  operator delete(v24);
                  if (SHIBYTE(v41) < 0) {
                    operator delete((void *)v40);
                  }
                  if (SHIBYTE(v43) < 0) {
                    operator delete((void *)__dst);
                  }
                  ResetInfo::ResetInfo(&v25, (long long *)buf);
                  ICETrace::commandResetModem_sync(v5, (long long *)&v25);
                  if (v31 < 0)
                  {
                    operator delete(v30);
                    if ((v29 & 0x80000000) == 0)
                    {
LABEL_36:
                      if ((v27 & 0x80000000) == 0) {
                        goto LABEL_37;
                      }
                      goto LABEL_46;
                    }
                  }
                  else if ((v29 & 0x80000000) == 0)
                  {
                    goto LABEL_36;
                  }
                  operator delete(v28);
                  if ((v27 & 0x80000000) == 0)
                  {
LABEL_37:
                    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                      goto LABEL_38;
                    }
                    goto LABEL_47;
                  }
LABEL_46:
                  operator delete(v26);
                  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_38:
                    if ((SHIBYTE(v52) & 0x80000000) == 0) {
                      goto LABEL_39;
                    }
                    goto LABEL_48;
                  }
LABEL_47:
                  operator delete(v25.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v52) & 0x80000000) == 0)
                  {
LABEL_39:
                    if ((SBYTE7(v50) & 0x80000000) == 0) {
                      goto LABEL_40;
                    }
                    goto LABEL_49;
                  }
LABEL_48:
                  operator delete(*((void **)&v51 + 1));
                  if ((SBYTE7(v50) & 0x80000000) == 0)
                  {
LABEL_40:
                    if ((SHIBYTE(v48) & 0x80000000) == 0) {
                      goto LABEL_41;
                    }
                    goto LABEL_50;
                  }
LABEL_49:
                  operator delete((void *)v49);
                  if ((SHIBYTE(v48) & 0x80000000) == 0)
                  {
LABEL_41:
                    if ((SBYTE7(v47) & 0x80000000) == 0) {
                      goto LABEL_42;
                    }
                    goto LABEL_51;
                  }
LABEL_50:
                  operator delete(*((void **)&v47 + 1));
                  if ((SBYTE7(v47) & 0x80000000) == 0)
                  {
LABEL_42:
                    uint64_t v7 = v45;
                    if (!v45) {
                      return;
                    }
                    goto LABEL_52;
                  }
LABEL_51:
                  operator delete(*(void **)buf);
                  uint64_t v7 = v45;
                  if (!v45) {
                    return;
                  }
                  goto LABEL_52;
                }
              }
              memmove(v21, v18, v20);
              goto LABEL_28;
            }
          }
          memmove(p_dst, v12, v14);
          goto LABEL_20;
        }
        if (os_log_type_enabled(*(os_log_t *)(v5 + 40), OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_1A609F000, v10, OS_LOG_TYPE_DEFAULT, "#I Successfully enabled active trace mask", buf, 2u);
        }
      }
LABEL_52:
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1A6103380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  ResetInfo::~ResetInfo(&a9);
  ResetInfo::~ResetInfo((void **)(v9 - 192));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v9 - 208);
  _Unwind_Resume(a1);
}

void sub_1A61033AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a26, a27);
  operator delete(v49);
  if (a43 < 0)
  {
    operator delete(a38);
    if ((a49 & 0x80000000) == 0)
    {
LABEL_5:
      std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v50 - 208);
      _Unwind_Resume(a1);
    }
  }
  else if ((a49 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a44);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v50 - 208);
  _Unwind_Resume(a1);
}

void sub_1A6103444(_Unwind_Exception *a1)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 208);
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace23setPropSleepConfig_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke(void *a1, __CFError **a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[4];
  uint64_t v5 = *(NSObject **)(v4 + 144);
  if (v5)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 144));
    dispatch_group_enter(v5);
  }
  uint64_t v45 = 0;
  char v46 = 0;
  int v6 = (std::__shared_weak_count *)a1[7];
  if (!v6) {
    goto LABEL_49;
  }
  char v46 = std::__shared_weak_count::lock(v6);
  if (!v46) {
    goto LABEL_52;
  }
  uint64_t v45 = a1[6];
  if (!v45) {
    goto LABEL_49;
  }
  uint64_t v7 = *a2;
  if (*a2) {
    uint64_t v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(NSObject **)(v4 + 40);
  if (v8)
  {
    if (os_log_type_enabled(*(os_log_t *)(v4 + 40), OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138412290;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_error_impl(&dword_1A609F000, v9, OS_LOG_TYPE_ERROR, "Unable to set sleep trace mask: %@", buf, 0xCu);
      uint64_t v7 = *a2;
    }
    if (CFErrorGetCode(v7) == 2)
    {
      long long v10 = *(NSObject **)(v4 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_error_impl(&dword_1A609F000, v10, OS_LOG_TYPE_ERROR, "File access error!", buf, 2u);
        long long v11 = v46;
        goto LABEL_50;
      }
LABEL_49:
      long long v11 = v46;
      if (!v46) {
        goto LABEL_52;
      }
      goto LABEL_50;
    }
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v52 = v12;
    long long v53 = v12;
    long long v50 = v12;
    long long v51 = v12;
    long long v48 = v12;
    long long v49 = v12;
    *(_OWORD *)std::string buf = v12;
    size_t v13 = (const void *)*MEMORY[0x1E4F4C6E8];
    size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
    if (v14 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v15 = v14;
    if (v14 >= 0x17)
    {
      uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v17 = v14 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_dst = (long long *)operator new(v17 + 1);
      *((void *)&__dst + 1) = v15;
      unint64_t v44 = v18 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v44) = v14;
      p_dst = &__dst;
      if (!v14)
      {
LABEL_27:
        *((unsigned char *)p_dst + v15) = 0;
        size_t v19 = (const void *)*MEMORY[0x1E4F4D038];
        size_t v20 = strlen((const char *)*MEMORY[0x1E4F4D038]);
        if (v20 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v21 = v20;
        if (v20 >= 0x17)
        {
          uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17) {
            uint64_t v23 = v20 | 7;
          }
          uint64_t v24 = v23 + 1;
          uint64_t v22 = operator new(v23 + 1);
          *((void *)&v41 + 1) = v21;
          unint64_t v42 = v24 | 0x8000000000000000;
          *(void *)&long long v41 = v22;
        }
        else
        {
          HIBYTE(v42) = v20;
          uint64_t v22 = &v41;
          if (!v20)
          {
LABEL_35:
            v22[v21] = 0;
            std::string v25 = (char *)operator new(0x20uLL);
            long long v39 = v25;
            long long v40 = xmmword_1A61F7FE0;
            strcpy(v25, "Failed to set trace sleep mask");
            Timestamp::Timestamp((Timestamp *)v35);
            Timestamp::asString((uint64_t)v35, 0, 9, __p);
            char v34 = 0;
            LOBYTE(v33) = 0;
            ResetInfo::ResetInfo((std::string *)buf, &__dst, &v41, (long long *)&v39, (uint64_t)__p, 7, &v33);
            if (v38 < 0) {
              operator delete(__p[0]);
            }
            std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v35, v36);
            operator delete(v25);
            if (SHIBYTE(v42) < 0) {
              operator delete((void *)v41);
            }
            if (SHIBYTE(v44) < 0) {
              operator delete((void *)__dst);
            }
            ResetInfo::ResetInfo(&v26, (long long *)buf);
            ICETrace::commandResetModem_sync(v4, (long long *)&v26);
            if (v32 < 0)
            {
              operator delete(v31);
              if ((v30 & 0x80000000) == 0)
              {
LABEL_43:
                if ((v28 & 0x80000000) == 0) {
                  goto LABEL_44;
                }
                goto LABEL_57;
              }
            }
            else if ((v30 & 0x80000000) == 0)
            {
              goto LABEL_43;
            }
            operator delete(v29);
            if ((v28 & 0x80000000) == 0)
            {
LABEL_44:
              if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_45;
              }
              goto LABEL_58;
            }
LABEL_57:
            operator delete(v27);
            if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_45:
              if ((SHIBYTE(v53) & 0x80000000) == 0) {
                goto LABEL_46;
              }
              goto LABEL_59;
            }
LABEL_58:
            operator delete(v26.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v53) & 0x80000000) == 0)
            {
LABEL_46:
              if ((SBYTE7(v51) & 0x80000000) == 0) {
                goto LABEL_47;
              }
              goto LABEL_60;
            }
LABEL_59:
            operator delete(*((void **)&v52 + 1));
            if ((SBYTE7(v51) & 0x80000000) == 0)
            {
LABEL_47:
              if ((SHIBYTE(v49) & 0x80000000) == 0) {
                goto LABEL_48;
              }
              goto LABEL_61;
            }
LABEL_60:
            operator delete((void *)v50);
            if ((SHIBYTE(v49) & 0x80000000) == 0)
            {
LABEL_48:
              if ((SBYTE7(v48) & 0x80000000) == 0) {
                goto LABEL_49;
              }
              goto LABEL_62;
            }
LABEL_61:
            operator delete(*((void **)&v48 + 1));
            if ((SBYTE7(v48) & 0x80000000) == 0) {
              goto LABEL_49;
            }
LABEL_62:
            operator delete(*(void **)buf);
            long long v11 = v46;
            if (!v46) {
              goto LABEL_52;
            }
            goto LABEL_50;
          }
        }
        memmove(v22, v19, v21);
        goto LABEL_35;
      }
    }
    memmove(p_dst, v13, v15);
    goto LABEL_27;
  }
  if (!os_log_type_enabled(*(os_log_t *)(v4 + 40), OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_49;
  }
  *(_WORD *)std::string buf = 0;
  _os_log_impl(&dword_1A609F000, v9, OS_LOG_TYPE_DEFAULT, "#I Successfully set sleep trace mask", buf, 2u);
  long long v11 = v46;
LABEL_50:
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_52:
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A6103944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  ResetInfo::~ResetInfo((void **)&a9);
  ResetInfo::~ResetInfo((void **)(v50 - 208));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v50 - 224);
  if (!v49) {
    _Unwind_Resume(a1);
  }
  dispatch_group_leave(v49);
  dispatch_release(v49);
  _Unwind_Resume(a1);
}

BOOL ICETrace::watermarkIsValid_sync(ICETrace *this, unsigned int a2)
{
  return a2 < 0x65;
}

void ___ZN8ICETrace15processETB_syncEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[4];
  uint64_t v5 = *(NSObject **)(v4 + 144);
  if (v5)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 144));
    dispatch_group_enter(v5);
  }
  int v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    char v46 = v7;
    if (v7)
    {
      uint64_t v8 = v7;
      if (a1[5])
      {
        uint64_t v9 = *a2;
        if (*a2) {
          long long v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          long long v10 = 0;
        }
        long long v11 = *(NSObject **)(v4 + 40);
        if (v10)
        {
          if (os_log_type_enabled(*(os_log_t *)(v4 + 40), OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 138412290;
            *(void *)&uint8_t buf[4] = v9;
            _os_log_error_impl(&dword_1A609F000, v11, OS_LOG_TYPE_ERROR, "Unable to set etb trace mask: %@", buf, 0xCu);
          }
          *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v52 = v12;
          long long v53 = v12;
          long long v50 = v12;
          long long v51 = v12;
          long long v48 = v12;
          long long v49 = v12;
          *(_OWORD *)std::string buf = v12;
          size_t v13 = (const void *)*MEMORY[0x1E4F4C6E8];
          size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
          if (v14 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v15 = v14;
          if (v14 >= 0x17)
          {
            uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17) {
              uint64_t v17 = v14 | 7;
            }
            uint64_t v18 = v17 + 1;
            p_dst = (long long *)operator new(v17 + 1);
            *((void *)&__dst + 1) = v15;
            unint64_t v44 = v18 | 0x8000000000000000;
            *(void *)&long long __dst = p_dst;
          }
          else
          {
            HIBYTE(v44) = v14;
            p_dst = &__dst;
            if (!v14)
            {
LABEL_22:
              *((unsigned char *)p_dst + v15) = 0;
              size_t v19 = (const void *)*MEMORY[0x1E4F4D038];
              size_t v20 = strlen((const char *)*MEMORY[0x1E4F4D038]);
              if (v20 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              size_t v21 = v20;
              if (v20 >= 0x17)
              {
                uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v20 | 7) != 0x17) {
                  uint64_t v23 = v20 | 7;
                }
                uint64_t v24 = v23 + 1;
                uint64_t v22 = operator new(v23 + 1);
                *((void *)&v41 + 1) = v21;
                unint64_t v42 = v24 | 0x8000000000000000;
                *(void *)&long long v41 = v22;
              }
              else
              {
                HIBYTE(v42) = v20;
                uint64_t v22 = &v41;
                if (!v20)
                {
LABEL_30:
                  v22[v21] = 0;
                  std::string v25 = (char *)operator new(0x20uLL);
                  long long v39 = v25;
                  long long v40 = xmmword_1A61F7580;
                  strcpy(v25, "Failed to set trace etb mask");
                  Timestamp::Timestamp((Timestamp *)v35);
                  Timestamp::asString((uint64_t)v35, 0, 9, __p);
                  char v34 = 0;
                  LOBYTE(v33) = 0;
                  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v41, (long long *)&v39, (uint64_t)__p, 7, &v33);
                  if (v38 < 0) {
                    operator delete(__p[0]);
                  }
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v35, v36);
                  operator delete(v25);
                  if (SHIBYTE(v42) < 0) {
                    operator delete((void *)v41);
                  }
                  if (SHIBYTE(v44) < 0) {
                    operator delete((void *)__dst);
                  }
                  ResetInfo::ResetInfo(&v26, (long long *)buf);
                  ICETrace::commandResetModem_sync(v4, (long long *)&v26);
                  if (v32 < 0)
                  {
                    operator delete(v31);
                    if ((v30 & 0x80000000) == 0)
                    {
LABEL_38:
                      if ((v28 & 0x80000000) == 0) {
                        goto LABEL_39;
                      }
                      goto LABEL_48;
                    }
                  }
                  else if ((v30 & 0x80000000) == 0)
                  {
                    goto LABEL_38;
                  }
                  operator delete(v29);
                  if ((v28 & 0x80000000) == 0)
                  {
LABEL_39:
                    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                      goto LABEL_40;
                    }
                    goto LABEL_49;
                  }
LABEL_48:
                  operator delete(v27);
                  if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_40:
                    if ((SHIBYTE(v53) & 0x80000000) == 0) {
                      goto LABEL_41;
                    }
                    goto LABEL_50;
                  }
LABEL_49:
                  operator delete(v26.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v53) & 0x80000000) == 0)
                  {
LABEL_41:
                    if ((SBYTE7(v51) & 0x80000000) == 0) {
                      goto LABEL_42;
                    }
                    goto LABEL_51;
                  }
LABEL_50:
                  operator delete(*((void **)&v52 + 1));
                  if ((SBYTE7(v51) & 0x80000000) == 0)
                  {
LABEL_42:
                    if ((SHIBYTE(v49) & 0x80000000) == 0) {
                      goto LABEL_43;
                    }
                    goto LABEL_52;
                  }
LABEL_51:
                  operator delete((void *)v50);
                  if ((SHIBYTE(v49) & 0x80000000) == 0)
                  {
LABEL_43:
                    if ((SBYTE7(v48) & 0x80000000) == 0) {
                      goto LABEL_44;
                    }
LABEL_53:
                    operator delete(*(void **)buf);
                    uint64_t v8 = v46;
                    if (!v46) {
                      goto LABEL_56;
                    }
                    goto LABEL_54;
                  }
LABEL_52:
                  operator delete(*((void **)&v48 + 1));
                  if ((SBYTE7(v48) & 0x80000000) == 0)
                  {
LABEL_44:
                    uint64_t v8 = v46;
                    if (!v46) {
                      goto LABEL_56;
                    }
                    goto LABEL_54;
                  }
                  goto LABEL_53;
                }
              }
              memmove(v22, v19, v21);
              goto LABEL_30;
            }
          }
          memmove(p_dst, v13, v15);
          goto LABEL_22;
        }
        if (os_log_type_enabled(*(os_log_t *)(v4 + 40), OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_1A609F000, v11, OS_LOG_TYPE_DEFAULT, "#I Successfully set etb trace mask.", buf, 2u);
        }
      }
LABEL_54:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
LABEL_56:
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A6103ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  ResetInfo::~ResetInfo((void **)&a9);
  ResetInfo::~ResetInfo((void **)(v50 - 208));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v50 - 224);
  if (!v49) {
    _Unwind_Resume(a1);
  }
  dispatch_group_leave(v49);
  dispatch_release(v49);
  _Unwind_Resume(a1);
}

void *trace::TraceMaskInfo::TraceMaskInfo(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  *a1 = &unk_1EFB0AC10;
  a1[2] = 0;
  a1[3] = 0;
  int v6 = *(const void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  size_t v7 = v5 - *(void *)a2;
  if (v5 != *(void *)a2)
  {
    if ((v7 & 0x8000000000000000) != 0) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - *(void *)a2);
    a1[1] = v8;
    a1[2] = v8;
    uint64_t v9 = &v8[v7];
    a1[3] = &v8[v7];
    memcpy(v8, v6, v7);
    a1[2] = v9;
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  long long v10 = *(const void **)a3;
  size_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (v11)
  {
    if ((v11 & 0x8000000000000000) != 0) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    long long v12 = (char *)operator new(v11);
    a1[4] = v12;
    a1[5] = v12;
    size_t v13 = &v12[v11];
    a1[6] = &v12[v11];
    memcpy(v12, v10, v11);
    a1[5] = v13;
  }
  return a1;
}

void sub_1A61040B0(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
  }
  int v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(void *result, char *__src, char *a3, unint64_t a4)
{
  size_t v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *size_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      goto LABEL_22;
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    size_t v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0) {
LABEL_22:
    }
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    CFTypeRef result = operator new(v11);
    uint64_t v9 = (char *)result;
    *size_t v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    size_t v12 = a3 - __src;
    if (v12) {
      CFTypeRef result = memcpy(result, __src, v12);
    }
LABEL_21:
    v7[1] = &v9[v12];
    return result;
  }
  size_t v13 = (unsigned char *)result[1];
  size_t v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    size_t v12 = a3 - __src;
    if (v12) {
      CFTypeRef result = memmove((void *)*result, __src, v12);
    }
    goto LABEL_21;
  }
  size_t v15 = &__src[v14];
  if (v13 != v9)
  {
    CFTypeRef result = memmove((void *)*result, __src, v14);
    uint64_t v9 = (char *)v7[1];
  }
  if (a3 != v15) {
    CFTypeRef result = memmove(v9, v15, a3 - v15);
  }
  v7[1] = &v9[a3 - v15];
  return result;
}

void *std::shared_ptr<ICETrace>::shared_ptr[abi:ne180100]<ICETrace,std::shared_ptr<ICETrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<ICETrace>(ICETrace*)::{lambda(ICETrace*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0AC38;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  int v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1A610434C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<ICETrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<ICETrace>(ICETrace*)::{lambda(ICETrace*)#1}::operator() const(ICETrace*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1A6104374(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<ICETrace *,std::shared_ptr<ICETrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<ICETrace>(ICETrace*)::{lambda(ICETrace *)#1},std::allocator<ICETrace>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ICETrace *,std::shared_ptr<ICETrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<ICETrace>(ICETrace*)::{lambda(ICETrace *)#1},std::allocator<ICETrace>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ICETrace *,std::shared_ptr<ICETrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<ICETrace>(ICETrace*)::{lambda(ICETrace *)#1},std::allocator<ICETrace>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI8ICETraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI8ICETraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI8ICETraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI8ICETraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<ICETrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<ICETrace>(ICETrace*)::{lambda(ICETrace*)#1}::operator() const(ICETrace*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_0(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<ICETrace::init(std::string,std::weak_ptr<abm::BasebandTracingTask>,dispatch::group)::$_0>(ICETrace::init(std::string,std::weak_ptr<abm::BasebandTracingTask>,dispatch::group)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ICETrace::init(std::string,std::weak_ptr<abm::BasebandTracingTask>,dispatch::group)::$_0,std::default_delete<ICETrace::init(std::string,std::weak_ptr<abm::BasebandTracingTask>,dispatch::group)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = abm::trace::kScratchFolder[0];
  size_t v5 = strlen(abm::trace::kScratchFolder[0]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v6;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
    p_dst = &__dst;
    if (!v5) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v4, v6);
LABEL_9:
  p_dst->__r_.__value_.__s.__data_[v6] = 0;
  uint64_t v10 = std::string::append(&__dst, "BBTrace.scratch/", 0x10uLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  std::string::size_type v18 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  abm::trace::TraceInfo::create();
  long long v12 = v19;
  long long v19 = 0uLL;
  size_t v13 = *(std::__shared_weak_count **)(v3 + 488);
  *(_OWORD *)(v3 + 480) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  size_t v14 = (std::__shared_weak_count *)*((void *)&v19 + 1);
  if (*((void *)&v19 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_16;
      }
LABEL_20:
      operator delete(__dst.__r_.__value_.__l.__data_);
      operator delete(v2);
      size_t v15 = (std::__shared_weak_count *)a1[2];
      if (!v15) {
        goto LABEL_23;
      }
      goto LABEL_21;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
LABEL_16:
  operator delete(v2);
  size_t v15 = (std::__shared_weak_count *)a1[2];
  if (!v15) {
    goto LABEL_23;
  }
LABEL_21:
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_23:
  operator delete(a1);
}

void sub_1A61046C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v22);
      uint64_t v24 = (std::__shared_weak_count *)v21[2];
      if (!v24) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  operator delete(v22);
  uint64_t v24 = (std::__shared_weak_count *)v21[2];
  if (!v24) {
    goto LABEL_9;
  }
LABEL_7:
  if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_9:
  operator delete(v21);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEclIJS5_S7_EEEvDpT__block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (const void *)a1[5];
  CFTypeRef cf = v2;
  if (v2) {
    CFRetain(v2);
  }
  uint64_t v4 = (void *)a1[6];
  xpc_object_t object = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, CFTypeRef *, xpc_object_t *))(v3 + 16))(v3, &cf, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1A6104820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c87_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c15_ZTSN3xpc4dictE(void *a1, void *a2)
{
  uint64_t v4 = (const void *)a2[4];
  if (!v4)
  {
    std::string::size_type v6 = (const void *)a2[5];
    a1[4] = 0;
    a1[5] = v6;
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  size_t v5 = _Block_copy(v4);
  std::string::size_type v6 = (const void *)a2[5];
  a1[4] = v5;
  a1[5] = v6;
  if (v6) {
LABEL_5:
  }
    CFRetain(v6);
LABEL_6:
  size_t v7 = (void *)a2[6];
  a1[6] = v7;
  if (v7) {
    return xpc_retain(v7);
  }
  xpc_object_t result = xpc_null_create();
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c87_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    _Block_release(v3);
  }
}

void ctu::SharedSynchronizable<Trace>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  uint64_t block[3] = &unk_1EFB0ACB0;
  void block[5] = v5;
  long long v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI5TraceE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t __cxx_global_var_init_144()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1A609F000);
  }
  return result;
}

void *abm::SystemLogsTask::getName(abm::SystemLogsTask *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_7, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&_MergedGlobals_7))
  {
    return qword_1EB5EE8E0;
  }
  unsigned int v3 = *((_DWORD *)this + 26) - 1;
  if (v3 > 9) {
    uint64_t v4 = "invalid";
  }
  else {
    uint64_t v4 = off_1E5C47100[v3];
  }
  std::string::basic_string[abi:ne180100]<0>(qword_1EB5EE8E0, v4);
  __cxa_atexit(MEMORY[0x1E4FBA210], qword_1EB5EE8E0, &dword_1A609F000);
  __cxa_guard_release(&_MergedGlobals_7);
  return qword_1EB5EE8E0;
}

void sub_1A6104C70(_Unwind_Exception *a1)
{
}

uint64_t abm::SystemLogsTask::SystemLogsTask(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v12 = *a3;
  size_t v13 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v6 = (std::__shared_weak_count *)a4[1];
  uint64_t v10 = *a4;
  long long v11 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  abm::HelperTask::HelperTask(a1, a2, &v12, &v10);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  size_t v7 = v13;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)a1 = &unk_1EFB0ACF0;
  uint64_t v8 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  *(void *)(a1 + 136) = dispatch_queue_create("systemlogs.task.queue", v8);
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  return a1;
}

void sub_1A6104D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void abm::SystemLogsTask::init_sync(abm::SystemLogsTask *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    std::string::size_type v6 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v6) {
      goto LABEL_43;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    std::string::size_type v6 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v6) {
      goto LABEL_43;
    }
  }
  size_t v7 = std::__shared_weak_count::lock(v6);
  unint64_t v43 = v7;
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *((void *)this + 15);
    uint64_t v42 = v9;
    if (v9)
    {
      uint64_t v10 = (char *)operator new(0x20uLL);
      long long v40 = v10;
      long long v41 = xmmword_1A61F7570;
      strcpy(v10, "CommandOsLogArchiveSnapshot");
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3321888768;
      aBlock[2] = ___ZN3abm14SystemLogsTask9init_syncEv_block_invoke;
      aBlock[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE_e242_v48__0_ServerClientState__shared_ptr_TelephonyXPC::ServerClientState::State____State_____shared_weak_count___8_dict__object__v__24_callback_void_____int__xpc::dict____block_void_____int__xpc::dict_______queue__object___dispatch_object_s____32l;
      aBlock[4] = this;
      void aBlock[5] = v3;
      char v38 = v5;
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      long long v11 = _Block_copy(aBlock);
      uint64_t v12 = *((void *)this + 11);
      if (v12) {
        dispatch_retain(*((dispatch_object_t *)this + 11));
      }
      v39[0] = v11;
      v39[1] = v12;
      abm::HelperServerInternal::setCommandHandler(v9, (uint64_t)&v40, (uint64_t)v39);
      if (v12) {
        dispatch_release(v12);
      }
      if (v11) {
        _Block_release(v11);
      }
      operator delete(v10);
      size_t v13 = (char *)operator new(0x20uLL);
      char v35 = v13;
      long long v36 = xmmword_1A61F8020;
      strcpy(v13, "CommandSysdiagnoseSnapshot");
      v32[0] = MEMORY[0x1E4F143A8];
      v32[1] = 3321888768;
      void v32[2] = ___ZN3abm14SystemLogsTask9init_syncEv_block_invoke_4;
      v32[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE_e242_v48__0_ServerClientState__shared_ptr_TelephonyXPC::ServerClientState::State____State_____shared_weak_count___8_dict__object__v__24_callback_void_____int__xpc::dict____block_void_____int__xpc::dict_______queue__object___dispatch_object_s____32l;
      v32[4] = this;
      v32[5] = v3;
      long long v33 = v5;
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      size_t v14 = _Block_copy(v32);
      size_t v15 = *((void *)this + 11);
      if (v15) {
        dispatch_retain(*((dispatch_object_t *)this + 11));
      }
      v34[0] = v14;
      v34[1] = v15;
      abm::HelperServerInternal::setCommandHandler(v9, (uint64_t)&v35, (uint64_t)v34);
      if (v15) {
        dispatch_release(v15);
      }
      if (v14) {
        _Block_release(v14);
      }
      operator delete(v13);
      uint64_t v16 = (char *)operator new(0x20uLL);
      char v30 = v16;
      long long v31 = xmmword_1A61F6FD0;
      strcpy(v16, "CommandSysdiagnoseStatus");
      v27[0] = MEMORY[0x1E4F143A8];
      v27[1] = 3321888768;
      void v27[2] = ___ZN3abm14SystemLogsTask9init_syncEv_block_invoke_2;
      v27[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE_e242_v48__0_ServerClientState__shared_ptr_TelephonyXPC::ServerClientState::State____State_____shared_weak_count___8_dict__object__v__24_callback_void_____int__xpc::dict____block_void_____int__xpc::dict_______queue__object___dispatch_object_s____32l;
      v27[4] = this;
      void v27[5] = v3;
      char v28 = v5;
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v17 = _Block_copy(v27);
      std::string::size_type v18 = *((void *)this + 11);
      if (v18) {
        dispatch_retain(*((dispatch_object_t *)this + 11));
      }
      v29[0] = v17;
      v29[1] = v18;
      abm::HelperServerInternal::setCommandHandler(v9, (uint64_t)&v30, (uint64_t)v29);
      if (v18) {
        dispatch_release(v18);
      }
      if (v17) {
        _Block_release(v17);
      }
      operator delete(v16);
      long long v19 = (char *)operator new(0x20uLL);
      std::string v25 = v19;
      long long v26 = xmmword_1A61F7580;
      strcpy(v19, "CommandOsLogProcessingStatus");
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3321888768;
      v22[2] = ___ZN3abm14SystemLogsTask9init_syncEv_block_invoke_6;
      v22[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE_e242_v48__0_ServerClientState__shared_ptr_TelephonyXPC::ServerClientState::State____State_____shared_weak_count___8_dict__object__v__24_callback_void_____int__xpc::dict____block_void_____int__xpc::dict_______queue__object___dispatch_object_s____32l;
      v22[4] = this;
      v22[5] = v3;
      uint64_t v23 = v5;
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      size_t v20 = _Block_copy(v22);
      size_t v21 = *((void *)this + 11);
      if (v21) {
        dispatch_retain(v21);
      }
      v24[0] = v20;
      v24[1] = v21;
      abm::HelperServerInternal::setCommandHandler(v9, (uint64_t)&v25, (uint64_t)v24);
      if (v21) {
        dispatch_release(v21);
      }
      if (v20) {
        _Block_release(v20);
      }
      operator delete(v19);
      if (v23) {
        std::__shared_weak_count::__release_weak(v23);
      }
      if (v28) {
        std::__shared_weak_count::__release_weak(v28);
      }
      if (v33) {
        std::__shared_weak_count::__release_weak(v33);
      }
      if (v38) {
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_43:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1A6105278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,char a41)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(int,xpc::dict)>)>::~callback((uint64_t)&a17);
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  operator delete(v42);
  if (a28)
  {
    std::__shared_weak_count::__release_weak(a28);
    uint64_t v45 = a40;
    if (!a40)
    {
LABEL_5:
      char v46 = *(std::__shared_weak_count **)(v43 - 168);
      if (!v46) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v45 = a40;
    if (!a40) {
      goto LABEL_5;
    }
  }
  std::__shared_weak_count::__release_weak(v45);
  char v46 = *(std::__shared_weak_count **)(v43 - 168);
  if (!v46)
  {
LABEL_6:
    std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v43 - 120);
    std::__shared_weak_count::__release_weak(v41);
    _Unwind_Resume(a1);
  }
LABEL_9:
  std::__shared_weak_count::__release_weak(v46);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v43 - 120);
  std::__shared_weak_count::__release_weak(v41);
  _Unwind_Resume(a1);
}

void sub_1A6105388(_Unwind_Exception *a1)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(int,xpc::dict)>)>::~callback(v3 - 160);
  uint64_t v5 = *(std::__shared_weak_count **)(v3 - 168);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(v2);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v3 - 120);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1A61053C4(_Unwind_Exception *a1)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v2 - 120);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN3abm14SystemLogsTask9init_syncEv_block_invoke(void **a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = std::__shared_weak_count::lock(v5);
    if (v9)
    {
      uint64_t v10 = v9;
      long long v11 = a1[5];
      if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v11) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v10);
        if (!v11) {
          return;
        }
      }
      uint64_t v12 = *((void *)v8 + 14);
      if (v12)
      {
        dispatch_retain(*((dispatch_object_t *)v8 + 14));
        dispatch_group_enter(v12);
      }
      if (MEMORY[0x1A6275E60](*a3) != MEMORY[0x1E4F14590])
      {
        xpc_object_t v13 = xpc_null_create();
        if (*(void *)a4) {
          size_t v14 = _Block_copy(*(const void **)a4);
        }
        else {
          size_t v14 = 0;
        }
        uint64_t v22 = *(NSObject **)(a4 + 8);
        __p[0] = (void *)MEMORY[0x1E4F143A8];
        __p[1] = (void *)3321888768;
        char v35 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
        v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
        if (v14)
        {
          LODWORD(v37.__r_.__value_.__l.__data_) = -534716414;
          v36.__r_.__value_.__l.__size_ = (std::string::size_type)_Block_copy(v14);
          v36.__r_.__value_.__r.__words[2] = (std::string::size_type)v13;
          if (v13)
          {
LABEL_32:
            xpc_retain(v13);
LABEL_35:
            dispatch_async(v22, __p);
            xpc_release((xpc_object_t)v36.__r_.__value_.__r.__words[2]);
            v36.__r_.__value_.__r.__words[2] = 0;
            if (v36.__r_.__value_.__l.__size_) {
              _Block_release((const void *)v36.__r_.__value_.__l.__size_);
            }
            if (v14) {
              _Block_release(v14);
            }
            xpc_release(v13);
            goto LABEL_40;
          }
        }
        else
        {
          LODWORD(v37.__r_.__value_.__l.__data_) = -534716414;
          v36.__r_.__value_.__l.__size_ = 0;
          v36.__r_.__value_.__r.__words[2] = (std::string::size_type)v13;
          if (v13) {
            goto LABEL_32;
          }
        }
        v36.__r_.__value_.__r.__words[2] = (std::string::size_type)xpc_null_create();
        goto LABEL_35;
      }
      v43[4] = (void *)0xAAAAAAAAAAAAAAAALL;
      unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
      size_t v15 = (ctu::XpcJetsamAssertion *)pthread_mutex_lock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
      std::string::size_type v16 = xmmword_1EB5EE590;
      if (!(void)xmmword_1EB5EE590)
      {
        ctu::XpcJetsamAssertion::create_default_global((uint64_t *)__p, v15);
        long long v17 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        std::string::size_type v18 = (std::__shared_weak_count *)*((void *)&xmmword_1EB5EE590 + 1);
        xmmword_1EB5EE590 = v17;
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        long long v19 = (std::__shared_weak_count *)__p[1];
        if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        std::string::size_type v16 = xmmword_1EB5EE590;
      }
      size_t v20 = (std::__shared_weak_count *)*((void *)&xmmword_1EB5EE590 + 1);
      v42[1].__r_.__value_.__r.__words[0] = v16;
      v42[1].__r_.__value_.__l.__size_ = *((void *)&xmmword_1EB5EE590 + 1);
      if (*((void *)&xmmword_1EB5EE590 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1EB5EE590 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
      HIBYTE(v43[2]) = 19;
      strcpy((char *)v43, "logarchive snapshot");
      ctu::XpcJetsamAssertion::createActivity();
      if (SHIBYTE(v43[2]) < 0) {
        operator delete(v43[0]);
      }
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      memset(&v42[1], 170, sizeof(std::string));
      xpc_object_t value = xpc_dictionary_get_value(*a3, "TimestampString");
      v41.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
      if (value) {
        xpc_retain(value);
      }
      else {
        v41.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      Timestamp::Timestamp((Timestamp *)v42);
      Timestamp::asString((uint64_t)v42, 0, 9, __p);
      xpc::dyn_cast_or_default();
      if (SHIBYTE(v35) < 0) {
        operator delete(__p[0]);
      }
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v42, (void *)v42[0].__r_.__value_.__l.__size_);
      xpc_release(v41.__r_.__value_.__l.__data_);
      memset(v42, 170, 24);
      xpc_object_t v23 = xpc_dictionary_get_value(*a3, "History");
      v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
      if (v23) {
        xpc_retain(v23);
      }
      else {
        v41.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      __p[0] = 0;
      __p[1] = 0;
      char v35 = 0;
      xpc::dyn_cast_or_default();
      if (SHIBYTE(v35) < 0) {
        operator delete(__p[0]);
      }
      xpc_release(v41.__r_.__value_.__l.__data_);
      memset(&v41, 170, sizeof(v41));
      xpc_object_t v24 = xpc_dictionary_get_value(*a3, "LogPath");
      __p[0] = v24;
      if (v24) {
        xpc_retain(v24);
      }
      else {
        __p[0] = xpc_null_create();
      }
      xpc::dyn_cast_or_default();
      xpc_release(__p[0]);
      std::string v25 = (atomic_ullong *)a1[6];
      __p[0] = a1[5];
      __p[1] = v25;
      if (v25) {
        atomic_fetch_add_explicit(v25 + 2, 1uLL, memory_order_relaxed);
      }
      char v35 = (void (*)(uint64_t))v8;
      if (SHIBYTE(v42[1].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v36, v42[1].__r_.__value_.__l.__data_, v42[1].__r_.__value_.__l.__size_);
      }
      else {
        std::string v36 = v42[1];
      }
      if (SHIBYTE(v42[0].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v37, v42[0].__r_.__value_.__l.__data_, v42[0].__r_.__value_.__l.__size_);
      }
      else {
        std::string v37 = v42[0];
      }
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v38, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
      }
      else {
        std::string v38 = v41;
      }
      group[0] = v12;
      if (v12)
      {
        dispatch_retain(v12);
        if (group[0]) {
          dispatch_group_enter(group[0]);
        }
      }
      long long v26 = *(NSObject **)a4;
      if (*(void *)a4) {
        long long v26 = _Block_copy(v26);
      }
      char v27 = *(NSObject **)(a4 + 8);
      group[1] = v26;
      long long v40 = v27;
      if (v27) {
        dispatch_retain(v27);
      }
      char v28 = *((void *)v8 + 17);
      char v29 = (std::string *)operator new(0x78uLL);
      char v30 = v29;
      long long v31 = (atomic_ullong *)__p[1];
      v29->__r_.__value_.__l.__data_ = (std::string::pointer)__p[0];
      v29->__r_.__value_.__l.__size_ = (std::string::size_type)v31;
      if (v31) {
        atomic_fetch_add_explicit(v31 + 2, 1uLL, memory_order_relaxed);
      }
      v29->__r_.__value_.__r.__words[2] = (std::string::size_type)v35;
      char v32 = v29 + 1;
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v32, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v32->__r_.__value_.__l.__data_ = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
        v30[1].__r_.__value_.__r.__words[2] = v36.__r_.__value_.__r.__words[2];
      }
      void v30[2] = v37;
      memset(&v37, 0, sizeof(v37));
      v30[3] = v38;
      memset(&v38, 0, sizeof(v38));
      *(_OWORD *)&v30[4].__r_.__value_.__l.__data_ = *(_OWORD *)group;
      group[0] = 0;
      group[1] = 0;
      v30[4].__r_.__value_.__r.__words[2] = (std::string::size_type)v40;
      long long v40 = 0;
      dispatch_async_f(v28, v30, (dispatch_function_t)_ZZN8dispatch5asyncIZZN3abm14SystemLogsTask9init_syncEvEUb_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS6_14default_deleteIS8_EEEEENUlPvE_8__invokeESC_);
      _ZZZN3abm14SystemLogsTask9init_syncEvEUb_EN3__1D1Ev((uint64_t)__p);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v41.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v42[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_79:
          if ((SHIBYTE(v42[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_80;
          }
          goto LABEL_84;
        }
      }
      else if ((SHIBYTE(v42[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_79;
      }
      operator delete(v42[0].__r_.__value_.__l.__data_);
      if ((SHIBYTE(v42[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_80:
        long long v33 = (std::__shared_weak_count *)v44;
        if (!v44)
        {
LABEL_40:
          if (v12)
          {
            dispatch_group_leave(v12);
            dispatch_release(v12);
          }
          return;
        }
LABEL_85:
        if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        goto LABEL_40;
      }
LABEL_84:
      operator delete(v42[1].__r_.__value_.__l.__data_);
      long long v33 = (std::__shared_weak_count *)v44;
      if (!v44) {
        goto LABEL_40;
      }
      goto LABEL_85;
    }
  }
}

void sub_1A6105AC4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v43 = *(std::__shared_weak_count **)(v41 + 8);
  if (v43)
  {
    std::__shared_weak_count::__release_weak(v43);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1A6105B8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(a27);
  }
  JUMPOUT(0x1A6105BECLL);
}

void sub_1A6105BC0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,xpc_object_t object)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  if (*(char *)(v27 - 129) < 0) {
    operator delete(*(void **)(v27 - 152));
  }
  JUMPOUT(0x1A6105C48);
}

void sub_1A6105C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,xpc_object_t object,uint64_t a28,uint64_t a29,char a30,void *a31)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a30, a31);
  xpc_release(object);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v32 - 96);
  if (v31)
  {
    dispatch_group_leave(v31);
    dispatch_release(v31);
  }
  _Unwind_Resume(a1);
}

void sub_1A6105C6C()
{
  if (*(char *)(v1 - 105) < 0) {
    operator delete(*(void **)(v1 - 128));
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 152);
  if (!v0) {
    JUMPOUT(0x1A6105C64);
  }
  JUMPOUT(0x1A6105C54);
}

void sub_1A6105C94()
{
  if (!v0) {
    JUMPOUT(0x1A6105C64);
  }
  JUMPOUT(0x1A6105C54);
}

uint64_t _ZZZN3abm14SystemLogsTask9init_syncEvEUb_EN3__1D1Ev(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 112);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 104);
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = *(NSObject **)(a1 + 96);
  if (v4)
  {
    dispatch_group_leave(v4);
    uint64_t v5 = *(NSObject **)(a1 + 96);
    if (v5) {
      dispatch_release(v5);
    }
  }
  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_10:
      if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
        goto LABEL_11;
      }
LABEL_16:
      operator delete(*(void **)(a1 + 24));
      std::string::size_type v6 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v6) {
        return a1;
      }
      goto LABEL_12;
    }
  }
  else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_16;
  }
LABEL_11:
  std::string::size_type v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6) {
LABEL_12:
  }
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void ___ZN3abm14SystemLogsTask9init_syncEv_block_invoke_4(void **a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = std::__shared_weak_count::lock(v5);
    if (v9)
    {
      uint64_t v10 = v9;
      long long v11 = a1[5];
      if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v11) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v10);
        if (!v11) {
          return;
        }
      }
      uint64_t v12 = *((void *)v8 + 14);
      if (v12)
      {
        dispatch_retain(*((dispatch_object_t *)v8 + 14));
        dispatch_group_enter(v12);
      }
      if (MEMORY[0x1A6275E60](*a3) != MEMORY[0x1E4F14590])
      {
        xpc_object_t v13 = xpc_null_create();
        if (*(void *)a4) {
          size_t v14 = _Block_copy(*(const void **)a4);
        }
        else {
          size_t v14 = 0;
        }
        uint64_t v22 = *(NSObject **)(a4 + 8);
        __p[0] = (void *)MEMORY[0x1E4F143A8];
        __p[1] = (void *)3321888768;
        *(void *)&long long v39 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
        *((void *)&v39 + 1) = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
        if (v14)
        {
          LODWORD(aBlock.__r_.__value_.__r.__words[2]) = -534716414;
          aBlock.__r_.__value_.__r.__words[0] = (std::string::size_type)_Block_copy(v14);
          aBlock.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
          if (v13)
          {
LABEL_32:
            xpc_retain(v13);
LABEL_35:
            dispatch_async(v22, __p);
            xpc_release((xpc_object_t)aBlock.__r_.__value_.__l.__size_);
            aBlock.__r_.__value_.__l.__size_ = 0;
            if (aBlock.__r_.__value_.__r.__words[0]) {
              _Block_release(aBlock.__r_.__value_.__l.__data_);
            }
            if (v14) {
              _Block_release(v14);
            }
            xpc_release(v13);
            goto LABEL_40;
          }
        }
        else
        {
          LODWORD(aBlock.__r_.__value_.__r.__words[2]) = -534716414;
          aBlock.__r_.__value_.__r.__words[0] = 0;
          aBlock.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
          if (v13) {
            goto LABEL_32;
          }
        }
        aBlock.__r_.__value_.__l.__size_ = (std::string::size_type)xpc_null_create();
        goto LABEL_35;
      }
      v49[4] = (void *)0xAAAAAAAAAAAAAAAALL;
      unint64_t v50 = 0xAAAAAAAAAAAAAAAALL;
      size_t v15 = (ctu::XpcJetsamAssertion *)pthread_mutex_lock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
      std::string::size_type v16 = (void *)xmmword_1EB5EE590;
      if (!(void)xmmword_1EB5EE590)
      {
        ctu::XpcJetsamAssertion::create_default_global((uint64_t *)__p, v15);
        long long v17 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        std::string::size_type v18 = (std::__shared_weak_count *)*((void *)&xmmword_1EB5EE590 + 1);
        xmmword_1EB5EE590 = v17;
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        long long v19 = (std::__shared_weak_count *)__p[1];
        if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        std::string::size_type v16 = (void *)xmmword_1EB5EE590;
      }
      size_t v20 = (std::__shared_weak_count *)*((void *)&xmmword_1EB5EE590 + 1);
      v48[3] = v16;
      v48[4] = *((void **)&xmmword_1EB5EE590 + 1);
      if (*((void *)&xmmword_1EB5EE590 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1EB5EE590 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
      HIBYTE(v49[2]) = 20;
      strcpy((char *)v49, "sysdiagnose snapshot");
      ctu::XpcJetsamAssertion::createActivity();
      if (SHIBYTE(v49[2]) < 0) {
        operator delete(v49[0]);
      }
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      memset(&v48[3], 170, 24);
      xpc_object_t value = xpc_dictionary_get_value(*a3, "TimestampString");
      v47.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
      if (value) {
        xpc_retain(value);
      }
      else {
        v47.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      Timestamp::Timestamp((Timestamp *)v48);
      Timestamp::asString(v23, 0, 9, __p);
      xpc::dyn_cast_or_default();
      if (SBYTE7(v39) < 0) {
        operator delete(__p[0]);
      }
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v48, (void *)v48[1]);
      xpc_release(v47.__r_.__value_.__l.__data_);
      memset(v48, 170, 24);
      xpc_object_t v24 = xpc_dictionary_get_value(*a3, "DumpStateReason");
      v47.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
      if (v24) {
        xpc_retain(v24);
      }
      else {
        v47.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&long long v39 = 0;
      xpc::dyn_cast_or_default();
      if (SBYTE7(v39) < 0) {
        operator delete(__p[0]);
      }
      xpc_release(v47.__r_.__value_.__l.__data_);
      memset(&v47, 170, sizeof(v47));
      abm::SystemLogsTask::filterReason_sync((uint64_t)v48, &v47);
      memset(&v46, 170, sizeof(v46));
      xpc_object_t v25 = xpc_dictionary_get_value(*a3, "History");
      v45[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      if (v25) {
        xpc_retain(v25);
      }
      else {
        v45[1].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&long long v39 = 0;
      xpc::dyn_cast_or_default();
      if (SBYTE7(v39) < 0) {
        operator delete(__p[0]);
      }
      xpc_release(v45[1].__r_.__value_.__l.__data_);
      memset(&v45[1], 170, sizeof(std::string));
      xpc_object_t v26 = xpc_dictionary_get_value(*a3, "LogPath");
      __p[0] = v26;
      if (v26) {
        xpc_retain(v26);
      }
      else {
        __p[0] = xpc_null_create();
      }
      xpc::dyn_cast_or_default();
      xpc_release(__p[0]);
      xpc_object_t v27 = xpc_dictionary_get_value(*a3, "RequireUserConfirmation");
      __p[0] = v27;
      if (v27) {
        xpc_retain(v27);
      }
      else {
        __p[0] = xpc_null_create();
      }
      char v28 = xpc::dyn_cast_or_default();
      xpc_release(__p[0]);
      char v29 = (atomic_ullong *)a1[6];
      __p[0] = a1[5];
      __p[1] = v29;
      if (v29) {
        atomic_fetch_add_explicit(v29 + 2, 1uLL, memory_order_relaxed);
      }
      LOBYTE(v39) = v28;
      *((void *)&v39 + 1) = v8;
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&aBlock, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
      }
      else {
        aBlocunint64_t k = v47;
      }
      if (SHIBYTE(v48[5]) < 0) {
        std::string::__init_copy_ctor_external(&v41, (const std::string::value_type *)v48[3], (std::string::size_type)v48[4]);
      }
      else {
        std::string v41 = *(std::string *)&v48[3];
      }
      group[0] = v12;
      if (v12)
      {
        dispatch_retain(v12);
        if (group[0]) {
          dispatch_group_enter(group[0]);
        }
      }
      char v30 = *(NSObject **)a4;
      if (*(void *)a4) {
        char v30 = _Block_copy(v30);
      }
      long long v31 = *(NSObject **)(a4 + 8);
      group[1] = v30;
      uint64_t v43 = v31;
      if (v31) {
        dispatch_retain(v31);
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v44, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
      }
      else {
        std::string v44 = v46;
      }
      if (SHIBYTE(v45[1].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(v45, v45[1].__r_.__value_.__l.__data_, v45[1].__r_.__value_.__l.__size_);
      }
      else {
        v45[0] = v45[1];
      }
      uint64_t v32 = *((void *)v8 + 17);
      long long v33 = (void **)operator new(0x98uLL);
      char v34 = v33;
      char v35 = (atomic_ullong *)__p[1];
      std::__shared_weak_count *v33 = __p[0];
      v33[1] = v35;
      if (v35) {
        atomic_fetch_add_explicit(v35 + 2, 1uLL, memory_order_relaxed);
      }
      *((_OWORD *)v33 + 1) = v39;
      if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external((std::string *)(v33 + 4), aBlock.__r_.__value_.__l.__data_, aBlock.__r_.__value_.__l.__size_);
      }
      else {
        *(std::string *)(v33 + 4) = aBlock;
      }
      std::string v36 = (std::string *)(v34 + 7);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v36, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v36->__r_.__value_.__l.__data_ = *(_OWORD *)&v41.__r_.__value_.__l.__data_;
        v34[9] = (void *)v41.__r_.__value_.__r.__words[2];
      }
      *((_OWORD *)v34 + 5) = *(_OWORD *)group;
      *(_OWORD *)dispatch_group_t group = 0u;
      v34[12] = v43;
      uint64_t v43 = 0;
      *(std::string *)(v34 + 13) = v44;
      memset(&v44, 0, sizeof(v44));
      *(std::string *)(v34 + 16) = v45[0];
      memset(v45, 0, 24);
      dispatch_async_f(v32, v34, (dispatch_function_t)_ZZN8dispatch5asyncIZZN3abm14SystemLogsTask9init_syncEvEUb0_E3__3EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS6_14default_deleteIS8_EEEEENUlPvE_8__invokeESC_);
      _ZZZN3abm14SystemLogsTask9init_syncEvEUb0_EN3__3D1Ev((uint64_t)__p);
      if (SHIBYTE(v45[1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v45[1].__r_.__value_.__l.__data_);
        if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_93:
          if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_94;
          }
          goto LABEL_100;
        }
      }
      else if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_93;
      }
      operator delete(v46.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_94:
        if ((SHIBYTE(v48[2]) & 0x80000000) == 0) {
          goto LABEL_95;
        }
        goto LABEL_101;
      }
LABEL_100:
      operator delete(v47.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v48[2]) & 0x80000000) == 0)
      {
LABEL_95:
        if ((SHIBYTE(v48[5]) & 0x80000000) == 0) {
          goto LABEL_96;
        }
        goto LABEL_102;
      }
LABEL_101:
      operator delete(v48[0]);
      if ((SHIBYTE(v48[5]) & 0x80000000) == 0)
      {
LABEL_96:
        std::string v37 = (std::__shared_weak_count *)v50;
        if (!v50)
        {
LABEL_40:
          if (v12)
          {
            dispatch_group_leave(v12);
            dispatch_release(v12);
          }
          return;
        }
LABEL_103:
        if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
        goto LABEL_40;
      }
LABEL_102:
      operator delete(v48[3]);
      std::string v37 = (std::__shared_weak_count *)v50;
      if (!v50) {
        goto LABEL_40;
      }
      goto LABEL_103;
    }
  }
}

void sub_1A61065A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,dispatch_group_t group,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 + 55) < 0) {
    operator delete(*v55);
  }
  long long v57 = *(std::__shared_weak_count **)(v54 + 8);
  if (v57)
  {
    std::__shared_weak_count::__release_weak(v57);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1A61066AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(a28);
  }
  JUMPOUT(0x1A61066FCLL);
}

void sub_1A61066E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(a31);
  }
  JUMPOUT(0x1A6106740);
}

void sub_1A6106714(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,xpc_object_t object,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  if (a42 < 0) {
    operator delete(a37);
  }
  JUMPOUT(0x1A6106758);
}

void sub_1A6106770(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,xpc_object_t object)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  if (*(char *)(v37 - 129) < 0) {
    operator delete(*(void **)(v37 - 152));
  }
  JUMPOUT(0x1A61067F8);
}

void sub_1A61067B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,xpc_object_t object)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v38 - 176, *(void **)(v38 - 168));
  xpc_release(object);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v38 - 96);
  if (v37)
  {
    dispatch_group_leave(v37);
    dispatch_release(v37);
  }
  _Unwind_Resume(a1);
}

void sub_1A610681C()
{
  if (*(char *)(v1 - 105) < 0) {
    operator delete(*(void **)(v1 - 128));
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 152);
  if (!v0) {
    JUMPOUT(0x1A6106814);
  }
  JUMPOUT(0x1A6106804);
}

void sub_1A6106844()
{
  if (!v0) {
    JUMPOUT(0x1A6106814);
  }
  JUMPOUT(0x1A6106804);
}

void abm::SystemLogsTask::filterReason_sync(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  memset(a2, 170, sizeof(std::string));
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    std::string::size_type v3 = *(void *)(a1 + 16);
    a2->__r_.__value_.__r.__words[2] = v3;
    std::string::size_type size = HIBYTE(v3);
    if ((size & 0x80u) != 0) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    if (!size) {
      return;
    }
LABEL_9:
    memset(v26, 170, sizeof(v26));
    strcpy((char *)&v28 + 7, "\t**");
    strcpy((char *)&__dst, "[abmtool]");
    char v29 = 2;
    char v31 = 3;
    LODWORD(v30) = 2763306;
    char v33 = 14;
    strcpy((char *)v32, "[ABM Settings]");
    char v35 = 13;
    strcpy((char *)v34, "BB-Triggered:");
    char v37 = 13;
    strcpy((char *)v36, "AP-Triggered:");
    std::vector<std::string>::vector[abi:ne180100](v26, (uint64_t)&__dst, 6uLL);
    if (v37 < 0)
    {
      operator delete(v36[0]);
      if ((v35 & 0x80000000) == 0)
      {
LABEL_11:
        if ((v33 & 0x80000000) == 0) {
          goto LABEL_12;
        }
        goto LABEL_65;
      }
    }
    else if ((v35 & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v34[0]);
    if ((v33 & 0x80000000) == 0)
    {
LABEL_12:
      if ((v31 & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_66;
    }
LABEL_65:
    operator delete(v32[0]);
    if ((v31 & 0x80000000) == 0)
    {
LABEL_13:
      if ((v29 & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_67;
    }
LABEL_66:
    operator delete(v30);
    if ((v29 & 0x80000000) == 0)
    {
LABEL_14:
      if ((SBYTE7(v28) & 0x80000000) == 0)
      {
LABEL_15:
        for (int i = (char *)v26[0]; i != v26[1]; i += 24)
        {
          util::strip_pattern(i, (uint64_t)a2, (std::string *)&__dst);
          if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
            operator delete(a2->__r_.__value_.__l.__data_);
          }
          *(_OWORD *)&a2->__r_.__value_.__l.__data_ = __dst;
          a2->__r_.__value_.__r.__words[2] = v28;
        }
        char v25 = 2;
        strcpy((char *)__p, " \t");
        util::strip_leading_trailing(a2, __p, &__dst);
        if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
          operator delete(a2->__r_.__value_.__l.__data_);
        }
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = __dst;
        a2->__r_.__value_.__r.__words[2] = v28;
        BYTE7(v28) = 0;
        LOBYTE(__dst) = 0;
        if (v25 < 0) {
          operator delete(__p[0]);
        }
        unint64_t v7 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        char v8 = v7;
        uint64_t v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
        unint64_t v10 = a2->__r_.__value_.__l.__size_;
        if ((v7 & 0x80u) == 0) {
          long long v11 = a2;
        }
        else {
          long long v11 = (std::string *)a2->__r_.__value_.__r.__words[0];
        }
        if ((v7 & 0x80u) == 0) {
          std::string::size_type v12 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v12 = a2->__r_.__value_.__l.__size_;
        }
        if (v12)
        {
          uint64_t v13 = MEMORY[0x1E4F14390];
          do
          {
            unsigned int v14 = v11->__r_.__value_.__s.__data_[0];
            if ((v14 & 0x80000000) != 0) {
              int v15 = __maskrune(v14, 0x500uLL);
            }
            else {
              int v15 = *(_DWORD *)(v13 + 4 * v14 + 60) & 0x500;
            }
            if (!v15) {
              v11->__r_.__value_.__s.__data_[0] = 95;
            }
            long long v11 = (std::string *)((char *)v11 + 1);
            --v12;
          }
          while (v12);
          unint64_t v7 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
          uint64_t v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
          unint64_t v10 = a2->__r_.__value_.__l.__size_;
          char v8 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        }
        if (v8 >= 0)
        {
          std::string::size_type v16 = a2;
        }
        else
        {
          unint64_t v7 = v10;
          std::string::size_type v16 = v9;
        }
        if (v7 >= 0x1E) {
          size_t v17 = 30;
        }
        else {
          size_t v17 = v7;
        }
        if (v17 >= 0x17)
        {
          uint64_t v20 = (v17 & 0x18) + 8;
          if ((v17 | 7) != 0x17) {
            uint64_t v20 = v17 | 7;
          }
          uint64_t v21 = v20 + 1;
          p_dst = (long long *)operator new(v20 + 1);
          *((void *)&__dst + 1) = v17;
          *(void *)&long long v28 = v21 | 0x8000000000000000;
          *(void *)&long long __dst = p_dst;
        }
        else
        {
          BYTE7(v28) = v17;
          p_dst = &__dst;
          if (!v17)
          {
            LOBYTE(__dst) = 0;
            if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_48;
            }
            goto LABEL_54;
          }
        }
        memmove(p_dst, v16, v17);
        *((unsigned char *)p_dst + v17) = 0;
        if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_48:
          *(_OWORD *)&a2->__r_.__value_.__l.__data_ = __dst;
          a2->__r_.__value_.__r.__words[2] = v28;
          long long v19 = (void **)v26[0];
          if (!v26[0]) {
            return;
          }
LABEL_55:
          uint64_t v22 = (void **)v26[1];
          uint64_t v23 = v19;
          if (v26[1] != v19)
          {
            do
            {
              if (*((char *)v22 - 1) < 0) {
                operator delete(*(v22 - 3));
              }
              v22 -= 3;
            }
            while (v22 != v19);
            uint64_t v23 = (void **)v26[0];
          }
          v26[1] = v19;
          operator delete(v23);
          return;
        }
LABEL_54:
        operator delete(a2->__r_.__value_.__l.__data_);
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = __dst;
        a2->__r_.__value_.__r.__words[2] = v28;
        long long v19 = (void **)v26[0];
        if (!v26[0]) {
          return;
        }
        goto LABEL_55;
      }
LABEL_68:
      operator delete((void *)__dst);
      goto LABEL_15;
    }
LABEL_67:
    operator delete(*((void **)&v28 + 1));
    if ((SBYTE7(v28) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_68;
  }
  std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  std::string::size_type v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((v5 & 0x80u) != 0) {
    std::string::size_type v5 = a2->__r_.__value_.__l.__size_;
  }
  if (v5) {
    goto LABEL_9;
  }
}

void sub_1A6106CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  std::vector<std::string>::~vector[abi:ne180100](&a16);
  if (*(char *)(v54 + 23) < 0)
  {
    operator delete(*(void **)v54);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(int,xpc::dict)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t _ZZZN3abm14SystemLogsTask9init_syncEvEUb0_EN3__3D1Ev(uint64_t a1)
{
  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if ((*(char *)(a1 + 127) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(NSObject **)(a1 + 96);
      if (!v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(char *)(a1 + 127) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 104));
  uint64_t v2 = *(NSObject **)(a1 + 96);
  if (v2) {
LABEL_4:
  }
    dispatch_release(v2);
LABEL_5:
  std::string::size_type v3 = *(const void **)(a1 + 88);
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = *(NSObject **)(a1 + 80);
  if (v4)
  {
    dispatch_group_leave(v4);
    std::string::size_type v5 = *(NSObject **)(a1 + 80);
    if (v5) {
      dispatch_release(v5);
    }
  }
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    std::string::size_type v6 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v6) {
      return a1;
    }
    goto LABEL_13;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_19;
  }
LABEL_12:
  std::string::size_type v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6) {
LABEL_13:
  }
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void ___ZN3abm14SystemLogsTask9init_syncEv_block_invoke_2(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  std::string::size_type v5 = (std::__shared_weak_count *)a1[6];
  if (!v5) {
    return;
  }
  uint64_t v7 = a1[4];
  char v8 = std::__shared_weak_count::lock(v5);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  long long v11 = *(NSObject **)(v7 + 112);
  if (v11)
  {
    dispatch_retain(*(dispatch_object_t *)(v7 + 112));
    dispatch_group_enter(v11);
  }
  xpc_object_t object = xpc_null_create();
  memset(&v27, 170, sizeof(v27));
  if (*(char *)(v7 + 167) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(v7 + 144), *(void *)(v7 + 152));
  }
  else {
    std::string v27 = *(std::string *)(v7 + 144);
  }
  std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v27.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
    if (v13 || (xpc_object_t v13 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A6275E60](v13) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v13);
        xpc_object_t v14 = v13;
      }
      else
      {
        xpc_object_t v14 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v14 = xpc_null_create();
      xpc_object_t v13 = 0;
    }
    xpc_release(v13);
    xpc_object_t v15 = xpc_null_create();
    xpc_object_t v16 = object;
    xpc_object_t object = v14;
    xpc_release(v16);
    xpc_release(v15);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v17 = &v27;
    }
    else {
      size_t v17 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v18 = xpc_string_create((const char *)v17);
    if (!v18) {
      xpc_object_t v18 = xpc_null_create();
    }
    xpc_dictionary_set_value(object, "TimestampString", v18);
    xpc_object_t v19 = xpc_null_create();
    xpc_release(v18);
    xpc_release(v19);
  }
  uint64_t v20 = *(NSObject **)(v7 + 40);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((uint64_t *)__p, (xpc::object *)&object);
    uint64_t v21 = SHIBYTE(v30) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    std::string v36 = v21;
    _os_log_impl(&dword_1A609F000, v20, OS_LOG_TYPE_DEFAULT, "#I Snapshot - running: %s", buf, 0xCu);
    if (SHIBYTE(v30) < 0) {
      operator delete(__p[0]);
    }
  }
  xpc_object_t v22 = object;
  if (object)
  {
    xpc_retain(object);
    uint64_t v23 = *(const void **)a4;
    if (*(void *)a4)
    {
LABEL_35:
      xpc_object_t v24 = _Block_copy(v23);
      goto LABEL_38;
    }
  }
  else
  {
    xpc_object_t v22 = xpc_null_create();
    uint64_t v23 = *(const void **)a4;
    if (*(void *)a4) {
      goto LABEL_35;
    }
  }
  xpc_object_t v24 = 0;
LABEL_38:
  char v25 = *(NSObject **)(a4 + 8);
  __p[0] = (void *)MEMORY[0x1E4F143A8];
  __p[1] = (void *)3321888768;
  char v30 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
  char v31 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
  if (!v24)
  {
    int v34 = 0;
    aBlocunint64_t k = 0;
    xpc_object_t v33 = v22;
    if (v22) {
      goto LABEL_40;
    }
LABEL_42:
    xpc_object_t v33 = xpc_null_create();
    goto LABEL_43;
  }
  xpc_object_t v26 = _Block_copy(v24);
  int v34 = 0;
  aBlocunint64_t k = v26;
  xpc_object_t v33 = v22;
  if (!v22) {
    goto LABEL_42;
  }
LABEL_40:
  xpc_retain(v22);
LABEL_43:
  dispatch_async(v25, __p);
  xpc_release(v33);
  xpc_object_t v33 = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v24) {
    _Block_release(v24);
  }
  xpc_release(v22);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  xpc_release(object);
  if (v11)
  {
    dispatch_group_leave(v11);
    dispatch_release(v11);
  }
}

void sub_1A6107278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN3abm14SystemLogsTask9init_syncEv_block_invoke_6(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  std::string::size_type v5 = (std::__shared_weak_count *)a1[6];
  if (!v5) {
    return;
  }
  uint64_t v7 = a1[4];
  char v8 = std::__shared_weak_count::lock(v5);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  long long v11 = *(NSObject **)(v7 + 112);
  if (v11)
  {
    dispatch_retain(*(dispatch_object_t *)(v7 + 112));
    dispatch_group_enter(v11);
  }
  xpc_object_t object = xpc_null_create();
  int64_t v12 = *(unsigned int *)(v7 + 168);
  if (v12)
  {
    xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
    if (v13 || (xpc_object_t v13 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A6275E60](v13) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v13);
        xpc_object_t v14 = v13;
      }
      else
      {
        xpc_object_t v14 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v14 = xpc_null_create();
      xpc_object_t v13 = 0;
    }
    xpc_release(v13);
    xpc_object_t v15 = xpc_null_create();
    xpc_object_t v16 = object;
    xpc_object_t object = v14;
    xpc_release(v16);
    xpc_release(v15);
    xpc_object_t v17 = xpc_int64_create(v12);
    if (!v17) {
      xpc_object_t v17 = xpc_null_create();
    }
    xpc_dictionary_set_value(object, "Mode", v17);
    xpc_object_t v18 = xpc_null_create();
    xpc_release(v17);
    xpc_release(v18);
  }
  xpc_object_t v19 = *(NSObject **)(v7 + 40);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((uint64_t *)__p, (xpc::object *)&object);
    uint64_t v20 = SHIBYTE(v28) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    int v34 = v20;
    _os_log_impl(&dword_1A609F000, v19, OS_LOG_TYPE_DEFAULT, "#I Snapshot - running: %s", buf, 0xCu);
    if (SHIBYTE(v28) < 0) {
      operator delete(__p[0]);
    }
  }
  xpc_object_t v21 = object;
  if (object)
  {
    xpc_retain(object);
    xpc_object_t v22 = *(const void **)a4;
    if (*(void *)a4)
    {
LABEL_27:
      uint64_t v23 = _Block_copy(v22);
      goto LABEL_30;
    }
  }
  else
  {
    xpc_object_t v21 = xpc_null_create();
    xpc_object_t v22 = *(const void **)a4;
    if (*(void *)a4) {
      goto LABEL_27;
    }
  }
  uint64_t v23 = 0;
LABEL_30:
  xpc_object_t v24 = *(NSObject **)(a4 + 8);
  __p[0] = (void *)MEMORY[0x1E4F143A8];
  __p[1] = (void *)3321888768;
  long long v28 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
  char v29 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
  if (!v23)
  {
    int v32 = 0;
    aBlocunint64_t k = 0;
    xpc_object_t v31 = v21;
    if (v21) {
      goto LABEL_32;
    }
LABEL_34:
    xpc_object_t v31 = xpc_null_create();
    goto LABEL_35;
  }
  char v25 = _Block_copy(v23);
  int v32 = 0;
  aBlocunint64_t k = v25;
  xpc_object_t v31 = v21;
  if (!v21) {
    goto LABEL_34;
  }
LABEL_32:
  xpc_retain(v21);
LABEL_35:
  dispatch_async(v24, __p);
  xpc_release(v31);
  xpc_object_t v31 = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v23) {
    _Block_release(v23);
  }
  xpc_release(v21);
  xpc_release(object);
  if (v11)
  {
    dispatch_group_leave(v11);
    dispatch_release(v11);
  }
}

void sub_1A6107680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t abm::SystemLogsTask::askForConfirmation_sync()
{
  if (TelephonyUtilIsInternalBuild()) {
    return 2;
  }
  uint64_t result = TelephonyUtilIsCarrierBuild();
  if (result) {
    return 2;
  }
  return result;
}

void abm::SystemLogsTask::convertSysdiagnoseTimeFormat_sync(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  memset(v44, 170, sizeof(v44));
  Timestamp::Timestamp((Timestamp *)v44);
  v43.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v43.tm_moptrdiff_t n = v4;
  *(_OWORD *)&v43.tm_isdst = v4;
  *(_OWORD *)&v43.tm_sec = v4;
  unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
  long long v41 = v4;
  long long v40 = v4;
  long long v39 = v4;
  long long v38 = v4;
  long long v37 = v4;
  long long v36 = v4;
  long long v35 = v4;
  long long v34 = v4;
  v33[1] = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&unsigned char __p[32] = v4;
  *(_OWORD *)&__p[16] = v4;
  *(_OWORD *)std::string __p = v4;
  long long v31 = v4;
  long long v30 = v4;
  long long v29 = v4;
  long long v28 = v4;
  uint64_t v5 = MEMORY[0x1E4FBA490] + 64;
  v33[0] = MEMORY[0x1E4FBA490] + 64;
  std::string::size_type v6 = (uint64_t *)MEMORY[0x1E4FBA410];
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA410] + 16);
  uint64_t v27 = *(void *)(MEMORY[0x1E4FBA410] + 8);
  *(uint64_t *)((char *)&v27 + *(void *)(v27 - 24)) = v7;
  *(void *)&long long v28 = 0;
  char v8 = (std::ios_base *)((char *)&v27 + *(void *)(v27 - 24));
  std::ios_base::init(v8, (char *)&v28 + 8);
  uint64_t v9 = MEMORY[0x1E4FBA490] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v27 = v9;
  v33[0] = v5;
  std::streambuf::basic_streambuf();
  uint64_t v10 = MEMORY[0x1E4FBA470] + 16;
  *((void *)&v28 + 1) = MEMORY[0x1E4FBA470] + 16;
  long long v11 = &__p[8];
  memset(&__p[8], 0, 32);
  char v12 = 8;
  *(_DWORD *)&unsigned char __p[40] = 8;
  if (&__p[8] != (unsigned char *)a1)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__assign_no_alias<true>(&__p[8], *(void **)a1, *(void *)(a1 + 8));
      char v12 = __p[40];
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)a1;
      *(void *)&__p[24] = *(void *)(a1 + 16);
    }
  }
  *(void *)&unsigned char __p[32] = 0;
  uint64_t v13 = __p[31];
  if (__p[31] >= 0) {
    xpc_object_t v14 = &__p[8];
  }
  else {
    xpc_object_t v14 = *(unsigned char **)&__p[8];
  }
  if (__p[31] >= 0) {
    unint64_t v15 = __p[31];
  }
  else {
    unint64_t v15 = *(void *)&__p[16];
  }
  if ((v12 & 8) != 0)
  {
    *((void *)&v29 + 1) = v14;
    *(void *)&long long v30 = v14;
    *(void *)&unsigned char __p[32] = &v14[v15];
    *((void *)&v30 + 1) = &v14[v15];
  }
  if ((v12 & 0x10) != 0)
  {
    *(void *)&unsigned char __p[32] = &v14[v15];
    if ((__p[31] & 0x80) != 0)
    {
      unint64_t v16 = (*(void *)&__p[24] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (*(void *)&__p[16] >= v16)
      {
        *(void *)&__p[16] = (*(void *)&__p[24] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        long long v11 = *(unsigned char **)&__p[8];
        goto LABEL_21;
      }
      uint64_t v13 = *(void *)&__p[16];
    }
    else
    {
      unint64_t v16 = 22;
      if (__p[31] > 0x15u)
      {
        __p[31] = 22;
LABEL_21:
        v11[v16] = 0;
        goto LABEL_22;
      }
    }
    std::string::append((std::string *)&__p[8], v16 - v13, 0);
LABEL_22:
    uint64_t v17 = __p[31];
    if (__p[31] < 0) {
      uint64_t v17 = *(void *)&__p[16];
    }
    *(void *)&long long v31 = v14;
    *((void *)&v31 + 1) = v14;
    *(void *)std::string __p = &v14[v17];
    if ((__p[40] & 3) != 0)
    {
      if (v15 >> 31)
      {
        uint64_t v18 = ((v15 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v19 = 0x7FFFFFFF * ((v18 + ((v15 - 0x80000000 - v18) >> 1)) >> 30);
        v14 += v19 + 0x7FFFFFFF;
        unint64_t v15 = v15 - v19 - 0x7FFFFFFF;
        *((void *)&v31 + 1) = v14;
      }
      if (v15) {
        *((void *)&v31 + 1) = &v14[v15];
      }
    }
  }
  char v47 = -86;
  MEMORY[0x1A6274F00](&v47, &v27, 0);
  if (v47)
  {
    int v46 = 0;
    std::ios_base::getloc((const std::ios_base *)((char *)&v27 + *(void *)(v27 - 24)));
    std::locale::use_facet(&v45, MEMORY[0x1E4FBA2A8]);
    std::locale::~locale(&v45);
    std::time_get<char,std::istreambuf_iterator<char>>::get();
    std::ios_base::clear((std::ios_base *)((char *)&v27 + *(void *)(v27 - 24)), *(_DWORD *)((char *)&v29 + *(void *)(v27 - 24) + 8) | v46);
  }
  v43.tm_isdst = -1;
  time_t v20 = mktime(&v43);
  xpc_object_t v21 = (uint64_t *)v44[1];
  if (v44[1])
  {
    while (1)
    {
      while (1)
      {
        uint64_t v23 = (uint64_t **)v21;
        int v24 = *((_DWORD *)v21 + 8);
        if (v24 < 1) {
          break;
        }
        xpc_object_t v21 = *v23;
        xpc_object_t v22 = v23;
        if (!*v23) {
          goto LABEL_38;
        }
      }
      if ((v24 & 0x80000000) == 0) {
        break;
      }
      xpc_object_t v21 = v23[1];
      if (!v21)
      {
        xpc_object_t v22 = v23 + 1;
        goto LABEL_38;
      }
    }
    char v25 = v23;
  }
  else
  {
    xpc_object_t v22 = (uint64_t **)&v44[1];
    uint64_t v23 = (uint64_t **)&v44[1];
LABEL_38:
    char v25 = operator new(0x38uLL);
    unsigned char v25[8] = 0;
    *((void *)v25 + 5) = 0;
    *((void *)v25 + 6) = 0;
    *(void *)char v25 = 0;
    *((void *)v25 + 1) = 0;
    *((void *)v25 + 2) = v23;
    const void *v22 = (uint64_t *)v25;
    xpc_object_t v26 = (uint64_t *)v25;
    if (*(void *)v44[0])
    {
      v44[0] = *(void *)v44[0];
      xpc_object_t v26 = *v22;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v44[1], v26);
    ++v44[2];
  }
  *((void *)v25 + 5) = v20;
  *((void *)v25 + 6) = 0;
  Timestamp::asString((uint64_t)v44, 0, 16, a2);
  uint64_t v27 = *v6;
  *(uint64_t *)((char *)&v27 + *(void *)(v27 - 24)) = v6[3];
  *((void *)&v28 + 1) = v10;
  if ((__p[31] & 0x80000000) != 0) {
    operator delete(*(void **)&__p[8]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1A62751A0](v33);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v44, (void *)v44[1]);
}

void sub_1A6107CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1A62751A0](v24);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v25 - 120, *(void **)(v25 - 112));
  _Unwind_Resume(a1);
}

void sub_1A6107D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::istringstream::~istringstream((uint64_t)&a9);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v9 - 120, *(void **)(v9 - 112));
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA410];
  uint64_t v3 = *MEMORY[0x1E4FBA410];
  *(void *)a1 = *MEMORY[0x1E4FBA410];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1A62751A0](a1 + 120);
  return a1;
}

void abm::SystemLogsTask::snapshotSysdiagnose_sync(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  __dst[3] = *(void **)MEMORY[0x1E4F143B8];
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  memset(v76, 170, sizeof(v76));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v75 = *(std::string *)a2;
  }
  abm::SystemLogsTask::convertSysdiagnoseTimeFormat_sync((uint64_t)&v75, v76);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  memset(&v74, 170, sizeof(v74));
  config::hw::product(v7);
  util::strip_non_alpha(&v74);
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v72[7] = v8;
  v72[8] = v8;
  v72[5] = v8;
  v72[6] = v8;
  void v72[3] = v8;
  v72[4] = v8;
  v72[1] = v8;
  v72[2] = v8;
  long long v71 = v8;
  v72[0] = v8;
  *(_OWORD *)long long v69 = v8;
  long long v70 = v8;
  long long v67 = v8;
  long long v68 = v8;
  long long v65 = v8;
  long long v66 = v8;
  long long v64 = v8;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v64);
  uint64_t v60 = a1;
  size_t v9 = strlen(abm::trace::kSysdiagnosePrefix[0]);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)abm::trace::kSysdiagnosePrefix[0], v9);
  if (SHIBYTE(v76[2]) >= 0) {
    long long v11 = v76;
  }
  else {
    long long v11 = (void **)v76[0];
  }
  if (SHIBYTE(v76[2]) >= 0) {
    uint64_t v12 = HIBYTE(v76[2]);
  }
  else {
    uint64_t v12 = (uint64_t)v76[1];
  }
  uint64_t v13 = (config::hw *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  int v14 = config::hw::watch(v13);
  if (v14) {
    unint64_t v15 = "-Watch_OS-";
  }
  else {
    unint64_t v15 = "-iPhone_OS-";
  }
  if (v14) {
    uint64_t v16 = 10;
  }
  else {
    uint64_t v16 = 11;
  }
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v15, v16);
  int v18 = SHIBYTE(v74.__r_.__value_.__r.__words[2]);
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v74.__r_.__value_.__l.__size_;
  }
  unint64_t v20 = size + 1;
  memset(__dst, 170, 24);
  if (size + 1 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v21 = v17;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    xpc_object_t v22 = (void **)operator new(v23 + 1);
    __dst[1] = (void *)(size + 1);
    std::string __dst[2] = (void *)(v24 | 0x8000000000000000);
    __dst[0] = v22;
  }
  else
  {
    memset(__dst, 0, 24);
    xpc_object_t v22 = __dst;
    HIBYTE(__dst[2]) = size + 1;
    if (!size) {
      goto LABEL_32;
    }
  }
  if (v18 >= 0) {
    uint64_t v25 = &v74;
  }
  else {
    uint64_t v25 = (std::string *)v74.__r_.__value_.__r.__words[0];
  }
  memmove(v22, v25, size);
LABEL_32:
  *(_WORD *)((char *)v22 + size) = 45;
  if (SHIBYTE(__dst[2]) >= 0) {
    xpc_object_t v26 = __dst;
  }
  else {
    xpc_object_t v26 = (void **)__dst[0];
  }
  if (SHIBYTE(__dst[2]) >= 0) {
    uint64_t v27 = HIBYTE(__dst[2]);
  }
  else {
    uint64_t v27 = (uint64_t)__dst[1];
  }
  long long v28 = (config::build *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v26, v27);
  config::build::version(v28);
  if ((v63 & 0x80u) == 0) {
    long long v29 = __p;
  }
  else {
    long long v29 = (void **)__p[0];
  }
  if ((v63 & 0x80u) == 0) {
    uint64_t v30 = v63;
  }
  else {
    uint64_t v30 = (uint64_t)__p[1];
  }
  long long v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
  int v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"--", 2);
  int v33 = *(char *)(a3 + 23);
  if (v33 >= 0) {
    uint64_t v34 = a3;
  }
  else {
    uint64_t v34 = *(void *)a3;
  }
  if (v33 >= 0) {
    uint64_t v35 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v35 = *(void *)(a3 + 8);
  }
  long long v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
  if ((char)v63 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      goto LABEL_52;
    }
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_52;
  }
  operator delete(__dst[0]);
LABEL_52:
  long long v37 = (void *)MEMORY[0x1A6275990](v36);
  v79[0] = @"logarchive";
  v77[0] = [NSString stringWithUTF8String:*MEMORY[0x1E4F73110]];
  v78[0] = &unk_1EFB10B18;
  v77[1] = [NSString stringWithUTF8String:*MEMORY[0x1E4F73120]];
  v78[1] = &unk_1EFB10B18;
  v77[2] = [NSString stringWithUTF8String:*MEMORY[0x1E4F730F0]];
  std::vector<std::csub_match> v78[2] = &unk_1EFB10B18;
  uint64_t v38 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v78 forKeys:v77 count:3];
  v79[1] = @"basebandMeta";
  v80[0] = v38;
  v80[1] = &unk_1EFB10B48;
  uint64_t v39 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v80 forKeys:v79 count:2];
  long long v40 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  long long v41 = NSString;
  if ((BYTE8(v71) & 0x10) != 0)
  {
    uint64_t v44 = v71;
    if ((unint64_t)v71 < *((void *)&v68 + 1))
    {
      *(void *)&long long v71 = *((void *)&v68 + 1);
      uint64_t v44 = *((void *)&v68 + 1);
    }
    std::locale v45 = v37;
    int v46 = (const void *)v68;
    size_t v42 = v44 - v68;
    if ((unint64_t)(v44 - v68) > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_91;
    }
  }
  else
  {
    if ((BYTE8(v71) & 8) == 0)
    {
      size_t v42 = 0;
      HIBYTE(__dst[2]) = 0;
      tm v43 = __dst;
      goto LABEL_68;
    }
    std::locale v45 = v37;
    int v46 = (const void *)*((void *)&v66 + 1);
    size_t v42 = *((void *)&v67 + 1) - *((void *)&v66 + 1);
    if (*((void *)&v67 + 1) - *((void *)&v66 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_91:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v42 >= 0x17)
  {
    uint64_t v47 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v42 | 7) != 0x17) {
      uint64_t v47 = v42 | 7;
    }
    uint64_t v48 = v47 + 1;
    tm v43 = (void **)operator new(v47 + 1);
    __dst[1] = (void *)v42;
    std::string __dst[2] = (void *)(v48 | 0x8000000000000000);
    __dst[0] = v43;
  }
  else
  {
    HIBYTE(__dst[2]) = v42;
    tm v43 = __dst;
    if (!v42) {
      goto LABEL_67;
    }
  }
  memmove(v43, v46, v42);
LABEL_67:
  long long v37 = v45;
LABEL_68:
  *((unsigned char *)v43 + v42) = 0;
  if (SHIBYTE(__dst[2]) >= 0) {
    long long v49 = __dst;
  }
  else {
    long long v49 = (void **)__dst[0];
  }
  objc_msgSend(v40, "setObject:forKeyedSubscript:", objc_msgSend(v41, "stringWithUTF8String:", v49), @"archiveName");
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  [v40 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"shouldCreateTarBall"];
  [v40 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"getMetrics"];
  [v40 setValue:v39 forKey:@"capOverride"];
  unint64_t v50 = *(NSObject **)(v60 + 40);
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    long long v51 = objc_msgSend((id)objc_msgSend(v40, "description"), "UTF8String");
    LODWORD(__dst[0]) = 136315138;
    *(void **)((char *)__dst + 4) = v51;
    _os_log_impl(&dword_1A609F000, v50, OS_LOG_TYPE_DEFAULT, "#I Snapshot - starting: collecting sysdiagnose with metaData: %s", (uint8_t *)__dst, 0xCu);
  }
  uint64_t v61 = 0;
  __p[0] = 0;
  long long v52 = (void *)[MEMORY[0x1E4FBA978] sysdiagnoseWithMetadata:v40 withMetrics:&v61 withError:__p];
  long long v53 = __p[0];
  if (__p[0])
  {
    uint64_t v54 = *(NSObject **)(v60 + 40);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      int v59 = objc_msgSend((id)objc_msgSend(v53, "description"), "UTF8String");
      LODWORD(__dst[0]) = 136315138;
      *(void **)((char *)__dst + 4) = v59;
      _os_log_error_impl(&dword_1A609F000, v54, OS_LOG_TYPE_ERROR, "Error collecting sysdiagnose: %s", (uint8_t *)__dst, 0xCu);
    }
  }
  else
  {
    long long v56 = v61;
    if (v61)
    {
      long long v57 = *(NSObject **)(v60 + 40);
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v58 = objc_msgSend((id)objc_msgSend(v56, "description"), "UTF8String");
        LODWORD(__dst[0]) = 136315138;
        *(void **)((char *)__dst + 4) = v58;
        _os_log_impl(&dword_1A609F000, v57, OS_LOG_TYPE_DEFAULT, "#I Sysdiagnose metrics: %s", (uint8_t *)__dst, 0xCu);
      }
    }
  }
  if (v52) {
    std::string::__assign_external(a4, (const std::string::value_type *)[v52 UTF8String]);
  }
  *(void *)&long long v64 = *MEMORY[0x1E4FBA408];
  uint64_t v55 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v64 + *(void *)(v64 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v65 = v55;
  *((void *)&v65 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v70) < 0) {
    operator delete(v69[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A62751A0](v72);
  if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v76[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_89:
    operator delete(v76[0]);
    return;
  }
  operator delete(v74.__r_.__value_.__l.__data_);
  if (SHIBYTE(v76[2]) < 0) {
    goto LABEL_89;
  }
}

void sub_1A6108698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  if (a58 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v59 - 209) < 0) {
    operator delete(*(void **)(v59 - 232));
  }
  if (*(char *)(v58 + 23) < 0) {
    operator delete(*(void **)v58);
  }
  _Unwind_Resume(a1);
}

void abm::SystemLogsTask::snapshotOsLogArchive_sync(const std::string *a1@<X2>, uint64_t a2@<X0>, const std::string::value_type *a3@<X1>, uint64_t a4@<X3>, NSObject **a5@<X4>, std::string *a6@<X8>)
{
  long long v8 = a1;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v69 = 0;
  if (util::convert<unsigned long>(a1, &v69, 0))
  {
    memset(a6, 170, sizeof(std::string));
    uint64_t v12 = abm::trace::kLogDirPrefix[0];
    size_t v13 = strlen(abm::trace::kLogDirPrefix[0]);
    if (v13 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v14 = v13;
    if (v13 >= 0x17)
    {
      uint64_t v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17) {
        uint64_t v17 = v13 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_dst = (std::string *)operator new(v17 + 1);
      __dst.__r_.__value_.__l.__size_ = v14;
      __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_15:
        p_dst->__r_.__value_.__s.__data_[v14] = 0;
        int v19 = *(char *)(a4 + 23);
        if (v19 >= 0) {
          unint64_t v20 = (const std::string::value_type *)a4;
        }
        else {
          unint64_t v20 = *(const std::string::value_type **)a4;
        }
        if (v19 >= 0) {
          std::string::size_type v21 = *(unsigned __int8 *)(a4 + 23);
        }
        else {
          std::string::size_type v21 = *(void *)(a4 + 8);
        }
        xpc_object_t v22 = std::string::insert(&__dst, 0, v20, v21);
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v68.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        int v24 = a3[23];
        if (v24 >= 0) {
          uint64_t v25 = a3;
        }
        else {
          uint64_t v25 = *(const std::string::value_type **)a3;
        }
        if (v24 >= 0) {
          std::string::size_type v26 = *((unsigned __int8 *)a3 + 23);
        }
        else {
          std::string::size_type v26 = *((void *)a3 + 1);
        }
        uint64_t v27 = std::string::append(&v68, v25, v26);
        long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        *(void *)&buf.tm_moptrdiff_t n = *((void *)&v27->__r_.__value_.__l + 2);
        *(_OWORD *)&buf.tm_sec = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        size_t v29 = strlen(abm::trace::kLogArchiveSuffix[0]);
        uint64_t v30 = std::string::append((std::string *)&buf, abm::trace::kLogArchiveSuffix[0], v29);
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        a6->__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a6->__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(buf.tm_year) < 0)
        {
          operator delete(*(void **)&buf.tm_sec);
          if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_29:
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_30;
            }
            goto LABEL_34;
          }
        }
        else if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_29;
        }
        operator delete(v68.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_30:
          memset(&v68, 170, sizeof(v68));
          if ((SHIBYTE(a6->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_31:
            std::string v66 = *a6;
            goto LABEL_36;
          }
LABEL_35:
          std::string::__init_copy_ctor_external(&v66, a6->__r_.__value_.__l.__data_, a6->__r_.__value_.__l.__size_);
LABEL_36:
          support::fs::createUniquePath((const char *)&v66, &v68);
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v66.__r_.__value_.__l.__data_);
          }
          buf.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v32 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&buf.tm_moptrdiff_t n = v32;
          *(_OWORD *)&buf.tm_isdst = v32;
          *(_OWORD *)&buf.tm_sec = v32;
          if (a3[23] < 0) {
            a3 = *(const std::string::value_type **)a3;
          }
          if (strptime(a3, "%Y-%m-%d-%H-%M-%S", &buf))
          {
            buf.tm_isdst = -1;
            time_t v33 = mktime(&buf);
            if (v33 == -1) {
              int64_t v34 = -1;
            }
            else {
              int64_t v34 = v33 - v69;
            }
          }
          else
          {
            int64_t v34 = 0;
          }
          xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          xpc_object_t v35 = xpc_dictionary_create(0, 0, 0);
          xpc_object_t v36 = v35;
          if (v35)
          {
            xpc_object_t xdict = v35;
          }
          else
          {
            xpc_object_t v36 = xpc_null_create();
            xpc_object_t xdict = v36;
            if (!v36)
            {
              xpc_object_t v37 = xpc_null_create();
              xpc_object_t v36 = 0;
              goto LABEL_52;
            }
          }
          if (MEMORY[0x1A6275E60](v36) == MEMORY[0x1E4F14590])
          {
            xpc_retain(v36);
LABEL_53:
            xpc_release(v36);
            xpc_object_t v38 = xpc_BOOL_create(1);
            if (!v38) {
              xpc_object_t v38 = xpc_null_create();
            }
            xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F73100], v38);
            xpc_object_t v39 = xpc_null_create();
            xpc_release(v38);
            xpc_release(v39);
            if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v40 = &v68;
            }
            else {
              long long v40 = (std::string *)v68.__r_.__value_.__r.__words[0];
            }
            xpc_object_t v41 = xpc_string_create((const char *)v40);
            if (!v41) {
              xpc_object_t v41 = xpc_null_create();
            }
            xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F73118], v41);
            xpc_object_t v42 = xpc_null_create();
            xpc_release(v41);
            xpc_release(v42);
            xpc_object_t v43 = xpc_int64_create(v34);
            if (!v43) {
              xpc_object_t v43 = xpc_null_create();
            }
            xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F730F8], v43);
            xpc_object_t v44 = xpc_null_create();
            xpc_release(v43);
            xpc_release(v44);
            xpc_object_t v45 = xpc_int64_create(v34);
            if (!v45) {
              xpc_object_t v45 = xpc_null_create();
            }
            xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F73108], v45);
            xpc_object_t v46 = xpc_null_create();
            xpc_release(v45);
            xpc_release(v46);
            xpc_object_t v47 = xpc_int64_create(v34);
            if (!v47) {
              xpc_object_t v47 = xpc_null_create();
            }
            xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F73128], v47);
            xpc_object_t v48 = xpc_null_create();
            xpc_release(v47);
            xpc_release(v48);
            long long v49 = *(NSObject **)(a2 + 40);
            if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
            {
              xpc::object::to_string((uint64_t *)&__dst, (xpc::object *)&xdict);
              unint64_t v50 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &__dst
                  : (std::string *)__dst.__r_.__value_.__r.__words[0];
              *(_DWORD *)long long v70 = 136315138;
              long long v71 = v50;
              _os_log_impl(&dword_1A609F000, v49, OS_LOG_TYPE_DEFAULT, "#I Snapshot - starting: collecting systemlogs archive with parameters: %s", v70, 0xCu);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__dst.__r_.__value_.__l.__data_);
              }
            }
            uint64_t v59 = MEMORY[0x1E4F143A8];
            uint64_t v60 = 3321888768;
            uint64_t v61 = ___ZN3abm14SystemLogsTask25snapshotOsLogArchive_syncENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_N8dispatch13group_sessionE_block_invoke;
            char v62 = &__block_descriptor_48_e8_40c30_ZTSN8dispatch13group_sessionE_e9_v16__0r_8l;
            long long v51 = *a5;
            uint64_t v63 = a2;
            dispatch_group_t group = v51;
            if (v51)
            {
              dispatch_retain(v51);
              dispatch_group_enter(group);
            }
            if (OSLogCreateArchiveWithDictionary())
            {
              if (SHIBYTE(a6->__r_.__value_.__r.__words[2]) < 0)
              {
                *a6->__r_.__value_.__l.__data_ = 0;
                a6->__r_.__value_.__l.__size_ = 0;
              }
              else
              {
                a6->__r_.__value_.__s.__data_[0] = 0;
                *((unsigned char *)&a6->__r_.__value_.__s + 23) = 0;
              }
            }
            else
            {
              gid_t v57 = -1431655766;
              uid_t v58 = -1431655766;
              if (!support::fs::getUidGid(1, &v58, &v57)) {
                goto LABEL_85;
              }
              if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&__p, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
              }
              else {
                std::string __p = v68;
              }
              char updated = support::fs::updateOwner((const char *)&__p, v58, v57);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if ((updated & 1) == 0)
              {
LABEL_85:
                long long v53 = *(NSObject **)(a2 + 40);
                if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
                {
                  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 9;
                  __dst.__r_.__value_.__r.__words[0] = *(void *)"_wireless";
                  LOWORD(__dst.__r_.__value_.__r.__words[1]) = str_1[8];
                  *(_DWORD *)long long v70 = 136315138;
                  long long v71 = &__dst;
                  _os_log_error_impl(&dword_1A609F000, v53, OS_LOG_TYPE_ERROR, "Failed to update to %s", v70, 0xCu);
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                  }
                }
              }
              if (&v68 != a6)
              {
                if (SHIBYTE(a6->__r_.__value_.__r.__words[2]) < 0)
                {
                  if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v54 = &v68;
                  }
                  else {
                    uint64_t v54 = (std::string *)v68.__r_.__value_.__r.__words[0];
                  }
                  if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    size_t size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    size_t size = v68.__r_.__value_.__l.__size_;
                  }
                  std::string::__assign_no_alias<false>((void **)&a6->__r_.__value_.__l.__data_, v54, size);
                }
                else if ((*((unsigned char *)&v68.__r_.__value_.__s + 23) & 0x80) != 0)
                {
                  std::string::__assign_no_alias<true>(a6, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
                }
                else
                {
                  *a6 = v68;
                }
              }
            }
            if (group)
            {
              dispatch_group_leave(group);
              if (group) {
                dispatch_release(group);
              }
            }
            xpc_release(xdict);
            if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v68.__r_.__value_.__l.__data_);
            }
            return;
          }
          xpc_object_t v37 = xpc_null_create();
LABEL_52:
          xpc_object_t xdict = v37;
          goto LABEL_53;
        }
LABEL_34:
        operator delete(__dst.__r_.__value_.__l.__data_);
        memset(&v68, 170, sizeof(v68));
        if ((SHIBYTE(a6->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_31;
        }
        goto LABEL_35;
      }
    }
    memmove(p_dst, v12, v14);
    goto LABEL_15;
  }
  uint64_t v16 = *(NSObject **)(a2 + 40);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
      long long v8 = (const std::string *)v8->__r_.__value_.__r.__words[0];
    }
    buf.tm_sec = 136315138;
    *(void *)&buf.tm_miptrdiff_t n = v8;
    _os_log_impl(&dword_1A609F000, v16, OS_LOG_TYPE_DEFAULT, "#I Error on history value : %s", (uint8_t *)&buf, 0xCu);
  }
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
}

void sub_1A6108F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,dispatch_group_t group,xpc_object_t object,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  xpc_release(object);
  if (a41 < 0) {
    operator delete(a36);
  }
  if (*(char *)(v41 + 23) < 0)
  {
    operator delete(*(void **)v41);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t util::convert<unsigned long>(const std::string *a1, uint64_t *a2, int a3)
{
  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (strcasecmp((const char *)a1, "false")
      && strcasecmp((const char *)a1, "off")
      && strcasecmp((const char *)a1, "no"))
    {
      if (strcasecmp((const char *)a1, "true")
        && strcasecmp((const char *)a1, "on")
        && strcasecmp((const char *)a1, "yes")
        && strcasecmp((const char *)a1, "full")
        && strcasecmp((const char *)a1, "streaming"))
      {
        std::string::size_type v6 = (const char *)a1;
        if (!strcasecmp((const char *)a1, "lite")) {
          goto LABEL_31;
        }
        goto LABEL_21;
      }
      goto LABEL_28;
    }
LABEL_27:
    uint64_t v7 = 0;
LABEL_29:
    *a2 = v7;
    return 1;
  }
  std::string::size_type v6 = (const char *)a1->__r_.__value_.__r.__words[0];
  if (!strcasecmp(a1->__r_.__value_.__l.__data_, "false") || !strcasecmp(v6, "off") || !strcasecmp(v6, "no")) {
    goto LABEL_27;
  }
  if (!strcasecmp(v6, "true")
    || !strcasecmp(v6, "on")
    || !strcasecmp(v6, "yes")
    || !strcasecmp(v6, "full")
    || !strcasecmp(v6, "streaming"))
  {
LABEL_28:
    uint64_t v7 = 1;
    goto LABEL_29;
  }
  if (!strcasecmp(v6, "lite"))
  {
LABEL_31:
    uint64_t v7 = 2;
    goto LABEL_29;
  }
LABEL_21:
  if (!strcasecmp(v6, "background")) {
    goto LABEL_31;
  }
  size_t __idx = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v7 = std::stol(a1, &__idx, a3);
  uint64_t v8 = 0;
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (__idx == size && (v7 & 0x8000000000000000) == 0) {
    goto LABEL_29;
  }
  return v8;
}

uint64_t sub_1A610931C(void *a1)
{
  return 0;
}

void ___ZN3abm14SystemLogsTask25snapshotOsLogArchive_syncENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_N8dispatch13group_sessionE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315138;
    uint64_t v5 = a2;
    _os_log_error_impl(&dword_1A609F000, v3, OS_LOG_TYPE_ERROR, "Error creating systemlogs archive: %s", (uint8_t *)&v4, 0xCu);
  }
}

void abm::SystemLogsTask::~SystemLogsTask(abm::SystemLogsTask *this)
{
  abm::SystemLogsTask::~SystemLogsTask(this);

  operator delete(v1);
}

{
  NSObject *v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  *(void *)this = &unk_1EFB0ACF0;
  if ((*((char *)this + 167) & 0x80000000) == 0)
  {
    uint64_t v2 = *((void *)this + 17);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*((void **)this + 18));
  uint64_t v2 = *((void *)this + 17);
  if (v2) {
LABEL_3:
  }
    dispatch_release(v2);
LABEL_4:
  *(void *)this = &unk_1EFB0FCB8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  int v4 = *((void *)this + 14);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)this = &unk_1EFB09350;
  MEMORY[0x1A6274710]((char *)this + 8);
  uint64_t v5 = *((void *)this + 12);
  if (v5) {
    dispatch_release(v5);
  }
  uint64_t v6 = *((void *)this + 11);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void *std::vector<std::string>::vector[abi:ne180100](void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = 24 * a3;
    uint64_t v6 = (char *)operator new(24 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      size_t v9 = (std::string *)&v6[v7];
      uint64_t v10 = (long long *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v8 = *v10;
        v9->__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_1A6109504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1A6109518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      int v4 = (void **)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v1, &object);
  xpc_release(object);
}

void sub_1A6109738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void _ZZN8dispatch5asyncIZZN3abm14SystemLogsTask9init_syncEvEUb_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS6_14default_deleteIS8_EEEEENUlPvE_8__invokeESC_(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2) {
    goto LABEL_76;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  int v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    goto LABEL_76;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)a1;
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v6) {
      goto LABEL_76;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6) {
      goto LABEL_76;
    }
  }
  *(_DWORD *)(v3 + 168) = 1;
  memset(&__p, 170, sizeof(__p));
  if (*(char *)(a1 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
  }
  else {
    std::string v31 = *(std::string *)(a1 + 24);
  }
  if (*(char *)(a1 + 71) < 0) {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
  }
  else {
    std::string v30 = *(std::string *)(a1 + 48);
  }
  if (*(char *)(a1 + 95) < 0) {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(a1 + 72), *(void *)(a1 + 80));
  }
  else {
    std::string v29 = *(std::string *)(a1 + 72);
  }
  uint64_t v7 = *(NSObject **)(a1 + 96);
  long long v28 = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  abm::SystemLogsTask::snapshotOsLogArchive_sync(&v30, v3, (const std::string::value_type *)&v31, (uint64_t)&v29, &v28, &__p);
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_23;
      }
      goto LABEL_33;
    }
  }
  else if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(v30.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_23:
    long long v8 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_24;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v31.__r_.__value_.__l.__data_);
  long long v8 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
LABEL_24:
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size) {
      goto LABEL_27;
    }
LABEL_39:
    xpc_object_t v14 = xpc_null_create();
    unint64_t v15 = *(const void **)(a1 + 104);
    if (v15) {
      uint64_t v16 = _Block_copy(v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(NSObject **)(a1 + 112);
    *(void *)&long long buf = MEMORY[0x1E4F143A8];
    *((void *)&buf + 1) = 3321888768;
    int64_t v34 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
    xpc_object_t v35 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
    if (v16)
    {
      uint64_t v18 = _Block_copy(v16);
      int v38 = -534716416;
      aBlocunint64_t k = v18;
      xpc_object_t object = v14;
      if (v14)
      {
LABEL_45:
        xpc_retain(v14);
LABEL_48:
        dispatch_async(v17, &buf);
        xpc_release(object);
        xpc_object_t object = 0;
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v16) {
          _Block_release(v16);
        }
        xpc_release(v14);
        goto LABEL_74;
      }
    }
    else
    {
      int v38 = -534716416;
      aBlocunint64_t k = 0;
      xpc_object_t object = v14;
      if (v14) {
        goto LABEL_45;
      }
    }
    xpc_object_t object = xpc_null_create();
    goto LABEL_48;
  }
LABEL_34:
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(buf) = 136315138;
  *(void *)((char *)&buf + 4) = p_p;
  _os_log_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEFAULT, "#I Snapshot systemlogs archive finished: [path=%s]", (uint8_t *)&buf, 0xCu);
  std::string::size_type v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v13 = __p.__r_.__value_.__l.__size_;
  }
  if (!v13) {
    goto LABEL_39;
  }
LABEL_27:
  xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
  if (v10 || (xpc_object_t v10 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v10) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v10);
      xpc_object_t v11 = v10;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v10 = 0;
  }
  xpc_release(v10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v19 = &__p;
  }
  else {
    int v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v20 = xpc_string_create((const char *)v19);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, "PackagePath", v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  if (v11)
  {
    xpc_retain(v11);
    xpc_object_t v22 = v11;
    long long v23 = *(const void **)(a1 + 104);
    if (v23)
    {
LABEL_61:
      int v24 = _Block_copy(v23);
      goto LABEL_64;
    }
  }
  else
  {
    xpc_object_t v22 = xpc_null_create();
    long long v23 = *(const void **)(a1 + 104);
    if (v23) {
      goto LABEL_61;
    }
  }
  int v24 = 0;
LABEL_64:
  uint64_t v25 = *(NSObject **)(a1 + 112);
  *(void *)&long long buf = MEMORY[0x1E4F143A8];
  *((void *)&buf + 1) = 3321888768;
  int64_t v34 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
  xpc_object_t v35 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
  if (!v24)
  {
    int v38 = 0;
    aBlocunint64_t k = 0;
    xpc_object_t object = v22;
    if (v22) {
      goto LABEL_66;
    }
LABEL_68:
    xpc_object_t object = xpc_null_create();
    goto LABEL_69;
  }
  std::string::size_type v26 = _Block_copy(v24);
  int v38 = 0;
  aBlocunint64_t k = v26;
  xpc_object_t object = v22;
  if (!v22) {
    goto LABEL_68;
  }
LABEL_66:
  xpc_retain(v22);
LABEL_69:
  dispatch_async(v25, &buf);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v24) {
    _Block_release(v24);
  }
  xpc_release(v22);
  xpc_release(v11);
LABEL_74:
  *(_DWORD *)(v3 + 168) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_76:
  uint64_t v27 = (void *)_ZZZN3abm14SystemLogsTask9init_syncEvEUb_EN3__1D1Ev(a1);
  operator delete(v27);
}

void sub_1A6109CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZZN3abm14SystemLogsTask9init_syncEvEUb0_E3__3EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS6_14default_deleteIS8_EEEEENUlPvE_8__invokeESC_(uint64_t a1)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2) {
    goto LABEL_170;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  int v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    goto LABEL_170;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)a1;
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v6) {
      goto LABEL_170;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6) {
      goto LABEL_170;
    }
  }
  if (!*(unsigned char *)(a1 + 16))
  {
    uint64_t v7 = (long long *)(a1 + 56);
    long long v8 = (void **)(v3 + 144);
    if (v3 + 144 != a1 + 56)
    {
      char v9 = *(unsigned char *)(a1 + 79);
      if (*(char *)(v3 + 167) < 0)
      {
        if (v9 >= 0) {
          xpc_object_t v20 = (void *)(a1 + 56);
        }
        else {
          xpc_object_t v20 = *(void **)(a1 + 56);
        }
        if (v9 >= 0) {
          size_t v21 = *(unsigned __int8 *)(a1 + 79);
        }
        else {
          size_t v21 = *(void *)(a1 + 64);
        }
        std::string::__assign_no_alias<false>(v8, v20, v21);
      }
      else if ((*(unsigned char *)(a1 + 79) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v8, *(void **)(a1 + 56), *(void *)(a1 + 64));
      }
      else
      {
        long long v10 = *v7;
        *(void *)(v3 + 160) = *(void *)(a1 + 72);
        *(_OWORD *)long long v8 = v10;
      }
    }
    *(_DWORD *)(v3 + 168) = 2;
    memset(&__p, 170, sizeof(__p));
    if (*(char *)(a1 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
    }
    else
    {
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *v7;
      v61.__r_.__value_.__r.__words[2] = *(void *)(a1 + 72);
    }
    if (*(char *)(a1 + 55) < 0) {
      std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
    }
    else {
      std::string v60 = *(std::string *)(a1 + 32);
    }
    int v24 = *(NSObject **)(a1 + 80);
    if (v24)
    {
      dispatch_retain(*(dispatch_object_t *)(a1 + 80));
      dispatch_group_enter(v24);
    }
    abm::SystemLogsTask::snapshotSysdiagnose_sync(v3, (uint64_t)&v61, (uint64_t)&v60, &__p);
    if (v24)
    {
      dispatch_group_leave(v24);
      dispatch_release(v24);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v60.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_80:
        uint64_t v25 = *(NSObject **)(v3 + 40);
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_81;
        }
        goto LABEL_90;
      }
    }
    else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_80;
    }
    operator delete(v61.__r_.__value_.__l.__data_);
    uint64_t v25 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
LABEL_81:
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (size) {
        goto LABEL_84;
      }
      goto LABEL_95;
    }
LABEL_90:
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    LODWORD(block) = 136315138;
    *(void *)((char *)&block + 4) = p_p;
    _os_log_impl(&dword_1A609F000, v25, OS_LOG_TYPE_DEFAULT, "#I Snapshot sysdiagnose finished: [path=%s]", (uint8_t *)&block, 0xCu);
    std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
    }
    if (v30)
    {
LABEL_84:
      xpc_object_t v27 = xpc_dictionary_create(0, 0, 0);
      if (v27 || (xpc_object_t v27 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A6275E60](v27) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v27);
          xpc_object_t v28 = v27;
        }
        else
        {
          xpc_object_t v28 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v28 = xpc_null_create();
        xpc_object_t v27 = 0;
      }
      xpc_release(v27);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v49 = &__p;
      }
      else {
        long long v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v50 = xpc_string_create((const char *)v49);
      if (!v50) {
        xpc_object_t v50 = xpc_null_create();
      }
      xpc_dictionary_set_value(v28, "PackagePath", v50);
      xpc_object_t v51 = xpc_null_create();
      xpc_release(v50);
      xpc_release(v51);
      if (v28)
      {
        xpc_retain(v28);
        xpc_object_t v52 = v28;
        long long v53 = *(const void **)(a1 + 88);
        if (v53)
        {
LABEL_154:
          uint64_t v54 = _Block_copy(v53);
          goto LABEL_157;
        }
      }
      else
      {
        xpc_object_t v52 = xpc_null_create();
        long long v53 = *(const void **)(a1 + 88);
        if (v53) {
          goto LABEL_154;
        }
      }
      uint64_t v54 = 0;
LABEL_157:
      uint64_t v55 = *(NSObject **)(a1 + 96);
      *(void *)&blocunint64_t k = MEMORY[0x1E4F143A8];
      *((void *)&block + 1) = 3321888768;
      std::string v68 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
      uint64_t v69 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
      if (v54)
      {
        long long v56 = _Block_copy(v54);
        int v72 = 0;
        long long v70 = v56;
        xpc_object_t v71 = v52;
        if (v52)
        {
LABEL_159:
          xpc_retain(v52);
LABEL_162:
          dispatch_async(v55, &block);
          xpc_release(v71);
          xpc_object_t v71 = 0;
          if (v70) {
            _Block_release(v70);
          }
          if (v54) {
            _Block_release(v54);
          }
          xpc_release(v52);
          xpc_release(v28);
          goto LABEL_167;
        }
      }
      else
      {
        int v72 = 0;
        long long v70 = 0;
        xpc_object_t v71 = v52;
        if (v52) {
          goto LABEL_159;
        }
      }
      xpc_object_t v71 = xpc_null_create();
      goto LABEL_162;
    }
LABEL_95:
    xpc_object_t v31 = xpc_null_create();
    long long v32 = *(const void **)(a1 + 88);
    if (v32) {
      time_t v33 = _Block_copy(v32);
    }
    else {
      time_t v33 = 0;
    }
    int64_t v34 = *(NSObject **)(a1 + 96);
    *(void *)&blocunint64_t k = MEMORY[0x1E4F143A8];
    *((void *)&block + 1) = 3321888768;
    std::string v68 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
    uint64_t v69 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
    if (v33) {
      xpc_object_t v35 = _Block_copy(v33);
    }
    else {
      xpc_object_t v35 = 0;
    }
    int v72 = -534716416;
    long long v70 = v35;
    xpc_object_t v71 = v31;
    if (v31) {
      xpc_retain(v31);
    }
    else {
      xpc_object_t v71 = xpc_null_create();
    }
    dispatch_async(v34, &block);
    xpc_release(v71);
    xpc_object_t v71 = 0;
    if (v70) {
      _Block_release(v70);
    }
    if (v33) {
      _Block_release(v33);
    }
    xpc_release(v31);
LABEL_167:
    if (*(char *)(v3 + 167) < 0)
    {
      **(unsigned char **)(v3 + 144) = 0;
      *(void *)(v3 + 152) = 0;
      *(_DWORD *)(v3 + 168) = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_170;
      }
    }
    else
    {
      *(unsigned char *)(v3 + 144) = 0;
      *(unsigned char *)(v3 + 167) = 0;
      *(_DWORD *)(v3 + 168) = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_170;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_170;
  }
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && (TelephonyUtilIsCarrierBuild() & 1) == 0) {
    goto LABEL_133;
  }
  *(_DWORD *)(v3 + 168) = 1;
  memset(&__p, 170, sizeof(__p));
  if (*(char *)(a1 + 79) < 0) {
    std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
  }
  else {
    std::string v61 = *(std::string *)(a1 + 56);
  }
  if (*(char *)(a1 + 127) < 0) {
    std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(a1 + 104), *(void *)(a1 + 112));
  }
  else {
    std::string v60 = *(std::string *)(a1 + 104);
  }
  if (*(char *)(a1 + 151) < 0) {
    std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)(a1 + 128), *(void *)(a1 + 136));
  }
  else {
    std::string v59 = *(std::string *)(a1 + 128);
  }
  xpc_object_t v11 = *(NSObject **)(a1 + 80);
  uid_t v58 = v11;
  if (v11)
  {
    dispatch_retain(v11);
    dispatch_group_enter(v11);
  }
  abm::SystemLogsTask::snapshotOsLogArchive_sync(&v60, v3, (const std::string::value_type *)&v61, (uint64_t)&v59, &v58, &__p);
  if (v11)
  {
    dispatch_group_leave(v11);
    dispatch_release(v11);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v59.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_29:
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_30;
      }
      goto LABEL_34;
    }
  }
  else if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete(v60.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    uint64_t v12 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v61.__r_.__value_.__l.__data_);
  uint64_t v12 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_39;
  }
LABEL_35:
  HIBYTE(v68) = 7;
  strcpy((char *)&block, "Dismiss");
  std::string::size_type v13 = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)long long buf = 136315394;
  p_blocunint64_t k = &block;
  __int16 v65 = 2080;
  std::string v66 = v13;
  _os_log_impl(&dword_1A609F000, v12, OS_LOG_TYPE_DEFAULT, "#I Snapshot systemlogs archive finished: option=%s [path=%s]", buf, 0x16u);
  if (SHIBYTE(v68) < 0) {
    operator delete((void *)block);
  }
LABEL_39:
  std::string::size_type v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
  }
  if (!v14)
  {
    xpc_object_t v17 = xpc_null_create();
    uint64_t v18 = *(const void **)(a1 + 88);
    if (v18) {
      int v19 = _Block_copy(v18);
    }
    else {
      int v19 = 0;
    }
    xpc_object_t v22 = *(NSObject **)(a1 + 96);
    *(void *)&blocunint64_t k = MEMORY[0x1E4F143A8];
    *((void *)&block + 1) = 3321888768;
    std::string v68 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
    uint64_t v69 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
    if (v19)
    {
      long long v23 = _Block_copy(v19);
      int v72 = -534716416;
      long long v70 = v23;
      xpc_object_t v71 = v17;
      if (v17)
      {
LABEL_59:
        xpc_retain(v17);
LABEL_62:
        dispatch_async(v22, &block);
        xpc_release(v71);
        xpc_object_t v71 = 0;
        if (v70) {
          _Block_release(v70);
        }
        if (v19) {
          _Block_release(v19);
        }
        xpc_release(v17);
        goto LABEL_131;
      }
    }
    else
    {
      int v72 = -534716416;
      long long v70 = 0;
      xpc_object_t v71 = v17;
      if (v17) {
        goto LABEL_59;
      }
    }
    xpc_object_t v71 = xpc_null_create();
    goto LABEL_62;
  }
  xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
  if (v15 || (xpc_object_t v15 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v15) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v15);
      xpc_object_t v16 = v15;
    }
    else
    {
      xpc_object_t v16 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v16 = xpc_null_create();
    xpc_object_t v15 = 0;
  }
  xpc_release(v15);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v36 = &__p;
  }
  else {
    xpc_object_t v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v37 = xpc_string_create((const char *)v36);
  if (!v37) {
    xpc_object_t v37 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, "PackagePath", v37);
  xpc_object_t v38 = xpc_null_create();
  xpc_release(v37);
  xpc_release(v38);
  if (v16)
  {
    xpc_retain(v16);
    xpc_object_t v39 = v16;
    long long v40 = *(const void **)(a1 + 88);
    if (v40)
    {
LABEL_118:
      uint64_t v41 = _Block_copy(v40);
      goto LABEL_121;
    }
  }
  else
  {
    xpc_object_t v39 = xpc_null_create();
    long long v40 = *(const void **)(a1 + 88);
    if (v40) {
      goto LABEL_118;
    }
  }
  uint64_t v41 = 0;
LABEL_121:
  xpc_object_t v42 = *(NSObject **)(a1 + 96);
  *(void *)&blocunint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 3321888768;
  std::string v68 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
  uint64_t v69 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
  if (!v41)
  {
    int v72 = 0;
    long long v70 = 0;
    xpc_object_t v71 = v39;
    if (v39) {
      goto LABEL_123;
    }
LABEL_125:
    xpc_object_t v71 = xpc_null_create();
    goto LABEL_126;
  }
  xpc_object_t v43 = _Block_copy(v41);
  int v72 = 0;
  long long v70 = v43;
  xpc_object_t v71 = v39;
  if (!v39) {
    goto LABEL_125;
  }
LABEL_123:
  xpc_retain(v39);
LABEL_126:
  dispatch_async(v42, &block);
  xpc_release(v71);
  xpc_object_t v71 = 0;
  if (v70) {
    _Block_release(v70);
  }
  if (v41) {
    _Block_release(v41);
  }
  xpc_release(v39);
  xpc_release(v16);
LABEL_131:
  *(_DWORD *)(v3 + 168) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_133:
  xpc_object_t v44 = xpc_null_create();
  xpc_object_t v45 = *(const void **)(a1 + 88);
  if (v45) {
    xpc_object_t v46 = _Block_copy(v45);
  }
  else {
    xpc_object_t v46 = 0;
  }
  xpc_object_t v47 = *(NSObject **)(a1 + 96);
  *(void *)&blocunint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 3321888768;
  std::string v68 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
  uint64_t v69 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
  if (!v46)
  {
    int v72 = -534716416;
    long long v70 = 0;
    xpc_object_t v71 = v44;
    if (v44) {
      goto LABEL_138;
    }
LABEL_140:
    xpc_object_t v71 = xpc_null_create();
    goto LABEL_141;
  }
  xpc_object_t v48 = _Block_copy(v46);
  int v72 = -534716416;
  long long v70 = v48;
  xpc_object_t v71 = v44;
  if (!v44) {
    goto LABEL_140;
  }
LABEL_138:
  xpc_retain(v44);
LABEL_141:
  dispatch_async(v47, &block);
  xpc_release(v71);
  xpc_object_t v71 = 0;
  if (v70) {
    _Block_release(v70);
  }
  if (v46) {
    _Block_release(v46);
  }
  xpc_release(v44);
  *(_DWORD *)(v3 + 168) = 0;
LABEL_170:
  gid_t v57 = (void *)_ZZZN3abm14SystemLogsTask9init_syncEvEUb0_EN3__3D1Ev(a1);
  operator delete(v57);
}

void sub_1A610A8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __cxx_global_var_init_47()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance, &dword_1A609F000);
  }
  return result;
}

double BasebandIPCTraceICE::createInternal@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = (BasebandIPCTraceICE *)operator new(0xA8uLL);
  BasebandIPCTraceICE::BasebandIPCTraceICE(v3);
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<BasebandIPCTraceICE>::shared_ptr[abi:ne180100]<BasebandIPCTraceICE,std::shared_ptr<BasebandIPCTraceICE> ctu::SharedSynchronizable<Trace>::make_shared_ptr<BasebandIPCTraceICE>(BasebandIPCTraceICE*)::{lambda(BasebandIPCTraceICE*)#1},void>(&v5, (uint64_t)v3);
  ctu::Loggable<Trace,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v5);
  double result = *(double *)&v5;
  *a1 = v5;
  return result;
}

void sub_1A610AB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A610AB44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void BasebandIPCTraceICE::BasebandIPCTraceICE(BasebandIPCTraceICE *this)
{
  char v7 = 11;
  strcpy((char *)__p, "trace.bbipc");
  Trace::Trace((uint64_t)this, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  *(void *)this = &unk_1EFB0AD98;
  char v5 = 11;
  strcpy((char *)v4, "BasebandIPC");
  char isSupported = abm::trace::isSupported((uint64_t)v4);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  *((unsigned char *)this + 152) = isSupported;
  uint64_t v3 = (*(uint64_t (**)(BasebandIPCTraceICE *))(*(void *)this + 160))(this);
  if (*(char *)(v3 + 23) < 0) {
    uint64_t v3 = *(void *)v3;
  }
  *((void *)this + 20) = dispatch_queue_create((const char *)v3, 0);
}

void sub_1A610AC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  Trace::~Trace(v14);
  _Unwind_Resume(a1);
}

void sub_1A610AC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BasebandIPCTraceICE::init(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject **a4)
{
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    std::string v18 = *(std::string *)a2;
    char v7 = (std::__shared_weak_count *)a3[1];
    uint64_t v16 = *a3;
    xpc_object_t v17 = v7;
    if (!v7) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  char v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v16 = *a3;
  xpc_object_t v17 = v7;
  if (v7) {
LABEL_3:
  }
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
LABEL_4:
  long long v8 = *a4;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  int v9 = Trace::init(a1, (void **)&v18.__r_.__value_.__l.__data_, &v16, &object);
  if (object) {
    dispatch_release(object);
  }
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v9) {
      goto LABEL_12;
    }
    return 0;
  }
  operator delete(v18.__r_.__value_.__l.__data_);
  if (!v9) {
    return 0;
  }
LABEL_12:
  char v14 = 7;
  strcpy((char *)v13, "Enabled");
  memset(&v19, 0, sizeof(v19));
  char v21 = 11;
  strcpy((char *)__p, "BasebandIPC");
  memset(&v23, 0, sizeof(v23));
  BOOL v10 = defaults::get((char *)__p, (char *)v13, &v23);
  if (v10)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)v13, (uint64_t)&v23, &v22);
    std::string v19 = v22;
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_16:
      if (v10) {
        goto LABEL_17;
      }
LABEL_26:
      uint64_t v11 = 0;
      if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
  }
  else if ((v21 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(__p[0]);
  if (!v10) {
    goto LABEL_26;
  }
LABEL_17:
  uint64_t v11 = util::convert<BOOL>(&v19, (BOOL *)(a1 + 152), 0);
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_28;
  }
LABEL_27:
  operator delete(v19.__r_.__value_.__l.__data_);
LABEL_28:
  if ((v14 & 0x80000000) == 0) {
    return v11;
  }
  operator delete(v13[0]);
  return v11;
}

void sub_1A610AEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, dispatch_object_t object, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void BasebandIPCTraceICE::~BasebandIPCTraceICE(BasebandIPCTraceICE *this)
{
  *(void *)this = &unk_1EFB0AD98;
  uint64_t v2 = *((void *)this + 20);
  if (v2) {
    dispatch_release(v2);
  }

  Trace::~Trace(this);
}

{
  NSObject *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EFB0AD98;
  uint64_t v2 = *((void *)this + 20);
  if (v2) {
    dispatch_release(v2);
  }

  Trace::~Trace(this);
}

{
  NSObject *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EFB0AD98;
  uint64_t v2 = *((void *)this + 20);
  if (v2) {
    dispatch_release(v2);
  }
  Trace::~Trace(this);

  operator delete(v3);
}

uint64_t BasebandIPCTraceICE::snapshot(uint64_t a1, NSObject **a2, const __CFDictionary **a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  v34[0] = 0xAAAAAAAAAAAAAAAALL;
  v34[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v34, *a3);
  memset(v33, 170, sizeof(v33));
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, "kKeyTraceAction");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A62748E0](buf);
  memset(__p, 170, sizeof(__p));
  strcpy((char *)buf, "kTraceFilterActionNone");
  char v37 = 22;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v35, "kKeyTraceFilterAction");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A62748E0](&v35);
  if (v37 < 0) {
    operator delete(*(void **)buf);
  }
  char v5 = (void *)HIBYTE(__p[2]);
  int v6 = SHIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) < 0) {
    char v5 = __p[1];
  }
  if (v5 != (void *)22) {
    goto LABEL_15;
  }
  char v7 = (void **)__p[0];
  if (SHIBYTE(__p[2]) >= 0) {
    char v7 = __p;
  }
  long long v8 = *v7;
  int v9 = v7[1];
  uint64_t v10 = *(uint64_t *)((char *)v7 + 14);
  BOOL v11 = v8 == *(void **)"kTraceFilterActionNone" && v9 == *(void **)"lterActionNone";
  if (!v11 || v10 != *(void *)"tionNone")
  {
LABEL_15:
    std::string::size_type v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    char v14 = (void **)__p[0];
    if (v6 >= 0) {
      char v14 = __p;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v14;
    xpc_object_t v15 = "#I Skipping snapshot as trace filter is '%s'";
    uint64_t v16 = v13;
    uint32_t v17 = 12;
    goto LABEL_19;
  }
  std::string v19 = (void *)HIBYTE(v33[2]);
  if (SHIBYTE(v33[2]) < 0) {
    std::string v19 = v33[1];
  }
  if (v19 != (void *)21) {
    goto LABEL_37;
  }
  xpc_object_t v20 = v33;
  if (SHIBYTE(v33[2]) < 0) {
    xpc_object_t v20 = (void **)v33[0];
  }
  char v21 = *v20;
  std::string v22 = v20[1];
  uint64_t v23 = *(uint64_t *)((char *)v20 + 13);
  BOOL v24 = v21 == *(void **)"kCollectTelephonyLogs" && v22 == *(void **)"TelephonyLogs";
  if (v24 && v23 == *(void *)"honyLogs")
  {
    xpc_object_t v27 = *a2;
    if (v27)
    {
      dispatch_retain(v27);
      dispatch_group_enter(v27);
    }
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 1174405120;
    void v29[2] = ___ZN19BasebandIPCTraceICE8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
    v29[3] = &__block_descriptor_tmp_8_0;
    v29[4] = a1;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v30, (const ctu::cf::dict_adapter *)v34);
    xpc_object_t v28 = (uint64_t *)(a1 + 72);
    dispatch_group_t group = v27;
    if (v27)
    {
      dispatch_retain(v27);
      if (group) {
        dispatch_group_enter(group);
      }
    }
    ctu::SharedSynchronizable<Trace>::execute_wrapped(v28, (uint64_t)v29);
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    MEMORY[0x1A6274930](v30);
    if (v27)
    {
      dispatch_group_leave(v27);
      dispatch_release(v27);
    }
  }
  else
  {
LABEL_37:
    std::string::size_type v26 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      xpc_object_t v15 = "#I Skipping";
      uint64_t v16 = v26;
      uint32_t v17 = 2;
LABEL_19:
      _os_log_impl(&dword_1A609F000, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
    }
  }
LABEL_20:
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v33[2]) & 0x80000000) == 0) {
      return MEMORY[0x1A6274930](v34);
    }
LABEL_24:
    operator delete(v33[0]);
    return MEMORY[0x1A6274930](v34);
  }
  if (SHIBYTE(v33[2]) < 0) {
    goto LABEL_24;
  }
  return MEMORY[0x1A6274930](v34);
}

void sub_1A610B3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (v29)
  {
    dispatch_group_leave(v29);
    dispatch_release(v29);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    MEMORY[0x1A6274930](v30 - 104);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1A6274930](v30 - 104);
  _Unwind_Resume(a1);
}

void ___ZN19BasebandIPCTraceICE8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 144);
  if (v3)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 144));
    dispatch_group_enter(v3);
  }
  if (!*(unsigned char *)(v2 + 152)) {
    goto LABEL_80;
  }
  memset(v56, 170, 24);
  int v4 = (const void *)*MEMORY[0x1E4F4C3A0];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C3A0]);
  if (v5 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    char v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    std::string __dst[2] = (void *)(v9 | 0x8000000000000000);
    __dst[0] = v7;
    goto LABEL_11;
  }
  HIBYTE(__dst[2]) = v5;
  char v7 = __dst;
  if (v5) {
LABEL_11:
  }
    memmove(v7, v4, (size_t)v6);
  uint64_t v10 = (const char *)*MEMORY[0x1E4F4C4C8];
  *((unsigned char *)v6 + (void)v7) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, v10);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A62748E0](&__p);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  memset(__dst, 170, sizeof(__dst));
  BOOL v11 = abm::trace::kSnapshotFolder[0];
  size_t v12 = strlen(abm::trace::kSnapshotFolder[0]);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    p_p = (std::string *)operator new(v15 + 1);
    __p.__r_.__value_.__l.__size_ = v13;
    __p.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_21;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v12;
  p_p = &__p;
  if (v12) {
LABEL_21:
  }
    memmove(p_p, v11, v13);
  p_p->__r_.__value_.__s.__data_[v13] = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v53, "kKeyTraceDumpStatePath");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A62748E0](&v53);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint32_t v17 = abm::trace::kLogDirPrefix[0];
  size_t v18 = strlen(abm::trace::kLogDirPrefix[0]);
  if (v18 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v19 = v18;
  if (v18 >= 0x17)
  {
    uint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v21 = v18 | 7;
    }
    uint64_t v22 = v21 + 1;
    xpc_object_t v20 = operator new(v21 + 1);
    v52.__r_.__value_.__l.__size_ = v19;
    v52.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    goto LABEL_31;
  }
  *((unsigned char *)&v52.__r_.__value_.__s + 23) = v18;
  xpc_object_t v20 = &v52;
  if (v18) {
LABEL_31:
  }
    memmove(v20, v17, v19);
  *((unsigned char *)v20 + v19) = 0;
  if (SHIBYTE(__dst[2]) >= 0) {
    uint64_t v23 = (const std::string::value_type *)__dst;
  }
  else {
    uint64_t v23 = (const std::string::value_type *)__dst[0];
  }
  if (SHIBYTE(__dst[2]) >= 0) {
    std::string::size_type v24 = HIBYTE(__dst[2]);
  }
  else {
    std::string::size_type v24 = (std::string::size_type)__dst[1];
  }
  uint64_t v25 = std::string::insert(&v52, 0, v23, v24);
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v56[2]) >= 0) {
    xpc_object_t v27 = (const std::string::value_type *)v56;
  }
  else {
    xpc_object_t v27 = (const std::string::value_type *)v56[0];
  }
  if (SHIBYTE(v56[2]) >= 0) {
    std::string::size_type v28 = HIBYTE(v56[2]);
  }
  else {
    std::string::size_type v28 = (std::string::size_type)v56[1];
  }
  std::string v29 = std::string::append(&v53, v27, v28);
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  xpc_object_t v31 = std::string::append(&__p, "-bbipc", 6uLL);
  std::string::size_type size = v31->__r_.__value_.__l.__size_;
  std::string __s = (std::string::value_type *)v31->__r_.__value_.__r.__words[0];
  std::string::size_type v33 = v31->__r_.__value_.__r.__words[2];
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_46;
    }
LABEL_62:
    operator delete(v53.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_63;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_62;
  }
LABEL_46:
  if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_47;
  }
LABEL_63:
  operator delete(v52.__r_.__value_.__l.__data_);
LABEL_47:
  int64_t v34 = abm::trace::kScratchFolder[0];
  size_t v35 = strlen(abm::trace::kScratchFolder[0]);
  if (v35 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v36 = v35;
  if (v35 >= 0x17)
  {
    uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v38 = v35 | 7;
    }
    uint64_t v39 = v38 + 1;
    char v37 = (std::string *)operator new(v38 + 1);
    __p.__r_.__value_.__l.__size_ = v36;
    __p.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
    goto LABEL_54;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v35;
  char v37 = &__p;
  if (v35) {
LABEL_54:
  }
    memmove(v37, v34, v36);
  v37->__r_.__value_.__s.__data_[v36] = 0;
  long long v40 = std::string::append(&__p, "bbipc.scratch", 0xDuLL);
  uint64_t v41 = (std::string::value_type *)v40->__r_.__value_.__r.__words[0];
  std::string::size_type v42 = v40->__r_.__value_.__l.__size_;
  std::string::size_type v43 = v40->__r_.__value_.__r.__words[2];
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN19BasebandIPCTraceICE8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_2;
  uint64_t block[3] = &__block_descriptor_tmp_7_3;
  xpc_object_t v45 = *(NSObject **)(a1 + 56);
  void block[4] = v2;
  dispatch_group_t group = v45;
  if (v45)
  {
    dispatch_retain(v45);
    dispatch_group_enter(group);
  }
  if ((v43 & 0x8000000000000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v50, v41, v42);
  }
  else
  {
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
    v50.__r_.__value_.__l.__size_ = v42;
    v50.__r_.__value_.__r.__words[2] = v43;
  }
  if ((v33 & 0x8000000000000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v51, __s, size);
  }
  else
  {
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
    v51.__r_.__value_.__l.__size_ = size;
    v51.__r_.__value_.__r.__words[2] = v33;
  }
  dispatch_async(global_queue, block);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v51.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_70:
      xpc_object_t v46 = group;
      if (!group) {
        goto LABEL_76;
      }
      goto LABEL_74;
    }
  }
  else if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_70;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  xpc_object_t v46 = group;
  if (!group) {
    goto LABEL_76;
  }
LABEL_74:
  dispatch_group_leave(v46);
  if (group) {
    dispatch_release(group);
  }
LABEL_76:
  if ((v43 & 0x8000000000000000) != 0)
  {
    operator delete(v41);
    if ((v33 & 0x8000000000000000) == 0)
    {
LABEL_78:
      if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
        goto LABEL_79;
      }
      goto LABEL_85;
    }
  }
  else if ((v33 & 0x8000000000000000) == 0)
  {
    goto LABEL_78;
  }
  operator delete(__s);
  if (SHIBYTE(__dst[2]) < 0)
  {
LABEL_85:
    operator delete(__dst[0]);
    if (SHIBYTE(v56[2]) < 0) {
      goto LABEL_86;
    }
LABEL_80:
    if (!v3) {
      return;
    }
    goto LABEL_81;
  }
LABEL_79:
  if ((SHIBYTE(v56[2]) & 0x80000000) == 0) {
    goto LABEL_80;
  }
LABEL_86:
  operator delete(v56[0]);
  if (v3)
  {
LABEL_81:
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_1A610BA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v45 < 0) {
    operator delete(v44);
  }
  if (v46 < 0) {
    operator delete(a9);
  }
  if (*(char *)(v47 - 113) < 0) {
    operator delete(*(void **)(v47 - 136));
  }
  if (*(char *)(v47 - 89) < 0) {
    operator delete(*(void **)(v47 - 112));
  }
  if (v43)
  {
    dispatch_group_leave(v43);
    dispatch_release(v43);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A610BBC0()
{
  if (!v0) {
    JUMPOUT(0x1A610BBB8);
  }
  JUMPOUT(0x1A610BBA8);
}

void ___ZN19BasebandIPCTraceICE8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_2(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = (ctu::XpcJetsamAssertion *)pthread_mutex_lock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  uint64_t v4 = xmmword_1EB5EE590;
  if (!(void)xmmword_1EB5EE590)
  {
    ctu::XpcJetsamAssertion::create_default_global((uint64_t *)v25, v3);
    long long v5 = v25[0];
    v25[0] = 0uLL;
    int v6 = (std::__shared_weak_count *)*((void *)&xmmword_1EB5EE590 + 1);
    xmmword_1EB5EE590 = v5;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    char v7 = (std::__shared_weak_count *)*((void *)&v25[0] + 1);
    if (*((void *)&v25[0] + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v25[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    uint64_t v4 = xmmword_1EB5EE590;
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)&xmmword_1EB5EE590 + 1);
  *(void *)long long buf = v4;
  *(void *)&uint8_t buf[8] = *((void *)&xmmword_1EB5EE590 + 1);
  if (*((void *)&xmmword_1EB5EE590 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1EB5EE590 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  *(void *)&v26[1] = operator new(0x20uLL);
  long long v27 = xmmword_1A61F8040;
  strcpy(*(char **)&v26[1], "Baseband IPC Trace ICE Snapshot");
  ctu::XpcJetsamAssertion::createActivity();
  if (SHIBYTE(v27) < 0) {
    operator delete(*(void **)&v26[1]);
  }
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  v26[0] = 0;
  uint64_t v9 = (void *)(a1 + 48);
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25[0] = v10;
  v25[1] = v10;
  if (!support::fs::createDir((const char *)(a1 + 48), 0x1EDu, 1))
  {
    std::string::size_type v19 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_49;
    }
    if (*(char *)(a1 + 71) < 0) {
      uint64_t v9 = (void *)*v9;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v9;
    uint64_t v16 = "#E Failed create %s";
    uint32_t v17 = v19;
LABEL_34:
    uint32_t v18 = 12;
LABEL_35:
    _os_log_impl(&dword_1A609F000, v17, OS_LOG_TYPE_DEFAULT, v16, buf, v18);
    goto LABEL_49;
  }
  int v11 = AriHost::RegisterClient((AriHost *)"BBIPCTrace", (const char *)v26, *(int **)(v2 + 160), (dispatch_queue_s *)0xFFFFFFFFLL);
  int v12 = v26[0];
  if (v11 || !v26[0])
  {
    xpc_object_t v20 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_49;
    }
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v12;
    uint64_t v21 = "Failed AriHost::RegisterClient 0x%x";
LABEL_44:
    _os_log_error_impl(&dword_1A609F000, v20, OS_LOG_TYPE_ERROR, v21, buf, 8u);
    goto LABEL_49;
  }
  if ((KTLInitOptions() & 1) == 0)
  {
    xpc_object_t v20 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_49;
    }
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v26[0];
    uint64_t v21 = "Failed KTLInitOptions 0x%x";
    goto LABEL_44;
  }
  if ((KTLOpenChannel() & 1) == 0)
  {
    xpc_object_t v20 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_49;
    }
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v26[0];
    uint64_t v21 = "Failed KTLOpenChannel 0x%x";
    goto LABEL_44;
  }
  if ((GetBBIPCLogs() & 1) == 0)
  {
    xpc_object_t v20 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_49;
    }
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v26[0];
    uint64_t v21 = "Failed GetBBIPCLogs 0x%x";
    goto LABEL_44;
  }
  std::string::size_type v13 = (void *)(a1 + 72);
  if (!support::fs::createDir((const char *)(a1 + 72), 0x1EDu, 1))
  {
    uint64_t v22 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_49;
    }
    if (*(char *)(a1 + 95) < 0) {
      std::string::size_type v13 = (void *)*v13;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v13;
    uint64_t v16 = "#E Failed create dir %s";
    uint32_t v17 = v22;
    goto LABEL_34;
  }
  if (!support::fs::rename((const std::__fs::filesystem::path *)(a1 + 48), (const std::__fs::filesystem::path *)(a1 + 72), v14))
  {
    uint64_t v15 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 71) < 0) {
        uint64_t v9 = (void *)*v9;
      }
      if (*(char *)(a1 + 95) < 0) {
        std::string::size_type v13 = (void *)*v13;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v13;
      uint64_t v16 = "#E Failed to move %s to %s";
      uint32_t v17 = v15;
      uint32_t v18 = 22;
      goto LABEL_35;
    }
  }
LABEL_49:
  if (v26[0]
    && AriHost::DeregisterClient((AriHost *)v26[0])
    && (uint64_t v23 = *(NSObject **)(v2 + 40), os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v26[0];
    _os_log_error_impl(&dword_1A609F000, v23, OS_LOG_TYPE_ERROR, "Failed deregistering ARI Client: 0x%x", buf, 8u);
    std::string::size_type v24 = (std::__shared_weak_count *)v29;
    if (!v29) {
      return;
    }
  }
  else
  {
    std::string::size_type v24 = (std::__shared_weak_count *)v29;
    if (!v29) {
      return;
    }
  }
  if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
}

void sub_1A610C17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
}

void sub_1A610C1D8(_Unwind_Exception *a1)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

void ___ZN19BasebandIPCTraceICE8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  long long v5 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 134217984;
    double v7 = (double)a2 * 100.0 / (double)a3;
    _os_log_impl(&dword_1A609F000, v5, OS_LOG_TYPE_DEFAULT, "#I Progress: %f", (uint8_t *)&v6, 0xCu);
  }
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a2 + 40);
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
  if (v4)
  {
    dispatch_retain(v4);
    long long v5 = a1[1].__r_.__value_.__r.__words[2];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 2, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&a1[2].__r_.__value_.__l.__data_ = v6;
  }
  double v7 = a1 + 3;
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(void *)(a2 + 88);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_1A610C360(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(NSObject **)(v1 + 40);
  if (v4)
  {
    dispatch_group_leave(v4);
    long long v5 = *(NSObject **)(v1 + 40);
    if (v5) {
      dispatch_release(v5);
    }
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(NSObject **)(a1 + 40);
      if (!v2) {
        return;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 48));
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (!v2) {
    return;
  }
LABEL_7:
  dispatch_group_leave(v2);
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_release(v3);
  }
}

void __copy_helper_block_e8_40c27_ZTSN3ctu2cf12dict_adapterE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)(a1 + 40), (const ctu::cf::dict_adapter *)(a2 + 40));
  uint64_t v4 = *(NSObject **)(a2 + 56);
  *(void *)(a1 + 56) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    long long v5 = *(NSObject **)(a1 + 56);
    if (v5)
    {
      dispatch_group_enter(v5);
    }
  }
}

void __destroy_helper_block_e8_40c27_ZTSN3ctu2cf12dict_adapterE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 56);
    if (v3) {
      dispatch_release(v3);
    }
  }

  JUMPOUT(0x1A6274930);
}

void BasebandIPCTraceICE::dumpState(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1174405120;
  uint64_t v4[2] = ___ZN19BasebandIPCTraceICE9dumpStateEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
  v4[3] = &__block_descriptor_tmp_9_2;
  v4[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v4);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void ___ZN19BasebandIPCTraceICE9dumpStateEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 144);
  if (v2)
  {
    dispatch_retain(*(dispatch_object_t *)(v1 + 144));
    dispatch_group_enter(v2);
  }
  uint64_t v3 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(v1 + 152);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Enabled = %d", (uint8_t *)v5, 8u);
  }
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

BOOL BasebandIPCTraceICE::setProperty(uint64_t a1, dispatch_object_t *a2, uint64_t a3, uint64_t a4)
{
  double v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  uint64_t v16 = 0;
  uint32_t v17 = &v16;
  uint64_t v18 = 0x2000000000;
  char v19 = 0;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  void v12[2] = ___ZN19BasebandIPCTraceICE11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke;
  v12[3] = &unk_1EFB0AED8;
  void v12[5] = a1;
  dispatch_group_t group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(group);
  }
  v12[4] = &v16;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  xpc_object_t v20 = v12;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_1;
  uint64_t block[3] = &__block_descriptor_tmp_55;
  void block[4] = a1 + 72;
  void block[5] = &v20;
  long long v8 = *(NSObject **)(a1 + 88);
  if (*(void *)(a1 + 96))
  {
    dispatch_async_and_wait(v8, block);
    int v9 = *((unsigned __int8 *)v17 + 24);
    long long v10 = group;
    if (!group) {
      goto LABEL_11;
    }
  }
  else
  {
    dispatch_sync(v8, block);
    int v9 = *((unsigned __int8 *)v17 + 24);
    long long v10 = group;
    if (!group) {
      goto LABEL_11;
    }
  }
  dispatch_group_leave(v10);
  if (group) {
    dispatch_release(group);
  }
LABEL_11:
  _Block_object_dispose(&v16, 8);
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  return v9 != 0;
}

void ___ZN19BasebandIPCTraceICE11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = prop::bbipc::set(*(char **)(a1 + 56), *(char **)(a1 + 64));
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v3 + 24))
  {
    int v4 = *(char **)(a1 + 56);
    memset(&v6, 0, sizeof(v6));
    char v8 = 11;
    strcpy((char *)__p, "BasebandIPC");
    memset(&v10, 0, sizeof(v10));
    int v5 = defaults::get((char *)__p, v4, &v10);
    if (v5)
    {
      prop::file::get<std::string>((const void **)__p, (uint64_t)v4, (uint64_t)&v10, &v9);
      std::string v6 = v9;
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v10.__r_.__value_.__l.__data_);
      if ((v8 & 0x80000000) == 0)
      {
LABEL_6:
        if (!v5) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((v8 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(__p[0]);
    if (!v5)
    {
LABEL_7:
      if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_8:
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5;
        return;
      }
LABEL_13:
      operator delete(v6.__r_.__value_.__l.__data_);
      goto LABEL_8;
    }
LABEL_12:
    LOBYTE(v5) = util::convert<BOOL>(&v6, (BOOL *)(v2 + 152), 0);
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_13;
  }
  *(unsigned char *)(v3 + 24) = 0;
}

void sub_1A610C97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 48) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    int v4 = *(NSObject **)(a1 + 48);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void __destroy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 48);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

uint64_t BasebandIPCTraceICE::getProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = 0;
  std::string v9 = &v8;
  uint64_t v10 = 0x2000000000;
  char v11 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZN19BasebandIPCTraceICE11getPropertyERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6__block_invoke;
  void v7[3] = &unk_1E5C47178;
  v7[4] = &v8;
  void v7[5] = a2;
  void v7[6] = a3;
  int v12 = v7;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_1;
  uint64_t block[3] = &__block_descriptor_tmp_55;
  void block[4] = a1 + 72;
  void block[5] = &v12;
  uint64_t v4 = a1 + 88;
  uint64_t v3 = *(NSObject **)(a1 + 88);
  if (*(void *)(v4 + 8)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void ___ZN19BasebandIPCTraceICE11getPropertyERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6__block_invoke(void *a1)
{
  uint64_t v2 = (char *)a1[5];
  uint64_t v3 = a1[6];
  char v6 = 11;
  strcpy((char *)__p, "BasebandIPC");
  BOOL v4 = prop::get_from_file((char *)__p, v2, v3);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = v4;
}

void sub_1A610CBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BasebandIPCTraceICE::getSettingPrefix(char *a1@<X8>)
{
  a1[23] = 13;
  strcpy(a1, "BasebandIPC::");
}

const char *BasebandIPCTraceICE::getName(BasebandIPCTraceICE *this)
{
  return "trace.bbipc";
}

void *std::shared_ptr<BasebandIPCTraceICE>::shared_ptr[abi:ne180100]<BasebandIPCTraceICE,std::shared_ptr<BasebandIPCTraceICE> ctu::SharedSynchronizable<Trace>::make_shared_ptr<BasebandIPCTraceICE>(BasebandIPCTraceICE*)::{lambda(BasebandIPCTraceICE*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  BOOL v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0AF30;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  char v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1A610CD44(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<BasebandIPCTraceICE> ctu::SharedSynchronizable<Trace>::make_shared_ptr<BasebandIPCTraceICE>(BasebandIPCTraceICE*)::{lambda(BasebandIPCTraceICE*)#1}::operator() const(BasebandIPCTraceICE*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1A610CD6C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<BasebandIPCTraceICE *,std::shared_ptr<BasebandIPCTraceICE> ctu::SharedSynchronizable<Trace>::make_shared_ptr<BasebandIPCTraceICE>(BasebandIPCTraceICE*)::{lambda(BasebandIPCTraceICE *)#1},std::allocator<BasebandIPCTraceICE>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandIPCTraceICE *,std::shared_ptr<BasebandIPCTraceICE> ctu::SharedSynchronizable<Trace>::make_shared_ptr<BasebandIPCTraceICE>(BasebandIPCTraceICE*)::{lambda(BasebandIPCTraceICE *)#1},std::allocator<BasebandIPCTraceICE>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<BasebandIPCTraceICE *,std::shared_ptr<BasebandIPCTraceICE> ctu::SharedSynchronizable<Trace>::make_shared_ptr<BasebandIPCTraceICE>(BasebandIPCTraceICE*)::{lambda(BasebandIPCTraceICE *)#1},std::allocator<BasebandIPCTraceICE>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI19BasebandIPCTraceICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI19BasebandIPCTraceICEEENSt3__110sh"
                                "ared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI19BasebandIPCTraceICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI19BasebandIPCTraceICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<BasebandIPCTraceICE> ctu::SharedSynchronizable<Trace>::make_shared_ptr<BasebandIPCTraceICE>(BasebandIPCTraceICE*)::{lambda(BasebandIPCTraceICE*)#1}::operator() const(BasebandIPCTraceICE*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_1(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

uint64_t __cxx_global_var_init_12()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance, &dword_1A609F000);
  }
  return result;
}

void abm::AppMonitorInternal::create(const ctu::OsLogContext *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  BOOL v4 = (std::__shared_weak_count_vtbl *)operator new(0x58uLL);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v5, a1);
  abm::AppMonitorInternal::AppMonitorInternal(v4);
  *(void *)a2 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<abm::AppMonitorInternal>::shared_ptr[abi:ne180100]<abm::AppMonitorInternal,std::shared_ptr<abm::AppMonitorInternal> ctu::SharedSynchronizable<abm::AppMonitorInternal>::make_shared_ptr<abm::AppMonitorInternal>(abm::AppMonitorInternal*)::{lambda(abm::AppMonitorInternal*)#1},void>((std::__shared_weak_count_vtbl **)a2, v4);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v5);
}

void sub_1A610CF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A610CF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void *abm::AppMonitorInternal::AppMonitorInternal(void *a1)
{
  uint64_t v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  unint64_t v3 = dispatch_queue_create("AppMonitorInternal.queue", v2);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = v3;
  if (v3)
  {
    BOOL v4 = v3;
    dispatch_retain(v3);
    a1[3] = 0;
    dispatch_release(v4);
  }
  else
  {
    a1[3] = 0;
  }
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), (const ctu::OsLogLogger *)v9);
  MEMORY[0x1A6274750](v9);
  id v5 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  a1[5] = v5;
  a1[6] = 0;
  a1[10] = 0;
  if (v5) {
    return a1;
  }
  double v7 = a1[4];
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    return a1;
  }
  *(_WORD *)uint64_t v8 = 0;
  _os_log_error_impl(&dword_1A609F000, v7, OS_LOG_TYPE_ERROR, "AppMonitor: failed to create bundle ID store", v8, 2u);
  return a1;
}

void sub_1A610D074(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  MEMORY[0x1A6274750](v3);
  id v5 = v1[3];
  if (v5)
  {
    dispatch_release(v5);
    char v6 = v1[2];
    if (!v6)
    {
LABEL_3:
      double v7 = (std::__shared_weak_count *)v1[1];
      if (!v7) {
LABEL_8:
      }
        _Unwind_Resume(a1);
LABEL_7:
      std::__shared_weak_count::__release_weak(v7);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    char v6 = v1[2];
    if (!v6) {
      goto LABEL_3;
    }
  }
  dispatch_release(v6);
  double v7 = (std::__shared_weak_count *)v1[1];
  if (!v7) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t abm::AppMonitor::AppMonitor(uint64_t a1, const ctu::OsLogContext *a2)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v4, a2);
  abm::AppMonitorInternal::create((const ctu::OsLogContext *)v4, a1);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v4);
  return a1;
}

{
  unsigned char v4[16];

  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v4, a2);
  abm::AppMonitorInternal::create((const ctu::OsLogContext *)v4, a1);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v4);
  return a1;
}

void sub_1A610D130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A610D18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void abm::AppMonitor::setAppStateHandler(NSObject **a1, NSObject **a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  BOOL v4 = *a1;
  id v5 = *a2;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  uint64_t v6 = a3[3];
  if (!v6) {
    goto LABEL_6;
  }
  if ((void *)v6 != a3)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
LABEL_6:
    uint64_t v10 = (void *)v6;
    goto LABEL_8;
  }
  uint64_t v10 = v9;
  (*(void (**)(void *, void *))(*a3 + 24))(a3, v9);
LABEL_8:
  abm::AppMonitorInternal::setAppStateHandler(v4, &object, v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
    double v7 = object;
    if (!object) {
      return;
    }
    goto LABEL_12;
  }
  if (v10) {
    (*(void (**)(void))(*v10 + 40))();
  }
  double v7 = object;
  if (object) {
LABEL_12:
  }
    dispatch_release(v7);
}

void sub_1A610D310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v10) {
    dispatch_release(v10);
  }
  _Unwind_Resume(exception_object);
}

void abm::AppMonitorInternal::setAppStateHandler(NSObject *a1, dispatch_object_t *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  object[0] = a1;
  object[1] = *a2;
  if (*a2) {
    dispatch_retain(*a2);
  }
  uint64_t v5 = a3[3];
  if (v5)
  {
    if ((void *)v5 == a3)
    {
      uint32_t v17 = v16;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v16);
      goto LABEL_8;
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  uint32_t v17 = (void *)v5;
LABEL_8:
  isa = (std::__shared_weak_count *)a1[1].isa;
  if (!isa || (v7.isa = a1->isa, (uint64_t v8 = std::__shared_weak_count::lock(isa)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  std::string v9 = v8;
  uint64_t v10 = operator new(0x30uLL);
  uint64_t v11 = v10;
  *(_OWORD *)uint64_t v10 = *(_OWORD *)object;
  if (v17)
  {
    if (v17 == v16)
    {
      void v10[5] = v10 + 2;
      (*(void (**)(void *))(v16[0] + 24))(v16);
    }
    else
    {
      void v10[5] = v17;
      uint32_t v17 = 0;
    }
  }
  else
  {
    void v10[5] = 0;
  }
  int v12 = a1[2].isa;
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  std::string::size_type v13 = operator new(0x18uLL);
  *std::string::size_type v13 = v11;
  v13[1] = v7.isa;
  void v13[2] = v9;
  dispatch_async_f(v12, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<abm::AppMonitorInternal>::execute_wrapped<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}>(abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1},std::default_delete<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v14 = v17;
    if (v17 != v16) {
      goto LABEL_17;
    }
LABEL_21:
    (*(void (**)(void *))(v16[0] + 32))(v16);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  uint64_t v14 = v17;
  if (v17 == v16) {
    goto LABEL_21;
  }
LABEL_17:
  if (v14) {
    (*(void (**)(void *))(*v14 + 40))(v14);
  }
}

void sub_1A610D5B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::function<void ()(std::string,abm::AppState)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

BOOL abm::AppMonitor::addBundleID(void **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  BOOL result = abm::AppMonitorInternal::addBundleID(v2, (uint64_t)&__p);
  BOOL v4 = result;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    return v4;
  }
  return result;
}

void sub_1A610D708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL abm::AppMonitorInternal::addBundleID(void *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::size_type v4 = *(void *)(a2 + 8);
    if (v4)
    {
      std::string::size_type v13 = a1;
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, v4);
      uint64_t v3 = (std::__shared_weak_count *)a1[1];
      if (!v3) {
        goto LABEL_16;
      }
      goto LABEL_7;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    std::string::size_type v13 = a1;
    std::string __p = *(std::string *)a2;
    uint64_t v3 = (std::__shared_weak_count *)a1[1];
    if (!v3) {
LABEL_16:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_7:
    uint64_t v5 = *a1;
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (!v6) {
      goto LABEL_16;
    }
    NSObject v7 = v6;
    uint64_t v8 = (char *)operator new(0x20uLL);
    *(void *)uint64_t v8 = v13;
    *(std::string *)(v8 + 8) = __p;
    memset(&__p, 0, sizeof(__p));
    std::string v9 = a1[2];
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = operator new(0x18uLL);
    *uint64_t v10 = v8;
    v10[1] = v5;
    v10[2] = v7;
    dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<abm::AppMonitorInternal>::execute_wrapped<abm::AppMonitorInternal::addBundleID(std::string)::{lambda(void)#1}>(abm::AppMonitorInternal::addBundleID(std::string)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<abm::AppMonitorInternal::addBundleID(std::string)::{lambda(void)#1},std::default_delete<abm::AppMonitorInternal::addBundleID(std::string)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
    if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 1;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 1;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    return 1;
  }
  int v12 = a1[4];
  BOOL result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
  if (result)
  {
    LOWORD(v13) = 0;
    _os_log_error_impl(&dword_1A609F000, v12, OS_LOG_TYPE_ERROR, "AppMonitor: skipping addition of empty bundle ID", (uint8_t *)&v13, 2u);
    return 0;
  }
  return result;
}

BOOL abm::AppMonitor::removeBundleID(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)*a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    int v3 = SHIBYTE(__s.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if (v3)
      {
        std::string v9 = v2;
        std::string __p = __s;
        goto LABEL_8;
      }
      goto LABEL_10;
    }
  }
  else
  {
    std::string __s = *(std::string *)a2;
    int v3 = SHIBYTE(__s.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  if (__s.__r_.__value_.__l.__size_)
  {
    std::string v9 = v2;
    std::string::__init_copy_ctor_external(&__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
LABEL_8:
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZNK3ctu20SharedSynchronizableIN3abm18AppMonitorInternalEE20execute_wrapped_syncIZNS2_14removeBundleIDENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSD__block_invoke;
    aBlock[3] = &__block_descriptor_48_e5_B8__0l;
    aBlock[4] = v2;
    void aBlock[5] = &v9;
    id v12 = _Block_copy(aBlock);
    std::string::size_type v4 = v2[2];
    if (v2[3])
    {
      char v19 = -86;
      blocunint64_t k = MEMORY[0x1E4F143A8];
      uint64_t v14 = 3221225472;
      uint64_t v15 = ___ZN8dispatch19async_and_wait_implIRU8__strongU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke;
      uint64_t v16 = &__block_descriptor_48_e5_v8__0l;
      uint32_t v17 = &v19;
      uint64_t v18 = &v12;
      dispatch_async_and_wait(v4, &block);
    }
    else
    {
      char v19 = -86;
      blocunint64_t k = MEMORY[0x1E4F143A8];
      uint64_t v14 = 3221225472;
      uint64_t v15 = ___ZN8dispatch9sync_implIRU8__strongU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke;
      uint64_t v16 = &__block_descriptor_48_e5_v8__0l;
      uint32_t v17 = &v19;
      uint64_t v18 = &v12;
      dispatch_sync(v4, &block);
    }
    BOOL v6 = v19 != 0;

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v6;
      }
    }
    else if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return v6;
    }
    goto LABEL_18;
  }
LABEL_10:
  uint64_t v5 = v2[4];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    LOWORD(block) = 0;
    _os_log_error_impl(&dword_1A609F000, v5, OS_LOG_TYPE_ERROR, "AppMonitor: skipping removal of empty bundle ID", (uint8_t *)&block, 2u);
    BOOL v6 = 0;
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v6;
    }
  }
  else
  {
    BOOL v6 = 0;
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v6;
    }
  }
LABEL_18:
  operator delete(__s.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1A610DB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void abm::AppMonitor::start(abm::AppMonitorInternal **this)
{
}

void abm::AppMonitorInternal::start(abm::AppMonitorInternal *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v2 || (uint64_t v3 = *(void *)this, (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v7[0] = this;
  v7[1] = v3;
  uint64_t v8 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  ctu::SharedSynchronizable<abm::AppMonitorInternal>::execute_wrapped<abm::AppMonitorInternal::start(void)::{lambda(void)#1}>((uint64_t *)this, (uint64_t)v7);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void abm::AppMonitor::stop(uint64_t **this)
{
  ctu::SharedSynchronizable<abm::AppMonitorInternal>::execute_wrapped<abm::AppMonitorInternal::stop(void)::{lambda(void)#1}>(*this, &v1);
}

void *abm::AppMonitor::create@<X0>(const ctu::OsLogContext *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::string::size_type v4 = operator new(0x28uLL);
  BOOL result = std::__shared_ptr_emplace<abm::AppMonitor>::__shared_ptr_emplace[abi:ne180100]<ctu::OsLogContext &,std::allocator<abm::AppMonitor>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1A610DCB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<abm::AppMonitorInternal>::execute_wrapped<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}>(abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1},std::default_delete<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v18 = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  uint64_t v5 = (uint64_t *)v2[5];
  if (!v5)
  {
LABEL_6:
    xpc_object_t v20 = v5;
    dispatch_object_t object = v18;
    if (v5) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  if (v5 != v2 + 2)
  {
    uint64_t v5 = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
    goto LABEL_6;
  }
  xpc_object_t v20 = v19;
  (*(void (**)(uint64_t *, void *))(*v5 + 24))(v5, v19);
  uint64_t v5 = v20;
  dispatch_object_t object = v18;
  if (v20)
  {
LABEL_7:
    if (v5 == v19)
    {
      uint64_t v23 = v22;
      (*(void (**)(void *, void *))(v19[0] + 24))(v19, v22);
    }
    else
    {
      uint64_t v23 = v5;
      xpc_object_t v20 = 0;
    }
    goto LABEL_12;
  }
LABEL_10:
  uint64_t v23 = 0;
LABEL_12:
  uint64_t v25 = 0;
  BOOL v6 = operator new(0x30uLL);
  NSObject v7 = v6;
  uint64_t v8 = (void (**)(void *))&unk_1EFB0AF80;
  dispatch_object_t v9 = object;
  uint64_t v10 = v23;
  *BOOL v6 = &unk_1EFB0AF80;
  v6[1] = v9;
  dispatch_object_t object = 0;
  if (v10)
  {
    if (v10 == v22)
    {
      void v6[5] = v6 + 2;
      (*(void (**)(void *))(v22[0] + 24))(v22);
    }
    else
    {
      void v6[5] = v10;
      uint64_t v23 = 0;
    }
  }
  else
  {
    void v6[5] = 0;
  }
  uint64_t v11 = (void *)(v4 + 56);
  uint64_t v25 = v7;
  if (v24 == (void *)(v4 + 56)) {
    goto LABEL_22;
  }
  id v12 = *(void **)(v4 + 80);
  if (v12 == v11)
  {
    (*(void (**)(void *, void *))(*v11 + 24))(v11, v24);
    (*(void (**)(void))(**(void **)(v4 + 80) + 32))(*(void *)(v4 + 80));
    uint64_t v8 = (void (**)(void *))v24[0];
    *(void *)(v4 + 80) = v25;
    uint64_t v25 = v24;
  }
  else
  {
    uint64_t v25 = *(void **)(v4 + 80);
    *(void *)(v4 + 80) = v7;
    if (v12 != v24)
    {
      if (!v12) {
        goto LABEL_23;
      }
      NSObject v7 = v12;
LABEL_22:
      (*(void (**)(void *))(*v7 + 40))(v7);
LABEL_23:
      std::string::size_type v13 = v23;
      if (v23 != v22) {
        goto LABEL_24;
      }
      goto LABEL_45;
    }
  }
  v8[4](v24);
  std::string::size_type v13 = v23;
  if (v23 != v22)
  {
LABEL_24:
    if (v13) {
      (*(void (**)(uint64_t *))(*v13 + 40))(v13);
    }
    uint64_t v14 = object;
    if (object) {
      goto LABEL_27;
    }
    goto LABEL_28;
  }
LABEL_45:
  (*(void (**)(void *))(v22[0] + 32))(v22);
  uint64_t v14 = object;
  if (object) {
LABEL_27:
  }
    dispatch_release(v14);
LABEL_28:
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
  }
  else if (v20)
  {
    (*(void (**)(void))(*v20 + 40))();
  }
  uint64_t v15 = (uint64_t *)v2[5];
  if (v15 == v2 + 2)
  {
    (*(void (**)(uint64_t *))(v2[2] + 32))(v2 + 2);
    uint64_t v16 = v2[1];
    if (!v16) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v15) {
    (*(void (**)(uint64_t *))(*v15 + 40))(v15);
  }
  uint64_t v16 = v2[1];
  if (v16) {
LABEL_35:
  }
    dispatch_release(v16);
LABEL_36:
  operator delete(v2);
  uint32_t v17 = (std::__shared_weak_count *)a1[2];
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  operator delete(a1);
}

void sub_1A610E188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_object_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1},std::allocator<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1}>,void ()(std::string,abm::AppState)>::~__func(void *a1)
{
  *a1 = &unk_1EFB0AF80;
  uint64_t v2 = a1 + 2;
  uint64_t v3 = (void *)a1[5];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = a1[1];
    if (!v4) {
      return a1;
    }
    goto LABEL_5;
  }
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = a1[1];
  if (v4) {
LABEL_5:
  }
    dispatch_release(v4);
  return a1;
}

void std::__function::__func<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1},std::allocator<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1}>,void ()(std::string,abm::AppState)>::~__func(char *__p)
{
  *(void *)std::string __p = &unk_1EFB0AF80;
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    uint64_t v4 = *((void *)__p + 1);
    if (v4) {
LABEL_5:
    }
      dispatch_release(v4);
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    uint64_t v4 = *((void *)__p + 1);
    if (v4) {
      goto LABEL_5;
    }
  }

  operator delete(__p);
}

void *std::__function::__func<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1},std::allocator<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1}>,void ()(std::string,abm::AppState)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(NSObject **)(a1 + 8);
  void *v2 = &unk_1EFB0AF80;
  v2[1] = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (!v4) {
    goto LABEL_6;
  }
  if (v4 != a1 + 16)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
LABEL_6:
    v2[5] = v4;
    return v2;
  }
  v2[5] = v2 + 2;
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v2;
}

void sub_1A610E60C(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[1];
  if (v3) {
    dispatch_release(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1},std::allocator<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1}>,void ()(std::string,abm::AppState)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 8);
  *a2 = &unk_1EFB0AF80;
  a2[1] = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  uint64_t result = *(void *)(a1 + 40);
  if (!result) {
    goto LABEL_6;
  }
  if (result != a1 + 16)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
LABEL_6:
    a2[5] = result;
    return result;
  }
  a2[5] = a2 + 2;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40));
}

void sub_1A610E6F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(NSObject **)(v1 + 8);
  if (v3) {
    dispatch_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1},std::allocator<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1}>,void ()(std::string,abm::AppState)>::destroy(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    uint64_t v4 = *(NSObject **)(a1 + 8);
    if (!v4) {
      return;
    }
    goto LABEL_5;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *(NSObject **)(a1 + 8);
  if (v4)
  {
LABEL_5:
    dispatch_release(v4);
  }
}

void std::__function::__func<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1},std::allocator<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1}>,void ()(std::string,abm::AppState)>::destroy_deallocate(char *__p)
{
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    uint64_t v4 = *((void *)__p + 1);
    if (v4) {
LABEL_5:
    }
      dispatch_release(v4);
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    uint64_t v4 = *((void *)__p + 1);
    if (v4) {
      goto LABEL_5;
    }
  }

  operator delete(__p);
}

void std::__function::__func<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1},std::allocator<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1}>,void ()(std::string,abm::AppState)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(std::string::value_type **)a2;
  std::string::size_type v5 = *(void *)(a2 + 8);
  *(_DWORD *)std::string::size_type v13 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)&v13[3] = *(_DWORD *)(a2 + 19);
  int v6 = *(char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  int v7 = *a3;
  uint64_t v8 = *(void *)(a1 + 40);
  if (!v8) {
    goto LABEL_4;
  }
  if (v8 != a1 + 16)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
LABEL_4:
    uint64_t v15 = (void *)v8;
    goto LABEL_6;
  }
  uint64_t v15 = v14;
  (*(void (**)(uint64_t, void *))(*(void *)v8 + 24))(v8, v14);
LABEL_6:
  if (v6 < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v4, v5);
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
    __p.__r_.__value_.__l.__size_ = v5;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = *(_DWORD *)v13;
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v13[3];
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v6;
  }
  int v17 = v7;
  dispatch_object_t v9 = *(NSObject **)(a1 + 8);
  uint64_t v10 = (char *)operator new(0x40uLL);
  uint64_t v11 = v10;
  if (v15)
  {
    if (v15 == v14)
    {
      *((void *)v10 + 3) = v10;
      (*(void (**)(void *, char *))(v14[0] + 24))(v14, v10);
      int v7 = v17;
    }
    else
    {
      *((void *)v10 + 3) = v15;
      uint64_t v15 = 0;
    }
  }
  else
  {
    *((void *)v10 + 3) = 0;
  }
  *(std::string *)(v11 + 32) = __p;
  memset(&__p, 0, sizeof(__p));
  *((_DWORD *)v11 + 14) = v7;
  dispatch_async_f(v9, v11, (dispatch_function_t)dispatch::async<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1}::operator() const(std::string,abm::AppState)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1}::operator() const(std::string,abm::AppState)::{lambda(void)#1},std::default_delete<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1}::operator() const(std::string,abm::AppState)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    id v12 = v15;
    if (v15 != v14) {
      goto LABEL_16;
    }
LABEL_21:
    (*(void (**)(void *))(v14[0] + 32))(v14);
    if ((v6 & 0x80000000) == 0) {
      return;
    }
LABEL_22:
    operator delete(v4);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  id v12 = v15;
  if (v15 == v14) {
    goto LABEL_21;
  }
LABEL_16:
  if (v12) {
    (*(void (**)(void *))(*v12 + 40))(v12);
  }
  if (v6 < 0) {
    goto LABEL_22;
  }
}

void sub_1A610EAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__func<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1},std::allocator<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1}>,void ()(std::string,abm::AppState)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN3abm18AppMonitorInternal18setAppStateHandlerEN8dispatch5queueENSt3__18functionIFvNS3_12basic_str"
                     "ingIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_8AppStateEEEEENKUlvE_clEvEUlSA_SB_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN3abm18AppMonitorInternal18setAppStateHandlerEN8dispatch5queueENSt3__18functionIFvNS3_"
                                "12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_8AppStateEEEEENKUlvE_clEvEUlSA_SB_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN3abm18AppMonitorInternal18setAppStateHandlerEN8dispatch5queueENSt3__18functionIFvNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_8AppStateEEEEENKUlvE_clEvEUlSA_SB_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN3abm18AppMonitorInternal18setAppStateHandlerEN8dispatch5queueENSt3__18functionIFvNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_8AppStateEEEEENKUlvE_clEvEUlSA_SB_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1},std::allocator<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1}>,void ()(std::string,abm::AppState)>::target_type()
{
}

void dispatch::async<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1}::operator() const(std::string,abm::AppState)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1}::operator() const(std::string,abm::AppState)::{lambda(void)#1},std::default_delete<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}::operator() const(void)::{lambda(std::string,abm::AppState)#1}::operator() const(std::string,abm::AppState)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(char *a1)
{
  uint64_t v2 = (void **)(a1 + 32);
  if (a1[55] < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a1 + 4), *((void *)a1 + 5));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v2;
    __p.__r_.__value_.__r.__words[2] = *((void *)a1 + 6);
  }
  int v6 = *((_DWORD *)a1 + 14);
  uint64_t v3 = *((void *)a1 + 3);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, std::string *, int *))(*(void *)v3 + 48))(v3, &__p, &v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((a1[55] & 0x80000000) == 0)
    {
LABEL_7:
      uint64_t v4 = (char *)*((void *)a1 + 3);
      if (v4 != a1) {
        goto LABEL_8;
      }
LABEL_12:
      (*(void (**)(char *))(*(void *)a1 + 32))(a1);
      goto LABEL_13;
    }
  }
  else if ((a1[55] & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*v2);
  uint64_t v4 = (char *)*((void *)a1 + 3);
  if (v4 == a1) {
    goto LABEL_12;
  }
LABEL_8:
  if (v4) {
    (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  }
LABEL_13:
  operator delete(a1);
}

void sub_1A610ECE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*((char *)v14 + 55) < 0)
  {
    operator delete(*v15);
    int v17 = (void *)v14[3];
    if (v17 == v14)
    {
LABEL_3:
      (*(void (**)(void *))(*v14 + 32))(v14);
      operator delete(v14);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    int v17 = (void *)v14[3];
    if (v17 == v14) {
      goto LABEL_3;
    }
  }
  if (v17) {
    (*(void (**)(void *))(*v17 + 40))(v17);
  }
  operator delete(v14);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<abm::AppMonitorInternal>::execute_wrapped<abm::AppMonitorInternal::addBundleID(std::string)::{lambda(void)#1}>(abm::AppMonitorInternal::addBundleID(std::string)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<abm::AppMonitorInternal::addBundleID(std::string)::{lambda(void)#1},std::default_delete<abm::AppMonitorInternal::addBundleID(std::string)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(char **a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = *(void **)*a1;
  uint64_t v4 = (void **)(*a1 + 8);
  std::string::size_type v5 = v4;
  if ((*a1)[31] < 0) {
    std::string::size_type v5 = *v4;
  }
  int v6 = (void *)v3[5];
  int v7 = [NSString stringWithUTF8String:v5];
  [v6 addObject:v7];

  uint64_t v8 = v3[4];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    dispatch_object_t v9 = v2 + 8;
    if (v2[31] < 0) {
      dispatch_object_t v9 = (char *)*v4;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v9;
    _os_log_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEFAULT, "#I AppMonitor: successfully added bundle ID %s to store", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v10 = (void *)v3[6];
  if (v10)
  {
    *(void *)&long long buf = MEMORY[0x1E4F143A8];
    *((void *)&buf + 1) = 3221225472;
    xpc_object_t v20 = ___ZZN3abm18AppMonitorInternal11addBundleIDENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENKUlvE_clEv_block_invoke;
    uint64_t v21 = &__block_descriptor_40_e40_v16__0___RBSProcessMonitorConfiguring__8l;
    uint64_t v22 = v3;
    [v10 updateConfiguration:&buf];
    uint64_t v11 = v3[4];
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_17;
    }
    id v12 = v2 + 8;
    if (v2[31] < 0) {
      id v12 = (char *)*v4;
    }
    int v17 = 136315138;
    uint64_t v18 = v12;
    std::string::size_type v13 = "#I AppMonitor: successfully updated configuration after adding bundle ID %s";
    p_long long buf = (uint8_t *)&v17;
  }
  else
  {
    uint64_t v11 = v3[4];
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_17;
    }
    uint64_t v15 = v2 + 8;
    if (v2[31] < 0) {
      uint64_t v15 = (char *)*v4;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v15;
    std::string::size_type v13 = "#I AppMonitor: skipping configuration update after adding bundle ID %s";
    p_long long buf = (uint8_t *)&buf;
  }
  _os_log_impl(&dword_1A609F000, v11, OS_LOG_TYPE_DEFAULT, v13, p_buf, 0xCu);
LABEL_17:
  if (v2[31] < 0) {
    operator delete(*v4);
  }
  operator delete(v2);
  uint64_t v16 = (std::__shared_weak_count *)a1[2];
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  operator delete(a1);
}

void sub_1A610F00C(_Unwind_Exception *a1)
{
  std::string::size_type v5 = v3;

  if (v2[31] < 0) {
    operator delete(*v4);
  }
  operator delete(v2);
  int v7 = (std::__shared_weak_count *)v1[2];
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZZN3abm18AppMonitorInternal11addBundleIDENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENKUlvE_clEv_block_invoke(uint64_t a1, void *a2)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F96430] predicateMatchingBundleIdentifiers:*(void *)(*(void *)(a1 + 32) + 40)];
  v6[0] = v4;
  std::string::size_type v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v6 count:1];
  [v3 setPredicates:v5];
}

void sub_1A610F148(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3abm18AppMonitorInternalEE20execute_wrapped_syncIZNS2_14removeBundleIDENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSD__block_invoke(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  id v3 = v1 + 1;
  uint64_t v4 = v1 + 1;
  if (*((char *)v1 + 31) < 0) {
    uint64_t v4 = (void *)*v3;
  }
  std::string::size_type v5 = *(void **)(v2 + 40);
  int v6 = [NSString stringWithUTF8String:v4];
  uint64_t v7 = [v5 containsObject:v6];

  uint64_t v8 = *(void **)(v2 + 40);
  if ((v7 & 1) == 0)
  {
    uint64_t v17 = [*(id *)(v2 + 40) count];
    uint64_t v18 = *(NSObject **)(v2 + 32);
    BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
    if (v17)
    {
      if (!v19) {
        return v7;
      }
      if (*((char *)v1 + 31) < 0) {
        id v3 = (void *)*v3;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v3;
      xpc_object_t v20 = "AppMonitor: store does not contain bundle ID %s, so it cannot be removed ";
    }
    else
    {
      if (!v19) {
        return v7;
      }
      if (*((char *)v1 + 31) < 0) {
        id v3 = (void *)*v3;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v3;
      xpc_object_t v20 = "AppMonitor: store does not contain any bundle IDs, so bundle ID %s cannot be removed";
    }
    _os_log_error_impl(&dword_1A609F000, v18, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&buf, 0xCu);
    return v7;
  }
  dispatch_object_t v9 = v1 + 1;
  if (*((char *)v1 + 31) < 0) {
    dispatch_object_t v9 = (void *)*v3;
  }
  uint64_t v10 = [NSString stringWithUTF8String:v9];
  [v8 removeObject:v10];

  uint64_t v11 = *(NSObject **)(v2 + 32);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    id v12 = v1 + 1;
    if (*((char *)v1 + 31) < 0) {
      id v12 = (void *)*v3;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v12;
    _os_log_impl(&dword_1A609F000, v11, OS_LOG_TYPE_DEFAULT, "#I AppMonitor: successfully removed bundle ID %s from store", (uint8_t *)&buf, 0xCu);
  }
  std::string::size_type v13 = *(void **)(v2 + 48);
  if (v13)
  {
    *(void *)&long long buf = MEMORY[0x1E4F143A8];
    *((void *)&buf + 1) = 3221225472;
    uint64_t v25 = ___ZZN3abm18AppMonitorInternal14removeBundleIDENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENKUlvE_clEv_block_invoke;
    uint64_t v26 = &__block_descriptor_40_e40_v16__0___RBSProcessMonitorConfiguring__8l;
    uint64_t v27 = v2;
    [v13 updateConfiguration:&buf];
    uint64_t v14 = *(NSObject **)(v2 + 32);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v1 + 31) < 0) {
        id v3 = (void *)*v3;
      }
      int v22 = 136315138;
      uint64_t v23 = v3;
      uint64_t v15 = "#I AppMonitor: successfully updated configuration after removing bundle ID %s";
      p_long long buf = (uint8_t *)&v22;
LABEL_29:
      _os_log_impl(&dword_1A609F000, v14, OS_LOG_TYPE_DEFAULT, v15, p_buf, 0xCu);
    }
  }
  else
  {
    uint64_t v14 = *(NSObject **)(v2 + 32);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v1 + 31) < 0) {
        id v3 = (void *)*v3;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v3;
      uint64_t v15 = "#I AppMonitor: skipping configuration update after removing bundle ID %s";
      p_long long buf = (uint8_t *)&buf;
      goto LABEL_29;
    }
  }
  return v7;
}

void sub_1A610F450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A610F460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZZN3abm18AppMonitorInternal14removeBundleIDENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENKUlvE_clEv_block_invoke(uint64_t a1, void *a2)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F96430] predicateMatchingBundleIdentifiers:*(void *)(*(void *)(a1 + 32) + 40)];
  v6[0] = v4;
  std::string::size_type v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v6 count:1];
  [v3 setPredicates:v5];
}

void sub_1A610F52C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t ___ZN8dispatch9sync_implIRU8__strongU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU8__strongU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

void ctu::SharedSynchronizable<abm::AppMonitorInternal>::execute_wrapped<abm::AppMonitorInternal::start(void)::{lambda(void)#1}>(uint64_t *a1, uint64_t a2)
{
  id v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = operator new(0x18uLL);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  v8[2] = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  dispatch_object_t v9 = a1[2];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<abm::AppMonitorInternal>::execute_wrapped<abm::AppMonitorInternal::start(void)::{lambda(void)#1}>(abm::AppMonitorInternal::start(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<abm::AppMonitorInternal::start(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<abm::AppMonitorInternal::start(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<abm::AppMonitorInternal>::execute_wrapped<abm::AppMonitorInternal::start(void)::{lambda(void)#1}>(abm::AppMonitorInternal::start(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<abm::AppMonitorInternal::start(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<abm::AppMonitorInternal::start(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  if (*(void *)(v3 + 48))
  {
    uint64_t v4 = *(NSObject **)(v3 + 32);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1A609F000, v4, OS_LOG_TYPE_ERROR, "AppMonitor: already started", buf, 2u);
    }
  }
  else
  {
    uint64_t v5 = (void *)MEMORY[0x1E4F96418];
    *(void *)long long buf = MEMORY[0x1E4F143A8];
    uint64_t v14 = 3321888768;
    uint64_t v15 = ___ZZN3abm18AppMonitorInternal5startEvENKUlvE_clEv_block_invoke;
    uint64_t v16 = &__block_descriptor_56_ea8_40c49_ZTSNSt3__18weak_ptrIN3abm18AppMonitorInternalEEE_e40_v16__0___RBSProcessMonitorConfiguring__8l;
    uint64_t v17 = v3;
    uint64_t v18 = v2[1];
    int v6 = (std::__shared_weak_count *)v2[2];
    BOOL v19 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = [v5 monitorWithConfiguration:buf];
    uint64_t v8 = *(void **)(v3 + 48);
    *(void *)(v3 + 48) = v7;

    dispatch_object_t v9 = *(NSObject **)(v3 + 32);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v12 = 0;
      _os_log_impl(&dword_1A609F000, v9, OS_LOG_TYPE_DEFAULT, "#I AppMonitor: started", v12, 2u);
    }
    if (v19) {
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  uint64_t v10 = (std::__shared_weak_count *)v2[2];
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete(v2);
  uint64_t v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

void sub_1A610F8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17)
  {
    std::__shared_weak_count::__release_weak(a17);
    xpc_object_t v20 = (std::__shared_weak_count *)v18[2];
    if (!v20)
    {
LABEL_3:
      operator delete(v18);
      uint64_t v21 = (std::__shared_weak_count *)v17[2];
      if (!v21) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else
  {
    xpc_object_t v20 = (std::__shared_weak_count *)v18[2];
    if (!v20) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v20);
  operator delete(v18);
  uint64_t v21 = (std::__shared_weak_count *)v17[2];
  if (!v21) {
    goto LABEL_9;
  }
LABEL_7:
  if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
LABEL_9:
  operator delete(v17);
  _Unwind_Resume(a1);
}

void ___ZZN3abm18AppMonitorInternal5startEvENKUlvE_clEv_block_invoke(void *a1, void *a2)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = [MEMORY[0x1E4F96448] descriptor];
  [v5 setValues:1];
  v14[0] = @"com.apple.frontboard.visibility";
  int v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:1];
  [v5 setEndowmentNamespaces:v6];

  [v3 setStateDescriptor:v5];
  uint64_t v7 = [MEMORY[0x1E4F96430] predicateMatchingBundleIdentifiers:*(void *)(v4 + 40)];
  std::string::size_type v13 = v7;
  uint64_t v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v13 count:1];
  [v3 setPredicates:v8];

  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3321888768;
  v11[2] = ___ZZN3abm18AppMonitorInternal5startEvENKUlvE_clEv_block_invoke_2;
  v11[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__18weak_ptrIN3abm18AppMonitorInternalEEE_e74_v32__0__RBSProcessMonitor_8__RBSProcessHandle_16__RBSProcessStateUpdate_24l;
  uint64_t v10 = a1[5];
  dispatch_object_t v9 = (std::__shared_weak_count *)a1[6];
  void v11[4] = v4;
  v11[5] = v10;
  id v12 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  [v3 setUpdateHandler:v11];
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_1A610FAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }

  _Unwind_Resume(a1);
}

void ___ZZN3abm18AppMonitorInternal5startEvENKUlvE_clEv_block_invoke_2(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = (std::__shared_weak_count *)a1[6];
  if (v10)
  {
    uint64_t v11 = (uint64_t *)a1[4];
    id v12 = std::__shared_weak_count::lock(v10);
    uint64_t v47 = v12;
    if (v12)
    {
      if (a1[5])
      {
        std::string::size_type v13 = [v8 bundle];
        id v14 = [v9 state];
        switch([v14 taskState])
        {
          case 1u:
            int v17 = 1;

            if (v13) {
              goto LABEL_9;
            }
            goto LABEL_18;
          case 2u:
          case 4u:
            uint64_t v15 = [v14 endowmentNamespaces];
            int v16 = [v15 containsObject:@"com.apple.frontboard.visibility"];

            if (v16) {
              int v17 = 4;
            }
            else {
              int v17 = 3;
            }

            if (v13) {
              goto LABEL_9;
            }
            goto LABEL_18;
          case 3u:
            int v17 = 2;

            if (!v13) {
              goto LABEL_18;
            }
            goto LABEL_9;
          default:
            int v17 = 0;

            if (!v13)
            {
LABEL_18:
              int v27 = v17;
              uint64_t v25 = v11[4];
              if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_47;
              }
              *(_DWORD *)long long buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v27;
              uint64_t v26 = "#D AppMonitor: received an event from unknown bundle, state: 0x%x";
              goto LABEL_20;
            }
LABEL_9:
            id v18 = [v13 identifier];
            BOOL v19 = (const char *)[v18 UTF8String];

            if (!v19)
            {
              int v24 = v17;
              uint64_t v25 = v11[4];
              if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_47;
              }
              *(_DWORD *)long long buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v24;
              uint64_t v26 = "#D AppMonitor: received an event from unknown bundle ID, state: 0x%x";
LABEL_20:
              uint64_t v28 = v25;
              uint32_t v29 = 8;
              goto LABEL_46;
            }
            size_t v20 = strlen(v19);
            if (v20 >= 0x7FFFFFFFFFFFFFF8) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v21 = v20;
            __int16 __src = v19;
            if (v20 >= 0x17)
            {
              uint64_t v30 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v20 | 7) != 0x17) {
                uint64_t v30 = v20 | 7;
              }
              uint64_t v31 = v30 + 1;
              p_dst = (long long *)operator new(v30 + 1);
              *((void *)&__dst + 1) = v21;
              unint64_t v45 = v31 | 0x8000000000000000;
              *(void *)&long long __dst = p_dst;
            }
            else
            {
              HIBYTE(v45) = v20;
              p_dst = &__dst;
              if (!v20) {
                goto LABEL_29;
              }
            }
            memmove(p_dst, v19, v21);
LABEL_29:
            *((unsigned char *)p_dst + v21) = 0;
            *(void *)long long buf = v11;
            int v42 = SHIBYTE(v45);
            if (SHIBYTE(v45) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&buf[8], (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
            }
            else
            {
              *(_OWORD *)&uint8_t buf[8] = __dst;
              unint64_t v49 = v45;
            }
            int v50 = v17;
            long long v32 = (std::__shared_weak_count *)v11[1];
            if (!v32 || (uint64_t v33 = *v11, (v34 = std::__shared_weak_count::lock(v32)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            size_t v35 = v34;
            std::string::size_type v36 = (char *)operator new(0x28uLL);
            *(void *)std::string::size_type v36 = *(void *)buf;
            char v37 = (std::string *)(v36 + 8);
            if (SHIBYTE(v49) < 0)
            {
              std::string::__init_copy_ctor_external(v37, *(const std::string::value_type **)&buf[8], *(std::string::size_type *)&buf[16]);
            }
            else
            {
              *(_OWORD *)&v37->__r_.__value_.__l.__data_ = *(_OWORD *)&buf[8];
              *((void *)v36 + 3) = v49;
            }
            *((_DWORD *)v36 + 8) = v50;
            uint64_t v38 = v11[2];
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v39 = operator new(0x18uLL);
            *uint64_t v39 = v36;
            v39[1] = v33;
            void v39[2] = v35;
            dispatch_async_f(v38, v39, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<abm::AppMonitorInternal>::execute_wrapped<abm::AppMonitorInternal::invokeHandler(std::string const&,abm::AppState)::{lambda(void)#1}>(abm::AppMonitorInternal::invokeHandler(std::string const&,abm::AppState)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<abm::AppMonitorInternal::invokeHandler(std::string const&,abm::AppState)::{lambda(void)#1},std::default_delete<abm::AppMonitorInternal::invokeHandler(std::string const&,abm::AppState)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            if (atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              long long v40 = __src;
              if ((SHIBYTE(v49) & 0x80000000) == 0) {
                goto LABEL_39;
              }
            }
            else
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
              long long v40 = __src;
              if ((SHIBYTE(v49) & 0x80000000) == 0)
              {
LABEL_39:
                if ((v42 & 0x80000000) == 0) {
                  goto LABEL_40;
                }
                goto LABEL_44;
              }
            }
            operator delete(*(void **)&buf[8]);
            if ((v42 & 0x80000000) == 0)
            {
LABEL_40:
              uint64_t v41 = v11[4];
              if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_47;
              }
              goto LABEL_45;
            }
LABEL_44:
            operator delete((void *)__dst);
            uint64_t v41 = v11[4];
            if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_47;
            }
LABEL_45:
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = v40;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v17;
            uint64_t v26 = "#D AppMonitor: received an event from bundle ID %s, state: 0x%x";
            uint64_t v28 = v41;
            uint32_t v29 = 18;
LABEL_46:
            _os_log_debug_impl(&dword_1A609F000, v28, OS_LOG_TYPE_DEBUG, v26, buf, v29);
LABEL_47:

            uint64_t v23 = v47;
            if (v47) {
              goto LABEL_48;
            }
            goto LABEL_50;
        }
      }
      uint64_t v23 = v12;
LABEL_48:
      if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
LABEL_50:
}

void sub_1A611000C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  operator delete(v18);

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c49_ZTSNSt3__18weak_ptrIN3abm18AppMonitorInternalEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_40c49_ZTSNSt3__18weak_ptrIN3abm18AppMonitorInternalEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<abm::AppMonitorInternal>::execute_wrapped<abm::AppMonitorInternal::invokeHandler(std::string const&,abm::AppState)::{lambda(void)#1}>(abm::AppMonitorInternal::invokeHandler(std::string const&,abm::AppState)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<abm::AppMonitorInternal::invokeHandler(std::string const&,abm::AppState)::{lambda(void)#1},std::default_delete<abm::AppMonitorInternal::invokeHandler(std::string const&,abm::AppState)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(void *)(v3 + 80);
  if (v4)
  {
    if (*((char *)v2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v7, (const std::string::value_type *)v2[1], v2[2]);
      uint64_t v4 = *(void *)(v3 + 80);
      int v8 = *((_DWORD *)v2 + 8);
      if (!v4) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      long long v5 = *(_OWORD *)(v2 + 1);
      v7.__r_.__value_.__r.__words[2] = v2[3];
      *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v5;
      int v8 = *((_DWORD *)v2 + 8);
    }
    (*(void (**)(uint64_t, std::string *, int *))(*(void *)v4 + 48))(v4, &v7, &v8);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v7.__r_.__value_.__l.__data_);
      if ((*((char *)v2 + 31) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  if (*((char *)v2 + 31) < 0) {
LABEL_7:
  }
    operator delete((void *)v2[1]);
LABEL_8:
  operator delete(v2);
  int v6 = (std::__shared_weak_count *)a1[2];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }

  operator delete(a1);
}

void sub_1A6110218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::unique_ptr<abm::AppMonitorInternal::invokeHandler(std::string const&,abm::AppState)::{lambda(void)#1},std::default_delete<abm::AppMonitorInternal::invokeHandler(std::string const&,abm::AppState)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&a10);
  id v18 = (std::__shared_weak_count *)v16[2];
  if (v18)
  {
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<abm::AppMonitorInternal::invokeHandler(std::string const&,abm::AppState)::{lambda(void)#1},std::default_delete<abm::AppMonitorInternal::invokeHandler(std::string const&,abm::AppState)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 31) < 0) {
      operator delete(*(void **)(v2 + 8));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void ctu::SharedSynchronizable<abm::AppMonitorInternal>::execute_wrapped<abm::AppMonitorInternal::stop(void)::{lambda(void)#1}>(uint64_t *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  std::string v7 = v6;
  int v8 = operator new(8uLL);
  *int v8 = *a2;
  id v9 = a1[2];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<abm::AppMonitorInternal>::execute_wrapped<abm::AppMonitorInternal::stop(void)::{lambda(void)#1}>(abm::AppMonitorInternal::stop(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<abm::AppMonitorInternal::stop(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<abm::AppMonitorInternal::stop(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<abm::AppMonitorInternal>::execute_wrapped<abm::AppMonitorInternal::stop(void)::{lambda(void)#1}>(abm::AppMonitorInternal::stop(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<abm::AppMonitorInternal::stop(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<abm::AppMonitorInternal::stop(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(void **)(v3 + 48);
  if (v4)
  {
    [v4 invalidate];
    uint64_t v5 = *(void **)(v3 + 48);
    *(void *)(v3 + 48) = 0;
  }
  [*(id *)(v3 + 40) removeAllObjects];
  int v6 = *(NSObject **)(v3 + 32);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v8 = 0;
    _os_log_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEFAULT, "#I AppMonitor: stopped", v8, 2u);
  }
  operator delete(v2);
  std::string v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  operator delete(a1);
}

void sub_1A61104D0(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **std::shared_ptr<abm::AppMonitorInternal>::shared_ptr[abi:ne180100]<abm::AppMonitorInternal,std::shared_ptr<abm::AppMonitorInternal> ctu::SharedSynchronizable<abm::AppMonitorInternal>::make_shared_ptr<abm::AppMonitorInternal>(abm::AppMonitorInternal*)::{lambda(abm::AppMonitorInternal*)#1},void>(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0B070;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  if (!a2) {
    return a1;
  }
  int v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      a2->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
      a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  a2->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
  a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1A611064C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)std::shared_ptr<abm::AppMonitorInternal> ctu::SharedSynchronizable<abm::AppMonitorInternal>::make_shared_ptr<abm::AppMonitorInternal>(abm::AppMonitorInternal*)::{lambda(abm::AppMonitorInternal*)#1}::operator() const(abm::AppMonitorInternal*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1A6110674(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<abm::AppMonitorInternal *,std::shared_ptr<abm::AppMonitorInternal> ctu::SharedSynchronizable<abm::AppMonitorInternal>::make_shared_ptr<abm::AppMonitorInternal>(abm::AppMonitorInternal*)::{lambda(abm::AppMonitorInternal *)#1},std::allocator<abm::AppMonitorInternal>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<abm::AppMonitorInternal *,std::shared_ptr<abm::AppMonitorInternal> ctu::SharedSynchronizable<abm::AppMonitorInternal>::make_shared_ptr<abm::AppMonitorInternal>(abm::AppMonitorInternal*)::{lambda(abm::AppMonitorInternal *)#1},std::allocator<abm::AppMonitorInternal>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<abm::AppMonitorInternal *,std::shared_ptr<abm::AppMonitorInternal> ctu::SharedSynchronizable<abm::AppMonitorInternal>::make_shared_ptr<abm::AppMonitorInternal>(abm::AppMonitorInternal*)::{lambda(abm::AppMonitorInternal *)#1},std::allocator<abm::AppMonitorInternal>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN3abm18AppMonitorInternalEE15make_shared_ptrIS2_EENSt3__110shared_ptrI"
                     "T_EEPS7_EUlPS2_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN3abm18AppMonitorInternalEE15make_shared_ptrIS2_EENSt3__110"
                                "shared_ptrIT_EEPS7_EUlPS2_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN3abm18AppMonitorInternalEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN3abm18AppMonitorInternalEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void std::shared_ptr<abm::AppMonitorInternal> ctu::SharedSynchronizable<abm::AppMonitorInternal>::make_shared_ptr<abm::AppMonitorInternal>(abm::AppMonitorInternal*)::{lambda(abm::AppMonitorInternal*)#1}::operator() const(abm::AppMonitorInternal*)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = a1 + 56;
    uint64_t v3 = *(void *)(a1 + 80);
    if (v3 == v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    }
    else if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }

    MEMORY[0x1A6274750](a1 + 32);
    uint64_t v4 = *(NSObject **)(a1 + 24);
    if (v4) {
      dispatch_release(v4);
    }
    uint64_t v5 = *(NSObject **)(a1 + 16);
    if (v5) {
      dispatch_release(v5);
    }
    int v6 = *(std::__shared_weak_count **)(a1 + 8);
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
    operator delete((void *)a1);
  }
}

void *std::__shared_ptr_emplace<abm::AppMonitor>::__shared_ptr_emplace[abi:ne180100]<ctu::OsLogContext &,std::allocator<abm::AppMonitor>,0>(void *a1, const ctu::OsLogContext *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EFB0B0C0;
  uint64_t v3 = (uint64_t)(a1 + 3);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v5, a2);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v6, (const ctu::OsLogContext *)v5);
  abm::AppMonitorInternal::create((const ctu::OsLogContext *)v6, v3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v6);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v5);
  return a1;
}

void sub_1A61108A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  std::__shared_weak_count::~__shared_weak_count(v11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<abm::AppMonitor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0B0C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<abm::AppMonitor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0B0C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<abm::AppMonitor>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

char *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, unsigned char *a3)
{
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

unsigned char *bsp::tlv::abm::writeField(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  return a1 + 12;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<bsp::tlv::abm::DIAGPresetID>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A6110A30(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DIAGPresetID>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::DIAGPresetID>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  unsigned char *v2 = *a2;
  *uint64_t result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::DIAGActiveIface>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A6110AF0(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DIAGActiveIface>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::DIAGActiveIface>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  unsigned char *v2 = *a2;
  *uint64_t result = v2 + 1;
  return result;
}

unsigned char *bsp::tlv::abm::writeField(unsigned char *a1, _DWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<bsp::tlv::abm::DIAGConfig>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A6110BB0(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DIAGConfig>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::DIAGConfig>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  unsigned char *v2 = *a2;
  *uint64_t result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::DIAGBuffering>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A6110C70(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DIAGBuffering>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::DIAGBuffering>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  unsigned char *v2 = *a2;
  *uint64_t result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::DIAGWMHigh>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1A6110D30(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DIAGWMHigh>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::DIAGWMHigh>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  _WORD *v2 = *a2;
  *uint64_t result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::DIAGWMLow>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1A6110DF0(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DIAGWMLow>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::DIAGWMLow>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  _WORD *v2 = *a2;
  *uint64_t result = v2 + 1;
  return result;
}

BOOL util::writeJSON(ctu **a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2;
  if (*((char *)a2 + 23) < 0) {
    uint64_t v4 = (uint64_t *)*a2;
  }
  uint64_t v5 = (void *)MEMORY[0x1E4F1CAA8];
  int v6 = [NSString stringWithUTF8String:v4];
  std::string v7 = [v5 outputStreamToFileAtPath:v6 append:0];

  if (v7 && ([v7 open], objc_msgSend(v7, "streamStatus") == 2))
  {
    if ([v7 hasSpaceAvailable])
    {
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      ctu::xpc_to_cf((uint64_t *)&cf, *a1, v8);
      id v16 = 0;
      [MEMORY[0x1E4F28D90] writeJSONObject:cf toStream:v7 options:1 error:&v16];
      id v9 = v16;
      BOOL v10 = v9 == 0;
      if (v9)
      {
        uint64_t v11 = GetOsLogContext()[1];
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)v2 + 23) < 0) {
            uint64_t v2 = (uint64_t *)*v2;
          }
          id v14 = [v9 localizedDescription];
          uint64_t v15 = [v14 UTF8String];
          *(_DWORD *)long long buf = 136315394;
          BOOL v19 = v2;
          __int16 v20 = 2080;
          uint64_t v21 = v15;
          _os_log_error_impl(&dword_1A609F000, v11, OS_LOG_TYPE_ERROR, "Failed to write %s with error: %s", buf, 0x16u);
        }
      }
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      id v12 = GetOsLogContext()[1];
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)v2 + 23) < 0) {
          uint64_t v2 = (uint64_t *)*v2;
        }
        *(_DWORD *)long long buf = 136315138;
        BOOL v19 = v2;
        _os_log_error_impl(&dword_1A609F000, v12, OS_LOG_TYPE_ERROR, "Failed to write %s due to no space available or invalid path.", buf, 0xCu);
      }
      BOOL v10 = 0;
    }
    [v7 close];
  }
  else
  {
    BOOL v10 = 0;
  }

  return v10;
}

void sub_1A611105C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<void const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

BOOL util::writeJSONToBuffer(ctu **a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v15 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_WORD *)long long buf = 0;
    id v16 = "Failed to write json to buffer due to invalid buffer";
LABEL_15:
    _os_log_error_impl(&dword_1A609F000, v15, OS_LOG_TYPE_ERROR, v16, buf, 2u);
    return 0;
  }
  if (!a4)
  {
    uint64_t v15 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_WORD *)long long buf = 0;
    id v16 = "Failed to write json to buffer due to invalid bytes written parameter";
    goto LABEL_15;
  }
  if (a3)
  {
    int v6 = [MEMORY[0x1E4F1CAA8] outputStreamToBuffer:a2 capacity:a3];
    std::string v7 = v6;
    if (v6)
    {
      [v6 open];
      if ([v7 streamStatus] == 2)
      {
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        ctu::xpc_to_cf((uint64_t *)&cf, *a1, v8);
        id v20 = 0;
        int v9 = [MEMORY[0x1E4F28D90] writeJSONObject:cf toStream:v7 options:1 error:&v20];
        id v10 = v20;
        BOOL v11 = v10 == 0;
        if (v10)
        {
          id v12 = GetOsLogContext()[1];
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            id v13 = [v10 localizedDescription];
            uint64_t v14 = [v13 UTF8String];
            *(_DWORD *)long long buf = 136315138;
            uint64_t v23 = v14;
            _os_log_error_impl(&dword_1A609F000, v12, OS_LOG_TYPE_ERROR, "Failed to write json to buffer with error: %s", buf, 0xCu);
          }
        }
        else
        {
          *a4 = v9;
        }
        [v7 close];
        if (cf) {
          CFRelease(cf);
        }

        goto LABEL_25;
      }
      int v17 = GetOsLogContext()[1];
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
LABEL_20:
        BOOL v11 = 0;
LABEL_25:

        return v11;
      }
      *(_WORD *)long long buf = 0;
      id v18 = "Failed to write json to buffer due to stream opening failure";
    }
    else
    {
      int v17 = GetOsLogContext()[1];
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        goto LABEL_20;
      }
      *(_WORD *)long long buf = 0;
      id v18 = "Failed to write json to buffer due to invalid stream";
    }
    _os_log_error_impl(&dword_1A609F000, v17, OS_LOG_TYPE_ERROR, v18, buf, 2u);
    goto LABEL_20;
  }
  uint64_t v15 = GetOsLogContext()[1];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    id v16 = "Failed to write json to buffer due to no buffer capacity";
    goto LABEL_15;
  }
  return 0;
}

void sub_1A61113B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void util::readJSON(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_null_create();
  *a2 = v4;
  uint64_t v5 = a1;
  if (*((char *)a1 + 23) < 0) {
    uint64_t v5 = (uint64_t *)*a1;
  }
  int v6 = (void *)MEMORY[0x1E4F1CA10];
  std::string v7 = [NSString stringWithUTF8String:v5];
  int v8 = [v6 inputStreamWithFileAtPath:v7];

  if (v8)
  {
    [v8 open];
    if ([v8 streamStatus] == 2)
    {
      if ([v8 hasBytesAvailable])
      {
        id v18 = 0;
        int v9 = [MEMORY[0x1E4F28D90] JSONObjectWithStream:v8 options:0 error:&v18];
        id v11 = v18;
        if (v11)
        {
          id v12 = GetOsLogContext()[1];
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            if (*((char *)a1 + 23) < 0) {
              a1 = (uint64_t *)*a1;
            }
            id v13 = [v11 localizedDescription];
            uint64_t v14 = [v13 UTF8String];
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = a1;
            __int16 v20 = 2080;
            uint64_t v21 = v14;
            _os_log_error_impl(&dword_1A609F000, v12, OS_LOG_TYPE_ERROR, "Failed to read %s with error: %s", buf, 0x16u);
          }
        }
        else
        {
          ctu::cf_to_xpc((uint64_t *)buf, v9, v10);
          xpc_object_t v16 = *(xpc_object_t *)buf;
          if (*(void *)buf && MEMORY[0x1A6275E60](*(void *)buf) == MEMORY[0x1E4F14590]) {
            xpc_retain(v16);
          }
          else {
            xpc_object_t v16 = xpc_null_create();
          }
          xpc_object_t v17 = xpc_null_create();
          *a2 = v16;
          xpc_release(v4);
          xpc_release(v17);
          xpc_release(*(xpc_object_t *)buf);
        }
      }
      else
      {
        uint64_t v15 = GetOsLogContext()[1];
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)a1 + 23) < 0) {
            a1 = (uint64_t *)*a1;
          }
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = a1;
          _os_log_error_impl(&dword_1A609F000, v15, OS_LOG_TYPE_ERROR, "Failed to read %s due to no bytes available or invalid path.", buf, 0xCu);
        }
      }
      [v8 close];
    }
  }
}

void sub_1A6111690(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t support::fs::toString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1)
  {
    a2[23] = 9;
    strcpy(a2, "_wireless");
  }
  else if (result)
  {
    a2[23] = 0;
    *a2 = 0;
  }
  else
  {
    a2[23] = 6;
    strcpy(a2, "mobile");
  }
  return result;
}

uint64_t support::fs::updateOwner(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blkstd::string::size_type size = v6;
  *(timespec *)__dst.st_qspare = v6;
  __dst.st_birthtimespec = v6;
  *(timespec *)&__dst.st_std::string::size_type size = v6;
  __dst.st_mtimespec = v6;
  __dst.st_ctimespec = v6;
  *(timespec *)&__dst.st_uid = v6;
  __dst.st_atimespec = v6;
  *(timespec *)&__dst.st_dev = v6;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (!stat(a1, &__dst))
  {
    xpc_object_t v17 = v5[23] >= 0 ? v5 : *(const char **)v5;
    id v18 = opendir(v17);
    if (v18)
    {
      BOOL v19 = v18;
      __int16 v20 = readdir(v18);
      closedir(v19);
      if (v20)
      {
        std::string v61 = 0;
        char v62 = 0;
        uint64_t v63 = 0;
        support::fs::readDir(v5, (uint64_t)&v61);
        uint64_t v21 = (char *)v61;
        gid_t v57 = v62;
        if (v61 == v62)
        {
          uint64_t updated = 0;
          if (v61) {
            goto LABEL_105;
          }
          return updated;
        }
        uint64_t v22 = (const std::string::value_type **)((char *)v61 + 24);
        while (1)
        {
          memset(&v60, 170, sizeof(v60));
          if (*((char *)v22 - 1) < 0)
          {
            std::string::__init_copy_ctor_external(&v60, *(v22 - 3), (std::string::size_type)*(v22 - 2));
          }
          else
          {
            long long v24 = *(_OWORD *)(v22 - 3);
            v60.__r_.__value_.__r.__words[2] = (std::string::size_type)*(v22 - 1);
            *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v24;
          }
          memset(&__p, 170, sizeof(__p));
          int v25 = v5[23];
          if (v25 >= 0) {
            size_t v26 = *((unsigned __int8 *)v5 + 23);
          }
          else {
            size_t v26 = *((void *)v5 + 1);
          }
          unint64_t v27 = v26 + 1;
          memset(&__dst, 170, 24);
          if (v26 + 1 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v27 >= 0x17)
          {
            uint64_t v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17) {
              uint64_t v29 = v27 | 7;
            }
            uint64_t v30 = v29 + 1;
            p_dst = (char *)operator new(v29 + 1);
            __dst.__darwin_ino64_t st_ino = v26 + 1;
            *(void *)&__dst.st_uid = v30 | 0x8000000000000000;
            *(void *)&__dst.st_dev = p_dst;
          }
          else
          {
            memset(&__dst, 0, 24);
            p_dst = (char *)&__dst;
            HIBYTE(__dst.st_gid) = v26 + 1;
            if (!v26) {
              goto LABEL_47;
            }
          }
          if (v25 >= 0) {
            uint64_t v31 = v5;
          }
          else {
            uint64_t v31 = *(const char **)v5;
          }
          memmove(p_dst, v31, v26);
LABEL_47:
          *(_WORD *)&p_dst[v26] = 47;
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v32 = &v60;
          }
          else {
            long long v32 = (std::string *)v60.__r_.__value_.__r.__words[0];
          }
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v60.__r_.__value_.__l.__size_;
          }
          int64_t v34 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v32, size);
          long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.st_gid) < 0) {
            operator delete(*(void **)&__dst.st_dev);
          }
          std::string::size_type v36 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v36 = v60.__r_.__value_.__l.__size_;
          }
          if (v36 == 2)
          {
            uint64_t v38 = &v60;
            if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v38 = (std::string *)v60.__r_.__value_.__r.__words[0];
            }
            if (LOWORD(v38->__r_.__value_.__l.__data_) == 11822)
            {
LABEL_70:
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_p = &__p;
              }
              else {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              size_t v42 = strlen((const char *)p_p);
              if (v42 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              __darwin_ino64_t v43 = v42;
              if (v42 >= 0x17)
              {
                uint64_t v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v42 | 7) != 0x17) {
                  uint64_t v45 = v42 | 7;
                }
                uint64_t v46 = v45 + 1;
                xpc_object_t v44 = operator new(v45 + 1);
                __dst.__darwin_ino64_t st_ino = v43;
                *(void *)&__dst.st_uid = v46 | 0x8000000000000000;
                *(void *)&__dst.st_dev = v44;
              }
              else
              {
                HIBYTE(__dst.st_gid) = v42;
                xpc_object_t v44 = &__dst;
                if (!v42)
                {
LABEL_81:
                  v44[v43] = 0;
                  int st_gid_high = SHIBYTE(__dst.st_gid);
                  xpc_object_t v48 = *(void **)&__dst.st_dev;
                  if ((__dst.st_gid & 0x80000000) == 0) {
                    unint64_t v49 = &__dst;
                  }
                  else {
                    unint64_t v49 = *(stat **)&__dst.st_dev;
                  }
                  uint64_t updated = chown((const char *)v49, a2, a3) == 0;
                  if (st_gid_high < 0)
                  {
                    int v50 = v48;
LABEL_86:
                    operator delete(v50);
                    goto LABEL_87;
                  }
                  goto LABEL_87;
                }
              }
              memmove(v44, p_p, v43);
              goto LABEL_81;
            }
          }
          else if (v36 == 1)
          {
            char v37 = &v60;
            if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              char v37 = (std::string *)v60.__r_.__value_.__r.__words[0];
            }
            if (v37->__r_.__value_.__s.__data_[0] == 46) {
              goto LABEL_70;
            }
          }
          v39.tv_sec = 0xAAAAAAAAAAAAAAAALL;
          v39.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
          *(timespec *)&__dst.st_blkstd::string::size_type size = v39;
          *(timespec *)__dst.st_qspare = v39;
          __dst.st_birthtimespec = v39;
          *(timespec *)&__dst.st_std::string::size_type size = v39;
          __dst.st_mtimespec = v39;
          __dst.st_ctimespec = v39;
          *(timespec *)&__dst.st_uid = v39;
          __dst.st_atimespec = v39;
          *(timespec *)&__dst.st_dev = v39;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v40 = &__p;
          }
          else {
            long long v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (stat((const char *)v40, &__dst)) {
            goto LABEL_70;
          }
          uint64_t v51 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          std::string v52 = opendir((const char *)v51);
          std::string v53 = v52;
          if (!v52) {
            goto LABEL_70;
          }
          uint64_t v54 = readdir(v52);
          closedir(v53);
          if (!v54) {
            goto LABEL_70;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v58, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string v58 = __p;
          }
          uint64_t updated = support::fs::updateOwner(&v58, a2, a3);
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          {
            int v50 = (void *)v58.__r_.__value_.__r.__words[0];
            goto LABEL_86;
          }
LABEL_87:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
LABEL_91:
            }
              operator delete(v60.__r_.__value_.__l.__data_);
          }
          else if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_91;
          }
          if (v22 == (const std::string::value_type **)v57) {
            char v23 = 0;
          }
          else {
            char v23 = updated;
          }
          v22 += 3;
          if ((v23 & 1) == 0)
          {
            uint64_t v21 = (char *)v61;
            if (!v61) {
              return updated;
            }
LABEL_105:
            uint64_t v55 = (void **)v62;
            xpc_object_t v16 = v21;
            if (v62 != v21)
            {
              do
              {
                if (*((char *)v55 - 1) < 0) {
                  operator delete(*(v55 - 3));
                }
                v55 -= 3;
              }
              while (v55 != (void **)v21);
              xpc_object_t v16 = v61;
            }
            char v62 = v21;
LABEL_112:
            operator delete(v16);
            return updated;
          }
        }
      }
    }
  }
  if (v5[23] < 0) {
    uint64_t v5 = *(const char **)v5;
  }
  size_t v7 = strlen(v5);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  __darwin_ino64_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    int v9 = operator new(v10 + 1);
    __dst.__darwin_ino64_t st_ino = v8;
    *(void *)&__dst.st_uid = v11 | 0x8000000000000000;
    *(void *)&__dst.st_dev = v9;
    goto LABEL_13;
  }
  HIBYTE(__dst.st_gid) = v7;
  int v9 = &__dst;
  if (v7) {
LABEL_13:
  }
    memmove(v9, v5, v8);
  *((unsigned char *)v9 + v8) = 0;
  int v12 = SHIBYTE(__dst.st_gid);
  id v13 = *(void **)&__dst.st_dev;
  if ((__dst.st_gid & 0x80000000) == 0) {
    uint64_t v14 = &__dst;
  }
  else {
    uint64_t v14 = *(stat **)&__dst.st_dev;
  }
  uint64_t updated = chown((const char *)v14, a2, a3) == 0;
  if (v12 < 0)
  {
    xpc_object_t v16 = v13;
    goto LABEL_112;
  }
  return updated;
}

void sub_1A6111CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31)
{
}

void sub_1A6111D20()
{
}

DIR *support::fs::isDir(const char *a1)
{
  uint64_t v1 = a1;
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v7.st_blkstd::string::size_type size = v2;
  *(timespec *)v7.st_qspare = v2;
  v7.st_birthtimespec = v2;
  *(timespec *)&v7.st_std::string::size_type size = v2;
  v7.st_mtimespec = v2;
  v7.st_ctimespec = v2;
  *(timespec *)&v7.st_uid = v2;
  v7.st_atimespec = v2;
  *(timespec *)&v7.st_dev = v2;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (stat(a1, &v7)) {
    return 0;
  }
  if (v1[23] >= 0) {
    xpc_object_t v4 = v1;
  }
  else {
    xpc_object_t v4 = *(const char **)v1;
  }
  uint64_t result = opendir(v4);
  if (result)
  {
    uint64_t v5 = result;
    timespec v6 = readdir(result);
    closedir(v5);
    return (DIR *)(v6 != 0);
  }
  return result;
}

BOOL support::fs::chown(const char *a1, uid_t a2, gid_t a3)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return chown(a1, a2, a3) == 0;
}

DIR *support::fs::readDir(const char *a1, uint64_t a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t result = opendir(a1);
  if (result)
  {
    xpc_object_t v4 = result;
    uint64_t v5 = readdir(result);
    if (v5)
    {
      timespec v6 = v5;
      do
      {
        memset(__dst, 170, sizeof(__dst));
        d_namleptrdiff_t n = v6->d_namlen;
        if (d_namlen >= 0x17)
        {
          if ((d_namlen | 7) == 0x17) {
            uint64_t v11 = ((unsigned __int16)d_namlen & 0xFFF8) + 8;
          }
          else {
            uint64_t v11 = d_namlen | 7;
          }
          __darwin_ino64_t v8 = operator new(v11 + 1);
          *(void *)&__dst[8] = d_namlen;
          *(void *)&__dst[16] = v11 - 0x7FFFFFFFFFFFFFFFLL;
          *(void *)stat __dst = v8;
        }
        else
        {
          __dst[23] = v6->d_namlen;
          __darwin_ino64_t v8 = __dst;
          if (!d_namlen)
          {
            __dst[d_namlen] = 0;
            int v9 = *(std::string **)(a2 + 8);
            if ((unint64_t)v9 < *(void *)(a2 + 16)) {
              goto LABEL_10;
            }
            goto LABEL_17;
          }
        }
        memmove(v8, v6->d_name, d_namlen);
        v8[d_namlen] = 0;
        int v9 = *(std::string **)(a2 + 8);
        if ((unint64_t)v9 < *(void *)(a2 + 16))
        {
LABEL_10:
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
          }
          else
          {
            long long v10 = *(_OWORD *)__dst;
            v9->__r_.__value_.__r.__words[2] = *(void *)&__dst[16];
            *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
          }
          *(void *)(a2 + 8) = v9 + 1;
          *(void *)(a2 + 8) = v9 + 1;
          if ((__dst[23] & 0x80000000) == 0) {
            goto LABEL_6;
          }
LABEL_21:
          operator delete(*(void **)__dst);
          goto LABEL_6;
        }
LABEL_17:
        *(void *)(a2 + 8) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)__dst);
        if ((__dst[23] & 0x80000000) != 0) {
          goto LABEL_21;
        }
LABEL_6:
        timespec v6 = readdir(v4);
      }
      while (v6);
    }
    return (DIR *)closedir(v4);
  }
  return result;
}

void sub_1A6111FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t support::fs::getUidGid(int a1, uid_t *a2, gid_t *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  memset(__p, 170, sizeof(__p));
  if (a1 == 1)
  {
    HIBYTE(__p[2]) = 9;
    strcpy((char *)__p, "_wireless");
    uint64_t v5 = getpwnam((const char *)__p);
    if (v5) {
      goto LABEL_4;
    }
LABEL_6:
    stat v7 = GetOsLogContext()[1];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      long long v10 = __p;
      _os_log_error_impl(&dword_1A609F000, v7, OS_LOG_TYPE_ERROR, "Getting uid and gid: failed to get passwd for %s", buf, 0xCu);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }
    return 0;
  }
  if (!a1)
  {
    HIBYTE(__p[2]) = 6;
    strcpy((char *)__p, "mobile");
    uint64_t v5 = getpwnam((const char *)__p);
    if (v5)
    {
LABEL_4:
      *a2 = v5->pw_uid;
      *a3 = v5->pw_gid;
      return 1;
    }
    goto LABEL_6;
  }
  return 0;
}

BOOL support::fs::writeToCompletion(support::fs *this, char *__buf, size_t __nbyte)
{
  int v4 = (int)this;
  do
  {
    size_t v5 = __nbyte;
    if (!__nbyte) {
      break;
    }
    ssize_t v6 = write(v4, __buf, __nbyte);
    __nbyte = v5 - v6;
    __buf += v6;
  }
  while ((v6 & 0x8000000000000000) == 0);
  return v5 == 0;
}

BOOL support::fs::writeToCompletion(FILE *__stream, __sFILE *__ptr, size_t __nitems)
{
  while (1)
  {
    size_t v5 = __nitems;
    if (!__nitems) {
      break;
    }
    size_t v6 = fwrite(__ptr, 1uLL, __nitems, __stream);
    __nitems = v5 - v6;
    __ptr = (__sFILE *)((char *)__ptr + v6);
    if (!v6) {
      return v5 == 0;
    }
  }
  fflush(__stream);
  return 1;
}

uint64_t support::fs::openFile(const char *a1, int a2, unsigned int a3)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return open(a1, a2, a3);
}

BOOL support::fs::closeFile(support::fs *this)
{
  int v1 = (int)this;
  do
    int v2 = close(v1);
  while (v2 && *__error() == 4);
  return v2 == 0;
}

BOOL support::fs::copyFile(const char *a1, const char *a2, int a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (a1[23] >= 0) {
    size_t v6 = a1;
  }
  else {
    size_t v6 = *(const char **)a1;
  }
  size_t v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    int v9 = operator new(v10 + 1);
    *(void *)&__dst[8] = v8;
    *(void *)&__dst[16] = v11 | 0x8000000000000000;
    *(void *)stat __dst = v9;
    goto LABEL_11;
  }
  __dst[23] = v7;
  int v9 = __dst;
  if (v7) {
LABEL_11:
  }
    memmove(v9, v6, v8);
  v9[v8] = 0;
  if (__dst[23] >= 0) {
    int v12 = __dst;
  }
  else {
    int v12 = *(const char **)__dst;
  }
  int v13 = open(v12, 0, 420);
  int v14 = v13;
  if ((__dst[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__dst);
    if ((v14 & 0x80000000) == 0)
    {
LABEL_17:
      if (a2[23] >= 0) {
        uint64_t v15 = a2;
      }
      else {
        uint64_t v15 = *(const char **)a2;
      }
      size_t v16 = strlen(v15);
      if (v16 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v17 = v16;
      if (v16 >= 0x17)
      {
        uint64_t v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v21 = v16 | 7;
        }
        uint64_t v22 = v21 + 1;
        id v18 = operator new(v21 + 1);
        *(void *)&__dst[8] = v17;
        *(void *)&__dst[16] = v22 | 0x8000000000000000;
        *(void *)stat __dst = v18;
      }
      else
      {
        __dst[23] = v16;
        id v18 = __dst;
        if (!v16)
        {
LABEL_31:
          v18[v17] = 0;
          if (__dst[23] >= 0) {
            char v23 = __dst;
          }
          else {
            char v23 = *(const char **)__dst;
          }
          int v24 = open(v23, 1541, 420);
          int v25 = v24;
          if ((__dst[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__dst);
            if ((v25 & 0x80000000) == 0) {
              goto LABEL_36;
            }
          }
          else if ((v24 & 0x80000000) == 0)
          {
LABEL_36:
            memset(__dst, 170, sizeof(__dst));
            ssize_t v26 = read(v14, __dst, 0x400uLL);
            if (v26 < 1)
            {
LABEL_42:
              BOOL v20 = v26 == 0;
              if (!v26 && a3)
              {
                *(void *)&long long v29 = 0xAAAAAAAAAAAAAAAALL;
                *((void *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
                *(_OWORD *)&__dst[112] = v29;
                *(_OWORD *)&__dst[128] = v29;
                *(_OWORD *)&__dst[80] = v29;
                *(_OWORD *)&__dst[96] = v29;
                *(_OWORD *)&__dst[48] = v29;
                *(_OWORD *)&__dst[64] = v29;
                *(_OWORD *)&__dst[16] = v29;
                *(_OWORD *)&unsigned char __dst[32] = v29;
                *(_OWORD *)stat __dst = v29;
                if (fstat(v14, (stat *)__dst)) {
                  BOOL v20 = 0;
                }
                else {
                  BOOL v20 = fchmod(v25, *(mode_t *)&__dst[4]) == 0;
                }
              }
            }
            else
            {
              unint64_t v27 = __dst;
              do
              {
                while (!v26)
                {
                  memset(__dst, 170, sizeof(__dst));
                  ssize_t v26 = read(v14, __dst, 0x400uLL);
                  unint64_t v27 = __dst;
                  if (v26 <= 0) {
                    goto LABEL_42;
                  }
                }
                ssize_t v28 = write(v25, v27, v26);
                v26 -= v28;
                v27 += v28;
              }
              while ((v28 & 0x8000000000000000) == 0);
              BOOL v20 = 0;
            }
            while (close(v25) && *__error() == 4)
              ;
            goto LABEL_52;
          }
          uint64_t v30 = GetOsLogContext()[1];
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            if (a2[23] >= 0) {
              uint64_t v33 = a2;
            }
            else {
              uint64_t v33 = *(const char **)a2;
            }
            *(_DWORD *)stat __dst = 136315138;
            *(void *)&__dst[4] = v33;
            _os_log_error_impl(&dword_1A609F000, v30, OS_LOG_TYPE_ERROR, "Failed to open the destination file(%s)", __dst, 0xCu);
          }
          BOOL v20 = 0;
LABEL_52:
          while (close(v14) && *__error() == 4)
            ;
          return v20;
        }
      }
      memmove(v18, v15, v17);
      goto LABEL_31;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  BOOL v19 = GetOsLogContext()[1];
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0) {
      long long v32 = a1;
    }
    else {
      long long v32 = *(const char **)a1;
    }
    *(_DWORD *)stat __dst = 136315138;
    *(void *)&__dst[4] = v32;
    _os_log_error_impl(&dword_1A609F000, v19, OS_LOG_TYPE_ERROR, "Failed to open the source file(%s)", __dst, 0xCu);
  }
  return 0;
}

void sub_1A611268C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL support::fs::loadFile(uint64_t a1, uint64_t a2)
{
  __b[89] = *MEMORY[0x1E4F143B8];
  memset(__b, 170, 0x240uLL);
  std::ifstream::basic_ifstream(__b);
  if (!__b[17]
    || (std::istream::tellg(), std::istream::seekg(), std::istream::tellg(), unint64_t v3 = __b[88], std::istream::seekg(), !v3)
    || *(_DWORD *)((char *)&__b[4] + *(void *)(__b[0] - 24)))
  {
    BOOL v4 = 0;
    goto LABEL_5;
  }
  size_t v7 = *(char **)a2;
  size_t v6 = *(char **)(a2 + 8);
  unint64_t v8 = (unint64_t)&v6[-*(void *)a2];
  unint64_t v9 = v3 - v8;
  if (v3 <= v8)
  {
    if (v3 < v8) {
      *(void *)(a2 + 8) = &v7[v3];
    }
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10 - (uint64_t)v6 < v9)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v10 - (void)v7;
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v3) {
      uint64_t v12 = v3;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v13 = v12;
    }
    int v14 = (char *)operator new(v13);
    uint64_t v15 = &v14[v8];
    size_t v16 = &v14[v13];
    bzero(&v14[v8], v3 - v8);
    if (v6 == v7) {
      goto LABEL_34;
    }
    if (v8 >= 8 && (unint64_t)(v7 - v14) >= 0x20)
    {
      if (v8 < 0x20)
      {
        unint64_t v17 = 0;
        goto LABEL_26;
      }
      unint64_t v17 = v8 & 0xFFFFFFFFFFFFFFE0;
      id v18 = v6 - 16;
      BOOL v19 = &v14[v6 - 16 - v7];
      unint64_t v20 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v21 = *(_OWORD *)v18;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)BOOL v19 = v21;
        v19 -= 32;
        v18 -= 32;
        v20 -= 32;
      }
      while (v20);
      if (v8 == v17) {
        goto LABEL_33;
      }
      if ((v8 & 0x18) != 0)
      {
LABEL_26:
        v15 -= v8 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v22 = &v6[-v17 - 8];
        char v23 = (char *)(v22 - v7);
        unint64_t v24 = v17 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v25 = *(void *)v22;
          v22 -= 8;
          *(void *)&v23[(void)v14] = v25;
          v23 -= 8;
          v24 += 8;
        }
        while (v24);
        v6 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_33;
        }
        goto LABEL_31;
      }
      v15 -= v17;
      v6 -= v17;
    }
LABEL_31:
    ssize_t v26 = v15 - 1;
    do
    {
      char v27 = *--v6;
      *v26-- = v27;
    }
    while (v6 != v7);
LABEL_33:
    size_t v6 = v7;
    uint64_t v15 = v14;
LABEL_34:
    *(void *)a2 = v15;
    *(void *)(a2 + 8) = &v14[v3];
    *(void *)(a2 + 16) = v16;
    if (v6) {
      operator delete(v6);
    }
    goto LABEL_36;
  }
  bzero(*(void **)(a2 + 8), v3 - v8);
  *(void *)(a2 + 8) = &v6[v9];
LABEL_36:
  std::istream::read();
  BOOL v4 = __b[1] == (int)v3;
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)__b + *(void *)(__b[0] - 24)), *(_DWORD *)((char *)&__b[4] + *(void *)(__b[0] - 24)) | 4);
  }
LABEL_5:
  __b[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)__b + *(void *)(__b[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1A6274EB0](&__b[2]);
  std::istream::~istream();
  MEMORY[0x1A62751A0](&__b[53]);
  return v4;
}