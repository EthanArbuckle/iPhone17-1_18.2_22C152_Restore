void sub_1A618C9F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, boost::signals2::detail::connection_body_base *a11, void *__p, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  boost::signals2::detail::connection_body_base *v57;
  void **v58;
  void *v59;
  uint64_t v60;
  void *v61;

  if (a2)
  {
    v59 = *v58;
    if (*v58)
    {
      v60 = (uint64_t)v58[1];
      v61 = *v58;
      if ((void *)v60 != v59)
      {
        do
        {
          v60 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v60);
        }
        while ((void *)v60 != v59);
        v61 = *v58;
      }
      v58[1] = v59;
      operator delete(v61);
    }
    operator delete(v58);
    boost::signals2::detail::connection_body_base::~connection_body_base(v57);
    JUMPOUT(0x1A618E0B8);
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618D640(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v2 = STACK[0x228];
    if (STACK[0x228])
    {
      if ((uint64_t)(STACK[0x230] - 1) >= 0)
      {
        unint64_t v3 = v2 + 16 * STACK[0x230];
        do
        {
          v4 = *(atomic_uint **)(v3 - 8);
          if (v4)
          {
            if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
              if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
              }
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x220] >= 0xB) {
        operator delete((void *)STACK[0x228]);
      }
    }
    JUMPOUT(0x1A618E33CLL);
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618D70C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1A618D714);
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618D740(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1A618D748);
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618D758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  boost::signals2::connection::~connection((boost::signals2::connection *)va);
  _Unwind_Resume(a1);
}

void sub_1A618D770(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618D7B0(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1A618E35CLL);
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618D7C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    unint64_t v12 = (unint64_t)v11[3];
    if (v12)
    {
      if ((v12 & 1) == 0)
      {
        v13 = *(void (**)(void **, void **, uint64_t))(v12 & 0xFFFFFFFFFFFFFFFELL);
        if (v13) {
          v13(v11 + 4, v11 + 4, 2);
        }
      }
      v11[3] = 0;
    }
    v14 = *v11;
    if (*v11)
    {
      uint64_t v15 = (uint64_t)v11[1];
      v16 = *v11;
      if ((void *)v15 != v14)
      {
        do
        {
          v15 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v15);
        }
        while ((void *)v15 != v14);
        v16 = *v11;
      }
      v11[1] = v14;
      operator delete(v16);
    }
    operator delete(v11);
    __cxa_rethrow();
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618D850(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, boost::signals2::detail::connection_body_base *a11)
{
  if (a2)
  {
    __cxa_end_catch();
    v11 = (atomic_uint *)*((void *)a11 + 5);
    if (v11)
    {
      if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
        if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
        }
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(a11);
    JUMPOUT(0x1A618E19CLL);
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618D8EC(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1A618D8F8);
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618D904(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1A618D910);
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618D91C(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v2 = STACK[0x228];
    if (STACK[0x228])
    {
      if ((uint64_t)(STACK[0x230] - 1) >= 0)
      {
        unint64_t v3 = v2 + 16 * STACK[0x230];
        do
        {
          v4 = *(atomic_uint **)(v3 - 8);
          if (v4)
          {
            if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
              if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
              }
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x220] >= 0xB) {
        operator delete((void *)STACK[0x228]);
      }
    }
    JUMPOUT(0x1A618E364);
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618D9E8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1A618D9F0);
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618DA1C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1A618DA24);
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618DA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  boost::signals2::connection::~connection((boost::signals2::connection *)va);
  _Unwind_Resume(a1);
}

void sub_1A618DA4C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618DA8C(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1A618E38CLL);
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618DAA0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    unint64_t v13 = (unint64_t)v12[3];
    if (v13)
    {
      if ((v13 & 1) == 0)
      {
        v14 = *(void (**)(void **, void **, uint64_t))(v13 & 0xFFFFFFFFFFFFFFFELL);
        if (v14) {
          v14(v12 + 4, v12 + 4, 2);
        }
      }
      v12[3] = 0;
    }
    uint64_t v15 = *v12;
    if (*v12)
    {
      uint64_t v16 = (uint64_t)v12[1];
      v17 = *v12;
      if ((void *)v16 != v15)
      {
        do
        {
          v16 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v16);
        }
        while ((void *)v16 != v15);
        v17 = *v12;
      }
      v12[1] = v15;
      operator delete(v17);
    }
    operator delete(v12);
    __cxa_rethrow();
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618DB2C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, boost::signals2::detail::connection_body_base *a12)
{
  if (a2)
  {
    __cxa_end_catch();
    unint64_t v12 = (atomic_uint *)*((void *)a12 + 5);
    if (v12)
    {
      if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
        if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
        }
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(a12);
    JUMPOUT(0x1A618E280);
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618DBC8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1A618DBD4);
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618DBE0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1A618DBECLL);
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618DBF8(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v2 = STACK[0x228];
    if (STACK[0x228])
    {
      if ((uint64_t)(STACK[0x230] - 1) >= 0)
      {
        unint64_t v3 = v2 + 16 * STACK[0x230];
        do
        {
          v4 = *(atomic_uint **)(v3 - 8);
          if (v4)
          {
            if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
              if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
              }
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x220] >= 0xB) {
        operator delete((void *)STACK[0x228]);
      }
    }
    JUMPOUT(0x1A618E394);
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618DCC4(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1A618DCCCLL);
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618DCF8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1A618DD00);
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618DD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  if (a68 < 0)
  {
    operator delete(__p);
    if (a37 < 0)
    {
LABEL_5:
      operator delete(a32);
      if ((a49 & 0x80000000) == 0) {
LABEL_9:
      }
        JUMPOUT(0x1A618E384);
LABEL_8:
      operator delete(a44);
      _Unwind_Resume(a1);
    }
  }
  else if (a37 < 0)
  {
    goto LABEL_5;
  }
  if ((a49 & 0x80000000) == 0) {
    goto LABEL_9;
  }
  goto LABEL_8;
}

void sub_1A618DDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,dispatch_object_t object,uint64_t a27,std::__shared_weak_count *a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (object)
  {
    dispatch_release(object);
    v35 = a28;
    if (!a28)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0) {
LABEL_8:
      }
        JUMPOUT(0x1A618E384);
LABEL_7:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v35 = a28;
    if (!a28) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v35);
  if ((a34 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_1A618DE20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,void *__p,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  if (a2)
  {
    boost::function1<void,coredump::CommandDriver::Status>::~function1(&a57);
    boost::function<void ()(coredump::CommandDriver::Status)>::~function(&a53);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>::~DispatchSlot((uint64_t)&a51);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>::~DispatchSlot((uint64_t)&a49);
    if (a44)
    {
      if ((a44 & 1) == 0)
      {
        v58 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(a44 & 0xFFFFFFFFFFFFFFFELL);
        if (v58) {
          v58(&a45, &a45, 2);
        }
      }
      a44 = 0;
    }
    v59 = __p;
    if (__p)
    {
      uint64_t v60 = (uint64_t)a42;
      v61 = __p;
      if (a42 != __p)
      {
        do
        {
          v60 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v60);
        }
        while ((void *)v60 != v59);
        v61 = __p;
      }
      a42 = v59;
      operator delete(v61);
      ctu::DispatchSlot<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>::~DispatchSlot((uint64_t)&a39);
      __clang_call_terminate(a1);
    }
    JUMPOUT(0x1A618E344);
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618DEC4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,void *__p,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  if (a2)
  {
    boost::function1<void,BOOL>::~function1(&a57);
    boost::function<void ()(BOOL)>::~function(&a53);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot((uint64_t)&a51);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot((uint64_t)&a49);
    if (a44)
    {
      if ((a44 & 1) == 0)
      {
        v58 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(a44 & 0xFFFFFFFFFFFFFFFELL);
        if (v58) {
          v58(&a45, &a45, 2);
        }
      }
      a44 = 0;
    }
    v59 = __p;
    if (__p)
    {
      uint64_t v60 = (uint64_t)a42;
      v61 = __p;
      if (a42 != __p)
      {
        do
        {
          v60 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v60);
        }
        while ((void *)v60 != v59);
        v61 = __p;
      }
      a42 = v59;
      operator delete(v61);
      ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot((uint64_t)&a39);
      __clang_call_terminate(a1);
    }
    JUMPOUT(0x1A618E36CLL);
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618DF68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char *__p,char *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  if (a2)
  {
    boost::function1<void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::~function1(&a57);
    boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>::~function(&a53);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>::~DispatchSlot((uint64_t)&a51);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>::~DispatchSlot((uint64_t)&a49);
    if (a44)
    {
      if ((a44 & 1) == 0)
      {
        v57 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(a44 & 0xFFFFFFFFFFFFFFFELL);
        if (v57) {
          v57(&a45, &a45, 2);
        }
      }
    }
    if (__p)
    {
      v58 = a42;
      v59 = __p;
      if (a42 != __p)
      {
        do
        {
          v58 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)v58);
        }
        while (v58 != __p);
        v59 = __p;
      }
      operator delete(v59);
    }
    JUMPOUT(0x1A618E39CLL);
  }
  JUMPOUT(0x1A618E384);
}

void sub_1A618E020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

SAHEURCoreDumpTraceProtocol *___ZN16EURCoreDumpTrace4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_8weak_ptrIN3abm19BasebandTracingTaskEEEN8dispatch5groupE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  char v7 = 7;
  strcpy((char *)v6, "Enabled");
  memset(&v8, 0, sizeof(v8));
  char v10 = 8;
  strcpy((char *)__p, "CoreDump");
  memset(&v12, 0, sizeof(v12));
  uint64_t v2 = defaults::get((char *)__p, (char *)v6, &v12);
  int v3 = v2;
  if (v2)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)v6, (uint64_t)&v12, &v11);
    std::string v8 = v11;
  }
  if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_8:
    operator delete(__p[0]);
    if (!v3) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  operator delete(v12.__r_.__value_.__l.__data_);
  if (v10 < 0) {
    goto LABEL_8;
  }
LABEL_5:
  if (v3) {
LABEL_9:
  }
    uint64_t v2 = util::convert<BOOL>(&v8, (BOOL *)(v1 + 160), 0);
LABEL_10:
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v8.__r_.__value_.__l.__data_);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_12;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
LABEL_12:
    result = EURCoreDumpTraceProtocol::create((EURCoreDumpTraceProtocol *)v2);
    *(void *)(v1 + 152) = result;
    return result;
  }
  operator delete(v6[0]);
  result = EURCoreDumpTraceProtocol::create(v5);
  *(void *)(v1 + 152) = result;
  return result;
}

void sub_1A618E4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void EURCoreDumpTrace::postBootCrashReasonUpdate_sync(void *a1, uint64_t *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a2[2])
  {
    v4 = (char *)operator new(0x38uLL);
    strcpy(v4, "Baseband did not provide a post-boot crash reason");
    v5 = a1[5];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&buf[4] = v4;
      _os_log_impl(&dword_1A609F000, v5, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
    }
    unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
    memset(buf, 0, sizeof(buf));
    std::string::__assign_no_alias<true>(buf, v4, 0x31uLL);
    if ((char)buf[47] < 0)
    {
      *(void *)&buf[32] = 4;
      v6 = *(char **)&buf[24];
    }
    else
    {
      buf[47] = 4;
      v6 = (char *)&buf[24];
    }
    strcpy(v6, "None");
    unint64_t v30 = 0;
    char v7 = (char *)operator new(0x48uLL);
    std::string v8 = (uint64_t *)v7;
    *(void *)char v7 = 0;
    *((void *)v7 + 1) = 0;
    if ((char)buf[23] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v7 + 16), *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
    }
    else
    {
      *((_OWORD *)v7 + 1) = *(_OWORD *)buf;
      *((void *)v7 + 4) = *(void *)&buf[16];
    }
    v9 = (std::string *)(v8 + 5);
    if ((char)buf[47] < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)&buf[24], *(std::string::size_type *)&buf[32]);
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&buf[24];
      v8[7] = *(void *)&buf[40];
    }
    v8[8] = v30;
    uint64_t v10 = *a2;
    *std::string v8 = *a2;
    v8[1] = (uint64_t)a2;
    *(void *)(v10 + 8) = v8;
    *a2 = (uint64_t)v8;
    ++a2[2];
    if ((char)buf[47] < 0)
    {
      operator delete(*(void **)&buf[24]);
      if (((char)buf[23] & 0x80000000) == 0) {
        goto LABEL_15;
      }
    }
    else if (((char)buf[23] & 0x80000000) == 0)
    {
LABEL_15:
      operator delete(v4);
      goto LABEL_16;
    }
    operator delete(*(void **)buf);
    goto LABEL_15;
  }
LABEL_16:
  memset(buf, 170, 24);
  makeCrashString((char *)buf, (uint64_t)a2);
  std::string v11 = a1[5];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    std::string v12 = buf;
    if ((buf[23] & 0x80u) != 0) {
      std::string v12 = *(uint8_t **)buf;
    }
    *(_DWORD *)v27 = 136446210;
    v28 = v12;
    _os_log_impl(&dword_1A609F000, v11, OS_LOG_TYPE_DEFAULT, "#I Baseband crash: %{public}s", v27, 0xCu);
  }
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v24, (uint64_t)a2);
  EURCoreDumpTrace::submitCrash_sync((uint64_t)a1, (uint64_t)&v24);
  if (v26)
  {
    uint64_t v13 = v24;
    v14 = v25;
    uint64_t v15 = *v25;
    *(void *)(v15 + 8) = *(void *)(v24 + 8);
    **(void **)(v13 + 8) = v15;
    uint64_t v26 = 0;
    if (v14 != &v24)
    {
      while (1)
      {
        uint64_t v16 = (uint64_t *)v14[1];
        if (*((char *)v14 + 63) < 0)
        {
          operator delete((void *)v14[5]);
          if ((*((char *)v14 + 39) & 0x80000000) == 0) {
            goto LABEL_24;
          }
LABEL_27:
          operator delete((void *)v14[2]);
          operator delete(v14);
          v14 = v16;
          if (v16 == &v24) {
            break;
          }
        }
        else
        {
          if (*((char *)v14 + 39) < 0) {
            goto LABEL_27;
          }
LABEL_24:
          operator delete(v14);
          v14 = v16;
          if (v16 == &v24) {
            break;
          }
        }
      }
    }
  }
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v21, (uint64_t)a2);
  EURCoreDumpTrace::updateAnalyticsEvent_sync(a1, (uint64_t)&v21);
  if (v23)
  {
    uint64_t v17 = v21;
    v18 = v22;
    uint64_t v19 = *v22;
    *(void *)(v19 + 8) = *(void *)(v21 + 8);
    **(void **)(v17 + 8) = v19;
    uint64_t v23 = 0;
    if (v18 != &v21)
    {
      while (1)
      {
        v20 = (uint64_t *)v18[1];
        if (*((char *)v18 + 63) < 0)
        {
          operator delete((void *)v18[5]);
          if ((*((char *)v18 + 39) & 0x80000000) == 0) {
            goto LABEL_32;
          }
LABEL_35:
          operator delete((void *)v18[2]);
          operator delete(v18);
          v18 = v20;
          if (v20 == &v21) {
            break;
          }
        }
        else
        {
          if (*((char *)v18 + 39) < 0) {
            goto LABEL_35;
          }
LABEL_32:
          operator delete(v18);
          v18 = v20;
          if (v20 == &v21) {
            break;
          }
        }
      }
    }
  }
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_1A618E908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (v18[39] < 0) {
    operator delete(*v19);
  }
  operator delete(v18);
  std::pair<std::string,std::string>::~pair((uint64_t)&a17);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_1A618E944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1A618E960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void boost::signals2::connection::~connection(boost::signals2::connection *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 1);
  if (v1)
  {
    if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
    }
  }
}

void EURCoreDumpTrace::getCoreDumpEnabledStatusUpdate_sync(EURCoreDumpTrace *this, int a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v4 = *((unsigned __int8 *)this + 160);
  v5 = *((void *)this + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = "Disabled";
    if (a2) {
      char v7 = "Enabled";
    }
    else {
      char v7 = "Disabled";
    }
    if (v4) {
      v6 = "Enabled";
    }
    *(_DWORD *)buf = 136315394;
    uint64_t v21 = v7;
    __int16 v22 = 2080;
    uint64_t v23 = v6;
    _os_log_impl(&dword_1A609F000, v5, OS_LOG_TYPE_DEFAULT, "#I Initial coredump state: BB=%s, AP=%s", buf, 0x16u);
  }
  if (v4 != a2)
  {
    std::string v8 = *((void *)this + 18);
    if (v8)
    {
      dispatch_retain(*((dispatch_object_t *)this + 18));
      dispatch_group_enter(v8);
    }
    v9 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v9 || (uint64_t v10 = *((void *)this + 9), (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    std::string v12 = v11;
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v13 = *((void *)this + 21);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 1174405120;
    v14[2] = ___ZN16EURCoreDumpTrace35getCoreDumpEnabledStatusUpdate_syncEb_block_invoke;
    v14[3] = &__block_descriptor_tmp_8_2;
    v14[4] = this;
    dispatch_group_t group = v8;
    if (v8)
    {
      dispatch_retain(v8);
      dispatch_group_enter(group);
    }
    uint64_t v16 = v10;
    uint64_t v17 = v12;
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    char v18 = v4;
    aBlock = _Block_copy(v14);
    (*(void (**)(uint64_t, BOOL, void **))(*(void *)v13 + 80))(v13, v4 != 0, &aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v17) {
      std::__shared_weak_count::__release_weak(v17);
    }
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    std::__shared_weak_count::__release_weak(v12);
    if (v8)
    {
      dispatch_group_leave(v8);
      dispatch_release(v8);
    }
  }
}

void sub_1A618EC74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *aBlock)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EURCoreDumpTrace::commandDriverStatus_sync(uint64_t result, int a2)
{
  if (!a2)
  {
    uint64_t v2 = result;
    if (*(unsigned char *)(result + 161))
    {
      *(unsigned char *)(result + 161) = 0;
      result = (*(uint64_t (**)(void))(**(void **)(result + 168) + 64))(*(void *)(result + 168));
    }
    result = capabilities::trace::allowed((capabilities::trace *)result);
    if (result)
    {
      result = capabilities::trace::supportsCoreDumpStatus((capabilities::trace *)result);
      if (result)
      {
        int v3 = *(uint64_t (**)(void))(**(void **)(v2 + 168) + 72);
        return v3();
      }
    }
  }
  return result;
}

capabilities::trace *EURCoreDumpTrace::updateCoreDumpStatus_sync(EURCoreDumpTrace *this)
{
  result = (capabilities::trace *)capabilities::trace::allowed(this);
  if (result)
  {
    result = (capabilities::trace *)capabilities::trace::supportsCoreDumpStatus(result);
    if (result)
    {
      int v3 = *(uint64_t (**)(void))(**((void **)this + 21) + 72);
      return (capabilities::trace *)v3();
    }
  }
  return result;
}

void ___ZN16EURCoreDumpTrace35getCoreDumpEnabledStatusUpdate_syncEb_block_invoke(uint64_t a1, int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v3) {
    return;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  v6 = std::__shared_weak_count::lock(v3);
  if (!v6) {
    return;
  }
  char v7 = v6;
  if (!*(void *)(a1 + 48)) {
    goto LABEL_11;
  }
  std::string v8 = *(NSObject **)(v5 + 40);
  if (!a2)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      if (*(unsigned char *)(a1 + 64)) {
        uint64_t v10 = "Enabled";
      }
      else {
        uint64_t v10 = "Disabled";
      }
      int v11 = 136315138;
      std::string v12 = v10;
      _os_log_error_impl(&dword_1A609F000, v8, OS_LOG_TYPE_ERROR, "Failed to update coredump state on BB to %s", (uint8_t *)&v11, 0xCu);
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_12;
      }
      return;
    }
LABEL_11:
    if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
    goto LABEL_12;
  }
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_11;
  }
  v9 = "Enabled";
  if (!*(unsigned char *)(a1 + 64)) {
    v9 = "Disabled";
  }
  int v11 = 136315394;
  std::string v12 = v9;
  __int16 v13 = 2080;
  v14 = v9;
  _os_log_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEFAULT, "#I Updated coredump state: BB=%s, AP=%s", (uint8_t *)&v11, 0x16u);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_12:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t makeCrashString(char *a1, uint64_t a2)
{
  unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40[7] = v3;
  v40[8] = v3;
  v40[5] = v3;
  v40[6] = v3;
  v40[3] = v3;
  v40[4] = v3;
  v40[1] = v3;
  v40[2] = v3;
  long long v39 = v3;
  v40[0] = v3;
  *(_OWORD *)__p = v3;
  long long v38 = v3;
  long long v35 = v3;
  long long v36 = v3;
  long long v33 = v3;
  long long v34 = v3;
  long long v32 = v3;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v32);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = (std::locale::id *)MEMORY[0x1E4FBA258];
    do
    {
      unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)unint64_t v30 = v6;
      *(_OWORD *)&v30[16] = v6;
      long long v29 = v6;
      if (*(char *)(v4 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v29, *(const std::string::value_type **)(v4 + 16), *(void *)(v4 + 24));
      }
      else
      {
        long long v29 = *(_OWORD *)(v4 + 16);
        *(void *)unint64_t v30 = *(void *)(v4 + 32);
      }
      if (*(char *)(v4 + 63) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v30[8], *(const std::string::value_type **)(v4 + 40), *(void *)(v4 + 48));
      }
      else
      {
        *(_OWORD *)&v30[8] = *(_OWORD *)(v4 + 40);
        *(void *)&v30[24] = *(void *)(v4 + 56);
      }
      unint64_t v31 = *(void *)(v4 + 64);
      char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Crash @ ", 8);
      if (v30[31] >= 0) {
        std::string v8 = &v30[8];
      }
      else {
        std::string v8 = *(unsigned char **)&v30[8];
      }
      if (v30[31] >= 0) {
        uint64_t v9 = v30[31];
      }
      else {
        uint64_t v9 = *(void *)&v30[16];
      }
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      LOBYTE(v42.__locale_) = 58;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v42, 1);
      int v11 = (void *)std::ostream::operator<<();
      std::string v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", Reason:'", 10);
      if (v30[7] >= 0) {
        __int16 v13 = &v29;
      }
      else {
        __int16 v13 = (long long *)v29;
      }
      if (v30[7] >= 0) {
        uint64_t v14 = v30[7];
      }
      else {
        uint64_t v14 = *((void *)&v29 + 1);
      }
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"', TID:", 7);
      uint64_t v16 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
      uint64_t v17 = std::locale::use_facet(&v42, v5);
      ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
      std::locale::~locale(&v42);
      std::ostream::put();
      std::ostream::flush();
      if ((v30[31] & 0x80000000) != 0)
      {
        operator delete(*(void **)&v30[8]);
        if ((v30[7] & 0x80000000) != 0) {
LABEL_26:
        }
          operator delete((void *)v29);
      }
      else if ((v30[7] & 0x80000000) != 0)
      {
        goto LABEL_26;
      }
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != a2);
  }
  char v18 = a1;
  memset(a1, 170, 24);
  if ((BYTE8(v39) & 0x10) != 0)
  {
    uint64_t v20 = v39;
    if ((unint64_t)v39 < *((void *)&v36 + 1))
    {
      *(void *)&long long v39 = *((void *)&v36 + 1);
      uint64_t v20 = *((void *)&v36 + 1);
    }
    uint64_t v21 = (const void *)v36;
    size_t v22 = v20 - v36;
    if ((unint64_t)(v20 - v36) >= 0x7FFFFFFFFFFFFFF8) {
LABEL_50:
    }
      std::string::__throw_length_error[abi:ne180100]();
LABEL_34:
    if (v22 >= 0x17)
    {
      uint64_t v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17) {
        uint64_t v24 = v22 | 7;
      }
      uint64_t v25 = v24 + 1;
      uint64_t v23 = operator new(v24 + 1);
      *((void *)a1 + 1) = v22;
      *((void *)a1 + 2) = v25 | 0x8000000000000000;
      *(void *)a1 = v23;
    }
    else
    {
      a1[23] = v22;
      uint64_t v23 = a1;
      if (!v22)
      {
        *a1 = 0;
        int v19 = a1[23];
        if ((v19 & 0x80000000) == 0) {
          goto LABEL_43;
        }
LABEL_37:
        if (*((void *)a1 + 1)) {
          goto LABEL_46;
        }
        *((void *)a1 + 1) = 22;
        char v18 = *(char **)a1;
        goto LABEL_45;
      }
    }
    memmove(v23, v21, v22);
    *((unsigned char *)v23 + v22) = 0;
    int v19 = a1[23];
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_37;
  }
  if ((BYTE8(v39) & 8) != 0)
  {
    uint64_t v21 = (const void *)*((void *)&v34 + 1);
    size_t v22 = *((void *)&v35 + 1) - *((void *)&v34 + 1);
    if (*((void *)&v35 + 1) - *((void *)&v34 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
      goto LABEL_50;
    }
    goto LABEL_34;
  }
  a1[23] = 0;
  *a1 = 0;
  int v19 = a1[23];
  if (v19 < 0) {
    goto LABEL_37;
  }
LABEL_43:
  if (v19) {
    goto LABEL_46;
  }
  a1[23] = 22;
LABEL_45:
  strcpy(v18, "Crash reason not found");
LABEL_46:
  *(void *)&long long v32 = *MEMORY[0x1E4FBA408];
  uint64_t v26 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v32 + *(void *)(v32 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v33 = v26;
  *((void *)&v33 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v38) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62751A0](v40);
}

void sub_1A618F478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

void sub_1A618F4B4(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::locale::~locale((std::locale *)(v2 - 96));
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  JUMPOUT(0x1A618F4D0);
}

void EURCoreDumpTrace::submitCrash_sync(uint64_t a1, uint64_t a2)
{
  long long v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of crash info", buf, 2u);
  }
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v4) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v4);
      xpc_object_t xdict = v4;
    }
    else
    {
      xpc_object_t xdict = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t xdict = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  xpc_object_t v5 = xpc_array_create(0, 0);
  if (v5 || (xpc_object_t v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v5) == MEMORY[0x1E4F14568])
    {
      xpc_retain(v5);
      xpc_object_t v6 = v5;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v5 = 0;
  }
  xpc_release(v5);
  uint64_t v45 = a1;
  unint64_t v56 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v55[7] = v7;
  v55[8] = v7;
  v55[5] = v7;
  v55[6] = v7;
  v55[3] = v7;
  v55[4] = v7;
  v55[1] = v7;
  v55[2] = v7;
  long long v54 = v7;
  v55[0] = v7;
  long long v53 = v7;
  v51[3] = v7;
  *(_OWORD *)__p = v7;
  v51[1] = v7;
  v51[2] = v7;
  *(_OWORD *)buf = v7;
  v51[0] = v7;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
  uint64_t v8 = *(void *)(a2 + 8);
  if (v8 != a2)
  {
    uint64_t v9 = (const char *)*MEMORY[0x1E4F4C8C0];
    uint64_t v10 = (const char *)*MEMORY[0x1E4F4C798];
    int v11 = (const char *)*MEMORY[0x1E4F4C538];
    do
    {
      xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
      if (v12 || (xpc_object_t v12 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A6275E60](v12) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v12);
          xpc_object_t v13 = v12;
        }
        else
        {
          xpc_object_t v13 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v13 = xpc_null_create();
        xpc_object_t v12 = 0;
      }
      xpc_release(v12);
      int v14 = *(char *)(v8 + 39);
      if (v14 >= 0) {
        uint64_t v15 = v8 + 16;
      }
      else {
        uint64_t v15 = *(void *)(v8 + 16);
      }
      if (v14 >= 0) {
        uint64_t v16 = *(unsigned __int8 *)(v8 + 39);
      }
      else {
        uint64_t v16 = *(void *)(v8 + 24);
      }
      uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, v15, v16);
      char v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" [", 2);
      int v19 = *(char *)(v8 + 63);
      if (v19 >= 0) {
        uint64_t v20 = v8 + 40;
      }
      else {
        uint64_t v20 = *(void *)(v8 + 40);
      }
      if (v19 >= 0) {
        uint64_t v21 = *(unsigned __int8 *)(v8 + 63);
      }
      else {
        uint64_t v21 = *(void *)(v8 + 48);
      }
      size_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)":", 1);
      uint64_t v23 = (void *)std::ostream::operator<<();
      uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"]", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
      uint64_t v25 = std::locale::use_facet((const std::locale *)&v49, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
      std::locale::~locale((std::locale *)&v49);
      std::ostream::put();
      std::ostream::flush();
      if (*(char *)(v8 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)(v8 + 16), *(void *)(v8 + 24));
      }
      else {
        std::string v49 = *(std::string *)(v8 + 16);
      }
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v26 = &v49;
      }
      else {
        uint64_t v26 = (std::string *)v49.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v27 = xpc_string_create((const char *)v26);
      if (!v27) {
        xpc_object_t v27 = xpc_null_create();
      }
      xpc_dictionary_set_value(v13, v9, v27);
      xpc_object_t v28 = xpc_null_create();
      xpc_release(v27);
      xpc_release(v28);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      xpc_object_t v29 = xpc_int64_create(*(unsigned int *)(v8 + 64));
      if (!v29) {
        xpc_object_t v29 = xpc_null_create();
      }
      xpc_dictionary_set_value(v13, v10, v29);
      xpc_object_t v30 = xpc_null_create();
      xpc_release(v29);
      xpc_release(v30);
      if (*(char *)(v8 + 63) < 0) {
        std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)(v8 + 40), *(void *)(v8 + 48));
      }
      else {
        std::string v49 = *(std::string *)(v8 + 40);
      }
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v31 = &v49;
      }
      else {
        unint64_t v31 = (std::string *)v49.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v32 = xpc_string_create((const char *)v31);
      if (!v32) {
        xpc_object_t v32 = xpc_null_create();
      }
      xpc_dictionary_set_value(v13, v11, v32);
      xpc_object_t v33 = xpc_null_create();
      xpc_release(v32);
      xpc_release(v33);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      xpc_array_append_value(v6, v13);
      xpc_release(v13);
      uint64_t v8 = *(void *)(v8 + 8);
    }
    while (v8 != a2);
  }
  xpc_object_t v34 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2D0]);
  if (!v34) {
    xpc_object_t v34 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C190], v34);
  xpc_object_t v35 = xpc_null_create();
  xpc_release(v34);
  xpc_release(v35);
  xpc_object_t v36 = xpc_int64_create(524365);
  if (!v36) {
    xpc_object_t v36 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C258], v36);
  xpc_object_t v37 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v37);
  if (v6)
  {
    xpc_retain(v6);
    xpc_object_t v38 = v6;
  }
  else
  {
    xpc_object_t v38 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C188], v38);
  xpc_object_t v39 = xpc_null_create();
  xpc_release(v38);
  xpc_release(v39);
  v40 = *(std::__shared_weak_count **)(v45 + 136);
  if (v40)
  {
    unint64_t v41 = std::__shared_weak_count::lock(v40);
    v49.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
    if (v41)
    {
      uint64_t v42 = *(void *)(v45 + 128);
      v49.__r_.__value_.__r.__words[0] = v42;
      if (v42)
      {
        xpc_object_t object = xdict;
        if (xdict) {
          xpc_retain(xdict);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        abm::BasebandTracingTask::commandReportStatsAWD(v42, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        size = (std::__shared_weak_count *)v49.__r_.__value_.__l.__size_;
        if (!v49.__r_.__value_.__l.__size_) {
          goto LABEL_75;
        }
      }
      else
      {
        size = v41;
      }
      if (!atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
LABEL_75:
  *(void *)buf = *MEMORY[0x1E4FBA408];
  uint64_t v44 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&v51[0] = v44;
  *((void *)&v51[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v53) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A62751A0](v55);
  xpc_release(v6);
  xpc_release(xdict);
}

void sub_1A618FC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, uint64_t a11, xpc_object_t a12, uint64_t a13, xpc_object_t object, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

uint64_t *std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    long long v7 = (char *)operator new(0x48uLL);
    uint64_t v8 = (uint64_t *)v7;
    *(void *)long long v7 = 0;
    *((void *)v7 + 1) = 0;
    if (*(char *)(i + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v7 + 16), *(const std::string::value_type **)(i + 16), *(void *)(i + 24));
    }
    else
    {
      long long v9 = *(_OWORD *)(i + 16);
      *((void *)v7 + 4) = *(void *)(i + 32);
      *((_OWORD *)v7 + 1) = v9;
    }
    uint64_t v10 = (std::string *)(v8 + 5);
    if (*(char *)(i + 63) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(i + 40), *(void *)(i + 48));
    }
    else
    {
      long long v5 = *(_OWORD *)(i + 40);
      v8[7] = *(void *)(i + 56);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v5;
    }
    v8[8] = *(void *)(i + 64);
    uint64_t v6 = *a1;
    *uint64_t v8 = *a1;
    v8[1] = (uint64_t)a1;
    *(void *)(v6 + 8) = v8;
    *a1 = (uint64_t)v8;
    ++a1[2];
  }
  return a1;
}

void sub_1A618FE88(_Unwind_Exception *a1)
{
  if (v2[39] < 0) {
    operator delete(*v3);
  }
  operator delete(v2);
  if (!*((void *)v1 + 2)
    || (uint64_t v5 = *(void *)v1,
        uint64_t v6 = (char *)*((void *)v1 + 1),
        uint64_t v7 = *(void *)v6,
        *(void *)(v7 + 8) = *(void *)(*(void *)v1 + 8),
        **(void **)(v5 + 8) = v7,
        *((void *)v1 + 2) = 0,
        v6 == v1))
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  while (1)
  {
    uint64_t v8 = (char *)*((void *)v6 + 1);
    if (v6[63] < 0)
    {
      operator delete(*((void **)v6 + 5));
      if (v6[39] < 0) {
LABEL_11:
      }
        operator delete(*((void **)v6 + 2));
    }
    else if (v6[39] < 0)
    {
      goto LABEL_11;
    }
    operator delete(v6);
    uint64_t v6 = v8;
    if (v8 == v1) {
      goto LABEL_5;
    }
  }
}

char *std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(char *a1)
{
  if (*((void *)a1 + 2))
  {
    uint64_t v2 = *(void *)a1;
    long long v3 = (char *)*((void *)a1 + 1);
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(*(void *)a1 + 8);
    **(void **)(v2 + 8) = v4;
    *((void *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v6 = (char *)*((void *)v3 + 1);
        if (v3[63] < 0)
        {
          operator delete(*((void **)v3 + 5));
          if (v3[39] < 0) {
LABEL_9:
          }
            operator delete(*((void **)v3 + 2));
        }
        else if (v3[39] < 0)
        {
          goto LABEL_9;
        }
        operator delete(v3);
        long long v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void EURCoreDumpTrace::updateAnalyticsEvent_sync(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v55[1]) = 0;
    _os_log_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEFAULT, "#I Updating Analytics metric of crash info", (uint8_t *)&v55[1], 2u);
  }
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (v5 || (xpc_object_t v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v5) == v6)
    {
      xpc_retain(v5);
      xpc_object_t v7 = v5;
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    xpc_object_t v5 = 0;
  }
  xpc_release(v5);
  uint64_t v8 = *(void *)(a2 + 8);
  long long v9 = (const char *)(v8 + 16);
  if (*(char *)(v8 + 39) < 0) {
    long long v9 = *(const char **)v9;
  }
  xpc_object_t v10 = xpc_string_create(v9);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "resetReason", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  memset(v55, 170, 32);
  uint64_t v12 = *(void *)(a2 + 8);
  int v13 = *(char *)(v12 + 63);
  if (v13 >= 0) {
    size_t v14 = *(unsigned __int8 *)(v12 + 63);
  }
  else {
    size_t v14 = *(void *)(v12 + 48);
  }
  unint64_t v15 = v14 + 1;
  __dst = (void **)0xAAAAAAAAAAAAAAAALL;
  unint64_t v54 = 0xAAAAAAAAAAAAAAAALL;
  if (v14 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v15 >= 0x17)
  {
    uint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v17 = v15 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (void **)operator new(v17 + 1);
    unint64_t v54 = v14 + 1;
    v55[0] = v18 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    unint64_t v54 = 0;
    v55[0] = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v55[0]) = v14 + 1;
    if (!v14) {
      goto LABEL_27;
    }
  }
  if (v13 >= 0) {
    int v19 = (const void *)(v12 + 40);
  }
  else {
    int v19 = *(const void **)(v12 + 40);
  }
  memmove(p_dst, v19, v14);
LABEL_27:
  *(_WORD *)((char *)p_dst + v14) = 58;
  std::to_string(&v52, *(_DWORD *)(v12 + 64));
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v20 = &v52;
  }
  else {
    uint64_t v20 = (std::string *)v52.__r_.__value_.__r.__words[0];
  }
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v52.__r_.__value_.__l.__size_;
  }
  size_t v22 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v20, size);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v55[3] = *((void *)&v22->__r_.__value_.__l + 2);
  *(_OWORD *)&v55[1] = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v52.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v55[0]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
  }
  else if ((SHIBYTE(v55[0]) & 0x80000000) == 0)
  {
    goto LABEL_35;
  }
  operator delete(__dst);
LABEL_35:
  if (v55[3] >= 0) {
    uint64_t v24 = (const char *)&v55[1];
  }
  else {
    uint64_t v24 = (const char *)v55[1];
  }
  xpc_object_t v25 = xpc_string_create(v24);
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "shortResetReason", v25);
  xpc_object_t v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  uint64_t v27 = *(void *)(a2 + 8);
  xpc_object_t v28 = (const char *)(v27 + 40);
  if (*(char *)(v27 + 63) < 0) {
    xpc_object_t v28 = *(const char **)v28;
  }
  xpc_object_t v29 = xpc_string_create(v28);
  if (!v29) {
    xpc_object_t v29 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "basebandCrashFileName", v29);
  xpc_object_t v30 = xpc_null_create();
  xpc_release(v29);
  xpc_release(v30);
  xpc_object_t v31 = xpc_dictionary_create(0, 0, 0);
  if (v31 || (xpc_object_t v31 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v31) == v6)
    {
      xpc_retain(v31);
      xpc_object_t v32 = v31;
    }
    else
    {
      xpc_object_t v32 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v32 = xpc_null_create();
    xpc_object_t v31 = 0;
  }
  xpc_release(v31);
  xpc_object_t v33 = xpc_string_create("metricsCCBasebandResetInfo");
  if (!v33) {
    xpc_object_t v33 = xpc_null_create();
  }
  xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x1E4F4C3C8], v33);
  xpc_object_t v34 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v34);
  xpc_object_t v35 = xpc_string_create("Crash");
  if (!v35) {
    xpc_object_t v35 = xpc_null_create();
  }
  xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x1E4F4C548], v35);
  xpc_object_t v36 = xpc_null_create();
  xpc_release(v35);
  xpc_release(v36);
  if (v7)
  {
    xpc_retain(v7);
    xpc_object_t v37 = v7;
  }
  else
  {
    xpc_object_t v37 = xpc_null_create();
  }
  xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x1E4F4CB40], v37);
  xpc_object_t v38 = xpc_null_create();
  xpc_release(v37);
  xpc_release(v38);
  xpc_object_t v39 = xpc_string_create((const char *)*MEMORY[0x1E4F4C5A0]);
  if (!v39) {
    xpc_object_t v39 = xpc_null_create();
  }
  xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x1E4F4C540], v39);
  xpc_object_t v40 = xpc_null_create();
  xpc_release(v39);
  xpc_release(v40);
  xpc_object_t v41 = xpc_dictionary_create(0, 0, 0);
  if (v41 || (xpc_object_t v41 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v41) == v6)
    {
      xpc_retain(v41);
      xpc_object_t v42 = v41;
    }
    else
    {
      xpc_object_t v42 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v42 = xpc_null_create();
    xpc_object_t v41 = 0;
  }
  xpc_release(v41);
  xpc_object_t v43 = xpc_string_create((const char *)*MEMORY[0x1E4F4C158]);
  if (!v43) {
    xpc_object_t v43 = xpc_null_create();
  }
  xpc_dictionary_set_value(v42, (const char *)*MEMORY[0x1E4F4C190], v43);
  xpc_object_t v44 = xpc_null_create();
  xpc_release(v43);
  xpc_release(v44);
  if (v32)
  {
    xpc_retain(v32);
    xpc_object_t v45 = v32;
  }
  else
  {
    xpc_object_t v45 = xpc_null_create();
  }
  xpc_dictionary_set_value(v42, (const char *)*MEMORY[0x1E4F4C188], v45);
  xpc_object_t v46 = xpc_null_create();
  xpc_release(v45);
  xpc_release(v46);
  v47 = (std::__shared_weak_count *)a1[17];
  if (v47)
  {
    v48 = std::__shared_weak_count::lock(v47);
    unint64_t v54 = (unint64_t)v48;
    if (v48)
    {
      std::string v49 = (void **)a1[16];
      __dst = v49;
      if (v49)
      {
        xpc_object_t object = v42;
        if (v42) {
          xpc_retain(v42);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        abm::BasebandTracingTask::commandReportStatsAWD((uint64_t)v49, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        v50 = (std::__shared_weak_count *)v54;
        if (!v54) {
          goto LABEL_82;
        }
      }
      else
      {
        v50 = v48;
      }
      if (!atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
LABEL_82:
  xpc_release(v42);
  xpc_release(v32);
  if (SHIBYTE(v55[3]) < 0) {
    operator delete((void *)v55[1]);
  }
  xpc_release(v7);
}

void sub_1A6190654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  xpc_release(object);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  xpc_release(v30);
  xpc_release(v29);
  if (a28 < 0) {
    operator delete(__p);
  }
  xpc_release(v28);
  _Unwind_Resume(a1);
}

void EURCoreDumpTrace::storeCrashReason_sync(void *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  memset(&__p, 170, sizeof(__p));
  makeCrashString((char *)&__p, a2);
  long long v3 = a1[5];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = p_p;
    _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Baseband crash: %{public}s", (uint8_t *)&buf, 0xCu);
  }
  xpc_object_t v5 = (std::__shared_weak_count *)a1[17];
  if (!v5) {
    goto LABEL_15;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v5);
  *((void *)&buf + 1) = v6;
  if (!v6) {
    goto LABEL_15;
  }
  xpc_object_t v7 = v6;
  uint64_t v8 = a1[16];
  *(void *)&long long buf = v8;
  if (v8)
  {
    long long v9 = a1[5];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_1A609F000, v9, OS_LOG_TYPE_DEFAULT, "#I Request to reset baseband", v12, 2u);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v11 = __p;
    }
    v10[0] = 0;
    v10[1] = 0;
    abm::BasebandTracingTask::setLastCrashReason(v8, (uint64_t)&v11, (uint64_t)v10);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v11.__r_.__value_.__l.__data_);
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_19;
      }
LABEL_15:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_16;
    }
  }
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_15;
  }
LABEL_19:
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_16:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1A61909D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v24 - 64);
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void EURCoreDumpTrace::snapshot_sync(uint64_t a1, const void **a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 160)) {
      xpc_object_t v5 = "true";
    }
    else {
      xpc_object_t v5 = "false";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v5;
    _os_log_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEFAULT, "#I Snapshot requested. Enabled = %s", (uint8_t *)&buf, 0xCu);
  }
  if (*(unsigned char *)(a1 + 160))
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v22 = 0x4002000000;
    long long v23 = __Block_byref_object_copy__4;
    uint64_t v24 = __Block_byref_object_dispose__4;
    uint64_t v25 = (uint64_t)&v25;
    xpc_object_t v26 = &v25;
    uint64_t v27 = 0;
    unsigned int v6 = *(_DWORD *)(a1 + 184);
    if (v6)
    {
      while (1)
      {
        uint64_t v7 = *(void *)(a1 + 152);
        uint64_t v8 = *a2;
        CFTypeRef cf = v8;
        if (v8) {
          CFRetain(v8);
        }
        int v9 = (*(uint64_t (**)(uint64_t, CFTypeRef *, uint64_t))(*(void *)v7 + 56))(v7, &cf, *((void *)&buf + 1) + 40);
        if (cf) {
          CFRelease(cf);
        }
        if (!v9) {
          break;
        }
        xpc_object_t v10 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          if (v6 <= 1) {
            std::string v11 = "giving up";
          }
          else {
            std::string v11 = "trying again";
          }
          *(_DWORD *)int v19 = 136315138;
          uint64_t v20 = v11;
          _os_log_error_impl(&dword_1A609F000, v10, OS_LOG_TYPE_ERROR, "Failed to capture, %s", v19, 0xCu);
          if (!--v6) {
            goto LABEL_25;
          }
        }
        else if (!--v6)
        {
          goto LABEL_25;
        }
      }
      if (*(void *)(*((void *)&buf + 1) + 56))
      {
        v17[0] = MEMORY[0x1E4F143A8];
        v17[1] = 0x40000000;
        v17[2] = ___ZN16EURCoreDumpTrace13snapshot_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
        v17[3] = &unk_1E5C48390;
        v17[4] = &buf;
        v17[5] = a1;
        ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v17);
        _Block_object_dispose(&buf, 8);
        if (!v27) {
          return;
        }
        goto LABEL_26;
      }
      uint64_t v12 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int v19 = 0;
        _os_log_error_impl(&dword_1A609F000, v12, OS_LOG_TYPE_ERROR, "Baseband did not provide a coredump crash reason", v19, 2u);
        _Block_object_dispose(&buf, 8);
        if (!v27) {
          return;
        }
        goto LABEL_26;
      }
    }
LABEL_25:
    _Block_object_dispose(&buf, 8);
    if (!v27) {
      return;
    }
LABEL_26:
    uint64_t v13 = v25;
    size_t v14 = v26;
    uint64_t v15 = *v26;
    *(void *)(v15 + 8) = *(void *)(v25 + 8);
    **(void **)(v13 + 8) = v15;
    uint64_t v27 = 0;
    if (v14 == &v25) {
      return;
    }
    do
    {
      uint64_t v16 = (uint64_t *)v14[1];
      if (*((char *)v14 + 63) < 0)
      {
        operator delete((void *)v14[5]);
        if (*((char *)v14 + 39) < 0) {
LABEL_33:
        }
          operator delete((void *)v14[2]);
      }
      else if (*((char *)v14 + 39) < 0)
      {
        goto LABEL_33;
      }
      operator delete(v14);
      size_t v14 = v16;
    }
    while (v16 != &v25);
  }
}

void sub_1A6190D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *__Block_byref_object_copy__4(void *result, void *a2)
{
  result[5] = result + 5;
  result[6] = result + 5;
  result[7] = 0;
  uint64_t v2 = a2[7];
  if (v2)
  {
    uint64_t v4 = a2[5];
    long long v3 = (uint64_t *)a2[6];
    uint64_t v5 = *v3;
    *(void *)(v5 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v5;
    uint64_t v6 = result[5];
    *(void *)(v6 + 8) = v3;
    *long long v3 = v6;
    result[5] = v4;
    *(void *)(v4 + 8) = result + 5;
    result[7] = v2;
    a2[7] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__4(void *a1)
{
  if (a1[7])
  {
    uint64_t v1 = (char *)(a1 + 5);
    uint64_t v2 = a1[5];
    long long v3 = (char *)a1[6];
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(v2 + 8);
    **(void **)(v2 + 8) = v4;
    a1[7] = 0;
    if (v3 != (char *)(a1 + 5))
    {
      do
      {
        uint64_t v5 = (char *)*((void *)v3 + 1);
        if (v3[63] < 0)
        {
          operator delete(*((void **)v3 + 5));
          if (v3[39] < 0) {
LABEL_9:
          }
            operator delete(*((void **)v3 + 2));
        }
        else if (v3[39] < 0)
        {
          goto LABEL_9;
        }
        operator delete(v3);
        long long v3 = v5;
      }
      while (v5 != v1);
    }
  }
}

void ___ZN16EURCoreDumpTrace13snapshot_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(unsigned char *)(v2 + 161) = 0;
  EURCoreDumpTrace::storeCrashReason_sync((void *)v2, *(void *)(*(void *)(a1 + 32) + 8) + 40);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v14, *(void *)(*(void *)(a1 + 32) + 8) + 40);
  EURCoreDumpTrace::submitCrash_sync(v2, (uint64_t)&v14);
  if (v16)
  {
    uint64_t v3 = v14;
    uint64_t v4 = v15;
    uint64_t v5 = *v15;
    *(void *)(v5 + 8) = *(void *)(v14 + 8);
    **(void **)(v3 + 8) = v5;
    uint64_t v16 = 0;
    if (v4 != &v14)
    {
      do
      {
        int v9 = (uint64_t *)v4[1];
        if (*((char *)v4 + 63) < 0)
        {
          operator delete((void *)v4[5]);
          if (*((char *)v4 + 39) < 0) {
LABEL_11:
          }
            operator delete((void *)v4[2]);
        }
        else if (*((char *)v4 + 39) < 0)
        {
          goto LABEL_11;
        }
        operator delete(v4);
        uint64_t v4 = v9;
      }
      while (v9 != &v14);
    }
  }
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v11, *(void *)(*(void *)(a1 + 32) + 8) + 40);
  EURCoreDumpTrace::updateAnalyticsEvent_sync((void *)v2, (uint64_t)&v11);
  if (v13)
  {
    uint64_t v6 = v11;
    uint64_t v7 = v12;
    uint64_t v8 = *v12;
    *(void *)(v8 + 8) = *(void *)(v11 + 8);
    **(void **)(v6 + 8) = v8;
    uint64_t v13 = 0;
    if (v7 != &v11)
    {
      do
      {
        xpc_object_t v10 = (uint64_t *)v7[1];
        if (*((char *)v7 + 63) < 0)
        {
          operator delete((void *)v7[5]);
          if (*((char *)v7 + 39) < 0) {
LABEL_17:
          }
            operator delete((void *)v7[2]);
        }
        else if (*((char *)v7 + 39) < 0)
        {
          goto LABEL_17;
        }
        operator delete(v7);
        uint64_t v7 = v10;
      }
      while (v10 != &v11);
    }
  }
}

void sub_1A6191030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_1A6191044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(va);
  _Unwind_Resume(a1);
}

void EURCoreDumpTrace::snapshot(uint64_t a1, dispatch_object_t *a2, const void **a3)
{
  uint64_t v6 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v6);
  }
  uint64_t v7 = *(NSObject **)(a1 + 144);
  if (v7)
  {
    dispatch_retain(*(dispatch_object_t *)(a1 + 144));
    dispatch_group_enter(v7);
  }
  uint64_t v9 = *(void *)(a1 + 72);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v8 || (xpc_object_t v10 = std::__shared_weak_count::lock(v8)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v11 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = *a2;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 1174405120;
  v14[2] = ___ZN16EURCoreDumpTrace8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v14[3] = &__block_descriptor_tmp_26_0;
  v14[4] = a1;
  dispatch_group_t group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(group);
  }
  dispatch_group_t object = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(object);
  }
  uint64_t v17 = v9;
  uint64_t v18 = v11;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v13 = *a3;
  CFTypeRef cf = v13;
  if (v13) {
    CFRetain(v13);
  }
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), v12, (uint64_t)v14);
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  if (object)
  {
    dispatch_group_leave(object);
    if (object) {
      dispatch_release(object);
    }
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  std::__shared_weak_count::__release_weak(v11);
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  if (v6)
  {
    dispatch_group_leave(v6);
    dispatch_release(v6);
  }
}

void sub_1A619126C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
    if (!v1) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v1)
  {
    goto LABEL_3;
  }
  dispatch_group_leave(v1);
  dispatch_release(v1);
  _Unwind_Resume(exception_object);
}

void ___ZN16EURCoreDumpTrace8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v29 = 0;
  xpc_object_t v30 = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    xpc_object_t v30 = v4;
    if (v4)
    {
      uint64_t v29 = *(void *)(a1 + 56);
      if (v29)
      {
        v28[0] = 0xAAAAAAAAAAAAAAAALL;
        v28[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v28, *(const __CFDictionary **)(a1 + 72));
        memset(buf, 170, sizeof(buf));
        std::string __p = operator new(0x28uLL);
        long long v27 = xmmword_1A61F71C0;
        strcpy((char *)__p, "kCollectTelephonyLogsWithCoredump");
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v31, "kKeyTraceAction");
        ctu::cf::map_adapter::getString();
        MEMORY[0x1A62748E0](&v31);
        operator delete(__p);
        uint64_t v5 = buf[23];
        if ((buf[23] & 0x80u) != 0) {
          uint64_t v5 = *(void *)&buf[8];
        }
        if (v5 != 33) {
          goto LABEL_22;
        }
        uint64_t v6 = buf;
        if ((buf[23] & 0x80u) != 0) {
          uint64_t v6 = *(uint8_t **)buf;
        }
        uint64_t v7 = *(void *)v6;
        uint64_t v8 = *((void *)v6 + 1);
        uint64_t v9 = *((void *)v6 + 2);
        uint64_t v10 = *((void *)v6 + 3);
        uint64_t v11 = v6[32];
        BOOL v12 = v7 == *(void *)"kCollectTelephonyLogsWithCoredump" && v8 == *(void *)"TelephonyLogsWithCoredump";
        BOOL v13 = v12 && v9 == *(void *)"yLogsWithCoredump";
        BOOL v14 = v13 && v10 == *(void *)"hCoredump";
        if (v14 && v11 == str_68[32])
        {
          global_queue = dispatch_get_global_queue(0, 0);
          v22[0] = MEMORY[0x1E4F143A8];
          v22[1] = 1174405120;
          v22[2] = ___ZN16EURCoreDumpTrace8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_24;
          v22[3] = &__block_descriptor_tmp_25_1;
          int v19 = *(NSObject **)(a1 + 40);
          v22[4] = v2;
          dispatch_group_t group = v19;
          if (v19)
          {
            dispatch_retain(v19);
            dispatch_group_enter(group);
          }
          uint64_t v20 = *(NSObject **)(a1 + 48);
          dispatch_group_t object = v20;
          if (v20)
          {
            dispatch_retain(v20);
            dispatch_group_enter(object);
          }
          uint64_t v21 = *(const void **)(a1 + 72);
          CFTypeRef cf = v21;
          if (v21) {
            CFRetain(v21);
          }
          dispatch_async(global_queue, v22);
          if (cf) {
            CFRelease(cf);
          }
          if (object)
          {
            dispatch_group_leave(object);
            if (object) {
              dispatch_release(object);
            }
          }
          if (group)
          {
            dispatch_group_leave(group);
            if (group) {
              dispatch_release(group);
            }
          }
        }
        else
        {
LABEL_22:
          uint64_t v16 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__p) = 0;
            _os_log_error_impl(&dword_1A609F000, v16, OS_LOG_TYPE_ERROR, "Skip Coredump since abm::kCollectTelephonyLogsWithCoredump != traceAction", (uint8_t *)&__p, 2u);
          }
        }
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        MEMORY[0x1A6274930](v28);
        goto LABEL_30;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v17 = GetOsLogContext()[1];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/ABMHel"
                         "per/Server/Tasks/Wireless/Trace/CoreDump/EURCoreDumpTrace.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 312;
    _os_log_error_impl(&dword_1A609F000, v17, OS_LOG_TYPE_ERROR, "Invalid Weak pointer. File: %s Line: %d", buf, 0x12u);
    if (!v4) {
      return;
    }
  }
  else if (!v4)
  {
    return;
  }
LABEL_30:
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1A6191620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN16EURCoreDumpTrace8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(const void **)(a1 + 56);
  uint64_t v3 = v2;
  if (v2) {
    CFRetain(v2);
  }
  EURCoreDumpTrace::snapshot_sync(v1, &v3);
  if (v2) {
    CFRelease(v2);
  }
}

void sub_1A61916E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c30_ZTSN8dispatch13group_sessionE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = a2[6];
  a1[6] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    uint64_t v7 = a1[6];
    if (v7) {
      dispatch_group_enter(v7);
    }
  }
  CFTypeRef result = (CFTypeRef)a2[7];
  a1[7] = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c30_ZTSN8dispatch13group_sessionE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(void *a1)
{
  uint64_t v2 = (const void *)a1[7];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = a1[6];
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = a1[6];
    if (v4) {
      dispatch_release(v4);
    }
  }
  uint64_t v5 = a1[5];
  if (v5)
  {
    dispatch_group_leave(v5);
    uint64_t v6 = a1[5];
    if (v6)
    {
      dispatch_release(v6);
    }
  }
}

CFTypeRef __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c30_ZTSN8dispatch13group_sessionE56c29_ZTSNSt3__18weak_ptrI5TraceEE72c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = a2[6];
  a1[6] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    uint64_t v7 = a1[6];
    if (v7) {
      dispatch_group_enter(v7);
    }
  }
  uint64_t v8 = a2[8];
  a1[7] = a2[7];
  a1[8] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  }
  CFTypeRef result = (CFTypeRef)a2[9];
  a1[9] = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c30_ZTSN8dispatch13group_sessionE56c29_ZTSNSt3__18weak_ptrI5TraceEE72c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(void *a1)
{
  uint64_t v2 = (const void *)a1[9];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = a1[6];
  if (v4)
  {
    dispatch_group_leave(v4);
    uint64_t v5 = a1[6];
    if (v5) {
      dispatch_release(v5);
    }
  }
  uint64_t v6 = a1[5];
  if (v6)
  {
    dispatch_group_leave(v6);
    uint64_t v7 = a1[5];
    if (v7)
    {
      dispatch_release(v7);
    }
  }
}

BOOL EURCoreDumpTrace::setProperty(capabilities::trace *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (capabilities::trace::allowed(a1))
  {
    uint64_t v12 = 0;
    BOOL v13 = &v12;
    uint64_t v14 = 0x2000000000;
    char v15 = 0;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    v11[2] = ___ZN16EURCoreDumpTrace11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke;
    v11[3] = &unk_1E5C483B8;
    v11[4] = &v12;
    v11[5] = a1;
    v11[6] = a3;
    v11[7] = a4;
    uint64_t v16 = v11;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_4;
    block[3] = &__block_descriptor_tmp_76;
    block[4] = (char *)a1 + 72;
    block[5] = &v16;
    uint64_t v7 = *((void *)a1 + 11);
    if (*((void *)a1 + 12)) {
      dispatch_async_and_wait(v7, block);
    }
    else {
      dispatch_sync(v7, block);
    }
    BOOL v10 = *((unsigned char *)v13 + 24) != 0;
    _Block_object_dispose(&v12, 8);
    return v10;
  }
  else
  {
    uint64_t v8 = *((void *)a1 + 5);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEFAULT, "#I Set property not allowed", (uint8_t *)block, 2u);
    }
    return 0;
  }
}

void ___ZN16EURCoreDumpTrace11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = (const void *)*MEMORY[0x1E4F4C0E0];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C0E0]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v6;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
  p_dst = &__dst;
  if (v5) {
LABEL_8:
  }
    memmove(p_dst, v4, v6);
  p_dst->__r_.__value_.__s.__data_[v6] = 0;
  if (*(char *)(v3 + 23) >= 0) {
    BOOL v10 = (const char *)v3;
  }
  else {
    BOOL v10 = *(const char **)v3;
  }
  int v11 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  uint64_t v12 = (void *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v13 = &__dst;
  }
  else {
    BOOL v13 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  int v14 = strcasecmp(v10, (const char *)v13);
  int v15 = v14;
  if (v11 < 0)
  {
    operator delete(v12);
    if (v15) {
      return;
    }
  }
  else if (v14)
  {
    return;
  }
  uint64_t v16 = prop::coredump::set(*(void *)(a1 + 48), *(char **)(a1 + 56));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v16;
  uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 8);
  if (!*(unsigned char *)(v17 + 24))
  {
    *(unsigned char *)(v17 + 24) = 0;
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      return;
    }
    goto LABEL_29;
  }
  uint64_t v18 = *(char **)(a1 + 48);
  memset(&v21, 0, sizeof(v21));
  char v23 = 8;
  strcpy((char *)__p, "CoreDump");
  memset(&__dst, 0, sizeof(__dst));
  uint64_t v16 = defaults::get((char *)__p, v18, &__dst);
  int v19 = v16;
  if (v16)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)v18, (uint64_t)&__dst, &v24);
    std::string v21 = v24;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v23 & 0x80000000) == 0)
    {
LABEL_24:
      if (!v19) {
        goto LABEL_25;
      }
LABEL_35:
      uint64_t v16 = util::convert<BOOL>(&v21, (BOOL *)(v2 + 160), 0);
      LOBYTE(v19) = v16;
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_26;
      }
      goto LABEL_36;
    }
  }
  else if ((v23 & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p[0]);
  if (v19) {
    goto LABEL_35;
  }
LABEL_25:
  if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_26;
  }
LABEL_36:
  operator delete(v21.__r_.__value_.__l.__data_);
LABEL_26:
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v19;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    return;
  }
LABEL_29:
  uint64_t v20 = (capabilities::trace *)capabilities::trace::allowed((capabilities::trace *)v16);
  if (v20)
  {
    if (capabilities::trace::supportsCoreDumpStatus(v20)) {
      (*(void (**)(void))(**(void **)(v2 + 168) + 72))(*(void *)(v2 + 168));
    }
  }
}

void sub_1A6191CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EURCoreDumpTrace::getProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  char v11 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZN16EURCoreDumpTrace11getPropertyERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6__block_invoke;
  v7[3] = &unk_1E5C483E0;
  v7[6] = a2;
  v7[7] = a3;
  v7[4] = &v8;
  v7[5] = a1;
  uint64_t v12 = v7;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_4;
  block[3] = &__block_descriptor_tmp_76;
  block[4] = a1 + 72;
  block[5] = &v12;
  uint64_t v4 = a1 + 88;
  uint64_t v3 = *(NSObject **)(a1 + 88);
  if (*(void *)(v4 + 8)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void ___ZN16EURCoreDumpTrace11getPropertyERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6__block_invoke(void *a1)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[5];
  uint64_t v2 = a1[6];
  *((unsigned char *)&v17.__r_.__value_.__s + 23) = 5;
  LODWORD(v17.__r_.__value_.__l.__data_) = *(_DWORD *)"State";
  WORD2(v17.__r_.__value_.__r.__words[0]) = str_23_0[4];
  if (*(char *)(v2 + 23) >= 0) {
    uint64_t v4 = (const char *)v2;
  }
  else {
    uint64_t v4 = *(const char **)v2;
  }
  if (!strcasecmp(v4, (const char *)&v17))
  {
    *((unsigned char *)&v18.__r_.__value_.__s + 23) = 9;
    strcpy((char *)&v18, "Enabled: ");
    std::to_string(&v17, *(unsigned __int8 *)(v3 + 160));
    std::string __p = v17;
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    char v11 = std::string::append(&v18, (const std::string::value_type *)p_p, size);
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
    v19[0] = v11->__r_.__value_.__l.__size_;
    *(void *)((char *)v19 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
    char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = a1[7];
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    uint64_t v15 = v19[0];
    *(void *)uint64_t v14 = v12;
    *(void *)(v14 + 8) = v15;
    *(void *)(v14 + 15) = *(void *)((char *)v19 + 7);
    *(unsigned char *)(v14 + 23) = v13;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_19;
      }
    }
    else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(v18.__r_.__value_.__l.__data_);
    goto LABEL_19;
  }
  *((unsigned char *)&v17.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v17, "Enabled");
  if (strcasecmp(v4, (const char *)&v17)) {
    return;
  }
  int v5 = *(unsigned __int8 *)(v3 + 160);
  v18.__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 7) = 0;
  std::to_string(&v17, v5);
  v18.__r_.__value_.__r.__words[0] = v17.__r_.__value_.__l.__size_;
  std::string::size_type v6 = v17.__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 7);
  char v7 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  uint64_t v8 = a1[7];
  if (*(char *)(v8 + 23) < 0) {
    operator delete(*(void **)v8);
  }
  *(void *)uint64_t v8 = v6;
  *(void *)(v8 + 8) = v18.__r_.__value_.__r.__words[0];
  *(void *)(v8 + 15) = *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 7);
  *(unsigned char *)(v8 + 23) = v7;
LABEL_19:
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
}

void sub_1A6192034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    if (*(char *)(*(void *)(v23 + 56) + 23) < 0) {
      JUMPOUT(0x1A6191EF8);
    }
    JUMPOUT(0x1A6191F00);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A61920B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((a14 & 0x80000000) == 0) {
    JUMPOUT(0x1A619207CLL);
  }
  JUMPOUT(0x1A6192074);
}

void EURCoreDumpTrace::dumpState(uint64_t a1)
{
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v4 = (uint64_t *)(a1 + 72);
  if (!v3 || (std::string::size_type v6 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *(NSObject **)(a1 + 144);
  if (v8)
  {
    dispatch_retain(*(dispatch_object_t *)(a1 + 144));
    dispatch_group_enter(v8);
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN16EURCoreDumpTrace9dumpStateEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_34_0;
  v9[4] = a1;
  dispatch_group_t group = v8;
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_group_enter(group);
  }
  uint64_t v11 = v5;
  std::string::size_type v12 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  ctu::SharedSynchronizable<Trace>::execute_wrapped(v4, (uint64_t)v9);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v8)
  {
    dispatch_group_leave(v8);
    dispatch_release(v8);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void ___ZN16EURCoreDumpTrace9dumpStateEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[4];
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4 && a1[6])
    {
      uint64_t v5 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        if (*(unsigned char *)(v2 + 160)) {
          std::string::size_type v6 = "True";
        }
        else {
          std::string::size_type v6 = "False";
        }
        *(_DWORD *)long long buf = 136315138;
        uint64_t v9 = v6;
        _os_log_impl(&dword_1A609F000, v5, OS_LOG_TYPE_DEFAULT, "#I Enabled: %s", buf, 0xCu);
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  char v7 = GetOsLogContext()[1];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315394;
    uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/ABMHelper/Server/Tasks"
         "/Wireless/Trace/CoreDump/EURCoreDumpTrace.cpp";
    __int16 v10 = 1024;
    int v11 = 411;
    _os_log_error_impl(&dword_1A609F000, v7, OS_LOG_TYPE_ERROR, "Invalid Weak pointer. File: %s Line: %d", buf, 0x12u);
    if (!v4) {
      return;
    }
  }
  else if (!v4)
  {
    return;
  }
LABEL_12:
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1A61923E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void EURCoreDumpTrace::abort(uint64_t a1, const void *a2, ctu **a3)
{
  ctu::cf_to_xpc((uint64_t *)object, *a3, a2);
  xpc_object_t v4 = object[0];
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (object[0] && MEMORY[0x1A6275E60](object[0]) == v5) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_release(object[0]);
  if (MEMORY[0x1A6275E60](v4) == v5)
  {
    memset(object, 170, sizeof(object));
    xpc_object_t value = xpc_dictionary_get_value(v4, (const char *)*MEMORY[0x1E4F4CA38]);
    xpc_object_t v12 = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t v12 = xpc_null_create();
    }
    xpc::dyn_cast_or_default();
    xpc_release(v12);
    char v7 = (const char *)*MEMORY[0x1E4F4D130];
    char v8 = HIBYTE(object[2]);
    if (SHIBYTE(object[2]) < 0)
    {
      uint64_t v9 = (xpc_object_t *)object[0];
      if (!strcasecmp(v7, (const char *)object[0]) || !strcasecmp((const char *)*MEMORY[0x1E4F4D1A0], (const char *)v9))
      {
LABEL_21:
        *(unsigned char *)(a1 + 161) = 1;
        int v11 = *(NSObject **)(a1 + 40);
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
    }
    else
    {
      if (!strcasecmp(v7, (const char *)object)) {
        goto LABEL_21;
      }
      uint64_t v9 = object;
      if (!strcasecmp((const char *)*MEMORY[0x1E4F4D1A0], (const char *)object)) {
        goto LABEL_21;
      }
    }
    int v10 = strcasecmp((const char *)*MEMORY[0x1E4F4D030], (const char *)v9);
    *(unsigned char *)(a1 + 161) = v10 == 0;
    if (v10 || (int v11 = *(NSObject **)(a1 + 40), !os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)))
    {
LABEL_18:
      if (v8 < 0) {
        operator delete(object[0]);
      }
      goto LABEL_20;
    }
LABEL_17:
    LOWORD(v12) = 0;
    _os_log_impl(&dword_1A609F000, v11, OS_LOG_TYPE_DEFAULT, "#I Baseband crash reason will be parsed", (uint8_t *)&v12, 2u);
    char v8 = HIBYTE(object[2]);
    goto LABEL_18;
  }
LABEL_20:
  xpc_release(v4);
}

void sub_1A61925E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v9);
  _Unwind_Resume(a1);
}

void EURCoreDumpTrace::getSettingPrefix(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a1 + 16) = 0xAAAAAAAAAAAAAAAALL;
  *(unsigned char *)(a1 + 23) = 10;
  strcpy((char *)a1, "CoreDump::");
}

const char *EURCoreDumpTrace::getName(EURCoreDumpTrace *this)
{
  return "trace.coredump";
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body_base>::~shared_ptr(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 184) + 32))(*(void *)(a1 + 184));
  unint64_t v2 = *(void *)(a1 + 168);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      unint64_t v4 = v2 + 16 * v3;
      do
      {
        uint64_t v5 = *(atomic_uint **)(v4 - 8);
        if (v5)
        {
          if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
            if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
            }
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(void *)(a1 + 160) >= 0xBuLL) {
      operator delete(*(void **)(a1 + 168));
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<void>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = (void *)a1;
  if (a2 >= 0xB)
  {
    if (a2 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v4 = operator new(16 * a2);
  }
  std::string::size_type v6 = *(void **)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  if (v5)
  {
    char v7 = &v6[2 * v5];
    char v8 = v4;
    do
    {
      uint64_t v9 = v6[1];
      *char v8 = *v6;
      v8[1] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
      }
      v6 += 2;
      v8 += 2;
    }
    while (v6 != v7);
    std::string::size_type v6 = *(void **)(a1 + 168);
  }
  if (v6)
  {
    uint64_t v10 = *(void *)(a1 + 176);
    if (v10 - 1 >= 0)
    {
      int v11 = &v6[2 * v10];
      do
      {
        xpc_object_t v12 = (atomic_uint *)*(v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 2;
      }
      while (v11 > v6);
    }
    if (*(void *)(a1 + 160) >= 0xBuLL) {
      operator delete(*(void **)(a1 + 168));
    }
  }
  *(void *)(a1 + 160) = a2;
  *(void *)(a1 + 168) = v4;
}

void *std::shared_ptr<EURCoreDumpTrace>::shared_ptr[abi:ne180100]<EURCoreDumpTrace,std::shared_ptr<EURCoreDumpTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<EURCoreDumpTrace>(EURCoreDumpTrace*)::{lambda(EURCoreDumpTrace*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  unint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0DD40;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  std::string::size_type v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1A6192B50(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<EURCoreDumpTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<EURCoreDumpTrace>(EURCoreDumpTrace*)::{lambda(EURCoreDumpTrace*)#1}::operator() const(EURCoreDumpTrace*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1A6192B78(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<EURCoreDumpTrace *,std::shared_ptr<EURCoreDumpTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<EURCoreDumpTrace>(EURCoreDumpTrace*)::{lambda(EURCoreDumpTrace *)#1},std::allocator<EURCoreDumpTrace>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<EURCoreDumpTrace *,std::shared_ptr<EURCoreDumpTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<EURCoreDumpTrace>(EURCoreDumpTrace*)::{lambda(EURCoreDumpTrace *)#1},std::allocator<EURCoreDumpTrace>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<EURCoreDumpTrace *,std::shared_ptr<EURCoreDumpTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<EURCoreDumpTrace>(EURCoreDumpTrace*)::{lambda(EURCoreDumpTrace *)#1},std::allocator<EURCoreDumpTrace>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI16EURCoreDumpTraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI16EURCoreDumpTraceEENSt3__110share"
                                "d_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI16EURCoreDumpTraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI16EURCoreDumpTraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<EURCoreDumpTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<EURCoreDumpTrace>(EURCoreDumpTrace*)::{lambda(EURCoreDumpTrace*)#1}::operator() const(EURCoreDumpTrace*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_4(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ___ZN3ctu20SharedSynchronizableI5TraceE13connect_eventIN5boost8signals26signalIFvNSt3__14listIN8coredump13CommandDriver29EURCoreDumpTraceProtocolCrashENS7_9allocatorISB_EEEEENS5_19optional_last_valueIvEEiNS7_4lessIiEENS4_8functionISF_EENSK_IFvRKNS5_10connectionESE_EEENS5_5mutexEEE16EURCoreDumpTracevJSE_EEEDTcl7connectfp_cvNS7_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSY_S10_E_block_invoke(void *a1, uint64_t a2)
{
  unint64_t v3 = (void (*)(void *, uint64_t *))a1[5];
  uint64_t v2 = a1[6];
  unint64_t v4 = (void *)(a1[4] + (v2 >> 1) - 72);
  if (v2) {
    unint64_t v3 = *(void (**)(void *, uint64_t *))(*v4 + v3);
  }
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v9, a2);
  v3(v4, &v9);
  if (v11)
  {
    uint64_t v5 = v9;
    std::string::size_type v6 = v10;
    uint64_t v7 = *v10;
    *(void *)(v7 + 8) = *(void *)(v9 + 8);
    **(void **)(v5 + 8) = v7;
    uint64_t v11 = 0;
    if (v6 != &v9)
    {
      do
      {
        char v8 = (uint64_t *)v6[1];
        if (*((char *)v6 + 63) < 0)
        {
          operator delete((void *)v6[5]);
          if (*((char *)v6 + 39) < 0) {
LABEL_11:
          }
            operator delete((void *)v6[2]);
        }
        else if (*((char *)v6 + 39) < 0)
        {
          goto LABEL_11;
        }
        operator delete(v6);
        std::string::size_type v6 = v8;
      }
      while (v8 != &v9);
    }
  }
}

void sub_1A6192D88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(va);
  _Unwind_Resume(a1);
}

void **boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>::~slot(void **a1)
{
  unint64_t v2 = (unint64_t)a1[3];
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      unint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 4, a1 + 4, 2);
      }
    }
    a1[3] = 0;
  }
  unint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (uint64_t)a1[1];
    std::string::size_type v6 = *a1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
      }
      while ((void *)v5 != v4);
      std::string::size_type v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>::~DispatchSlot(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)a1);
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(uint64_t a1)
{
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 184));
  unint64_t v2 = *(void *)(a1 + 168);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      unint64_t v4 = v2 + 16 * v3;
      do
      {
        uint64_t v5 = *(atomic_uint **)(v4 - 8);
        if (v5)
        {
          if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
            if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
            }
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(void *)(a1 + 160) >= 0xBuLL) {
      operator delete(*(void **)(a1 + 168));
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  return this;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        std::string::size_type v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<KernelPCITrace::BuffContext *>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          std::string::size_type v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>(_DWORD *a1, void *a2)
{
  int v2 = a1[7] - 1;
  a1[7] = v2;
  if (!v2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)a1 + 40))(&v8);
    uint64_t v4 = a2[22];
    if (v4 == a2[20] && v4 != -1)
    {
      if (4 * v4 <= (unint64_t)(v4 + 1)) {
        unint64_t v5 = v4 + 1;
      }
      else {
        unint64_t v5 = 4 * v4;
      }
      boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl((uint64_t)a2, v5);
      uint64_t v4 = a2[22];
    }
    uint64_t v6 = *((void *)&v8 + 1);
    *(_OWORD *)(a2[21] + 16 * v4) = v8;
    if (v6)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
      uint64_t v4 = a2[22];
    }
    a2[22] = v4 + 1;
    uint64_t v7 = (atomic_uint *)*((void *)&v8 + 1);
    if (*((void *)&v8 + 1) && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v8 + 1) + 8), 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
      if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
      }
    }
  }
}

void sub_1A6193540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::signals2::detail::connection_body_base::~connection_body_base(boost::signals2::detail::connection_body_base *this)
{
  *(void *)this = &unk_1EFB0DEC8;
  uint64_t v1 = (atomic_uint *)*((void *)this + 2);
  if (v1)
  {
    if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
    }
  }
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  uint64_t v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  void v19[3] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[8] = v2;
  v14[9] = v2;
  v14[6] = v2;
  v14[7] = v2;
  v14[4] = v2;
  void v14[5] = v2;
  v14[2] = v2;
  v14[3] = v2;
  v14[0] = v2;
  v14[1] = v2;
  uint64_t v3 = *(pthread_mutex_t **)(a1 + 48);
  unint64_t v15 = 10;
  std::string __p = v14;
  uint64_t v17 = 0;
  std::string v18 = v3;
  pthread_mutex_lock(v3);
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4 != v4[1])
    {
      while (1)
      {
        memset(v19, 170, 24);
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>((uint64_t)v19, v5);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v5 + 8) + 24))(*(void *)(v5 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v5 + 16);
          if (v6 && atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire))
          {
LABEL_6:
            char v7 = 0;
            if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v14);
        }
        char v7 = 1;
        if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31)
        {
LABEL_13:
          long long v8 = (atomic_uint *)v19[2];
          if (v19[2])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v19[2] + 8), 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
              if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v19[1]) {
          (*(void (**)(void))(*(void *)v19[1] + 8))(v19[1]);
        }
LABEL_17:
        if ((v7 & 1) == 0)
        {
          v5 += 24;
          if (v5 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        break;
      }
    }
  }
  int v9 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v18);
  uint64_t v10 = (char *)__p;
  if (__p)
  {
    if (v17 - 1 >= 0)
    {
      uint64_t v11 = (char *)__p + 16 * v17;
      do
      {
        xpc_object_t v12 = (atomic_uint *)*((void *)v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v15 >= 0xB) {
      operator delete(__p);
    }
  }
  return v9 != 0;
}

void sub_1A61938F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 40);
  long long v2 = (void *)(result + 32);
  *a2 = *(void *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
    uint64_t v4 = *(atomic_uint **)(result + 40);
    *long long v2 = 0;
    *(void *)(result + 40) = 0;
    if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      CFTypeRef result = (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        return (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  else
  {
    *long long v2 = 0;
    *(void *)(result + 40) = 0;
  }
  return result;
}

void *std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    char v7 = (char *)operator new(v5);
    uint64_t v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[24 * v6];
    do
    {
      int v9 = &v7[v8];
      uint64_t v10 = v3 + v8;
      if ((*(_DWORD *)(v3 + v8) ^ (*(int *)(v3 + v8) >> 31)) == 2)
      {
        *((void *)v9 + 1) = (*(uint64_t (**)(void))(**(void **)(v10 + 8) + 32))(*(void *)(v10 + 8));
      }
      else
      {
        *((void *)v9 + 1) = *(void *)(v10 + 8);
        uint64_t v11 = *(void *)(v3 + v8 + 16);
        *(void *)&v7[v8 + 16] = v11;
        if (v11) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 12), 1u, memory_order_relaxed);
        }
      }
      *(_DWORD *)int v9 = *(_DWORD *)(v3 + v8) ^ (*(int *)(v3 + v8) >> 31);
      v8 += 24;
    }
    while (v3 + v8 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void sub_1A6193C18(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int64_t v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v4);
      }
      while ((void *)v4 != v3);
      int64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

atomic_uint *boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  if (v1 == 2)
  {
    CFTypeRef result = *(atomic_uint **)(a1 + 8);
    if (result)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (atomic_uint *)v3();
    }
  }
  else if (v1 == 1)
  {
    CFTypeRef result = *(atomic_uint **)(a1 + 16);
    if (result && atomic_fetch_add(result + 3, 0xFFFFFFFF) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 24))(result);
    }
  }
  else
  {
    CFTypeRef result = *(atomic_uint **)(a1 + 16);
    if (result && atomic_fetch_add(result + 3, 0xFFFFFFFF) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 24))(result);
    }
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>>::dispose(uint64_t a1)
{
  int v1 = *(void ***)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      unint64_t v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        unint64_t v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>>::get_untyped_deleter()
{
  return 0;
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = &unk_1EFB0DE60;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = &unk_1EFB0DEC8;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

uint64_t boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant(uint64_t a1)
{
  if (*(_DWORD *)a1 == *(int *)a1 >> 31)
  {
    unint64_t v2 = *(atomic_uint **)(a1 + 16);
    if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  return a1;
}

uint64_t boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int v3 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  if (v3 == 2)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a2 + 8) + 16))(&v8);
    *(void *)(v2 + 8) = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
    *(_DWORD *)uint64_t v2 = 1;
    CFTypeRef result = v8;
    if (v8) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  else if (v3 == 1)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      uint64_t v5 = *(unsigned int *)(v4 + 8);
      while (v5)
      {
        uint64_t v6 = v5;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v4 + 8), (unsigned int *)&v6, v5 + 1, memory_order_relaxed, memory_order_relaxed);
        BOOL v7 = v6 == v5;
        uint64_t v5 = v6;
        if (v7)
        {
          *(void *)(result + 8) = *(void *)(a2 + 8);
          *(void *)(result + 16) = v4;
          *(_DWORD *)CFTypeRef result = 0;
          return result;
        }
      }
      uint64_t v4 = 0;
    }
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = v4;
    *(_DWORD *)CFTypeRef result = 0;
  }
  else
  {
    *(_DWORD *)CFTypeRef result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
  }
  return result;
}

void sub_1A6194234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>::~function(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      int v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      int v9 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001A61FB004 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001A61FB004 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      uint64_t v8 = (const void *)*((void *)a2 + 1);
      if (v8) {
LABEL_9:
      }
        _Block_release(v8);
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)a1;
    BOOL v7 = *(void **)(a1 + 8);
    *(void *)a2 = *(void *)a1;
    if (v7)
    {
      BOOL v7 = _Block_copy(v7);
      uint64_t v6 = *(NSObject **)a2;
    }
    *((void *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      uint64_t v8 = *(const void **)(a1 + 8);
      if (v8) {
        goto LABEL_9;
      }
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::invoke(uint64_t a1, void *a2)
{
  uint64_t v35 = (uint64_t)&v35;
  xpc_object_t v36 = &v35;
  uint64_t v37 = 0;
  uint64_t v2 = a2[2];
  if (v2)
  {
    uint64_t v4 = *a2;
    int v3 = (uint64_t *)a2[1];
    uint64_t v5 = *v3;
    *(void *)(v5 + 8) = *(void *)(*a2 + 8);
    **(void **)(v4 + 8) = v5;
    uint64_t v6 = v35;
    *(void *)(v35 + 8) = v3;
    *int v3 = v6;
    *(void *)(v4 + 8) = &v35;
    uint64_t v35 = v4;
    uint64_t v37 = v2;
    a2[2] = 0;
  }
  uint64_t v8 = *(NSObject **)a1;
  BOOL v7 = *(const void **)(a1 + 8);
  if (!v7)
  {
    uint64_t v10 = 0;
    goto LABEL_12;
  }
  int v9 = _Block_copy(v7);
  uint64_t v10 = v9;
  if (!v9)
  {
LABEL_12:
    char v21 = 1;
LABEL_13:
    unint64_t v41 = (unint64_t)boost::function1<void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::assign_to<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>(dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>)::stored_vtable;
    *(void *)&long long v42 = 0;
    goto LABEL_23;
  }
  uint64_t v11 = _Block_copy(v9);
  xpc_object_t v12 = v11;
  if (!v11)
  {
    char v21 = 0;
    goto LABEL_13;
  }
  char v13 = _Block_copy(v11);
  uint64_t v14 = v13;
  if (v13)
  {
    unint64_t v15 = _Block_copy(v13);
    uint64_t v16 = v15;
    if (v15)
    {
      uint64_t v17 = _Block_copy(v15);
      std::string v18 = v17;
      if (v17)
      {
        int v19 = _Block_copy(v17);
        uint64_t v20 = v19;
        if (v19)
        {
          *(void *)&long long v42 = _Block_copy(v19);
          _Block_release(v20);
        }
        else
        {
          *(void *)&long long v42 = 0;
        }
        _Block_release(v18);
      }
      else
      {
        *(void *)&long long v42 = 0;
      }
      _Block_release(v16);
    }
    else
    {
      *(void *)&long long v42 = 0;
    }
    unint64_t v41 = (unint64_t)boost::function1<void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::assign_to<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>(dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>)::stored_vtable;
    _Block_release(v14);
  }
  else
  {
    unint64_t v41 = (unint64_t)boost::function1<void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::assign_to<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>(dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>)::stored_vtable;
    *(void *)&long long v42 = 0;
  }
  _Block_release(v12);
  char v21 = 0;
LABEL_23:
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v38, (uint64_t)&v35);
  uint64_t v22 = (uint64_t *)operator new(0x18uLL);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(v22, (uint64_t)&v38);
  uint64_t v23 = (char *)operator new(0x20uLL);
  std::string v24 = v23;
  *(void *)uint64_t v23 = 0;
  unint64_t v25 = v41;
  if (v41)
  {
    *(void *)uint64_t v23 = v41;
    if (v25)
    {
      *(_OWORD *)(v23 + 8) = v42;
      *((void *)v23 + 3) = v43;
    }
    else
    {
      (*(void (**)(long long *, char *, void))(v25 & 0xFFFFFFFFFFFFFFFELL))(&v42, v23 + 8, 0);
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvNSt3__14listIN8coredump13CommandDriver29EURCoreDumpTraceProtocolCrashENS3_9allocatorIS7_EEEEEEESA__block_invoke;
  block[3] = &__block_descriptor_tmp_92;
  block[4] = v24;
  block[5] = v22;
  dispatch_async(v8, block);
  if (v40)
  {
    uint64_t v26 = v38;
    long long v27 = v39;
    uint64_t v28 = *v39;
    *(void *)(v28 + 8) = *(void *)(v38 + 8);
    **(void **)(v26 + 8) = v28;
    uint64_t v40 = 0;
    if (v27 != &v38)
    {
      do
      {
        uint64_t v33 = (uint64_t *)v27[1];
        if (*((char *)v27 + 63) < 0)
        {
          operator delete((void *)v27[5]);
          if (*((char *)v27 + 39) < 0) {
LABEL_44:
          }
            operator delete((void *)v27[2]);
        }
        else if (*((char *)v27 + 39) < 0)
        {
          goto LABEL_44;
        }
        operator delete(v27);
        long long v27 = v33;
      }
      while (v33 != &v38);
    }
  }
  if (v41)
  {
    if ((v41 & 1) == 0)
    {
      uint64_t v29 = *(void (**)(long long *, long long *, uint64_t))(v41 & 0xFFFFFFFFFFFFFFFELL);
      if (v29) {
        v29(&v42, &v42, 2);
      }
    }
    unint64_t v41 = 0;
  }
  if ((v21 & 1) == 0) {
    _Block_release(v10);
  }
  if (v37)
  {
    uint64_t v30 = v35;
    uint64_t v31 = v36;
    uint64_t v32 = *v36;
    *(void *)(v32 + 8) = *(void *)(v35 + 8);
    **(void **)(v30 + 8) = v32;
    uint64_t v37 = 0;
    if (v31 != &v35)
    {
      do
      {
        xpc_object_t v34 = (uint64_t *)v31[1];
        if (*((char *)v31 + 63) < 0)
        {
          operator delete((void *)v31[5]);
          if (*((char *)v31 + 39) < 0) {
LABEL_50:
          }
            operator delete((void *)v31[2]);
        }
        else if (*((char *)v31 + 39) < 0)
        {
          goto LABEL_50;
        }
        operator delete(v31);
        uint64_t v31 = v34;
      }
      while (v34 != &v35);
    }
  }
}

void sub_1A61947C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  operator delete(v16);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(&a12);
  boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>::~function(&a15);
  if ((v17 & 1) == 0) {
    _Block_release(v15);
  }
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list((char *)&a9);
  _Unwind_Resume(a1);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvNSt3__14listIN8coredump13CommandDriver29EURCoreDumpTraceProtocolCrashENS3_9allocatorIS7_EEEEEEESA__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v25, *(void *)(a1 + 40));
  if (!*v2)
  {
    std::runtime_error::runtime_error(&v28, "call to empty boost::function");
    v28.__vftable = (std::runtime_error_vtbl *)&unk_1EFB0E110;
    boost::throw_exception<boost::bad_function_call>(&v28);
  }
  int v3 = *(void (**)(void *, std::runtime_error *))((*v2 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v28.__vftable = (std::runtime_error_vtbl *)&v28;
  v28.__imp_.__imp_ = (const char *)&v28;
  uint64_t v29 = 0;
  uint64_t v4 = v27;
  if (v27)
  {
    uint64_t v6 = v25;
    uint64_t v5 = v26;
    uint64_t v7 = *(void *)v26;
    *(void *)(v7 + 8) = *(void *)(v25 + 8);
    **(void **)(v6 + 8) = v7;
    uint64_t v8 = v28.__vftable;
    v28.~runtime_error_0 = v5;
    *(void *)uint64_t v5 = v8;
    *(void *)(v6 + 8) = &v28;
    uint64_t v27 = 0;
    v28.__vftable = (std::runtime_error_vtbl *)v6;
    uint64_t v29 = v4;
  }
  v3(v2 + 1, &v28);
  if (v29)
  {
    int v9 = v28.__vftable;
    imp = (char *)v28.__imp_.__imp_;
    uint64_t v11 = *(void *)v28.__imp_.__imp_;
    *(void *)(v11 + 8) = v28.~runtime_error_0;
    *(void *)v9->~runtime_error_0 = v11;
    uint64_t v29 = 0;
    if (imp != (char *)&v28)
    {
      do
      {
        uint64_t v22 = (std::runtime_error *)*((void *)imp + 1);
        if (imp[63] < 0)
        {
          operator delete(*((void **)imp + 5));
          if (imp[39] < 0) {
LABEL_25:
          }
            operator delete(*((void **)imp + 2));
        }
        else if (imp[39] < 0)
        {
          goto LABEL_25;
        }
        operator delete(imp);
        imp = (char *)v22;
      }
      while (v22 != &v28);
    }
  }
  if (v27)
  {
    uint64_t v12 = v25;
    char v13 = (uint64_t *)v26;
    uint64_t v14 = *(void *)v26;
    *(void *)(v14 + 8) = *(void *)(v25 + 8);
    **(void **)(v12 + 8) = v14;
    uint64_t v27 = 0;
    if (v13 != &v25)
    {
      do
      {
        uint64_t v23 = (uint64_t *)v13[1];
        if (*((char *)v13 + 63) < 0)
        {
          operator delete((void *)v13[5]);
          if (*((char *)v13 + 39) < 0) {
LABEL_31:
          }
            operator delete((void *)v13[2]);
        }
        else if (*((char *)v13 + 39) < 0)
        {
          goto LABEL_31;
        }
        operator delete(v13);
        char v13 = v23;
      }
      while (v23 != &v25);
    }
  }
  unint64_t v15 = *(uint64_t **)(a1 + 32);
  if (v15)
  {
    uint64_t v16 = *v15;
    if (*v15)
    {
      if ((v16 & 1) == 0)
      {
        char v17 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v16 & 0xFFFFFFFFFFFFFFFELL);
        if (v17) {
          v17(v15 + 1, v15 + 1, 2);
        }
      }
      *unint64_t v15 = 0;
    }
    operator delete(v15);
  }
  std::string v18 = *(char **)(a1 + 40);
  if (v18)
  {
    if (!*((void *)v18 + 2)
      || (uint64_t v19 = *(void *)v18,
          uint64_t v20 = (char *)*((void *)v18 + 1),
          uint64_t v21 = *(void *)v20,
          *(void *)(v21 + 8) = *(void *)(*(void *)v18 + 8),
          **(void **)(v19 + 8) = v21,
          *((void *)v18 + 2) = 0,
          v20 == v18))
    {
LABEL_18:
      operator delete(v18);
      return;
    }
    while (1)
    {
      std::string v24 = (char *)*((void *)v20 + 1);
      if (v20[63] < 0)
      {
        operator delete(*((void **)v20 + 5));
        if (v20[39] < 0) {
LABEL_37:
        }
          operator delete(*((void **)v20 + 2));
      }
      else if (v20[39] < 0)
      {
        goto LABEL_37;
      }
      operator delete(v20);
      uint64_t v20 = v24;
      if (v24 == v18) {
        goto LABEL_18;
      }
    }
  }
}

void sub_1A6194AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::runtime_error a12)
{
}

void sub_1A6194ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_1A6194AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, char a12)
{
}

void boost::throw_exception<boost::bad_function_call>(const std::runtime_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  int v3 = (void *)boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(void *)a1 = &unk_1EFB0E0E0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_1EFB0E068;
  *(void *)(a1 + 8) = &unk_1EFB0E098;
  *(void *)(a1 + 24) = &unk_1EFB0E0C0;
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1EFB0E138;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 32) = 0;
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

char *boost::wrapexcept<boost::bad_function_call>::clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EFB0E0E0;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *((void *)v2 + 1) = &unk_1EFB0E110;
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)v2 + 3) = &unk_1EFB0E138;
  *((void *)v2 + 4) = v3;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
    uint64_t v3 = *(void *)(a1 + 32);
  }
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(void *)uint64_t v2 = &unk_1EFB0E068;
  *((void *)v2 + 1) = &unk_1EFB0E098;
  *((void *)v2 + 3) = &unk_1EFB0E0C0;
  uint64_t v8 = 0;
  if (!v3)
  {
    uint64_t v4 = 0;
    *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
    *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
    uint64_t v5 = *((void *)v2 + 4);
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 40))(&v7);
  uint64_t v4 = v7;
  uint64_t v8 = v7;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 32))(v7);
    }
  }
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  uint64_t v5 = *((void *)v2 + 4);
  if (v5) {
LABEL_10:
  }
    (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
LABEL_11:
  *((void *)v2 + 4) = v4;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  }
  return v2;
}

void sub_1A6194EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_1A6194FAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1EFB0E138;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 32) = 0;
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));

  operator delete((void *)a1);
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&unk_1EFB0E138;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(this);
}

{
  const char *imp;
  uint64_t vars8;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_1EFB0E138;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);

  operator delete(&this[-1].__imp_);
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1EFB0E138;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(a1 - 1);
}

{
  const char *imp;
  uint64_t vars8;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_1EFB0E138;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);

  operator delete(&a1[-2].__imp_);
}

void boost::bad_function_call::~bad_function_call(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  operator delete(v1);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EFB0E0E0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = &unk_1EFB0E110;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_1EFB0E138;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_1EFB0E068;
  *(void *)(a1 + 8) = &unk_1EFB0E098;
  *(void *)(a1 + 24) = &unk_1EFB0E0C0;
  return a1;
}

void sub_1A6195448(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      uint64_t v8 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001A61FB121 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001A61FB121 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2) {
LABEL_9:
      }
        _Block_release(v7);
    }
  }
  else
  {
    uint64_t v6 = *a1;
    if (*a1) {
      uint64_t v6 = _Block_copy(v6);
    }
    *(void *)a2 = v6;
    if (a3 == 1)
    {
      uint64_t v7 = *a1;
      if (*a1) {
        goto LABEL_9;
      }
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::invoke(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v12 = (uint64_t)&v12;
  char v13 = &v12;
  uint64_t v14 = 0;
  uint64_t v3 = a2[2];
  if (v3)
  {
    uint64_t v5 = *a2;
    uint64_t v4 = (uint64_t *)a2[1];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(*a2 + 8);
    **(void **)(v5 + 8) = v6;
    uint64_t v7 = v12;
    *(void *)(v12 + 8) = v4;
    uint64_t *v4 = v7;
    *(void *)(v5 + 8) = &v12;
    uint64_t v12 = v5;
    uint64_t v14 = v3;
    a2[2] = 0;
  }
  (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v12);
  if (v14)
  {
    uint64_t v8 = v12;
    int v9 = v13;
    uint64_t v10 = *v13;
    *(void *)(v10 + 8) = *(void *)(v12 + 8);
    **(void **)(v8 + 8) = v10;
    uint64_t v14 = 0;
    if (v9 != &v12)
    {
      do
      {
        uint64_t v11 = (uint64_t *)v9[1];
        if (*((char *)v9 + 63) < 0)
        {
          operator delete((void *)v9[5]);
          if (*((char *)v9 + 39) < 0) {
LABEL_11:
          }
            operator delete((void *)v9[2]);
        }
        else if (*((char *)v9 + 39) < 0)
        {
          goto LABEL_11;
        }
        operator delete(v9);
        int v9 = v11;
      }
      while (v11 != &v12);
    }
  }
}

void sub_1A6195658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12)
{
  if (!a12
    || (uint64_t v13 = a10,
        uint64_t v14 = (uint64_t)a11,
        uint64_t v15 = *a11,
        *(void *)(v15 + 8) = *(void *)(a10 + 8),
        **(void **)(v13 + 8) = v15,
        a12 = 0,
        (uint64_t *)v14 == &a10))
  {
LABEL_3:
    _Unwind_Resume(exception_object);
  }
  while (1)
  {
    uint64_t v16 = *(uint64_t **)(v14 + 8);
    if (*(char *)(v14 + 63) < 0)
    {
      operator delete(*(void **)(v14 + 40));
      if (*(char *)(v14 + 39) < 0) {
LABEL_9:
      }
        operator delete(*(void **)(v14 + 16));
    }
    else if (*(char *)(v14 + 39) < 0)
    {
      goto LABEL_9;
    }
    operator delete((void *)v14);
    uint64_t v14 = (uint64_t)v16;
    if (v16 == &a10) {
      goto LABEL_3;
    }
  }
}

uint64_t boost::function1<void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::move_assign(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    *uint64_t v2 = 0;
  }
  return result;
}

void sub_1A6195778(void *a1)
{
  __cxa_begin_catch(a1);
  *int v1 = 0;
  __cxa_rethrow();
}

void sub_1A6195788(_Unwind_Exception *a1)
{
}

uint64_t *boost::function1<void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::~function1(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

_DWORD *std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v7 = (char *)operator new(24 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v8 = (int *)&v7[24 * v2];
  int v9 = &v7[24 * v6];
  uint64_t v10 = v8 + 2;
  uint64_t v11 = a2 + 8;
  int v12 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  if (v12 != 2)
  {
    if (v12 != 1) {
      int v12 = 0;
    }
    *uint64_t v10 = *(_OWORD *)v11;
    *(void *)uint64_t v11 = 0;
    *(void *)(a2 + 16) = 0;
    *uint64_t v8 = v12;
    uint64_t v13 = v8 + 6;
    uint64_t v23 = v8 + 6;
    uint64_t v15 = (char *)*a1;
    uint64_t v14 = (char *)a1[1];
    if (v14 != *a1) {
      goto LABEL_15;
    }
LABEL_24:
    *a1 = v8;
    a1[1] = v13;
    a1[2] = v9;
    goto LABEL_27;
  }
  *(void *)uint64_t v10 = (*(uint64_t (**)(void))(**(void **)v11 + 32))();
  *uint64_t v8 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  uint64_t v13 = v8 + 6;
  uint64_t v23 = v8 + 6;
  uint64_t v15 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == *a1) {
    goto LABEL_24;
  }
LABEL_15:
  unint64_t v16 = 0;
  do
  {
    char v17 = &v8[v16 / 4];
    std::string v18 = &v14[v16];
    if ((*(_DWORD *)&v14[v16 - 24] ^ (*(int *)&v14[v16 - 24] >> 31)) == 2)
    {
      *((void *)v17 - 2) = (*(uint64_t (**)(void))(**((void **)v18 - 2) + 32))(*((void *)v18 - 2));
    }
    else
    {
      *((void *)v17 - 2) = *((void *)v18 - 2);
      uint64_t v19 = *(void *)&v14[v16 - 8];
      *(void *)&v8[v16 / 4 - 2] = v19;
      if (v19) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v19 + 12), 1u, memory_order_relaxed);
      }
    }
    *(v17 - 6) = *((_DWORD *)v18 - 6) ^ (*((int *)v18 - 6) >> 31);
    v16 -= 24;
  }
  while (&v14[v16] != v15);
  uint64_t v20 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  uint64_t v21 = &v8[v16 / 4];
  uint64_t v13 = v23;
  *a1 = v21;
  a1[1] = v23;
  a1[2] = v9;
  if (v14 != v20)
  {
    do
    {
      v14 -= 24;
      boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)v14);
    }
    while (v14 != v20);
    uint64_t v14 = v20;
  }
LABEL_27:
  if (v14) {
    operator delete(v14);
  }
  return v13;
}

void sub_1A6195A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A6195A70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  for (; v2; v2 += 24)
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v3 + v2);
  std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(i - 24);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<Trace>>::~foreign_weak_ptr_impl(void *a1)
{
  *a1 = &unk_1EFB0E178;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<Trace>>::~foreign_weak_ptr_impl(void *__p)
{
  *std::string __p = &unk_1EFB0E178;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<Trace>>::lock(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 0;
LABEL_6:
  long long v7 = operator new(0x18uLL);
  *long long v7 = &unk_1EFB0E1D8;
  v7[1] = v6;
  v7[2] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *a2 = v7;
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_1A6195CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<Trace>>::expired(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  return !v1 || *(void *)(v1 + 8) == -1;
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<Trace>>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1EFB0E178;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<Trace>>::~foreign_shared_ptr_impl(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_1EFB0E1D8;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<Trace>>::~foreign_shared_ptr_impl(void *__p)
{
  uint64_t v1 = __p;
  *std::string __p = &unk_1EFB0E1D8;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::string __p = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(__p);
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<Trace>>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1EFB0E1D8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t ___ZN3ctu20SharedSynchronizableI5TraceE13connect_eventIN5boost8signals26signalIFvbENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionIS7_EENSD_IFvRKNS5_10connectionEbEEENS5_5mutexEEE16EURCoreDumpTracevJbEEEDTcl7connectfp_cvNSA_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSR_ST_E_block_invoke(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[5];
  uint64_t v2 = a1[6];
  uint64_t v3 = (void *)(a1[4] + (v2 >> 1) - 72);
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

void **boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>::~slot(void **a1)
{
  unint64_t v2 = (unint64_t)a1[3];
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 4, a1 + 4, 2);
      }
    }
    a1[3] = 0;
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (uint64_t)a1[1];
    uint64_t v6 = *a1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
      }
      while ((void *)v5 != v4);
      uint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)a1);
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<KernelPCITrace::BuffContext *>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  uint64_t v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  void v19[3] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[8] = v2;
  v14[9] = v2;
  v14[6] = v2;
  v14[7] = v2;
  v14[4] = v2;
  void v14[5] = v2;
  v14[2] = v2;
  v14[3] = v2;
  v14[0] = v2;
  v14[1] = v2;
  uint64_t v3 = *(pthread_mutex_t **)(a1 + 48);
  unint64_t v15 = 10;
  std::string __p = v14;
  uint64_t v17 = 0;
  std::string v18 = v3;
  pthread_mutex_lock(v3);
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4 != v4[1])
    {
      while (1)
      {
        memset(v19, 170, 24);
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>((uint64_t)v19, v5);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v5 + 8) + 24))(*(void *)(v5 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v5 + 16);
          if (v6 && atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire))
          {
LABEL_6:
            char v7 = 0;
            if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v14);
        }
        char v7 = 1;
        if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31)
        {
LABEL_13:
          uint64_t v8 = (atomic_uint *)v19[2];
          if (v19[2])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v19[2] + 8), 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
              if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v19[1]) {
          (*(void (**)(void))(*(void *)v19[1] + 8))(v19[1]);
        }
LABEL_17:
        if ((v7 & 1) == 0)
        {
          v5 += 24;
          if (v5 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        break;
      }
    }
  }
  int v9 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v18);
  uint64_t v10 = (char *)__p;
  if (__p)
  {
    if (v17 - 1 >= 0)
    {
      uint64_t v11 = (char *)__p + 16 * v17;
      do
      {
        int v12 = (atomic_uint *)*((void *)v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v15 >= 0xB) {
      operator delete(__p);
    }
  }
  return v9 != 0;
}

void sub_1A6196778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 40);
  long long v2 = (void *)(result + 32);
  *a2 = *(void *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
    uint64_t v4 = *(atomic_uint **)(result + 40);
    *long long v2 = 0;
    *(void *)(result + 40) = 0;
    if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        return (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  else
  {
    *long long v2 = 0;
    *(void *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      uint64_t v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        uint64_t v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_untyped_deleter()
{
  return 0;
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = &unk_1EFB0E2E8;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = &unk_1EFB0DEC8;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(BOOL)>::~function(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      int v9 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001A61FB5E0 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001A61FB5E0 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      uint64_t v8 = (const void *)*((void *)a2 + 1);
      if (v8) {
LABEL_9:
      }
        _Block_release(v8);
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)a1;
    char v7 = *(void **)(a1 + 8);
    *(void *)a2 = *(void *)a1;
    if (v7)
    {
      char v7 = _Block_copy(v7);
      uint64_t v6 = *(NSObject **)a2;
    }
    *((void *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      uint64_t v8 = *(const void **)(a1 + 8);
      if (v8) {
        goto LABEL_9;
      }
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>,void,BOOL>::invoke(uint64_t a1, char a2)
{
  uint64_t v4 = *(NSObject **)a1;
  uint64_t v3 = *(const void **)(a1 + 8);
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = _Block_copy(v3);
  uint64_t v6 = v5;
  if (!v5)
  {
LABEL_10:
    char v18 = 1;
LABEL_11:
    uint64_t v17 = 0;
    v23[0] = 0;
    goto LABEL_21;
  }
  char v7 = _Block_copy(v5);
  uint64_t v8 = v7;
  if (!v7)
  {
    char v18 = 0;
    goto LABEL_11;
  }
  int v9 = _Block_copy(v7);
  uint64_t v10 = v9;
  if (v9)
  {
    uint64_t v11 = _Block_copy(v9);
    int v12 = v11;
    if (v11)
    {
      uint64_t v13 = _Block_copy(v11);
      uint64_t v14 = v13;
      if (v13)
      {
        unint64_t v15 = _Block_copy(v13);
        unint64_t v16 = v15;
        if (v15)
        {
          uint64_t v17 = _Block_copy(v15);
          v23[0] = v17;
          _Block_release(v16);
        }
        else
        {
          uint64_t v17 = 0;
          v23[0] = 0;
        }
        _Block_release(v14);
      }
      else
      {
        uint64_t v17 = 0;
        v23[0] = 0;
      }
      _Block_release(v12);
    }
    else
    {
      uint64_t v17 = 0;
      v23[0] = 0;
    }
    _Block_release(v10);
  }
  else
  {
    uint64_t v17 = 0;
    v23[0] = 0;
  }
  _Block_release(v8);
  char v18 = 0;
LABEL_21:
  uint64_t v19 = operator new(1uLL);
  *uint64_t v19 = a2;
  uint64_t v20 = operator new(0x20uLL);
  void *v20 = boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable;
  if (v17) {
    uint64_t v21 = _Block_copy(v17);
  }
  else {
    uint64_t v21 = 0;
  }
  v20[1] = v21;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvbEEEb_block_invoke;
  block[3] = &__block_descriptor_tmp_109;
  block[4] = v20;
  block[5] = v19;
  dispatch_async(v4, block);
  if (boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable)
  {
    if ((boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable & 1) == 0)
    {
      uint64_t v22 = *(void (**)(void *, void *, uint64_t))((unint64_t)boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v22) {
        v22(v23, v23, 2);
      }
    }
  }
  if ((v18 & 1) == 0) {
    _Block_release(v6);
  }
}

void sub_1A6196FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (v10) {
    _Block_release(v10);
  }
  if ((v11 & 1) == 0) {
    _Block_release(v9);
  }
  _Unwind_Resume(exception_object);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvbEEEb_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v7, "call to empty boost::function");
    v7.__vftable = (std::runtime_error_vtbl *)&unk_1EFB0E110;
    boost::throw_exception<boost::bad_function_call>(&v7);
  }
  (*(void (**)(void *, void))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1, **(unsigned __int8 **)(a1 + 40));
  uint64_t v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        uint64_t v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5) {
          v5(v3 + 1, v3 + 1, 2);
        }
      }
      *uint64_t v3 = 0;
    }
    operator delete(v3);
  }
  uint64_t v6 = *(void **)(a1 + 40);
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1A619710C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(BOOL)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      uint64_t v8 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001A61FB61ELL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001A61FB61ELL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      std::runtime_error v7 = *(void **)a2;
      if (*(void *)a2) {
LABEL_9:
      }
        _Block_release(v7);
    }
  }
  else
  {
    uint64_t v6 = *a1;
    if (*a1) {
      uint64_t v6 = _Block_copy(v6);
    }
    *(void *)a2 = v6;
    if (a3 == 1)
    {
      std::runtime_error v7 = *a1;
      if (*a1) {
        goto LABEL_9;
      }
    }
  }
}

uint64_t boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(BOOL)>,void,BOOL>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t boost::function1<void,BOOL>::move_assign(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    *uint64_t v2 = 0;
  }
  return result;
}

void sub_1A61972C8(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_rethrow();
}

void sub_1A61972D8(_Unwind_Exception *a1)
{
}

uint64_t *boost::function1<void,BOOL>::~function1(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t ___ZN3ctu20SharedSynchronizableI5TraceE13connect_eventIN5boost8signals26signalIFvN8coredump13CommandDriver6StatusEENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionISA_EENSG_IFvRKNS5_10connectionES9_EEENS5_5mutexEEE16EURCoreDumpTracevJS9_EEEDTcl7connectfp_cvNSD_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSU_SW_E_block_invoke(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[5];
  uint64_t v2 = a1[6];
  uint64_t v3 = (void *)(a1[4] + (v2 >> 1) - 72);
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

void **boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>::~slot(void **a1)
{
  unint64_t v2 = (unint64_t)a1[3];
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 4, a1 + 4, 2);
      }
    }
    a1[3] = 0;
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (uint64_t)a1[1];
    uint64_t v6 = *a1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
      }
      while ((void *)v5 != v4);
      uint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>::~DispatchSlot(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)a1);
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<KernelPCITrace::BuffContext *>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  uint64_t v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  void v19[3] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[8] = v2;
  v14[9] = v2;
  v14[6] = v2;
  v14[7] = v2;
  v14[4] = v2;
  void v14[5] = v2;
  v14[2] = v2;
  v14[3] = v2;
  v14[0] = v2;
  v14[1] = v2;
  uint64_t v3 = *(pthread_mutex_t **)(a1 + 48);
  unint64_t v15 = 10;
  std::string __p = v14;
  uint64_t v17 = 0;
  char v18 = v3;
  pthread_mutex_lock(v3);
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4 != v4[1])
    {
      while (1)
      {
        memset(v19, 170, 24);
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>((uint64_t)v19, v5);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v5 + 8) + 24))(*(void *)(v5 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v5 + 16);
          if (v6 && atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire))
          {
LABEL_6:
            char v7 = 0;
            if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v14);
        }
        char v7 = 1;
        if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31)
        {
LABEL_13:
          uint64_t v8 = (atomic_uint *)v19[2];
          if (v19[2])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v19[2] + 8), 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
              if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v19[1]) {
          (*(void (**)(void))(*(void *)v19[1] + 8))(v19[1]);
        }
LABEL_17:
        if ((v7 & 1) == 0)
        {
          v5 += 24;
          if (v5 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        break;
      }
    }
  }
  int v9 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v18);
  uint64_t v10 = (char *)__p;
  if (__p)
  {
    if (v17 - 1 >= 0)
    {
      char v11 = (char *)__p + 16 * v17;
      do
      {
        int v12 = (atomic_uint *)*((void *)v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v15 >= 0xB) {
      operator delete(__p);
    }
  }
  return v9 != 0;
}

void sub_1A6197BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 40);
  long long v2 = (void *)(result + 32);
  *a2 = *(void *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
    uint64_t v4 = *(atomic_uint **)(result + 40);
    *long long v2 = 0;
    *(void *)(result + 40) = 0;
    if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        return (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  else
  {
    *long long v2 = 0;
    *(void *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      uint64_t v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        uint64_t v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>>::get_untyped_deleter()
{
  return 0;
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = &unk_1EFB0E500;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = &unk_1EFB0DEC8;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(coredump::CommandDriver::Status)>::~function(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      int v9 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001A61FBA1DLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001A61FBA1DLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      uint64_t v8 = (const void *)*((void *)a2 + 1);
      if (v8) {
LABEL_9:
      }
        _Block_release(v8);
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)a1;
    char v7 = *(void **)(a1 + 8);
    *(void *)a2 = *(void *)a1;
    if (v7)
    {
      char v7 = _Block_copy(v7);
      uint64_t v6 = *(NSObject **)a2;
    }
    *((void *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      uint64_t v8 = *(const void **)(a1 + 8);
      if (v8) {
        goto LABEL_9;
      }
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>,void,coredump::CommandDriver::Status>::invoke(uint64_t a1, int a2)
{
  uint64_t v4 = *(NSObject **)a1;
  uint64_t v3 = *(const void **)(a1 + 8);
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = _Block_copy(v3);
  uint64_t v6 = v5;
  if (!v5)
  {
LABEL_10:
    char v18 = 1;
LABEL_11:
    uint64_t v17 = 0;
    v23[0] = 0;
    goto LABEL_21;
  }
  char v7 = _Block_copy(v5);
  uint64_t v8 = v7;
  if (!v7)
  {
    char v18 = 0;
    goto LABEL_11;
  }
  int v9 = _Block_copy(v7);
  uint64_t v10 = v9;
  if (v9)
  {
    char v11 = _Block_copy(v9);
    int v12 = v11;
    if (v11)
    {
      uint64_t v13 = _Block_copy(v11);
      uint64_t v14 = v13;
      if (v13)
      {
        unint64_t v15 = _Block_copy(v13);
        unint64_t v16 = v15;
        if (v15)
        {
          uint64_t v17 = _Block_copy(v15);
          v23[0] = v17;
          _Block_release(v16);
        }
        else
        {
          uint64_t v17 = 0;
          v23[0] = 0;
        }
        _Block_release(v14);
      }
      else
      {
        uint64_t v17 = 0;
        v23[0] = 0;
      }
      _Block_release(v12);
    }
    else
    {
      uint64_t v17 = 0;
      v23[0] = 0;
    }
    _Block_release(v10);
  }
  else
  {
    uint64_t v17 = 0;
    v23[0] = 0;
  }
  _Block_release(v8);
  char v18 = 0;
LABEL_21:
  uint64_t v19 = operator new(4uLL);
  *uint64_t v19 = a2;
  uint64_t v20 = operator new(0x20uLL);
  void *v20 = boost::function1<void,coredump::CommandDriver::Status>::assign_to<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>(dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>)::stored_vtable;
  if (v17) {
    uint64_t v21 = _Block_copy(v17);
  }
  else {
    uint64_t v21 = 0;
  }
  v20[1] = v21;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN8coredump13CommandDriver6StatusEEEES5__block_invoke;
  block[3] = &__block_descriptor_tmp_116;
  block[4] = v20;
  block[5] = v19;
  dispatch_async(v4, block);
  if (boost::function1<void,coredump::CommandDriver::Status>::assign_to<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>(dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>)::stored_vtable)
  {
    if ((boost::function1<void,coredump::CommandDriver::Status>::assign_to<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>(dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>)::stored_vtable & 1) == 0)
    {
      uint64_t v22 = *(void (**)(void *, void *, uint64_t))((unint64_t)boost::function1<void,coredump::CommandDriver::Status>::assign_to<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>(dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v22) {
        v22(v23, v23, 2);
      }
    }
  }
  if ((v18 & 1) == 0) {
    _Block_release(v6);
  }
}

void sub_1A6198448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (v10) {
    _Block_release(v10);
  }
  if ((v11 & 1) == 0) {
    _Block_release(v9);
  }
  _Unwind_Resume(exception_object);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN8coredump13CommandDriver6StatusEEEES5__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v7, "call to empty boost::function");
    v7.__vftable = (std::runtime_error_vtbl *)&unk_1EFB0E110;
    boost::throw_exception<boost::bad_function_call>(&v7);
  }
  (*(void (**)(void *, void))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1, **(unsigned int **)(a1 + 40));
  uint64_t v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        uint64_t v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5) {
          v5(v3 + 1, v3 + 1, 2);
        }
      }
      *uint64_t v3 = 0;
    }
    operator delete(v3);
  }
  uint64_t v6 = *(void **)(a1 + 40);
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1A6198568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      uint64_t v8 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001A61FBA7BLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001A61FBA7BLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      std::runtime_error v7 = *(void **)a2;
      if (*(void *)a2) {
LABEL_9:
      }
        _Block_release(v7);
    }
  }
  else
  {
    uint64_t v6 = *a1;
    if (*a1) {
      uint64_t v6 = _Block_copy(v6);
    }
    *(void *)a2 = v6;
    if (a3 == 1)
    {
      std::runtime_error v7 = *a1;
      if (*a1) {
        goto LABEL_9;
      }
    }
  }
}

uint64_t boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>,void,coredump::CommandDriver::Status>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t boost::function1<void,coredump::CommandDriver::Status>::move_assign(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    *uint64_t v2 = 0;
  }
  return result;
}

void sub_1A6198724(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_rethrow();
}

void sub_1A6198734(_Unwind_Exception *a1)
{
}

uint64_t *boost::function1<void,coredump::CommandDriver::Status>::~function1(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t __cxx_global_var_init_36()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1A609F000);
  }
  return result;
}

void *abm::DiagnosticToolsTask::DiagnosticToolsTask(void *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v11 = *a3;
  int v12 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a4[1];
  uint64_t v9 = *a4;
  uint64_t v10 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  abm::HelperTask::HelperTask((uint64_t)a1, a2, &v11, &v9);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  long long v7 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *a1 = &unk_1EFB0E658;
  return a1;
}

void sub_1A61988B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void abm::DiagnosticToolsTask::~DiagnosticToolsTask(abm::DiagnosticToolsTask *this)
{
  *(void *)this = &unk_1EFB0FCB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *((void *)this + 14);
  if (v3) {
    dispatch_release(v3);
  }
  *(void *)this = &unk_1EFB09350;
  MEMORY[0x1A6274710]((char *)this + 8);
  uint64_t v4 = *((void *)this + 12);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *((void *)this + 11);
  if (v5) {
    dispatch_release(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

{
  void *v1;
  uint64_t vars8;

  abm::DiagnosticToolsTask::~DiagnosticToolsTask(this);

  operator delete(v1);
}

void *abm::DiagnosticToolsTask::getName(abm::DiagnosticToolsTask *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_19, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&_MergedGlobals_19))
  {
    return qword_1EB5EEB20;
  }
  unsigned int v3 = *((_DWORD *)this + 26) - 1;
  if (v3 > 9) {
    uint64_t v4 = "invalid";
  }
  else {
    uint64_t v4 = off_1E5C484E0[v3];
  }
  std::string::basic_string[abi:ne180100]<0>(qword_1EB5EEB20, v4);
  __cxa_atexit(MEMORY[0x1E4FBA210], qword_1EB5EEB20, &dword_1A609F000);
  __cxa_guard_release(&_MergedGlobals_19);
  return qword_1EB5EEB20;
}

void sub_1A6198A64(_Unwind_Exception *a1)
{
}

void abm::DiagnosticToolsTask::init_sync(abm::DiagnosticToolsTask *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v6) {
      goto LABEL_19;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v6) {
      goto LABEL_19;
    }
  }
  long long v7 = std::__shared_weak_count::lock(v6);
  uint64_t v17 = v7;
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *((void *)this + 15);
    uint64_t v16 = v9;
    if (v9)
    {
      v15[23] = 16;
      strcpy(v15, "kCommandTailspin");
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN3abm19DiagnosticToolsTask9init_syncEv_block_invoke;
      aBlock[3] = &__block_descriptor_tmp_27;
      aBlock[4] = this;
      aBlock[5] = v3;
      uint64_t v13 = v5;
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = _Block_copy(aBlock);
      uint64_t v11 = *((void *)this + 11);
      if (v11) {
        dispatch_retain(v11);
      }
      v14[0] = v10;
      v14[1] = v11;
      abm::HelperServerInternal::setCommandHandler(v9, (uint64_t)v15, (uint64_t)v14);
      if (v11) {
        dispatch_release(v11);
      }
      if (v10) {
        _Block_release(v10);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_19:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1A6198C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(int,xpc::dict)>)>::~callback((uint64_t)&a17);
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v18 - 64);
  std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(a1);
}

void ___ZN3abm19DiagnosticToolsTask9init_syncEv_block_invoke(void *a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  uint64_t v5 = a1[4];
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    uint64_t v33 = std::__shared_weak_count::lock(v6);
    if (!v33) {
      return;
    }
    uint64_t v32 = a1[5];
    if (v32)
    {
      uint64_t v9 = *(NSObject **)(v5 + 112);
      if (v9)
      {
        dispatch_retain(*(dispatch_object_t *)(v5 + 112));
        dispatch_group_enter(v9);
      }
      if (MEMORY[0x1A6275E60](*a3) != MEMORY[0x1E4F14590])
      {
        int v10 = 0;
        uint64_t v11 = 0;
        std::string::size_type v12 = 0;
        std::string::size_type v13 = 0;
        int v14 = 0;
        std::runtime_error v28 = 0;
        memset(&__p, 0, sizeof(__p));
LABEL_8:
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
        v29.__r_.__value_.__l.__size_ = v13;
        v29.__r_.__value_.__r.__words[2] = v12;
        goto LABEL_21;
      }
      xpc_object_t value = xpc_dictionary_get_value(*a3, "LogPath");
      xpc_object_t object = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      xpc::dyn_cast_or_default();
      uint64_t v16 = (const std::string::value_type *)block;
      std::string::size_type v17 = (std::string::size_type)v36;
      HIBYTE(v36) = 0;
      LOBYTE(block) = 0;
      xpc_release(object);
      xpc_object_t v18 = xpc_dictionary_get_value(*a3, "DumpStateReason");
      xpc_object_t object = v18;
      if (v18) {
        xpc_retain(v18);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      xpc::dyn_cast_or_default();
      uint64_t v11 = (std::string::value_type *)block;
      std::string::size_type v13 = v35;
      std::string::size_type v12 = (std::string::size_type)v36;
      HIBYTE(v36) = 0;
      LOBYTE(block) = 0;
      xpc_release(object);
      xpc_object_t v19 = xpc_dictionary_get_value(*a3, "kKeyDuration");
      xpc_object_t block = v19;
      if (v19) {
        xpc_retain(v19);
      }
      else {
        xpc_object_t block = xpc_null_create();
      }
      int v10 = xpc::dyn_cast_or_default();
      xpc_release(block);
      if ((v17 & 0x8000000000000000) != 0)
      {
        std::string::__init_copy_ctor_external(&__p, v16, v35);
        std::runtime_error v28 = (void *)v16;
        int v14 = 1;
        if ((v12 & 0x8000000000000000) == 0) {
          goto LABEL_8;
        }
      }
      else
      {
        std::string::size_type v20 = (std::string::size_type)v16;
        int v14 = 0;
        std::runtime_error v28 = (void *)v20;
        __p.__r_.__value_.__r.__words[0] = v20;
        __p.__r_.__value_.__l.__size_ = v35;
        __p.__r_.__value_.__r.__words[2] = v17;
        if ((v12 & 0x8000000000000000) == 0) {
          goto LABEL_8;
        }
      }
      std::string::__init_copy_ctor_external(&v29, v11, v13);
LABEL_21:
      int v21 = abm::DiagnosticToolsTask::tailspin_sync(v5, (const char *)&__p, (uint64_t)&v29, v10);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v29.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_23:
          if (!*(void *)a4) {
            goto LABEL_44;
          }
LABEL_27:
          if (!*(void *)(a4 + 8)) {
            goto LABEL_44;
          }
          if (v21) {
            int v22 = 0;
          }
          else {
            int v22 = -534716416;
          }
          xpc_object_t v23 = xpc_null_create();
          if (*(void *)a4) {
            std::string v24 = _Block_copy(*(const void **)a4);
          }
          else {
            std::string v24 = 0;
          }
          uint64_t v25 = *(NSObject **)(a4 + 8);
          xpc_object_t block = (xpc_object_t)MEMORY[0x1E4F143A8];
          std::string::size_type v35 = 1174405120;
          xpc_object_t v36 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_2;
          uint64_t v37 = &__block_descriptor_tmp_14_2;
          if (v24)
          {
            uint64_t v26 = _Block_copy(v24);
            int v40 = v22;
            aBlock = v26;
            xpc_object_t v39 = v23;
            if (v23)
            {
LABEL_36:
              xpc_retain(v23);
LABEL_39:
              dispatch_async(v25, &block);
              xpc_release(v39);
              xpc_object_t v39 = 0;
              if (aBlock) {
                _Block_release(aBlock);
              }
              if (v24) {
                _Block_release(v24);
              }
              xpc_release(v23);
LABEL_44:
              if ((v12 & 0x8000000000000000) != 0)
              {
                operator delete(v11);
                if (v14)
                {
LABEL_46:
                  operator delete(v28);
                  if (!v9) {
                    goto LABEL_51;
                  }
LABEL_50:
                  dispatch_group_leave(v9);
                  dispatch_release(v9);
                  goto LABEL_51;
                }
              }
              else if (v14)
              {
                goto LABEL_46;
              }
              if (!v9) {
                goto LABEL_51;
              }
              goto LABEL_50;
            }
          }
          else
          {
            int v40 = v22;
            aBlock = 0;
            xpc_object_t v39 = v23;
            if (v23) {
              goto LABEL_36;
            }
          }
          xpc_object_t v39 = xpc_null_create();
          goto LABEL_39;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_23;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!*(void *)a4) {
        goto LABEL_44;
      }
      goto LABEL_27;
    }
  }
LABEL_51:
  uint64_t v27 = v33;
  if (v33)
  {
    if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_1A6199098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t a23,char a24,uint64_t a25,xpc_object_t object)
{
  xpc_release(object);
  if (v29 < 0) {
    operator delete(v28);
  }
  if (v30 < 0) {
    operator delete(v27);
  }
  if (v26)
  {
    dispatch_group_leave(v26);
    dispatch_release(v26);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t abm::DiagnosticToolsTask::tailspin_sync(uint64_t a1, const char *a2, uint64_t a3, int a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
LABEL_7:
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v24) = a4;
    _os_log_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEFAULT, "#I Tailspin: Duration: %d seconds", buf, 8u);
    if ((a2[23] & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_8;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    if (*(void *)(a3 + 8)) {
      uint64_t v9 = *(const char **)a3;
    }
    else {
      uint64_t v9 = "<no reason>";
    }
  }
  else if (*(unsigned char *)(a3 + 23))
  {
    uint64_t v9 = (const char *)a3;
  }
  else
  {
    uint64_t v9 = "<no reason>";
  }
  *(_DWORD *)long long buf = 136315138;
  std::string v24 = v9;
  _os_log_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEFAULT, "#I Tailspin: Reason: %s", buf, 0xCu);
  uint64_t v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_7;
  }
LABEL_14:
  if ((a2[23] & 0x80000000) == 0)
  {
LABEL_15:
    std::string v22 = *(std::string *)a2;
    if (*(char *)(a3 + 23) < 0) {
      goto LABEL_16;
    }
LABEL_9:
    std::string __p = *(std::string *)a3;
    goto LABEL_17;
  }
LABEL_8:
  std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
    goto LABEL_9;
  }
LABEL_16:
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
LABEL_17:
  uint64_t v10 = abm::tailspin::dumpOutputWithOptions_sync((uint64_t)&v22, (uint64_t *)&__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      uint64_t v11 = *((unsigned __int8 *)a2 + 23);
      if ((a2[23] & 0x80000000) == 0) {
        goto LABEL_20;
      }
      goto LABEL_29;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  uint64_t v11 = *((unsigned __int8 *)a2 + 23);
  if ((a2[23] & 0x80000000) == 0)
  {
LABEL_20:
    std::string::size_type v12 = *(NSObject **)(a1 + 40);
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (v11) {
      goto LABEL_21;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v18 = *((void *)a2 + 1);
  std::string::size_type v12 = *(NSObject **)(a1 + 40);
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if (v18)
  {
LABEL_21:
    if (v13)
    {
      if ((v11 & 0x80) != 0) {
        a2 = *(const char **)a2;
      }
      int v14 = "NO";
      if (v10) {
        int v14 = "YES";
      }
      *(_DWORD *)long long buf = 136315394;
      std::string v24 = a2;
      __int16 v25 = 2080;
      uint64_t v26 = v14;
      unint64_t v15 = "#I Tailspin: Log is generated at %s. Success: %s";
      uint64_t v16 = v12;
      uint32_t v17 = 22;
LABEL_34:
      _os_log_impl(&dword_1A609F000, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
      return v10;
    }
    return v10;
  }
LABEL_30:
  if (v13)
  {
    xpc_object_t v19 = "NO";
    if (v10) {
      xpc_object_t v19 = "YES";
    }
    *(_DWORD *)long long buf = 136315138;
    std::string v24 = v19;
    unint64_t v15 = "#I Tailspin: Log is generated at tailspin's default location. Success: %s";
    uint64_t v16 = v12;
    uint32_t v17 = 12;
    goto LABEL_34;
  }
  return v10;
}

void sub_1A6199468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v1, &object);
  xpc_release(object);
}

void sub_1A6199508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t diag::DIAGConfigurerUSB::DIAGConfigurerUSB(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4)
{
  long long v7 = (std::__shared_weak_count *)a2[1];
  uint64_t v23 = *a2;
  std::string v24 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v17 = *a3;
  uint64_t v8 = (const void *)*((void *)a3 + 1);
  CFTypeRef cf = v8;
  if (v8) {
    CFRetain(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)a3 + 3);
  uint64_t v19 = *((void *)a3 + 2);
  std::string::size_type v20 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *((void *)a3 + 4);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)a3 + 5);
  uint64_t v21 = v10;
  std::string v22 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  diag::DIAGConfigurer::DIAGConfigurer(a1, &v23, (uint64_t)&v17, a4);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  std::string::size_type v12 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    BOOL v13 = (void *)cf;
    if (!cf) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  BOOL v13 = (void *)cf;
  if (cf) {
LABEL_15:
  }
    CFRelease(v13);
LABEL_16:
  int v14 = v24;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  *(void *)a1 = &unk_1EFB0E730;
  unint64_t v15 = (capabilities::diag *)capabilities::diag::interfaceAfterBoot((capabilities::diag *)v13);
  *(_DWORD *)(a1 + 176) = v15;
  *(_DWORD *)(a1 + 180) = capabilities::diag::preferredInterface(v15);
  return a1;
}

void sub_1A61996F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1A6199710(_Unwind_Exception *a1)
{
  diag::DIAGConfigurer::~DIAGConfigurer(v1);
  _Unwind_Resume(a1);
}

void diag::DIAGConfigurerUSB::~DIAGConfigurerUSB(diag::DIAGConfigurerUSB *this)
{
  diag::DIAGConfigurer::~DIAGConfigurer(this);

  operator delete(v1);
}

void diag::DIAGConfigurerUSB::reset(diag::DIAGConfigurerUSB *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN4diag17DIAGConfigurerUSB5resetEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_11;
  v3[4] = this;
  uint64_t v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke_1;
  block[3] = &__block_descriptor_tmp_20_0;
  block[4] = (char *)this + 72;
  block[5] = &v4;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ___ZN4diag17DIAGConfigurerUSB5resetEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A609F000, v2, OS_LOG_TYPE_DEFAULT, "#I Resetting DIAG configuration", buf, 2u);
  }
  uint64_t v3 = (capabilities::diag *)BasebandTransport::close(*(BasebandTransport **)(v1 + 120));
  *(_DWORD *)(v1 + 176) = capabilities::diag::interfaceAfterBoot(v3);
  if ((*(_DWORD *)(v1 + 104) - 1) <= 1)
  {
    TelephonyBasebandEnableModemVBUS();
    TelephonyBasebandEnableModemMux();
    uint64_t v4 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEFAULT, "#I Mux Off", v5, 2u);
    }
  }
}

void diag::DIAGConfigurerUSB::starting(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (uint64_t v8 = std::__shared_weak_count::lock(v4)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  v12[2] = ___ZN4diag17DIAGConfigurerUSB8startingEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v12[3] = &__block_descriptor_tmp_9_5;
  v12[4] = a1;
  uint64_t v10 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v10 = _Block_copy(v10);
  }
  uint64_t v11 = *(NSObject **)(a2 + 8);
  aBlock = v10;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  uint64_t v15 = v6;
  uint64_t v16 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped(v5, (uint64_t)v12);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void ___ZN4diag17DIAGConfigurerUSB8startingEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(v2 + 136);
  if (v3)
  {
    uint64_t block = 0;
    p_uint64_t block = (uint64_t)&block;
    uint64_t v41 = 0x2000000000;
    LOBYTE(v42) = 0;
    unsigned int v4 = *(_DWORD *)(v2 + 104);
    if (v4 <= 4)
    {
      if (((1 << v4) & 0x13) != 0)
      {
        *(_DWORD *)(v2 + 152) = *(_DWORD *)(v2 + 180);
        *(unsigned char *)(v2 + 164) = 1;
        uint64_t v5 = *(void *)(v2 + 152);
        uint64_t v6 = *(void *)(v2 + 160);
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN4diag17DIAGConfigurerUSB8startingEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2;
        aBlock[3] = &unk_1EFB0E7C8;
        uint64_t v8 = a1[7];
        long long v7 = (std::__shared_weak_count *)a1[8];
        aBlock[5] = v2;
        void aBlock[6] = v8;
        xpc_object_t v34 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        aBlock[4] = &block;
        uint64_t v9 = (void *)a1[5];
        if (v9) {
          uint64_t v9 = _Block_copy(v9);
        }
        uint64_t v10 = a1[6];
        std::string::size_type v35 = v9;
        dispatch_object_t object = v10;
        if (v10) {
          dispatch_retain(v10);
        }
        uint64_t v11 = _Block_copy(aBlock);
        std::string::size_type v12 = *(NSObject **)(v2 + 88);
        if (v12) {
          dispatch_retain(v12);
        }
        uint64_t v37 = v11;
        dispatch_object_t v38 = v12;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, const void **))(*(void *)v3 + 48))(v3, 65, v5, v6, &v37);
        if (v38) {
          dispatch_release(v38);
        }
        if (v37) {
          _Block_release(v37);
        }
        if (object) {
          dispatch_release(object);
        }
        if (v35) {
          _Block_release(v35);
        }
        BOOL v13 = v34;
        if (!v34) {
          goto LABEL_22;
        }
      }
      else
      {
        if (v4 == 2) {
          int v16 = 2;
        }
        else {
          int v16 = 4;
        }
        *(_DWORD *)(v2 + 152) = v16;
        uint64_t v17 = *(void *)(v2 + 152);
        uint64_t v18 = *(void *)(v2 + 160);
        v27[0] = MEMORY[0x1E4F143A8];
        v27[1] = 1174405120;
        v27[2] = ___ZN4diag17DIAGConfigurerUSB8startingEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_5;
        v27[3] = &unk_1EFB0E800;
        uint64_t v20 = a1[7];
        uint64_t v19 = (std::__shared_weak_count *)a1[8];
        v27[5] = v2;
        v27[6] = v20;
        std::runtime_error v28 = v19;
        if (v19) {
          atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint8_t v27[4] = &block;
        uint64_t v21 = (void *)a1[5];
        if (v21) {
          uint64_t v21 = _Block_copy(v21);
        }
        std::string v22 = a1[6];
        uint64_t v29 = v21;
        dispatch_object_t v30 = v22;
        if (v22) {
          dispatch_retain(v22);
        }
        uint64_t v23 = _Block_copy(v27);
        std::string v24 = *(NSObject **)(v2 + 88);
        if (v24) {
          dispatch_retain(v24);
        }
        uint64_t v31 = v23;
        dispatch_object_t v32 = v24;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v3 + 48))(v3, 1, v17, v18, &v31);
        if (v32) {
          dispatch_release(v32);
        }
        if (v31) {
          _Block_release(v31);
        }
        if (v30) {
          dispatch_release(v30);
        }
        if (v29) {
          _Block_release(v29);
        }
        BOOL v13 = v28;
        if (!v28) {
          goto LABEL_22;
        }
      }
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_22:
    _Block_object_dispose(&block, 8);
    return;
  }
  int v14 = (const void *)a1[5];
  if (v14) {
    uint64_t v15 = _Block_copy(v14);
  }
  else {
    uint64_t v15 = 0;
  }
  __int16 v25 = a1[6];
  uint64_t block = MEMORY[0x1E4F143A8];
  p_uint64_t block = 1174405120;
  uint64_t v41 = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
  long long v42 = &__block_descriptor_tmp_22_1;
  if (v15) {
    uint64_t v26 = _Block_copy(v15);
  }
  else {
    uint64_t v26 = 0;
  }
  uint64_t v43 = v26;
  char v44 = 0;
  dispatch_async(v25, &block);
  if (v43) {
    _Block_release(v43);
  }
  if (v15) {
    _Block_release(v15);
  }
}

void sub_1A6199E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)&a19);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v28);
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Unwind_Resume(a1);
}

void ___ZN4diag17DIAGConfigurerUSB8startingEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2(void *a1, char a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
  {
    uint64_t v5 = a1[5];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v31 = v6;
    if (v6)
    {
      long long v7 = v6;
      if (a1[6])
      {
        *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = a2;
        if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
        {
          *(_DWORD *)(v5 + 176) = *(_DWORD *)(v5 + 152);
          if (*(_DWORD *)(v5 + 104) == 4)
          {
            uint64_t v8 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEFAULT, "#I Releasing transport", buf, 2u);
            }
            *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = BasebandTransport::close(*(BasebandTransport **)(v5 + 120));
          }
          else
          {
            uint64_t v9 = *(void *)(v5 + 120);
            int v23 = 2;
            char v24 = 0;
            uint64_t v25 = 10;
            shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)v6);
            if (shouldUseMinBasebandTransportIOReadSize) {
              int v11 = 0x4000;
            }
            else {
              int v11 = 0x8000;
            }
            int v26 = v11;
            if (capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize)) {
              int v12 = 4;
            }
            else {
              int v12 = 16;
            }
            int v27 = v12;
            uint64_t v28 = 0;
            char v29 = 0;
            aBlock = 0;
            *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = (*(uint64_t (**)(uint64_t, int *, void **))(*(void *)v9 + 48))(v9, &v23, &aBlock);
            if (aBlock) {
              _Block_release(aBlock);
            }
          }
        }
        BOOL v13 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = *(int *)(v5 + 104);
          if (v14 > 4) {
            uint64_t v15 = "Unknown";
          }
          else {
            uint64_t v15 = off_1E5C48570[v14];
          }
          int v16 = *(unsigned __int8 *)(*(void *)(a1[4] + 8) + 24);
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v15;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v16;
          _os_log_impl(&dword_1A609F000, v13, OS_LOG_TYPE_DEFAULT, "#I Starting %s, success = %d", buf, 0x12u);
        }
        char v17 = *(unsigned char *)(*(void *)(a1[4] + 8) + 24);
        uint64_t v18 = (const void *)a1[8];
        if (v18) {
          uint64_t v19 = _Block_copy(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = a1[9];
        *(void *)long long buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 1174405120;
        *(void *)&uint8_t buf[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
        uint64_t v33 = &__block_descriptor_tmp_22_1;
        if (v19) {
          uint64_t v21 = _Block_copy(v19);
        }
        else {
          uint64_t v21 = 0;
        }
        xpc_object_t v34 = v21;
        char v35 = v17;
        dispatch_async(v20, buf);
        if (v34) {
          _Block_release(v34);
        }
        if (v19) {
          _Block_release(v19);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1A619A190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_48c46_ZTSNSt3__18weak_ptrIN4diag14DIAGConfigurerEEE64c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[7];
  a1[6] = a2[6];
  a1[7] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[8];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  uint64_t v6 = a2[9];
  a1[8] = v5;
  a1[9] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_48c46_ZTSNSt3__18weak_ptrIN4diag14DIAGConfigurerEEE64c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(void *a1)
{
  uint64_t v2 = a1[9];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[8];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZN4diag17DIAGConfigurerUSB8startingEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_5(void *a1, char a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
  {
    uint64_t v5 = a1[5];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      long long v7 = v6;
      if (a1[6])
      {
        *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = a2;
        if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24)) {
          *(_DWORD *)(v5 + 176) = *(_DWORD *)(v5 + 152);
        }
        uint64_t v8 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = *(int *)(v5 + 104);
          if (v9 > 4) {
            uint64_t v10 = "Unknown";
          }
          else {
            uint64_t v10 = off_1E5C48570[v9];
          }
          int v11 = *(unsigned __int8 *)(*(void *)(a1[4] + 8) + 24);
          *(_DWORD *)char v17 = 136315394;
          *(void *)&v17[4] = v10;
          *(_WORD *)&v17[12] = 1024;
          *(_DWORD *)&v17[14] = v11;
          _os_log_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEFAULT, "#I Starting %s, success = %d", v17, 0x12u);
        }
        char v12 = *(unsigned char *)(*(void *)(a1[4] + 8) + 24);
        BOOL v13 = (const void *)a1[8];
        if (v13) {
          uint64_t v14 = _Block_copy(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = a1[9];
        *(void *)char v17 = MEMORY[0x1E4F143A8];
        *(void *)&v17[8] = 1174405120;
        *(void *)&v17[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
        uint64_t v18 = &__block_descriptor_tmp_22_1;
        if (v14) {
          int v16 = _Block_copy(v14);
        }
        else {
          int v16 = 0;
        }
        aBlock = v16;
        char v20 = v12;
        dispatch_async(v15, v17);
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v14) {
          _Block_release(v14);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1A619A4C8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void diag::DIAGConfigurerUSB::started(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (uint64_t v8 = std::__shared_weak_count::lock(v4)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  v12[2] = ___ZN4diag17DIAGConfigurerUSB7startedEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v12[3] = &__block_descriptor_tmp_15_2;
  v12[4] = a1;
  uint64_t v10 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v10 = _Block_copy(v10);
  }
  int v11 = *(NSObject **)(a2 + 8);
  aBlock = v10;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  uint64_t v15 = v6;
  int v16 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped(v5, (uint64_t)v12);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void ___ZN4diag17DIAGConfigurerUSB7startedEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(void *a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(v2 + 136);
  if (v3)
  {
    uint64_t v34 = 0;
    char v35 = &v34;
    uint64_t v36 = 0x2000000000;
    char v37 = 0;
    switch(*(_DWORD *)(v2 + 104))
    {
      case 0:
      case 1:
      case 4:
        *(_DWORD *)(v2 + 156) = 1;
        uint64_t v4 = *(void *)(v2 + 152);
        uint64_t v5 = *(void *)(v2 + 160);
        v28[0] = MEMORY[0x1E4F143A8];
        v28[1] = 1174405120;
        void v28[2] = ___ZN4diag17DIAGConfigurerUSB7startedEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2;
        v28[3] = &unk_1EFB0E868;
        uint64_t v7 = a1[7];
        uint64_t v6 = (std::__shared_weak_count *)a1[8];
        v28[5] = v2;
        v28[6] = v7;
        char v29 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        v28[4] = &v34;
        uint64_t v8 = (void *)a1[5];
        if (v8) {
          uint64_t v8 = _Block_copy(v8);
        }
        uint64_t v9 = a1[6];
        dispatch_object_t v30 = v8;
        dispatch_object_t v31 = v9;
        if (v9) {
          dispatch_retain(v9);
        }
        uint64_t v10 = _Block_copy(v28);
        int v11 = *(NSObject **)(v2 + 88);
        if (v11) {
          dispatch_retain(v11);
        }
        aBlock = v10;
        dispatch_object_t object = v11;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v3 + 48))(v3, 4, v4, v5, &aBlock);
        if (object) {
          dispatch_release(object);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v31) {
          dispatch_release(v31);
        }
        if (v30) {
          _Block_release(v30);
        }
        if (v29) {
          std::__shared_weak_count::__release_weak(v29);
        }
        goto LABEL_59;
      case 2:
        *((unsigned char *)v35 + 24) = TelephonyBasebandEnableModemMux();
        usleep(0x186A0u);
        if (*((unsigned char *)v35 + 24))
        {
          int v16 = TelephonyBasebandEnableModemVBUS();
          *((unsigned char *)v35 + 24) = v16;
          char v17 = *(NSObject **)(v2 + 40);
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_49;
          }
        }
        else
        {
          int v16 = 0;
          *((unsigned char *)v35 + 24) = 0;
          char v17 = *(NSObject **)(v2 + 40);
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
LABEL_49:
            char v24 = (const void *)a1[5];
            if (v24) {
              uint64_t v25 = _Block_copy(v24);
            }
            else {
              uint64_t v25 = 0;
            }
            int v26 = a1[6];
            *(void *)uint64_t block = MEMORY[0x1E4F143A8];
            *(void *)&block[8] = 1174405120;
            *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
            xpc_object_t v39 = &__block_descriptor_tmp_22_1;
            if (v25) {
              int v27 = _Block_copy(v25);
            }
            else {
              int v27 = 0;
            }
            int v40 = v27;
            char v41 = v16;
            dispatch_async(v26, block);
            if (v40) {
              _Block_release(v40);
            }
            if (v25) {
              _Block_release(v25);
            }
LABEL_59:
            _Block_object_dispose(&v34, 8);
            return;
          }
        }
        uint64_t v22 = *(int *)(v2 + 104);
        if (v22 > 4) {
          int v23 = "Unknown";
        }
        else {
          int v23 = off_1E5C48570[v22];
        }
        *(_DWORD *)uint64_t block = 136315394;
        *(void *)&block[4] = v23;
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = v16;
        _os_log_impl(&dword_1A609F000, v17, OS_LOG_TYPE_DEFAULT, "#I Started %s, success = %d", block, 0x12u);
        LOBYTE(v16) = *((unsigned char *)v35 + 24);
        goto LABEL_49;
      case 3:
        uint64_t v18 = (const void *)a1[5];
        if (v18) {
          uint64_t v19 = _Block_copy(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        char v20 = a1[6];
        *(void *)uint64_t block = MEMORY[0x1E4F143A8];
        *(void *)&block[8] = 1174405120;
        *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
        xpc_object_t v39 = &__block_descriptor_tmp_22_1;
        if (v19) {
          uint64_t v21 = _Block_copy(v19);
        }
        else {
          uint64_t v21 = 0;
        }
        int v40 = v21;
        char v41 = 0;
        dispatch_async(v20, block);
        if (v40) {
          _Block_release(v40);
        }
        if (v19) {
          _Block_release(v19);
        }
        goto LABEL_59;
      default:
        goto LABEL_59;
    }
  }
  char v12 = (const void *)a1[5];
  if (v12) {
    BOOL v13 = _Block_copy(v12);
  }
  else {
    BOOL v13 = 0;
  }
  uint64_t v14 = a1[6];
  *(void *)uint64_t block = MEMORY[0x1E4F143A8];
  *(void *)&block[8] = 1174405120;
  *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
  xpc_object_t v39 = &__block_descriptor_tmp_22_1;
  if (v13) {
    uint64_t v15 = _Block_copy(v13);
  }
  else {
    uint64_t v15 = 0;
  }
  int v40 = v15;
  char v41 = 0;
  dispatch_async(v14, block);
  if (v40) {
    _Block_release(v40);
  }
  if (v13) {
    _Block_release(v13);
  }
}

void sub_1A619AB0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4diag17DIAGConfigurerUSB7startedEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2(void *a1, char a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
  {
    uint64_t v5 = a1[5];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[6])
      {
        *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = a2;
        uint64_t v8 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = *(int *)(v5 + 104);
          if (v9 > 4) {
            uint64_t v10 = "Unknown";
          }
          else {
            uint64_t v10 = off_1E5C48570[v9];
          }
          int v11 = *(unsigned __int8 *)(*(void *)(a1[4] + 8) + 24);
          *(_DWORD *)char v17 = 136315394;
          *(void *)&v17[4] = v10;
          *(_WORD *)&v17[12] = 1024;
          *(_DWORD *)&v17[14] = v11;
          _os_log_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEFAULT, "#I Started %s, success = %d", v17, 0x12u);
        }
        char v12 = *(unsigned char *)(*(void *)(a1[4] + 8) + 24);
        BOOL v13 = (const void *)a1[8];
        if (v13) {
          uint64_t v14 = _Block_copy(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = a1[9];
        *(void *)char v17 = MEMORY[0x1E4F143A8];
        *(void *)&v17[8] = 1174405120;
        *(void *)&v17[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
        uint64_t v18 = &__block_descriptor_tmp_22_1;
        if (v14) {
          int v16 = _Block_copy(v14);
        }
        else {
          int v16 = 0;
        }
        aBlock = v16;
        char v20 = v12;
        dispatch_async(v15, v17);
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v14) {
          _Block_release(v14);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1A619ADB0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void diag::DIAGConfigurerUSB::stopping(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN4diag17DIAGConfigurerUSB8stoppingEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_16_4;
  v7[4] = a1;
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = (uint64_t *)(a1 + 72);
  uint64_t v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN4diag17DIAGConfigurerUSB8stoppingEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(capabilities::abs *a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)a1 + 4);
  switch(*(_DWORD *)(v1 + 104))
  {
    case 0:
      uint64_t v10 = *(void *)(v1 + 120);
      int v30 = 2;
      char v31 = 0;
      uint64_t v32 = 10;
      shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(a1);
      if (shouldUseMinBasebandTransportIOReadSize) {
        int v12 = 0x4000;
      }
      else {
        int v12 = 0x8000;
      }
      int v33 = v12;
      if (capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize)) {
        int v13 = 4;
      }
      else {
        int v13 = 16;
      }
      int v34 = v13;
      uint64_t v35 = 0;
      char v36 = 0;
      aBlock = 0;
      int v9 = (*(uint64_t (**)(uint64_t, int *, void **))(*(void *)v10 + 48))(v10, &v30, &aBlock);
      if (aBlock) {
        _Block_release(aBlock);
      }
      goto LABEL_17;
    case 1:
    case 2:
      int v3 = TelephonyBasebandEnableModemVBUS();
      usleep(0x186A0u);
      int v4 = 0;
      if (!v3)
      {
        uint64_t v5 = *(NSObject **)(v1 + 40);
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_4;
        }
LABEL_23:
        uint64_t v19 = *(int *)(v1 + 104);
        if (v19 > 4) {
          char v20 = "Unknown";
        }
        else {
          char v20 = off_1E5C48570[v19];
        }
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v4;
        _os_log_impl(&dword_1A609F000, v5, OS_LOG_TYPE_DEFAULT, "#I Stopping %s, success = %d", buf, 0x12u);
        uint64_t v6 = (const void *)*((void *)a1 + 5);
        if (v6) {
          goto LABEL_5;
        }
        goto LABEL_27;
      }
      int v4 = TelephonyBasebandEnableModemMux();
      uint64_t v5 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_23;
      }
LABEL_4:
      uint64_t v6 = (const void *)*((void *)a1 + 5);
      if (v6)
      {
LABEL_5:
        uint64_t v7 = _Block_copy(v6);
        goto LABEL_28;
      }
LABEL_27:
      uint64_t v7 = 0;
LABEL_28:
      uint64_t v21 = *((void *)a1 + 6);
      *(void *)long long buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 1174405120;
      *(void *)&uint8_t buf[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
      dispatch_object_t v38 = &__block_descriptor_tmp_22_1;
      if (v7) {
        uint64_t v22 = _Block_copy(v7);
      }
      else {
        uint64_t v22 = 0;
      }
      xpc_object_t v39 = v22;
      char v40 = v4;
      dispatch_async(v21, buf);
      if (v39) {
        _Block_release(v39);
      }
      if (v7) {
        _Block_release(v7);
      }
      return;
    case 3:
      char v17 = (const void *)*((void *)a1 + 5);
      if (v17) {
        uint64_t v18 = _Block_copy(v17);
      }
      else {
        uint64_t v18 = 0;
      }
      int v27 = *((void *)a1 + 6);
      *(void *)long long buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 1174405120;
      *(void *)&uint8_t buf[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
      dispatch_object_t v38 = &__block_descriptor_tmp_22_1;
      if (v18) {
        uint64_t v28 = _Block_copy(v18);
      }
      else {
        uint64_t v28 = 0;
      }
      xpc_object_t v39 = v28;
      char v40 = 0;
      dispatch_async(v27, buf);
      if (v39) {
        _Block_release(v39);
      }
      if (v18) {
        _Block_release(v18);
      }
      return;
    case 4:
      uint64_t v8 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEFAULT, "#I Releasing transport", buf, 2u);
      }
      int v9 = BasebandTransport::close(*(BasebandTransport **)(v1 + 120));
LABEL_17:
      uint64_t v14 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = *(int *)(v1 + 104);
        if (v15 > 4) {
          int v16 = "Unknown";
        }
        else {
          int v16 = off_1E5C48570[v15];
        }
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v9;
        _os_log_impl(&dword_1A609F000, v14, OS_LOG_TYPE_DEFAULT, "#I Stopping %s, success = %d", buf, 0x12u);
      }
      int v23 = (const void *)*((void *)a1 + 5);
      if (v23) {
        char v24 = _Block_copy(v23);
      }
      else {
        char v24 = 0;
      }
      uint64_t v25 = *((void *)a1 + 6);
      *(void *)long long buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 1174405120;
      *(void *)&uint8_t buf[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
      dispatch_object_t v38 = &__block_descriptor_tmp_22_1;
      if (v24) {
        int v26 = _Block_copy(v24);
      }
      else {
        int v26 = 0;
      }
      xpc_object_t v39 = v26;
      char v40 = v9;
      dispatch_async(v25, buf);
      if (v39) {
        _Block_release(v39);
      }
      if (v24) {
        _Block_release(v24);
      }
      return;
    default:
      return;
  }
}

void sub_1A619B328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void diag::DIAGConfigurerUSB::stopped(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN4diag17DIAGConfigurerUSB7stoppedEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_19_2;
  v7[4] = a1;
  int v4 = *(void **)a2;
  if (*(void *)a2) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = (uint64_t *)(a1 + 72);
  uint64_t v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN4diag17DIAGConfigurerUSB7stoppedEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(void *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1[4];
  switch(*(_DWORD *)(v1 + 104))
  {
    case 0:
    case 4:
      *(_DWORD *)(v1 + 156) = 1;
      int v3 = BasebandTransport::close(*(BasebandTransport **)(v1 + 120));
      int v4 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(int *)(v1 + 104);
        if (v5 > 4) {
          uint64_t v6 = "Unknown";
        }
        else {
          uint64_t v6 = off_1E5C48570[v5];
        }
        *(_DWORD *)int v26 = 136315394;
        *(void *)&v26[4] = v6;
        *(_WORD *)&v26[12] = 1024;
        *(_DWORD *)&v26[14] = v3;
        _os_log_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEFAULT, "#I Stopped %s, success = %d", v26, 0x12u);
      }
      int v16 = (const void *)a1[5];
      if (v16) {
        char v17 = _Block_copy(v16);
      }
      else {
        char v17 = 0;
      }
      uint64_t v18 = a1[6];
      *(void *)int v26 = MEMORY[0x1E4F143A8];
      *(void *)&v26[8] = 1174405120;
      *(void *)&v26[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
      int v27 = &__block_descriptor_tmp_22_1;
      if (v17) {
        uint64_t v19 = _Block_copy(v17);
      }
      else {
        uint64_t v19 = 0;
      }
      aBlock = v19;
      char v29 = v3;
      dispatch_async(v18, v26);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v17) {
        goto LABEL_49;
      }
      break;
    case 1:
    case 2:
      int v7 = TelephonyBasebandEnableModemVBUS();
      usleep(0x186A0u);
      int v8 = 0;
      if (v7)
      {
        int v8 = 0;
        if (TelephonyBasebandEnableModemMux()) {
          int v8 = BasebandTransport::close(*(BasebandTransport **)(v1 + 120));
        }
      }
      int v9 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(int *)(v1 + 104);
        if (v10 > 4) {
          int v11 = "Unknown";
        }
        else {
          int v11 = off_1E5C48570[v10];
        }
        *(_DWORD *)int v26 = 136315394;
        *(void *)&v26[4] = v11;
        *(_WORD *)&v26[12] = 1024;
        *(_DWORD *)&v26[14] = v8;
        _os_log_impl(&dword_1A609F000, v9, OS_LOG_TYPE_DEFAULT, "#I Stopped %s, success = %d", v26, 0x12u);
      }
      char v20 = (const void *)a1[5];
      if (v20) {
        char v17 = _Block_copy(v20);
      }
      else {
        char v17 = 0;
      }
      uint64_t v21 = a1[6];
      *(void *)int v26 = MEMORY[0x1E4F143A8];
      *(void *)&v26[8] = 1174405120;
      *(void *)&v26[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
      int v27 = &__block_descriptor_tmp_22_1;
      if (v17) {
        uint64_t v22 = _Block_copy(v17);
      }
      else {
        uint64_t v22 = 0;
      }
      aBlock = v22;
      char v29 = v8;
      dispatch_async(v21, v26);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v17) {
        goto LABEL_49;
      }
      break;
    case 3:
      int v12 = BasebandTransport::close(*(BasebandTransport **)(v1 + 120));
      int v13 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(int *)(v1 + 104);
        if (v14 > 4) {
          uint64_t v15 = "Unknown";
        }
        else {
          uint64_t v15 = off_1E5C48570[v14];
        }
        *(_DWORD *)int v26 = 136315394;
        *(void *)&v26[4] = v15;
        *(_WORD *)&v26[12] = 1024;
        *(_DWORD *)&v26[14] = v12;
        _os_log_impl(&dword_1A609F000, v13, OS_LOG_TYPE_DEFAULT, "#I Stopped %s, success = %d", v26, 0x12u);
      }
      int v23 = (const void *)a1[5];
      if (v23) {
        char v17 = _Block_copy(v23);
      }
      else {
        char v17 = 0;
      }
      char v24 = a1[6];
      *(void *)int v26 = MEMORY[0x1E4F143A8];
      *(void *)&v26[8] = 1174405120;
      *(void *)&v26[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
      int v27 = &__block_descriptor_tmp_22_1;
      if (v17) {
        uint64_t v25 = _Block_copy(v17);
      }
      else {
        uint64_t v25 = 0;
      }
      aBlock = v25;
      char v29 = v12;
      dispatch_async(v24, v26);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v17) {
LABEL_49:
      }
        _Block_release(v17);
      break;
    default:
      return;
  }
}

void sub_1A619B8A4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1A619B8EC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1A619B8E8);
  }
  JUMPOUT(0x1A619B8E0);
}

void sub_1A619B8F4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1A619B8E8);
  }
  JUMPOUT(0x1A619B8E0);
}

void *___ZNK3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke_1(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t _GLOBAL__sub_I_DIAGConfigurerUSB_cpp()
{
  uint64_t result = ETLDIAGLoggingGetDefaultView();
  dword_1EB5EEB3C = result;
  return result;
}

void *abm::BasebandTracingTask::getName(abm::BasebandTracingTask *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_21, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&_MergedGlobals_21))
  {
    return qword_1EB5EEB48;
  }
  unsigned int v3 = *((_DWORD *)this + 26) - 1;
  if (v3 > 9) {
    int v4 = "invalid";
  }
  else {
    int v4 = off_1E5C48660[v3];
  }
  std::string::basic_string[abi:ne180100]<0>(qword_1EB5EEB48, v4);
  __cxa_atexit(MEMORY[0x1E4FBA210], qword_1EB5EEB48, &dword_1A609F000);
  __cxa_guard_release(&_MergedGlobals_21);
  return qword_1EB5EEB48;
}

void sub_1A619BA20(_Unwind_Exception *a1)
{
}

uint64_t abm::BasebandTracingTask::BasebandTracingTask(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v18 = *a3;
  uint64_t v19 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v7 = (std::__shared_weak_count *)a4[1];
  uint64_t v16 = *a4;
  char v17 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  abm::HelperTask::HelperTask(a1, a2, &v18, &v16);
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  int v8 = v19;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)a1 = &unk_1EFB0E980;
  *(void *)(a1 + 136) = dispatch_group_create();
  dispatch_queue_t v9 = dispatch_queue_create("basebandtracing.pending", 0);
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = v9;
  *(void *)(a1 + 152) = a1 + 160;
  *(_DWORD *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 180) = 0;
  *(void *)(a1 + 184) = a1 + 184;
  *(void *)(a1 + 192) = a1 + 184;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 264) = *a3;
  uint64_t v10 = a3[1];
  *(void *)(a1 + 272) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  int v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v14 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::DispatchTimerService::create();
  int v12 = *(std::__shared_weak_count **)(a1 + 304);
  *(_OWORD *)(a1 + 296) = v15;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  abm::BasebandTracingTask::startTraceRunLoop_sync((abm::BasebandTracingTask *)a1);
  return a1;
}

void sub_1A619BCB4(_Unwind_Exception *a1)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v3 + 16);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v3);
  if (*(char *)(v1 + 247) < 0) {
    operator delete(*(void **)(v1 + 224));
  }
  dispatch::callback<void({block_pointer})(ResetInfo)>::~callback(v3 - 40);
  std::list<dispatch::group_session>::~list(v2);
  std::__tree<std::__value_type<std::string const,std::shared_ptr<Trace>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::shared_ptr<Trace>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::shared_ptr<Trace>>>>::destroy(*(void *)(v1 + 160));
  uint64_t v6 = *(NSObject **)(v1 + 144);
  if (v6)
  {
    dispatch_release(v6);
    int v7 = *(NSObject **)(v1 + 136);
    if (!v7)
    {
LABEL_5:
      abm::HelperTask::~HelperTask((abm::HelperTask *)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    int v7 = *(NSObject **)(v1 + 136);
    if (!v7) {
      goto LABEL_5;
    }
  }
  dispatch_release(v7);
  abm::HelperTask::~HelperTask((abm::HelperTask *)v1);
  _Unwind_Resume(a1);
}

void sub_1A619BD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, char a15)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::startTraceRunLoop_sync(abm::BasebandTracingTask *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A609F000, v2, OS_LOG_TYPE_DEFAULT, "#I Starting ABM Trace RunLoop", buf, 2u);
  }
  uint64_t v3 = dispatch_group_create();
  dispatch_group_enter(v3);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1174405120;
  v4[2] = ___ZN3abm19BasebandTracingTask22startTraceRunLoop_syncEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_28;
  v4[4] = this;
  dispatch_object_t object = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  pthread_create((pthread_t *)this + 36, 0, (void *(__cdecl *)(void *))abm::BasebandTracingTask::sServerTraceRunLoopMain, v4);
  dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  if (object) {
    dispatch_release(object);
  }
  if (v3) {
    dispatch_release(v3);
  }
}

void sub_1A619BE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  if (object)
  {
    dispatch_release(object);
    if (!v14) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  dispatch_release(v14);
  _Unwind_Resume(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(ResetInfo)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t *std::list<dispatch::group_session>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        int v7 = (uint64_t *)v3[1];
        uint64_t v6 = v3[2];
        if (v6)
        {
          dispatch_group_leave(v6);
          int v8 = v3[2];
          if (v8) {
            dispatch_release(v8);
          }
        }
        operator delete(v3);
        uint64_t v3 = v7;
      }
      while (v7 != a1);
    }
  }
  return a1;
}

uint64_t abm::BasebandTracingTask::sServerTraceRunLoopMain(void (**this)(abm::BasebandTracingTask *), void *a2)
{
  memset(&context, 0, sizeof(context));
  CFRunLoopSourceRef v3 = CFRunLoopSourceCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &context);
  if (v3)
  {
    uint64_t v4 = v3;
    Current = CFRunLoopGetCurrent();
    CFStringRef v6 = (const __CFString *)*MEMORY[0x1E4F1D418];
    CFRunLoopAddSource(Current, v4, (CFRunLoopMode)*MEMORY[0x1E4F1D418]);
    this[2]((abm::BasebandTracingTask *)this);
    while ((CFRunLoopRunInMode(v6, 1.79769313e308, 1u) - 1) > 1)
      ;
    int v7 = CFRunLoopGetCurrent();
    CFRunLoopRemoveSource(v7, v4, v6);
    CFRelease(v4);
    return 0;
  }
  dispatch_queue_t v9 = GetOsLogContext()[1];
  if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
    return 0;
  }
  *(_WORD *)uint64_t v10 = 0;
  _os_log_impl(&dword_1A609F000, v9, OS_LOG_TYPE_DEFAULT, "Failed to create dummySource for trace runloop", v10, 2u);
  return 0;
}

void ___ZN3abm19BasebandTracingTask22startTraceRunLoop_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  pthread_setname_np("ABM.Trace.RunLoop");
  *(void *)(v2 + 280) = CFRunLoopGetCurrent();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  CFRunLoopSourceRef v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I ABM Trace RunLoop Started", v4, 2u);
  }
}

void abm::BasebandTracingTask::stopTraceRunLoop_sync(abm::BasebandTracingTask *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v5[0]) = 0;
    _os_log_impl(&dword_1A609F000, v2, OS_LOG_TYPE_DEFAULT, "#I Stopping ABM Trace RunLoop", (uint8_t *)v5, 2u);
  }
  usleep(0x7A120u);
  CFRunLoopStop(*((CFRunLoopRef *)this + 35));
  *((void *)this + 35) = 0;
  int v3 = pthread_join(*((pthread_t *)this + 36), 0);
  *((void *)this + 36) = 0;
  uint64_t v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEFAULT, "#I Stopped ABM Trace RunLoop: %d", (uint8_t *)v5, 8u);
  }
}

void abm::BasebandTracingTask::init_sync(abm::BasebandTracingTask *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v136 = 0;
    v137 = 0;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v6) {
      goto LABEL_162;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v136 = 0;
    v137 = 0;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v6) {
      goto LABEL_162;
    }
  }
  int v7 = std::__shared_weak_count::lock(v6);
  v137 = v7;
  if (!v7) {
    goto LABEL_165;
  }
  uint64_t v136 = *((void *)this + 15);
  if (v136)
  {
    abm::BasebandTracingTask::createLogFolderPaths((abm::BasebandTracingTask *)v7);
    abm::BasebandTracingTask::removeDumpingFile_sync(this, -1);
    abm::BasebandTracingTask::addTraces(this);
    int v8 = *((void *)this + 5);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEFAULT, "#I Initializing", (uint8_t *)&buf, 2u);
    }
    dispatch_queue_t v9 = *((void *)this + 11);
    v135 = v9;
    if (v9) {
      dispatch_retain(v9);
    }
    uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 34);
    uint64_t v133 = *((void *)this + 33);
    v134 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ResetDetection::create(&v135, &v133, *((void *)this + 35), (uint64_t *)&buf);
    long long v11 = buf;
    long long buf = 0uLL;
    int v12 = (std::__shared_weak_count *)*((void *)this + 32);
    *(_OWORD *)((char *)this + 248) = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    int v13 = (std::__shared_weak_count *)*((void *)&buf + 1);
    if (*((void *)&buf + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v14 = v134;
    if (v134 && !atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    if (v135) {
      dispatch_release(v135);
    }
    uint64_t v15 = *((void *)this + 31);
    *(void *)&long long buf = MEMORY[0x1E4F143A8];
    *((void *)&buf + 1) = 0x40000000;
    v139 = ___ZN14ResetDetection5startEv_block_invoke;
    v140 = &__block_descriptor_tmp_3;
    uint64_t v141 = v15;
    ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)(v15 + 72), (uint64_t)&buf);
    uint64_t v16 = v136;
    v132[23] = 17;
    strcpy(v132, "CommandTraceStart");
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_7_4;
    aBlock[4] = this;
    aBlock[5] = v3;
    v130 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    char v17 = _Block_copy(aBlock);
    uint64_t v18 = *((void *)this + 11);
    if (v18) {
      dispatch_retain(*((dispatch_object_t *)this + 11));
    }
    v131[0] = v17;
    v131[1] = v18;
    abm::HelperServerInternal::setCommandHandler(v16, (uint64_t)v132, (uint64_t)v131);
    if (v18) {
      dispatch_release(v18);
    }
    if (v17) {
      _Block_release(v17);
    }
    uint64_t v19 = (char *)operator new(0x20uLL);
    v127 = v19;
    long long v128 = xmmword_1A61F71E0;
    strcpy(v19, "CommandTraceEnterLowPower");
    v124[0] = MEMORY[0x1E4F143A8];
    v124[1] = 1174405120;
    v124[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_8;
    v124[3] = &__block_descriptor_tmp_13_2;
    v124[4] = this;
    v124[5] = v3;
    v125 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    char v20 = _Block_copy(v124);
    uint64_t v21 = *((void *)this + 11);
    if (v21) {
      dispatch_retain(*((dispatch_object_t *)this + 11));
    }
    v126[0] = v20;
    v126[1] = v21;
    abm::HelperServerInternal::setCommandHandler(v16, (uint64_t)&v127, (uint64_t)v126);
    if (v21) {
      dispatch_release(v21);
    }
    if (v20) {
      _Block_release(v20);
    }
    operator delete(v19);
    uint64_t v22 = (char *)operator new(0x20uLL);
    v122 = v22;
    long long v123 = xmmword_1A61F6FD0;
    strcpy(v22, "CommandTraceExitLowPower");
    v119[0] = MEMORY[0x1E4F143A8];
    v119[1] = 1174405120;
    v119[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_14;
    v119[3] = &__block_descriptor_tmp_19_3;
    v119[4] = this;
    v119[5] = v3;
    v120 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    int v23 = _Block_copy(v119);
    char v24 = *((void *)this + 11);
    if (v24) {
      dispatch_retain(*((dispatch_object_t *)this + 11));
    }
    v121[0] = v23;
    v121[1] = v24;
    abm::HelperServerInternal::setCommandHandler(v16, (uint64_t)&v122, (uint64_t)v121);
    if (v24) {
      dispatch_release(v24);
    }
    if (v23) {
      _Block_release(v23);
    }
    operator delete(v22);
    v118[23] = 17;
    strcpy(v118, "CommandTraceFlush");
    v115[0] = MEMORY[0x1E4F143A8];
    v115[1] = 1174405120;
    v115[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_20;
    v115[3] = &__block_descriptor_tmp_25_2;
    v115[4] = this;
    v115[5] = v3;
    v116 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v25 = _Block_copy(v115);
    int v26 = *((void *)this + 11);
    if (v26) {
      dispatch_retain(*((dispatch_object_t *)this + 11));
    }
    v117[0] = v25;
    v117[1] = v26;
    abm::HelperServerInternal::setCommandHandler(v16, (uint64_t)v118, (uint64_t)v117);
    if (v26) {
      dispatch_release(v26);
    }
    if (v25) {
      _Block_release(v25);
    }
    v114[23] = 17;
    strcpy(v114, "CommandTraceAbort");
    v111[0] = MEMORY[0x1E4F143A8];
    v111[1] = 1174405120;
    v111[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_26;
    v111[3] = &__block_descriptor_tmp_33_2;
    v111[4] = this;
    v111[5] = v3;
    v112 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    int v27 = _Block_copy(v111);
    uint64_t v28 = *((void *)this + 11);
    if (v28) {
      dispatch_retain(*((dispatch_object_t *)this + 11));
    }
    v113[0] = v27;
    v113[1] = v28;
    abm::HelperServerInternal::setCommandHandler(v16, (uint64_t)v114, (uint64_t)v113);
    if (v28) {
      dispatch_release(v28);
    }
    if (v27) {
      _Block_release(v27);
    }
    v110[23] = 18;
    strcpy(v110, "CommandTraceReinit");
    v107[0] = MEMORY[0x1E4F143A8];
    v107[1] = 1174405120;
    v107[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_34;
    v107[3] = &__block_descriptor_tmp_44_0;
    v107[4] = this;
    v107[5] = v3;
    v108 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    char v29 = _Block_copy(v107);
    uint64_t v30 = *((void *)this + 11);
    if (v30) {
      dispatch_retain(*((dispatch_object_t *)this + 11));
    }
    v109[0] = v29;
    v109[1] = v30;
    abm::HelperServerInternal::setCommandHandler(v16, (uint64_t)v110, (uint64_t)v109);
    if (v30) {
      dispatch_release(v30);
    }
    if (v29) {
      _Block_release(v29);
    }
    v106[23] = 20;
    strcpy(v106, "CommandTraceShutdown");
    v103[0] = MEMORY[0x1E4F143A8];
    v103[1] = 1174405120;
    v103[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_45;
    v103[3] = &__block_descriptor_tmp_58_0;
    v103[4] = this;
    v103[5] = v3;
    v104 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    char v31 = _Block_copy(v103);
    uint64_t v32 = *((void *)this + 11);
    if (v32) {
      dispatch_retain(*((dispatch_object_t *)this + 11));
    }
    v105[0] = v31;
    v105[1] = v32;
    abm::HelperServerInternal::setCommandHandler(v16, (uint64_t)v106, (uint64_t)v105);
    if (v32) {
      dispatch_release(v32);
    }
    if (v31) {
      _Block_release(v31);
    }
    v102[23] = 19;
    strcpy(v102, "CommandTracePrepare");
    v99[0] = MEMORY[0x1E4F143A8];
    v99[1] = 1174405120;
    v99[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_59;
    v99[3] = &__block_descriptor_tmp_66_0;
    v99[4] = this;
    v99[5] = v3;
    v100 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    int v33 = _Block_copy(v99);
    int v34 = *((void *)this + 11);
    if (v34) {
      dispatch_retain(*((dispatch_object_t *)this + 11));
    }
    v101[0] = v33;
    v101[1] = v34;
    abm::HelperServerInternal::setCommandHandler(v16, (uint64_t)v102, (uint64_t)v101);
    if (v34) {
      dispatch_release(v34);
    }
    if (v33) {
      _Block_release(v33);
    }
    v98[23] = 16;
    strcpy(v98, "CommandTraceStop");
    v95[0] = MEMORY[0x1E4F143A8];
    v95[1] = 1174405120;
    v95[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_67;
    v95[3] = &__block_descriptor_tmp_74;
    v95[4] = this;
    v95[5] = v3;
    v96 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v35 = _Block_copy(v95);
    char v36 = *((void *)this + 11);
    if (v36) {
      dispatch_retain(*((dispatch_object_t *)this + 11));
    }
    v97[0] = v35;
    v97[1] = v36;
    abm::HelperServerInternal::setCommandHandler(v16, (uint64_t)v98, (uint64_t)v97);
    if (v36) {
      dispatch_release(v36);
    }
    if (v35) {
      _Block_release(v35);
    }
    v94[23] = 18;
    strcpy(v94, "CommandCollectLogs");
    v91[0] = MEMORY[0x1E4F143A8];
    v91[1] = 1174405120;
    v91[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_75;
    v91[3] = &__block_descriptor_tmp_86;
    v91[4] = this;
    v91[5] = v3;
    v92 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    char v37 = _Block_copy(v91);
    dispatch_object_t v38 = *((void *)this + 11);
    if (v38) {
      dispatch_retain(*((dispatch_object_t *)this + 11));
    }
    v93[0] = v37;
    v93[1] = v38;
    abm::HelperServerInternal::setCommandHandler(v16, (uint64_t)v94, (uint64_t)v93);
    if (v38) {
      dispatch_release(v38);
    }
    if (v37) {
      _Block_release(v37);
    }
    xpc_object_t v39 = (char *)operator new(0x20uLL);
    v89 = v39;
    long long v90 = xmmword_1A61F8020;
    strcpy(v39, "CommandCollectBasebandLogs");
    v86[0] = MEMORY[0x1E4F143A8];
    v86[1] = 1174405120;
    v86[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_87;
    v86[3] = &__block_descriptor_tmp_92_0;
    v86[4] = this;
    v86[5] = v3;
    v87 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    char v40 = _Block_copy(v86);
    uint64_t v41 = *((void *)this + 11);
    if (v41) {
      dispatch_retain(*((dispatch_object_t *)this + 11));
    }
    v88[0] = v40;
    v88[1] = v41;
    abm::HelperServerInternal::setCommandHandler(v16, (uint64_t)&v89, (uint64_t)v88);
    if (v41) {
      dispatch_release(v41);
    }
    if (v40) {
      _Block_release(v40);
    }
    operator delete(v39);
    v85[23] = 16;
    strcpy(v85, "CommandDumpState");
    v82[0] = MEMORY[0x1E4F143A8];
    v82[1] = 1174405120;
    v82[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_93;
    v82[3] = &__block_descriptor_tmp_102;
    v82[4] = this;
    v82[5] = v3;
    v83 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v42 = _Block_copy(v82);
    uint64_t v43 = *((void *)this + 11);
    if (v43) {
      dispatch_retain(*((dispatch_object_t *)this + 11));
    }
    v84[0] = v42;
    v84[1] = v43;
    abm::HelperServerInternal::setCommandHandler(v16, (uint64_t)v85, (uint64_t)v84);
    if (v43) {
      dispatch_release(v43);
    }
    if (v42) {
      _Block_release(v42);
    }
    char v44 = (char *)operator new(0x20uLL);
    v80 = v44;
    long long v81 = xmmword_1A61F71E0;
    strcpy(v44, "CommandGetLastCrashReason");
    v77[0] = MEMORY[0x1E4F143A8];
    v77[1] = 1174405120;
    v77[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_103;
    v77[3] = &__block_descriptor_tmp_108;
    v77[4] = this;
    v77[5] = v3;
    v78 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v45 = _Block_copy(v77);
    xpc_object_t v46 = *((void *)this + 11);
    if (v46) {
      dispatch_retain(*((dispatch_object_t *)this + 11));
    }
    v79[0] = v45;
    v79[1] = v46;
    abm::HelperServerInternal::setCommandHandler(v16, (uint64_t)&v80, (uint64_t)v79);
    if (v46) {
      dispatch_release(v46);
    }
    if (v45) {
      _Block_release(v45);
    }
    operator delete(v44);
    v47 = (char *)operator new(0x20uLL);
    v75 = v47;
    long long v76 = xmmword_1A61F71E0;
    strcpy(v47, "CommandSetLastCrashReason");
    v71[0] = MEMORY[0x1E4F143A8];
    v71[1] = 1174405120;
    v71[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_109;
    v71[3] = &__block_descriptor_tmp_112;
    v71[4] = this;
    v71[5] = v3;
    v72 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v48 = _Block_copy(v71);
    std::string v49 = *((void *)this + 11);
    if (v49) {
      dispatch_retain(*((dispatch_object_t *)this + 11));
    }
    v73 = v48;
    dispatch_object_t object = v49;
    abm::HelperServerInternal::setCommandHandler(v16, (uint64_t)&v75, (uint64_t)&v73);
    if (object) {
      dispatch_release(object);
    }
    if (v73) {
      _Block_release(v73);
    }
    operator delete(v47);
    v70[23] = 18;
    strcpy(v70, "CommandSetProperty");
    v67[0] = MEMORY[0x1E4F143A8];
    v67[1] = 1174405120;
    v67[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_113;
    v67[3] = &__block_descriptor_tmp_120;
    v67[4] = this;
    v67[5] = v3;
    v68 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v50 = _Block_copy(v67);
    v51 = *((void *)this + 11);
    if (v51) {
      dispatch_retain(*((dispatch_object_t *)this + 11));
    }
    v69[0] = v50;
    v69[1] = v51;
    abm::HelperServerInternal::setCommandHandler(v16, (uint64_t)v70, (uint64_t)v69);
    if (v51) {
      dispatch_release(v51);
    }
    if (v50) {
      _Block_release(v50);
    }
    v66[23] = 18;
    strcpy(v66, "CommandGetProperty");
    v62[0] = MEMORY[0x1E4F143A8];
    v62[1] = 1174405120;
    v62[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_121;
    v62[3] = &__block_descriptor_tmp_124_0;
    v62[4] = this;
    v62[5] = v3;
    v63 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::string v52 = _Block_copy(v62);
    long long v53 = *((void *)this + 11);
    if (v53) {
      dispatch_retain(*((dispatch_object_t *)this + 11));
    }
    v64 = v52;
    dispatch_object_t v65 = v53;
    abm::HelperServerInternal::setCommandHandler(v16, (uint64_t)v66, (uint64_t)&v64);
    if (v65) {
      dispatch_release(v65);
    }
    if (v64) {
      _Block_release(v64);
    }
    v61[23] = 21;
    strcpy(v61, "CommandCheckReachable");
    v57[0] = MEMORY[0x1E4F143A8];
    v57[1] = 1174405120;
    v57[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_125;
    v57[3] = &__block_descriptor_tmp_128;
    v57[4] = this;
    v57[5] = v3;
    v58 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    unint64_t v54 = _Block_copy(v57);
    v55 = *((void *)this + 11);
    if (v55) {
      dispatch_retain(v55);
    }
    v59 = v54;
    dispatch_object_t v60 = v55;
    abm::HelperServerInternal::setCommandHandler(v16, (uint64_t)v61, (uint64_t)&v59);
    if (v60) {
      dispatch_release(v60);
    }
    if (v59) {
      _Block_release(v59);
    }
    if (v58) {
      std::__shared_weak_count::__release_weak(v58);
    }
    if (v63) {
      std::__shared_weak_count::__release_weak(v63);
    }
    if (v68) {
      std::__shared_weak_count::__release_weak(v68);
    }
    if (v72) {
      std::__shared_weak_count::__release_weak(v72);
    }
    if (v78) {
      std::__shared_weak_count::__release_weak(v78);
    }
    if (v83) {
      std::__shared_weak_count::__release_weak(v83);
    }
    if (v87) {
      std::__shared_weak_count::__release_weak(v87);
    }
    if (v92) {
      std::__shared_weak_count::__release_weak(v92);
    }
    if (v96) {
      std::__shared_weak_count::__release_weak(v96);
    }
    if (v100) {
      std::__shared_weak_count::__release_weak(v100);
    }
    if (v104) {
      std::__shared_weak_count::__release_weak(v104);
    }
    if (v108) {
      std::__shared_weak_count::__release_weak(v108);
    }
    if (v112) {
      std::__shared_weak_count::__release_weak(v112);
    }
    if (v116) {
      std::__shared_weak_count::__release_weak(v116);
    }
    if (v120) {
      std::__shared_weak_count::__release_weak(v120);
    }
    if (v125) {
      std::__shared_weak_count::__release_weak(v125);
    }
    if (v130) {
      std::__shared_weak_count::__release_weak(v130);
    }
  }
LABEL_162:
  unint64_t v56 = v137;
  if (v137 && !atomic_fetch_add(&v137->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
LABEL_165:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1A619D3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(int,xpc::dict)>)>::~callback((uint64_t)&a19);
  if (a18)
  {
    std::__shared_weak_count::__release_weak(a18);
    v69 = a30;
    if (!a30)
    {
LABEL_3:
      v70 = a42;
      if (!a42) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else
  {
    v69 = a30;
    if (!a30) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v69);
  v70 = a42;
  if (!a42)
  {
LABEL_4:
    v71 = a54;
    if (!a54) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  std::__shared_weak_count::__release_weak(v70);
  v71 = a54;
  if (!a54)
  {
LABEL_5:
    v72 = a66;
    if (!a66) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  std::__shared_weak_count::__release_weak(v71);
  v72 = a66;
  if (!a66)
  {
LABEL_6:
    v73 = (std::__shared_weak_count *)STACK[0x228];
    if (!STACK[0x228]) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  std::__shared_weak_count::__release_weak(v72);
  v73 = (std::__shared_weak_count *)STACK[0x228];
  if (!STACK[0x228])
  {
LABEL_7:
    v74 = (std::__shared_weak_count *)STACK[0x288];
    if (!STACK[0x288]) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  std::__shared_weak_count::__release_weak(v73);
  v74 = (std::__shared_weak_count *)STACK[0x288];
  if (!STACK[0x288])
  {
LABEL_8:
    v75 = (std::__shared_weak_count *)STACK[0x2E8];
    if (!STACK[0x2E8]) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  std::__shared_weak_count::__release_weak(v74);
  v75 = (std::__shared_weak_count *)STACK[0x2E8];
  if (!STACK[0x2E8])
  {
LABEL_9:
    long long v76 = (std::__shared_weak_count *)STACK[0x348];
    if (!STACK[0x348]) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  std::__shared_weak_count::__release_weak(v75);
  long long v76 = (std::__shared_weak_count *)STACK[0x348];
  if (!STACK[0x348])
  {
LABEL_10:
    v77 = (std::__shared_weak_count *)STACK[0x3A8];
    if (!STACK[0x3A8]) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  std::__shared_weak_count::__release_weak(v76);
  v77 = (std::__shared_weak_count *)STACK[0x3A8];
  if (!STACK[0x3A8])
  {
LABEL_11:
    v78 = (std::__shared_weak_count *)STACK[0x408];
    if (!STACK[0x408]) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  std::__shared_weak_count::__release_weak(v77);
  v78 = (std::__shared_weak_count *)STACK[0x408];
  if (!STACK[0x408])
  {
LABEL_12:
    v79 = (std::__shared_weak_count *)STACK[0x468];
    if (!STACK[0x468]) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  std::__shared_weak_count::__release_weak(v78);
  v79 = (std::__shared_weak_count *)STACK[0x468];
  if (!STACK[0x468])
  {
LABEL_13:
    v80 = (std::__shared_weak_count *)STACK[0x4C8];
    if (!STACK[0x4C8]) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  std::__shared_weak_count::__release_weak(v79);
  v80 = (std::__shared_weak_count *)STACK[0x4C8];
  if (!STACK[0x4C8])
  {
LABEL_14:
    long long v81 = (std::__shared_weak_count *)STACK[0x528];
    if (!STACK[0x528]) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  std::__shared_weak_count::__release_weak(v80);
  long long v81 = (std::__shared_weak_count *)STACK[0x528];
  if (!STACK[0x528])
  {
LABEL_15:
    v82 = (std::__shared_weak_count *)STACK[0x588];
    if (!STACK[0x588]) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_32:
  std::__shared_weak_count::__release_weak(v81);
  v82 = (std::__shared_weak_count *)STACK[0x588];
  if (!STACK[0x588])
  {
LABEL_16:
    v83 = (std::__shared_weak_count *)STACK[0x5E8];
    if (!STACK[0x5E8]) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }
LABEL_33:
  std::__shared_weak_count::__release_weak(v82);
  v83 = (std::__shared_weak_count *)STACK[0x5E8];
  if (!STACK[0x5E8])
  {
LABEL_17:
    v84 = (std::__shared_weak_count *)STACK[0x648];
    if (!STACK[0x648])
    {
LABEL_36:
      std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v67 - 160);
      std::__shared_weak_count::__release_weak(v66);
      _Unwind_Resume(a1);
    }
LABEL_35:
    std::__shared_weak_count::__release_weak(v84);
    std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v67 - 160);
    std::__shared_weak_count::__release_weak(v66);
    _Unwind_Resume(a1);
  }
LABEL_34:
  std::__shared_weak_count::__release_weak(v83);
  v84 = (std::__shared_weak_count *)STACK[0x648];
  if (!STACK[0x648]) {
    goto LABEL_36;
  }
  goto LABEL_35;
}

void abm::BasebandTracingTask::createLogFolderPaths(abm::BasebandTracingTask *this)
{
  uint64_t v1 = abm::trace::kSnapshotFolder[0];
  size_t v2 = strlen(abm::trace::kSnapshotFolder[0]);
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v3 = (void *)v2;
  if (v2 >= 0x17)
  {
    uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v5 = v2 | 7;
    }
    uint64_t v6 = v5 + 1;
    uint64_t v4 = (void **)operator new(v5 + 1);
    __dst[1] = v3;
    unint64_t v8 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v8) = v2;
  uint64_t v4 = __dst;
  if (v2) {
LABEL_8:
  }
    memmove(v4, v1, (size_t)v3);
  *((unsigned char *)v3 + (void)v4) = 0;
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v8) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1A619D900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void abm::BasebandTracingTask::removeDumpingFile_sync(abm::BasebandTracingTask *this, int a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x80000000) == 0)
  {
    while (close(a2) && *__error() == 4)
      ;
  }
  uint64_t v4 = abm::trace::kDumpIndicationFilePath;
  size_t v5 = strlen(abm::trace::kDumpIndicationFilePath);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    unint64_t v8 = operator new(v9 + 1);
    v15[1] = v7;
    int64_t v16 = v10 | 0x8000000000000000;
    v15[0] = v8;
    goto LABEL_11;
  }
  HIBYTE(v16) = v5;
  unint64_t v8 = v15;
  if (v5) {
LABEL_11:
  }
    memmove(v8, v4, v7);
  *((unsigned char *)v8 + v7) = 0;
  int v11 = SHIBYTE(v16);
  int v12 = (void *)v15[0];
  if (v16 >= 0) {
    int v13 = (const std::__fs::filesystem::path *)v15;
  }
  else {
    int v13 = (const std::__fs::filesystem::path *)v15[0];
  }
  if (remove(v13, v6)) {
    unlink((const char *)v13);
  }
  if ((v11 & 0x80000000) == 0)
  {
    uint64_t v14 = *((void *)this + 5);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
LABEL_21:
    LODWORD(v15[0]) = 67109120;
    HIDWORD(v15[0]) = a2;
    _os_log_impl(&dword_1A609F000, v14, OS_LOG_TYPE_DEFAULT, "#I Removed dumping file. FD=%d", (uint8_t *)v15, 8u);
    return;
  }
  operator delete(v12);
  uint64_t v14 = *((void *)this + 5);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_21;
  }
}

uint64_t abm::BasebandTracingTask::addTraces(abm::BasebandTracingTask *this)
{
  uint64_t v1 = this;
  char v2 = 0;
  uint64_t v3 = 0;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v50 = v4;
  uint64_t v51 = 0x3AAAAAAAAAAAAAALL;
  *(_OWORD *)&v52[8] = v4;
  uint64_t v57 = 0xDAAAAAAAAAAAAAALL;
  *(_OWORD *)&v54[8] = v4;
  __int16 v56 = -21846;
  *(void *)&v52[32] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v53 = 0x8AAAAAAAAAAAAAALL;
  LOWORD(v50[0]) = *(_WORD *)"IPC";
  WORD1(v50[0]) = str_42[2];
  strcpy(&v52[23], "\tCoreDump");
  strcpy(v52, "KernelPCI");
  v54[23] = 11;
  strcpy(v54, "BasebandIPC");
  char v40 = (uint64_t **)((char *)this + 160);
  strcpy(__p, "BasebandTrace");
  do
  {
LABEL_5:
    size_t v5 = &v50[3 * v3];
    memset(&v47, 170, sizeof(v47));
    if (*((char *)v5 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v47, (const std::string::value_type *)*v5, (std::string::size_type)v5[1]);
    }
    else {
      std::string v47 = *(std::string *)v5;
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v46, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
    }
    else {
      std::string v46 = v47;
    }
    int isSupported = abm::trace::isSupported((uint64_t)&v46);
    int v7 = isSupported;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v46.__r_.__value_.__l.__data_);
      if (!v7) {
        goto LABEL_3;
      }
    }
    else if (!isSupported)
    {
      goto LABEL_3;
    }
    unint64_t v8 = (std::__shared_weak_count *)*((void *)v1 + 10);
    if (!v8 || (v9 = *((void *)v1 + 9), (uint64_t v10 = std::__shared_weak_count::lock(v8)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    int v11 = v10;
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      int v12 = std::__shared_weak_count::lock(v10);
      if (!v12) {
        goto LABEL_60;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
      int v12 = std::__shared_weak_count::lock(v11);
      if (!v12)
      {
LABEL_60:
        unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
        unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        int v13 = *((void *)v1 + 14);
        dispatch_object_t object = v13;
        if (!v13) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
    }
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v42 = v9;
    uint64_t v43 = v12;
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    int v13 = *((void *)v1 + 14);
    dispatch_object_t object = v13;
    if (!v13) {
      goto LABEL_23;
    }
LABEL_22:
    dispatch_retain(v13);
LABEL_23:
    Trace::create((char *)&v47, &v42, &object, &v44);
    if (object) {
      dispatch_release(object);
    }
    if (v43) {
      std::__shared_weak_count::__release_weak(v43);
    }
    unint64_t v14 = v44;
    if (!v44) {
      goto LABEL_74;
    }
    uint64_t v15 = v40;
    int64_t v16 = *v40;
    uint64_t v17 = v40;
    if (!*v40)
    {
LABEL_55:
      char v29 = operator new(0x48uLL);
      uint64_t v30 = (std::string *)(v29 + 4);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v30, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
        v29[6] = *((void *)&v47.__r_.__value_.__l + 2);
      }
      v29[7] = 0;
      v29[8] = 0;
      *char v29 = 0;
      v29[1] = 0;
      v29[2] = v15;
      void *v17 = v29;
      uint64_t v1 = this;
      uint64_t v31 = **((void **)this + 19);
      uint64_t v32 = v29;
      if (v31)
      {
        *((void *)this + 19) = v31;
        uint64_t v32 = *v17;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 20), v32);
      ++*((void *)this + 21);
      unint64_t v14 = v44;
      unint64_t v33 = v45;
      if (v45) {
        goto LABEL_66;
      }
      goto LABEL_67;
    }
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v18 = &v47;
    }
    else {
      uint64_t v18 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v47.__r_.__value_.__l.__size_;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v15 = (uint64_t **)v16;
        uint64_t v22 = v16[4];
        char v20 = v16 + 4;
        uint64_t v21 = (void *)v22;
        int v23 = *((char *)v20 + 23);
        char v24 = v23 >= 0 ? v20 : v21;
        std::string::size_type v25 = v23 >= 0 ? *((unsigned __int8 *)v20 + 23) : v20[1];
        size_t v26 = v25 >= size ? size : v25;
        int v27 = memcmp(v18, v24, v26);
        if (v27) {
          break;
        }
        if (size >= v25) {
          goto LABEL_49;
        }
LABEL_35:
        int64_t v16 = *v15;
        uint64_t v17 = v15;
        if (!*v15) {
          goto LABEL_55;
        }
      }
      if (v27 < 0) {
        goto LABEL_35;
      }
LABEL_49:
      int v28 = memcmp(v24, v18, v26);
      if (!v28) {
        break;
      }
      if ((v28 & 0x80000000) == 0) {
        goto LABEL_82;
      }
LABEL_53:
      int64_t v16 = v15[1];
      if (!v16)
      {
        uint64_t v17 = v15 + 1;
        goto LABEL_55;
      }
    }
    if (v25 < size) {
      goto LABEL_53;
    }
LABEL_82:
    char v29 = v15;
    uint64_t v1 = this;
    unint64_t v33 = v45;
    if (!v45) {
      goto LABEL_67;
    }
LABEL_66:
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
LABEL_67:
    int v34 = (std::__shared_weak_count *)v29[8];
    v29[7] = v14;
    v29[8] = v33;
    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      uint64_t v35 = *((void *)v1 + 5);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
LABEL_70:
        char v36 = &v47;
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          char v36 = (std::string *)v47.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)long long buf = 136315138;
        std::string v49 = v36;
        _os_log_impl(&dword_1A609F000, v35, OS_LOG_TYPE_DEFAULT, "#I Adding trace '%s'", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v35 = *((void *)v1 + 5);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_70;
      }
    }
    char v2 = 1;
LABEL_74:
    char v37 = (std::__shared_weak_count *)v45;
    if (v45 && !atomic_fetch_add((atomic_ullong *volatile)(v45 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
      if (v12) {
LABEL_77:
      }
        std::__shared_weak_count::__release_weak(v12);
    }
    else if (v12)
    {
      goto LABEL_77;
    }
    std::__shared_weak_count::__release_weak(v11);
LABEL_3:
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (++v3 == 5) {
        break;
      }
      goto LABEL_5;
    }
    operator delete(v47.__r_.__value_.__l.__data_);
    ++v3;
  }
  while (v3 != 5);
  if (SHIBYTE(v57) < 0)
  {
    operator delete(*(void **)__p);
    if ((v54[23] & 0x80000000) != 0) {
      goto LABEL_91;
    }
LABEL_86:
    if ((SHIBYTE(v53) & 0x80000000) == 0) {
      goto LABEL_87;
    }
LABEL_92:
    operator delete(*(void **)&v52[24]);
    if ((v52[23] & 0x80000000) != 0) {
      goto LABEL_93;
    }
LABEL_88:
    if (SHIBYTE(v51) < 0) {
LABEL_94:
    }
      operator delete(v50[0]);
  }
  else
  {
    if ((v54[23] & 0x80000000) == 0) {
      goto LABEL_86;
    }
LABEL_91:
    operator delete(*(void **)v54);
    if (SHIBYTE(v53) < 0) {
      goto LABEL_92;
    }
LABEL_87:
    if ((v52[23] & 0x80000000) == 0) {
      goto LABEL_88;
    }
LABEL_93:
    operator delete(*(void **)v52);
    if (SHIBYTE(v51) < 0) {
      goto LABEL_94;
    }
  }
  return v2 & 1;
}

void sub_1A619E150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  operator delete(v63);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (v62) {
    std::__shared_weak_count::__release_weak(v62);
  }
  std::__shared_weak_count::__release_weak(v61);
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a61 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a55 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
  }
  else if ((a61 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a56);
  if ((a55 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a49 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a50);
  if ((a49 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a43 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a44);
  if ((a43 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a37 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a38);
  if ((a37 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_15:
  operator delete(a32);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke(void *a1, uint64_t a2, void **a3, uint64_t a4)
{
  size_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = std::__shared_weak_count::lock(v5);
    if (v9)
    {
      uint64_t v10 = v9;
      if (!a1[5])
      {
LABEL_25:
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        return;
      }
      int v11 = *(NSObject **)(v8 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1A609F000, v11, OS_LOG_TYPE_DEFAULT, "#I Request to start", buf, 2u);
      }
      int v12 = *(NSObject **)(v8 + 112);
      int v23 = v12;
      if (v12)
      {
        dispatch_retain(v12);
        dispatch_group_enter(v12);
      }
      if (*(void *)a4)
      {
        int v13 = _Block_copy(*(const void **)a4);
        unint64_t v14 = *(NSObject **)(a4 + 8);
        uint64_t v21 = v13;
        uint64_t v22 = v14;
        if (!v14)
        {
LABEL_11:
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_4;
          aBlock[3] = &__block_descriptor_tmp_5_5;
          uint64_t v15 = *a3;
          aBlock[4] = v8;
          xpc_object_t object = v15;
          if (v15) {
            xpc_retain(v15);
          }
          else {
            xpc_object_t object = xpc_null_create();
          }
          int64_t v16 = _Block_copy(aBlock);
          char v20 = v16;
          uint64_t v17 = 0;
          abm::BasebandTracingTask::performWork(v8, &v23, 4, (uint64_t)&v21, &v20, &v17);
          if (v16) {
            _Block_release(v16);
          }
          if (v14) {
            dispatch_release(v14);
          }
          if (v13) {
            _Block_release(v13);
          }
          if (v12)
          {
            dispatch_group_leave(v12);
            dispatch_release(v12);
          }
          xpc_release(object);
          xpc_object_t object = 0;
          goto LABEL_25;
        }
      }
      else
      {
        int v13 = 0;
        unint64_t v14 = *(NSObject **)(a4 + 8);
        uint64_t v21 = 0;
        uint64_t v22 = v14;
        if (!v14) {
          goto LABEL_11;
        }
      }
      dispatch_retain(v14);
      goto LABEL_11;
    }
  }
}

void abm::BasebandTracingTask::performWork(uint64_t a1, NSObject **a2, int a3, uint64_t a4, void **a5, void **a6)
{
  uint64_t v10 = *(NSObject **)(a1 + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN3abm19BasebandTracingTask11performWorkEN8dispatch13group_sessionENS0_5StateENS1_8callbackIU13block_pointerFviN3xpc4dictEEEENS1_5blockIU13block_pointerFvvEEESD__block_invoke;
  block[3] = &__block_descriptor_tmp_165;
  int v22 = a3;
  int v11 = *a2;
  block[4] = a1;
  dispatch_group_t group = v11;
  if (v11)
  {
    dispatch_retain(v11);
    dispatch_group_enter(group);
  }
  int v12 = *(void **)a4;
  if (*(void *)a4) {
    int v12 = _Block_copy(v12);
  }
  int v13 = *(NSObject **)(a4 + 8);
  uint64_t v18 = v12;
  dispatch_object_t object = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  unint64_t v14 = *a5;
  if (*a5) {
    unint64_t v14 = _Block_copy(v14);
  }
  char v20 = v14;
  uint64_t v15 = *a6;
  if (*a6) {
    uint64_t v15 = _Block_copy(v15);
  }
  aBlock = v15;
  dispatch_async(v10, block);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v20) {
    _Block_release(v20);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v18) {
    _Block_release(v18);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 136);
  uint64_t v10 = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  long long v4 = *(void **)(a1 + 40);
  xpc_object_t object = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::bridge();
  size_t v5 = cf;
  if (cf && (CFTypeID v6 = CFGetTypeID(cf), v6 == CFDictionaryGetTypeID()))
  {
    uint64_t v9 = cf;
    CFRetain(cf);
  }
  else
  {
    size_t v5 = 0;
    uint64_t v9 = 0;
  }
  abm::BasebandTracingTask::startInternal(v2, &v10, &v9);
  if (v5) {
    CFRelease(v5);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(object);
  if (v3) {
    dispatch_release(v3);
  }
}

void sub_1A619E710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, const void *a10, const void *a11)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(&a10);
  xpc_release(object);
  if (v11) {
    dispatch_release(v11);
  }
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::startInternal(uint64_t a1, NSObject **a2, const void **a3)
{
  CFTypeID v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEFAULT, "#I Starting all traces", buf, 2u);
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  v13[2] = ___ZN3abm19BasebandTracingTask13startInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_179;
  int v7 = *a2;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = *a3;
  CFTypeRef cf = v8;
  if (v8) {
    CFRetain(v8);
  }
  uint64_t v9 = *(void **)(a1 + 152);
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v17 = 0x40000000;
  uint64_t v18 = ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke;
  uint64_t v19 = &unk_1E5C48640;
  char v20 = v13;
  if (v9 != (void *)(a1 + 160))
  {
    do
    {
      v18((uint64_t)buf, (uint64_t)(v9 + 4));
      uint64_t v10 = (void *)v9[1];
      if (v10)
      {
        do
        {
          int v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          int v11 = (void *)v9[2];
          BOOL v12 = *v11 == (void)v9;
          uint64_t v9 = v11;
        }
        while (!v12);
      }
      uint64_t v9 = v11;
    }
    while (v11 != (void *)(a1 + 160));
  }
  if (cf) {
    CFRelease(cf);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_1A619E908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(v13);
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v5);
    if (v8)
    {
      uint64_t v9 = v8;
      if (!a1[5])
      {
LABEL_19:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      uint64_t v10 = *(NSObject **)(v7 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1A609F000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to sleep", buf, 2u);
      }
      int v11 = *(NSObject **)(v7 + 112);
      char v20 = v11;
      if (v11)
      {
        dispatch_retain(v11);
        dispatch_group_enter(v11);
      }
      if (*(void *)a4)
      {
        BOOL v12 = _Block_copy(*(const void **)a4);
        int v13 = *(NSObject **)(a4 + 8);
        uint64_t v18 = v12;
        uint64_t v19 = v13;
        if (!v13)
        {
LABEL_11:
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 0x40000000;
          aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_9;
          aBlock[3] = &__block_descriptor_tmp_10;
          aBlock[4] = v7;
          unint64_t v14 = _Block_copy(aBlock);
          uint64_t v17 = v14;
          uint64_t v15 = 0;
          abm::BasebandTracingTask::performWork(v7, &v20, 7, (uint64_t)&v18, &v17, &v15);
          if (v14) {
            _Block_release(v14);
          }
          if (v13) {
            dispatch_release(v13);
          }
          if (v12) {
            _Block_release(v12);
          }
          if (v11)
          {
            dispatch_group_leave(v11);
            dispatch_release(v11);
          }
          goto LABEL_19;
        }
      }
      else
      {
        BOOL v12 = 0;
        int v13 = *(NSObject **)(a4 + 8);
        uint64_t v18 = 0;
        uint64_t v19 = v13;
        if (!v13) {
          goto LABEL_11;
        }
      }
      dispatch_retain(v13);
      goto LABEL_11;
    }
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_9(uint64_t a1)
{
  uint64_t v1 = *(abm::BasebandTracingTask **)(a1 + 32);
  uint64_t v2 = (char *)*((void *)v1 + 17);
  var18.gr_name = v2;
  if (v2) {
    dispatch_retain((dispatch_object_t)v2);
  }
  abm::BasebandTracingTask::enterLowPowerInternal(v1, &var18);
  if (v2)
  {
    dispatch_release((dispatch_object_t)v2);
  }
}

void sub_1A619EC14(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void abm::BasebandTracingTask::enterLowPowerInternal(abm::BasebandTracingTask *this, group *a2)
{
  long long v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEFAULT, "#I Enter Low Power", buf, 2u);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN3abm19BasebandTracingTask21enterLowPowerInternalEN8dispatch5groupE_block_invoke;
  v11[3] = &__block_descriptor_tmp_166;
  gr_name = a2->gr_name;
  dispatch_object_t object = (dispatch_object_t)gr_name;
  if (gr_name) {
    dispatch_retain((dispatch_object_t)gr_name);
  }
  CFTypeID v6 = (char *)*((void *)this + 19);
  uint64_t v7 = (char *)this + 160;
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v14 = 0x40000000;
  uint64_t v15 = ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke;
  int64_t v16 = &unk_1E5C48640;
  uint64_t v17 = v11;
  if (v6 != v7)
  {
    do
    {
      v15((uint64_t)buf, (uint64_t)(v6 + 32));
      uint64_t v8 = (char *)*((void *)v6 + 1);
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (char *)*((void *)v6 + 2);
          BOOL v10 = *(void *)v9 == (void)v6;
          CFTypeID v6 = v9;
        }
        while (!v10);
      }
      CFTypeID v6 = v9;
    }
    while (v9 != v7);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_1A619EDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_14(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v5);
    if (v8)
    {
      uint64_t v9 = v8;
      if (!a1[5])
      {
LABEL_19:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      BOOL v10 = *(NSObject **)(v7 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1A609F000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to wake", buf, 2u);
      }
      int v11 = *(NSObject **)(v7 + 112);
      char v20 = v11;
      if (v11)
      {
        dispatch_retain(v11);
        dispatch_group_enter(v11);
      }
      if (*(void *)a4)
      {
        BOOL v12 = _Block_copy(*(const void **)a4);
        int v13 = *(NSObject **)(a4 + 8);
        uint64_t v18 = v12;
        uint64_t v19 = v13;
        if (!v13)
        {
LABEL_11:
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 0x40000000;
          aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_15;
          aBlock[3] = &__block_descriptor_tmp_16_0;
          aBlock[4] = v7;
          uint64_t v14 = _Block_copy(aBlock);
          uint64_t v17 = v14;
          uint64_t v15 = 0;
          abm::BasebandTracingTask::performWork(v7, &v20, 8, (uint64_t)&v18, &v17, &v15);
          if (v14) {
            _Block_release(v14);
          }
          if (v13) {
            dispatch_release(v13);
          }
          if (v12) {
            _Block_release(v12);
          }
          if (v11)
          {
            dispatch_group_leave(v11);
            dispatch_release(v11);
          }
          goto LABEL_19;
        }
      }
      else
      {
        BOOL v12 = 0;
        int v13 = *(NSObject **)(a4 + 8);
        uint64_t v18 = 0;
        uint64_t v19 = v13;
        if (!v13) {
          goto LABEL_11;
        }
      }
      dispatch_retain(v13);
      goto LABEL_11;
    }
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_15(uint64_t a1)
{
  uint64_t v1 = *(abm::BasebandTracingTask **)(a1 + 32);
  uint64_t v2 = (char *)*((void *)v1 + 17);
  var18.gr_name = v2;
  if (v2) {
    dispatch_retain((dispatch_object_t)v2);
  }
  abm::BasebandTracingTask::exitLowPowerInternal(v1, &var18);
  if (v2)
  {
    dispatch_release((dispatch_object_t)v2);
  }
}

void sub_1A619F02C(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void abm::BasebandTracingTask::exitLowPowerInternal(abm::BasebandTracingTask *this, group *a2)
{
  long long v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEFAULT, "#I Exit Low Power", buf, 2u);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN3abm19BasebandTracingTask20exitLowPowerInternalEN8dispatch5groupE_block_invoke;
  v11[3] = &__block_descriptor_tmp_169;
  gr_name = a2->gr_name;
  dispatch_object_t object = (dispatch_object_t)gr_name;
  if (gr_name) {
    dispatch_retain((dispatch_object_t)gr_name);
  }
  CFTypeID v6 = (char *)*((void *)this + 19);
  uint64_t v7 = (char *)this + 160;
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v14 = 0x40000000;
  uint64_t v15 = ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke;
  int64_t v16 = &unk_1E5C48640;
  uint64_t v17 = v11;
  if (v6 != v7)
  {
    do
    {
      v15((uint64_t)buf, (uint64_t)(v6 + 32));
      uint64_t v8 = (char *)*((void *)v6 + 1);
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (char *)*((void *)v6 + 2);
          BOOL v10 = *(void *)v9 == (void)v6;
          CFTypeID v6 = v9;
        }
        while (!v10);
      }
      CFTypeID v6 = v9;
    }
    while (v9 != v7);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_1A619F1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_20(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v5);
    if (v8)
    {
      uint64_t v9 = v8;
      if (!a1[5])
      {
LABEL_19:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      BOOL v10 = *(NSObject **)(v7 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1A609F000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to flush", buf, 2u);
      }
      int v11 = *(NSObject **)(v7 + 112);
      char v20 = v11;
      if (v11)
      {
        dispatch_retain(v11);
        dispatch_group_enter(v11);
      }
      if (*(void *)a4)
      {
        BOOL v12 = _Block_copy(*(const void **)a4);
        int v13 = *(NSObject **)(a4 + 8);
        uint64_t v18 = v12;
        uint64_t v19 = v13;
        if (!v13)
        {
LABEL_11:
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 0x40000000;
          aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_21;
          aBlock[3] = &__block_descriptor_tmp_22;
          aBlock[4] = v7;
          uint64_t v14 = _Block_copy(aBlock);
          uint64_t v17 = v14;
          uint64_t v15 = 0;
          abm::BasebandTracingTask::performWork(v7, &v20, 1, (uint64_t)&v18, &v17, &v15);
          if (v14) {
            _Block_release(v14);
          }
          if (v13) {
            dispatch_release(v13);
          }
          if (v12) {
            _Block_release(v12);
          }
          if (v11)
          {
            dispatch_group_leave(v11);
            dispatch_release(v11);
          }
          goto LABEL_19;
        }
      }
      else
      {
        BOOL v12 = 0;
        int v13 = *(NSObject **)(a4 + 8);
        uint64_t v18 = 0;
        uint64_t v19 = v13;
        if (!v13) {
          goto LABEL_11;
        }
      }
      dispatch_retain(v13);
      goto LABEL_11;
    }
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_21(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1A609F000, v1, OS_LOG_TYPE_DEFAULT, "#I Flush complete", v2, 2u);
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_26(void *a1, uint64_t a2, void **a3, uint64_t a4)
{
  size_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = std::__shared_weak_count::lock(v5);
    if (v9)
    {
      BOOL v10 = v9;
      if (!a1[5])
      {
LABEL_36:
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        return;
      }
      int v11 = *(NSObject **)(v8 + 112);
      if (v11)
      {
        dispatch_retain(*(dispatch_object_t *)(v8 + 112));
        dispatch_group_enter(v11);
      }
      BOOL v12 = *(NSObject **)(v8 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1A609F000, v12, OS_LOG_TYPE_DEFAULT, "#I Request to abort", buf, 2u);
      }
      int v13 = *(NSObject **)(v8 + 136);
      v26[0] = MEMORY[0x1E4F143A8];
      v26[1] = 1174405120;
      v26[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_27;
      v26[3] = &__block_descriptor_tmp_28;
      v26[4] = v8;
      dispatch_group_t group = v11;
      if (v11)
      {
        dispatch_retain(v11);
        dispatch_group_enter(group);
      }
      uint64_t v14 = *a3;
      xpc_object_t v28 = v14;
      if (v14) {
        xpc_retain(v14);
      }
      else {
        xpc_object_t v28 = xpc_null_create();
      }
      ctu::SharedSynchronizable<abm::HelperTask>::execute_wrapped((uint64_t *)(v8 + 72), v13, (uint64_t)v26);
      uint64_t v15 = *(NSObject **)(v8 + 112);
      std::string::size_type v25 = v15;
      if (v15)
      {
        dispatch_retain(v15);
        dispatch_group_enter(v15);
      }
      if (*(void *)a4)
      {
        int64_t v16 = _Block_copy(*(const void **)a4);
        uint64_t v17 = *(NSObject **)(a4 + 8);
        int v23 = v16;
        char v24 = v17;
        if (!v17)
        {
LABEL_18:
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_29;
          aBlock[3] = &__block_descriptor_tmp_30_1;
          aBlock[4] = v8;
          dispatch_group_t object = v11;
          if (v11)
          {
            dispatch_retain(v11);
            dispatch_group_enter(object);
          }
          uint64_t v18 = _Block_copy(aBlock);
          int v22 = v18;
          uint64_t v19 = 0;
          abm::BasebandTracingTask::performWork(v8, &v25, 5, (uint64_t)&v23, &v22, &v19);
          if (v18) {
            _Block_release(v18);
          }
          if (v17) {
            dispatch_release(v17);
          }
          if (v16) {
            _Block_release(v16);
          }
          if (v15)
          {
            dispatch_group_leave(v15);
            dispatch_release(v15);
          }
          if (object)
          {
            dispatch_group_leave(object);
            if (object) {
              dispatch_release(object);
            }
          }
          xpc_release(v28);
          xpc_object_t v28 = 0;
          if (group)
          {
            dispatch_group_leave(group);
            if (group) {
              dispatch_release(group);
            }
          }
          if (v11)
          {
            dispatch_group_leave(v11);
            dispatch_release(v11);
          }
          goto LABEL_36;
        }
      }
      else
      {
        int64_t v16 = 0;
        uint64_t v17 = *(NSObject **)(a4 + 8);
        int v23 = 0;
        char v24 = v17;
        if (!v17) {
          goto LABEL_18;
        }
      }
      dispatch_retain(v17);
      goto LABEL_18;
    }
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_27(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 136);
  BOOL v10 = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  long long v4 = *(void **)(a1 + 48);
  xpc_object_t object = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::bridge();
  size_t v5 = cf;
  if (cf && (CFTypeID v6 = CFGetTypeID(cf), v6 == CFDictionaryGetTypeID()))
  {
    uint64_t v9 = cf;
    CFRetain(cf);
  }
  else
  {
    size_t v5 = 0;
    uint64_t v9 = 0;
  }
  abm::BasebandTracingTask::abortInternal(v2, &v10, &v9);
  if (v5) {
    CFRelease(v5);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(object);
  if (v3) {
    dispatch_release(v3);
  }
}

void sub_1A619F83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, const void *a10, const void *a11)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(&a10);
  xpc_release(object);
  if (v11) {
    dispatch_release(v11);
  }
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::abortInternal(uint64_t a1, NSObject **a2, const void **a3)
{
  CFTypeID v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEFAULT, "#I Aborting all Traces", buf, 2u);
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  v13[2] = ___ZN3abm19BasebandTracingTask13abortInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_185;
  uint64_t v7 = *a2;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = *a3;
  CFTypeRef cf = v8;
  if (v8) {
    CFRetain(v8);
  }
  uint64_t v9 = *(void **)(a1 + 152);
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v17 = 0x40000000;
  uint64_t v18 = ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke;
  uint64_t v19 = &unk_1E5C48640;
  char v20 = v13;
  if (v9 != (void *)(a1 + 160))
  {
    do
    {
      v18((uint64_t)buf, (uint64_t)(v9 + 4));
      BOOL v10 = (void *)v9[1];
      if (v10)
      {
        do
        {
          int v11 = v10;
          BOOL v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          int v11 = (void *)v9[2];
          BOOL v12 = *v11 == (void)v9;
          uint64_t v9 = v11;
        }
        while (!v12);
      }
      uint64_t v9 = v11;
    }
    while (v11 != (void *)(a1 + 160));
  }
  if (cf) {
    CFRelease(cf);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_1A619FA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(v13);
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  long long v4 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    size_t v5 = *(NSObject **)(a1 + 40);
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  CFTypeID v6 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v6;
  if (v6) {
    return xpc_retain(v6);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_29(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 136);
  long long v4 = v2;
  if (v2) {
    dispatch_retain(v2);
  }
  uint64_t v3 = 0;
  abm::BasebandTracingTask::stopInternal(v1, &v4, &v3);
  if (v2)
  {
    dispatch_release(v2);
  }
}

void sub_1A619FB94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  long long v4 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  if (v2) {
    dispatch_release(v2);
  }
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::stopInternal(uint64_t a1, NSObject **a2, const void **a3)
{
  CFTypeID v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEFAULT, "#I Stopping all Traces", buf, 2u);
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  v13[2] = ___ZN3abm19BasebandTracingTask12stopInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_182;
  uint64_t v7 = *a2;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = *a3;
  CFTypeRef cf = v8;
  if (v8) {
    CFRetain(v8);
  }
  uint64_t v9 = *(void **)(a1 + 152);
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v17 = 0x40000000;
  uint64_t v18 = ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke;
  uint64_t v19 = &unk_1E5C48640;
  char v20 = v13;
  if (v9 != (void *)(a1 + 160))
  {
    do
    {
      v18((uint64_t)buf, (uint64_t)(v9 + 4));
      BOOL v10 = (void *)v9[1];
      if (v10)
      {
        do
        {
          int v11 = v10;
          BOOL v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          int v11 = (void *)v9[2];
          BOOL v12 = *v11 == (void)v9;
          uint64_t v9 = v11;
        }
        while (!v12);
      }
      uint64_t v9 = v11;
    }
    while (v11 != (void *)(a1 + 160));
  }
  if (cf) {
    CFRelease(cf);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_1A619FD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(v13);
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_34(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1[4];
  uint64_t v48 = 0;
  std::string v49 = 0;
  CFTypeID v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    std::string v49 = std::__shared_weak_count::lock(v6);
    if (!v49) {
      return;
    }
    uint64_t v48 = a1[5];
    if (v48)
    {
      uint64_t v8 = *(NSObject **)(v5 + 112);
      if (v8)
      {
        dispatch_retain(*(dispatch_object_t *)(v5 + 112));
        dispatch_group_enter(v8);
      }
      uint64_t v9 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1A609F000, v9, OS_LOG_TYPE_DEFAULT, "#I Request to reinit", buf, 2u);
      }
      xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
      if (v10 || (xpc_object_t v10 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A6275E60](v10) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v10);
          xpc_object_t v11 = v10;
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v11 = xpc_null_create();
        xpc_object_t v10 = 0;
      }
      xpc_release(v10);
      xpc_object_t v12 = xpc_string_create("kReinitAllTrace");
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      xpc_dictionary_set_value(v11, "kKeyTraceAction", v12);
      xpc_object_t v13 = xpc_null_create();
      xpc_release(v12);
      xpc_release(v13);
      Timestamp::Timestamp((Timestamp *)&v44);
      Timestamp::asString(v14, 0, 9, buf);
      if (v47 >= 0) {
        uint64_t v15 = buf;
      }
      else {
        uint64_t v15 = *(uint8_t **)buf;
      }
      xpc_object_t v16 = xpc_string_create((const char *)v15);
      if (!v16) {
        xpc_object_t v16 = xpc_null_create();
      }
      xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C4C8], v16);
      xpc_object_t v17 = xpc_null_create();
      xpc_release(v16);
      xpc_release(v17);
      if (v47 < 0)
      {
        operator delete(*(void **)buf);
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v44, v45);
        xpc_object_t v44 = v11;
        if (v11) {
          goto LABEL_23;
        }
      }
      else
      {
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v44, v45);
        xpc_object_t v44 = v11;
        if (v11)
        {
LABEL_23:
          xpc_retain(v11);
          goto LABEL_26;
        }
      }
      xpc_object_t v44 = xpc_null_create();
LABEL_26:
      xpc::bridge();
      uint64_t v18 = *(uint8_t **)buf;
      if (!*(void *)buf) {
        goto LABEL_32;
      }
      CFTypeID v19 = CFGetTypeID(*(CFTypeRef *)buf);
      if (v19 == CFDictionaryGetTypeID())
      {
        CFRetain(v18);
        char v20 = *(uint8_t **)buf;
        if (!*(void *)buf)
        {
LABEL_32:
          xpc_release(v44);
          uint64_t v21 = *(NSObject **)(v5 + 136);
          v41[0] = MEMORY[0x1E4F143A8];
          v41[1] = 1174405120;
          v41[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_35;
          v41[3] = &__block_descriptor_tmp_38_1;
          v41[4] = v5;
          dispatch_group_t group = v8;
          if (v8)
          {
            dispatch_retain(v8);
            dispatch_group_enter(group);
          }
          xpc_object_t object = v11;
          if (v11) {
            xpc_retain(v11);
          }
          else {
            xpc_object_t object = xpc_null_create();
          }
          ctu::SharedSynchronizable<abm::HelperTask>::execute_wrapped((uint64_t *)(v5 + 72), v21, (uint64_t)v41);
          int v22 = *(NSObject **)(v5 + 112);
          char v40 = v22;
          if (v22)
          {
            dispatch_retain(v22);
            dispatch_group_enter(v22);
          }
          v39[0] = 0;
          v39[1] = 0;
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 0x40000000;
          aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_39;
          aBlock[3] = &__block_descriptor_tmp_40;
          aBlock[4] = v5;
          int v23 = _Block_copy(aBlock);
          dispatch_object_t v38 = v23;
          char v36 = 0;
          abm::BasebandTracingTask::performWork(v5, &v40, 5, (uint64_t)v39, &v38, &v36);
          if (v23) {
            _Block_release(v23);
          }
          if (v22)
          {
            dispatch_group_leave(v22);
            dispatch_release(v22);
          }
          char v24 = *(NSObject **)(v5 + 112);
          uint64_t v35 = v24;
          if (v24)
          {
            dispatch_retain(v24);
            dispatch_group_enter(v24);
          }
          if (*(void *)a4)
          {
            std::string::size_type v25 = _Block_copy(*(const void **)a4);
            size_t v26 = *(NSObject **)(a4 + 8);
            unint64_t v33 = v25;
            int v34 = v26;
            if (!v26)
            {
LABEL_48:
              v30[0] = MEMORY[0x1E4F143A8];
              v30[1] = 1174405120;
              v30[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_2;
              v30[3] = &__block_descriptor_tmp_41_0;
              v30[4] = v5;
              CFTypeRef cf = v18;
              if (v18) {
                CFRetain(v18);
              }
              int v27 = _Block_copy(v30);
              uint64_t v32 = v27;
              char v29 = 0;
              abm::BasebandTracingTask::performWork(v5, &v35, 2, (uint64_t)&v33, &v32, &v29);
              if (v27) {
                _Block_release(v27);
              }
              if (v26) {
                dispatch_release(v26);
              }
              if (v25) {
                _Block_release(v25);
              }
              if (v24)
              {
                dispatch_group_leave(v24);
                dispatch_release(v24);
              }
              if (cf) {
                CFRelease(cf);
              }
              xpc_release(object);
              xpc_object_t object = 0;
              if (group)
              {
                dispatch_group_leave(group);
                if (group) {
                  dispatch_release(group);
                }
              }
              if (v18) {
                CFRelease(v18);
              }
              xpc_release(v11);
              if (v8)
              {
                dispatch_group_leave(v8);
                dispatch_release(v8);
              }
              goto LABEL_67;
            }
          }
          else
          {
            std::string::size_type v25 = 0;
            size_t v26 = *(NSObject **)(a4 + 8);
            unint64_t v33 = 0;
            int v34 = v26;
            if (!v26) {
              goto LABEL_48;
            }
          }
          dispatch_retain(v26);
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v18 = 0;
        char v20 = *(uint8_t **)buf;
        if (!*(void *)buf) {
          goto LABEL_32;
        }
      }
      CFRelease(v20);
      goto LABEL_32;
    }
  }
LABEL_67:
  xpc_object_t v28 = v49;
  if (v49)
  {
    if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1A61A035C(_Unwind_Exception *a1)
{
  xpc_release(*(xpc_object_t *)(v3 - 168));
  xpc_release(v2);
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v3 - 112);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_35(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 136);
  xpc_object_t v10 = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  long long v4 = *(void **)(a1 + 48);
  xpc_object_t object = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::bridge();
  uint64_t v5 = cf;
  if (cf && (CFTypeID v6 = CFGetTypeID(cf), v6 == CFDictionaryGetTypeID()))
  {
    uint64_t v9 = cf;
    CFRetain(cf);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v9 = 0;
  }
  abm::BasebandTracingTask::abortInternal(v2, &v10, &v9);
  if (v5) {
    CFRelease(v5);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(object);
  if (v3) {
    dispatch_release(v3);
  }
}

void sub_1A61A04F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, const void *a10, const void *a11)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(&a10);
  xpc_release(object);
  if (v11) {
    dispatch_release(v11);
  }
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_39(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 136);
  long long v4 = v2;
  if (v2) {
    dispatch_retain(v2);
  }
  uint64_t v3 = 0;
  abm::BasebandTracingTask::stopInternal(v1, &v4, &v3);
  if (v2)
  {
    dispatch_release(v2);
  }
}

void sub_1A61A05B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  long long v4 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  if (v2) {
    dispatch_release(v2);
  }
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 136);
  CFTypeID v6 = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  long long v4 = *(const void **)(a1 + 40);
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  abm::BasebandTracingTask::reinitInternal(v2, &v6, &v5);
  if (v4) {
    CFRelease(v4);
  }
  if (v3)
  {
    dispatch_release(v3);
  }
}

void sub_1A61A0688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9) {
    dispatch_release(v9);
  }
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::reinitInternal(uint64_t a1, NSObject **a2, const void **a3)
{
  CFTypeID v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEFAULT, "#I Reinit all Traces", buf, 2u);
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  v13[2] = ___ZN3abm19BasebandTracingTask14reinitInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_173;
  uint64_t v7 = *a2;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = *a3;
  CFTypeRef cf = v8;
  if (v8) {
    CFRetain(v8);
  }
  uint64_t v9 = *(void **)(a1 + 152);
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v17 = 0x40000000;
  uint64_t v18 = ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke;
  CFTypeID v19 = &unk_1E5C48640;
  char v20 = v13;
  if (v9 != (void *)(a1 + 160))
  {
    do
    {
      v18((uint64_t)buf, (uint64_t)(v9 + 4));
      xpc_object_t v10 = (void *)v9[1];
      if (v10)
      {
        do
        {
          xpc_object_t v11 = v10;
          xpc_object_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          xpc_object_t v11 = (void *)v9[2];
          BOOL v12 = *v11 == (void)v9;
          uint64_t v9 = v11;
        }
        while (!v12);
      }
      uint64_t v9 = v11;
    }
    while (v11 != (void *)(a1 + 160));
  }
  if (cf) {
    CFRelease(cf);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_1A61A0858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(v13);
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    CFRelease(v1);
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_45(void *a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = std::__shared_weak_count::lock(v5);
    uint64_t v51 = v9;
    if (v9)
    {
      xpc_object_t v10 = v9;
      if (!a1[5])
      {
LABEL_66:
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        return;
      }
      xpc_object_t v11 = *(NSObject **)(v8 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1A609F000, v11, OS_LOG_TYPE_DEFAULT, "#I Request to shutdown", buf, 2u);
      }
      BOOL v12 = *(NSObject **)(v8 + 112);
      if (v12)
      {
        dispatch_retain(*(dispatch_object_t *)(v8 + 112));
        dispatch_group_enter(v12);
      }
      xpc_object_t v13 = xpc_string_create("kShutdownAllTrace");
      if (!v13) {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_dictionary_set_value(*a3, "kKeyTraceAction", v13);
      xpc_object_t v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      Timestamp::Timestamp((Timestamp *)&v46);
      Timestamp::asString(v15, 0, 9, buf);
      if (v49 >= 0) {
        xpc_object_t v16 = buf;
      }
      else {
        xpc_object_t v16 = *(uint8_t **)buf;
      }
      xpc_object_t v17 = xpc_string_create((const char *)v16);
      if (!v17) {
        xpc_object_t v17 = xpc_null_create();
      }
      xpc_dictionary_set_value(*a3, (const char *)*MEMORY[0x1E4F4C4C8], v17);
      xpc_object_t v18 = xpc_null_create();
      xpc_release(v17);
      xpc_release(v18);
      if (v49 < 0)
      {
        operator delete(*(void **)buf);
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v46, v47);
        xpc_object_t v46 = *a3;
        xpc_object_t v19 = v46;
        if (v46) {
          goto LABEL_17;
        }
      }
      else
      {
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v46, v47);
        xpc_object_t v46 = *a3;
        xpc_object_t v19 = v46;
        if (v46)
        {
LABEL_17:
          xpc_retain(v19);
          goto LABEL_20;
        }
      }
      xpc_object_t v46 = xpc_null_create();
LABEL_20:
      xpc::bridge();
      char v20 = *(uint8_t **)buf;
      if (!*(void *)buf) {
        goto LABEL_26;
      }
      CFTypeID v21 = CFGetTypeID(*(CFTypeRef *)buf);
      if (v21 == CFDictionaryGetTypeID())
      {
        CFRetain(v20);
        int v22 = *(uint8_t **)buf;
        if (!*(void *)buf)
        {
LABEL_26:
          xpc_release(v46);
          int v23 = *(NSObject **)(v8 + 136);
          v43[0] = MEMORY[0x1E4F143A8];
          v43[1] = 1174405120;
          v43[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_46;
          v43[3] = &__block_descriptor_tmp_47_1;
          v43[4] = v8;
          dispatch_group_t group = v12;
          if (v12)
          {
            dispatch_retain(v12);
            dispatch_group_enter(group);
          }
          CFTypeRef v45 = v20;
          if (v20) {
            CFRetain(v20);
          }
          ctu::SharedSynchronizable<abm::HelperTask>::execute_wrapped((uint64_t *)(v8 + 72), v23, (uint64_t)v43);
          char v24 = *(NSObject **)(v8 + 112);
          uint64_t v42 = v24;
          if (v24)
          {
            dispatch_retain(v24);
            dispatch_group_enter(v24);
          }
          v41[0] = 0;
          v41[1] = 0;
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_48;
          aBlock[3] = &__block_descriptor_tmp_51_1;
          aBlock[4] = v8;
          CFTypeRef v39 = v20;
          if (v20) {
            CFRetain(v20);
          }
          std::string::size_type v25 = _Block_copy(aBlock);
          char v40 = v25;
          char v37 = 0;
          abm::BasebandTracingTask::performWork(v8, &v42, 6, (uint64_t)v41, &v40, &v37);
          if (v25) {
            _Block_release(v25);
          }
          if (v24)
          {
            dispatch_group_leave(v24);
            dispatch_release(v24);
          }
          size_t v26 = *(NSObject **)(v8 + 112);
          char v36 = v26;
          if (v26)
          {
            dispatch_retain(v26);
            dispatch_group_enter(v26);
          }
          if (*(void *)a4)
          {
            int v27 = _Block_copy(*(const void **)a4);
            xpc_object_t v28 = *(NSObject **)(a4 + 8);
            int v34 = v27;
            uint64_t v35 = v28;
            if (!v28)
            {
LABEL_43:
              v31[0] = MEMORY[0x1E4F143A8];
              v31[1] = 1174405120;
              v31[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_52;
              v31[3] = &__block_descriptor_tmp_55_1;
              v31[4] = v8;
              CFTypeRef cf = v20;
              if (v20) {
                CFRetain(v20);
              }
              char v29 = _Block_copy(v31);
              unint64_t v33 = v29;
              uint64_t v30 = 0;
              abm::BasebandTracingTask::performWork(v8, &v36, 6, (uint64_t)&v34, &v33, &v30);
              if (v29) {
                _Block_release(v29);
              }
              if (v28) {
                dispatch_release(v28);
              }
              if (v27) {
                _Block_release(v27);
              }
              if (v26)
              {
                dispatch_group_leave(v26);
                dispatch_release(v26);
              }
              if (cf) {
                CFRelease(cf);
              }
              if (v39) {
                CFRelease(v39);
              }
              if (v45) {
                CFRelease(v45);
              }
              if (group)
              {
                dispatch_group_leave(group);
                if (group) {
                  dispatch_release(group);
                }
              }
              if (v20) {
                CFRelease(v20);
              }
              if (v12)
              {
                dispatch_group_leave(v12);
                dispatch_release(v12);
              }
              goto LABEL_66;
            }
          }
          else
          {
            int v27 = 0;
            xpc_object_t v28 = *(NSObject **)(a4 + 8);
            int v34 = 0;
            uint64_t v35 = v28;
            if (!v28) {
              goto LABEL_43;
            }
          }
          dispatch_retain(v28);
          goto LABEL_43;
        }
      }
      else
      {
        char v20 = 0;
        int v22 = *(uint8_t **)buf;
        if (!*(void *)buf) {
          goto LABEL_26;
        }
      }
      CFRelease(v22);
      goto LABEL_26;
    }
  }
}

void sub_1A61A0E28(_Unwind_Exception *a1)
{
  xpc_release(*(xpc_object_t *)(v2 - 168));
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v2 - 112);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_46(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 136);
  CFTypeID v6 = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  long long v4 = *(const void **)(a1 + 48);
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  abm::BasebandTracingTask::abortInternal(v2, &v6, &v5);
  if (v4) {
    CFRelease(v4);
  }
  if (v3)
  {
    dispatch_release(v3);
  }
}

void sub_1A61A0F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9) {
    dispatch_release(v9);
  }
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  long long v4 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = *(NSObject **)(a1 + 40);
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  CFTypeRef result = *(CFTypeRef *)(a2 + 48);
  *(void *)(a1 + 48) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    long long v4 = *(NSObject **)(a1 + 40);
    if (v4)
    {
      dispatch_release(v4);
    }
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_48(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 136);
  CFTypeID v6 = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  long long v4 = *(const void **)(a1 + 40);
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  abm::BasebandTracingTask::snapshotInternal(v2, &v6, &v5);
  if (v4) {
    CFRelease(v4);
  }
  if (v3)
  {
    dispatch_release(v3);
  }
}

void sub_1A61A10E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9) {
    dispatch_release(v9);
  }
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::snapshotInternal(uint64_t a1, NSObject **a2, const void **a3)
{
  CFTypeID v6 = *(NSObject **)(a1 + 40);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEFAULT, "#I Snapshotting all traces", buf, 2u);
  }
  abm::BasebandTracingTask::createLogFolderPaths((abm::BasebandTracingTask *)v7);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 1174405120;
  void v14[2] = ___ZN3abm19BasebandTracingTask16snapshotInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v14[3] = &__block_descriptor_tmp_170;
  uint64_t v8 = *a2;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  uint64_t v9 = *a3;
  CFTypeRef cf = v9;
  if (v9) {
    CFRetain(v9);
  }
  xpc_object_t v10 = *(void **)(a1 + 152);
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v18 = 0x40000000;
  xpc_object_t v19 = ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke;
  char v20 = &unk_1E5C48640;
  CFTypeID v21 = v14;
  if (v10 != (void *)(a1 + 160))
  {
    do
    {
      v19((uint64_t)buf, (uint64_t)(v10 + 4));
      xpc_object_t v11 = (void *)v10[1];
      if (v11)
      {
        do
        {
          BOOL v12 = v11;
          xpc_object_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          BOOL v12 = (void *)v10[2];
          BOOL v13 = *v12 == (void)v10;
          xpc_object_t v10 = v12;
        }
        while (!v13);
      }
      xpc_object_t v10 = v12;
    }
    while (v12 != (void *)(a1 + 160));
  }
  if (cf) {
    CFRelease(cf);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_1A61A12B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(v13);
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_52(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 136);
  CFTypeID v6 = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  long long v4 = *(const void **)(a1 + 40);
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  abm::BasebandTracingTask::shutdownInternal(v2, &v6, &v5);
  if (v4) {
    CFRelease(v4);
  }
  if (v3)
  {
    dispatch_release(v3);
  }
}

void sub_1A61A1380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9) {
    dispatch_release(v9);
  }
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::shutdownInternal(uint64_t a1, NSObject **a2, const void **a3)
{
  CFTypeID v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEFAULT, "#I Shutdown all Traces", buf, 2u);
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  v13[2] = ___ZN3abm19BasebandTracingTask16shutdownInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_188_0;
  BOOL v7 = *a2;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = *a3;
  CFTypeRef cf = v8;
  if (v8) {
    CFRetain(v8);
  }
  uint64_t v9 = *(void **)(a1 + 152);
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v17 = 0x40000000;
  uint64_t v18 = ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke;
  xpc_object_t v19 = &unk_1E5C48640;
  char v20 = v13;
  if (v9 != (void *)(a1 + 160))
  {
    do
    {
      v18((uint64_t)buf, (uint64_t)(v9 + 4));
      xpc_object_t v10 = (void *)v9[1];
      if (v10)
      {
        do
        {
          xpc_object_t v11 = v10;
          xpc_object_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          xpc_object_t v11 = (void *)v9[2];
          BOOL v12 = *v11 == (void)v9;
          uint64_t v9 = v11;
        }
        while (!v12);
      }
      uint64_t v9 = v11;
    }
    while (v11 != (void *)(a1 + 160));
  }
  if (cf) {
    CFRelease(cf);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_1A61A1550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(v13);
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_59(void *a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = std::__shared_weak_count::lock(v5);
    char v29 = v9;
    if (v9)
    {
      xpc_object_t v10 = v9;
      if (!a1[5])
      {
LABEL_33:
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        return;
      }
      xpc_object_t v11 = *a3;
      xpc_object_t object = v11;
      if (v11) {
        xpc_retain(v11);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      xpc::bridge();
      CFTypeRef v12 = cf[0];
      if (cf[0])
      {
        CFTypeID v13 = CFGetTypeID(cf[0]);
        if (v13 == CFDictionaryGetTypeID()) {
          CFRetain(cf[0]);
        }
        else {
          CFTypeRef v12 = 0;
        }
        CFRelease(cf[0]);
      }
      xpc_release(object);
      xpc_object_t v14 = *(NSObject **)(v8 + 40);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(cf[0]) = 0;
        _os_log_impl(&dword_1A609F000, v14, OS_LOG_TYPE_DEFAULT, "#I Request to prepare", (uint8_t *)cf, 2u);
      }
      uint64_t v15 = *(NSObject **)(v8 + 112);
      std::string::size_type v25 = v15;
      if (v15)
      {
        dispatch_retain(v15);
        dispatch_group_enter(v15);
      }
      if (*(void *)a4)
      {
        xpc_object_t v16 = _Block_copy(*(const void **)a4);
        uint64_t v17 = *(NSObject **)(a4 + 8);
        int v23 = v16;
        char v24 = v17;
        if (!v17)
        {
LABEL_19:
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_60;
          aBlock[3] = &__block_descriptor_tmp_63_1;
          aBlock[4] = v8;
          CFTypeRef v21 = v12;
          if (v12) {
            CFRetain(v12);
          }
          uint64_t v18 = _Block_copy(aBlock);
          int v22 = v18;
          xpc_object_t v19 = 0;
          abm::BasebandTracingTask::performWork(v8, &v25, 3, (uint64_t)&v23, &v22, &v19);
          if (v18) {
            _Block_release(v18);
          }
          if (v17) {
            dispatch_release(v17);
          }
          if (v16) {
            _Block_release(v16);
          }
          if (v15)
          {
            dispatch_group_leave(v15);
            dispatch_release(v15);
          }
          if (v21) {
            CFRelease(v21);
          }
          if (v12) {
            CFRelease(v12);
          }
          goto LABEL_33;
        }
      }
      else
      {
        xpc_object_t v16 = 0;
        uint64_t v17 = *(NSObject **)(a4 + 8);
        int v23 = 0;
        char v24 = v17;
        if (!v17) {
          goto LABEL_19;
        }
      }
      dispatch_retain(v17);
      goto LABEL_19;
    }
  }
}

void sub_1A61A1820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t object,char a21)
{
  xpc_release(object);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v21 - 80);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 136);
  CFTypeID v6 = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  long long v4 = *(const void **)(a1 + 40);
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  abm::BasebandTracingTask::prepareInternal(v2, &v6, &v5);
  if (v4) {
    CFRelease(v4);
  }
  if (v3)
  {
    dispatch_release(v3);
  }
}

void sub_1A61A1900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9) {
    dispatch_release(v9);
  }
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::prepareInternal(uint64_t a1, NSObject **a2, const void **a3)
{
  CFTypeID v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEFAULT, "#I Preparing all traces", buf, 2u);
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  v13[2] = ___ZN3abm19BasebandTracingTask15prepareInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_176;
  BOOL v7 = *a2;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = *a3;
  CFTypeRef cf = v8;
  if (v8) {
    CFRetain(v8);
  }
  uint64_t v9 = *(void **)(a1 + 152);
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v17 = 0x40000000;
  uint64_t v18 = ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke;
  xpc_object_t v19 = &unk_1E5C48640;
  char v20 = v13;
  if (v9 != (void *)(a1 + 160))
  {
    do
    {
      v18((uint64_t)buf, (uint64_t)(v9 + 4));
      xpc_object_t v10 = (void *)v9[1];
      if (v10)
      {
        do
        {
          xpc_object_t v11 = v10;
          xpc_object_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          xpc_object_t v11 = (void *)v9[2];
          BOOL v12 = *v11 == (void)v9;
          uint64_t v9 = v11;
        }
        while (!v12);
      }
      uint64_t v9 = v11;
    }
    while (v11 != (void *)(a1 + 160));
  }
  if (cf) {
    CFRelease(cf);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_1A61A1AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(v13);
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_67(void *a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = std::__shared_weak_count::lock(v5);
    char v29 = v9;
    if (v9)
    {
      xpc_object_t v10 = v9;
      if (!a1[5])
      {
LABEL_33:
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        return;
      }
      xpc_object_t v11 = *a3;
      xpc_object_t object = v11;
      if (v11) {
        xpc_retain(v11);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      xpc::bridge();
      CFTypeRef v12 = cf[0];
      if (cf[0])
      {
        CFTypeID v13 = CFGetTypeID(cf[0]);
        if (v13 == CFDictionaryGetTypeID()) {
          CFRetain(cf[0]);
        }
        else {
          CFTypeRef v12 = 0;
        }
        CFRelease(cf[0]);
      }
      xpc_release(object);
      xpc_object_t v14 = *(NSObject **)(v8 + 40);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(cf[0]) = 0;
        _os_log_impl(&dword_1A609F000, v14, OS_LOG_TYPE_DEFAULT, "#I Request to stop", (uint8_t *)cf, 2u);
      }
      uint64_t v15 = *(NSObject **)(v8 + 112);
      std::string::size_type v25 = v15;
      if (v15)
      {
        dispatch_retain(v15);
        dispatch_group_enter(v15);
      }
      if (*(void *)a4)
      {
        xpc_object_t v16 = _Block_copy(*(const void **)a4);
        uint64_t v17 = *(NSObject **)(a4 + 8);
        int v23 = v16;
        char v24 = v17;
        if (!v17)
        {
LABEL_19:
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_68;
          aBlock[3] = &__block_descriptor_tmp_71_0;
          aBlock[4] = v8;
          CFTypeRef v21 = v12;
          if (v12) {
            CFRetain(v12);
          }
          uint64_t v18 = _Block_copy(aBlock);
          int v22 = v18;
          xpc_object_t v19 = 0;
          abm::BasebandTracingTask::performWork(v8, &v25, 5, (uint64_t)&v23, &v22, &v19);
          if (v18) {
            _Block_release(v18);
          }
          if (v17) {
            dispatch_release(v17);
          }
          if (v16) {
            _Block_release(v16);
          }
          if (v15)
          {
            dispatch_group_leave(v15);
            dispatch_release(v15);
          }
          if (v21) {
            CFRelease(v21);
          }
          if (v12) {
            CFRelease(v12);
          }
          goto LABEL_33;
        }
      }
      else
      {
        xpc_object_t v16 = 0;
        uint64_t v17 = *(NSObject **)(a4 + 8);
        int v23 = 0;
        char v24 = v17;
        if (!v17) {
          goto LABEL_19;
        }
      }
      dispatch_retain(v17);
      goto LABEL_19;
    }
  }
}

void sub_1A61A1DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t object,char a21)
{
  xpc_release(object);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v21 - 80);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_68(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 136);
  CFTypeID v6 = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  long long v4 = *(const void **)(a1 + 40);
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  abm::BasebandTracingTask::stopInternal(v2, &v6, &v5);
  if (v4) {
    CFRelease(v4);
  }
  if (v3)
  {
    dispatch_release(v3);
  }
}

void sub_1A61A1E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9) {
    dispatch_release(v9);
  }
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_75(void *a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (!v5) {
    return;
  }
  uint64_t v8 = (void *)a1[4];
  uint64_t v9 = std::__shared_weak_count::lock(v5);
  unint64_t v54 = v9;
  if (!v9) {
    return;
  }
  xpc_object_t v10 = v9;
  if (!a1[5]) {
    goto LABEL_72;
  }
  memset(v52, 170, sizeof(v52));
  xpc_object_t value = xpc_dictionary_get_value(*a3, "kKeyTraceAction");
  xpc_object_t v51 = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t v51 = xpc_null_create();
  }
  xpc::dyn_cast_or_default();
  xpc_release(v51);
  xpc_object_t v51 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v49 = *a3;
  if (v49) {
    xpc_retain(v49);
  }
  else {
    xpc_object_t v49 = xpc_null_create();
  }
  xpc::bridge();
  CFTypeRef v12 = *(CFTypeRef *)buf;
  if (*(void *)buf && (CFTypeID v13 = CFGetTypeID(*(CFTypeRef *)buf), v13 == CFDictionaryGetTypeID()))
  {
    xpc_object_t v51 = *(xpc_object_t *)buf;
    CFRetain(*(CFTypeRef *)buf);
    CFTypeRef v14 = *(CFTypeRef *)buf;
  }
  else
  {
    CFTypeRef v12 = 0;
    xpc_object_t v51 = 0;
    CFTypeRef v14 = *(CFTypeRef *)buf;
    if (!*(void *)buf) {
      goto LABEL_15;
    }
  }
  CFRelease(v14);
LABEL_15:
  xpc_release(v49);
  uint64_t v15 = v8[5];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A609F000, v15, OS_LOG_TYPE_DEFAULT, "#I Request to collect logs", buf, 2u);
  }
  xpc_object_t v16 = (void *)HIBYTE(v52[2]);
  if (SHIBYTE(v52[2]) < 0) {
    xpc_object_t v16 = v52[1];
  }
  if (v16 == (void *)33)
  {
    uint64_t v17 = v52;
    if (SHIBYTE(v52[2]) < 0) {
      uint64_t v17 = (void **)v52[0];
    }
    uint64_t v18 = *v17;
    xpc_object_t v19 = v17[1];
    char v20 = v17[2];
    uint64_t v21 = v17[3];
    uint64_t v22 = *((unsigned __int8 *)v17 + 32);
    if (v18 == *(void **)"kCollectTelephonyLogsWithCoredump"
      && v19 == *(void **)"TelephonyLogsWithCoredump"
      && v20 == *(void **)"yLogsWithCoredump"
      && v21 == *(void **)"hCoredump"
      && v22 == str_68[32])
    {
      int v27 = v8[5];
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1A609F000, v27, OS_LOG_TYPE_DEFAULT, "#I Abort all traces before collecting coredump", buf, 2u);
      }
      xpc_object_t v28 = v8[17];
      uint64_t v48 = v28;
      if (v28) {
        dispatch_retain(v28);
      }
      char v47 = v12;
      if (v12) {
        CFRetain(v12);
      }
      abm::BasebandTracingTask::abortInternal((uint64_t)v8, &v48, &v47);
      if (v12) {
        CFRelease(v12);
      }
      if (v28) {
        dispatch_release(v28);
      }
      char v29 = v8[14];
      xpc_object_t v46 = v29;
      if (v29)
      {
        dispatch_retain(v29);
        dispatch_group_enter(v29);
      }
      v45[0] = 0;
      v45[1] = 0;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 0x40000000;
      aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_76;
      aBlock[3] = &__block_descriptor_tmp_77;
      aBlock[4] = v8;
      uint64_t v30 = _Block_copy(aBlock);
      xpc_object_t v44 = v30;
      uint64_t v42 = 0;
      abm::BasebandTracingTask::performWork((uint64_t)v8, &v46, 5, (uint64_t)v45, &v44, &v42);
      if (v30) {
        _Block_release(v30);
      }
      if (v29)
      {
        dispatch_group_leave(v29);
        dispatch_release(v29);
      }
    }
  }
  uint64_t v31 = v8[14];
  uint64_t v41 = v31;
  if (v31)
  {
    dispatch_retain(v31);
    dispatch_group_enter(v31);
  }
  if (!*(void *)a4)
  {
    uint64_t v32 = 0;
    unint64_t v33 = *(NSObject **)(a4 + 8);
    CFTypeRef v39 = 0;
    char v40 = v33;
    if (!v33) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  uint64_t v32 = _Block_copy(*(const void **)a4);
  unint64_t v33 = *(NSObject **)(a4 + 8);
  CFTypeRef v39 = v32;
  char v40 = v33;
  if (v33) {
LABEL_56:
  }
    dispatch_retain(v33);
LABEL_57:
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 1174405120;
  v36[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_2_78;
  v36[3] = &__block_descriptor_tmp_83_0;
  v36[4] = v8;
  CFTypeRef cf = v12;
  if (v12) {
    CFRetain(v12);
  }
  int v34 = _Block_copy(v36);
  dispatch_object_t v38 = v34;
  uint64_t v35 = 0;
  abm::BasebandTracingTask::performWork((uint64_t)v8, &v41, 9, (uint64_t)&v39, &v38, &v35);
  if (v34) {
    _Block_release(v34);
  }
  if (v33) {
    dispatch_release(v33);
  }
  if (v32) {
    _Block_release(v32);
  }
  if (v31)
  {
    dispatch_group_leave(v31);
    dispatch_release(v31);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }
  if ((SHIBYTE(v52[2]) & 0x80000000) == 0)
  {
LABEL_72:
    if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
    goto LABEL_73;
  }
  operator delete(v52[0]);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_73:
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_1A61A235C(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v2 - 152));
  if (v1) {
    dispatch_release(v1);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v2 - 112));
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v2 - 80);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_76(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 136);
  long long v4 = v2;
  if (v2) {
    dispatch_retain(v2);
  }
  uint64_t v3 = 0;
  abm::BasebandTracingTask::stopInternal(v1, &v4, &v3);
  if (v2)
  {
    dispatch_release(v2);
  }
}

void sub_1A61A2494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  long long v4 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  if (v2) {
    dispatch_release(v2);
  }
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_2_78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Snapshot: Begin", buf, 2u);
  }
  long long v4 = *(NSObject **)(v2 + 136);
  if (v4)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 136));
    dispatch_group_enter(v4);
  }
  uint64_t v5 = dispatch_group_create();
  *(void *)long long buf = 0;
  CFTypeID v13 = buf;
  uint64_t v14 = 0x2000000000;
  int v15 = -1;
  int DumpingFile_sync = abm::BasebandTracingTask::createDumpingFile_sync((abm::BasebandTracingTask *)v2);
  *((_DWORD *)v13 + 6) = DumpingFile_sync;
  xpc_object_t v11 = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  BOOL v7 = *(const void **)(a1 + 40);
  xpc_object_t v10 = v7;
  if (v7) {
    CFRetain(v7);
  }
  abm::BasebandTracingTask::snapshotInternal(v2, &v11, &v10);
  if (v7) {
    CFRelease(v7);
  }
  if (v5) {
    dispatch_release(v5);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_79;
  block[3] = &unk_1EFB0EDA8;
  void block[5] = v2;
  dispatch_group_t group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(group);
  }
  block[4] = buf;
  dispatch_group_notify(v5, *(dispatch_queue_t *)(v2 + 88), block);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  _Block_object_dispose(buf, 8);
  if (v5) {
    dispatch_release(v5);
  }
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
}

void sub_1A61A2688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  if (v10)
  {
    dispatch_release(v10);
    _Block_object_dispose((const void *)(v11 - 64), 8);
    dispatch_release(v10);
    if (!v9) {
      goto LABEL_6;
    }
  }
  else
  {
    _Block_object_dispose((const void *)(v11 - 64), 8);
    if (!v9) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  dispatch_group_leave(v9);
  dispatch_release(v9);
  goto LABEL_6;
}

uint64_t abm::BasebandTracingTask::createDumpingFile_sync(abm::BasebandTracingTask *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = abm::trace::kDumpIndicationFilePath;
  size_t v3 = strlen(abm::trace::kDumpIndicationFilePath);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v7 = v3 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    size_t v23 = v5;
    int64_t v24 = v8 | 0x8000000000000000;
    std::string __dst = (std::__fs::filesystem::path *)p_dst;
    goto LABEL_8;
  }
  HIBYTE(v24) = v3;
  p_dst = (void **)&__dst;
  if (v3) {
LABEL_8:
  }
    memmove(p_dst, v2, v5);
  *((unsigned char *)p_dst + v5) = 0;
  int v9 = SHIBYTE(v24);
  xpc_object_t v10 = __dst;
  if (v24 >= 0) {
    uint64_t v11 = (const std::__fs::filesystem::path *)&__dst;
  }
  else {
    uint64_t v11 = __dst;
  }
  if (remove(v11, v4)) {
    unlink((const char *)v11);
  }
  if (v9 < 0) {
    operator delete(v10);
  }
  CFTypeRef v12 = abm::trace::kDumpIndicationFilePath;
  size_t v13 = strlen(abm::trace::kDumpIndicationFilePath);
  if (v13 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v14 = v13;
  if (v13 >= 0x17)
  {
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    int v15 = (void **)operator new(v16 + 1);
    size_t v23 = v14;
    int64_t v24 = v17 | 0x8000000000000000;
    std::string __dst = (std::__fs::filesystem::path *)v15;
    goto LABEL_23;
  }
  HIBYTE(v24) = v13;
  int v15 = (void **)&__dst;
  if (v13) {
LABEL_23:
  }
    memmove(v15, v12, v14);
  *((unsigned char *)v15 + v14) = 0;
  if (v24 >= 0) {
    uint64_t v18 = (const char *)&__dst;
  }
  else {
    uint64_t v18 = (const char *)__dst;
  }
  uint64_t v19 = open(v18, 512, 420);
  if (SHIBYTE(v24) < 0)
  {
    operator delete(__dst);
    char v20 = *((void *)this + 5);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
      return v19;
    }
LABEL_31:
    LODWORD(__dst) = 67109120;
    HIDWORD(__dst) = v19;
    _os_log_impl(&dword_1A609F000, v20, OS_LOG_TYPE_DEFAULT, "#I Created dumping file. FD=%d", (uint8_t *)&__dst, 8u);
    return v19;
  }
  char v20 = *((void *)this + 5);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_31;
  }
  return v19;
}

void sub_1A61A295C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_79(uint64_t a1)
{
  uint64_t v2 = *(abm::BasebandTracingTask **)(a1 + 40);
  size_t v3 = *((void *)v2 + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v4 = 0;
    _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Snapshot: Complete", v4, 2u);
  }
  abm::BasebandTracingTask::removeDumpingFile_sync(v2, *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_87(void *a1, uint64_t a2, void **a3, uint64_t a4)
{
  size_t v5 = (std::__shared_weak_count *)a1[6];
  if (!v5) {
    return;
  }
  uint64_t v8 = a1[4];
  int v9 = std::__shared_weak_count::lock(v5);
  uint64_t v35 = v9;
  if (!v9) {
    return;
  }
  if (!a1[5])
  {
    uint64_t v16 = v9;
LABEL_48:
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    return;
  }
  xpc_object_t v10 = *(NSObject **)(v8 + 40);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1A609F000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to collect baseband logs alone", (uint8_t *)&buf, 2u);
  }
  HIBYTE(v37) = 13;
  strcpy((char *)&buf, "BasebandTrace");
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
  abm::BasebandTracingTask::getTrace((char *)&buf, v8, &v32);
  unint64_t v11 = v32;
  if (v32)
  {
    CFTypeRef v12 = *(NSObject **)(v8 + 112);
    uint64_t v31 = v12;
    if (v12)
    {
      dispatch_retain(v12);
      dispatch_group_enter(v12);
    }
    if (*(void *)a4)
    {
      size_t v13 = _Block_copy(*(const void **)a4);
      size_t v14 = *(NSObject **)(a4 + 8);
      char v29 = v13;
      uint64_t v30 = v14;
      if (!v14)
      {
LABEL_12:
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_88;
        aBlock[3] = &__block_descriptor_tmp_89_0;
        aBlock[4] = v8;
        void aBlock[5] = v11;
        size_t v26 = (std::__shared_weak_count *)v33;
        if (v33) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
        }
        int v15 = *a3;
        xpc_object_t object = v15;
        if (v15) {
          xpc_retain(v15);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        uint64_t v19 = _Block_copy(aBlock);
        xpc_object_t v28 = v19;
        int64_t v24 = 0;
        abm::BasebandTracingTask::performWork(v8, &v31, 9, (uint64_t)&v29, &v28, &v24);
        if (v19) {
          _Block_release(v19);
        }
        if (v14) {
          dispatch_release(v14);
        }
        if (v13) {
          _Block_release(v13);
        }
        if (v12)
        {
          dispatch_group_leave(v12);
          dispatch_release(v12);
        }
        xpc_release(object);
        xpc_object_t object = 0;
        char v20 = v26;
        if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
        goto LABEL_44;
      }
    }
    else
    {
      size_t v13 = 0;
      size_t v14 = *(NSObject **)(a4 + 8);
      char v29 = 0;
      uint64_t v30 = v14;
      if (!v14) {
        goto LABEL_12;
      }
    }
    dispatch_retain(v14);
    goto LABEL_12;
  }
  xpc_object_t v17 = xpc_null_create();
  if (*(void *)a4) {
    uint64_t v18 = _Block_copy(*(const void **)a4);
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v21 = *(NSObject **)(a4 + 8);
  *(void *)&long long buf = MEMORY[0x1E4F143A8];
  *((void *)&buf + 1) = 1174405120;
  char v37 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3;
  dispatch_object_t v38 = &__block_descriptor_tmp_197;
  if (!v18)
  {
    int v41 = -534716416;
    CFTypeRef v39 = 0;
    xpc_object_t v40 = v17;
    if (v17) {
      goto LABEL_36;
    }
LABEL_38:
    xpc_object_t v40 = xpc_null_create();
    goto LABEL_39;
  }
  uint64_t v22 = _Block_copy(v18);
  int v41 = -534716416;
  CFTypeRef v39 = v22;
  xpc_object_t v40 = v17;
  if (!v17) {
    goto LABEL_38;
  }
LABEL_36:
  xpc_retain(v17);
LABEL_39:
  dispatch_async(v21, &buf);
  xpc_release(v40);
  xpc_object_t v40 = 0;
  if (v39) {
    _Block_release(v39);
  }
  if (v18) {
    _Block_release(v18);
  }
  xpc_release(v17);
LABEL_44:
  size_t v23 = (std::__shared_weak_count *)v33;
  if (v33 && !atomic_fetch_add((atomic_ullong *volatile)(v33 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  uint64_t v16 = v35;
  if (v35) {
    goto LABEL_48;
  }
}

void sub_1A61A2E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::getTraceNoAssert(char *a1@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  abm::BasebandTracingTask::getTrace(a1, a2, a3);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_88(void *a1)
{
  uint64_t v2 = a1[4];
  size_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Snapshot BB: Begin", buf, 2u);
  }
  uint64_t v4 = a1[5];
  size_t v5 = *(NSObject **)(v2 + 136);
  dispatch_object_t v12 = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  CFTypeID v6 = (void *)a1[7];
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::bridge();
  CFTypeRef v7 = *(CFTypeRef *)buf;
  if (*(void *)buf && (CFTypeID v8 = CFGetTypeID(*(CFTypeRef *)buf), v8 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v7;
    CFRetain(v7);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(void *)v4 + 120))(v4, &v12, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
  xpc_release(object);
  if (v12) {
    dispatch_release(v12);
  }
}

void sub_1A61A2FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, const void *a11, uint64_t a12, const void *a13, dispatch_object_t a14)
{
  if (a14) {
    dispatch_release(a14);
  }
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c32_ZTSNSt3__110shared_ptrI5TraceEE56c15_ZTSN3xpc4dictE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (void *)a2[7];
  a1[7] = v4;
  if (v4) {
    return xpc_retain(v4);
  }
  xpc_object_t result = xpc_null_create();
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c32_ZTSNSt3__110shared_ptrI5TraceEE56c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_93(void *a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  uint64_t v5 = a1[4];
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  CFTypeID v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    uint64_t v30 = std::__shared_weak_count::lock(v6);
    if (!v30) {
      return;
    }
    uint64_t v29 = a1[5];
    if (v29)
    {
      int v9 = *(NSObject **)(v5 + 112);
      if (v9)
      {
        dispatch_retain(*(dispatch_object_t *)(v5 + 112));
        dispatch_group_enter(v9);
      }
      xpc_object_t v10 = dispatch_group_create();
      unint64_t v11 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1A609F000, v11, OS_LOG_TYPE_DEFAULT, "#I Request to print trace state", buf, 2u);
      }
      memset(&__p[1], 170, sizeof(std::string));
      xpc_object_t value = xpc_dictionary_get_value(*a3, "DumpStateReason");
      *(void *)long long buf = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        *(void *)long long buf = xpc_null_create();
      }
      xpc::dyn_cast_or_default();
      xpc_release(*(xpc_object_t *)buf);
      size_t v13 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1A609F000, v13, OS_LOG_TYPE_DEFAULT, "#I --------------- Trace state ---------------", buf, 2u);
      }
      v26[0] = MEMORY[0x1E4F143A8];
      v26[1] = 1174405120;
      v26[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_95;
      v26[3] = &__block_descriptor_tmp_97;
      dispatch_object_t v27 = v10;
      if (v10) {
        dispatch_retain(v10);
      }
      if (SHIBYTE(__p[1].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(__p, __p[1].__r_.__value_.__l.__data_, __p[1].__r_.__value_.__l.__size_);
      }
      else {
        __p[0] = __p[1];
      }
      size_t v14 = *(void **)(v5 + 152);
      *(void *)long long buf = MEMORY[0x1E4F143A8];
      uint64_t v32 = 0x40000000;
      unint64_t v33 = ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke;
      int v34 = &unk_1E5C48640;
      uint64_t v35 = v26;
      if (v14 != (void *)(v5 + 160))
      {
        do
        {
          v33((uint64_t)buf, (uint64_t)(v14 + 4));
          uint64_t v19 = (void *)v14[1];
          if (v19)
          {
            do
            {
              char v20 = v19;
              uint64_t v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              char v20 = (void *)v14[2];
              BOOL v21 = *v20 == (void)v14;
              size_t v14 = v20;
            }
            while (!v21);
          }
          size_t v14 = v20;
        }
        while (v20 != (void *)(v5 + 160));
      }
      int v15 = *(NSObject **)(v5 + 88);
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 1174405120;
      v22[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_98;
      v22[3] = &__block_descriptor_tmp_99_1;
      dispatch_group_t group = v9;
      if (v9)
      {
        dispatch_retain(v9);
        dispatch_group_enter(group);
      }
      uint64_t v16 = *(void **)a4;
      if (*(void *)a4) {
        uint64_t v16 = _Block_copy(v16);
      }
      xpc_object_t v17 = *(NSObject **)(a4 + 8);
      aBlock = v16;
      dispatch_object_t object = v17;
      if (v17) {
        dispatch_retain(v17);
      }
      dispatch_group_notify(v10, v15, v22);
      if (object) {
        dispatch_release(object);
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (v27) {
        dispatch_release(v27);
      }
      if (SHIBYTE(__p[1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[1].__r_.__value_.__l.__data_);
      }
      if (v10) {
        dispatch_release(v10);
      }
      if (v9)
      {
        dispatch_group_leave(v9);
        dispatch_release(v9);
      }
    }
  }
  uint64_t v18 = v30;
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1A61A34B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, dispatch_object_t object,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (object)
  {
    dispatch_release(object);
    if ((a32 & 0x80000000) == 0)
    {
LABEL_4:
      if (v34)
      {
        dispatch_release(v34);
        if (!v33)
        {
LABEL_6:
          std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
          _Unwind_Resume(a1);
        }
      }
      else if (!v33)
      {
        goto LABEL_6;
      }
      dispatch_group_leave(v33);
      dispatch_release(v33);
      std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
      _Unwind_Resume(a1);
    }
  }
  else if ((a32 & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(__p);
  goto LABEL_4;
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_95(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(NSObject **)(a1 + 32);
  dispatch_object_t object = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string __p = *(std::string *)(a1 + 40);
  }
  (*(void (**)(uint64_t, dispatch_object_t *, std::string *))(*(void *)v3 + 128))(v3, &object, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_1A61A3630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, dispatch_object_t object)
{
  if (!object) {
    _Unwind_Resume(exception_object);
  }
  dispatch_release(object);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c21_ZTSN8dispatch5groupE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  uint64_t v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1A61A36E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(NSObject **)(v1 + 32);
  if (v3) {
    dispatch_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c21_ZTSN8dispatch5groupE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    uint64_t v2 = *(NSObject **)(a1 + 32);
    if (!v2) {
      return;
    }
  }
  else
  {
    uint64_t v2 = *(NSObject **)(a1 + 32);
    if (!v2) {
      return;
    }
  }

  dispatch_release(v2);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_98(uint64_t a1)
{
  xpc_object_t v2 = xpc_null_create();
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    uint64_t v4 = _Block_copy(v3);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(NSObject **)(a1 + 48);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3;
  block[3] = &__block_descriptor_tmp_197;
  if (v4)
  {
    int v9 = 0;
    aBlock = _Block_copy(v4);
    xpc_object_t object = v2;
    if (v2)
    {
LABEL_6:
      xpc_retain(v2);
      goto LABEL_9;
    }
  }
  else
  {
    int v9 = 0;
    aBlock = 0;
    xpc_object_t object = v2;
    if (v2) {
      goto LABEL_6;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_9:
  dispatch_async(v5, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v4) {
    _Block_release(v4);
  }
  xpc_release(v2);
}

void __copy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE40c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[4];
  a1[4] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = a1[4];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  long long v6 = (void *)a2[5];
  if (v6) {
    long long v6 = _Block_copy(v6);
  }
  CFTypeRef v7 = a2[6];
  a1[5] = v6;
  a1[6] = v7;
  if (v7)
  {
    dispatch_retain(v7);
  }
}

void __destroy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE40c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(void *a1)
{
  xpc_object_t v2 = a1[6];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = a1[4];
  if (v4)
  {
    dispatch_group_leave(v4);
    uint64_t v5 = a1[4];
    if (v5)
    {
      dispatch_release(v5);
    }
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_103(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    uint64_t v7 = a1[4];
    CFTypeID v8 = std::__shared_weak_count::lock(v5);
    if (v8)
    {
      int v9 = v8;
      if (a1[5])
      {
        xpc_object_t v10 = *(NSObject **)(v7 + 40);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1A609F000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to get last crash reason", buf, 2u);
        }
        unint64_t v11 = *(NSObject **)(v7 + 112);
        if (v11)
        {
          dispatch_retain(*(dispatch_object_t *)(v7 + 112));
          dispatch_group_enter(v11);
        }
        v15[0] = MEMORY[0x1E4F143A8];
        v15[1] = 1174405120;
        void v15[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_104;
        v15[3] = &__block_descriptor_tmp_105;
        v15[4] = v7;
        dispatch_group_t group = v11;
        if (v11)
        {
          dispatch_retain(v11);
          dispatch_group_enter(group);
        }
        dispatch_object_t v12 = *(void **)a4;
        if (*(void *)a4) {
          dispatch_object_t v12 = _Block_copy(v12);
        }
        size_t v13 = (uint64_t *)(v7 + 72);
        size_t v14 = *(NSObject **)(a4 + 8);
        aBlock = v12;
        dispatch_object_t object = v14;
        if (v14) {
          dispatch_retain(v14);
        }
        ctu::SharedSynchronizable<abm::HelperTask>::execute_wrapped(v13, (uint64_t)v15);
        if (object) {
          dispatch_release(object);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (group)
        {
          dispatch_group_leave(group);
          if (group) {
            dispatch_release(group);
          }
        }
        if (v11)
        {
          dispatch_group_leave(v11);
          dispatch_release(v11);
        }
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_104(void *a1)
{
  uint64_t v2 = a1[4];
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v3) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  uint64_t v5 = (const char *)(v2 + 224);
  if (*(char *)(v2 + 247) < 0) {
    uint64_t v5 = *(const char **)v5;
  }
  xpc_object_t v6 = xpc_string_create(v5);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "BasebandCrashReason", v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  if (v4)
  {
    xpc_retain(v4);
    xpc_object_t v8 = v4;
    int v9 = (const void *)a1[6];
    if (v9)
    {
LABEL_13:
      xpc_object_t v10 = _Block_copy(v9);
      goto LABEL_16;
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    int v9 = (const void *)a1[6];
    if (v9) {
      goto LABEL_13;
    }
  }
  xpc_object_t v10 = 0;
LABEL_16:
  unint64_t v11 = a1[7];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3;
  block[3] = &__block_descriptor_tmp_197;
  if (v10)
  {
    int v15 = 0;
    aBlock = _Block_copy(v10);
    xpc_object_t object = v8;
    if (v8)
    {
LABEL_18:
      xpc_retain(v8);
      goto LABEL_21;
    }
  }
  else
  {
    int v15 = 0;
    aBlock = 0;
    xpc_object_t object = v8;
    if (v8) {
      goto LABEL_18;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_21:
  dispatch_async(v11, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v10) {
    _Block_release(v10);
  }
  xpc_release(v8);
  xpc_release(v4);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(void *a1, void *a2)
{
  xpc_object_t v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  xpc_object_t v6 = (void *)a2[6];
  if (v6) {
    xpc_object_t v6 = _Block_copy(v6);
  }
  xpc_object_t v7 = a2[7];
  a1[6] = v6;
  a1[7] = v7;
  if (v7)
  {
    dispatch_retain(v7);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(void *a1)
{
  uint64_t v2 = a1[7];
  if (v2) {
    dispatch_release(v2);
  }
  xpc_object_t v3 = (const void *)a1[6];
  if (v3) {
    _Block_release(v3);
  }
  xpc_object_t v4 = a1[5];
  if (v4)
  {
    dispatch_group_leave(v4);
    uint64_t v5 = a1[5];
    if (v5)
    {
      dispatch_release(v5);
    }
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_109(void *a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  xpc_object_t object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (!v5) {
    return;
  }
  uint64_t v8 = a1[4];
  int v9 = std::__shared_weak_count::lock(v5);
  BOOL v21 = v9;
  if (!v9) {
    return;
  }
  xpc_object_t v10 = v9;
  if (!a1[5]) {
    goto LABEL_23;
  }
  memset(&__p, 170, sizeof(__p));
  xpc_object_t value = xpc_dictionary_get_value(*a3, "BasebandCrashReason");
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  dispatch_object_t v12 = *(NSObject **)(v8 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    LODWORD(object[0]) = 136446210;
    *(xpc_object_t *)((char *)object + 4) = p_p;
    _os_log_impl(&dword_1A609F000, v12, OS_LOG_TYPE_DEFAULT, "#I Setting last crash reason to %{public}s", (uint8_t *)object, 0xCu);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v18 = __p;
  }
  if (!*(void *)a4)
  {
    size_t v14 = 0;
    int v15 = *(NSObject **)(a4 + 8);
    uint64_t v16 = 0;
    xpc_object_t v17 = v15;
    if (!v15) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  size_t v14 = _Block_copy(*(const void **)a4);
  int v15 = *(NSObject **)(a4 + 8);
  uint64_t v16 = v14;
  xpc_object_t v17 = v15;
  if (v15) {
LABEL_16:
  }
    dispatch_retain(v15);
LABEL_17:
  abm::BasebandTracingTask::setLastCrashReason(v8, (uint64_t)&v18, (uint64_t)&v16);
  if (v15) {
    dispatch_release(v15);
  }
  if (v14) {
    _Block_release(v14);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return;
      }
      goto LABEL_24;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_24:
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_1A61A40A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,xpc_object_t object)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::setLastCrashReason(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  v8[2] = ___ZN3abm19BasebandTracingTask18setLastCrashReasonENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_158;
  v8[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v5 = *(void **)a3;
    if (!*(void *)a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string __p = *(std::string *)a2;
  uint64_t v5 = *(void **)a3;
  if (*(void *)a3) {
LABEL_5:
  }
    uint64_t v5 = _Block_copy(v5);
LABEL_6:
  xpc_object_t v6 = (uint64_t *)(a1 + 72);
  xpc_object_t v7 = *(NSObject **)(a3 + 8);
  aBlock = v5;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  ctu::SharedSynchronizable<abm::HelperTask>::execute_wrapped(v6, (uint64_t)v8);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_113(void *a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (!v5) {
    return;
  }
  uint64_t v8 = a1[4];
  int v9 = std::__shared_weak_count::lock(v5);
  xpc_object_t v46 = v9;
  if (!v9) {
    return;
  }
  xpc_object_t v10 = v9;
  if (!a1[5]) {
    goto LABEL_54;
  }
  memset(&v44, 170, sizeof(v44));
  xpc_object_t value = xpc_dictionary_get_value(*a3, "TraceName");
  *(void *)long long buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)long long buf = xpc_null_create();
  }
  xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)buf);
  memset(&v43, 170, sizeof(v43));
  xpc_object_t v12 = xpc_dictionary_get_value(*a3, "PropertyKey");
  *(void *)long long buf = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    *(void *)long long buf = xpc_null_create();
  }
  xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)buf);
  memset(&__p, 170, sizeof(__p));
  xpc_object_t v13 = xpc_dictionary_get_value(*a3, "PropertyValue");
  *(void *)long long buf = v13;
  if (v13) {
    xpc_retain(v13);
  }
  else {
    *(void *)long long buf = xpc_null_create();
  }
  xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)buf);
  size_t v14 = *(NSObject **)(v8 + 40);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = &v44;
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v15 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    uint64_t v16 = &v43;
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v16 = (std::string *)v43.__r_.__value_.__r.__words[0];
    }
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v16;
    *(_WORD *)&buf[22] = 2080;
    uint64_t v48 = p_p;
    _os_log_impl(&dword_1A609F000, v14, OS_LOG_TYPE_DEFAULT, "#I Request to set property: name=%s, key=%s, value=%s", buf, 0x20u);
  }
  std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v44.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::size_type v19 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v19 = v43.__r_.__value_.__l.__size_;
    }
    if (v19)
    {
      std::string::size_type v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v20 = __p.__r_.__value_.__l.__size_;
      }
      if (v20)
      {
        BOOL v21 = *(NSObject **)(v8 + 112);
        int v41 = v21;
        if (v21)
        {
          dispatch_retain(v21);
          dispatch_group_enter(v21);
        }
        uint64_t v22 = *(void **)a4;
        if (*(void *)a4) {
          uint64_t v22 = _Block_copy(v22);
        }
        size_t v23 = *(NSObject **)(a4 + 8);
        CFTypeRef v39 = v22;
        dispatch_object_t object = v23;
        if (v23) {
          dispatch_retain(v23);
        }
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_114;
        aBlock[3] = &__block_descriptor_tmp_117_0;
        aBlock[4] = v8;
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v33, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
        }
        else {
          std::string v33 = v44;
        }
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v34, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
        }
        else {
          std::string v34 = v43;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v35, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else {
          std::string v35 = __p;
        }
        xpc_object_t v28 = *(void **)a4;
        if (*(void *)a4) {
          xpc_object_t v28 = _Block_copy(v28);
        }
        uint64_t v29 = *(NSObject **)(a4 + 8);
        char v36 = v28;
        dispatch_object_t v37 = v29;
        if (v29) {
          dispatch_retain(v29);
        }
        uint64_t v30 = _Block_copy(aBlock);
        dispatch_object_t v38 = v30;
        uint64_t v31 = 0;
        abm::BasebandTracingTask::performWork(v8, &v41, 10, (uint64_t)&v39, &v38, &v31);
        if (v30) {
          _Block_release(v30);
        }
        if (object) {
          dispatch_release(object);
        }
        if (v39) {
          _Block_release(v39);
        }
        if (v21)
        {
          dispatch_group_leave(v21);
          dispatch_release(v21);
        }
        if (v37) {
          dispatch_release(v37);
        }
        if (v36) {
          _Block_release(v36);
        }
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v35.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_86:
            if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_51;
            }
LABEL_90:
            operator delete(v33.__r_.__value_.__l.__data_);
            goto LABEL_51;
          }
        }
        else if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_86;
        }
        operator delete(v34.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_51;
        }
        goto LABEL_90;
      }
    }
  }
  xpc_object_t v24 = xpc_null_create();
  if (*(void *)a4) {
    uint64_t v25 = _Block_copy(*(const void **)a4);
  }
  else {
    uint64_t v25 = 0;
  }
  size_t v26 = *(NSObject **)(a4 + 8);
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  *(void *)&uint8_t buf[8] = 1174405120;
  *(void *)&uint8_t buf[16] = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3;
  uint64_t v48 = (std::string *)&__block_descriptor_tmp_197;
  if (!v25)
  {
    int v51 = -534716414;
    xpc_object_t v49 = 0;
    xpc_object_t v50 = v24;
    if (v24) {
      goto LABEL_43;
    }
LABEL_45:
    xpc_object_t v50 = xpc_null_create();
    goto LABEL_46;
  }
  dispatch_object_t v27 = _Block_copy(v25);
  int v51 = -534716414;
  xpc_object_t v49 = v27;
  xpc_object_t v50 = v24;
  if (!v24) {
    goto LABEL_45;
  }
LABEL_43:
  xpc_retain(v24);
LABEL_46:
  dispatch_async(v26, buf);
  xpc_release(v50);
  xpc_object_t v50 = 0;
  if (v49) {
    _Block_release(v49);
  }
  if (v25) {
    _Block_release(v25);
  }
  xpc_release(v24);
LABEL_51:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_53;
    }
LABEL_58:
    operator delete(v43.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_54:
      if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return;
      }
      goto LABEL_55;
    }
    goto LABEL_59;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_58;
  }
LABEL_53:
  if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_54;
  }
LABEL_59:
  operator delete(v44.__r_.__value_.__l.__data_);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_55:
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_1A61A480C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      dispatch::callback<void({block_pointer})(int,xpc::dict)>::~callback((uint64_t)&a33);
      if (!v41) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  dispatch::callback<void({block_pointer})(int,xpc::dict)>::~callback((uint64_t)&a33);
  if (!v41)
  {
LABEL_4:
    if ((a41 & 0x80000000) == 0)
    {
LABEL_10:
      if (*(char *)(v42 - 153) < 0) {
        operator delete(*(void **)(v42 - 176));
      }
      if (*(char *)(v42 - 129) < 0) {
        operator delete(*(void **)(v42 - 152));
      }
      std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v42 - 128);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a36);
    goto LABEL_10;
  }
LABEL_8:
  dispatch_group_leave(v41);
  dispatch_release(v41);
  if ((a41 & 0x80000000) == 0) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_114(void *a1)
{
  uint64_t v2 = (dispatch_queue_t *)a1[4];
  xpc_object_t v3 = v2[17];
  dispatch_object_t v12 = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  char v4 = ((uint64_t (*)(dispatch_queue_t *, dispatch_object_t *, void *, void *, void *))(*v2)[10].isa)(v2, &v12, a1 + 5, a1 + 8, a1 + 11);
  if (v12) {
    dispatch_release(v12);
  }
  uint64_t v5 = (const void *)a1[14];
  if (v5 && a1[15])
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 1174405120;
    v8[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_2_115;
    v8[3] = &__block_descriptor_tmp_116_0;
    xpc_object_t v6 = _Block_copy(v5);
    xpc_object_t v7 = a1[15];
    aBlock = v6;
    dispatch_object_t object = v7;
    if (v7) {
      dispatch_retain(v7);
    }
    char v11 = v4;
    dispatch_group_notify(v2[17], v2[11], v8);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
  }
}

void sub_1A61A4AAC(_Unwind_Exception *exception_object)
{
  xpc_object_t v3 = *(NSObject **)(v1 - 40);
  if (v3) {
    dispatch_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_2_115(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    int v2 = 0;
  }
  else {
    int v2 = -534716416;
  }
  xpc_object_t v3 = xpc_null_create();
  char v4 = *(const void **)(a1 + 32);
  if (v4) {
    uint64_t v5 = _Block_copy(v4);
  }
  else {
    uint64_t v5 = 0;
  }
  xpc_object_t v6 = *(NSObject **)(a1 + 40);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3;
  block[3] = &__block_descriptor_tmp_197;
  if (v5)
  {
    int v10 = v2;
    aBlock = _Block_copy(v5);
    xpc_object_t object = v3;
    if (v3)
    {
LABEL_9:
      xpc_retain(v3);
      goto LABEL_12;
    }
  }
  else
  {
    int v10 = v2;
    aBlock = 0;
    xpc_object_t object = v3;
    if (v3) {
      goto LABEL_9;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_12:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v3);
}

void __copy_helper_block_e8_32c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  char v4 = *(void **)(a2 + 32);
  if (v4) {
    char v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_32c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 40);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_object_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    _Block_release(v3);
  }
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE112c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    uint64_t v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
    uint64_t v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)(a2 + 64);
      v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 80);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
LABEL_6:
  xpc_object_t v7 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  int v9 = *(void **)(a2 + 112);
  if (v9) {
    int v9 = _Block_copy(v9);
  }
  int v10 = *(NSObject **)(a2 + 120);
  *(void *)(a1 + 112) = v9;
  *(void *)(a1 + 120) = v10;
  if (v10)
  {
    dispatch_retain(v10);
  }
}

void sub_1A61A4D9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 87) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 63) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE112c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 120);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_object_t v3 = *(const void **)(a1 + 112);
  if (v3) {
    _Block_release(v3);
  }
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_10:
    operator delete(*(void **)(a1 + 64));
    if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    goto LABEL_10;
  }
LABEL_7:
  if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
    return;
  }
LABEL_11:
  long long v4 = *(void **)(a1 + 40);

  operator delete(v4);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_121(void *a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1[4];
  uint64_t v45 = 0;
  xpc_object_t v46 = 0;
  long long v6 = (std::__shared_weak_count *)a1[6];
  if (!v6) {
    goto LABEL_81;
  }
  xpc_object_t v46 = std::__shared_weak_count::lock(v6);
  if (!v46) {
    return;
  }
  uint64_t v45 = a1[5];
  if (!v45) {
    goto LABEL_81;
  }
  int v9 = *(NSObject **)(v5 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A609F000, v9, OS_LOG_TYPE_DEFAULT, "#I Request to get property", buf, 2u);
  }
  int v10 = *(NSObject **)(v5 + 112);
  if (v10)
  {
    dispatch_retain(*(dispatch_object_t *)(v5 + 112));
    dispatch_group_enter(v10);
  }
  memset(v44, 170, sizeof(v44));
  xpc_object_t value = xpc_dictionary_get_value(*a3, "TraceName");
  *(void *)long long buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)long long buf = xpc_null_create();
  }
  xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)buf);
  memset(v43, 170, sizeof(v43));
  xpc_object_t v12 = xpc_dictionary_get_value(*a3, "PropertyKey");
  *(void *)long long buf = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    *(void *)long long buf = xpc_null_create();
  }
  xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)buf);
  xpc_object_t v13 = (void *)HIBYTE(v44[2]);
  if (SHIBYTE(v44[2]) < 0) {
    xpc_object_t v13 = v44[1];
  }
  if (!v13) {
    goto LABEL_34;
  }
  size_t v14 = (void *)HIBYTE(v43[2]);
  if (SHIBYTE(v43[2]) < 0) {
    size_t v14 = v43[1];
  }
  if (!v14)
  {
LABEL_34:
    xpc_object_t v23 = xpc_null_create();
    if (*(void *)a4) {
      xpc_object_t v24 = _Block_copy(*(const void **)a4);
    }
    else {
      xpc_object_t v24 = 0;
    }
    uint64_t v25 = *(NSObject **)(a4 + 8);
    *(void *)long long buf = MEMORY[0x1E4F143A8];
    *(void *)uint64_t v48 = 1174405120;
    *(void *)&v48[8] = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3;
    *(void *)&v48[16] = &__block_descriptor_tmp_197;
    if (v24)
    {
      size_t v26 = _Block_copy(v24);
      int v50 = -534716414;
      *(void *)&v48[24] = v26;
      xpc_object_t object = v23;
      if (v23)
      {
LABEL_39:
        xpc_retain(v23);
LABEL_42:
        dispatch_async(v25, buf);
        xpc_release(object);
        xpc_object_t object = 0;
        if (*(void *)&v48[24]) {
          _Block_release(*(const void **)&v48[24]);
        }
        if (v24) {
          _Block_release(v24);
        }
        xpc_release(v23);
        goto LABEL_77;
      }
    }
    else
    {
      int v50 = -534716414;
      *(void *)&v48[24] = 0;
      xpc_object_t object = v23;
      if (v23) {
        goto LABEL_39;
      }
    }
    xpc_object_t object = xpc_null_create();
    goto LABEL_42;
  }
  xpc_object_t v15 = xpc_null_create();
  unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
  abm::BasebandTracingTask::getTrace((char *)v44, v5, &v41);
  if (v41)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v40 = 0;
    int v16 = (*(uint64_t (**)(unint64_t, void **, void **))(*(void *)v41 + 144))(v41, v43, __p);
    xpc_object_t v17 = *(NSObject **)(v5 + 40);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      std::string v18 = v44;
      if (SHIBYTE(v44[2]) < 0) {
        std::string v18 = (void **)v44[0];
      }
      std::string::size_type v19 = v43;
      if (SHIBYTE(v43[2]) < 0) {
        std::string::size_type v19 = (void **)v43[0];
      }
      std::string::size_type v20 = __p;
      if (v40 < 0) {
        std::string::size_type v20 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v16;
      *(_WORD *)uint64_t v48 = 2080;
      *(void *)&v48[2] = v18;
      *(_WORD *)&v48[10] = 2080;
      *(void *)&v48[12] = v19;
      *(_WORD *)&v48[20] = 2080;
      *(void *)&v48[22] = v20;
      _os_log_impl(&dword_1A609F000, v17, OS_LOG_TYPE_DEFAULT, "#I Get property; Success=%d Trace=%s Key=%s Value=%s",
        buf,
        0x26u);
    }
    if (v16)
    {
      xpc_object_t v21 = xpc_dictionary_create(0, 0, 0);
      if (v21 || (xpc_object_t v21 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A6275E60](v21) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v21);
          xpc_object_t v22 = v21;
        }
        else
        {
          xpc_object_t v22 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v22 = xpc_null_create();
        xpc_object_t v21 = 0;
      }
      xpc_release(v21);
      xpc_object_t v28 = xpc_null_create();
      xpc_release(v15);
      xpc_release(v28);
      if (v40 >= 0) {
        uint64_t v29 = __p;
      }
      else {
        uint64_t v29 = (void **)__p[0];
      }
      xpc_object_t v30 = xpc_string_create((const char *)v29);
      if (!v30) {
        xpc_object_t v30 = xpc_null_create();
      }
      xpc_dictionary_set_value(v22, "PropertyValue", v30);
      xpc_object_t v31 = xpc_null_create();
      xpc_release(v30);
      xpc_release(v31);
      int v27 = 0;
      xpc_object_t v15 = v22;
    }
    else
    {
      int v27 = -534716416;
    }
    if (SHIBYTE(v40) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    int v27 = -534716416;
  }
  if (v15)
  {
    xpc_retain(v15);
    xpc_object_t v32 = v15;
    std::string v33 = *(const void **)a4;
    if (*(void *)a4)
    {
LABEL_61:
      std::string v34 = _Block_copy(v33);
      goto LABEL_64;
    }
  }
  else
  {
    xpc_object_t v32 = xpc_null_create();
    std::string v33 = *(const void **)a4;
    if (*(void *)a4) {
      goto LABEL_61;
    }
  }
  std::string v34 = 0;
LABEL_64:
  std::string v35 = *(NSObject **)(a4 + 8);
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  *(void *)uint64_t v48 = 1174405120;
  *(void *)&v48[8] = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3;
  *(void *)&v48[16] = &__block_descriptor_tmp_197;
  if (!v34)
  {
    int v50 = v27;
    *(void *)&v48[24] = 0;
    xpc_object_t object = v32;
    if (v32) {
      goto LABEL_66;
    }
LABEL_68:
    xpc_object_t object = xpc_null_create();
    goto LABEL_69;
  }
  char v36 = _Block_copy(v34);
  int v50 = v27;
  *(void *)&v48[24] = v36;
  xpc_object_t object = v32;
  if (!v32) {
    goto LABEL_68;
  }
LABEL_66:
  xpc_retain(v32);
LABEL_69:
  dispatch_async(v35, buf);
  xpc_release(object);
  xpc_object_t object = 0;
  if (*(void *)&v48[24]) {
    _Block_release(*(const void **)&v48[24]);
  }
  if (v34) {
    _Block_release(v34);
  }
  xpc_release(v32);
  dispatch_object_t v37 = (std::__shared_weak_count *)v42;
  if (v42 && !atomic_fetch_add((atomic_ullong *volatile)(v42 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  xpc_release(v15);
LABEL_77:
  if (SHIBYTE(v43[2]) < 0)
  {
    operator delete(v43[0]);
    if ((SHIBYTE(v44[2]) & 0x80000000) == 0)
    {
LABEL_79:
      if (!v10) {
        goto LABEL_81;
      }
      goto LABEL_80;
    }
  }
  else if ((SHIBYTE(v44[2]) & 0x80000000) == 0)
  {
    goto LABEL_79;
  }
  operator delete(v44[0]);
  if (v10)
  {
LABEL_80:
    dispatch_group_leave(v10);
    dispatch_release(v10);
  }
LABEL_81:
  dispatch_object_t v38 = v46;
  if (v46)
  {
    if (!atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_1A61A550C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_125(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    uint64_t v7 = a1[4];
    long long v8 = std::__shared_weak_count::lock(v5);
    if (v8)
    {
      int v9 = v8;
      if (!a1[5])
      {
LABEL_24:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      int v10 = *(NSObject **)(v7 + 112);
      if (v10)
      {
        dispatch_retain(*(dispatch_object_t *)(v7 + 112));
        dispatch_group_enter(v10);
      }
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v12 = *(NSObject **)(v7 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v18[0]) = 0;
        _os_log_impl(&dword_1A609F000, v12, OS_LOG_TYPE_DEFAULT, "#I Still alive", (uint8_t *)v18, 2u);
      }
      if (v11)
      {
        xpc_retain(v11);
        xpc_object_t v13 = v11;
        size_t v14 = *(const void **)a4;
        if (*(void *)a4)
        {
LABEL_10:
          xpc_object_t v15 = _Block_copy(v14);
          goto LABEL_13;
        }
      }
      else
      {
        xpc_object_t v13 = xpc_null_create();
        size_t v14 = *(const void **)a4;
        if (*(void *)a4) {
          goto LABEL_10;
        }
      }
      xpc_object_t v15 = 0;
LABEL_13:
      int v16 = *(NSObject **)(a4 + 8);
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 1174405120;
      v18[2] = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3;
      v18[3] = &__block_descriptor_tmp_197;
      if (v15)
      {
        xpc_object_t v17 = _Block_copy(v15);
        int v21 = 0;
        aBlock = v17;
        xpc_object_t object = v13;
        if (v13)
        {
LABEL_15:
          xpc_retain(v13);
LABEL_18:
          dispatch_async(v16, v18);
          xpc_release(object);
          xpc_object_t object = 0;
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v15) {
            _Block_release(v15);
          }
          xpc_release(v13);
          xpc_release(v11);
          if (v10)
          {
            dispatch_group_leave(v10);
            dispatch_release(v10);
          }
          goto LABEL_24;
        }
      }
      else
      {
        int v21 = 0;
        aBlock = 0;
        xpc_object_t object = v13;
        if (v13) {
          goto LABEL_15;
        }
      }
      xpc_object_t object = xpc_null_create();
      goto LABEL_18;
    }
  }
}

void abm::BasebandTracingTask::stop_sync(abm::BasebandTracingTask *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  BOOL v20 = 0;
  char v19 = 15;
  strcpy((char *)v18, "KeepScratchLogs");
  memset(&__p, 0, sizeof(__p));
  char v23 = 7;
  strcpy((char *)aBlock, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  uint64_t v6 = defaults::get((char *)aBlock, (char *)v18, &buf);
  int v7 = v6;
  if (v6)
  {
    prop::file::get<std::string>((const void **)aBlock, (uint64_t)v18, (uint64_t)&buf, &v24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v24;
  }
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v23 & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_14:
    operator delete(aBlock[0]);
    if (!v7) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
  if (v23 < 0) {
    goto LABEL_14;
  }
LABEL_11:
  if (v7) {
LABEL_15:
  }
    uint64_t v6 = util::convert<BOOL>(&__p, &v20, 0);
LABEL_16:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_18:
      if (v20) {
        goto LABEL_19;
      }
      goto LABEL_43;
    }
  }
  else if ((v19 & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(v18[0]);
  if (v20)
  {
LABEL_19:
    uint64_t v8 = 10000000;
    int v9 = *((void *)this + 5);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_43:
  capabilities::debug::environment((capabilities::debug *)v6);
  int v14 = capabilities::debug::operator&();
  BOOL v20 = v14 != 0;
  if (v14) {
    uint64_t v8 = 10000000;
  }
  else {
    uint64_t v8 = 0;
  }
  int v9 = *((void *)this + 5);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
LABEL_20:
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1A609F000, v9, OS_LOG_TYPE_DEFAULT, "#I Request to shutdown traces -- from SIGTERM", (uint8_t *)&buf, 2u);
  }
LABEL_21:
  int v10 = *((void *)this + 14);
  if (v10)
  {
    dispatch_retain(*((dispatch_object_t *)this + 14));
    dispatch_group_enter(v10);
  }
  uint64_t v11 = *((void *)this + 37);
  std::string::size_type v12 = *((void *)this + 11);
  if (v12) {
    dispatch_retain(*((dispatch_object_t *)this + 11));
  }
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1174405120;
  void v15[2] = ___ZN3abm19BasebandTracingTask9stop_syncEv_block_invoke;
  v15[3] = &__block_descriptor_tmp_142;
  v15[4] = this;
  void v15[5] = v3;
  int v16 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  dispatch_group_t group = v10;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(group);
  }
  xpc_object_t v13 = _Block_copy(v15);
  strcpy((char *)&buf, "Shutdown timer");
  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7) = 0;
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = 14;
  v24.__r_.__value_.__r.__words[0] = v12;
  aBlock[0] = v13;
  (*(void (**)(uint64_t, std::string *, void, uint64_t, std::string *, void **))(*(void *)v11 + 8))(v11, &buf, 0, v8, &v24, aBlock);
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  if (v24.__r_.__value_.__r.__words[0]) {
    dispatch_release((dispatch_object_t)v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1A61A5C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, dispatch_group_t group, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *aBlock,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a29 < 0)
  {
    operator delete(a24);
    if ((a22 & 0x80000000) == 0)
    {
LABEL_4:
      std::__shared_weak_count::__release_weak(v36);
      _Unwind_Resume(a1);
    }
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(__p);
  goto LABEL_4;
}

void ___ZN3abm19BasebandTracingTask9stop_syncEv_block_invoke(void *a1)
{
  int v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return;
  }
  uint64_t v3 = (void *)a1[4];
  long long v4 = std::__shared_weak_count::lock(v2);
  xpc_object_t v46 = v4;
  if (!v4) {
    return;
  }
  if (!a1[5])
  {
    uint64_t v8 = v4;
LABEL_69:
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    return;
  }
  uint64_t v5 = v3[5];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1A609F000, v5, OS_LOG_TYPE_DEFAULT, "#I Shutting down traces", buf, 2u);
  }
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v6) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v6);
      xpc_object_t v7 = v6;
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    xpc_object_t v6 = 0;
  }
  xpc_release(v6);
  xpc_object_t v9 = xpc_string_create("kShutdownAllTrace");
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "kKeyTraceAction", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  Timestamp::Timestamp((Timestamp *)&v41);
  Timestamp::asString(v11, 0, 9, buf);
  if (v44 >= 0) {
    std::string::size_type v12 = buf;
  }
  else {
    std::string::size_type v12 = *(uint8_t **)buf;
  }
  xpc_object_t v13 = xpc_string_create((const char *)v12);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E4F4C4C8], v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (v44 < 0)
  {
    operator delete(*(void **)buf);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v41, v42);
    xpc_object_t v41 = v7;
    if (v7) {
      goto LABEL_22;
    }
  }
  else
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v41, v42);
    xpc_object_t v41 = v7;
    if (v7)
    {
LABEL_22:
      xpc_retain(v7);
      goto LABEL_25;
    }
  }
  xpc_object_t v41 = xpc_null_create();
LABEL_25:
  xpc::bridge();
  xpc_object_t v15 = *(uint8_t **)buf;
  if (!*(void *)buf) {
    goto LABEL_31;
  }
  CFTypeID v16 = CFGetTypeID(*(CFTypeRef *)buf);
  if (v16 != CFDictionaryGetTypeID())
  {
    xpc_object_t v15 = 0;
    xpc_object_t v17 = *(uint8_t **)buf;
    if (!*(void *)buf) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  CFRetain(v15);
  xpc_object_t v17 = *(uint8_t **)buf;
  if (*(void *)buf) {
LABEL_30:
  }
    CFRelease(v17);
LABEL_31:
  xpc_release(v41);
  std::string v18 = v3[17];
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 1174405120;
  v38[2] = ___ZN3abm19BasebandTracingTask9stop_syncEv_block_invoke_130;
  v38[3] = &__block_descriptor_tmp_133;
  char v19 = a1[7];
  v38[4] = v3;
  dispatch_group_t group = v19;
  if (v19)
  {
    dispatch_retain(v19);
    dispatch_group_enter(group);
  }
  CFTypeRef v40 = v15;
  if (v15) {
    CFRetain(v15);
  }
  ctu::SharedSynchronizable<abm::HelperTask>::execute_wrapped(v3 + 9, v18, (uint64_t)v38);
  BOOL v20 = a1[7];
  dispatch_object_t v37 = v20;
  if (v20)
  {
    dispatch_retain(v20);
    dispatch_group_enter(v20);
  }
  v36[0] = 0;
  v36[1] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN3abm19BasebandTracingTask9stop_syncEv_block_invoke_134;
  aBlock[3] = &__block_descriptor_tmp_137;
  aBlock[4] = v3;
  CFTypeRef v34 = v15;
  if (v15) {
    CFRetain(v15);
  }
  int v21 = _Block_copy(aBlock);
  std::string v35 = v21;
  xpc_object_t v32 = 0;
  abm::BasebandTracingTask::performWork((uint64_t)v3, &v37, 6, (uint64_t)v36, &v35, &v32);
  if (v21) {
    _Block_release(v21);
  }
  if (v20)
  {
    dispatch_group_leave(v20);
    dispatch_release(v20);
  }
  xpc_object_t v22 = a1[7];
  xpc_object_t v31 = v22;
  if (v22)
  {
    dispatch_retain(v22);
    dispatch_group_enter(v22);
    char v23 = a1[7];
  }
  else
  {
    char v23 = 0;
  }
  v30[0] = 0;
  v30[1] = 0;
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 1174405120;
  v26[2] = ___ZN3abm19BasebandTracingTask9stop_syncEv_block_invoke_138;
  v26[3] = &__block_descriptor_tmp_141_0;
  void v26[4] = v3;
  dispatch_group_t object = v23;
  if (v23)
  {
    dispatch_retain(v23);
    dispatch_group_enter(object);
  }
  CFTypeRef cf = v15;
  if (v15) {
    CFRetain(v15);
  }
  std::string v24 = _Block_copy(v26);
  uint64_t v29 = v24;
  uint64_t v25 = 0;
  abm::BasebandTracingTask::performWork((uint64_t)v3, &v31, 6, (uint64_t)v30, &v29, &v25);
  if (v24) {
    _Block_release(v24);
  }
  if (v22)
  {
    dispatch_group_leave(v22);
    dispatch_release(v22);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (object)
  {
    dispatch_group_leave(object);
    if (object) {
      dispatch_release(object);
    }
  }
  if (v34) {
    CFRelease(v34);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v15) {
    CFRelease(v15);
  }
  xpc_release(v7);
  uint64_t v8 = v46;
  if (v46) {
    goto LABEL_69;
  }
}

void sub_1A61A6348(_Unwind_Exception *a1)
{
  xpc_release(*(xpc_object_t *)(v2 - 152));
  xpc_release(v1);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v2 - 96);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9stop_syncEv_block_invoke_130(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 136);
  xpc_object_t v6 = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  long long v4 = *(const void **)(a1 + 48);
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  abm::BasebandTracingTask::abortInternal(v2, &v6, &v5);
  if (v4) {
    CFRelease(v4);
  }
  if (v3)
  {
    dispatch_release(v3);
  }
}

void sub_1A61A6484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9) {
    dispatch_release(v9);
  }
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9stop_syncEv_block_invoke_134(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 136);
  xpc_object_t v6 = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  long long v4 = *(const void **)(a1 + 40);
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  abm::BasebandTracingTask::snapshotInternal(v2, &v6, &v5);
  if (v4) {
    CFRelease(v4);
  }
  if (v3)
  {
    dispatch_release(v3);
  }
}

void sub_1A61A6550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9) {
    dispatch_release(v9);
  }
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9stop_syncEv_block_invoke_138(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 136);
  xpc_object_t v6 = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  long long v4 = *(const void **)(a1 + 48);
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  abm::BasebandTracingTask::shutdownInternal(v2, &v6, &v5);
  if (v4) {
    CFRelease(v4);
  }
  if (v3)
  {
    dispatch_release(v3);
  }
}

void sub_1A61A661C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9) {
    dispatch_release(v9);
  }
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::~BasebandTracingTask(abm::BasebandTracingTask *this)
{
  *(void *)this = &unk_1EFB0E980;
  abm::BasebandTracingTask::stopTraceRunLoop_sync(this);
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v21 = 0;
    _os_log_impl(&dword_1A609F000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v21, 2u);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 32);
  if (!v5 || atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*((char *)this + 247) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (*((char *)this + 247) < 0) {
LABEL_12:
  }
    operator delete(*((void **)this + 28));
LABEL_13:
  xpc_object_t v6 = *((void *)this + 27);
  if (v6) {
    dispatch_release(v6);
  }
  xpc_object_t v7 = (const void *)*((void *)this + 26);
  if (v7) {
    _Block_release(v7);
  }
  if (*((void *)this + 25))
  {
    uint64_t v8 = *((void *)this + 23);
    xpc_object_t v9 = (abm::BasebandTracingTask *)*((void *)this + 24);
    uint64_t v10 = *(void *)v9;
    *(void *)(v10 + 8) = *(void *)(v8 + 8);
    **(void **)(v8 + 8) = v10;
    *((void *)this + 25) = 0;
    if (v9 != (abm::BasebandTracingTask *)((char *)this + 184))
    {
      do
      {
        char v19 = (abm::BasebandTracingTask *)*((void *)v9 + 1);
        std::string v18 = *((void *)v9 + 2);
        if (v18)
        {
          dispatch_group_leave(v18);
          BOOL v20 = *((void *)v9 + 2);
          if (v20) {
            dispatch_release(v20);
          }
        }
        operator delete(v9);
        xpc_object_t v9 = v19;
      }
      while (v19 != (abm::BasebandTracingTask *)((char *)this + 184));
    }
  }
  std::__tree<std::__value_type<std::string const,std::shared_ptr<Trace>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::shared_ptr<Trace>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::shared_ptr<Trace>>>>::destroy(*((void *)this + 20));
  uint64_t v11 = *((void *)this + 18);
  if (v11) {
    dispatch_release(v11);
  }
  std::string::size_type v12 = *((void *)this + 17);
  if (v12) {
    dispatch_release(v12);
  }
  *(void *)this = &unk_1EFB0FCB8;
  xpc_object_t v13 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  xpc_object_t v14 = *((void *)this + 14);
  if (v14) {
    dispatch_release(v14);
  }
  *(void *)this = &unk_1EFB09350;
  MEMORY[0x1A6274710]((char *)this + 8);
  xpc_object_t v15 = *((void *)this + 12);
  if (v15) {
    dispatch_release(v15);
  }
  CFTypeID v16 = *((void *)this + 11);
  if (v16) {
    dispatch_release(v16);
  }
  xpc_object_t v17 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
}

{
  void *v1;
  uint64_t vars8;

  abm::BasebandTracingTask::~BasebandTracingTask(this);

  operator delete(v1);
}

char *abm::BasebandTracingTask::stateAsString(unsigned int a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1 >= 0xC)
  {
    uint64_t v2 = GetOsLogContext()[1];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    {
      int v3 = 136315906;
      long long v4 = "ABM ASSERT";
      __int16 v5 = 2080;
      xpc_object_t v6 = "state != state";
      __int16 v7 = 2080;
      uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/ABMHelper/Server/Tas"
           "ks/Wireless/BasebandTracingTask.cpp";
      __int16 v9 = 1024;
      int v10 = 607;
      _os_log_fault_impl(&dword_1A609F000, v2, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v3, 0x26u);
    }
    __break(1u);
  }
  return off_1E5C486B0[a1];
}

void ___ZN3abm19BasebandTracingTask18setLastCrashReasonENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(NSObject **)(v2 + 112);
  if (v3)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 112));
    dispatch_group_enter(v3);
  }
  long long v4 = (void **)(v2 + 224);
  if (v2 + 224 != a1 + 40)
  {
    char v5 = *(unsigned char *)(a1 + 63);
    if (*(char *)(v2 + 247) < 0)
    {
      if (v5 >= 0) {
        __int16 v7 = (void *)(a1 + 40);
      }
      else {
        __int16 v7 = *(void **)(a1 + 40);
      }
      if (v5 >= 0) {
        size_t v8 = *(unsigned __int8 *)(a1 + 63);
      }
      else {
        size_t v8 = *(void *)(a1 + 48);
      }
      std::string::__assign_no_alias<false>(v4, v7, v8);
    }
    else if ((*(unsigned char *)(a1 + 63) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v4, *(void **)(a1 + 40), *(void *)(a1 + 48));
    }
    else
    {
      long long v6 = *(_OWORD *)(a1 + 40);
      *(void *)(v2 + 240) = *(void *)(a1 + 56);
      *(_OWORD *)long long v4 = v6;
    }
  }
  if (*(void *)(a1 + 64) && *(void *)(a1 + 72))
  {
    xpc_object_t v9 = xpc_null_create();
    int v10 = *(const void **)(a1 + 64);
    if (v10) {
      uint64_t v11 = _Block_copy(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    std::string::size_type v12 = *(NSObject **)(a1 + 72);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3;
    block[3] = &__block_descriptor_tmp_197;
    if (v11)
    {
      int v16 = 0;
      aBlock = _Block_copy(v11);
      xpc_object_t object = v9;
      if (v9)
      {
LABEL_22:
        xpc_retain(v9);
LABEL_25:
        dispatch_async(v12, block);
        xpc_release(object);
        xpc_object_t object = 0;
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v11) {
          _Block_release(v11);
        }
        xpc_release(v9);
        goto LABEL_30;
      }
    }
    else
    {
      int v16 = 0;
      aBlock = 0;
      xpc_object_t object = v9;
      if (v9) {
        goto LABEL_22;
      }
    }
    xpc_object_t object = xpc_null_create();
    goto LABEL_25;
  }
LABEL_30:
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_1A61A6BB0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  long long v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    long long v6 = *(void **)(a2 + 64);
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  long long v6 = *(void **)(a2 + 64);
  if (v6) {
LABEL_5:
  }
    long long v6 = _Block_copy(v6);
LABEL_6:
  __int16 v7 = *(NSObject **)(a2 + 72);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v7;
  if (v7)
  {
    dispatch_retain(v7);
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = *(const void **)(a1 + 64);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    long long v4 = *(void **)(a1 + 40);
    operator delete(v4);
  }
}

void abm::BasebandTracingTask::changeState(uint64_t a1, unsigned int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  long long v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    long long v5 = abm::BasebandTracingTask::stateAsString(*(_DWORD *)(a1 + 176));
    int v6 = 136315394;
    __int16 v7 = v5;
    __int16 v8 = 2080;
    xpc_object_t v9 = abm::BasebandTracingTask::stateAsString(a2);
    _os_log_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEFAULT, "#I Change of state from %s to %s", (uint8_t *)&v6, 0x16u);
  }
  *(_DWORD *)(a1 + 176) = a2;
}

BOOL abm::BasebandTracingTask::isStateTransitionValid(uint64_t a1, int a2)
{
  return (a2 - 11) < 0xFFFFFFFE || *(unsigned char *)(a1 + 180) == 0;
}

void ___ZN3abm19BasebandTracingTask11performWorkEN8dispatch13group_sessionENS0_5StateENS1_8callbackIU13block_pointerFviN3xpc4dictEEEENS1_5blockIU13block_pointerFvvEEESD__block_invoke(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = *(_DWORD *)(a1 + 80);
  switch(v3)
  {
    case 2u:
    case 6u:
    case 8u:
      char v4 = 0;
      *(unsigned char *)(v2 + 180) = 0;
      goto LABEL_3;
    case 7u:
      char v4 = 0;
      *(unsigned char *)(v2 + 180) = 1;
      break;
    default:
      int v11 = *(unsigned __int8 *)(v2 + 180);
      BOOL v12 = v3 - 9 >= 2 || v11 == 0;
      char v4 = !v12;
      if (!v12)
      {
        xpc_object_t v13 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315138;
          uint64_t v52 = abm::BasebandTracingTask::stateAsString(v3);
          _os_log_impl(&dword_1A609F000, v13, OS_LOG_TYPE_DEFAULT, "#I State [%s] transition not allowed after entering low-power; deferring work",
            buf,
            0xCu);
        }
        xpc_object_t v14 = dispatch_group_create();
        xpc_object_t v15 = v14;
        if (v14)
        {
          dispatch_retain(v14);
          dispatch_group_enter(v15);
        }
        int v16 = operator new(0x18uLL);
        v16[2] = v15;
        if (v15)
        {
          dispatch_retain(v15);
          dispatch_group_enter(v15);
        }
        v16[1] = v2 + 184;
        uint64_t v17 = *(void *)(v2 + 184);
        void *v16 = v17;
        *(void *)(v17 + 8) = v16;
        *(void *)(v2 + 184) = v16;
        ++*(void *)(v2 + 200);
        std::string v18 = *(std::__shared_weak_count **)(v2 + 80);
        if (!v18 || (uint64_t v19 = *(void *)(v2 + 72), (v20 = std::__shared_weak_count::lock(v18)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        int v21 = v20;
        p_shared_weak_owners = &v20->__shared_weak_owners_;
        atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v21);
        }
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 1174405120;
        block[2] = ___ZN3abm19BasebandTracingTask11performWorkEN8dispatch13group_sessionENS0_5StateENS1_8callbackIU13block_pointerFviN3xpc4dictEEEENS1_5blockIU13block_pointerFvvEEESD__block_invoke_159;
        block[3] = &__block_descriptor_tmp_160;
        void block[4] = v2;
        void block[5] = v19;
        uint64_t v45 = v21;
        atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
        int v50 = *(_DWORD *)(a1 + 80);
        char v23 = *(NSObject **)(a1 + 40);
        dispatch_group_t group = v23;
        if (v23)
        {
          dispatch_retain(v23);
          dispatch_group_enter(group);
        }
        std::string v24 = *(void **)(a1 + 48);
        if (v24) {
          std::string v24 = _Block_copy(v24);
        }
        uint64_t v25 = *(NSObject **)(a1 + 56);
        char v47 = v24;
        dispatch_object_t object = v25;
        if (v25) {
          dispatch_retain(v25);
        }
        size_t v26 = *(void **)(a1 + 64);
        if (v26) {
          size_t v26 = _Block_copy(v26);
        }
        aBlock = v26;
        dispatch_group_notify(v15, *(dispatch_queue_t *)(v2 + 88), block);
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (object) {
          dispatch_release(object);
        }
        if (v47) {
          _Block_release(v47);
        }
        if (group)
        {
          dispatch_group_leave(group);
          if (group) {
            dispatch_release(group);
          }
        }
        if (v45) {
          std::__shared_weak_count::__release_weak(v45);
        }
        std::__shared_weak_count::__release_weak(v21);
        if (v15)
        {
          dispatch_group_leave(v15);
          dispatch_release(v15);
          dispatch_release(v15);
        }
        int v11 = *(unsigned __int8 *)(v2 + 180);
      }
      if (!v11)
      {
LABEL_3:
        if (*(void *)(v2 + 200))
        {
          uint64_t v5 = *(void *)(v2 + 184);
          int v6 = *(uint64_t **)(v2 + 192);
          uint64_t v7 = *v6;
          *(void *)(v7 + 8) = *(void *)(v5 + 8);
          **(void **)(v5 + 8) = v7;
          *(void *)(v2 + 200) = 0;
          if (v6 != (uint64_t *)(v2 + 184))
          {
            do
            {
              xpc_object_t v9 = (uint64_t *)v6[1];
              __int16 v8 = v6[2];
              if (v8)
              {
                dispatch_group_leave(v8);
                uint64_t v10 = v6[2];
                if (v10) {
                  dispatch_release(v10);
                }
              }
              operator delete(v6);
              int v6 = v9;
            }
            while (v9 != (uint64_t *)(v2 + 184));
          }
        }
      }
      break;
  }
  int v27 = *(NSObject **)(v2 + 144);
  if (v27)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 144));
    dispatch_suspend(v27);
  }
  xpc_object_t v28 = *(NSObject **)(v2 + 136);
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 1174405120;
  v35[2] = ___ZN3abm19BasebandTracingTask11performWorkEN8dispatch13group_sessionENS0_5StateENS1_8callbackIU13block_pointerFviN3xpc4dictEEEENS1_5blockIU13block_pointerFvvEEESD__block_invoke_161;
  v35[3] = &__block_descriptor_tmp_164;
  v35[4] = v2;
  dispatch_object_t v36 = v27;
  if (v27)
  {
    dispatch_retain(v27);
    dispatch_suspend(v36);
  }
  char v43 = v4;
  int v42 = *(_DWORD *)(a1 + 80);
  uint64_t v29 = *(void **)(a1 + 64);
  if (v29) {
    uint64_t v29 = _Block_copy(v29);
  }
  dispatch_object_t v37 = v29;
  xpc_object_t v30 = *(void **)(a1 + 72);
  if (v30) {
    xpc_object_t v30 = _Block_copy(v30);
  }
  xpc_object_t v31 = *(NSObject **)(a1 + 40);
  dispatch_object_t v38 = v30;
  dispatch_group_t v39 = v31;
  if (v31)
  {
    dispatch_retain(v31);
    dispatch_group_enter(v39);
  }
  xpc_object_t v32 = *(void **)(a1 + 48);
  if (v32) {
    xpc_object_t v32 = _Block_copy(v32);
  }
  std::string v33 = (uint64_t *)(v2 + 72);
  CFTypeRef v34 = *(NSObject **)(a1 + 56);
  CFTypeRef v40 = v32;
  dispatch_object_t v41 = v34;
  if (v34) {
    dispatch_retain(v34);
  }
  ctu::SharedSynchronizable<abm::HelperTask>::execute_wrapped(v33, v28, (uint64_t)v35);
  if (v41) {
    dispatch_release(v41);
  }
  if (v40) {
    _Block_release(v40);
  }
  if (v39)
  {
    dispatch_group_leave(v39);
    if (v39) {
      dispatch_release(v39);
    }
  }
  if (v38) {
    _Block_release(v38);
  }
  if (v37) {
    _Block_release(v37);
  }
  if (v36)
  {
    dispatch_resume(v36);
    if (v36) {
      dispatch_release(v36);
    }
  }
  if (v27)
  {
    dispatch_resume(v27);
    dispatch_release(v27);
  }
}

void sub_1A61A72AC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN3abm19BasebandTracingTask11performWorkEN8dispatch13group_sessionENS0_5StateENS1_8callbackIU13block_pointerFviN3xpc4dictEEEENS1_5blockIU13block_pointerFvvEEESD__block_invoke_159(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    char v4 = std::__shared_weak_count::lock(v2);
    int v21 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      if (!*(void *)(a1 + 40))
      {
LABEL_24:
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
      int v6 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = abm::BasebandTracingTask::stateAsString(*(_DWORD *)(a1 + 88));
        *(_DWORD *)std::string buf = 136315138;
        char v23 = v7;
        _os_log_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEFAULT, "#I Executing deferred state [%s] work after exiting low-power", buf, 0xCu);
      }
      __int16 v8 = *(NSObject **)(a1 + 56);
      uint64_t v19 = v8;
      if (v8)
      {
        dispatch_retain(v8);
        dispatch_group_enter(v8);
      }
      uint64_t v9 = *(unsigned int *)(a1 + 88);
      uint64_t v10 = *(const void **)(a1 + 64);
      if (v10)
      {
        int v11 = _Block_copy(v10);
        BOOL v12 = *(NSObject **)(a1 + 72);
        uint64_t v17 = v11;
        std::string v18 = v12;
        if (!v12)
        {
LABEL_11:
          xpc_object_t v13 = *(const void **)(a1 + 80);
          if (v13) {
            xpc_object_t v14 = _Block_copy(v13);
          }
          else {
            xpc_object_t v14 = 0;
          }
          uint64_t v15 = 0;
          int v16 = v14;
          abm::BasebandTracingTask::performWork(v3, &v19, v9, &v17, &v16, &v15);
          if (v14) {
            _Block_release(v14);
          }
          if (v12) {
            dispatch_release(v12);
          }
          if (v11) {
            _Block_release(v11);
          }
          if (v8)
          {
            dispatch_group_leave(v8);
            dispatch_release(v8);
          }
          goto LABEL_24;
        }
      }
      else
      {
        int v11 = 0;
        BOOL v12 = *(NSObject **)(a1 + 72);
        uint64_t v17 = 0;
        std::string v18 = v12;
        if (!v12) {
          goto LABEL_11;
        }
      }
      dispatch_retain(v12);
      goto LABEL_11;
    }
  }
}

void sub_1A61A751C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A61A7530(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *__copy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE56c30_ZTSN8dispatch13group_sessionE64c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE80c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a2[7];
  a1[7] = v5;
  if (v5)
  {
    dispatch_retain(v5);
    int v6 = a1[7];
    if (v6) {
      dispatch_group_enter(v6);
    }
  }
  uint64_t v7 = (void *)a2[8];
  if (v7) {
    uint64_t v7 = _Block_copy(v7);
  }
  __int16 v8 = a2[9];
  a1[8] = v7;
  a1[9] = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  xpc_object_t result = (void *)a2[10];
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  a1[10] = result;
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE56c30_ZTSN8dispatch13group_sessionE64c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE80c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(void *a1)
{
  uint64_t v2 = (const void *)a1[10];
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = a1[9];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)a1[8];
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = a1[7];
  if (v5)
  {
    dispatch_group_leave(v5);
    int v6 = a1[7];
    if (v6) {
      dispatch_release(v6);
    }
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[6];
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN3abm19BasebandTracingTask11performWorkEN8dispatch13group_sessionENS0_5StateENS1_8callbackIU13block_pointerFviN3xpc4dictEEEENS1_5blockIU13block_pointerFvvEEESD__block_invoke_161(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 92);
  if (*(unsigned char *)(a1 + 92))
  {
    unsigned int v4 = 11;
    uint64_t v5 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 88);
  uint64_t v5 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
LABEL_3:
    int v6 = abm::BasebandTracingTask::stateAsString(*(_DWORD *)(v2 + 176));
    *(_DWORD *)std::string buf = 136315394;
    size_t v26 = v6;
    __int16 v27 = 2080;
    xpc_object_t v28 = abm::BasebandTracingTask::stateAsString(v4);
    _os_log_impl(&dword_1A609F000, v5, OS_LOG_TYPE_DEFAULT, "#I Change of state from %s to %s", buf, 0x16u);
    int v3 = *(unsigned __int8 *)(a1 + 92);
  }
LABEL_4:
  *(_DWORD *)(v2 + 176) = v4;
  if (v3)
  {
    uint64_t v7 = *(void *)(a1 + 56);
    if (v7)
    {
      (*(void (**)(void))(v7 + 16))();
    }
    else
    {
      __int16 v8 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEFAULT, "#I No deferral action block to execute", buf, 2u);
      }
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  uint64_t v9 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v9 || (uint64_t v10 = *(void *)(v2 + 72), (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  BOOL v12 = v11;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v12);
  }
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 1174405120;
  v17[2] = ___ZN3abm19BasebandTracingTask11performWorkEN8dispatch13group_sessionENS0_5StateENS1_8callbackIU13block_pointerFviN3xpc4dictEEEENS1_5blockIU13block_pointerFvvEEESD__block_invoke_162;
  v17[3] = &__block_descriptor_tmp_163;
  xpc_object_t v13 = *(NSObject **)(a1 + 40);
  v17[4] = v2;
  dispatch_object_t object = v13;
  if (v13)
  {
    dispatch_retain(v13);
    dispatch_suspend(object);
  }
  xpc_object_t v14 = *(NSObject **)(a1 + 64);
  dispatch_group_t group = v14;
  if (v14)
  {
    dispatch_retain(v14);
    dispatch_group_enter(group);
  }
  uint64_t v20 = v10;
  int v21 = v12;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v15 = *(void **)(a1 + 72);
  if (v15) {
    uint64_t v15 = _Block_copy(v15);
  }
  int v16 = *(NSObject **)(a1 + 80);
  aBlock = v15;
  dispatch_object_t v23 = v16;
  if (v16) {
    dispatch_retain(v16);
  }
  char v24 = *(unsigned char *)(a1 + 92);
  dispatch_group_notify(*(dispatch_group_t *)(v2 + 136), *(dispatch_queue_t *)(v2 + 88), v17);
  if (v23) {
    dispatch_release(v23);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (object)
  {
    dispatch_resume(object);
    if (object) {
      dispatch_release(object);
    }
  }
  std::__shared_weak_count::__release_weak(v12);
}

void sub_1A61A7964(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask11performWorkEN8dispatch13group_sessionENS0_5StateENS1_8callbackIU13block_pointerFviN3xpc4dictEEEENS1_5blockIU13block_pointerFvvEEESD__block_invoke_162(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    unsigned int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*(void *)(a1 + 56))
      {
        int v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = abm::BasebandTracingTask::stateAsString(*(_DWORD *)(v3 + 176));
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v7;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "Idle";
          _os_log_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEFAULT, "#I Change of state from %s to %s", buf, 0x16u);
        }
        *(_DWORD *)(v3 + 176) = 1;
        if (*(void *)(a1 + 72) && *(void *)(a1 + 80) && !*(unsigned char *)(a1 + 88))
        {
          xpc_object_t v8 = xpc_null_create();
          uint64_t v9 = *(const void **)(a1 + 72);
          if (v9) {
            uint64_t v10 = _Block_copy(v9);
          }
          else {
            uint64_t v10 = 0;
          }
          int v11 = *(NSObject **)(a1 + 80);
          *(void *)std::string buf = MEMORY[0x1E4F143A8];
          *(void *)&uint8_t buf[8] = 1174405120;
          *(void *)&uint8_t buf[16] = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3;
          xpc_object_t v14 = &__block_descriptor_tmp_197;
          if (v10) {
            BOOL v12 = _Block_copy(v10);
          }
          else {
            BOOL v12 = 0;
          }
          int v17 = 0;
          aBlock = v12;
          xpc_object_t object = v8;
          if (v8) {
            xpc_retain(v8);
          }
          else {
            xpc_object_t object = xpc_null_create();
          }
          dispatch_async(v11, buf);
          xpc_release(object);
          xpc_object_t object = 0;
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v10) {
            _Block_release(v10);
          }
          xpc_release(v8);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1A61A7B94(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c32_ZTSN8dispatch15suspend_sessionE48c30_ZTSN8dispatch13group_sessionE56c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE72c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(void *a1, void *a2)
{
  unsigned int v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = a1[5];
    if (v5) {
      dispatch_suspend(v5);
    }
  }
  int v6 = a2[6];
  a1[6] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    uint64_t v7 = a1[6];
    if (v7) {
      dispatch_group_enter(v7);
    }
  }
  uint64_t v8 = a2[8];
  a1[7] = a2[7];
  a1[8] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (void *)a2[9];
  if (v9) {
    uint64_t v9 = _Block_copy(v9);
  }
  uint64_t v10 = a2[10];
  a1[9] = v9;
  a1[10] = v10;
  if (v10)
  {
    dispatch_retain(v10);
  }
}

void __destroy_helper_block_e8_40c32_ZTSN8dispatch15suspend_sessionE48c30_ZTSN8dispatch13group_sessionE56c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE72c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(void *a1)
{
  uint64_t v2 = a1[10];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[9];
  if (v3) {
    _Block_release(v3);
  }
  unsigned int v4 = (std::__shared_weak_count *)a1[8];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = a1[6];
  if (v5)
  {
    dispatch_group_leave(v5);
    int v6 = a1[6];
    if (v6) {
      dispatch_release(v6);
    }
  }
  uint64_t v7 = a1[5];
  if (v7)
  {
    dispatch_resume(v7);
    uint64_t v8 = a1[5];
    if (v8)
    {
      dispatch_release(v8);
    }
  }
}

void __copy_helper_block_e8_40c32_ZTSN8dispatch15suspend_sessionE48c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE56c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE64c30_ZTSN8dispatch13group_sessionE72c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(void *a1, void *a2)
{
  unsigned int v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = a1[5];
    if (v5) {
      dispatch_suspend(v5);
    }
  }
  int v6 = (void *)a2[6];
  if (v6) {
    int v6 = _Block_copy(v6);
  }
  a1[6] = v6;
  uint64_t v7 = (void *)a2[7];
  if (v7) {
    uint64_t v7 = _Block_copy(v7);
  }
  uint64_t v8 = a2[8];
  a1[7] = v7;
  a1[8] = v8;
  if (v8)
  {
    dispatch_retain(v8);
    uint64_t v9 = a1[8];
    if (v9) {
      dispatch_group_enter(v9);
    }
  }
  uint64_t v10 = (void *)a2[9];
  if (v10) {
    uint64_t v10 = _Block_copy(v10);
  }
  int v11 = a2[10];
  a1[9] = v10;
  a1[10] = v11;
  if (v11)
  {
    dispatch_retain(v11);
  }
}

void __destroy_helper_block_e8_40c32_ZTSN8dispatch15suspend_sessionE48c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE56c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE64c30_ZTSN8dispatch13group_sessionE72c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(void *a1)
{
  uint64_t v2 = a1[10];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[9];
  if (v3) {
    _Block_release(v3);
  }
  unsigned int v4 = a1[8];
  if (v4)
  {
    dispatch_group_leave(v4);
    uint64_t v5 = a1[8];
    if (v5) {
      dispatch_release(v5);
    }
  }
  int v6 = (const void *)a1[7];
  if (v6) {
    _Block_release(v6);
  }
  uint64_t v7 = (const void *)a1[6];
  if (v7) {
    _Block_release(v7);
  }
  uint64_t v8 = a1[5];
  if (v8)
  {
    dispatch_resume(v8);
    uint64_t v9 = a1[5];
    if (v9)
    {
      dispatch_release(v9);
    }
  }
}

void *__copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE64c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE72c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(void *a1, void *a2)
{
  unsigned int v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  int v6 = (void *)a2[6];
  if (v6) {
    int v6 = _Block_copy(v6);
  }
  uint64_t v7 = a2[7];
  a1[6] = v6;
  a1[7] = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = (void *)a2[8];
  if (v8) {
    uint64_t v8 = _Block_copy(v8);
  }
  a1[8] = v8;
  xpc_object_t result = (void *)a2[9];
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  a1[9] = result;
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE64c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE72c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(void *a1)
{
  uint64_t v2 = (const void *)a1[9];
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = (const void *)a1[8];
  if (v3) {
    _Block_release(v3);
  }
  unsigned int v4 = a1[7];
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = (const void *)a1[6];
  if (v5) {
    _Block_release(v5);
  }
  int v6 = a1[5];
  if (v6)
  {
    dispatch_group_leave(v6);
    uint64_t v7 = a1[5];
    if (v7)
    {
      dispatch_release(v7);
    }
  }
}

void ___ZN3abm19BasebandTracingTask21enterLowPowerInternalEN8dispatch5groupE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(NSObject **)(a1 + 32);
  dispatch_object_t object = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  (*(void (**)(uint64_t, dispatch_object_t *))(*(void *)v2 + 104))(v2, &object);
  if (object) {
    dispatch_release(object);
  }
}

void sub_1A61A8000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void __destroy_helper_block_e8_32c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 32);
  if (v1) {
    dispatch_release(v1);
  }
}

void ___ZN3abm19BasebandTracingTask20exitLowPowerInternalEN8dispatch5groupE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(NSObject **)(a1 + 32);
  dispatch_object_t object = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  (*(void (**)(uint64_t, dispatch_object_t *))(*(void *)v2 + 112))(v2, &object);
  if (object) {
    dispatch_release(object);
  }
}

void sub_1A61A80B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t abm::BasebandTracingTask::setPropertyInternal(uint64_t a1, NSObject **a2, char *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  abm::BasebandTracingTask::getTrace(a3, a1, &v19);
  uint64_t v10 = v19;
  if (v19)
  {
    int v11 = *a2;
    dispatch_object_t object = v11;
    if (v11) {
      dispatch_retain(v11);
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t, dispatch_object_t *, uint64_t *, uint64_t *))(*(void *)v10 + 136))(v10, &object, a4, a5);
    if (object) {
      dispatch_release(object);
    }
  }
  BOOL v12 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    if (a3[23] >= 0) {
      xpc_object_t v13 = a3;
    }
    else {
      xpc_object_t v13 = *(char **)a3;
    }
    if (*((char *)a4 + 23) >= 0) {
      xpc_object_t v14 = a4;
    }
    else {
      xpc_object_t v14 = (uint64_t *)*a4;
    }
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v15 = a5;
    }
    else {
      uint64_t v15 = (uint64_t *)*a5;
    }
    *(_DWORD *)std::string buf = 67109890;
    int v22 = v10;
    __int16 v23 = 2080;
    char v24 = v13;
    __int16 v25 = 2080;
    size_t v26 = v14;
    __int16 v27 = 2080;
    xpc_object_t v28 = v15;
    _os_log_impl(&dword_1A609F000, v12, OS_LOG_TYPE_DEFAULT, "#I Set property; Success=%d Trace=%s Key=%s Value=%s",
      buf,
      0x26u);
  }
  int v16 = (std::__shared_weak_count *)v20;
  if (v20 && !atomic_fetch_add((atomic_ullong *volatile)(v20 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  return v10;
}

void sub_1A61A828C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask16snapshotInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned int v4 = *(NSObject **)(a1 + 32);
  dispatch_object_t object = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 40);
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }
  (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(void *)v3 + 120))(v3, &object, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_1A61A834C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c21_ZTSN8dispatch5groupE40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(NSObject **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c21_ZTSN8dispatch5groupE40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 32);
  if (v3)
  {
    dispatch_release(v3);
  }
}

void ___ZN3abm19BasebandTracingTask14reinitInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned int v4 = *(NSObject **)(a1 + 32);
  dispatch_object_t object = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 40);
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }
  (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(void *)v3 + 56))(v3, &object, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_1A61A84A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask15prepareInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned int v4 = *(NSObject **)(a1 + 32);
  dispatch_object_t object = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 40);
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }
  (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(void *)v3 + 64))(v3, &object, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_1A61A8560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask13startInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned int v4 = *(NSObject **)(a1 + 32);
  dispatch_object_t object = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 40);
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }
  (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(void *)v3 + 72))(v3, &object, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_1A61A861C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask12stopInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned int v4 = *(NSObject **)(a1 + 32);
  dispatch_object_t object = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 40);
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }
  (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(void *)v3 + 80))(v3, &object, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_1A61A86D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask13abortInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned int v4 = *(NSObject **)(a1 + 32);
  dispatch_object_t object = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 40);
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }
  (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(void *)v3 + 88))(v3, &object, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_1A61A8794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask16shutdownInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned int v4 = *(NSObject **)(a1 + 32);
  dispatch_object_t object = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 40);
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }
  (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(void *)v3 + 96))(v3, &object, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_1A61A8850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::getTrace(char *a1@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  memset(&__p, 170, sizeof(__p));
  if ((a1[23] & 0x80000000) == 0)
  {
    std::string __p = *(std::string *)a1;
    if (!strcasecmp(a1, abm::trace::kEURCoreDump[0])) {
      goto LABEL_20;
    }
LABEL_9:
    if (strcasecmp(a1, "CoreDump"))
    {
      if (strcasecmp(a1, abm::trace::kDIAG[0]))
      {
        uint64_t v7 = a1;
        if (strcasecmp(a1, "BBTrace")) {
          goto LABEL_12;
        }
      }
      goto LABEL_18;
    }
LABEL_20:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      __p.__r_.__value_.__l.__size_ = 8;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      p_std::string::size_type size = (std::string::size_type *)(__p.__r_.__value_.__r.__words[0] + 8);
    }
    else
    {
      p_std::string::size_type size = &__p.__r_.__value_.__l.__size_;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
      p_p = &__p;
    }
    p_p->__r_.__value_.__r.__words[0] = 0x706D754465726F43;
    goto LABEL_26;
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *((void *)a1 + 1));
  int v6 = a1[23];
  uint64_t v7 = *(const char **)a1;
  if (v6 >= 0) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = *(const char **)a1;
  }
  if (!strcasecmp(v8, abm::trace::kEURCoreDump[0])) {
    goto LABEL_20;
  }
  if ((v6 & 0x80000000) == 0) {
    goto LABEL_9;
  }
  if (!strcasecmp(v7, "CoreDump")) {
    goto LABEL_20;
  }
  if (strcasecmp(v7, abm::trace::kDIAG[0]) && strcasecmp(v7, "BBTrace"))
  {
LABEL_12:
    if (strcasecmp(v7, abm::trace::kICETrace[0]))
    {
      *a3 = 0;
      a3[1] = 0;
      uint64_t v9 = *(void **)(a2 + 152);
      uint64_t v10 = (void *)(a2 + 160);
      if (v9 == (void *)(a2 + 160)) {
        goto LABEL_43;
      }
      goto LABEL_27;
    }
  }
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    __p.__r_.__value_.__l.__size_ = 13;
    BOOL v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
    p_std::string::size_type size = (std::string::size_type *)(__p.__r_.__value_.__r.__words[0] + 13);
  }
  else
  {
    p_std::string::size_type size = (std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 5);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 13;
    BOOL v12 = &__p;
  }
  qmemcpy(v12, "BasebandTrace", 13);
LABEL_26:
  *(unsigned char *)p_std::string::size_type size = 0;
  *a3 = 0;
  a3[1] = 0;
  uint64_t v9 = *(void **)(a2 + 152);
  uint64_t v10 = (void *)(a2 + 160);
  if (v9 == (void *)(a2 + 160)) {
    goto LABEL_43;
  }
LABEL_27:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v14 = &__p;
  }
  else {
    xpc_object_t v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  while (1)
  {
    uint64_t v15 = (const char *)(v9 + 4);
    if (*((char *)v9 + 55) < 0) {
      uint64_t v15 = *(const char **)v15;
    }
    if (!strcasecmp(v15, (const char *)v14)) {
      break;
    }
    int v16 = (void *)v9[1];
    if (v16)
    {
      do
      {
        int v17 = v16;
        int v16 = (void *)*v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        int v17 = (void *)v9[2];
        BOOL v18 = *v17 == (void)v9;
        uint64_t v9 = v17;
      }
      while (!v18);
    }
    uint64_t v9 = v17;
    if (v17 == v10) {
      goto LABEL_43;
    }
  }
  uint64_t v20 = v9[7];
  uint64_t v19 = v9[8];
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  *a3 = v20;
  a3[1] = v19;
LABEL_43:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void abm::BasebandTracingTask::commandResetModem(uint64_t a1, ResetInfo *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3) {
    return;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  __int16 v23 = v5;
  if (!v5) {
    return;
  }
  uint64_t v22 = *(void *)(a1 + 120);
  if (!v22)
  {
    uint64_t v8 = v5;
LABEL_26:
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    return;
  }
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v7 = v6;
  if (v6)
  {
    xpc_object_t object = v6;
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    xpc_object_t object = v7;
    if (!v7)
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v7 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1A6275E60](v7) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v7);
    goto LABEL_13;
  }
  xpc_object_t v9 = xpc_null_create();
LABEL_12:
  xpc_object_t object = v9;
LABEL_13:
  xpc_release(v7);
  ResetInfo::addToDict(a2, &object);
  uint64_t v10 = v22;
  int v11 = (const void *)*MEMORY[0x1E4F4C638];
  size_t v12 = strlen((const char *)*MEMORY[0x1E4F4C638]);
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    uint64_t v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v16 = v12 | 7;
    }
    uint64_t v17 = v16 + 1;
    xpc_object_t v14 = (void **)operator new(v16 + 1);
    __dst[1] = v13;
    unint64_t v20 = v17 | 0x8000000000000000;
    __dst[0] = v14;
LABEL_21:
    memmove(v14, v11, (size_t)v13);
    *((unsigned char *)v13 + (void)v14) = 0;
    xpc_object_t v15 = object;
    xpc_object_t v18 = object;
    if (object) {
      goto LABEL_17;
    }
    goto LABEL_22;
  }
  HIBYTE(v20) = v12;
  xpc_object_t v14 = __dst;
  if (v12) {
    goto LABEL_21;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t v15 = object;
  xpc_object_t v18 = object;
  if (object)
  {
LABEL_17:
    xpc_retain(v15);
    goto LABEL_23;
  }
LABEL_22:
  xpc_object_t v15 = xpc_null_create();
  xpc_object_t v18 = v15;
LABEL_23:
  abm::HelperServerInternal::sendCommandToBasebandManager(v10, (uint64_t)__dst, &v18, 0);
  xpc_release(v15);
  xpc_object_t v18 = 0;
  if (SHIBYTE(v20) < 0) {
    operator delete(__dst[0]);
  }
  xpc_release(object);
  uint64_t v8 = v23;
  if (v23) {
    goto LABEL_26;
  }
}

void sub_1A61A8D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t object, char a18)
{
  xpc_release(v18);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t abm::BasebandTracingTask::getRunLoop(abm::BasebandTracingTask *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  unsigned int v4 = v3;
  uint64_t v5 = *((void *)this + 15);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 168);
    if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v6;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v6;
    }
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void abm::BasebandTracingTask::commandReportStatsAWD(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v17 = 0;
  xpc_object_t v18 = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3) {
    goto LABEL_15;
  }
  xpc_object_t v18 = std::__shared_weak_count::lock(v3);
  if (!v18) {
    return;
  }
  uint64_t v5 = *(void *)(a1 + 120);
  uint64_t v17 = v5;
  if (!v5) {
    goto LABEL_15;
  }
  uint64_t v6 = (const void *)*MEMORY[0x1E4F4C738];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C738]);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    xpc_object_t v9 = (void **)operator new(v11 + 1);
    __dst[1] = v8;
    unint64_t v16 = v12 | 0x8000000000000000;
    __dst[0] = v9;
LABEL_12:
    memmove(v9, v6, (size_t)v8);
    *((unsigned char *)v8 + (void)v9) = 0;
    xpc_object_t v10 = *a2;
    xpc_object_t v14 = v10;
    if (v10) {
      goto LABEL_8;
    }
    goto LABEL_13;
  }
  HIBYTE(v16) = v7;
  xpc_object_t v9 = __dst;
  if (v7) {
    goto LABEL_12;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t v10 = *a2;
  xpc_object_t v14 = v10;
  if (v10)
  {
LABEL_8:
    xpc_retain(v10);
    goto LABEL_14;
  }
LABEL_13:
  xpc_object_t v10 = xpc_null_create();
  xpc_object_t v14 = v10;
LABEL_14:
  abm::HelperServerInternal::sendCommandToBasebandManager(v5, (uint64_t)__dst, &v14, 0);
  xpc_release(v10);
  xpc_object_t v14 = 0;
  if (SHIBYTE(v16) < 0)
  {
    operator delete(__dst[0]);
    xpc_object_t v13 = v18;
    if (!v18) {
      return;
    }
    goto LABEL_16;
  }
LABEL_15:
  xpc_object_t v13 = v18;
  if (!v18) {
    return;
  }
LABEL_16:
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

void sub_1A61A9054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  xpc_release(v16);
  if (a15 < 0)
  {
    operator delete(__p);
    std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL abm::BasebandTracingTask::traceSupported(uint64_t a1, char *a2)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  abm::BasebandTracingTask::getTrace(a2, a1, &v5);
  unint64_t v3 = v5;
  uint64_t v2 = (std::__shared_weak_count *)v6;
  if (!v6 || atomic_fetch_add((atomic_ullong *volatile)(v6 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
    return v3 != 0;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v3 != 0;
}

void std::__tree<std::__value_type<std::string const,std::shared_ptr<Trace>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::shared_ptr<Trace>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::shared_ptr<Trace>>>>::destroy(uint64_t a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string const,std::shared_ptr<Trace>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::shared_ptr<Trace>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::shared_ptr<Trace>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string const,std::shared_ptr<Trace>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::shared_ptr<Trace>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::shared_ptr<Trace>>>>::destroy(*(void *)(a1 + 8));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_5:
        unint64_t v3 = (void *)a1;
LABEL_7:
        operator delete(v3);
        return;
      }
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(*(void **)(a1 + 32));
    unint64_t v3 = (void *)a1;
    goto LABEL_7;
  }
}

void ctu::SharedSynchronizable<abm::HelperTask>::execute_wrapped(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  unsigned int v4 = (std::__shared_weak_count *)a1[1];
  if (!v4 || (uint64_t v7 = *a1, (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v9 = v8;
  xpc_object_t v10 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3abm10HelperTaskEE15execute_wrappedEP16dispatch_group_sU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1EFB0F428;
  void block[5] = v7;
  xpc_object_t v14 = v8;
  p_shared_owners = &v8->__shared_owners_;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a3;
  dispatch_group_async(a2, v10, block);
  uint64_t v12 = v14;
  if (!v14 || atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3abm10HelperTaskEE15execute_wrappedEP16dispatch_group_sU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIKN3abm10HelperTaskEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIKN3abm10HelperTaskEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v1, &object);
  xpc_release(object);
}

void sub_1A61A9488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 24))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 32);
    uint64_t v5 = *(void *)(a2 + 24);
    unint64_t v6 = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v5);
    unsigned int v4 = v6;
    if (v6)
    {
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1A61A9554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ctu::SharedSynchronizable<abm::HelperTask>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3abm10HelperTaskEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1EFB0F490;
  void block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  xpc_object_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3abm10HelperTaskEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void util::strip_non_printable(std::string *this)
{
  uint64_t v1 = this;
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    uint64_t v3 = this;
  }
  else {
    uint64_t v3 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    unsigned int v4 = (std::string *)((char *)v3 + size);
    std::string::size_type v5 = size - 1;
    uint64_t v6 = MEMORY[0x1E4F14390];
    while (1)
    {
      unsigned int v7 = v3->__r_.__value_.__s.__data_[0];
      if ((v7 & 0x80000000) != 0) {
        break;
      }
      int v8 = *(_DWORD *)(v6 + 4 * v7 + 60);
      if ((v8 & 0x40000) == 0 || (v8 & 0x4000) != 0) {
        goto LABEL_15;
      }
LABEL_8:
      uint64_t v3 = (std::string *)((char *)v3 + 1);
      --v5;
      if (v3 == v4) {
        goto LABEL_28;
      }
    }
    if (__maskrune(v3->__r_.__value_.__s.__data_[0], 0x40000uLL) && !__maskrune(v7, 0x4000uLL)) {
      goto LABEL_8;
    }
LABEL_15:
    if (v3 != v4 && (std::string *)((char *)&v3->__r_.__value_.__l.__data_ + 1) != v4)
    {
      uint64_t v9 = 1;
      unsigned int v4 = v3;
      while (1)
      {
        unsigned int v10 = v3->__r_.__value_.__s.__data_[v9];
        if ((v10 & 0x80000000) != 0)
        {
          if (!__maskrune(v3->__r_.__value_.__s.__data_[v9], 0x40000uLL) || __maskrune(v10, 0x4000uLL)) {
            goto LABEL_19;
          }
        }
        else
        {
          int v11 = *(_DWORD *)(v6 + 4 * v10 + 60);
          if ((v11 & 0x40000) == 0 || (v11 & 0x4000) != 0) {
            goto LABEL_19;
          }
        }
        v4->__r_.__value_.__s.__data_[0] = v3->__r_.__value_.__s.__data_[v9];
        unsigned int v4 = (std::string *)((char *)v4 + 1);
LABEL_19:
        ++v9;
        if (!--v5) {
          goto LABEL_28;
        }
      }
    }
  }
  unsigned int v4 = v3;
LABEL_28:
  std::string::size_type v12 = HIBYTE(v1->__r_.__value_.__r.__words[2]);
  int v13 = (char)v12;
  xpc_object_t v14 = (std::string *)v1->__r_.__value_.__r.__words[0];
  xpc_object_t v15 = (char *)(v1->__r_.__value_.__r.__words[0] + v1->__r_.__value_.__l.__size_);
  if ((v12 & 0x80u) != 0)
  {
    std::string::size_type v16 = v1->__r_.__value_.__r.__words[0];
  }
  else
  {
    xpc_object_t v15 = (char *)v1 + v12;
    std::string::size_type v16 = (std::string::size_type)v1;
  }
  if ((v12 & 0x80u) != 0) {
    std::string::size_type v12 = v1->__r_.__value_.__l.__size_;
  }
  std::string::size_type v17 = (std::string::size_type)v4 - v16;
  if (v12 < (unint64_t)v4 - v16) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v15 - (char *)v4 == -1)
  {
    if (v13 < 0)
    {
      v1->__r_.__value_.__l.__size_ = v17;
      uint64_t v1 = v14;
    }
    else
    {
      *((unsigned char *)&v1->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
    v1->__r_.__value_.__s.__data_[v17] = 0;
  }
  else
  {
    std::string::__erase_external_with_move(v1, v17, v15 - (char *)v4);
  }
}

uint64_t util::convert_garbage(uint64_t result)
{
  int v1 = *(char *)(result + 23);
  if (v1 >= 0) {
    uint64_t v2 = (unsigned char *)result;
  }
  else {
    uint64_t v2 = *(unsigned char **)result;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(unsigned __int8 *)(result + 23);
  }
  else {
    uint64_t v3 = *(void *)(result + 8);
  }
  if (v3)
  {
    uint64_t v4 = MEMORY[0x1E4F14390];
    do
    {
      unsigned int v5 = (char)*v2;
      if ((v5 & 0x80000000) != 0)
      {
        CFTypeRef result = __maskrune((char)*v2, 0x40000uLL);
        if (result) {
          goto LABEL_10;
        }
        CFTypeRef result = __maskrune(v5, 0x4000uLL);
        if (result) {
          goto LABEL_10;
        }
      }
      else
      {
        int v6 = *(_DWORD *)(v4 + 4 * v5 + 60);
        if ((v6 & 0x40000) != 0) {
          goto LABEL_10;
        }
        CFTypeRef result = v6 & 0x4000;
        if ((v6 & 0x4000) != 0) {
          goto LABEL_10;
        }
      }
      *uint64_t v2 = 32;
LABEL_10:
      ++v2;
      --v3;
    }
    while (v3);
  }
  return result;
}

void util::strip_pattern(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  memset(a3, 170, sizeof(std::string));
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  int v5 = a1[23];
  int v6 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
  unsigned int v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if (v6 >= 0) {
    int v8 = a3;
  }
  else {
    int v8 = (std::string *)a3->__r_.__value_.__r.__words[0];
  }
  if (v5 >= 0) {
    int64_t v9 = a1[23];
  }
  else {
    int64_t v9 = *((void *)a1 + 1);
  }
  std::string::size_type v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if (v5 >= 0) {
    int v11 = a1;
  }
  else {
    int v11 = *(char **)a1;
  }
  if (!v9)
  {
    std::string::size_type v13 = 0;
    goto LABEL_20;
  }
  if (v6 >= 0) {
    uint64_t size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  else {
    uint64_t size = a3->__r_.__value_.__l.__size_;
  }
  if (size >= v9)
  {
    __int16 v27 = (char *)v8 + size;
    int v28 = *v11;
    uint64_t v29 = v8;
    do
    {
      uint64_t v30 = size - v9;
      if (v30 == -1) {
        break;
      }
      xpc_object_t v31 = (char *)memchr(v29, v28, v30 + 1);
      if (!v31) {
        break;
      }
      xpc_object_t v32 = v31;
      if (!memcmp(v31, v11, v9))
      {
        if (v32 != v27)
        {
          std::string::size_type v13 = v32 - (char *)v8;
          if (v32 - (char *)v8 != -1)
          {
            if (v9 == -1)
            {
              while (1)
              {
                std::string::size_type v33 = a3->__r_.__value_.__l.__size_;
                if ((v10 & 0x80u) == 0) {
                  std::string::size_type v33 = v10;
                }
                if (v33 < v13) {
                  break;
                }
                if ((char)v10 < 0)
                {
                  a3->__r_.__value_.__l.__size_ = v13;
                }
                else
                {
                  *((unsigned char *)&a3->__r_.__value_.__s + 23) = v13 & 0x7F;
                  unsigned int v7 = a3;
                }
                v7->__r_.__value_.__s.__data_[v13] = 0;
                int v34 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                std::string::size_type v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                unsigned int v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
                if (v34 >= 0) {
                  std::string v35 = a3;
                }
                else {
                  std::string v35 = (std::string *)a3->__r_.__value_.__r.__words[0];
                }
                int v36 = a1[23];
                if (v36 >= 0) {
                  dispatch_object_t v37 = a1;
                }
                else {
                  dispatch_object_t v37 = *(char **)a1;
                }
                if (v36 >= 0) {
                  int64_t v38 = a1[23];
                }
                else {
                  int64_t v38 = *((void *)a1 + 1);
                }
                if (v38)
                {
                  if (v34 >= 0) {
                    int64_t v39 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  }
                  else {
                    int64_t v39 = a3->__r_.__value_.__l.__size_;
                  }
                  if (v39 < v38) {
                    return;
                  }
                  CFTypeRef v40 = (char *)v35 + v39;
                  int v41 = *v37;
                  int v42 = v35;
                  while (1)
                  {
                    int64_t v43 = v39 - v38;
                    if (v43 == -1) {
                      return;
                    }
                    char v44 = (char *)memchr(v42, v41, v43 + 1);
                    if (!v44) {
                      return;
                    }
                    uint64_t v45 = v44;
                    if (!memcmp(v44, v37, v38)) {
                      break;
                    }
                    int v42 = (std::string *)(v45 + 1);
                    int64_t v39 = v40 - (v45 + 1);
                    if (v39 < v38) {
                      return;
                    }
                  }
                  if (v45 == v40) {
                    return;
                  }
                  std::string::size_type v13 = v45 - (char *)v35;
                  if (v45 - (char *)v35 == -1) {
                    return;
                  }
                }
                else
                {
                  std::string::size_type v13 = 0;
                }
              }
            }
            else
            {
LABEL_20:
              while (1)
              {
                std::string::size_type v14 = (v10 & 0x80u) == 0 ? v10 : a3->__r_.__value_.__l.__size_;
                if (v14 < v13) {
                  break;
                }
                std::string::__erase_external_with_move(a3, v13, v9);
                int v15 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                std::string::size_type v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                if (v15 >= 0) {
                  std::string::size_type v16 = a3;
                }
                else {
                  std::string::size_type v16 = (std::string *)a3->__r_.__value_.__r.__words[0];
                }
                int v17 = a1[23];
                if (v17 >= 0) {
                  xpc_object_t v18 = a1;
                }
                else {
                  xpc_object_t v18 = *(char **)a1;
                }
                if (v17 >= 0) {
                  int64_t v19 = a1[23];
                }
                else {
                  int64_t v19 = *((void *)a1 + 1);
                }
                if (v19)
                {
                  if (v15 >= 0) {
                    int64_t v20 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  }
                  else {
                    int64_t v20 = a3->__r_.__value_.__l.__size_;
                  }
                  if (v20 < v19) {
                    return;
                  }
                  int v21 = (char *)v16 + v20;
                  int v22 = *v18;
                  __int16 v23 = v16;
                  while (1)
                  {
                    int64_t v24 = v20 - v19;
                    if (v24 == -1) {
                      return;
                    }
                    __int16 v25 = (char *)memchr(v23, v22, v24 + 1);
                    if (!v25) {
                      return;
                    }
                    size_t v26 = v25;
                    if (!memcmp(v25, v18, v19)) {
                      break;
                    }
                    __int16 v23 = (std::string *)(v26 + 1);
                    int64_t v20 = v21 - (v26 + 1);
                    if (v20 < v19) {
                      return;
                    }
                  }
                  if (v26 == v21) {
                    return;
                  }
                  std::string::size_type v13 = v26 - (char *)v16;
                  if (v26 - (char *)v16 == -1) {
                    return;
                  }
                }
                else
                {
                  std::string::size_type v13 = 0;
                }
              }
            }
            std::string::__throw_out_of_range[abi:ne180100]();
          }
        }
        return;
      }
      uint64_t v29 = (std::string *)(v32 + 1);
      uint64_t size = v27 - (v32 + 1);
    }
    while (size >= v9);
  }
}

void sub_1A61A9C44(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *util::strip_leading_trailing@<X0>(void *result@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = *((unsigned __int8 *)result + 23);
  int v5 = (void *)*result;
  unint64_t v6 = result[1];
  if ((v4 & 0x80u) == 0) {
    unsigned int v7 = result;
  }
  else {
    unsigned int v7 = (void *)*result;
  }
  if ((v4 & 0x80u) == 0) {
    uint64_t v8 = *((unsigned __int8 *)result + 23);
  }
  else {
    uint64_t v8 = result[1];
  }
  int v9 = *((char *)a2 + 23);
  if (v9 >= 0) {
    std::string::size_type v10 = a2;
  }
  else {
    std::string::size_type v10 = *a2;
  }
  if (v9 >= 0) {
    size_t v11 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v11 = (size_t)a2[1];
  }
  if (!v8) {
    goto LABEL_26;
  }
  std::string::size_type v12 = result;
  unint64_t v13 = 0;
  if (!v11)
  {
    uint64_t v14 = v8 - 1;
    if ((v4 & 0x80) == 0) {
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  while (1)
  {
    CFTypeRef result = memchr(v10, *((char *)v7 + v13), v11);
    if (!result) {
      break;
    }
    if (v8 == ++v13) {
      goto LABEL_26;
    }
  }
  if (v13 == -1)
  {
LABEL_26:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  do
  {
    if (!v8)
    {
      uint64_t v14 = -1;
      if ((v4 & 0x80) == 0) {
        goto LABEL_28;
      }
LABEL_24:
      if (v6 >= v13)
      {
        unint64_t v4 = v6;
        std::string::size_type v12 = v5;
        goto LABEL_29;
      }
LABEL_41:
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    CFTypeRef result = memchr(v10, *((char *)v7 + --v8), v11);
  }
  while (result);
  uint64_t v14 = v8;
  if ((v4 & 0x80) != 0) {
    goto LABEL_24;
  }
LABEL_28:
  if (v13 > v4) {
    goto LABEL_41;
  }
LABEL_29:
  unint64_t v15 = v14 - v13 + 1;
  if (v4 - v13 >= v15) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v4 - v13;
  }
  if (v16 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v16 >= 0x17)
  {
    uint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v17 = v16 | 7;
    }
    uint64_t v18 = v17 + 1;
    int64_t v19 = operator new(v17 + 1);
    a3[1] = v16;
    a3[2] = v18 | 0x8000000000000000;
    *a3 = v19;
    a3 = v19;
    goto LABEL_39;
  }
  *((unsigned char *)a3 + 23) = v16;
  if (v16) {
LABEL_39:
  }
    CFTypeRef result = memmove(a3, (char *)v12 + v13, v16);
  *((unsigned char *)a3 + v16) = 0;
  return result;
}

uint64_t util::to_upper(uint64_t result)
{
  uint64_t v1 = *(unsigned __int8 *)(result + 23);
  int v2 = (char)v1;
  uint64_t v3 = (unsigned char *)(result + v1);
  if (v2 >= 0) {
    unint64_t v4 = v3;
  }
  else {
    unint64_t v4 = (unsigned char *)(*(void *)result + *(void *)(result + 8));
  }
  if (v2 >= 0) {
    int v5 = (unsigned char *)result;
  }
  else {
    int v5 = *(unsigned char **)result;
  }
  for (; v5 != v4; ++v5)
  {
    CFTypeRef result = __toupper((char)*v5);
    unsigned char *v5 = result;
  }
  return result;
}

BOOL util::equal_nocase(const char *a1, const char *a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  return strcasecmp(a1, a2) == 0;
}

void util::strip_non_alpha(std::string *a1)
{
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    uint64_t v3 = (char *)a1;
  }
  else {
    uint64_t v3 = (char *)a1->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_21;
  }
  unint64_t v4 = &v3[size];
  std::string::size_type v5 = size - 1;
  uint64_t v6 = MEMORY[0x1E4F14390];
  while (1)
  {
    unsigned int v7 = *v3;
    if ((v7 & 0x80000000) != 0)
    {
      if (!__maskrune(v7, 0x100uLL)) {
        break;
      }
      goto LABEL_9;
    }
    if ((*(_DWORD *)(v6 + 4 * v7 + 60) & 0x100) == 0) {
      break;
    }
LABEL_9:
    ++v3;
    --v5;
    if (v3 == v4) {
      goto LABEL_22;
    }
  }
  if (v3 != v4 && v3 + 1 != v4)
  {
    uint64_t v8 = 1;
    unint64_t v4 = v3;
    while (1)
    {
      unsigned int v9 = v3[v8];
      if ((v9 & 0x80000000) == 0) {
        break;
      }
      if (__maskrune(v9, 0x100uLL)) {
        goto LABEL_16;
      }
LABEL_17:
      ++v8;
      if (!--v5) {
        goto LABEL_22;
      }
    }
    if ((*(_DWORD *)(v6 + 4 * v9 + 60) & 0x100) == 0) {
      goto LABEL_17;
    }
LABEL_16:
    *v4++ = v3[v8];
    goto LABEL_17;
  }
LABEL_21:
  unint64_t v4 = v3;
LABEL_22:
  unint64_t v10 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  int v11 = (char)v10;
  std::string::size_type v12 = a1->__r_.__value_.__r.__words[0];
  unint64_t v13 = (char *)(a1->__r_.__value_.__r.__words[0] + a1->__r_.__value_.__l.__size_);
  if ((v10 & 0x80u) != 0)
  {
    uint64_t v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  else
  {
    unint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = a1;
  }
  if ((v10 & 0x80u) != 0) {
    unint64_t v10 = a1->__r_.__value_.__l.__size_;
  }
  std::string::size_type v15 = v4 - (char *)v14;
  if (v10 < v4 - (char *)v14) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v13 - v4 == -1)
  {
    if (v11 < 0)
    {
      a1->__r_.__value_.__l.__size_ = v15;
      *(unsigned char *)(v12 + v15) = 0;
    }
    else
    {
      *((unsigned char *)&a1->__r_.__value_.__s + 23) = v15 & 0x7F;
      a1->__r_.__value_.__s.__data_[v15] = 0;
    }
  }
  else
  {
    std::string::__erase_external_with_move(a1, v15, v13 - v4);
  }
}

void util::readPlistToCFDictionary(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v2 = (const char *)a1;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (*(char *)(a1 + 23) < 0) {
    int v2 = *(const char **)a1;
  }
  std::string::size_type v5 = (__CFError *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2, 0x8000100u);
  error[3] = v5;
  uint64_t v6 = CFURLCreateWithFileSystemPath(v4, (CFStringRef)v5, kCFURLPOSIXPathStyle, 0);
  error[2] = v6;
  *a2 = 0;
  if (v6) {
    unsigned int v7 = ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7)
  {
    uint64_t v8 = CFReadStreamCreateWithFile(v4, v6);
    unsigned int v9 = v8;
    error[1] = v8;
    if (v8) {
      unint64_t v10 = ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get;
    }
    else {
      unint64_t v10 = 0;
    }
    if (!v10) {
      goto LABEL_16;
    }
    CFReadStreamOpen(v8);
    error[0] = 0;
    CFPropertyListRef v11 = CFPropertyListCreateWithStream(v4, v9, 0, 1uLL, 0, error);
    *a2 = v11;
    CFReadStreamClose(v9);
    if (!error[0]) {
      goto LABEL_16;
    }
    CFErrorGetDomain(error[0]);
    memset(buf, 0, sizeof(buf));
    ctu::cf::assign();
    *(_OWORD *)std::string __p = *(_OWORD *)buf;
    uint64_t v16 = *(void *)&buf[16];
    std::string::size_type v12 = GetOsLogContext()[1];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      CFIndex Code = CFErrorGetCode(error[0]);
      uint64_t v14 = __p;
      if (v16 < 0) {
        uint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 138412802;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = Code;
      *(_WORD *)&buf[22] = 2080;
      int64_t v19 = v14;
      _os_log_error_impl(&dword_1A609F000, v12, OS_LOG_TYPE_ERROR, "Failed to create %@ PropertyList: %ld: %s", buf, 0x20u);
    }
    CFRelease(error[0]);
    *a2 = 0;
    if (v11) {
      CFRelease(v11);
    }
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_16:
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    operator delete(__p[0]);
    if (v9) {
LABEL_17:
    }
      CFRelease(v9);
  }
LABEL_18:
  if (v6) {
    CFRelease(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1A61AA270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get(uint64_t a1)
{
  return *(void *)a1;
}

const void **ctu::cf::CFSharedRef<__CFReadStream>::~CFSharedRef(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void util::moveDirContent(std::string::size_type a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  v131 = 0;
  v132 = 0;
  uint64_t v133 = 0;
  std::locale::locale(&v125, (const std::locale *)a5);
  long long v126 = *(_OWORD *)(a5 + 8);
  long long v127 = *(_OWORD *)(a5 + 24);
  uint64_t v8 = *(std::__shared_weak_count **)(a5 + 48);
  uint64_t v128 = *(void *)(a5 + 40);
  v129 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v130 = *(void *)(a5 + 56);
  int filtered_files = ctu::fs::get_filtered_files();
  unint64_t v10 = v129;
  if (!v129 || atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    std::locale::~locale(&v125);
    if (filtered_files) {
      goto LABEL_6;
    }
LABEL_104:
    uint64_t v53 = GetOsLogContext()[1];
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v109 = a1;
      if (*(char *)(a1 + 23) < 0) {
        std::string::size_type v109 = *(void *)a1;
      }
      LODWORD(v139.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v139.__r_.__value_.__r.__words + 4) = v109;
      _os_log_error_impl(&dword_1A609F000, v53, OS_LOG_TYPE_ERROR, "Failed to find a content in %s", (uint8_t *)&v139, 0xCu);
    }
    goto LABEL_105;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  std::locale::~locale(&v125);
  if (!filtered_files) {
    goto LABEL_104;
  }
LABEL_6:
  CFPropertyListRef v11 = v131;
  v113 = (char *)v132;
  if (v131 != (char *)v132)
  {
    if (a4)
    {
      while (1)
      {
        memset(&v139, 170, sizeof(v139));
        if (v11[23] < 0)
        {
          std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)v11, *((void *)v11 + 1));
        }
        else
        {
          long long v12 = *(_OWORD *)v11;
          v139.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
          *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v12;
        }
        int v13 = *(char *)(a1 + 23);
        if (v13 >= 0) {
          size_t v14 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v14 = *(void *)(a1 + 8);
        }
        unint64_t v15 = v14 + 1;
        memset(&__p, 170, sizeof(__p));
        if (v14 + 1 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v15 >= 0x17) {
          break;
        }
        memset(&__p, 0, sizeof(__p));
        p_p = &__p;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v14 + 1;
        if (v14) {
          goto LABEL_24;
        }
LABEL_28:
        *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v14) = 47;
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v20 = &v139;
        }
        else {
          uint64_t v20 = (std::string *)v139.__r_.__value_.__r.__words[0];
        }
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v139.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v139.__r_.__value_.__l.__size_;
        }
        int v22 = std::string::append(&__p, (const std::string::value_type *)v20, size);
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v124.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        int is_directory = ctu::fs::is_directory();
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v124.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_45;
          }
LABEL_36:
          if (is_directory) {
            goto LABEL_37;
          }
LABEL_46:
          uint64_t v29 = GetOsLogContext()[1];
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
            goto LABEL_83;
          }
          int v30 = *(char *)(a1 + 23);
          if (v30 >= 0) {
            size_t v31 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            size_t v31 = *(void *)(a1 + 8);
          }
          unint64_t v32 = v31 + 1;
          memset(&__p, 170, sizeof(__p));
          if (v31 + 1 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v32 >= 0x17)
          {
            int v110 = v30;
            uint64_t v45 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17) {
              uint64_t v45 = v32 | 7;
            }
            uint64_t v46 = v45 + 1;
            std::string::size_type v33 = (std::string *)operator new(v45 + 1);
            __p.__r_.__value_.__l.__size_ = v31 + 1;
            __p.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
            int v30 = v110;
          }
          else
          {
            memset(&__p, 0, sizeof(__p));
            std::string::size_type v33 = &__p;
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = v31 + 1;
            if (!v31) {
              goto LABEL_93;
            }
          }
          if (v30 >= 0) {
            char v47 = (const void *)a1;
          }
          else {
            char v47 = *(const void **)a1;
          }
          memmove(v33, v47, v31);
LABEL_93:
          *(_WORD *)((char *)&v33->__r_.__value_.__l.__data_ + v31) = 47;
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v48 = &v139;
          }
          else {
            uint64_t v48 = (std::string *)v139.__r_.__value_.__r.__words[0];
          }
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v49 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v49 = v139.__r_.__value_.__l.__size_;
          }
          int v50 = std::string::append(&__p, (const std::string::value_type *)v48, v49);
          long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v124.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          uint64_t v52 = &v124;
          if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v52 = (std::string *)v124.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v52;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
          _os_log_error_impl(&dword_1A609F000, v29, OS_LOG_TYPE_ERROR, "%s is not a directory. So, skip to move it with the depth (%d)", (uint8_t *)&buf, 0x12u);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_82;
          }
LABEL_77:
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_83;
          }
LABEL_9:
          operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_84;
          }
LABEL_10:
          v11 += 24;
          if (v11 == v113) {
            goto LABEL_105;
          }
        }
        else
        {
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_36;
          }
LABEL_45:
          operator delete(__p.__r_.__value_.__l.__data_);
          if (!is_directory) {
            goto LABEL_46;
          }
LABEL_37:
          int v25 = *(char *)(a1 + 23);
          if (v25 >= 0) {
            size_t v26 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            size_t v26 = *(void *)(a1 + 8);
          }
          unint64_t v27 = v26 + 1;
          memset(&__p, 170, sizeof(__p));
          if (v26 + 1 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v27 >= 0x17)
          {
            uint64_t v34 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17) {
              uint64_t v34 = v27 | 7;
            }
            uint64_t v35 = v34 + 1;
            int v28 = (std::string *)operator new(v34 + 1);
            __p.__r_.__value_.__l.__size_ = v26 + 1;
            __p.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
          }
          else
          {
            memset(&__p, 0, sizeof(__p));
            int v28 = &__p;
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = v26 + 1;
            if (!v26) {
              goto LABEL_61;
            }
          }
          if (v25 >= 0) {
            int v36 = (const void *)a1;
          }
          else {
            int v36 = *(const void **)a1;
          }
          memmove(v28, v36, v26);
LABEL_61:
          *(_WORD *)((char *)&v28->__r_.__value_.__l.__data_ + v26) = 47;
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            dispatch_object_t v37 = &v139;
          }
          else {
            dispatch_object_t v37 = (std::string *)v139.__r_.__value_.__r.__words[0];
          }
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v38 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v38 = v139.__r_.__value_.__l.__size_;
          }
          int64_t v39 = std::string::append(&__p, (const std::string::value_type *)v37, v38);
          long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          v124.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          int v41 = std::string::append(&v124, "/", 1uLL);
          long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          std::string::size_type v122 = v41->__r_.__value_.__r.__words[2];
          *(_OWORD *)v121 = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v120, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v120 = *(std::string *)a2;
          }
          std::locale::locale(&v114, (const std::locale *)a5);
          long long v115 = *(_OWORD *)(a5 + 8);
          long long v116 = *(_OWORD *)(a5 + 24);
          int64_t v43 = *(std::__shared_weak_count **)(a5 + 48);
          uint64_t v117 = *(void *)(a5 + 40);
          v118 = v43;
          if (v43) {
            atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v119 = *(void *)(a5 + 56);
          util::moveDirContent(v121, &v120, a3, (a4 - 1), &v114);
          char v44 = v118;
          if (v118 && !atomic_fetch_add(&v118->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
            std::locale::~locale(&v114);
            if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_75:
              if ((SHIBYTE(v122) & 0x80000000) == 0) {
                goto LABEL_76;
              }
LABEL_81:
              operator delete(v121[0]);
              if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
                goto LABEL_82;
              }
              goto LABEL_77;
            }
          }
          else
          {
            std::locale::~locale(&v114);
            if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_75;
            }
          }
          operator delete(v120.__r_.__value_.__l.__data_);
          if (SHIBYTE(v122) < 0) {
            goto LABEL_81;
          }
LABEL_76:
          if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_77;
          }
LABEL_82:
          operator delete(v124.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_9;
          }
LABEL_83:
          if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_10;
          }
LABEL_84:
          operator delete(v139.__r_.__value_.__l.__data_);
          v11 += 24;
          if (v11 == v113) {
            goto LABEL_105;
          }
        }
      }
      uint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17) {
        uint64_t v17 = v15 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_p = (std::string *)operator new(v17 + 1);
      __p.__r_.__value_.__l.__size_ = v14 + 1;
      __p.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
LABEL_24:
      if (v13 >= 0) {
        int64_t v19 = (const void *)a1;
      }
      else {
        int64_t v19 = *(const void **)a1;
      }
      memmove(p_p, v19, v14);
      goto LABEL_28;
    }
    while (1)
    {
      memset(&v139, 170, sizeof(v139));
      if (v11[23] < 0)
      {
        std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)v11, *((void *)v11 + 1));
      }
      else
      {
        long long v57 = *(_OWORD *)v11;
        v139.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
        *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v57;
      }
      memset(&v124, 170, sizeof(v124));
      int v58 = *(char *)(a2 + 23);
      if (v58 >= 0) {
        size_t v59 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v59 = *(void *)(a2 + 8);
      }
      unint64_t v60 = v59 + 1;
      memset(&buf, 170, sizeof(buf));
      if (v59 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v60 >= 0x17)
      {
        uint64_t v62 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v60 | 7) != 0x17) {
          uint64_t v62 = v60 | 7;
        }
        uint64_t v63 = v62 + 1;
        p_std::string buf = (std::string *)operator new(v62 + 1);
        buf.__r_.__value_.__l.__size_ = v59 + 1;
        buf.__r_.__value_.__r.__words[2] = v63 | 0x8000000000000000;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
      }
      else
      {
        memset(&buf, 0, sizeof(buf));
        p_std::string buf = &buf;
        *((unsigned char *)&buf.__r_.__value_.__s + 23) = v59 + 1;
        if (!v59) {
          goto LABEL_136;
        }
      }
      if (v58 >= 0) {
        v64 = (const void *)a2;
      }
      else {
        v64 = *(const void **)a2;
      }
      memmove(p_buf, v64, v59);
LABEL_136:
      *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v59) = 47;
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        dispatch_object_t v65 = &v139;
      }
      else {
        dispatch_object_t v65 = (std::string *)v139.__r_.__value_.__r.__words[0];
      }
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v66 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v66 = v139.__r_.__value_.__l.__size_;
      }
      uint64_t v67 = std::string::append(&buf, (const std::string::value_type *)v65, v66);
      long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      ctu::fs::get_unique_filename();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_144;
        }
      }
      else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_144;
      }
      operator delete(buf.__r_.__value_.__l.__data_);
LABEL_144:
      int v69 = *(char *)(a1 + 23);
      if (v69 >= 0) {
        size_t v70 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v70 = *(void *)(a1 + 8);
      }
      unint64_t v71 = v70 + 1;
      memset(&buf, 170, sizeof(buf));
      if (v70 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v71 >= 0x17)
      {
        uint64_t v73 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v71 | 7) != 0x17) {
          uint64_t v73 = v71 | 7;
        }
        uint64_t v74 = v73 + 1;
        v72 = (std::string *)operator new(v73 + 1);
        buf.__r_.__value_.__l.__size_ = v70 + 1;
        buf.__r_.__value_.__r.__words[2] = v74 | 0x8000000000000000;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
LABEL_154:
        if (v69 >= 0) {
          v75 = (const void *)a1;
        }
        else {
          v75 = *(const void **)a1;
        }
        memmove(v72, v75, v70);
        goto LABEL_158;
      }
      memset(&buf, 0, sizeof(buf));
      v72 = &buf;
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = v70 + 1;
      if (v70) {
        goto LABEL_154;
      }
LABEL_158:
      *(_WORD *)((char *)&v72->__r_.__value_.__l.__data_ + v70) = 47;
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v76 = &v139;
      }
      else {
        long long v76 = (std::string *)v139.__r_.__value_.__r.__words[0];
      }
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v77 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v77 = v139.__r_.__value_.__l.__size_;
      }
      v78 = std::string::append(&buf, (const std::string::value_type *)v76, v77);
      long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      char v80 = ctu::fs::rename();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_178;
        }
LABEL_166:
        if (v80) {
          goto LABEL_167;
        }
LABEL_179:
        v86 = GetOsLogContext()[1];
        if (!os_log_type_enabled(v86, OS_LOG_TYPE_ERROR)) {
          goto LABEL_206;
        }
        int v87 = *(char *)(a1 + 23);
        if (v87 >= 0) {
          size_t v88 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v88 = *(void *)(a1 + 8);
        }
        unint64_t v89 = v88 + 1;
        memset(&buf, 170, sizeof(buf));
        if (v88 + 1 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v89 >= 0x17)
        {
          uint64_t v100 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v89 | 7) != 0x17) {
            uint64_t v100 = v89 | 7;
          }
          uint64_t v101 = v100 + 1;
          long long v90 = (std::string *)operator new(v100 + 1);
          buf.__r_.__value_.__l.__size_ = v88 + 1;
          buf.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
        }
        else
        {
          memset(&buf, 0, sizeof(buf));
          long long v90 = &buf;
          *((unsigned char *)&buf.__r_.__value_.__s + 23) = v88 + 1;
          if (!v88) {
            goto LABEL_217;
          }
        }
        if (v87 >= 0) {
          v102 = (const void *)a1;
        }
        else {
          v102 = *(const void **)a1;
        }
        memmove(v90, v102, v88);
LABEL_217:
        *(_WORD *)((char *)&v90->__r_.__value_.__l.__data_ + v88) = 47;
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v103 = &v139;
        }
        else {
          v103 = (std::string *)v139.__r_.__value_.__r.__words[0];
        }
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v104 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v104 = v139.__r_.__value_.__l.__size_;
        }
        v105 = std::string::append(&buf, (const std::string::value_type *)v103, v104);
        long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v106;
        v105->__r_.__value_.__l.__size_ = 0;
        v105->__r_.__value_.__r.__words[2] = 0;
        v105->__r_.__value_.__r.__words[0] = 0;
        v107 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v107 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        v108 = &v124;
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v108 = (std::string *)v124.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)v134 = 136315394;
        v135 = v107;
        __int16 v136 = 2080;
        v137 = v108;
        _os_log_error_impl(&dword_1A609F000, v86, OS_LOG_TYPE_ERROR, "Failed to move %s -> %s", v134, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_228;
        }
LABEL_205:
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_206;
        }
LABEL_229:
        operator delete(buf.__r_.__value_.__l.__data_);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_117;
        }
LABEL_207:
        if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_208;
        }
LABEL_118:
        v11 += 24;
        if (v11 == v113) {
          break;
        }
      }
      else
      {
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_166;
        }
LABEL_178:
        operator delete(buf.__r_.__value_.__l.__data_);
        if ((v80 & 1) == 0) {
          goto LABEL_179;
        }
LABEL_167:
        long long v81 = GetOsLogContext()[1];
        if (!os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_206;
        }
        int v82 = *(char *)(a1 + 23);
        if (v82 >= 0) {
          size_t v83 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v83 = *(void *)(a1 + 8);
        }
        unint64_t v84 = v83 + 1;
        memset(&buf, 170, sizeof(buf));
        if (v83 + 1 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v84 >= 0x17)
        {
          uint64_t v91 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v84 | 7) != 0x17) {
            uint64_t v91 = v84 | 7;
          }
          uint64_t v92 = v91 + 1;
          v85 = (std::string *)operator new(v91 + 1);
          buf.__r_.__value_.__l.__size_ = v83 + 1;
          buf.__r_.__value_.__r.__words[2] = v92 | 0x8000000000000000;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
        }
        else
        {
          memset(&buf, 0, sizeof(buf));
          v85 = &buf;
          *((unsigned char *)&buf.__r_.__value_.__s + 23) = v83 + 1;
          if (!v83) {
            goto LABEL_194;
          }
        }
        if (v82 >= 0) {
          v93 = (const void *)a1;
        }
        else {
          v93 = *(const void **)a1;
        }
        memmove(v85, v93, v83);
LABEL_194:
        *(_WORD *)((char *)&v85->__r_.__value_.__l.__data_ + v83) = 47;
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v94 = &v139;
        }
        else {
          v94 = (std::string *)v139.__r_.__value_.__r.__words[0];
        }
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v95 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v95 = v139.__r_.__value_.__l.__size_;
        }
        v96 = std::string::append(&buf, (const std::string::value_type *)v94, v95);
        long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v97;
        v96->__r_.__value_.__l.__size_ = 0;
        v96->__r_.__value_.__r.__words[2] = 0;
        v96->__r_.__value_.__r.__words[0] = 0;
        v98 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v98 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        v99 = &v124;
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v99 = (std::string *)v124.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)v134 = 136315394;
        v135 = v98;
        __int16 v136 = 2080;
        v137 = v99;
        _os_log_impl(&dword_1A609F000, v81, OS_LOG_TYPE_DEFAULT, "Moved %s -> %s", v134, 0x16u);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_205;
        }
LABEL_228:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_229;
        }
LABEL_206:
        if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_207;
        }
LABEL_117:
        operator delete(v124.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_118;
        }
LABEL_208:
        operator delete(v139.__r_.__value_.__l.__data_);
        v11 += 24;
        if (v11 == v113) {
          break;
        }
      }
    }
  }
LABEL_105:
  if (a3) {
    ctu::fs::remove_dir();
  }
  unint64_t v54 = (void **)v131;
  if (v131)
  {
    v55 = v132;
    __int16 v56 = v131;
    if (v132 != (void **)v131)
    {
      do
      {
        if (*((char *)v55 - 1) < 0) {
          operator delete(*(v55 - 3));
        }
        v55 -= 3;
      }
      while (v55 != v54);
      __int16 v56 = v131;
    }
    v132 = v54;
    operator delete(v56);
  }
}

void sub_1A61AB178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,std::locale a58)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v58 - 105) < 0) {
    operator delete(*(void **)(v58 - 128));
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v58 - 216));
  _Unwind_Resume(a1);
}

void util::generateSHA256(const char *a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, unsigned __int8 **a4@<X8>)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v8 = (unsigned __int8 *)operator new(0x20uLL);
  a4[1] = v8 + 32;
  a4[2] = v8 + 32;
  *(_OWORD *)uint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *a4 = v8;
  if (!a2)
  {
    size_t v14 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      return;
    }
    LOWORD(c.count[0]) = 0;
    unint64_t v15 = "dataIn Buffer is NULL";
    p_CC_SHA256_CTX c = (uint8_t *)&c;
    uint64_t v17 = v14;
    uint32_t v18 = 2;
    goto LABEL_16;
  }
  *(void *)&c.wbuf[14] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&c.wbuf[6] = v9;
  *(_OWORD *)&c.wbuf[10] = v9;
  *(_OWORD *)&c.hash[6] = v9;
  *(_OWORD *)&c.wbuf[2] = v9;
  *(_OWORD *)c.count = v9;
  *(_OWORD *)&c.hash[2] = v9;
  if (!ctu::fs::get_file_size()) {
    return;
  }
  CC_SHA256_Init(&c);
  unint64_t v10 = a1;
  if (a1[23] < 0) {
    unint64_t v10 = *(const char **)a1;
  }
  int v11 = open(v10, 0);
  if (v11 < 1)
  {
    int64_t v19 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      return;
    }
    if (a1[23] < 0) {
      a1 = *(const char **)a1;
    }
    uint64_t v20 = __error();
    int v21 = strerror(*v20);
    int v22 = *__error();
    int v23 = *__error();
    *(_DWORD *)std::string buf = 136315906;
    size_t v31 = a1;
    __int16 v32 = 2080;
    std::string::size_type v33 = v21;
    __int16 v34 = 1024;
    int v35 = v22;
    __int16 v36 = 1024;
    int v37 = v23;
    unint64_t v15 = "Failed to open: %s : %s (%d, 0x%x)";
    p_CC_SHA256_CTX c = buf;
    uint64_t v17 = v19;
    uint32_t v18 = 34;
LABEL_16:
    _os_log_error_impl(&dword_1A609F000, v17, OS_LOG_TYPE_ERROR, v15, p_c, v18);
    return;
  }
  unint64_t v12 = 0;
  while (1)
  {
    ssize_t v13 = read(v11, a2, a3);
    if (v13 == -1) {
      break;
    }
    CC_SHA256_Update(&c, a2, v13);
    v12 += v13;
    if (v12 >= 0xAAAAAAAAAAAAAAAALL) {
      goto LABEL_18;
    }
  }
  int64_t v24 = GetOsLogContext()[1];
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] < 0) {
      a1 = *(const char **)a1;
    }
    int v25 = __error();
    size_t v26 = strerror(*v25);
    int v27 = *__error();
    int v28 = *__error();
    *(_DWORD *)std::string buf = 136315906;
    size_t v31 = a1;
    __int16 v32 = 2080;
    std::string::size_type v33 = v26;
    __int16 v34 = 1024;
    int v35 = v27;
    __int16 v36 = 1024;
    int v37 = v28;
    _os_log_error_impl(&dword_1A609F000, v24, OS_LOG_TYPE_ERROR, "Failed to read: %s : %s (%d,0x%x)", buf, 0x22u);
  }
LABEL_18:
  CC_SHA256_Final(v8, &c);
  close(v11);
}

void sub_1A61AB654(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1A61AB66C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1A61AB684(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1A61AB69C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1A61AB6B4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1A61AB6CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1A61AB6E4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1A61AB6FC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

BOOL util::markPurgeableFile(uint64_t *a1)
{
  uint64_t v1 = a1;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 65541;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    int v2 = open((const char *)a1, 0);
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_9:
    unint64_t v12 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    if (*((char *)v1 + 23) < 0) {
      uint64_t v1 = (uint64_t *)*v1;
    }
    ssize_t v13 = __error();
    size_t v14 = strerror(*v13);
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v17 = v1;
    __int16 v18 = 2080;
    *(void *)int64_t v19 = v14;
    long long v9 = "Failed to open %s : %s";
    unint64_t v10 = v12;
    uint32_t v11 = 22;
    goto LABEL_13;
  }
  int v2 = open((const char *)*a1, 0);
  if (v2 < 0) {
    goto LABEL_9;
  }
LABEL_3:
  int v3 = v2;
  int v4 = ffsctl(v2, 0xC0084A44uLL, &v15, 0);
  close(v3);
  if (v4)
  {
    std::string::size_type v5 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    if (*((char *)v1 + 23) < 0) {
      uint64_t v1 = (uint64_t *)*v1;
    }
    unsigned int v7 = __error();
    uint64_t v8 = strerror(*v7);
    *(_DWORD *)std::string buf = 136315906;
    uint64_t v17 = v1;
    __int16 v18 = 1024;
    *(_DWORD *)int64_t v19 = v4;
    *(_WORD *)&void v19[4] = 2080;
    *(void *)&v19[6] = v8;
    __int16 v20 = 2048;
    uint64_t v21 = v15;
    long long v9 = "Failed to mark %s as purgeable %d (%s) (flags 0x%llx)";
    unint64_t v10 = v5;
    uint32_t v11 = 38;
LABEL_13:
    _os_log_error_impl(&dword_1A609F000, v10, OS_LOG_TYPE_ERROR, v9, buf, v11);
    return 0;
  }
  return 1;
}

BOOL util::checkLogFileAge(uint64_t a1, int64_t a2, uint64_t a3)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v95 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v97 = 0xAAAAAAAAAAAAAA00;
  long long v99 = v4;
  uint64_t v96 = 0;
  long long v98 = 0uLL;
  LOBYTE(v99) = 0;
  BYTE8(v99) = 0;
  uint64_t v100 = 0;
  memset(v94, 0, sizeof(v94));
  uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (std::sub_match<const char *> *)a1;
  }
  else {
    uint64_t v6 = *(std::sub_match<const char *> **)a1;
  }
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  unsigned int v7 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v6 + v5);
  unint64_t v103 = 0xAAAAAAAAAAAAAA00;
  __p.tm_gmtoff = 0xAAAAAAAAAAAAAAAALL;
  long long v106 = v4;
  __p.tm_zone = 0;
  uint64_t v102 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  LOBYTE(v106) = 0;
  BYTE8(v106) = 0;
  uint64_t v107 = 0;
  memset(&__p, 0, 41);
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a3, v6, (std::sub_match<const char *> *)((char *)v6 + v5), (std::vector<std::csub_match> *)&__p, 4160);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)v94, (uint64_t)v6, v7, (uint64_t *)&__p.tm_sec, 0);
  if (*(void *)&__p.tm_sec)
  {
    *(void *)&__p.tm_hour = *(void *)&__p.tm_sec;
    operator delete(*(void **)&__p.tm_sec);
  }
  if ((_BYTE)v99) {
    int v9 = 0;
  }
  else {
    int v9 = v8;
  }
  if (v9 != 1)
  {
    BOOL v21 = 0;
    uint64_t v22 = *(void **)v94;
    if (!*(void *)v94) {
      return v21;
    }
LABEL_23:
    *(void *)&v94[8] = v22;
    operator delete(v22);
    return v21;
  }
  memset(&__p, 0, sizeof(__p));
  uint64_t v10 = *(void *)v94;
  if (!*(unsigned char *)(*(void *)v94 + 40))
  {
    memset(&v93, 0, sizeof(v93));
    goto LABEL_33;
  }
  uint64_t v12 = *(void *)(*(void *)v94 + 24);
  uint32_t v11 = *(char **)(*(void *)v94 + 32);
  unint64_t v13 = (unint64_t)&v11[-v12];
  if ((unint64_t)&v11[-v12] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v11 - v12;
    size_t v14 = &v93;
    if ((char *)v12 != v11) {
      goto LABEL_16;
    }
LABEL_29:
    unsigned char *v14 = 0;
    goto LABEL_33;
  }
  uint64_t v24 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17) {
    uint64_t v24 = v13 | 7;
  }
  uint64_t v25 = v24 + 1;
  size_t v14 = operator new(v24 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v11[-v12];
  v93.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  if ((char *)v12 == v11) {
    goto LABEL_29;
  }
LABEL_16:
  if (v13 < 0x20 || (unint64_t)&v14[-v12] < 0x20)
  {
    uint64_t v15 = v14;
    uint64_t v16 = (char *)v12;
  }
  else
  {
    uint64_t v15 = &v14[v13 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v16 = (char *)(v12 + (v13 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v17 = (long long *)(v12 + 16);
    __int16 v18 = v14 + 16;
    unint64_t v19 = v13 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v20 = *v17;
      *(v18 - 1) = *(v17 - 1);
      _OWORD *v18 = v20;
      v17 += 2;
      v18 += 2;
      v19 -= 32;
    }
    while (v19);
    if (v13 == (v13 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_32;
    }
  }
  do
  {
    char v26 = *v16++;
    *v15++ = v26;
  }
  while (v16 != v11);
LABEL_32:
  *uint64_t v15 = 0;
LABEL_33:
  util::convert<int>(&v93, &__p.tm_year, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    __p.tm_year -= 1900;
    if (*(unsigned char *)(v10 + 64)) {
      goto LABEL_35;
    }
LABEL_45:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_53;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  __p.tm_year -= 1900;
  if (!*(unsigned char *)(v10 + 64)) {
    goto LABEL_45;
  }
LABEL_35:
  uint64_t v28 = *(void *)(v10 + 48);
  int v27 = *(char **)(v10 + 56);
  unint64_t v29 = (unint64_t)&v27[-v28];
  if ((unint64_t)&v27[-v28] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v29 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v27 - v28;
    int v30 = &v93;
    if ((char *)v28 != v27) {
      goto LABEL_38;
    }
LABEL_49:
    *int v30 = 0;
    goto LABEL_53;
  }
  uint64_t v37 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v29 | 7) != 0x17) {
    uint64_t v37 = v29 | 7;
  }
  uint64_t v38 = v37 + 1;
  int v30 = operator new(v37 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v27[-v28];
  v93.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  if ((char *)v28 == v27) {
    goto LABEL_49;
  }
LABEL_38:
  if (v29 < 0x20 || (unint64_t)&v30[-v28] < 0x20)
  {
    size_t v31 = v30;
    __int16 v32 = (char *)v28;
  }
  else
  {
    size_t v31 = &v30[v29 & 0xFFFFFFFFFFFFFFE0];
    __int16 v32 = (char *)(v28 + (v29 & 0xFFFFFFFFFFFFFFE0));
    std::string::size_type v33 = (long long *)(v28 + 16);
    __int16 v34 = v30 + 16;
    unint64_t v35 = v29 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v36 = *v33;
      *(v34 - 1) = *(v33 - 1);
      *__int16 v34 = v36;
      v33 += 2;
      v34 += 2;
      v35 -= 32;
    }
    while (v35);
    if (v29 == (v29 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_52;
    }
  }
  do
  {
    char v39 = *v32++;
    *v31++ = v39;
  }
  while (v32 != v27);
LABEL_52:
  *size_t v31 = 0;
LABEL_53:
  util::convert<int>(&v93, &__p.tm_mon, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    --__p.tm_mon;
    if (*(unsigned char *)(v10 + 88)) {
      goto LABEL_55;
    }
LABEL_65:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_73;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  --__p.tm_mon;
  if (!*(unsigned char *)(v10 + 88)) {
    goto LABEL_65;
  }
LABEL_55:
  uint64_t v41 = *(void *)(v10 + 72);
  long long v40 = *(char **)(v10 + 80);
  unint64_t v42 = (unint64_t)&v40[-v41];
  if ((unint64_t)&v40[-v41] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v42 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v40 - v41;
    int64_t v43 = &v93;
    if ((char *)v41 != v40) {
      goto LABEL_58;
    }
LABEL_69:
    *int64_t v43 = 0;
    goto LABEL_73;
  }
  uint64_t v50 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v42 | 7) != 0x17) {
    uint64_t v50 = v42 | 7;
  }
  uint64_t v51 = v50 + 1;
  int64_t v43 = operator new(v50 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v40[-v41];
  v93.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  if ((char *)v41 == v40) {
    goto LABEL_69;
  }
LABEL_58:
  if (v42 < 0x20 || (unint64_t)&v43[-v41] < 0x20)
  {
    char v44 = v43;
    uint64_t v45 = (char *)v41;
  }
  else
  {
    char v44 = &v43[v42 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v45 = (char *)(v41 + (v42 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v46 = (long long *)(v41 + 16);
    char v47 = v43 + 16;
    unint64_t v48 = v42 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v49 = *v46;
      *(v47 - 1) = *(v46 - 1);
      _OWORD *v47 = v49;
      v46 += 2;
      v47 += 2;
      v48 -= 32;
    }
    while (v48);
    if (v42 == (v42 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_72;
    }
  }
  do
  {
    char v52 = *v45++;
    *v44++ = v52;
  }
  while (v45 != v40);
LABEL_72:
  *char v44 = 0;
LABEL_73:
  util::convert<int>(&v93, (_DWORD *)((unint64_t)&__p | 0xC), 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v10 + 112)) {
      goto LABEL_75;
    }
LABEL_85:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_93;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(unsigned char *)(v10 + 112)) {
    goto LABEL_85;
  }
LABEL_75:
  uint64_t v54 = *(void *)(v10 + 96);
  uint64_t v53 = *(char **)(v10 + 104);
  unint64_t v55 = (unint64_t)&v53[-v54];
  if ((unint64_t)&v53[-v54] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v55 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v53 - v54;
    __int16 v56 = &v93;
    if ((char *)v54 != v53) {
      goto LABEL_78;
    }
LABEL_89:
    *__int16 v56 = 0;
    goto LABEL_93;
  }
  uint64_t v63 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v63 = v55 | 7;
  }
  uint64_t v64 = v63 + 1;
  __int16 v56 = operator new(v63 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v53[-v54];
  v93.__r_.__value_.__r.__words[2] = v64 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if ((char *)v54 == v53) {
    goto LABEL_89;
  }
LABEL_78:
  if (v55 < 0x20 || (unint64_t)&v56[-v54] < 0x20)
  {
    long long v57 = v56;
    uint64_t v58 = (char *)v54;
  }
  else
  {
    long long v57 = &v56[v55 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v58 = (char *)(v54 + (v55 & 0xFFFFFFFFFFFFFFE0));
    size_t v59 = (long long *)(v54 + 16);
    unint64_t v60 = v56 + 16;
    unint64_t v61 = v55 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v62 = *v59;
      *(v60 - 1) = *(v59 - 1);
      *unint64_t v60 = v62;
      v59 += 2;
      v60 += 2;
      v61 -= 32;
    }
    while (v61);
    if (v55 == (v55 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_92;
    }
  }
  do
  {
    char v65 = *v58++;
    *v57++ = v65;
  }
  while (v58 != v53);
LABEL_92:
  *long long v57 = 0;
LABEL_93:
  util::convert<int>(&v93, &__p.tm_hour, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v10 + 136)) {
      goto LABEL_95;
    }
LABEL_105:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_113;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(unsigned char *)(v10 + 136)) {
    goto LABEL_105;
  }
LABEL_95:
  uint64_t v67 = *(void *)(v10 + 120);
  std::string::size_type v66 = *(char **)(v10 + 128);
  unint64_t v68 = (unint64_t)&v66[-v67];
  if ((unint64_t)&v66[-v67] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v68 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v66 - v67;
    int v69 = &v93;
    if ((char *)v67 != v66) {
      goto LABEL_98;
    }
LABEL_109:
    unsigned char *v69 = 0;
    goto LABEL_113;
  }
  uint64_t v76 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v68 | 7) != 0x17) {
    uint64_t v76 = v68 | 7;
  }
  uint64_t v77 = v76 + 1;
  int v69 = operator new(v76 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v66[-v67];
  v93.__r_.__value_.__r.__words[2] = v77 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
  if ((char *)v67 == v66) {
    goto LABEL_109;
  }
LABEL_98:
  if (v68 < 0x20 || (unint64_t)&v69[-v67] < 0x20)
  {
    size_t v70 = v69;
    unint64_t v71 = (char *)v67;
  }
  else
  {
    size_t v70 = &v69[v68 & 0xFFFFFFFFFFFFFFE0];
    unint64_t v71 = (char *)(v67 + (v68 & 0xFFFFFFFFFFFFFFE0));
    v72 = (long long *)(v67 + 16);
    uint64_t v73 = v69 + 16;
    unint64_t v74 = v68 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v75 = *v72;
      *(v73 - 1) = *(v72 - 1);
      _OWORD *v73 = v75;
      v72 += 2;
      v73 += 2;
      v74 -= 32;
    }
    while (v74);
    if (v68 == (v68 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_112;
    }
  }
  do
  {
    char v78 = *v71++;
    *v70++ = v78;
  }
  while (v71 != v66);
LABEL_112:
  unsigned char *v70 = 0;
LABEL_113:
  util::convert<int>(&v93, &__p.tm_min, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v10 + 160)) {
      goto LABEL_115;
    }
LABEL_125:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_133;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(unsigned char *)(v10 + 160)) {
    goto LABEL_125;
  }
LABEL_115:
  uint64_t v80 = *(void *)(v10 + 144);
  long long v79 = *(char **)(v10 + 152);
  unint64_t v81 = (unint64_t)&v79[-v80];
  if ((unint64_t)&v79[-v80] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v81 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v79 - v80;
    int v82 = &v93;
    if ((char *)v80 != v79) {
      goto LABEL_118;
    }
LABEL_129:
    unsigned char *v82 = 0;
    goto LABEL_133;
  }
  uint64_t v89 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v89 = v81 | 7;
  }
  uint64_t v90 = v89 + 1;
  int v82 = operator new(v89 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v79[-v80];
  v93.__r_.__value_.__r.__words[2] = v90 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
  if ((char *)v80 == v79) {
    goto LABEL_129;
  }
LABEL_118:
  if (v81 < 0x20 || (unint64_t)&v82[-v80] < 0x20)
  {
    size_t v83 = v82;
    unint64_t v84 = (char *)v80;
  }
  else
  {
    size_t v83 = &v82[v81 & 0xFFFFFFFFFFFFFFE0];
    unint64_t v84 = (char *)(v80 + (v81 & 0xFFFFFFFFFFFFFFE0));
    v85 = (long long *)(v80 + 16);
    v86 = v82 + 16;
    unint64_t v87 = v81 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v88 = *v85;
      *(v86 - 1) = *(v85 - 1);
      _OWORD *v86 = v88;
      v85 += 2;
      v86 += 2;
      v87 -= 32;
    }
    while (v87);
    if (v81 == (v81 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_132;
    }
  }
  do
  {
    char v91 = *v84++;
    *v83++ = v91;
  }
  while (v84 != v79);
LABEL_132:
  unsigned char *v83 = 0;
LABEL_133:
  util::convert<int>(&v93, &__p, 10);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  __p.tm_isdst = -1;
  time_t v92 = mktime(&__p);
  v93.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v93.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday((timeval *)&v93, 0);
  BOOL v21 = (int64_t)(v93.__r_.__value_.__r.__words[0] - v92) > a2;
  uint64_t v22 = *(void **)v94;
  if (*(void *)v94) {
    goto LABEL_23;
  }
  return v21;
}

void sub_1A61AC14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void util::findBasebandLogInfoFile(const void **a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  uint64_t v46 = a3;
  a3[2] = 0;
  int v3 = *a2;
  char v47 = a2[1];
  if (v3 == v47) {
    return;
  }
  while (1)
  {
    memset(&v49, 170, sizeof(v49));
    if (*((char *)v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)v3, *((void *)v3 + 1));
    }
    else
    {
      long long v5 = *v3;
      v49.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v5;
    }
    int v6 = *((char *)a1 + 23);
    if (v6 >= 0) {
      size_t v7 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v7 = (size_t)a1[1];
    }
    int v8 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v49.__r_.__value_.__l.__size_;
    }
    unint64_t v10 = size + v7;
    memset(__dst, 170, sizeof(__dst));
    if (size + v7 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v10 <= 0x16)
    {
      memset(__dst, 0, sizeof(__dst));
      uint32_t v11 = __dst;
      HIBYTE(__dst[2]) = size + v7;
      if (!v7) {
        goto LABEL_20;
      }
LABEL_16:
      if (v6 >= 0) {
        uint64_t v12 = a1;
      }
      else {
        uint64_t v12 = *a1;
      }
      memmove(v11, v12, v7);
      goto LABEL_20;
    }
    uint64_t v18 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v18 = v10 | 7;
    }
    uint64_t v19 = v18 + 1;
    uint32_t v11 = (void **)operator new(v18 + 1);
    __dst[1] = (void *)(size + v7);
    __dst[2] = (void *)(v19 | 0x8000000000000000);
    __dst[0] = v11;
    if (v7) {
      goto LABEL_16;
    }
LABEL_20:
    unint64_t v13 = (char *)v11 + v7;
    if (size)
    {
      if (v8 >= 0) {
        size_t v14 = &v49;
      }
      else {
        size_t v14 = (std::string *)v49.__r_.__value_.__r.__words[0];
      }
      memmove(v13, v14, size);
    }
    v13[size] = 0;
    v15.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    v15.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v50.st_blksize_t size = v15;
    *(timespec *)v50.st_qspare = v15;
    v50.st_birthtimespeCC_SHA256_CTX c = v15;
    *(timespec *)&v50.st_size_t size = v15;
    v50.st_mtimespeCC_SHA256_CTX c = v15;
    v50.st_ctimespeCC_SHA256_CTX c = v15;
    *(timespec *)&v50.st_uid = v15;
    v50.st_atimespeCC_SHA256_CTX c = v15;
    *(timespec *)&v50.st_dev = v15;
    if (SHIBYTE(__dst[2]) >= 0) {
      uint64_t v16 = (const char *)__dst;
    }
    else {
      uint64_t v16 = (const char *)__dst[0];
    }
    if (stat(v16, &v50)
      || (SHIBYTE(__dst[2]) >= 0 ? (long long v20 = (const char *)__dst) : (long long v20 = (const char *)__dst[0]),
          BOOL v21 = opendir(v20),
          (uint64_t v22 = v21) == 0))
    {
      char v17 = HIBYTE(__dst[2]);
      goto LABEL_30;
    }
    int v23 = readdir(v21);
    closedir(v22);
    char v17 = HIBYTE(__dst[2]);
    if (v23) {
      break;
    }
LABEL_30:
    if (v17 < 0)
    {
      operator delete(__dst[0]);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
LABEL_59:
      }
        operator delete(v49.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_59;
    }
    int v3 = (long long *)((char *)v3 + 24);
    if (v3 == v47) {
      return;
    }
  }
  if ((HIBYTE(__dst[2]) & 0x80) == 0)
  {
    if (HIBYTE(__dst[2]) <= 4u) {
      goto LABEL_99;
    }
    uint64_t v24 = (_DWORD *)((char *)__dst + HIBYTE(__dst[2]) - 5);
    if (*v24 == 1885626669 && *((unsigned char *)__dst + HIBYTE(__dst[2]) - 1) == 108) {
      goto LABEL_79;
    }
    if (*v24 == 1935962413 && *((unsigned char *)__dst + HIBYTE(__dst[2]) - 1) == 115) {
      goto LABEL_79;
    }
    if (*v24 == 1634296877 && *((unsigned char *)__dst + HIBYTE(__dst[2]) - 1) == 103) {
      goto LABEL_79;
    }
    if (HIBYTE(__dst[2]) < 9u) {
      goto LABEL_99;
    }
    uint64_t v28 = __dst;
    unint64_t v29 = (void *)HIBYTE(__dst[2]);
    goto LABEL_74;
  }
  unint64_t v29 = __dst[1];
  if (__dst[1] < (void *)5) {
    goto LABEL_99;
  }
  uint64_t v28 = (void **)__dst[0];
  int v30 = (char *)__dst[1] + (unint64_t)__dst[0] - 5;
  if ((*v30 != 1885626669 || *((unsigned char *)__dst[1] + (unint64_t)__dst[0] - 1) != 108)
    && (*v30 != 1935962413 || *((unsigned char *)__dst[1] + (unint64_t)__dst[0] - 1) != 115)
    && (*v30 != 1634296877 || *((unsigned char *)__dst[1] + (unint64_t)__dst[0] - 1) != 103))
  {
    if (__dst[1] < (void *)9) {
LABEL_99:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
LABEL_74:
    __int16 v34 = (char *)v28 + (void)v29;
    uint64_t v35 = *(void *)(v34 - 9);
    int v36 = *(v34 - 1);
    if (v35 == 0x636172742D62622DLL && v36 == 101) {
      goto LABEL_79;
    }
    goto LABEL_30;
  }
LABEL_79:
  int v38 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v39 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v39 = v49.__r_.__value_.__l.__size_;
  }
  unint64_t v40 = v39 + 9;
  memset(&v50, 170, 24);
  if (v39 + 9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v40 >= 0x17)
  {
    uint64_t v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17) {
      uint64_t v42 = v40 | 7;
    }
    uint64_t v43 = v42 + 1;
    uint64_t v41 = operator new(v42 + 1);
    v50.st_ino = v39 + 9;
    *(void *)&v50.st_uid = v43 | 0x8000000000000000;
    *(void *)&v50.st_dev = v41;
  }
  else
  {
    memset(&v50, 0, 24);
    uint64_t v41 = &v50;
    HIBYTE(v50.st_gid) = v39 + 9;
    if (!v39) {
      goto LABEL_93;
    }
  }
  if (v38 >= 0) {
    char v44 = &v49;
  }
  else {
    char v44 = (std::string *)v49.__r_.__value_.__r.__words[0];
  }
  memmove(v41, v44, v39);
LABEL_93:
  strcpy((char *)v41 + v39, "/info.txt");
  uint64_t v45 = v46;
  *uint64_t v46 = *(_OWORD *)&v50.st_dev;
  *((void *)v45 + 2) = *(void *)&v50.st_uid;
  if ((v17 & 0x80) == 0)
  {
    if ((v38 & 0x80) == 0) {
      return;
    }
LABEL_97:
    operator delete(v49.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__dst[0]);
  if ((*((unsigned char *)&v49.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_97;
  }
}

void sub_1A61AC63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  _Unwind_Resume(exception_object);
}

BOOL util::isDumpForSysdiagnose(uint64_t a1, uint64_t a2)
{
  __p[73] = *(void **)MEMORY[0x1E4F143B8];
  char v65 = 0;
  std::string::size_type v66 = 0;
  uint64_t v67 = 0;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v63[32] = v2;
  long long v64 = v2;
  *(_OWORD *)uint64_t v63 = v2;
  *(_OWORD *)&v63[16] = v2;
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    size_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v4 = *(void *)(a2 + 8);
  }
  unint64_t v5 = v4 + 2;
  memset(&v62, 170, sizeof(v62));
  if (v4 + 2 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v6 = (const void **)a2;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint32_t v11 = operator new(v9 + 1);
    v62.__r_.__value_.__l.__size_ = v4 + 2;
    v62.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    _WORD *v11 = 10798;
    int v8 = (std::string::value_type *)(v11 + 1);
  }
  else
  {
    v62.__r_.__value_.__r.__words[2] = 0;
    *((unsigned char *)&v62.__r_.__value_.__s + 23) = v4 + 2;
    int v8 = &v62.__r_.__value_.__s.__data_[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = 0x2A2EuLL;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    uint64_t v12 = v6;
  }
  else {
    uint64_t v12 = (const void **)*v6;
  }
  memmove(v8, v12, v4);
LABEL_15:
  v8[v4] = 0;
  unint64_t v13 = std::string::append(&v62, ".*", 2uLL);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  std::string __p[2] = (void *)v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)tm __p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v63, (uint64_t)__p, 0);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_20:
    operator delete(v62.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
LABEL_17:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_18:
    std::string v61 = *(std::string *)a1;
    goto LABEL_22;
  }
LABEL_21:
  std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
LABEL_22:
  std::locale::locale(&v55, (const std::locale *)v63);
  long long v56 = *(_OWORD *)&v63[8];
  long long v57 = *(_OWORD *)&v63[24];
  uint64_t v58 = *(void *)&v63[40];
  size_t v59 = (std::__shared_weak_count *)v64;
  if ((void)v64) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v60 = *((void *)&v64 + 1);
  BOOL FilteredFiles = support::fs::getFilteredFiles((const char *)&v61, (uint64_t)&v55, (uint64_t)&v65, 0);
  uint64_t v16 = v59;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    std::locale::~locale(&v55);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      if (FilteredFiles) {
        goto LABEL_28;
      }
LABEL_32:
      BOOL v17 = 0;
      goto LABEL_110;
    }
  }
  else
  {
    std::locale::~locale(&v55);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_27;
    }
  }
  operator delete(v61.__r_.__value_.__l.__data_);
  if (!FilteredFiles) {
    goto LABEL_32;
  }
LABEL_28:
  memset(&v62, 170, sizeof(v62));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v54 = *(std::string *)a1;
  }
  uint64_t v51 = 0;
  char v52 = 0;
  uint64_t v53 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v51, (uint64_t)v65, (uint64_t)v66, 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (unsigned char *)v65) >> 3));
  util::findBasebandLogInfoFile((const void **)&v54.__r_.__value_.__l.__data_, (long long **)&v51, &v62);
  uint64_t v18 = (void **)v51;
  if (v51)
  {
    uint64_t v19 = v52;
    long long v20 = v51;
    if (v52 != v51)
    {
      do
      {
        if (*((char *)v19 - 1) < 0) {
          operator delete(*(v19 - 3));
        }
        v19 -= 3;
      }
      while (v19 != v18);
      long long v20 = v51;
    }
    char v52 = v18;
    operator delete(v20);
  }
  if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    int v21 = SHIBYTE(v62.__r_.__value_.__r.__words[2]);
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v62.__r_.__value_.__l.__size_;
    }
    if (size) {
      goto LABEL_47;
    }
LABEL_94:
    uint64_t v42 = GetOsLogContext()[1];
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v6 + 23) < 0) {
        int v6 = (const void **)*v6;
      }
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v6;
      _os_log_impl(&dword_1A609F000, v42, OS_LOG_TYPE_DEFAULT, "No baseband info file found for %s", (uint8_t *)__p, 0xCu);
    }
    BOOL v17 = 0;
    if ((v21 & 0x80) != 0) {
      goto LABEL_109;
    }
    goto LABEL_110;
  }
  operator delete(v54.__r_.__value_.__l.__data_);
  int v21 = SHIBYTE(v62.__r_.__value_.__r.__words[2]);
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v62.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_94;
  }
LABEL_47:
  memset(__p, 170, 0x240uLL);
  int v23 = *(char *)(a1 + 23);
  if (v23 >= 0) {
    size_t v24 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v24 = *(void *)(a1 + 8);
  }
  unint64_t v25 = v24 + size;
  memset(__dst, 170, 24);
  if (v24 + size > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v25 <= 0x16)
  {
    memset(__dst, 0, 24);
    char v26 = __dst;
    HIBYTE(__dst[2]) = v24 + size;
    if (!v24) {
      goto LABEL_57;
    }
    goto LABEL_53;
  }
  uint64_t v43 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v25 | 7) != 0x17) {
    uint64_t v43 = v25 | 7;
  }
  uint64_t v44 = v43 + 1;
  char v26 = (void **)operator new(v43 + 1);
  __dst[1] = (void *)(v24 + size);
  __dst[2] = (void *)(v44 | 0x8000000000000000);
  __dst[0] = v26;
  if (v24)
  {
LABEL_53:
    if (v23 >= 0) {
      int v27 = (const void *)a1;
    }
    else {
      int v27 = *(const void **)a1;
    }
    memmove(v26, v27, v24);
  }
LABEL_57:
  uint64_t v28 = (char *)v26 + v24;
  if (v21 >= 0) {
    unint64_t v29 = &v62;
  }
  else {
    unint64_t v29 = (std::string *)v62.__r_.__value_.__r.__words[0];
  }
  memmove(v28, v29, size);
  v28[size] = 0;
  std::ifstream::basic_ifstream((uint64_t *)__p);
  if (SHIBYTE(__dst[2]) < 0)
  {
    operator delete(__dst[0]);
    if (__p[17]) {
      goto LABEL_62;
    }
LABEL_105:
    uint64_t v45 = GetOsLogContext()[1];
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__dst[0]) = 136315138;
      *(void **)((char *)__dst + 4) = v29;
      _os_log_error_impl(&dword_1A609F000, v45, OS_LOG_TYPE_ERROR, "Failed to open info file: %s", (uint8_t *)__dst, 0xCu);
    }
    BOOL v17 = 0;
    goto LABEL_108;
  }
  if (!__p[17]) {
    goto LABEL_105;
  }
LABEL_62:
  std::istream::seekg();
  memset(__dst, 170, 24);
  int v30 = __dst;
  support::fs::readCurrentLine(__p, __dst);
  uint64_t v31 = HIBYTE(__dst[2]);
  int v32 = SHIBYTE(__dst[2]);
  std::string::size_type v33 = __dst[0];
  if (SHIBYTE(__dst[2]) < 0)
  {
    uint64_t v31 = (uint64_t)__dst[1];
    int v30 = (void **)__dst[0];
  }
  __int16 v34 = (char *)v30 + v31;
  if (v31 >= 35)
  {
    uint64_t v35 = v30;
    do
    {
      int v36 = (char *)memchr(v35, 98, v31 - 34);
      if (!v36) {
        break;
      }
      if (*(void *)v36 == 0x6320676F6C206262
        && *((void *)v36 + 1) == 0x6F697463656C6C6FLL
        && *((void *)v36 + 2) == 0x20726F66202D206ELL
        && *((void *)v36 + 3) == 0x6E67616964737973
        && *(void *)(v36 + 27) == 0x65736F6E67616964)
      {
        goto LABEL_82;
      }
      uint64_t v35 = (void **)(v36 + 1);
      uint64_t v31 = v34 - (char *)v35;
    }
    while (v34 - (char *)v35 > 34);
  }
  int v36 = v34;
LABEL_82:
  BOOL v17 = v36 != v34 && v36 - (char *)v30 != -1;
  if (v32 < 0) {
    operator delete(v33);
  }
LABEL_108:
  __p[0] = *(void **)MEMORY[0x1E4FBA3F8];
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1A6274EB0](&__p[2]);
  std::istream::~istream();
  MEMORY[0x1A62751A0](&__p[53]);
  if ((*((unsigned char *)&v62.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_109:
  }
    operator delete(v62.__r_.__value_.__l.__data_);
LABEL_110:
  uint64_t v46 = (std::__shared_weak_count *)v64;
  if ((void)v64 && !atomic_fetch_add((atomic_ullong *volatile)(v64 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  std::locale::~locale((std::locale *)v63);
  char v47 = (void **)v65;
  if (v65)
  {
    unint64_t v48 = v66;
    std::string v49 = v65;
    if (v66 != v65)
    {
      do
      {
        if (*((char *)v48 - 1) < 0) {
          operator delete(*(v48 - 3));
        }
        v48 -= 3;
      }
      while (v48 != v47);
      std::string v49 = v65;
    }
    std::string::size_type v66 = v47;
    operator delete(v49);
  }
  return v17;
}

void sub_1A61ACE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::locale a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,uint64_t a36,std::locale a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56)
{
  std::ifstream::~ifstream(&a56);
  if (v56 < 0) {
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a37);
  std::vector<std::string>::~vector[abi:ne180100](&a46);
  _Unwind_Resume(a1);
}

void sub_1A61ACF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0)
  {
    operator delete(__p);
    if (a33 < 0)
    {
LABEL_5:
      operator delete(a28);
      std::vector<std::string>::~vector[abi:ne180100](&a43);
      _Unwind_Resume(a1);
    }
  }
  else if (a33 < 0)
  {
    goto LABEL_5;
  }
  std::vector<std::string>::~vector[abi:ne180100](&a43);
  _Unwind_Resume(a1);
}

void sub_1A61ACF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
}

void util::findLastLogDumpTimestamp(util *this@<X0>, const char *__s@<X1>, const char *a3@<X2>, int a4@<W3>, char *a5@<X4>, std::string *a6@<X8>)
{
  unsigned int v8 = a3;
  uint64_t v10 = a6;
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  v138 = 0;
  std::string v139 = 0;
  uint64_t v140 = 0;
  memset(v137, 170, sizeof(v137));
  size_t v11 = strlen(__s);
  unint64_t v103 = v10;
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v12;
    *(void *)v142 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  v142[7] = v11;
  p_dst = &__dst;
  if (v11) {
LABEL_8:
  }
    memcpy(p_dst, __s, v12);
  *((unsigned char *)p_dst + v12) = 0;
  uint64_t v16 = std::string::append((std::string *)&__dst, ".*", 2uLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v137[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v137 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((v142[7] & 0x80000000) != 0) {
    operator delete((void *)__dst);
  }
  *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v135[32] = v18;
  long long v136 = v18;
  *(_OWORD *)v135 = v18;
  *(_OWORD *)&v135[16] = v18;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v135, (uint64_t)v137, 0);
  *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v133[32] = v19;
  long long v134 = v19;
  *(_OWORD *)uint64_t v133 = v19;
  *(_OWORD *)&v133[16] = v19;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)v133, "(\\d{4})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{3})", 0);
  BOOL v104 = a5 == 0;
  size_t v20 = strlen((const char *)this);
  if (v20 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    uint64_t v22 = operator new(v23 + 1);
    unint64_t v132 = v24 | 0x8000000000000000;
    __p[0] = v22;
    __p[1] = v21;
    goto LABEL_18;
  }
  HIBYTE(v132) = v20;
  uint64_t v22 = __p;
  if (v20) {
LABEL_18:
  }
    memcpy(v22, this, (size_t)v21);
  *((unsigned char *)v21 + (void)v22) = 0;
  std::locale::locale(&v125, (const std::locale *)v135);
  long long v126 = *(_OWORD *)&v135[8];
  long long v127 = *(_OWORD *)&v135[24];
  uint64_t v128 = *(void *)&v135[40];
  v129 = (std::__shared_weak_count *)v136;
  if ((void)v136) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v136 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v130 = *((void *)&v136 + 1);
  BOOL FilteredFiles = support::fs::getFilteredFiles((const char *)__p, (uint64_t)&v125, (uint64_t)&v138, 0);
  char v26 = v129;
  if (v129 && !atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    std::locale::~locale(&v125);
    if ((SHIBYTE(v132) & 0x80000000) == 0)
    {
LABEL_24:
      if (!FilteredFiles) {
        goto LABEL_167;
      }
      goto LABEL_28;
    }
  }
  else
  {
    std::locale::~locale(&v125);
    if ((SHIBYTE(v132) & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  operator delete(__p[0]);
  if (!FilteredFiles) {
    goto LABEL_167;
  }
LABEL_28:
  unint64_t v28 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v139 - v138));
  if (v139 == v138) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v28;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>((unint64_t)v138, v139, v29, 1, v27);
  memset(&v124, 0, sizeof(v124));
  int v30 = v138;
  uint64_t v102 = v139;
  if (v138 == v139)
  {
LABEL_167:
    if (!v8) {
      goto LABEL_184;
    }
LABEL_168:
    if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v111, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
    }
    else {
      std::string v111 = *v10;
    }
    std::locale::locale(&v105, (const std::locale *)v133);
    long long v106 = *(_OWORD *)&v133[8];
    long long v107 = *(_OWORD *)&v133[24];
    uint64_t v108 = *(void *)&v133[40];
    std::string::size_type v109 = (std::__shared_weak_count *)v134;
    if ((void)v134) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v134 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v110 = *((void *)&v134 + 1);
    BOOL v91 = util::checkLogFileAge((uint64_t)&v111, v8, (uint64_t)&v105);
    time_t v92 = v109;
    if (v109 && !atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
      std::locale::~locale(&v105);
      if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_176:
        if (!v91) {
          goto LABEL_184;
        }
LABEL_180:
        if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
        {
          *v10->__r_.__value_.__l.__data_ = 0;
          v10->__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v10->__r_.__value_.__s.__data_[0] = 0;
          *((unsigned char *)&v10->__r_.__value_.__s + 23) = 0;
        }
        goto LABEL_184;
      }
    }
    else
    {
      std::locale::~locale(&v105);
      if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_176;
      }
    }
    operator delete(v111.__r_.__value_.__l.__data_);
    if (!v91) {
      goto LABEL_184;
    }
    goto LABEL_180;
  }
  unsigned int v98 = v8;
  uint64_t v100 = a5;
  while (1)
  {
    memset(&v123, 170, sizeof(v123));
    if (*((char *)v30 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v123, (const std::string::value_type *)*v30, (std::string::size_type)v30[1]);
    }
    else
    {
      long long v31 = *(_OWORD *)v30;
      v123.__r_.__value_.__r.__words[2] = (std::string::size_type)v30[2];
      *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v31;
    }
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t size = v124.__r_.__value_.__l.__size_;
    }
    std::string::size_type v33 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
    int v34 = SHIBYTE(v123.__r_.__value_.__r.__words[2]);
    uint64_t v35 = (std::string *)v123.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v36 = &v124;
      }
      else {
        int v36 = (std::string *)v124.__r_.__value_.__r.__words[0];
      }
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v37 = &v123;
      }
      else {
        uint64_t v37 = (std::string *)v123.__r_.__value_.__r.__words[0];
      }
      int64_t v38 = v123.__r_.__value_.__l.__size_;
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t v38 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
      }
      if (v38 >= size)
      {
        uint64_t v63 = (char *)v37 + v38;
        int v64 = v36->__r_.__value_.__s.__data_[0];
        char v65 = v37;
        do
        {
          int64_t v66 = v38 - size;
          if (v66 == -1) {
            break;
          }
          uint64_t v67 = (char *)memchr(v65, v64, v66 + 1);
          if (!v67) {
            break;
          }
          unint64_t v68 = v67;
          if (!memcmp(v67, v36, size))
          {
            if (v68 == v63 || v68 - (char *)v37 == -1) {
              break;
            }
            int v61 = 3;
            uint64_t v10 = v103;
            if ((v34 & 0x80) == 0) {
              goto LABEL_150;
            }
            goto LABEL_106;
          }
          char v65 = (std::string *)(v68 + 1);
          int64_t v38 = v63 - (v68 + 1);
        }
        while (v38 >= size);
      }
    }
    *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v121 = v39;
    unint64_t v118 = 0xAAAAAAAAAAAAAA00;
    v115[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v116 = 0;
    uint64_t v117 = 0;
    uint64_t v119 = 0;
    uint64_t v120 = 0;
    LOBYTE(v121) = 0;
    BYTE8(v121) = 0;
    uint64_t v122 = 0;
    memset(v115, 0, 41);
    if (v104)
    {
      std::string::size_type v40 = v123.__r_.__value_.__l.__size_;
      long long v148 = v39;
      unint64_t v145 = 0xAAAAAAAAAAAAAA00;
      *(void *)&v142[24] = v39;
      uint64_t v143 = 0;
      uint64_t v144 = 0;
      uint64_t v146 = 0;
      uint64_t v147 = 0;
      LOBYTE(v148) = 0;
      BYTE8(v148) = 0;
      uint64_t v149 = 0;
      long long __dst = 0uLL;
      *(_OWORD *)v142 = 0uLL;
      if (v34 >= 0) {
        uint64_t v41 = (std::sub_match<const char *> *)&v123;
      }
      else {
        uint64_t v41 = (std::sub_match<const char *> *)v35;
      }
      if (v34 >= 0) {
        std::string::size_type v40 = v33;
      }
      *(_OWORD *)&v142[9] = 0uLL;
      uint64_t v10 = v103;
      int v42 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v133, v41, (std::sub_match<const char *> *)((char *)v41 + v40), (std::vector<std::csub_match> *)&__dst, 0);
      std::string::size_type v43 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v44 = &v123;
      }
      else {
        uint64_t v44 = (std::string *)v123.__r_.__value_.__r.__words[0];
      }
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v43 = v123.__r_.__value_.__l.__size_;
      }
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v115, (uint64_t)v44, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v44 + v43), (uint64_t *)&__dst, 0);
      if ((void)__dst)
      {
        *((void *)&__dst + 1) = __dst;
        operator delete((void *)__dst);
      }
      if (v42)
      {
        p_end_cap = &v115[1].__end_cap_;
        if (v115[0].__end_ != v115[0].__begin_) {
          p_end_cap = &v115[0].__begin_->matched;
        }
        if (!*p_end_cap)
        {
          long long __dst = 0uLL;
          *(void *)v142 = 0;
          if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_116;
          }
          goto LABEL_101;
        }
        std::vector<std::ssub_match>::pointer begin = (std::vector<std::ssub_match>::pointer)&v115[1];
        if (v115[0].__end_ != v115[0].__begin_) {
          std::vector<std::ssub_match>::pointer begin = v115[0].__begin_;
        }
        std::__wrap_iter<const char *>::iterator_type i = begin->first.__i_;
        p_std::__wrap_iter<const char *>::iterator_type i = &v115[0].__begin_->second.__i_;
        if (v115[0].__end_ == v115[0].__begin_) {
          p_std::__wrap_iter<const char *>::iterator_type i = (const char **)&v115[1].__end_;
        }
        std::string v49 = *p_i;
        unint64_t v50 = *p_i - i;
        if (v50 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v50 > 0x16)
        {
          uint64_t v75 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v50 | 7) != 0x17) {
            uint64_t v75 = v50 | 7;
          }
          uint64_t v76 = v75 + 1;
          uint64_t v51 = (long long *)operator new(v75 + 1);
          *((void *)&__dst + 1) = v50;
          *(void *)v142 = v76 | 0x8000000000000000;
          *(void *)&long long __dst = v51;
          if (i != v49)
          {
LABEL_74:
            if (v50 < 0x20 || (unint64_t)((char *)v51 - i) < 0x20)
            {
              char v52 = v51;
              uint64_t v53 = i;
            }
            else
            {
              char v52 = (long long *)((char *)v51 + (v50 & 0xFFFFFFFFFFFFFFE0));
              uint64_t v53 = &i[v50 & 0xFFFFFFFFFFFFFFE0];
              std::string v54 = (long long *)(i + 16);
              std::locale v55 = v51 + 1;
              unint64_t v56 = v50 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v57 = *v54;
                *(v55 - 1) = *(v54 - 1);
                _OWORD *v55 = v57;
                v54 += 2;
                v55 += 2;
                v56 -= 32;
              }
              while (v56);
              if (v50 == (v50 & 0x7FFFFFFFFFFFFFE0))
              {
LABEL_115:
                *(unsigned char *)char v52 = 0;
                if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_116:
                  *(_OWORD *)&v103->__r_.__value_.__l.__data_ = __dst;
                  v103->__r_.__value_.__r.__words[2] = *(void *)v142;
                  if (a4) {
                    goto LABEL_117;
                  }
                  goto LABEL_141;
                }
LABEL_101:
                operator delete(v103->__r_.__value_.__l.__data_);
                *(_OWORD *)&v103->__r_.__value_.__l.__data_ = __dst;
                v103->__r_.__value_.__r.__words[2] = *(void *)v142;
                if (a4)
                {
LABEL_117:
                  size_t v78 = strlen((const char *)this);
                  if (v78 > 0x7FFFFFFFFFFFFFF7) {
                    std::string::__throw_length_error[abi:ne180100]();
                  }
                  long long v79 = (void *)v78;
                  if (v78 >= 0x17)
                  {
                    uint64_t v81 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v78 | 7) != 0x17) {
                      uint64_t v81 = v78 | 7;
                    }
                    uint64_t v82 = v81 + 1;
                    uint64_t v80 = operator new(v81 + 1);
                    v113[1] = v79;
                    unint64_t v114 = v82 | 0x8000000000000000;
                    v113[0] = v80;
                  }
                  else
                  {
                    HIBYTE(v114) = v78;
                    uint64_t v80 = v113;
                    if (!v78)
                    {
                      LOBYTE(v113[0]) = 0;
                      if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_121:
                        std::string v112 = *v103;
                        goto LABEL_127;
                      }
LABEL_126:
                      std::string::__init_copy_ctor_external(&v112, v103->__r_.__value_.__l.__data_, v103->__r_.__value_.__l.__size_);
LABEL_127:
                      BOOL isDumpForSysdiagnose = util::isDumpForSysdiagnose((uint64_t)v113, (uint64_t)&v112);
                      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(v112.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v114) & 0x80000000) == 0)
                        {
LABEL_129:
                          if (isDumpForSysdiagnose) {
                            goto LABEL_130;
                          }
                          goto LABEL_141;
                        }
                      }
                      else if ((SHIBYTE(v114) & 0x80000000) == 0)
                      {
                        goto LABEL_129;
                      }
                      operator delete(v113[0]);
                      if (isDumpForSysdiagnose)
                      {
LABEL_130:
                        unint64_t v84 = GetOsLogContext()[1];
                        if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
                        {
                          if ((v103->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            v85 = v103;
                          }
                          else {
                            v85 = (std::string *)v103->__r_.__value_.__r.__words[0];
                          }
                          LODWORD(__dst) = 136315138;
                          *(void *)((char *)&__dst + 4) = v85;
                          _os_log_impl(&dword_1A609F000, v84, OS_LOG_TYPE_DEFAULT, "Ignore dump for sysdiagnose: %s", (uint8_t *)&__dst, 0xCu);
                        }
                        if (&v124 != v103)
                        {
                          char v86 = HIBYTE(v103->__r_.__value_.__r.__words[2]);
                          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
                          {
                            if (v86 >= 0) {
                              uint64_t v89 = v103;
                            }
                            else {
                              uint64_t v89 = (std::string *)v103->__r_.__value_.__r.__words[0];
                            }
                            if (v86 >= 0) {
                              size_t v90 = HIBYTE(v103->__r_.__value_.__r.__words[2]);
                            }
                            else {
                              size_t v90 = v103->__r_.__value_.__l.__size_;
                            }
                            std::string::__assign_no_alias<false>((void **)&v124.__r_.__value_.__l.__data_, v89, v90);
                          }
                          else
                          {
                            if ((*((unsigned char *)&v103->__r_.__value_.__s + 23) & 0x80) == 0)
                            {
                              std::string v124 = *v103;
LABEL_164:
                              int v61 = 0;
                              v103->__r_.__value_.__s.__data_[0] = 0;
                              *((unsigned char *)&v103->__r_.__value_.__s + 23) = 0;
                              goto LABEL_146;
                            }
                            std::string::__assign_no_alias<true>(&v124, v103->__r_.__value_.__l.__data_, v103->__r_.__value_.__l.__size_);
                          }
                        }
                        if (SHIBYTE(v103->__r_.__value_.__r.__words[2]) < 0)
                        {
                          int v61 = 0;
                          *v103->__r_.__value_.__l.__data_ = 0;
                          v103->__r_.__value_.__l.__size_ = 0;
                          goto LABEL_146;
                        }
                        goto LABEL_164;
                      }
                      goto LABEL_141;
                    }
                  }
                  memcpy(v80, this, (size_t)v79);
                  *((unsigned char *)v79 + (void)v80) = 0;
                  if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_121;
                  }
                  goto LABEL_126;
                }
LABEL_141:
                int v61 = 2;
LABEL_146:
                char v87 = 1;
LABEL_147:
                BOOL v104 = v87;
                std::string v62 = v115[0].__begin_;
                if (v115[0].__begin_) {
                  goto LABEL_148;
                }
                goto LABEL_149;
              }
            }
            do
            {
              char v77 = *v53++;
              *(unsigned char *)char v52 = v77;
              char v52 = (long long *)((char *)v52 + 1);
            }
            while (v53 != v49);
            goto LABEL_115;
          }
        }
        else
        {
          v142[7] = *(unsigned char *)p_i - (_BYTE)i;
          uint64_t v51 = &__dst;
          if (i != v49) {
            goto LABEL_74;
          }
        }
        *(unsigned char *)uint64_t v51 = 0;
        if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_116;
        }
        goto LABEL_101;
      }
LABEL_145:
      int v61 = 0;
      goto LABEL_146;
    }
    if (v34 >= 0) {
      uint64_t v35 = &v123;
    }
    int64_t v58 = strlen(v100);
    uint64_t v10 = v103;
    if (!v58)
    {
LABEL_144:
      std::string::__assign_external(&v124, v100);
      goto LABEL_145;
    }
    int64_t v59 = v58;
    int64_t v60 = v123.__r_.__value_.__l.__size_;
    if (v34 >= 0) {
      int64_t v60 = v33;
    }
    if (v60 >= v58)
    {
      int v69 = (char *)v35 + v60;
      int v70 = *v100;
      unint64_t v71 = v35;
      do
      {
        int64_t v72 = v60 - v59;
        if (v72 == -1) {
          break;
        }
        uint64_t v73 = (char *)memchr(v71, v70, v72 + 1);
        if (!v73) {
          break;
        }
        unint64_t v74 = v73;
        if (!memcmp(v73, v100, v59))
        {
          char v87 = 0;
          if (v74 != v69)
          {
            int64_t v88 = v74 - (char *)v35;
            int v61 = 0;
            if (v88 == -1) {
              goto LABEL_147;
            }
            goto LABEL_144;
          }
          int v61 = 0;
          BOOL v104 = 0;
          std::string v62 = v115[0].__begin_;
          if (v115[0].__begin_) {
            goto LABEL_148;
          }
          goto LABEL_149;
        }
        unint64_t v71 = (std::string *)(v74 + 1);
        int64_t v60 = v69 - (v74 + 1);
      }
      while (v60 >= v59);
    }
    int v61 = 0;
    BOOL v104 = 0;
    std::string v62 = v115[0].__begin_;
    if (v115[0].__begin_)
    {
LABEL_148:
      v115[0].__end_ = v62;
      operator delete(v62);
    }
LABEL_149:
    if ((*((unsigned char *)&v123.__r_.__value_.__s + 23) & 0x80) != 0) {
      break;
    }
LABEL_150:
    if (v61 != 3) {
      goto LABEL_151;
    }
LABEL_33:
    v30 += 3;
    if (v30 == v102) {
      goto LABEL_166;
    }
  }
LABEL_106:
  operator delete(v123.__r_.__value_.__l.__data_);
  if (v61 == 3) {
    goto LABEL_33;
  }
LABEL_151:
  if (!v61) {
    goto LABEL_33;
  }
LABEL_166:
  unsigned int v8 = v98;
  if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_167;
  }
  operator delete(v124.__r_.__value_.__l.__data_);
  if (v98) {
    goto LABEL_168;
  }
LABEL_184:
  std::string v93 = (std::__shared_weak_count *)v134;
  if ((void)v134 && !atomic_fetch_add((atomic_ullong *volatile)(v134 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
    std::__shared_weak_count::__release_weak(v93);
    std::locale::~locale((std::locale *)v133);
    v94 = (std::__shared_weak_count *)v136;
    if (!(void)v136) {
      goto LABEL_188;
    }
LABEL_187:
    if (atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_188;
    }
    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
    std::__shared_weak_count::__release_weak(v94);
    std::locale::~locale((std::locale *)v135);
    if (SHIBYTE(v137[2]) < 0) {
LABEL_189:
    }
      operator delete(v137[0]);
  }
  else
  {
    std::locale::~locale((std::locale *)v133);
    v94 = (std::__shared_weak_count *)v136;
    if ((void)v136) {
      goto LABEL_187;
    }
LABEL_188:
    std::locale::~locale((std::locale *)v135);
    if (SHIBYTE(v137[2]) < 0) {
      goto LABEL_189;
    }
  }
  long long v95 = v138;
  if (v138)
  {
    uint64_t v96 = v139;
    unint64_t v97 = v138;
    if (v139 != v138)
    {
      do
      {
        if (*((char *)v96 - 1) < 0) {
          operator delete((void *)*(v96 - 3));
        }
        v96 -= 3;
      }
      while (v96 != v95);
      unint64_t v97 = v138;
    }
    std::string v139 = v95;
    operator delete(v97);
  }
}

void sub_1A61ADC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x220]);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x260]);
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v24 - 248));
  if (*(char *)(a24 + 23) < 0) {
    operator delete(*(void **)a24);
  }
  _Unwind_Resume(a1);
}

uint64_t util::getNumberOfLogDumps(uint64_t a1, const void **a2)
{
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  unint64_t v145 = 0;
  uint64_t v146 = 0;
  uint64_t v147 = 0;
  long long v142 = 0u;
  long long v143 = 0u;
  unint64_t v144 = 0xAAAAAAAA3F800000;
  size_t v4 = (char *)operator new(0x48uLL);
  unint64_t v5 = v4;
  strcpy(v4, "[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2,4}-[0-9]{3}");
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v140[32] = v6;
  long long v141 = v6;
  *(_OWORD *)uint64_t v140 = v6;
  *(_OWORD *)&v140[16] = v6;
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  unint64_t v9 = v8 + 64;
  memset(__dst, 170, 24);
  std::locale v125 = v4;
  if (v8 + 64 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v9 <= 0x16)
  {
    memset(__dst, 0, 24);
    uint64_t v10 = __dst;
    __dst[23] = v8 + 64;
LABEL_10:
    if (v7 >= 0) {
      unint64_t v13 = a2;
    }
    else {
      unint64_t v13 = *a2;
    }
    memmove(v10, v13, v8);
    goto LABEL_14;
  }
  uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17) {
    uint64_t v11 = v9 | 7;
  }
  uint64_t v12 = v11 + 1;
  uint64_t v10 = operator new(v11 + 1);
  *(void *)&__dst[8] = v8 + 64;
  *(void *)&__dst[16] = v12 | 0x8000000000000000;
  *(void *)long long __dst = v10;
  if (v8) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v14 = &v10[v8];
  long long v15 = *(_OWORD *)v5;
  long long v16 = *((_OWORD *)v5 + 1);
  long long v17 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v14 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v14 + 3) = v17;
  *(_OWORD *)uint64_t v14 = v15;
  *((_OWORD *)v14 + 1) = v16;
  v14[64] = 0;
  long long v18 = std::string::append((std::string *)__dst, ".*", 2uLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  *(void *)&__p[16] = *((void *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)tm __p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v140, (uint64_t)__p, 0);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((__dst[23] & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  else if ((__dst[23] & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(*(void **)__dst);
LABEL_16:
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v138 = v20;
  long long v139 = v20;
  long long v137 = v20;
  *(_OWORD *)&v136[0].__locale_ = v20;
  int v21 = *((char *)a2 + 23);
  if (v21 >= 0) {
    size_t v22 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v22 = (size_t)a2[1];
  }
  unint64_t v23 = v22 + 64;
  memset(__dst, 170, 24);
  if (v22 + 64 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v23 <= 0x16)
  {
    memset(__dst, 0, 24);
    uint64_t v24 = __dst;
    __dst[23] = v22 + 64;
LABEL_25:
    if (v21 >= 0) {
      __n128 v27 = a2;
    }
    else {
      __n128 v27 = *a2;
    }
    memmove(v24, v27, v22);
    goto LABEL_29;
  }
  uint64_t v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v23 | 7) != 0x17) {
    uint64_t v25 = v23 | 7;
  }
  uint64_t v26 = v25 + 1;
  uint64_t v24 = operator new(v25 + 1);
  *(void *)&__dst[8] = v22 + 64;
  *(void *)&__dst[16] = v26 | 0x8000000000000000;
  *(void *)long long __dst = v24;
  if (v22) {
    goto LABEL_25;
  }
LABEL_29:
  unint64_t v28 = &v24[v22];
  long long v29 = *(_OWORD *)v5;
  long long v30 = *((_OWORD *)v5 + 1);
  long long v31 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v28 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v28 + 3) = v31;
  *(_OWORD *)unint64_t v28 = v29;
  *((_OWORD *)v28 + 1) = v30;
  v28[64] = 0;
  int v32 = std::string::append((std::string *)__dst, "(?=-*)(?!\\.json)", 0x10uLL);
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  *(void *)&__p[16] = *((void *)&v32->__r_.__value_.__l + 2);
  *(_OWORD *)tm __p = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v136, (uint64_t)__p, 0);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((__dst[23] & 0x80000000) == 0) {
      goto LABEL_31;
    }
LABEL_36:
    operator delete(*(void **)__dst);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_37;
  }
  operator delete(*(void **)__p);
  if ((__dst[23] & 0x80000000) != 0) {
    goto LABEL_36;
  }
LABEL_31:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_32:
    std::string v135 = *(std::string *)a1;
    goto LABEL_38;
  }
LABEL_37:
  std::string::__init_copy_ctor_external(&v135, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
LABEL_38:
  std::locale::locale(&v129, (const std::locale *)v140);
  long long v130 = *(_OWORD *)&v140[8];
  long long v131 = *(_OWORD *)&v140[24];
  uint64_t v132 = *(void *)&v140[40];
  uint64_t v133 = (std::__shared_weak_count *)v141;
  if ((void)v141) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v141 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v134 = *((void *)&v141 + 1);
  support::fs::getFilteredFiles((const char *)&v135, (uint64_t)&v129, (uint64_t)&v145, 0);
  int v34 = v133;
  if (v133 && !atomic_fetch_add(&v133->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    std::locale::~locale(&v129);
    if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_43:
      int v36 = (std::sub_match<const char *> *)v145;
      uint64_t v35 = v146;
      if (v145 == v146) {
        goto LABEL_219;
      }
      goto LABEL_47;
    }
  }
  else
  {
    std::locale::~locale(&v129);
    if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_43;
    }
  }
  operator delete(v135.__r_.__value_.__l.__data_);
  int v36 = (std::sub_match<const char *> *)v145;
  uint64_t v35 = v146;
  if (v145 != v146)
  {
LABEL_47:
    long long v126 = v35;
    while (1)
    {
      *(void *)&long long v37 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v37 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v162 = v37;
      unint64_t v159 = 0xAAAAAAAAAAAAAA00;
      *(void *)&__dst[40] = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v157 = 0;
      uint64_t v158 = 0;
      uint64_t v160 = 0;
      uint64_t v161 = 0;
      LOBYTE(v162) = 0;
      BYTE8(v162) = 0;
      uint64_t v163 = 0;
      memset(__dst, 0, 41);
      long long v154 = v37;
      unint64_t v151 = 0xAAAAAAAAAAAAAA00;
      *(void *)&__p[40] = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v149 = 0;
      uint64_t v150 = 0;
      uint64_t v152 = 0;
      uint64_t v153 = 0;
      LOBYTE(v154) = 0;
      BYTE8(v154) = 0;
      uint64_t v155 = 0;
      memset(__p, 0, 41);
      second = (const char *)*((unsigned __int8 *)&v36->matched + 7);
      if ((char)second >= 0) {
        first = v36;
      }
      else {
        first = (std::sub_match<const char *> *)v36->first;
      }
      if ((char)second < 0) {
        second = v36->second;
      }
      int v40 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v136, first, (std::sub_match<const char *> *)&second[(void)first], (std::vector<std::csub_match> *)__p, 0);
      uint64_t v41 = (const char *)*((unsigned __int8 *)&v36->matched + 7);
      if ((char)v41 >= 0) {
        uint64_t v42 = (uint64_t)v36;
      }
      else {
        uint64_t v42 = (uint64_t)v36->first;
      }
      if ((char)v41 < 0) {
        uint64_t v41 = v36->second;
      }
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__dst, v42, (std::sub_match<std::__wrap_iter<const char *>> *)&v41[v42], (uint64_t *)__p, 0);
      if (*(void *)__p)
      {
        *(void *)&__p[8] = *(void *)__p;
        operator delete(*(void **)__p);
      }
      if (!v40) {
        goto LABEL_217;
      }
      std::string::size_type v43 = *(void *)&__dst[8] == *(void *)__dst ? &__dst[40] : (unsigned char *)(*(void *)__dst + 16);
      if (*v43) {
        break;
      }
      unint64_t v56 = 0;
      long long v57 = 0;
      unint64_t v58 = 0;
      v127[0] = 0;
      v127[1] = 0;
      int64_t v128 = 0;
LABEL_87:
      if ((v58 & 0x80u) == 0) {
        std::string v62 = (uint64_t *)v127;
      }
      else {
        std::string v62 = v57;
      }
      if ((v58 & 0x80u) == 0) {
        unint64_t v63 = v58;
      }
      else {
        unint64_t v63 = (unint64_t)v56;
      }
      unint64_t v64 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)__p, v62, v63);
      unint64_t v65 = v64;
      unint64_t v66 = *((void *)&v142 + 1);
      if (!*((void *)&v142 + 1))
      {
        unint64_t v68 = 0xAAAAAAAAAAAAAAAALL;
LABEL_143:
        *(void *)&__p[16] = 0xAAAAAAAAAAAAAA01;
        char v87 = operator new(0x28uLL);
        *(void *)tm __p = v87;
        *(void *)&__p[8] = &v143;
        void *v87 = 0;
        v87[1] = v65;
        *((_OWORD *)v87 + 1) = *(_OWORD *)v127;
        v87[4] = v128;
        v127[0] = 0;
        v127[1] = 0;
        int64_t v128 = 0;
        float v88 = (float)(unint64_t)(*((void *)&v143 + 1) + 1);
        if (v66 && (float)(*(float *)&v144 * (float)v66) >= v88)
        {
          uint64_t v35 = v126;
          uint64_t v89 = v142;
          size_t v90 = *(void **)(v142 + 8 * v68);
          if (v90) {
            goto LABEL_146;
          }
LABEL_195:
          void *v87 = v143;
          *(void *)&long long v143 = v87;
          *(void *)(v89 + 8 * v68) = &v143;
          if (*v87)
          {
            unint64_t v111 = *(void *)(*v87 + 8);
            if ((v66 & (v66 - 1)) != 0)
            {
              if (v111 >= v66) {
                v111 %= v66;
              }
            }
            else
            {
              v111 &= v66 - 1;
            }
            size_t v90 = (void *)(v142 + 8 * v111);
LABEL_214:
            *size_t v90 = v87;
          }
          ++*((void *)&v143 + 1);
          if (v128 < 0) {
            goto LABEL_216;
          }
          goto LABEL_217;
        }
        BOOL v91 = (v66 & (v66 - 1)) != 0;
        if (v66 < 3) {
          BOOL v91 = 1;
        }
        unint64_t v92 = v91 | (2 * v66);
        unint64_t v93 = vcvtps_u32_f32(v88 / *(float *)&v144);
        if (v92 <= v93) {
          size_t prime = v93;
        }
        else {
          size_t prime = v92;
        }
        uint64_t v35 = v126;
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
          unint64_t v66 = *((void *)&v142 + 1);
        }
        if (prime <= v66)
        {
          if (prime >= v66) {
            goto LABEL_193;
          }
          unint64_t v105 = vcvtps_u32_f32((float)*((unint64_t *)&v143 + 1) / *(float *)&v144);
          if (v66 < 3 || (uint8x8_t v106 = (uint8x8_t)vcnt_s8((int8x8_t)v66), v106.i16[0] = vaddlv_u8(v106), v106.u32[0] > 1uLL))
          {
            unint64_t v105 = std::__next_prime(v105);
          }
          else
          {
            uint64_t v107 = 1 << -(char)__clz(v105 - 1);
            if (v105 >= 2) {
              unint64_t v105 = v107;
            }
          }
          if (prime <= v105) {
            size_t prime = v105;
          }
          if (prime < v66)
          {
            if (prime) {
              goto LABEL_157;
            }
            std::string::size_type v109 = (void *)v142;
            *(void *)&long long v142 = 0;
            if (v109) {
              operator delete(v109);
            }
            unint64_t v66 = 0;
            *((void *)&v142 + 1) = 0;
            uint64_t v110 = -1;
            goto LABEL_194;
          }
          unint64_t v66 = *((void *)&v142 + 1);
          uint64_t v110 = *((void *)&v142 + 1) - 1;
          if ((*((void *)&v142 + 1) & (*((void *)&v142 + 1) - 1)) == 0) {
            goto LABEL_194;
          }
          goto LABEL_206;
        }
LABEL_157:
        if (prime >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        long long v95 = operator new(8 * prime);
        uint64_t v96 = (void *)v142;
        *(void *)&long long v142 = v95;
        if (v96) {
          operator delete(v96);
        }
        uint64_t v97 = 0;
        *((void *)&v142 + 1) = prime;
        do
          *(void *)(v142 + 8 * v97++) = 0;
        while (prime != v97);
        unsigned int v98 = (void **)v143;
        if (!(void)v143)
        {
LABEL_205:
          unint64_t v66 = prime;
          uint64_t v110 = prime - 1;
          if ((prime & (prime - 1)) == 0) {
            goto LABEL_194;
          }
          goto LABEL_206;
        }
        size_t v99 = *(void *)(v143 + 8);
        size_t v100 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          size_t v101 = v99 & v100;
          *(void *)(v142 + 8 * v101) = &v143;
          for (std::__wrap_iter<const char *>::iterator_type i = *v98; *v98; std::__wrap_iter<const char *>::iterator_type i = *v98)
          {
            size_t v103 = i[1] & v100;
            if (v103 == v101)
            {
              unsigned int v98 = (void **)i;
            }
            else if (*(void *)(v142 + 8 * v103))
            {
              std::string *v98 = (void *)*i;
              uint64_t v104 = 8 * v103;
              *std::__wrap_iter<const char *>::iterator_type i = **(void **)(v142 + v104);
              **(void **)(v142 + v104) = i;
            }
            else
            {
              *(void *)(v142 + 8 * v103) = v98;
              unsigned int v98 = (void **)i;
              size_t v101 = v103;
            }
          }
          goto LABEL_205;
        }
        if (v99 < prime)
        {
          *(void *)(v142 + 8 * v99) = &v143;
          uint64_t v108 = *v98;
          if (*v98) {
            goto LABEL_200;
          }
LABEL_192:
          unint64_t v66 = prime;
LABEL_193:
          uint64_t v110 = v66 - 1;
          if ((v66 & (v66 - 1)) == 0)
          {
LABEL_194:
            unint64_t v68 = v110 & v65;
            uint64_t v89 = v142;
            size_t v90 = *(void **)(v142 + 8 * (v110 & v65));
            if (!v90) {
              goto LABEL_195;
            }
LABEL_146:
            void *v87 = *v90;
            goto LABEL_214;
          }
LABEL_206:
          if (v65 >= v66)
          {
            unint64_t v68 = v65 % v66;
            uint64_t v89 = v142;
            size_t v90 = *(void **)(v142 + 8 * (v65 % v66));
            if (!v90) {
              goto LABEL_195;
            }
          }
          else
          {
            unint64_t v68 = v65;
            uint64_t v89 = v142;
            size_t v90 = *(void **)(v142 + 8 * v65);
            if (!v90) {
              goto LABEL_195;
            }
          }
          goto LABEL_146;
        }
        v99 %= prime;
        *(void *)(v142 + 8 * v99) = &v143;
        uint64_t v108 = *v98;
        if (!*v98) {
          goto LABEL_192;
        }
        while (1)
        {
LABEL_200:
          size_t v113 = v108[1];
          if (v113 >= prime) {
            v113 %= prime;
          }
          if (v113 == v99) {
            goto LABEL_199;
          }
          if (*(void *)(v142 + 8 * v113)) {
            break;
          }
          *(void *)(v142 + 8 * v113) = v98;
          unsigned int v98 = (void **)v108;
          uint64_t v108 = (void *)*v108;
          size_t v99 = v113;
          if (!v108) {
            goto LABEL_205;
          }
        }
        std::string *v98 = (void *)*v108;
        uint64_t v112 = 8 * v113;
        void *v108 = **(void **)(v142 + v112);
        **(void **)(v142 + v112) = v108;
        uint64_t v108 = v98;
LABEL_199:
        unsigned int v98 = (void **)v108;
        uint64_t v108 = (void *)*v108;
        if (!v108) {
          goto LABEL_205;
        }
        goto LABEL_200;
      }
      uint8x8_t v67 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v142 + 8));
      v67.i16[0] = vaddlv_u8(v67);
      if (v67.u32[0] > 1uLL)
      {
        unint64_t v68 = v64;
        if (v64 >= *((void *)&v142 + 1)) {
          unint64_t v68 = v64 % *((void *)&v142 + 1);
        }
      }
      else
      {
        unint64_t v68 = (*((void *)&v142 + 1) - 1) & v64;
      }
      int v69 = *(uint64_t ***)(v142 + 8 * v68);
      if (!v69) {
        goto LABEL_143;
      }
      int v70 = *v69;
      if (!*v69) {
        goto LABEL_143;
      }
      char v71 = HIBYTE(v128);
      if (v128 >= 0) {
        int64_t v72 = (void *)HIBYTE(v128);
      }
      else {
        int64_t v72 = v127[1];
      }
      if (v128 >= 0) {
        uint64_t v73 = v127;
      }
      else {
        uint64_t v73 = (void **)v127[0];
      }
      if (v67.u32[0] >= 2uLL)
      {
        while (1)
        {
          unint64_t v75 = v70[1];
          if (v75 == v65)
          {
            uint64_t v76 = *((unsigned __int8 *)v70 + 39);
            if ((v76 & 0x80u) == 0) {
              char v77 = (void *)*((unsigned __int8 *)v70 + 39);
            }
            else {
              char v77 = (void *)v70[3];
            }
            if (v77 == v72)
            {
              size_t v78 = (const void **)(v70 + 2);
              if ((v76 & 0x80) != 0)
              {
                if (!memcmp(*v78, v73, v70[3]))
                {
LABEL_125:
                  uint64_t v35 = v126;
                  if (v71 < 0) {
                    goto LABEL_216;
                  }
                  goto LABEL_217;
                }
              }
              else
              {
                if (!*((unsigned char *)v70 + 39)) {
                  goto LABEL_125;
                }
                long long v79 = v73;
                while (*(unsigned __int8 *)v78 == *(unsigned __int8 *)v79)
                {
                  size_t v78 = (const void **)((char *)v78 + 1);
                  long long v79 = (void **)((char *)v79 + 1);
                  if (!--v76) {
                    goto LABEL_125;
                  }
                }
              }
            }
          }
          else
          {
            if (v75 >= v66) {
              v75 %= v66;
            }
            if (v75 != v68) {
              goto LABEL_143;
            }
          }
          int v70 = (uint64_t *)*v70;
          if (!v70) {
            goto LABEL_143;
          }
        }
      }
      uint64_t v74 = *((void *)&v142 + 1) - 1;
      while (1)
      {
        uint64_t v80 = v70[1];
        if (v80 != v65)
        {
          if ((v80 & v74) != v68) {
            goto LABEL_143;
          }
          goto LABEL_128;
        }
        uint64_t v81 = *((unsigned __int8 *)v70 + 39);
        uint64_t v82 = (v81 & 0x80u) == 0 ? (void *)*((unsigned __int8 *)v70 + 39) : (void *)v70[3];
        if (v82 == v72) {
          break;
        }
LABEL_128:
        int v70 = (uint64_t *)*v70;
        if (!v70) {
          goto LABEL_143;
        }
      }
      size_t v83 = (const void **)(v70 + 2);
      if ((v81 & 0x80) == 0)
      {
        if (!*((unsigned char *)v70 + 39)) {
          goto LABEL_141;
        }
        unint64_t v84 = v73;
        while (*(unsigned __int8 *)v83 == *(unsigned __int8 *)v84)
        {
          size_t v83 = (const void **)((char *)v83 + 1);
          unint64_t v84 = (void **)((char *)v84 + 1);
          if (!--v81) {
            goto LABEL_141;
          }
        }
        goto LABEL_128;
      }
      std::string v124 = v72;
      uint64_t v85 = v74;
      int v86 = memcmp(*v83, v73, v70[3]);
      uint64_t v74 = v85;
      int64_t v72 = v124;
      if (v86) {
        goto LABEL_128;
      }
LABEL_141:
      uint64_t v35 = v126;
      if (v71 < 0) {
LABEL_216:
      }
        operator delete(v127[0]);
LABEL_217:
      if (*(void *)__dst)
      {
        *(void *)&__dst[8] = *(void *)__dst;
        operator delete(*(void **)__dst);
      }
      if (++v36 == v35) {
        goto LABEL_219;
      }
    }
    uint64_t v44 = (uint64_t *)&__dst[24];
    if (*(void *)&__dst[8] != *(void *)__dst) {
      uint64_t v44 = *(uint64_t **)__dst;
    }
    uint64_t v45 = *v44;
    uint64_t v46 = (char **)(*(void *)__dst + 8);
    if (*(void *)&__dst[8] == *(void *)__dst) {
      uint64_t v46 = (char **)&__dst[32];
    }
    char v47 = *v46;
    unint64_t v48 = (unint64_t)&(*v46)[-v45];
    if (v48 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v48 > 0x16)
    {
      uint64_t v59 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v48 | 7) != 0x17) {
        uint64_t v59 = v48 | 7;
      }
      uint64_t v60 = v59 + 1;
      std::string v49 = operator new(v59 + 1);
      v127[1] = (void *)v48;
      int64_t v128 = v60 | 0x8000000000000000;
      v127[0] = v49;
      if ((char *)v45 != v47) {
        goto LABEL_73;
      }
    }
    else
    {
      HIBYTE(v128) = *(unsigned char *)v46 - v45;
      std::string v49 = v127;
      if ((char *)v45 != v47)
      {
LABEL_73:
        if (v48 < 0x20 || (unint64_t)v49 - v45 < 0x20)
        {
          unint64_t v50 = v49;
          uint64_t v51 = (char *)v45;
        }
        else
        {
          unint64_t v50 = (char *)v49 + (v48 & 0xFFFFFFFFFFFFFFE0);
          uint64_t v51 = (char *)(v45 + (v48 & 0xFFFFFFFFFFFFFFE0));
          char v52 = (long long *)(v45 + 16);
          uint64_t v53 = v49 + 1;
          unint64_t v54 = v48 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v55 = *v52;
            *(v53 - 1) = *(v52 - 1);
            *uint64_t v53 = v55;
            v52 += 2;
            v53 += 2;
            v54 -= 32;
          }
          while (v54);
          if (v48 == (v48 & 0x7FFFFFFFFFFFFFE0)) {
            goto LABEL_86;
          }
        }
        do
        {
          char v61 = *v51++;
          *v50++ = v61;
        }
        while (v51 != v47);
LABEL_86:
        unsigned char *v50 = 0;
        unint64_t v58 = HIBYTE(v128);
        long long v57 = (uint64_t *)v127[0];
        unint64_t v56 = v127[1];
        goto LABEL_87;
      }
    }
    unint64_t v50 = v49;
    goto LABEL_86;
  }
LABEL_219:
  uint64_t v114 = *((void *)&v143 + 1);
  long long v115 = (std::__shared_weak_count *)v139;
  if ((void)v139 && !atomic_fetch_add((atomic_ullong *volatile)(v139 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
    std::__shared_weak_count::__release_weak(v115);
  }
  std::locale::~locale(v136);
  uint64_t v116 = (std::__shared_weak_count *)v141;
  if ((void)v141 && !atomic_fetch_add((atomic_ullong *volatile)(v141 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
    std::__shared_weak_count::__release_weak(v116);
  }
  std::locale::~locale((std::locale *)v140);
  operator delete(v125);
  uint64_t v117 = (void **)v143;
  if ((void)v143)
  {
    do
    {
      std::string v123 = (void **)*v117;
      if (*((char *)v117 + 39) < 0) {
        operator delete(v117[2]);
      }
      operator delete(v117);
      uint64_t v117 = v123;
    }
    while (v123);
  }
  unint64_t v118 = (void *)v142;
  *(void *)&long long v142 = 0;
  if (v118) {
    operator delete(v118);
  }
  uint64_t v119 = (void **)v145;
  if (v145)
  {
    uint64_t v120 = (void **)v146;
    long long v121 = v145;
    if (v146 != v145)
    {
      do
      {
        if (*((char *)v120 - 1) < 0) {
          operator delete(*(v120 - 3));
        }
        v120 -= 3;
      }
      while (v120 != v119);
      long long v121 = v145;
    }
    uint64_t v146 = (std::sub_match<const char *> *)v119;
    operator delete(v121);
  }
  return v114;
}

void sub_1A61AEDC0(_Unwind_Exception *a1)
{
  operator delete(v2);
  std::unordered_set<std::string>::~unordered_set[abi:ne180100](&v3);
  std::vector<std::string>::~vector[abi:ne180100](&v4);
  _Unwind_Resume(a1);
}

void sub_1A61AEDC8()
{
}

void sub_1A61AEDF0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1A61AEDF8);
  }
  JUMPOUT(0x1A61AEC80);
}

uint64_t std::unordered_set<std::string>::~unordered_set[abi:ne180100](uint64_t a1)
{
  long long v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      long long v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t util::compareTwoStringsWithPattern(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v87 = 0xAAAAAAAAAAAAAA00;
  v84[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
  long long v90 = v5;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  LOBYTE(v90) = 0;
  BYTE8(v90) = 0;
  uint64_t v91 = 0;
  memset(v84, 0, 41);
  long long v82 = v5;
  long long v83 = v5;
  *(_OWORD *)&v80[0].__locale_ = v5;
  long long v81 = v5;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v80, a3, 0);
  char v77 = 0;
  size_t v78 = 0;
  unint64_t v79 = 0;
  tm __p = 0;
  unint64_t v75 = 0;
  unint64_t v76 = 0;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v95 = 0xAAAAAAAAAAAAAA00;
  v92[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
  long long v98 = v6;
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  LOBYTE(v98) = 0;
  BYTE8(v98) = 0;
  uint64_t v99 = 0;
  memset(v92, 0, 32);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) == 0) {
    size_t v8 = (std::sub_match<const char *> *)a1;
  }
  else {
    size_t v8 = *(std::sub_match<const char *> **)a1;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  *(_OWORD *)((char *)&v92[1].__begin_ + 1) = 0uLL;
  int v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v80, v8, (std::sub_match<const char *> *)((char *)v8 + v7), v92, 0);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = *(void *)a1;
  }
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a1 + 8);
  }
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v84, v11, (std::sub_match<std::__wrap_iter<const char *>> *)(v11 + v10), (uint64_t *)v92, 0);
  if (v92[0].__begin_)
  {
    v92[0].__end_ = v92[0].__begin_;
    operator delete(v92[0].__begin_);
  }
  if (v9)
  {
    std::vector<std::ssub_match>::pointer end = v84[0].__end_;
    std::vector<std::ssub_match>::pointer begin = v84[0].__begin_;
    if (v84[0].__begin_ != v84[0].__end_)
    {
      while (1)
      {
        if (!begin->matched)
        {
          memset(v92, 0, 24);
          uint64_t v25 = v78;
          if ((unint64_t)v78 >= v79) {
            goto LABEL_38;
          }
          goto LABEL_16;
        }
        std::__wrap_iter<const char *>::iterator_type i = begin->first.__i_;
        std::__wrap_iter<const char *>::iterator_type v15 = begin->second.__i_;
        unint64_t v17 = v15 - begin->first.__i_;
        if (v17 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v17 > 0x16)
        {
          uint64_t v26 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17) {
            uint64_t v26 = v17 | 7;
          }
          uint64_t v27 = v26 + 1;
          long long v18 = (std::sub_match<const char *> *)operator new(v26 + 1);
          v92[0].__end_ = (std::vector<std::csub_match>::pointer)v17;
          v92[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v27 | 0x8000000000000000);
          v92[0].__begin_ = v18;
          if (i == v15)
          {
LABEL_33:
            LOBYTE(v18->first) = 0;
            uint64_t v25 = v78;
            if ((unint64_t)v78 >= v79) {
              goto LABEL_38;
            }
            goto LABEL_16;
          }
        }
        else
        {
          HIBYTE(v92[0].__end_cap_.__value_) = (_BYTE)v15 - LOBYTE(begin->first.__i_);
          long long v18 = (std::sub_match<const char *> *)v92;
          if (i == v15) {
            goto LABEL_33;
          }
        }
        if (v17 < 0x20 || (unint64_t)((char *)v18 - i) < 0x20) {
          break;
        }
        long long v19 = (std::sub_match<const char *> *)((char *)v18 + (v17 & 0xFFFFFFFFFFFFFFE0));
        long long v20 = &i[v17 & 0xFFFFFFFFFFFFFFE0];
        int v21 = (long long *)(i + 16);
        p_matched = &v18->matched;
        unint64_t v23 = v17 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v24 = *v21;
          *((_OWORD *)p_matched - 1) = *(v21 - 1);
          *(_OWORD *)p_matched = v24;
          v21 += 2;
          p_matched += 32;
          v23 -= 32;
        }
        while (v23);
        if (v17 != (v17 & 0x7FFFFFFFFFFFFFE0)) {
          goto LABEL_36;
        }
LABEL_37:
        LOBYTE(v19->first) = 0;
        uint64_t v25 = v78;
        if ((unint64_t)v78 >= v79)
        {
LABEL_38:
          size_t v78 = std::vector<std::string>::__push_back_slow_path<std::string>(&v77, (uint64_t)v92);
          if (SHIBYTE(v92[0].__end_cap_.__value_) < 0) {
            operator delete(v92[0].__begin_);
          }
          goto LABEL_17;
        }
LABEL_16:
        long long v14 = *(_OWORD *)&v92[0].__begin_;
        *((void *)v25 + 2) = v92[0].__end_cap_.__value_;
        *(_OWORD *)uint64_t v25 = v14;
        size_t v78 = v25 + 24;
LABEL_17:
        if (++begin == end) {
          goto LABEL_40;
        }
      }
      long long v19 = v18;
      long long v20 = i;
      do
      {
LABEL_36:
        char v28 = *v20++;
        LOBYTE(v19->first) = v28;
        long long v19 = (std::sub_match<const char *> *)((char *)v19 + 1);
      }
      while (v20 != v15);
      goto LABEL_37;
    }
LABEL_40:
    long long v29 = (char *)v77;
    long long v30 = v78;
    if (v78 - (unsigned char *)v77 != 24)
    {
      if ((char *)v77 + 24 != v78)
      {
        long long v31 = (char *)v77 + 23;
        do
        {
          int v32 = (void **)(v31 - 23);
          if (*v31 < 0) {
            operator delete(*v32);
          }
          *(_OWORD *)int v32 = *(_OWORD *)(v31 + 1);
          *(void *)(v31 - 7) = *(void *)(v31 + 17);
          v31[24] = 0;
          v31 += 24;
          *(v31 - 23) = 0;
          v29 += 24;
        }
        while (v31 + 1 != v30);
        long long v30 = v78;
      }
      while (v30 != v29)
      {
        if (*(v30 - 1) < 0) {
          operator delete(*((void **)v30 - 3));
        }
        v30 -= 24;
      }
      size_t v78 = v29;
    }
    *(void *)&long long v33 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v95 = 0xAAAAAAAAAAAAAA00;
    v92[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
    long long v98 = v33;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    LOBYTE(v98) = 0;
    BYTE8(v98) = 0;
    uint64_t v99 = 0;
    memset(v92, 0, 32);
    uint64_t v34 = *(unsigned __int8 *)(a2 + 23);
    if ((v34 & 0x80u) == 0) {
      uint64_t v35 = (std::sub_match<const char *> *)a2;
    }
    else {
      uint64_t v35 = *(std::sub_match<const char *> **)a2;
    }
    if ((v34 & 0x80u) != 0) {
      uint64_t v34 = *(void *)(a2 + 8);
    }
    *(_OWORD *)((char *)&v92[1].__begin_ + 1) = 0uLL;
    int v36 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v80, v35, (std::sub_match<const char *> *)((char *)v35 + v34), v92, 0);
    uint64_t v37 = *(unsigned __int8 *)(a2 + 23);
    if ((v37 & 0x80u) == 0) {
      uint64_t v38 = a2;
    }
    else {
      uint64_t v38 = *(void *)a2;
    }
    if ((v37 & 0x80u) != 0) {
      uint64_t v37 = *(void *)(a2 + 8);
    }
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v84, v38, (std::sub_match<std::__wrap_iter<const char *>> *)(v38 + v37), (uint64_t *)v92, 0);
    if (v92[0].__begin_)
    {
      v92[0].__end_ = v92[0].__begin_;
      operator delete(v92[0].__begin_);
    }
    if (v36)
    {
      std::vector<std::ssub_match>::pointer v40 = v84[0].__end_;
      std::vector<std::ssub_match>::pointer v39 = v84[0].__begin_;
      if (v84[0].__begin_ != v84[0].__end_)
      {
        while (1)
        {
          if (!v39->matched)
          {
            memset(v92, 0, 24);
            char v52 = v75;
            if ((unint64_t)v75 >= v76) {
              goto LABEL_89;
            }
            goto LABEL_67;
          }
          std::__wrap_iter<const char *>::iterator_type v43 = v39->first.__i_;
          std::__wrap_iter<const char *>::iterator_type v42 = v39->second.__i_;
          unint64_t v44 = v42 - v39->first.__i_;
          if (v44 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v44 > 0x16)
          {
            uint64_t v53 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v44 | 7) != 0x17) {
              uint64_t v53 = v44 | 7;
            }
            uint64_t v54 = v53 + 1;
            uint64_t v45 = (std::sub_match<const char *> *)operator new(v53 + 1);
            v92[0].__end_ = (std::vector<std::csub_match>::pointer)v44;
            v92[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v54 | 0x8000000000000000);
            v92[0].__begin_ = v45;
            if (v43 == v42)
            {
LABEL_84:
              LOBYTE(v45->first) = 0;
              char v52 = v75;
              if ((unint64_t)v75 >= v76) {
                goto LABEL_89;
              }
              goto LABEL_67;
            }
          }
          else
          {
            HIBYTE(v92[0].__end_cap_.__value_) = (_BYTE)v42 - LOBYTE(v39->first.__i_);
            uint64_t v45 = (std::sub_match<const char *> *)v92;
            if (v43 == v42) {
              goto LABEL_84;
            }
          }
          if (v44 < 0x20 || (unint64_t)((char *)v45 - v43) < 0x20) {
            break;
          }
          uint64_t v46 = (std::sub_match<const char *> *)((char *)v45 + (v44 & 0xFFFFFFFFFFFFFFE0));
          char v47 = &v43[v44 & 0xFFFFFFFFFFFFFFE0];
          unint64_t v48 = (long long *)(v43 + 16);
          std::string v49 = &v45->matched;
          unint64_t v50 = v44 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v51 = *v48;
            *((_OWORD *)v49 - 1) = *(v48 - 1);
            *(_OWORD *)std::string v49 = v51;
            v48 += 2;
            v49 += 32;
            v50 -= 32;
          }
          while (v50);
          if (v44 != (v44 & 0x7FFFFFFFFFFFFFE0)) {
            goto LABEL_87;
          }
LABEL_88:
          LOBYTE(v46->first) = 0;
          char v52 = v75;
          if ((unint64_t)v75 >= v76)
          {
LABEL_89:
            unint64_t v75 = std::vector<std::string>::__push_back_slow_path<std::string>(&__p, (uint64_t)v92);
            if (SHIBYTE(v92[0].__end_cap_.__value_) < 0) {
              operator delete(v92[0].__begin_);
            }
            goto LABEL_68;
          }
LABEL_67:
          long long v41 = *(_OWORD *)&v92[0].__begin_;
          *((void *)v52 + 2) = v92[0].__end_cap_.__value_;
          *(_OWORD *)char v52 = v41;
          unint64_t v75 = v52 + 24;
LABEL_68:
          if (++v39 == v40) {
            goto LABEL_91;
          }
        }
        uint64_t v46 = v45;
        char v47 = v43;
        do
        {
LABEL_87:
          char v55 = *v47++;
          LOBYTE(v46->first) = v55;
          uint64_t v46 = (std::sub_match<const char *> *)((char *)v46 + 1);
        }
        while (v47 != v42);
        goto LABEL_88;
      }
LABEL_91:
      long long v57 = (char *)__p;
      unint64_t v56 = v75;
      if (v75 - (unsigned char *)__p == 24)
      {
        unint64_t v58 = (char *)v77;
        uint64_t v59 = v78;
        uint64_t v60 = 1;
        if (v77 != v78) {
          goto LABEL_117;
        }
LABEL_105:
        if (v57) {
          goto LABEL_106;
        }
LABEL_134:
        unint64_t v64 = (char *)v77;
        if (v77) {
          goto LABEL_135;
        }
        goto LABEL_108;
      }
      if ((char *)__p + 24 != v75)
      {
        char v61 = (char *)__p + 23;
        do
        {
          std::string v62 = (void **)(v61 - 23);
          if (*v61 < 0) {
            operator delete(*v62);
          }
          *(_OWORD *)std::string v62 = *(_OWORD *)(v61 + 1);
          *(void *)(v61 - 7) = *(void *)(v61 + 17);
          char v61[24] = 0;
          v61 += 24;
          *(v61 - 23) = 0;
          v57 += 24;
        }
        while (v61 + 1 != v56);
        unint64_t v56 = v75;
      }
      while (v56 != v57)
      {
        if (*(v56 - 1) < 0) {
          operator delete(*((void **)v56 - 3));
        }
        v56 -= 24;
      }
      unint64_t v75 = v57;
      long long v57 = (char *)__p;
      unint64_t v58 = (char *)v77;
      uint64_t v59 = v78;
      uint64_t v60 = 1;
      if (v77 == v78) {
        goto LABEL_105;
      }
      while (1)
      {
LABEL_117:
        uint64_t v66 = v58[23];
        if ((v66 & 0x80u) == 0) {
          uint64_t v67 = v58[23];
        }
        else {
          uint64_t v67 = *((void *)v58 + 1);
        }
        uint64_t v68 = v57[23];
        int v69 = (char)v68;
        if ((v68 & 0x80u) != 0) {
          uint64_t v68 = *((void *)v57 + 1);
        }
        if (v67 != v68) {
          break;
        }
        if (v69 >= 0) {
          int v70 = v57;
        }
        else {
          int v70 = *(char **)v57;
        }
        if ((v66 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v58, v70, *((void *)v58 + 1))) {
            break;
          }
        }
        else if (v58[23])
        {
          uint64_t v71 = 0;
          while (v58[v71] == v70[v71])
          {
            if (v66 == ++v71) {
              goto LABEL_116;
            }
          }
          break;
        }
LABEL_116:
        v58 += 24;
        v57 += 24;
        if (v58 == v59) {
          goto LABEL_133;
        }
      }
    }
  }
  uint64_t v60 = 0;
LABEL_133:
  long long v57 = (char *)__p;
  if (!__p) {
    goto LABEL_134;
  }
LABEL_106:
  unint64_t v63 = v75;
  if (v75 != v57)
  {
    do
    {
      if (*(v63 - 1) < 0) {
        operator delete(*((void **)v63 - 3));
      }
      v63 -= 24;
    }
    while (v63 != v57);
    unint64_t v75 = v57;
    operator delete(__p);
    unint64_t v64 = (char *)v77;
    if (v77) {
      goto LABEL_135;
    }
LABEL_108:
    unint64_t v65 = (std::__shared_weak_count *)v83;
    if (!(void)v83) {
      goto LABEL_144;
    }
    goto LABEL_142;
  }
  unint64_t v75 = v57;
  operator delete(v57);
  unint64_t v64 = (char *)v77;
  if (!v77) {
    goto LABEL_108;
  }
LABEL_135:
  int64_t v72 = v78;
  if (v78 == v64)
  {
    size_t v78 = v64;
    operator delete(v64);
    unint64_t v65 = (std::__shared_weak_count *)v83;
    if (!(void)v83) {
      goto LABEL_144;
    }
    goto LABEL_142;
  }
  do
  {
    if (*(v72 - 1) < 0) {
      operator delete(*((void **)v72 - 3));
    }
    v72 -= 24;
  }
  while (v72 != v64);
  size_t v78 = v64;
  operator delete(v77);
  unint64_t v65 = (std::__shared_weak_count *)v83;
  if ((void)v83)
  {
LABEL_142:
    if (!atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
LABEL_144:
  std::locale::~locale(v80);
  if (v84[0].__begin_)
  {
    v84[0].__end_ = v84[0].__begin_;
    operator delete(v84[0].__begin_);
  }
  return v60;
}

void sub_1A61AF658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v26 = *(void **)(v24 - 192);
  if (v26)
  {
    *(void *)(v24 - 184) = v26;
    operator delete(v26);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)&a9);
  std::vector<std::string>::~vector[abi:ne180100](&a12);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a15);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(unint64_t a1, const void **a2, uint64_t a3, char a4, __n128 result)
{
LABEL_1:
  v268 = a2 - 3;
  v271 = a2;
  v260 = a2 - 9;
  v261 = a2 - 6;
  unint64_t k = a1;
  while (1)
  {
    a1 = k;
    uint64_t v11 = (uint64_t)a2 - k;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - k) >> 3);
    if (v6 || !v5)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v119 = (__n128 *)(a2 - 3);
          int v120 = *((char *)a2 - 1);
          if (v120 >= 0) {
            long long v121 = a2 - 3;
          }
          else {
            long long v121 = (const void **)*(a2 - 3);
          }
          if (v120 >= 0) {
            size_t v122 = *((unsigned __int8 *)a2 - 1);
          }
          else {
            size_t v122 = (size_t)*(a2 - 2);
          }
          int v123 = *(char *)(a1 + 23);
          std::string v124 = *(void **)a1;
          std::locale v125 = *(const void **)(a1 + 8);
          if (v123 >= 0) {
            long long v126 = (const void *)a1;
          }
          else {
            long long v126 = *(const void **)a1;
          }
          if (v123 >= 0) {
            size_t v127 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            size_t v127 = *(void *)(a1 + 8);
          }
          if (v127 >= v122) {
            size_t v128 = v122;
          }
          else {
            size_t v128 = v127;
          }
          int v129 = memcmp(v121, v126, v128);
          if (v129)
          {
            if (v129 < 0) {
              return result;
            }
          }
          else if (v122 <= v127)
          {
            return result;
          }
          v258 = *(const void **)(a1 + 16);
          uint64_t v259 = (uint64_t)*(a2 - 1);
          BOOL result = *v119;
          *(__n128 *)a1 = *v119;
          *(void *)(a1 + 16) = v259;
          *(a2 - 3) = v124;
          *(a2 - 2) = v125;
          *(a2 - 1) = v258;
          break;
        case 3uLL:
          result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, v268).n128_u64[0];
          return result;
        case 4uLL:
          result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, v268).n128_u64[0];
          return result;
        case 5uLL:
          result.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, v268).n128_u64[0];
          return result;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 575)
    {
      if (a4)
      {
        if ((const void **)a1 == a2) {
          return result;
        }
        long long v130 = (const void *)(a1 + 24);
        if ((const void **)(a1 + 24) == a2) {
          return result;
        }
        uint64_t v131 = 0;
        unint64_t v132 = a1;
        while (2)
        {
          uint64_t v134 = (__n128 *)v132;
          unint64_t v132 = (unint64_t)v130;
          int v135 = v134[2].n128_i8[15];
          if (v135 >= 0) {
            long long v136 = v130;
          }
          else {
            long long v136 = (const void *)v134[1].n128_u64[1];
          }
          if (v135 >= 0) {
            size_t v137 = v134[2].n128_u8[15];
          }
          else {
            size_t v137 = v134[2].n128_u64[0];
          }
          int v138 = v134[1].n128_i8[7];
          if (v138 >= 0) {
            long long v139 = v134;
          }
          else {
            long long v139 = (__n128 *)v134->n128_u64[0];
          }
          if (v138 >= 0) {
            size_t v140 = v134[1].n128_u8[7];
          }
          else {
            size_t v140 = v134->n128_u64[1];
          }
          if (v140 >= v137) {
            size_t v141 = v137;
          }
          else {
            size_t v141 = v140;
          }
          int v142 = memcmp(v136, v139, v141);
          if (v142)
          {
            if (v142 < 0)
            {
LABEL_266:
              long long v130 = (const void *)(v132 + 24);
              v131 += 24;
              if ((const void **)(v132 + 24) == v271) {
                return result;
              }
              continue;
            }
          }
          else if (v137 <= v140)
          {
            goto LABEL_266;
          }
          break;
        }
        __n128 v143 = *(__n128 *)v132;
        int64_t v274 = *(void *)(v132 + 16);
        __n128 v273 = v143;
        if (v274 >= 0) {
          unint64_t v144 = &v273;
        }
        else {
          unint64_t v144 = (__n128 *)v143.n128_u64[0];
        }
        if (v274 >= 0) {
          size_t v145 = HIBYTE(v274);
        }
        else {
          size_t v145 = v143.n128_u64[1];
        }
        *(void *)(v132 + 16) = v134[1].n128_u64[0];
        *(__n128 *)unint64_t v132 = *v134;
        v134[1].n128_u8[7] = 0;
        v134->n128_u8[0] = 0;
        uint64_t v133 = (__n128 *)a1;
        if (v134 != (__n128 *)a1)
        {
          uint64_t v146 = v131;
          while (1)
          {
            uint64_t v147 = a1 + v146;
            int v148 = *(char *)(a1 + v146 - 1);
            if (v148 >= 0) {
              uint64_t v149 = (const void *)(a1 + v146 - 24);
            }
            else {
              uint64_t v149 = *(const void **)(a1 + v146 - 24);
            }
            if (v148 >= 0) {
              size_t v150 = *(unsigned __int8 *)(a1 + v146 - 1);
            }
            else {
              size_t v150 = *(void *)(a1 + v146 - 16);
            }
            if (v150 >= v145) {
              size_t v151 = v145;
            }
            else {
              size_t v151 = v150;
            }
            int v152 = memcmp(v144, v149, v151);
            if (v152)
            {
              if (v152 < 0)
              {
                uint64_t v133 = (__n128 *)(a1 + v146);
                break;
              }
            }
            else if (v145 <= v150)
            {
              uint64_t v133 = v134;
              break;
            }
            uint64_t v134 = (__n128 *)((char *)v134 - 24);
            *(_OWORD *)uint64_t v147 = *(_OWORD *)(a1 + v146 - 24);
            *(void *)(v147 + 16) = *(void *)(a1 + v146 - 8);
            *(unsigned char *)(v147 - 1) = 0;
            *(unsigned char *)(v147 - 24) = 0;
            v146 -= 24;
            if (!v146)
            {
              uint64_t v133 = (__n128 *)a1;
              break;
            }
          }
        }
        BOOL result = v273;
        v133[1].n128_u64[0] = v274;
        *uint64_t v133 = result;
        goto LABEL_266;
      }
      if ((const void **)a1 == a2) {
        return result;
      }
      v239 = (const void *)(a1 + 24);
      if ((const void **)(a1 + 24) == a2) {
        return result;
      }
LABEL_478:
      v240 = (const void **)a1;
      a1 = (unint64_t)v239;
      int v241 = *((char *)v240 + 47);
      if (v241 >= 0) {
        v242 = v239;
      }
      else {
        v242 = v240[3];
      }
      if (v241 >= 0) {
        size_t v243 = *((unsigned __int8 *)v240 + 47);
      }
      else {
        size_t v243 = (size_t)v240[4];
      }
      int v244 = *((char *)v240 + 23);
      if (v244 >= 0) {
        v245 = v240;
      }
      else {
        v245 = *v240;
      }
      if (v244 >= 0) {
        size_t v246 = *((unsigned __int8 *)v240 + 23);
      }
      else {
        size_t v246 = (size_t)v240[1];
      }
      if (v246 >= v243) {
        size_t v247 = v243;
      }
      else {
        size_t v247 = v246;
      }
      int v248 = memcmp(v242, v245, v247);
      if (v248)
      {
        if (v248 < 0) {
          goto LABEL_477;
        }
      }
      else if (v243 <= v246)
      {
        goto LABEL_477;
      }
      __n128 v249 = *(__n128 *)a1;
      int64_t v274 = *(void *)(a1 + 16);
      __n128 v273 = v249;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      if (v274 >= 0) {
        v250 = &v273;
      }
      else {
        v250 = (__n128 *)v273.n128_u64[0];
      }
      if (v274 >= 0) {
        size_t v251 = HIBYTE(v274);
      }
      else {
        size_t v251 = v273.n128_u64[1];
      }
      for (unint64_t i = a1; ; i -= 24)
      {
        *(_OWORD *)unint64_t i = *(_OWORD *)(i - 24);
        *(void *)(i + 16) = *(void *)(i - 8);
        *(unsigned char *)(i - 1) = 0;
        *(unsigned char *)(i - 24) = 0;
        int v253 = *(char *)(i - 25);
        if (v253 >= 0) {
          v254 = (const void *)(i - 48);
        }
        else {
          v254 = *(const void **)(i - 48);
        }
        if (v253 >= 0) {
          size_t v255 = *(unsigned __int8 *)(i - 25);
        }
        else {
          size_t v255 = *(void *)(i - 40);
        }
        if (v255 >= v251) {
          size_t v256 = v251;
        }
        else {
          size_t v256 = v255;
        }
        int v257 = memcmp(v250, v254, v256);
        if (v257)
        {
          if (v257 < 0)
          {
LABEL_476:
            BOOL result = v273;
            *(void *)(i - 8) = v274;
            *(__n128 *)(i - 24) = result;
LABEL_477:
            v239 = (const void *)(a1 + 24);
            if ((const void **)(a1 + 24) == a2) {
              return result;
            }
            goto LABEL_478;
          }
        }
        else if (v251 <= v255)
        {
          goto LABEL_476;
        }
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v13 = v12 >> 1;
    uint64_t v14 = a1 + 24 * (v12 >> 1);
    if ((unint64_t)v11 < 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v14, a1, v268);
      uint64_t v265 = a3 - 1;
      if ((a4 & 1) == 0)
      {
LABEL_10:
        int v19 = *(char *)(a1 - 1);
        if (v19 >= 0) {
          long long v20 = (const void *)(a1 - 24);
        }
        else {
          long long v20 = *(const void **)(a1 - 24);
        }
        if (v19 >= 0) {
          size_t v21 = *(unsigned __int8 *)(a1 - 1);
        }
        else {
          size_t v21 = *(void *)(a1 - 16);
        }
        int v22 = *(char *)(a1 + 23);
        if (v22 >= 0) {
          unint64_t v23 = (const void *)a1;
        }
        else {
          unint64_t v23 = *(const void **)a1;
        }
        if (v22 >= 0) {
          size_t v24 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v24 = *(void *)(a1 + 8);
        }
        if (v24 >= v21) {
          size_t v25 = v21;
        }
        else {
          size_t v25 = v24;
        }
        int v26 = memcmp(v20, v23, v25);
        if (v26)
        {
          if (v26 < 0) {
            goto LABEL_125;
          }
        }
        else if (v21 <= v24)
        {
LABEL_125:
          __n128 v72 = *(__n128 *)a1;
          int64_t v274 = *(void *)(a1 + 16);
          __n128 v273 = v72;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          uint64_t v73 = a2;
          if (v274 >= 0) {
            uint64_t v74 = &v273;
          }
          else {
            uint64_t v74 = (__n128 *)v273.n128_u64[0];
          }
          if (v274 >= 0) {
            size_t v75 = HIBYTE(v274);
          }
          else {
            size_t v75 = v273.n128_u64[1];
          }
          size_t v76 = *((unsigned __int8 *)v73 - 1);
          size_t v78 = (const void **)*(v73 - 3);
          char v77 = *(v73 - 2);
          if ((v76 & 0x80u) == 0) {
            unint64_t v79 = v268;
          }
          else {
            unint64_t v79 = (const void **)*(v73 - 3);
          }
          if ((v76 & 0x80u) == 0) {
            size_t v80 = *((unsigned __int8 *)v73 - 1);
          }
          else {
            size_t v80 = (size_t)*(v73 - 2);
          }
          if (v80 >= v75) {
            size_t v81 = v75;
          }
          else {
            size_t v81 = v80;
          }
          int v82 = memcmp(v74, v79, v81);
          if (v82)
          {
            if ((v82 & 0x80000000) == 0)
            {
LABEL_142:
              unint64_t v83 = a1 + 24;
              do
              {
                while (1)
                {
                  unint64_t k = v83;
                  uint64_t v84 = *(unsigned __int8 *)(v83 + 23);
                  uint64_t v85 = (v84 & 0x80u) == 0 ? (const void *)k : *(const void **)k;
                  size_t v86 = (v84 & 0x80u) == 0 ? v84 : *(void *)(k + 8);
                  size_t v87 = v86 >= v75 ? v75 : v86;
                  int v88 = memcmp(v74, v85, v87);
                  unint64_t v83 = k + 24;
                  if (v88) {
                    break;
                  }
                  if (v75 > v86) {
                    goto LABEL_155;
                  }
                }
              }
              while (v88 < 0);
LABEL_155:
              j = v271;
              if (k < (unint64_t)v271)
              {
                for (j = v268; ; char v77 = j[1])
                {
                  if ((v76 & 0x80u) == 0) {
                    uint64_t v91 = j;
                  }
                  else {
                    uint64_t v91 = v78;
                  }
                  if ((v76 & 0x80u) == 0) {
                    size_t v92 = v76;
                  }
                  else {
                    size_t v92 = (size_t)v77;
                  }
                  if (v92 >= v75) {
                    size_t v93 = v75;
                  }
                  else {
                    size_t v93 = v92;
                  }
                  int v94 = memcmp(v74, v91, v93);
                  if (v94)
                  {
                    if (v94 < 0) {
                      break;
                    }
                  }
                  else if (v75 <= v92)
                  {
                    break;
                  }
                  long long v90 = (const void **)*(j - 3);
                  j -= 3;
                  size_t v78 = v90;
                  size_t v76 = *((unsigned __int8 *)j + 23);
                }
              }
              if (k < (unint64_t)j)
              {
                unint64_t v95 = *(const void **)k;
                do
                {
                  long long v96 = *(_OWORD *)(k + 8);
                  long long v97 = *(_OWORD *)j;
                  *(void *)(k + 16) = j[2];
                  *(_OWORD *)unint64_t k = v97;
                  *j = v95;
                  *(_OWORD *)(j + 1) = v96;
                  if (v274 >= 0) {
                    long long v98 = &v273;
                  }
                  else {
                    long long v98 = (__n128 *)v273.n128_u64[0];
                  }
                  if (v274 >= 0) {
                    unint64_t v99 = HIBYTE(v274);
                  }
                  else {
                    unint64_t v99 = v273.n128_u64[1];
                  }
                  unint64_t v100 = k + 24;
                  do
                  {
                    while (1)
                    {
                      unint64_t k = v100;
                      uint64_t v101 = *(unsigned __int8 *)(v100 + 23);
                      unint64_t v95 = *(const void **)k;
                      uint64_t v102 = (v101 & 0x80u) == 0 ? (const void *)k : *(const void **)k;
                      unint64_t v103 = (v101 & 0x80u) == 0 ? v101 : *(void *)(k + 8);
                      size_t v104 = v103 >= v99 ? v99 : v103;
                      int v105 = memcmp(v98, v102, v104);
                      unint64_t v100 = k + 24;
                      if (v105) {
                        break;
                      }
                      if (v99 > v103) {
                        goto LABEL_192;
                      }
                    }
                  }
                  while (v105 < 0);
LABEL_192:
                  uint8x8_t v106 = j - 3;
                  do
                  {
                    while (1)
                    {
                      j = v106;
                      uint64_t v107 = (const void *)*((unsigned __int8 *)v106 + 23);
                      uint64_t v108 = (char)v107 >= 0 ? j : (const void **)*j;
                      std::string::size_type v109 = (char)v107 >= 0 ? v107 : j[1];
                      size_t v110 = (unint64_t)v109 >= v99 ? v99 : (size_t)v109;
                      int v111 = memcmp(v98, v108, v110);
                      uint8x8_t v106 = j - 3;
                      if (v111) {
                        break;
                      }
                      if (v99 <= (unint64_t)v109) {
                        goto LABEL_172;
                      }
                    }
                  }
                  while ((v111 & 0x80000000) == 0);
LABEL_172:
                  ;
                }
                while (k < (unint64_t)j);
              }
              uint64_t v112 = (__n128 *)(k - 24);
              BOOL v5 = k - 24 >= a1;
              BOOL v6 = k - 24 == a1;
              if (k - 24 == a1)
              {
                a2 = v271;
                a3 = v265;
                if (*(char *)(k - 1) < 0) {
                  operator delete(*(void **)a1);
                }
              }
              else
              {
                if (*(char *)(a1 + 23) < 0) {
                  operator delete(*(void **)a1);
                }
                __n128 v113 = *v112;
                *(void *)(a1 + 16) = *(void *)(k - 8);
                *(__n128 *)a1 = v113;
                *(unsigned char *)(k - 1) = 0;
                *(unsigned char *)(k - 24) = 0;
                a2 = v271;
                a3 = v265;
              }
              a4 = 0;
              BOOL result = v273;
              *(void *)(k - 8) = v274;
              __n128 *v112 = result;
              continue;
            }
          }
          else if (v75 > v80)
          {
            goto LABEL_142;
          }
          for (unint64_t k = a1 + 24; k < (unint64_t)v271; k += 24)
          {
            int v114 = *(char *)(k + 23);
            if (v114 >= 0) {
              long long v115 = (const void *)k;
            }
            else {
              long long v115 = *(const void **)k;
            }
            if (v114 >= 0) {
              size_t v116 = *(unsigned __int8 *)(k + 23);
            }
            else {
              size_t v116 = *(void *)(k + 8);
            }
            if (v116 >= v75) {
              size_t v117 = v75;
            }
            else {
              size_t v117 = v116;
            }
            int v118 = memcmp(v74, v115, v117);
            if (v118)
            {
              if ((v118 & 0x80000000) == 0) {
                goto LABEL_155;
              }
            }
            else if (v75 > v116)
            {
              goto LABEL_155;
            }
          }
          goto LABEL_155;
        }
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, v14, v268);
      uint64_t v15 = 24 * v13;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 24, v15 + a1 - 24, v261);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 48, a1 + 24 + v15, v260);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v15 + a1 - 24, v14, (const void **)(a1 + 24 + v15));
      long long v16 = *(void **)a1;
      long long v17 = *(_OWORD *)(a1 + 8);
      long long v18 = *(_OWORD *)v14;
      *(void *)(a1 + 16) = *(void *)(v14 + 16);
      *(_OWORD *)a1 = v18;
      *(void *)uint64_t v14 = v16;
      *(_OWORD *)(v14 + 8) = v17;
      uint64_t v265 = a3 - 1;
      if ((a4 & 1) == 0) {
        goto LABEL_10;
      }
    }
    uint64_t v27 = 0;
    __n128 v28 = *(__n128 *)a1;
    int64_t v274 = *(void *)(a1 + 16);
    __n128 v273 = v28;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    if (v274 >= 0) {
      long long v29 = &v273;
    }
    else {
      long long v29 = (__n128 *)v273.n128_u64[0];
    }
    if (v274 >= 0) {
      unint64_t v30 = HIBYTE(v274);
    }
    else {
      unint64_t v30 = v273.n128_u64[1];
    }
    while (1)
    {
      long long v31 = *(const void **)(a1 + v27 + 24);
      int v32 = *(char *)(a1 + v27 + 47);
      long long v33 = v32 >= 0 ? (const void *)(a1 + v27 + 24) : *(const void **)(a1 + v27 + 24);
      unint64_t v34 = v32 >= 0 ? *(unsigned __int8 *)(a1 + v27 + 47) : *(void *)(a1 + v27 + 32);
      size_t v35 = v30 >= v34 ? v34 : v30;
      int v36 = memcmp(v33, v29, v35);
      if (v36) {
        break;
      }
      if (v34 <= v30) {
        goto LABEL_46;
      }
LABEL_34:
      v27 += 24;
    }
    if ((v36 & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_46:
    unint64_t v37 = a1 + v27 + 24;
    uint64_t v38 = v268;
    if (v27)
    {
      do
      {
        while (1)
        {
          std::vector<std::ssub_match>::pointer v39 = v38;
          uint64_t v46 = (const void *)*((unsigned __int8 *)v38 + 23);
          char v47 = (char)v46 >= 0 ? v39 : (const void **)*v39;
          unint64_t v48 = (unint64_t)((char)v46 >= 0 ? v46 : v39[1]);
          size_t v49 = v30 >= v48 ? v48 : v30;
          int v50 = memcmp(v47, v29, v49);
          uint64_t v38 = v39 - 3;
          if (v50) {
            break;
          }
          if (v48 > v30) {
            goto LABEL_77;
          }
        }
      }
      while (v50 < 0);
    }
    else
    {
      std::vector<std::ssub_match>::pointer v39 = v271;
      if (v37 < (unint64_t)v271)
      {
        std::vector<std::ssub_match>::pointer v40 = v268;
        do
        {
          while (1)
          {
            std::vector<std::ssub_match>::pointer v39 = v40;
            long long v41 = (const void *)*((unsigned __int8 *)v40 + 23);
            std::__wrap_iter<const char *>::iterator_type v42 = (char)v41 >= 0 ? v39 : (const void **)*v39;
            unint64_t v43 = (unint64_t)((char)v41 >= 0 ? v41 : v39[1]);
            size_t v44 = v30 >= v43 ? v43 : v30;
            int v45 = memcmp(v42, v29, v44);
            std::vector<std::ssub_match>::pointer v40 = v39 - 3;
            if (!v45) {
              break;
            }
            if (v37 >= (unint64_t)v39 || (v45 & 0x80000000) == 0) {
              goto LABEL_77;
            }
          }
        }
        while (v37 < (unint64_t)v39 && v43 <= v30);
      }
    }
LABEL_77:
    if (v37 >= (unint64_t)v39)
    {
      unint64_t k = v37;
    }
    else
    {
      long long v51 = v39;
      unint64_t k = v37;
      do
      {
        long long v52 = *(_OWORD *)(k + 8);
        long long v53 = *(_OWORD *)v51;
        *(void *)(k + 16) = v51[2];
        *(_OWORD *)unint64_t k = v53;
        char *v51 = v31;
        *(_OWORD *)(v51 + 1) = v52;
        if (v274 >= 0) {
          uint64_t v54 = &v273;
        }
        else {
          uint64_t v54 = (__n128 *)v273.n128_u64[0];
        }
        if (v274 >= 0) {
          unint64_t v55 = HIBYTE(v274);
        }
        else {
          unint64_t v55 = v273.n128_u64[1];
        }
        unint64_t v56 = k + 24;
        do
        {
          while (1)
          {
            unint64_t k = v56;
            uint64_t v57 = *(unsigned __int8 *)(v56 + 23);
            long long v31 = *(const void **)k;
            unint64_t v58 = (v57 & 0x80u) == 0 ? (const void *)k : *(const void **)k;
            unint64_t v59 = (v57 & 0x80u) == 0 ? v57 : *(void *)(k + 8);
            size_t v60 = v55 >= v59 ? v59 : v55;
            int v61 = memcmp(v58, v54, v60);
            unint64_t v56 = k + 24;
            if (v61) {
              break;
            }
            if (v59 <= v55) {
              goto LABEL_99;
            }
          }
        }
        while ((v61 & 0x80000000) == 0);
LABEL_99:
        std::string v62 = v51 - 3;
        do
        {
          while (1)
          {
            long long v51 = v62;
            unint64_t v63 = (const void *)*((unsigned __int8 *)v62 + 23);
            unint64_t v64 = (char)v63 >= 0 ? v51 : (const void **)*v51;
            unint64_t v65 = (unint64_t)((char)v63 >= 0 ? v63 : v51[1]);
            size_t v66 = v55 >= v65 ? v65 : v55;
            int v67 = memcmp(v64, v54, v66);
            std::string v62 = v51 - 3;
            if (v67) {
              break;
            }
            if (v65 > v55) {
              goto LABEL_79;
            }
          }
        }
        while (v67 < 0);
LABEL_79:
        ;
      }
      while (k < (unint64_t)v51);
    }
    uint64_t v68 = (__n128 *)(k - 24);
    if (k - 24 == a1)
    {
      a2 = v271;
      a3 = v265;
      if (*(char *)(k - 1) < 0) {
        operator delete(*(void **)a1);
      }
    }
    else
    {
      a2 = v271;
      a3 = v265;
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      __n128 v69 = *v68;
      *(void *)(a1 + 16) = *(void *)(k - 8);
      *(__n128 *)a1 = v69;
      *(unsigned char *)(k - 1) = 0;
      *(unsigned char *)(k - 24) = 0;
    }
    __n128 v70 = v273;
    *(void *)(k - 8) = v274;
    __n128 *v68 = v70;
    if (v37 < (unint64_t)v39)
    {
LABEL_123:
      std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(a1, k - 24, a3, a4 & 1);
      a4 = 0;
    }
    else
    {
      BOOL v71 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, (const void **)(k - 24));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(k, a2))
      {
        a2 = (const void **)(k - 24);
        if (v71) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v71) {
        goto LABEL_123;
      }
    }
  }
  if ((const void **)a1 == a2) {
    return result;
  }
  int64_t v153 = (v12 - 2) >> 1;
  int64_t v154 = v153;
  while (2)
  {
    int64_t v156 = v154;
    if (v153 >= v154)
    {
      uint64_t v157 = (2 * v154) | 1;
      unint64_t v158 = a1 + 24 * v157;
      uint64_t v159 = 2 * v154 + 2;
      if (v159 >= (uint64_t)v12) {
        goto LABEL_337;
      }
      uint64_t v160 = (const void **)(v158 + 24);
      int v161 = *(char *)(v158 + 23);
      if (v161 >= 0) {
        long long v162 = (const void *)(a1 + 24 * v157);
      }
      else {
        long long v162 = *(const void **)v158;
      }
      if (v161 >= 0) {
        size_t v163 = *(unsigned __int8 *)(v158 + 23);
      }
      else {
        size_t v163 = *(void *)(v158 + 8);
      }
      int v164 = *(char *)(v158 + 47);
      if (v164 >= 0) {
        v165 = (const void *)(v158 + 24);
      }
      else {
        v165 = *(const void **)(v158 + 24);
      }
      if (v164 >= 0) {
        size_t v166 = *(unsigned __int8 *)(v158 + 47);
      }
      else {
        size_t v166 = *(void *)(v158 + 32);
      }
      if (v166 >= v163) {
        size_t v167 = v163;
      }
      else {
        size_t v167 = v166;
      }
      int v168 = memcmp(v162, v165, v167);
      if (v168)
      {
        a2 = v271;
        if (v168 < 0)
        {
LABEL_337:
          uint64_t v160 = (const void **)(a1 + 24 * v157);
          uint64_t v159 = (2 * v156) | 1;
        }
      }
      else
      {
        BOOL v169 = v163 >= v166;
        if (v163 == v166)
        {
          uint64_t v160 = (const void **)(a1 + 24 * v157);
          uint64_t v159 = (2 * v156) | 1;
          a2 = v271;
        }
        else
        {
          a2 = v271;
          if (!v169) {
            goto LABEL_337;
          }
        }
      }
      unint64_t v170 = a1 + 24 * v156;
      int v171 = *((char *)v160 + 23);
      if (v171 >= 0) {
        v172 = v160;
      }
      else {
        v172 = *v160;
      }
      if (v171 >= 0) {
        size_t v173 = *((unsigned __int8 *)v160 + 23);
      }
      else {
        size_t v173 = (size_t)v160[1];
      }
      int v174 = *(char *)(v170 + 23);
      if (v174 >= 0) {
        v175 = (const void *)(a1 + 24 * v156);
      }
      else {
        v175 = *(const void **)v170;
      }
      if (v174 >= 0) {
        size_t v176 = *(unsigned __int8 *)(v170 + 23);
      }
      else {
        size_t v176 = *(void *)(v170 + 8);
      }
      if (v176 >= v173) {
        size_t v177 = v173;
      }
      else {
        size_t v177 = v176;
      }
      int v178 = memcmp(v172, v175, v177);
      if (v178)
      {
        int64_t v153 = (v12 - 2) >> 1;
        if (v178 < 0)
        {
LABEL_357:
          __n128 v180 = *(__n128 *)v170;
          int64_t v274 = *(void *)(v170 + 16);
          __n128 v273 = v180;
          *(void *)(v170 + 8) = 0;
          *(void *)(v170 + 16) = 0;
          *(void *)unint64_t v170 = 0;
          long long v181 = *(_OWORD *)v160;
          *(void *)(v170 + 16) = v160[2];
          *(_OWORD *)unint64_t v170 = v181;
          *((unsigned char *)v160 + 23) = 0;
          *(unsigned char *)uint64_t v160 = 0;
          if (v153 >= v159)
          {
            unint64_t v182 = HIBYTE(v274);
            v183 = &v273;
            if (v274 < 0)
            {
              unint64_t v182 = v273.n128_u64[1];
              v183 = (__n128 *)v273.n128_u64[0];
            }
            size_t v263 = v182;
            v266 = v183;
            int64_t v269 = v156;
            while (1)
            {
              uint64_t v185 = (2 * v159) | 1;
              unint64_t v186 = a1 + 24 * v185;
              uint64_t v159 = 2 * v159 + 2;
              if (v159 >= (uint64_t)v12) {
                goto LABEL_385;
              }
              uint64_t v155 = (const void **)(v186 + 24);
              int v187 = *(char *)(v186 + 23);
              v188 = v187 >= 0 ? (const void *)(a1 + 24 * v185) : *(const void **)v186;
              unint64_t v189 = v187 >= 0 ? *(unsigned __int8 *)(v186 + 23) : *(void *)(v186 + 8);
              int v190 = *(char *)(v186 + 47);
              v191 = v190 >= 0 ? (const void *)(v186 + 24) : *(const void **)(v186 + 24);
              unint64_t v192 = v190 >= 0 ? *(unsigned __int8 *)(v186 + 47) : *(void *)(v186 + 32);
              size_t v193 = v192 >= v189 ? v189 : v192;
              int v194 = memcmp(v188, v191, v193);
              if (v194) {
                break;
              }
              BOOL v195 = v189 >= v192;
              if (v189 == v192)
              {
                uint64_t v155 = (const void **)(a1 + 24 * v185);
                uint64_t v159 = v185;
                a2 = v271;
                int64_t v153 = (v12 - 2) >> 1;
                goto LABEL_386;
              }
              a2 = v271;
              int64_t v153 = (v12 - 2) >> 1;
              if (!v195) {
                goto LABEL_385;
              }
LABEL_386:
              int v196 = *((char *)v155 + 23);
              if (v196 >= 0) {
                v197 = v155;
              }
              else {
                v197 = *v155;
              }
              if (v196 >= 0) {
                size_t v198 = *((unsigned __int8 *)v155 + 23);
              }
              else {
                size_t v198 = (size_t)v155[1];
              }
              if (v263 >= v198) {
                size_t v199 = v198;
              }
              else {
                size_t v199 = v263;
              }
              int v200 = memcmp(v197, v266, v199);
              if (v200)
              {
                int64_t v156 = v269;
                if ((v200 & 0x80000000) == 0) {
                  goto LABEL_311;
                }
              }
              else
              {
                int64_t v156 = v269;
                if (v198 > v263) {
                  goto LABEL_311;
                }
              }
              long long v184 = *(_OWORD *)v155;
              v160[2] = v155[2];
              *(_OWORD *)uint64_t v160 = v184;
              *((unsigned char *)v155 + 23) = 0;
              *(unsigned char *)uint64_t v155 = 0;
              uint64_t v160 = v155;
              if (v153 < v159) {
                goto LABEL_312;
              }
            }
            a2 = v271;
            int64_t v153 = (v12 - 2) >> 1;
            if ((v194 & 0x80000000) == 0) {
              goto LABEL_386;
            }
LABEL_385:
            uint64_t v155 = (const void **)(a1 + 24 * v185);
            uint64_t v159 = v185;
            goto LABEL_386;
          }
LABEL_311:
          uint64_t v155 = v160;
LABEL_312:
          BOOL result = v273;
          v155[2] = (const void *)v274;
          *(__n128 *)uint64_t v155 = result;
        }
      }
      else
      {
        BOOL v179 = v173 > v176;
        int64_t v153 = (v12 - 2) >> 1;
        if (!v179) {
          goto LABEL_357;
        }
      }
    }
    int64_t v154 = v156 - 1;
    if (v156) {
      continue;
    }
    break;
  }
  int64_t v201 = v11 / 0x18uLL;
  do
  {
    if (v201 < 2) {
      goto LABEL_400;
    }
    uint64_t v202 = 0;
    v270 = *(void **)a1;
    v272 = a2;
    v264 = *(const void **)(a1 + 16);
    v267 = *(const void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    unint64_t v203 = a1;
    *(void *)a1 = 0;
    do
    {
      uint64_t v205 = v203 + 24 * v202 + 24;
      uint64_t v206 = (2 * v202) | 1;
      uint64_t v202 = 2 * v202 + 2;
      if (v202 < v201)
      {
        v204 = (__n128 *)(v205 + 24);
        int v207 = *(char *)(v205 + 23);
        if (v207 >= 0) {
          v208 = (const void *)v205;
        }
        else {
          v208 = *(const void **)v205;
        }
        if (v207 >= 0) {
          size_t v209 = *(unsigned __int8 *)(v205 + 23);
        }
        else {
          size_t v209 = *(void *)(v205 + 8);
        }
        int v210 = *(char *)(v205 + 47);
        if (v210 >= 0) {
          v211 = (const void *)(v205 + 24);
        }
        else {
          v211 = *(const void **)(v205 + 24);
        }
        if (v210 >= 0) {
          size_t v212 = *(unsigned __int8 *)(v205 + 47);
        }
        else {
          size_t v212 = *(void *)(v205 + 32);
        }
        if (v212 >= v209) {
          size_t v213 = v209;
        }
        else {
          size_t v213 = v212;
        }
        int v214 = memcmp(v208, v211, v213);
        if (v214)
        {
          if ((v214 & 0x80000000) == 0) {
            goto LABEL_424;
          }
        }
        else if (v209 != v212 && v209 >= v212)
        {
LABEL_424:
          if ((*(char *)(v203 + 23) & 0x80000000) == 0) {
            goto LABEL_405;
          }
          goto LABEL_425;
        }
      }
      v204 = (__n128 *)v205;
      uint64_t v202 = v206;
      if ((*(char *)(v203 + 23) & 0x80000000) == 0) {
        goto LABEL_405;
      }
LABEL_425:
      operator delete(*(void **)v203);
LABEL_405:
      BOOL result = *v204;
      *(void *)(v203 + 16) = v204[1].n128_u64[0];
      *(__n128 *)unint64_t v203 = result;
      v204[1].n128_u8[7] = 0;
      v204->n128_u8[0] = 0;
      unint64_t v203 = (unint64_t)v204;
    }
    while (v202 <= (uint64_t)((unint64_t)(v201 - 2) >> 1));
    if (v204 == (__n128 *)(a2 - 3))
    {
      v204->n128_u64[0] = (unint64_t)v270;
      v204->n128_u64[1] = (unint64_t)v267;
      v204[1].n128_u64[0] = (unint64_t)v264;
      goto LABEL_400;
    }
    BOOL result = *(__n128 *)(a2 - 3);
    v204[1].n128_u64[0] = (unint64_t)*(a2 - 1);
    __n128 *v204 = result;
    *(a2 - 3) = v270;
    *(a2 - 2) = v267;
    *(a2 - 1) = v264;
    uint64_t v215 = (uint64_t)&v204[1].n128_i64[1] - a1;
    if (v215 >= 25)
    {
      unint64_t v216 = v215 / 0x18uLL - 2;
      unint64_t v217 = v216 >> 1;
      unint64_t v218 = a1 + 24 * (v216 >> 1);
      int v219 = *(char *)(v218 + 23);
      if (v219 >= 0) {
        v220 = (const void *)(a1 + 24 * (v216 >> 1));
      }
      else {
        v220 = *(const void **)v218;
      }
      if (v219 >= 0) {
        size_t v221 = *(unsigned __int8 *)(v218 + 23);
      }
      else {
        size_t v221 = *(void *)(v218 + 8);
      }
      int v222 = v204[1].n128_i8[7];
      if (v222 >= 0) {
        v223 = v204;
      }
      else {
        v223 = (__n128 *)v204->n128_u64[0];
      }
      if (v222 >= 0) {
        size_t v224 = v204[1].n128_u8[7];
      }
      else {
        size_t v224 = v204->n128_u64[1];
      }
      if (v224 >= v221) {
        size_t v225 = v221;
      }
      else {
        size_t v225 = v224;
      }
      int v226 = memcmp(v220, v223, v225);
      if (v226)
      {
        if (v226 < 0) {
          goto LABEL_400;
        }
      }
      else if (v221 <= v224)
      {
        goto LABEL_400;
      }
      __n128 v227 = *v204;
      int64_t v274 = v204[1].n128_i64[0];
      __n128 v273 = v227;
      v204->n128_u64[1] = 0;
      v204[1].n128_u64[0] = 0;
      v204->n128_u64[0] = 0;
      if (v274 >= 0) {
        v228 = &v273;
      }
      else {
        v228 = (__n128 *)v273.n128_u64[0];
      }
      if (v274 >= 0) {
        size_t v229 = HIBYTE(v274);
      }
      else {
        size_t v229 = v273.n128_u64[1];
      }
      __n128 v230 = *(__n128 *)v218;
      v204[1].n128_u64[0] = *(void *)(v218 + 16);
      __n128 *v204 = v230;
      *(unsigned char *)(v218 + 23) = 0;
      *(unsigned char *)unint64_t v218 = 0;
      if (v216 >= 2)
      {
        while (1)
        {
          unint64_t v232 = v217 - 1;
          unint64_t v217 = (v217 - 1) >> 1;
          unint64_t v233 = a1 + 24 * v217;
          int v234 = *(char *)(v233 + 23);
          if (v234 >= 0) {
            v235 = (const void *)(a1 + 24 * v217);
          }
          else {
            v235 = *(const void **)v233;
          }
          if (v234 >= 0) {
            size_t v236 = *(unsigned __int8 *)(v233 + 23);
          }
          else {
            size_t v236 = *(void *)(v233 + 8);
          }
          if (v229 >= v236) {
            size_t v237 = v236;
          }
          else {
            size_t v237 = v229;
          }
          int v238 = memcmp(v235, v228, v237);
          if (v238)
          {
            if (v238 < 0) {
              break;
            }
          }
          else if (v236 <= v229)
          {
            break;
          }
          long long v231 = *(_OWORD *)v233;
          *(void *)(v218 + 16) = *(void *)(v233 + 16);
          *(_OWORD *)unint64_t v218 = v231;
          *(unsigned char *)(v233 + 23) = 0;
          *(unsigned char *)unint64_t v233 = 0;
          unint64_t v218 = a1 + 24 * v217;
          if (v232 <= 1) {
            goto LABEL_472;
          }
        }
      }
      unint64_t v233 = v218;
LABEL_472:
      BOOL result = v273;
      *(void *)(v233 + 16) = v274;
      *(__n128 *)unint64_t v233 = result;
      a2 = v272;
    }
LABEL_400:
    a2 -= 3;
    BOOL v179 = (unint64_t)v201-- > 2;
  }
  while (v179);
  return result;
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, const void **a3)
{
  int v6 = *(char *)(a2 + 23);
  uint64_t v7 = *(const void **)a2;
  size_t v8 = *(const void **)(a2 + 8);
  if (v6 >= 0) {
    int v9 = (const void *)a2;
  }
  else {
    int v9 = *(const void **)a2;
  }
  if (v6 >= 0) {
    size_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v10 = *(void *)(a2 + 8);
  }
  int v11 = *(char *)(a1 + 23);
  unint64_t v13 = *(const void **)a1;
  unint64_t v12 = *(const void **)(a1 + 8);
  if (v11 >= 0) {
    uint64_t v14 = (const void *)a1;
  }
  else {
    uint64_t v14 = *(const void **)a1;
  }
  if (v11 >= 0) {
    size_t v15 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v15 = *(void *)(a1 + 8);
  }
  if (v15 >= v10) {
    size_t v16 = v10;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  else if (v10 > v15)
  {
LABEL_18:
    int v18 = *((char *)a3 + 23);
    if (v18 >= 0) {
      int v19 = a3;
    }
    else {
      int v19 = *a3;
    }
    if (v18 >= 0) {
      size_t v20 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v20 = (size_t)a3[1];
    }
    if (v10 >= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v10;
    }
    int v22 = memcmp(v19, v9, v21);
    if (v22)
    {
      if ((v22 & 0x80000000) == 0)
      {
LABEL_29:
        unint64_t v23 = *(const void **)(a1 + 16);
        size_t v24 = a3[2];
        __n128 result = *(__n128 *)a3;
        *(_OWORD *)a1 = *(_OWORD *)a3;
        *(void *)(a1 + 16) = v24;
        *a3 = v13;
        a3[1] = v12;
        a3[2] = v23;
        return result;
      }
    }
    else if (v20 > v10)
    {
      goto LABEL_29;
    }
    uint64_t v31 = *(void *)(a1 + 16);
    uint64_t v32 = *(void *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v32;
    *(void *)a2 = v13;
    *(void *)(a2 + 8) = v12;
    *(void *)(a2 + 16) = v31;
    int v33 = *((char *)a3 + 23);
    if (v33 >= 0) {
      unint64_t v34 = a3;
    }
    else {
      unint64_t v34 = *a3;
    }
    if (v33 >= 0) {
      size_t v35 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v35 = (size_t)a3[1];
    }
    if (v31 >= 0) {
      int v36 = (const void *)a2;
    }
    else {
      int v36 = v13;
    }
    if (v31 >= 0) {
      size_t v37 = HIBYTE(v31);
    }
    else {
      size_t v37 = (size_t)v12;
    }
    if (v37 >= v35) {
      size_t v38 = v35;
    }
    else {
      size_t v38 = v37;
    }
    int v39 = memcmp(v34, v36, v38);
    if (v39)
    {
      if (v39 < 0) {
        return result;
      }
    }
    else if (v35 <= v37)
    {
      return result;
    }
    __n128 result = *(__n128 *)a3;
    *(void *)(a2 + 16) = a3[2];
    *(__n128 *)a2 = result;
    *a3 = v13;
    a3[1] = v12;
    a3[2] = (const void *)v31;
    return result;
  }
  int v26 = *((char *)a3 + 23);
  if (v26 >= 0) {
    uint64_t v27 = a3;
  }
  else {
    uint64_t v27 = *a3;
  }
  if (v26 >= 0) {
    size_t v28 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v28 = (size_t)a3[1];
  }
  if (v10 >= v28) {
    size_t v29 = v28;
  }
  else {
    size_t v29 = v10;
  }
  int v30 = memcmp(v27, v9, v29);
  if (v30)
  {
    if (v30 < 0) {
      return result;
    }
  }
  else if (v28 <= v10)
  {
    return result;
  }
  std::vector<std::ssub_match>::pointer v40 = *(const void **)(a2 + 16);
  long long v41 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v41;
  *a3 = v7;
  a3[1] = v8;
  a3[2] = v40;
  int v42 = *(char *)(a2 + 23);
  if (v42 >= 0) {
    unint64_t v43 = (const void *)a2;
  }
  else {
    unint64_t v43 = *(const void **)a2;
  }
  if (v42 >= 0) {
    size_t v44 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v44 = *(void *)(a2 + 8);
  }
  int v45 = *(char *)(a1 + 23);
  uint64_t v46 = *(const void **)a1;
  uint64_t v47 = *(void *)(a1 + 8);
  if (v45 >= 0) {
    unint64_t v48 = (const void *)a1;
  }
  else {
    unint64_t v48 = *(const void **)a1;
  }
  if (v45 >= 0) {
    size_t v49 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v49 = *(void *)(a1 + 8);
  }
  if (v49 >= v44) {
    size_t v50 = v44;
  }
  else {
    size_t v50 = v49;
  }
  int v51 = memcmp(v43, v48, v50);
  if (!v51)
  {
    if (v44 <= v49) {
      return result;
    }
    goto LABEL_84;
  }
  if ((v51 & 0x80000000) == 0)
  {
LABEL_84:
    uint64_t v52 = *(void *)(a1 + 16);
    uint64_t v53 = *(void *)(a2 + 16);
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v53;
    *(void *)a2 = v46;
    *(void *)(a2 + 8) = v47;
    *(void *)(a2 + 16) = v52;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, const void **a2)
{
  long long v2 = a2;
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = a2 - 3;
      int v7 = *((char *)a2 - 1);
      if (v7 >= 0) {
        size_t v8 = a2 - 3;
      }
      else {
        size_t v8 = (const void **)*(a2 - 3);
      }
      if (v7 >= 0) {
        size_t v9 = *((unsigned __int8 *)a2 - 1);
      }
      else {
        size_t v9 = (size_t)*(a2 - 2);
      }
      int v10 = *(char *)(a1 + 23);
      int v11 = *(const void **)a1;
      unint64_t v12 = *(const void **)(a1 + 8);
      if (v10 >= 0) {
        unint64_t v13 = (const void *)a1;
      }
      else {
        unint64_t v13 = *(const void **)a1;
      }
      if (v10 >= 0) {
        size_t v14 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v14 = *(void *)(a1 + 8);
      }
      if (v14 >= v9) {
        size_t v15 = v9;
      }
      else {
        size_t v15 = v14;
      }
      int v16 = memcmp(v8, v13, v15);
      if (v16)
      {
        if (v16 < 0) {
          return 1;
        }
      }
      else if (v9 <= v14)
      {
        return 1;
      }
      long long v41 = *(const void **)(a1 + 16);
      uint64_t v42 = (uint64_t)*(v2 - 1);
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(void *)(a1 + 16) = v42;
      *(v2 - 3) = v11;
      *(v2 - 2) = v12;
      *(v2 - 1) = v41;
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 3);
      return 1;
    default:
      int v17 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, (const void **)(a1 + 48));
      int v18 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == v2) {
        return 1;
      }
      uint64_t v19 = 0;
      int v20 = 0;
      unint64_t v43 = v2;
      break;
  }
  while (2)
  {
    int v23 = *((char *)v18 + 23);
    if (v23 >= 0) {
      size_t v24 = v18;
    }
    else {
      size_t v24 = *v18;
    }
    if (v23 >= 0) {
      size_t v25 = *((unsigned __int8 *)v18 + 23);
    }
    else {
      size_t v25 = (size_t)v18[1];
    }
    int v26 = *((char *)v17 + 23);
    if (v26 >= 0) {
      uint64_t v27 = v17;
    }
    else {
      uint64_t v27 = *v17;
    }
    if (v26 >= 0) {
      size_t v28 = *((unsigned __int8 *)v17 + 23);
    }
    else {
      size_t v28 = (size_t)v17[1];
    }
    if (v28 >= v25) {
      size_t v29 = v25;
    }
    else {
      size_t v29 = v28;
    }
    int v30 = memcmp(v24, v27, v29);
    if (v30)
    {
      if (v30 < 0) {
        goto LABEL_25;
      }
    }
    else if (v25 <= v28)
    {
      goto LABEL_25;
    }
    long long v44 = *(_OWORD *)v18;
    int v45 = v18[2];
    *(_OWORD *)int v18 = *(_OWORD *)v17;
    v18[2] = v17[2];
    *((unsigned char *)v17 + 23) = 0;
    *(unsigned char *)int v17 = 0;
    uint64_t v21 = a1;
    if (v17 == (const void **)a1) {
      goto LABEL_24;
    }
    uint64_t v31 = v19;
    while (1)
    {
      uint64_t v32 = a1 + v31;
      int v33 = (_OWORD *)(a1 + v31 + 24);
      unint64_t v34 = SHIBYTE(v45) >= 0 ? &v44 : (long long *)v44;
      unint64_t v35 = SHIBYTE(v45) >= 0 ? HIBYTE(v45) : *((void *)&v44 + 1);
      int v36 = *(char *)(v32 + 47);
      size_t v37 = v36 >= 0 ? (const void *)(a1 + v31 + 24) : *(const void **)(a1 + v31 + 24);
      unint64_t v38 = v36 >= 0 ? *(unsigned __int8 *)(v32 + 47) : *(void *)(v32 + 32);
      size_t v39 = v38 >= v35 ? v35 : v38;
      int v40 = memcmp(v34, v37, v39);
      if (!v40) {
        break;
      }
      if (v40 < 0)
      {
        uint64_t v21 = (uint64_t)v17;
        goto LABEL_23;
      }
LABEL_48:
      v17 -= 3;
      *(_OWORD *)(v32 + 48) = *v33;
      *(void *)(v32 + 64) = *(void *)(a1 + v31 + 40);
      *(unsigned char *)(v32 + 47) = 0;
      *(unsigned char *)int v33 = 0;
      v31 -= 24;
      if (v31 == -48)
      {
        uint64_t v21 = a1;
        goto LABEL_23;
      }
    }
    if (v35 > v38) {
      goto LABEL_48;
    }
    uint64_t v21 = a1 + v31 + 48;
LABEL_23:
    long long v2 = v43;
LABEL_24:
    long long v22 = v44;
    *(void *)(v21 + 16) = v45;
    *(_OWORD *)uint64_t v21 = v22;
    if (++v20 == 8) {
      return v18 + 3 == v2;
    }
LABEL_25:
    int v17 = v18;
    v19 += 24;
    v18 += 3;
    if (v18 != v2) {
      continue;
    }
    return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, (const void **)a3);
  int v8 = *((char *)a4 + 23);
  if (v8 >= 0) {
    size_t v9 = a4;
  }
  else {
    size_t v9 = *a4;
  }
  if (v8 >= 0) {
    size_t v10 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v10 = (size_t)a4[1];
  }
  int v11 = *(char *)(a3 + 23);
  unint64_t v12 = *(const void **)a3;
  unint64_t v13 = *(const void **)(a3 + 8);
  if (v11 >= 0) {
    size_t v14 = (const void *)a3;
  }
  else {
    size_t v14 = *(const void **)a3;
  }
  if (v11 >= 0) {
    size_t v15 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v15 = *(void *)(a3 + 8);
  }
  if (v15 >= v10) {
    size_t v16 = v10;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if (v17 < 0) {
      return result;
    }
  }
  else if (v10 <= v15)
  {
    return result;
  }
  uint64_t v19 = *(const void **)(a3 + 16);
  int v20 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(void *)(a3 + 16) = v20;
  *a4 = v12;
  a4[1] = v13;
  a4[2] = v19;
  int v21 = *(char *)(a3 + 23);
  if (v21 >= 0) {
    long long v22 = (const void *)a3;
  }
  else {
    long long v22 = *(const void **)a3;
  }
  if (v21 >= 0) {
    size_t v23 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v23 = *(void *)(a3 + 8);
  }
  int v24 = *(char *)(a2 + 23);
  size_t v25 = *(const void **)a2;
  uint64_t v26 = *(void *)(a2 + 8);
  if (v24 >= 0) {
    uint64_t v27 = (const void *)a2;
  }
  else {
    uint64_t v27 = *(const void **)a2;
  }
  if (v24 >= 0) {
    size_t v28 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v28 = *(void *)(a2 + 8);
  }
  if (v28 >= v23) {
    size_t v29 = v23;
  }
  else {
    size_t v29 = v28;
  }
  int v30 = memcmp(v22, v27, v29);
  if (v30)
  {
    if (v30 < 0) {
      return result;
    }
  }
  else if (v23 <= v28)
  {
    return result;
  }
  uint64_t v31 = *(void *)(a2 + 16);
  uint64_t v32 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v32;
  *(void *)a3 = v25;
  *(void *)(a3 + 8) = v26;
  *(void *)(a3 + 16) = v31;
  int v33 = *(char *)(a2 + 23);
  if (v33 >= 0) {
    unint64_t v34 = (const void *)a2;
  }
  else {
    unint64_t v34 = *(const void **)a2;
  }
  if (v33 >= 0) {
    size_t v35 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v35 = *(void *)(a2 + 8);
  }
  int v36 = *(char *)(a1 + 23);
  size_t v37 = *(const void **)a1;
  uint64_t v38 = *(void *)(a1 + 8);
  if (v36 >= 0) {
    size_t v39 = (const void *)a1;
  }
  else {
    size_t v39 = *(const void **)a1;
  }
  if (v36 >= 0) {
    size_t v40 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v40 = *(void *)(a1 + 8);
  }
  if (v40 >= v35) {
    size_t v41 = v35;
  }
  else {
    size_t v41 = v40;
  }
  int v42 = memcmp(v34, v39, v41);
  if (!v42)
  {
    if (v35 <= v40) {
      return result;
    }
LABEL_58:
    uint64_t v43 = *(void *)(a1 + 16);
    uint64_t v44 = *(void *)(a2 + 16);
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v44;
    *(void *)a2 = v37;
    *(void *)(a2 + 8) = v38;
    *(void *)(a2 + 16) = v43;
    return result;
  }
  if ((v42 & 0x80000000) == 0) {
    goto LABEL_58;
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, a3, (const void **)a4);
  int v10 = *((char *)a5 + 23);
  if (v10 >= 0) {
    int v11 = a5;
  }
  else {
    int v11 = *a5;
  }
  if (v10 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  int v13 = *(char *)(a4 + 23);
  size_t v14 = *(const void **)a4;
  size_t v15 = *(const void **)(a4 + 8);
  if (v13 >= 0) {
    size_t v16 = (const void *)a4;
  }
  else {
    size_t v16 = *(const void **)a4;
  }
  if (v13 >= 0) {
    size_t v17 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    size_t v17 = *(void *)(a4 + 8);
  }
  if (v17 >= v12) {
    size_t v18 = v12;
  }
  else {
    size_t v18 = v17;
  }
  int v19 = memcmp(v11, v16, v18);
  if (v19)
  {
    if (v19 < 0) {
      return result;
    }
  }
  else if (v12 <= v17)
  {
    return result;
  }
  int v21 = *(const void **)(a4 + 16);
  long long v22 = a5[2];
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(void *)(a4 + 16) = v22;
  *a5 = v14;
  a5[1] = v15;
  a5[2] = v21;
  int v23 = *(char *)(a4 + 23);
  if (v23 >= 0) {
    int v24 = (const void *)a4;
  }
  else {
    int v24 = *(const void **)a4;
  }
  if (v23 >= 0) {
    size_t v25 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    size_t v25 = *(void *)(a4 + 8);
  }
  int v26 = *(char *)(a3 + 23);
  uint64_t v27 = *(const void **)a3;
  uint64_t v28 = *(void *)(a3 + 8);
  if (v26 >= 0) {
    size_t v29 = (const void *)a3;
  }
  else {
    size_t v29 = *(const void **)a3;
  }
  if (v26 >= 0) {
    size_t v30 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v30 = *(void *)(a3 + 8);
  }
  if (v30 >= v25) {
    size_t v31 = v25;
  }
  else {
    size_t v31 = v30;
  }
  int v32 = memcmp(v24, v29, v31);
  if (v32)
  {
    if (v32 < 0) {
      return result;
    }
  }
  else if (v25 <= v30)
  {
    return result;
  }
  uint64_t v33 = *(void *)(a3 + 16);
  uint64_t v34 = *(void *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(void *)(a3 + 16) = v34;
  *(void *)a4 = v27;
  *(void *)(a4 + 8) = v28;
  *(void *)(a4 + 16) = v33;
  int v35 = *(char *)(a3 + 23);
  if (v35 >= 0) {
    int v36 = (const void *)a3;
  }
  else {
    int v36 = *(const void **)a3;
  }
  if (v35 >= 0) {
    size_t v37 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v37 = *(void *)(a3 + 8);
  }
  int v38 = *(char *)(a2 + 23);
  size_t v39 = *(const void **)a2;
  uint64_t v40 = *(void *)(a2 + 8);
  if (v38 >= 0) {
    size_t v41 = (const void *)a2;
  }
  else {
    size_t v41 = *(const void **)a2;
  }
  if (v38 >= 0) {
    size_t v42 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v42 = *(void *)(a2 + 8);
  }
  if (v42 >= v37) {
    size_t v43 = v37;
  }
  else {
    size_t v43 = v42;
  }
  int v44 = memcmp(v36, v41, v43);
  if (v44)
  {
    if (v44 < 0) {
      return result;
    }
  }
  else if (v37 <= v42)
  {
    return result;
  }
  uint64_t v45 = *(void *)(a2 + 16);
  uint64_t v46 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v46;
  *(void *)a3 = v39;
  *(void *)(a3 + 8) = v40;
  *(void *)(a3 + 16) = v45;
  int v47 = *(char *)(a2 + 23);
  if (v47 >= 0) {
    unint64_t v48 = (const void *)a2;
  }
  else {
    unint64_t v48 = *(const void **)a2;
  }
  if (v47 >= 0) {
    size_t v49 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v49 = *(void *)(a2 + 8);
  }
  int v50 = *(char *)(a1 + 23);
  int v51 = *(const void **)a1;
  uint64_t v52 = *(void *)(a1 + 8);
  if (v50 >= 0) {
    uint64_t v53 = (const void *)a1;
  }
  else {
    uint64_t v53 = *(const void **)a1;
  }
  if (v50 >= 0) {
    size_t v54 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v54 = *(void *)(a1 + 8);
  }
  if (v54 >= v49) {
    size_t v55 = v49;
  }
  else {
    size_t v55 = v54;
  }
  int v56 = memcmp(v48, v53, v55);
  if (v56)
  {
    if (v56 < 0) {
      return result;
    }
  }
  else if (v49 <= v54)
  {
    return result;
  }
  uint64_t v57 = *(void *)(a1 + 16);
  uint64_t v58 = *(void *)(a2 + 16);
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v58;
  *(void *)a2 = v51;
  *(void *)(a2 + 8) = v52;
  *(void *)(a2 + 16) = v57;
  return result;
}

uint64_t *std::unique_ptr<std::__hash_node<std::string,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v30 = v26 + v28;
      unint64_t v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      unint64_t v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      unint64_t v33 = v23 + v26 + v27 + a3;
      uint64_t v34 = v33 + v24;
      unint64_t v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v27 + a3 + v24 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      uint64_t v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v37 = v25 + v28 + v36;
      uint64_t v38 = __ROR8__(v37, 44);
      uint64_t v39 = v37 + v29;
      uint64_t v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      uint64_t v42 = *a2;
      size_t v41 = a2 + 4;
      unint64_t v43 = v42 - 0x4B6D499041670D8DLL * v24;
      uint64_t v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v45 = *(v41 - 3);
        uint64_t v46 = v43 + v34 + v30 + v45;
        uint64_t v47 = v41[2];
        uint64_t v48 = v41[3];
        uint64_t v49 = v41[1];
        unint64_t v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        uint64_t v50 = v32 + v39;
        uint64_t v51 = *(v41 - 2);
        uint64_t v52 = *(v41 - 1);
        uint64_t v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        uint64_t v54 = v53 + v39 + v52;
        uint64_t v55 = v53 + v45 + v51;
        uint64_t v34 = v55 + v52;
        uint64_t v56 = __ROR8__(v55, 44) + v53;
        unint64_t v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        unint64_t v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        unint64_t v35 = v56 + __ROR8__(v54 + v57, 21);
        unint64_t v58 = v43 + v40 + *v41;
        uint64_t v39 = v49 + v47 + v58 + v48;
        uint64_t v40 = __ROR8__(v49 + v47 + v58, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        unint64_t v32 = v57;
        v44 += 64;
      }
      while (v44);
      unint64_t v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      unint64_t v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      uint64_t v9 = a2[2];
      uint64_t v8 = a2[3];
      uint64_t v10 = __ROR8__(v7 + v8, 52);
      uint64_t v11 = v7 + a2[1];
      uint64_t v12 = __ROR8__(v11, 7);
      uint64_t v13 = v11 + v9;
      uint64_t v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      uint64_t v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      uint64_t v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      unint64_t v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    uint64_t v18 = a2[1];
    unint64_t v19 = 0xB492B66FBE98F273 * *a2;
    uint64_t v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    unint64_t v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    unint64_t v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        unint64_t v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      uint64_t v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      unint64_t v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    uint64_t v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

void diag::Service::Internal::create(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, diag::Service::Internal **a4@<X8>)
{
  *a4 = (diag::Service::Internal *)0xAAAAAAAAAAAAAAAALL;
  a4[1] = (diag::Service::Internal *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (char *)operator new(0x1D0uLL);
  uint64_t v10 = *a1;
  uint64_t v9 = (std::__shared_weak_count *)a1[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(void *)a3)
  {
    uint64_t v11 = _Block_copy(*(const void **)a3);
    uint64_t v12 = *(NSObject **)(a3 + 8);
    aBlocunint64_t k = v11;
    xpc_object_t object = v12;
    if (!v12) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v11 = 0;
  uint64_t v12 = *(NSObject **)(a3 + 8);
  aBlocunint64_t k = 0;
  xpc_object_t object = v12;
  if (v12) {
LABEL_5:
  }
    dispatch_retain(v12);
LABEL_6:
  *(void *)uint64_t v8 = &unk_1EFB0F4D0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v28, "com.apple.telephony.abm", "trace.diag.svc");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v14 = dispatch_queue_create_with_target_V2("trace.diag.svc", initially_inactive, 0);
  dispatch_set_qos_class_floor(v14, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v14);
  *((void *)v8 + 9) = 0;
  *((void *)v8 + 10) = 0;
  *((void *)v8 + 11) = v14;
  if (v14)
  {
    dispatch_retain(v14);
    *((void *)v8 + 12) = 0;
    dispatch_release(v14);
  }
  else
  {
    *((void *)v8 + 12) = 0;
  }
  *(void *)uint64_t v8 = &unk_1EFB0F5E0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v31);
  *((void *)v8 + 1) = &unk_1EFB08838;
  *((void *)v8 + 7) = v10;
  *((void *)v8 + 8) = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v29);
  *(void *)uint64_t v8 = &unk_1EFB0F5A0;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v28);
  *(void *)uint64_t v8 = &unk_1EFB0F4D0;
  *((_DWORD *)v8 + 26) = a2;
  *(_WORD *)(v8 + 135) = 0;
  v8[112] = 0;
  *(_OWORD *)(v8 + 183) = 0u;
  *((void *)v8 + 31) = v10;
  *(_WORD *)(v8 + 159) = 0;
  *(_OWORD *)(v8 + 199) = 0u;
  *(_OWORD *)(v8 + 215) = 0u;
  *(_OWORD *)(v8 + 231) = 0u;
  v8[247] = 0;
  *((void *)v8 + 32) = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v8 + 360) = 0uLL;
  *(_OWORD *)(v8 + 376) = 0uLL;
  *(_OWORD *)(v8 + 328) = 0uLL;
  *(_OWORD *)(v8 + 344) = 0uLL;
  *(_OWORD *)(v8 + 296) = 0uLL;
  *(_OWORD *)(v8 + 312) = 0uLL;
  *(_OWORD *)(v8 + 264) = 0uLL;
  *(_OWORD *)(v8 + 280) = 0uLL;
  if (v11) {
    uint64_t v15 = _Block_copy(v11);
  }
  else {
    uint64_t v15 = 0;
  }
  *((void *)v8 + 49) = v15;
  *((void *)v8 + 50) = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  *(_WORD *)(v8 + 445) = 0;
  v8[447] = 0;
  v8[456] = 0;
  *((_DWORD *)v8 + 115) = 0;
  *((void *)v8 + 51) = 0;
  *((void *)v8 + 52) = 0;
  ctu::LoggerCommonBase::setLogLevel();
  *a4 = (diag::Service::Internal *)v8;
  a4[1] = (diag::Service::Internal *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v16 = (std::__shared_weak_count *)operator new(0x20uLL);
  v16->__shared_owners_ = 0;
  p_shared_owners = &v16->__shared_owners_;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0FC68;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = (diag::Service::Internal *)v16;
  uint64_t v18 = (std::__shared_weak_count *)*((void *)v8 + 10);
  if (v18)
  {
    if (v18->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)v8 + 9) = v8;
      *((void *)v8 + 10) = v16;
      std::__shared_weak_count::__release_weak(v18);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_23:
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        unint64_t v19 = *a4;
        if (!*((void *)*a4 + 7)) {
          goto LABEL_35;
        }
        goto LABEL_27;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v8 + 9) = v8;
    *((void *)v8 + 10) = v16;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_23;
    }
  }
  unint64_t v19 = *a4;
  if (!*((void *)*a4 + 7)) {
    goto LABEL_35;
  }
LABEL_27:
  uint64_t v20 = (std::__shared_weak_count *)*((void *)v19 + 10);
  if (!v20 || (uint64_t v21 = *((void *)v19 + 9), (v22 = std::__shared_weak_count::lock(v20)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v23 = v22;
  uint64_t v31 = v21;
  unint64_t v32 = v22;
  ctu::LoggerCommonBase::getLogDomain((diag::Service::Internal *)((char *)v19 + 8));
  uint64_t v29 = v21;
  unint64_t v30 = v23;
  uint64_t v31 = 0;
  unint64_t v32 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  uint64_t v24 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  uint64_t v25 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_35:
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  diag::Service::Internal::init(*a4);
}

void sub_1A61B1A0C()
{
}

void sub_1A61B1A78()
{
}

void sub_1A61B1A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void **a16)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v21);
  uint64_t v23 = *(NSObject **)(v16 + 384);
  if (v23)
  {
    dispatch_group_leave(v23);
    uint64_t v24 = *(NSObject **)(v16 + 384);
    if (v24) {
      dispatch_release(v24);
    }
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v18);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](a9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](a13);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef(v19);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v17);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](a14);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(a16);
  if (*(char *)(v16 + 207) < 0)
  {
    operator delete(*(void **)(v16 + 184));
    if ((*v20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((*v20 & 0x80000000) == 0)
  {
LABEL_6:
    if (*(char *)(v16 + 159) < 0) {
      goto LABEL_7;
    }
    goto LABEL_11;
  }
  operator delete(*(void **)(v16 + 160));
  if (*(char *)(v16 + 159) < 0)
  {
LABEL_7:
    operator delete(*(void **)(v16 + 136));
    if ((*(char *)(v16 + 135) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_11:
  if ((*(char *)(v16 + 135) & 0x80000000) == 0)
  {
LABEL_13:
    ctu::SharedLoggable<diag::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable((void *)v16);
    JUMPOUT(0x1A61B1BB8);
  }
LABEL_12:
  operator delete(*(void **)(v16 + 112));
  goto LABEL_13;
}

void *dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::callback(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  BOOL v5 = *(NSObject **)(a2 + 8);
  *a1 = v4;
  a1[1] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  return a1;
}

void diag::Service::Internal::init(diag::Service::Internal *this)
{
  uint64_t v5 = *((void *)this + 9);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  uint64_t v4 = (char *)this + 72;
  if (!v3 || (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN4diag7Service8Internal4initEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_28_0;
  void v11[4] = this;
  v11[5] = v5;
  uint64_t v12 = v7;
  uint64_t v13 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4diag7Service8InternalEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
  block[3] = &__block_descriptor_tmp_30;
  void block[4] = v4;
  void block[5] = &v13;
  uint64_t v9 = *((void *)this + 11);
  if (!*((void *)this + 12))
  {
    dispatch_sync(v9, block);
    uint64_t v10 = v12;
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_async_and_wait(v9, block);
  uint64_t v10 = v12;
  if (v12) {
LABEL_7:
  }
    std::__shared_weak_count::__release_weak(v10);
LABEL_8:
  std::__shared_weak_count::__release_weak(v7);
}

void *diag::Service::Service(void *a1, uint64_t *a2, int a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v7 = a2[1];
  uint64_t v17 = *a2;
  uint64_t v18 = (std::__shared_weak_count *)v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void **)a4;
  if (*(void *)a4) {
    uint64_t v8 = _Block_copy(v8);
  }
  uint64_t v9 = *(NSObject **)(a4 + 8);
  aBlocunint64_t k = v8;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  diag::Service::Internal::create(&v17, a3, (uint64_t)&aBlock, (diag::Service::Internal **)&v19);
  long long v10 = v19;
  long long v19 = 0uLL;
  uint64_t v11 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v19 + 1);
  if (*((void *)&v19 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t v13 = v18;
  if (!v18 || atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return a1;
}

void sub_1A61B1F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void diag::Service::init(diag::Service::Internal **this)
{
}

void diag::Service::~Service(diag::Service *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;

  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void diag::Service::start(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v6 = _Block_copy(v6);
  }
  uint64_t v7 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  diag::Service::Internal::start(v5, (uint64_t)&aBlock, a3);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void diag::Service::Internal::start(uint64_t a1, uint64_t a2, char a3)
{
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  v8[2] = ___ZN4diag7Service8Internal5startEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke;
  v8[3] = &__block_descriptor_tmp_36_0;
  void v8[4] = a1;
  char v11 = a3;
  uint64_t v5 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v5 = _Block_copy(v5);
  }
  uint64_t v6 = (uint64_t *)(a1 + 72);
  uint64_t v7 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v5;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped(v6, (uint64_t)v8);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void diag::Service::stop(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v6 = _Block_copy(v6);
  }
  uint64_t v7 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  diag::Service::Internal::stop(v5, (uint64_t)&aBlock, a3);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1A61B2244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void diag::Service::Internal::stop(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v6 = (uint64_t *)(a1 + 72);
  if (!v5 || (long long v10 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v11 = v10;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1174405120;
  void v15[2] = ___ZN4diag7Service8Internal4stopEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke;
  v15[3] = &__block_descriptor_tmp_85;
  char v19 = a3;
  v15[4] = a1;
  void v15[5] = v7;
  uint64_t v16 = v10;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v12 = _Block_copy(v12);
  }
  uint64_t v13 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v12;
  dispatch_object_t object = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped(v6, (uint64_t)v15);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t v14 = v16;
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_16:
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_16;
  }
}

void diag::Service::sleep(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  diag::Service::Internal::sleep(v3, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void diag::Service::Internal::sleep(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN4diag7Service8Internal5sleepEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_105_0;
  v7[4] = a1;
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = (uint64_t *)(a1 + 72);
  uint64_t v6 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void diag::Service::wake(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  diag::Service::Internal::wake(v3, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void diag::Service::Internal::wake(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN4diag7Service8Internal4wakeEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_121;
  v7[4] = a1;
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = (uint64_t *)(a1 + 72);
  uint64_t v6 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void diag::Service::snapshot(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v8 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v14 = *(std::string *)a2;
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v13 = *(std::string *)a3;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
LABEL_6:
  uint64_t v9 = *(void **)a5;
  if (*(void *)a5) {
    uint64_t v9 = _Block_copy(v9);
  }
  long long v10 = *(NSObject **)(a5 + 8);
  aBlocunint64_t k = v9;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  diag::Service::Internal::snapshot(v8, (uint64_t)&v14, (uint64_t)&v13, a4, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_18:
    operator delete(v14.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_18;
  }
}

void sub_1A61B27A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a23 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void diag::Service::Internal::snapshot(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a1 + 72);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v8 = (uint64_t *)(a1 + 72);
  uint64_t v26 = v9;
  if (!v7 || (std::string v14 = std::__shared_weak_count::lock(v7), (v27 = v14) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 1174405120;
  v19[2] = ___ZN4diag7Service8Internal8snapshotENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_bN8dispatch8callbackIU13block_pointerFvNS0_5StateES8_EEE_block_invoke;
  void v19[3] = &__block_descriptor_tmp_140;
  void v19[4] = a1;
  v19[5] = v9;
  uint64_t v20 = v14;
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v21 = *(std::string *)a2;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  char v25 = a4;
  uint64_t v15 = *(void **)a5;
  if (*(void *)a5) {
    uint64_t v15 = _Block_copy(v15);
  }
  uint64_t v16 = *(NSObject **)(a5 + 8);
  aBlocunint64_t k = v15;
  dispatch_object_t object = v16;
  if (v16) {
    dispatch_retain(v16);
  }
  ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped(v8, (uint64_t)v19);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      uint64_t v17 = v20;
      if (!v20) {
        goto LABEL_25;
      }
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  uint64_t v17 = v20;
  if (!v20) {
    goto LABEL_25;
  }
LABEL_23:
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_25:
  uint64_t v18 = v27;
  if (v27)
  {
    if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1A61B2A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v21 + 40);
    std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v22 - 80);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v21 + 40);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v22 - 80);
  _Unwind_Resume(a1);
}

void diag::Service::reset(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  diag::Service::Internal::reset(v3, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void diag::Service::Internal::reset(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN4diag7Service8Internal5resetEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_146;
  v7[4] = a1;
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = (uint64_t *)(a1 + 72);
  uint64_t v6 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void diag::Service::abort(uint64_t *a1, char a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v6 = _Block_copy(v6);
  }
  uint64_t v7 = *(NSObject **)(a3 + 8);
  aBlocunint64_t k = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  diag::Service::Internal::abort(v5, a2, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1A61B2C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void diag::Service::Internal::abort(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEFAULT, "#I Abort diag service", buf, 2u);
  }
  (*(void (**)(void))(**(void **)(a1 + 232) + 96))(*(void *)(a1 + 232));
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1174405120;
  void v10[2] = ___ZN4diag7Service8Internal5abortEbN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke;
  v10[3] = &__block_descriptor_tmp_149;
  v10[4] = a1;
  char v13 = a2;
  uint64_t v7 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v7 = _Block_copy(v7);
  }
  uint64_t v8 = (uint64_t *)(a1 + 72);
  uint64_t v9 = *(NSObject **)(a3 + 8);
  aBlocunint64_t k = v7;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped(v8, (uint64_t)v10);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void diag::Service::updateConfig(uint64_t *a1, const void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  diag::Service::Internal::updateConfig(v2, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void diag::Service::Internal::updateConfig(uint64_t a1, const void **a2)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1174405120;
  v6[2] = ___ZN4diag7Service8Internal12updateConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v6[3] = &__block_descriptor_tmp_150;
  uint64_t v3 = *a2;
  v6[4] = a1;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  uint64_t v8 = v6;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4diag7Service8InternalEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
  block[3] = &__block_descriptor_tmp_30;
  void block[4] = a1 + 72;
  void block[5] = &v8;
  uint64_t v4 = *(NSObject **)(a1 + 88);
  if (!*(void *)(a1 + 96))
  {
    dispatch_sync(v4, block);
    CFTypeRef v5 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_7;
  }
  dispatch_async_and_wait(v4, block);
  CFTypeRef v5 = cf;
  if (cf) {
LABEL_7:
  }
    CFRelease(v5);
}

uint64_t diag::Service::getState(diag::Service *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  int v9 = -1431655766;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  _DWORD v5[2] = ___ZNK4diag7Service8Internal8getStateEv_block_invoke;
  v5[3] = &unk_1E5C48758;
  v5[4] = &v6;
  v5[5] = v1;
  long long v10 = v5;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4diag7Service8InternalEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
  block[3] = &__block_descriptor_tmp_30;
  void block[4] = v1 + 72;
  void block[5] = &v10;
  uint64_t v2 = *(NSObject **)(v1 + 88);
  if (*(void *)(v1 + 96)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

const char *diag::Service::stateAsString(unsigned int a1)
{
  if (a1 > 4) {
    return "Unknown";
  }
  else {
    return off_1E5C48778[a1];
  }
}

void diag::Service::pushInfo(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    uint64_t v6 = v4;
    int v7 = a2;
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v5 = *(std::string *)a3;
    uint64_t v6 = v4;
    int v7 = a2;
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      std::string __p = v5;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&__p, v5.__r_.__value_.__l.__data_, v5.__r_.__value_.__l.__size_);
LABEL_6:
  ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1}>((uint64_t *)(v4 + 72), (uint64_t)&v6);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v5.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_10;
  }
}

void sub_1A61B30E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void diag::Service::pushInfo(uint64_t *a1, uint64_t a2, void **a3)
{
  uint64_t v4 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    std::string v5 = *a3;
    xpc_object_t object = v5;
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v7 = *(std::string *)a2;
    std::string v5 = *a3;
    xpc_object_t object = v5;
    if (v5)
    {
LABEL_3:
      xpc_retain(v5);
      goto LABEL_6;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_6:
  diag::Service::Internal::pushInfo(v4, (uint64_t)&v7, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
}

void sub_1A61B31BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void diag::Service::Internal::pushInfo(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v6 = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    std::string v5 = *a3;
    xpc_object_t object = v5;
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string __p = *(std::string *)a2;
    std::string v5 = *a3;
    xpc_object_t object = v5;
    if (v5)
    {
LABEL_3:
      xpc_retain(v5);
      goto LABEL_6;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_6:
  ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::pushInfo(std::string,xpc::dict)::{lambda(void)#1}>((uint64_t *)(a1 + 72), (uint64_t)&v6);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void diag::Service::setStallHandler(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v6 = _Block_copy(v6);
  }
  std::string v7 = *(NSObject **)(a3 + 8);
  aBlocunint64_t k = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  diag::Service::Internal::setStallHandler(v5, a2, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void diag::Service::Internal::setStallHandler(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v8 = a1;
  int v9 = a2;
  uint64_t v5 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v5 = _Block_copy(v5);
  }
  uint64_t v6 = (uint64_t *)(a1 + 72);
  std::string v7 = *(NSObject **)(a3 + 8);
  aBlocunint64_t k = v5;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::setStallHandler(abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>)::{lambda(void)#1}>(v6, (uint64_t)&v8);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void *ctu::SharedLoggable<diag::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1EFB0F5E0;
  MEMORY[0x1A6274710](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1EFB0F5E0;
  MEMORY[0x1A6274710](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void diag::Service::Internal::~Internal(diag::Service::Internal *this)
{
  diag::Service::Internal::~Internal(this);

  operator delete(v1);
}

{
  const void *v2;
  const void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  BasebandTransport *v7;
  BasebandTransport *v8;
  BasebandTransport *v9;
  NSObject *v10;
  const void *v11;
  NSObject *v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  const void *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  const void *v25;
  NSObject *v26;
  NSObject *v27;
  std::__shared_weak_count *v28;
  void *v29;
  void *v30;
  BOOL v31;

  *(void *)this = &unk_1EFB0F4D0;
  uint64_t v2 = (const void *)*((void *)this + 51);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 52);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *((void *)this + 27);
  if (v4)
  {
    uint64_t v5 = *(void **)(v4 + 16);
    uint64_t v6 = (void *)(v4 + 24);
    if (v5 != (void *)(v4 + 24))
    {
      do
      {
        diag::DIAGReader::stop((diag::DIAGReader *)v5[5]);
        uint64_t v29 = (void *)v5[1];
        if (v29)
        {
          do
          {
            unint64_t v30 = v29;
            uint64_t v29 = (void *)*v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            unint64_t v30 = (void *)v5[2];
            uint64_t v31 = *v30 == (void)v5;
            uint64_t v5 = v30;
          }
          while (!v31);
        }
        uint64_t v5 = v30;
      }
      while (v30 != v6);
    }
  }
  std::string v7 = (BasebandTransport *)*((void *)this + 36);
  if (v7) {
    BasebandTransport::close(v7);
  }
  uint64_t v8 = (BasebandTransport *)*((void *)this + 38);
  if (v8) {
    BasebandTransport::close(v8);
  }
  int v9 = (BasebandTransport *)*((void *)this + 40);
  if (v9) {
    BasebandTransport::close(v9);
  }
  long long v10 = *((void *)this + 50);
  if (v10) {
    dispatch_release(v10);
  }
  char v11 = (const void *)*((void *)this + 49);
  if (v11) {
    _Block_release(v11);
  }
  uint64_t v12 = *((void *)this + 48);
  if (v12)
  {
    dispatch_group_leave(v12);
    char v13 = *((void *)this + 48);
    if (v13) {
      dispatch_release(v13);
    }
  }
  std::string v14 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  char v19 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    uint64_t v21 = (const void *)*((void *)this + 33);
    if (!v21) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  uint64_t v21 = (const void *)*((void *)this + 33);
  if (v21) {
LABEL_41:
  }
    CFRelease(v21);
LABEL_42:
  uint64_t v22 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  uint64_t v23 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  uint64_t v24 = (std::__shared_weak_count *)*((void *)this + 28);
  if (!v24 || atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    char v25 = (const void *)*((void *)this + 26);
    if (!v25) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  char v25 = (const void *)*((void *)this + 26);
  if (v25) {
LABEL_51:
  }
    CFRelease(v25);
LABEL_52:
  if (*((char *)this + 207) < 0)
  {
    operator delete(*((void **)this + 23));
    if ((*((char *)this + 183) & 0x80000000) == 0)
    {
LABEL_54:
      if ((*((char *)this + 159) & 0x80000000) == 0) {
        goto LABEL_55;
      }
      goto LABEL_72;
    }
  }
  else if ((*((char *)this + 183) & 0x80000000) == 0)
  {
    goto LABEL_54;
  }
  operator delete(*((void **)this + 20));
  if ((*((char *)this + 159) & 0x80000000) == 0)
  {
LABEL_55:
    if ((*((char *)this + 135) & 0x80000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_73;
  }
LABEL_72:
  operator delete(*((void **)this + 17));
  if ((*((char *)this + 135) & 0x80000000) == 0)
  {
LABEL_56:
    *(void *)this = &unk_1EFB0F5E0;
    MEMORY[0x1A6274710]((char *)this + 8);
    uint64_t v26 = *((void *)this + 12);
    if (!v26) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
LABEL_73:
  operator delete(*((void **)this + 14));
  *(void *)this = &unk_1EFB0F5E0;
  MEMORY[0x1A6274710]((char *)this + 8);
  uint64_t v26 = *((void *)this + 12);
  if (v26) {
LABEL_57:
  }
    dispatch_release(v26);
LABEL_58:
  uint64_t v27 = *((void *)this + 11);
  if (v27) {
    dispatch_release(v27);
  }
  uint64_t v28 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
}

uint64_t ctu::Loggable<diag::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<diag::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "trace.diag.svc");
}

uint64_t ctu::Loggable<diag::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void ctu::SharedLoggable<diag::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1EFB0F5E0;
  MEMORY[0x1A6274710](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *ctu::Loggable<diag::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1EFB0F5E0;
  MEMORY[0x1A6274710](a1 + 1);
  return a1;
}

void ctu::Loggable<diag::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1EFB0F5E0;
  MEMORY[0x1A6274710](a1 + 1);

  operator delete(a1);
}

void ___ZN4diag7Service8Internal4initEv_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Init", buf, 2u);
  }
  *(_DWORD *)(v2 + 460) = 0;
  if (!*(void *)(v2 + 288))
  {
    uint64_t v44 = *(std::__shared_weak_count **)(v2 + 256);
    uint64_t v114 = *(void *)(v2 + 248);
    long long v115 = v44;
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v45 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
    __n128 v113 = dispatch_queue_create("DIAG.reader.queue", v45);
    BasebandTransport::create((capabilities::radio *)&v114, &v113, (uint64_t)buf);
    long long v46 = *(_OWORD *)buf;
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v47 = *(std::__shared_weak_count **)(v2 + 296);
    *(_OWORD *)(v2 + 288) = v46;
    if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
    uint64_t v48 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
    if (v113) {
      dispatch_release(v113);
    }
    uint64_t v49 = v115;
    if (v115 && !atomic_fetch_add(&v115->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (!*(void *)(v2 + 272))
  {
    uint64_t v50 = (char *)operator new(0x70uLL);
    *((void *)v50 + 1) = 0;
    *((void *)v50 + 2) = 0;
    *(void *)uint64_t v50 = &unk_1EFB0B390;
    *(_OWORD *)(v50 + 40) = 0u;
    *(_OWORD *)(v50 + 56) = 0u;
    *(_OWORD *)(v50 + 72) = 0u;
    *(_OWORD *)(v50 + 88) = 0u;
    *((void *)v50 + 13) = 0;
    *(_OWORD *)(v50 + 24) = 0u;
    uint64_t v51 = *(std::__shared_weak_count **)(v2 + 280);
    *(void *)(v2 + 272) = v50 + 24;
    *(void *)(v2 + 280) = v50;
    if (v51)
    {
      if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
  }
  uint64_t Controller = TelephonyBasebandCreateController();
  uint64_t v5 = *(const void **)(v2 + 264);
  *(void *)(v2 + 264) = Controller;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (CFTypeRef *)(v2 + 264);
  memset(&buf[8], 0, 40);
  *(void *)std::string buf = 0xAAAAAAAA00000005;
  if (&buf[8] != (uint8_t *)(v2 + 264))
  {
    CFTypeRef v7 = *v6;
    if (*v6)
    {
      CFRetain(*v6);
      uint64_t v8 = *(const void **)&buf[8];
      *(void *)&uint8_t buf[8] = v7;
      if (v8) {
        CFRelease(v8);
      }
    }
  }
  uint64_t v10 = *(void *)(v2 + 288);
  uint64_t v9 = *(void *)(v2 + 296);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  char v11 = *(std::__shared_weak_count **)&buf[24];
  *(void *)&uint8_t buf[16] = v10;
  *(void *)&uint8_t buf[24] = v9;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  *(_DWORD *)std::string buf = *(_DWORD *)(v2 + 104);
  uint64_t v12 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v13 = off_1EB5EE540;
  if (!off_1EB5EE540)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v116, v12);
    long long v14 = v116;
    long long v116 = 0uLL;
    uint64_t v15 = (std::__shared_weak_count *)*(&off_1EB5EE540 + 1);
    off_1EB5EE540 = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = (std::__shared_weak_count *)*((void *)&v116 + 1);
    if (*((void *)&v116 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v116 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v13 = off_1EB5EE540;
  }
  uint64_t v109 = v13;
  size_t v110 = (std::__shared_weak_count *)*(&off_1EB5EE540 + 1);
  if (*(&off_1EB5EE540 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EB5EE540 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4diag7Service8Internal4initEv_block_invoke_23;
  aBlock[3] = &__block_descriptor_tmp_29;
  uint64_t v18 = a1[5];
  uint64_t v17 = (std::__shared_weak_count *)a1[6];
  aBlock[4] = v2;
  void aBlock[5] = v18;
  uint8x8_t v106 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  char v19 = (capabilities::diag *)_Block_copy(aBlock);
  uint64_t v20 = *(NSObject **)(v2 + 88);
  if (v20) {
    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
  }
  uint64_t v107 = v19;
  dispatch_object_t v108 = v20;
  (*(void (**)(long long *__return_ptr, uint64_t, capabilities::diag **))(*(void *)v13 + 128))(&v111, v13, &v107);
  long long v21 = v111;
  long long v111 = 0uLL;
  uint64_t v22 = *(std::__shared_weak_count **)&buf[40];
  *(_OWORD *)&buf[32] = v21;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  uint64_t v23 = (std::__shared_weak_count *)*((void *)&v111 + 1);
  if (*((void *)&v111 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v111 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (v108) {
    dispatch_release(v108);
  }
  uint64_t v24 = v107;
  if (v107) {
    _Block_release(v107);
  }
  char v25 = v110;
  if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  uint64_t v26 = (capabilities::abs *)capabilities::diag::preferredInterface(v24);
  int v27 = *(_DWORD *)(v2 + 104);
  if ((v27 - 1) < 3)
  {
    if (capabilities::abs::supportsBBUSBMux(v26))
    {
      uint64_t v28 = *(void *)(v2 + 248);
      uint64_t v29 = *(std::__shared_weak_count **)(v2 + 256);
      uint64_t v87 = v28;
      int v88 = v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v81 = *(_DWORD *)buf;
      CFTypeRef cf = *(CFTypeRef *)&buf[8];
      if (*(void *)&buf[8]) {
        CFRetain(*(CFTypeRef *)&buf[8]);
      }
      uint64_t v83 = *(void *)&buf[16];
      uint64_t v84 = *(std::__shared_weak_count **)&buf[24];
      if (*(void *)&buf[24]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[24] + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v85 = *(void *)&buf[32];
      size_t v86 = *(std::__shared_weak_count **)&buf[40];
      if (*(void *)&buf[40]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[40] + 8), 1uLL, memory_order_relaxed);
      }
      diag::DIAGConfigurer::create<unsigned int>((uint64_t *)&v116, v28, v29, (uint64_t)&v81, v2 + 424);
      long long v30 = v116;
      long long v116 = 0uLL;
      uint64_t v31 = *(std::__shared_weak_count **)(v2 + 240);
      *(_OWORD *)(v2 + 232) = v30;
      if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      unint64_t v32 = (std::__shared_weak_count *)*((void *)&v116 + 1);
      if (*((void *)&v116 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v116 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      unint64_t v33 = v86;
      if (v86 && !atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      uint64_t v34 = v84;
      if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        CFTypeRef v35 = cf;
        if (!cf)
        {
LABEL_66:
          uint64_t v36 = v88;
          if (!v88) {
            goto LABEL_165;
          }
LABEL_161:
          if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
            uint64_t v68 = v106;
            if (!v106) {
              goto LABEL_167;
            }
            goto LABEL_166;
          }
          goto LABEL_165;
        }
      }
      else
      {
        CFTypeRef v35 = cf;
        if (!cf) {
          goto LABEL_66;
        }
      }
      CFRelease(v35);
      goto LABEL_66;
    }
    uint64_t v52 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v116) = 0;
      _os_log_impl(&dword_1A609F000, v52, OS_LOG_TYPE_DEFAULT, "#I configure DIAG PCI for SW Bypass mode", (uint8_t *)&v116, 2u);
    }
    uint64_t v53 = *(void *)(v2 + 248);
    uint64_t v54 = *(std::__shared_weak_count **)(v2 + 256);
    uint64_t v79 = v53;
    size_t v80 = v54;
    if (v54) {
      atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v73 = *(_DWORD *)buf;
    CFTypeRef v74 = *(CFTypeRef *)&buf[8];
    if (*(void *)&buf[8]) {
      CFRetain(*(CFTypeRef *)&buf[8]);
    }
    uint64_t v75 = *(void *)&buf[16];
    size_t v76 = *(std::__shared_weak_count **)&buf[24];
    if (*(void *)&buf[24]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[24] + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v77 = *(void *)&buf[32];
    size_t v78 = *(std::__shared_weak_count **)&buf[40];
    if (*(void *)&buf[40]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[40] + 8), 1uLL, memory_order_relaxed);
    }
    diag::DIAGConfigurer::create<unsigned long>((uint64_t *)&v116, v53, v54, (uint64_t)&v73, v2 + 424);
    long long v55 = v116;
    long long v116 = 0uLL;
    uint64_t v56 = *(std::__shared_weak_count **)(v2 + 240);
    *(_OWORD *)(v2 + 232) = v55;
    if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
    unint64_t v57 = (std::__shared_weak_count *)*((void *)&v116 + 1);
    if (*((void *)&v116 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v116 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
    unint64_t v58 = v78;
    if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
    unint64_t v59 = v76;
    if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
      CFTypeRef v60 = v74;
      if (!v74)
      {
LABEL_136:
        uint64_t v36 = v80;
        if (!v80) {
          goto LABEL_165;
        }
        goto LABEL_161;
      }
    }
    else
    {
      CFTypeRef v60 = v74;
      if (!v74) {
        goto LABEL_136;
      }
    }
    CFRelease(v60);
    goto LABEL_136;
  }
  if (v27 && v27 != 4) {
    goto LABEL_165;
  }
  switch(v26)
  {
    case 2:
      goto LABEL_73;
    case 8:
      uint64_t v61 = *(void *)(v2 + 248);
      unint64_t v62 = *(std::__shared_weak_count **)(v2 + 256);
      uint64_t v95 = v61;
      long long v96 = v62;
      if (v62) {
        atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v89 = *(_DWORD *)buf;
      CFTypeRef v90 = *(CFTypeRef *)&buf[8];
      if (*(void *)&buf[8]) {
        CFRetain(*(CFTypeRef *)&buf[8]);
      }
      uint64_t v91 = *(void *)&buf[16];
      size_t v92 = *(std::__shared_weak_count **)&buf[24];
      if (*(void *)&buf[24]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[24] + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v93 = *(void *)&buf[32];
      int v94 = *(std::__shared_weak_count **)&buf[40];
      if (*(void *)&buf[40]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[40] + 8), 1uLL, memory_order_relaxed);
      }
      diag::DIAGConfigurer::create<unsigned long>((uint64_t *)&v116, v61, v62, (uint64_t)&v89, v2 + 424);
      long long v63 = v116;
      long long v116 = 0uLL;
      unint64_t v64 = *(std::__shared_weak_count **)(v2 + 240);
      *(_OWORD *)(v2 + 232) = v63;
      if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
      unint64_t v65 = (std::__shared_weak_count *)*((void *)&v116 + 1);
      if (*((void *)&v116 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v116 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
      size_t v66 = v94;
      if (v94 && !atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
      int v67 = v92;
      if (v92 && !atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
      if (v90) {
        CFRelease(v90);
      }
      uint64_t v36 = v96;
      if (!v96) {
        goto LABEL_165;
      }
      goto LABEL_161;
    case 4:
LABEL_73:
      uint64_t v37 = *(void *)(v2 + 248);
      uint64_t v38 = *(std::__shared_weak_count **)(v2 + 256);
      uint64_t v103 = v37;
      size_t v104 = v38;
      if (v38) {
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v97 = *(_DWORD *)buf;
      CFTypeRef v98 = *(CFTypeRef *)&buf[8];
      if (*(void *)&buf[8]) {
        CFRetain(*(CFTypeRef *)&buf[8]);
      }
      uint64_t v99 = *(void *)&buf[16];
      unint64_t v100 = *(std::__shared_weak_count **)&buf[24];
      if (*(void *)&buf[24]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[24] + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v101 = *(void *)&buf[32];
      uint64_t v102 = *(std::__shared_weak_count **)&buf[40];
      if (*(void *)&buf[40]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[40] + 8), 1uLL, memory_order_relaxed);
      }
      diag::DIAGConfigurer::create<unsigned int>((uint64_t *)&v116, v37, v38, (uint64_t)&v97, v2 + 424);
      long long v39 = v116;
      long long v116 = 0uLL;
      uint64_t v40 = *(std::__shared_weak_count **)(v2 + 240);
      *(_OWORD *)(v2 + 232) = v39;
      if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
      size_t v41 = (std::__shared_weak_count *)*((void *)&v116 + 1);
      if (*((void *)&v116 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v116 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
      uint64_t v42 = v102;
      if (v102 && !atomic_fetch_add(&v102->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
      unint64_t v43 = v100;
      if (v100 && !atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
      if (v98) {
        CFRelease(v98);
      }
      uint64_t v36 = v104;
      if (!v104) {
        goto LABEL_165;
      }
      goto LABEL_161;
  }
  __n128 v69 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v116) = 0;
    _os_log_error_impl(&dword_1A609F000, v69, OS_LOG_TYPE_ERROR, "Failed to get preferred interface!", (uint8_t *)&v116, 2u);
    uint64_t v68 = v106;
    if (!v106) {
      goto LABEL_167;
    }
    goto LABEL_166;
  }
LABEL_165:
  uint64_t v68 = v106;
  if (v106) {
LABEL_166:
  }
    std::__shared_weak_count::__release_weak(v68);
LABEL_167:
  __n128 v70 = *(std::__shared_weak_count **)&buf[40];
  if (*(void *)&buf[40]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[40] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
    std::__shared_weak_count::__release_weak(v70);
  }
  BOOL v71 = *(std::__shared_weak_count **)&buf[24];
  if (!*(void *)&buf[24]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[24] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    __n128 v72 = *(const void **)&buf[8];
    if (!*(void *)&buf[8]) {
      return;
    }
    goto LABEL_173;
  }
  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
  std::__shared_weak_count::__release_weak(v71);
  __n128 v72 = *(const void **)&buf[8];
  if (*(void *)&buf[8]) {
LABEL_173:
  }
    CFRelease(v72);
}

void sub_1A61B49A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  diag::DIAGConfigurer::Parameters_t::~Parameters_t((diag::DIAGConfigurer::Parameters_t *)&a26);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  uint64_t v34 = *(std::__shared_weak_count **)(v32 - 200);
  if (v34) {
    std::__shared_weak_count::__release_weak(v34);
  }
  diag::DIAGConfigurer::Parameters_t::~Parameters_t((diag::DIAGConfigurer::Parameters_t *)(v32 - 144));
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal4initEv_block_invoke_23(void *a1, uint64_t a2, NSObject **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    CFTypeRef v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      if (a1[5] && (*(_DWORD *)(v6 + 460) | 2) == 3)
      {
        uint64_t v9 = *a3;
        if (v9)
        {
          dispatch_retain(v9);
          dispatch_group_enter(v9);
        }
        uint64_t v10 = *(NSObject **)(v6 + 384);
        *(void *)(v6 + 384) = v9;
        if (v10)
        {
          dispatch_group_leave(v10);
          dispatch_release(v10);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__18weak_ptrIN4diag7Service8InternalEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__18weak_ptrIN4diag7Service8InternalEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t dispatch::callback<void({block_pointer})(diag::CommandDriver::Event,dispatch::group_session)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t diag::DIAGConfigurer::create<unsigned int>(uint64_t *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = operator new(0xB8uLL);
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v24 = *(_DWORD *)a4;
  char v11 = *(const void **)(a4 + 8);
  CFTypeRef cf = v11;
  if (v11) {
    CFRetain(v11);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a4 + 24);
  uint64_t v26 = *(void *)(a4 + 16);
  int v27 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a4 + 40);
  uint64_t v28 = *(void *)(a4 + 32);
  uint64_t v29 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  diag::DIAGConfigurerUSB::DIAGConfigurerUSB((uint64_t)v10, &v30, &v24, a5);
  uint64_t v32 = (uint64_t)v10;
  unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
  long long v14 = (std::__shared_weak_count *)operator new(0x20uLL);
  v14->__shared_owners_ = 0;
  p_shared_owners = &v14->__shared_owners_;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0F680;
  v14->__shared_weak_owners_ = 0;
  v14[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  unint64_t v33 = (unint64_t)v14;
  uint64_t v16 = (std::__shared_weak_count *)*((void *)v10 + 10);
  if (v16)
  {
    if (v16->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)v10 + 9) = v10;
      *((void *)v10 + 10) = v14;
      std::__shared_weak_count::__release_weak(v16);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v10 + 9) = v10;
    *((void *)v10 + 10) = v14;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_14:
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  uint64_t v17 = v32;
  ctu::Loggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v32);
  unint64_t v18 = v33;
  *a1 = v17;
  a1[1] = v18;
  uint64_t v32 = 0;
  unint64_t v33 = 0;
  char v19 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    uint64_t v20 = v27;
    if (!v27) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v20 = v27;
    if (!v27) {
      goto LABEL_19;
    }
  }
  if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    CFTypeRef v21 = cf;
    if (!cf) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_19:
  CFTypeRef v21 = cf;
  if (cf) {
LABEL_20:
  }
    CFRelease(v21);
LABEL_21:
  uint64_t v22 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)*a1 + 48))(*a1);
}

void sub_1A61B4F0C(_Unwind_Exception *a1)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1A61B4F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
}

uint64_t diag::DIAGConfigurer::create<unsigned long>(uint64_t *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = (std::__shared_weak_count_vtbl *)operator new(0xC0uLL);
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v24 = *(_DWORD *)a4;
  char v11 = *(const void **)(a4 + 8);
  CFTypeRef cf = v11;
  if (v11) {
    CFRetain(v11);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a4 + 24);
  uint64_t v26 = *(void *)(a4 + 16);
  int v27 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a4 + 40);
  uint64_t v28 = *(void *)(a4 + 32);
  uint64_t v29 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  diag::DIAGConfigurerPCI::DIAGConfigurerPCI(v10, &v30, &v24, a5);
  uint64_t v32 = v10;
  unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
  long long v14 = (std::__shared_weak_count *)operator new(0x20uLL);
  v14->__shared_owners_ = 0;
  p_shared_owners = &v14->__shared_owners_;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0F6D0;
  v14->__shared_weak_owners_ = 0;
  v14[1].__vftable = v10;
  unint64_t v33 = (unint64_t)v14;
  uint64_t v16 = (std::__shared_weak_count *)v10[2].~__shared_weak_count;
  if (v16)
  {
    if (v16->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v10[1].__on_zero_shared_weaunint64_t k = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
      v10[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v14;
      std::__shared_weak_count::__release_weak(v16);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v10[1].__on_zero_shared_weaunint64_t k = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
    v10[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v14;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_14:
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  uint64_t v17 = (uint64_t)v32;
  ctu::Loggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v32);
  unint64_t v18 = v33;
  *a1 = v17;
  a1[1] = v18;
  uint64_t v32 = 0;
  unint64_t v33 = 0;
  char v19 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    uint64_t v20 = v27;
    if (!v27) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v20 = v27;
    if (!v27) {
      goto LABEL_19;
    }
  }
  if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    CFTypeRef v21 = cf;
    if (!cf) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_19:
  CFTypeRef v21 = cf;
  if (cf) {
LABEL_20:
  }
    CFRelease(v21);
LABEL_21:
  uint64_t v22 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)*a1 + 48))(*a1);
}

void sub_1A61B5280(_Unwind_Exception *a1)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1A61B5294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
}

void *___ZNK3ctu20SharedSynchronizableIN4diag7Service8InternalEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ctu::Loggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1A61B5444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1A61B5460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<diag::DIAGConfigurerUSB *,std::shared_ptr<diag::DIAGConfigurerUSB> ctu::SharedSynchronizable<diag::DIAGConfigurer>::make_shared_ptr<diag::DIAGConfigurerUSB>(diag::DIAGConfigurerUSB*)::{lambda(diag::DIAGConfigurerUSB *)#1},std::allocator<diag::DIAGConfigurerUSB>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<diag::DIAGConfigurerUSB *,std::shared_ptr<diag::DIAGConfigurerUSB> ctu::SharedSynchronizable<diag::DIAGConfigurer>::make_shared_ptr<diag::DIAGConfigurerUSB>(diag::DIAGConfigurerUSB*)::{lambda(diag::DIAGConfigurerUSB *)#1},std::allocator<diag::DIAGConfigurerUSB>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<diag::DIAGConfigurerUSB *,std::shared_ptr<diag::DIAGConfigurerUSB> ctu::SharedSynchronizable<diag::DIAGConfigurer>::make_shared_ptr<diag::DIAGConfigurerUSB>(diag::DIAGConfigurerUSB*)::{lambda(diag::DIAGConfigurerUSB *)#1},std::allocator<diag::DIAGConfigurerUSB>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE15make_shared_ptrINS1_17DIAGConfigurerUSBEEENS"
                     "t3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE15make_shared_ptrINS1_17DIAGConfigu"
                                "rerUSBEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE15make_shared_ptrINS1_17DIAGConfigurerUSBEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE15make_shared_ptrINS1_17DIAGConfigurerUSBEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<diag::DIAGConfigurerUSB> ctu::SharedSynchronizable<diag::DIAGConfigurer>::make_shared_ptr<diag::DIAGConfigurerUSB>(diag::DIAGConfigurerUSB*)::{lambda(diag::DIAGConfigurerUSB*)#1}::operator() const(diag::DIAGConfigurerUSB*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<diag::DIAGConfigurerPCI *,std::shared_ptr<diag::DIAGConfigurerPCI> ctu::SharedSynchronizable<diag::DIAGConfigurer>::make_shared_ptr<diag::DIAGConfigurerPCI>(diag::DIAGConfigurerPCI*)::{lambda(diag::DIAGConfigurerPCI *)#1},std::allocator<diag::DIAGConfigurerPCI>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<diag::DIAGConfigurerPCI *,std::shared_ptr<diag::DIAGConfigurerPCI> ctu::SharedSynchronizable<diag::DIAGConfigurer>::make_shared_ptr<diag::DIAGConfigurerPCI>(diag::DIAGConfigurerPCI*)::{lambda(diag::DIAGConfigurerPCI *)#1},std::allocator<diag::DIAGConfigurerPCI>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<diag::DIAGConfigurerPCI *,std::shared_ptr<diag::DIAGConfigurerPCI> ctu::SharedSynchronizable<diag::DIAGConfigurer>::make_shared_ptr<diag::DIAGConfigurerPCI>(diag::DIAGConfigurerPCI*)::{lambda(diag::DIAGConfigurerPCI *)#1},std::allocator<diag::DIAGConfigurerPCI>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE15make_shared_ptrINS1_17DIAGConfigurerPCIEEENS"
                     "t3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE15make_shared_ptrINS1_17DIAGConfigu"
                                "rerPCIEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE15make_shared_ptrINS1_17DIAGConfigurerPCIEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE15make_shared_ptrINS1_17DIAGConfigurerPCIEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<diag::DIAGConfigurerPCI> ctu::SharedSynchronizable<diag::DIAGConfigurer>::make_shared_ptr<diag::DIAGConfigurerPCI>(diag::DIAGConfigurerPCI*)::{lambda(diag::DIAGConfigurerPCI*)#1}::operator() const(diag::DIAGConfigurerPCI*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t ___ZN4diag7Service8Internal5startEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke(uint64_t a1)
{
  uint64_t v237 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Start", (uint8_t *)&buf, 2u);
  }
  v206[0] = 0xAAAAAAAAAAAAAAAALL;
  v206[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = (config::hw *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v206, *(const __CFDictionary **)(v2 + 208));
  memset(&v205, 170, sizeof(v205));
  int v5 = config::hw::watch(v4);
  if (v5) {
    uint64_t v6 = "Lite";
  }
  else {
    uint64_t v6 = "Default";
  }
  if (v5) {
    size_t v7 = 4;
  }
  else {
    size_t v7 = 7;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = v7;
  memcpy(&buf, v6, v7);
  *(unsigned char *)((unint64_t)&buf | v7) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v230, "File");
  ctu::cf::map_adapter::getString();
  uint64_t v8 = (capabilities::radio *)MEMORY[0x1A62748E0](&v230);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  memset(&__p[1], 170, sizeof(std::string));
  uint64_t v9 = (config::hw *)capabilities::radio::ice(v8);
  if (v9)
  {
    if (config::hw::watch(v9)) {
      uint64_t v10 = "Lite";
    }
    else {
      uint64_t v10 = "Default";
    }
  }
  else
  {
    uint64_t v10 = "None";
  }
  size_t v11 = strlen(v10);
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_std::string buf = (std::string *)operator new(v14 + 1);
    buf.__r_.__value_.__l.__size_ = v12;
    buf.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_23;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = v11;
  p_std::string buf = &buf;
  if (v11) {
LABEL_23:
  }
    memcpy(p_buf, v10, v12);
  p_buf->__r_.__value_.__s.__data_[v12] = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v230, "File_Secondary");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A62748E0](&v230);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  memset(__p, 170, 24);
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&buf, "None");
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v230, diag::config::kExtraDMCFileKey[0]);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A62748E0](&v230);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  memset(&v203, 170, sizeof(v203));
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&buf, "Sleep");
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v230, "File_Sleep");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A62748E0](&v230);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&buf, diag::config::kEnabledDuringSleepKey[0]);
  int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v206, (const __CFString *)buf.__r_.__value_.__l.__data_);
  uint64_t v17 = (std::string *)MEMORY[0x1A62748E0](&buf);
  if (!Int) {
    uint64_t v17 = std::string::__assign_external(&v203, diag::config::kNoneDMCFile);
  }
  unint64_t v18 = (capabilities::trace *)capabilities::diag::supportsQDSS((capabilities::diag *)v17);
  if (v18)
  {
    capabilities::trace::supportsHighTPutByDefault(v18);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&buf, "High_Tput");
    char Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v206, (const __CFString *)buf.__r_.__value_.__l.__data_);
    unint64_t v18 = (capabilities::trace *)MEMORY[0x1A62748E0](&buf);
  }
  else
  {
    char Bool = 0;
  }
  *(unsigned char *)(v2 + 446) = Bool;
  uint64_t v20 = (capabilities::trace *)capabilities::diag::supportsADPL(v18);
  if (v20)
  {
    capabilities::trace::supportsDataLoggingByDefault(v20);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&buf, "Data_Logging");
    int v21 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v206, (const __CFString *)buf.__r_.__value_.__l.__data_);
    MEMORY[0x1A62748E0](&buf);
    *(unsigned char *)(v2 + 445) = v21;
    if (v21 && !*(void *)(v2 + 304))
    {
      uint64_t v22 = *(std::__shared_weak_count **)(v2 + 256);
      uint64_t v201 = *(void *)(v2 + 248);
      uint64_t v202 = v22;
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
      dispatch_object_t object = dispatch_queue_create("ADPL.reader.queue", v23);
      BasebandTransport::create((capabilities::radio *)&v201, &object, (uint64_t)&buf);
      long long v24 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
      char v25 = *(std::__shared_weak_count **)(v2 + 312);
      *(_OWORD *)(v2 + 304) = v24;
      if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      int64_t size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(buf.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
      if (object) {
        dispatch_release(object);
      }
      int v27 = v202;
      if (v202 && !atomic_fetch_add(&v202->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  else
  {
    *(unsigned char *)(v2 + 445) = 0;
  }
  if (*(unsigned char *)(v2 + 446) && !*(void *)(v2 + 320))
  {
    unint64_t v43 = *(std::__shared_weak_count **)(v2 + 256);
    uint64_t v198 = *(void *)(v2 + 248);
    size_t v199 = v43;
    if (v43) {
      atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v44 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
    dispatch_object_t v197 = dispatch_queue_create("QDSS.reader.queue", v44);
    BasebandTransport::create((capabilities::radio *)&v198, &v197, (uint64_t)&buf);
    long long v45 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
    long long v46 = *(std::__shared_weak_count **)(v2 + 328);
    *(_OWORD *)(v2 + 320) = v45;
    if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
    uint64_t v47 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(buf.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
    if (v197) {
      dispatch_release(v197);
    }
    uint64_t v48 = v199;
    if (v199 && !atomic_fetch_add(&v199->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&buf, diag::config::kHighWatermarkKey[0]);
  __int16 v28 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v206, (const __CFString *)buf.__r_.__value_.__l.__data_);
  uint64_t v29 = (ctu::cf::MakeCFString *)MEMORY[0x1A62748E0](&buf);
  *(_WORD *)(v2 + 452) = v28;
  ctu::cf::MakeCFString::MakeCFString(v29, diag::config::kLowWatermarkKey[0]);
  unsigned __int16 v30 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v206, (const __CFString *)buf.__r_.__value_.__l.__data_);
  uint64_t v31 = (ctu::cf::MakeCFString *)MEMORY[0x1A62748E0](&buf);
  *(_WORD *)(v2 + 454) = v30;
  unsigned int v32 = *(unsigned __int16 *)(v2 + 452);
  if (v32 >= 0x65)
  {
    unsigned int v32 = 95;
    *(_WORD *)(v2 + 452) = 95;
  }
  if (v32 < v30) {
    *(_WORD *)(v2 + 454) = 1;
  }
  ctu::cf::MakeCFString::MakeCFString(v31, diag::config::kUseThresholdKey[0]);
  int v33 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v206, (const __CFString *)buf.__r_.__value_.__l.__data_);
  MEMORY[0x1A62748E0](&buf);
  if (v33) {
    int v34 = 2;
  }
  else {
    int v34 = 4;
  }
  *(_DWORD *)(v2 + 448) = v34;
  *(unsigned char *)(v2 + 447) = *(unsigned char *)(a1 + 56);
  CFTypeRef v35 = *(void **)(a1 + 40);
  if (v35)
  {
    CFTypeRef v35 = _Block_copy(v35);
    uint64_t v36 = v35;
    uint64_t v37 = *(NSObject **)(a1 + 48);
    aBlocunint64_t k = v35;
    int v196 = v37;
    if (!v37) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  uint64_t v36 = 0;
  uint64_t v37 = *(NSObject **)(a1 + 48);
  aBlocunint64_t k = 0;
  int v196 = v37;
  if (v37) {
LABEL_63:
  }
    dispatch_retain(v37);
LABEL_64:
  if (*(_DWORD *)(v2 + 104))
  {
LABEL_68:
    int v38 = 1;
    goto LABEL_69;
  }
  if (!capabilities::diag::supportsQShrink4((capabilities::diag *)v35) || **(unsigned char **)(v2 + 272))
  {
LABEL_67:
    if (*(void *)(v2 + 216)) {
      goto LABEL_68;
    }
    unint64_t v58 = (atomic_ullong *)operator new(0x40uLL);
    unint64_t v59 = (std::__shared_weak_count *)v58;
    v58[2] = 0;
    v58[1] = 0;
    atomic_ullong *v58 = (atomic_ullong)&unk_1EFB0DB60;
    CFTypeRef v60 = v58 + 3;
    v58[7] = 0;
    v58[6] = 0;
    v58[4] = (atomic_ullong)v58;
    v58[5] = (atomic_ullong)(v58 + 6);
    atomic_fetch_add_explicit(v58 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(v58 + 2, 1uLL, memory_order_relaxed);
    v58[3] = (atomic_ullong)(v58 + 3);
    if (!atomic_fetch_add(v58 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(atomic_ullong *))(*v58 + 16))(v58);
      std::__shared_weak_count::__release_weak(v59);
    }
    uint64_t v61 = *(std::__shared_weak_count **)(v2 + 224);
    *(void *)(v2 + 216) = v60;
    *(void *)(v2 + 224) = v59;
    if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
    int v62 = capabilities::diag::preferredInterface((capabilities::diag *)v58);
    dispatch_object_t v227 = 0;
    int v226 = 0;
    if (v62 == 8)
    {
      v230.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
      v230.__r_.__value_.__l.__size_ = 0x40000000;
      v230.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN4diag7Service8Internal10setup_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke;
      long long v231 = &__block_descriptor_tmp_41;
      uint64_t v232 = v2;
      long long v63 = _Block_copy(&v230);
      unint64_t v64 = *(NSObject **)(v2 + 88);
      if (v64) {
        dispatch_retain(*(dispatch_object_t *)(v2 + 88));
      }
      int v226 = v63;
      dispatch_object_t v227 = v64;
    }
    v225[0] = 0xAAAAAAAAAAAAAAAALL;
    v225[1] = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v65 = (config::hw *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v225, *(const __CFDictionary **)(v2 + 208));
    config::hw::watch(v65);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v236, "History");
    int v66 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v225, *(const __CFString **)v236);
    int v67 = (capabilities::trace *)MEMORY[0x1A62748E0](v236);
    capabilities::trace::defaultMemoryFileMaxCount(v67);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v236, "MaxMemoryFileCount");
    int v68 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v225, *(const __CFString **)v236);
    __n128 v69 = (capabilities::trace *)MEMORY[0x1A62748E0](v236);
    capabilities::trace::defaultFileSizeBytes(v69);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v236, "FileSize");
    int v70 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v225, *(const __CFString **)v236);
    MEMORY[0x1A62748E0](v236);
    BOOL v71 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)size_t v236 = 67109632;
      *(_DWORD *)&v236[4] = v66;
      *(_WORD *)&v236[8] = 1024;
      *(_DWORD *)&v236[10] = v68;
      *(_WORD *)&v236[14] = 1024;
      *(_DWORD *)&v236[16] = v70;
      _os_log_impl(&dword_1A609F000, v71, OS_LOG_TYPE_DEFAULT, "#I Initialize DIAG reader configuration: history: %d, maxFileCount: %u, fileSize: %u", v236, 0x14u);
    }
    if (*(unsigned char *)(v2 + 445))
    {
      __n128 v72 = *(std::__shared_weak_count **)(v2 + 312);
      uint64_t v223 = *(void *)(v2 + 304);
      size_t v224 = v72;
      if (v72) {
        atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v73 = *(std::__shared_weak_count **)(v2 + 280);
      uint64_t v221 = *(void *)(v2 + 272);
      int v222 = v73;
      if (v73) {
        atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      GetABMLogServer(&v219);
      diag::DIAGReader::Parameters::create(11, &v223, &v221, &v219, v66, 0, v68, v70, v236);
      long long v74 = *(_OWORD *)v236;
      *(void *)size_t v236 = 0;
      *(void *)&v236[8] = 0;
      uint64_t v75 = *(std::__shared_weak_count **)(v2 + 360);
      *(_OWORD *)(v2 + 352) = v74;
      if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
      size_t v76 = *(std::__shared_weak_count **)&v236[8];
      if (*(void *)&v236[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v236[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
      uint64_t v77 = v220;
      if (v220 && !atomic_fetch_add(&v220->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
      size_t v78 = v222;
      if (v222 && !atomic_fetch_add(&v222->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
      uint64_t v79 = v224;
      if (v224 && !atomic_fetch_add(&v224->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
      uint64_t v80 = *(void *)(v2 + 216);
      uint64_t v81 = *(void *)(v2 + 360);
      *(void *)size_t v236 = *(void *)(v2 + 352);
      *(void *)&v236[8] = v81;
      if (v81) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v81 + 8), 1uLL, memory_order_relaxed);
      }
      int v82 = v226;
      if (v226) {
        int v82 = _Block_copy(v226);
      }
      unint64_t v217 = v82;
      dispatch_object_t v218 = v227;
      if (v227) {
        dispatch_retain(v227);
      }
      diag::DIAGReaderManager::addReader(v80, 1u, (uint64_t *)v236, (uint64_t)&v217);
      if (v218) {
        dispatch_release(v218);
      }
      if (v217) {
        _Block_release(v217);
      }
      uint64_t v83 = *(std::__shared_weak_count **)&v236[8];
      if (*(void *)&v236[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v236[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
      uint64_t v84 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v216[0]) = 0;
        _os_log_impl(&dword_1A609F000, v84, OS_LOG_TYPE_DEFAULT, "#I ADPL Reader has been added", (uint8_t *)v216, 2u);
      }
    }
    if (*(unsigned char *)(v2 + 446))
    {
      uint64_t v85 = *(std::__shared_weak_count **)(v2 + 328);
      uint64_t v214 = *(void *)(v2 + 320);
      uint64_t v215 = v85;
      if (v85) {
        atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      size_t v86 = *(std::__shared_weak_count **)(v2 + 280);
      uint64_t v212 = *(void *)(v2 + 272);
      size_t v213 = v86;
      if (v86) {
        atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      GetABMLogServer(&v210);
      diag::DIAGReader::Parameters::create(15, &v214, &v212, &v210, v66, 0, v68, v70, v216);
      long long v87 = *(_OWORD *)v216;
      memset(v216, 0, 16);
      int v88 = *(std::__shared_weak_count **)(v2 + 376);
      *(_OWORD *)(v2 + 368) = v87;
      if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
      int v89 = (std::__shared_weak_count *)v216[1];
      if (v216[1] && !atomic_fetch_add((atomic_ullong *volatile)(v216[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
      CFTypeRef v90 = v211;
      if (v211 && !atomic_fetch_add(&v211->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
      uint64_t v91 = v213;
      if (v213 && !atomic_fetch_add(&v213->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
      size_t v92 = v215;
      if (v215 && !atomic_fetch_add(&v215->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
      uint64_t v93 = *(void *)(v2 + 216);
      uint64_t v94 = *(void *)(v2 + 376);
      v216[0] = *(void *)(v2 + 368);
      v216[1] = v94;
      if (v94) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v94 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v95 = v226;
      if (v226) {
        uint64_t v95 = _Block_copy(v226);
      }
      v208 = v95;
      dispatch_object_t v209 = v227;
      if (v227) {
        dispatch_retain(v227);
      }
      diag::DIAGReaderManager::addReader(v93, 2u, v216, (uint64_t)&v208);
      if (v209) {
        dispatch_release(v209);
      }
      if (v208) {
        _Block_release(v208);
      }
      long long v96 = (std::__shared_weak_count *)v216[1];
      if (v216[1] && !atomic_fetch_add((atomic_ullong *volatile)(v216[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
      int v97 = *(NSObject **)(v2 + 40);
      if (!os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_301;
      }
      *(_WORD *)int v207 = 0;
      CFTypeRef v98 = "#I QDSS Reader has been added";
    }
    else
    {
      uint64_t v107 = *(std::__shared_weak_count **)(v2 + 296);
      uint64_t v214 = *(void *)(v2 + 288);
      uint64_t v215 = v107;
      if (v107) {
        atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      dispatch_object_t v108 = *(std::__shared_weak_count **)(v2 + 280);
      uint64_t v212 = *(void *)(v2 + 272);
      size_t v213 = v108;
      if (v108) {
        atomic_fetch_add_explicit(&v108->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      GetABMLogServer(&v210);
      diag::DIAGReader::Parameters::create(2, &v214, &v212, &v210, v66, 0, v68, v70, v216);
      long long v109 = *(_OWORD *)v216;
      memset(v216, 0, 16);
      size_t v110 = *(std::__shared_weak_count **)(v2 + 344);
      *(_OWORD *)(v2 + 336) = v109;
      if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
      long long v111 = (std::__shared_weak_count *)v216[1];
      if (v216[1] && !atomic_fetch_add((atomic_ullong *volatile)(v216[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
      uint64_t v112 = v211;
      if (v211 && !atomic_fetch_add(&v211->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
      __n128 v113 = v213;
      if (v213 && !atomic_fetch_add(&v213->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
      uint64_t v114 = v215;
      if (v215 && !atomic_fetch_add(&v215->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
      uint64_t v115 = *(void *)(v2 + 216);
      uint64_t v116 = *(void *)(v2 + 344);
      v216[0] = *(void *)(v2 + 336);
      v216[1] = v116;
      if (v116) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v116 + 8), 1uLL, memory_order_relaxed);
      }
      size_t v117 = v226;
      if (v226) {
        size_t v117 = _Block_copy(v226);
      }
      v208 = v117;
      dispatch_object_t v209 = v227;
      if (v227) {
        dispatch_retain(v227);
      }
      diag::DIAGReaderManager::addReader(v115, 0, v216, (uint64_t)&v208);
      if (v209) {
        dispatch_release(v209);
      }
      if (v208) {
        _Block_release(v208);
      }
      int v118 = (std::__shared_weak_count *)v216[1];
      if (v216[1] && !atomic_fetch_add((atomic_ullong *volatile)(v216[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
      int v97 = *(NSObject **)(v2 + 40);
      if (!os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_301;
      }
      *(_WORD *)int v207 = 0;
      CFTypeRef v98 = "#I DIAG Reader has been added";
    }
    _os_log_impl(&dword_1A609F000, v97, OS_LOG_TYPE_DEFAULT, v98, v207, 2u);
LABEL_301:
    *(unsigned char *)(v2 + 444) = 1;
    MEMORY[0x1A6274930](v225);
    if (v227) {
      dispatch_release(v227);
    }
    if (v226) {
      _Block_release(v226);
    }
    int v38 = 1;
    uint64_t v37 = v196;
    goto LABEL_69;
  }
  uint64_t v99 = *(NSObject **)(v2 + 40);
  BOOL v100 = os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT);
  if (v100)
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1A609F000, v99, OS_LOG_TYPE_DEFAULT, "#I Fetching GUID", (uint8_t *)&buf, 2u);
  }
  uint64_t v101 = *(void *)(v2 + 288);
  LODWORD(buf.__r_.__value_.__l.__data_) = 2;
  buf.__r_.__value_.__s.__data_[4] = 0;
  buf.__r_.__value_.__l.__size_ = 10;
  shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)v100);
  if (shouldUseMinBasebandTransportIOReadSize) {
    int v103 = 0x4000;
  }
  else {
    int v103 = 0x8000;
  }
  LODWORD(buf.__r_.__value_.__r.__words[2]) = v103;
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize)) {
    int v104 = 4;
  }
  else {
    int v104 = 16;
  }
  HIDWORD(buf.__r_.__value_.__r.__words[2]) = v104;
  int v234 = 0;
  char v235 = 0;
  size_t v229 = 0;
  int v105 = (*(uint64_t (**)(uint64_t, std::string *, void **))(*(void *)v101 + 48))(v101, &buf, &v229);
  if (v229) {
    _Block_release(v229);
  }
  if (!v105)
  {
    uint64_t v119 = (char *)operator new(0x30uLL);
    strcpy(v119, "Failed to open DIAG transport to get GUID info");
    int v120 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v230.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v230.__r_.__value_.__r.__words + 4) = (std::string::size_type)v119;
      _os_log_error_impl(&dword_1A609F000, v120, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v230, 0xCu);
      if (!v36) {
        goto LABEL_309;
      }
    }
    else if (!v36)
    {
LABEL_309:
      *(void *)&v236[32] = v36;
      *(void *)&v236[40] = v37;
      if (v37) {
        dispatch_retain(v37);
      }
      std::string::__init_copy_ctor_external(&v230, v119, 0x2EuLL);
      diag::Service::Internal::changeStateAndNotify_sync(v2, 4u, (uint64_t)&v236[32], (uint64_t)&v230);
      if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v230.__r_.__value_.__l.__data_);
      }
      if (v37) {
        dispatch_release(v37);
      }
      if (v36) {
        _Block_release(v36);
      }
      operator delete(v119);
      int v38 = 0;
      goto LABEL_69;
    }
    uint64_t v36 = _Block_copy(v36);
    goto LABEL_309;
  }
  memset(&v230, 0, sizeof(v230));
  BasebandTransport::operator*(*(void *)(v2 + 288));
  int v38 = ETLDIAGGetGUID();
  if (v38)
  {
    uint8x8_t v106 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)&v236[32] = 0;
      _os_log_impl(&dword_1A609F000, v106, OS_LOG_TYPE_DEFAULT, "#I Fetching GUID success", &v236[32], 2u);
    }
    goto LABEL_401;
  }
  long long v121 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v236[32], "Failed to get GUID info: ");
  if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v122 = &v230;
  }
  else {
    size_t v122 = (std::string *)v230.__r_.__value_.__r.__words[0];
  }
  if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v123 = HIBYTE(v230.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v123 = v230.__r_.__value_.__l.__size_;
  }
  std::string v124 = std::string::append(v121, (const std::string::value_type *)v122, v123);
  std::string::size_type v125 = v124->__r_.__value_.__r.__words[0];
  *(void *)size_t v236 = v124->__r_.__value_.__l.__size_;
  *(void *)&v236[7] = *(std::string::size_type *)((char *)&v124->__r_.__value_.__r.__words[1] + 7);
  char v126 = HIBYTE(v124->__r_.__value_.__r.__words[2]);
  v124->__r_.__value_.__l.__size_ = 0;
  v124->__r_.__value_.__r.__words[2] = 0;
  v124->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v230.__r_.__value_.__l.__data_);
  }
  v230.__r_.__value_.__r.__words[0] = v125;
  v230.__r_.__value_.__l.__size_ = *(void *)v236;
  *(std::string::size_type *)((char *)&v230.__r_.__value_.__r.__words[1] + 7) = *(void *)&v236[7];
  *((unsigned char *)&v230.__r_.__value_.__s + 23) = v126;
  if ((v236[55] & 0x80000000) == 0)
  {
    size_t v127 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v127, OS_LOG_TYPE_ERROR)) {
      goto LABEL_333;
    }
LABEL_394:
    size_t v151 = &v230;
    if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      size_t v151 = (std::string *)v230.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)&v236[32] = 136315138;
    *(void *)&v236[36] = v151;
    _os_log_error_impl(&dword_1A609F000, v127, OS_LOG_TYPE_ERROR, "%s", &v236[32], 0xCu);
    dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::callback(v228, (uint64_t)&aBlock);
    if ((SHIBYTE(v230.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_334;
    }
LABEL_397:
    std::string::__init_copy_ctor_external((std::string *)&v236[32], v230.__r_.__value_.__l.__data_, v230.__r_.__value_.__l.__size_);
    goto LABEL_398;
  }
  operator delete(*(void **)&v236[32]);
  size_t v127 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR)) {
    goto LABEL_394;
  }
LABEL_333:
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::callback(v228, (uint64_t)&aBlock);
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_397;
  }
LABEL_334:
  *(std::string *)&v236[32] = v230;
LABEL_398:
  diag::Service::Internal::changeStateAndNotify_sync(v2, 4u, (uint64_t)v228, (uint64_t)&v236[32]);
  if ((v236[55] & 0x80000000) != 0) {
    operator delete(*(void **)&v236[32]);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)v228);
LABEL_401:
  BasebandTransport::close(*(BasebandTransport **)(v2 + 288));
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v230.__r_.__value_.__l.__data_);
  }
  if (v38) {
    goto LABEL_67;
  }
LABEL_69:
  if (v37) {
    dispatch_release(v37);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v38)
  {
    uint64_t v39 = *(void *)(v2 + 216);
    if (v39 && (char v194 = 0, LOBYTE(v193) = 0, diag::DIAGReaderManager::pushInfo(v39, 4, (uint64_t)&v193), v194 < 0))
    {
      operator delete(v193);
      uint64_t v40 = *(const void **)(a1 + 40);
      if (v40)
      {
LABEL_77:
        size_t v41 = _Block_copy(v40);
        uint64_t v42 = *(NSObject **)(a1 + 48);
        v191 = v41;
        dispatch_object_t v192 = v42;
        if (!v42) {
          goto LABEL_79;
        }
        goto LABEL_78;
      }
    }
    else
    {
      uint64_t v40 = *(const void **)(a1 + 40);
      if (v40) {
        goto LABEL_77;
      }
    }
    size_t v41 = 0;
    uint64_t v42 = *(NSObject **)(a1 + 48);
    v191 = 0;
    dispatch_object_t v192 = v42;
    if (!v42)
    {
LABEL_79:
      if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v190, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
      }
      else {
        std::string v190 = v205;
      }
      if (SHIBYTE(__p[1].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v189, __p[1].__r_.__value_.__l.__data_, __p[1].__r_.__value_.__l.__size_);
      }
      else {
        std::string v189 = __p[1];
      }
      if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v188, v203.__r_.__value_.__l.__data_, v203.__r_.__value_.__l.__size_);
      }
      else {
        std::string v188 = v203;
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v187, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
      }
      else {
        std::string v187 = __p[0];
      }
      unsigned int v49 = *(_DWORD *)(v2 + 460);
      if (v49)
      {
        if (v41)
        {
          uint64_t v50 = _Block_copy(v41);
          v230.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
          v230.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
          if (!v42) {
            goto LABEL_110;
          }
        }
        else
        {
          uint64_t v50 = 0;
          v230.__r_.__value_.__r.__words[0] = 0;
          v230.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
          if (!v42)
          {
LABEL_110:
            *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
            buf.__r_.__value_.__s.__data_[0] = 0;
            diag::Service::Internal::changeStateAndNotify_sync(v2, v49, (uint64_t)&v230, (uint64_t)&buf);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            if (v42) {
              dispatch_release(v42);
            }
            if (v50) {
LABEL_115:
            }
              _Block_release(v50);
LABEL_116:
            if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v187.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v188.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_118:
                if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_119;
                }
                goto LABEL_152;
              }
            }
            else if ((SHIBYTE(v188.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_118;
            }
            operator delete(v188.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_119:
              if ((SHIBYTE(v190.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_120;
              }
              goto LABEL_153;
            }
LABEL_152:
            operator delete(v189.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v190.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_120:
              if (!v42) {
                goto LABEL_122;
              }
              goto LABEL_121;
            }
LABEL_153:
            operator delete(v190.__r_.__value_.__l.__data_);
            if (!v42)
            {
LABEL_122:
              if (v41) {
                _Block_release(v41);
              }
              goto LABEL_124;
            }
LABEL_121:
            dispatch_release(v42);
            goto LABEL_122;
          }
        }
        dispatch_retain(v42);
        goto LABEL_110;
      }
      *(_DWORD *)(v2 + 460) = 3;
      if ((*(_DWORD *)(v2 + 104) | 4) == 4)
      {
        uint64_t v52 = (std::string *)(v2 + 160);
        if (*(char *)(v2 + 183) >= 0) {
          uint64_t v53 = *(unsigned __int8 *)(v2 + 183);
        }
        else {
          uint64_t v53 = *(void *)(v2 + 168);
        }
        if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v54 = HIBYTE(v188.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v54 = v188.__r_.__value_.__l.__size_;
        }
        if (v53 == v54)
        {
          if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v55 = &v188;
          }
          else {
            long long v55 = (std::string *)v188.__r_.__value_.__r.__words[0];
          }
          if ((*(unsigned char *)(v2 + 183) & 0x80) != 0)
          {
            if (memcmp(v52->__r_.__value_.__l.__data_, v55, *(void *)(v2 + 168)))
            {
              if (v52 == &v188)
              {
LABEL_340:
                size_t v128 = *(const void **)(v2 + 416);
                if (v128)
                {
                  CFRelease(v128);
                  int v129 = *(NSObject **)(v2 + 40);
                  if (os_log_type_enabled(v129, OS_LOG_TYPE_DEBUG))
                  {
                    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                    _os_log_debug_impl(&dword_1A609F000, v129, OS_LOG_TYPE_DEBUG, "#D Released sleep DMC", (uint8_t *)&buf, 2u);
                  }
                }
                uint64_t DMC = diag::loadDMC(v2 + 160);
                *(void *)(v2 + 416) = DMC;
                if (DMC)
                {
                  uint64_t v131 = *(NSObject **)(v2 + 40);
                  if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
                  {
                    if (*(char *)(v2 + 183) < 0) {
                      uint64_t v52 = (std::string *)v52->__r_.__value_.__r.__words[0];
                    }
                    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v52;
                    _os_log_debug_impl(&dword_1A609F000, v131, OS_LOG_TYPE_DEBUG, "#D Loaded %s DMC File", (uint8_t *)&buf, 0xCu);
                  }
                }
                goto LABEL_345;
              }
LABEL_338:
              std::string::__assign_no_alias<false>((void **)(v2 + 160), v55, v54);
              goto LABEL_340;
            }
          }
          else if (*(unsigned char *)(v2 + 183))
          {
            uint64_t v56 = (unsigned __int8 *)(v2 + 160);
            uint64_t v57 = *(unsigned __int8 *)(v2 + 183);
            while (*v56 == v55->__r_.__value_.__s.__data_[0])
            {
              ++v56;
              long long v55 = (std::string *)((char *)v55 + 1);
              if (!--v57) {
                goto LABEL_345;
              }
            }
            goto LABEL_241;
          }
LABEL_345:
          unint64_t v132 = (std::string *)(v2 + 112);
          char v133 = *(unsigned char *)(v2 + 135);
          if (v133 >= 0) {
            uint64_t v134 = *(unsigned __int8 *)(v2 + 135);
          }
          else {
            uint64_t v134 = *(void *)(v2 + 120);
          }
          int v135 = SHIBYTE(v190.__r_.__value_.__r.__words[2]);
          size_t v136 = v190.__r_.__value_.__l.__size_;
          if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v137 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v137 = v190.__r_.__value_.__l.__size_;
          }
          if (v134 == v137)
          {
            int v138 = (v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? &v190
                 : (std::string *)v190.__r_.__value_.__r.__words[0];
            if ((*(unsigned char *)(v2 + 135) & 0x80) != 0)
            {
              if (memcmp(v132->__r_.__value_.__l.__data_, v138, *(void *)(v2 + 120)))
              {
                if (v132 == &v190) {
                  goto LABEL_420;
                }
                goto LABEL_418;
              }
            }
            else if (*(unsigned char *)(v2 + 135))
            {
              long long v139 = (unsigned __int8 *)(v2 + 112);
              uint64_t v140 = *(unsigned __int8 *)(v2 + 135);
              while (*v139 == v138->__r_.__value_.__s.__data_[0])
              {
                ++v139;
                int v138 = (std::string *)((char *)v138 + 1);
                if (!--v140) {
                  goto LABEL_364;
                }
              }
              goto LABEL_411;
            }
LABEL_364:
            uint64_t v141 = *(unsigned __int8 *)(v2 + 159);
            if ((v141 & 0x80u) == 0) {
              uint64_t v142 = *(unsigned __int8 *)(v2 + 159);
            }
            else {
              uint64_t v142 = *(void *)(v2 + 144);
            }
            std::string::size_type v143 = HIBYTE(v189.__r_.__value_.__r.__words[2]);
            if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v143 = v189.__r_.__value_.__l.__size_;
            }
            if (v142 == v143)
            {
              unint64_t v144 = (const void **)(v2 + 136);
              if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t v145 = &v189;
              }
              else {
                size_t v145 = (std::string *)v189.__r_.__value_.__r.__words[0];
              }
              if ((v141 & 0x80) == 0)
              {
                if (*(unsigned char *)(v2 + 159))
                {
                  while (*(unsigned __int8 *)v144 == v145->__r_.__value_.__s.__data_[0])
                  {
                    unint64_t v144 = (const void **)((char *)v144 + 1);
                    size_t v145 = (std::string *)((char *)v145 + 1);
                    if (!--v141) {
                      goto LABEL_379;
                    }
                  }
                  goto LABEL_411;
                }
LABEL_379:
                uint64_t v146 = *(unsigned __int8 *)(v2 + 207);
                if ((v146 & 0x80u) == 0) {
                  uint64_t v147 = *(unsigned __int8 *)(v2 + 207);
                }
                else {
                  uint64_t v147 = *(void *)(v2 + 192);
                }
                std::string::size_type v148 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
                if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v148 = v187.__r_.__value_.__l.__size_;
                }
                if (v147 == v148)
                {
                  uint64_t v149 = (const void **)(v2 + 184);
                  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    size_t v150 = &v187;
                  }
                  else {
                    size_t v150 = (std::string *)v187.__r_.__value_.__r.__words[0];
                  }
                  if ((v146 & 0x80) != 0)
                  {
                    if (!memcmp(*v149, v150, *(void *)(v2 + 192))) {
                      goto LABEL_448;
                    }
                  }
                  else
                  {
                    if (!*(unsigned char *)(v2 + 207)) {
                      goto LABEL_448;
                    }
                    while (*(unsigned __int8 *)v149 == v150->__r_.__value_.__s.__data_[0])
                    {
                      uint64_t v149 = (const void **)((char *)v149 + 1);
                      size_t v150 = (std::string *)((char *)v150 + 1);
                      if (!--v146) {
                        goto LABEL_448;
                      }
                    }
                  }
                }
                goto LABEL_411;
              }
              if (!memcmp(*v144, v145, *(void *)(v2 + 144))) {
                goto LABEL_379;
              }
            }
          }
LABEL_411:
          if (v132 == &v190) {
            goto LABEL_420;
          }
          if ((v133 & 0x80) == 0)
          {
            if (v135 < 0)
            {
              std::string::__assign_no_alias<true>((void *)(v2 + 112), v190.__r_.__value_.__l.__data_, v136);
            }
            else
            {
              *(_OWORD *)&v132->__r_.__value_.__l.__data_ = *(_OWORD *)&v190.__r_.__value_.__l.__data_;
              *(void *)(v2 + 128) = *((void *)&v190.__r_.__value_.__l + 2);
            }
LABEL_420:
            int v152 = (_OWORD *)(v2 + 136);
            if ((std::string *)(v2 + 136) != &v189)
            {
              if (*(char *)(v2 + 159) < 0)
              {
                if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int64_t v153 = &v189;
                }
                else {
                  int64_t v153 = (std::string *)v189.__r_.__value_.__r.__words[0];
                }
                if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  size_t v154 = HIBYTE(v189.__r_.__value_.__r.__words[2]);
                }
                else {
                  size_t v154 = v189.__r_.__value_.__l.__size_;
                }
                std::string::__assign_no_alias<false>((void **)(v2 + 136), v153, v154);
              }
              else if ((*((unsigned char *)&v189.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>((void *)(v2 + 136), v189.__r_.__value_.__l.__data_, v189.__r_.__value_.__l.__size_);
              }
              else
              {
                *int v152 = *(_OWORD *)&v189.__r_.__value_.__l.__data_;
                *(void *)(v2 + 152) = *((void *)&v189.__r_.__value_.__l + 2);
              }
            }
            uint64_t v155 = (_OWORD *)(v2 + 184);
            if ((std::string *)(v2 + 184) != &v187)
            {
              if (*(char *)(v2 + 207) < 0)
              {
                if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int64_t v156 = &v187;
                }
                else {
                  int64_t v156 = (std::string *)v187.__r_.__value_.__r.__words[0];
                }
                if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  size_t v157 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
                }
                else {
                  size_t v157 = v187.__r_.__value_.__l.__size_;
                }
                std::string::__assign_no_alias<false>((void **)(v2 + 184), v156, v157);
              }
              else if ((*((unsigned char *)&v187.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>((void *)(v2 + 184), v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
              }
              else
              {
                *uint64_t v155 = *(_OWORD *)&v187.__r_.__value_.__l.__data_;
                *(void *)(v2 + 200) = *((void *)&v187.__r_.__value_.__l + 2);
              }
            }
            unint64_t v158 = *(const void **)(v2 + 408);
            if (v158)
            {
              CFRelease(v158);
              uint64_t v159 = *(NSObject **)(v2 + 40);
              if (os_log_type_enabled(v159, OS_LOG_TYPE_DEBUG))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_log_debug_impl(&dword_1A609F000, v159, OS_LOG_TYPE_DEBUG, "#D Released merged DMC", (uint8_t *)&buf, 2u);
              }
            }
            *(void *)(v2 + 408) = diag::mergeDMC(v2 + 112, v2 + 136, v2 + 184, *(unsigned __int8 *)(v2 + 445));
            uint64_t v160 = *(NSObject **)(v2 + 40);
            if (!os_log_type_enabled(v160, OS_LOG_TYPE_DEBUG))
            {
LABEL_448:
              if (*(void *)(v2 + 408)) {
                goto LABEL_449;
              }
              goto LABEL_463;
            }
            std::string::size_type v161 = v2 + 112;
            if (*(char *)(v2 + 135) < 0)
            {
              std::string::size_type v161 = v132->__r_.__value_.__r.__words[0];
              if ((*(char *)(v2 + 159) & 0x80000000) == 0) {
                goto LABEL_460;
              }
            }
            else if ((*(char *)(v2 + 159) & 0x80000000) == 0)
            {
LABEL_460:
              if ((*(char *)(v2 + 207) & 0x80000000) == 0) {
                goto LABEL_462;
              }
              goto LABEL_461;
            }
            int v152 = *(_OWORD **)v152;
            if ((*(char *)(v2 + 207) & 0x80000000) == 0)
            {
LABEL_462:
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v161;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v152;
              HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
              int v234 = v155;
              _os_log_debug_impl(&dword_1A609F000, v160, OS_LOG_TYPE_DEBUG, "#D Merged %s, %s, and %s DMC files", (uint8_t *)&buf, 0x20u);
              if (*(void *)(v2 + 408))
              {
LABEL_449:
                if (v41)
                {
                  uint64_t v50 = _Block_copy(v41);
                  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
                  buf.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
                  if (!v42) {
                    goto LABEL_452;
                  }
                }
                else
                {
                  uint64_t v50 = 0;
                  buf.__r_.__value_.__r.__words[0] = 0;
                  buf.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
                  if (!v42)
                  {
LABEL_452:
                    diag::Service::Internal::start_sync((void *)v2, (uint64_t)&buf);
                    if (v42) {
                      dispatch_release(v42);
                    }
                    if (v50) {
                      goto LABEL_115;
                    }
                    goto LABEL_116;
                  }
                }
                dispatch_retain(v42);
                goto LABEL_452;
              }
LABEL_463:
              *(_DWORD *)((char *)v228 + 3) = -1431655766;
              LODWORD(v228[0]) = -1431655766;
              int v162 = *(char *)(v2 + 135);
              if (v162 >= 0) {
                size_t v163 = *(unsigned __int8 *)(v2 + 135);
              }
              else {
                size_t v163 = *(void *)(v2 + 120);
              }
              unint64_t v164 = v163 + 45;
              memset(v236, 170, 24);
              if (v163 + 45 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              if (v164 > 0x16)
              {
                uint64_t v166 = (v164 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v164 | 7) != 0x17) {
                  uint64_t v166 = v164 | 7;
                }
                uint64_t v167 = v166 + 1;
                int v168 = (char *)operator new(v166 + 1);
                *(void *)&v236[8] = v163 + 45;
                *(void *)&v236[16] = v167 | 0x8000000000000000;
                *(void *)size_t v236 = v168;
                v165 = v168 + 45;
                qmemcpy(v168, "DIAG can not start without a valid DMC file: ", 45);
                if (!v163)
                {
LABEL_476:
                  v165[v163] = 0;
                  unint64_t v170 = std::string::append((std::string *)v236, ", ", 2uLL);
                  long long v171 = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
                  *(void *)&v236[48] = *((void *)&v170->__r_.__value_.__l + 2);
                  *(_OWORD *)&v236[32] = v171;
                  v170->__r_.__value_.__l.__size_ = 0;
                  v170->__r_.__value_.__r.__words[2] = 0;
                  v170->__r_.__value_.__r.__words[0] = 0;
                  int v172 = *(char *)(v2 + 159);
                  if (v172 >= 0) {
                    size_t v173 = (const std::string::value_type *)(v2 + 136);
                  }
                  else {
                    size_t v173 = *(const std::string::value_type **)(v2 + 136);
                  }
                  if (v172 >= 0) {
                    std::string::size_type v174 = *(unsigned __int8 *)(v2 + 159);
                  }
                  else {
                    std::string::size_type v174 = *(void *)(v2 + 144);
                  }
                  v175 = std::string::append((std::string *)&v236[32], v173, v174);
                  long long v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
                  v230.__r_.__value_.__r.__words[2] = v175->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v230.__r_.__value_.__l.__data_ = v176;
                  v175->__r_.__value_.__l.__size_ = 0;
                  v175->__r_.__value_.__r.__words[2] = 0;
                  v175->__r_.__value_.__r.__words[0] = 0;
                  size_t v177 = std::string::append(&v230, ",and ", 5uLL);
                  long long v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
                  buf.__r_.__value_.__r.__words[2] = v177->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v178;
                  v177->__r_.__value_.__l.__size_ = 0;
                  v177->__r_.__value_.__r.__words[2] = 0;
                  v177->__r_.__value_.__r.__words[0] = 0;
                  int v179 = *(char *)(v2 + 207);
                  if (v179 >= 0) {
                    __n128 v180 = (const std::string::value_type *)(v2 + 184);
                  }
                  else {
                    __n128 v180 = *(const std::string::value_type **)(v2 + 184);
                  }
                  if (v179 >= 0) {
                    std::string::size_type v181 = *(unsigned __int8 *)(v2 + 207);
                  }
                  else {
                    std::string::size_type v181 = *(void *)(v2 + 192);
                  }
                  unint64_t v182 = std::string::append(&buf, v180, v181);
                  v183 = (std::string::value_type *)v182->__r_.__value_.__r.__words[0];
                  std::string::size_type v184 = v182->__r_.__value_.__l.__size_;
                  LODWORD(v228[0]) = v182->__r_.__value_.__r.__words[2];
                  *(_DWORD *)((char *)v228 + 3) = *(_DWORD *)((char *)&v182->__r_.__value_.__r.__words[2] + 3);
                  int v185 = SHIBYTE(v182->__r_.__value_.__r.__words[2]);
                  v182->__r_.__value_.__l.__size_ = 0;
                  v182->__r_.__value_.__r.__words[2] = 0;
                  v182->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(buf.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v230.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_490:
                      if ((v236[55] & 0x80000000) == 0) {
                        goto LABEL_491;
                      }
                      goto LABEL_496;
                    }
                  }
                  else if ((SHIBYTE(v230.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
                    goto LABEL_490;
                  }
                  operator delete(v230.__r_.__value_.__l.__data_);
                  if ((v236[55] & 0x80000000) == 0)
                  {
LABEL_491:
                    if ((v236[23] & 0x80000000) == 0) {
                      goto LABEL_492;
                    }
                    goto LABEL_497;
                  }
LABEL_496:
                  operator delete(*(void **)&v236[32]);
                  if ((v236[23] & 0x80000000) == 0)
                  {
LABEL_492:
                    size_t v41 = v191;
                    if (v191)
                    {
LABEL_493:
                      unint64_t v186 = _Block_copy(v41);
LABEL_499:
                      uint64_t v42 = v192;
                      v230.__r_.__value_.__r.__words[0] = (std::string::size_type)v186;
                      v230.__r_.__value_.__l.__size_ = (std::string::size_type)v192;
                      if (v192) {
                        dispatch_retain(v192);
                      }
                      if (v185 < 0)
                      {
                        std::string::__init_copy_ctor_external(&buf, v183, v184);
                      }
                      else
                      {
                        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v183;
                        buf.__r_.__value_.__l.__size_ = v184;
                        LODWORD(buf.__r_.__value_.__r.__words[2]) = v228[0];
                        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v228 + 3);
                        *((unsigned char *)&buf.__r_.__value_.__s + 23) = v185;
                      }
                      diag::Service::Internal::changeStateAndNotify_sync(v2, 0, (uint64_t)&v230, (uint64_t)&buf);
                      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(buf.__r_.__value_.__l.__data_);
                      }
                      if (v230.__r_.__value_.__l.__size_) {
                        dispatch_release((dispatch_object_t)v230.__r_.__value_.__l.__size_);
                      }
                      if (v230.__r_.__value_.__r.__words[0]) {
                        _Block_release(v230.__r_.__value_.__l.__data_);
                      }
                      if (v185 < 0) {
                        operator delete(v183);
                      }
                      goto LABEL_116;
                    }
LABEL_498:
                    unint64_t v186 = 0;
                    goto LABEL_499;
                  }
LABEL_497:
                  operator delete(*(void **)v236);
                  size_t v41 = v191;
                  if (v191) {
                    goto LABEL_493;
                  }
                  goto LABEL_498;
                }
              }
              else
              {
                v165 = &v236[45];
                qmemcpy(v236, "DIAG can not start without a valid DMC file: ", 45);
              }
              if (v162 >= 0) {
                BOOL v169 = (const void *)(v2 + 112);
              }
              else {
                BOOL v169 = (const void *)v132->__r_.__value_.__r.__words[0];
              }
              memmove(v165, v169, v163);
              goto LABEL_476;
            }
LABEL_461:
            uint64_t v155 = *(_OWORD **)v155;
            goto LABEL_462;
          }
          if (v135 >= 0) {
            int v138 = &v190;
          }
          else {
            int v138 = (std::string *)v190.__r_.__value_.__r.__words[0];
          }
LABEL_418:
          std::string::__assign_no_alias<false>((void **)(v2 + 112), v138, v137);
          goto LABEL_420;
        }
LABEL_241:
        if (v52 == &v188) {
          goto LABEL_340;
        }
        if ((*(unsigned char *)(v2 + 183) & 0x80) == 0)
        {
          if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__assign_no_alias<true>((void *)(v2 + 160), v188.__r_.__value_.__l.__data_, v188.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v52->__r_.__value_.__l.__data_ = *(_OWORD *)&v188.__r_.__value_.__l.__data_;
            *(void *)(v2 + 176) = *((void *)&v188.__r_.__value_.__l + 2);
          }
          goto LABEL_340;
        }
        if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v55 = &v188;
        }
        else {
          long long v55 = (std::string *)v188.__r_.__value_.__r.__words[0];
        }
        goto LABEL_338;
      }
      if (v41)
      {
        uint64_t v50 = _Block_copy(v41);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
        if (!v42) {
          goto LABEL_262;
        }
      }
      else
      {
        uint64_t v50 = 0;
        buf.__r_.__value_.__r.__words[0] = 0;
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
        if (!v42)
        {
LABEL_262:
          diag::Service::Internal::start_sync((void *)v2, (uint64_t)&buf);
          if (v42) {
            dispatch_release(v42);
          }
          if (v50) {
            goto LABEL_115;
          }
          goto LABEL_116;
        }
      }
      dispatch_retain(v42);
      goto LABEL_262;
    }
LABEL_78:
    dispatch_retain(v42);
    goto LABEL_79;
  }
LABEL_124:
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v203.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_126:
      if ((SHIBYTE(__p[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_127;
      }
LABEL_131:
      operator delete(__p[1].__r_.__value_.__l.__data_);
      if ((SHIBYTE(v205.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return MEMORY[0x1A6274930](v206);
      }
LABEL_132:
      operator delete(v205.__r_.__value_.__l.__data_);
      return MEMORY[0x1A6274930](v206);
    }
  }
  else if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_126;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[1].__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_131;
  }
LABEL_127:
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_132;
  }
  return MEMORY[0x1A6274930](v206);
}

void sub_1A61B7834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,dispatch_object_t a31,uint64_t a32,uint64_t a33,dispatch_object_t object,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&STACK[0x218]);
  if (*(char *)(v61 - 233) < 0) {
    operator delete(*(void **)(v61 - 256));
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a29);
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  MEMORY[0x1A6274930](&a61);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c130_ZTSN8dispatch8callbackIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 40);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  int v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c130_ZTSN8dispatch8callbackIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4diag7Service8InternalEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1EFB0F748;
  void block[5] = v5;
  std::string::size_type v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4diag7Service8InternalEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c51_ZTSNSt3__110shared_ptrIKN4diag7Service8InternalEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c51_ZTSNSt3__110shared_ptrIKN4diag7Service8InternalEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void diag::Service::Internal::changeStateAndNotify_sync(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  __p.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  __p.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
  __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
  if (a2 != 1)
  {
    uint64_t v8 = *(NSObject **)(a1 + 384);
    *(void *)(a1 + 384) = 0;
    if (v8)
    {
      dispatch_group_leave(v8);
      dispatch_release(v8);
    }
  }
  uint64_t v9 = *(int *)(a1 + 460);
  if (v9 == a2)
  {
    if (a2 > 4) {
      uint64_t v10 = "Unknown";
    }
    else {
      uint64_t v10 = off_1E5C48778[a2];
    }
    size_t v12 = strlen(v10);
    if (v12 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v13 = v12;
    if (v12 >= 0x17)
    {
      uint64_t v18 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v18 = v12 | 7;
      }
      uint64_t v19 = v18 + 1;
      p_dst = (std::string *)operator new(v18 + 1);
      __dst.__r_.__value_.__l.__size_ = v13;
      __dst.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v12;
      p_dst = &__dst;
      if (!v12)
      {
LABEL_23:
        p_dst->__r_.__value_.__s.__data_[v13] = 0;
        uint64_t v20 = std::string::insert(&__dst, 0, "State not changed: ", 0x13uLL);
        long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v82.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        uint64_t v22 = std::string::append(&v82, ". ", 2uLL);
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        block.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&block.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        int v24 = *(char *)(a4 + 23);
        if (v24 >= 0) {
          char v25 = (const std::string::value_type *)a4;
        }
        else {
          char v25 = *(const std::string::value_type **)a4;
        }
        if (v24 >= 0) {
          std::string::size_type v26 = *(unsigned __int8 *)(a4 + 23);
        }
        else {
          std::string::size_type v26 = *(void *)(a4 + 8);
        }
        int v27 = std::string::append(&block, v25, v26);
        std::string::size_type v28 = v27->__r_.__value_.__r.__words[0];
        v84.__r_.__value_.__r.__words[0] = v27->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v84.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v27->__r_.__value_.__r.__words[1] + 7);
        char v29 = HIBYTE(v27->__r_.__value_.__r.__words[2]);
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __p.__r_.__value_.__r.__words[0] = v28;
        __p.__r_.__value_.__l.__size_ = v84.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v84.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v29;
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_33:
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_89;
            }
LABEL_74:
            operator delete(__dst.__r_.__value_.__l.__data_);
            goto LABEL_89;
          }
        }
        else if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_33;
        }
        operator delete(v82.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_89;
        }
        goto LABEL_74;
      }
    }
    memcpy(p_dst, v10, v13);
    goto LABEL_23;
  }
  *(_DWORD *)(a1 + 460) = a2;
  if (v9 > 4) {
    size_t v11 = "Unknown";
  }
  else {
    size_t v11 = off_1E5C48778[v9];
  }
  size_t v15 = strlen(v11);
  if (v15 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v16 = v15;
  if (v15 >= 0x17)
  {
    uint64_t v30 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v30 = v15 | 7;
    }
    uint64_t v31 = v30 + 1;
    uint64_t v17 = operator new(v30 + 1);
    v80.__r_.__value_.__l.__size_ = v16;
    v80.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    goto LABEL_38;
  }
  *((unsigned char *)&v80.__r_.__value_.__s + 23) = v15;
  uint64_t v17 = &v80;
  if (v15) {
LABEL_38:
  }
    memcpy(v17, v11, v16);
  *((unsigned char *)v17 + v16) = 0;
  unsigned int v32 = std::string::insert(&v80, 0, "State changed from: ", 0x14uLL);
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v84.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  int v34 = std::string::append(&v84, " to: ", 5uLL);
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  uint64_t v36 = *(int *)(a1 + 460);
  if (v36 > 4) {
    uint64_t v37 = "Unknown";
  }
  else {
    uint64_t v37 = off_1E5C48778[v36];
  }
  size_t v38 = strlen(v37);
  if (v38 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v39 = v38;
  if (v38 >= 0x17)
  {
    uint64_t v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17) {
      uint64_t v41 = v38 | 7;
    }
    uint64_t v42 = v41 + 1;
    uint64_t v40 = operator new(v41 + 1);
    size_t v78 = v39;
    int64_t v79 = v42 | 0x8000000000000000;
    uint64_t v77 = v40;
    goto LABEL_49;
  }
  HIBYTE(v79) = v38;
  uint64_t v40 = &v77;
  if (v38) {
LABEL_49:
  }
    memcpy(v40, v37, v39);
  *((unsigned char *)v40 + v39) = 0;
  if (v79 >= 0) {
    unint64_t v43 = (const std::string::value_type *)&v77;
  }
  else {
    unint64_t v43 = (const std::string::value_type *)v77;
  }
  if (v79 >= 0) {
    std::string::size_type v44 = HIBYTE(v79);
  }
  else {
    std::string::size_type v44 = v78;
  }
  long long v45 = std::string::append(&__dst, v43, v44);
  long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v82.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  uint64_t v47 = std::string::append(&v82, ". ", 2uLL);
  long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  block.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)&block.__r_.__value_.__l.__data_ = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  int v49 = *(char *)(a4 + 23);
  if (v49 >= 0) {
    uint64_t v50 = (const std::string::value_type *)a4;
  }
  else {
    uint64_t v50 = *(const std::string::value_type **)a4;
  }
  if (v49 >= 0) {
    std::string::size_type v51 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v51 = *(void *)(a4 + 8);
  }
  uint64_t v52 = std::string::append(&block, v50, v51);
  std::string::size_type v53 = v52->__r_.__value_.__r.__words[0];
  v85[0] = v52->__r_.__value_.__l.__size_;
  *(void *)((char *)v85 + 7) = *(std::string::size_type *)((char *)&v52->__r_.__value_.__r.__words[1] + 7);
  char v54 = HIBYTE(v52->__r_.__value_.__r.__words[2]);
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = v53;
  __p.__r_.__value_.__l.__size_ = v85[0];
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v85 + 7);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v54;
  if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(block.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_66:
      if ((SHIBYTE(v79) & 0x80000000) == 0) {
        goto LABEL_67;
      }
      goto LABEL_77;
    }
  }
  else if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(v82.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v79) & 0x80000000) == 0)
  {
LABEL_67:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_78;
  }
LABEL_77:
  operator delete(v77);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_68:
    if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_79;
  }
LABEL_78:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_69:
    if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_80;
  }
LABEL_79:
  operator delete(v84.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_70:
    if (*(_DWORD *)(a1 + 460) != 4) {
      goto LABEL_89;
    }
    goto LABEL_81;
  }
LABEL_80:
  operator delete(v80.__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a1 + 460) != 4) {
    goto LABEL_89;
  }
LABEL_81:
  uint64_t v55 = *(void *)(a1 + 216);
  if (v55)
  {
    uint64_t v56 = *(void **)(v55 + 16);
    uint64_t v57 = (void *)(v55 + 24);
    if (v56 != (void *)(v55 + 24))
    {
      do
      {
        diag::DIAGReader::stop((diag::DIAGReader *)v56[5]);
        int v68 = (void *)v56[1];
        if (v68)
        {
          do
          {
            __n128 v69 = v68;
            int v68 = (void *)*v68;
          }
          while (v68);
        }
        else
        {
          do
          {
            __n128 v69 = (void *)v56[2];
            BOOL v70 = *v69 == (void)v56;
            uint64_t v56 = v69;
          }
          while (!v70);
        }
        uint64_t v56 = v69;
      }
      while (v69 != v57);
    }
  }
  unint64_t v58 = *(BasebandTransport **)(a1 + 288);
  if (v58)
  {
    BasebandTransport::close(v58);
    unint64_t v59 = *(uint64_t **)(a1 + 288);
    block.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
    block.__r_.__value_.__l.__size_ = 0x40000000;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN17BasebandTransport9dumpStateEb_block_invoke;
    long long v87 = &__block_descriptor_tmp_80;
    int v88 = v59;
    v89.__r_.__value_.__s.__data_[0] = 0;
    ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v59 + 9, (uint64_t)&block);
  }
  CFTypeRef v60 = *(BasebandTransport **)(a1 + 304);
  if (v60)
  {
    BasebandTransport::close(v60);
    uint64_t v61 = *(uint64_t **)(a1 + 304);
    block.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
    block.__r_.__value_.__l.__size_ = 0x40000000;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN17BasebandTransport9dumpStateEb_block_invoke;
    long long v87 = &__block_descriptor_tmp_80;
    int v88 = v61;
    v89.__r_.__value_.__s.__data_[0] = 0;
    ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v61 + 9, (uint64_t)&block);
  }
  int v62 = *(BasebandTransport **)(a1 + 320);
  if (v62)
  {
    BasebandTransport::close(v62);
    long long v63 = *(uint64_t **)(a1 + 320);
    block.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
    block.__r_.__value_.__l.__size_ = 0x40000000;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN17BasebandTransport9dumpStateEb_block_invoke;
    long long v87 = &__block_descriptor_tmp_80;
    int v88 = v63;
    v89.__r_.__value_.__s.__data_[0] = 0;
    ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v63 + 9, (uint64_t)&block);
  }
LABEL_89:
  unint64_t v64 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    _os_log_impl(&dword_1A609F000, v64, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&block, 0xCu);
  }
  uint64_t v66 = *(void *)(a1 + 216);
  if (v66)
  {
    uint64_t v67 = 7;
    switch(*(_DWORD *)(a1 + 460))
    {
      case 0:
        goto LABEL_107;
      case 1:
        uint64_t v67 = 5;
        goto LABEL_107;
      case 2:
        uint64_t v67 = 8;
        goto LABEL_107;
      case 4:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&block, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else {
          std::string block = __p;
        }
        diag::DIAGReaderManager::pushInfo(v66, 0, (uint64_t)&block);
        goto LABEL_108;
      default:
        uint64_t v67 = 16;
LABEL_107:
        *((unsigned char *)&block.__r_.__value_.__s + 23) = 0;
        block.__r_.__value_.__s.__data_[0] = 0;
        diag::DIAGReaderManager::pushInfo(v66, v67, (uint64_t)&block);
LABEL_108:
        if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          break;
        }
        operator delete(block.__r_.__value_.__l.__data_);
        BOOL v71 = *(const void **)a3;
        if (!*(void *)a3) {
          goto LABEL_130;
        }
        goto LABEL_110;
    }
  }
  BOOL v71 = *(const void **)a3;
  if (!*(void *)a3)
  {
LABEL_130:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_131;
  }
LABEL_110:
  if (!*(void *)(a3 + 8)) {
    goto LABEL_130;
  }
  int v72 = *(_DWORD *)(a1 + 460);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string v76 = __p;
LABEL_116:
    int v73 = _Block_copy(v71);
    goto LABEL_117;
  }
  std::string::__init_copy_ctor_external(&v76, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  BOOL v71 = *(const void **)a3;
  if (*(void *)a3) {
    goto LABEL_116;
  }
  int v73 = 0;
LABEL_117:
  long long v74 = *(NSObject **)(a3 + 8);
  block.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  block.__r_.__value_.__l.__size_ = 1174405120;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEclIJS3_SA_EEEvDpT__block_invoke;
  long long v87 = &__block_descriptor_tmp_48_0;
  if (v73)
  {
    int v88 = _Block_copy(v73);
    int v90 = v72;
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_119:
      std::string v89 = v76;
      goto LABEL_122;
    }
  }
  else
  {
    int v88 = 0;
    int v90 = v72;
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_119;
    }
  }
  std::string::__init_copy_ctor_external(&v89, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
LABEL_122:
  dispatch_async(v74, &block);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v89.__r_.__value_.__l.__data_);
    uint64_t v75 = v88;
    if (!v88) {
      goto LABEL_127;
    }
    goto LABEL_126;
  }
  uint64_t v75 = v88;
  if (v88) {
LABEL_126:
  }
    _Block_release(v75);
LABEL_127:
  if (v73) {
    _Block_release(v73);
  }
  if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_130;
  }
  operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_131:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1A61B8964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v52 - 153) < 0) {
    operator delete(*(void **)(v52 - 176));
  }
  if (a46 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4diag7Service8Internal10setup_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(const void **)(v2 + 392);
  if (!v3 || !*(void *)(v2 + 400)) {
    return;
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    std::string v7 = *(std::string *)a2;
LABEL_6:
    uint64_t v4 = _Block_copy(v3);
    goto LABEL_7;
  }
  std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  unint64_t v3 = *(const void **)(v2 + 392);
  if (v3) {
    goto LABEL_6;
  }
  uint64_t v4 = 0;
LABEL_7:
  uint64_t v5 = *(NSObject **)(v2 + 400);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEclIJS3_SA_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_48_0;
  if (v4)
  {
    aBlocunint64_t k = _Block_copy(v4);
    int v11 = 4;
    if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      std::string __p = v7;
      goto LABEL_12;
    }
  }
  else
  {
    aBlocunint64_t k = 0;
    int v11 = 4;
    if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  std::string::__init_copy_ctor_external(&__p, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
LABEL_12:
  dispatch_async(v5, block);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    uint64_t v6 = aBlock;
    if (!aBlock) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  uint64_t v6 = aBlock;
  if (aBlock) {
LABEL_16:
  }
    _Block_release(v6);
LABEL_17:
  if (v4) {
    _Block_release(v4);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
}

void sub_1A61B8CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v19) {
    _Block_release(v19);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEclIJS3_SA_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(unsigned int *)(a1 + 64);
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string __p = *(std::string *)(a1 + 40);
  }
  (*(void (**)(uint64_t, uint64_t, std::string *))(v1 + 16))(v1, v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1A61B8DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c127_ZTSN8dispatch5blockIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 32);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1A61B8E60(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(const void **)(v1 + 32);
  if (v3) {
    _Block_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c127_ZTSN8dispatch5blockIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    uint64_t v2 = *(const void **)(a1 + 32);
    if (!v2) {
      return;
    }
    goto LABEL_5;
  }
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
LABEL_5:
  }
    _Block_release(v2);
}

void diag::Service::Internal::start_sync(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[9];
  unint64_t v3 = (std::__shared_weak_count *)a1[10];
  uint64_t v20 = v4;
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3), (long long v21 = v6) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = a1[29];
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4diag7Service8Internal10start_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_64_0;
  aBlock[4] = a1;
  void aBlock[5] = v4;
  size_t v15 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v8 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v8 = _Block_copy(v8);
  }
  uint64_t v9 = *(NSObject **)(a2 + 8);
  std::string::size_type v16 = v8;
  dispatch_object_t v17 = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  uint64_t v10 = _Block_copy(aBlock);
  int v11 = a1[11];
  if (v11) {
    dispatch_retain(v11);
  }
  uint64_t v18 = v10;
  dispatch_object_t object = v11;
  (*(void (**)(uint64_t, void **))(*(void *)v7 + 64))(v7, &v18);
  if (object) {
    dispatch_release(object);
  }
  if (v18) {
    _Block_release(v18);
  }
  if (v17) {
    dispatch_release(v17);
  }
  if (v16) {
    _Block_release(v16);
  }
  size_t v12 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  std::string::size_type v13 = v21;
  if (v21)
  {
    if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1A61B90D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)va);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v12);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v13 - 64);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal10start_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke(capabilities::diag *a1, int a2)
{
  unint64_t v3 = (void *)*((void *)a1 + 4);
  if (a2)
  {
    if (v3[52] && capabilities::diag::supportsMultipleMasks(a1))
    {
      uint64_t v4 = v3[29];
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN4diag7Service8Internal10start_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke_2;
      aBlock[3] = &__block_descriptor_tmp_60_2;
      uint64_t v6 = *((void *)a1 + 5);
      uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 6);
      aBlock[4] = v3;
      void aBlock[5] = v6;
      char v25 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v7 = (void *)*((void *)a1 + 7);
      if (v7) {
        uint64_t v7 = _Block_copy(v7);
      }
      uint64_t v8 = *((void *)a1 + 8);
      std::string::size_type v26 = v7;
      dispatch_object_t object = v8;
      if (v8) {
        dispatch_retain(v8);
      }
      uint64_t v9 = _Block_copy(aBlock);
      uint64_t v10 = v3[11];
      if (v10) {
        dispatch_retain(v10);
      }
      std::string::size_type v28 = v9;
      dispatch_object_t v29 = v10;
      (*(void (**)(uint64_t, uint64_t, const void **))(*(void *)v4 + 136))(v4, 2, &v28);
      if (v29) {
        dispatch_release(v29);
      }
      if (v28) {
        _Block_release(v28);
      }
      if (object) {
        dispatch_release(object);
      }
      if (v26) {
        _Block_release(v26);
      }
      uint64_t v11 = v25;
      if (v25)
      {
        if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      return;
    }
    size_t v15 = (const void *)*((void *)a1 + 7);
    if (v15)
    {
      std::string::size_type v16 = _Block_copy(v15);
      dispatch_object_t v17 = *((void *)a1 + 8);
      uint64_t v22 = v16;
      long long v23 = v17;
      if (!v17)
      {
LABEL_35:
        diag::Service::Internal::finishStart_sync((uint64_t)v3, (uint64_t)&v22, 0);
        if (v17) {
          dispatch_release(v17);
        }
        if (v16) {
          _Block_release(v16);
        }
        return;
      }
    }
    else
    {
      std::string::size_type v16 = 0;
      dispatch_object_t v17 = *((void *)a1 + 8);
      uint64_t v22 = 0;
      long long v23 = v17;
      if (!v17) {
        goto LABEL_35;
      }
    }
    dispatch_retain(v17);
    goto LABEL_35;
  }
  uint64_t v12 = (const void *)*((void *)a1 + 7);
  if (!v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *((void *)a1 + 8);
    uint64_t v20 = 0;
    long long v21 = v14;
    if (!v14) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v13 = _Block_copy(v12);
  uint64_t v14 = *((void *)a1 + 8);
  uint64_t v20 = v13;
  long long v21 = v14;
  if (v14) {
LABEL_25:
  }
    dispatch_retain(v14);
LABEL_26:
  std::string __p = operator new(0x30uLL);
  long long v19 = xmmword_1A61FBB20;
  strcpy((char *)__p, "Error configuring interface while starting");
  diag::Service::Internal::changeStateAndNotify_sync((uint64_t)v3, 4u, (uint64_t)&v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (v14) {
    dispatch_release(v14);
  }
  if (v13) {
    _Block_release(v13);
  }
}

void sub_1A61B93E0(_Unwind_Exception *a1)
{
  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v3 - 64);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v2);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1A61B9418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A61B942C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal10start_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke_2(void *a1, int a2)
{
  uint64_t v3 = a1[4];
  if (a2)
  {
    v35.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
    v35.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
    v35.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
    uint64_t v4 = BasebandTransport::operator*(*(void *)(v3 + 288));
    uint64_t v5 = *(void *)(v3 + 416);
    *(void *)(v3 + 424) = v4;
    *(void *)(v3 + 432) = v5;
    *(_DWORD *)(v3 + 440) = 2;
    if (ETLDIAGLoggingConfigure())
    {
      uint64_t v6 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEFAULT, "#I Sleep DMC configured", buf, 2u);
      }
      uint64_t v7 = *(void *)(v3 + 232);
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN4diag7Service8Internal10start_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke_53;
      aBlock[3] = &__block_descriptor_tmp_56_0;
      uint64_t v9 = a1[5];
      uint64_t v8 = (std::__shared_weak_count *)a1[6];
      aBlock[4] = v3;
      void aBlock[5] = v9;
      dispatch_object_t v29 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = (void *)a1[7];
      if (v10) {
        uint64_t v10 = _Block_copy(v10);
      }
      uint64_t v11 = a1[8];
      uint64_t v30 = v10;
      dispatch_object_t object = v11;
      if (v11) {
        dispatch_retain(v11);
      }
      uint64_t v12 = _Block_copy(aBlock);
      uint64_t v13 = *(NSObject **)(v3 + 88);
      if (v13) {
        dispatch_retain(v13);
      }
      unsigned int v32 = v12;
      dispatch_object_t v33 = v13;
      (*(void (**)(uint64_t, uint64_t, const void **))(*(void *)v7 + 136))(v7, 1, &v32);
      if (v33) {
        dispatch_release(v33);
      }
      if (v32) {
        _Block_release(v32);
      }
      if (object) {
        dispatch_release(object);
      }
      if (v30) {
        _Block_release(v30);
      }
      uint64_t v14 = v29;
      if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
LABEL_49:
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      return;
    }
    uint64_t v18 = (const void *)a1[7];
    if (v18)
    {
      long long v19 = _Block_copy(v18);
      uint64_t v20 = a1[8];
      std::string::size_type v26 = v19;
      int v27 = v20;
      if (!v20)
      {
LABEL_36:
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v25, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
        }
        else {
          std::string v25 = v35;
        }
        diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v26, (uint64_t)&v25);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v25.__r_.__value_.__l.__data_);
        }
        if (v20) {
          dispatch_release(v20);
        }
        if (v19) {
          _Block_release(v19);
        }
        goto LABEL_49;
      }
    }
    else
    {
      long long v19 = 0;
      uint64_t v20 = a1[8];
      std::string::size_type v26 = 0;
      int v27 = v20;
      if (!v20) {
        goto LABEL_36;
      }
    }
    dispatch_retain(v20);
    goto LABEL_36;
  }
  size_t v15 = (const void *)a1[7];
  if (!v15)
  {
    std::string::size_type v16 = 0;
    dispatch_object_t v17 = a1[8];
    long long v23 = 0;
    int v24 = v17;
    if (!v17) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  std::string::size_type v16 = _Block_copy(v15);
  dispatch_object_t v17 = a1[8];
  long long v23 = v16;
  int v24 = v17;
  if (v17) {
LABEL_26:
  }
    dispatch_retain(v17);
LABEL_27:
  std::string __p = operator new(0x28uLL);
  long long v22 = xmmword_1A61F8010;
  strcpy((char *)__p, "Error switching to sleep logging mask");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v23, (uint64_t)&__p);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p);
  }
  if (v17) {
    dispatch_release(v17);
  }
  if (v16) {
    _Block_release(v16);
  }
}

void sub_1A61B97E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a24);
  if (*(char *)(v24 - 49) < 0) {
    operator delete(*(void **)(v24 - 72));
  }
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal10start_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke_53(void *a1, int a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = (const void *)a1[7];
  if (a2)
  {
    if (v4)
    {
      uint64_t v5 = _Block_copy(v4);
      uint64_t v6 = a1[8];
      uint64_t v13 = v5;
      uint64_t v14 = v6;
      if (!v6)
      {
LABEL_5:
        diag::Service::Internal::finishStart_sync(v3, (uint64_t)&v13, 1);
        if (v6) {
          dispatch_release(v6);
        }
        if (v5) {
          _Block_release(v5);
        }
        return;
      }
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = a1[8];
      uint64_t v13 = 0;
      uint64_t v14 = v6;
      if (!v6) {
        goto LABEL_5;
      }
    }
    dispatch_retain(v6);
    goto LABEL_5;
  }
  if (!v4)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a1[8];
    uint64_t v11 = 0;
    uint64_t v12 = v8;
    if (!v8) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v7 = _Block_copy(v4);
  uint64_t v8 = a1[8];
  uint64_t v11 = v7;
  uint64_t v12 = v8;
  if (v8) {
LABEL_11:
  }
    dispatch_retain(v8);
LABEL_12:
  std::string __p = operator new(0x28uLL);
  long long v10 = xmmword_1A61F9A00;
  strcpy((char *)__p, "Error switching to merged logging mask");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v11, (uint64_t)&__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p);
  }
  if (v8) {
    dispatch_release(v8);
  }
  if (v7) {
    _Block_release(v7);
  }
}

void sub_1A61B99E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1A61B9A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A61B9A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void diag::Service::Internal::finishStart_sync(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(void *)(a1 + 408)) {
    goto LABEL_23;
  }
  v33.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  v33.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
  v33.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
  uint64_t v6 = BasebandTransport::operator*(*(void *)(a1 + 288));
  uint64_t v7 = *(void *)(a1 + 408);
  *(void *)(a1 + 424) = v6;
  *(void *)(a1 + 432) = v7;
  *(_DWORD *)(a1 + 440) = a3;
  int v8 = ETLDIAGLoggingConfigure();
  char v9 = v8;
  if (v8)
  {
    long long v10 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1A609F000, v10, OS_LOG_TYPE_DEFAULT, "#I Merged DMC configured", buf, 2u);
    }
    goto LABEL_19;
  }
  if (!*(void *)a2)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(NSObject **)(a2 + 8);
    uint64_t v30 = 0;
    uint64_t v31 = v12;
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v11 = _Block_copy(*(const void **)a2);
  uint64_t v12 = *(NSObject **)(a2 + 8);
  uint64_t v30 = v11;
  uint64_t v31 = v12;
  if (v12) {
LABEL_7:
  }
    dispatch_retain(v12);
LABEL_8:
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v29, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  }
  else {
    std::string v29 = v33;
  }
  diag::Service::Internal::changeStateAndNotify_sync(a1, 4u, (uint64_t)&v30, (uint64_t)&v29);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (v12) {
    dispatch_release(v12);
  }
  if (v11) {
    _Block_release(v11);
  }
LABEL_19:
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v33.__r_.__value_.__l.__data_);
    if ((v9 & 1) == 0) {
      return;
    }
  }
  else if ((v9 & 1) == 0)
  {
    return;
  }
LABEL_23:
  std::string::size_type v14 = *(void *)(a1 + 72);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 80);
  v33.__r_.__value_.__r.__words[0] = v14;
  if (!v13
    || (size_t v15 = std::__shared_weak_count::lock(v13), (v33.__r_.__value_.__l.__size_ = (std::string::size_type)v15) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v16 = *(void *)(a1 + 232);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4diag7Service8Internal16finishStart_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE20ETLDIAGLoggingMaskID_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_77_0;
  aBlock[4] = a1;
  void aBlock[5] = v14;
  uint64_t v24 = v15;
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  dispatch_object_t v17 = *(void **)a2;
  if (*(void *)a2) {
    dispatch_object_t v17 = _Block_copy(v17);
  }
  uint64_t v18 = *(NSObject **)(a2 + 8);
  std::string v25 = v17;
  dispatch_object_t v26 = v18;
  if (v18) {
    dispatch_retain(v18);
  }
  long long v19 = _Block_copy(aBlock);
  uint64_t v20 = *(NSObject **)(a1 + 88);
  if (v20) {
    dispatch_retain(v20);
  }
  int v27 = v19;
  dispatch_object_t object = v20;
  (*(void (**)(uint64_t, void **))(*(void *)v16 + 72))(v16, &v27);
  if (object) {
    dispatch_release(object);
  }
  if (v27) {
    _Block_release(v27);
  }
  if (v26) {
    dispatch_release(v26);
  }
  if (v25) {
    _Block_release(v25);
  }
  long long v21 = v24;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  int64_t size = (std::__shared_weak_count *)v33.__r_.__value_.__l.__size_;
  if (v33.__r_.__value_.__l.__size_)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v33.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_1A61B9D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v26 - 96);
  if (*(char *)(v26 - 49) < 0)
  {
    operator delete(*(void **)(v26 - 72));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIN4diag7Service8InternalEEE56c130_ZTSN8dispatch8callbackIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[7];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  uint64_t v6 = a2[8];
  a1[7] = v5;
  a1[8] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIN4diag7Service8InternalEEE56c130_ZTSN8dispatch8callbackIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEE(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZN4diag7Service8Internal16finishStart_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE20ETLDIAGLoggingMaskID_block_invoke(void *a1, int a2)
{
  uint64_t v3 = a1[4];
  if (a2)
  {
    uint64_t v4 = *(void *)(v3 + 216);
    if (v4)
    {
      uint64_t v5 = *(void **)(v4 + 16);
      uint64_t v6 = (void *)(v4 + 24);
      if (v5 != (void *)(v4 + 24))
      {
        do
        {
          diag::DIAGReader::start((diag::DIAGReader *)v5[5]);
          uint64_t v18 = (void *)v5[1];
          if (v18)
          {
            do
            {
              long long v19 = v18;
              uint64_t v18 = (void *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              long long v19 = (void *)v5[2];
              BOOL v20 = *v19 == (void)v5;
              uint64_t v5 = v19;
            }
            while (!v20);
          }
          uint64_t v5 = v19;
        }
        while (v19 != v6);
      }
    }
    v55[0] = 0xAAAAAAAAAAAAAAAALL;
    v55[1] = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v7 = (capabilities::diag *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v55, *(const __CFDictionary **)(v3 + 208));
    if (capabilities::diag::supportsBuffering(v7))
    {
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v56, diag::config::kBufferingOnAPAwake[0]);
      int Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v55, v56);
      MEMORY[0x1A62748E0](&v56);
      if (Bool)
      {
        uint64_t v9 = *(void *)(v3 + 232);
        uint64_t v10 = *(void *)(v3 + 448);
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN4diag7Service8Internal16finishStart_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE20ETLDIAGLoggingMaskID_block_invoke_2;
        aBlock[3] = &__block_descriptor_tmp_68_1;
        uint64_t v12 = a1[5];
        uint64_t v11 = (std::__shared_weak_count *)a1[6];
        aBlock[4] = v3;
        void aBlock[5] = v12;
        uint64_t v50 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v13 = (void *)a1[7];
        if (v13) {
          uint64_t v13 = _Block_copy(v13);
        }
        std::string::size_type v14 = a1[8];
        std::string::size_type v51 = v13;
        dispatch_object_t object = v14;
        if (v14) {
          dispatch_retain(v14);
        }
        size_t v15 = _Block_copy(aBlock);
        uint64_t v16 = *(NSObject **)(v3 + 88);
        if (v16) {
          dispatch_retain(*(dispatch_object_t *)(v3 + 88));
        }
        std::string::size_type v53 = v15;
        dispatch_object_t v54 = v16;
        (*(void (**)(uint64_t, uint64_t, const void **))(*(void *)v9 + 128))(v9, v10, &v53);
        if (v54) {
          dispatch_release(v54);
        }
        if (v53) {
          _Block_release(v53);
        }
        if (object) {
          dispatch_release(object);
        }
        if (v51) {
          _Block_release(v51);
        }
        dispatch_object_t v17 = v50;
        if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
LABEL_50:
        if (*(unsigned char *)(v3 + 446))
        {
          uint64_t v27 = *(void *)(v3 + 232);
          v39[0] = MEMORY[0x1E4F143A8];
          v39[1] = 1174405120;
          void v39[2] = ___ZN4diag7Service8Internal16finishStart_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE20ETLDIAGLoggingMaskID_block_invoke_69;
          v39[3] = &__block_descriptor_tmp_73_1;
          uint64_t v29 = a1[5];
          std::string::size_type v28 = (std::__shared_weak_count *)a1[6];
          v39[4] = v3;
          v39[5] = v29;
          uint64_t v40 = v28;
          if (v28) {
            atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v30 = (void *)a1[7];
          if (v30) {
            uint64_t v30 = _Block_copy(v30);
          }
          uint64_t v31 = a1[8];
          uint64_t v41 = v30;
          dispatch_object_t v42 = v31;
          if (v31) {
            dispatch_retain(v31);
          }
          unsigned int v32 = _Block_copy(v39);
          std::string v33 = *(NSObject **)(v3 + 88);
          if (v33) {
            dispatch_retain(v33);
          }
          unint64_t v43 = v32;
          dispatch_object_t v44 = v33;
          (*(void (**)(uint64_t, void **))(*(void *)v27 + 88))(v27, &v43);
          if (v44) {
            dispatch_release(v44);
          }
          if (v43) {
            _Block_release(v43);
          }
          if (v42) {
            dispatch_release(v42);
          }
          if (v41) {
            _Block_release(v41);
          }
          int v34 = v40;
          if (v40)
          {
            if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
        }
        MEMORY[0x1A6274930](v55);
        return;
      }
    }
    uint64_t v24 = (const void *)a1[7];
    if (v24)
    {
      std::string v25 = _Block_copy(v24);
      uint64_t v26 = a1[8];
      uint64_t v47 = v25;
      long long v48 = v26;
      if (!v26)
      {
LABEL_44:
        char v46 = 0;
        LOBYTE(v45) = 0;
        diag::Service::Internal::changeStateAndNotify_sync(v3, 1u, (uint64_t)&v47, (uint64_t)&v45);
        if (v46 < 0) {
          operator delete(v45);
        }
        if (v26) {
          dispatch_release(v26);
        }
        if (v25) {
          _Block_release(v25);
        }
        goto LABEL_50;
      }
    }
    else
    {
      std::string v25 = 0;
      uint64_t v26 = a1[8];
      uint64_t v47 = 0;
      long long v48 = v26;
      if (!v26) {
        goto LABEL_44;
      }
    }
    dispatch_retain(v26);
    goto LABEL_44;
  }
  long long v21 = (const void *)a1[7];
  if (!v21)
  {
    long long v22 = 0;
    long long v23 = a1[8];
    uint64_t v37 = 0;
    size_t v38 = v23;
    if (!v23) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  long long v22 = _Block_copy(v21);
  long long v23 = a1[8];
  uint64_t v37 = v22;
  size_t v38 = v23;
  if (v23) {
LABEL_34:
  }
    dispatch_retain(v23);
LABEL_35:
  strcpy(__p, "Error completing start");
  char v36 = 22;
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v37, (uint64_t)__p);
  if (v36 < 0) {
    operator delete(*(void **)__p);
  }
  if (v23) {
    dispatch_release(v23);
  }
  if (v22) {
    _Block_release(v22);
  }
}

void sub_1A61BA3EC(_Unwind_Exception *a1)
{
  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v3 - 120);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v2);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1);
  MEMORY[0x1A6274930](v3 - 104);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal16finishStart_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE20ETLDIAGLoggingMaskID_block_invoke_2(void *a1, int a2)
{
  uint64_t v3 = a1[4];
  if (a2)
  {
    uint64_t v4 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEFAULT, "#I Buffering on AP awake is enabled", buf, 2u);
    }
    *(unsigned char *)(v3 + 456) = 1;
    uint64_t v5 = (const void *)a1[7];
    if (v5)
    {
      uint64_t v6 = _Block_copy(v5);
      uint64_t v7 = a1[8];
      dispatch_object_t v17 = v6;
      uint64_t v18 = v7;
      if (!v7)
      {
LABEL_7:
        char v16 = 0;
        LOBYTE(__p) = 0;
        diag::Service::Internal::changeStateAndNotify_sync(v3, 1u, (uint64_t)&v17, (uint64_t)&__p);
        if (v16 < 0) {
          operator delete(__p);
        }
        if (v7) {
          dispatch_release(v7);
        }
        if (v6) {
          _Block_release(v6);
        }
        return;
      }
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = a1[8];
      dispatch_object_t v17 = 0;
      uint64_t v18 = v7;
      if (!v7) {
        goto LABEL_7;
      }
    }
    dispatch_retain(v7);
    goto LABEL_7;
  }
  *(unsigned char *)(v3 + 456) = 0;
  int v8 = (const void *)a1[7];
  if (!v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = a1[8];
    uint64_t v13 = 0;
    std::string::size_type v14 = v10;
    if (!v10) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v9 = _Block_copy(v8);
  uint64_t v10 = a1[8];
  uint64_t v13 = v9;
  std::string::size_type v14 = v10;
  if (v10) {
LABEL_15:
  }
    dispatch_retain(v10);
LABEL_16:
  uint64_t v11 = operator new(0x30uLL);
  long long v12 = xmmword_1A61FBB20;
  strcpy((char *)v11, "Buffering on AP awake could not be enabled");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v13, (uint64_t)&v11);
  if (SHIBYTE(v12) < 0) {
    operator delete(v11);
  }
  if (v10) {
    dispatch_release(v10);
  }
  if (v9) {
    _Block_release(v9);
  }
}

void sub_1A61BA6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1A61BA6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal16finishStart_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE20ETLDIAGLoggingMaskID_block_invoke_69(void *a1, int a2)
{
  uint64_t v2 = a1[4];
  if (a2)
  {
    uint64_t v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopped DIAG transport because QDSS is active", buf, 2u);
    }
    return;
  }
  uint64_t v5 = (const void *)a1[7];
  if (!v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a1[8];
    uint64_t v10 = 0;
    uint64_t v11 = v7;
    if (!v7) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v6 = _Block_copy(v5);
  uint64_t v7 = a1[8];
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  if (v7) {
LABEL_6:
  }
    dispatch_retain(v7);
LABEL_7:
  std::string __p = operator new(0x20uLL);
  long long v9 = xmmword_1A61F71E0;
  strcpy((char *)__p, "Error stopping configurer");
  diag::Service::Internal::changeStateAndNotify_sync(v2, 4u, (uint64_t)&v10, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  if (v7) {
    dispatch_release(v7);
  }
  if (v6) {
    _Block_release(v6);
  }
}

void sub_1A61BA828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4diag7Service8Internal4stopEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Stop", buf, 2u);
  }
  uint64_t v4 = *(void *)(v2 + 216);
  if (v4)
  {
    char v29 = 0;
    LOBYTE(v28) = 0;
    diag::DIAGReaderManager::pushInfo(v4, 6, (uint64_t)&v28);
    if (v29 < 0) {
      operator delete(v28);
    }
  }
  *(unsigned char *)(v2 + 444) = 0;
  *(unsigned char *)(v2 + 447) = *(unsigned char *)(a1 + 72);
  memset(buf, 170, sizeof(buf));
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, *(const __CFDictionary **)(v2 + 208));
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v30, "Enabled");
  int Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)buf, v30);
  MEMORY[0x1A62748E0](&v30);
  if (*(unsigned char *)(v2 + 456))
  {
    uint64_t v6 = *(void *)(v2 + 232);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN4diag7Service8Internal4stopEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke_78;
    aBlock[3] = &__block_descriptor_tmp_82_1;
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 48);
    aBlock[4] = v2;
    void aBlock[5] = v8;
    long long v21 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v9 = *(void **)(a1 + 56);
    if (v9) {
      long long v9 = _Block_copy(v9);
    }
    uint64_t v10 = *(NSObject **)(a1 + 64);
    long long v22 = v9;
    dispatch_object_t v23 = v10;
    if (v10) {
      dispatch_retain(v10);
    }
    char v24 = Bool;
    uint64_t v11 = _Block_copy(aBlock);
    long long v12 = *(NSObject **)(v2 + 88);
    if (v12) {
      dispatch_retain(v12);
    }
    std::string v25 = v11;
    dispatch_object_t object = v12;
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 120))(v6, &v25);
    if (object) {
      dispatch_release(object);
    }
    if (v25) {
      _Block_release(v25);
    }
    if (v23) {
      dispatch_release(v23);
    }
    if (v22) {
      _Block_release(v22);
    }
    uint64_t v13 = v21;
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    return MEMORY[0x1A6274930](buf);
  }
  std::string::size_type v14 = *(const void **)(a1 + 56);
  if (!v14)
  {
    size_t v15 = 0;
    char v16 = *(NSObject **)(a1 + 64);
    uint64_t v18 = 0;
    long long v19 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  size_t v15 = _Block_copy(v14);
  char v16 = *(NSObject **)(a1 + 64);
  uint64_t v18 = v15;
  long long v19 = v16;
  if (v16) {
LABEL_28:
  }
    dispatch_retain(v16);
LABEL_29:
  diag::Service::Internal::prepareStop_sync(v2, (uint64_t)&v18, Bool ^ 1);
  if (v16) {
    dispatch_release(v16);
  }
  if (v15) {
    _Block_release(v15);
  }
  return MEMORY[0x1A6274930](buf);
}

void sub_1A61BAB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a9);
  MEMORY[0x1A6274930](v9 - 96);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal4stopEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke_78(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    *(unsigned char *)(v3 + 456) = 0;
    uint64_t v4 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEFAULT, "#I Buffering was disabled for stopping", buf, 2u);
    }
    uint64_t v5 = *(const void **)(a1 + 56);
    if (v5)
    {
      uint64_t v6 = _Block_copy(v5);
      uint64_t v7 = *(NSObject **)(a1 + 64);
      size_t v15 = v6;
      char v16 = v7;
      if (!v7)
      {
LABEL_7:
        diag::Service::Internal::prepareStop_sync(v3, (uint64_t)&v15, *(unsigned char *)(a1 + 72) == 0);
        if (v7) {
          dispatch_release(v7);
        }
        if (v6) {
          _Block_release(v6);
        }
        return;
      }
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = *(NSObject **)(a1 + 64);
      size_t v15 = 0;
      char v16 = v7;
      if (!v7) {
        goto LABEL_7;
      }
    }
    dispatch_retain(v7);
    goto LABEL_7;
  }
  uint64_t v8 = *(const void **)(a1 + 56);
  if (!v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(NSObject **)(a1 + 64);
    uint64_t v13 = 0;
    std::string::size_type v14 = v10;
    if (!v10) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v9 = _Block_copy(v8);
  uint64_t v10 = *(NSObject **)(a1 + 64);
  uint64_t v13 = v9;
  std::string::size_type v14 = v10;
  if (v10) {
LABEL_13:
  }
    dispatch_retain(v10);
LABEL_14:
  std::string __p = operator new(0x28uLL);
  long long v12 = xmmword_1A61F8A10;
  strcpy((char *)__p, "Can not stop with buffering enabled");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v13, (uint64_t)&__p);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  if (v10) {
    dispatch_release(v10);
  }
  if (v9) {
    _Block_release(v9);
  }
}

void sub_1A61BAD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1A61BAD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A61BAD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void diag::Service::Internal::prepareStop_sync(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v5 = *(_DWORD *)(a1 + 460);
  if (v5 == 1)
  {
    *(_DWORD *)(a1 + 460) = 3;
    uint64_t v6 = *(void *)(a1 + 216);
    if (!v6) {
      goto LABEL_31;
    }
    uint64_t v8 = *(void **)(v6 + 16);
    uint64_t v9 = (void *)(v6 + 24);
    if (v8 != (void *)(v6 + 24))
    {
      do
      {
        uint64_t v10 = *(void *)(*(void *)(*(void *)(v8[5] + 16) + 24) + 336);
        usleep(0x7A120u);
        uint64_t v11 = *(void *)(*(void *)(*(void *)(v8[5] + 16) + 24) + 336);
        if (v10 != v11)
        {
          usleep(0x7A120u);
          if (v11 != *(void *)(*(void *)(*(void *)(v8[5] + 16) + 24) + 336)) {
            usleep(0x7A120u);
          }
        }
        long long v12 = (void *)v8[1];
        if (v12)
        {
          do
          {
            uint64_t v13 = v12;
            long long v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v13 = (void *)v8[2];
            BOOL v14 = *v13 == (void)v8;
            uint64_t v8 = v13;
          }
          while (!v14);
        }
        uint64_t v8 = v13;
      }
      while (v13 != v9);
      uint64_t v17 = *(void *)(a1 + 216);
      uint64_t v18 = *(void **)(v17 + 16);
      long long v19 = (void *)(v17 + 24);
      if (v18 != (void *)(v17 + 24))
      {
        do
        {
          diag::DIAGReader::stop((diag::DIAGReader *)v18[5]);
          std::string v35 = (void *)v18[1];
          if (v35)
          {
            do
            {
              char v36 = v35;
              std::string v35 = (void *)*v35;
            }
            while (v35);
          }
          else
          {
            do
            {
              char v36 = (void *)v18[2];
              BOOL v14 = *v36 == (void)v18;
              uint64_t v18 = v36;
            }
            while (!v14);
          }
          uint64_t v18 = v36;
        }
        while (v36 != v19);
      }
    }
    if (!a3) {
      goto LABEL_31;
    }
    uint64_t v20 = *(void *)(a1 + 216);
    long long v21 = *(void **)(v20 + 16);
    long long v22 = (void *)(v20 + 24);
    if (v21 != (void *)(v20 + 24))
    {
      do
      {
        diag::DIAGReader::shutdown((diag::DIAGReader *)v21[5]);
        uint64_t v37 = (void *)v21[1];
        if (v37)
        {
          do
          {
            size_t v38 = v37;
            uint64_t v37 = (void *)*v37;
          }
          while (v37);
        }
        else
        {
          do
          {
            size_t v38 = (void *)v21[2];
            BOOL v14 = *v38 == (void)v21;
            long long v21 = v38;
          }
          while (!v14);
        }
        long long v21 = v38;
      }
      while (v38 != v22);
    }
    dispatch_object_t v23 = *(std::__shared_weak_count **)(a1 + 224);
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0;
    if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    char v24 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_debug_impl(&dword_1A609F000, v24, OS_LOG_TYPE_DEBUG, "#D Reader released", buf, 2u);
      uint64_t v26 = *(void *)(a1 + 72);
      std::string v25 = *(std::__shared_weak_count **)(a1 + 80);
      *(void *)std::string buf = v26;
      if (!v25) {
        goto LABEL_71;
      }
    }
    else
    {
LABEL_31:
      uint64_t v26 = *(void *)(a1 + 72);
      std::string v25 = *(std::__shared_weak_count **)(a1 + 80);
      *(void *)std::string buf = v26;
      if (!v25) {
        goto LABEL_71;
      }
    }
    uint64_t v27 = std::__shared_weak_count::lock(v25);
    uint64_t v50 = v27;
    if (v27)
    {
      uint64_t v28 = *(void *)(a1 + 232);
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN4diag7Service8Internal16prepareStop_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke;
      aBlock[3] = &__block_descriptor_tmp_96_0;
      aBlock[4] = a1;
      void aBlock[5] = v26;
      dispatch_object_t v44 = v27;
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      char v29 = *(void **)a2;
      if (*(void *)a2) {
        char v29 = _Block_copy(v29);
      }
      CFStringRef v30 = *(NSObject **)(a2 + 8);
      long long v45 = v29;
      dispatch_object_t object = v30;
      if (v30) {
        dispatch_retain(v30);
      }
      uint64_t v31 = _Block_copy(aBlock);
      unsigned int v32 = *(NSObject **)(a1 + 88);
      if (v32) {
        dispatch_retain(v32);
      }
      uint64_t v47 = v31;
      dispatch_object_t v48 = v32;
      (*(void (**)(uint64_t, const void **))(*(void *)v28 + 80))(v28, &v47);
      if (v48) {
        dispatch_release(v48);
      }
      if (v47) {
        _Block_release(v47);
      }
      if (object) {
        dispatch_release(object);
      }
      if (v45) {
        _Block_release(v45);
      }
      std::string v33 = v44;
      if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      int v34 = v50;
      if (v50)
      {
        if (!atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      return;
    }
LABEL_71:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  if (!*(void *)a2)
  {
    size_t v15 = 0;
    char v16 = *(NSObject **)(a2 + 8);
    uint64_t v41 = 0;
    dispatch_object_t v42 = v16;
    if (!v16) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  size_t v15 = _Block_copy(*(const void **)a2);
  char v16 = *(NSObject **)(a2 + 8);
  uint64_t v41 = v15;
  dispatch_object_t v42 = v16;
  if (v16) {
LABEL_17:
  }
    dispatch_retain(v16);
LABEL_18:
  char v40 = 0;
  LOBYTE(__p) = 0;
  diag::Service::Internal::changeStateAndNotify_sync(a1, v5, (uint64_t)&v41, (uint64_t)&__p);
  if (v40 < 0) {
    operator delete(__p);
  }
  if (v16) {
    dispatch_release(v16);
  }
  if (v15) {
    _Block_release(v15);
  }
}

void sub_1A61BB23C(_Unwind_Exception *a1)
{
  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v3 - 96);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v2);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v3 - 80);
  _Unwind_Resume(a1);
}

void sub_1A61BB26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal16prepareStop_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke(capabilities::diag *a1, int a2)
{
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (a2)
  {
    if (v3[52] && capabilities::diag::supportsMultipleMasks(a1))
    {
      uint64_t v4 = v3[29];
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN4diag7Service8Internal16prepareStop_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke_2;
      aBlock[3] = &__block_descriptor_tmp_92_1;
      uint64_t v6 = *((void *)a1 + 5);
      unsigned int v5 = (std::__shared_weak_count *)*((void *)a1 + 6);
      aBlock[4] = v3;
      void aBlock[5] = v6;
      std::string v25 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v7 = (void *)*((void *)a1 + 7);
      if (v7) {
        uint64_t v7 = _Block_copy(v7);
      }
      uint64_t v8 = *((void *)a1 + 8);
      uint64_t v26 = v7;
      dispatch_object_t object = v8;
      if (v8) {
        dispatch_retain(v8);
      }
      uint64_t v9 = _Block_copy(aBlock);
      uint64_t v10 = v3[11];
      if (v10) {
        dispatch_retain(v10);
      }
      uint64_t v28 = v9;
      dispatch_object_t v29 = v10;
      (*(void (**)(uint64_t, uint64_t, const void **))(*(void *)v4 + 136))(v4, 2, &v28);
      if (v29) {
        dispatch_release(v29);
      }
      if (v28) {
        _Block_release(v28);
      }
      if (object) {
        dispatch_release(object);
      }
      if (v26) {
        _Block_release(v26);
      }
      uint64_t v11 = v25;
      if (v25)
      {
        if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      return;
    }
    size_t v15 = (const void *)*((void *)a1 + 7);
    if (v15)
    {
      char v16 = _Block_copy(v15);
      uint64_t v17 = *((void *)a1 + 8);
      long long v22 = v16;
      dispatch_object_t v23 = v17;
      if (!v17)
      {
LABEL_35:
        diag::Service::Internal::finishStop_sync((uint64_t)v3, (uint64_t)&v22, 0);
        if (v17) {
          dispatch_release(v17);
        }
        if (v16) {
          _Block_release(v16);
        }
        return;
      }
    }
    else
    {
      char v16 = 0;
      uint64_t v17 = *((void *)a1 + 8);
      long long v22 = 0;
      dispatch_object_t v23 = v17;
      if (!v17) {
        goto LABEL_35;
      }
    }
    dispatch_retain(v17);
    goto LABEL_35;
  }
  long long v12 = (const void *)*((void *)a1 + 7);
  if (!v12)
  {
    uint64_t v13 = 0;
    BOOL v14 = *((void *)a1 + 8);
    uint64_t v20 = 0;
    long long v21 = v14;
    if (!v14) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v13 = _Block_copy(v12);
  BOOL v14 = *((void *)a1 + 8);
  uint64_t v20 = v13;
  long long v21 = v14;
  if (v14) {
LABEL_25:
  }
    dispatch_retain(v14);
LABEL_26:
  char v19 = 14;
  strcpy((char *)__p, "Error stopping");
  diag::Service::Internal::changeStateAndNotify_sync((uint64_t)v3, 4u, (uint64_t)&v20, (uint64_t)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v14) {
    dispatch_release(v14);
  }
  if (v13) {
    _Block_release(v13);
  }
}

void sub_1A61BB558(_Unwind_Exception *a1)
{
  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v3 - 64);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v2);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1A61BB590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A61BB5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal16prepareStop_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke_2(void *a1, int a2)
{
  uint64_t v3 = a1[4];
  if (a2)
  {
    v35.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
    v35.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
    v35.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
    uint64_t v4 = BasebandTransport::operator*(*(void *)(v3 + 288));
    uint64_t v5 = *(void *)(v3 + 416);
    *(void *)(v3 + 424) = v4;
    *(void *)(v3 + 432) = v5;
    *(_DWORD *)(v3 + 440) = 2;
    if (ETLDIAGLoggingUnconfigure())
    {
      uint64_t v6 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_debug_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEBUG, "#D Sleep DMC un-configured", buf, 2u);
      }
      uint64_t v7 = *(void *)(v3 + 232);
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN4diag7Service8Internal16prepareStop_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke_86;
      aBlock[3] = &__block_descriptor_tmp_89_1;
      uint64_t v9 = a1[5];
      uint64_t v8 = (std::__shared_weak_count *)a1[6];
      aBlock[4] = v3;
      void aBlock[5] = v9;
      dispatch_object_t v29 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = (void *)a1[7];
      if (v10) {
        uint64_t v10 = _Block_copy(v10);
      }
      uint64_t v11 = a1[8];
      CFStringRef v30 = v10;
      dispatch_object_t object = v11;
      if (v11) {
        dispatch_retain(v11);
      }
      long long v12 = _Block_copy(aBlock);
      uint64_t v13 = *(NSObject **)(v3 + 88);
      if (v13) {
        dispatch_retain(v13);
      }
      unsigned int v32 = v12;
      dispatch_object_t v33 = v13;
      (*(void (**)(uint64_t, uint64_t, const void **))(*(void *)v7 + 136))(v7, 1, &v32);
      if (v33) {
        dispatch_release(v33);
      }
      if (v32) {
        _Block_release(v32);
      }
      if (object) {
        dispatch_release(object);
      }
      if (v30) {
        _Block_release(v30);
      }
      BOOL v14 = v29;
      if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
LABEL_49:
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      return;
    }
    uint64_t v18 = (const void *)a1[7];
    if (v18)
    {
      char v19 = _Block_copy(v18);
      uint64_t v20 = a1[8];
      uint64_t v26 = v19;
      uint64_t v27 = v20;
      if (!v20)
      {
LABEL_36:
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v25, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
        }
        else {
          std::string v25 = v35;
        }
        diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v26, (uint64_t)&v25);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v25.__r_.__value_.__l.__data_);
        }
        if (v20) {
          dispatch_release(v20);
        }
        if (v19) {
          _Block_release(v19);
        }
        goto LABEL_49;
      }
    }
    else
    {
      char v19 = 0;
      uint64_t v20 = a1[8];
      uint64_t v26 = 0;
      uint64_t v27 = v20;
      if (!v20) {
        goto LABEL_36;
      }
    }
    dispatch_retain(v20);
    goto LABEL_36;
  }
  size_t v15 = (const void *)a1[7];
  if (!v15)
  {
    char v16 = 0;
    uint64_t v17 = a1[8];
    dispatch_object_t v23 = 0;
    char v24 = v17;
    if (!v17) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  char v16 = _Block_copy(v15);
  uint64_t v17 = a1[8];
  dispatch_object_t v23 = v16;
  char v24 = v17;
  if (v17) {
LABEL_26:
  }
    dispatch_retain(v17);
LABEL_27:
  std::string __p = operator new(0x28uLL);
  long long v22 = xmmword_1A61F8010;
  strcpy((char *)__p, "Error switching to sleep logging mask");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v23, (uint64_t)&__p);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p);
  }
  if (v17) {
    dispatch_release(v17);
  }
  if (v16) {
    _Block_release(v16);
  }
}

void sub_1A61BB950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a24);
  if (*(char *)(v24 - 49) < 0) {
    operator delete(*(void **)(v24 - 72));
  }
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal16prepareStop_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke_86(void *a1, int a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = (const void *)a1[7];
  if (a2)
  {
    if (v4)
    {
      uint64_t v5 = _Block_copy(v4);
      uint64_t v6 = a1[8];
      uint64_t v13 = v5;
      BOOL v14 = v6;
      if (!v6)
      {
LABEL_5:
        diag::Service::Internal::finishStop_sync(v3, (uint64_t)&v13, 1);
        if (v6) {
          dispatch_release(v6);
        }
        if (v5) {
          _Block_release(v5);
        }
        return;
      }
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = a1[8];
      uint64_t v13 = 0;
      BOOL v14 = v6;
      if (!v6) {
        goto LABEL_5;
      }
    }
    dispatch_retain(v6);
    goto LABEL_5;
  }
  if (!v4)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a1[8];
    uint64_t v11 = 0;
    long long v12 = v8;
    if (!v8) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v7 = _Block_copy(v4);
  uint64_t v8 = a1[8];
  uint64_t v11 = v7;
  long long v12 = v8;
  if (v8) {
LABEL_11:
  }
    dispatch_retain(v8);
LABEL_12:
  std::string __p = operator new(0x28uLL);
  long long v10 = xmmword_1A61F9A00;
  strcpy((char *)__p, "Error switching to merged logging mask");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v11, (uint64_t)&__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p);
  }
  if (v8) {
    dispatch_release(v8);
  }
  if (v7) {
    _Block_release(v7);
  }
}

void sub_1A61BBB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1A61BBB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A61BBB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void diag::Service::Internal::finishStop_sync(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(void *)(a1 + 408)) {
    goto LABEL_23;
  }
  v33.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  v33.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
  v33.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
  uint64_t v6 = BasebandTransport::operator*(*(void *)(a1 + 288));
  uint64_t v7 = *(void *)(a1 + 408);
  *(void *)(a1 + 424) = v6;
  *(void *)(a1 + 432) = v7;
  *(_DWORD *)(a1 + 440) = a3;
  int v8 = ETLDIAGLoggingUnconfigure();
  char v9 = v8;
  if (v8)
  {
    long long v10 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_debug_impl(&dword_1A609F000, v10, OS_LOG_TYPE_DEBUG, "#D Merged DMC un-configured", buf, 2u);
    }
    goto LABEL_19;
  }
  if (!*(void *)a2)
  {
    uint64_t v11 = 0;
    long long v12 = *(NSObject **)(a2 + 8);
    CFStringRef v30 = 0;
    uint64_t v31 = v12;
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v11 = _Block_copy(*(const void **)a2);
  long long v12 = *(NSObject **)(a2 + 8);
  CFStringRef v30 = v11;
  uint64_t v31 = v12;
  if (v12) {
LABEL_7:
  }
    dispatch_retain(v12);
LABEL_8:
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v29, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  }
  else {
    std::string v29 = v33;
  }
  diag::Service::Internal::changeStateAndNotify_sync(a1, 4u, (uint64_t)&v30, (uint64_t)&v29);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (v12) {
    dispatch_release(v12);
  }
  if (v11) {
    _Block_release(v11);
  }
LABEL_19:
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v33.__r_.__value_.__l.__data_);
    if ((v9 & 1) == 0) {
      return;
    }
  }
  else if ((v9 & 1) == 0)
  {
    return;
  }
LABEL_23:
  std::string::size_type v14 = *(void *)(a1 + 72);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 80);
  v33.__r_.__value_.__r.__words[0] = v14;
  if (!v13
    || (size_t v15 = std::__shared_weak_count::lock(v13), (v33.__r_.__value_.__l.__size_ = (std::string::size_type)v15) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v16 = *(void *)(a1 + 232);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4diag7Service8Internal15finishStop_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE20ETLDIAGLoggingMaskID_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_100;
  aBlock[4] = a1;
  void aBlock[5] = v14;
  uint64_t v24 = v15;
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v17 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v17 = _Block_copy(v17);
  }
  uint64_t v18 = *(NSObject **)(a2 + 8);
  std::string v25 = v17;
  dispatch_object_t v26 = v18;
  if (v18) {
    dispatch_retain(v18);
  }
  char v19 = _Block_copy(aBlock);
  uint64_t v20 = *(NSObject **)(a1 + 88);
  if (v20) {
    dispatch_retain(v20);
  }
  uint64_t v27 = v19;
  dispatch_object_t object = v20;
  (*(void (**)(uint64_t, void **))(*(void *)v16 + 88))(v16, &v27);
  if (object) {
    dispatch_release(object);
  }
  if (v27) {
    _Block_release(v27);
  }
  if (v26) {
    dispatch_release(v26);
  }
  if (v25) {
    _Block_release(v25);
  }
  long long v21 = v24;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  int64_t size = (std::__shared_weak_count *)v33.__r_.__value_.__l.__size_;
  if (v33.__r_.__value_.__l.__size_)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v33.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_1A61BBEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v26 - 96);
  if (*(char *)(v26 - 49) < 0)
  {
    operator delete(*(void **)(v26 - 72));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal15finishStop_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE20ETLDIAGLoggingMaskID_block_invoke(void *a1, int a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = (const void *)a1[7];
  if (a2)
  {
    if (v4)
    {
      uint64_t v5 = _Block_copy(v4);
      uint64_t v6 = a1[8];
      std::string::size_type v14 = v5;
      size_t v15 = v6;
      if (!v6)
      {
LABEL_5:
        char v13 = 0;
        LOBYTE(__p) = 0;
        diag::Service::Internal::changeStateAndNotify_sync(v3, 0, (uint64_t)&v14, (uint64_t)&__p);
        if (v13 < 0) {
          operator delete(__p);
        }
        if (v6) {
          dispatch_release(v6);
        }
        if (v5) {
          _Block_release(v5);
        }
        return;
      }
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = a1[8];
      std::string::size_type v14 = 0;
      size_t v15 = v6;
      if (!v6) {
        goto LABEL_5;
      }
    }
    dispatch_retain(v6);
    goto LABEL_5;
  }
  if (!v4)
  {
    uint64_t v7 = 0;
    int v8 = a1[8];
    long long v10 = 0;
    uint64_t v11 = v8;
    if (!v8) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v7 = _Block_copy(v4);
  int v8 = a1[8];
  long long v10 = v7;
  uint64_t v11 = v8;
  if (v8) {
LABEL_13:
  }
    dispatch_retain(v8);
LABEL_14:
  HIBYTE(v9[2]) = 21;
  strcpy((char *)v9, "Error completing stop");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v10, (uint64_t)v9);
  if (SHIBYTE(v9[2]) < 0) {
    operator delete(v9[0]);
  }
  if (v8) {
    dispatch_release(v8);
  }
  if (v7) {
    _Block_release(v7);
  }
}

void sub_1A61BC0C0(_Unwind_Exception *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, ...)
{
  va_start(va, a7);
  if (a7 < 0) {
    operator delete(a2);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal5sleepEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(NSObject **)(v2 + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Sleep", buf, 2u);
  }
  if (capabilities::diag::supportedDuringAPSleep((capabilities::diag *)v4))
  {
    v40[0] = 0xAAAAAAAAAAAAAAAALL;
    v40[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v40, *(const __CFDictionary **)(v2 + 208));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, diag::config::kEnabledDuringSleepKey[0]);
    int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v40, *(const __CFString **)buf);
    uint64_t v6 = (capabilities::diag *)MEMORY[0x1A62748E0](buf);
    if (Int)
    {
      int v7 = capabilities::diag::preferredInterface(v6);
      int v8 = (void *)a1[5];
      if (v8)
      {
        int v8 = _Block_copy(v8);
        char v9 = v8;
        long long v10 = a1[6];
        aBlocunint64_t k = v8;
        std::string v35 = v10;
        if (!v10) {
          goto LABEL_8;
        }
      }
      else
      {
        char v9 = 0;
        long long v10 = a1[6];
        aBlocunint64_t k = 0;
        std::string v35 = v10;
        if (!v10)
        {
LABEL_8:
          BOOL v11 = v7 != 8;
          unsigned int v12 = *(_DWORD *)(v2 + 460);
          if (v12 == 1)
          {
            uint64_t v13 = *(void *)(v2 + 448);
            *(_DWORD *)(v2 + 460) = 3;
            if (Int != 1
              && *(void *)(v2 + 416)
              && capabilities::diag::supportsMultipleMasks((capabilities::diag *)v8))
            {
              size_t v15 = *(void **)(v2 + 72);
              std::string::size_type v14 = *(std::__shared_weak_count **)(v2 + 80);
              dispatch_object_t v54 = v15;
              if (!v14 || (uint64_t v16 = std::__shared_weak_count::lock(v14), (v55 = v16) == 0)) {
                std::__throw_bad_weak_ptr[abi:ne180100]();
              }
              uint64_t v17 = *(void *)(v2 + 232);
              *(void *)std::string buf = MEMORY[0x1E4F143A8];
              uint64_t v42 = 1174405120;
              unint64_t v43 = ___ZN4diag7Service8Internal17prepareSleep_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEbbN12capabilities4diag15BufferingParamsE_block_invoke;
              dispatch_object_t v44 = &__block_descriptor_tmp_108_0;
              uint64_t v45 = v2;
              char v46 = v15;
              uint64_t v47 = v16;
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
              if (v9) {
                uint64_t v18 = _Block_copy(v9);
              }
              else {
                uint64_t v18 = 0;
              }
              dispatch_object_t v48 = v18;
              dispatch_object_t object = v10;
              if (v10) {
                dispatch_retain(v10);
              }
              BOOL v51 = v11;
              uint64_t v50 = v13;
              uint64_t v26 = _Block_copy(buf);
              uint64_t v27 = *(NSObject **)(v2 + 88);
              if (v27) {
                dispatch_retain(v27);
              }
              uint64_t v52 = v26;
              dispatch_object_t v53 = v27;
              (*(void (**)(uint64_t, uint64_t, const void **))(*(void *)v17 + 136))(v17, 2, &v52);
              if (v53) {
                dispatch_release(v53);
              }
              if (v52) {
                _Block_release(v52);
              }
              if (object) {
                dispatch_release(object);
              }
              if (v48) {
                _Block_release(v48);
              }
              uint64_t v28 = v47;
              if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
              std::string v29 = v55;
              if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
              long long v10 = v35;
              if (!v35) {
                goto LABEL_57;
              }
LABEL_56:
              dispatch_release(v10);
LABEL_57:
              if (aBlock) {
                _Block_release(aBlock);
              }
LABEL_59:
              MEMORY[0x1A6274930](v40);
              return;
            }
            if (v9) {
              char v9 = _Block_copy(v9);
            }
            *(void *)std::string buf = v9;
            uint64_t v42 = (uint64_t)v10;
            if (v10) {
              dispatch_retain(v10);
            }
            diag::Service::Internal::sleep_sync(v2, (uint64_t)buf, v7 != 8, v13);
            if (v10) {
              dispatch_release(v10);
            }
            if (v9) {
              _Block_release(v9);
            }
LABEL_55:
            if (!v10) {
              goto LABEL_57;
            }
            goto LABEL_56;
          }
          if (v9)
          {
            std::string v25 = _Block_copy(v9);
            dispatch_object_t v54 = v25;
            uint64_t v55 = (std::__shared_weak_count *)v10;
            if (!v10)
            {
LABEL_39:
              HIBYTE(v43) = 0;
              buf[0] = 0;
              diag::Service::Internal::changeStateAndNotify_sync(v2, v12, (uint64_t)&v54, (uint64_t)buf);
              if (SHIBYTE(v43) < 0) {
                operator delete(*(void **)buf);
              }
              if (v10) {
                dispatch_release(v10);
              }
              if (v25) {
                _Block_release(v25);
              }
              goto LABEL_55;
            }
          }
          else
          {
            std::string v25 = 0;
            dispatch_object_t v54 = 0;
            uint64_t v55 = (std::__shared_weak_count *)v10;
            if (!v10) {
              goto LABEL_39;
            }
          }
          dispatch_retain(v10);
          goto LABEL_39;
        }
      }
      dispatch_retain(v10);
      goto LABEL_8;
    }
    long long v22 = (const void *)a1[5];
    if (v22)
    {
      dispatch_object_t v23 = _Block_copy(v22);
      uint64_t v24 = a1[6];
      size_t v38 = v23;
      size_t v39 = v24;
      if (!v24)
      {
LABEL_30:
        char v36 = operator new(0x20uLL);
        long long v37 = xmmword_1A61F7570;
        strcpy((char *)v36, "DIAG During AP Sleep is OFF");
        diag::Service::Internal::changeStateAndNotify_sync(v2, 4u, (uint64_t)&v38, (uint64_t)&v36);
        if (SHIBYTE(v37) < 0) {
          operator delete(v36);
        }
        if (v24) {
          dispatch_release(v24);
        }
        if (v23) {
          _Block_release(v23);
        }
        goto LABEL_59;
      }
    }
    else
    {
      dispatch_object_t v23 = 0;
      uint64_t v24 = a1[6];
      size_t v38 = 0;
      size_t v39 = v24;
      if (!v24) {
        goto LABEL_30;
      }
    }
    dispatch_retain(v24);
    goto LABEL_30;
  }
  char v19 = (const void *)a1[5];
  if (!v19)
  {
    uint64_t v20 = 0;
    long long v21 = a1[6];
    unsigned int v32 = 0;
    std::string v33 = v21;
    if (!v21) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v20 = _Block_copy(v19);
  long long v21 = a1[6];
  unsigned int v32 = v20;
  std::string v33 = v21;
  if (v21) {
LABEL_18:
  }
    dispatch_retain(v21);
LABEL_19:
  std::string __p = operator new(0x28uLL);
  long long v31 = xmmword_1A61F8010;
  strcpy((char *)__p, "DIAG During AP Sleep is NOT supported");
  diag::Service::Internal::changeStateAndNotify_sync(v2, 4u, (uint64_t)&v32, (uint64_t)&__p);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p);
  }
  if (v21) {
    dispatch_release(v21);
  }
  if (v20) {
    _Block_release(v20);
  }
}

void sub_1A61BC670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v30 - 112);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v29);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v28);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v30 - 96);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a14);
  MEMORY[0x1A6274930](&a21);
  _Unwind_Resume(a1);
}

void sub_1A61BC6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a21 < 0)
  {
    operator delete(__p);
    dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a22);
    MEMORY[0x1A6274930](&a24);
    _Unwind_Resume(a1);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a22);
  MEMORY[0x1A6274930](&a24);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal17prepareSleep_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEbbN12capabilities4diag15BufferingParamsE_block_invoke(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  BOOL v4 = *(const void **)(a1 + 56);
  if (a2)
  {
    if (v4)
    {
      uint64_t v5 = _Block_copy(v4);
      uint64_t v6 = *(NSObject **)(a1 + 64);
      uint64_t v13 = v5;
      std::string::size_type v14 = v6;
      if (!v6)
      {
LABEL_5:
        diag::Service::Internal::sleep_sync(v3, (uint64_t)&v13, *(unsigned char *)(a1 + 80), *(void *)(a1 + 72));
        if (v6) {
          dispatch_release(v6);
        }
        if (v5) {
          _Block_release(v5);
        }
        return;
      }
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = *(NSObject **)(a1 + 64);
      uint64_t v13 = 0;
      std::string::size_type v14 = v6;
      if (!v6) {
        goto LABEL_5;
      }
    }
    dispatch_retain(v6);
    goto LABEL_5;
  }
  if (!v4)
  {
    int v7 = 0;
    int v8 = *(NSObject **)(a1 + 64);
    BOOL v11 = 0;
    unsigned int v12 = v8;
    if (!v8) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  int v7 = _Block_copy(v4);
  int v8 = *(NSObject **)(a1 + 64);
  BOOL v11 = v7;
  unsigned int v12 = v8;
  if (v8) {
LABEL_11:
  }
    dispatch_retain(v8);
LABEL_12:
  std::string __p = operator new(0x28uLL);
  long long v10 = xmmword_1A61F8010;
  strcpy((char *)__p, "Error switching to sleep logging mask");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v11, (uint64_t)&__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p);
  }
  if (v8) {
    dispatch_release(v8);
  }
  if (v7) {
    _Block_release(v7);
  }
}

void sub_1A61BC924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1A61BC948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A61BC95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void diag::Service::Internal::sleep_sync(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 445)) {
    goto LABEL_60;
  }
  int v8 = *(NSObject **)(a1 + 40);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1A609F000, v8, OS_LOG_TYPE_DEFAULT, "#I Unconfiguring ADPL", (uint8_t *)&buf, 2u);
  }
  uint64_t v10 = *(void *)(a1 + 288);
  int v56 = 2;
  char v57 = 0;
  uint64_t v58 = 10;
  shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)v9);
  if (shouldUseMinBasebandTransportIOReadSize) {
    int v12 = 0x4000;
  }
  else {
    int v12 = 0x8000;
  }
  int v59 = v12;
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize)) {
    int v13 = 4;
  }
  else {
    int v13 = 16;
  }
  int v60 = v13;
  uint64_t v61 = 0;
  char v62 = 0;
  aBlocunint64_t k = 0;
  int v14 = (*(uint64_t (**)(uint64_t, int *, void **))(*(void *)v10 + 48))(v10, &v56, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (!v14)
  {
    uint64_t v16 = (char *)operator new(0x38uLL);
    strcpy(v16, "Failed to open DIAG transport to unconfigure ADPL");
    uint64_t v17 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
      _os_log_error_impl(&dword_1A609F000, v17, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      uint64_t v18 = *(const void **)a2;
      if (*(void *)a2)
      {
LABEL_18:
        char v19 = _Block_copy(v18);
        uint64_t v20 = *(NSObject **)(a2 + 8);
        uint64_t v50 = v19;
        BOOL v51 = v20;
        if (!v20)
        {
LABEL_20:
          std::string::__init_copy_ctor_external(&v49, v16, 0x31uLL);
          diag::Service::Internal::changeStateAndNotify_sync(a1, 4u, (uint64_t)&v50, (uint64_t)&v49);
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v49.__r_.__value_.__l.__data_);
          }
          if (v20) {
            dispatch_release(v20);
          }
          if (v19) {
            _Block_release(v19);
          }
          long long v21 = v16;
          goto LABEL_59;
        }
LABEL_19:
        dispatch_retain(v20);
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v18 = *(const void **)a2;
      if (*(void *)a2) {
        goto LABEL_18;
      }
    }
    char v19 = 0;
    uint64_t v20 = *(NSObject **)(a2 + 8);
    uint64_t v50 = 0;
    BOOL v51 = v20;
    if (!v20) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  memset(&buf, 0, sizeof(buf));
  BasebandTransport::operator*(*(void *)(a1 + 288));
  if (ETLADPLLoggingEnable())
  {
    size_t v15 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v63.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1A609F000, v15, OS_LOG_TYPE_DEFAULT, "#I Success unconfiguring ADPL", (uint8_t *)&v63, 2u);
    }
    goto LABEL_55;
  }
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v63.__r_.__value_.__r.__words[1] = xmmword_1A61F7580;
  strcpy(v63.__r_.__value_.__l.__data_, "Failed to unconfigure ADPL: ");
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string buf = &buf;
  }
  else {
    p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = buf.__r_.__value_.__l.__size_;
  }
  uint64_t v24 = std::string::append(&v63, (const std::string::value_type *)p_buf, size);
  std::string::size_type v25 = v24->__r_.__value_.__r.__words[0];
  v64[0] = v24->__r_.__value_.__l.__size_;
  *(void *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
  char v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  buf.__r_.__value_.__r.__words[0] = v25;
  buf.__r_.__value_.__l.__size_ = v64[0];
  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v64 + 7);
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = v26;
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v63.__r_.__value_.__l.__data_);
    uint64_t v27 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
LABEL_37:
      uint64_t v28 = *(const void **)a2;
      if (*(void *)a2) {
        goto LABEL_38;
      }
LABEL_46:
      uint64_t v29 = 0;
      uint64_t v30 = *(NSObject **)(a2 + 8);
      dispatch_object_t v53 = 0;
      dispatch_object_t v54 = v30;
      if (!v30) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v27 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      goto LABEL_37;
    }
  }
  long long v31 = &buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v31 = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  LODWORD(v63.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)v63.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
  _os_log_error_impl(&dword_1A609F000, v27, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v63, 0xCu);
  uint64_t v28 = *(const void **)a2;
  if (!*(void *)a2) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v29 = _Block_copy(v28);
  uint64_t v30 = *(NSObject **)(a2 + 8);
  dispatch_object_t v53 = v29;
  dispatch_object_t v54 = v30;
  if (v30) {
LABEL_39:
  }
    dispatch_retain(v30);
LABEL_40:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v52, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else {
    std::string v52 = buf;
  }
  diag::Service::Internal::changeStateAndNotify_sync(a1, 4u, (uint64_t)&v53, (uint64_t)&v52);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (v30) {
    dispatch_release(v30);
  }
  if (v29) {
    _Block_release(v29);
  }
LABEL_55:
  if (*(unsigned char *)(a1 + 446)) {
    BasebandTransport::close(*(BasebandTransport **)(a1 + 288));
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    long long v21 = (char *)buf.__r_.__value_.__r.__words[0];
LABEL_59:
    operator delete(v21);
  }
LABEL_60:
  std::string::size_type v33 = *(void *)(a1 + 72);
  unsigned int v32 = *(std::__shared_weak_count **)(a1 + 80);
  buf.__r_.__value_.__r.__words[0] = v33;
  if (!v32
    || (int v34 = std::__shared_weak_count::lock(v32), (buf.__r_.__value_.__l.__size_ = (std::string::size_type)v34) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v35 = *(void *)(a1 + 232);
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 1174405120;
  v42[2] = ___ZN4diag7Service8Internal10sleep_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEbN12capabilities4diag15BufferingParamsE_block_invoke;
  v42[3] = &__block_descriptor_tmp_118;
  v42[4] = a1;
  v42[5] = v33;
  unint64_t v43 = v34;
  atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  char v46 = a3;
  char v36 = *(void **)a2;
  if (*(void *)a2) {
    char v36 = _Block_copy(v36);
  }
  long long v37 = *(NSObject **)(a2 + 8);
  dispatch_object_t v44 = v36;
  dispatch_object_t v45 = v37;
  if (v37) {
    dispatch_retain(v37);
  }
  size_t v38 = _Block_copy(v42);
  size_t v39 = *(NSObject **)(a1 + 88);
  if (v39) {
    dispatch_retain(v39);
  }
  uint64_t v47 = v38;
  dispatch_object_t object = v39;
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v35 + 128))(v35, a4, &v47);
  if (object) {
    dispatch_release(object);
  }
  if (v47) {
    _Block_release(v47);
  }
  if (v45) {
    dispatch_release(v45);
  }
  if (v44) {
    _Block_release(v44);
  }
  char v40 = v43;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  uint64_t v41 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(buf.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_1A61BCFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,void *aBlock)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a37);
  if (*(char *)(v39 - 89) < 0)
  {
    operator delete(*(void **)(v39 - 112));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal10sleep_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEbN12capabilities4diag15BufferingParamsE_block_invoke(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    uint64_t v4 = *(void *)(v3 + 232);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN4diag7Service8Internal10sleep_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEbN12capabilities4diag15BufferingParamsE_block_invoke_2;
    aBlock[3] = &__block_descriptor_tmp_114;
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
    aBlock[4] = v3;
    void aBlock[5] = v6;
    uint64_t v20 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v23 = *(unsigned char *)(a1 + 72);
    int v7 = *(void **)(a1 + 56);
    if (v7) {
      int v7 = _Block_copy(v7);
    }
    int v8 = *(NSObject **)(a1 + 64);
    long long v21 = v7;
    dispatch_object_t object = v8;
    if (v8) {
      dispatch_retain(v8);
    }
    BOOL v9 = _Block_copy(aBlock);
    uint64_t v10 = *(NSObject **)(v3 + 88);
    if (v10) {
      dispatch_retain(v10);
    }
    uint64_t v24 = v9;
    dispatch_object_t v25 = v10;
    (*(void (**)(uint64_t, const void **))(*(void *)v4 + 104))(v4, &v24);
    if (v25) {
      dispatch_release(v25);
    }
    if (v24) {
      _Block_release(v24);
    }
    if (object) {
      dispatch_release(object);
    }
    if (v21) {
      _Block_release(v21);
    }
    BOOL v11 = v20;
    if (v20)
    {
      if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    return;
  }
  int v12 = *(const void **)(a1 + 56);
  if (!v12)
  {
    int v13 = 0;
    int v14 = *(NSObject **)(a1 + 64);
    uint64_t v17 = 0;
    uint64_t v18 = v14;
    if (!v14) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  int v13 = _Block_copy(v12);
  int v14 = *(NSObject **)(a1 + 64);
  uint64_t v17 = v13;
  uint64_t v18 = v14;
  if (v14) {
LABEL_23:
  }
    dispatch_retain(v14);
LABEL_24:
  std::string __p = operator new(0x20uLL);
  long long v16 = xmmword_1A61F6FD0;
  strcpy((char *)__p, "Error enabling buffering");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v17, (uint64_t)&__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
  if (v14) {
    dispatch_release(v14);
  }
  if (v13) {
    _Block_release(v13);
  }
}

void sub_1A61BD378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1A61BD3B0(_Unwind_Exception *a1)
{
  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v3 - 64);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v2);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal10sleep_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEbN12capabilities4diag15BufferingParamsE_block_invoke_2(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    uint64_t v4 = *(void *)(v3 + 216);
    if (!v4) {
      return;
    }
    uint64_t v5 = *(void **)(v4 + 16);
    uint64_t v6 = (void *)(v4 + 24);
    if (v5 != (void *)(v4 + 24))
    {
      do
      {
        uint64_t v13 = *(void *)(*(void *)(*(void *)(v5[5] + 16) + 24) + 336);
        usleep(0x7A120u);
        uint64_t v14 = *(void *)(*(void *)(*(void *)(v5[5] + 16) + 24) + 336);
        if (v13 != v14)
        {
          usleep(0x7A120u);
          uint64_t v15 = *(void *)(*(void *)(*(void *)(v5[5] + 16) + 24) + 336);
          if (v14 != v15)
          {
            usleep(0x7A120u);
            uint64_t v16 = *(void *)(*(void *)(*(void *)(v5[5] + 16) + 24) + 336);
            if (v15 != v16)
            {
              usleep(0x7A120u);
              uint64_t v17 = *(void *)(*(void *)(*(void *)(v5[5] + 16) + 24) + 336);
              if (v16 != v17)
              {
                usleep(0x7A120u);
                uint64_t v18 = *(void *)(*(void *)(*(void *)(v5[5] + 16) + 24) + 336);
                if (v17 != v18)
                {
                  usleep(0x7A120u);
                  if (v18 != *(void *)(*(void *)(*(void *)(v5[5] + 16) + 24) + 336)) {
                    usleep(0x7A120u);
                  }
                }
              }
            }
          }
        }
        char v19 = (void *)v5[1];
        if (v19)
        {
          do
          {
            uint64_t v20 = v19;
            char v19 = (void *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            uint64_t v20 = (void *)v5[2];
            BOOL v21 = *v20 == (void)v5;
            uint64_t v5 = v20;
          }
          while (!v21);
        }
        uint64_t v5 = v20;
      }
      while (v20 != v6);
    }
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v7 = *(void *)(v3 + 216);
      int v8 = *(void **)(v7 + 16);
      BOOL v9 = (void *)(v7 + 24);
      if (v8 != (void *)(v7 + 24))
      {
        do
        {
          diag::DIAGReader::stop((diag::DIAGReader *)v8[5]);
          long long v22 = (void *)v8[1];
          if (v22)
          {
            do
            {
              char v23 = v22;
              long long v22 = (void *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              char v23 = (void *)v8[2];
              BOOL v21 = *v23 == (void)v8;
              int v8 = v23;
            }
            while (!v21);
          }
          int v8 = v23;
        }
        while (v23 != v9);
      }
    }
    uint64_t v10 = *(const void **)(a1 + 56);
    if (v10)
    {
      BOOL v11 = _Block_copy(v10);
      int v12 = *(NSObject **)(a1 + 64);
      std::string::size_type v33 = v11;
      int v34 = v12;
      if (!v12)
      {
LABEL_9:
        char v32 = 0;
        LOBYTE(__p) = 0;
        diag::Service::Internal::changeStateAndNotify_sync(v3, 2u, (uint64_t)&v33, (uint64_t)&__p);
        if (v32 < 0) {
          operator delete(__p);
        }
        if (v12) {
          dispatch_release(v12);
        }
        if (v11) {
          _Block_release(v11);
        }
        return;
      }
    }
    else
    {
      BOOL v11 = 0;
      int v12 = *(NSObject **)(a1 + 64);
      std::string::size_type v33 = 0;
      int v34 = v12;
      if (!v12) {
        goto LABEL_9;
      }
    }
    dispatch_retain(v12);
    goto LABEL_9;
  }
  uint64_t v24 = *(const void **)(a1 + 56);
  if (!v24)
  {
    dispatch_object_t v25 = 0;
    char v26 = *(NSObject **)(a1 + 64);
    uint64_t v29 = 0;
    uint64_t v30 = v26;
    if (!v26) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  dispatch_object_t v25 = _Block_copy(v24);
  char v26 = *(NSObject **)(a1 + 64);
  uint64_t v29 = v25;
  uint64_t v30 = v26;
  if (v26) {
LABEL_38:
  }
    dispatch_retain(v26);
LABEL_39:
  uint64_t v27 = operator new(0x28uLL);
  long long v28 = xmmword_1A61FBB30;
  strcpy((char *)v27, "Error requesting drain of buffer");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v29, (uint64_t)&v27);
  if (SHIBYTE(v28) < 0) {
    operator delete(v27);
  }
  if (v26) {
    dispatch_release(v26);
  }
  if (v25) {
    _Block_release(v25);
  }
}

void sub_1A61BD6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_1A61BD714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal4wakeEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Wake", buf, 2u);
  }
  uint64_t v4 = (const void *)a1[5];
  if (v4)
  {
    uint64_t v5 = _Block_copy(v4);
    uint64_t v6 = a1[6];
    uint64_t v17 = v5;
    dispatch_object_t v18 = v6;
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a1[6];
  uint64_t v17 = 0;
  dispatch_object_t v18 = v6;
  if (v6) {
LABEL_5:
  }
    dispatch_retain(v6);
LABEL_6:
  unsigned int v7 = *(_DWORD *)(v2 + 460);
  if (v7 == 2)
  {
    *(_DWORD *)(v2 + 460) = 3;
    BOOL v9 = *(void **)(v2 + 72);
    int v8 = *(std::__shared_weak_count **)(v2 + 80);
    uint64_t v30 = v9;
    if (!v8 || (uint64_t v10 = std::__shared_weak_count::lock(v8), (v31 = v10) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v11 = *(void *)(v2 + 232);
    *(void *)std::string buf = MEMORY[0x1E4F143A8];
    uint64_t v20 = 1174405120;
    BOOL v21 = ___ZN4diag7Service8Internal16prepareWake_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke;
    long long v22 = &__block_descriptor_tmp_125;
    uint64_t v23 = v2;
    uint64_t v24 = v9;
    dispatch_object_t v25 = v10;
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v5)
    {
      aBlocunint64_t k = _Block_copy(v5);
      dispatch_object_t object = v6;
      if (!v6)
      {
LABEL_12:
        int v12 = _Block_copy(buf);
        uint64_t v13 = *(NSObject **)(v2 + 88);
        if (v13) {
          dispatch_retain(v13);
        }
        long long v28 = v12;
        dispatch_object_t v29 = v13;
        (*(void (**)(uint64_t, const void **))(*(void *)v11 + 120))(v11, &v28);
        if (v29) {
          dispatch_release(v29);
        }
        if (v28) {
          _Block_release(v28);
        }
        if (object) {
          dispatch_release(object);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        uint64_t v14 = v25;
        if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        uint64_t v15 = v31;
        if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        uint64_t v6 = v18;
        goto LABEL_38;
      }
    }
    else
    {
      aBlocunint64_t k = 0;
      dispatch_object_t object = v6;
      if (!v6) {
        goto LABEL_12;
      }
    }
    dispatch_retain(v6);
    goto LABEL_12;
  }
  if (!v5)
  {
    uint64_t v16 = 0;
    uint64_t v30 = 0;
    long long v31 = (std::__shared_weak_count *)v6;
    if (!v6) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  uint64_t v16 = _Block_copy(v5);
  uint64_t v30 = v16;
  long long v31 = (std::__shared_weak_count *)v6;
  if (v6) {
LABEL_31:
  }
    dispatch_retain(v6);
LABEL_32:
  HIBYTE(v21) = 0;
  buf[0] = 0;
  diag::Service::Internal::changeStateAndNotify_sync(v2, v7, (uint64_t)&v30, (uint64_t)buf);
  if (SHIBYTE(v21) < 0) {
    operator delete(*(void **)buf);
  }
  if (v6) {
    dispatch_release(v6);
  }
  if (v16) {
    _Block_release(v16);
  }
LABEL_38:
  if (v6) {
    dispatch_release(v6);
  }
  if (v17) {
    _Block_release(v17);
  }
}

void sub_1A61BDA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v11 - 80);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v10);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v11 - 64);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A61BDAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v16 - 64);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A61BDAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN4diag7Service8Internal16prepareWake_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke(void *a1, int a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  uint64_t v4 = (const void *)a1[7];
  if (a2)
  {
    if (v4)
    {
      uint64_t v5 = _Block_copy(v4);
      uint64_t v6 = a1[8];
      uint64_t v41 = v5;
      dispatch_object_t v42 = v6;
      if (!v6) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = a1[8];
      uint64_t v41 = 0;
      dispatch_object_t v42 = v6;
      if (!v6)
      {
LABEL_5:
        if (!*(unsigned char *)(v3 + 445)) {
          goto LABEL_77;
        }
        unsigned int v7 = *(NSObject **)(v3 + 40);
        BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        if (v8)
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1A609F000, v7, OS_LOG_TYPE_DEFAULT, "#I Configuring ADPL", (uint8_t *)&buf, 2u);
        }
        uint64_t v9 = *(void *)(v3 + 288);
        int v48 = 2;
        char v49 = 0;
        uint64_t v50 = 10;
        shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)v8);
        if (shouldUseMinBasebandTransportIOReadSize) {
          int v11 = 0x4000;
        }
        else {
          int v11 = 0x8000;
        }
        int v51 = v11;
        if (capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize)) {
          int v12 = 4;
        }
        else {
          int v12 = 16;
        }
        int v52 = v12;
        uint64_t v53 = 0;
        char v54 = 0;
        aBlocunint64_t k = 0;
        int v13 = (*(uint64_t (**)(uint64_t, int *, void **))(*(void *)v9 + 48))(v9, &v48, &aBlock);
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v13)
        {
          memset(&buf, 0, sizeof(buf));
          BasebandTransport::operator*(*(void *)(v3 + 288));
          if (ETLADPLLoggingEnable())
          {
            uint64_t v14 = *(NSObject **)(v3 + 40);
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v63.__r_.__value_.__l.__data_) = 0;
              _os_log_impl(&dword_1A609F000, v14, OS_LOG_TYPE_DEFAULT, "#I Success configuring ADPL", (uint8_t *)&v63, 2u);
            }
            goto LABEL_72;
          }
          v63.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
          *(_OWORD *)&v63.__r_.__value_.__r.__words[1] = xmmword_1A61F8020;
          strcpy(v63.__r_.__value_.__l.__data_, "Failed to configure ADPL: ");
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_std::string buf = &buf;
          }
          else {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = buf.__r_.__value_.__l.__size_;
          }
          uint64_t v23 = std::string::append(&v63, (const std::string::value_type *)p_buf, size);
          std::string::size_type v24 = v23->__r_.__value_.__r.__words[0];
          *(void *)&long long v62 = v23->__r_.__value_.__l.__size_;
          *(void *)((char *)&v62 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
          char v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          buf.__r_.__value_.__r.__words[0] = v24;
          buf.__r_.__value_.__l.__size_ = v62;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v62 + 7);
          *((unsigned char *)&buf.__r_.__value_.__s + 23) = v25;
          if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v63.__r_.__value_.__l.__data_);
            char v26 = *(NSObject **)(v3 + 40);
            if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            {
LABEL_54:
              if (v5) {
                goto LABEL_55;
              }
              goto LABEL_63;
            }
          }
          else
          {
            char v26 = *(NSObject **)(v3 + 40);
            if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
              goto LABEL_54;
            }
          }
          long long v28 = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v28 = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          LODWORD(v63.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v63.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
          _os_log_error_impl(&dword_1A609F000, v26, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v63, 0xCu);
          if (v5)
          {
LABEL_55:
            uint64_t v27 = _Block_copy(v5);
            *(void *)&long long v62 = v27;
            *((void *)&v62 + 1) = v6;
            if (!v6)
            {
LABEL_57:
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v63, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
              }
              else {
                std::string v63 = buf;
              }
              diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v62, (uint64_t)&v63);
              if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v63.__r_.__value_.__l.__data_);
              }
              if (v6) {
                dispatch_release(v6);
              }
              if (v27) {
                _Block_release(v27);
              }
LABEL_72:
              if (*(unsigned char *)(v3 + 446)) {
                BasebandTransport::close(*(BasebandTransport **)(v3 + 288));
              }
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              {
                uint64_t v20 = (char *)buf.__r_.__value_.__r.__words[0];
LABEL_76:
                operator delete(v20);
              }
LABEL_77:
              uint64_t v30 = *(void *)(v3 + 72);
              dispatch_object_t v29 = *(std::__shared_weak_count **)(v3 + 80);
              uint64_t v45 = v30;
              if (!v29 || (long long v31 = std::__shared_weak_count::lock(v29), (v46 = v31) == 0)) {
                std::__throw_bad_weak_ptr[abi:ne180100]();
              }
              uint64_t v32 = *(void *)(v3 + 232);
              buf.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
              buf.__r_.__value_.__l.__size_ = 1174405120;
              buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN4diag7Service8Internal15finishWake_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke;
              int v56 = &__block_descriptor_tmp_135;
              uint64_t v57 = v3;
              uint64_t v58 = v30;
              int v59 = v31;
              atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
              if (v5)
              {
                int v60 = _Block_copy(v5);
                dispatch_object_t v61 = v6;
                if (!v6)
                {
LABEL_82:
                  std::string::size_type v33 = _Block_copy(&buf);
                  int v34 = *(NSObject **)(v3 + 88);
                  if (v34) {
                    dispatch_retain(v34);
                  }
                  unint64_t v43 = v33;
                  dispatch_object_t object = v34;
                  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v32 + 136))(v32, 1, &v43);
                  if (object) {
                    dispatch_release(object);
                  }
                  if (v43) {
                    _Block_release(v43);
                  }
                  if (v61) {
                    dispatch_release(v61);
                  }
                  if (v60) {
                    _Block_release(v60);
                  }
                  uint64_t v35 = v59;
                  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                    std::__shared_weak_count::__release_weak(v35);
                  }
                  char v36 = v46;
                  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                    std::__shared_weak_count::__release_weak(v36);
                  }
                  if (v42) {
                    dispatch_release(v42);
                  }
                  if (v41) {
                    _Block_release(v41);
                  }
                  return;
                }
              }
              else
              {
                int v60 = 0;
                dispatch_object_t v61 = v6;
                if (!v6) {
                  goto LABEL_82;
                }
              }
              dispatch_retain(v6);
              goto LABEL_82;
            }
LABEL_56:
            dispatch_retain(v6);
            goto LABEL_57;
          }
LABEL_63:
          uint64_t v27 = 0;
          *(void *)&long long v62 = 0;
          *((void *)&v62 + 1) = v6;
          if (!v6) {
            goto LABEL_57;
          }
          goto LABEL_56;
        }
        uint64_t v17 = (char *)operator new(0x30uLL);
        strcpy(v17, "Failed to open DIAG transport to configure ADPL");
        dispatch_object_t v18 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
          _os_log_error_impl(&dword_1A609F000, v18, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
          if (v5)
          {
LABEL_35:
            char v19 = _Block_copy(v5);
            *(void *)&long long v62 = v19;
            *((void *)&v62 + 1) = v6;
            if (!v6)
            {
LABEL_37:
              std::string::__init_copy_ctor_external(&v63, v17, 0x2FuLL);
              diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v62, (uint64_t)&v63);
              if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v63.__r_.__value_.__l.__data_);
              }
              if (v6) {
                dispatch_release(v6);
              }
              if (v19) {
                _Block_release(v19);
              }
              uint64_t v20 = v17;
              goto LABEL_76;
            }
LABEL_36:
            dispatch_retain(v6);
            goto LABEL_37;
          }
        }
        else if (v5)
        {
          goto LABEL_35;
        }
        char v19 = 0;
        *(void *)&long long v62 = 0;
        *((void *)&v62 + 1) = v6;
        if (!v6) {
          goto LABEL_37;
        }
        goto LABEL_36;
      }
    }
    dispatch_retain(v6);
    goto LABEL_5;
  }
  if (!v4)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a1[8];
    uint64_t v39 = 0;
    char v40 = v16;
    if (!v16) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  uint64_t v15 = _Block_copy(v4);
  uint64_t v16 = a1[8];
  uint64_t v39 = v15;
  char v40 = v16;
  if (v16) {
LABEL_22:
  }
    dispatch_retain(v16);
LABEL_23:
  std::string __p = operator new(0x20uLL);
  long long v38 = xmmword_1A61F71E0;
  strcpy((char *)__p, "Error disabling buffering");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v39, (uint64_t)&__p);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  if (v16) {
    dispatch_release(v16);
  }
  if (v15) {
    _Block_release(v15);
  }
}

void sub_1A61BE230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,void *aBlock,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v35 - 112);
  if (a35 < 0) {
    operator delete(__p);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal15finishWake_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke(void *a1, int a2)
{
  uint64_t v3 = a1[4];
  if (a2)
  {
    uint64_t v4 = *(void *)(v3 + 232);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN4diag7Service8Internal15finishWake_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke_2;
    aBlock[3] = &__block_descriptor_tmp_131_0;
    uint64_t v6 = a1[5];
    uint64_t v5 = (std::__shared_weak_count *)a1[6];
    aBlock[4] = v3;
    void aBlock[5] = v6;
    uint64_t v20 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v7 = (void *)a1[7];
    if (v7) {
      unsigned int v7 = _Block_copy(v7);
    }
    BOOL v8 = a1[8];
    BOOL v21 = v7;
    dispatch_object_t object = v8;
    if (v8) {
      dispatch_retain(v8);
    }
    uint64_t v9 = _Block_copy(aBlock);
    uint64_t v10 = *(NSObject **)(v3 + 88);
    if (v10) {
      dispatch_retain(v10);
    }
    uint64_t v23 = v9;
    dispatch_object_t v24 = v10;
    (*(void (**)(uint64_t, const void **))(*(void *)v4 + 72))(v4, &v23);
    if (v24) {
      dispatch_release(v24);
    }
    if (v23) {
      _Block_release(v23);
    }
    if (object) {
      dispatch_release(object);
    }
    if (v21) {
      _Block_release(v21);
    }
    int v11 = v20;
    if (v20)
    {
      if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    return;
  }
  int v12 = (const void *)a1[7];
  if (!v12)
  {
    int v13 = 0;
    uint64_t v14 = a1[8];
    uint64_t v17 = 0;
    dispatch_object_t v18 = v14;
    if (!v14) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  int v13 = _Block_copy(v12);
  uint64_t v14 = a1[8];
  uint64_t v17 = v13;
  dispatch_object_t v18 = v14;
  if (v14) {
LABEL_23:
  }
    dispatch_retain(v14);
LABEL_24:
  std::string __p = operator new(0x28uLL);
  long long v16 = xmmword_1A61F7FC0;
  strcpy((char *)__p, "Error switching to merged logging masks");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v17, (uint64_t)&__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
  if (v14) {
    dispatch_release(v14);
  }
  if (v13) {
    _Block_release(v13);
  }
}

void sub_1A61BE5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1A61BE618(_Unwind_Exception *a1)
{
  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v3 - 64);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v2);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal15finishWake_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke_2(void *a1, int a2)
{
  uint64_t v3 = a1[4];
  if (a2)
  {
    uint64_t v4 = *(void *)(v3 + 216);
    if (v4)
    {
      uint64_t v5 = *(void **)(v4 + 16);
      uint64_t v6 = (void *)(v4 + 24);
      if (v5 != (void *)(v4 + 24))
      {
        do
        {
          uint64_t v10 = (diag::DIAGReader *)v5[5];
          uint64_t v11 = *(void *)(*((void *)v10 + 2) + 24);
          if (!*(unsigned char *)(v11 + 332) || *(_DWORD *)(v11 + 328) != 1) {
            diag::DIAGReader::start(v10);
          }
          int v12 = (void *)v5[1];
          if (v12)
          {
            do
            {
              int v13 = v12;
              int v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              int v13 = (void *)v5[2];
              BOOL v14 = *v13 == (void)v5;
              uint64_t v5 = v13;
            }
            while (!v14);
          }
          uint64_t v5 = v13;
        }
        while (v13 != v6);
      }
    }
    unsigned int v7 = (const void *)a1[7];
    if (v7)
    {
      BOOL v8 = _Block_copy(v7);
      uint64_t v9 = a1[8];
      dispatch_object_t v24 = v8;
      char v25 = v9;
      if (!v9)
      {
LABEL_7:
        char v23 = 0;
        LOBYTE(__p) = 0;
        diag::Service::Internal::changeStateAndNotify_sync(v3, 1u, (uint64_t)&v24, (uint64_t)&__p);
        if (v23 < 0) {
          operator delete(__p);
        }
        if (v9) {
          dispatch_release(v9);
        }
        if (v8) {
          _Block_release(v8);
        }
        return;
      }
    }
    else
    {
      BOOL v8 = 0;
      uint64_t v9 = a1[8];
      dispatch_object_t v24 = 0;
      char v25 = v9;
      if (!v9) {
        goto LABEL_7;
      }
    }
    dispatch_retain(v9);
    goto LABEL_7;
  }
  uint64_t v15 = (const void *)a1[7];
  if (!v15)
  {
    long long v16 = 0;
    uint64_t v17 = a1[8];
    uint64_t v20 = 0;
    BOOL v21 = v17;
    if (!v17) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  long long v16 = _Block_copy(v15);
  uint64_t v17 = a1[8];
  uint64_t v20 = v16;
  BOOL v21 = v17;
  if (v17) {
LABEL_25:
  }
    dispatch_retain(v17);
LABEL_26:
  dispatch_object_t v18 = operator new(0x20uLL);
  long long v19 = xmmword_1A61F6FD0;
  strcpy((char *)v18, "Error completing wake up");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v20, (uint64_t)&v18);
  if (SHIBYTE(v19) < 0) {
    operator delete(v18);
  }
  if (v17) {
    dispatch_release(v17);
  }
  if (v16) {
    _Block_release(v16);
  }
}

void sub_1A61BE828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1A61BE854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v19 - 48);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal8snapshotENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_bN8dispatch8callbackIU13block_pointerFvNS0_5StateES8_EEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Snapshot", buf, 2u);
  }
  unsigned int v4 = *(_DWORD *)(v2 + 460);
  if (v4 <= 4 && ((1 << v4) & 0x13) != 0)
  {
    if (*(void *)(v2 + 216))
    {
      if (*(unsigned char *)(v2 + 456))
      {
        uint64_t v6 = *(void *)(v2 + 232);
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN4diag7Service8Internal8snapshotENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_bN8dispatch8callbackIU13block_pointerFvNS0_5StateES8_EEE_block_invoke_136;
        aBlock[3] = &__block_descriptor_tmp_137_0;
        uint64_t v8 = *(void *)(a1 + 40);
        unsigned int v7 = *(std::__shared_weak_count **)(a1 + 48);
        aBlock[4] = v2;
        void aBlock[5] = v8;
        long long v37 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (*(char *)(a1 + 79) < 0) {
          std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
        }
        else {
          std::string v38 = *(std::string *)(a1 + 56);
        }
        if (*(char *)(a1 + 103) < 0) {
          std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)(a1 + 80), *(void *)(a1 + 88));
        }
        else {
          std::string v39 = *(std::string *)(a1 + 80);
        }
        char v42 = *(unsigned char *)(a1 + 120);
        uint64_t v15 = *(void **)(a1 + 104);
        if (v15) {
          uint64_t v15 = _Block_copy(v15);
        }
        long long v16 = *(NSObject **)(a1 + 112);
        char v40 = v15;
        dispatch_object_t object = v16;
        if (v16) {
          dispatch_retain(v16);
        }
        uint64_t v17 = _Block_copy(aBlock);
        dispatch_object_t v18 = *(NSObject **)(v2 + 88);
        if (v18) {
          dispatch_retain(v18);
        }
        unint64_t v43 = v17;
        dispatch_object_t v44 = v18;
        (*(void (**)(uint64_t, const void **))(*(void *)v6 + 104))(v6, &v43);
        if (v44) {
          dispatch_release(v44);
        }
        if (v43) {
          _Block_release(v43);
        }
        if (object) {
          dispatch_release(object);
        }
        if (v40) {
          _Block_release(v40);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v39.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_55:
            uint64_t v19 = v37;
            if (!v37) {
              return;
            }
            goto LABEL_59;
          }
        }
        else if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_55;
        }
        operator delete(v38.__r_.__value_.__l.__data_);
        uint64_t v19 = v37;
        if (!v37) {
          return;
        }
LABEL_59:
        if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        return;
      }
      if (*(char *)(a1 + 79) < 0)
      {
        std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
        if ((*(char *)(a1 + 103) & 0x80000000) == 0) {
          goto LABEL_34;
        }
      }
      else
      {
        std::string v35 = *(std::string *)(a1 + 56);
        if ((*(char *)(a1 + 103) & 0x80000000) == 0)
        {
LABEL_34:
          std::string v34 = *(std::string *)(a1 + 80);
          goto LABEL_67;
        }
      }
      std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(a1 + 80), *(void *)(a1 + 88));
LABEL_67:
      int v20 = *(unsigned __int8 *)(a1 + 120);
      BOOL v21 = *(const void **)(a1 + 104);
      if (v21)
      {
        long long v22 = _Block_copy(v21);
        char v23 = *(NSObject **)(a1 + 112);
        uint64_t v32 = v22;
        std::string::size_type v33 = v23;
        if (!v23)
        {
LABEL_70:
          diag::Service::Internal::finishSnapshot_sync(v2, (uint64_t)&v35, (uint64_t)&v34, v20 != 0, (uint64_t)&v32);
          if (v23) {
            dispatch_release(v23);
          }
          if (v22) {
            _Block_release(v22);
          }
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v34.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v35.__r_.__value_.__l.__data_);
          }
          return;
        }
      }
      else
      {
        long long v22 = 0;
        char v23 = *(NSObject **)(a1 + 112);
        uint64_t v32 = 0;
        std::string::size_type v33 = v23;
        if (!v23) {
          goto LABEL_70;
        }
      }
      dispatch_retain(v23);
      goto LABEL_70;
    }
    uint64_t v9 = *(const void **)(a1 + 104);
    if (v9)
    {
      uint64_t v10 = _Block_copy(v9);
      uint64_t v11 = *(NSObject **)(a1 + 112);
      uint64_t v30 = v10;
      long long v31 = v11;
      if (!v11)
      {
LABEL_16:
        char v29 = 0;
        LOBYTE(__p) = 0;
        diag::Service::Internal::changeStateAndNotify_sync(v2, v4, (uint64_t)&v30, (uint64_t)&__p);
        if (v29 < 0) {
          operator delete(__p);
        }
        if (v11) {
          dispatch_release(v11);
        }
        if (v10) {
          _Block_release(v10);
        }
        return;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(NSObject **)(a1 + 112);
      uint64_t v30 = 0;
      long long v31 = v11;
      if (!v11) {
        goto LABEL_16;
      }
    }
    dispatch_retain(v11);
    goto LABEL_16;
  }
  int v12 = *(const void **)(a1 + 104);
  if (!v12)
  {
    int v13 = 0;
    BOOL v14 = *(NSObject **)(a1 + 112);
    char v26 = 0;
    uint64_t v27 = v14;
    if (!v14) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  int v13 = _Block_copy(v12);
  BOOL v14 = *(NSObject **)(a1 + 112);
  char v26 = v13;
  uint64_t v27 = v14;
  if (v14) {
LABEL_25:
  }
    dispatch_retain(v14);
LABEL_26:
  char v25 = 0;
  LOBYTE(v24) = 0;
  diag::Service::Internal::changeStateAndNotify_sync(v2, v4, (uint64_t)&v26, (uint64_t)&v24);
  if (v25 < 0) {
    operator delete(v24);
  }
  if (v14) {
    dispatch_release(v14);
  }
  if (v13) {
    _Block_release(v13);
  }
}

void sub_1A61BED20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a39 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A61BEDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v49 - 80);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v47);
  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v48 + 40);
      _Unwind_Resume(a1);
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v48 + 40);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal8snapshotENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_bN8dispatch8callbackIU13block_pointerFvNS0_5StateES8_EEE_block_invoke_136(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    uint64_t v4 = *(void *)(v3 + 216);
    uint64_t v5 = *(void **)(v4 + 16);
    uint64_t v6 = (void *)(v4 + 24);
    if (v5 != (void *)(v4 + 24))
    {
      do
      {
        uint64_t v7 = *(void *)(*(void *)(*(void *)(v5[5] + 16) + 24) + 336);
        usleep(0x7A120u);
        uint64_t v8 = *(void *)(*(void *)(*(void *)(v5[5] + 16) + 24) + 336);
        if (v7 != v8)
        {
          usleep(0x7A120u);
          uint64_t v9 = *(void *)(*(void *)(*(void *)(v5[5] + 16) + 24) + 336);
          if (v8 != v9)
          {
            usleep(0x7A120u);
            uint64_t v10 = *(void *)(*(void *)(*(void *)(v5[5] + 16) + 24) + 336);
            if (v9 != v10)
            {
              usleep(0x7A120u);
              uint64_t v11 = *(void *)(*(void *)(*(void *)(v5[5] + 16) + 24) + 336);
              if (v10 != v11)
              {
                usleep(0x7A120u);
                uint64_t v12 = *(void *)(*(void *)(*(void *)(v5[5] + 16) + 24) + 336);
                if (v11 != v12)
                {
                  usleep(0x7A120u);
                  if (v12 != *(void *)(*(void *)(*(void *)(v5[5] + 16) + 24) + 336)) {
                    usleep(0x7A120u);
                  }
                }
              }
            }
          }
        }
        int v13 = (void *)v5[1];
        if (v13)
        {
          do
          {
            BOOL v14 = v13;
            int v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            BOOL v14 = (void *)v5[2];
            BOOL v15 = *v14 == (void)v5;
            uint64_t v5 = v14;
          }
          while (!v15);
        }
        uint64_t v5 = v14;
      }
      while (v14 != v6);
    }
  }
  else
  {
    long long v16 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1A609F000, v16, OS_LOG_TYPE_DEFAULT, "#I Requested to drain of buffer failed, continuing with snapshot", buf, 2u);
    }
  }
  if (*(char *)(a1 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
    if ((*(char *)(a1 + 103) & 0x80000000) == 0) {
      goto LABEL_22;
    }
  }
  else
  {
    std::string v24 = *(std::string *)(a1 + 56);
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
LABEL_22:
      std::string v23 = *(std::string *)(a1 + 80);
      goto LABEL_25;
    }
  }
  std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)(a1 + 80), *(void *)(a1 + 88));
LABEL_25:
  int v17 = *(unsigned __int8 *)(a1 + 120);
  dispatch_object_t v18 = *(const void **)(a1 + 104);
  if (v18)
  {
    uint64_t v19 = _Block_copy(v18);
    int v20 = *(NSObject **)(a1 + 112);
    BOOL v21 = v19;
    long long v22 = v20;
    if (!v20) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v19 = 0;
  int v20 = *(NSObject **)(a1 + 112);
  BOOL v21 = 0;
  long long v22 = v20;
  if (v20) {
LABEL_27:
  }
    dispatch_retain(v20);
LABEL_28:
  diag::Service::Internal::finishSnapshot_sync(v3, (uint64_t)&v24, (uint64_t)&v23, v17 != 0, (uint64_t)&v21);
  if (v20) {
    dispatch_release(v20);
  }
  if (v19) {
    _Block_release(v19);
  }
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_38:
    operator delete(v24.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_38;
  }
}

void sub_1A61BF110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a23 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void diag::Service::Internal::finishSnapshot_sync(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 445))
  {
    diag::copyDMC(a1 + 112, (const void **)(*(void *)(a1 + 352) + 168));
    diag::copyDMC(a1 + 136, (const void **)(*(void *)(a1 + 352) + 168));
    diag::copyDMC(a1 + 184, (const void **)(*(void *)(a1 + 352) + 168));
    diag::copyDMC(a1 + 160, (const void **)(*(void *)(a1 + 352) + 168));
  }
  if (*(unsigned char *)(a1 + 446)) {
    uint64_t v10 = 368;
  }
  else {
    uint64_t v10 = 336;
  }
  diag::copyDMC(a1 + 112, (const void **)(*(void *)(a1 + v10) + 168));
  diag::copyDMC(a1 + 136, (const void **)(*(void *)(a1 + v10) + 168));
  diag::copyDMC(a1 + 184, (const void **)(*(void *)(a1 + v10) + 168));
  diag::copyDMC(a1 + 160, (const void **)(*(void *)(a1 + v10) + 168));
  uint64_t v11 = *(void *)(a1 + 288);
  if (v11)
  {
    __dst.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
    __dst.__r_.__value_.__l.__size_ = 0x40000000;
    __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN17BasebandTransport9dumpStateEb_block_invoke;
    char v133 = &__block_descriptor_tmp_80;
    uint64_t v134 = v11;
    char v135 = 0;
    ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)(v11 + 72), (uint64_t)&__dst);
  }
  uint64_t v12 = *(void *)(a1 + 304);
  if (v12)
  {
    __dst.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
    __dst.__r_.__value_.__l.__size_ = 0x40000000;
    __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN17BasebandTransport9dumpStateEb_block_invoke;
    char v133 = &__block_descriptor_tmp_80;
    uint64_t v134 = v12;
    char v135 = 0;
    ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)(v12 + 72), (uint64_t)&__dst);
  }
  uint64_t v13 = *(void *)(a1 + 320);
  if (v13)
  {
    __dst.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
    __dst.__r_.__value_.__l.__size_ = 0x40000000;
    __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN17BasebandTransport9dumpStateEb_block_invoke;
    char v133 = &__block_descriptor_tmp_80;
    uint64_t v134 = v13;
    char v135 = 0;
    ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)(v13 + 72), (uint64_t)&__dst);
  }
  uint64_t v14 = *(void *)(a1 + 216);
  if (v14 && (BOOL v15 = *(void **)(v14 + 16), v15 != (void *)(v14 + 24)))
  {
    do
    {
      diag::DIAGReader::stop((diag::DIAGReader *)v15[5]);
      int v20 = (void *)v15[1];
      if (v20)
      {
        do
        {
          BOOL v21 = v20;
          int v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          BOOL v21 = (void *)v15[2];
          BOOL v31 = *v21 == (void)v15;
          BOOL v15 = v21;
        }
        while (!v31);
      }
      BOOL v15 = v21;
    }
    while (v21 != (void *)(v14 + 24));
    uint64_t v14 = *(void *)(a1 + 216);
    if (a4)
    {
LABEL_15:
      if (!v14) {
        goto LABEL_241;
      }
      if (!*(unsigned char *)(a1 + 445)) {
        goto LABEL_122;
      }
      int v16 = *(char *)(a2 + 23);
      if (v16 >= 0) {
        size_t v17 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v17 = *(void *)(a2 + 8);
      }
      unint64_t v18 = v17 + 5;
      memset(&__dst, 170, sizeof(__dst));
      if (v17 + 5 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v18 >= 0x17)
      {
        uint64_t v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17) {
          uint64_t v22 = v18 | 7;
        }
        uint64_t v23 = v22 + 1;
        p_dst = (std::string *)operator new(v22 + 1);
        __dst.__r_.__value_.__l.__size_ = v17 + 5;
        __dst.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v17 + 5;
        if (!v17) {
          goto LABEL_43;
        }
      }
      if (v16 >= 0) {
        std::string v24 = (const std::string::value_type *)a2;
      }
      else {
        std::string v24 = *(const std::string::value_type **)a2;
      }
      memmove(p_dst, v24, v17);
LABEL_43:
      strcpy((char *)p_dst + v17, "-adpl");
      memset(&__p, 170, sizeof(__p));
      int v25 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v120, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string v120 = __dst;
      }
      support::fs::createUniquePath((const char *)&v120, &__p);
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v120.__r_.__value_.__l.__data_);
        uint64_t v42 = *(void *)(a1 + 216);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_91;
        }
      }
      else
      {
        uint64_t v42 = *(void *)(a1 + 216);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_91:
          std::string v119 = __p;
          goto LABEL_96;
        }
      }
      std::string::__init_copy_ctor_external(&v119, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_96:
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string v118 = *(std::string *)a3;
      }
      uint64_t v46 = *(void *)(v42 + 24);
      uint64_t v45 = v42 + 24;
      uint64_t v44 = v46;
      if (v46)
      {
        uint64_t v47 = v45;
        do
        {
          int v48 = *(_DWORD *)(v44 + 32);
          BOOL v49 = v48 == 0;
          if (v48) {
            uint64_t v50 = (uint64_t *)v44;
          }
          else {
            uint64_t v50 = (uint64_t *)(v44 + 8);
          }
          if (!v49) {
            uint64_t v47 = v44;
          }
          uint64_t v44 = *v50;
        }
        while (*v50);
        if (v47 != v45 && *(_DWORD *)(v47 + 32) <= 1u) {
          diag::DIAGReader::snapshot(*(void *)(v47 + 40), (uint64_t)&v119);
        }
      }
      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v118.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_112:
          int v51 = *(NSObject **)(a1 + 40);
          BOOL v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
          int v53 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if (v52) {
            goto LABEL_113;
          }
          goto LABEL_120;
        }
      }
      else if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_112;
      }
      operator delete(v119.__r_.__value_.__l.__data_);
      int v51 = *(NSObject **)(a1 + 40);
      BOOL v56 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
      int v53 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (v56)
      {
LABEL_113:
        BOOL v54 = v53 < 0;
        p_p = &__p;
        if (v54) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        size_t v137 = p_p;
        _os_log_impl(&dword_1A609F000, v51, OS_LOG_TYPE_DEFAULT, "#I Saved ADPL trace: %s", buf, 0xCu);
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        {
LABEL_116:
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((v25 & 0x80000000) == 0) {
            goto LABEL_122;
          }
          goto LABEL_117;
        }
        goto LABEL_121;
      }
LABEL_120:
      if ((v53 & 0x80) != 0) {
        goto LABEL_116;
      }
LABEL_121:
      if (v25 < 0) {
LABEL_117:
      }
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_122:
      if (*(unsigned char *)(a1 + 446))
      {
        int v57 = *(char *)(a2 + 23);
        if (v57 >= 0) {
          size_t v58 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v58 = *(void *)(a2 + 8);
        }
        unint64_t v59 = v58 + 5;
        memset(&__dst, 170, sizeof(__dst));
        if (v58 + 5 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v59 >= 0x17)
        {
          uint64_t v65 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v59 | 7) != 0x17) {
            uint64_t v65 = v59 | 7;
          }
          uint64_t v66 = v65 + 1;
          int v60 = (std::string *)operator new(v65 + 1);
          __dst.__r_.__value_.__l.__size_ = v58 + 5;
          __dst.__r_.__value_.__r.__words[2] = v66 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
        }
        else
        {
          memset(&__dst, 0, sizeof(__dst));
          int v60 = &__dst;
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v58 + 5;
          if (!v58) {
            goto LABEL_144;
          }
        }
        if (v57 >= 0) {
          uint64_t v67 = (const void *)a2;
        }
        else {
          uint64_t v67 = *(const void **)a2;
        }
        memmove(v60, v67, v58);
LABEL_144:
        strcpy((char *)v60 + v58, "-qdss");
        memset(&__p, 170, sizeof(__p));
        int v68 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v117, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string v117 = __dst;
        }
        support::fs::createUniquePath((const char *)&v117, &__p);
        if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v117.__r_.__value_.__l.__data_);
          uint64_t v69 = *(void *)(a1 + 216);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_149;
          }
        }
        else
        {
          uint64_t v69 = *(void *)(a1 + 216);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_149:
            std::string v116 = __p;
            goto LABEL_152;
          }
        }
        std::string::__init_copy_ctor_external(&v116, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_152:
        if (*(char *)(a3 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v115, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
        }
        else {
          std::string v115 = *(std::string *)a3;
        }
        uint64_t v72 = *(void *)(v69 + 24);
        uint64_t v71 = v69 + 24;
        uint64_t v70 = v72;
        if (v72)
        {
          uint64_t v73 = v71;
          do
          {
            unsigned int v74 = *(_DWORD *)(v70 + 32);
            BOOL v75 = v74 >= 2;
            if (v74 >= 2) {
              std::string v76 = (uint64_t *)v70;
            }
            else {
              std::string v76 = (uint64_t *)(v70 + 8);
            }
            if (v75) {
              uint64_t v73 = v70;
            }
            uint64_t v70 = *v76;
          }
          while (*v76);
          if (v73 != v71 && *(_DWORD *)(v73 + 32) <= 2u) {
            diag::DIAGReader::snapshot(*(void *)(v73 + 40), (uint64_t)&v116);
          }
        }
        if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v115.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v116.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_169:
            uint64_t v77 = *(NSObject **)(a1 + 40);
            BOOL v78 = os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT);
            int v79 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            if (!v78)
            {
LABEL_236:
              if ((v79 & 0x80) == 0)
              {
LABEL_237:
                if ((v68 & 0x80000000) == 0)
                {
LABEL_238:
                  if (*(_DWORD *)(a1 + 460) != 1) {
                    goto LABEL_241;
                  }
LABEL_239:
                  if ((diag::DIAGConfigurer::isAborted(*(diag::DIAGConfigurer **)(a1 + 232)) & 1) == 0)
                  {
                    uint64_t v100 = *(void *)(a1 + 216);
                    uint64_t v101 = *(void **)(v100 + 16);
                    uint64_t v102 = (void *)(v100 + 24);
                    if (v101 != (void *)(v100 + 24))
                    {
                      do
                      {
                        diag::DIAGReader::start((diag::DIAGReader *)v101[5]);
                        uint8x8_t v106 = (void *)v101[1];
                        if (v106)
                        {
                          do
                          {
                            uint64_t v107 = v106;
                            uint8x8_t v106 = (void *)*v106;
                          }
                          while (v106);
                        }
                        else
                        {
                          do
                          {
                            uint64_t v107 = (void *)v101[2];
                            BOOL v31 = *v107 == (void)v101;
                            uint64_t v101 = v107;
                          }
                          while (!v31);
                        }
                        uint64_t v101 = v107;
                      }
                      while (v107 != v102);
                    }
                  }
LABEL_241:
                  unsigned int v103 = *(_DWORD *)(a1 + 460);
                  if (*(void *)a5)
                  {
                    int v104 = _Block_copy(*(const void **)a5);
                    int v105 = *(NSObject **)(a5 + 8);
                    size_t v110 = v104;
                    long long v111 = v105;
                    if (!v105)
                    {
LABEL_244:
                      char v109 = 0;
                      LOBYTE(v108) = 0;
                      diag::Service::Internal::changeStateAndNotify_sync(a1, v103, (uint64_t)&v110, (uint64_t)&v108);
                      if (v109 < 0) {
                        operator delete(v108);
                      }
                      if (v105) {
                        dispatch_release(v105);
                      }
                      if (v104) {
                        _Block_release(v104);
                      }
                      return;
                    }
                  }
                  else
                  {
                    int v104 = 0;
                    int v105 = *(NSObject **)(a5 + 8);
                    size_t v110 = 0;
                    long long v111 = v105;
                    if (!v105) {
                      goto LABEL_244;
                    }
                  }
                  dispatch_retain(v105);
                  goto LABEL_244;
                }
LABEL_232:
                operator delete(__dst.__r_.__value_.__l.__data_);
                if (*(_DWORD *)(a1 + 460) != 1) {
                  goto LABEL_241;
                }
                goto LABEL_239;
              }
LABEL_231:
              operator delete(__p.__r_.__value_.__l.__data_);
              if ((v68 & 0x80000000) == 0) {
                goto LABEL_238;
              }
              goto LABEL_232;
            }
            goto LABEL_173;
          }
        }
        else if ((SHIBYTE(v116.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_169;
        }
        operator delete(v116.__r_.__value_.__l.__data_);
        uint64_t v77 = *(NSObject **)(a1 + 40);
        BOOL v80 = os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT);
        int v79 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if (!v80) {
          goto LABEL_236;
        }
LABEL_173:
        BOOL v54 = v79 < 0;
        uint64_t v81 = &__p;
        if (v54) {
          uint64_t v81 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        size_t v137 = v81;
        std::string v82 = "#I Saved QDSS trace: %s";
        goto LABEL_230;
      }
      int v61 = *(char *)(a2 + 23);
      if (v61 >= 0) {
        size_t v62 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v62 = *(void *)(a2 + 8);
      }
      unint64_t v63 = v62 + 5;
      memset(&__dst, 170, sizeof(__dst));
      if (v62 + 5 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v63 >= 0x17)
      {
        uint64_t v83 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v63 | 7) != 0x17) {
          uint64_t v83 = v63 | 7;
        }
        uint64_t v84 = v83 + 1;
        uint64_t v64 = (std::string *)operator new(v83 + 1);
        __dst.__r_.__value_.__l.__size_ = v62 + 5;
        __dst.__r_.__value_.__r.__words[2] = v84 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        uint64_t v64 = &__dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v62 + 5;
        if (!v62) {
          goto LABEL_183;
        }
      }
      if (v61 >= 0) {
        uint64_t v85 = (const void *)a2;
      }
      else {
        uint64_t v85 = *(const void **)a2;
      }
      memmove(v64, v85, v62);
LABEL_183:
      strcpy((char *)v64 + v62, "-diag");
      memset(&__p, 170, sizeof(__p));
      int v68 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v114, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string v114 = __dst;
      }
      support::fs::createUniquePath((const char *)&v114, &__p);
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v114.__r_.__value_.__l.__data_);
      }
      uint64_t v92 = *(void *)(a1 + 216);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v113, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v113 = __p;
      }
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string v112 = *(std::string *)a3;
      }
      uint64_t v95 = *(void **)(v92 + 24);
      uint64_t v94 = (void *)(v92 + 24);
      uint64_t v93 = v95;
      if (v95)
      {
        do
        {
          long long v96 = v93;
          uint64_t v93 = (void *)*v93;
        }
        while (v93);
        if (v96 != v94 && !*((_DWORD *)v96 + 8)) {
          diag::DIAGReader::snapshot(v96[5], (uint64_t)&v113);
        }
      }
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v112.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_226:
          uint64_t v77 = *(NSObject **)(a1 + 40);
          BOOL v97 = os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT);
          int v79 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if (!v97) {
            goto LABEL_236;
          }
LABEL_227:
          BOOL v54 = v79 < 0;
          CFTypeRef v98 = &__p;
          if (v54) {
            CFTypeRef v98 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136315138;
          size_t v137 = v98;
          std::string v82 = "#I Saved DIAG trace: %s";
LABEL_230:
          _os_log_impl(&dword_1A609F000, v77, OS_LOG_TYPE_DEFAULT, v82, buf, 0xCu);
          if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_237;
          }
          goto LABEL_231;
        }
      }
      else if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_226;
      }
      operator delete(v113.__r_.__value_.__l.__data_);
      uint64_t v77 = *(NSObject **)(a1 + 40);
      BOOL v99 = os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT);
      int v79 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (!v99) {
        goto LABEL_236;
      }
      goto LABEL_227;
    }
  }
  else if (a4)
  {
    goto LABEL_15;
  }
  if (!v14) {
    goto LABEL_199;
  }
  if (!*(unsigned char *)(a1 + 445)) {
    goto LABEL_62;
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v131, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v131 = *(std::string *)a2;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v130 = *(std::string *)a3;
  }
  uint64_t v28 = *(void *)(v14 + 24);
  uint64_t v27 = v14 + 24;
  uint64_t v26 = v28;
  if (v28)
  {
    uint64_t v29 = v27;
    do
    {
      int v30 = *(_DWORD *)(v26 + 32);
      BOOL v31 = v30 == 0;
      if (v30) {
        uint64_t v32 = (uint64_t *)v26;
      }
      else {
        uint64_t v32 = (uint64_t *)(v26 + 8);
      }
      if (!v31) {
        uint64_t v29 = v26;
      }
      uint64_t v26 = *v32;
    }
    while (*v32);
    if (v29 != v27 && *(_DWORD *)(v29 + 32) <= 1u) {
      diag::DIAGReader::snapshot(*(void *)(v29 + 40), (uint64_t)&v131);
    }
  }
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v130.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_62:
      uint64_t v33 = *(void *)(a1 + 216);
      int v34 = *(char *)(a2 + 23);
      if (*(unsigned char *)(a1 + 446))
      {
LABEL_63:
        if (v34 < 0) {
          std::string::__init_copy_ctor_external(&v129, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string v129 = *(std::string *)a2;
        }
        if (*(char *)(a3 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v128, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
        }
        else {
          std::string v128 = *(std::string *)a3;
        }
        uint64_t v37 = *(void *)(v33 + 24);
        uint64_t v36 = v33 + 24;
        uint64_t v35 = v37;
        if (v37)
        {
          uint64_t v38 = v36;
          do
          {
            unsigned int v39 = *(_DWORD *)(v35 + 32);
            BOOL v40 = v39 >= 2;
            if (v39 >= 2) {
              uint64_t v41 = (uint64_t *)v35;
            }
            else {
              uint64_t v41 = (uint64_t *)(v35 + 8);
            }
            if (v40) {
              uint64_t v38 = v35;
            }
            uint64_t v35 = *v41;
          }
          while (*v41);
          if (v38 != v36 && *(_DWORD *)(v38 + 32) <= 2u) {
            diag::DIAGReader::snapshot(*(void *)(v38 + 40), (uint64_t)&v129);
          }
        }
        if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v128.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_199;
          }
        }
        else if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_199;
        }
        unint64_t v43 = &v129;
        goto LABEL_198;
      }
      goto LABEL_70;
    }
  }
  else if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_62;
  }
  operator delete(v131.__r_.__value_.__l.__data_);
  uint64_t v33 = *(void *)(a1 + 216);
  int v34 = *(char *)(a2 + 23);
  if (*(unsigned char *)(a1 + 446)) {
    goto LABEL_63;
  }
LABEL_70:
  if (v34 < 0) {
    std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v127 = *(std::string *)a2;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v126, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v126 = *(std::string *)a3;
  }
  int v88 = *(void **)(v33 + 24);
  long long v87 = (void *)(v33 + 24);
  size_t v86 = v88;
  if (v88)
  {
    do
    {
      std::string v89 = v86;
      size_t v86 = (void *)*v86;
    }
    while (v86);
    if (v89 != v87 && !*((_DWORD *)v89 + 8)) {
      diag::DIAGReader::snapshot(v89[5], (uint64_t)&v127);
    }
  }
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v126.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
  {
    unint64_t v43 = &v127;
LABEL_198:
    operator delete(v43->__r_.__value_.__l.__data_);
  }
LABEL_199:
  if (!*(void *)a5)
  {
    int v90 = 0;
    uint64_t v91 = *(NSObject **)(a5 + 8);
    std::string v124 = 0;
    std::string::size_type v125 = v91;
    if (!v91) {
      goto LABEL_202;
    }
    goto LABEL_201;
  }
  int v90 = _Block_copy(*(const void **)a5);
  uint64_t v91 = *(NSObject **)(a5 + 8);
  std::string v124 = v90;
  std::string::size_type v125 = v91;
  if (v91) {
LABEL_201:
  }
    dispatch_retain(v91);
LABEL_202:
  char v123 = 0;
  LOBYTE(v122) = 0;
  diag::Service::Internal::changeStateAndNotify_sync(a1, 0, (uint64_t)&v124, (uint64_t)&v122);
  if (v123 < 0) {
    operator delete(v122);
  }
  if (v91) {
    dispatch_release(v91);
  }
  if (v90) {
    _Block_release(v90);
  }
}

void sub_1A61BFF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if (a27 < 0)
    {
LABEL_5:
      operator delete(a22);
      if ((a62 & 0x80000000) == 0)
      {
LABEL_9:
        if (v62 < 0)
        {
          operator delete(*(void **)(v63 - 176));
          _Unwind_Resume(a1);
        }
        _Unwind_Resume(a1);
      }
LABEL_8:
      operator delete(a57);
      goto LABEL_9;
    }
  }
  else if (a27 < 0)
  {
    goto LABEL_5;
  }
  if ((a62 & 0x80000000) == 0) {
    goto LABEL_9;
  }
  goto LABEL_8;
}

void __copy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIN4diag7Service8InternalEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE104c130_ZTSN8dispatch8callbackIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  uint64_t v6 = (std::string *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  uint64_t v8 = *(void **)(a2 + 104);
  if (v8) {
    uint64_t v8 = _Block_copy(v8);
  }
  uint64_t v9 = *(NSObject **)(a2 + 112);
  *(void *)(a1 + 104) = v8;
  *(void *)(a1 + 112) = v9;
  if (v9)
  {
    dispatch_retain(v9);
  }
}

void sub_1A61C0324(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 79) < 0)
  {
    operator delete(*v3);
    std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v2);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIN4diag7Service8InternalEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE104c130_ZTSN8dispatch8callbackIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 112);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 104);
  if (v3) {
    _Block_release(v3);
  }
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_10:
    operator delete(*(void **)(a1 + 56));
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v4) {
      return;
    }
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0) {
    goto LABEL_10;
  }
LABEL_7:
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v4) {
    return;
  }
LABEL_11:
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZN4diag7Service8Internal5resetEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Reset", buf, 2u);
  }
  uint64_t v4 = *(void *)(v2 + 216);
  if (v4 && (char v26 = 0, LOBYTE(v25) = 0, diag::DIAGReaderManager::pushInfo(v4, 2, (uint64_t)&v25), v26 < 0))
  {
    operator delete(v25);
    if (*(_DWORD *)(v2 + 460) == 3)
    {
LABEL_6:
      long long v5 = (const void *)a1[5];
      if (v5)
      {
        uint64_t v6 = _Block_copy(v5);
        long long v7 = a1[6];
        uint64_t v19 = v6;
        int v20 = v7;
        if (!v7)
        {
LABEL_9:
          char v18 = 0;
          LOBYTE(__p) = 0;
          diag::Service::Internal::changeStateAndNotify_sync(v2, 3u, (uint64_t)&v19, (uint64_t)&__p);
          if (v18 < 0) {
            operator delete(__p);
          }
          if (v7) {
            dispatch_release(v7);
          }
          if (v6) {
            _Block_release(v6);
          }
          return;
        }
      }
      else
      {
        uint64_t v6 = 0;
        long long v7 = a1[6];
        uint64_t v19 = 0;
        int v20 = v7;
        if (!v7) {
          goto LABEL_9;
        }
      }
      dispatch_retain(v7);
      goto LABEL_9;
    }
  }
  else if (*(_DWORD *)(v2 + 460) == 3)
  {
    goto LABEL_6;
  }
  *(_DWORD *)(v2 + 460) = 3;
  *(unsigned char *)(v2 + 444) = 0;
  uint64_t v8 = *(void *)(v2 + 216);
  if (v8)
  {
    uint64_t v9 = *(void **)(v8 + 16);
    uint64_t v10 = (void *)(v8 + 24);
    if (v9 != (void *)(v8 + 24))
    {
      do
      {
        diag::DIAGReader::stop((diag::DIAGReader *)v9[5]);
        uint64_t v14 = (void *)v9[1];
        if (v14)
        {
          do
          {
            BOOL v15 = v14;
            uint64_t v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            BOOL v15 = (void *)v9[2];
            BOOL v16 = *v15 == (void)v9;
            uint64_t v9 = v15;
          }
          while (!v16);
        }
        uint64_t v9 = v15;
      }
      while (v15 != v10);
    }
  }
  (*(void (**)(void))(**(void **)(v2 + 232) + 56))(*(void *)(v2 + 232));
  uint64_t v11 = (const void *)a1[5];
  if (!v11)
  {
    uint64_t v12 = 0;
    uint64_t v13 = a1[6];
    uint64_t v23 = 0;
    std::string v24 = v13;
    if (!v13) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v12 = _Block_copy(v11);
  uint64_t v13 = a1[6];
  uint64_t v23 = v12;
  std::string v24 = v13;
  if (v13) {
LABEL_20:
  }
    dispatch_retain(v13);
LABEL_21:
  char v22 = 0;
  LOBYTE(v21) = 0;
  diag::Service::Internal::changeStateAndNotify_sync(v2, 0, (uint64_t)&v23, (uint64_t)&v21);
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v13) {
    dispatch_release(v13);
  }
  if (v12) {
    _Block_release(v12);
  }
}

void sub_1A61C0680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_1A61C06C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 49) < 0) {
    operator delete(*(void **)(v1 - 72));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4diag7Service8Internal5abortEbN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(v2 + 216);
  if (v3)
  {
    uint64_t v4 = *(void **)(v3 + 16);
    long long v5 = (void *)(v3 + 24);
    if (v4 != (void *)(v3 + 24))
    {
      do
      {
        diag::DIAGReader::stop((diag::DIAGReader *)v4[5]);
        uint64_t v6 = (void *)v4[1];
        if (v6)
        {
          do
          {
            long long v7 = v6;
            uint64_t v6 = (void *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            long long v7 = (void *)v4[2];
            BOOL v8 = *v7 == (void)v4;
            uint64_t v4 = v7;
          }
          while (!v8);
        }
        uint64_t v4 = v7;
      }
      while (v7 != v5);
      uint64_t v3 = *(void *)(v2 + 216);
    }
    char v23 = 0;
    LOBYTE(__p) = 0;
    diag::DIAGReaderManager::pushInfo(v3, 1, (uint64_t)&__p);
    if (v23 < 0) {
      operator delete(__p);
    }
    uint64_t v9 = *(void *)(v2 + 216);
    uint64_t v10 = *(void **)(v9 + 16);
    uint64_t v11 = (void *)(v9 + 24);
    if (v10 != (void *)(v9 + 24))
    {
      do
      {
        uint64_t v12 = *(TraceFileCollection **)(v10[5] + 32);
        if (v12) {
          TraceFileCollection::archive(v12);
        }
        uint64_t v13 = (void *)v10[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            uint64_t v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v14 = (void *)v10[2];
            BOOL v8 = *v14 == (void)v10;
            uint64_t v10 = v14;
          }
          while (!v8);
        }
        uint64_t v10 = v14;
      }
      while (v14 != v11);
    }
  }
  BOOL v15 = (const void *)a1[5];
  if (v15)
  {
    BOOL v16 = _Block_copy(v15);
    size_t v17 = a1[6];
    int v20 = v16;
    BOOL v21 = v17;
    if (!v17) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  BOOL v16 = 0;
  size_t v17 = a1[6];
  int v20 = 0;
  BOOL v21 = v17;
  if (v17) {
LABEL_27:
  }
    dispatch_retain(v17);
LABEL_28:
  char v19 = 0;
  LOBYTE(v18) = 0;
  diag::Service::Internal::changeStateAndNotify_sync(v2, 0, (uint64_t)&v20, (uint64_t)&v18);
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v17) {
    dispatch_release(v17);
  }
  if (v16) {
    _Block_release(v16);
  }
}

void sub_1A61C0894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN4diag7Service8Internal12updateConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v37[0]) = 0;
    _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "#I Update", (uint8_t *)v37, 2u);
  }
  uint64_t v4 = (CFTypeRef *)(a1 + 40);
  long long v5 = (const __CFDictionary **)(v2 + 208);
  if (v2 + 208 != a1 + 40)
  {
    CFDictionaryRef v6 = (const __CFDictionary *)*v4;
    if (*v4) {
      CFRetain(*v4);
    }
    CFDictionaryRef v7 = *v5;
    void *v5 = v6;
    if (v7) {
      CFRelease(v7);
    }
  }
  v37[0] = 0xAAAAAAAAAAAAAAAALL;
  v37[1] = 0xAAAAAAAAAAAAAAAALL;
  BOOL v8 = (config::hw *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v37, *v5);
  config::hw::watch(v8);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, "History");
  ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v37, *(const __CFString **)buf);
  uint64_t v9 = (capabilities::trace *)MEMORY[0x1A62748E0](buf);
  capabilities::trace::defaultMemoryFileMaxCount(v9);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, "MaxMemoryFileCount");
  ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v37, *(const __CFString **)buf);
  uint64_t v10 = (capabilities::trace *)MEMORY[0x1A62748E0](buf);
  capabilities::trace::defaultFileSizeBytes(v10);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, "FileSize");
  ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v37, *(const __CFString **)buf);
  MEMORY[0x1A62748E0](buf);
  CFDictionaryRef v11 = *v5;
  if (*v5) {
    uint64_t v12 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v12)
  {
    uint64_t v13 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138412290;
      *(void *)&uint8_t buf[4] = v11;
      _os_log_impl(&dword_1A609F000, v13, OS_LOG_TYPE_DEFAULT, "#I Updated configuration dictionary: %@", buf, 0xCu);
    }
  }
  uint64_t v14 = *(void *)(v2 + 216);
  if (v14)
  {
    unsigned __int8 v15 = *(unsigned char *)(v2 + 446) ? 2 : *(unsigned char *)(v2 + 445);
    uint64_t v16 = *(void *)(v14 + 24);
    if (v16)
    {
      unsigned int v17 = v15;
      uint64_t v18 = v14 + 24;
      uint64_t v19 = *(void *)(v14 + 24);
      do
      {
        unsigned int v20 = *(_DWORD *)(v19 + 32);
        BOOL v21 = v20 >= v17;
        if (v20 >= v17) {
          char v22 = (uint64_t *)v19;
        }
        else {
          char v22 = (uint64_t *)(v19 + 8);
        }
        if (v21) {
          uint64_t v18 = v19;
        }
        uint64_t v19 = *v22;
      }
      while (*v22);
      if (v18 != v14 + 24 && *(_DWORD *)(v18 + 32) <= v17)
      {
        char v23 = *(TraceFileCollection **)(*(void *)(v18 + 40) + 32);
        if (v23)
        {
          TraceFileCollection::setHistory(v23);
          uint64_t v14 = *(void *)(v2 + 216);
          uint64_t v16 = *(void *)(v14 + 24);
        }
      }
      if (v16)
      {
        uint64_t v24 = v14 + 24;
        uint64_t v25 = v16;
        do
        {
          unsigned int v26 = *(_DWORD *)(v25 + 32);
          BOOL v27 = v26 >= v17;
          if (v26 >= v17) {
            uint64_t v28 = (uint64_t *)v25;
          }
          else {
            uint64_t v28 = (uint64_t *)(v25 + 8);
          }
          if (v27) {
            uint64_t v24 = v25;
          }
          uint64_t v25 = *v28;
        }
        while (*v28);
        if (v24 != v14 + 24 && *(_DWORD *)(v24 + 32) <= v17)
        {
          uint64_t v29 = *(TraceFileCollection **)(*(void *)(v24 + 40) + 32);
          if (v29)
          {
            TraceFileCollection::setMaxMemoryFileCount(v29);
            uint64_t v14 = *(void *)(v2 + 216);
            uint64_t v16 = *(void *)(v14 + 24);
          }
        }
        if (v16)
        {
          uint64_t v30 = v14 + 24;
          uint64_t v31 = v14 + 24;
          do
          {
            unsigned int v32 = *(_DWORD *)(v16 + 32);
            BOOL v33 = v32 >= v17;
            if (v32 >= v17) {
              int v34 = (uint64_t *)v16;
            }
            else {
              int v34 = (uint64_t *)(v16 + 8);
            }
            if (v33) {
              uint64_t v31 = v16;
            }
            uint64_t v16 = *v34;
          }
          while (*v34);
          if (v31 != v30 && *(_DWORD *)(v31 + 32) <= v17)
          {
            uint64_t v35 = *(TraceFileCollection **)(*(void *)(v31 + 40) + 32);
            if (v35) {
              TraceFileCollection::setFileSize(v35);
            }
          }
        }
      }
    }
  }
  return MEMORY[0x1A6274930](v37);
}

uint64_t ___ZNK4diag7Service8Internal8getStateEv_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40) + 460);
  return result;
}

void ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFDictionaryRef v7 = v6;
  BOOL v8 = (char *)operator new(0x28uLL);
  *(void *)BOOL v8 = *(void *)a2;
  *((_DWORD *)v8 + 2) = *(_DWORD *)(a2 + 8);
  uint64_t v9 = (std::string *)(v8 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 16);
    *((void *)v8 + 4) = *(void *)(a2 + 32);
  }
  uint64_t v10 = a1[2];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  CFDictionaryRef v11 = operator new(0x18uLL);
  void *v11 = v8;
  v11[1] = v5;
  v11[2] = v7;
  dispatch_async_f(v10, v11, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1}>(diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1},std::default_delete<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1}>(diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1},std::default_delete<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*(void *)*a1 + 216);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v2 + 8);
    if (*(char *)(v2 + 39) < 0) {
      std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(v2 + 16), *(void *)(v2 + 24));
    }
    else {
      std::string v6 = *(std::string *)(v2 + 16);
    }
    diag::DIAGReaderManager::pushInfo(v3, v4, (uint64_t)&v6);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v6.__r_.__value_.__l.__data_);
      if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  if (*(char *)(v2 + 39) < 0) {
LABEL_7:
  }
    operator delete(*(void **)(v2 + 16));
LABEL_8:
  operator delete((void *)v2);
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete(a1);
}

void sub_1A61C0EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::unique_ptr<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1},std::default_delete<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&a10);
  uint64_t v18 = (std::__shared_weak_count *)v16[2];
  if (v18)
  {
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1},std::default_delete<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::pushInfo(std::string,xpc::dict)::{lambda(void)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFDictionaryRef v7 = v6;
  BOOL v8 = operator new(0x28uLL);
  *BOOL v8 = *(void *)a2;
  uint64_t v9 = (std::string *)(v8 + 1);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    v8[3] = *(void *)(a2 + 24);
  }
  uint64_t v10 = *(void **)(a2 + 32);
  void v8[4] = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    void v8[4] = xpc_null_create();
  }
  CFDictionaryRef v11 = a1[2];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = operator new(0x18uLL);
  *uint64_t v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::pushInfo(std::string,xpc::dict)::{lambda(void)#1}>(diag::Service::Internal::pushInfo(std::string,xpc::dict)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<diag::Service::Internal::pushInfo(std::string,xpc::dict)::{lambda(void)#1},std::default_delete<diag::Service::Internal::pushInfo(std::string,xpc::dict)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::pushInfo(std::string,xpc::dict)::{lambda(void)#1}>(diag::Service::Internal::pushInfo(std::string,xpc::dict)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<diag::Service::Internal::pushInfo(std::string,xpc::dict)::{lambda(void)#1},std::default_delete<diag::Service::Internal::pushInfo(std::string,xpc::dict)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*(void *)*a1 + 216);
  if (v3)
  {
    if (*(char *)(v2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(v2 + 8), *(void *)(v2 + 16));
    }
    else
    {
      long long v4 = *(_OWORD *)(v2 + 8);
      v8.__r_.__value_.__r.__words[2] = *(void *)(v2 + 24);
      *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v4;
    }
    xpc_object_t v5 = *(xpc_object_t *)(v2 + 32);
    xpc_object_t v7 = v5;
    if (v5)
    {
      xpc_retain(v5);
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v7 = v5;
    }
    diag::DIAGReaderManager::pushInfo(v3, (uint64_t)&v8, &v7);
    xpc_release(v5);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
  }
  xpc_release(*(xpc_object_t *)(v2 + 32));
  *(void *)(v2 + 32) = 0;
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*(void **)(v2 + 8));
  }
  operator delete((void *)v2);
  std::string v6 = (std::__shared_weak_count *)a1[2];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  operator delete(a1);
}

void sub_1A61C1244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(*(xpc_object_t *)(v17 + 32));
  *(void *)(v17 + 32) = 0;
  if (*(char *)(v17 + 31) < 0) {
    operator delete(*v18);
  }
  operator delete((void *)v17);
  unsigned int v20 = (std::__shared_weak_count *)v16[2];
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::setStallHandler(abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>)::{lambda(void)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  std::string v8 = operator new(0x20uLL);
  *(void *)std::string v8 = *(void *)a2;
  v8[2] = *(_DWORD *)(a2 + 8);
  *((_OWORD *)v8 + 1) = *(_OWORD *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v9 = a1[2];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v8;
  v10[1] = v5;
  void v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::setStallHandler(abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>)::{lambda(void)#1}>(diag::Service::Internal::setStallHandler(abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<diag::Service::Internal::setStallHandler(abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>)::{lambda(void)#1},dispatch_queue_s *::default_delete<diag::Service::Internal::setStallHandler(abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::setStallHandler(abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>)::{lambda(void)#1}>(diag::Service::Internal::setStallHandler(abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<diag::Service::Internal::setStallHandler(abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>)::{lambda(void)#1},dispatch_queue_s *::default_delete<diag::Service::Internal::setStallHandler(abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*(void *)*a1 + 216);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v2 + 8);
    uint64_t v5 = *(void **)(v2 + 16);
    if (v5) {
      uint64_t v5 = _Block_copy(v5);
    }
    std::string v6 = *(NSObject **)(v2 + 24);
    aBlocunint64_t k = v5;
    dispatch_object_t object = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    diag::DIAGReaderManager::setStallHandler(v3, v4, (uint64_t)&aBlock);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
  }
  xpc_object_t v7 = *(NSObject **)(v2 + 24);
  if (v7) {
    dispatch_release(v7);
  }
  std::string v8 = *(const void **)(v2 + 16);
  if (v8) {
    _Block_release(v8);
  }
  operator delete((void *)v2);
  uint64_t v9 = (std::__shared_weak_count *)a1[2];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(a1);
}

void sub_1A61C151C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t v13 = v11[3];
  if (v13) {
    dispatch_release(v13);
  }
  uint64_t v14 = (const void *)v11[2];
  if (v14) {
    _Block_release(v14);
  }
  operator delete(v11);
  unsigned __int8 v15 = (std::__shared_weak_count *)v10[2];
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<diag::Service::Internal *,std::shared_ptr<diag::Service::Internal> ctu::SharedSynchronizable<diag::Service::Internal>::make_shared_ptr<diag::Service::Internal>(diag::Service::Internal*)::{lambda(diag::Service::Internal *)#1},std::allocator<diag::Service::Internal>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<diag::Service::Internal *,std::shared_ptr<diag::Service::Internal> ctu::SharedSynchronizable<diag::Service::Internal>::make_shared_ptr<diag::Service::Internal>(diag::Service::Internal*)::{lambda(diag::Service::Internal *)#1},std::allocator<diag::Service::Internal>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<diag::Service::Internal *,std::shared_ptr<diag::Service::Internal> ctu::SharedSynchronizable<diag::Service::Internal>::make_shared_ptr<diag::Service::Internal>(diag::Service::Internal*)::{lambda(diag::Service::Internal *)#1},std::allocator<diag::Service::Internal>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4diag7Service8InternalEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4diag7Service8InternalEE15make_shared_ptrIS3_EENSt3__110sh"
                                "ared_ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4diag7Service8InternalEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4diag7Service8InternalEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<diag::Service::Internal> ctu::SharedSynchronizable<diag::Service::Internal>::make_shared_ptr<diag::Service::Internal>(diag::Service::Internal*)::{lambda(diag::Service::Internal*)#1}::operator() const(diag::Service::Internal*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t __cxx_global_var_init_8()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1A609F000);
  }
  return result;
}

uint64_t _GLOBAL__sub_I_CellularDIAGService_cpp()
{
  uint64_t result = ETLDIAGLoggingGetDefaultView();
  dword_1EB5EEB64 = result;
  return result;
}

BOOL diag::DIAGProtocolHDLC::scanForFlag(diag::DIAGProtocolHDLC *this, const unsigned __int8 *a2, _DWORD *a3, unsigned int *a4)
{
  *a3 = 0;
  if (!a2) {
    return 0;
  }
  uint64_t v4 = 0;
  do
  {
    BOOL v5 = *((unsigned __int8 *)this + v4) == 126;
    if (*((unsigned char *)this + v4) == 126) {
      break;
    }
    *a3 = ++v4;
  }
  while (a2 != v4);
  return v5;
}

uint64_t diag::DIAGProtocolHDLC::consumeFlagIfNeeded(TraceFileCollection **this, const unsigned __int8 **a2, unsigned int *a3)
{
  int v3 = *a3;
  if (!*a3) {
    return 0;
  }
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = (uint64_t)*a2;
    if (**a2 != 126) {
      break;
    }
    *a3 = v3 - 1;
    *a2 = (const unsigned __int8 *)(v8 + 1);
    unsigned __int8 v10 = 126;
    uint64_t v7 = TraceFileCollection::handleReadData(this[1], &v10) + v7;
    int v3 = *a3;
  }
  while (*a3);
  return v7;
}

uint64_t diag::DIAGProtocolHDLC::handleReadData(diag::DIAGProtocolHDLC *this, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t Data = a3;
  uint64_t v4 = a2;
  if (*(_DWORD *)this == 1)
  {
    int v7 = 0;
    if (!*((unsigned char *)this + 4)) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (!*(_DWORD *)this)
  {
    if (!a3) {
      return Data;
    }
    uint64_t v6 = 0;
    while (a2[v6] != 126)
    {
      if (a3 == ++v6) {
        return a3;
      }
    }
    int v17 = a3 - 1;
    unsigned __int8 v23 = 126;
    TraceFileCollection::handleReadData(*((TraceFileCollection **)this + 1), &v23);
    *(_DWORD *)this = 1;
    if (v17 == v6) {
      return v6 + 1;
    }
    int v20 = 0;
    LODWORD(Data) = v17 - v6;
    v4 += v6 + 1;
    do
    {
      if (*v4 != 126) {
        break;
      }
      LODWORD(Data) = Data - 1;
      ++v4;
      unsigned __int8 v24 = 126;
      v20 += TraceFileCollection::handleReadData(*((TraceFileCollection **)this + 1), &v24);
    }
    while (Data);
    int v7 = v20 + v6 + 1;
    if (!*((unsigned char *)this + 4)) {
      goto LABEL_11;
    }
LABEL_9:
    *((unsigned char *)this + 4) = 0;
    if (*v4 != 126)
    {
      unsigned __int8 v22 = 126;
      TraceFileCollection::handleReadData(*((TraceFileCollection **)this + 1), &v22);
    }
LABEL_11:
    unsigned int v8 = TraceFileCollection::getInMemoryRemaining(*((TraceFileCollection **)this + 1));
    if (Data >= v8) {
      unsigned int v9 = v8;
    }
    else {
      unsigned int v9 = Data;
    }
    if (v8 <= 0x2000)
    {
      int v10 = 0;
      if (v9)
      {
        while (*v4 == 126)
        {
          --v9;
          ++v4;
          unsigned __int8 v25 = 126;
          v10 += TraceFileCollection::handleReadData(*((TraceFileCollection **)this + 1), &v25);
          if (!v9) {
            goto LABEL_18;
          }
        }
        int v18 = 0;
        uint64_t Data = (v10 + v7);
        *((unsigned char *)this + 4) = 1;
        uint64_t v19 = v4;
        while (1)
        {
          ++v18;
          if (*v19 == 126) {
            break;
          }
          ++v19;
          if (v9 == v18) {
            goto LABEL_52;
          }
        }
        uint64_t Data = TraceFileCollection::handleReadData(*((TraceFileCollection **)this + 1), v4)
             + Data;
      }
      else
      {
LABEL_18:
        uint64_t Data = (v10 + v7);
        *((unsigned char *)this + 4) = 1;
      }
LABEL_52:
      TraceFileCollection::archive(*((TraceFileCollection **)this + 1));
      return Data;
    }
    if (v8 - 0x2000 < v9) {
      unsigned int v9 = v8 - 0x2000;
    }
    uint64_t Data = TraceFileCollection::handleReadData(*((TraceFileCollection **)this + 1), v4) + v7;
    if (v4[v9 - 1] != 126)
    {
      int v15 = 2;
LABEL_38:
      *(_DWORD *)this = v15;
      return Data;
    }
    return Data;
  }
  unsigned int v11 = TraceFileCollection::getInMemoryRemaining(*((TraceFileCollection **)this + 1));
  if (v11 >= Data) {
    unsigned int v12 = Data;
  }
  else {
    unsigned int v12 = v11;
  }
  if (v11 <= 0x2000)
  {
    if (v12)
    {
      uint64_t v13 = 0;
      int v14 = v11;
      if (v11 >= (unint64_t)Data) {
        int v14 = Data;
      }
      while (v4[v13] != 126)
      {
        if (v14 == ++v13) {
          goto LABEL_28;
        }
      }
      *(_DWORD *)this = 1;
      *((unsigned char *)this + 4) = 1;
      uint64_t Data = TraceFileCollection::handleReadData(*((TraceFileCollection **)this + 1), v4);
    }
    else
    {
LABEL_28:
      uint64_t Data = 0;
    }
    goto LABEL_52;
  }
  if (v11 - 0x2000 >= v12) {
    unsigned int v16 = v12;
  }
  else {
    unsigned int v16 = v11 - 0x2000;
  }
  uint64_t Data = TraceFileCollection::handleReadData(*((TraceFileCollection **)this + 1), v4);
  if (v4[v16 - 1] == 126)
  {
    int v15 = 1;
    goto LABEL_38;
  }
  return Data;
}

uint64_t diag::DIAGProtocolHDLC::reset(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(unsigned char *)(this + 4) = 0;
  return this;
}

uint64_t abm::HelperTask::HelperTask(uint64_t a1, int a2, void *a3, void *a4)
{
  abm::helper::getLoggingDomain(a2, v32);
  int v8 = (char)v33;
  if ((v33 & 0x80u) == 0) {
    size_t v9 = v33;
  }
  else {
    size_t v9 = (size_t)v32[1];
  }
  unint64_t v10 = v9 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v9 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v10 >= 0x17)
  {
    uint64_t v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v14 = v10 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (std::string *)operator new(v14 + 1);
    __dst.__r_.__value_.__l.__size_ = v9 + 1;
    __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_12:
    if (v8 >= 0) {
      unsigned int v16 = v32;
    }
    else {
      unsigned int v16 = (void **)v32[0];
    }
    memmove(p_dst, v16, v9);
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v9) = 46;
    unsigned int v12 = a2 - 1;
    if ((a2 - 1) <= 9) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v9 + 1;
  if (v9) {
    goto LABEL_12;
  }
  LOWORD(__dst.__r_.__value_.__l.__data_) = 46;
  unsigned int v12 = a2 - 1;
  if ((a2 - 1) <= 9)
  {
LABEL_8:
    uint64_t v13 = off_1E5C48828[v12];
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v13 = "invalid";
LABEL_17:
  size_t v17 = strlen(v13);
  int v18 = std::string::append(&__dst, v13, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  int64_t v36 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v35 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (v36 >= 0) {
    int v20 = v35;
  }
  else {
    int v20 = (void **)v35[0];
  }
  abm::helper::getLoggingDomain(a2, __p);
  if (v12 > 9) {
    BOOL v21 = "invalid";
  }
  else {
    BOOL v21 = off_1E5C48828[v12];
  }
  if (v30 >= 0) {
    unsigned __int8 v22 = __p;
  }
  else {
    unsigned __int8 v22 = (void **)__p[0];
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v31, (const char *)v22, v21);
  unsigned __int8 v23 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  unsigned __int8 v24 = dispatch_queue_create((const char *)v20, v23);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v24;
  if (v24)
  {
    unsigned __int8 v25 = v24;
    dispatch_retain(v24);
    *(void *)(a1 + 96) = 0;
    dispatch_release(v25);
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = &unk_1EFB09350;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v38);
  *(void *)(a1 + 8) = &unk_1EFB08838;
  *(void *)(a1 + 56) = *a3;
  uint64_t v26 = a3[1];
  *(void *)(a1 + 64) = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v37);
  *(void *)a1 = &unk_1EFB0FD90;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v31);
  if (v30 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v36) & 0x80000000) == 0)
    {
LABEL_33:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_34;
      }
LABEL_40:
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (((char)v33 & 0x80000000) == 0) {
        goto LABEL_35;
      }
      goto LABEL_41;
    }
  }
  else if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(v35[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_40;
  }
LABEL_34:
  if (((char)v33 & 0x80000000) == 0) {
    goto LABEL_35;
  }
LABEL_41:
  operator delete(v32[0]);
LABEL_35:
  *(void *)a1 = &unk_1EFB0FCB8;
  *(_DWORD *)(a1 + 104) = a2;
  *(void *)(a1 + 112) = dispatch_group_create();
  *(void *)(a1 + 120) = *a4;
  uint64_t v27 = a4[1];
  *(void *)(a1 + 128) = v27;
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 16), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1A61C1E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v36 - 96));
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v36 - 112));
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::~SharedSynchronizable(v35);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a16);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a35 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a35 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a30);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a23 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a24);
  if ((a23 & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_9:
  operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t abm::HelperTask::getID(abm::HelperTask *this)
{
  return *((unsigned int *)this + 26);
}

void *abm::HelperTask::getName(abm::HelperTask *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_23, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&_MergedGlobals_23))
  {
    return qword_1EB5EEB70;
  }
  unsigned int v3 = *((_DWORD *)this + 26) - 1;
  if (v3 > 9) {
    uint64_t v4 = "invalid";
  }
  else {
    uint64_t v4 = off_1E5C48828[v3];
  }
  std::string::basic_string[abi:ne180100]<0>(qword_1EB5EEB70, v4);
  __cxa_atexit(MEMORY[0x1E4FBA210], qword_1EB5EEB70, &dword_1A609F000);
  __cxa_guard_release(&_MergedGlobals_23);
  return qword_1EB5EEB70;
}

void sub_1A61C1FB0(_Unwind_Exception *a1)
{
}

void abm::HelperTask::init(abm::HelperTask *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN3abm10HelperTask4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_12;
  v3[4] = this;
  uint64_t v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3abm10HelperTaskEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_18;
  void block[4] = (char *)this + 72;
  void block[5] = &v4;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ___ZN3abm10HelperTask4initEv_block_invoke(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(a1 + 32);
  (*(void (**)(void *))(*v1 + 56))(v1);
  uint64_t v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v3 = 136315138;
    uint64_t v4 = "Init";
    _os_log_debug_impl(&dword_1A609F000, v2, OS_LOG_TYPE_DEBUG, "#D %s", (uint8_t *)&v3, 0xCu);
  }
}

void abm::HelperTask::start(abm::HelperTask *this)
{
  uint64_t v1 = *((void *)this + 14);
  uint64_t v2 = *((void *)this + 11);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN3abm10HelperTask5startEv_block_invoke;
  block[3] = &__block_descriptor_tmp_5_1;
  void block[4] = this;
  dispatch_group_notify(v1, v2, block);
}

void ___ZN3abm10HelperTask5startEv_block_invoke(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(a1 + 32);
  (*(void (**)(void *))(*v1 + 64))(v1);
  uint64_t v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v3 = 136315138;
    uint64_t v4 = "Started";
    _os_log_debug_impl(&dword_1A609F000, v2, OS_LOG_TYPE_DEBUG, "#D %s", (uint8_t *)&v3, 0xCu);
  }
}

void abm::HelperTask::stop(abm::HelperTask *this@<X0>, NSObject **a2@<X8>)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZN3abm10HelperTask4stopEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_7_0;
  v7[4] = this;
  int v8 = v7;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3abm10HelperTaskEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_18;
  void block[4] = (char *)this + 72;
  void block[5] = &v8;
  uint64_t v5 = (char *)this + 88;
  uint64_t v4 = *((void *)this + 11);
  if (*((void *)v5 + 1))
  {
    dispatch_async_and_wait(v4, block);
    uint64_t v6 = *((void *)this + 14);
    *a2 = v6;
    if (!v6) {
      return;
    }
  }
  else
  {
    dispatch_sync(v4, block);
    uint64_t v6 = *((void *)this + 14);
    *a2 = v6;
    if (!v6) {
      return;
    }
  }
  dispatch_retain(v6);
}

void ___ZN3abm10HelperTask4stopEv_block_invoke(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(a1 + 32);
  (*(void (**)(void *))(*v1 + 72))(v1);
  uint64_t v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v3 = 136315138;
    uint64_t v4 = "Stopped";
    _os_log_debug_impl(&dword_1A609F000, v2, OS_LOG_TYPE_DEBUG, "#D %s", (uint8_t *)&v3, 0xCu);
  }
}

BOOL abm::HelperTask::isBusy(abm::HelperTask *this)
{
  uint64_t v1 = *((void *)this + 14);
  if (!v1) {
    return 0;
  }
  dispatch_time_t v2 = dispatch_time(0, 5000000);
  return dispatch_group_wait(v1, v2) != 0;
}

void *ctu::SharedLoggable<abm::HelperTask,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1EFB09350;
  MEMORY[0x1A6274710](a1 + 1);
  dispatch_time_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<abm::HelperTask,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1EFB09350;
  MEMORY[0x1A6274710](a1 + 1);
  dispatch_time_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *___ZNK3ctu20SharedSynchronizableIN3abm10HelperTaskEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void *BasebandTransportMAV::BasebandTransportMAV(void *a1, uint64_t *a2, NSObject **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  unint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *a3;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  BasebandTransport::BasebandTransport((uint64_t)a1, &v9, &object);
  if (object) {
    dispatch_release(object);
  }
  uint64_t v6 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *a1 = &unk_1EFB0FDD0;
  return a1;
}

void sub_1A61C26D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void BasebandTransportMAV::~BasebandTransportMAV(BasebandTransportMAV *this)
{
  BasebandTransport::~BasebandTransport(this);

  operator delete(v1);
}

uint64_t BasebandTransportMAV::switchDIAG_sync(BasebandTransportMAV *this)
{
  uint64_t v31 = 0;
  unsigned int v32 = &v31;
  uint64_t v33 = 0x2000000000;
  char v34 = 1;
  if (*((_DWORD *)this + 26) != 2) {
    goto LABEL_42;
  }
  dispatch_time_t v2 = dispatch_queue_create("internal diag queue", 0);
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  int v3 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v4 = off_1EB5EE540;
  if (!off_1EB5EE540)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v3);
    long long v5 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v6 = (std::__shared_weak_count *)*(&off_1EB5EE540 + 1);
    off_1EB5EE540 = v5;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    int v7 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    uint64_t v4 = off_1EB5EE540;
  }
  int v8 = (std::__shared_weak_count *)*(&off_1EB5EE540 + 1);
  uint64_t v27 = v4;
  uint64_t v28 = *(&off_1EB5EE540 + 1);
  if (*(&off_1EB5EE540 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EB5EE540 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN20BasebandTransportMAV15switchDIAG_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_13;
  aBlock[4] = this;
  uint64_t v9 = _Block_copy(aBlock);
  if (v2) {
    dispatch_retain(v2);
  }
  unsigned __int8 v25 = v9;
  dispatch_object_t object = v2;
  (*(void (**)(unint64_t *__return_ptr, uint64_t, void **))(*(void *)v4 + 128))(&v29, v4, &v25);
  if (object) {
    dispatch_release(object);
  }
  if (v25) {
    _Block_release(v25);
  }
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  unint64_t v10 = dispatch_group_create();
  unsigned int v11 = v10;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(v11);
  }
  unint64_t v12 = v29;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 1174405120;
  v20[2] = ___ZN20BasebandTransportMAV15switchDIAG_syncEv_block_invoke_3;
  v20[3] = &unk_1EFB0FE30;
  dispatch_group_t group = v11;
  if (v11)
  {
    dispatch_retain(v11);
    dispatch_group_enter(group);
  }
  v20[4] = &v31;
  uint64_t v13 = _Block_copy(v20);
  if (v2) {
    dispatch_retain(v2);
  }
  unsigned __int8 v22 = v13;
  dispatch_object_t v23 = v2;
  (*(void (**)(unint64_t, uint64_t, unint64_t, unint64_t, void **))(*(void *)v12 + 48))(v12, 1, 0xAAAAAAAA00000004, 0xAAAAAAAAAAAAAAAALL, &v22);
  if (v23) {
    dispatch_release(v23);
  }
  if (v22) {
    _Block_release(v22);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (!v11)
  {
    dispatch_time_t v16 = dispatch_time(0, 6000000000);
    dispatch_group_wait(0, v16);
    uint64_t v15 = (std::__shared_weak_count *)v30;
    if (!v30) {
      goto LABEL_40;
    }
LABEL_38:
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    goto LABEL_40;
  }
  dispatch_group_leave(v11);
  dispatch_release(v11);
  dispatch_time_t v14 = dispatch_time(0, 6000000000);
  dispatch_group_wait(v11, v14);
  dispatch_release(v11);
  uint64_t v15 = (std::__shared_weak_count *)v30;
  if (v30) {
    goto LABEL_38;
  }
LABEL_40:
  if (v2) {
    dispatch_release(v2);
  }
LABEL_42:
  size_t v17 = *((void *)this + 5);
  if (*((unsigned char *)v32 + 24))
  {
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1A609F000, v17, OS_LOG_TYPE_DEFAULT, "#I Switch succeeded", buf, 2u);
    }
  }
  else if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1A609F000, v17, OS_LOG_TYPE_ERROR, "Switch failed", buf, 2u);
  }
  uint64_t v18 = *((unsigned __int8 *)v32 + 24);
  _Block_object_dispose(&v31, 8);
  return v18;
}

void sub_1A61C2BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (v25) {
    dispatch_release(v25);
  }
  _Block_object_dispose((const void *)(v26 - 96), 8);
  _Unwind_Resume(a1);
}

void ___ZN20BasebandTransportMAV15switchDIAG_syncEv_block_invoke(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    uint64_t v6 = v2;
    uint64_t v7 = v3;
    uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long v5 = 0;
      _os_log_debug_impl(&dword_1A609F000, v4, OS_LOG_TYPE_DEBUG, "#D Diag driver is started", v5, 2u);
    }
  }
}

uint64_t ___ZN20BasebandTransportMAV15switchDIAG_syncEv_block_invoke_3(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t __cxx_global_var_init_6()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1A609F000);
  }
  return result;
}

void ServerLogging::~ServerLogging(ServerLogging *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 9));
    *((void *)this + 9) = 0;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_12;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*((void **)this + 6));
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_7:
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v4) {
      return;
    }
    goto LABEL_8;
  }
LABEL_12:
  operator delete(*((void **)this + 3));
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v4) {
    return;
  }
LABEL_8:
  std::__shared_weak_count::__release_weak(v4);
}

uint64_t ServerLogging::ServerLogging(uint64_t a1, long long *a2, long long *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 40) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 24) = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *(void *)(a1 + 64) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 48) = v6;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v7 = (os_unfair_lock_s *)off_1EB5EE4F0;
  if (!off_1EB5EE4F0)
  {
    SharedData::create_default_global(&v24);
    long long v8 = v24;
    long long v24 = 0uLL;
    uint64_t v9 = (std::__shared_weak_count *)*(&off_1EB5EE4F0 + 1);
    off_1EB5EE4F0 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    unint64_t v10 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    if (*((void *)&v24 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v7 = (os_unfair_lock_s *)off_1EB5EE4F0;
  }
  unsigned __int8 v22 = v7;
  dispatch_object_t v23 = (std::__shared_weak_count *)*(&off_1EB5EE4F0 + 1);
  if (*(&off_1EB5EE4F0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EB5EE4F0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  unsigned int v11 = abm::trace::kCurrentSnapshotFolder[0];
  size_t v12 = strlen(abm::trace::kCurrentSnapshotFolder[0]);
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    dispatch_time_t v14 = (void **)operator new(v15 + 1);
    __dst[1] = v13;
    unint64_t v21 = v16 | 0x8000000000000000;
    __dst[0] = v14;
LABEL_25:
    memmove(v14, v11, (size_t)v13);
    *((unsigned char *)v13 + (void)v14) = 0;
    if ((*((char *)a3 + 23) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_26;
  }
  HIBYTE(v21) = v12;
  dispatch_time_t v14 = __dst;
  if (v12) {
    goto LABEL_25;
  }
  LOBYTE(__dst[0]) = 0;
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
LABEL_21:
    std::string __p = *(std::string *)a3;
    goto LABEL_27;
  }
LABEL_26:
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *((void *)a3 + 1));
LABEL_27:
  *(void *)&long long v24 = __dst;
  *((void *)&v24 + 1) = &__p;
  unsigned __int8 v25 = v7;
  os_unfair_lock_lock(v7 + 10);
  SharedData::setPreference<std::string>(std::string const&,std::string)::{lambda(void)#1}::operator()((char **)&v24);
  os_unfair_lock_unlock(v7 + 10);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      goto LABEL_29;
    }
LABEL_32:
    operator delete(__dst[0]);
    size_t v17 = v23;
    if (!v23) {
      return a1;
    }
    goto LABEL_33;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21) < 0) {
    goto LABEL_32;
  }
LABEL_29:
  size_t v17 = v23;
  if (!v23) {
    return a1;
  }
LABEL_33:
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  return a1;
}

void sub_1A61C31E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v21);
  if (*(char *)(v18 + 71) < 0)
  {
    operator delete(*v20);
    if ((*(char *)(v18 + 47) & 0x80000000) == 0)
    {
LABEL_5:
      dispatch_object_t v23 = *(std::__shared_weak_count **)(v18 + 8);
      if (!v23) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v18 + 47) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*v19);
  dispatch_object_t v23 = *(std::__shared_weak_count **)(v18 + 8);
  if (!v23) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_9:
  std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void ServerLogging::init(os_unfair_lock_s *this)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN13ServerLogging4initEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_14;
  v2[4] = this;
  uint64_t v1 = this + 4;
  os_unfair_lock_lock(this + 4);
  ___ZN13ServerLogging4initEv_block_invoke((uint64_t)v2);
  os_unfair_lock_unlock(v1);
}

ctu::LogServer *___ZN13ServerLogging4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(ServerLogging **)(a1 + 32);
  uint64_t v2 = ServerLogging::monitorSnapshotPath_sync(v1);
  *((void *)v1 + 9) = v2;
  ServerLogging::clearScratchFolders_sync((ServerLogging *)v2);
  uint64_t result = (ctu::LogServer *)*((void *)v1 + 10);
  if (result)
  {
    return (ctu::LogServer *)ctu::LogServer::setEnabled(result);
  }
  return result;
}

NSObject *ServerLogging::monitorSnapshotPath_sync(ServerLogging *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (char *)this + 48;
  uint64_t v2 = (const char *)*((void *)this + 6);
  v4.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v19.st_blkstd::string::size_type size = v4;
  *(timespec *)v19.st_qspare = v4;
  v19.st_birthtimespeCC_SHA256_CTX c = v4;
  *(timespec *)&v19.st_std::string::size_type size = v4;
  v19.st_mtimespeCC_SHA256_CTX c = v4;
  v19.st_ctimespeCC_SHA256_CTX c = v4;
  *(timespec *)&v19.st_uid = v4;
  v19.st_atimespeCC_SHA256_CTX c = v4;
  *(timespec *)&v19.st_dev = v4;
  if (*((char *)this + 71) >= 0) {
    long long v5 = (char *)this + 48;
  }
  else {
    long long v5 = v2;
  }
  if (stat(v5, &v19))
  {
    long long v6 = GetOsLogContext()[1];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = v3;
      if (*((char *)this + 71) < 0) {
        uint64_t v7 = *(const char **)v3;
      }
      v19.st_dev = 136315138;
      *(void *)&v19.st_mode = v7;
      _os_log_impl(&dword_1A609F000, v6, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was not found, so recreating it\n", (uint8_t *)&v19, 0xCu);
    }
    support::fs::createDir(v3, 0x1EDu, 1);
  }
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    unsigned int v8 = open(v3, 0x8000);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    return 0;
  }
  unsigned int v8 = open(*(const char **)v3, 0x8000);
  if ((v8 & 0x80000000) != 0) {
    return 0;
  }
LABEL_12:
  int v9 = v8;
  uintptr_t v10 = v8;
  global_queue = dispatch_get_global_queue(17, 0);
  size_t v12 = dispatch_source_create(MEMORY[0x1E4F144A8], v10, 0x21uLL, global_queue);
  uint64_t v13 = v12;
  if (v12)
  {
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 0x40000000;
    handler[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_7_1;
    handler[4] = this;
    int v18 = v9;
    dispatch_source_set_event_handler(v12, handler);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 0x40000000;
    void v15[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8;
    v15[3] = &__block_descriptor_tmp_9;
    int v16 = v9;
    dispatch_source_set_cancel_handler(v13, v15);
    dispatch_activate(v13);
  }
  else
  {
    close(v9);
  }
  return v13;
}

void ServerLogging::clearScratchFolders_sync(ServerLogging *this)
{
  uint64_t v1 = abm::trace::kTrashFolder[0];
  size_t v2 = strlen(abm::trace::kTrashFolder[0]);
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v3 = (void *)v2;
  if (v2 >= 0x17)
  {
    uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v5 = v2 | 7;
    }
    uint64_t v6 = v5 + 1;
    timespec v4 = (void **)operator new(v5 + 1);
    __dst[1] = v3;
    unint64_t v10 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v10) = v2;
  timespec v4 = __dst;
  if (v2) {
LABEL_8:
  }
    memmove(v4, v1, (size_t)v3);
  *((unsigned char *)v3 + (void)v4) = 0;
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v10) < 0) {
    operator delete(__dst[0]);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, &__block_literal_global_2);
  capabilities::abs::logScratchPath((uint64_t *)__dst, v8);
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v10) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1A61C3714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

ctu::LogServer *ServerLogging::init_sync(ServerLogging *this)
{
  uint64_t result = (ctu::LogServer *)*((void *)this + 10);
  if (result) {
    return (ctu::LogServer *)ctu::LogServer::setEnabled(result);
  }
  return result;
}

void ServerLogging::registerLogServer(os_unfair_lock_s *a1, uint64_t *a2)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1174405120;
  uint64_t v7 = ___ZN13ServerLogging17registerLogServerENSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  unsigned int v8 = &__block_descriptor_tmp_3_2;
  uint64_t v3 = *a2;
  size_t v2 = (std::__shared_weak_count *)a2[1];
  int v9 = a1;
  uint64_t v10 = v3;
  unsigned int v11 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  timespec v4 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  v7(v6);
  os_unfair_lock_unlock(v4);
  uint64_t v5 = v11;
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

ctu::LogServer *___ZN13ServerLogging17registerLogServerENSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t result = (ctu::LogServer *)a1[5];
  uint64_t v4 = a1[6];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 88);
  *(void *)(v3 + 80) = result;
  *(void *)(v3 + 88) = v4;
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t result = *(ctu::LogServer **)(v3 + 80);
  }
  if (result)
  {
    return (ctu::LogServer *)ctu::LogServer::setEnabled(result);
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ServerLogging::snapshot(os_unfair_lock_s *a1, const void **a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  uint64_t v6 = ___ZN13ServerLogging8snapshotEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  uint64_t v7 = &__block_descriptor_tmp_4_2;
  uint64_t v3 = *a2;
  unsigned int v8 = a1;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  uint64_t v4 = a1 + 4;
  os_unfair_lock_lock(v4);
  v6((uint64_t)v5);
  os_unfair_lock_unlock(v4);
  if (cf) {
    CFRelease(cf);
  }
}

void ___ZN13ServerLogging8snapshotEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1)
  {
    CFRetain(*(CFTypeRef *)(a1 + 40));
    CFRelease(v1);
  }
}

void ___ZN13ServerLogging24clearScratchFolders_syncEv_block_invoke()
{
  v0 = abm::trace::kTrashFolder[0];
  size_t v1 = strlen(abm::trace::kTrashFolder[0]);
  if (v1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v2 = (void *)v1;
  if (v1 >= 0x17)
  {
    uint64_t v4 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1 | 7) != 0x17) {
      uint64_t v4 = v1 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v3 = (void **)operator new(v4 + 1);
    __dst[1] = v2;
    unint64_t v7 = v5 | 0x8000000000000000;
    __dst[0] = v3;
    goto LABEL_8;
  }
  HIBYTE(v7) = v1;
  uint64_t v3 = __dst;
  if (v1) {
LABEL_8:
  }
    memmove(v3, v0, (size_t)v2);
  *((unsigned char *)v2 + (void)v3) = 0;
  support::fs::removeDirContents((const char *)__dst, 0);
  if (SHIBYTE(v7) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1A61C3B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ServerLogging::backupFolders_sync(capabilities::abs *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 8) = 0;
  unint64_t v7 = (std::string::size_type *)(a4 + 8);
  *(void *)a4 = 0;
  *(void *)(a4 + 16) = 0;
  capabilities::abs::logScratchPath((uint64_t *)&__p, a1);
  v8.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  v8.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v40.st_blkstd::string::size_type size = v8;
  *(timespec *)v40.st_qspare = v8;
  v40.st_birthtimespeCC_SHA256_CTX c = v8;
  *(timespec *)&v40.st_std::string::size_type size = v8;
  v40.st_mtimespeCC_SHA256_CTX c = v8;
  v40.st_ctimespeCC_SHA256_CTX c = v8;
  *(timespec *)&v40.st_uid = v8;
  v40.st_atimespeCC_SHA256_CTX c = v8;
  *(timespec *)&v40.st_dev = v8;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (stat((const char *)p_p, &v40))
  {
    LODWORD(v10) = 0;
  }
  else
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v11 = &__p;
    }
    else {
      unsigned int v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    size_t v12 = opendir((const char *)v11);
    uint64_t v10 = v12;
    if (v12)
    {
      uint64_t v13 = readdir(v12);
      closedir(v10);
      LODWORD(v10) = v13 != 0;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v10) {
      return;
    }
  }
  else if (!v10)
  {
    return;
  }
  int v14 = *((char *)a2 + 23);
  if (v14 >= 0) {
    size_t v15 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v15 = (size_t)a2[1];
  }
  unint64_t v16 = v15 + 7;
  memset(&__p, 170, sizeof(__p));
  if (v15 + 7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v16 >= 0x17)
  {
    uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v18 = v16 | 7;
    }
    uint64_t v19 = v18 + 1;
    size_t v17 = (std::string *)operator new(v18 + 1);
    __p.__r_.__value_.__l.__size_ = v15 + 7;
    __p.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    size_t v17 = &__p;
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v15 + 7;
    if (!v15) {
      goto LABEL_29;
    }
  }
  if (v14 >= 0) {
    uint64_t v20 = a2;
  }
  else {
    uint64_t v20 = *a2;
  }
  memmove(v17, v20, v15);
LABEL_29:
  strcpy((char *)v17 + v15, "log-bb-");
  Timestamp::Timestamp((Timestamp *)v35);
  Timestamp::asString((uint64_t)v35, 0, 9, v37);
  if ((v38 & 0x80u) == 0) {
    uint64_t v21 = v37;
  }
  else {
    uint64_t v21 = (void **)v37[0];
  }
  if ((v38 & 0x80u) == 0) {
    std::string::size_type v22 = v38;
  }
  else {
    std::string::size_type v22 = (std::string::size_type)v37[1];
  }
  dispatch_object_t v23 = std::string::append(&__p, (const std::string::value_type *)v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(void *)&v40.st_uid = *((void *)&v23->__r_.__value_.__l + 2);
  *(_OWORD *)&v40.st_dev = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  int v25 = *(char *)(a3 + 23);
  if (v25 >= 0) {
    uint64_t v26 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v26 = *(const std::string::value_type **)a3;
  }
  if (v25 >= 0) {
    std::string::size_type v27 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v27 = *(void *)(a3 + 8);
  }
  uint64_t v28 = std::string::append((std::string *)&v40, v26, v27);
  std::string::size_type v29 = v28->__r_.__value_.__r.__words[0];
  *unint64_t v7 = v28->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v7 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1]
                                                                          + 7);
  char v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  int st_gid_high = SHIBYTE(v40.st_gid);
  *(void *)a4 = v29;
  *(unsigned char *)(a4 + 23) = v30;
  if ((st_gid_high & 0x80000000) == 0)
  {
    if (((char)v38 & 0x80000000) == 0) {
      goto LABEL_43;
    }
LABEL_48:
    operator delete(v37[0]);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v35, v36);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_49;
  }
  operator delete(*(void **)&v40.st_dev);
  if ((char)v38 < 0) {
    goto LABEL_48;
  }
LABEL_43:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v35, v36);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_44;
  }
LABEL_49:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_44:
  capabilities::abs::logScratchPath((uint64_t *)&v40.st_dev, v32);
  support::fs::moveDirUnique((const char *)&v40, a4, (uint64_t)&v33);
  if ((v34 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v40.st_gid) & 0x80000000) == 0) {
      return;
    }
LABEL_51:
    operator delete(*(void **)&v40.st_dev);
    return;
  }
  operator delete(v33);
  if (SHIBYTE(v40.st_gid) < 0) {
    goto LABEL_51;
  }
}

void sub_1A61C3E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (v33 < 0) {
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = GetOsLogContext()[1];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)(v2 + 48);
    if (*(char *)(v2 + 71) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    int v6 = 136315138;
    unint64_t v7 = v4;
    _os_log_impl(&dword_1A609F000, v3, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was removed\n", (uint8_t *)&v6, 0xCu);
  }
  dispatch_release(*(dispatch_object_t *)(v2 + 72));
  *(void *)(v2 + 72) = 0;
  close(*(_DWORD *)(a1 + 40));
  uint64_t result = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)v2);
  *(void *)(v2 + 72) = result;
  return result;
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void GetABMLogServer(void *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_24, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&_MergedGlobals_24))
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &qword_1EB5EEB98, &dword_1A609F000);
      __cxa_guard_release(&_MergedGlobals_24);
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_14;
  void block[4] = &qword_1EB5EEB98;
  if (qword_1EB5EEB90 == -1)
  {
    uint64_t v2 = unk_1EB5EEBA0;
    *a1 = qword_1EB5EEB98;
    a1[1] = v2;
    if (!v2) {
      return;
    }
    goto LABEL_4;
  }
  dispatch_once(&qword_1EB5EEB90, block);
  uint64_t v2 = unk_1EB5EEBA0;
  *a1 = qword_1EB5EEB98;
  a1[1] = v2;
  if (v2) {
LABEL_4:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
}

uint64_t ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1A61F9520;
  strcpy(__p.__r_.__value_.__l.__data_, "AppleBasebandManagerServerLog");
  ctu::LogServer::create();
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    std::string::size_type size = (std::__shared_weak_count *)v27.__r_.__value_.__l.__size_;
    if (!v27.__r_.__value_.__l.__size_)
    {
LABEL_5:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else
  {
    std::string::size_type size = (std::__shared_weak_count *)v27.__r_.__value_.__l.__size_;
    if (!v27.__r_.__value_.__l.__size_) {
      goto LABEL_5;
    }
  }
  if (atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_5;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_6:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  int v6 = (capabilities::abs *)pthread_mutex_lock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  unint64_t v7 = (os_unfair_lock_s *)qword_1EB5EE5E0;
  if (qword_1EB5EE5E0) {
    goto LABEL_31;
  }
  capabilities::abs::logScratchPath((uint64_t *)&__p, v6);
  size_t v8 = strlen((const char *)kDaemonLogScratchDir);
  int v9 = std::string::append(&__p, (const std::string::value_type *)kDaemonLogScratchDir, v8);
  std::string v27 = *v9;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(v26, 170, sizeof(v26));
  capabilities::abs::logSnapshotPath((uint64_t *)v26, (capabilities::abs *)v9);
  uint64_t v10 = operator new(0x60uLL);
  ServerLogging::ServerLogging((uint64_t)v10, (long long *)&v27, (long long *)v26);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  unsigned int v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = &v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB0FF08;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  __p.__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)v10 + 1);
  if (!v13)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)uint64_t v10 = v10;
    *((void *)v10 + 1) = v11;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v13->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)uint64_t v10 = v10;
    *((void *)v10 + 1) = v11;
    std::__shared_weak_count::__release_weak(v13);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_19:
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_20:
  if (__p.__r_.__value_.__r.__words[0])
  {
    ServerLogging::~ServerLogging((ServerLogging *)__p.__r_.__value_.__l.__data_);
    operator delete(v14);
  }
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  __p.__r_.__value_.__l.__size_ = 0x40000000;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN13ServerLogging4initEv_block_invoke;
  std::string::size_type v29 = &__block_descriptor_tmp_14;
  char v30 = (uint64_t *)v10;
  os_unfair_lock_lock((os_unfair_lock_t)v10 + 4);
  ((void (*)(std::string *))__p.__r_.__value_.__r.__words[2])(&__p);
  os_unfair_lock_unlock((os_unfair_lock_t)v10 + 4);
  if (SHIBYTE(v26[2]) < 0)
  {
    operator delete(v26[0]);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_24:
      size_t v15 = (std::__shared_weak_count *)off_1EB5EE5E8;
      qword_1EB5EE5E0 = (uint64_t)v10;
      off_1EB5EE5E8 = v11;
      if (!v15) {
        goto LABEL_30;
      }
LABEL_28:
      if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      goto LABEL_30;
    }
  }
  else if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v27.__r_.__value_.__l.__data_);
  size_t v15 = (std::__shared_weak_count *)off_1EB5EE5E8;
  qword_1EB5EE5E0 = (uint64_t)v10;
  off_1EB5EE5E8 = v11;
  if (v15) {
    goto LABEL_28;
  }
LABEL_30:
  unint64_t v7 = (os_unfair_lock_s *)qword_1EB5EE5E0;
LABEL_31:
  unint64_t v16 = (std::__shared_weak_count *)off_1EB5EE5E8;
  if (off_1EB5EE5E8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EB5EE5E8 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  size_t v17 = *(uint64_t **)(a1 + 32);
  uint64_t v18 = (std::__shared_weak_count *)v17[1];
  v25[0] = *v17;
  v25[1] = (uint64_t)v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    ServerLogging::registerLogServer(v7, v25);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  else
  {
    ServerLogging::registerLogServer(v7, v25);
  }
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v19 = *(uint64_t **)(a1 + 32);
  uint64_t v21 = *v19;
  uint64_t v20 = (std::__shared_weak_count *)v19[1];
  uint64_t v23 = v21;
  long long v24 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  __p.__r_.__value_.__l.__size_ = 0x40000000;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  std::string::size_type v29 = &__block_descriptor_tmp_0;
  char v30 = &v23;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    std::string::size_type v22 = v24;
    if (!v24) {
      return;
    }
  }
  else
  {
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__p);
    std::string::size_type v22 = v24;
    if (!v24) {
      return;
    }
  }
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1A61C4764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  pthread_mutex_unlock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  _Unwind_Resume(a1);
}

ServerLogging **std::unique_ptr<ServerLogging>::~unique_ptr[abi:ne180100](ServerLogging **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    ServerLogging::~ServerLogging(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__on_zero_shared(uint64_t a1)
{
  size_t v1 = *(ServerLogging **)(a1 + 24);
  if (v1)
  {
    ServerLogging::~ServerLogging(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001A61FC19BLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001A61FC19BLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001A61FC19BLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001A61FC19BLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t __cxx_global_var_init_2()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1A609F000);
  }
  return result;
}

uint64_t __cxx_global_var_init_10()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy, &ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance, &dword_1A609F000);
  }
  return result;
}

uint64_t sCanHostHelperServer(capabilities::radio *a1)
{
  return capabilities::radio::radioUnknown(a1) ^ 1;
}

void logs::convertToTraceProperties(std::string::size_type a1@<X0>, xpc_object_t *a2@<X8>)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = xpc_null_create();
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v5 = xpc_array_create(0, 0);
  xpc_object_t v6 = v5;
  if (v5)
  {
    *a2 = v5;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    *a2 = v6;
    if (!v6)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v6 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A6275E60](v6) != MEMORY[0x1E4F14568])
  {
    xpc_object_t v7 = xpc_null_create();
LABEL_8:
    *a2 = v7;
    goto LABEL_9;
  }
  xpc_retain(v6);
LABEL_9:
  xpc_release(v6);
  xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  object.__r_.__value_.__r.__words[0] = a1;
  object.__r_.__value_.__l.__size_ = (std::string::size_type)"EnableBasebandLogging";
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)&object, &xdict);
  uint64_t v8 = MEMORY[0x1A6275E60](xdict);
  uint64_t v9 = MEMORY[0x1E4F14590];
  if (v8 != MEMORY[0x1E4F14590]) {
    goto LABEL_70;
  }
  xpc_object_t value = xpc_dictionary_get_value(xdict, "Exclude");
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  unsigned int v11 = xpc::dyn_cast_or_default();
  xpc_release(object.__r_.__value_.__l.__data_);
  if (v11 <= 3
    && ((v11 & 1) != 0
     && (size_t v12 = (capabilities::radio *)capabilities::radio::maverick(v12), (v12 & 1) != 0)
     || (v11 & 2) != 0 && capabilities::radio::ice(v12)))
  {
    uint64_t v13 = GetOsLogContext()[1];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(object.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(object.__r_.__value_.__r.__words[0]) = v11;
      _os_log_impl(&dword_1A609F000, v13, OS_LOG_TYPE_DEFAULT, "Not enabling baseband logging for this vendor: %d", (uint8_t *)&object, 8u);
    }
    xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
    if (v14 || (xpc_object_t v14 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A6275E60](v14) == v9)
      {
        xpc_retain(v14);
        xpc_object_t v15 = v14;
      }
      else
      {
        xpc_object_t v15 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v15 = xpc_null_create();
      xpc_object_t v14 = 0;
    }
    xpc_release(v14);
    xpc_object_t v17 = xpc_null_create();
    xpc_release(v4);
    xpc_release(v17);
    xpc_object_t v18 = xpc_string_create("BasebandTrace");
    if (!v18) {
      xpc_object_t v18 = xpc_null_create();
    }
    xpc_dictionary_set_value(v15, "kKeyTraceName", v18);
    xpc_object_t v19 = xpc_null_create();
    xpc_release(v18);
    xpc_release(v19);
    xpc_object_t v20 = xpc_string_create((const char *)*MEMORY[0x1E4F4C0E0]);
    if (!v20) {
      xpc_object_t v20 = xpc_null_create();
    }
    xpc_dictionary_set_value(v15, "kKeyTracePropertyName", v20);
    xpc_object_t v21 = xpc_null_create();
    xpc_release(v20);
    xpc_release(v21);
    std::to_string(&object, 0);
    std::string __p = object;
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v23 = xpc_string_create((const char *)p_p);
    if (!v23) {
      xpc_object_t v23 = xpc_null_create();
    }
    xpc_dictionary_set_value(v15, "kKeyTracePropertyValue", v23);
    xpc_object_t v24 = xpc_null_create();
    xpc_release(v23);
    xpc_release(v24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    xpc_array_append_value(*a2, v15);
    int v16 = 0;
    xpc_object_t v4 = v15;
  }
  else
  {
    int v16 = 1;
  }
  xpc_object_t v25 = xpc_dictionary_get_value(xdict, "Profile");
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
  if (v25) {
    xpc_retain(v25);
  }
  else {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  unsigned int v26 = xpc::dyn_cast_or_default();
  xpc_release(object.__r_.__value_.__l.__data_);
  if (v26 > 0x11) {
    int v27 = v16;
  }
  else {
    int v27 = 0;
  }
  if (v27 == 1)
  {
    uint64_t v28 = GetOsLogContext()[1];
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      LODWORD(object.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(object.__r_.__value_.__r.__words[0]) = v26;
      _os_log_error_impl(&dword_1A609F000, v28, OS_LOG_TYPE_ERROR, "Invalid profile index: %d", (uint8_t *)&object, 8u);
    }
    int v16 = 0;
  }
  xpc_object_t v29 = xpc_dictionary_get_value(xdict, "History");
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  if (v29) {
    xpc_retain(v29);
  }
  else {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  char v30 = xpc::dyn_cast_or_default();
  xpc_release(object.__r_.__value_.__l.__data_);
  unsigned int v32 = (config::hw *)capabilities::abs::profileBasebandHistoryMB(v31);
  unint64_t v33 = (1 << (v30 + (config::hw::watch(v32) ^ 1)));
  if ((unint64_t)v32 > v33)
  {
    char v34 = GetOsLogContext()[1];
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(object.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
      _os_log_impl(&dword_1A609F000, v34, OS_LOG_TYPE_DEFAULT, "Setting to minimum history size %lu", (uint8_t *)&object, 0xCu);
    }
    LODWORD(v33) = v32;
  }
  xpc_object_t v35 = xpc_dictionary_get_value(xdict, "Sleep");
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
  if (v35) {
    xpc_retain(v35);
  }
  else {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  int v36 = xpc::dyn_cast_or_default();
  xpc_release(object.__r_.__value_.__l.__data_);
  if (v36 > 2) {
    int v37 = v16;
  }
  else {
    int v37 = 0;
  }
  if (v37 == 1)
  {
    unsigned __int8 v38 = GetOsLogContext()[1];
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      LODWORD(object.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(object.__r_.__value_.__r.__words[0]) = v36;
      _os_log_error_impl(&dword_1A609F000, v38, OS_LOG_TYPE_ERROR, "Invalid sleep index: %d", (uint8_t *)&object, 8u);
    }
    goto LABEL_70;
  }
  if (!v16)
  {
LABEL_70:
    xpc_object_t v41 = v4;
    goto LABEL_71;
  }
  xpc_object_t v39 = xpc_dictionary_create(0, 0, 0);
  if (v39 || (xpc_object_t v39 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v39) == v9)
    {
      xpc_retain(v39);
      xpc_object_t v40 = v39;
    }
    else
    {
      xpc_object_t v40 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v40 = xpc_null_create();
    xpc_object_t v39 = 0;
  }
  xpc_release(v39);
  xpc_object_t v42 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v42);
  xpc_object_t v43 = xpc_string_create("BasebandTrace");
  if (!v43) {
    xpc_object_t v43 = xpc_null_create();
  }
  xpc_dictionary_set_value(v40, "kKeyTraceName", v43);
  xpc_object_t v44 = xpc_null_create();
  xpc_release(v43);
  xpc_release(v44);
  xpc_object_t v45 = xpc_string_create("File");
  if (!v45) {
    xpc_object_t v45 = xpc_null_create();
  }
  xpc_dictionary_set_value(v40, "kKeyTracePropertyName", v45);
  xpc_object_t v46 = xpc_null_create();
  xpc_release(v45);
  xpc_release(v46);
  uint64_t v47 = v26;
  xpc_object_t v48 = xpc_string_create(logs::sProfileLoggingMasks[2 * v26]);
  if (!v48) {
    xpc_object_t v48 = xpc_null_create();
  }
  xpc_dictionary_set_value(v40, "kKeyTracePropertyValue", v48);
  xpc_object_t v49 = xpc_null_create();
  xpc_release(v48);
  xpc_release(v49);
  xpc_array_append_value(*a2, v40);
  xpc_object_t v50 = xpc_dictionary_create(0, 0, 0);
  if (v50 || (xpc_object_t v50 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v50) == v9)
    {
      xpc_retain(v50);
      xpc_object_t v51 = v50;
    }
    else
    {
      xpc_object_t v51 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v51 = xpc_null_create();
    xpc_object_t v50 = 0;
  }
  xpc_release(v50);
  xpc_object_t v52 = xpc_null_create();
  xpc_release(v40);
  xpc_release(v52);
  xpc_object_t v53 = xpc_string_create("BasebandTrace");
  if (!v53) {
    xpc_object_t v53 = xpc_null_create();
  }
  xpc_dictionary_set_value(v51, "kKeyTraceName", v53);
  xpc_object_t v54 = xpc_null_create();
  xpc_release(v53);
  xpc_release(v54);
  xpc_object_t v55 = xpc_string_create("File_Secondary");
  if (!v55) {
    xpc_object_t v55 = xpc_null_create();
  }
  xpc_dictionary_set_value(v51, "kKeyTracePropertyName", v55);
  xpc_object_t v56 = xpc_null_create();
  xpc_release(v55);
  xpc_release(v56);
  xpc_object_t v57 = xpc_string_create(logs::sProfileLoggingMasks[2 * v47 + 1]);
  if (!v57) {
    xpc_object_t v57 = xpc_null_create();
  }
  xpc_dictionary_set_value(v51, "kKeyTracePropertyValue", v57);
  xpc_object_t v58 = xpc_null_create();
  xpc_release(v57);
  xpc_release(v58);
  xpc_array_append_value(*a2, v51);
  xpc_object_t v59 = xpc_dictionary_create(0, 0, 0);
  if (v59 || (xpc_object_t v59 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v59) == v9)
    {
      xpc_retain(v59);
      xpc_object_t v60 = v59;
    }
    else
    {
      xpc_object_t v60 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v60 = xpc_null_create();
    xpc_object_t v59 = 0;
  }
  xpc_release(v59);
  xpc_object_t v61 = xpc_null_create();
  xpc_release(v51);
  xpc_release(v61);
  xpc_object_t v62 = xpc_string_create("BasebandTrace");
  if (!v62) {
    xpc_object_t v62 = xpc_null_create();
  }
  xpc_dictionary_set_value(v60, "kKeyTraceName", v62);
  xpc_object_t v63 = xpc_null_create();
  xpc_release(v62);
  xpc_release(v63);
  xpc_object_t v64 = xpc_string_create("History");
  if (!v64) {
    xpc_object_t v64 = xpc_null_create();
  }
  xpc_dictionary_set_value(v60, "kKeyTracePropertyName", v64);
  xpc_object_t v65 = xpc_null_create();
  xpc_release(v64);
  xpc_release(v65);
  memset(&__p, 0, sizeof(__p));
  std::to_string(&object, v33);
  std::string __p = object;
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v66 = &__p;
  }
  else {
    uint64_t v66 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v67 = xpc_string_create((const char *)v66);
  if (!v67) {
    xpc_object_t v67 = xpc_null_create();
  }
  xpc_dictionary_set_value(v60, "kKeyTracePropertyValue", v67);
  xpc_object_t v68 = xpc_null_create();
  xpc_release(v67);
  xpc_release(v68);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_array_append_value(*a2, v60);
  xpc_object_t v69 = xpc_dictionary_create(0, 0, 0);
  if (v69 || (xpc_object_t v69 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v69) == v9)
    {
      xpc_retain(v69);
      xpc_object_t v70 = v69;
    }
    else
    {
      xpc_object_t v70 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v70 = xpc_null_create();
    xpc_object_t v69 = 0;
  }
  xpc_release(v69);
  xpc_object_t v71 = xpc_null_create();
  xpc_release(v60);
  xpc_release(v71);
  xpc_object_t v72 = xpc_string_create("BasebandTrace");
  if (!v72) {
    xpc_object_t v72 = xpc_null_create();
  }
  xpc_dictionary_set_value(v70, "kKeyTraceName", v72);
  xpc_object_t v73 = xpc_null_create();
  xpc_release(v72);
  xpc_release(v73);
  xpc_object_t v74 = xpc_string_create(diag::config::kEnabledDuringSleepKey[0]);
  if (!v74) {
    xpc_object_t v74 = xpc_null_create();
  }
  xpc_dictionary_set_value(v70, "kKeyTracePropertyName", v74);
  xpc_object_t v75 = xpc_null_create();
  xpc_release(v74);
  xpc_release(v75);
  if (v36 > 2) {
    std::string v76 = "Unknown";
  }
  else {
    std::string v76 = off_1E5C48A80[v36];
  }
  xpc_object_t v77 = xpc_string_create(v76);
  if (!v77) {
    xpc_object_t v77 = xpc_null_create();
  }
  xpc_dictionary_set_value(v70, "kKeyTracePropertyValue", v77);
  xpc_object_t v78 = xpc_null_create();
  xpc_release(v77);
  xpc_release(v78);
  xpc_array_append_value(*a2, v70);
  xpc_object_t v79 = xpc_dictionary_create(0, 0, 0);
  if (v79 || (xpc_object_t v79 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v79) == v9)
    {
      xpc_retain(v79);
      xpc_object_t v80 = v79;
    }
    else
    {
      xpc_object_t v80 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v80 = xpc_null_create();
    xpc_object_t v79 = 0;
  }
  xpc_release(v79);
  xpc_object_t v81 = xpc_null_create();
  xpc_release(v70);
  xpc_release(v81);
  xpc_object_t v82 = xpc_string_create("BasebandTrace");
  if (!v82) {
    xpc_object_t v82 = xpc_null_create();
  }
  xpc_dictionary_set_value(v80, "kKeyTraceName", v82);
  xpc_object_t v83 = xpc_null_create();
  xpc_release(v82);
  xpc_release(v83);
  xpc_object_t v84 = xpc_string_create((const char *)*MEMORY[0x1E4F4C0E0]);
  if (!v84) {
    xpc_object_t v84 = xpc_null_create();
  }
  xpc_dictionary_set_value(v80, "kKeyTracePropertyName", v84);
  xpc_object_t v85 = xpc_null_create();
  xpc_release(v84);
  xpc_release(v85);
  memset(&__p, 0, sizeof(__p));
  std::to_string(&object, 1);
  std::string __p = object;
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v86 = &__p;
  }
  else {
    size_t v86 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v87 = xpc_string_create((const char *)v86);
  if (!v87) {
    xpc_object_t v87 = xpc_null_create();
  }
  xpc_dictionary_set_value(v80, "kKeyTracePropertyValue", v87);
  xpc_object_t v88 = xpc_null_create();
  xpc_release(v87);
  xpc_release(v88);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_array_append_value(*a2, v80);
  int v90 = (capabilities::diag *)capabilities::diag::supportsQDSS(v89);
  if (v90)
  {
    xpc_object_t v91 = xpc_dictionary_create(0, 0, 0);
    if (v91 || (xpc_object_t v91 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A6275E60](v91) == v9)
      {
        xpc_retain(v91);
        xpc_object_t v92 = v91;
      }
      else
      {
        xpc_object_t v92 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v92 = xpc_null_create();
      xpc_object_t v91 = 0;
    }
    xpc_release(v91);
    xpc_object_t v93 = xpc_null_create();
    xpc_release(v80);
    xpc_release(v93);
    xpc_object_t v94 = xpc_string_create("BasebandTrace");
    if (!v94) {
      xpc_object_t v94 = xpc_null_create();
    }
    xpc_dictionary_set_value(v92, "kKeyTraceName", v94);
    xpc_object_t v95 = xpc_null_create();
    xpc_release(v94);
    xpc_release(v95);
    xpc_object_t v96 = xpc_string_create("High_Tput");
    if (!v96) {
      xpc_object_t v96 = xpc_null_create();
    }
    xpc_dictionary_set_value(v92, "kKeyTracePropertyName", v96);
    xpc_object_t v97 = xpc_null_create();
    xpc_release(v96);
    xpc_release(v97);
    memset(&__p, 0, sizeof(__p));
    std::to_string(&object, 1);
    std::string __p = object;
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFTypeRef v98 = &__p;
    }
    else {
      CFTypeRef v98 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v99 = xpc_string_create((const char *)v98);
    if (!v99) {
      xpc_object_t v99 = xpc_null_create();
    }
    xpc_dictionary_set_value(v92, "kKeyTracePropertyValue", v99);
    xpc_object_t v100 = xpc_null_create();
    xpc_release(v99);
    xpc_release(v100);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    xpc_array_append_value(*a2, v92);
  }
  else
  {
    xpc_object_t v92 = v80;
  }
  if (capabilities::diag::supportsADPL(v90))
  {
    xpc_object_t v101 = xpc_dictionary_create(0, 0, 0);
    if (v101 || (xpc_object_t v101 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A6275E60](v101) == v9)
      {
        xpc_retain(v101);
        xpc_object_t v41 = v101;
      }
      else
      {
        xpc_object_t v41 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v41 = xpc_null_create();
      xpc_object_t v101 = 0;
    }
    xpc_release(v101);
    xpc_object_t v102 = xpc_null_create();
    xpc_release(v92);
    xpc_release(v102);
    xpc_object_t v103 = xpc_string_create("BasebandTrace");
    if (!v103) {
      xpc_object_t v103 = xpc_null_create();
    }
    xpc_dictionary_set_value(v41, "kKeyTraceName", v103);
    xpc_object_t v104 = xpc_null_create();
    xpc_release(v103);
    xpc_release(v104);
    xpc_object_t v105 = xpc_string_create("Data_Logging");
    if (!v105) {
      xpc_object_t v105 = xpc_null_create();
    }
    xpc_dictionary_set_value(v41, "kKeyTracePropertyName", v105);
    xpc_object_t v106 = xpc_null_create();
    xpc_release(v105);
    xpc_release(v106);
    memset(&__p, 0, sizeof(__p));
    std::to_string(&object, 1);
    std::string __p = object;
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v107 = &__p;
    }
    else {
      uint64_t v107 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v108 = xpc_string_create((const char *)v107);
    if (!v108) {
      xpc_object_t v108 = xpc_null_create();
    }
    xpc_dictionary_set_value(v41, "kKeyTracePropertyValue", v108);
    xpc_object_t v109 = xpc_null_create();
    xpc_release(v108);
    xpc_release(v109);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    xpc_array_append_value(*a2, v41);
  }
  else
  {
    xpc_object_t v41 = v92;
  }
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    xpc_object_t v110 = xpc_dictionary_create(0, 0, 0);
    if (v110 || (xpc_object_t v110 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A6275E60](v110) == v9)
      {
        xpc_retain(v110);
        xpc_object_t v111 = v110;
      }
      else
      {
        xpc_object_t v111 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v111 = xpc_null_create();
      xpc_object_t v110 = 0;
    }
    xpc_release(v110);
    xpc_object_t v112 = xpc_null_create();
    xpc_release(v41);
    xpc_release(v112);
    xpc_object_t v113 = xpc_string_create("SystemLogs");
    if (!v113) {
      xpc_object_t v113 = xpc_null_create();
    }
    xpc_dictionary_set_value(v111, "kKeyTraceName", v113);
    xpc_object_t v114 = xpc_null_create();
    xpc_release(v113);
    xpc_release(v114);
    xpc_object_t v115 = xpc_string_create("Mode");
    if (!v115) {
      xpc_object_t v115 = xpc_null_create();
    }
    xpc_dictionary_set_value(v111, "kKeyTracePropertyName", v115);
    xpc_object_t v116 = xpc_null_create();
    xpc_release(v115);
    xpc_release(v116);
    memset(&__p, 0, sizeof(__p));
    std::to_string(&object, 1);
    std::string __p = object;
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v117 = &__p;
    }
    else {
      std::string v117 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v118 = xpc_string_create((const char *)v117);
    if (!v118) {
      xpc_object_t v118 = xpc_null_create();
    }
    xpc_dictionary_set_value(v111, "kKeyTracePropertyValue", v118);
    xpc_object_t v119 = xpc_null_create();
    xpc_release(v118);
    xpc_release(v119);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    xpc_array_append_value(*a2, v111);
    xpc_object_t v120 = xpc_dictionary_create(0, 0, 0);
    if (v120 || (xpc_object_t v120 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A6275E60](v120) == v9)
      {
        xpc_retain(v120);
        xpc_object_t v41 = v120;
      }
      else
      {
        xpc_object_t v41 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v41 = xpc_null_create();
      xpc_object_t v120 = 0;
    }
    xpc_release(v120);
    xpc_object_t v121 = xpc_null_create();
    xpc_release(v111);
    xpc_release(v121);
    xpc_object_t v122 = xpc_string_create("Compression");
    if (!v122) {
      xpc_object_t v122 = xpc_null_create();
    }
    xpc_dictionary_set_value(v41, "kKeyTraceName", v122);
    xpc_object_t v123 = xpc_null_create();
    xpc_release(v122);
    xpc_release(v123);
    xpc_object_t v124 = xpc_string_create("Mode");
    if (!v124) {
      xpc_object_t v124 = xpc_null_create();
    }
    xpc_dictionary_set_value(v41, "kKeyTracePropertyName", v124);
    xpc_object_t v125 = xpc_null_create();
    xpc_release(v124);
    xpc_release(v125);
    memset(&__p, 0, sizeof(__p));
    std::to_string(&object, 2);
    std::string __p = object;
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v126 = &__p;
    }
    else {
      std::string v126 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v127 = xpc_string_create((const char *)v126);
    if (!v127) {
      xpc_object_t v127 = xpc_null_create();
    }
    xpc_dictionary_set_value(v41, "kKeyTracePropertyValue", v127);
    xpc_object_t v128 = xpc_null_create();
    xpc_release(v127);
    xpc_release(v128);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_71:
  xpc_release(xdict);
  xpc_release(v41);
}

void sub_1A61C5DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object, xpc_object_t a16)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void logs::getDefaultTraceProperties(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v3 = xpc_array_create(0, 0);
  xpc_object_t v4 = v3;
  if (v3)
  {
    *a1 = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a1 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A6275E60](v4) != MEMORY[0x1E4F14568])
  {
    xpc_object_t v5 = xpc_null_create();
LABEL_8:
    *a1 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  uint64_t v7 = MEMORY[0x1E4F14590];
  if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v6) == v7)
    {
      xpc_retain(v6);
      xpc_object_t v8 = v6;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v6 = 0;
  }
  xpc_release(v6);
  xpc_object_t v9 = xpc_string_create("BasebandTrace");
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kKeyTraceName", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = xpc_string_create((const char *)*MEMORY[0x1E4F4C0E0]);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kKeyTracePropertyName", v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  int v14 = capabilities::trace::enabledByDefault(v13);
  std::to_string(&v109, v14);
  std::string __p = v109;
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v16 = xpc_string_create((const char *)p_p);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kKeyTracePropertyValue", v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_array_append_value(*a1, v8);
  xpc_object_t v18 = xpc_dictionary_create(0, 0, 0);
  if (v18 || (xpc_object_t v18 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v18) == v7)
    {
      xpc_retain(v18);
      xpc_object_t v19 = v18;
    }
    else
    {
      xpc_object_t v19 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v19 = xpc_null_create();
    xpc_object_t v18 = 0;
  }
  xpc_release(v18);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v20);
  xpc_object_t v21 = xpc_string_create("BasebandTrace");
  if (!v21) {
    xpc_object_t v21 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, "kKeyTraceName", v21);
  xpc_object_t v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  xpc_object_t v23 = xpc_string_create("High_Tput");
  if (!v23) {
    xpc_object_t v23 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, "kKeyTracePropertyName", v23);
  xpc_object_t v24 = xpc_null_create();
  xpc_release(v23);
  xpc_release(v24);
  int v26 = capabilities::trace::supportsHighTPutByDefault(v25);
  memset(&__p, 0, sizeof(__p));
  std::to_string(&v109, v26);
  std::string __p = v109;
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v27 = &__p;
  }
  else {
    int v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v28 = xpc_string_create((const char *)v27);
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, "kKeyTracePropertyValue", v28);
  xpc_object_t v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_array_append_value(*a1, v19);
  xpc_object_t v30 = xpc_dictionary_create(0, 0, 0);
  if (v30 || (xpc_object_t v30 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v30) == v7)
    {
      xpc_retain(v30);
      xpc_object_t v31 = v30;
    }
    else
    {
      xpc_object_t v31 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v31 = xpc_null_create();
    xpc_object_t v30 = 0;
  }
  xpc_release(v30);
  xpc_object_t v32 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v32);
  xpc_object_t v33 = xpc_string_create("BasebandTrace");
  if (!v33) {
    xpc_object_t v33 = xpc_null_create();
  }
  xpc_dictionary_set_value(v31, "kKeyTraceName", v33);
  xpc_object_t v34 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v34);
  xpc_object_t v35 = xpc_string_create("Data_Logging");
  if (!v35) {
    xpc_object_t v35 = xpc_null_create();
  }
  xpc_dictionary_set_value(v31, "kKeyTracePropertyName", v35);
  xpc_object_t v36 = xpc_null_create();
  xpc_release(v35);
  xpc_release(v36);
  int v38 = capabilities::trace::supportsDataLoggingByDefault(v37);
  memset(&__p, 0, sizeof(__p));
  std::to_string(&v109, v38);
  std::string __p = v109;
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v39 = &__p;
  }
  else {
    xpc_object_t v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v40 = xpc_string_create((const char *)v39);
  if (!v40) {
    xpc_object_t v40 = xpc_null_create();
  }
  xpc_dictionary_set_value(v31, "kKeyTracePropertyValue", v40);
  xpc_object_t v41 = xpc_null_create();
  xpc_release(v40);
  xpc_release(v41);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_array_append_value(*a1, v31);
  xpc_object_t v42 = xpc_dictionary_create(0, 0, 0);
  if (v42 || (xpc_object_t v42 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v42) == v7)
    {
      xpc_retain(v42);
      xpc_object_t v43 = v42;
    }
    else
    {
      xpc_object_t v43 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v43 = xpc_null_create();
    xpc_object_t v42 = 0;
  }
  xpc_release(v42);
  xpc_object_t v44 = xpc_null_create();
  xpc_release(v31);
  xpc_release(v44);
  xpc_object_t v45 = xpc_string_create("BasebandTrace");
  if (!v45) {
    xpc_object_t v45 = xpc_null_create();
  }
  xpc_dictionary_set_value(v43, "kKeyTraceName", v45);
  xpc_object_t v46 = xpc_null_create();
  xpc_release(v45);
  xpc_release(v46);
  xpc_object_t v47 = xpc_string_create("File");
  if (!v47) {
    xpc_object_t v47 = xpc_null_create();
  }
  xpc_dictionary_set_value(v43, "kKeyTracePropertyName", v47);
  xpc_object_t v48 = xpc_null_create();
  xpc_release(v47);
  xpc_release(v48);
  if (config::hw::watch(v49)) {
    xpc_object_t v50 = "Lite";
  }
  else {
    xpc_object_t v50 = "Default";
  }
  xpc_object_t v51 = xpc_string_create(v50);
  if (!v51) {
    xpc_object_t v51 = xpc_null_create();
  }
  xpc_dictionary_set_value(v43, "kKeyTracePropertyValue", v51);
  xpc_object_t v52 = xpc_null_create();
  xpc_release(v51);
  xpc_release(v52);
  xpc_array_append_value(*a1, v43);
  xpc_object_t v53 = xpc_dictionary_create(0, 0, 0);
  if (v53 || (xpc_object_t v53 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v53) == v7)
    {
      xpc_retain(v53);
      xpc_object_t v54 = v53;
    }
    else
    {
      xpc_object_t v54 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v54 = xpc_null_create();
    xpc_object_t v53 = 0;
  }
  xpc_release(v53);
  xpc_object_t v55 = xpc_null_create();
  xpc_release(v43);
  xpc_release(v55);
  xpc_object_t v56 = xpc_string_create("BasebandTrace");
  if (!v56) {
    xpc_object_t v56 = xpc_null_create();
  }
  xpc_dictionary_set_value(v54, "kKeyTraceName", v56);
  xpc_object_t v57 = xpc_null_create();
  xpc_release(v56);
  xpc_release(v57);
  xpc_object_t v58 = xpc_string_create("File_Secondary");
  if (!v58) {
    xpc_object_t v58 = xpc_null_create();
  }
  xpc_dictionary_set_value(v54, "kKeyTracePropertyName", v58);
  xpc_object_t v59 = xpc_null_create();
  xpc_release(v58);
  xpc_release(v59);
  xpc_object_t v61 = (config::hw *)capabilities::radio::ice(v60);
  if (v61)
  {
    if (config::hw::watch(v61)) {
      xpc_object_t v62 = "Lite";
    }
    else {
      xpc_object_t v62 = "Default";
    }
  }
  else
  {
    xpc_object_t v62 = "None";
  }
  xpc_object_t v63 = xpc_string_create(v62);
  if (!v63) {
    xpc_object_t v63 = xpc_null_create();
  }
  xpc_dictionary_set_value(v54, "kKeyTracePropertyValue", v63);
  xpc_object_t v64 = xpc_null_create();
  xpc_release(v63);
  xpc_release(v64);
  xpc_array_append_value(*a1, v54);
  xpc_object_t v65 = xpc_dictionary_create(0, 0, 0);
  if (v65 || (xpc_object_t v65 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v65) == v7)
    {
      xpc_retain(v65);
      xpc_object_t v66 = v65;
    }
    else
    {
      xpc_object_t v66 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v66 = xpc_null_create();
    xpc_object_t v65 = 0;
  }
  xpc_release(v65);
  xpc_object_t v67 = xpc_null_create();
  xpc_release(v54);
  xpc_release(v67);
  xpc_object_t v68 = xpc_string_create("BasebandTrace");
  if (!v68) {
    xpc_object_t v68 = xpc_null_create();
  }
  xpc_dictionary_set_value(v66, "kKeyTraceName", v68);
  xpc_object_t v69 = xpc_null_create();
  xpc_release(v68);
  xpc_release(v69);
  xpc_object_t v70 = xpc_string_create("History");
  if (!v70) {
    xpc_object_t v70 = xpc_null_create();
  }
  xpc_dictionary_set_value(v66, "kKeyTracePropertyName", v70);
  xpc_object_t v71 = xpc_null_create();
  xpc_release(v70);
  xpc_release(v71);
  int v73 = capabilities::trace::defaultHistorySizeMB(v72);
  std::to_string(&v109, v73);
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v74 = &v109;
  }
  else {
    xpc_object_t v74 = (std::string *)v109.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v75 = xpc_string_create((const char *)v74);
  if (!v75) {
    xpc_object_t v75 = xpc_null_create();
  }
  xpc_dictionary_set_value(v66, "kKeyTracePropertyValue", v75);
  xpc_object_t v76 = xpc_null_create();
  xpc_release(v75);
  xpc_release(v76);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  xpc_array_append_value(*a1, v66);
  xpc_object_t v77 = xpc_dictionary_create(0, 0, 0);
  if (v77 || (xpc_object_t v77 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A6275E60](v77) == v7)
    {
      xpc_retain(v77);
      xpc_object_t v78 = v77;
    }
    else
    {
      xpc_object_t v78 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v78 = xpc_null_create();
    xpc_object_t v77 = 0;
  }
  xpc_release(v77);
  xpc_object_t v79 = xpc_null_create();
  xpc_release(v66);
  xpc_release(v79);
  xpc_object_t v80 = xpc_string_create("BasebandTrace");
  if (!v80) {
    xpc_object_t v80 = xpc_null_create();
  }
  xpc_dictionary_set_value(v78, "kKeyTraceName", v80);
  xpc_object_t v81 = xpc_null_create();
  xpc_release(v80);
  xpc_release(v81);
  xpc_object_t v82 = xpc_string_create(diag::config::kEnabledDuringSleepKey[0]);
  if (!v82) {
    xpc_object_t v82 = xpc_null_create();
  }
  xpc_dictionary_set_value(v78, "kKeyTracePropertyName", v82);
  xpc_object_t v83 = xpc_null_create();
  xpc_release(v82);
  xpc_release(v83);
  xpc_object_t v84 = xpc_string_create("Off");
  if (!v84) {
    xpc_object_t v84 = xpc_null_create();
  }
  xpc_dictionary_set_value(v78, "kKeyTracePropertyValue", v84);
  xpc_object_t v85 = xpc_null_create();
  xpc_release(v84);
  xpc_release(v85);
  xpc_array_append_value(*a1, v78);
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    xpc_object_t v86 = xpc_dictionary_create(0, 0, 0);
    if (v86 || (xpc_object_t v86 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A6275E60](v86) == v7)
      {
        xpc_retain(v86);
        xpc_object_t v87 = v86;
      }
      else
      {
        xpc_object_t v87 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v87 = xpc_null_create();
      xpc_object_t v86 = 0;
    }
    xpc_release(v86);
    xpc_object_t v88 = xpc_null_create();
    xpc_release(v78);
    xpc_release(v88);
    xpc_object_t v89 = xpc_string_create("SystemLogs");
    if (!v89) {
      xpc_object_t v89 = xpc_null_create();
    }
    xpc_dictionary_set_value(v87, "kKeyTraceName", v89);
    xpc_object_t v90 = xpc_null_create();
    xpc_release(v89);
    xpc_release(v90);
    xpc_object_t v91 = xpc_string_create("Mode");
    if (!v91) {
      xpc_object_t v91 = xpc_null_create();
    }
    xpc_dictionary_set_value(v87, "kKeyTracePropertyName", v91);
    xpc_object_t v92 = xpc_null_create();
    xpc_release(v91);
    xpc_release(v92);
    if (TelephonyUtilIsInternalBuild()) {
      int IsCarrierBuild = 1;
    }
    else {
      int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    }
    memset(&__p, 0, sizeof(__p));
    std::to_string(&v109, IsCarrierBuild);
    std::string __p = v109;
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      xpc_object_t v94 = &__p;
    }
    else {
      xpc_object_t v94 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v95 = xpc_string_create((const char *)v94);
    if (!v95) {
      xpc_object_t v95 = xpc_null_create();
    }
    xpc_dictionary_set_value(v87, "kKeyTracePropertyValue", v95);
    xpc_object_t v96 = xpc_null_create();
    xpc_release(v95);
    xpc_release(v96);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    xpc_array_append_value(*a1, v87);
    xpc_object_t v97 = xpc_dictionary_create(0, 0, 0);
    if (v97 || (xpc_object_t v97 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A6275E60](v97) == v7)
      {
        xpc_retain(v97);
        xpc_object_t v78 = v97;
      }
      else
      {
        xpc_object_t v78 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v78 = xpc_null_create();
      xpc_object_t v97 = 0;
    }
    xpc_release(v97);
    xpc_object_t v98 = xpc_null_create();
    xpc_release(v87);
    xpc_release(v98);
    xpc_object_t v99 = xpc_string_create("Compression");
    if (!v99) {
      xpc_object_t v99 = xpc_null_create();
    }
    xpc_dictionary_set_value(v78, "kKeyTraceName", v99);
    xpc_object_t v100 = xpc_null_create();
    xpc_release(v99);
    xpc_release(v100);
    xpc_object_t v101 = xpc_string_create("Mode");
    if (!v101) {
      xpc_object_t v101 = xpc_null_create();
    }
    xpc_dictionary_set_value(v78, "kKeyTracePropertyName", v101);
    xpc_object_t v102 = xpc_null_create();
    xpc_release(v101);
    xpc_release(v102);
    uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
    if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)) {
      int CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
    }
    else {
      int CompressionMode = 2;
    }
    memset(&__p, 0, sizeof(__p));
    std::to_string(&v109, CompressionMode);
    std::string __p = v109;
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      xpc_object_t v105 = &__p;
    }
    else {
      xpc_object_t v105 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v106 = xpc_string_create((const char *)v105);
    if (!v106) {
      xpc_object_t v106 = xpc_null_create();
    }
    xpc_dictionary_set_value(v78, "kKeyTracePropertyValue", v106);
    xpc_object_t v107 = xpc_null_create();
    xpc_release(v106);
    xpc_release(v107);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    xpc_array_append_value(*a1, v78);
  }
  xpc_release(v78);
}

void sub_1A61C7348(void *a1)
{
}

void sub_1A61C7354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(v15);
  xpc::array::~array(v14);
  _Unwind_Resume(a1);
}

BOOL prop::get(char *a1, char *a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    xpc_object_t v6 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, "BasebandTrace")
      && strcasecmp(v6, "BBTrace")
      && strcasecmp(v6, abm::trace::kICETrace[0])
      && strcasecmp(v6, abm::trace::kDIAG[0]))
    {
      if (strcasecmp(v6, "CoreDump"))
      {
        if (strcasecmp(v6, "IPC") && strcasecmp(v6, "KernelPCI"))
        {
          if (strcasecmp(v6, "BasebandIPC"))
          {
            if (strcasecmp(v6, "Compression"))
            {
              if (strcasecmp(v6, "TTR"))
              {
                if (strcasecmp(v6, "LogFilter"))
                {
                  if (strcasecmp(v6, "SystemLogs"))
                  {
                    if (strcasecmp(v6, "Profile"))
                    {
                      if (strcasecmp(v6, "Tailspin")) {
                        goto LABEL_16;
                      }
LABEL_33:
                      return prop::tailspin::get(a2, a3);
                    }
LABEL_57:
                    return prop::profile::get(a2, a3);
                  }
LABEL_54:
                  return prop::systemlogs::get(a2, a3);
                }
LABEL_51:
                return prop::logfilter::get(a2, a3);
              }
LABEL_48:
              return prop::ttr::get(a2, a3);
            }
LABEL_45:
            return prop::compression::get(a2, a3);
          }
LABEL_42:
          return prop::bbipc::get(a2, a3);
        }
        goto LABEL_40;
      }
LABEL_41:
      HIBYTE(v16) = 8;
      strcpy(__p, "CoreDump");
      BOOL v10 = prop::get_from_file(__p, a2, a3);
LABEL_37:
      BOOL v8 = v10;
      if (SHIBYTE(v16) < 0) {
        operator delete(*(void **)__p);
      }
      return v8;
    }
LABEL_36:
    HIBYTE(v16) = 7;
    strcpy(__p, "BBTrace");
    BOOL v10 = prop::get_from_file(__p, a2, a3);
    goto LABEL_37;
  }
  if (!strcasecmp(a1, "BasebandTrace")
    || !strcasecmp(a1, "BBTrace")
    || !strcasecmp(a1, abm::trace::kICETrace[0])
    || !strcasecmp(a1, abm::trace::kDIAG[0]))
  {
    goto LABEL_36;
  }
  if (!strcasecmp(a1, "CoreDump")) {
    goto LABEL_41;
  }
  if (!strcasecmp(a1, "IPC") || !strcasecmp(a1, "KernelPCI"))
  {
LABEL_40:
    HIBYTE(v16) = 3;
    *(_WORD *)std::string __p = *(_WORD *)"IPC";
    *(_WORD *)&std::string __p[2] = str_42[2];
    BOOL v10 = prop::get_from_file(__p, a2, a3);
    goto LABEL_37;
  }
  if (!strcasecmp(a1, "BasebandIPC")) {
    goto LABEL_42;
  }
  if (!strcasecmp(a1, "Compression")) {
    goto LABEL_45;
  }
  if (!strcasecmp(a1, "TTR")) {
    goto LABEL_48;
  }
  if (!strcasecmp(a1, "LogFilter")) {
    goto LABEL_51;
  }
  if (!strcasecmp(a1, "SystemLogs")) {
    goto LABEL_54;
  }
  if (!strcasecmp(a1, "Profile")) {
    goto LABEL_57;
  }
  xpc_object_t v6 = a1;
  if (!strcasecmp(a1, "Tailspin")) {
    goto LABEL_33;
  }
LABEL_16:
  if (strcasecmp(v6, "Settings"))
  {
    uint64_t v7 = GetOsLogContext()[1];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      if (a1[23] >= 0) {
        xpc_object_t v11 = a1;
      }
      else {
        xpc_object_t v11 = *(char **)a1;
      }
      if (a2[23] >= 0) {
        xpc_object_t v12 = a2;
      }
      else {
        xpc_object_t v12 = *(char **)a2;
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "prop";
      __int16 v14 = 2080;
      xpc_object_t v15 = v11;
      __int16 v16 = 2080;
      xpc_object_t v17 = v12;
      _os_log_error_impl(&dword_1A609F000, v7, OS_LOG_TYPE_ERROR, "%s: get: Invalid domain; domain='%s' key='%s'",
        __p,
        0x20u);
    }
    return 0;
  }

  return prop::tracesettings::get(a2, a3);
}

void sub_1A61C7D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::bbtrace::get(char *a1, uint64_t a2)
{
  char v5 = 7;
  strcpy((char *)__p, "BBTrace");
  BOOL result = prop::get_from_file((char *)__p, a1, a2);
  BOOL v3 = result;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    return v3;
  }
  return result;
}

void sub_1A61C7E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::coredump::get(char *a1, uint64_t a2)
{
  char v5 = 8;
  strcpy((char *)__p, "CoreDump");
  BOOL result = prop::get_from_file((char *)__p, a1, a2);
  BOOL v3 = result;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    return v3;
  }
  return result;
}

void sub_1A61C7EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::ipc::get(char *a1, uint64_t a2)
{
  char v5 = 3;
  LOWORD(__p) = *(_WORD *)"IPC";
  WORD1(__p) = str_42[2];
  BOOL result = prop::get_from_file((char *)&__p, a1, a2);
  BOOL v3 = result;
  if (v5 < 0)
  {
    operator delete(__p);
    return v3;
  }
  return result;
}

void sub_1A61C7F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::bbipc::get(char *a1, uint64_t a2)
{
  char v5 = 11;
  strcpy((char *)__p, "BasebandIPC");
  BOOL result = prop::get_from_file((char *)__p, a1, a2);
  BOOL v3 = result;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    return v3;
  }
  return result;
}

void sub_1A61C8020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::compression::get(char *a1, uint64_t a2)
{
  char v5 = 11;
  strcpy((char *)__p, "Compression");
  BOOL result = prop::get_from_file((char *)__p, a1, a2);
  BOOL v3 = result;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    return v3;
  }
  return result;
}

void sub_1A61C80C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::ttr::get(char *a1, uint64_t a2)
{
  char v5 = 3;
  LOWORD(__p) = *(_WORD *)"TTR";
  WORD1(__p) = str_46[2];
  BOOL result = prop::get_from_file((char *)&__p, a1, a2);
  BOOL v3 = result;
  if (v5 < 0)
  {
    operator delete(__p);
    return v3;
  }
  return result;
}

void sub_1A61C8160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::logfilter::get(char *a1, uint64_t a2)
{
  char v5 = 9;
  strcpy((char *)__p, "LogFilter");
  BOOL result = prop::get_from_file((char *)__p, a1, a2);
  BOOL v3 = result;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    return v3;
  }
  return result;
}

void sub_1A61C8200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::systemlogs::get(char *a1, uint64_t a2)
{
  char v5 = 10;
  strcpy((char *)__p, "SystemLogs");
  BOOL result = prop::get_from_file((char *)__p, a1, a2);
  BOOL v3 = result;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    return v3;
  }
  return result;
}

void sub_1A61C82A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::profile::get(char *a1, uint64_t a2)
{
  char v5 = 7;
  strcpy((char *)__p, "Profile");
  BOOL result = prop::get_from_file((char *)__p, a1, a2);
  BOOL v3 = result;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    return v3;
  }
  return result;
}

void sub_1A61C8340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::tailspin::get(char *a1, uint64_t a2)
{
  char v5 = 8;
  strcpy((char *)__p, "Tailspin");
  BOOL result = prop::get_from_file((char *)__p, a1, a2);
  BOOL v3 = result;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    return v3;
  }
  return result;
}

void sub_1A61C83DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::tracesettings::get(char *a1, uint64_t a2)
{
  char v5 = 8;
  strcpy((char *)__p, "Settings");
  BOOL result = prop::get_from_file((char *)__p, a1, a2);
  BOOL v3 = result;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    return v3;
  }
  return result;
}

void sub_1A61C8478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::set(char *a1, char *a2, char *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    xpc_object_t v6 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, "BasebandTrace")
      && strcasecmp(v6, "BBTrace")
      && strcasecmp(v6, abm::trace::kICETrace[0])
      && strcasecmp(v6, abm::trace::kDIAG[0]))
    {
      if (strcasecmp(v6, "CoreDump"))
      {
        if (strcasecmp(v6, "IPC") && strcasecmp(v6, "KernelPCI"))
        {
          if (strcasecmp(v6, "BasebandIPC"))
          {
            if (strcasecmp(v6, "Compression"))
            {
              if (strcasecmp(v6, "TTR"))
              {
                if (strcasecmp(v6, "LogFilter"))
                {
                  if (strcasecmp(v6, "SystemLogs"))
                  {
                    if (strcasecmp(v6, "Profile"))
                    {
                      if (strcasecmp(v6, "Tailspin"))
                      {
LABEL_16:
                        if (!strcasecmp(v6, "Settings"))
                        {
                          return prop::tracesettings::set(a2, (uint64_t)a3);
                        }
                        else
                        {
                          uint64_t v7 = GetOsLogContext()[1];
                          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
                          {
                            if (a1[23] >= 0) {
                              xpc_object_t v9 = a1;
                            }
                            else {
                              xpc_object_t v9 = *(char **)a1;
                            }
                            if (a2[23] >= 0) {
                              BOOL v10 = a2;
                            }
                            else {
                              BOOL v10 = *(char **)a2;
                            }
                            if (a3[23] >= 0) {
                              xpc_object_t v11 = a3;
                            }
                            else {
                              xpc_object_t v11 = *(char **)a3;
                            }
                            int v12 = 136315906;
                            uint64_t v13 = "prop";
                            __int16 v14 = 2080;
                            xpc_object_t v15 = v9;
                            __int16 v16 = 2080;
                            xpc_object_t v17 = v10;
                            __int16 v18 = 2080;
                            xpc_object_t v19 = v11;
                            _os_log_error_impl(&dword_1A609F000, v7, OS_LOG_TYPE_ERROR, "%s: set: Invalid domain; domain='%s' key='%s' value='%s'",
                              (uint8_t *)&v12,
                              0x2Au);
                          }
                          return 0;
                        }
                      }
                      goto LABEL_33;
                    }
                    goto LABEL_60;
                  }
                  goto LABEL_57;
                }
                goto LABEL_54;
              }
              goto LABEL_51;
            }
            goto LABEL_48;
          }
          goto LABEL_45;
        }
        goto LABEL_39;
      }
      goto LABEL_42;
    }
  }
  else if (strcasecmp(a1, "BasebandTrace") {
         && strcasecmp(a1, "BBTrace")
  }
         && strcasecmp(a1, abm::trace::kICETrace[0])
         && strcasecmp(a1, abm::trace::kDIAG[0]))
  {
    if (strcasecmp(a1, "CoreDump"))
    {
      if (strcasecmp(a1, "IPC") && strcasecmp(a1, "KernelPCI"))
      {
        if (strcasecmp(a1, "BasebandIPC"))
        {
          if (strcasecmp(a1, "Compression"))
          {
            if (strcasecmp(a1, "TTR"))
            {
              if (strcasecmp(a1, "LogFilter"))
              {
                if (strcasecmp(a1, "SystemLogs"))
                {
                  if (strcasecmp(a1, "Profile"))
                  {
                    xpc_object_t v6 = a1;
                    if (strcasecmp(a1, "Tailspin")) {
                      goto LABEL_16;
                    }
LABEL_33:
                    return prop::tailspin::set((uint64_t)a2, a3);
                  }
LABEL_60:
                  return prop::profile::set(a2, a3);
                }
LABEL_57:
                return prop::systemlogs::set(a2, a3);
              }
LABEL_54:
              return prop::logfilter::set(a2, a3);
            }
LABEL_51:
            return prop::ttr::set(a2, a3);
          }
LABEL_48:
          return prop::compression::set(a2, a3);
        }
LABEL_45:
        return prop::bbipc::set(a2, a3);
      }
LABEL_39:
      return prop::ipc::set(a2, a3);
    }
LABEL_42:
    return prop::coredump::set((uint64_t)a2, a3);
  }

  return prop::bbtrace::set(a2, a3);
}

uint64_t prop::bbtrace::set(char *a1, const char *a2)
{
  uint64_t v2 = a2;
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  memset(&v71, 170, sizeof(v71));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(const char **)v2;
    }
    if (strcmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v71 = *(std::string *)a2;
    if (strcmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::bbtrace::get(a1, (std::string::size_type *)&v71)) {
    goto LABEL_214;
  }
LABEL_8:
  int v4 = a1[23];
  if ((v4 & 0x80000000) == 0)
  {
    if (strcasecmp(a1, "Enabled"))
    {
      if (strcasecmp(a1, "High_Tput"))
      {
        if (strcasecmp(a1, "Data_Logging"))
        {
          if (strcasecmp(a1, "Mode"))
          {
            if (strcasecmp(a1, "Reset_Mode_Boot"))
            {
              if (strcasecmp(a1, "BootSessionUUID"))
              {
                if (strcasecmp(a1, "TraceOwnership"))
                {
                  char v5 = a1;
                  if (strcasecmp(a1, "History")) {
                    goto LABEL_17;
                  }
                  goto LABEL_33;
                }
LABEL_62:
                *(_DWORD *)std::string __p = -1431655766;
                if (!util::convert<int>(&v71, __p, 0)) {
                  goto LABEL_214;
                }
                int v20 = *(_DWORD *)__p;
                std::string::basic_string[abi:ne180100]<0>(__p, "BBTrace");
                LODWORD(v68.__r_.__value_.__l.__data_) = v20;
                uint64_t v21 = prop::file::set<unsigned int>((const void **)__p, (uint64_t)a1, (unsigned int *)&v68);
LABEL_64:
                uint64_t v11 = v21;
LABEL_65:
                if (SHIBYTE(v75) < 0) {
                  operator delete(*(void **)__p);
                }
                goto LABEL_215;
              }
              goto LABEL_58;
            }
            goto LABEL_52;
          }
LABEL_46:
          LODWORD(v68.__r_.__value_.__l.__data_) = -1431655766;
          __int16 v14 = (capabilities::radio *)util::convert<int>(&v71, &v68, 0);
          int v15 = (int)v14;
          __int16 v16 = (capabilities::radio *)capabilities::radio::maverick(v14);
          if (v16)
          {
            if (LODWORD(v68.__r_.__value_.__l.__data_) < 5) {
              char v17 = v15;
            }
            else {
              char v17 = 0;
            }
            if ((v17 & 1) == 0) {
              goto LABEL_214;
            }
          }
          else
          {
            int v19 = capabilities::radio::ice(v16);
            if ((v19 & v15) == 1)
            {
              uint64_t v11 = 0;
              if (LODWORD(v68.__r_.__value_.__l.__data_) > 6 || ((1 << v68.__r_.__value_.__s.__data_[0]) & 0x45) == 0) {
                goto LABEL_215;
              }
            }
            else if ((v15 & ~v19) != 1)
            {
              goto LABEL_214;
            }
          }
          HIBYTE(v75) = 7;
          strcpy(__p, "BBTrace");
          uint64_t v13 = prop::file::set<int>((const void **)__p, (uint64_t)a1, (int *)&v68);
          goto LABEL_61;
        }
        goto LABEL_44;
      }
LABEL_42:
      v68.__r_.__value_.__s.__data_[0] = -86;
      if (!util::convert<BOOL>(&v71, (BOOL *)&v68, 0)) {
        goto LABEL_214;
      }
      goto LABEL_45;
    }
LABEL_40:
    v68.__r_.__value_.__s.__data_[0] = -86;
    if (!util::convert<BOOL>(&v71, (BOOL *)&v68, 0)) {
      goto LABEL_214;
    }
    goto LABEL_45;
  }
  char v5 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "Enabled")) {
    goto LABEL_40;
  }
  if (!strcasecmp(v5, "High_Tput")) {
    goto LABEL_42;
  }
  if (!strcasecmp(v5, "Data_Logging"))
  {
LABEL_44:
    v68.__r_.__value_.__s.__data_[0] = -86;
    if (!util::convert<BOOL>(&v71, (BOOL *)&v68, 0)) {
      goto LABEL_214;
    }
LABEL_45:
    HIBYTE(v75) = 7;
    strcpy(__p, "BBTrace");
    uint64_t v13 = prop::file::set<BOOL>((const void **)__p, (uint64_t)a1, (unsigned __int8 *)&v68);
    goto LABEL_61;
  }
  if (!strcasecmp(v5, "Mode")) {
    goto LABEL_46;
  }
  if (!strcasecmp(v5, "Reset_Mode_Boot"))
  {
LABEL_52:
    *(_DWORD *)std::string __p = -1431655766;
    if (!util::convert<int>(&v71, __p, 0)) {
      goto LABEL_214;
    }
    int v18 = *(_DWORD *)__p;
    HIBYTE(v75) = 7;
    strcpy(__p, "BBTrace");
    LODWORD(v68.__r_.__value_.__l.__data_) = v18;
    uint64_t v13 = prop::file::set<unsigned int>((const void **)__p, (uint64_t)a1, (unsigned int *)&v68);
LABEL_61:
    uint64_t v11 = v13;
    goto LABEL_215;
  }
  if (!strcasecmp(v5, "BootSessionUUID"))
  {
LABEL_58:
    HIBYTE(v75) = 7;
    strcpy(__p, "BBTrace");
    uint64_t v13 = prop::file::set<std::string>((const void **)__p, (uint64_t)a1, (uint64_t)&v71);
    goto LABEL_61;
  }
  if (!strcasecmp(v5, "TraceOwnership")) {
    goto LABEL_62;
  }
  if (strcasecmp(v5, "History"))
  {
LABEL_17:
    xpc_object_t v6 = (capabilities::radio *)strcasecmp(v5, diag::config::kEnabledDuringSleepKey[0]);
    if (!v6)
    {
      xpc_object_t v22 = (capabilities::radio *)capabilities::radio::maverick(v6);
      if (v22 & 1) != 0 || (capabilities::radio::ice(v22))
      {
        *(_DWORD *)std::string __p = -1431655766;
        if ((util::convert<int>(&v71, __p, 0) & 1) == 0) {
          goto LABEL_214;
        }
        int v23 = *(_DWORD *)__p;
        if (*(_DWORD *)__p > 2u) {
          goto LABEL_214;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "BBTrace");
        LODWORD(v68.__r_.__value_.__l.__data_) = v23;
        uint64_t v21 = prop::file::set<unsigned int>((const void **)__p, (uint64_t)a1, (unsigned int *)&v68);
        goto LABEL_64;
      }
      LOBYTE(v4) = a1[23];
    }
    uint64_t v7 = *(const char **)a1;
    if ((v4 & 0x80u) == 0) {
      BOOL v8 = a1;
    }
    else {
      BOOL v8 = *(const char **)a1;
    }
    xpc_object_t v9 = (capabilities::radio *)strcasecmp(v8, diag::config::kBufferingOnAPAwake[0]);
    if (!v9)
    {
      if (capabilities::radio::maverick(v9))
      {
        v68.__r_.__value_.__s.__data_[0] = -86;
        if (util::convert<BOOL>(&v71, (BOOL *)&v68, 0)) {
          goto LABEL_212;
        }
        goto LABEL_214;
      }
      LOBYTE(v4) = a1[23];
      uint64_t v7 = *(const char **)a1;
    }
    if ((v4 & 0x80u) == 0) {
      xpc_object_t v24 = a1;
    }
    else {
      xpc_object_t v24 = v7;
    }
    xpc_object_t v25 = (capabilities::radio *)strcasecmp(v24, diag::config::kStallDetectionKey[0]);
    if (!v25)
    {
      if (capabilities::radio::maverick(v25))
      {
        v68.__r_.__value_.__s.__data_[0] = -86;
        if (util::convert<BOOL>(&v71, (BOOL *)&v68, 0)) {
          goto LABEL_212;
        }
        goto LABEL_214;
      }
      LOBYTE(v4) = a1[23];
      uint64_t v7 = *(const char **)a1;
    }
    if ((v4 & 0x80u) == 0) {
      int v26 = a1;
    }
    else {
      int v26 = v7;
    }
    int v27 = (capabilities::radio *)strcasecmp(v26, diag::config::kStallDetectionRetriesKey[0]);
    if (!v27)
    {
      if (capabilities::radio::maverick(v27))
      {
        LODWORD(v68.__r_.__value_.__l.__data_) = -1431655766;
        if (!util::convert<unsigned int>(&v71, &v68, 0)) {
          goto LABEL_214;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "BBTrace");
        uint64_t v21 = prop::file::set<unsigned int>((const void **)__p, (uint64_t)a1, (unsigned int *)&v68);
        goto LABEL_64;
      }
      LOBYTE(v4) = a1[23];
      uint64_t v7 = *(const char **)a1;
    }
    if ((v4 & 0x80u) == 0) {
      xpc_object_t v28 = a1;
    }
    else {
      xpc_object_t v28 = v7;
    }
    xpc_object_t v29 = (capabilities::radio *)strcasecmp(v28, diag::config::kStallDetectionRecoveryKey[0]);
    if (!v29)
    {
      if (capabilities::radio::maverick(v29))
      {
        LODWORD(v68.__r_.__value_.__l.__data_) = -1431655766;
        if (!diag::config::asEnum((uint64_t)&v71, &v68)) {
          goto LABEL_214;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "BBTrace");
        int data = (int)v68.__r_.__value_.__l.__data_;
        uint64_t v21 = prop::file::set<unsigned int>((const void **)__p, (uint64_t)a1, (unsigned int *)&data);
        goto LABEL_64;
      }
      LOBYTE(v4) = a1[23];
    }
    if ((v4 & 0x80) != 0)
    {
      xpc_object_t v30 = *(const char **)a1;
      if (strcasecmp(*(const char **)a1, diag::config::kKeepScratchLogsKey[0]))
      {
LABEL_100:
        xpc_object_t v31 = (capabilities::radio *)strcasecmp(v30, "File");
        if (!v31)
        {
          if (capabilities::radio::maverick(v31))
          {
LABEL_188:
            std::string::basic_string[abi:ne180100]<0>(__p, "BBTrace");
            uint64_t v21 = prop::file::set<std::string>((const void **)__p, (uint64_t)a1, (uint64_t)&v71);
            goto LABEL_64;
          }
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80) != 0)
        {
          xpc_object_t v32 = *(const char **)a1;
          if (!strcasecmp(*(const char **)a1, "File_Secondary")) {
            goto LABEL_188;
          }
        }
        else
        {
          xpc_object_t v32 = a1;
          if (!strcasecmp(a1, "File_Secondary")) {
            goto LABEL_188;
          }
        }
        xpc_object_t v33 = (capabilities::radio *)strcasecmp(v32, diag::config::kExtraDMCFileKey[0]);
        if (!v33)
        {
          if (capabilities::radio::maverick(v33)) {
            goto LABEL_188;
          }
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80u) == 0) {
          xpc_object_t v34 = a1;
        }
        else {
          xpc_object_t v34 = *(const char **)a1;
        }
        xpc_object_t v35 = (capabilities::radio *)strcasecmp(v34, "File_Sleep");
        if (!v35)
        {
          if (capabilities::radio::maverick(v35)) {
            goto LABEL_188;
          }
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80) != 0)
        {
          xpc_object_t v36 = *(const char **)a1;
          if (!strcasecmp(*(const char **)a1, "MaxMemoryFileCount")) {
            goto LABEL_188;
          }
        }
        else
        {
          xpc_object_t v36 = a1;
          if (!strcasecmp(a1, "MaxMemoryFileCount")) {
            goto LABEL_188;
          }
        }
        int v37 = (capabilities::radio *)strcasecmp(v36, "File");
        if (!v37)
        {
          if (capabilities::radio::ice(v37)) {
            goto LABEL_188;
          }
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80u) == 0) {
          int v38 = a1;
        }
        else {
          int v38 = *(const char **)a1;
        }
        xpc_object_t v39 = (capabilities::radio *)strcasecmp(v38, "File_Sleep");
        if (!v39)
        {
          if (capabilities::radio::ice(v39)) {
            goto LABEL_188;
          }
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80) != 0)
        {
          xpc_object_t v40 = *(const char **)a1;
          if (strcasecmp(*(const char **)a1, "BackgroundMode"))
          {
LABEL_137:
            xpc_object_t v41 = (capabilities::radio *)strcasecmp(v40, "High_Watermark");
            if (!v41)
            {
              if (capabilities::radio::ice(v41))
              {
                LODWORD(v68.__r_.__value_.__l.__data_) = -1431655766;
                int v42 = util::convert<int>(&v71, &v68, 0);
                if (LODWORD(v68.__r_.__value_.__l.__data_) < 0x65) {
                  int v43 = v42;
                }
                else {
                  int v43 = 0;
                }
                if (v43 != 1) {
                  goto LABEL_214;
                }
                goto LABEL_157;
              }
              LOBYTE(v4) = a1[23];
            }
            xpc_object_t v44 = *(const char **)a1;
            if ((v4 & 0x80u) == 0) {
              xpc_object_t v45 = a1;
            }
            else {
              xpc_object_t v45 = *(const char **)a1;
            }
            xpc_object_t v46 = (capabilities::radio *)strcasecmp(v45, "Low_Watermark");
            if (!v46)
            {
              if (capabilities::radio::ice(v46))
              {
                LODWORD(v68.__r_.__value_.__l.__data_) = -1431655766;
                int v47 = util::convert<int>(&v71, &v68, 0);
                if (LODWORD(v68.__r_.__value_.__l.__data_) < 0x65) {
                  int v48 = v47;
                }
                else {
                  int v48 = 0;
                }
                if (v48 != 1) {
                  goto LABEL_214;
                }
                goto LABEL_157;
              }
              LOBYTE(v4) = a1[23];
              xpc_object_t v44 = *(const char **)a1;
            }
            if ((v4 & 0x80u) == 0) {
              xpc_object_t v49 = a1;
            }
            else {
              xpc_object_t v49 = v44;
            }
            xpc_object_t v50 = (capabilities::radio *)strcasecmp(v49, "ETBFile");
            if (!v50)
            {
              if (capabilities::radio::ice(v50)) {
                goto LABEL_188;
              }
              LOBYTE(v4) = a1[23];
            }
            if ((v4 & 0x80) != 0)
            {
              xpc_object_t v51 = *(const char **)a1;
              if (strcasecmp(*(const char **)a1, "CellularLoggingAllowed"))
              {
                if (!strcasecmp(v51, "CarrierName1") || !strcasecmp(v51, "CarrierName2")) {
                  goto LABEL_188;
                }
                if (strcasecmp(v51, "FileSize"))
                {
                  if (!strcasecmp(v51, "SizeIO") || !strcasecmp(v51, "NumberOfReadIO")) {
                    goto LABEL_188;
                  }
LABEL_173:
                  if (!strcasecmp(v51, "Retain_Previous_Trace"))
                  {
                    v68.__r_.__value_.__s.__data_[0] = -86;
                    if (util::convert<BOOL>(&v71, (BOOL *)&v68, 0))
                    {
LABEL_212:
                      std::string::basic_string[abi:ne180100]<0>(__p, "BBTrace");
                      uint64_t v21 = prop::file::set<BOOL>((const void **)__p, (uint64_t)a1, (unsigned __int8 *)&v68);
                      goto LABEL_64;
                    }
LABEL_214:
                    uint64_t v11 = 0;
                    goto LABEL_215;
                  }
                  xpc_object_t v52 = GetOsLogContext()[1];
                  if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_214;
                  }
                  if (a1[23] >= 0) {
                    xpc_object_t v53 = a1;
                  }
                  else {
                    xpc_object_t v53 = *(char **)a1;
                  }
                  xpc_object_t v54 = &v71;
                  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    xpc_object_t v54 = (std::string *)v71.__r_.__value_.__r.__words[0];
                  }
                  *(_DWORD *)std::string __p = 136315906;
                  *(void *)&__p[4] = "prop";
                  __int16 v73 = 2080;
                  xpc_object_t v74 = "BBTrace";
                  __int16 v75 = 2080;
                  xpc_object_t v76 = v53;
                  __int16 v77 = 2080;
                  xpc_object_t v78 = v54;
                  xpc_object_t v55 = "%s: [bbtrace] set: Invalid key; domain='%s' key='%s' value='%s'";
                  xpc_object_t v56 = v52;
                  uint32_t v57 = 42;
LABEL_181:
                  _os_log_error_impl(&dword_1A609F000, v56, OS_LOG_TYPE_ERROR, v55, __p, v57);
                  goto LABEL_214;
                }
LABEL_193:
                int data = -1431655766;
                xpc_object_t v58 = (capabilities::radio *)util::convert<unsigned int>(&v71, &data, 0);
                if (v58)
                {
                  unsigned int v59 = data;
                  xpc_object_t v60 = (capabilities::abs *)capabilities::radio::vendor(v58);
                  shouldUseMinBasebandTransportIOReadSize = (capabilities::radio *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v60);
                  if (shouldUseMinBasebandTransportIOReadSize) {
                    unsigned int v62 = 0x4000;
                  }
                  else {
                    unsigned int v62 = 0x8000;
                  }
                  if (v59 >= v62)
                  {
                    unsigned int v64 = data;
                    if (!data)
                    {
                      xpc_object_t v66 = GetOsLogContext()[1];
                      if (!os_log_type_enabled(v66, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_214;
                      }
                      *(_WORD *)std::string __p = 0;
                      xpc_object_t v55 = "file size cannot be 0";
                      xpc_object_t v56 = v66;
                      uint32_t v57 = 2;
                      goto LABEL_181;
                    }
                  }
                  else
                  {
                    xpc_object_t v63 = (capabilities::abs *)capabilities::radio::vendor(shouldUseMinBasebandTransportIOReadSize);
                    if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v63)) {
                      unsigned int v64 = 0x4000;
                    }
                    else {
                      unsigned int v64 = 0x8000;
                    }
                  }
                  int data = 1 << (__clz(v64) ^ 0x1F);
                  std::string::basic_string[abi:ne180100]<0>(__p, "BBTrace");
                  xpc_object_t v58 = (capabilities::radio *)prop::file::set<unsigned int>((const void **)__p, (uint64_t)a1, (unsigned int *)&data);
                  int v65 = (int)v58;
                  if (SHIBYTE(v75) < 0) {
                    operator delete(*(void **)__p);
                  }
                }
                else
                {
                  int v65 = 0;
                }
                int __val = capabilities::trace::defaultHistorySizeMB(v58);
                std::string::basic_string[abi:ne180100]<0>(__p, "History");
                prop::bbtrace::get<int>(__p, &__val);
                if (SHIBYTE(v75) < 0) {
                  operator delete(*(void **)__p);
                }
                if (v65)
                {
                  std::string::basic_string[abi:ne180100]<0>(__p, "History");
                  std::to_string(&v68, __val);
                  uint64_t v11 = prop::bbtrace::set(__p, &v68);
                  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v68.__r_.__value_.__l.__data_);
                  }
                  goto LABEL_65;
                }
                goto LABEL_214;
              }
            }
            else if (strcasecmp(a1, "CellularLoggingAllowed"))
            {
              if (!strcasecmp(a1, "CarrierName1") || !strcasecmp(a1, "CarrierName2")) {
                goto LABEL_188;
              }
              if (strcasecmp(a1, "FileSize"))
              {
                if (!strcasecmp(a1, "SizeIO")) {
                  goto LABEL_188;
                }
                xpc_object_t v51 = a1;
                if (!strcasecmp(a1, "NumberOfReadIO")) {
                  goto LABEL_188;
                }
                goto LABEL_173;
              }
              goto LABEL_193;
            }
            v68.__r_.__value_.__s.__data_[0] = 0;
            if (util::convert<BOOL>(&v71, (BOOL *)&v68, 0)) {
              goto LABEL_212;
            }
            goto LABEL_214;
          }
        }
        else
        {
          xpc_object_t v40 = a1;
          if (strcasecmp(a1, "BackgroundMode")) {
            goto LABEL_137;
          }
        }
        v68.__r_.__value_.__s.__data_[0] = -86;
        if (util::convert<BOOL>(&v71, (BOOL *)&v68, 0)) {
          goto LABEL_212;
        }
        goto LABEL_214;
      }
    }
    else
    {
      xpc_object_t v30 = a1;
      if (strcasecmp(a1, diag::config::kKeepScratchLogsKey[0])) {
        goto LABEL_100;
      }
    }
    v68.__r_.__value_.__s.__data_[0] = -86;
    if (util::convert<BOOL>(&v71, (BOOL *)&v68, 0)) {
      goto LABEL_212;
    }
    goto LABEL_214;
  }
LABEL_33:
  LODWORD(v68.__r_.__value_.__l.__data_) = -1431655766;
  BOOL v10 = (capabilities::trace *)util::convert<int>(&v71, &v68, 0);
  uint64_t v11 = (uint64_t)v10;
  if (SLODWORD(v68.__r_.__value_.__l.__data_) < 0) {
    int v12 = (int)v10;
  }
  else {
    int v12 = 0;
  }
  if (v12 == 1) {
    LODWORD(v68.__r_.__value_.__l.__data_) = capabilities::trace::defaultHistorySizeMB(v10);
  }
  if (v11)
  {
LABEL_157:
    std::string::basic_string[abi:ne180100]<0>(__p, "BBTrace");
    uint64_t v21 = prop::file::set<int>((const void **)__p, (uint64_t)a1, (int *)&v68);
    goto LABEL_64;
  }
LABEL_215:
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_1A61C9B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::coredump::set(uint64_t a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  memset(&v11, 170, sizeof(v11));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (!strcasecmp(v2, "default"))
    {
LABEL_7:
      if (!defaults::coredump::get((const char *)a1, (uint64_t)&v11)) {
        goto LABEL_22;
      }
    }
  }
  else
  {
    std::string v11 = *(std::string *)a2;
    if (!strcasecmp(a2, "default")) {
      goto LABEL_7;
    }
  }
  if (*(char *)(a1 + 23) >= 0) {
    int v4 = (const char *)a1;
  }
  else {
    int v4 = *(const char **)a1;
  }
  if (!strcasecmp(v4, "Enabled"))
  {
    char v10 = -86;
    if (util::convert<BOOL>(&v11, (BOOL *)&v10, 0))
    {
      HIBYTE(v15) = 8;
      strcpy(buf, "CoreDump");
      uint64_t v8 = prop::file::set<BOOL>((const void **)buf, a1, (unsigned __int8 *)&v10);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_23;
      }
      return v8;
    }
  }
  else
  {
    char v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 23) >= 0) {
        xpc_object_t v6 = (const char *)a1;
      }
      else {
        xpc_object_t v6 = *(const char **)a1;
      }
      uint64_t v7 = &v11;
      if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v7 = (std::string *)v11.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "prop";
      __int16 v13 = 2080;
      __int16 v14 = "CoreDump";
      __int16 v15 = 2080;
      __int16 v16 = v6;
      __int16 v17 = 2080;
      int v18 = v7;
      _os_log_error_impl(&dword_1A609F000, v5, OS_LOG_TYPE_ERROR, "%s: [coredump] set: Invalid key; domain='%s' key='%s' value='%s'",
        buf,
        0x2Au);
    }
  }
LABEL_22:
  uint64_t v8 = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
LABEL_23:
  }
    operator delete(v11.__r_.__value_.__l.__data_);
  return v8;
}

void sub_1A61C9EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::ipc::set(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  memset(&v15, 170, sizeof(v15));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v15 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::ipc::get(a1, (uint64_t)&v15)) {
    goto LABEL_31;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, "Enabled"))
    {
      int v4 = a1;
      if (strcasecmp(a1, "History")) {
        goto LABEL_11;
      }
      goto LABEL_22;
    }
LABEL_27:
    LOBYTE(v14) = -86;
    if (!util::convert<BOOL>(&v15, (BOOL *)&v14, 0)) {
      goto LABEL_31;
    }
    HIBYTE(v20) = 3;
    strcpy((char *)buf, "IPC");
    uint64_t v11 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v14);
    goto LABEL_29;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "Enabled")) {
    goto LABEL_27;
  }
  if (!strcasecmp(v4, "History"))
  {
LABEL_22:
    int v14 = -1431655766;
    int v9 = util::convert<int>(&v15, &v14, 0);
    if (v14 >= 0) {
      int v10 = v9;
    }
    else {
      int v10 = 0;
    }
    if (v10 != 1) {
      goto LABEL_31;
    }
    HIBYTE(v20) = 3;
    strcpy((char *)buf, "IPC");
    uint64_t v11 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v14);
LABEL_29:
    uint64_t v12 = v11;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_32;
    }
    return v12;
  }
LABEL_11:
  char v5 = (capabilities::ipc *)strcasecmp(v4, "BufferCount");
  if (v5 || (capabilities::ipc::supportsPCI(v5) & 1) == 0)
  {
    xpc_object_t v6 = GetOsLogContext()[1];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      if (a1[23] >= 0) {
        uint64_t v7 = a1;
      }
      else {
        uint64_t v7 = *(char **)a1;
      }
      uint64_t v8 = &v15;
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v8 = (std::string *)v15.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315906;
      __int16 v17 = "prop";
      __int16 v18 = 2080;
      uint64_t v19 = "IPC";
      __int16 v20 = 2080;
      uint64_t v21 = v7;
      __int16 v22 = 2080;
      int v23 = v8;
      _os_log_error_impl(&dword_1A609F000, v6, OS_LOG_TYPE_ERROR, "%s: [ipc] set: Invalid key; domain='%s' key='%s' value='%s'",
        buf,
        0x2Au);
    }
  }
LABEL_31:
  uint64_t v12 = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
LABEL_32:
  }
    operator delete(v15.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1A61CA1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::bbipc::set(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  memset(&v12, 170, sizeof(v12));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v12 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::bbipc::get(a1, (uint64_t)&v12)) {
    goto LABEL_29;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, "Enabled"))
    {
      int v4 = a1;
      if (strcasecmp(a1, "LogLevel")) {
        goto LABEL_11;
      }
LABEL_21:
      int v11 = -1431655766;
      if (!util::convert<int>(&v12, &v11, 0)) {
        goto LABEL_29;
      }
      HIBYTE(v16) = 11;
      strcpy((char *)buf, "BasebandIPC");
      uint64_t v8 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v11);
      goto LABEL_27;
    }
LABEL_23:
    LOBYTE(v11) = -86;
    if (!util::convert<BOOL>(&v12, (BOOL *)&v11, 0)) {
      goto LABEL_29;
    }
    HIBYTE(v16) = 11;
    strcpy((char *)buf, "BasebandIPC");
    uint64_t v8 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v11);
    goto LABEL_27;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "Enabled")) {
    goto LABEL_23;
  }
  if (!strcasecmp(v4, "LogLevel")) {
    goto LABEL_21;
  }
LABEL_11:
  if (!strcasecmp(v4, "PayloadSize"))
  {
    int v11 = -1431655766;
    if (!util::convert<unsigned int>(&v12, &v11, 0)) {
      goto LABEL_29;
    }
    HIBYTE(v16) = 11;
    strcpy((char *)buf, "BasebandIPC");
    uint64_t v8 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, (unsigned int *)&v11);
LABEL_27:
    uint64_t v9 = v8;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_30;
    }
    return v9;
  }
  char v5 = GetOsLogContext()[1];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0) {
      xpc_object_t v6 = a1;
    }
    else {
      xpc_object_t v6 = *(char **)a1;
    }
    uint64_t v7 = &v12;
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v7 = (std::string *)v12.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "prop";
    __int16 v14 = 2080;
    std::string v15 = "BasebandIPC";
    __int16 v16 = 2080;
    __int16 v17 = v6;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    _os_log_error_impl(&dword_1A609F000, v5, OS_LOG_TYPE_ERROR, "%s: [bbipc] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
  }
LABEL_29:
  uint64_t v9 = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
LABEL_30:
  }
    operator delete(v12.__r_.__value_.__l.__data_);
  return v9;
}

void sub_1A61CA4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::compression::set(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  memset(&v14, 170, sizeof(v14));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v14 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::compression::get(a1, (uint64_t)&v14)) {
    goto LABEL_27;
  }
LABEL_8:
  int v4 = a1[23];
  char v5 = *(const char **)a1;
  if (v4 >= 0) {
    xpc_object_t v6 = a1;
  }
  else {
    xpc_object_t v6 = *(const char **)a1;
  }
  if (!strcasecmp(v6, "Mode"))
  {
    int v13 = 0;
    if (util::convert<int>(&v14, &v13, 0))
    {
      HIBYTE(v18) = 11;
      strcpy((char *)buf, "Compression");
      uint64_t v7 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v13);
    }
    else
    {
      uint64_t v7 = 0;
    }
    LOBYTE(v4) = a1[23];
    char v5 = *(const char **)a1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  if ((v4 & 0x80u) == 0) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = v5;
  }
  if (!strcasecmp(v8, "SplitArchive"))
  {
    LOBYTE(v13) = 1;
    if (util::convert<BOOL>(&v14, (BOOL *)&v13, 0))
    {
      HIBYTE(v18) = 11;
      strcpy((char *)buf, "Compression");
      uint64_t v7 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v13);
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v7;
      }
      goto LABEL_28;
    }
LABEL_27:
    uint64_t v7 = 0;
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v7;
    }
    goto LABEL_28;
  }
  uint64_t v9 = GetOsLogContext()[1];
  if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v7;
    }
LABEL_28:
    operator delete(v14.__r_.__value_.__l.__data_);
    return v7;
  }
  if (a1[23] >= 0) {
    int v11 = a1;
  }
  else {
    int v11 = *(char **)a1;
  }
  std::string v12 = &v14;
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string v12 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)std::string buf = 136315906;
  *(void *)&uint8_t buf[4] = "prop";
  __int16 v16 = 2080;
  __int16 v17 = "Compression";
  __int16 v18 = 2080;
  uint64_t v19 = v11;
  __int16 v20 = 2080;
  uint64_t v21 = v12;
  _os_log_error_impl(&dword_1A609F000, v9, OS_LOG_TYPE_ERROR, "%s: [compression] set: Invalid key; domain='%s' key='%s' value='%s'",
    buf,
    0x2Au);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_28;
  }
  return v7;
}

void sub_1A61CA7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::ttr::set(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  memset(&v15, 170, sizeof(v15));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v15 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::ttr::get(a1, (uint64_t)&v15)) {
    goto LABEL_30;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    int v4 = a1;
    if (strcasecmp(a1, "Mode")) {
      goto LABEL_10;
    }
LABEL_19:
    unsigned int v14 = -1431655766;
    int v8 = util::convert<unsigned int>(&v15, &v14, 0);
    if (v14 < 4) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (v9 != 1) {
      goto LABEL_30;
    }
LABEL_28:
    HIBYTE(v20) = 3;
    strcpy((char *)buf, "TTR");
    uint64_t v12 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, &v14);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_31;
    }
    return v12;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "Mode")) {
    goto LABEL_19;
  }
LABEL_10:
  if (!strcasecmp(v4, "AgeLimit"))
  {
    unsigned int v14 = -1431655766;
    int v10 = util::convert<unsigned int>(&v15, &v14, 0);
    if (v14) {
      int v11 = v10;
    }
    else {
      int v11 = 0;
    }
    if (v11 != 1) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  char v5 = GetOsLogContext()[1];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0) {
      xpc_object_t v6 = a1;
    }
    else {
      xpc_object_t v6 = *(char **)a1;
    }
    uint64_t v7 = &v15;
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315906;
    __int16 v17 = "prop";
    __int16 v18 = 2080;
    uint64_t v19 = "TTR";
    __int16 v20 = 2080;
    uint64_t v21 = v6;
    __int16 v22 = 2080;
    int v23 = v7;
    _os_log_error_impl(&dword_1A609F000, v5, OS_LOG_TYPE_ERROR, "%s: [ttr] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
  }
LABEL_30:
  uint64_t v12 = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
LABEL_31:
  }
    operator delete(v15.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1A61CAAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::logfilter::set(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  memset(&v16, 170, sizeof(v16));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v16 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::logfilter::get(a1, (uint64_t)&v16)) {
    goto LABEL_35;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, "FreeSpace"))
    {
      int v4 = a1;
      if (strcasecmp(a1, "MaxLogLimit")) {
        goto LABEL_11;
      }
      goto LABEL_21;
    }
LABEL_26:
    int v15 = -1431655766;
    int v11 = util::convert<int>(&v16, &v15, 0);
    if (v15 > -2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    if (v12 != 1) {
      goto LABEL_35;
    }
    goto LABEL_25;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "FreeSpace")) {
    goto LABEL_26;
  }
  if (!strcasecmp(v4, "MaxLogLimit"))
  {
LABEL_21:
    int v15 = -1431655766;
    int v8 = util::convert<int>(&v16, &v15, 0);
    if (v15 > -2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (v9 != 1) {
      goto LABEL_35;
    }
LABEL_25:
    HIBYTE(v20) = 9;
    strcpy(buf, "LogFilter");
    uint64_t v10 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v15);
    goto LABEL_33;
  }
LABEL_11:
  if (!strcasecmp(v4, "DuplicateSignatureDetection"))
  {
    LOBYTE(v15) = 1;
    if (!util::convert<BOOL>(&v16, (BOOL *)&v15, 0)) {
      goto LABEL_35;
    }
    HIBYTE(v20) = 9;
    strcpy(buf, "LogFilter");
    uint64_t v10 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v15);
LABEL_33:
    uint64_t v13 = v10;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_36;
    }
    return v13;
  }
  char v5 = GetOsLogContext()[1];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0) {
      xpc_object_t v6 = a1;
    }
    else {
      xpc_object_t v6 = *(char **)a1;
    }
    uint64_t v7 = &v16;
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "prop";
    __int16 v18 = 2080;
    uint64_t v19 = "LogFilter";
    __int16 v20 = 2080;
    uint64_t v21 = v6;
    __int16 v22 = 2080;
    int v23 = v7;
    _os_log_error_impl(&dword_1A609F000, v5, OS_LOG_TYPE_ERROR, "%s: [logfilter] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
  }
LABEL_35:
  uint64_t v13 = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
LABEL_36:
  }
    operator delete(v16.__r_.__value_.__l.__data_);
  return v13;
}

void sub_1A61CAE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::systemlogs::set(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  memset(&v16, 170, sizeof(v16));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v16 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::systemlogs::get(a1, (uint64_t)&v16)) {
    goto LABEL_39;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, "Mode"))
    {
      int v4 = a1;
      if (strcasecmp(a1, "History")) {
        goto LABEL_11;
      }
      goto LABEL_21;
    }
LABEL_26:
    unsigned int v15 = -1431655766;
    if (TelephonyUtilIsInternalBuild()) {
      int IsCarrierBuild = 1;
    }
    else {
      int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    }
    if (!util::convert<unsigned int>(&v16, &v15, 0)) {
      goto LABEL_39;
    }
    unsigned int v12 = IsCarrierBuild ? 3 : 2;
    if (v15 >= v12) {
      goto LABEL_39;
    }
    HIBYTE(v20) = 10;
    strcpy(buf, "SystemLogs");
    uint64_t v10 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, &v15);
LABEL_37:
    uint64_t v13 = v10;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_40;
    }
    return v13;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "Mode")) {
    goto LABEL_26;
  }
  if (!strcasecmp(v4, "History"))
  {
LABEL_21:
    unsigned int v15 = -1431655766;
    int v8 = util::convert<int>(&v16, &v15, 0);
    if ((int)v15 > 0) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (v9 != 1) {
      goto LABEL_39;
    }
    HIBYTE(v20) = 10;
    strcpy(buf, "SystemLogs");
    uint64_t v10 = prop::file::set<int>((const void **)buf, (uint64_t)a1, (int *)&v15);
    goto LABEL_37;
  }
LABEL_11:
  if (!strcasecmp(v4, "UserConfirmation"))
  {
    LOBYTE(v15) = -86;
    if (!util::convert<BOOL>(&v16, (BOOL *)&v15, 0)) {
      goto LABEL_39;
    }
    HIBYTE(v20) = 10;
    strcpy(buf, "SystemLogs");
    uint64_t v10 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v15);
    goto LABEL_37;
  }
  char v5 = GetOsLogContext()[1];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0) {
      xpc_object_t v6 = a1;
    }
    else {
      xpc_object_t v6 = *(char **)a1;
    }
    uint64_t v7 = &v16;
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "prop";
    __int16 v18 = 2080;
    uint64_t v19 = "SystemLogs";
    __int16 v20 = 2080;
    uint64_t v21 = v6;
    __int16 v22 = 2080;
    int v23 = v7;
    _os_log_error_impl(&dword_1A609F000, v5, OS_LOG_TYPE_ERROR, "%s: [systemlogs] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
  }
LABEL_39:
  uint64_t v13 = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
LABEL_40:
  }
    operator delete(v16.__r_.__value_.__l.__data_);
  return v13;
}

void sub_1A61CB1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::profile::set(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  memset(&v12, 170, sizeof(v12));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v12 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::profile::get(a1, (uint64_t)&v12)) {
    goto LABEL_25;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    int v4 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C0E0])) {
      goto LABEL_10;
    }
LABEL_19:
    LOBYTE(v11) = -86;
    if (!util::convert<BOOL>(&v12, (BOOL *)&v11, 0)) {
      goto LABEL_25;
    }
    HIBYTE(v16) = 7;
    strcpy(buf, "Profile");
    uint64_t v8 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v11);
    goto LABEL_23;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C0E0])) {
    goto LABEL_19;
  }
LABEL_10:
  if (!strcasecmp(v4, "InstalledCarrierProfileVersion"))
  {
    int v11 = -1431655766;
    if (!util::convert<int>(&v12, &v11, 0)) {
      goto LABEL_25;
    }
    HIBYTE(v16) = 7;
    strcpy(buf, "Profile");
    uint64_t v8 = prop::file::set<std::string>((const void **)buf, (uint64_t)a1, (uint64_t)&v12);
LABEL_23:
    uint64_t v9 = v8;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_26;
    }
    return v9;
  }
  char v5 = GetOsLogContext()[1];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0) {
      xpc_object_t v6 = a1;
    }
    else {
      xpc_object_t v6 = *(char **)a1;
    }
    uint64_t v7 = &v12;
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v7 = (std::string *)v12.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "prop";
    __int16 v14 = 2080;
    unsigned int v15 = "Profile";
    __int16 v16 = 2080;
    __int16 v17 = v6;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    _os_log_error_impl(&dword_1A609F000, v5, OS_LOG_TYPE_ERROR, "%s: [profile] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
  }
LABEL_25:
  uint64_t v9 = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
LABEL_26:
  }
    operator delete(v12.__r_.__value_.__l.__data_);
  return v9;
}

void sub_1A61CB494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::tailspin::set(uint64_t a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  memset(&v11, 170, sizeof(v11));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (!strcasecmp(v2, "default"))
    {
LABEL_7:
      if (!defaults::tailspin::get((const char *)a1, (uint64_t)&v11)) {
        goto LABEL_22;
      }
    }
  }
  else
  {
    std::string v11 = *(std::string *)a2;
    if (!strcasecmp(a2, "default")) {
      goto LABEL_7;
    }
  }
  if (*(char *)(a1 + 23) >= 0) {
    int v4 = (const char *)a1;
  }
  else {
    int v4 = *(const char **)a1;
  }
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C0E0]))
  {
    char v10 = -86;
    if (util::convert<BOOL>(&v11, (BOOL *)&v10, 0))
    {
      HIBYTE(v15) = 8;
      strcpy(buf, "Tailspin");
      uint64_t v8 = prop::file::set<BOOL>((const void **)buf, a1, (unsigned __int8 *)&v10);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_23;
      }
      return v8;
    }
  }
  else
  {
    char v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 23) >= 0) {
        xpc_object_t v6 = (const char *)a1;
      }
      else {
        xpc_object_t v6 = *(const char **)a1;
      }
      uint64_t v7 = &v11;
      if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v7 = (std::string *)v11.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "prop";
      __int16 v13 = 2080;
      __int16 v14 = "Tailspin";
      __int16 v15 = 2080;
      __int16 v16 = v6;
      __int16 v17 = 2080;
      __int16 v18 = v7;
      _os_log_error_impl(&dword_1A609F000, v5, OS_LOG_TYPE_ERROR, "%s: [tailspin] set: Invalid key; domain='%s' key='%s' value='%s'",
        buf,
        0x2Au);
    }
  }
LABEL_22:
  uint64_t v8 = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
LABEL_23:
  }
    operator delete(v11.__r_.__value_.__l.__data_);
  return v8;
}

void sub_1A61CB6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::tracesettings::set(char *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  memset(&v11, 170, sizeof(v11));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v11 = *(std::string *)a2;
  }
  if (a1[23] < 0)
  {
    BOOL v3 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, "SettingsVersion"))
    {
      if (strcasecmp(v3, "SettingsSelected") && strcasecmp(v3, "Time")) {
        goto LABEL_8;
      }
      goto LABEL_22;
    }
LABEL_20:
    int v10 = -1431655766;
    if (!util::convert<int>(&v11, &v10, 0)) {
      goto LABEL_27;
    }
LABEL_21:
    HIBYTE(v15) = 8;
    strcpy(buf, "Settings");
    uint64_t v7 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v10);
    goto LABEL_23;
  }
  if (!strcasecmp(a1, "SettingsVersion")) {
    goto LABEL_20;
  }
  if (strcasecmp(a1, "SettingsSelected"))
  {
    BOOL v3 = a1;
    if (strcasecmp(a1, "Time"))
    {
LABEL_8:
      if (strcasecmp(v3, "SettingsDevice"))
      {
        int v4 = GetOsLogContext()[1];
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          if (a1[23] >= 0) {
            char v5 = a1;
          }
          else {
            char v5 = *(char **)a1;
          }
          xpc_object_t v6 = &v11;
          if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            xpc_object_t v6 = (std::string *)v11.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136315906;
          *(void *)&uint8_t buf[4] = "prop";
          __int16 v13 = 2080;
          __int16 v14 = "Settings";
          __int16 v15 = 2080;
          __int16 v16 = v5;
          __int16 v17 = 2080;
          __int16 v18 = v6;
          _os_log_error_impl(&dword_1A609F000, v4, OS_LOG_TYPE_ERROR, "%s: [tracesettings] set: Invalid key; domain='%s' key='%s' value='%s'",
            buf,
            0x2Au);
        }
LABEL_27:
        uint64_t v8 = 0;
        if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return v8;
        }
        goto LABEL_24;
      }
      int v10 = -1431655766;
      if (!util::convert<int>(&v11, &v10, 0)) {
        goto LABEL_27;
      }
      goto LABEL_21;
    }
  }
LABEL_22:
  HIBYTE(v15) = 8;
  strcpy(buf, "Settings");
  uint64_t v7 = prop::file::set<std::string>((const void **)buf, (uint64_t)a1, (uint64_t)&v11);
LABEL_23:
  uint64_t v8 = v7;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
LABEL_24:
  }
    operator delete(v11.__r_.__value_.__l.__data_);
  return v8;
}

void sub_1A61CB9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::get_from_file(char *a1, char *a2, uint64_t a3)
{
  memset(&__p, 0, sizeof(__p));
  BOOL v6 = defaults::get(a1, a2, &__p);
  if (v6)
  {
    prop::file::get<std::string>((const void **)a1, (uint64_t)a2, (uint64_t)&__p, &v8);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(std::string *)a3 = v8;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_1A61CBAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::file::set<BOOL>(const void **a1, uint64_t a2, unsigned __int8 *a3)
{
  memset(__p, 170, 24);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = (size_t)a1[1];
  }
  unint64_t v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    std::string v12 = a1;
  }
  else {
    std::string v12 = *a1;
  }
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    __int16 v14 = (const std::string::value_type *)a2;
  }
  else {
    __int16 v14 = *(const std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  __int16 v16 = std::string::append(&__dst, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  std::string __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    __int16 v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  }
  else {
    __int16 v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  for (; v19 != v18; uint64_t v19 = (void **)((char *)v19 + 1))
    *(unsigned char *)uint64_t v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  long long v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  std::string::size_type v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EB5EE680)
  {
    int v23 = operator new(0x18uLL);
    MEMORY[0x1A6274940](v23, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    __int16 v22 = operator new(0x20uLL);
    void *v22 = &unk_1EFB0B648;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
    uint64_t v24 = (std::__shared_weak_count *)off_1EB5EE688;
    qword_1EB5EE680 = (uint64_t)v23;
    off_1EB5EE688 = v22;
    if (!v24)
    {
      uint64_t v30 = (uint64_t)v23;
      xpc_object_t v31 = (std::__shared_weak_count *)v22;
      goto LABEL_38;
    }
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  LODWORD(v23) = qword_1EB5EE680;
  __int16 v22 = off_1EB5EE688;
  uint64_t v30 = qword_1EB5EE680;
  xpc_object_t v31 = (std::__shared_weak_count *)off_1EB5EE688;
  if (off_1EB5EE688) {
LABEL_38:
  }
    atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v20;
    v29.__r_.__value_.__r.__words[2] = v21;
LABEL_42:
    std::string __dst = v29;
    goto LABEL_43;
  }
  std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_42;
  }
  std::string::__init_copy_ctor_external(&__dst, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
LABEL_43:
  if (SHIBYTE(__p[2]) >= 0) {
    xpc_object_t v25 = (char *)__p;
  }
  else {
    xpc_object_t v25 = (char *)__p[0];
  }
  uint64_t v26 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v25);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_48;
    }
LABEL_51:
    operator delete(v29.__r_.__value_.__l.__data_);
    int v27 = v31;
    if (!v31) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_51;
  }
LABEL_48:
  int v27 = v31;
  if (!v31)
  {
LABEL_53:
    if ((v21 & 0x8000000000000000) == 0) {
      goto LABEL_54;
    }
LABEL_57:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return v26;
    }
LABEL_58:
    operator delete(__p[0]);
    return v26;
  }
LABEL_52:
  if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if ((v21 & 0x8000000000000000) != 0) {
    goto LABEL_57;
  }
LABEL_54:
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_58;
  }
  return v26;
}

void sub_1A61CBE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0) {
    operator delete(v30);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<int>(const void **a1, uint64_t a2, int *a3)
{
  memset(__p, 170, 24);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = (size_t)a1[1];
  }
  unint64_t v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    std::string v12 = a1;
  }
  else {
    std::string v12 = *a1;
  }
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    __int16 v14 = (const std::string::value_type *)a2;
  }
  else {
    __int16 v14 = *(const std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  __int16 v16 = std::string::append(&__dst, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  std::string __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    __int16 v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  }
  else {
    __int16 v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  for (; v19 != v18; uint64_t v19 = (void **)((char *)v19 + 1))
    *(unsigned char *)uint64_t v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  long long v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  std::string::size_type v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EB5EE680)
  {
    int v23 = operator new(0x18uLL);
    MEMORY[0x1A6274940](v23, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    __int16 v22 = operator new(0x20uLL);
    void *v22 = &unk_1EFB0B648;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
    uint64_t v24 = (std::__shared_weak_count *)off_1EB5EE688;
    qword_1EB5EE680 = (uint64_t)v23;
    off_1EB5EE688 = v22;
    if (!v24)
    {
      uint64_t v30 = (uint64_t)v23;
      uint64_t v31 = (std::__shared_weak_count *)v22;
      goto LABEL_38;
    }
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  LODWORD(v23) = qword_1EB5EE680;
  __int16 v22 = off_1EB5EE688;
  uint64_t v30 = qword_1EB5EE680;
  uint64_t v31 = (std::__shared_weak_count *)off_1EB5EE688;
  if (off_1EB5EE688) {
LABEL_38:
  }
    atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v20;
    v29.__r_.__value_.__r.__words[2] = v21;
LABEL_42:
    std::string __dst = v29;
    goto LABEL_43;
  }
  std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_42;
  }
  std::string::__init_copy_ctor_external(&__dst, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
LABEL_43:
  if (SHIBYTE(__p[2]) >= 0) {
    xpc_object_t v25 = (char *)__p;
  }
  else {
    xpc_object_t v25 = (char *)__p[0];
  }
  uint64_t v26 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v25);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_48;
    }
LABEL_51:
    operator delete(v29.__r_.__value_.__l.__data_);
    int v27 = v31;
    if (!v31) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_51;
  }
LABEL_48:
  int v27 = v31;
  if (!v31)
  {
LABEL_53:
    if ((v21 & 0x8000000000000000) == 0) {
      goto LABEL_54;
    }
LABEL_57:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return v26;
    }
LABEL_58:
    operator delete(__p[0]);
    return v26;
  }
LABEL_52:
  if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if ((v21 & 0x8000000000000000) != 0) {
    goto LABEL_57;
  }
LABEL_54:
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_58;
  }
  return v26;
}

void sub_1A61CC308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0) {
    operator delete(v30);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<unsigned int>(const void **a1, uint64_t a2, unsigned int *a3)
{
  memset(__p, 170, 24);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = (size_t)a1[1];
  }
  unint64_t v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    std::string v12 = a1;
  }
  else {
    std::string v12 = *a1;
  }
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    __int16 v14 = (const std::string::value_type *)a2;
  }
  else {
    __int16 v14 = *(const std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  __int16 v16 = std::string::append(&__dst, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  std::string __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    __int16 v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  }
  else {
    __int16 v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  for (; v19 != v18; uint64_t v19 = (void **)((char *)v19 + 1))
    *(unsigned char *)uint64_t v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  long long v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  std::string::size_type v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EB5EE680)
  {
    int v23 = operator new(0x18uLL);
    MEMORY[0x1A6274940](v23, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    __int16 v22 = operator new(0x20uLL);
    void *v22 = &unk_1EFB0B648;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
    uint64_t v24 = (std::__shared_weak_count *)off_1EB5EE688;
    qword_1EB5EE680 = (uint64_t)v23;
    off_1EB5EE688 = v22;
    if (!v24)
    {
      uint64_t v30 = (uint64_t)v23;
      uint64_t v31 = (std::__shared_weak_count *)v22;
      goto LABEL_38;
    }
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  LODWORD(v23) = qword_1EB5EE680;
  __int16 v22 = off_1EB5EE688;
  uint64_t v30 = qword_1EB5EE680;
  uint64_t v31 = (std::__shared_weak_count *)off_1EB5EE688;
  if (off_1EB5EE688) {
LABEL_38:
  }
    atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v20;
    v29.__r_.__value_.__r.__words[2] = v21;
LABEL_42:
    std::string __dst = v29;
    goto LABEL_43;
  }
  std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_42;
  }
  std::string::__init_copy_ctor_external(&__dst, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
LABEL_43:
  if (SHIBYTE(__p[2]) >= 0) {
    xpc_object_t v25 = (char *)__p;
  }
  else {
    xpc_object_t v25 = (char *)__p[0];
  }
  uint64_t v26 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v25);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_48;
    }
LABEL_51:
    operator delete(v29.__r_.__value_.__l.__data_);
    int v27 = v31;
    if (!v31) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_51;
  }
LABEL_48:
  int v27 = v31;
  if (!v31)
  {
LABEL_53:
    if ((v21 & 0x8000000000000000) == 0) {
      goto LABEL_54;
    }
LABEL_57:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return v26;
    }
LABEL_58:
    operator delete(__p[0]);
    return v26;
  }
LABEL_52:
  if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if ((v21 & 0x8000000000000000) != 0) {
    goto LABEL_57;
  }
LABEL_54:
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_58;
  }
  return v26;
}

void sub_1A61CC774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0) {
    operator delete(v30);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<std::string>(const void **a1, uint64_t a2, uint64_t a3)
{
  memset(v30, 170, 24);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = (size_t)a1[1];
  }
  unint64_t v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    std::string v12 = a1;
  }
  else {
    std::string v12 = *a1;
  }
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    __int16 v14 = (const std::string::value_type *)a2;
  }
  else {
    __int16 v14 = *(const std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  __int16 v16 = std::string::append(&__dst, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  void v30[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v30 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30[2]) >= 0) {
    __int16 v18 = (void **)((char *)v30 + HIBYTE(v30[2]));
  }
  else {
    __int16 v18 = (void **)((char *)v30[0] + (unint64_t)v30[1]);
  }
  if (SHIBYTE(v30[2]) >= 0) {
    uint64_t v19 = v30;
  }
  else {
    uint64_t v19 = (void **)v30[0];
  }
  for (; v19 != v18; uint64_t v19 = (void **)((char *)v19 + 1))
    *(unsigned char *)uint64_t v19 = __tolower(*(char *)v19);
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EB5EE680)
  {
    std::string::size_type v21 = operator new(0x18uLL);
    MEMORY[0x1A6274940](v21, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    long long v20 = operator new(0x20uLL);
    void *v20 = &unk_1EFB0B648;
    v20[1] = 0;
    v20[2] = 0;
    v20[3] = v21;
    __int16 v22 = (std::__shared_weak_count *)off_1EB5EE688;
    qword_1EB5EE680 = (uint64_t)v21;
    off_1EB5EE688 = v20;
    if (!v22)
    {
      uint64_t v28 = (uint64_t)v21;
      std::string v29 = (std::__shared_weak_count *)v20;
      goto LABEL_38;
    }
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  LODWORD(v21) = qword_1EB5EE680;
  long long v20 = off_1EB5EE688;
  uint64_t v28 = qword_1EB5EE680;
  std::string v29 = (std::__shared_weak_count *)off_1EB5EE688;
  if (off_1EB5EE688) {
LABEL_38:
  }
    atomic_fetch_add_explicit(v20 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = __p;
  }
  if (SHIBYTE(v30[2]) >= 0) {
    int v23 = (char *)v30;
  }
  else {
    int v23 = (char *)v30[0];
  }
  uint64_t v24 = ctu::cf::plist_adapter::set<std::string>((int)v21, (uint64_t)&__dst, v23);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_50:
      xpc_object_t v25 = v29;
      if (!v29) {
        goto LABEL_55;
      }
      goto LABEL_54;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_50;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  xpc_object_t v25 = v29;
  if (!v29) {
    goto LABEL_55;
  }
LABEL_54:
  if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if ((SHIBYTE(v30[2]) & 0x80000000) == 0) {
      return v24;
    }
    goto LABEL_56;
  }
LABEL_55:
  if (SHIBYTE(v30[2]) < 0) {
LABEL_56:
  }
    operator delete(v30[0]);
  return v24;
}

void sub_1A61CCBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t prop::tracesettings::enabled(prop::tracesettings *this, const char *a2)
{
  BOOL v15 = 0;
  if (this != (prop::tracesettings *)"SystemLogs")
  {
    size_t v3 = strlen((const char *)this);
    if (v3 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v4 = v3;
    if (v3 >= 0x17)
    {
      uint64_t v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17) {
        uint64_t v8 = v3 | 7;
      }
      uint64_t v9 = v8 + 1;
      p_dst = (long long *)operator new(v8 + 1);
      *((void *)&__dst + 1) = v4;
      unint64_t v14 = v9 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v14) = v3;
      p_dst = &__dst;
      if (!v3)
      {
LABEL_16:
        *((unsigned char *)p_dst + v4) = 0;
        char v12 = 7;
        strcpy((char *)v11, "Enabled");
        memset(&__p, 0, sizeof(__p));
        if (prop::get((char *)&__dst, (char *)v11, (uint64_t)&__p)) {
          util::convert<BOOL>(&__p, &v15, 0);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((v12 & 0x80000000) == 0)
          {
LABEL_20:
            if ((SHIBYTE(v14) & 0x80000000) == 0) {
              return v15;
            }
LABEL_24:
            operator delete((void *)__dst);
            return v15;
          }
        }
        else if ((v12 & 0x80000000) == 0)
        {
          goto LABEL_20;
        }
        operator delete(v11[0]);
        if ((SHIBYTE(v14) & 0x80000000) == 0) {
          return v15;
        }
        goto LABEL_24;
      }
    }
    memcpy(p_dst, this, v4);
    goto LABEL_16;
  }
  HIBYTE(v14) = 10;
  strcpy((char *)&__dst, "SystemLogs");
  char v12 = 4;
  strcpy((char *)v11, "Mode");
  memset(&__p, 0, sizeof(__p));
  int v6 = -1431655766;
  if (!prop::get((char *)&__dst, (char *)v11, (uint64_t)&__p))
  {
    unsigned int v7 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  int v16 = -1431655766;
  unsigned int v7 = util::convert<int>(&__p, &v16, 0);
  if (v7) {
    int v6 = v16;
  }
  else {
    int v6 = -1431655766;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_26:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_27:
  if (v12 < 0)
  {
    operator delete(v11[0]);
    if ((SHIBYTE(v14) & 0x80000000) == 0) {
      goto LABEL_29;
    }
  }
  else if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete((void *)__dst);
LABEL_29:
  if (v6) {
    return v7;
  }
  else {
    return 0;
  }
}

void sub_1A61CCEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a20 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t prop::tracesettings::anyEnabled(prop::tracesettings *this, const char *a2)
{
  if ((prop::tracesettings::enabled((prop::tracesettings *)"BasebandTrace", a2) & 1) != 0
    || (prop::tracesettings::enabled((prop::tracesettings *)"SystemLogs", v2) & 1) != 0
    || (prop::tracesettings::enabled((prop::tracesettings *)"CoreDump", v3) & 1) != 0
    || (prop::tracesettings::enabled((prop::tracesettings *)"IPC", v4) & 1) != 0
    || (prop::tracesettings::enabled((prop::tracesettings *)"KernelPCI", v5) & 1) != 0
    || (prop::tracesettings::enabled((prop::tracesettings *)"BasebandIPC", v6) & 1) != 0)
  {
    return 1;
  }

  return prop::tracesettings::enabled((prop::tracesettings *)"Tailspin", v7);
}

uint64_t prop::tracesettings::isContinuous(prop::tracesettings *this, const char *a2)
{
  if ((prop::tracesettings::enabled((prop::tracesettings *)"BasebandTrace", a2) & 1) != 0
    || (prop::tracesettings::enabled((prop::tracesettings *)"IPC", v2) & 1) != 0)
  {
    return 1;
  }

  return prop::tracesettings::enabled((prop::tracesettings *)"KernelPCI", v3);
}

uint64_t prop::tracesettings::mobileBasebandServicesEnabled(prop::tracesettings *this, const char *a2)
{
  if ((prop::tracesettings::enabled((prop::tracesettings *)"BasebandTrace", a2) & 1) != 0
    || (prop::tracesettings::enabled((prop::tracesettings *)"IPC", v2) & 1) != 0)
  {
    return 1;
  }

  return prop::tracesettings::enabled((prop::tracesettings *)"KernelPCI", v3);
}

void prop::file::get<std::string>(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  memset(v30, 170, sizeof(v30));
  int v5 = *((char *)a1 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  unint64_t v7 = v6 + 1;
  long long __dst = (void **)0xAAAAAAAAAAAAAAAALL;
  std::string v29 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  if (v6 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v12 = v7 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    std::string v29 = (std::__shared_weak_count *)(v6 + 1);
    v30[0] = v13 | 0x8000000000000000;
    long long __dst = p_dst;
  }
  else
  {
    std::string v29 = 0;
    v30[0] = 0;
    long long __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v30[0]) = v6 + 1;
    if (!v6) {
      goto LABEL_15;
    }
  }
  if (v5 >= 0) {
    unint64_t v14 = a1;
  }
  else {
    unint64_t v14 = *a1;
  }
  memmove(p_dst, v14, v6);
LABEL_15:
  *(_WORD *)((char *)p_dst + v6) = 46;
  int v15 = *(char *)(a2 + 23);
  if (v15 >= 0) {
    int v16 = (const std::string::value_type *)a2;
  }
  else {
    int v16 = *(const std::string::value_type **)a2;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v17 = *(void *)(a2 + 8);
  }
  __int16 v18 = std::string::append((std::string *)&__dst, v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v30[3] = *((void *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)&v30[1] = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30[0]) < 0) {
    operator delete(__dst);
  }
  if (v30[3] >= 0) {
    long long v20 = (char *)&v30[1] + HIBYTE(v30[3]);
  }
  else {
    long long v20 = (char *)(v30[1] + v30[2]);
  }
  if (v30[3] >= 0) {
    std::string::size_type v21 = (char *)&v30[1];
  }
  else {
    std::string::size_type v21 = (char *)v30[1];
  }
  for (; v21 != v20; ++v21)
    *std::string::size_type v21 = __tolower(*v21);
  memset(a4, 170, sizeof(std::string));
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a4->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EB5EE680)
  {
    int v23 = (void **)operator new(0x18uLL);
    MEMORY[0x1A6274940](v23, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    __int16 v22 = operator new(0x20uLL);
    void *v22 = &unk_1EFB0B648;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
    uint64_t v24 = (std::__shared_weak_count *)off_1EB5EE688;
    qword_1EB5EE680 = (uint64_t)v23;
    off_1EB5EE688 = v22;
    if (!v24)
    {
      long long __dst = v23;
      std::string v29 = (std::__shared_weak_count *)v22;
      goto LABEL_41;
    }
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  int v23 = (void **)qword_1EB5EE680;
  __int16 v22 = off_1EB5EE688;
  long long __dst = (void **)qword_1EB5EE680;
  std::string v29 = (std::__shared_weak_count *)off_1EB5EE688;
  if (off_1EB5EE688) {
LABEL_41:
  }
    atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (v30[3] >= 0) {
    xpc_object_t v25 = (const char *)&v30[1];
  }
  else {
    xpc_object_t v25 = (const char *)v30[1];
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v31, v25);
  uint64_t v26 = (const void *)(*(uint64_t (**)(void **, uint64_t))*v23)(v23, v31);
  if (v26)
  {
    ctu::cf::assign();
    CFRelease(v26);
  }
  MEMORY[0x1A62748E0](&v31);
  int v27 = v29;
  if (!v29 || atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v30[3]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_50;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if (SHIBYTE(v30[3]) < 0) {
LABEL_50:
  }
    operator delete((void *)v30[1]);
}

uint64_t __cxx_global_var_init_3()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1A609F000);
  }
  return result;
}

void **std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    size_t v3 = (void **)a1[1];
    size_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0) {
          operator delete(*(v3 - 4));
        }
        v3 -= 4;
      }
      while (v3 != v2);
      size_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ResetInfo::ResetInfo(ResetInfo *this)
{
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
}

{
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
}

uint64_t ResetInfo::ResetInfo(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, int a6, long long *a7)
{
  uint64_t v18 = 0;
  ctu::cf::assign();
  *(_OWORD *)a1 = 0uLL;
  *(void *)(a1 + 16) = v18;
  long long v17 = 0uLL;
  uint64_t v18 = 0;
  ctu::cf::assign();
  *(_OWORD *)(a1 + 24) = 0uLL;
  *(void *)(a1 + 40) = v18;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v12 = *a4;
    *(void *)(a1 + 64) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 48) = v12;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string __p = *(std::string *)a5;
  }
  *(void *)(a1 + 72) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    *(_DWORD *)(a1 + 80) = a6;
    uint64_t v13 = (std::string *)(a1 + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_11:
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a7, *((void *)a7 + 1));
    return a1;
  }
  *(_DWORD *)(a1 + 80) = a6;
  uint64_t v13 = (std::string *)(a1 + 88);
  if (*((char *)a7 + 23) < 0) {
    goto LABEL_11;
  }
LABEL_9:
  long long v14 = *a7;
  v13->__r_.__value_.__r.__words[2] = *((void *)a7 + 2);
  *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  return a1;
}

void sub_1A61CD69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v20 + 47) < 0) {
    operator delete(*v21);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

void ResetInfo::ResetInfo(std::string *this, long long *a2, long long *a3, long long *a4, uint64_t a5, int a6, long long *a7)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    long long v14 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v13 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v13;
    long long v14 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      long long v15 = *a3;
      v14->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a3, *((void *)a3 + 1));
LABEL_6:
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v16 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v16;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string __p = *(std::string *)a5;
  }
  this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = a6;
    long long v17 = (std::string *)((char *)this + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0) {
      goto LABEL_14;
    }
  }
  else
  {
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = a6;
    long long v17 = (std::string *)((char *)this + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0)
    {
LABEL_14:
      long long v18 = *a7;
      v17->__r_.__value_.__r.__words[2] = *((void *)a7 + 2);
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      return;
    }
  }
  std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a7, *((void *)a7 + 1));
}

void sub_1A61CD8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 47) < 0)
  {
    operator delete(*v15);
    if ((*(char *)(v14 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v14 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

void ResetInfo::~ResetInfo(void **this)
{
  if (*((char *)this + 111) < 0)
  {
    operator delete(this[11]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(*this);
    return;
  }
LABEL_8:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0) {
    goto LABEL_9;
  }
}

{
  if (*((char *)this + 111) < 0)
  {
    operator delete(this[11]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(*this);
    return;
  }
LABEL_8:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0) {
    goto LABEL_9;
  }
}

void ResetInfo::getType(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

void ResetInfo::getSubType(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 5);
  }
}

void ResetInfo::getReason(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((void *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 8);
  }
}

void ResetInfo::getTime(ResetInfo *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 9);
  size_t v4 = operator new(0x38uLL);
  v4[8] = 0;
  *(void *)size_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = v6;
  int v5 = v4;
  v6[0] = v4;
  *((unsigned char *)v4 + 24) = 1;
  v6[1] = (void *)1;
  *((void *)v4 + 5) = v3;
  *((void *)v4 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v5, 0, 9, a2);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v5, v6[0]);
}

void sub_1A61CDB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t ResetInfo::getChronoTime(ResetInfo *this)
{
  return *((void *)this + 9);
}

uint64_t ResetInfo::getRadar(ResetInfo *this)
{
  return *((unsigned int *)this + 20);
}

void ResetInfo::getCrashReason(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 11), *((void *)this + 12));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 13);
  }
}

void ResetInfo::setType(ResetInfo *this, const __CFString *a2)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *(void *)((char *)this + 15) = 0;
  *((unsigned char *)this + 23) = 0;
}

void sub_1A61CDC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ResetInfo::setSubType(ResetInfo *this, const __CFString *a2)
{
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *(void *)((char *)this + 39) = 0;
  *((unsigned char *)this + 47) = 0;
}

void sub_1A61CDD28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **ResetInfo::setReason(uint64_t a1, void **a2)
{
  uint64_t result = (void **)(a1 + 48);
  if (result != a2)
  {
    if (*(char *)(a1 + 71) < 0)
    {
      size_t v5 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        size_t v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        size_t v6 = v5;
      }
      return std::string::__assign_no_alias<false>(result, a2, v6);
    }
    else if ((*((unsigned char *)a2 + 23) & 0x80) != 0)
    {
      return (void **)std::string::__assign_no_alias<true>(result, *a2, (size_t)a2[1]);
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)uint64_t result = v4;
    }
  }
  return result;
}

void ResetInfo::setTime(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  *(void *)(a1 + 72) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1A61CDE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ResetInfo::setRadar(uint64_t result, int a2)
{
  *(_DWORD *)(result + 80) = a2;
  return result;
}

void **ResetInfo::setCrashReason(uint64_t a1, void **a2)
{
  uint64_t result = (void **)(a1 + 88);
  if (result != a2)
  {
    if (*(char *)(a1 + 111) < 0)
    {
      size_t v5 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        size_t v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        size_t v6 = v5;
      }
      return std::string::__assign_no_alias<false>(result, a2, v6);
    }
    else if ((*((unsigned char *)a2 + 23) & 0x80) != 0)
    {
      return (void **)std::string::__assign_no_alias<true>(result, *a2, (size_t)a2[1]);
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)uint64_t result = v4;
    }
  }
  return result;
}

uint64_t ResetInfo::asString@<X0>(ResetInfo *this@<X0>, unsigned char *a2@<X8>)
{
  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1) {
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global_3);
  }
  unint64_t v54 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53[7] = v4;
  v53[8] = v4;
  v53[5] = v4;
  v53[6] = v4;
  v53[3] = v4;
  v53[4] = v4;
  v53[1] = v4;
  v53[2] = v4;
  long long v52 = v4;
  v53[0] = v4;
  *(_OWORD *)xpc_object_t v50 = v4;
  long long v51 = v4;
  long long v48 = v4;
  long long v49 = v4;
  long long v46 = v4;
  long long v47 = v4;
  long long v45 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v45);
  size_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"ResetInfo { Type='", 18);
  int v6 = *((char *)this + 23);
  if (v6 >= 0) {
    unint64_t v7 = this;
  }
  else {
    unint64_t v7 = *(ResetInfo **)this;
  }
  if (v6 >= 0) {
    uint64_t v8 = *((unsigned __int8 *)this + 23);
  }
  else {
    uint64_t v8 = *((void *)this + 1);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"' SubType='", 11);
  int v11 = *((char *)this + 47);
  if (v11 >= 0) {
    long long v12 = (char *)this + 24;
  }
  else {
    long long v12 = (char *)*((void *)this + 3);
  }
  if (v11 >= 0) {
    uint64_t v13 = *((unsigned __int8 *)this + 47);
  }
  else {
    uint64_t v13 = *((void *)this + 4);
  }
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
  long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"' Time='", 8);
  uint64_t v16 = *((void *)this + 9);
  xpc_object_t v56 = 0;
  uint64_t v57 = 0;
  xpc_object_t v55 = &v56;
  long long v17 = operator new(0x38uLL);
  v17[8] = 0;
  *(void *)long long v17 = 0;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = &v56;
  xpc_object_t v55 = (void **)v17;
  xpc_object_t v56 = v17;
  *((unsigned char *)v17 + 24) = 1;
  uint64_t v57 = 1;
  *((void *)v17 + 5) = v16;
  *((void *)v17 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v55, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v55, v56);
  if ((v44 & 0x80u) == 0) {
    long long v18 = __p;
  }
  else {
    long long v18 = (void **)__p[0];
  }
  if ((v44 & 0x80u) == 0) {
    uint64_t v19 = v44;
  }
  else {
    uint64_t v19 = (uint64_t)__p[1];
  }
  uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v18, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"' Radar='", 9);
  std::string::size_type v21 = (void *)std::ostream::operator<<();
  __int16 v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"' Reason='", 10);
  int v23 = (char *)this + 48;
  int v24 = *((char *)this + 71);
  if (v24 >= 0) {
    xpc_object_t v25 = (char *)this + 48;
  }
  else {
    xpc_object_t v25 = (char *)*((void *)this + 6);
  }
  if (v24 >= 0) {
    uint64_t v26 = *((unsigned __int8 *)this + 71);
  }
  else {
    uint64_t v26 = *((void *)this + 7);
  }
  int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v25, v26);
  uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"' MTBF='", 8);
  *(_DWORD *)((char *)v28 + *(void *)(*v28 - 24) + 8) |= 1u;
  ResetInfo::isMTBF((ResetInfo **)this);
  std::string v29 = (void *)std::ostream::operator<<();
  uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"' SCD='", 7);
  *(_DWORD *)((char *)v30 + *(void *)(*v30 - 24) + 8) |= 1u;
  ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v23, (long long **)&ResetInfo::sPatternMasks);
  uint64_t v31 = (void *)std::ostream::operator<<();
  xpc_object_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"' COF='", 7);
  *(_DWORD *)((char *)v32 + *(void *)(*v32 - 24) + 8) |= 1u;
  ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v23, (long long **)&ResetInfo::sPatternMasks);
  xpc_object_t v33 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"' }", 3);
  if (((char)v44 & 0x80000000) == 0)
  {
    char v34 = BYTE8(v52);
    if ((BYTE8(v52) & 0x10) == 0) {
      goto LABEL_29;
    }
LABEL_32:
    uint64_t v36 = v52;
    if ((unint64_t)v52 < *((void *)&v49 + 1))
    {
      *(void *)&long long v52 = *((void *)&v49 + 1);
      uint64_t v36 = *((void *)&v49 + 1);
    }
    int v37 = (const void *)v49;
    size_t v35 = v36 - v49;
    if ((unint64_t)(v36 - v49) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_46;
    }
    goto LABEL_35;
  }
  operator delete(__p[0]);
  char v34 = BYTE8(v52);
  if ((BYTE8(v52) & 0x10) != 0) {
    goto LABEL_32;
  }
LABEL_29:
  if ((v34 & 8) == 0)
  {
    size_t v35 = 0;
    a2[23] = 0;
    goto LABEL_42;
  }
  int v37 = (const void *)*((void *)&v47 + 1);
  size_t v35 = *((void *)&v48 + 1) - *((void *)&v47 + 1);
  if (*((void *)&v48 + 1) - *((void *)&v47 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_46:
  }
    std::string::__throw_length_error[abi:ne180100]();
LABEL_35:
  if (v35 >= 0x17)
  {
    uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v38 = v35 | 7;
    }
    uint64_t v39 = v38 + 1;
    xpc_object_t v40 = operator new(v38 + 1);
    *((void *)a2 + 1) = v35;
    *((void *)a2 + 2) = v39 | 0x8000000000000000;
    *(void *)a2 = v40;
    a2 = v40;
    goto LABEL_41;
  }
  a2[23] = v35;
  if (v35) {
LABEL_41:
  }
    memmove(a2, v37, v35);
LABEL_42:
  a2[v35] = 0;
  *(void *)&long long v45 = *MEMORY[0x1E4FBA408];
  uint64_t v41 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v45 + *(void *)(v45 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v46 = v41;
  *((void *)&v46 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v51) < 0) {
    operator delete(v50[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62751A0](v53);
}

void sub_1A61CE390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v5 - 88, *(void **)(v5 - 80));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A61CE3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A61CE3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A61CE3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ResetInfo::readResetReasonPatterns(ResetInfo *this)
{
  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1) {
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global_3);
  }
}

uint64_t ResetInfo::isMTBF(ResetInfo **this)
{
  uint64_t v2 = (char *)*MEMORY[0x1E4F4C6E8];
  if (*((char *)this + 23) < 0)
  {
    long long v4 = *this;
    int64_t v3 = (int64_t)this[1];
    int64_t v5 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
    if (!v5) {
      return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (long long **)&ResetInfo::sPatternMasks) ^ 1;
    }
  }
  else
  {
    int64_t v3 = *((unsigned __int8 *)this + 23);
    long long v4 = (ResetInfo *)this;
    int64_t v5 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
    if (!v5) {
      return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (long long **)&ResetInfo::sPatternMasks) ^ 1;
    }
  }
  int64_t v6 = v5;
  if (v3 < v5) {
    return 0;
  }
  uint64_t v8 = (char *)v4 + v3;
  int v9 = *v2;
  uint64_t v10 = v4;
  while (1)
  {
    if (v3 - v6 == -1) {
      return 0;
    }
    uint64_t result = (uint64_t)memchr(v10, v9, v3 - v6 + 1);
    if (!result) {
      return result;
    }
    uint64_t v11 = result;
    uint64_t result = memcmp((const void *)result, v2, v6);
    if (!result) {
      break;
    }
    uint64_t v10 = (ResetInfo *)(v11 + 1);
    int64_t v3 = (int64_t)&v8[-v11 - 1];
    if (v3 < v6) {
      return 0;
    }
  }
  if ((char *)v11 != v8 && v11 - (void)v4 != -1) {
    return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (long long **)&ResetInfo::sPatternMasks) ^ 1;
  }
  return result;
}

uint64_t ResetInfo::shouldSetSCD(ResetInfo *this)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)this + 48, (long long **)&ResetInfo::sPatternMasks);
}

uint64_t ResetInfo::shouldSetCOF(ResetInfo *this)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)this + 48, (long long **)&ResetInfo::sPatternMasks);
}

uint64_t ResetInfo::addToDict(uint64_t result, __CFDictionary **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  if (*a2) {
    int64_t v5 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  }
  else {
    int64_t v5 = 0;
  }
  if (v5)
  {
    uint64_t v7 = result;
    if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1) {
      dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global_3);
    }
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v9 = *a2;
    uint64_t v10 = (const __CFString **)*MEMORY[0x1E4F4C690];
    if (*(char *)(v7 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
    }
    else {
      std::string v30 = *(std::string *)v7;
    }
    ctu::cf::update<char const*,std::string>(v9, v10, (uint64_t)&v30, (uint64_t)v8, a5);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      long long v12 = *a2;
      uint64_t v13 = (const __CFString **)*MEMORY[0x1E4F4CA38];
      if ((*(char *)(v7 + 47) & 0x80000000) == 0) {
        goto LABEL_12;
      }
    }
    else
    {
      long long v12 = *a2;
      uint64_t v13 = (const __CFString **)*MEMORY[0x1E4F4CA38];
      if ((*(char *)(v7 + 47) & 0x80000000) == 0)
      {
LABEL_12:
        std::string v30 = *(std::string *)(v7 + 24);
        goto LABEL_15;
      }
    }
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v7 + 24), *(void *)(v7 + 32));
LABEL_15:
    ctu::cf::update<char const*,std::string>(v12, v13, (uint64_t)&v30, (uint64_t)v8, v11);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    long long v15 = (_OWORD *)(v7 + 48);
    uint64_t v16 = *a2;
    long long v17 = (const __CFString **)*MEMORY[0x1E4F4C8F0];
    if (*(char *)(v7 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v7 + 48), *(void *)(v7 + 56));
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *v15;
      v30.__r_.__value_.__r.__words[2] = *(void *)(v7 + 64);
    }
    ctu::cf::update<char const*,std::string>(v16, v17, (uint64_t)&v30, (uint64_t)v8, v14);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    uint64_t v18 = *(void *)(v7 + 72);
    uint64_t v19 = operator new(0x38uLL);
    v19[8] = 0;
    *(void *)uint64_t v19 = 0;
    *((void *)v19 + 1) = 0;
    *((void *)v19 + 2) = &v30.__r_.__value_.__l.__size_;
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    v30.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
    *((unsigned char *)v19 + 24) = 1;
    v30.__r_.__value_.__r.__words[2] = 1;
    *((void *)v19 + 5) = v18;
    *((void *)v19 + 6) = 0xAAAAAAAA00000000;
    Timestamp::asString((uint64_t)&v30, 0, 9, &__p);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v30, (void *)v30.__r_.__value_.__l.__size_);
    std::string::size_type v21 = *a2;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v30, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v30 = __p;
    }
    ctu::cf::update<char const*,std::string>(v21, (const __CFString **)*MEMORY[0x1E4F4C4C8], (uint64_t)&v30, (uint64_t)v8, v20);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      ctu::cf::update<char const*,unsigned int>(*a2, (const __CFString **)"RadarType", *(_DWORD *)(v7 + 80), v8, v22);
      int isMTBF = ResetInfo::isMTBF((ResetInfo **)v7);
      ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x1E4F4C8E8], isMTBF, (uint64_t)v8, v24);
      int v25 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v15, (long long **)&ResetInfo::sPatternMasks);
      ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x1E4F4C900], v25, (uint64_t)v8, v26);
      int v27 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v15, (long long **)&ResetInfo::sPatternMasks);
      return ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x1E4F4C8F8], v27, (uint64_t)v8, v28);
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_27;
  }
  return result;
}

void sub_1A61CE8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ResetInfo::addToDict(ResetInfo *this, xpc_object_t *a2)
{
  if (MEMORY[0x1A6275E60](*a2) != MEMORY[0x1E4F14590]) {
    return;
  }
  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1)
  {
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global_3);
    long long v4 = (const char *)this;
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  long long v4 = (const char *)this;
  if (*((char *)this + 23) < 0) {
LABEL_4:
  }
    long long v4 = *(const char **)this;
LABEL_5:
  xpc_object_t v5 = xpc_string_create(v4);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C690], v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v7 = (char *)this + 24;
  if (*((char *)this + 47) < 0) {
    uint64_t v7 = *(const char **)v7;
  }
  xpc_object_t v8 = xpc_string_create(v7);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4CA38], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  uint64_t v10 = (const char **)((char *)this + 48);
  CFAllocatorRef v11 = (char *)this + 48;
  if (*((char *)this + 71) < 0) {
    CFAllocatorRef v11 = *v10;
  }
  xpc_object_t v12 = xpc_string_create(v11);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C8F0], v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  uint64_t v14 = *((void *)this + 9);
  long long v15 = operator new(0x38uLL);
  v15[8] = 0;
  *(void *)long long v15 = 0;
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = v33;
  xpc_object_t v32 = v15;
  v33[0] = v15;
  *((unsigned char *)v15 + 24) = 1;
  v33[1] = (void *)1;
  *((void *)v15 + 5) = v14;
  *((void *)v15 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v32, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v32, v33[0]);
  if (v31 >= 0) {
    uint64_t v16 = __p;
  }
  else {
    uint64_t v16 = (void **)__p[0];
  }
  xpc_object_t v17 = xpc_string_create((const char *)v16);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C4C8], v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  if (v31 < 0) {
    operator delete(__p[0]);
  }
  xpc_object_t v19 = xpc_int64_create(*((unsigned int *)this + 20));
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "RadarType", v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  char isMTBF = ResetInfo::isMTBF((ResetInfo **)this);
  xpc_object_t v22 = xpc_BOOL_create(isMTBF);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C8E8], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  char v24 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v10, (long long **)&ResetInfo::sPatternMasks);
  xpc_object_t v25 = xpc_BOOL_create(v24);
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C900], v25);
  xpc_object_t v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  char v27 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v10, (long long **)&ResetInfo::sPatternMasks);
  xpc_object_t v28 = xpc_BOOL_create(v27);
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C8F8], v28);
  xpc_object_t v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
}

void sub_1A61CED20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

void ResetInfo::fetchFromDict(void **this, xpc_object_t *a2)
{
  if (MEMORY[0x1A6275E60](*a2) != MEMORY[0x1E4F14590]) {
    return;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C690]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  std::string __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  xpc::dyn_cast_or_default();
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
  *(_OWORD *)this = v14;
  this[2] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  xpc_object_t v5 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CA38]);
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  std::string __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  xpc::dyn_cast_or_default();
  xpc_object_t v6 = this + 3;
  if (*((char *)this + 47) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)xpc_object_t v6 = v14;
  this[5] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  xpc_object_t v7 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C8F0]);
  xpc_object_t object = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  std::string __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  xpc::dyn_cast_or_default();
  xpc_object_t v8 = this + 6;
  if (*((char *)this + 71) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)xpc_object_t v8 = v14;
  this[8] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  xpc_object_t v9 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C4C8]);
  xpc_object_t object = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)&v14);
  Timestamp::asString((uint64_t)&v14, 0, 9, &__p);
  xpc::dyn_cast_or_default();
  this[9] = Timestamp::convert((uint64_t)&v11);
  if (v12 < 0)
  {
    operator delete(v11);
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_25:
    operator delete(__p);
    goto LABEL_22;
  }
  if (SHIBYTE(v18) < 0) {
    goto LABEL_25;
  }
LABEL_22:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v14, *((void **)&v14 + 1));
  xpc_release(object);
  xpc_object_t v10 = xpc_dictionary_get_value(*a2, "RadarType");
  std::string __p = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    std::string __p = xpc_null_create();
  }
  *((_DWORD *)this + 20) = xpc::dyn_cast_or_default();
  xpc_release(__p);
}

void sub_1A61CF070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t a15, char a16, uint64_t a17, uint64_t a18, xpc_object_t object, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

uint64_t ResetInfo::reasonMatchesAtLeastOneApplicablePattern(int a1, uint64_t a2, long long **a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  int64_t v3 = *a3;
  size_t v35 = a3[1];
  if (*a3 != v35)
  {
    int v4 = 0;
    while (1)
    {
      *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)xpc_object_t v40 = v5;
      *(_OWORD *)&v40[16] = v5;
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v40, *(const std::string::value_type **)v3, *((void *)v3 + 1));
      }
      else
      {
        long long v6 = *v3;
        *(void *)&v40[16] = *((void *)v3 + 2);
        *(_OWORD *)xpc_object_t v40 = v6;
      }
      *(_DWORD *)&v40[24] = *((_DWORD *)v3 + 6);
      if ((*(_DWORD *)&v40[24] & a1) != 0)
      {
        memset(&v39, 170, sizeof(v39));
        if ((v40[23] & 0x80000000) != 0) {
          std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)v40, *(std::string::size_type *)&v40[8]);
        }
        else {
          std::string v39 = *(std::string *)v40;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&unsigned char v38[16] = v8;
        *(_OWORD *)&v38[32] = v8;
        *(_OWORD *)&v37[0].__locale_ = v8;
        *(_OWORD *)uint64_t v38 = v8;
        MEMORY[0x1A6275150](v37);
        v37[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v37, MEMORY[0x1E4FBA258]);
        *(void *)uint64_t v38 = std::locale::use_facet(v37, MEMORY[0x1E4FBA280]);
        memset(&v38[8], 0, 40);
        std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          xpc_object_t v10 = &v39;
        }
        else {
          xpc_object_t v10 = (std::string *)v39.__r_.__value_.__r.__words[0];
        }
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v39.__r_.__value_.__l.__size_;
        }
        if ((char *)v10 + size != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>((uint64_t)v37, (char *)v10, (char *)v10 + size))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>(); {
        uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
        }
        if ((v11 & 0x80u) == 0) {
          char v12 = (std::sub_match<const char *> *)a2;
        }
        else {
          char v12 = *(std::sub_match<const char *> **)a2;
        }
        if ((v11 & 0x80u) != 0) {
          uint64_t v11 = *(void *)(a2 + 8);
        }
        xpc_object_t v13 = (char *)v12 + v11;
        *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v47 = v14;
        unint64_t v44 = 0xAAAAAAAAAAAAAA00;
        *(void *)&v41[40] = 0xAAAAAAAAAAAAAAAALL;
        int v42 = 0;
        int v43 = 0;
        long long v45 = 0;
        long long v46 = 0;
        LOBYTE(v47) = 0;
        BYTE8(v47) = 0;
        long long v48 = 0;
        memset(v41, 0, 41);
        long long v55 = v14;
        unint64_t v52 = 0xAAAAAAAAAAAAAA00;
        v49[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        LOBYTE(v55) = 0;
        BYTE8(v55) = 0;
        uint64_t v56 = 0;
        memset(v49, 0, 41);
        int v15 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v37, v12, (std::sub_match<const char *> *)((char *)v12 + v11), v49, 4160);
        uint64_t v16 = v50;
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v49[0].__end_ - (char *)v49[0].__begin_) >> 3);
        int64_t v19 = *(void *)&v41[8];
        uint64_t v18 = *(char **)v41;
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v41[8] - *(void *)v41) >> 3);
        if (v17 <= v20)
        {
          if (v17 < v20)
          {
            int64_t v19 = *(void *)v41 + 8 * (((char *)v49[0].__end_ - (char *)v49[0].__begin_) >> 3);
            *(void *)&v41[8] = v19;
          }
        }
        else
        {
          std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append((std::vector<std::ssub_match> *)v41, v17 - v20);
          int64_t v19 = *(void *)&v41[8];
          uint64_t v18 = *(char **)v41;
        }
        if ((char *)v19 == v18)
        {
          std::vector<std::ssub_match>::pointer begin = v49[0].__begin_;
        }
        else
        {
          uint64_t v21 = 0;
          unint64_t v22 = 0;
          std::vector<std::csub_match>::pointer end = v49[0].__end_;
          std::vector<std::ssub_match>::pointer begin = v49[0].__begin_;
          do
          {
            unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
            xpc_object_t v26 = (std::vector<std::csub_match> *)&begin[v21];
            if (v25 <= v22) {
              xpc_object_t v26 = &v49[1];
            }
            *(void *)&v18[v21 * 24] = (char *)v12 + (unint64_t)v26->__begin_ - v16;
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v49[0].__end_ - (char *)v49[0].__begin_) >> 3) <= v22) {
              p_std::vector<std::csub_match>::pointer end = &v49[1].__end_;
            }
            else {
              p_std::vector<std::csub_match>::pointer end = &v49[0].__begin_[v21].second;
            }
            *(void *)(*(void *)v41 + v21 * 24 + 8) = (char *)v12 + *p_end - v16;
            std::vector<std::csub_match>::pointer end = v49[0].__end_;
            std::vector<std::ssub_match>::pointer begin = v49[0].__begin_;
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v49[0].__end_ - (char *)v49[0].__begin_) >> 3) <= v22) {
              p_end_cap = &v49[1].__end_cap_;
            }
            else {
              p_end_cap = &v49[0].__begin_[v21].matched;
            }
            uint64_t v18 = *(char **)v41;
            *(unsigned char *)(*(void *)v41 + v21 * 24 + 16) = *p_end_cap;
            ++v22;
            ++v21;
          }
          while (v22 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v41[8] - (void)v18) >> 3));
        }
        *(void *)&v41[24] = v13;
        *(void *)&v41[32] = v13;
        int v42 = (char *)v12 + v50 - v16;
        int v43 = (char *)v12 + v51 - v16;
        LOBYTE(v44) = v52;
        v41[40] = 0;
        long long v45 = (char *)v12 + v53 - v16;
        long long v46 = (char *)v12 + v54 - v16;
        int v29 = v55;
        LOBYTE(v47) = v55;
        long long v48 = v42;
        BYTE8(v47) = BYTE8(v55);
        if (begin)
        {
          v49[0].__end_ = begin;
          operator delete(begin);
          int v29 = v47;
          uint64_t v18 = *(char **)v41;
        }
        if (v29) {
          int v30 = v15 ^ 1;
        }
        else {
          int v30 = 1;
        }
        if (v18)
        {
          *(void *)&v41[8] = v18;
          operator delete(v18);
        }
        int v31 = v15 & v30;
        if (v31) {
          int v7 = 2;
        }
        else {
          int v7 = 0;
        }
        xpc_object_t v32 = *(std::__shared_weak_count **)&v38[32];
        if (*(void *)&v38[32]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v38[32] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
          std::locale::~locale(v37);
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_60:
            operator delete(v39.__r_.__value_.__l.__data_);
            v4 |= v31;
            if ((v40[23] & 0x80000000) == 0) {
              goto LABEL_56;
            }
LABEL_55:
            operator delete(*(void **)v40);
            goto LABEL_56;
          }
        }
        else
        {
          std::locale::~locale(v37);
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_60;
          }
        }
        v4 |= v31;
        if ((v40[23] & 0x80000000) != 0) {
          goto LABEL_55;
        }
      }
      else
      {
        int v7 = 3;
        if ((v40[23] & 0x80000000) != 0) {
          goto LABEL_55;
        }
      }
LABEL_56:
      if (v7 == 3 || !v7)
      {
        v3 += 2;
        if (v3 != v35) {
          continue;
        }
      }
      return v4 & 1;
    }
  }
  LOBYTE(v4) = 0;
  return v4 & 1;
}

void sub_1A61CF66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A61CF678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,long long a52)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::locale::~locale(&a19);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    long long v55 = GetOsLogContext()[1];
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      p_p = (void **)&__p;
      if (a32 < 0) {
        p_p = __p;
      }
      *(_DWORD *)(v52 - 224) = 136315138;
      *(void *)((char *)&a52 + 4) = p_p;
      _os_log_error_impl(&dword_1A609F000, v55, OS_LOG_TYPE_ERROR, "Exception with %s", (uint8_t *)(v52 - 224), 0xCu);
    }
    __cxa_rethrow();
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(a36) < 0)
  {
    operator delete(a34);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1A61CF790);
}

void sub_1A61CF754()
{
}

void sub_1A61CF788(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1A61CF790);
  }
  __clang_call_terminate(a1);
}

void ___ZN9ResetInfo23readResetReasonPatternsEv_block_invoke()
{
  v0 = GetOsLogContext()[1];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
  {
    v41[0] = 0;
    _os_log_debug_impl(&dword_1A609F000, v0, OS_LOG_TYPE_DEBUG, "Default pattern masks will be used", (uint8_t *)v41, 2u);
  }
  uint64_t v2 = kDefaultPatternMasks;
  uint64_t v1 = qword_1EB5EEC88;
  uint64_t v3 = qword_1EB5EEC88 - kDefaultPatternMasks;
  unint64_t v4 = (qword_1EB5EEC88 - kDefaultPatternMasks) >> 5;
  uint64_t v5 = qword_1EB5EEBF0;
  uint64_t v6 = ResetInfo::sPatternMasks;
  if (v4 > (qword_1EB5EEBF0 - ResetInfo::sPatternMasks) >> 5)
  {
    if (ResetInfo::sPatternMasks)
    {
      uint64_t v7 = qword_1EB5EEBE8;
      long long v8 = (void *)ResetInfo::sPatternMasks;
      if (qword_1EB5EEBE8 != ResetInfo::sPatternMasks)
      {
        do
        {
          if (*(char *)(v7 - 9) < 0) {
            operator delete(*(void **)(v7 - 32));
          }
          v7 -= 32;
        }
        while (v7 != v6);
        long long v8 = (void *)ResetInfo::sPatternMasks;
      }
      qword_1EB5EEBE8 = v6;
      operator delete(v8);
      uint64_t v5 = 0;
      ResetInfo::sPatternMasks = 0;
      qword_1EB5EEBE8 = 0;
      qword_1EB5EEBF0 = 0;
    }
    if (v3 < 0) {
      goto LABEL_74;
    }
    uint64_t v26 = v5 >> 4;
    if (v5 >> 4 <= v4) {
      uint64_t v26 = v4;
    }
    BOOL v27 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v28 = 0x7FFFFFFFFFFFFFFLL;
    if (!v27) {
      unint64_t v28 = v26;
    }
    if (v28 >> 59) {
LABEL_74:
    }
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    uint64_t v29 = 4 * v28;
    int v30 = (void **)operator new(32 * v28);
    ResetInfo::sPatternMasks = (uint64_t)v30;
    qword_1EB5EEBE8 = (uint64_t)v30;
    qword_1EB5EEBF0 = (uint64_t)&v30[v29];
    if (v2 != v1)
    {
      unint64_t v31 = 0;
      do
      {
        xpc_object_t v33 = (std::string *)&v30[v31 / 8];
        char v34 = (long long *)(v2 + v31);
        if (*(char *)(v2 + v31 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)v34, *((void *)v34 + 1));
        }
        else
        {
          long long v32 = *v34;
          v33->__r_.__value_.__r.__words[2] = *((void *)v34 + 2);
          *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v32;
        }
        LODWORD(v30[v31 / 8 + 3]) = *(_DWORD *)(v2 + v31 + 24);
        v31 += 32;
      }
      while (v2 + v31 != v1);
      int v30 = (void **)((char *)v30 + v31);
    }
    goto LABEL_73;
  }
  unint64_t v9 = (qword_1EB5EEBE8 - ResetInfo::sPatternMasks) >> 5;
  if (v9 < v4)
  {
    uint64_t v10 = kDefaultPatternMasks + 32 * v9;
    if (qword_1EB5EEBE8 != ResetInfo::sPatternMasks)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 32 * v9;
      do
      {
        uint64_t v15 = v6 + v11;
        uint64_t v16 = (long long *)(v2 + v11);
        if (v2 != v6)
        {
          char v17 = *((unsigned char *)v16 + 23);
          if (*(char *)(v15 + 23) < 0)
          {
            if (v17 >= 0) {
              xpc_object_t v13 = (void *)(v2 + v11);
            }
            else {
              xpc_object_t v13 = *(void **)(v2 + v11);
            }
            if (v17 >= 0) {
              size_t v14 = *((unsigned __int8 *)v16 + 23);
            }
            else {
              size_t v14 = *(void *)(v2 + v11 + 8);
            }
            std::string::__assign_no_alias<false>((void **)(v6 + v11), v13, v14);
          }
          else if ((*((unsigned char *)v16 + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>((void *)(v6 + v11), *(void **)(v2 + v11), *(void *)(v2 + v11 + 8));
          }
          else
          {
            long long v18 = *v16;
            *(void *)(v15 + 16) = *((void *)v16 + 2);
            *(_OWORD *)uint64_t v15 = v18;
          }
        }
        *(_DWORD *)(v15 + 24) = *((_DWORD *)v16 + 6);
        v11 += 32;
      }
      while (v12 != v11);
      uint64_t v6 = qword_1EB5EEBE8;
    }
    size_t v35 = (void **)v6;
    if (v10 != v1)
    {
      uint64_t v36 = 0;
      do
      {
        uint64_t v38 = (std::string *)(v6 + v36);
        std::string v39 = (long long *)(v10 + v36);
        if (*(char *)(v10 + v36 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v38, *(const std::string::value_type **)v39, *((void *)v39 + 1));
        }
        else
        {
          long long v37 = *v39;
          v38->__r_.__value_.__r.__words[2] = *((void *)v39 + 2);
          *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v37;
        }
        *(_DWORD *)(v6 + v36 + 24) = *(_DWORD *)(v10 + v36 + 24);
        v36 += 32;
      }
      while (v10 + v36 != v1);
      size_t v35 = (void **)(v6 + v36);
    }
    int v30 = v35;
    goto LABEL_73;
  }
  if (kDefaultPatternMasks == qword_1EB5EEC88)
  {
    uint64_t v40 = ResetInfo::sPatternMasks;
    int v30 = (void **)qword_1EB5EEBE8;
    if (qword_1EB5EEBE8 == ResetInfo::sPatternMasks) {
      goto LABEL_73;
    }
    goto LABEL_70;
  }
  uint64_t v19 = 0;
  do
  {
    uint64_t v22 = v6 + v19;
    xpc_object_t v23 = (long long *)(v2 + v19);
    if (v2 != v6)
    {
      char v24 = *((unsigned char *)v23 + 23);
      if (*(char *)(v22 + 23) < 0)
      {
        if (v24 >= 0) {
          unint64_t v20 = (void *)(v2 + v19);
        }
        else {
          unint64_t v20 = *(void **)(v2 + v19);
        }
        if (v24 >= 0) {
          size_t v21 = *((unsigned __int8 *)v23 + 23);
        }
        else {
          size_t v21 = *(void *)(v2 + v19 + 8);
        }
        std::string::__assign_no_alias<false>((void **)(v6 + v19), v20, v21);
      }
      else if ((*((unsigned char *)v23 + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>((void *)(v6 + v19), *(void **)(v2 + v19), *(void *)(v2 + v19 + 8));
      }
      else
      {
        long long v25 = *v23;
        *(void *)(v22 + 16) = *((void *)v23 + 2);
        *(_OWORD *)uint64_t v22 = v25;
      }
    }
    *(_DWORD *)(v22 + 24) = *((_DWORD *)v23 + 6);
    v19 += 32;
  }
  while (v2 + v19 != v1);
  uint64_t v40 = v6 + v19;
  int v30 = (void **)qword_1EB5EEBE8;
  if (qword_1EB5EEBE8 != v40)
  {
    do
    {
LABEL_70:
      if (*((char *)v30 - 9) < 0) {
        operator delete(*(v30 - 4));
      }
      v30 -= 4;
    }
    while (v30 != (void **)v40);
    int v30 = (void **)v40;
  }
LABEL_73:
  qword_1EB5EEBE8 = (uint64_t)v30;
}

void ***std::__exception_guard_exceptions<std::vector<ResetInfo::RegexPatternAndReasonMask>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      unint64_t v4 = (void **)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 9) < 0) {
            operator delete(*(v4 - 4));
          }
          v4 -= 4;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t _GLOBAL__sub_I_ResetInfo_cpp()
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &ResetInfo::sPatternMasks, &dword_1A609F000);
  char v6 = 15;
  strcpy((char *)v5, ".*\\[abmtool\\].*");
  v7[0] = 1;
  char v9 = 14;
  strcpy((char *)v8, ".*\\[bbutil\\].*");
  int v10 = 1;
  uint64_t v11 = operator new(0x50uLL);
  long long v12 = xmmword_1A61FC1F0;
  strcpy((char *)v11, ".*AP forced coredump via SPMI - Please analyze reason from AP perspective.*");
  int v13 = 1;
  size_t v14 = operator new(0x19uLL);
  long long v15 = xmmword_1A61F7590;
  strcpy((char *)v14, ".*(after OTASP/OTAPA).*");
  int v16 = 1;
  char v17 = operator new(0x38uLL);
  long long v18 = xmmword_1A61FC200;
  strcpy((char *)v17, ".*Carrier bundle updated settings that require reset");
  int v19 = 1;
  unint64_t v20 = operator new(0x28uLL);
  long long v21 = xmmword_1A61F7FF0;
  strcpy((char *)v20, ".*Manually Triggering BB Core Dump");
  int v22 = 1;
  xpc_object_t v23 = operator new(0x28uLL);
  long long v24 = xmmword_1A61F71C0;
  strcpy((char *)v23, ".*modem manager triggered reset.*");
  int v25 = 1;
  uint64_t v26 = operator new(0x38uLL);
  long long v27 = xmmword_1A61F9770;
  strcpy((char *)v26, ".*User requested to change Baseband field test config");
  int v28 = 1;
  uint64_t v29 = operator new(0x28uLL);
  uint64_t v30 = 33;
  unint64_t v31 = 0x8000000000000028;
  strcpy((char *)v29, ".*applebbproxy setup AT interface");
  int v32 = 1;
  xpc_object_t v33 = operator new(0x28uLL);
  uint64_t v34 = 36;
  unint64_t v35 = 0x8000000000000028;
  strcpy((char *)v33, ".*Resetting Baseband after restore.*");
  int v36 = 1;
  long long v37 = operator new(0x30uLL);
  uint64_t v38 = 42;
  unint64_t v39 = 0x8000000000000030;
  strcpy((char *)v37, ".*Resetting baseband after pushing files.*");
  int v40 = 1;
  uint64_t v41 = operator new(0x40uLL);
  uint64_t v42 = 59;
  unint64_t v43 = 0x8000000000000040;
  strcpy((char *)v41, ".*Resetting Baseband after successful restore of carrier NV");
  int v44 = 1;
  long long v45 = operator new(0x30uLL);
  uint64_t v46 = 41;
  unint64_t v47 = 0x8000000000000030;
  strcpy((char *)v45, ".*Resetting modem from WirelessAutomation");
  int v48 = 1;
  long long v49 = operator new(0x20uLL);
  uint64_t v50 = 25;
  unint64_t v51 = 0x8000000000000020;
  strcpy((char *)v49, ".*Requesting Soft Reset.*");
  int v52 = 1;
  uint64_t v53 = operator new(0x30uLL);
  uint64_t v54 = 42;
  unint64_t v55 = 0x8000000000000030;
  strcpy((char *)v53, ".*AP-triggered((?!: locationd PDS).*|(.*))");
  int v56 = 1;
  unint64_t v59 = 0x8000000000000038;
  uint64_t v57 = operator new(0x38uLL);
  uint64_t v58 = 50;
  strcpy((char *)v57, ".*User ((requested state)|(Triggered Core))dump.*");
  int v60 = 1;
  HIBYTE(v61[2]) = 19;
  strcpy((char *)v61, ".*SIM APNs change.*");
  int v62 = 1;
  xpc_object_t v63 = operator new(0x28uLL);
  unint64_t v65 = 0x8000000000000028;
  uint64_t v64 = 34;
  strcpy((char *)v63, ".*AttachAPN Push to force detach.*");
  int v66 = 1;
  char v68 = 14;
  strcpy((char *)v67, ".*CSIM reset.*");
  int v69 = 1;
  std::string __p = operator new(0x20uLL);
  unint64_t v72 = 0x8000000000000020;
  uint64_t v71 = 25;
  strcpy((char *)__p, ".*com\\.apple\\.symptomsd.*");
  int v73 = 1;
  qword_1EB5EEC88 = 0;
  qword_1EB5EEC90 = 0;
  kDefaultPatternMasks = 0;
  v0 = (char *)operator new(0x280uLL);
  unint64_t v1 = 0;
  kDefaultPatternMasks = (uint64_t)v0;
  qword_1EB5EEC88 = (uint64_t)v0;
  qword_1EB5EEC90 = (uint64_t)(v0 + 640);
  do
  {
    uint64_t v2 = (std::string *)&v0[v1 * 4];
    uint64_t v3 = &v5[v1 / 2];
    if (*(&v6 + v1 * 4) < 0)
    {
      std::string::__init_copy_ctor_external(v2, (const std::string::value_type *)*v3, (std::string::size_type)v3[1]);
    }
    else
    {
      *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)v3;
      v2->__r_.__value_.__r.__words[2] = (std::string::size_type)v3[2];
    }
    *(_DWORD *)&v0[v1 * 4 + 24] = v7[v1];
    v1 += 8;
  }
  while (v1 != 160);
  qword_1EB5EEC88 = (uint64_t)(v0 + 640);
  if (SHIBYTE(v72) < 0)
  {
    operator delete(__p);
    if ((v68 & 0x80000000) == 0)
    {
LABEL_8:
      if ((SHIBYTE(v65) & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_31;
    }
  }
  else if ((v68 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v67[0]);
  if ((SHIBYTE(v65) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v63);
  if ((SHIBYTE(v61[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v59) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(v61[0]);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v55) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v57);
  if ((SHIBYTE(v55) & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v51) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v53);
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v47) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v49);
  if ((SHIBYTE(v47) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SHIBYTE(v43) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v45);
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v39) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v41);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v35) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v37);
  if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v31) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v33);
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v27) & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v29);
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v24) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v26);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
LABEL_20:
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v23);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v20);
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_45;
  }
LABEL_44:
  operator delete(v17);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_23:
    if ((SHIBYTE(v12) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v14);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
LABEL_24:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_25;
    }
LABEL_47:
    operator delete(v8[0]);
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_48;
  }
LABEL_46:
  operator delete(v11);
  if (v9 < 0) {
    goto LABEL_47;
  }
LABEL_25:
  if ((v6 & 0x80000000) == 0) {
    goto LABEL_26;
  }
LABEL_48:
  operator delete(v5[0]);
LABEL_26:

  return __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &kDefaultPatternMasks, &dword_1A609F000);
}

void sub_1A61D0448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  std::__exception_guard_exceptions<std::vector<ResetInfo::RegexPatternAndReasonMask>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a10);
  if (SLOBYTE(STACK[0x28F]) < 0)
  {
    operator delete((void *)STACK[0x278]);
    if ((SLOBYTE(STACK[0x26F]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else if ((SLOBYTE(STACK[0x26F]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x258]);
  if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete((void *)STACK[0x238]);
  if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x218]);
  if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
  {
LABEL_6:
    if ((a84 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(a85);
  if ((a84 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a82 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete(a83);
  if ((a82 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a80 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(a81);
  if ((a80 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a78 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(a79);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a76 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(a77);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a74 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(a75);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a72 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(a73);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a66 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(a68);
  if ((a66 & 0x80000000) == 0)
  {
LABEL_14:
    if ((a59 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(a61);
  if ((a59 & 0x80000000) == 0)
  {
LABEL_15:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(a54);
  if ((a52 & 0x80000000) == 0)
  {
LABEL_16:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(a47);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_17:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_18:
    if ((a31 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(a33);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_19:
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(a26);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_20:
    if ((a17 & 0x80000000) == 0) {
LABEL_42:
    }
      _Unwind_Resume(a1);
LABEL_41:
    operator delete(a12);
    _Unwind_Resume(a1);
  }
LABEL_40:
  operator delete(a19);
  if ((a17 & 0x80000000) == 0) {
    goto LABEL_42;
  }
  goto LABEL_41;
}

char *ssctl::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, void **a3)
{
  uint64_t v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  unsigned int v6 = *(unsigned __int8 *)v5;
  uint64_t v5 = (tlv *)((char *)v5 + 1);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, (uint64_t)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

{
  tlv *v5;
  unsigned int v6;

  uint64_t v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  unsigned int v6 = *(unsigned __int16 *)v5;
  uint64_t v5 = (tlv *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, (uint64_t)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

unsigned char *ssctl::tlv::abm::writeField(unsigned char *a1, unsigned char *a2)
{
  uint64_t v2 = a2;
  LOBYTE(v3) = a2[23];
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *((void *)a2 + 1);
  }
  *a1 = v3;
  unint64_t v4 = a1 + 1;
  size_t v5 = *((void *)a2 + 1);
  if ((char)a2[23] >= 0)
  {
    size_t v6 = a2[23];
  }
  else
  {
    a2 = *(unsigned char **)a2;
    size_t v6 = v5;
  }
  memcpy(a1 + 1, a2, v6);
  uint64_t v7 = v2[23];
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)v2 + 1);
  }
  return &v4[v7];
}

uint64_t ssctl::tlv::abm::getFieldSize(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  return v1 + 1;
}

{
  uint64_t v1;

  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  return v1 + 2;
}

void tlv::parseV<ssctl::tlv::abm::ErrorMessage>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  size_t v5 = *a1;
  size_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  unsigned int v7 = *(unsigned __int8 *)v5;
  size_t v5 = (tlv *)((char *)v5 + 1);
  tlv::throwIfNotEnoughBytes(v5, v6, (const unsigned __int8 *)v7);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>((void **)a3, (uint64_t)v5, (char *)v5 + v7, v7);
  *a1 = (tlv *)((char *)v5 + v7);
}

void sub_1A61D0818(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A61D0804);
}

void sub_1A61D0828(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<ssctl::tlv::abm::ErrorMessage>(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  return v1 + 4;
}

void *tlv::writeV<ssctl::tlv::abm::ErrorMessage>(unsigned char **a1, unsigned char *a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = *a1;
  LOBYTE(v5) = a2[23];
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)a2 + 1);
  }
  unsigned char *v4 = v5;
  size_t v6 = v4 + 1;
  size_t v7 = *((void *)a2 + 1);
  if ((char)a2[23] >= 0)
  {
    size_t v8 = a2[23];
  }
  else
  {
    a2 = *(unsigned char **)a2;
    size_t v8 = v7;
  }
  uint64_t result = memcpy(v6, a2, v8);
  uint64_t v10 = v2[23];
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *((void *)v2 + 1);
  }
  *a1 = &v6[v10];
  return result;
}

char *ssctl::tlv::abm::writeField(_WORD *a1, void *a2)
{
  uint64_t v2 = a2;
  LOWORD(v3) = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = a2[1];
  }
  *a1 = v3;
  unint64_t v4 = a1 + 1;
  size_t v5 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (void *)*a2;
    size_t v6 = v5;
  }
  memcpy(a1 + 1, a2, v6);
  uint64_t v7 = *((unsigned __int8 *)v2 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = v2[1];
  }
  return (char *)v4 + v7;
}

void tlv::parseV<ssctl::tlv::abm::ExtendedErrorMessage>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  size_t v5 = *a1;
  size_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2);
  unsigned int v7 = *(unsigned __int16 *)v5;
  size_t v5 = (tlv *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes(v5, v6, (const unsigned __int8 *)v7);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>((void **)a3, (uint64_t)v5, (char *)v5 + v7, v7);
  *a1 = (tlv *)((char *)v5 + v7);
}

void sub_1A61D0A60(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A61D0A4CLL);
}

void sub_1A61D0A70(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<ssctl::tlv::abm::ExtendedErrorMessage>(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  return v1 + 5;
}

void *tlv::writeV<ssctl::tlv::abm::ExtendedErrorMessage>(_WORD **a1, void *a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = *a1;
  LOWORD(v5) = *((unsigned __int8 *)a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = a2[1];
  }
  _WORD *v4 = v5;
  size_t v6 = (char *)(v4 + 1);
  size_t v7 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (void *)*a2;
    size_t v8 = v7;
  }
  uint64_t result = memcpy(v6, a2, v8);
  uint64_t v10 = *((unsigned __int8 *)v2 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = v2[1];
  }
  *a1 = &v6[v10];
  return result;
}

tlv *ssctl::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 >= (tlv *)a2) {
    return a1;
  }
  do
  {
    uint64_t v11 = *(void **)(a3 + 8);
    if ((unint64_t)v11 >= *(void *)(a3 + 16))
    {
      size_t v6 = std::vector<ssctl::tlv::abm::ErrorMessage>::__emplace_back_slow_path<>((void **)a3);
    }
    else
    {
      void *v11 = 0;
      v11[1] = 0;
      size_t v6 = v11 + 3;
      v11[2] = 0;
    }
    *(void *)(a3 + 8) = v6;
    size_t v7 = (void **)(v6 - 3);
    tlv::throwIfNotEnoughBytes(v3, a2, (const unsigned __int8 *)1);
    unsigned int v9 = *(unsigned __int8 *)v3;
    size_t v8 = (tlv *)((char *)v3 + 1);
    tlv::throwIfNotEnoughBytes(v8, a2, (const unsigned __int8 *)v9);
    std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(v7, (uint64_t)v8, (char *)v8 + v9, v9);
    uint64_t v3 = (tlv *)((char *)v8 + v9);
    uint64_t v10 = v3;
  }
  while (v3 < (tlv *)a2);
  return v10;
}

{
  tlv *v3;
  void *v6;
  void **v7;
  tlv *v8;
  unsigned int v9;
  tlv *v10;
  void *v11;

  uint64_t v3 = a1;
  if (a1 >= (tlv *)a2) {
    return a1;
  }
  do
  {
    uint64_t v11 = *(void **)(a3 + 8);
    if ((unint64_t)v11 >= *(void *)(a3 + 16))
    {
      size_t v6 = std::vector<ssctl::tlv::abm::ErrorMessage>::__emplace_back_slow_path<>((void **)a3);
    }
    else
    {
      void *v11 = 0;
      v11[1] = 0;
      size_t v6 = v11 + 3;
      v11[2] = 0;
    }
    *(void *)(a3 + 8) = v6;
    size_t v7 = (void **)(v6 - 3);
    tlv::throwIfNotEnoughBytes(v3, a2, (const unsigned __int8 *)2);
    unsigned int v9 = *(unsigned __int16 *)v3;
    size_t v8 = (tlv *)((char *)v3 + 2);
    tlv::throwIfNotEnoughBytes(v8, a2, (const unsigned __int8 *)v9);
    std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(v7, (uint64_t)v8, (char *)v8 + v9, v9);
    uint64_t v3 = (tlv *)((char *)v8 + v9);
    uint64_t v10 = v3;
  }
  while (v3 < (tlv *)a2);
  return v10;
}

char *ssctl::tlv::abm::writeField(char *a1, const void ***a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      LOBYTE(v5) = *((unsigned char *)v3 + 23);
      if ((char)v5 < 0) {
        uint64_t v5 = v3[1];
      }
      *a1 = (char)v5;
      size_t v6 = a1 + 1;
      int v7 = *((char *)v3 + 23);
      if (v7 >= 0) {
        size_t v8 = v3;
      }
      else {
        size_t v8 = *v3;
      }
      if (v7 >= 0) {
        size_t v9 = *((unsigned __int8 *)v3 + 23);
      }
      else {
        size_t v9 = (size_t)v3[1];
      }
      memcpy(v6, v8, v9);
      uint64_t v10 = (char *)*((unsigned __int8 *)v3 + 23);
      if ((char)v10 < 0) {
        uint64_t v10 = (char *)v3[1];
      }
      a1 = &v10[(void)v6];
      v3 += 3;
    }
    while (v3 != v4);
  }
  return a1;
}

{
  const void **v3;
  const void **v4;
  const void *v5;
  char *v6;
  int v7;
  const void *v8;
  size_t v9;
  char *v10;

  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      LOWORD(v5) = *((unsigned __int8 *)v3 + 23);
      if ((char)v5 < 0) {
        uint64_t v5 = v3[1];
      }
      *(_WORD *)a1 = (_WORD)v5;
      size_t v6 = a1 + 2;
      int v7 = *((char *)v3 + 23);
      if (v7 >= 0) {
        size_t v8 = v3;
      }
      else {
        size_t v8 = *v3;
      }
      if (v7 >= 0) {
        size_t v9 = *((unsigned __int8 *)v3 + 23);
      }
      else {
        size_t v9 = (size_t)v3[1];
      }
      memcpy(v6, v8, v9);
      uint64_t v10 = (char *)*((unsigned __int8 *)v3 + 23);
      if ((char)v10 < 0) {
        uint64_t v10 = (char *)v3[1];
      }
      a1 = &v10[(void)v6];
      v3 += 3;
    }
    while (v3 != v4);
  }
  return a1;
}

uint64_t ssctl::tlv::abm::getFieldSize(uint64_t *a1, double a2, double a3, double a4, int64x2_t a5, double a6, int8x16_t a7)
{
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 == v7) {
    return 0;
  }
  unint64_t v9 = v7 - v8 - 24;
  if (v9 >= 0x60)
  {
    unint64_t v12 = v9 / 0x18 + 1;
    uint64_t v13 = v12 & 3;
    if ((v12 & 3) == 0) {
      uint64_t v13 = 4;
    }
    unint64_t v14 = v12 - v13;
    uint64_t v11 = v8 + 24 * v14;
    long long v15 = (unsigned __int8 *)(v8 + 47);
    int64x2_t v16 = 0uLL;
    v17.i64[0] = 255;
    v17.i64[1] = 255;
    int64x2_t v18 = 0uLL;
    do
    {
      a5.i8[0] = *(v15 - 24);
      a5.i8[4] = *v15;
      a7.i8[0] = v15[24];
      a7.i8[4] = v15[48];
      int32x2_t v19 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a5.i8, 0x18uLL), 0x18uLL));
      v20.i64[0] = v19.i32[0];
      v20.i64[1] = v19.i32[1];
      int8x16_t v21 = v20;
      int v22 = (const double *)(v15 - 39);
      xpc_object_t v23 = (const double *)(v15 + 9);
      unsigned long long v24 = (unsigned __int128)vld3q_f64(v22);
      unsigned long long v25 = (unsigned __int128)vld3q_f64(v23);
      int32x2_t v26 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a7.i8, 0x18uLL), 0x18uLL));
      v20.i64[0] = v26.i32[0];
      v20.i64[1] = v26.i32[1];
      int8x16_t v27 = v20;
      v20.i64[0] = a5.u32[0];
      v20.i64[1] = a5.u32[1];
      int8x16_t v28 = vbicq_s8(v20, v21);
      v20.i64[0] = a7.u32[0];
      v20.i64[1] = a7.u32[1];
      a5 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v24, v21), vandq_s8(v28, v17));
      a7 = vandq_s8((int8x16_t)v25, v27);
      int64x2_t v16 = vsubq_s64(a5, (int64x2_t)vmvnq_s8((int8x16_t)v16));
      int64x2_t v18 = vsubq_s64((int64x2_t)vorrq_s8(a7, vandq_s8(vbicq_s8(v20, v27), v17)), (int64x2_t)vmvnq_s8((int8x16_t)v18));
      v15 += 96;
      v14 -= 4;
    }
    while (v14);
    uint64_t result = vaddvq_s64(vaddq_s64(v18, v16));
  }
  else
  {
    uint64_t result = 0;
    uint64_t v11 = v8;
  }
  do
  {
    uint64_t v29 = *(unsigned __int8 *)(v11 + 23);
    if ((v29 & 0x80u) != 0) {
      uint64_t v29 = *(void *)(v11 + 8);
    }
    result += v29 + 1;
    v11 += 24;
  }
  while (v11 != v7);
  return result;
}

void tlv::parseV<ssctl::tlv::abm::ErrorMessages>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unint64_t v4 = *a1;
  if (a2 < 1)
  {
    *a1 = v4;
  }
  else
  {
    size_t v6 = (const unsigned __int8 *)v4 + a2;
    do
    {
      uint64_t v7 = *(void **)(a3 + 8);
      if ((unint64_t)v7 >= *(void *)(a3 + 16))
      {
        uint64_t v8 = (void **)std::vector<ssctl::tlv::abm::ErrorMessage>::__emplace_back_slow_path<>((void **)a3);
      }
      else
      {
        *uint64_t v7 = 0;
        v7[1] = 0;
        uint64_t v8 = (void **)(v7 + 3);
        _DWORD v7[2] = 0;
      }
      *(void *)(a3 + 8) = v8;
      tlv::throwIfNotEnoughBytes(v4, v6, (const unsigned __int8 *)1);
      unsigned int v10 = *(unsigned __int8 *)v4;
      unint64_t v9 = (tlv *)((char *)v4 + 1);
      tlv::throwIfNotEnoughBytes(v9, v6, (const unsigned __int8 *)v10);
      std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(v8 - 3, (uint64_t)v9, (char *)v9 + v10, v10);
      unint64_t v4 = (tlv *)((char *)v9 + v10);
    }
    while (v4 < (tlv *)v6);
    *a1 = v4;
  }
}

void sub_1A61D0E90(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A61D0E64);
}

void sub_1A61D0EA0(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t tlv::size<ssctl::tlv::abm::ErrorMessages>(uint64_t *a1, double a2, double a3, double a4, int64x2_t a5, double a6, int8x16_t a7)
{
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 == v7) {
    return 3;
  }
  unint64_t v9 = v7 - v8 - 24;
  if (v9 >= 0x60)
  {
    unint64_t v13 = v9 / 0x18 + 1;
    uint64_t v14 = v13 & 3;
    if ((v13 & 3) == 0) {
      uint64_t v14 = 4;
    }
    unint64_t v15 = v13 - v14;
    uint64_t v11 = v8 + 24 * v15;
    int64x2_t v16 = (unsigned __int8 *)(v8 + 47);
    int64x2_t v17 = 0uLL;
    v18.i64[0] = 255;
    v18.i64[1] = 255;
    int64x2_t v19 = 0uLL;
    do
    {
      a5.i8[0] = *(v16 - 24);
      a5.i8[4] = *v16;
      a7.i8[0] = v16[24];
      a7.i8[4] = v16[48];
      int32x2_t v20 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a5.i8, 0x18uLL), 0x18uLL));
      v21.i64[0] = v20.i32[0];
      v21.i64[1] = v20.i32[1];
      int8x16_t v22 = v21;
      xpc_object_t v23 = (const double *)(v16 - 39);
      unsigned long long v24 = (const double *)(v16 + 9);
      unsigned long long v25 = (unsigned __int128)vld3q_f64(v23);
      unsigned long long v26 = (unsigned __int128)vld3q_f64(v24);
      int32x2_t v27 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a7.i8, 0x18uLL), 0x18uLL));
      v21.i64[0] = v27.i32[0];
      v21.i64[1] = v27.i32[1];
      int8x16_t v28 = v21;
      v21.i64[0] = a5.u32[0];
      v21.i64[1] = a5.u32[1];
      int8x16_t v29 = vbicq_s8(v21, v22);
      v21.i64[0] = a7.u32[0];
      v21.i64[1] = a7.u32[1];
      a5 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v25, v22), vandq_s8(v29, v18));
      a7 = vandq_s8((int8x16_t)v26, v28);
      int64x2_t v17 = vsubq_s64(a5, (int64x2_t)vmvnq_s8((int8x16_t)v17));
      int64x2_t v19 = vsubq_s64((int64x2_t)vorrq_s8(a7, vandq_s8(vbicq_s8(v21, v28), v18)), (int64x2_t)vmvnq_s8((int8x16_t)v19));
      v16 += 96;
      v15 -= 4;
    }
    while (v15);
    uint64_t v10 = vaddvq_s64(vaddq_s64(v19, v17));
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a1;
  }
  do
  {
    uint64_t v30 = *(unsigned __int8 *)(v11 + 23);
    if ((v30 & 0x80u) != 0) {
      uint64_t v30 = *(void *)(v11 + 8);
    }
    v10 += v30 + 1;
    v11 += 24;
  }
  while (v11 != v7);
  return v10 + 3;
}

char **tlv::writeV<ssctl::tlv::abm::ErrorMessages>(char **result, const void ***a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *result;
  unint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      LOBYTE(v6) = *((unsigned char *)v4 + 23);
      if ((char)v6 < 0) {
        size_t v6 = v4[1];
      }
      *uint64_t v3 = (char)v6;
      uint64_t v7 = v3 + 1;
      int v8 = *((char *)v4 + 23);
      if (v8 >= 0) {
        unint64_t v9 = v4;
      }
      else {
        unint64_t v9 = *v4;
      }
      if (v8 >= 0) {
        size_t v10 = *((unsigned __int8 *)v4 + 23);
      }
      else {
        size_t v10 = (size_t)v4[1];
      }
      uint64_t result = (char **)memcpy(v7, v9, v10);
      uint64_t v11 = (char *)*((unsigned __int8 *)v4 + 23);
      if ((char)v11 < 0) {
        uint64_t v11 = (char *)v4[1];
      }
      uint64_t v3 = &v11[(void)v7];
      v4 += 3;
    }
    while (v4 != v5);
  }
  *uint64_t v2 = v3;
  return result;
}

uint64_t ssctl::tlv::abm::getFieldSize(uint64_t *a1, double a2, double a3, double a4, double a5, int64x2_t a6, double a7, int8x16_t a8)
{
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  if (*a1 == v8) {
    return 0;
  }
  unint64_t v10 = v8 - v9 - 24;
  if (v10 >= 0x60)
  {
    unint64_t v13 = v10 / 0x18 + 1;
    uint64_t v14 = v13 & 3;
    if ((v13 & 3) == 0) {
      uint64_t v14 = 4;
    }
    unint64_t v15 = v13 - v14;
    uint64_t v12 = v9 + 24 * v15;
    int64x2_t v16 = (unsigned __int8 *)(v9 + 47);
    int64x2_t v17 = 0uLL;
    v18.i64[0] = 255;
    v18.i64[1] = 255;
    int64x2_t v19 = vdupq_n_s64(2uLL);
    int64x2_t v20 = 0uLL;
    do
    {
      a6.i8[0] = *(v16 - 24);
      a6.i8[4] = *v16;
      a8.i8[0] = v16[24];
      a8.i8[4] = v16[48];
      int32x2_t v21 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a6.i8, 0x18uLL), 0x18uLL));
      v22.i64[0] = v21.i32[0];
      v22.i64[1] = v21.i32[1];
      int8x16_t v23 = v22;
      unsigned long long v24 = (const double *)(v16 - 39);
      unsigned long long v25 = (const double *)(v16 + 9);
      unsigned long long v26 = (unsigned __int128)vld3q_f64(v24);
      unsigned long long v27 = (unsigned __int128)vld3q_f64(v25);
      int32x2_t v28 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a8.i8, 0x18uLL), 0x18uLL));
      v22.i64[0] = v28.i32[0];
      v22.i64[1] = v28.i32[1];
      int8x16_t v29 = v22;
      v22.i64[0] = a6.u32[0];
      v22.i64[1] = a6.u32[1];
      int8x16_t v30 = vbicq_s8(v22, v23);
      v22.i64[0] = a8.u32[0];
      v22.i64[1] = a8.u32[1];
      a6 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v26, v23), vandq_s8(v30, v18));
      a8 = vandq_s8((int8x16_t)v27, v29);
      int64x2_t v17 = vaddq_s64(vaddq_s64(v17, v19), a6);
      int64x2_t v20 = vaddq_s64(vaddq_s64(v20, v19), (int64x2_t)vorrq_s8(a8, vandq_s8(vbicq_s8(v22, v29), v18)));
      v16 += 96;
      v15 -= 4;
    }
    while (v15);
    uint64_t result = vaddvq_s64(vaddq_s64(v20, v17));
  }
  else
  {
    uint64_t result = 0;
    uint64_t v12 = v9;
  }
  do
  {
    uint64_t v31 = *(unsigned __int8 *)(v12 + 23);
    if ((v31 & 0x80u) != 0) {
      uint64_t v31 = *(void *)(v12 + 8);
    }
    result += v31 + 2;
    v12 += 24;
  }
  while (v12 != v8);
  return result;
}

void tlv::parseV<ssctl::tlv::abm::ExtendedErrorMessages>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unint64_t v4 = *a1;
  if (a2 < 1)
  {
    *a1 = v4;
  }
  else
  {
    size_t v6 = (const unsigned __int8 *)v4 + a2;
    do
    {
      uint64_t v7 = *(void **)(a3 + 8);
      if ((unint64_t)v7 >= *(void *)(a3 + 16))
      {
        uint64_t v8 = (void **)std::vector<ssctl::tlv::abm::ErrorMessage>::__emplace_back_slow_path<>((void **)a3);
      }
      else
      {
        *uint64_t v7 = 0;
        v7[1] = 0;
        uint64_t v8 = (void **)(v7 + 3);
        _DWORD v7[2] = 0;
      }
      *(void *)(a3 + 8) = v8;
      tlv::throwIfNotEnoughBytes(v4, v6, (const unsigned __int8 *)2);
      unsigned int v10 = *(unsigned __int16 *)v4;
      uint64_t v9 = (tlv *)((char *)v4 + 2);
      tlv::throwIfNotEnoughBytes(v9, v6, (const unsigned __int8 *)v10);
      std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(v8 - 3, (uint64_t)v9, (char *)v9 + v10, v10);
      unint64_t v4 = (tlv *)((char *)v9 + v10);
    }
    while (v4 < (tlv *)v6);
    *a1 = v4;
  }
}

void sub_1A61D13F0(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A61D13C4);
}

void sub_1A61D1400(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t tlv::size<ssctl::tlv::abm::ExtendedErrorMessages>(uint64_t *a1, double a2, double a3, double a4, double a5, int64x2_t a6, double a7, int8x16_t a8)
{
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  if (*a1 == v8) {
    return 3;
  }
  unint64_t v10 = v8 - v9 - 24;
  if (v10 >= 0x60)
  {
    unint64_t v14 = v10 / 0x18 + 1;
    uint64_t v15 = v14 & 3;
    if ((v14 & 3) == 0) {
      uint64_t v15 = 4;
    }
    unint64_t v16 = v14 - v15;
    uint64_t v12 = v9 + 24 * v16;
    int64x2_t v17 = (unsigned __int8 *)(v9 + 47);
    int64x2_t v18 = 0uLL;
    v19.i64[0] = 255;
    v19.i64[1] = 255;
    int64x2_t v20 = vdupq_n_s64(2uLL);
    int64x2_t v21 = 0uLL;
    do
    {
      a6.i8[0] = *(v17 - 24);
      a6.i8[4] = *v17;
      a8.i8[0] = v17[24];
      a8.i8[4] = v17[48];
      int32x2_t v22 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a6.i8, 0x18uLL), 0x18uLL));
      v23.i64[0] = v22.i32[0];
      v23.i64[1] = v22.i32[1];
      int8x16_t v24 = v23;
      unsigned long long v25 = (const double *)(v17 - 39);
      unsigned long long v26 = (const double *)(v17 + 9);
      unsigned long long v27 = (unsigned __int128)vld3q_f64(v25);
      unsigned long long v28 = (unsigned __int128)vld3q_f64(v26);
      int32x2_t v29 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a8.i8, 0x18uLL), 0x18uLL));
      v23.i64[0] = v29.i32[0];
      v23.i64[1] = v29.i32[1];
      int8x16_t v30 = v23;
      v23.i64[0] = a6.u32[0];
      v23.i64[1] = a6.u32[1];
      int8x16_t v31 = vbicq_s8(v23, v24);
      v23.i64[0] = a8.u32[0];
      v23.i64[1] = a8.u32[1];
      a6 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v27, v24), vandq_s8(v31, v19));
      a8 = vandq_s8((int8x16_t)v28, v30);
      int64x2_t v18 = vaddq_s64(vaddq_s64(v18, v20), a6);
      int64x2_t v21 = vaddq_s64(vaddq_s64(v21, v20), (int64x2_t)vorrq_s8(a8, vandq_s8(vbicq_s8(v23, v30), v19)));
      v17 += 96;
      v16 -= 4;
    }
    while (v16);
    uint64_t v11 = vaddvq_s64(vaddq_s64(v21, v18));
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a1;
  }
  do
  {
    uint64_t v32 = *(unsigned __int8 *)(v12 + 23);
    if ((v32 & 0x80u) != 0) {
      uint64_t v32 = *(void *)(v12 + 8);
    }
    v11 += v32 + 2;
    v12 += 24;
  }
  while (v12 != v8);
  return v11 + 3;
}

char **tlv::writeV<ssctl::tlv::abm::ExtendedErrorMessages>(char **result, const void ***a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *result;
  unint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      LOWORD(v6) = *((unsigned __int8 *)v4 + 23);
      if ((char)v6 < 0) {
        size_t v6 = v4[1];
      }
      *(_WORD *)uint64_t v3 = (_WORD)v6;
      uint64_t v7 = v3 + 2;
      int v8 = *((char *)v4 + 23);
      if (v8 >= 0) {
        uint64_t v9 = v4;
      }
      else {
        uint64_t v9 = *v4;
      }
      if (v8 >= 0) {
        size_t v10 = *((unsigned __int8 *)v4 + 23);
      }
      else {
        size_t v10 = (size_t)v4[1];
      }
      uint64_t result = (char **)memcpy(v7, v9, v10);
      uint64_t v11 = (char *)*((unsigned __int8 *)v4 + 23);
      if ((char)v11 < 0) {
        uint64_t v11 = (char *)v4[1];
      }
      uint64_t v3 = &v11[(void)v7];
      v4 += 3;
    }
    while (v4 != v5);
  }
  *uint64_t v2 = v3;
  return result;
}

void std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(void **a1, uint64_t a2, char *a3, unint64_t a4)
{
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    int v8 = (char *)a1;
    if (a4 <= 0x16) {
      goto LABEL_17;
    }
    unint64_t v9 = 22;
    size_t v10 = a1;
    goto LABEL_7;
  }
  unint64_t v11 = (unint64_t)a1[2];
  unint64_t v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (a4 > v9)
  {
    if (0x7FFFFFFFFFFFFFF8 - (v11 & 0x7FFFFFFFFFFFFFFFLL) < a4 - v9) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v10 = *a1;
LABEL_7:
    unint64_t v12 = 2 * v9;
    if (a4 > 2 * v9) {
      unint64_t v12 = a4;
    }
    uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v13 = v12 | 7;
    }
    if (v12 >= 0x17) {
      size_t v14 = v13 + 1;
    }
    else {
      size_t v14 = 23;
    }
    int v8 = (char *)operator new(v14);
    if (v9 != 22) {
      operator delete(v10);
    }
    a1[1] = 0;
    a1[2] = (void *)(v14 | 0x8000000000000000);
    *a1 = v8;
    goto LABEL_17;
  }
  int v8 = (char *)a1;
  if ((v11 & 0x8000000000000000) != 0) {
    int v8 = (char *)*a1;
  }
LABEL_17:
  if ((char *)a2 == a3)
  {
    unint64_t v16 = v8;
  }
  else
  {
    unint64_t v15 = (unint64_t)&a3[-a2];
    if ((unint64_t)&a3[-a2] < 0x20 || (unint64_t)&v8[-a2] < 0x20)
    {
      unint64_t v16 = v8;
      int64x2_t v17 = (char *)a2;
    }
    else
    {
      unint64_t v16 = &v8[v15 & 0xFFFFFFFFFFFFFFE0];
      int64x2_t v17 = (char *)(a2 + (v15 & 0xFFFFFFFFFFFFFFE0));
      int64x2_t v18 = (long long *)(a2 + 16);
      int8x16_t v19 = v8 + 16;
      unint64_t v20 = v15 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v21 = *v18;
        *(v19 - 1) = *(v18 - 1);
        *int8x16_t v19 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 32;
      }
      while (v20);
      if (v15 == (v15 & 0xFFFFFFFFFFFFFFE0)) {
        goto LABEL_27;
      }
    }
    do
    {
      char v22 = *v17++;
      *v16++ = v22;
    }
    while (v17 != a3);
  }
LABEL_27:
  char *v16 = 0;
  if (*((char *)a1 + 23) < 0) {
    a1[1] = (void *)a4;
  }
  else {
    *((unsigned char *)a1 + 23) = a4 & 0x7F;
  }
}

void *std::vector<ssctl::tlv::abm::ErrorMessage>::__emplace_back_slow_path<>(void **a1)
{
  uint64_t v2 = (void **)*a1;
  uint64_t v1 = (void **)a1[1];
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1 - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)v2) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)v2) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)v2) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v8 = &v7[24 * v3];
  unint64_t v9 = &v7[24 * v6];
  *(void *)int v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  size_t v10 = v8 + 24;
  if (v1 == v2)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      long long v11 = *(_OWORD *)(v1 - 3);
      *((void *)v8 - 1) = *(v1 - 1);
      *(_OWORD *)(v8 - 24) = v11;
      v8 -= 24;
      *(v1 - 2) = 0;
      *(v1 - 1) = 0;
      *(v1 - 3) = 0;
      v1 -= 3;
    }
    while (v1 != v2);
    uint64_t v1 = (void **)*a1;
    unint64_t v12 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v12 != v1)
    {
      if (*((char *)v12 - 1) < 0) {
        operator delete(*(v12 - 3));
      }
      v12 -= 3;
    }
  }
  if (v1) {
    operator delete(v1);
  }
  return v10;
}

char *bsp::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *bsp::writeField(_DWORD *a1, int a2)
{
  *a1 = a2;
  return a1 + 1;
}

uint64_t bsp::getFieldSize()
{
  return 4;
}

__n128 tlv::parseV<bsp::tlv::abm::CapabilitiesItem>@<Q0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  uint64_t v5 = *a1;
  unint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)0x10);
  __n128 result = *(__n128 *)((char *)v5 + 4);
  *(__n128 *)(a3 + 4) = result;
  *a1 = (tlv *)((char *)v5 + 20);
  return result;
}

void sub_1A61D1A1C(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::CapabilitiesItem>()
{
  return 23;
}

__n128 tlv::writeV<bsp::tlv::abm::CapabilitiesItem>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 4);
  *(__n128 *)(v2 + 4) = result;
  *a1 = v2 + 20;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TxAntennaConfig>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1A61D1AF8(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TxAntennaConfig>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::TxAntennaConfig>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t bsp::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, _WORD *a3)
{
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)2);
  a3[3] = *(_WORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)2);
  a3[4] = *(_WORD *)(a1 + 8);
  return a1 + 10;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  return a1 + 6;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  return a1 + 6;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)2);
  a3[3] = *(_WORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)2);
  a3[4] = *(_WORD *)(a1 + 8);
  return a1 + 10;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  return a1 + 6;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  return a1 + 6;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)2);
  a3[3] = *(_WORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)2);
  a3[4] = *(_WORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)2);
  a3[5] = *(_WORD *)(a1 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)2);
  a3[6] = *(_WORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 14), a2, (const unsigned __int8 *)2);
  a3[7] = *(_WORD *)(a1 + 14);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)2);
  a3[8] = *(_WORD *)(a1 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 18), a2, (const unsigned __int8 *)2);
  a3[9] = *(_WORD *)(a1 + 18);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 20), a2, (const unsigned __int8 *)2);
  a3[10] = *(_WORD *)(a1 + 20);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 22), a2, (const unsigned __int8 *)2);
  a3[11] = *(_WORD *)(a1 + 22);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 24), a2, (const unsigned __int8 *)2);
  a3[12] = *(_WORD *)(a1 + 24);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 26), a2, (const unsigned __int8 *)2);
  a3[13] = *(_WORD *)(a1 + 26);
  return a1 + 28;
}

unint64_t tlv::parseV<bsp::tlv::abm::ARTD>(tlv **a1, int a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  unsigned int v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  unsigned int v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  uint64_t v7 = *((unsigned __int16 *)v3 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 6), v4, (const unsigned __int8 *)2);
  uint64_t v8 = *((unsigned __int16 *)v3 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)2);
  *a1 = (tlv *)((char *)v3 + 10);
  return (v7 << 32) | (v8 << 48) | ((unint64_t)v6 << 16) | v5;
}

void sub_1A61D1CF8(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A61D1CC8);
}

uint64_t tlv::size<bsp::tlv::abm::ARTD>()
{
  return 13;
}

_WORD **tlv::writeV<bsp::tlv::abm::ARTD>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  void *result = v2 + 5;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ARTDV2>(uint64_t *a1, int a2)
{
  v3[0] = 0;
  v3[1] = 2863267840;
  *a1 = bsp::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)v3);
  return v3[0];
}

uint64_t sub_1A61D1F34(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return v3;
}

uint64_t tlv::size<bsp::tlv::abm::ARTDV2>()
{
  return 17;
}

uint64_t *tlv::writeV<bsp::tlv::abm::ARTDV2>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(unsigned char *)uint64_t v2 = *(unsigned char *)a2;
  *(unsigned char *)(v2 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(v2 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(v2 + 3) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(v2 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(v2 + 5) = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(v2 + 6) = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(v2 + 7) = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(v2 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(v2 + 9) = *(unsigned char *)(a2 + 9);
  *(_DWORD *)(v2 + 10) = *(_DWORD *)(a2 + 12);
  void *result = v2 + 14;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ARFCNLock>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = -1431699456;
  *(void *)(a3 + 4) = 0;
  *(void *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 20) = 0;
  unsigned int v5 = *a1;
  unsigned int v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 2), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 6), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)((char *)v5 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 10), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)((char *)v5 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 14), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)((char *)v5 + 14);
  uint64_t result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 18), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)((char *)v5 + 18);
  *a1 = (tlv *)((char *)v5 + 22);
  return result;
}

void sub_1A61D21AC(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::ARFCNLock>()
{
  return 25;
}

uint64_t *tlv::writeV<bsp::tlv::abm::ARFCNLock>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_WORD *)uint64_t v2 = *(_WORD *)a2;
  *(_DWORD *)(v2 + 2) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 6) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 10) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v2 + 14) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v2 + 18) = *(_DWORD *)(a2 + 20);
  void *result = v2 + 22;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CarrierAgreggation>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  unsigned int v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  uint64_t v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  uint64_t v7 = *((unsigned __int16 *)v3 + 2);
  *a1 = (tlv *)((char *)v3 + 6);
  return (v6 << 16) | (v7 << 32) | v5;
}

void sub_1A61D2354(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A61D2330);
}

uint64_t tlv::size<bsp::tlv::abm::CarrierAgreggation>()
{
  return 9;
}

_WORD **tlv::writeV<bsp::tlv::abm::CarrierAgreggation>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  void *result = v2 + 3;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::WakeReason>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A61D2420(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::WakeReason>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::WakeReason>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ChannelID>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A61D24E0(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ChannelID>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::ChannelID>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::WakeBufferLength>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1A61D25A0(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::WakeBufferLength>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::WakeBufferLength>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

char *bsp::tlv::abm::parseField(char *__src, char *a2, void *a3)
{
  return a2;
}

{
  std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(a3, __src, a2, a2 - __src);
  return a2;
}

char *bsp::tlv::abm::writeField(char *a1, uint64_t a2)
{
  return &a1[*(void *)(a2 + 8) - *(void *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return &a1[*(void *)(a2 + 8) - *(void *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return &a1[*(void *)(a2 + 8) - *(void *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return &a1[*(void *)(a2 + 8) - *(void *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return &a1[*(void *)(a2 + 8) - *(void *)a2];
}

uint64_t bsp::tlv::abm::getFieldSize(void *a1)
{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

void *tlv::parseV<bsp::tlv::abm::WakeBuffer>@<X0>(char **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v4 = &(*a1)[a2];
  uint64_t result = std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1A61D26B0(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A61D26A0);
}

void sub_1A61D26C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::WakeBuffer>(void *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::WakeBuffer>(void **a1, uint64_t a2)
{
  unint64_t v4 = (char *)*a1;
  uint64_t result = memcpy(*a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = &v4[*(void *)(a2 + 8) - *(void *)a2];
  return result;
}

uint64_t bsp::tlv::abm::parseField(bsp::tlv::abm *this, const unsigned __int8 *a2, unsigned __int8 *a3, Size *a4)
{
  *(_WORD *)a3 = *(_WORD *)this;
  return (uint64_t)this + 2;
}

uint64_t bsp::tlv::abm::writeField(bsp::tlv::abm *this, unsigned __int8 *a2, const Size *a3)
{
  *(_WORD *)this = *(_WORD *)a2;
  return (uint64_t)this + 2;
}

uint64_t bsp::tlv::abm::getFieldSize(bsp::tlv::abm *this, const Size *a2)
{
  return 2;
}

uint64_t tlv::parseV<bsp::tlv::abm::Size>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1A61D27C8(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::Size>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::Size>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

void *tlv::parseV<bsp::tlv::abm::LogData>@<X0>(char **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v4 = &(*a1)[a2];
  uint64_t result = std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1A61D28D8(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A61D28C8);
}

void sub_1A61D28E8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::LogData>(void *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::LogData>(void **a1, uint64_t a2)
{
  unint64_t v4 = (char *)*a1;
  uint64_t result = memcpy(*a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = &v4[*(void *)(a2 + 8) - *(void *)a2];
  return result;
}

char *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, BOOL *a3)
{
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

BOOL tlv::parseV<bsp::tlv::abm::Enable>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A61D2A00(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::Enable>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::Enable>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::Port>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A61D2AC0(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::Port>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::Port>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

void *tlv::parseV<bsp::tlv::abm::PayloadRFFE>@<X0>(char **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v4 = &(*a1)[a2];
  uint64_t result = std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1A61D2BD0(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A61D2BC0);
}

void sub_1A61D2BE0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::PayloadRFFE>(void *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::PayloadRFFE>(void **a1, uint64_t a2)
{
  unint64_t v4 = (char *)*a1;
  uint64_t result = memcpy(*a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = &v4[*(void *)(a2 + 8) - *(void *)a2];
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::RxDiversityConfig>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  unsigned int v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  uint64_t v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  uint64_t v7 = *((unsigned __int16 *)v3 + 2);
  *a1 = (tlv *)((char *)v3 + 6);
  return (v6 << 16) | (v7 << 32) | v5;
}

void sub_1A61D2D94(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A61D2D70);
}

uint64_t tlv::size<bsp::tlv::abm::RxDiversityConfig>()
{
  return 9;
}

_WORD **tlv::writeV<bsp::tlv::abm::RxDiversityConfig>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  void *result = v2 + 3;
  return result;
}

unint64_t tlv::parseV<bsp::tlv::abm::ARTDConfig>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  unsigned int v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  unsigned int v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  uint64_t v7 = *((unsigned __int16 *)v3 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 6), v4, (const unsigned __int8 *)2);
  uint64_t v8 = *((unsigned __int16 *)v3 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)2);
  *a1 = (tlv *)((char *)v3 + 10);
  return (v7 << 32) | (v8 << 48) | ((unint64_t)v6 << 16) | v5;
}

void sub_1A61D2FA0(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A61D2F70);
}

uint64_t tlv::size<bsp::tlv::abm::ARTDConfig>()
{
  return 13;
}

_WORD **tlv::writeV<bsp::tlv::abm::ARTDConfig>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  void *result = v2 + 5;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::UARFCNLockConfig>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1A61D307C(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::UARFCNLockConfig>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::UARFCNLockConfig>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::EARFCNLockConfig>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1A61D313C(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::EARFCNLockConfig>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::EARFCNLockConfig>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CarrierAgreggationConfig>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  unsigned int v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  uint64_t v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  uint64_t v7 = *((unsigned __int16 *)v3 + 2);
  *a1 = (tlv *)((char *)v3 + 6);
  return (v6 << 16) | (v7 << 32) | v5;
}

void sub_1A61D32A8(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A61D3284);
}

uint64_t tlv::size<bsp::tlv::abm::CarrierAgreggationConfig>()
{
  return 9;
}

_WORD **tlv::writeV<bsp::tlv::abm::CarrierAgreggationConfig>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  void *result = v2 + 3;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::RxDiversityConfigV2>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  unsigned int v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  uint64_t v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  uint64_t v7 = *((unsigned __int16 *)v3 + 2);
  *a1 = (tlv *)((char *)v3 + 6);
  return (v6 << 16) | (v7 << 32) | v5;
}

void sub_1A61D3420(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A61D33FCLL);
}

uint64_t tlv::size<bsp::tlv::abm::RxDiversityConfigV2>()
{
  return 9;
}

_WORD **tlv::writeV<bsp::tlv::abm::RxDiversityConfigV2>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  void *result = v2 + 3;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ARTDConfigV2>(uint64_t *a1, int a2)
{
  v3[0] = 0;
  v3[1] = 2863267840;
  *a1 = bsp::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)v3);
  return v3[0];
}

uint64_t sub_1A61D351C(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return v3;
}

uint64_t tlv::size<bsp::tlv::abm::ARTDConfigV2>()
{
  return 17;
}

uint64_t *tlv::writeV<bsp::tlv::abm::ARTDConfigV2>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(unsigned char *)uint64_t v2 = *(unsigned char *)a2;
  *(unsigned char *)(v2 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(v2 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(v2 + 3) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(v2 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(v2 + 5) = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(v2 + 6) = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(v2 + 7) = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(v2 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(v2 + 9) = *(unsigned char *)(a2 + 9);
  *(_DWORD *)(v2 + 10) = *(_DWORD *)(a2 + 12);
  void *result = v2 + 14;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ARFCNLockConfig>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = -1431699456;
  *(void *)(a3 + 4) = 0;
  *(void *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 20) = 0;
  unsigned int v5 = *a1;
  uint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 2), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 6), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)((char *)v5 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 10), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)((char *)v5 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 14), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)((char *)v5 + 14);
  uint64_t result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 18), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)((char *)v5 + 18);
  *a1 = (tlv *)((char *)v5 + 22);
  return result;
}

void sub_1A61D3794(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::ARFCNLockConfig>()
{
  return 25;
}

uint64_t *tlv::writeV<bsp::tlv::abm::ARFCNLockConfig>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_WORD *)uint64_t v2 = *(_WORD *)a2;
  *(_DWORD *)(v2 + 2) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 6) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 10) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v2 + 14) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v2 + 18) = *(_DWORD *)(a2 + 20);
  void *result = v2 + 22;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SleepConfig>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1A61D3890(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SleepConfig>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::SleepConfig>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::FieldTestConfig>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = bsp::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (_WORD *)a3);
  *a1 = result;
  return result;
}

void sub_1A61D3B04(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::FieldTestConfig>()
{
  return 31;
}

_WORD **tlv::writeV<bsp::tlv::abm::FieldTestConfig>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  void v2[5] = a2[5];
  v2[6] = a2[6];
  v2[7] = a2[7];
  v2[8] = a2[8];
  v2[9] = a2[9];
  v2[10] = a2[10];
  v2[11] = a2[11];
  v2[12] = a2[12];
  v2[13] = a2[13];
  void *result = v2 + 14;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::FieldTestConfigV2>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a3 + 4) = v4;
  *(_OWORD *)(a3 + 20) = v4;
  *(_OWORD *)(a3 + 36) = v4;
  *(_DWORD *)(a3 + 52) = -1431655766;
  *(_DWORD *)a3 = 0;
  *(_WORD *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 20) = 0;
  *(_WORD *)(a3 + 24) = 0;
  *(_WORD *)(a3 + 28) = 0;
  *(void *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  uint64_t v5 = *a1;
  *(void *)(a3 + 46) = 0;
  uint64_t result = bsp::tlv::abm::parseField(v5, (const unsigned __int8 *)(v5 + a2), a3);
  *a1 = result;
  return result;
}

void sub_1A61D3E24(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::FieldTestConfigV2>()
{
  return 49;
}

uint64_t *tlv::writeV<bsp::tlv::abm::FieldTestConfigV2>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_WORD *)uint64_t v2 = *(_WORD *)a2;
  *(_WORD *)(v2 + 2) = *(_WORD *)(a2 + 2);
  *(_WORD *)(v2 + 4) = *(_WORD *)(a2 + 4);
  *(unsigned char *)(v2 + 6) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(v2 + 7) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(v2 + 8) = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(v2 + 9) = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(v2 + 10) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(v2 + 11) = *(unsigned char *)(a2 + 13);
  *(unsigned char *)(v2 + 12) = *(unsigned char *)(a2 + 14);
  *(unsigned char *)(v2 + 13) = *(unsigned char *)(a2 + 15);
  *(unsigned char *)(v2 + 14) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(v2 + 15) = *(unsigned char *)(a2 + 17);
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a2 + 20);
  *(_WORD *)(v2 + 20) = *(_WORD *)(a2 + 24);
  *(_WORD *)(v2 + 22) = *(_WORD *)(a2 + 28);
  *(_DWORD *)(v2 + 24) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(v2 + 28) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(v2 + 32) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v2 + 36) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(v2 + 40) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(v2 + 44) = *(_WORD *)(a2 + 52);
  void *result = v2 + 46;
  return result;
}

uint64_t bsp::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, unsigned char *a3)
{
  *a3 = *(unsigned char *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1);
  a3[1] = *(unsigned char *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)1);
  a3[2] = *(unsigned char *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 3), a2, (const unsigned __int8 *)1);
  a3[3] = *(unsigned char *)(a1 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
  a3[4] = *(unsigned char *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)1);
  a3[5] = *(unsigned char *)(a1 + 5);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)1);
  a3[6] = *(unsigned char *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 7), a2, (const unsigned __int8 *)1);
  a3[7] = *(unsigned char *)(a1 + 7);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)1);
  a3[8] = *(unsigned char *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 9), a2, (const unsigned __int8 *)1);
  a3[9] = *(unsigned char *)(a1 + 9);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)1);
  a3[10] = *(unsigned char *)(a1 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 11), a2, (const unsigned __int8 *)1);
  a3[11] = *(unsigned char *)(a1 + 11);
  return a1 + 12;
}

uint64_t tlv::parseV<bsp::tlv::abm::ReadStatus>(uint64_t *a1, int a2)
{
  int v4 = 0;
  uint64_t v3 = 0;
  *a1 = bsp::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), &v3);
  return v3;
}

uint64_t sub_1A61D411C(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return v3;
}

uint64_t tlv::size<bsp::tlv::abm::ReadStatus>()
{
  return 15;
}

unsigned char **tlv::writeV<bsp::tlv::abm::ReadStatus>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  void v2[5] = a2[5];
  v2[6] = a2[6];
  v2[7] = a2[7];
  v2[8] = a2[8];
  v2[9] = a2[9];
  v2[10] = a2[10];
  v2[11] = a2[11];
  void *result = v2 + 12;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::MeasureType>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A61D4240(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::MeasureType>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::MeasureType>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TestType>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A61D4300(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TestType>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::TestType>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TriggerError>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A61D43C0(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TriggerError>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::TriggerError>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TestTimeout>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1A61D4480(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TestTimeout>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::TestTimeout>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

void *tlv::parseV<bsp::tlv::abm::RFSelfTestNonce>@<X0>(char **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v4 = &(*a1)[a2];
  uint64_t result = std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1A61D4590(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A61D4580);
}

void sub_1A61D45A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::RFSelfTestNonce>(void *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::RFSelfTestNonce>(void **a1, uint64_t a2)
{
  int v4 = (char *)*a1;
  uint64_t result = memcpy(*a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = &v4[*(void *)(a2 + 8) - *(void *)a2];
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SecurityStatus>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  uint64_t result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1A61D46A8(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SecurityStatus>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::SecurityStatus>(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

void *tlv::parseV<bsp::tlv::abm::RFSelfTestTicket>@<X0>(char **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v4 = &(*a1)[a2];
  uint64_t result = std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1A61D47B8(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A61D47A8);
}

void sub_1A61D47C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::RFSelfTestTicket>(void *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::RFSelfTestTicket>(void **a1, uint64_t a2)
{
  int v4 = (char *)*a1;
  uint64_t result = memcpy(*a1, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = &v4[*(void *)(a2 + 8) - *(void *)a2];
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::WakeChannel>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1A61D48D0(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::WakeChannel>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::WakeChannel>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CommandCode>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A61D4990(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::CommandCode>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::CommandCode>(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::RegionIndex>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A61D4A50(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::RegionIndex>()
{
  return 4;
}

unsigned char **tlv::writeV<bsp::tlv::abm::RegionIndex>(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::BlockIndex>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1A61D4B10(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::BlockIndex>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::BlockIndex>(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  void *result = v2 + 1;
  return result;
}

char *bsp::tlv::abm::parseField(bsp::tlv::abm *this, const unsigned __int8 *a2, unsigned __int8 *a3, Capabilities *a4)
{
  tlv::throwIfNotEnoughBytes(this, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)this;
  tlv::throwIfNotEnoughBytes((bsp::tlv::abm *)((char *)this + 4), a2, (const unsigned __int8 *)1);
  unint64_t v7 = *((unsigned __int8 *)this + 4);
  unint64_t v9 = (char *)*((void *)a3 + 1);
  uint64_t v8 = (char *)*((void *)a3 + 2);
  unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 2);
  unint64_t v11 = v7 - v10;
  if (v7 <= v10)
  {
    if (v7 < v10)
    {
      uint64_t v8 = &v9[20 * *((unsigned __int8 *)this + 4)];
      *((void *)a3 + 2) = v8;
    }
    long long v21 = (char *)this + 5;
  }
  else
  {
    uint64_t v12 = *((void *)a3 + 3);
    if (0xCCCCCCCCCCCCCCCDLL * ((v12 - (uint64_t)v8) >> 2) >= v11)
    {
      bzero(*((void **)a3 + 2), 20 * ((20 * v11 - 20) / 0x14) + 20);
      int8x16_t v19 = &v8[20 * ((20 * v11 - 20) / 0x14) + 20];
      *((void *)a3 + 2) = v19;
    }
    else
    {
      unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - (uint64_t)v9) >> 2);
      unint64_t v14 = 0x999999999999999ALL * ((v12 - (uint64_t)v9) >> 2);
      if (v14 > v7) {
        unint64_t v7 = v14;
      }
      if (v13 >= 0x666666666666666) {
        unint64_t v7 = 0xCCCCCCCCCCCCCCCLL;
      }
      if (v7 > 0xCCCCCCCCCCCCCCCLL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v15 = 20 * v7;
      unint64_t v16 = (char *)operator new(20 * v7);
      int64x2_t v17 = &v16[4 * ((v8 - v9) >> 2)];
      int64x2_t v18 = &v16[v15];
      bzero(v17, 20 * ((20 * v11 - 20) / 0x14) + 20);
      int8x16_t v19 = &v17[20 * ((20 * v11 - 20) / 0x14) + 20];
      if (v8 != v9)
      {
        do
        {
          long long v20 = *(_OWORD *)(v8 - 20);
          *((_DWORD *)v17 - 1) = *((_DWORD *)v8 - 1);
          *(_OWORD *)(v17 - 20) = v20;
          v17 -= 20;
          v8 -= 20;
        }
        while (v8 != v9);
        uint64_t v8 = (char *)*((void *)a3 + 1);
      }
      *((void *)a3 + 1) = v17;
      *((void *)a3 + 2) = v19;
      *((void *)a3 + 3) = v18;
      if (v8)
      {
        operator delete(v8);
        int8x16_t v19 = (char *)*((void *)a3 + 2);
      }
    }
    unint64_t v9 = (char *)*((void *)a3 + 1);
    uint64_t v8 = v19;
    long long v21 = (char *)this + 5;
  }
  while (v9 != v8)
  {
    tlv::throwIfNotEnoughBytes((tlv *)v21, a2, (const unsigned __int8 *)4);
    *(_DWORD *)unint64_t v9 = *(_DWORD *)v21;
    tlv::throwIfNotEnoughBytes((tlv *)(v21 + 4), a2, (const unsigned __int8 *)0x10);
    *(_OWORD *)(v9 + 4) = *(_OWORD *)(v21 + 4);
    v21 += 20;
    v9 += 20;
  }
  return v21;
}

uint64_t bsp::tlv::abm::writeField(bsp::tlv::abm *this, unsigned __int8 *a2, const Capabilities *a3)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  uint64_t result = (uint64_t)this + 5;
  *((unsigned char *)this + 4) = -51 * ((*((_DWORD *)a2 + 4) - *((_DWORD *)a2 + 2)) >> 2);
  uint64_t v5 = *((void *)a2 + 1);
  for (uint64_t i = *((void *)a2 + 2); v5 != i; v5 += 20)
  {
    *(_DWORD *)uint64_t result = *(_DWORD *)v5;
    *(_OWORD *)(result + 4) = *(_OWORD *)(v5 + 4);
    result += 20;
  }
  return result;
}

unint64_t bsp::tlv::abm::getFieldSize(bsp::tlv::abm *this, const Capabilities *a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = *((void *)this + 2);
  if (v2 == v3) {
    return 5;
  }
  else {
    return 20 * ((v3 - v2 - 20) / 0x14uLL) + 25;
  }
}

char *tlv::parseV<bsp::tlv::abm::Capabilities>@<X0>(bsp::tlv::abm **a1@<X0>, int a2@<W1>, Capabilities *a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0xAAAAAAAA00000000;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  uint64_t result = bsp::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (unsigned __int8 *)a4, a3);
  *a1 = (bsp::tlv::abm *)result;
  return result;
}

void sub_1A61D4E54(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A61D4E44);
}

void sub_1A61D4E64(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<bsp::tlv::abm::Capabilities>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v1 == v2) {
    return 8;
  }
  else {
    return 20 * ((v2 - v1 - 20) / 0x14uLL) + 28;
  }
}

uint64_t *tlv::writeV<bsp::tlv::abm::Capabilities>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *a2;
  uint64_t v3 = v2 + 5;
  *(unsigned char *)(v2 + 4) = -51 * ((a2[4] - a2[2]) >> 2);
  uint64_t v4 = *((void *)a2 + 1);
  for (uint64_t i = *((void *)a2 + 2); v4 != i; v4 += 20)
  {
    *(_DWORD *)uint64_t v3 = *(_DWORD *)v4;
    *(_OWORD *)(v3 + 4) = *(_OWORD *)(v4 + 4);
    v3 += 20;
  }
  char *result = v3;
  return result;
}

BOOL defaults::get(char *a1, char *a2, std::string *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    uint64_t v6 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, "BasebandTrace")
      && strcasecmp(v6, "BBTrace")
      && strcasecmp(v6, abm::trace::kICETrace[0])
      && strcasecmp(v6, abm::trace::kDIAG[0]))
    {
      if (strcasecmp(v6, "CoreDump"))
      {
        if (strcasecmp(v6, "IPC") && strcasecmp(v6, "KernelPCI"))
        {
          if (strcasecmp(v6, "BasebandIPC"))
          {
            if (strcasecmp(v6, "Compression"))
            {
              if (strcasecmp(v6, "TTR"))
              {
                if (strcasecmp(v6, "LogFilter"))
                {
                  if (strcasecmp(v6, "SystemLogs"))
                  {
                    if (strcasecmp(v6, "Profile"))
                    {
                      if (strcasecmp(v6, "Tailspin"))
                      {
LABEL_16:
                        if (!strcasecmp(v6, "Settings"))
                        {
                          return defaults::tracesettings::get(a2, a3);
                        }
                        else
                        {
                          unint64_t v7 = GetOsLogContext()[1];
                          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
                          {
                            if (a1[23] >= 0) {
                              unint64_t v9 = a1;
                            }
                            else {
                              unint64_t v9 = *(char **)a1;
                            }
                            if (a2[23] >= 0) {
                              unint64_t v10 = a2;
                            }
                            else {
                              unint64_t v10 = *(char **)a2;
                            }
                            int v11 = 136315650;
                            uint64_t v12 = "prop.default";
                            __int16 v13 = 2080;
                            unint64_t v14 = v9;
                            __int16 v15 = 2080;
                            unint64_t v16 = v10;
                            _os_log_error_impl(&dword_1A609F000, v7, OS_LOG_TYPE_ERROR, "%s: Invalid domain; domain='%s' key='%s'",
                              (uint8_t *)&v11,
                              0x20u);
                          }
                          return 0;
                        }
                      }
                      goto LABEL_33;
                    }
                    goto LABEL_60;
                  }
                  goto LABEL_57;
                }
                goto LABEL_54;
              }
              goto LABEL_51;
            }
            goto LABEL_48;
          }
          goto LABEL_45;
        }
        goto LABEL_39;
      }
      goto LABEL_42;
    }
  }
  else if (strcasecmp(a1, "BasebandTrace") {
         && strcasecmp(a1, "BBTrace")
  }
         && strcasecmp(a1, abm::trace::kICETrace[0])
         && strcasecmp(a1, abm::trace::kDIAG[0]))
  {
    if (strcasecmp(a1, "CoreDump"))
    {
      if (strcasecmp(a1, "IPC") && strcasecmp(a1, "KernelPCI"))
      {
        if (strcasecmp(a1, "BasebandIPC"))
        {
          if (strcasecmp(a1, "Compression"))
          {
            if (strcasecmp(a1, "TTR"))
            {
              if (strcasecmp(a1, "LogFilter"))
              {
                if (strcasecmp(a1, "SystemLogs"))
                {
                  if (strcasecmp(a1, "Profile"))
                  {
                    uint64_t v6 = a1;
                    if (strcasecmp(a1, "Tailspin")) {
                      goto LABEL_16;
                    }
LABEL_33:
                    return defaults::tailspin::get(a2, (uint64_t)a3);
                  }
LABEL_60:
                  return defaults::profile::get(a2, (uint64_t)a3);
                }
LABEL_57:
                return defaults::systemlogs::get(a2, (uint64_t)a3);
              }
LABEL_54:
              return defaults::logfilter::get(a2, (uint64_t)a3);
            }
LABEL_51:
            return defaults::ttr::get(a2, (uint64_t)a3);
          }
LABEL_48:
          return defaults::compression::get(a2, (uint64_t)a3);
        }
LABEL_45:
        return defaults::bbipc::get(a2, (uint64_t)a3);
      }
LABEL_39:
      return defaults::ipc::get(a2, (uint64_t)a3);
    }
LABEL_42:
    return defaults::coredump::get(a2, (uint64_t)a3);
  }

  return defaults::bbtrace::get(a2, (std::string::size_type *)a3);
}

BOOL defaults::bbtrace::get(char *a1, std::string::size_type *a2)
{
  v72[2] = *MEMORY[0x1E4F143B8];
  int v4 = a1[23];
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v5 = (capabilities::trace *)strcasecmp(a1, "Enabled");
    if (v5)
    {
      uint64_t v6 = (capabilities::trace *)strcasecmp(a1, "High_Tput");
      if (v6)
      {
        unint64_t v7 = (capabilities::trace *)strcasecmp(a1, "Data_Logging");
        if (v7)
        {
          if (strcasecmp(a1, "Mode") && strcasecmp(a1, "Reset_Mode_Boot"))
          {
            if (!strcasecmp(a1, "BootSessionUUID")) {
              goto LABEL_185;
            }
            if (strcasecmp(a1, "TraceOwnership"))
            {
              uint64_t v8 = (capabilities::trace *)strcasecmp(a1, "History");
              unint64_t v9 = a1;
              if (v8) {
                goto LABEL_10;
              }
LABEL_25:
              int v14 = capabilities::trace::defaultHistorySizeMB(v8);
              util::to_str<BOOL>(v14, &v70);
LABEL_73:
              if (*((char *)a2 + 23) < 0) {
                operator delete((void *)*a2);
              }
              *(std::string *)a2 = v70;
              return 1;
            }
          }
          goto LABEL_29;
        }
        goto LABEL_28;
      }
      goto LABEL_27;
    }
LABEL_26:
    int v15 = capabilities::trace::enabledByDefault(v5);
    v72[0] = 0;
    *(void *)((char *)v72 + 7) = 0;
    std::to_string(&v70, v15);
LABEL_30:
    v72[0] = v70.__r_.__value_.__l.__size_;
    std::string::size_type v18 = v70.__r_.__value_.__r.__words[0];
    *(void *)((char *)v72 + 7) = *(std::string::size_type *)((char *)&v70.__r_.__value_.__r.__words[1] + 7);
    char v19 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    if (*((char *)a2 + 23) < 0) {
      operator delete((void *)*a2);
    }
    std::string::size_type v20 = v72[0];
    *a2 = v18;
    a2[1] = v20;
    *(std::string::size_type *)((char *)a2 + 15) = *(void *)((char *)v72 + 7);
    *((unsigned char *)a2 + 23) = v19;
    return 1;
  }
  unint64_t v9 = *(const char **)a1;
  uint64_t v5 = (capabilities::trace *)strcasecmp(*(const char **)a1, "Enabled");
  if (!v5) {
    goto LABEL_26;
  }
  uint64_t v6 = (capabilities::trace *)strcasecmp(v9, "High_Tput");
  if (!v6)
  {
LABEL_27:
    int v16 = capabilities::trace::supportsHighTPutByDefault(v6);
    v72[0] = 0;
    *(void *)((char *)v72 + 7) = 0;
    std::to_string(&v70, v16);
    goto LABEL_30;
  }
  unint64_t v7 = (capabilities::trace *)strcasecmp(v9, "Data_Logging");
  if (!v7)
  {
LABEL_28:
    int v17 = capabilities::trace::supportsDataLoggingByDefault(v7);
    v72[0] = 0;
    *(void *)((char *)v72 + 7) = 0;
    std::to_string(&v70, v17);
    goto LABEL_30;
  }
  if (!strcasecmp(v9, "Mode") || !strcasecmp(v9, "Reset_Mode_Boot")) {
    goto LABEL_29;
  }
  if (!strcasecmp(v9, "BootSessionUUID")) {
    goto LABEL_185;
  }
  if (!strcasecmp(v9, "TraceOwnership"))
  {
LABEL_29:
    *(void *)((char *)v72 + 7) = 0;
    v72[0] = 0;
    std::to_string(&v70, 0);
    goto LABEL_30;
  }
  uint64_t v8 = (capabilities::trace *)strcasecmp(v9, "History");
  if (!v8) {
    goto LABEL_25;
  }
LABEL_10:
  unint64_t v10 = (capabilities::radio *)strcasecmp(v9, diag::config::kEnabledDuringSleepKey[0]);
  if (v10) {
    goto LABEL_11;
  }
  char v22 = (capabilities::radio *)capabilities::radio::maverick(v10);
  if (v22 & 1) != 0 || (capabilities::radio::ice(v22))
  {
    util::to_str<diag::config::DuringAPSleep>(&v70);
    goto LABEL_73;
  }
  LOBYTE(v4) = a1[23];
LABEL_11:
  int v11 = *(const char **)a1;
  if ((v4 & 0x80u) == 0) {
    uint64_t v12 = a1;
  }
  else {
    uint64_t v12 = *(const char **)a1;
  }
  __int16 v13 = (capabilities::radio *)strcasecmp(v12, diag::config::kBufferingOnAPAwake[0]);
  if (!v13)
  {
    if (capabilities::radio::maverick(v13)) {
      goto LABEL_72;
    }
    LOBYTE(v4) = a1[23];
    int v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    int8x16_t v23 = a1;
  }
  else {
    int8x16_t v23 = v11;
  }
  int8x16_t v24 = (capabilities::radio *)strcasecmp(v23, diag::config::kStallDetectionKey[0]);
  if (!v24)
  {
    if (capabilities::radio::maverick(v24)) {
      goto LABEL_72;
    }
    LOBYTE(v4) = a1[23];
    int v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    unsigned long long v25 = a1;
  }
  else {
    unsigned long long v25 = v11;
  }
  unsigned long long v26 = (capabilities::radio *)strcasecmp(v25, diag::config::kStallDetectionRetriesKey[0]);
  if (!v26)
  {
    if (capabilities::radio::maverick(v26))
    {
      util::to_str<unsigned int>(3u, &v70);
      goto LABEL_73;
    }
    LOBYTE(v4) = a1[23];
    int v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    unsigned long long v27 = a1;
  }
  else {
    unsigned long long v27 = v11;
  }
  unsigned long long v28 = (capabilities::radio *)strcasecmp(v27, diag::config::kStallDetectionRecoveryKey[0]);
  if (!v28)
  {
    if (capabilities::radio::maverick(v28))
    {
      util::to_str<diag::config::Recovery>(&v70);
      goto LABEL_73;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    int32x2_t v29 = a1;
    if (strcasecmp(a1, diag::config::kKeepScratchLogsKey[0])) {
      goto LABEL_62;
    }
LABEL_72:
    util::to_str<BOOL>(0, &v70);
    goto LABEL_73;
  }
  int32x2_t v29 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, diag::config::kKeepScratchLogsKey[0])) {
    goto LABEL_72;
  }
LABEL_62:
  int8x16_t v30 = (capabilities::radio *)strcasecmp(v29, "File");
  if (!v30)
  {
    uint64_t v31 = capabilities::radio::maverick(v30);
    if (v31) {
      goto LABEL_78;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    uint64_t v32 = (capabilities::radio *)strcasecmp(a1, "File_Secondary");
    xpc_object_t v33 = a1;
    if (v32) {
      goto LABEL_67;
    }
LABEL_77:
    uint64_t v31 = capabilities::radio::ice(v32);
    if (!v31)
    {
      unint64_t v35 = "None";
LABEL_82:
      std::string::__assign_external((std::string *)a2, v35);
      return 1;
    }
LABEL_78:
    if (config::hw::watch((config::hw *)v31)) {
      unint64_t v35 = "Lite";
    }
    else {
      unint64_t v35 = "Default";
    }
    goto LABEL_82;
  }
  xpc_object_t v33 = *(const char **)a1;
  uint64_t v32 = (capabilities::radio *)strcasecmp(*(const char **)a1, "File_Secondary");
  if (!v32) {
    goto LABEL_77;
  }
LABEL_67:
  uint64_t v34 = (capabilities::radio *)strcasecmp(v33, diag::config::kExtraDMCFileKey[0]);
  if (!v34)
  {
    if (capabilities::radio::maverick(v34))
    {
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 4;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((unsigned char *)a2 + 23) = 4;
      }
      strcpy((char *)a2, "None");
      return 1;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80u) == 0) {
    int v36 = a1;
  }
  else {
    int v36 = *(const char **)a1;
  }
  long long v37 = (capabilities::radio *)strcasecmp(v36, "File_Sleep");
  if (!v37)
  {
    if (capabilities::radio::maverick(v37))
    {
LABEL_89:
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 5;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((unsigned char *)a2 + 23) = 5;
      }
      strcpy((char *)a2, "Sleep");
      return 1;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    if (strcasecmp(a1, "kKeyTraceConfigPath"))
    {
      uint64_t v38 = (capabilities::trace *)strcasecmp(a1, "MaxMemoryFileCount");
      unint64_t v39 = a1;
      if (v38) {
        goto LABEL_95;
      }
LABEL_100:
      unsigned int v41 = capabilities::trace::defaultMemoryFileMaxCount(v38);
      util::to_str<unsigned int>(v41, &v70);
      goto LABEL_73;
    }
LABEL_101:
    if (*((char *)a2 + 23) < 0)
    {
      a2[1] = 17;
      a2 = (std::string::size_type *)*a2;
    }
    else
    {
      *((unsigned char *)a2 + 23) = 17;
    }
    strcpy((char *)a2, "/usr/lib/bbmasks/");
    return 1;
  }
  unint64_t v39 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "kKeyTraceConfigPath")) {
    goto LABEL_101;
  }
  uint64_t v38 = (capabilities::trace *)strcasecmp(v39, "MaxMemoryFileCount");
  if (!v38) {
    goto LABEL_100;
  }
LABEL_95:
  int v40 = (capabilities::radio *)strcasecmp(v39, "BackgroundMode");
  if (!v40)
  {
    if (capabilities::radio::ice(v40)) {
      goto LABEL_72;
    }
    LOBYTE(v4) = a1[23];
  }
  uint64_t v42 = *(const char **)a1;
  if ((v4 & 0x80u) == 0) {
    unint64_t v43 = a1;
  }
  else {
    unint64_t v43 = *(const char **)a1;
  }
  int v44 = (capabilities::radio *)strcasecmp(v43, "High_Watermark");
  if (!v44)
  {
    long long v45 = (capabilities::radio *)capabilities::radio::ice(v44);
    if (v45)
    {
      if (capabilities::radio::ice(v45)) {
        int v46 = 80;
      }
      else {
        int v46 = -1;
      }
LABEL_118:
      util::to_str<BOOL>(v46, &v70);
      goto LABEL_73;
    }
    LOBYTE(v4) = a1[23];
    uint64_t v42 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    unint64_t v47 = a1;
  }
  else {
    unint64_t v47 = v42;
  }
  int v48 = (capabilities::radio *)strcasecmp(v47, "Low_Watermark");
  if (!v48)
  {
    long long v49 = (capabilities::radio *)capabilities::radio::ice(v48);
    if (v49)
    {
      if (capabilities::radio::ice(v49)) {
        int v46 = 1;
      }
      else {
        int v46 = -1;
      }
      goto LABEL_118;
    }
    LOBYTE(v4) = a1[23];
    uint64_t v42 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    uint64_t v50 = a1;
  }
  else {
    uint64_t v50 = v42;
  }
  unint64_t v51 = (capabilities::radio *)strcasecmp(v50, "ETBFile");
  if (!v51)
  {
    if (capabilities::radio::ice(v51))
    {
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 8;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((unsigned char *)a2 + 23) = 8;
      }
      strcpy((char *)a2, "Disabled");
      return 1;
    }
    LOBYTE(v4) = a1[23];
    uint64_t v42 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    int v52 = a1;
  }
  else {
    int v52 = v42;
  }
  uint64_t v53 = (capabilities::radio *)strcasecmp(v52, "File");
  if (!v53)
  {
    if (capabilities::radio::ice(v53))
    {
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 7;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((unsigned char *)a2 + 23) = 7;
      }
      strcpy((char *)a2, "Default");
      return 1;
    }
    LOBYTE(v4) = a1[23];
    uint64_t v42 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    uint64_t v54 = a1;
  }
  else {
    uint64_t v54 = v42;
  }
  unint64_t v55 = (capabilities::radio *)strcasecmp(v54, "File_Sleep");
  if (!v55)
  {
    if (capabilities::radio::ice(v55)) {
      goto LABEL_89;
    }
    LOBYTE(v4) = a1[23];
    uint64_t v42 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    int v56 = a1;
  }
  else {
    int v56 = v42;
  }
  uint64_t v57 = (capabilities::radio *)strcasecmp(v56, "High_Watermark");
  if (!v57)
  {
    if (capabilities::radio::ice(v57))
    {
      util::to_str<BOOL>(80, &v70);
      goto LABEL_73;
    }
    LOBYTE(v4) = a1[23];
    uint64_t v42 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    uint64_t v58 = a1;
  }
  else {
    uint64_t v58 = v42;
  }
  unint64_t v59 = (capabilities::radio *)strcasecmp(v58, "Low_Watermark");
  if (!v59)
  {
    if (capabilities::radio::ice(v59))
    {
LABEL_163:
      util::to_str<BOOL>(1, &v70);
      goto LABEL_73;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    if (!strcasecmp(a1, "CellularLoggingAllowed")) {
      goto LABEL_72;
    }
    if (strcasecmp(a1, "CarrierName1") && strcasecmp(a1, "CarrierName2"))
    {
      int v60 = (capabilities::trace *)strcasecmp(a1, "FileSize");
      if (v60)
      {
        xpc_object_t v61 = (capabilities::radio *)strcasecmp(a1, "SizeIO");
        if (v61)
        {
          int v62 = (defaults::bbtrace *)strcasecmp(a1, "NumberOfReadIO");
          xpc_object_t v63 = a1;
          if (v62) {
            goto LABEL_172;
          }
LABEL_184:
          unsigned int count = defaults::bbtrace::transport_read_count(v62);
          util::to_str<unsigned int>(count, &v70);
          goto LABEL_73;
        }
LABEL_195:
        char v68 = (capabilities::abs *)capabilities::radio::vendor(v61);
        if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v68)) {
          unsigned int v69 = 0x4000;
        }
        else {
          unsigned int v69 = 0x8000;
        }
        util::to_str<unsigned int>(v69, &v70);
        goto LABEL_73;
      }
LABEL_194:
      unsigned int v67 = capabilities::trace::defaultFileSizeBytes(v60);
      util::to_str<unsigned int>(v67, &v70);
      goto LABEL_73;
    }
LABEL_185:
    if (*((char *)a2 + 23) < 0)
    {
      a2[1] = 0;
      a2 = (std::string::size_type *)*a2;
    }
    else
    {
      *((unsigned char *)a2 + 23) = 0;
    }
    *(unsigned char *)a2 = 0;
    return 1;
  }
  xpc_object_t v63 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "CellularLoggingAllowed")) {
    goto LABEL_72;
  }
  if (!strcasecmp(v63, "CarrierName1") || !strcasecmp(v63, "CarrierName2")) {
    goto LABEL_185;
  }
  int v60 = (capabilities::trace *)strcasecmp(v63, "FileSize");
  if (!v60) {
    goto LABEL_194;
  }
  xpc_object_t v61 = (capabilities::radio *)strcasecmp(v63, "SizeIO");
  if (!v61) {
    goto LABEL_195;
  }
  int v62 = (defaults::bbtrace *)strcasecmp(v63, "NumberOfReadIO");
  if (!v62) {
    goto LABEL_184;
  }
LABEL_172:
  if (!strcasecmp(v63, "Retain_Previous_Trace")) {
    goto LABEL_163;
  }
  uint64_t v64 = GetOsLogContext()[1];
  BOOL result = os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
  if (result)
  {
    if (a1[23] >= 0) {
      unint64_t v65 = a1;
    }
    else {
      unint64_t v65 = *(char **)a1;
    }
    LODWORD(v70.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
    WORD2(v70.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v70.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"BBTrace";
    HIWORD(v70.__r_.__value_.__r.__words[2]) = 2080;
    uint64_t v71 = v65;
    _os_log_error_impl(&dword_1A609F000, v64, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
      (uint8_t *)&v70,
      0x20u);
    return 0;
  }
  return result;
}

void sub_1A61D5FEC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1A61D5804);
    }
    JUMPOUT(0x1A61D580CLL);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::coredump::get(const char *a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)a1;
  void v15[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  int v4 = (capabilities::trace *)strcasecmp(a1, "Enabled");
  int v5 = (int)v4;
  if (v4)
  {
    uint64_t v6 = GetOsLogContext()[1];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)v3 + 23) >= 0) {
        unint64_t v7 = v3;
      }
      else {
        unint64_t v7 = (uint64_t *)*v3;
      }
      LODWORD(v13.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v13.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v13.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"CoreDump";
      HIWORD(v13.__r_.__value_.__r.__words[2]) = 2080;
      int v14 = v7;
      _os_log_error_impl(&dword_1A609F000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v13,
        0x20u);
    }
  }
  else
  {
    int v8 = capabilities::trace::allowed(v4);
    v15[0] = 0;
    *(void *)((char *)v15 + 7) = 0;
    std::to_string(&v13, v8);
    v15[0] = v13.__r_.__value_.__l.__size_;
    std::string::size_type v9 = v13.__r_.__value_.__r.__words[0];
    *(void *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 7);
    char v10 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    uint64_t v11 = v15[0];
    *(void *)a2 = v9;
    *(void *)(a2 + 8) = v11;
    *(void *)(a2 + 15) = *(void *)((char *)v15 + 7);
    *(unsigned char *)(a2 + 23) = v10;
  }
  return v5 == 0;
}

void sub_1A61D61BC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1A61D6168);
    }
    JUMPOUT(0x1A61D6170);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::ipc::get(char *a1, uint64_t a2)
{
  v18[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    uint64_t v6 = *(const char **)a1;
    int v4 = (capabilities::ipc *)strcasecmp(*(const char **)a1, "Enabled");
    if (v4)
    {
      int v5 = (capabilities::ipc *)strcasecmp(v6, "History");
      if (v5) {
        goto LABEL_4;
      }
LABEL_9:
      int v8 = capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(v5);
      memset(v18, 0, 15);
      std::to_string(&v16, v8);
      goto LABEL_13;
    }
LABEL_10:
    std::string::size_type v9 = (capabilities::trace *)capabilities::ipc::supportsPCI(v4);
    if (v9) {
      LODWORD(v9) = capabilities::trace::enabledByDefault(v9);
    }
    memset(v18, 0, 15);
    std::to_string(&v16, (int)v9);
    goto LABEL_13;
  }
  int v4 = (capabilities::ipc *)strcasecmp(a1, "Enabled");
  if (!v4) {
    goto LABEL_10;
  }
  int v5 = (capabilities::ipc *)strcasecmp(a1, "History");
  uint64_t v6 = a1;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_4:
  unint64_t v7 = (capabilities::ipc *)strcasecmp(v6, "BufferCount");
  if (!v7 && capabilities::ipc::supportsPCI(v7))
  {
    memset(v18, 0, 15);
    std::to_string(&v16, 4uLL);
LABEL_13:
    v18[0] = v16.__r_.__value_.__l.__size_;
    std::string::size_type v10 = v16.__r_.__value_.__r.__words[0];
    *(void *)((char *)v18 + 7) = *(std::string::size_type *)((char *)&v16.__r_.__value_.__r.__words[1] + 7);
    char v11 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    uint64_t v12 = v18[0];
    *(void *)a2 = v10;
    *(void *)(a2 + 8) = v12;
    *(void *)(a2 + 15) = *(void *)((char *)v18 + 7);
    *(unsigned char *)(a2 + 23) = v11;
    return 1;
  }
  int v14 = GetOsLogContext()[1];
  BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (result)
  {
    if (a1[23] >= 0) {
      int v15 = a1;
    }
    else {
      int v15 = *(char **)a1;
    }
    LODWORD(v16.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v16.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
    WORD2(v16.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v16.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"IPC";
    HIWORD(v16.__r_.__value_.__r.__words[2]) = 2080;
    int v17 = v15;
    _os_log_error_impl(&dword_1A609F000, v14, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
      (uint8_t *)&v16,
      0x20u);
    return 0;
  }
  return result;
}

void sub_1A61D63FC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1A61D62F4);
    }
    JUMPOUT(0x1A61D62FCLL);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::bbipc::get(char *a1, uint64_t a2)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    uint64_t v6 = *(const char **)a1;
    int v4 = (capabilities::trace *)strcasecmp(*(const char **)a1, "Enabled");
    if (v4)
    {
      int v5 = (capabilities::ipc *)strcasecmp(v6, "LogLevel");
      if (v5) {
        goto LABEL_4;
      }
LABEL_12:
      int v11 = capabilities::ipc::defaultLogLevel(v5);
      v19[0] = 0;
      *(void *)((char *)v19 + 7) = 0;
      std::to_string(&v17, v11);
      goto LABEL_15;
    }
LABEL_13:
    int v12 = capabilities::trace::enabledByDefault(v4);
    v19[0] = 0;
    *(void *)((char *)v19 + 7) = 0;
    std::to_string(&v17, v12);
    goto LABEL_15;
  }
  int v4 = (capabilities::trace *)strcasecmp(a1, "Enabled");
  if (!v4) {
    goto LABEL_13;
  }
  int v5 = (capabilities::ipc *)strcasecmp(a1, "LogLevel");
  uint64_t v6 = a1;
  if (!v5) {
    goto LABEL_12;
  }
LABEL_4:
  unint64_t v7 = (capabilities::ipc *)strcasecmp(v6, "PayloadSize");
  if (v7)
  {
    int v8 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (result)
    {
      if (a1[23] >= 0) {
        std::string::size_type v10 = a1;
      }
      else {
        std::string::size_type v10 = *(char **)a1;
      }
      LODWORD(v17.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v17.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v17.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"BasebandIPC";
      HIWORD(v17.__r_.__value_.__r.__words[2]) = 2080;
      std::string::size_type v18 = v10;
      _os_log_error_impl(&dword_1A609F000, v8, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v17,
        0x20u);
      return 0;
    }
    return result;
  }
  int v13 = capabilities::ipc::defaultMHIConfigPayloadSizeBytes(v7);
  v19[0] = 0;
  *(void *)((char *)v19 + 7) = 0;
  std::to_string(&v17, v13);
LABEL_15:
  v19[0] = v17.__r_.__value_.__l.__size_;
  std::string::size_type v14 = v17.__r_.__value_.__r.__words[0];
  *(void *)((char *)v19 + 7) = *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 7);
  char v15 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v16 = v19[0];
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v16;
  *(void *)(a2 + 15) = *(void *)((char *)v19 + 7);
  *(unsigned char *)(a2 + 23) = v15;
  return 1;
}

void sub_1A61D661C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1A61D65CCLL);
    }
    JUMPOUT(0x1A61D65D4);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::compression::get(char *a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    int v4 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, "Mode")) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
    if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)) {
      int CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
    }
    else {
      int CompressionMode = 2;
    }
    std::to_string(&v10, CompressionMode);
    goto LABEL_16;
  }
  int v4 = a1;
  if (!strcasecmp(a1, "Mode")) {
    goto LABEL_10;
  }
LABEL_3:
  if (strcasecmp(v4, "SplitArchive"))
  {
    int v5 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      if (a1[23] >= 0) {
        unint64_t v7 = a1;
      }
      else {
        unint64_t v7 = *(char **)a1;
      }
      LODWORD(v10.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v10.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v10.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v10.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"Compression";
      HIWORD(v10.__r_.__value_.__r.__words[2]) = 2080;
      int v11 = v7;
      _os_log_error_impl(&dword_1A609F000, v5, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v10,
        0x20u);
      return 0;
    }
    return result;
  }
  std::to_string(&v10, 0);
LABEL_16:
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(std::string *)a2 = v10;
  return 1;
}

BOOL defaults::ttr::get(char *a1, uint64_t a2)
{
  void v14[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    int v4 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, "Mode")) {
      goto LABEL_3;
    }
LABEL_10:
    if (TelephonyUtilIsInternalBuild()) {
      int IsCarrierBuild = 1;
    }
    else {
      int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    }
    memset(v14, 0, 15);
    std::to_string(&v12, IsCarrierBuild);
    goto LABEL_15;
  }
  int v4 = a1;
  if (!strcasecmp(a1, "Mode")) {
    goto LABEL_10;
  }
LABEL_3:
  if (strcasecmp(v4, "AgeLimit"))
  {
    int v5 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      if (a1[23] >= 0) {
        unint64_t v7 = a1;
      }
      else {
        unint64_t v7 = *(char **)a1;
      }
      LODWORD(v12.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v12.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"TTR";
      HIWORD(v12.__r_.__value_.__r.__words[2]) = 2080;
      int v13 = v7;
      _os_log_error_impl(&dword_1A609F000, v5, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v12,
        0x20u);
      return 0;
    }
    return result;
  }
  memset(v14, 0, 15);
  std::to_string(&v12, 43200);
LABEL_15:
  v14[0] = v12.__r_.__value_.__l.__size_;
  std::string::size_type v9 = v12.__r_.__value_.__r.__words[0];
  *(void *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 7);
  char v10 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v11 = v14[0];
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 15) = *(void *)((char *)v14 + 7);
  *(unsigned char *)(a2 + 23) = v10;
  return 1;
}

void sub_1A61D6998(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1A61D6948);
    }
    JUMPOUT(0x1A61D6950);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::logfilter::get(char *a1, uint64_t a2)
{
  void v15[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    int v4 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, "FreeSpace"))
    {
      if (strcasecmp(v4, "MaxLogLimit")) {
        goto LABEL_4;
      }
LABEL_12:
      memset(v15, 0, 15);
      std::to_string(&v13, -1);
      goto LABEL_15;
    }
LABEL_13:
    memset(v15, 0, 15);
    std::to_string(&v13, 512);
    goto LABEL_15;
  }
  if (!strcasecmp(a1, "FreeSpace")) {
    goto LABEL_13;
  }
  int v4 = a1;
  if (!strcasecmp(a1, "MaxLogLimit")) {
    goto LABEL_12;
  }
LABEL_4:
  int v5 = (capabilities::trace *)strcasecmp(v4, "DuplicateSignatureDetection");
  if (v5)
  {
    uint64_t v6 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (result)
    {
      if (a1[23] >= 0) {
        int v8 = a1;
      }
      else {
        int v8 = *(char **)a1;
      }
      LODWORD(v13.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v13.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v13.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"LogFilter";
      HIWORD(v13.__r_.__value_.__r.__words[2]) = 2080;
      std::string::size_type v14 = v8;
      _os_log_error_impl(&dword_1A609F000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v13,
        0x20u);
      return 0;
    }
    return result;
  }
  int v9 = capabilities::trace::supportsDuplicateSignatureDetection(v5);
  memset(v15, 0, 15);
  std::to_string(&v13, v9);
LABEL_15:
  v15[0] = v13.__r_.__value_.__l.__size_;
  std::string::size_type v10 = v13.__r_.__value_.__r.__words[0];
  *(void *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 7);
  char v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v12 = v15[0];
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = v12;
  *(void *)(a2 + 15) = *(void *)((char *)v15 + 7);
  *(unsigned char *)(a2 + 23) = v11;
  return 1;
}

void sub_1A61D6BA8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1A61D6B58);
    }
    JUMPOUT(0x1A61D6B60);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::systemlogs::get(char *a1, uint64_t a2)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    int v5 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, "Mode"))
    {
      int v4 = (capabilities::abs *)strcasecmp(v5, "History");
      if (v4) {
        goto LABEL_4;
      }
LABEL_12:
      int v9 = capabilities::abs::defaultSystemLogsHistory(v4);
      v16[0] = 0;
      *(void *)((char *)v16 + 7) = 0;
      std::to_string(&v14, v9);
      goto LABEL_18;
    }
LABEL_13:
    if (TelephonyUtilIsInternalBuild()) {
      int IsCarrierBuild = 1;
    }
    else {
      int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    }
    *(void *)((char *)v16 + 7) = 0;
    v16[0] = 0;
    std::to_string(&v14, IsCarrierBuild);
    goto LABEL_18;
  }
  if (!strcasecmp(a1, "Mode")) {
    goto LABEL_13;
  }
  int v4 = (capabilities::abs *)strcasecmp(a1, "History");
  int v5 = a1;
  if (!v4) {
    goto LABEL_12;
  }
LABEL_4:
  if (strcasecmp(v5, "UserConfirmation"))
  {
    uint64_t v6 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (result)
    {
      if (a1[23] >= 0) {
        int v8 = a1;
      }
      else {
        int v8 = *(char **)a1;
      }
      LODWORD(v14.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v14.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v14.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"SystemLogs";
      HIWORD(v14.__r_.__value_.__r.__words[2]) = 2080;
      char v15 = v8;
      _os_log_error_impl(&dword_1A609F000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v14,
        0x20u);
      return 0;
    }
    return result;
  }
  *(void *)((char *)v16 + 7) = 0;
  v16[0] = 0;
  std::to_string(&v14, 1);
LABEL_18:
  v16[0] = v14.__r_.__value_.__l.__size_;
  std::string::size_type v11 = v14.__r_.__value_.__r.__words[0];
  *(void *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 7);
  char v12 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v13 = v16[0];
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v13;
  *(void *)(a2 + 15) = *(void *)((char *)v16 + 7);
  *(unsigned char *)(a2 + 23) = v12;
  return 1;
}

void sub_1A61D6DD8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1A61D6D88);
    }
    JUMPOUT(0x1A61D6D90);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::profile::get(char *a1, uint64_t a2)
{
  v13[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    int v4 = *(const char **)a1;
    if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C0E0])) {
      goto LABEL_10;
    }
  }
  else
  {
    int v4 = a1;
    if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C0E0])) {
      goto LABEL_10;
    }
  }
  if (strcasecmp(v4, "InstalledCarrierProfileVersion"))
  {
    int v5 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      if (a1[23] >= 0) {
        unint64_t v7 = a1;
      }
      else {
        unint64_t v7 = *(char **)a1;
      }
      LODWORD(v11.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v11.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v11.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v11.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"Profile";
      HIWORD(v11.__r_.__value_.__r.__words[2]) = 2080;
      char v12 = v7;
      _os_log_error_impl(&dword_1A609F000, v5, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v11,
        0x20u);
      return 0;
    }
    return result;
  }
LABEL_10:
  memset(v13, 0, 15);
  std::to_string(&v11, 0);
  v13[0] = v11.__r_.__value_.__l.__size_;
  std::string::size_type v8 = v11.__r_.__value_.__r.__words[0];
  *(void *)((char *)v13 + 7) = *(std::string::size_type *)((char *)&v11.__r_.__value_.__r.__words[1] + 7);
  char v9 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v10 = v13[0];
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = v10;
  *(void *)(a2 + 15) = *(void *)((char *)v13 + 7);
  *(unsigned char *)(a2 + 23) = v9;
  return 1;
}

void sub_1A61D6FBC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1A61D6F6CLL);
    }
    JUMPOUT(0x1A61D6F74);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::tailspin::get(const char *a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)a1;
  v13[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  int v4 = strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C0E0]);
  if (v4)
  {
    int v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)v3 + 23) >= 0) {
        uint64_t v6 = v3;
      }
      else {
        uint64_t v6 = (uint64_t *)*v3;
      }
      LODWORD(v11.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v11.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v11.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v11.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"Tailspin";
      HIWORD(v11.__r_.__value_.__r.__words[2]) = 2080;
      char v12 = v6;
      _os_log_error_impl(&dword_1A609F000, v5, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v11,
        0x20u);
    }
  }
  else
  {
    memset(v13, 0, 15);
    std::to_string(&v11, 0);
    v13[0] = v11.__r_.__value_.__l.__size_;
    std::string::size_type v7 = v11.__r_.__value_.__r.__words[0];
    *(void *)((char *)v13 + 7) = *(std::string::size_type *)((char *)&v11.__r_.__value_.__r.__words[1] + 7);
    char v8 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    uint64_t v9 = v13[0];
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 15) = *(void *)((char *)v13 + 7);
    *(unsigned char *)(a2 + 23) = v8;
  }
  return v4 == 0;
}

void sub_1A61D714C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1A61D70F8);
    }
    JUMPOUT(0x1A61D7100);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::tracesettings::get(char *a1, std::string *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (!strcasecmp(a1, "SettingsVersion"))
    {
LABEL_17:
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        a2->__r_.__value_.__l.__size_ = 1;
        a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&a2->__r_.__value_.__s + 23) = 1;
      }
      LOWORD(a2->__r_.__value_.__l.__data_) = 48;
      return 1;
    }
    if (strcasecmp(a1, "SettingsSelected"))
    {
      int v4 = a1;
      if (strcasecmp(a1, "Time")) {
        goto LABEL_5;
      }
      goto LABEL_14;
    }
LABEL_19:
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(a2->__r_.__value_.__l.__data_);
    }
    strcpy((char *)a2, "Default");
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = 7;
    return 1;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "SettingsVersion")) {
    goto LABEL_17;
  }
  if (!strcasecmp(v4, "SettingsSelected")) {
    goto LABEL_19;
  }
  if (!strcasecmp(v4, "Time"))
  {
LABEL_14:
    if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild()) {
      char v8 = "1";
    }
    else {
      char v8 = "3";
    }
    std::string::__assign_external(a2, v8);
    return 1;
  }
LABEL_5:
  if (!strcasecmp(v4, "SettingsDevice")) {
    goto LABEL_17;
  }
  int v5 = GetOsLogContext()[1];
  BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (result)
  {
    if (a1[23] >= 0) {
      std::string::size_type v7 = a1;
    }
    else {
      std::string::size_type v7 = *(char **)a1;
    }
    int v9 = 136315650;
    uint64_t v10 = "prop.default";
    __int16 v11 = 2080;
    char v12 = "Settings";
    __int16 v13 = 2080;
    std::string v14 = v7;
    _os_log_error_impl(&dword_1A609F000, v5, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
      (uint8_t *)&v9,
      0x20u);
    return 0;
  }
  return result;
}

uint64_t defaults::bbtrace::mode(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::resetModeOnAPBoot(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::history(defaults::bbtrace *this)
{
  return capabilities::trace::defaultHistorySizeMB(this);
}

double util::to_str<diag::config::DuringAPSleep>(std::string *a1)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v3, 0);
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_1A61D7438(void *a1)
{
}

void sub_1A61D7444(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::enabled_during_sleep(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::buffering_on_ap_wake(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::stall_detection(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::stall_retries(defaults::bbtrace *this)
{
  return 3;
}

double util::to_str<diag::config::Recovery>(std::string *a1)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v3, 0);
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_1A61D74CC(void *a1)
{
}

void sub_1A61D74D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::stall_recovery(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::keep_scratch_logs(defaults::bbtrace *this)
{
  return 0;
}

const char *defaults::bbtrace::primary_dmc(defaults::bbtrace *this)
{
  if (config::hw::watch(this)) {
    return "Lite";
  }
  else {
    return "Default";
  }
}

const char *defaults::bbtrace::secondary_dmc(defaults::bbtrace *this)
{
  uint64_t v1 = (config::hw *)capabilities::radio::ice(this);
  if (!v1) {
    return "None";
  }
  if (config::hw::watch(v1)) {
    return "Lite";
  }
  return "Default";
}

const char *defaults::bbtrace::extra_dmc(defaults::bbtrace *this)
{
  return "None";
}

const char *defaults::bbtrace::sleep_dmc(defaults::bbtrace *this)
{
  return "Sleep";
}

uint64_t defaults::bbtrace::max_memory_file_count(defaults::bbtrace *this)
{
  return capabilities::trace::defaultMemoryFileMaxCount(this);
}

uint64_t defaults::bbtrace::high_water_mark(defaults::bbtrace *this)
{
  if (capabilities::radio::ice(this)) {
    return 80;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t defaults::bbtrace::low_water_mark(defaults::bbtrace *this)
{
  if (capabilities::radio::ice(this)) {
    return 1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t defaults::bbtrace::carrier_logging_allowed(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::file_size(defaults::bbtrace *this)
{
  return capabilities::trace::defaultFileSizeBytes(this);
}

uint64_t defaults::bbtrace::transport_read_size(defaults::bbtrace *this)
{
  uint64_t v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v1)) {
    return 0x4000;
  }
  else {
    return 0x8000;
  }
}

uint64_t defaults::bbtrace::transport_read_count(defaults::bbtrace *this)
{
  uint64_t v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if ((v1 - 1) > 2) {
    int v2 = 23;
  }
  else {
    int v2 = dword_1A61FC210[(int)v1 - 1];
  }
  char shouldUseMinBasebandTransportIOReadCount = capabilities::abs::shouldUseMinBasebandTransportIOReadCount(v1);
  if (v2 == 15) {
    int v4 = 36;
  }
  else {
    int v4 = 4;
  }
  if (v2 == 16) {
    int v5 = 36;
  }
  else {
    int v5 = v4;
  }
  if (v2 == 2) {
    unsigned int v6 = 16;
  }
  else {
    unsigned int v6 = v5;
  }
  if (shouldUseMinBasebandTransportIOReadCount) {
    return 4;
  }
  else {
    return v6;
  }
}

uint64_t defaults::bbtrace::privacyLevel(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::error_handling(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::live_filter(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::min_file_size(defaults::bbtrace *this)
{
  uint64_t v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v1)) {
    return 0x4000;
  }
  else {
    return 0x8000;
  }
}

capabilities::trace *defaults::ipc::enabled(defaults::ipc *this)
{
  double result = (capabilities::trace *)capabilities::ipc::supportsPCI(this);
  if (result)
  {
    return (capabilities::trace *)capabilities::trace::enabledByDefault(result);
  }
  return result;
}

uint64_t defaults::ipc::history(defaults::ipc *this)
{
  return capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(this);
}

uint64_t defaults::ipc::buffer_count(defaults::ipc *this)
{
  return 4;
}

uint64_t defaults::bbipc::mhiConfigPayloadSize(defaults::bbipc *this)
{
  return capabilities::ipc::defaultMHIConfigPayloadSizeBytes(this);
}

uint64_t defaults::logfilter::free_space_limit(defaults::logfilter *this)
{
  return 512;
}

uint64_t defaults::logfilter::max_log_limit(defaults::logfilter *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t defaults::helper::supported(defaults::helper *this)
{
  return 1;
}

uint64_t defaults::compression::mode(defaults::compression *this)
{
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) == 0)
  {
    uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild();
    if (!IsInternalBuild) {
      return 2;
    }
  }

  return capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
}

uint64_t defaults::compression::splitArchive(defaults::compression *this)
{
  return 0;
}

uint64_t defaults::compression::supported(defaults::compression *this)
{
  return 1;
}

uint64_t defaults::ttr::mode(defaults::ttr *this)
{
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }
  else {
    return TelephonyUtilIsCarrierBuild();
  }
}

uint64_t defaults::ttr::agelimit(defaults::ttr *this)
{
  return 43200;
}

uint64_t defaults::ttr::supported(defaults::ttr *this)
{
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }

  return TelephonyUtilIsCarrierBuild();
}

uint64_t defaults::systemlogs::mode(defaults::systemlogs *this)
{
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }
  else {
    return TelephonyUtilIsCarrierBuild();
  }
}

uint64_t defaults::systemlogs::history(defaults::systemlogs *this)
{
  return capabilities::abs::defaultSystemLogsHistory(this);
}

uint64_t defaults::systemlogs::userConfirmationRequired(defaults::systemlogs *this)
{
  return 1;
}

uint64_t defaults::systemlogs::supported(defaults::systemlogs *this)
{
  return 1;
}

uint64_t defaults::profile::enabled(defaults::profile *this)
{
  return 0;
}

uint64_t defaults::profile::version(defaults::profile *this)
{
  return 0;
}

uint64_t defaults::tailspin::enabled(defaults::tailspin *this)
{
  return 0;
}

void defaults::tracesettings::config(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "Default");
}

void *support::log::delegate::context::create@<X0>(support::log::delegate::context *this@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  int v5 = operator new(0x10uLL);
  void *v5 = &unk_1EFB0FF78;
  v5[1] = this;
  *a2 = v5;
  double result = operator new(0x20uLL);
  void *result = &unk_1EFB10170;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[1] = result;
  return result;
}

void sub_1A61D7974(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *support::log::delegate::context::context(void *this, void *a2)
{
  *this = &unk_1EFB0FF78;
  this[1] = a2;
  return this;
}

{
  *this = &unk_1EFB0FF78;
  this[1] = a2;
  return this;
}

uint64_t support::log::delegate::delegate(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *(void *)double result = &unk_1EFB0FF98;
  *(void *)(result + 8) = v3;
  *(void *)(result + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(result + 24) = 1;
  return result;
}

uint64_t support::log::delegate::get_context@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (*(unsigned char *)(this + 24))
  {
    uint64_t v2 = *(void *)(this + 16);
    *(void *)a2 = *(void *)(this + 8);
    *(void *)(a2 + 8) = v2;
    if (v2) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a2 + 16) = 1;
  }
  return this;
}

uint64_t support::log::manager::parameters::parameters(uint64_t result, char a2)
{
  *(void *)double result = &unk_1EFB0FFC8;
  *(unsigned char *)(result + 8) = a2;
  return result;
}

{
  *(void *)double result = &unk_1EFB0FFC8;
  *(unsigned char *)(result + 8) = a2;
  return result;
}

uint64_t support::log::manager::parameters::parameters(uint64_t this)
{
  *(void *)this = &unk_1EFB0FFC8;
  *(unsigned char *)(this + 8) = 3;
  return this;
}

{
  *(void *)this = &unk_1EFB0FFC8;
  *(unsigned char *)(this + 8) = 3;
  return this;
}

uint64_t support::log::manager::parameters::set_defaults(uint64_t this)
{
  *(unsigned char *)(this + 8) = 3;
  return this;
}

uint64_t support::log::manager::manager(uint64_t a1, std::string *a2, uint64_t a3, void *a4)
{
  *(void *)a1 = &unk_1EFB0FFE0;
  *(void *)(a1 + 8) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  std::string v18 = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  char v17 = 12;
  strcpy(__s, ".log_manager");
  std::string::size_type v7 = std::string::append(&v18, __s, 0xCuLL);
  char v8 = (const char *)(a1 + 72);
  long long v9 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  *(void *)(a1 + 88) = *((void *)&v7->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 72) = v9;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((v17 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  operator delete(*(void **)__s);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
LABEL_3:
  if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
    goto LABEL_4;
  }
LABEL_9:
  char v8 = *(const char **)v8;
LABEL_4:
  *(void *)(a1 + 96) = os_log_create("com.apple.telephony.basebandservices", v8);
  *(void *)(a1 + 104) = &unk_1EFB0FFC8;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a3 + 8);
  *(void *)(a1 + 120) = a1 + 120;
  *(void *)(a1 + 128) = a1 + 120;
  *(void *)(a1 + 136) = 0;
  uint64_t v10 = a4[2];
  if (v10)
  {
    uint64_t v12 = *a4;
    __int16 v11 = (uint64_t *)a4[1];
    uint64_t v13 = *v11;
    *(void *)(v13 + 8) = *(void *)(*a4 + 8);
    **(void **)(v12 + 8) = v13;
    uint64_t v14 = *(void *)(a1 + 120);
    *(void *)(v14 + 8) = v11;
    uint64_t *v11 = v14;
    *(void *)(a1 + 120) = v12;
    *(void *)(v12 + 8) = a1 + 120;
    *(void *)(a1 + 136) = v10;
    a4[2] = 0;
  }
  return a1;
}

void sub_1A61D7C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      std::mutex::~mutex(v21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  std::mutex::~mutex(v21);
  _Unwind_Resume(a1);
}

uint64_t support::log::manager::manager(uint64_t a1, std::string *a2, uint64_t a3, uint64_t *a4)
{
  std::string __p = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v15 = (uint64_t)&v15;
  uint64_t v16 = &v15;
  uint64_t v17 = 0;
  support::log::manager::manager(a1, &__p, a3, &v15);
  if (v17)
  {
    uint64_t v6 = v15;
    std::string::size_type v7 = v16;
    uint64_t v8 = *v16;
    *(void *)(v8 + 8) = *(void *)(v15 + 8);
    **(void **)(v6 + 8) = v8;
    uint64_t v17 = 0;
    if (v7 != &v15)
    {
      do
      {
        uint64_t v10 = (uint64_t *)v7[1];
        uint64_t v9 = v7[2];
        _DWORD v7[2] = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
        operator delete(v7);
        std::string::size_type v7 = v10;
      }
      while (v10 != &v15);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*a4) {
      return a1;
    }
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*a4)
  {
LABEL_10:
    std::mutex::lock((std::mutex *)(a1 + 8));
    __int16 v11 = operator new(0x18uLL);
    uint64_t v12 = *a4;
    *a4 = 0;
    uint64_t v13 = *(void *)(a1 + 120);
    v11[1] = a1 + 120;
    v11[2] = v12;
    void *v11 = v13;
    *(void *)(v13 + 8) = v11;
    *(void *)(a1 + 120) = v11;
    ++*(void *)(a1 + 136);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
  return a1;
}

{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::string __p;

  std::string __p = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v15 = (uint64_t)&v15;
  uint64_t v16 = &v15;
  uint64_t v17 = 0;
  support::log::manager::manager(a1, &__p, a3, &v15);
  if (v17)
  {
    uint64_t v6 = v15;
    std::string::size_type v7 = v16;
    uint64_t v8 = *v16;
    *(void *)(v8 + 8) = *(void *)(v15 + 8);
    **(void **)(v6 + 8) = v8;
    uint64_t v17 = 0;
    if (v7 != &v15)
    {
      do
      {
        uint64_t v10 = (uint64_t *)v7[1];
        uint64_t v9 = v7[2];
        _DWORD v7[2] = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
        operator delete(v7);
        std::string::size_type v7 = v10;
      }
      while (v10 != &v15);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*a4) {
      return a1;
    }
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*a4)
  {
LABEL_10:
    std::mutex::lock((std::mutex *)(a1 + 8));
    __int16 v11 = operator new(0x18uLL);
    uint64_t v12 = *a4;
    *a4 = 0;
    uint64_t v13 = *(void *)(a1 + 120);
    v11[1] = a1 + 120;
    v11[2] = v12;
    void *v11 = v13;
    *(void *)(v13 + 8) = v11;
    *(void *)(a1 + 120) = v11;
    ++*(void *)(a1 + 136);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
  return a1;
}

void sub_1A61D7E28(_Unwind_Exception *a1)
{
  std::mutex::unlock(v2);
  support::log::manager::~manager(v1);
  _Unwind_Resume(a1);
}

void sub_1A61D7E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::list<std::unique_ptr<support::log::delegate>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        std::string::size_type v7 = (uint64_t *)v3[1];
        uint64_t v6 = v3[2];
        void v3[2] = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v3);
        uint64_t v3 = v7;
      }
      while (v7 != a1);
    }
  }
  return a1;
}

void support::log::manager::add_delegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (void *)a1;
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  int v5 = operator new(0x18uLL);
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v3[15];
  v3 += 15;
  v5[1] = v3;
  void v5[2] = v6;
  void *v5 = v7;
  *(void *)(v7 + 8) = v5;
  *uint64_t v3 = v5;
  ++v3[2];

  std::mutex::unlock(v4);
}

void sub_1A61D7F8C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void support::log::manager::~manager(support::log::manager *this)
{
  *(void *)this = &unk_1EFB0FFE0;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(void *)this = &unk_1EFB0FFE0;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t vars8;

  *(void *)this = &unk_1EFB0FFE0;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));

  operator delete(this);
}

void sub_1A61D81CC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v2);
  support::log::manager::~manager(v1);
  _Unwind_Resume(a1);
}

void sub_1A61D81F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void support::log::manager::create(std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = operator new(0x90uLL);
  std::string __p = *a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  support::log::manager::manager((uint64_t)v8, &__p, a2, a3);
  *a4 = v8;
  uint64_t v9 = operator new(0x20uLL);
  void *v9 = &unk_1EFB10258;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  a4[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v10 = (void *)__p.__r_.__value_.__r.__words[0];
    operator delete(v10);
  }
}

void sub_1A61D83D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void support::log::manager::create(std::string *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = operator new(0x90uLL);
  std::string __p = *a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  support::log::manager::manager((uint64_t)v8, &__p, a2, a3);
  *a4 = v8;
  uint64_t v9 = operator new(0x20uLL);
  void *v9 = &unk_1EFB10258;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  a4[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v10 = (void *)__p.__r_.__value_.__r.__words[0];
    operator delete(v10);
  }
}

void sub_1A61D8520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t support::log::manager::get_level(support::log::manager *this)
{
  return *((unsigned __int8 *)this + 112);
}

void support::log::manager::set_level(uint64_t a1, unsigned int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v5 = *(NSObject **)(a1 + 96);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v6 = *(unsigned __int8 *)(a1 + 112);
    if (v6 > 6)
    {
      uint64_t v7 = "???";
      if (a2 > 6) {
        goto LABEL_4;
      }
    }
    else
    {
      if (a2 > 6)
      {
LABEL_4:
        uint64_t v8 = "???";
LABEL_7:
        int v9 = 136315394;
        uint64_t v10 = v7;
        __int16 v11 = 2080;
        uint64_t v12 = v8;
        _os_log_impl(&dword_1A609F000, v5, OS_LOG_TYPE_DEFAULT, "setting log level %s -> %s", (uint8_t *)&v9, 0x16u);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  *(unsigned char *)(a1 + 112) = a2;
  std::mutex::unlock(v4);
}

uint64_t support::log::buffer::borrow(support::log::buffer *this)
{
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_1E96B8A18)
  {
    uint64_t v1 = (char *)operator new(0xA8uLL);
    *((void *)v1 + 1) = 0;
    *((void *)v1 + 2) = 0;
    *(void *)uint64_t v1 = &unk_1EFB101C0;
    uint64_t v2 = (uint64_t)(v1 + 24);
    *((void *)v1 + 3) = &unk_1EFB10210;
    *((void *)v1 + 4) = 850045863;
    *(_OWORD *)(v1 + 40) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    *((void *)v1 + 14) = 0;
    *((void *)v1 + 13) = 0;
    *((void *)v1 + 11) = 0;
    *((void *)v1 + 12) = v1 + 104;
    *(_OWORD *)(v1 + 120) = 0u;
    *(_OWORD *)(v1 + 136) = 0u;
    *(_OWORD *)(v1 + 152) = 0u;
    uint64_t v3 = (std::__shared_weak_count *)off_1E96B8A20;
    qword_1E96B8A18 = (uint64_t)(v1 + 24);
    off_1E96B8A20 = v1;
    if (!v3)
    {
      std::string v18 = (std::__shared_weak_count *)v1;
      goto LABEL_8;
    }
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  uint64_t v2 = qword_1E96B8A18;
  uint64_t v1 = (char *)off_1E96B8A20;
  std::string v18 = (std::__shared_weak_count *)off_1E96B8A20;
  if (off_1E96B8A20) {
LABEL_8:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v1 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  std::mutex::lock((std::mutex *)(v2 + 8));
  uint64_t v4 = *(void *)(v2 + 136);
  if (v4)
  {
    uint64_t v5 = (void *)(v2 + 128);
    unint64_t v6 = *(void ***)(v2 + 104);
    uint64_t v7 = (*(void **)((char *)v6 + ((*(void *)(v2 + 128) >> 6) & 0x3FFFFFFFFFFFFF8)))[*(void *)(v2 + 128) & 0x1FFLL];
    unint64_t v8 = *(void *)(v2 + 128) + 1;
    *(void *)(v2 + 128) = v8;
    *(void *)(v2 + 136) = v4 - 1;
    if (v8 >= 0x400)
    {
      operator delete(*v6);
      *(void *)(v2 + 104) += 8;
      uint64_t v9 = -512;
LABEL_23:
      *v5 += v9;
    }
  }
  else
  {
    uint64_t v10 = malloc_type_malloc(0x400uLL, 0x45F1E4C6uLL);
    uint64_t v7 = (uint64_t)v10;
    if (v10)
    {
      uint64_t v12 = (uint64_t **)(v2 + 80);
      __int16 v11 = *(uint64_t **)(v2 + 80);
      if (!v11)
      {
        uint64_t v13 = (uint64_t **)(v2 + 80);
LABEL_20:
        uint64_t v15 = (uint64_t *)operator new(0x28uLL);
        void v15[4] = v7;
        *uint64_t v15 = 0;
        v15[1] = 0;
        void v15[2] = (uint64_t)v13;
        *uint64_t v12 = v15;
        uint64_t v16 = **(void **)(v2 + 72);
        if (v16)
        {
          *(void *)(v2 + 72) = v16;
          uint64_t v15 = *v12;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 80), v15);
        uint64_t v5 = (void *)(v2 + 88);
        uint64_t v9 = 1;
        goto LABEL_23;
      }
      while (1)
      {
        while (1)
        {
          uint64_t v13 = (uint64_t **)v11;
          unint64_t v14 = v11[4];
          if ((unint64_t)v10 >= v14) {
            break;
          }
          __int16 v11 = *v13;
          uint64_t v12 = v13;
          if (!*v13) {
            goto LABEL_20;
          }
        }
        if (v14 >= (unint64_t)v10) {
          break;
        }
        __int16 v11 = v13[1];
        if (!v11)
        {
          uint64_t v12 = v13 + 1;
          goto LABEL_20;
        }
      }
    }
  }
  std::mutex::unlock((std::mutex *)(v2 + 8));
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  return v7;
}

void sub_1A61D8948(_Unwind_Exception *a1)
{
}

void sub_1A61D8964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A61D8980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void support::log::manager::release_log_buffer(support::log::manager *this, char *a2)
{
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_1E96B8A18) {
    goto LABEL_2;
  }
  uint64_t v3 = (char *)operator new(0xA8uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = &unk_1EFB101C0;
  uint64_t v4 = (uint64_t)(v3 + 24);
  *((void *)v3 + 3) = &unk_1EFB10210;
  *((void *)v3 + 4) = 850045863;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *((void *)v3 + 14) = 0;
  *((void *)v3 + 13) = 0;
  *((void *)v3 + 11) = 0;
  *((void *)v3 + 12) = v3 + 104;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  uint64_t v5 = (std::__shared_weak_count *)off_1E96B8A20;
  qword_1E96B8A18 = (uint64_t)(v3 + 24);
  off_1E96B8A20 = v3;
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
LABEL_2:
    uint64_t v4 = qword_1E96B8A18;
    uint64_t v3 = (char *)off_1E96B8A20;
    if (!off_1E96B8A20) {
      goto LABEL_8;
    }
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 1, 1uLL, memory_order_relaxed);
LABEL_8:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  unint64_t v8 = *(void **)(v4 + 80);
  uint64_t v7 = v4 + 80;
  unint64_t v6 = v8;
  if (!v8) {
    goto LABEL_19;
  }
  uint64_t v9 = (void *)v7;
  do
  {
    unint64_t v10 = v6[4];
    BOOL v11 = v10 >= (unint64_t)a2;
    if (v10 >= (unint64_t)a2) {
      uint64_t v12 = v6;
    }
    else {
      uint64_t v12 = v6 + 1;
    }
    if (v11) {
      uint64_t v9 = v6;
    }
    unint64_t v6 = (void *)*v12;
  }
  while (*v12);
  if (v9 == (void *)v7 || v9[4] > (unint64_t)a2) {
LABEL_19:
  }
    uint64_t v9 = (void *)v7;
  if (!v3 || atomic_fetch_add((atomic_ullong *volatile)v3 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v9 != (void *)v7) {
      goto LABEL_23;
    }
LABEL_27:
    free(a2);
    return;
  }
  (*(void (**)(char *))(*(void *)v3 + 16))(v3);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
  if (v9 == (void *)v7) {
    goto LABEL_27;
  }
LABEL_23:
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_1E96B8A18)
  {
    uint64_t v13 = (char *)operator new(0xA8uLL);
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = 0;
    *(void *)uint64_t v13 = &unk_1EFB101C0;
    *((void *)v13 + 3) = &unk_1EFB10210;
    *((void *)v13 + 4) = 850045863;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *((void *)v13 + 14) = 0;
    *((void *)v13 + 13) = 0;
    *((void *)v13 + 11) = 0;
    *((void *)v13 + 12) = v13 + 104;
    *(_OWORD *)(v13 + 120) = 0u;
    *(_OWORD *)(v13 + 136) = 0u;
    *(_OWORD *)(v13 + 152) = 0u;
    unint64_t v14 = (std::__shared_weak_count *)off_1E96B8A20;
    qword_1E96B8A18 = (uint64_t)(v13 + 24);
    off_1E96B8A20 = v13;
    if (!v14)
    {
      char v135 = (std::__shared_weak_count *)v13;
      goto LABEL_34;
    }
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  uint64_t v13 = (char *)off_1E96B8A20;
  char v135 = (std::__shared_weak_count *)off_1E96B8A20;
  if (off_1E96B8A20) {
LABEL_34:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_1E96B8A18) {
    goto LABEL_36;
  }
  uint64_t v15 = (char *)operator new(0xA8uLL);
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  *(void *)uint64_t v15 = &unk_1EFB101C0;
  uint64_t v16 = (uint64_t)(v15 + 24);
  *((void *)v15 + 3) = &unk_1EFB10210;
  *((void *)v15 + 4) = 850045863;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *((void *)v15 + 14) = 0;
  *((void *)v15 + 13) = 0;
  *((void *)v15 + 11) = 0;
  *((void *)v15 + 12) = v15 + 104;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  uint64_t v17 = (std::__shared_weak_count *)off_1E96B8A20;
  qword_1E96B8A18 = (uint64_t)(v15 + 24);
  off_1E96B8A20 = v15;
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
LABEL_36:
    uint64_t v16 = qword_1E96B8A18;
    uint64_t v15 = (char *)off_1E96B8A20;
    size_t v136 = (std::__shared_weak_count *)off_1E96B8A20;
    if (!off_1E96B8A20) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  size_t v136 = (std::__shared_weak_count *)v15;
LABEL_42:
  atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
LABEL_43:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  std::string v18 = (std::mutex *)(v16 + 8);
  std::mutex::lock((std::mutex *)(v16 + 8));
  char v19 = *(void **)(v16 + 80);
  if (!v19) {
    goto LABEL_175;
  }
  uint64_t v20 = v16 + 80;
  do
  {
    unint64_t v21 = v19[4];
    BOOL v22 = v21 >= (unint64_t)a2;
    if (v21 >= (unint64_t)a2) {
      int8x16_t v23 = v19;
    }
    else {
      int8x16_t v23 = v19 + 1;
    }
    if (v22) {
      uint64_t v20 = (uint64_t)v19;
    }
    char v19 = (void *)*v23;
  }
  while (*v23);
  if (v20 == v16 + 80 || *(void *)(v20 + 32) > (unint64_t)a2)
  {
LABEL_175:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "attempting to put back a buffer the instance does not own");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int8x16_t v24 = *(char **)(v16 + 112);
  unsigned long long v25 = *(char **)(v16 + 104);
  uint64_t v26 = v24 - v25;
  if (v24 == v25) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = ((v24 - v25) << 6) - 1;
  }
  unint64_t v29 = *(void *)(v16 + 128);
  uint64_t v28 = *(void *)(v16 + 136);
  unint64_t v30 = v28 + v29;
  if (v27 != v28 + v29) {
    goto LABEL_151;
  }
  if (v29 >= 0x200)
  {
    *(void *)(v16 + 128) = v29 - 512;
    uint64_t v31 = v25 + 8;
    uint64_t v32 = *(void *)v25;
    *(void *)(v16 + 104) = v25 + 8;
    if (v24 != *(char **)(v16 + 120))
    {
LABEL_148:
      *(void *)int8x16_t v24 = v32;
      goto LABEL_149;
    }
    xpc_object_t v33 = *(char **)(v16 + 96);
    if (v31 > v33)
    {
      uint64_t v34 = (v31 - v33) >> 3;
      if (v34 >= -1) {
        uint64_t v35 = v34 + 1;
      }
      else {
        uint64_t v35 = v34 + 2;
      }
      uint64_t v36 = v35 >> 1;
      uint64_t v37 = -v36;
      uint64_t v38 = &v31[-8 * v36];
      int64_t v39 = v24 - v31;
      if (v24 != v31)
      {
        memmove(&v31[-8 * v36], v31, v24 - v31);
        int8x16_t v24 = *(char **)(v16 + 104);
      }
      int v40 = &v24[8 * v37];
      int8x16_t v24 = &v38[v39];
      *(void *)(v16 + 104) = v40;
      *(void *)(v16 + 112) = &v38[v39];
      goto LABEL_148;
    }
    if (v24 == v33) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = (v24 - v33) >> 2;
    }
    if (!(v52 >> 61))
    {
      uint64_t v53 = (char *)operator new(8 * v52);
      uint64_t v54 = &v53[8 * (v52 >> 2)];
      int64_t v56 = v24 - v31;
      BOOL v55 = v24 == v31;
      int8x16_t v24 = v54;
      if (v55) {
        goto LABEL_146;
      }
      int8x16_t v24 = &v54[v56 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v57 = v56 - 8;
      if (v57 >= 0x38)
      {
        std::string v109 = &v53[8 * (v52 >> 2)];
        uint64_t v58 = v109;
        if ((unint64_t)(v109 - v31) >= 0x20)
        {
          uint64_t v110 = (v57 >> 3) + 1;
          uint64_t v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v58 = &v54[v111];
          v31 += v111;
          xpc_object_t v112 = (long long *)(v25 + 24);
          xpc_object_t v113 = v109 + 16;
          uint64_t v114 = v110 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v115 = *v112;
            *(v113 - 1) = *(v112 - 1);
            _OWORD *v113 = v115;
            v112 += 2;
            v113 += 2;
            v114 -= 4;
          }
          while (v114);
          if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_146:
            *(void *)(v16 + 96) = v53;
            *(void *)(v16 + 104) = v54;
            *(void *)(v16 + 112) = v24;
            *(void *)(v16 + 120) = &v53[8 * v52];
            if (v33)
            {
              operator delete(v33);
              int8x16_t v24 = *(char **)(v16 + 112);
            }
            goto LABEL_148;
          }
        }
      }
      else
      {
        uint64_t v58 = &v53[8 * (v52 >> 2)];
      }
      do
      {
        uint64_t v116 = *(void *)v31;
        v31 += 8;
        *(void *)uint64_t v58 = v116;
        v58 += 8;
      }
      while (v58 != v24);
      goto LABEL_146;
    }
LABEL_177:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v41 = v26 >> 3;
  uint64_t v42 = *(char **)(v16 + 120);
  unint64_t v43 = *(char **)(v16 + 96);
  if (v26 >> 3 >= (unint64_t)((v42 - v43) >> 3))
  {
    if (v42 == v43) {
      unint64_t v46 = 1;
    }
    else {
      unint64_t v46 = (v42 - v43) >> 2;
    }
    if (!(v46 >> 61))
    {
      unint64_t v47 = (char *)operator new(8 * v46);
      int v48 = operator new(0x1000uLL);
      long long v49 = &v47[8 * v41];
      uint64_t v50 = &v47[8 * v46];
      if (v41 == v46)
      {
        uint64_t v134 = v48;
        if (v26 < 1)
        {
          if (v24 == v25) {
            unint64_t v60 = 1;
          }
          else {
            unint64_t v60 = v26 >> 2;
          }
          if (v60 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v49 = (char *)operator new(8 * v60);
          uint64_t v50 = &v49[8 * v60];
          operator delete(v47);
          unsigned long long v25 = *(char **)(v16 + 104);
          int8x16_t v24 = *(char **)(v16 + 112);
          unint64_t v47 = v49;
        }
        else
        {
          unint64_t v51 = v41 + 2;
          if (v41 >= -1) {
            unint64_t v51 = v41 + 1;
          }
          v49 -= 8 * (v51 >> 1);
        }
        int v48 = v134;
      }
      *(void *)long long v49 = v48;
      xpc_object_t v61 = v49 + 8;
      if (v24 != v25)
      {
        do
        {
          if (v49 == v47)
          {
            if (v61 >= v50)
            {
              if (v50 == v47) {
                unint64_t v68 = 1;
              }
              else {
                unint64_t v68 = (v50 - v47) >> 2;
              }
              if (v68 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unsigned int v69 = (char *)operator new(8 * v68);
              std::string v70 = v69;
              unint64_t v71 = (v68 + 3) >> 2;
              long long v49 = &v69[8 * v71];
              int64_t v72 = v61 - v47;
              BOOL v55 = v61 == v47;
              xpc_object_t v61 = v49;
              if (!v55)
              {
                xpc_object_t v61 = &v49[v72 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v73 = v72 - 8;
                uint64_t v74 = &v69[8 * v71];
                __int16 v75 = v47;
                if (v73 < 0x38) {
                  goto LABEL_181;
                }
                uint64_t v76 = 8 * v71;
                uint64_t v74 = &v69[8 * v71];
                __int16 v75 = v47;
                if ((unint64_t)(v74 - v47) < 0x20) {
                  goto LABEL_181;
                }
                uint64_t v77 = (v73 >> 3) + 1;
                uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v74 = &v49[v78];
                __int16 v75 = &v47[v78];
                uint64_t v79 = (long long *)(v47 + 16);
                xpc_object_t v80 = &v69[v76 + 16];
                uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v82 = *v79;
                  *((_OWORD *)v80 - 1) = *(v79 - 1);
                  *(_OWORD *)xpc_object_t v80 = v82;
                  v79 += 2;
                  v80 += 32;
                  v81 -= 4;
                }
                while (v81);
                if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_181:
                  do
                  {
                    uint64_t v83 = *(void *)v75;
                    v75 += 8;
                    *(void *)uint64_t v74 = v83;
                    v74 += 8;
                  }
                  while (v74 != v61);
                }
              }
              uint64_t v50 = &v69[8 * v68];
              operator delete(v47);
              unint64_t v47 = v70;
            }
            else
            {
              uint64_t v64 = (v50 - v61) >> 3;
              if (v64 >= -1) {
                uint64_t v65 = v64 + 1;
              }
              else {
                uint64_t v65 = v64 + 2;
              }
              uint64_t v66 = v65 >> 1;
              long long v49 = &v47[8 * (v65 >> 1)];
              unsigned int v67 = v47;
              if (v61 != v47)
              {
                memmove(v49, v47, v61 - v47);
                unsigned int v67 = v61;
              }
              xpc_object_t v61 = (char *)v67 + 8 * v66;
            }
          }
          uint64_t v63 = *((void *)v24 - 1);
          v24 -= 8;
          *((void *)v49 - 1) = v63;
          v49 -= 8;
        }
        while (v24 != *(char **)(v16 + 104));
      }
      int v62 = *(void **)(v16 + 96);
      *(void *)(v16 + 96) = v47;
      *(void *)(v16 + 104) = v49;
      *(void *)(v16 + 112) = v61;
      *(void *)(v16 + 120) = v50;
      std::string v18 = (std::mutex *)(v16 + 8);
      if (v62) {
        operator delete(v62);
      }
      goto LABEL_150;
    }
    goto LABEL_177;
  }
  int v44 = operator new(0x1000uLL);
  long long v45 = v44;
  if (v42 == v24)
  {
    if (v25 == v43)
    {
      if (v24 == v25) {
        unint64_t v84 = 1;
      }
      else {
        unint64_t v84 = (v42 - v25) >> 2;
      }
      if (v84 >> 61) {
        goto LABEL_177;
      }
      xpc_object_t v85 = (char *)operator new(8 * v84);
      unint64_t v86 = (v84 + 3) >> 2;
      unint64_t v59 = &v85[8 * v86];
      xpc_object_t v87 = v59;
      if (v24 != v25)
      {
        xpc_object_t v87 = &v59[8 * v41];
        xpc_object_t v88 = &v85[8 * v86];
        xpc_object_t v89 = v25;
        if ((unint64_t)(v26 - 8) < 0x38) {
          goto LABEL_182;
        }
        xpc_object_t v90 = &v85[8 * v86];
        xpc_object_t v88 = v90;
        xpc_object_t v89 = v25;
        if ((unint64_t)(v90 - v25) < 0x20) {
          goto LABEL_182;
        }
        unint64_t v91 = ((unint64_t)(v26 - 8) >> 3) + 1;
        uint64_t v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
        xpc_object_t v88 = &v59[v92];
        xpc_object_t v89 = &v25[v92];
        xpc_object_t v93 = (long long *)(v25 + 16);
        xpc_object_t v94 = v90 + 16;
        uint64_t v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v96 = *v93;
          *(v94 - 1) = *(v93 - 1);
          _OWORD *v94 = v96;
          v93 += 2;
          v94 += 2;
          v95 -= 4;
        }
        while (v95);
        if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_182:
          do
          {
            uint64_t v97 = *(void *)v89;
            v89 += 8;
            *(void *)xpc_object_t v88 = v97;
            v88 += 8;
          }
          while (v88 != v87);
        }
      }
      *(void *)(v16 + 96) = v85;
      *(void *)(v16 + 104) = v59;
      *(void *)(v16 + 112) = v87;
      *(void *)(v16 + 120) = &v85[8 * v84];
      if (v25)
      {
        operator delete(v25);
        unint64_t v59 = *(char **)(v16 + 104);
      }
    }
    else
    {
      unint64_t v59 = v25;
    }
    *((void *)v59 - 1) = v45;
    xpc_object_t v98 = *(char **)(v16 + 104);
    xpc_object_t v99 = *(char **)(v16 + 112);
    *(void *)(v16 + 104) = v98 - 8;
    uint64_t v100 = *((void *)v98 - 1);
    *(void *)(v16 + 104) = v98;
    if (v99 != *(char **)(v16 + 120)) {
      goto LABEL_133;
    }
    xpc_object_t v101 = *(char **)(v16 + 96);
    if (v98 > v101)
    {
      uint64_t v102 = (v98 - v101) >> 3;
      if (v102 >= -1) {
        uint64_t v103 = v102 + 1;
      }
      else {
        uint64_t v103 = v102 + 2;
      }
      uint64_t v104 = v103 >> 1;
      uint64_t v105 = -v104;
      xpc_object_t v106 = &v98[-8 * v104];
      size_t v107 = v99 - v98;
      if (v107)
      {
        memmove(&v98[-8 * v104], v98, v107);
        xpc_object_t v98 = *(char **)(v16 + 104);
      }
      xpc_object_t v108 = &v106[v107];
      *(void *)(v16 + 104) = &v98[8 * v105];
      *(void *)(v16 + 112) = v108;
      *(void *)xpc_object_t v108 = v100;
      goto LABEL_149;
    }
    if (v99 == v101) {
      unint64_t v118 = 1;
    }
    else {
      unint64_t v118 = (v99 - v101) >> 2;
    }
    if (v118 >> 61) {
      goto LABEL_177;
    }
    xpc_object_t v119 = (char *)operator new(8 * v118);
    xpc_object_t v120 = &v119[8 * (v118 >> 2)];
    int64_t v121 = v99 - v98;
    BOOL v55 = v99 == v98;
    xpc_object_t v99 = v120;
    if (!v55)
    {
      xpc_object_t v99 = &v120[v121 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v122 = v121 - 8;
      if (v122 < 0x38)
      {
        xpc_object_t v123 = &v119[8 * (v118 >> 2)];
        do
        {
LABEL_172:
          uint64_t v132 = *(void *)v98;
          v98 += 8;
          *(void *)xpc_object_t v123 = v132;
          v123 += 8;
        }
        while (v123 != v99);
        goto LABEL_173;
      }
      xpc_object_t v124 = &v119[8 * (v118 >> 2)];
      xpc_object_t v123 = v124;
      if ((unint64_t)(v124 - v98) < 0x20) {
        goto LABEL_172;
      }
      uint64_t v125 = (v122 >> 3) + 1;
      uint64_t v126 = 8 * (v125 & 0x3FFFFFFFFFFFFFFCLL);
      xpc_object_t v123 = &v120[v126];
      xpc_object_t v127 = &v98[v126];
      xpc_object_t v128 = (long long *)(v98 + 16);
      std::string v129 = v124 + 16;
      uint64_t v130 = v125 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v131 = *v128;
        *(v129 - 1) = *(v128 - 1);
        _OWORD *v129 = v131;
        v128 += 2;
        v129 += 2;
        v130 -= 4;
      }
      while (v130);
      xpc_object_t v98 = v127;
      if (v125 != (v125 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_172;
      }
    }
LABEL_173:
    *(void *)(v16 + 96) = v119;
    *(void *)(v16 + 104) = v120;
    *(void *)(v16 + 112) = v99;
    *(void *)(v16 + 120) = &v119[8 * v118];
    if (v101)
    {
      operator delete(v101);
      xpc_object_t v99 = *(char **)(v16 + 112);
    }
LABEL_133:
    *(void *)xpc_object_t v99 = v100;
    goto LABEL_149;
  }
  *(void *)int8x16_t v24 = v44;
LABEL_149:
  *(void *)(v16 + 112) += 8;
LABEL_150:
  unsigned long long v25 = *(char **)(v16 + 104);
  uint64_t v28 = *(void *)(v16 + 136);
  unint64_t v30 = *(void *)(v16 + 128) + v28;
LABEL_151:
  *(void *)(*(void *)&v25[(v30 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v30 & 0x1FF)) = a2;
  *(void *)(v16 + 136) = v28 + 1;
  std::mutex::unlock(v18);
  if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
    std::__shared_weak_count::__release_weak(v136);
    std::string v117 = v135;
    if (!v135) {
      return;
    }
  }
  else
  {
    std::string v117 = v135;
    if (!v135) {
      return;
    }
  }
  if (!atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
  }
}

void sub_1A61D9580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::mutex *a10, char a11, uint64_t a12, char a13)
{
  operator delete(__p);
  operator delete(v13);
  std::mutex::unlock(a10);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void support::log::manager::add_delegates(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != a2)
  {
    uint64_t v5 = (std::mutex *)(a1 + 8);
    uint64_t v6 = a1 + 120;
    do
    {
      std::mutex::lock(v5);
      uint64_t v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v2 + 16);
      *(void *)(v2 + 16) = 0;
      v7[1] = v6;
      _DWORD v7[2] = v8;
      uint64_t v9 = *(void *)(a1 + 120);
      *uint64_t v7 = v9;
      *(void *)(v9 + 8) = v7;
      *(void *)(a1 + 120) = v7;
      ++*(void *)(a1 + 136);
      std::mutex::unlock(v5);
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2 != a2);
  }
}

void sub_1A61D96F0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void support::log::manager::set_defaults(support::log::manager *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *((unsigned char *)this + 112) = 3;
  if (*((void *)this + 17))
  {
    uint64_t v3 = (char *)this + 120;
    uint64_t v4 = *((void *)this + 15);
    uint64_t v5 = (char *)*((void *)this + 16);
    uint64_t v6 = *(void *)v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    *((void *)this + 17) = 0;
    if (v5 != (char *)this + 120)
    {
      do
      {
        uint64_t v8 = (char *)*((void *)v5 + 1);
        uint64_t v7 = *((void *)v5 + 2);
        *((void *)v5 + 2) = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
        }
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v3);
    }
  }

  std::mutex::unlock(v2);
}

void support::log::manager::message_delegates(support::log::manager *this, const support::log::details *a2, char *a3)
{
  uint64_t v4 = (char *)this + 120;
  uint64_t v5 = *((void *)this + 16);
  if ((support::log::manager *)v5 != (support::log::manager *)((char *)this + 120))
  {
    do
    {
      this = (support::log::manager *)(***(uint64_t (****)(void, const support::log::details *, char *))(v5 + 16))(*(void *)(v5 + 16), a2, a3);
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while ((char *)v5 != v4);
  }

  support::log::manager::release_log_buffer(this, a3);
}

void support::log::stdout_delegate::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = operator new(0x20uLL);
  uint64_t v5 = v4;
  uint64_t v6 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  void *v4 = &unk_1EFB0FF98;
  v4[1] = v6;
  v4[2] = v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((unsigned char *)v4 + 24) = 1;
    std::__shared_weak_count::__release_weak(v7);
    void *v5 = &unk_1EFB10010;
    std::__shared_weak_count::__release_weak(v7);
    *a2 = v5;
  }
  else
  {
    *((unsigned char *)v4 + 24) = 1;
    void *v4 = &unk_1EFB10010;
    *a2 = v4;
  }
}

uint64_t support::log::stdout_delegate::stdout_delegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1EFB0FF98;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(unsigned char *)(a1 + 24) = 1;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    *(unsigned char *)(a1 + 24) = 1;
  }
  *(void *)a1 = &unk_1EFB10010;
  return a1;
}

{
  std::__shared_weak_count *v3;
  uint64_t v4;

  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1EFB0FF98;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(unsigned char *)(a1 + 24) = 1;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    *(unsigned char *)(a1 + 24) = 1;
  }
  *(void *)a1 = &unk_1EFB10010;
  return a1;
}

double support::log::stdout_delegate::create@<D0>(void *a1@<X8>)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = operator new(0x20uLL);
  double result = 0.0;
  *uint64_t v3 = 0u;
  v3[1] = 0u;
  *(void *)uint64_t v3 = &unk_1EFB10010;
  *a1 = v3;
  return result;
}

void support::log::stdout_delegate::message(support::log::stdout_delegate *this, const support::log::details *a2, const char *a3)
{
  if (a3)
  {
    memset(v6, 170, sizeof(v6));
    (*(void (**)(void *__return_ptr))(*(void *)this + 24))(v6);
    if (LOBYTE(v6[2]))
    {
      if (!v6[1]) {
        return;
      }
      uint64_t v4 = std::__shared_weak_count::lock((std::__shared_weak_count *)v6[1]);
      if (v4)
      {
        uint64_t v5 = v4;
        if (v6[0]) {
          fprintf((FILE *)*MEMORY[0x1E4F143D8], "%s\n", a3);
        }
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x1E4F143D8], "%s\n", a3);
    }
    if (LOBYTE(v6[2]))
    {
      if (v6[1]) {
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6[1]);
      }
    }
  }
}

support::log::manager_global *support::log::manager_global::manager_global(support::log::manager_global *this)
{
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&__p, "global");
  uint64_t v10 = 0;
  BOOL v11 = &unk_1EFB0FFC8;
  char v12 = 3;
  uint64_t v8 = (uint64_t)&v8;
  uint64_t v9 = &v8;
  support::log::manager::manager((uint64_t)this, &__p, (uint64_t)&v11, &v8);
  if (v10)
  {
    uint64_t v2 = v8;
    uint64_t v3 = v9;
    uint64_t v4 = *v9;
    *(void *)(v4 + 8) = *(void *)(v8 + 8);
    **(void **)(v2 + 8) = v4;
    uint64_t v10 = 0;
    if (v3 != &v8)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v3[1];
        uint64_t v6 = v3[2];
        void v3[2] = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v3);
        uint64_t v3 = v7;
      }
      while (v7 != &v8);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_1EFB10040;
  return this;
}

void sub_1A61D9D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *support::log::client::descriptor::descriptor(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_1EFB10070;
  uint64_t descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance(a2, a3);
  a1[1] = descriptor_instance;
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance + 8;
  a1[4] = descriptor_instance + 32;
  a1[5] = descriptor_instance + 56;
  return a1;
}

{
  uint64_t descriptor_instance;

  *a1 = &unk_1EFB10070;
  uint64_t descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance(a2, a3);
  a1[1] = descriptor_instance;
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance + 8;
  a1[4] = descriptor_instance + 32;
  a1[5] = descriptor_instance + 56;
  return a1;
}

uint64_t support::log::global_client_descriptor_manager::get_descriptor_instance(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_25, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_25))
  {
    *(_OWORD *)&qword_1EB5EEBC0 = 0u;
    *(_OWORD *)&qword_1EB5EEBB0 = 0u;
    dword_1EB5EEBD0 = 1065353216;
    __cxa_guard_release(&_MergedGlobals_25);
  }
  std::mutex::lock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
  memset(__p, 170, sizeof(__p));
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v5 = *(void *)(a1 + 8);
  }
  unint64_t v6 = v5 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5 + 1;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5 + 1;
    if (!v5) {
      goto LABEL_16;
    }
  }
  if (v4 >= 0) {
    uint64_t v10 = (const std::string::value_type *)a1;
  }
  else {
    uint64_t v10 = *(const std::string::value_type **)a1;
  }
  memmove(p_dst, v10, v5);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v5) = 44;
  int v11 = *(char *)(a2 + 23);
  if (v11 >= 0) {
    char v12 = (const std::string::value_type *)a2;
  }
  else {
    char v12 = *(const std::string::value_type **)a2;
  }
  if (v11 >= 0) {
    std::string::size_type v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v13 = *(void *)(a2 + 8);
  }
  unint64_t v14 = std::string::append(&__dst, v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string __p[2] = (void *)v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p)) {
      goto LABEL_156;
    }
  }
  else if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p))
  {
    goto LABEL_156;
  }
  uint64_t v16 = (char *)operator new(0x40uLL);
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v72 = *(std::string *)a1;
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v71 = *(std::string *)a2;
  }
  *(void *)uint64_t v16 = &unk_1EFB10140;
  uint64_t v17 = v16 + 8;
  *(std::string *)(v16 + 8) = v72;
  memset(&v72, 0, sizeof(v72));
  *(std::string *)(v16 + 32) = v71;
  memset(&v71, 0, sizeof(v71));
  if (v16[31] < 0)
  {
    uint64_t v17 = *(const char **)v17;
    std::string v18 = v16 + 32;
    if ((v16[55] & 0x80000000) == 0) {
      goto LABEL_34;
    }
  }
  else
  {
    std::string v18 = v16 + 32;
    if ((v16[55] & 0x80000000) == 0) {
      goto LABEL_34;
    }
  }
  std::string v18 = *(const char **)v18;
LABEL_34:
  *((void *)v16 + 7) = os_log_create(v17, v18);
  if (SHIBYTE(__p[2]) >= 0) {
    char v19 = (uint64_t *)__p;
  }
  else {
    char v19 = (uint64_t *)__p[0];
  }
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v20 = HIBYTE(__p[2]);
  }
  else {
    unint64_t v20 = (unint64_t)__p[1];
  }
  unint64_t v21 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&__dst, v19, v20);
  unint64_t v22 = v21;
  unint64_t v23 = qword_1EB5EEBB8;
  if (qword_1EB5EEBB8)
  {
    uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EB5EEBB8);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      unint64_t v25 = v21;
      if (v21 >= qword_1EB5EEBB8) {
        unint64_t v25 = v21 % qword_1EB5EEBB8;
      }
    }
    else
    {
      unint64_t v25 = (qword_1EB5EEBB8 - 1) & v21;
    }
    uint64_t v26 = *(uint64_t ***)(qword_1EB5EEBB0 + 8 * v25);
    if (v26)
    {
      uint64_t v27 = *v26;
      if (*v26)
      {
        if (SHIBYTE(__p[2]) >= 0) {
          uint64_t v28 = (void *)HIBYTE(__p[2]);
        }
        else {
          uint64_t v28 = __p[1];
        }
        if (SHIBYTE(__p[2]) >= 0) {
          unint64_t v29 = __p;
        }
        else {
          unint64_t v29 = (void **)__p[0];
        }
        if (v24.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v35 = v27[1];
            if (v35 == v22)
            {
              uint64_t v36 = *((unsigned __int8 *)v27 + 39);
              if ((v36 & 0x80u) == 0) {
                uint64_t v37 = (void *)*((unsigned __int8 *)v27 + 39);
              }
              else {
                uint64_t v37 = (void *)v27[3];
              }
              if (v37 == v28)
              {
                uint64_t v38 = (const void **)(v27 + 2);
                if ((v36 & 0x80) != 0)
                {
                  if (!memcmp(*v38, v29, v27[3])) {
                    goto LABEL_154;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v27 + 39)) {
                    goto LABEL_154;
                  }
                  int64_t v39 = v29;
                  while (*(unsigned __int8 *)v38 == *(unsigned __int8 *)v39)
                  {
                    uint64_t v38 = (const void **)((char *)v38 + 1);
                    int64_t v39 = (void **)((char *)v39 + 1);
                    if (!--v36) {
                      goto LABEL_154;
                    }
                  }
                }
              }
            }
            else if ((v35 & (v23 - 1)) != v25)
            {
              goto LABEL_90;
            }
            uint64_t v27 = (uint64_t *)*v27;
            if (!v27) {
              goto LABEL_90;
            }
          }
        }
        do
        {
          unint64_t v30 = v27[1];
          if (v30 == v22)
          {
            uint64_t v31 = *((unsigned __int8 *)v27 + 39);
            if ((v31 & 0x80u) == 0) {
              uint64_t v32 = (void *)*((unsigned __int8 *)v27 + 39);
            }
            else {
              uint64_t v32 = (void *)v27[3];
            }
            if (v32 == v28)
            {
              xpc_object_t v33 = (const void **)(v27 + 2);
              if ((v31 & 0x80) != 0)
              {
                if (!memcmp(*v33, v29, v27[3])) {
                  goto LABEL_154;
                }
              }
              else
              {
                if (!*((unsigned char *)v27 + 39)) {
                  goto LABEL_154;
                }
                uint64_t v34 = v29;
                while (*(unsigned __int8 *)v33 == *(unsigned __int8 *)v34)
                {
                  xpc_object_t v33 = (const void **)((char *)v33 + 1);
                  uint64_t v34 = (void **)((char *)v34 + 1);
                  if (!--v31) {
                    goto LABEL_154;
                  }
                }
              }
            }
          }
          else
          {
            if (v30 >= v23) {
              v30 %= v23;
            }
            if (v30 != v25) {
              break;
            }
          }
          uint64_t v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
    }
  }
  else
  {
    unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_90:
  __dst.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAA00;
  int v40 = (char *)operator new(0x30uLL);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&qword_1EB5EEBC0;
  *(void *)int v40 = 0;
  *((void *)v40 + 1) = v22;
  uint64_t v41 = (std::string *)(v40 + 16);
  if (SHIBYTE(__p[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v41, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v41->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void **)v40 + 4) = __p[2];
  }
  *((void *)v40 + 5) = v16;
  __dst.__r_.__value_.__s.__data_[16] = 1;
  float v42 = (float)(unint64_t)(qword_1EB5EEBC8 + 1);
  if (!v23 || (float)(*(float *)&dword_1EB5EEBD0 * (float)v23) < v42)
  {
    BOOL v45 = 1;
    if (v23 >= 3) {
      BOOL v45 = (v23 & (v23 - 1)) != 0;
    }
    unint64_t v46 = v45 | (2 * v23);
    unint64_t v47 = vcvtps_u32_f32(v42 / *(float *)&dword_1EB5EEBD0);
    if (v46 <= v47) {
      unint64_t prime = v47;
    }
    else {
      unint64_t prime = v46;
    }
    if (prime == 1)
    {
      unint64_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      unint64_t prime = std::__next_prime(prime);
    }
    unint64_t v23 = qword_1EB5EEBB8;
    if (prime > qword_1EB5EEBB8) {
      goto LABEL_107;
    }
    if (prime >= qword_1EB5EEBB8) {
      goto LABEL_140;
    }
    unint64_t v59 = vcvtps_u32_f32((float)(unint64_t)qword_1EB5EEBC8 / *(float *)&dword_1EB5EEBD0);
    if ((unint64_t)qword_1EB5EEBB8 < 3
      || (uint8x8_t v60 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EB5EEBB8), v60.i16[0] = vaddlv_u8(v60), v60.u32[0] > 1uLL))
    {
      unint64_t v59 = std::__next_prime(v59);
    }
    else
    {
      uint64_t v61 = 1 << -(char)__clz(v59 - 1);
      if (v59 >= 2) {
        unint64_t v59 = v61;
      }
    }
    if (prime <= v59) {
      unint64_t prime = v59;
    }
    if (prime >= v23)
    {
      unint64_t v23 = qword_1EB5EEBB8;
    }
    else
    {
      if (prime)
      {
LABEL_107:
        if (prime >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        long long v49 = operator new(8 * prime);
        uint64_t v50 = (void *)qword_1EB5EEBB0;
        qword_1EB5EEBB0 = (uint64_t)v49;
        if (v50) {
          operator delete(v50);
        }
        uint64_t v51 = 0;
        qword_1EB5EEBB8 = prime;
        do
          *(void *)(qword_1EB5EEBB0 + 8 * v51++) = 0;
        while (prime != v51);
        unint64_t v52 = (void **)qword_1EB5EEBC0;
        if (!qword_1EB5EEBC0) {
          goto LABEL_139;
        }
        unint64_t v53 = *(void *)(qword_1EB5EEBC0 + 8);
        unint64_t v54 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          unint64_t v55 = v53 & v54;
          *(void *)(qword_1EB5EEBB0 + 8 * v55) = &qword_1EB5EEBC0;
          for (uint64_t i = *v52; *v52; uint64_t i = *v52)
          {
            unint64_t v57 = i[1] & v54;
            if (v57 == v55)
            {
              unint64_t v52 = (void **)i;
            }
            else if (*(void *)(qword_1EB5EEBB0 + 8 * v57))
            {
              *unint64_t v52 = (void *)*i;
              uint64_t v58 = 8 * v57;
              *uint64_t i = **(void **)(qword_1EB5EEBB0 + v58);
              **(void **)(qword_1EB5EEBB0 + v58) = i;
            }
            else
            {
              *(void *)(qword_1EB5EEBB0 + 8 * v57) = v52;
              unint64_t v52 = (void **)i;
              unint64_t v55 = v57;
            }
          }
LABEL_139:
          unint64_t v23 = prime;
          goto LABEL_140;
        }
        if (v53 >= prime) {
          v53 %= prime;
        }
        *(void *)(qword_1EB5EEBB0 + 8 * v53) = &qword_1EB5EEBC0;
        int v62 = *v52;
        if (!*v52) {
          goto LABEL_139;
        }
        while (1)
        {
          unint64_t v64 = v62[1];
          if (v64 >= prime) {
            v64 %= prime;
          }
          if (v64 == v53) {
            goto LABEL_133;
          }
          if (*(void *)(qword_1EB5EEBB0 + 8 * v64))
          {
            *unint64_t v52 = (void *)*v62;
            uint64_t v63 = 8 * v64;
            void *v62 = **(void **)(qword_1EB5EEBB0 + v63);
            **(void **)(qword_1EB5EEBB0 + v63) = v62;
            int v62 = v52;
LABEL_133:
            unint64_t v52 = (void **)v62;
            int v62 = (void *)*v62;
            if (!v62) {
              goto LABEL_139;
            }
          }
          else
          {
            *(void *)(qword_1EB5EEBB0 + 8 * v64) = v52;
            unint64_t v52 = (void **)v62;
            int v62 = (void *)*v62;
            unint64_t v53 = v64;
            if (!v62) {
              goto LABEL_139;
            }
          }
        }
      }
      std::string v70 = (void *)qword_1EB5EEBB0;
      qword_1EB5EEBB0 = 0;
      if (v70) {
        operator delete(v70);
      }
      unint64_t v23 = 0;
      qword_1EB5EEBB8 = 0;
    }
LABEL_140:
    unint64_t v65 = v23 - 1;
    if ((v23 & (v23 - 1)) != 0)
    {
      if (v22 >= v23)
      {
        unint64_t v25 = v22 % v23;
        unint64_t v43 = *(void **)(qword_1EB5EEBB0 + 8 * (v22 % v23));
        int v44 = (void *)__dst.__r_.__value_.__r.__words[0];
        if (v43) {
          goto LABEL_96;
        }
      }
      else
      {
        unint64_t v25 = v22;
        unint64_t v43 = *(void **)(qword_1EB5EEBB0 + 8 * v22);
        int v44 = (void *)__dst.__r_.__value_.__r.__words[0];
        if (v43) {
          goto LABEL_96;
        }
      }
    }
    else
    {
      unint64_t v25 = v65 & v22;
      unint64_t v43 = *(void **)(qword_1EB5EEBB0 + 8 * (v65 & v22));
      int v44 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (v43) {
        goto LABEL_96;
      }
    }
LABEL_142:
    *int v44 = qword_1EB5EEBC0;
    qword_1EB5EEBC0 = __dst.__r_.__value_.__r.__words[0];
    *(void *)(qword_1EB5EEBB0 + 8 * v25) = &qword_1EB5EEBC0;
    if (*(void *)__dst.__r_.__value_.__l.__data_)
    {
      unint64_t v66 = *(void *)(*(void *)__dst.__r_.__value_.__l.__data_ + 8);
      if ((v23 & (v23 - 1)) != 0)
      {
        if (v66 >= v23) {
          v66 %= v23;
        }
      }
      else
      {
        v66 &= v23 - 1;
      }
      *(void *)(qword_1EB5EEBB0 + 8 * v66) = __dst.__r_.__value_.__r.__words[0];
    }
    goto LABEL_153;
  }
  unint64_t v43 = *(void **)(qword_1EB5EEBB0 + 8 * v25);
  int v44 = (void *)__dst.__r_.__value_.__r.__words[0];
  if (!v43) {
    goto LABEL_142;
  }
LABEL_96:
  *int v44 = *v43;
  *unint64_t v43 = __dst.__r_.__value_.__r.__words[0];
LABEL_153:
  ++qword_1EB5EEBC8;
LABEL_154:
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v71.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_156:
      unsigned int v67 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p);
      if (v67) {
        goto LABEL_157;
      }
LABEL_162:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
  }
  else if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_156;
  }
  operator delete(v72.__r_.__value_.__l.__data_);
  unsigned int v67 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p);
  if (!v67) {
    goto LABEL_162;
  }
LABEL_157:
  uint64_t v68 = v67[5];
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
  return v68;
}

void sub_1A61DA6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a28 & 0x80000000) == 0)
    {
LABEL_8:
      std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
      _Unwind_Resume(a1);
    }
LABEL_7:
    operator delete(a23);
    std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
    _Unwind_Resume(a1);
  }
  operator delete(a16);
  if ((a28 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

BOOL support::log::client::descriptor::operator==(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

void *support::log::client::client(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = &unk_1EFB0B730;
  *(_OWORD *)char v12 = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v11 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  a1[1] = &unk_1EFB10070;
  uint64_t descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance((uint64_t)v12, (uint64_t)__p);
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance;
  a1[4] = descriptor_instance + 8;
  a1[5] = descriptor_instance + 32;
  a1[6] = descriptor_instance + 56;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(v12[0]);
    if (a4) {
      goto LABEL_4;
    }
LABEL_7:
    pthread_mutex_lock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
    if (!qword_1E96B8A68)
    {
      uint64_t v7 = operator new(0xA8uLL);
      v7[1] = 0;
      _DWORD v7[2] = 0;
      *uint64_t v7 = &unk_1EFB102A8;
      a4 = (uint64_t)(v7 + 3);
      support::log::manager_global::manager_global((support::log::manager_global *)(v7 + 3));
      uint64_t v8 = (std::__shared_weak_count *)off_1E96B8A70;
      qword_1E96B8A68 = (uint64_t)(v7 + 3);
      off_1E96B8A70 = v7;
      if (!v8)
      {
LABEL_13:
        atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
LABEL_14:
        pthread_mutex_unlock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
        a1[7] = a4;
        a1[8] = v7;
        goto LABEL_15;
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    a4 = qword_1E96B8A68;
    uint64_t v7 = off_1E96B8A70;
    if (!off_1E96B8A70) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v13) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (!a4) {
    goto LABEL_7;
  }
LABEL_4:
  a1[7] = 0;
  a1[8] = 0;
LABEL_15:
  a1[9] = a4;
  return a1;
}

void sub_1A61DAA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  pthread_mutex_unlock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
  _Unwind_Resume(a1);
}

void *support::log::client::client(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *a1 = &unk_1EFB0B730;
  *(_OWORD *)char v12 = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v11 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  a1[1] = &unk_1EFB10070;
  uint64_t descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance((uint64_t)v12, (uint64_t)__p);
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance;
  a1[4] = descriptor_instance + 8;
  a1[5] = descriptor_instance + 32;
  a1[6] = descriptor_instance + 56;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    operator delete(v12[0]);
    uint64_t v7 = *a4;
    uint64_t v8 = a4[1];
    a1[7] = *a4;
    a1[8] = v8;
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v13) < 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v7 = *a4;
  uint64_t v8 = a4[1];
  a1[7] = *a4;
  a1[8] = v8;
  if (v8)
  {
LABEL_4:
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = a1[7];
  }
LABEL_5:
  a1[9] = v7;
  return a1;
}

void sub_1A61DAB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void *support::log::client::client(void *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  support::log::client::client(a1, (uint64_t)v7, (uint64_t)__p, 0);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v7[0]);
  return a1;
}

{
  void *__p[2];
  uint64_t v6;
  void *v7[2];
  uint64_t v8;

  *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  support::log::client::client(a1, (uint64_t)v7, (uint64_t)__p, 0);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v7[0]);
  return a1;
}

void sub_1A61DAC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1A61DAD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t support::log::client::get_manager(support::log::client *this)
{
  return *((void *)this + 9);
}

uint64_t support::log::client::get_descriptor(support::log::client *this)
{
  return (uint64_t)this + 8;
}

void support::log::stdout_delegate::~stdout_delegate(support::log::stdout_delegate *this)
{
  *(void *)this = &unk_1EFB0FF98;
  if (*((unsigned char *)this + 24))
  {
    uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v1) {
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EFB0FF98;
  if (*((unsigned char *)this + 24))
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  operator delete(this);
}

BOOL support::log::manager::should_log(uint64_t a1, unsigned int a2, os_log_t oslog)
{
  return *(unsigned __int8 *)(a1 + 112) >= a2 || os_log_type_enabled(oslog, support::log::sOSLogLevel[a2]);
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void support::log::manager_global::~manager_global(support::log::manager_global *this)
{
  *(void *)this = &unk_1EFB0FFE0;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    int v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        int v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t vars8;

  *(void *)this = &unk_1EFB0FFE0;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    int v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        int v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));

  operator delete(this);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(void *a1)
{
  uint64_t v1 = a1;
  int v2 = *((char *)a1 + 23);
  if (v2 >= 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = (uint64_t *)*a1;
  }
  if (v2 >= 0) {
    unint64_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    unint64_t v4 = a1[1];
  }
  unint64_t v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v24, v3, v4);
  unint64_t v6 = qword_1EB5EEBB8;
  if (!qword_1EB5EEBB8) {
    return 0;
  }
  unint64_t v7 = v5;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EB5EEBB8);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v9 = v5;
    if (v5 >= qword_1EB5EEBB8) {
      unint64_t v9 = v5 % qword_1EB5EEBB8;
    }
  }
  else
  {
    unint64_t v9 = (qword_1EB5EEBB8 - 1) & v5;
  }
  uint64_t v11 = *(uint64_t ***)(qword_1EB5EEBB0 + 8 * v9);
  if (v11)
  {
    char v12 = *v11;
    if (*v11)
    {
      char v13 = v1[23];
      if (v13 >= 0) {
        uint64_t v14 = v1[23];
      }
      else {
        uint64_t v14 = *((void *)v1 + 1);
      }
      if (v13 < 0) {
        uint64_t v1 = *(unsigned char **)v1;
      }
      if (v8.u32[0] < 2uLL)
      {
        uint64_t v15 = qword_1EB5EEBB8 - 1;
        while (1)
        {
          uint64_t v20 = v12[1];
          if (v20 == v7)
          {
            uint64_t v21 = *((unsigned __int8 *)v12 + 39);
            if ((v21 & 0x80u) == 0) {
              uint64_t v22 = *((unsigned __int8 *)v12 + 39);
            }
            else {
              uint64_t v22 = v12[3];
            }
            if (v22 == v14)
            {
              if ((v21 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v1, v12[3])) {
                  return v12;
                }
              }
              else
              {
                if (!*((unsigned char *)v12 + 39)) {
                  return v12;
                }
                uint64_t v23 = 0;
                while (*((unsigned __int8 *)v12 + v23 + 16) == v1[v23])
                {
                  if (v21 == ++v23) {
                    return v12;
                  }
                }
              }
            }
          }
          else if ((v20 & v15) != v9)
          {
            return 0;
          }
          double result = 0;
          char v12 = (uint64_t *)*v12;
          if (!v12) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v16 = v12[1];
        if (v16 == v7)
        {
          uint64_t v17 = *((unsigned __int8 *)v12 + 39);
          if ((v17 & 0x80u) == 0) {
            uint64_t v18 = *((unsigned __int8 *)v12 + 39);
          }
          else {
            uint64_t v18 = v12[3];
          }
          if (v18 == v14)
          {
            if ((v17 & 0x80) != 0)
            {
              if (!memcmp((const void *)v12[2], v1, v12[3])) {
                return v12;
              }
            }
            else
            {
              if (!*((unsigned char *)v12 + 39)) {
                return v12;
              }
              uint64_t v19 = 0;
              while (*((unsigned __int8 *)v12 + v19 + 16) == v1[v19])
              {
                if (v17 == ++v19) {
                  return v12;
                }
              }
            }
          }
        }
        else
        {
          if (v16 >= v6) {
            v16 %= v6;
          }
          if (v16 != v9) {
            return 0;
          }
        }
        double result = 0;
        char v12 = (uint64_t *)*v12;
        if (!v12) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 40);
      *(void *)(v2 + 40) = 0;
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void support::log::global_client_descriptor::~global_client_descriptor(void **this)
{
  *this = &unk_1EFB10140;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(this[1]);
    return;
  }
  operator delete(this[4]);
  if (*((char *)this + 31) < 0) {
    goto LABEL_5;
  }
}

{
  support::log::global_client_descriptor *v2;
  uint64_t vars8;

  *this = &unk_1EFB10140;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = (support::log::global_client_descriptor *)this;
      goto LABEL_5;
    }
  }
  else if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[1]);
  uint64_t v2 = (support::log::global_client_descriptor *)this;

LABEL_5:
  operator delete(v2);
}

void std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001A61FC402) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001A61FC402 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001A61FC402)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001A61FC402 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB101C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB101C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::buffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void support::log::buffer::~buffer(support::log::buffer *this)
{
  *(void *)this = &unk_1EFB10210;
  uint64_t v2 = (char *)*((void *)this + 9);
  uint64_t v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      unint64_t v4 = (char *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          unint64_t v5 = v4;
          unint64_t v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unint64_t v5 = (char *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<char *>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<KernelPCITrace::BuffContext *>::destroy(*((void **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;
  uint64_t vars8;

  *(void *)this = &unk_1EFB10210;
  uint64_t v2 = (char *)*((void *)this + 9);
  uint64_t v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      unint64_t v4 = (char *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          unint64_t v5 = v4;
          unint64_t v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unint64_t v5 = (char *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<char *>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<KernelPCITrace::BuffContext *>::destroy(*((void **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));

  operator delete(this);
}

uint64_t std::deque<char *>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001A61FC58ELL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001A61FC58ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001A61FC58ELL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001A61FC58ELL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB102A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EFB102A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::manager_global>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t __cxx_global_var_init_5()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance, &dword_1A609F000);
  }
  return result;
}

uint64_t __cxx_global_var_init_6_0()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance, &dword_1A609F000);
  }
  return result;
}

uint64_t BBUpdaterExecCommand()
{
  return MEMORY[0x1F4179FB8]();
}

uint64_t BBUpdaterExtremeCreate()
{
  return MEMORY[0x1F4179FC0]();
}

uint64_t BBUpdaterRegisterGlobalLogSink()
{
  return MEMORY[0x1F4179FC8]();
}

uint64_t BBUpdaterSetOptions()
{
  return MEMORY[0x1F4179FD0]();
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9778](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9780](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9788](c, data, *(void *)&len);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
{
  return (CFStringRef)MEMORY[0x1F40D74A8](bundle, key, value, tableName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1F40D7528](allocator, bundleURL);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1F40D7AA8](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x1F40D7AB8](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1F40D7F10](applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F58](allocator, stream, streamLength, options, format, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1F40D7FC0](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1F40D7FF8](stream);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B0]();
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x1F40D8128](mode, returnAfterSourceHandled, seconds);
}

CFRunLoopSourceRef CFRunLoopSourceCreate(CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40D8140](allocator, order, context);
}

void CFRunLoopStop(CFRunLoopRef rl)
{
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D88A0](allocator, filePath, pathStyle, isDirectory);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return (CFUserNotificationRef)MEMORY[0x1F40D8A28](allocator, flags, error, dictionary, timeout);
}

SInt32 CFUserNotificationDisplayAlert(CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle, CFStringRef alternateButtonTitle, CFStringRef otherButtonTitle, CFOptionFlags *responseFlags)
{
  return MEMORY[0x1F40D8A48](flags, iconURL, soundURL, localizationURL, alertHeader, alertMessage, defaultButtonTitle, alternateButtonTitle, timeout);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return MEMORY[0x1F40D8A68](userNotification, responseFlags, timeout);
}

uint64_t ETLBBSimulateCrashExt()
{
  return MEMORY[0x1F417A4C0]();
}

uint64_t ETLDMCCreateViewFromFile()
{
  return MEMORY[0x1F417A498]();
}

uint64_t ETLDMCGetMatchingFileNameAndType()
{
  return MEMORY[0x1F417A4A0]();
}

uint64_t ETLDMCLogFilter()
{
  return MEMORY[0x1F417A4A8]();
}

uint64_t ETLDMCLogGetDefaultFilters()
{
  return MEMORY[0x1F417A4B0]();
}

uint64_t ETLDMCMerge()
{
  return MEMORY[0x1F417A4B8]();
}

uint64_t ETLDebugRegisterDelegate()
{
  return MEMORY[0x1F417A4D0]();
}

uint64_t ETLEFSDUmpCopyCrashLocationDetails()
{
  return MEMORY[0x1F417A538]();
}

uint64_t ETLEFSDumpInfoFree()
{
  return MEMORY[0x1F417A540]();
}

uint64_t ETLEFSDumpInterpret()
{
  return MEMORY[0x1F417A548]();
}

uint64_t ETLEFSearchBasebandCrashReasonM20()
{
  return MEMORY[0x1F417A550]();
}

uint64_t KTLCloseChannel()
{
  return MEMORY[0x1F417A830]();
}

uint64_t KTLDebugRegisterDelegate()
{
  return MEMORY[0x1F417A838]();
}

uint64_t KTLDebugSetFlags()
{
  return MEMORY[0x1F417A840]();
}

uint64_t KTLInitOptions()
{
  return MEMORY[0x1F417A848]();
}

uint64_t KTLOpenChannel()
{
  return MEMORY[0x1F417A850]();
}

uint64_t KTLSahGetCrashReport()
{
  return MEMORY[0x1F417A858]();
}

uint64_t OSLogCreateArchiveWithDictionary()
{
  return MEMORY[0x1F412AB58]();
}

uint64_t TelephonyBasebandCrashModemWithSPMI()
{
  return MEMORY[0x1F417D168]();
}

uint64_t TelephonyBasebandCrashModemWithSPMIWithReason()
{
  return MEMORY[0x1F417D170]();
}

uint64_t TelephonyBasebandCreateController()
{
  return MEMORY[0x1F417D178]();
}

uint64_t TelephonyBasebandEnableModemMux()
{
  return MEMORY[0x1F417D180]();
}

uint64_t TelephonyBasebandEnableModemVBUS()
{
  return MEMORY[0x1F417D188]();
}

uint64_t TelephonyBasebandGetReset()
{
  return MEMORY[0x1F417D1A8]();
}

uint64_t TelephonyBasebandPCITransportCreate()
{
  return MEMORY[0x1F417CF18]();
}

uint64_t TelephonyBasebandPCITransportInitParameters()
{
  return MEMORY[0x1F417CF20]();
}

uint64_t TelephonyBasebandRegisterForReset()
{
  return MEMORY[0x1F417D1C8]();
}

uint64_t TelephonyBasebandSetModemCoredumpGPIO()
{
  return MEMORY[0x1F417D208]();
}

uint64_t TelephonyUtilDebugRegisterDelegate()
{
  return MEMORY[0x1F417D8C0]();
}

uint64_t TelephonyUtilDebugSetFlags()
{
  return MEMORY[0x1F417D8C8]();
}

uint64_t TelephonyUtilGetSystemTime()
{
  return MEMORY[0x1F417D8E0]();
}

uint64_t TelephonyUtilIsCarrierBuild()
{
  return MEMORY[0x1F417D8E8]();
}

uint64_t TelephonyUtilIsInternalBuild()
{
  return MEMORY[0x1F417D8F0]();
}

uint64_t TelephonyUtilIsVendorBuild()
{
  return MEMORY[0x1F417D8F8]();
}

uint64_t TelephonyUtilTransportCreateWithFD()
{
  return MEMORY[0x1F417D938]();
}

uint64_t TelephonyUtilTransportFree()
{
  return MEMORY[0x1F417D940]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t GetBBIPCLogs()
{
  return MEMORY[0x1F417A860]();
}

uint64_t ETLDIAGGetGUID()
{
  return MEMORY[0x1F417A460]();
}

uint64_t ICE_FILER_read()
{
  return MEMORY[0x1F417A868]();
}

uint64_t KTLGetETBFilename(const char *a1)
{
  return MEMORY[0x1F417A870](a1);
}

uint64_t KTLGetKDMFilename(const char *a1)
{
  return MEMORY[0x1F417A878](a1);
}

uint64_t ETLADPLLoggingEnable()
{
  return MEMORY[0x1F417A468]();
}

uint64_t KTLGetKDMProductName(void)
{
  return MEMORY[0x1F417A880]();
}

uint64_t ETLDIAGLoggingConfigure()
{
  return MEMORY[0x1F417A470]();
}

uint64_t ETLDIAGLoggingUnconfigure()
{
  return MEMORY[0x1F417A478]();
}

uint64_t KTLGetTraceConfigFilename(const char *a1)
{
  return MEMORY[0x1F417A888](a1);
}

uint64_t ETLDIAGLoggingGetGUIDString()
{
  return MEMORY[0x1F417A480]();
}

uint64_t KTLGetMaskFileExtensionName()
{
  return MEMORY[0x1F417A890]();
}

uint64_t ETLDIAGLoggingGetDefaultView(void)
{
  return MEMORY[0x1F417A488]();
}

uint64_t ETLDIAGLoggingGetAvailableDMCNames(void)
{
  return MEMORY[0x1F417A490]();
}

uint64_t TelephonyXPC::ServerClientState::isClientEntitled()
{
  return MEMORY[0x1F4163B48]();
}

uint64_t TelephonyXPC::ServerClientState::ServerClientState()
{
  return MEMORY[0x1F4163B50]();
}

uint64_t TelephonyXPC::Client::create()
{
  return MEMORY[0x1F4163B10]();
}

uint64_t TelephonyXPC::Client::perform()
{
  return MEMORY[0x1F4163B20]();
}

uint64_t TelephonyXPC::Server::setCommandHandler()
{
  return MEMORY[0x1F4163B58]();
}

uint64_t TelephonyXPC::Server::start(TelephonyXPC::Server *this)
{
  return MEMORY[0x1F4163B60](this);
}

uint64_t TelephonyXPC::Server::create()
{
  return MEMORY[0x1F4163B68]();
}

uint64_t TelephonyXPC::Server::asString()
{
  return MEMORY[0x1F4163B70]();
}

uint64_t capabilities::abs::supportsETB(capabilities::abs *this)
{
  return MEMORY[0x1F417D220](this);
}

uint64_t capabilities::abs::TUDebugFlags(capabilities::abs *this)
{
  return MEMORY[0x1F417D228](this);
}

uint64_t capabilities::abs::logScratchPath(capabilities::abs *this)
{
  return MEMORY[0x1F417D240](this);
}

uint64_t capabilities::abs::logSnapshotPath(capabilities::abs *this)
{
  return MEMORY[0x1F417D248](this);
}

uint64_t capabilities::abs::radarComponentID(capabilities::abs *this)
{
  return MEMORY[0x1F417D268](this);
}

uint64_t capabilities::abs::supportsBBUSBMux(capabilities::abs *this)
{
  return MEMORY[0x1F417D278](this);
}

uint64_t capabilities::abs::radarComponentName(capabilities::abs *this)
{
  return MEMORY[0x1F417D298](this);
}

uint64_t capabilities::abs::supportsETSProtocol(capabilities::abs *this)
{
  return MEMORY[0x1F417D2B0](this);
}

uint64_t capabilities::abs::radarComponentVersion(capabilities::abs *this)
{
  return MEMORY[0x1F417D2E8](this);
}

uint64_t capabilities::abs::supportsCMHandDetection(capabilities::abs *this)
{
  return MEMORY[0x1F417D340](this);
}

uint64_t capabilities::abs::supportsCellularLogging(capabilities::abs *this)
{
  return MEMORY[0x1F417D348](this);
}

uint64_t capabilities::abs::defaultSystemLogsHistory(capabilities::abs *this)
{
  return MEMORY[0x1F417D360](this);
}

uint64_t capabilities::abs::profileBasebandHistoryMB(capabilities::abs *this)
{
  return MEMORY[0x1F417D368](this);
}

uint64_t capabilities::abs::supportsTraceBackgroundMode(capabilities::abs *this)
{
  return MEMORY[0x1F417D3C0](this);
}

uint64_t capabilities::abs::traceTransportTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x1F417D428](this);
}

uint64_t capabilities::abs::shouldUseMinBasebandTransportIOReadSize(capabilities::abs *this)
{
  return MEMORY[0x1F417D448](this);
}

uint64_t capabilities::abs::shouldUseMinBasebandTransportIOReadCount(capabilities::abs *this)
{
  return MEMORY[0x1F417D450](this);
}

uint64_t capabilities::ipc::supportsPCI(capabilities::ipc *this)
{
  return MEMORY[0x1F417D488](this);
}

uint64_t capabilities::ipc::defaultLogLevel(capabilities::ipc *this)
{
  return MEMORY[0x1F417D490](this);
}

uint64_t capabilities::ipc::defaultMHIConfigPayloadSizeBytes(capabilities::ipc *this)
{
  return MEMORY[0x1F417D4B0](this);
}

uint64_t capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(capabilities::ipc *this)
{
  return MEMORY[0x1F417D4B8](this);
}

uint64_t capabilities::diag::diagVersion(capabilities::diag *this)
{
  return MEMORY[0x1F417D4C8](this);
}

uint64_t capabilities::diag::supportsADPL(capabilities::diag *this)
{
  return MEMORY[0x1F417D4D0](this);
}

uint64_t capabilities::diag::supportsQDSS(capabilities::diag *this)
{
  return MEMORY[0x1F417D4D8](this);
}

uint64_t capabilities::diag::supportsQShrink4(capabilities::diag *this)
{
  return MEMORY[0x1F417D4E0](this);
}

uint64_t capabilities::diag::supportsBuffering(capabilities::diag *this)
{
  return MEMORY[0x1F417D4E8](this);
}

uint64_t capabilities::diag::interfaceAfterBoot(capabilities::diag *this)
{
  return MEMORY[0x1F417D4F0](this);
}

uint64_t capabilities::diag::preferredInterface(capabilities::diag *this)
{
  return MEMORY[0x1F417D4F8](this);
}

uint64_t capabilities::diag::supportedInterfaces(capabilities::diag *this)
{
  return MEMORY[0x1F417D500](this);
}

uint64_t capabilities::diag::supportsMultipleMasks(capabilities::diag *this)
{
  return MEMORY[0x1F417D508](this);
}

uint64_t capabilities::diag::supportedDuringAPSleep(capabilities::diag *this)
{
  return MEMORY[0x1F417D510](this);
}

uint64_t capabilities::diag::asString()
{
  return MEMORY[0x1F417D520]();
}

uint64_t capabilities::debug::environment(capabilities::debug *this)
{
  return MEMORY[0x1F417D528](this);
}

uint64_t capabilities::debug::operator&()
{
  return MEMORY[0x1F417D530]();
}

uint64_t capabilities::radio::radioUnknown(capabilities::radio *this)
{
  return MEMORY[0x1F417D538](this);
}

uint64_t capabilities::radio::firmwarePrefix(capabilities::radio *this)
{
  return MEMORY[0x1F417D558](this);
}

uint64_t capabilities::radio::personalizedFirmwarePath(capabilities::radio *this)
{
  return MEMORY[0x1F417D588](this);
}

uint64_t capabilities::radio::ice(capabilities::radio *this)
{
  return MEMORY[0x1F417D5D0](this);
}

uint64_t capabilities::radio::vendor(capabilities::radio *this)
{
  return MEMORY[0x1F417D5D8](this);
}

uint64_t capabilities::radio::maverick(capabilities::radio *this)
{
  return MEMORY[0x1F417D5E8](this);
}

uint64_t capabilities::radio::mav20Plus(capabilities::radio *this)
{
  return MEMORY[0x1F417D5F8](this);
}

uint64_t capabilities::trace::enabledByDefault(capabilities::trace *this)
{
  return MEMORY[0x1F417D610](this);
}

uint64_t capabilities::trace::getCompressionMode(capabilities::trace *this)
{
  return MEMORY[0x1F417D618](this);
}

uint64_t capabilities::trace::defaultFileSizeBytes(capabilities::trace *this)
{
  return MEMORY[0x1F417D620](this);
}

uint64_t capabilities::trace::defaultHistorySizeMB(capabilities::trace *this)
{
  return MEMORY[0x1F417D628](this);
}

uint64_t capabilities::trace::defaultSleepTraceMode(capabilities::trace *this)
{
  return MEMORY[0x1F417D630](this);
}

uint64_t capabilities::trace::supportsCoreDumpStatus(capabilities::trace *this)
{
  return MEMORY[0x1F417D638](this);
}

uint64_t capabilities::trace::supportsKernelPCITrace(capabilities::trace *this)
{
  return MEMORY[0x1F417D640](this);
}

uint64_t capabilities::trace::defaultMemoryFileMaxCount(capabilities::trace *this)
{
  return MEMORY[0x1F417D650](this);
}

uint64_t capabilities::trace::supportsHighTPutByDefault(capabilities::trace *this)
{
  return MEMORY[0x1F417D660](this);
}

uint64_t capabilities::trace::supportsDataLoggingByDefault(capabilities::trace *this)
{
  return MEMORY[0x1F417D668](this);
}

uint64_t capabilities::trace::supportsKernelPCIBinaryTrace(capabilities::trace *this)
{
  return MEMORY[0x1F417D670](this);
}

uint64_t capabilities::trace::supportsDuplicateSignatureDetection(capabilities::trace *this)
{
  return MEMORY[0x1F417D678](this);
}

uint64_t capabilities::trace::supportsCoredumpCrashReasonOnCustomerBuild(capabilities::trace *this)
{
  return MEMORY[0x1F417D680](this);
}

uint64_t capabilities::trace::allowed(capabilities::trace *this)
{
  return MEMORY[0x1F417D688](this);
}

uint64_t capabilities::trace::asString()
{
  return MEMORY[0x1F417D690]();
}

uint64_t capabilities::coredump::getPersonality(capabilities::coredump *this)
{
  return MEMORY[0x1F417D710](this);
}

uint64_t capabilities::coredump::coredumpAttemptCount(capabilities::coredump *this)
{
  return MEMORY[0x1F417D718](this);
}

uint64_t capabilities::coredump::supportsGPIOSignalling(capabilities::coredump *this)
{
  return MEMORY[0x1F417D720](this);
}

uint64_t capabilities::coredump::supportsSPMISignalling(capabilities::coredump *this)
{
  return MEMORY[0x1F417D728](this);
}

uint64_t TraceFileCollection::setHistory(TraceFileCollection *this)
{
  return MEMORY[0x1F410C720](this);
}

uint64_t TraceFileCollection::setFileSize(TraceFileCollection *this)
{
  return MEMORY[0x1F410C728](this);
}

uint64_t TraceFileCollection::handleReadData(TraceFileCollection *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F410C730](this, a2);
}

uint64_t TraceFileCollection::setMaxMemoryFileCount(TraceFileCollection *this)
{
  return MEMORY[0x1F410C738](this);
}

uint64_t TraceFileCollection::clear()
{
  return MEMORY[0x1F410C740]();
}

uint64_t TraceFileCollection::create()
{
  return MEMORY[0x1F410C748]();
}

uint64_t TraceFileCollection::archive(TraceFileCollection *this)
{
  return MEMORY[0x1F410C750](this);
}

uint64_t TraceFileCollection::snapshot()
{
  return MEMORY[0x1F410C758]();
}

uint64_t CommandDriverFactory::create_default_global(CommandDriverFactory *this)
{
  return MEMORY[0x1F4179FF8](this);
}

uint64_t Bsp::BspCommandDriver::SwTrap()
{
  return MEMORY[0x1F417A898]();
}

uint64_t Bsp::BspCommandDriver::BspCommandDriver()
{
  return MEMORY[0x1F417A8A0]();
}

uint64_t abm::trace::TraceReader::clearFiles(abm::trace::TraceReader *this)
{
  return MEMORY[0x1F410C760](this);
}

uint64_t abm::trace::TraceReader::updateFileSize(abm::trace::TraceReader *this)
{
  return MEMORY[0x1F410C768](this);
}

uint64_t abm::trace::TraceReader::updateHistorySize(abm::trace::TraceReader *this)
{
  return MEMORY[0x1F410C778](this);
}

uint64_t abm::trace::TraceReader::updateMaxMemoryFileCount(abm::trace::TraceReader *this)
{
  return MEMORY[0x1F410C780](this);
}

uint64_t abm::trace::TraceReader::notifyCellularLoggingPortNumber(abm::trace::TraceReader *this)
{
  return MEMORY[0x1F410C788](this);
}

uint64_t abm::trace::TraceReader::stop(abm::trace::TraceReader *this)
{
  return MEMORY[0x1F410C790](this);
}

uint64_t abm::trace::TraceReader::start()
{
  return MEMORY[0x1F410C798]();
}

uint64_t abm::trace::TraceReader::create()
{
  return MEMORY[0x1F410C7A0]();
}

uint64_t abm::trace::TraceReader::snapshot()
{
  return MEMORY[0x1F410C7A8]();
}

uint64_t abm::trace::TraceInfo::setHandler()
{
  return MEMORY[0x1F410C7B8]();
}

uint64_t abm::trace::TraceInfo::push()
{
  return MEMORY[0x1F410C7C0]();
}

{
  return MEMORY[0x1F410C7C8]();
}

uint64_t abm::trace::TraceInfo::create()
{
  return MEMORY[0x1F410C7D0]();
}

uint64_t abm::client::CreateManager()
{
  return MEMORY[0x1F41099D0]();
}

uint64_t abm::client::PerformCommand()
{
  return MEMORY[0x1F41099D8]();
}

{
  return MEMORY[0x1F41099E0]();
}

uint64_t abm::client::GetTraceProperty()
{
  return MEMORY[0x1F41099F0]();
}

uint64_t abm::client::SetTraceProperty()
{
  return MEMORY[0x1F41099F8]();
}

uint64_t abm::client::CollectTelephonyLogs()
{
  return MEMORY[0x1F4109A00]();
}

uint64_t ctu::LogMessage::LogMessage()
{
  return MEMORY[0x1F417D950]();
}

uint64_t ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase()
{
  return MEMORY[0x1F417D958]();
}

uint64_t ctu::OsLogLogger::OsLogLogger(ctu::OsLogLogger *this, const char *a2, const char *a3)
{
  return MEMORY[0x1F417D968](this, a2, a3);
}

uint64_t ctu::OsLogLogger::OsLogLogger()
{
  return MEMORY[0x1F417D970]();
}

uint64_t ctu::OsLogLogger::OsLogLogger(ctu::OsLogLogger *this, const ctu::OsLogLogger *a2)
{
  return MEMORY[0x1F417D978](this, a2);
}

void ctu::OsLogLogger::~OsLogLogger(ctu::OsLogLogger *this)
{
}

uint64_t ctu::OsLogContext::OsLogContext()
{
  return MEMORY[0x1F417D988]();
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const char *a2, const char *a3)
{
  return MEMORY[0x1F417D990](this, a2, a3);
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const ctu::OsLogContext *a2)
{
  return MEMORY[0x1F417D998](this, a2);
}

void ctu::OsLogContext::~OsLogContext(ctu::OsLogContext *this)
{
}

uint64_t ctu::OsLogContext::operator=()
{
  return MEMORY[0x1F417D9A8]();
}

uint64_t ctu::StaticLogger::StaticLogger()
{
  return MEMORY[0x1F417D9B0]();
}

uint64_t ctu::StaticLogger::StaticLogger(ctu::StaticLogger *this)
{
  return MEMORY[0x1F417D9B8](this);
}

void ctu::StaticLogger::~StaticLogger(ctu::StaticLogger *this)
{
}

uint64_t ctu::TrackedLogger::registerLoggerToServer()
{
  return MEMORY[0x1F417D9C8]();
}

uint64_t ctu::LogMessageBuffer::takeString(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1F417DA10](this);
}

uint64_t ctu::LogMessageBuffer::takeMetadata(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1F417DA18](this);
}

uint64_t ctu::LogMessageBuffer::vprintf(ctu::LogMessageBuffer *this, const char *a2, char *a3)
{
  return MEMORY[0x1F417DA28](this, a2, a3);
}

uint64_t ctu::LogMessageBuffer::LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1F417DA30](this);
}

void ctu::LogMessageBuffer::~LogMessageBuffer(ctu::LogMessageBuffer *this)
{
}

uint64_t ctu::LoggerCommonBase::setLogLevel()
{
  return MEMORY[0x1F417DA48]();
}

uint64_t ctu::LoggerCommonBase::LoggerCommonBase()
{
  return MEMORY[0x1F417DA58]();
}

{
  return MEMORY[0x1F417DA60]();
}

uint64_t ctu::LoggerCommonBase::operator=()
{
  return MEMORY[0x1F417DA68]();
}

uint64_t ctu::isProcessRunning()
{
  return MEMORY[0x1F417DA70]();
}

uint64_t ctu::XpcJetsamAssertion::createActivity()
{
  return MEMORY[0x1F417DA78]();
}

uint64_t ctu::XpcJetsamAssertion::create_default_global(ctu::XpcJetsamAssertion *this)
{
  return MEMORY[0x1F417DA80](this);
}

uint64_t ctu::DispatchTimerService::create()
{
  return MEMORY[0x1F417DA88]();
}

uint64_t ctu::cf::MakeCFString::MakeCFString(ctu::cf::MakeCFString *this, const char *a2)
{
  return MEMORY[0x1F417DA90](this, a2);
}

void ctu::cf::MakeCFString::~MakeCFString(ctu::cf::MakeCFString *this)
{
}

uint64_t ctu::cf::convert_copy(ctu::cf *this, const __CFString **a2, const char *a3, uint64_t a4, const __CFAllocator *a5)
{
  return MEMORY[0x1F417DAA0](this, a2, a3, a4, a5);
}

uint64_t ctu::cf::convert_copy()
{
  return MEMORY[0x1F417DAA8]();
}

uint64_t ctu::cf::dict_adapter::dict_adapter(ctu::cf::dict_adapter *this, const __CFDictionary *a2)
{
  return MEMORY[0x1F417DAB8](this, a2);
}

uint64_t ctu::cf::dict_adapter::dict_adapter(ctu::cf::dict_adapter *this, const ctu::cf::dict_adapter *a2)
{
  return MEMORY[0x1F417DAC0](this, a2);
}

void ctu::cf::dict_adapter::~dict_adapter(ctu::cf::dict_adapter *this)
{
}

uint64_t ctu::cf::plist_adapter::plist_adapter(ctu::cf::plist_adapter *this, const __CFString *a2, const __CFString *a3)
{
  return MEMORY[0x1F417DAD0](this, a2, a3);
}

void ctu::cf::plist_adapter::~plist_adapter(ctu::cf::plist_adapter *this)
{
}

uint64_t ctu::cf::assign()
{
  return MEMORY[0x1F417DAF0]();
}

{
  return MEMORY[0x1F417DAF8]();
}

uint64_t ctu::cf::assign(ctu::cf *this, BOOL *a2, const __CFBoolean *a3)
{
  return MEMORY[0x1F417DB10](this, a2, a3);
}

uint64_t ctu::fs::remove_dir()
{
  return MEMORY[0x1F417DB58]();
}

uint64_t ctu::fs::file_exists()
{
  return MEMORY[0x1F417DB60]();
}

uint64_t ctu::fs::read_folder()
{
  return MEMORY[0x1F417DB68]();
}

uint64_t ctu::fs::is_directory()
{
  return MEMORY[0x1F417DB70]();
}

uint64_t ctu::fs::get_file_size()
{
  return MEMORY[0x1F417DB78]();
}

uint64_t ctu::fs::create_directory()
{
  return MEMORY[0x1F417DB80]();
}

uint64_t ctu::fs::get_filtered_files()
{
  return MEMORY[0x1F417DB88]();
}

uint64_t ctu::fs::get_unique_filename()
{
  return MEMORY[0x1F417DB90]();
}

uint64_t ctu::fs::get_unique_pathname()
{
  return MEMORY[0x1F417DB98]();
}

uint64_t ctu::fs::chmod()
{
  return MEMORY[0x1F417DBA0]();
}

uint64_t ctu::fs::rename()
{
  return MEMORY[0x1F417DBA8]();
}

uint64_t ctu::fs::load_file()
{
  return MEMORY[0x1F417DBB0]();
}

uint64_t ctu::Clock::now_in_nanoseconds(ctu::Clock *this)
{
  return MEMORY[0x1F417DBD8](this);
}

uint64_t ctu::asChar()
{
  return MEMORY[0x1F417DBE0]();
}

uint64_t ctu::assign()
{
  return MEMORY[0x1F417DBE8]();
}

uint64_t ctu::Gestalt::create_default_global(ctu::Gestalt *this)
{
  return MEMORY[0x1F417DBF0](this);
}

uint64_t ctu::tokenize()
{
  return MEMORY[0x1F417DBF8]();
}

uint64_t ctu::LogServer::setEnabled(ctu::LogServer *this)
{
  return MEMORY[0x1F417DC00](this);
}

uint64_t ctu::LogServer::updateConfig()
{
  return MEMORY[0x1F417DC08]();
}

uint64_t ctu::LogServer::log()
{
  return MEMORY[0x1F417DC10]();
}

uint64_t ctu::LogServer::start(ctu::LogServer *this)
{
  return MEMORY[0x1F417DC18](this);
}

uint64_t ctu::LogServer::create()
{
  return MEMORY[0x1F417DC20]();
}

uint64_t ctu::LogServer::addWriter()
{
  return MEMORY[0x1F417DC28]();
}

uint64_t ctu::cf_to_xpc(ctu *this, const void *a2)
{
  return MEMORY[0x1F417DC70](this, a2);
}

uint64_t ctu::xpc_to_cf(ctu *this, void *a2)
{
  return MEMORY[0x1F417DC78](this, a2);
}

uint64_t ctu::operator<<()
{
  return MEMORY[0x1F417DC80]();
}

{
  return MEMORY[0x1F417DC88]();
}

{
  return MEMORY[0x1F417DC90]();
}

{
  return MEMORY[0x1F417DC98]();
}

uint64_t pci::transport::kernelTrace::create(pci::transport::kernelTrace *this)
{
  return MEMORY[0x1F417CF30](this);
}

uint64_t pci::transport::kernelControl::create(pci::transport::kernelControl *this)
{
  return MEMORY[0x1F417CF38](this);
}

uint64_t tlv::throwIfNotEnoughBytes(tlv *this, const unsigned __int8 *a2, const unsigned __int8 *a3)
{
  return MEMORY[0x1F417D010](this, a2, a3);
}

uint64_t xpc::dyn_cast_or_default()
{
  return MEMORY[0x1F417DCA8]();
}

{
  return MEMORY[0x1F417DCB0]();
}

{
  return MEMORY[0x1F417DCC0]();
}

{
  return MEMORY[0x1F417DCD0]();
}

{
  return MEMORY[0x1F417DCD8]();
}

{
  return MEMORY[0x1F417DCE8]();
}

uint64_t xpc::bridge()
{
  return MEMORY[0x1F417DCF8]();
}

uint64_t AriMsg::GetBufCtx(AriMsg *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F4178248](this, a2);
}

uint64_t AriHost::StartStream()
{
  return MEMORY[0x1F4178540]();
}

uint64_t AriHost::RegisterClient(AriHost *this, const char *a2, int *a3, dispatch_queue_s *a4)
{
  return MEMORY[0x1F4178548](this, a2, a3, a4);
}

{
  return MEMORY[0x1F4178550](this, a2, a3, a4);
}

uint64_t AriHost::DeregisterClient(AriHost *this)
{
  return MEMORY[0x1F4178558](this);
}

uint64_t AriHost::ReRegisterClient()
{
  return MEMORY[0x1F4178560]();
}

uint64_t AriHost::SetRTEventHandler()
{
  return MEMORY[0x1F4178568]();
}

uint64_t AriHost::Init(AriHost *this)
{
  return MEMORY[0x1F4178570](this);
}

uint64_t AriHost::Send()
{
  return MEMORY[0x1F4178578]();
}

uint64_t AriHost::EndStream(AriHost *this)
{
  return MEMORY[0x1F4178580](this);
}

uint64_t TelephonyXPC::ServerClientState::getName(TelephonyXPC::ServerClientState *this)
{
  return MEMORY[0x1F4163B78](this);
}

uint64_t TraceFileCollection::getInMemoryRemaining(TraceFileCollection *this)
{
  return MEMORY[0x1F410C7F0](this);
}

uint64_t ctu::LoggerCommonBase::getLogDomain(ctu::LoggerCommonBase *this)
{
  return MEMORY[0x1F417DD08](this);
}

uint64_t ctu::cf::map_adapter::getInt(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1F417DD38](this, a2);
}

uint64_t ctu::cf::map_adapter::getBool(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1F417DD40](this, a2);
}

uint64_t ctu::cf::map_adapter::getString()
{
  return MEMORY[0x1F417DD50]();
}

uint64_t ctu::llvm::StringRef::find_last_not_of()
{
  return MEMORY[0x1F417DD58]();
}

uint64_t ctu::llvm::StringRef::find_first_not_of()
{
  return MEMORY[0x1F417DD60]();
}

uint64_t ctu::LogServer::getConfig(ctu::LogServer *this)
{
  return MEMORY[0x1F417DD68](this);
}

uint64_t xpc::object::to_string(xpc::object *this)
{
  return MEMORY[0x1F417DD78](this);
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)MEMORY[0x1F417E360](retstr, this);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1F417E400](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

uint64_t std::time_get<char,std::istreambuf_iterator<char>>::get()
{
  return MEMORY[0x1F417E420]();
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4B8](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1F417E4D0](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4E0](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x1F417E550](this, *(void *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1F417E5D0](this, __n, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E608](this, __pos, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1F417E728]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x1F417E730]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1F417E740]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1F417E748]();
}

uint64_t std::istream::peek()
{
  return MEMORY[0x1F417E760]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x1F417E768]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x1F417E780]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x1F417E788]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1F417E7A0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1F417E7C0]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1F417E830]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1F417E838]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x1F417E840]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E878]();
}

{
  return MEMORY[0x1F417E880]();
}

{
  return MEMORY[0x1F417E898]();
}

{
  return MEMORY[0x1F417E8A0]();
}

{
  return MEMORY[0x1F417E8A8]();
}

{
  return MEMORY[0x1F417E8B0]();
}

{
  return MEMORY[0x1F417E8C8]();
}

{
  return MEMORY[0x1F417E8D0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1F417E960](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x1F417E9E0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1F417EA90](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1F417EAA8](retstr, __s);
}

uintmax_t std::__fs::filesystem::__remove_all(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return MEMORY[0x1F417EB10](a1, __ec);
}

void std::__fs::filesystem::__permissions(const std::__fs::filesystem::path *a1, std::__fs::filesystem::perms a2, std::__fs::filesystem::perm_options a3, std::error_code *a4)
{
}

void std::__fs::filesystem::__copy(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::__fs::filesystem::copy_options __opt, std::error_code *__ec)
{
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1F417EBE0](__str, __idx, *(void *)&__base);
}

uint64_t std::stol(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1F417EBE8](__str, __idx, *(void *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

unint64_t std::stoul(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1F417EC20](__str, __idx, *(void *)&__base);
}

uint64_t std::__sort<std::__less<char,char> &,char *>()
{
  return MEMORY[0x1F417EC30]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x1F417ECA0]();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1F417ECE0](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1F417ECE8](this);
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1F417EE70](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1F417EE78](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE88](retstr, __val);
}

{
  return (std::string *)MEMORY[0x1F417EE98](retstr, __val);
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[](void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1F417EFA8](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9CF8](*(void *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9D00](*(void *)&a1);
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1F40C9F70](dso, description, activity, *(void *)&flags);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_send_and_compose_impl()
{
  return MEMORY[0x1F40C9FF8]();
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t archive_entry_copy_stat()
{
  return MEMORY[0x1F417DFE0]();
}

uint64_t archive_entry_free()
{
  return MEMORY[0x1F417DFF0]();
}

uint64_t archive_entry_new()
{
  return MEMORY[0x1F417DFF8]();
}

uint64_t archive_entry_pathname()
{
  return MEMORY[0x1F417E000]();
}

uint64_t archive_entry_set_pathname()
{
  return MEMORY[0x1F417E040]();
}

uint64_t archive_errno()
{
  return MEMORY[0x1F417E078]();
}

uint64_t archive_read_free()
{
  return MEMORY[0x1F417E110]();
}

uint64_t archive_read_new()
{
  return MEMORY[0x1F417E118]();
}

uint64_t archive_read_next_header()
{
  return MEMORY[0x1F417E120]();
}

uint64_t archive_read_open_filename()
{
  return MEMORY[0x1F417E140]();
}

uint64_t archive_read_support_filter_all()
{
  return MEMORY[0x1F417E158]();
}

uint64_t archive_read_support_format_tar()
{
  return MEMORY[0x1F417E198]();
}

uint64_t archive_write_add_filter_gzip()
{
  return MEMORY[0x1F417E1C0]();
}

uint64_t archive_write_data()
{
  return MEMORY[0x1F417E1D8]();
}

uint64_t archive_write_free()
{
  return MEMORY[0x1F417E208]();
}

uint64_t archive_write_header()
{
  return MEMORY[0x1F417E210]();
}

uint64_t archive_write_new()
{
  return MEMORY[0x1F417E218]();
}

uint64_t archive_write_open_filename()
{
  return MEMORY[0x1F417E230]();
}

uint64_t archive_write_set_format_ustar()
{
  return MEMORY[0x1F417E258]();
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

void bzero(void *a1, size_t a2)
{
}

int chmod(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CB3A0](a1, a2);
}

int chown(const char *a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x1F40CB3A8](a1, *(void *)&a2, *(void *)&a3);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1F40CB400](a1);
}

double difftime(time_t a1, time_t a2)
{
  MEMORY[0x1F40CB8F8](a1, a2);
  return result;
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA0](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBD0](label, attr, target);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

void dispatch_set_qos_class_floor(dispatch_object_t object, dispatch_qos_class_t qos_class, int relative_priority)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

int dlclose(void *__handle)
{
  return MEMORY[0x1F40CBDA8](__handle);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

int fchmod(int a1, mode_t a2)
{
  return MEMORY[0x1F40CC028](*(void *)&a1, a2);
}

int fchown(int a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x1F40CC038](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1F40CC058](*(void *)&a1, *(void *)&a2);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1F40CC0D8](*(void *)&a1, a2, a3, *(void *)&a4);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC200](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1F40CC290](a1, a2, *(void *)&a3);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1F40CC2E0](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1F40CC4C0]();
}

passwd *__cdecl getpwnam(const char *a1)
{
  return (passwd *)MEMORY[0x1F40CC4D8](a1);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CC568](a1, a2);
}

uid_t getuid(void)
{
  return MEMORY[0x1F40CC570]();
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1F40CC870](a1, a2);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CC900](a1, a2);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CCDD0](a1, a2);
}

time_t mktime(tm *a1)
{
  return MEMORY[0x1F40CCE30](a1);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1F40CD120](a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_release(void *object)
{
}

void *__cdecl os_retain(void *object)
{
  return (void *)MEMORY[0x1F40CD548](object);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1F40CD9B8](a1, a2, a3, a4);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x1F40CDA38](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1F40CDB60](a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1F40CDC60](a1);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x1F40CDD10](__p, __ec);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

void rewind(FILE *a1)
{
}

uint64_t sandbox_extension_issue_file()
{
  return MEMORY[0x1F40CDE00]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0A0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int statvfs(const char *a1, statvfs *a2)
{
  return MEMORY[0x1F40CE120](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1F40CE138](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1F40CE198](a1, a2, a3, a4);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1F40CE1D8](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strptime(const char *a1, const char *a2, tm *a3)
{
  return (char *)MEMORY[0x1F40CE220](a1, a2, a3);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

int symlink(const char *a1, const char *a2)
{
  return MEMORY[0x1F40CE360](a1, a2);
}

void sync(void)
{
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1F40CE588](a1);
}

mode_t umask(mode_t a1)
{
  return MEMORY[0x1F40CE5C0](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x1F40CE5E0](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1F40CE608](*(void *)&a1);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x1F40CE8B0](__s, *(void *)&__c, __n);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1F40CE928](*(void *)&__fd, __buf, __nbyte);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEA30](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1F40CEA58](xarray);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1F40CEAA8](xarray, index);
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return (xpc_object_t)MEMORY[0x1F40CEB10](value);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1F40CED28](object);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1F40CED90](bytes, length);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1F40CEEF0](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEF10](xdict, key);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return MEMORY[0x1F40CF040](object1, object2);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1F40CF188](value);
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x1F40CF208]();
}

void xpc_release(xpc_object_t object)
{
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1F40CF248](object);
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1F40CF290](string);
}