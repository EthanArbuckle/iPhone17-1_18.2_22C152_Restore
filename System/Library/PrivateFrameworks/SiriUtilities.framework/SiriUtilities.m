uint64_t InputOrigin.aceInputOrigin.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

SiriUtilities::InputOrigin_optional __swiftcall InputOrigin.init(aceValue:)(Swift::String aceValue)
{
  object = aceValue._object;
  uint64_t countAndFlagsBits = aceValue._countAndFlagsBits;
  v5 = v1;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == aceValue._countAndFlagsBits && v6 == object)
  {
    char v8 = 0;
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  char v8 = 0;
  if (v2)
  {
LABEL_14:
    result.value = swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v9 == object)
  {
    char v8 = 1;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    char v8 = 1;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v12 == object)
  {
    char v8 = 2;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    char v8 = 2;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v14 == object)
  {
    char v8 = 3;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    char v8 = 3;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v16 == object)
  {
    char v8 = 4;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    char v8 = 4;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v18 == object)
  {
    char v8 = 5;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    char v8 = 5;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v20 == object)
  {
    char v8 = 6;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    char v8 = 6;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v22 == object)
  {
    char v8 = 7;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    char v8 = 7;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v24 == object)
  {
    char v8 = 8;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    char v8 = 8;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v26 == object)
  {
    char v8 = 9;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    char v8 = 9;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v28 == object)
  {
    char v8 = 10;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    char v8 = 10;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v30 == object)
  {
    char v8 = 11;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    char v8 = 11;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v32 == object)
  {
    char v8 = 12;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    char v8 = 12;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v34 == object)
  {
    char v8 = 13;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    char v8 = 13;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v36 == object)
  {
    char v8 = 14;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    char v8 = 14;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v38 == object)
  {
    char v8 = 15;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    char v8 = 15;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v40 == object)
  {
    char v8 = 16;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    char v8 = 16;
    goto LABEL_14;
  }
  char v8 = 17;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v42 == object) {
    goto LABEL_13;
  }
  char v44 = OUTLINED_FUNCTION_0();
  swift_bridgeObjectRelease();
  result.value = swift_bridgeObjectRelease();
  if (v44) {
    char v8 = 17;
  }
  else {
    char v8 = 18;
  }
LABEL_15:
  char *v5 = v8;
  return result;
}

SiriUtilities::InputOrigin_optional static InputOrigin.from(aceInputOrigin:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  uint64_t v4 = a1;
  uint64_t v5 = a2;

  return InputOrigin.init(aceValue:)(*(Swift::String *)&v4);
}

SiriUtilities::InputOrigin_optional __swiftcall InputOrigin.init(rawValue:)(Swift::String rawValue)
{
  char v2 = v1;
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result.value = swift_bridgeObjectRelease();
  char v5 = 18;
  if (v3 < 0x12) {
    char v5 = v3;
  }
  *char v2 = v5;
  return result;
}

uint64_t InputOrigin.rawValue.getter()
{
  uint64_t result = 0xD000000000000015;
  switch(*v0)
  {
    case 1:
    case 3:
      return 0xD000000000000012;
    case 2:
      return 0xD000000000000011;
    case 4:
      return 0xD000000000000015;
    case 5:
      uint64_t v2 = 0x746E65696C63;
      goto LABEL_16;
    case 6:
      uint64_t v3 = 0x676F6C616964;
      goto LABEL_14;
    case 7:
      return 0x74747542656D6F68;
    case 8:
      return 0x6C6F46737567616DLL;
    case 9:
      return 0x65476E6F69746F6DLL;
    case 0xA:
      return 0x716552726F697270;
    case 0xB:
      return 0x536F546573696172;
    case 0xC:
      return 0x704165746F6D6572;
    case 0xD:
      uint64_t v3 = 0x65746F6D6572;
LABEL_14:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x7542000000000000;
      break;
    case 0xE:
      uint64_t v2 = 0x726576726573;
LABEL_16:
      uint64_t result = v2 & 0xFFFFFFFFFFFFLL | 0x6547000000000000;
      break;
    case 0xF:
      uint64_t result = 0x6665526F54706174;
      break;
    case 0x10:
      uint64_t result = 0xD000000000000013;
      break;
    case 0x11:
      uint64_t result = 0x6972546563696F76;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InputOrigin()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InputOrigin()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InputOrigin()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InputOrigin()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriUtilities::InputOrigin_optional protocol witness for RawRepresentable.init(rawValue:) in conformance InputOrigin(Swift::String *a1)
{
  return InputOrigin.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance InputOrigin@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = InputOrigin.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t default argument 2 of TransformationRegistry.canTransform(from:to:lengthLimit:)()
{
  return 5;
}

uint64_t default argument 1 of TransformationRegistry.transform<A>(_:to:lengthLimit:tryAllPaths:)@<X0>(void *a1@<X8>)
{
  TypeInformation.init(for:)((uint64_t)v5);
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  a1[1] = v3;
  return result;
}

uint64_t default argument 2 of TransformationRegistry.transform<A>(_:to:lengthLimit:tryAllPaths:)()
{
  return 5;
}

uint64_t default argument 3 of TransformationRegistry.transform<A>(_:to:lengthLimit:tryAllPaths:)()
{
  return 0;
}

uint64_t default argument 3 of TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)()
{
  return 0;
}

uint64_t default argument 1 of IdleTracker.init(lock:name:queue:timeout:timeoutAction:)()
{
  return 0x63617254656C6449;
}

uint64_t default argument 3 of IdleTracker.init(lock:name:queue:timeout:timeoutAction:)@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultTimeout != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static IdleTracker.defaultTimeout);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

void (*default argument 4 of IdleTracker.init(lock:name:queue:timeout:timeoutAction:)())()
{
  return implicit closure #1 in variable initialization expression of static IdleTracker.defaultAction;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t lazy protocol witness table accessor for type InputOrigin and conformance InputOrigin()
{
  unint64_t result = lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin;
  if (!lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin);
  }
  return result;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for InputOrigin(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xEF)
  {
    if (a2 + 17 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 17) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 18;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x12;
  int v5 = v6 - 18;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for InputOrigin(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *unint64_t result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9E5023CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 17;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for InputOrigin(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for InputOrigin(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for InputOrigin()
{
  return &type metadata for InputOrigin;
}

uint64_t initializeBufferWithCopyOfBuffer for _opaque_pthread_t(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

void *__swift_memcpy8192_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2000uLL);
}

uint64_t getEnumTagSinglePayload for _opaque_pthread_t(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 0x2000)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _opaque_pthread_t(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8184) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 4344) = 0u;
    *(_OWORD *)(result + 4328) = 0u;
    *(_OWORD *)(result + 4312) = 0u;
    *(_OWORD *)(result + 4296) = 0u;
    *(_OWORD *)(result + 4280) = 0u;
    *(_OWORD *)(result + 4264) = 0u;
    *(_OWORD *)(result + 4248) = 0u;
    *(_OWORD *)(result + 4232) = 0u;
    *(_OWORD *)(result + 4216) = 0u;
    *(_OWORD *)(result + 4200) = 0u;
    *(_OWORD *)(result + 4184) = 0u;
    *(_OWORD *)(result + 4168) = 0u;
    *(_OWORD *)(result + 4152) = 0u;
    *(_OWORD *)(result + 4136) = 0u;
    *(_OWORD *)(result + 4120) = 0u;
    *(_OWORD *)(result + 4104) = 0u;
    *(_OWORD *)(result + 4088) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 4024) = 0u;
    *(_OWORD *)(result + 4008) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 8168) = 0u;
    *(_OWORD *)(result + 8152) = 0u;
    *(_OWORD *)(result + 8136) = 0u;
    *(_OWORD *)(result + 8120) = 0u;
    *(_OWORD *)(result + 8104) = 0u;
    *(_OWORD *)(result + 8088) = 0u;
    *(_OWORD *)(result + 8072) = 0u;
    *(_OWORD *)(result + 8056) = 0u;
    *(_OWORD *)(result + 8040) = 0u;
    *(_OWORD *)(result + 8024) = 0u;
    *(_OWORD *)(result + 8008) = 0u;
    *(_OWORD *)(result + 7992) = 0u;
    *(_OWORD *)(result + 7976) = 0u;
    *(_OWORD *)(result + 7960) = 0u;
    *(_OWORD *)(result + 7944) = 0u;
    *(_OWORD *)(result + 7928) = 0u;
    *(_OWORD *)(result + 7912) = 0u;
    *(_OWORD *)(result + 7896) = 0u;
    *(_OWORD *)(result + 7880) = 0u;
    *(_OWORD *)(result + 7864) = 0u;
    *(_OWORD *)(result + 7848) = 0u;
    *(_OWORD *)(result + 7832) = 0u;
    *(_OWORD *)(result + 7816) = 0u;
    *(_OWORD *)(result + 7800) = 0u;
    *(_OWORD *)(result + 7784) = 0u;
    *(_OWORD *)(result + 7768) = 0u;
    *(_OWORD *)(result + 7752) = 0u;
    *(_OWORD *)(result + 7736) = 0u;
    *(_OWORD *)(result + 7720) = 0u;
    *(_OWORD *)(result + 7704) = 0u;
    *(_OWORD *)(result + 7688) = 0u;
    *(_OWORD *)(result + 7672) = 0u;
    *(_OWORD *)(result + 7656) = 0u;
    *(_OWORD *)(result + 7640) = 0u;
    *(_OWORD *)(result + 7624) = 0u;
    *(_OWORD *)(result + 7608) = 0u;
    *(_OWORD *)(result + 7592) = 0u;
    *(_OWORD *)(result + 7576) = 0u;
    *(_OWORD *)(result + 7560) = 0u;
    *(_OWORD *)(result + 7544) = 0u;
    *(_OWORD *)(result + 7528) = 0u;
    *(_OWORD *)(result + 7512) = 0u;
    *(_OWORD *)(result + 7496) = 0u;
    *(_OWORD *)(result + 7480) = 0u;
    *(_OWORD *)(result + 7464) = 0u;
    *(_OWORD *)(result + 7448) = 0u;
    *(_OWORD *)(result + 7432) = 0u;
    *(_OWORD *)(result + 7416) = 0u;
    *(_OWORD *)(result + 7400) = 0u;
    *(_OWORD *)(result + 7384) = 0u;
    *(_OWORD *)(result + 7368) = 0u;
    *(_OWORD *)(result + 7352) = 0u;
    *(_OWORD *)(result + 7336) = 0u;
    *(_OWORD *)(result + 7320) = 0u;
    *(_OWORD *)(result + 7304) = 0u;
    *(_OWORD *)(result + 7288) = 0u;
    *(_OWORD *)(result + 7272) = 0u;
    *(_OWORD *)(result + 7256) = 0u;
    *(_OWORD *)(result + 7240) = 0u;
    *(_OWORD *)(result + 7224) = 0u;
    *(_OWORD *)(result + 7208) = 0u;
    *(_OWORD *)(result + 7192) = 0u;
    *(_OWORD *)(result + 7176) = 0u;
    *(_OWORD *)(result + 7160) = 0u;
    *(_OWORD *)(result + 7144) = 0u;
    *(_OWORD *)(result + 7128) = 0u;
    *(_OWORD *)(result + 7112) = 0u;
    *(_OWORD *)(result + 7096) = 0u;
    *(_OWORD *)(result + 7080) = 0u;
    *(_OWORD *)(result + 7064) = 0u;
    *(_OWORD *)(result + 7048) = 0u;
    *(_OWORD *)(result + 7032) = 0u;
    *(_OWORD *)(result + 7016) = 0u;
    *(_OWORD *)(result + 7000) = 0u;
    *(_OWORD *)(result + 6984) = 0u;
    *(_OWORD *)(result + 6968) = 0u;
    *(_OWORD *)(result + 6952) = 0u;
    *(_OWORD *)(result + 6936) = 0u;
    *(_OWORD *)(result + 6920) = 0u;
    *(_OWORD *)(result + 6904) = 0u;
    *(_OWORD *)(result + 6888) = 0u;
    *(_OWORD *)(result + 6872) = 0u;
    *(_OWORD *)(result + 6856) = 0u;
    *(_OWORD *)(result + 6840) = 0u;
    *(_OWORD *)(result + 6824) = 0u;
    *(_OWORD *)(result + 6808) = 0u;
    *(_OWORD *)(result + 6792) = 0u;
    *(_OWORD *)(result + 6776) = 0u;
    *(_OWORD *)(result + 6760) = 0u;
    *(_OWORD *)(result + 6744) = 0u;
    *(_OWORD *)(result + 6728) = 0u;
    *(_OWORD *)(result + 6712) = 0u;
    *(_OWORD *)(result + 6696) = 0u;
    *(_OWORD *)(result + 6680) = 0u;
    *(_OWORD *)(result + 6664) = 0u;
    *(_OWORD *)(result + 6648) = 0u;
    *(_OWORD *)(result + 6632) = 0u;
    *(_OWORD *)(result + 6616) = 0u;
    *(_OWORD *)(result + 6600) = 0u;
    *(_OWORD *)(result + 6584) = 0u;
    *(_OWORD *)(result + 6568) = 0u;
    *(_OWORD *)(result + 6552) = 0u;
    *(_OWORD *)(result + 6536) = 0u;
    *(_OWORD *)(result + 6520) = 0u;
    *(_OWORD *)(result + 6504) = 0u;
    *(_OWORD *)(result + 6488) = 0u;
    *(_OWORD *)(result + 6472) = 0u;
    *(_OWORD *)(result + 6456) = 0u;
    *(_OWORD *)(result + 6440) = 0u;
    *(_OWORD *)(result + 6424) = 0u;
    *(_OWORD *)(result + 6408) = 0u;
    *(_OWORD *)(result + 6392) = 0u;
    *(_OWORD *)(result + 6376) = 0u;
    *(_OWORD *)(result + 6360) = 0u;
    *(_OWORD *)(result + 6344) = 0u;
    *(_OWORD *)(result + 6328) = 0u;
    *(_OWORD *)(result + 6312) = 0u;
    *(_OWORD *)(result + 6296) = 0u;
    *(_OWORD *)(result + 6280) = 0u;
    *(_OWORD *)(result + 6264) = 0u;
    *(_OWORD *)(result + 6248) = 0u;
    *(_OWORD *)(result + 6232) = 0u;
    *(_OWORD *)(result + 6216) = 0u;
    *(_OWORD *)(result + 6200) = 0u;
    *(_OWORD *)(result + 6184) = 0u;
    *(_OWORD *)(result + 6168) = 0u;
    *(_OWORD *)(result + 6152) = 0u;
    *(_OWORD *)(result + 6136) = 0u;
    *(_OWORD *)(result + 6120) = 0u;
    *(_OWORD *)(result + 6104) = 0u;
    *(_OWORD *)(result + 6088) = 0u;
    *(_OWORD *)(result + 6072) = 0u;
    *(_OWORD *)(result + 6056) = 0u;
    *(_OWORD *)(result + 6040) = 0u;
    *(_OWORD *)(result + 6024) = 0u;
    *(_OWORD *)(result + 6008) = 0u;
    *(_OWORD *)(result + 5992) = 0u;
    *(_OWORD *)(result + 5976) = 0u;
    *(_OWORD *)(result + 5960) = 0u;
    *(_OWORD *)(result + 5944) = 0u;
    *(_OWORD *)(result + 5928) = 0u;
    *(_OWORD *)(result + 5912) = 0u;
    *(_OWORD *)(result + 5896) = 0u;
    *(_OWORD *)(result + 5880) = 0u;
    *(_OWORD *)(result + 5864) = 0u;
    *(_OWORD *)(result + 5848) = 0u;
    *(_OWORD *)(result + 5832) = 0u;
    *(_OWORD *)(result + 5816) = 0u;
    *(_OWORD *)(result + 5800) = 0u;
    *(_OWORD *)(result + 5784) = 0u;
    *(_OWORD *)(result + 5768) = 0u;
    *(_OWORD *)(result + 5752) = 0u;
    *(_OWORD *)(result + 5736) = 0u;
    *(_OWORD *)(result + 5720) = 0u;
    *(_OWORD *)(result + 5704) = 0u;
    *(_OWORD *)(result + 5688) = 0u;
    *(_OWORD *)(result + 5672) = 0u;
    *(_OWORD *)(result + 5656) = 0u;
    *(_OWORD *)(result + 5640) = 0u;
    *(_OWORD *)(result + 5624) = 0u;
    *(_OWORD *)(result + 5608) = 0u;
    *(_OWORD *)(result + 5592) = 0u;
    *(_OWORD *)(result + 5576) = 0u;
    *(_OWORD *)(result + 5560) = 0u;
    *(_OWORD *)(result + 5544) = 0u;
    *(_OWORD *)(result + 5528) = 0u;
    *(_OWORD *)(result + 5512) = 0u;
    *(_OWORD *)(result + 5496) = 0u;
    *(_OWORD *)(result + 5480) = 0u;
    *(_OWORD *)(result + 5464) = 0u;
    *(_OWORD *)(result + 5448) = 0u;
    *(_OWORD *)(result + 5432) = 0u;
    *(_OWORD *)(result + 5416) = 0u;
    *(_OWORD *)(result + 5400) = 0u;
    *(_OWORD *)(result + 5384) = 0u;
    *(_OWORD *)(result + 5368) = 0u;
    *(_OWORD *)(result + 5352) = 0u;
    *(_OWORD *)(result + 5336) = 0u;
    *(_OWORD *)(result + 5320) = 0u;
    *(_OWORD *)(result + 5304) = 0u;
    *(_OWORD *)(result + 5288) = 0u;
    *(_OWORD *)(result + 5272) = 0u;
    *(_OWORD *)(result + 5256) = 0u;
    *(_OWORD *)(result + 5240) = 0u;
    *(_OWORD *)(result + 5224) = 0u;
    *(_OWORD *)(result + 5208) = 0u;
    *(_OWORD *)(result + 5192) = 0u;
    *(_OWORD *)(result + 5176) = 0u;
    *(_OWORD *)(result + 5160) = 0u;
    *(_OWORD *)(result + 5144) = 0u;
    *(_OWORD *)(result + 5128) = 0u;
    *(_OWORD *)(result + 5112) = 0u;
    *(_OWORD *)(result + 5096) = 0u;
    *(_OWORD *)(result + 5080) = 0u;
    *(_OWORD *)(result + 5064) = 0u;
    *(_OWORD *)(result + 5048) = 0u;
    *(_OWORD *)(result + 5032) = 0u;
    *(_OWORD *)(result + 5016) = 0u;
    *(_OWORD *)(result + 5000) = 0u;
    *(_OWORD *)(result + 4984) = 0u;
    *(_OWORD *)(result + 4968) = 0u;
    *(_OWORD *)(result + 4952) = 0u;
    *(_OWORD *)(result + 4936) = 0u;
    *(_OWORD *)(result + 4920) = 0u;
    *(_OWORD *)(result + 4904) = 0u;
    *(_OWORD *)(result + 4888) = 0u;
    *(_OWORD *)(result + 4872) = 0u;
    *(_OWORD *)(result + 4856) = 0u;
    *(_OWORD *)(result + 4840) = 0u;
    *(_OWORD *)(result + 4824) = 0u;
    *(_OWORD *)(result + 4808) = 0u;
    *(_OWORD *)(result + 4792) = 0u;
    *(_OWORD *)(result + 4776) = 0u;
    *(_OWORD *)(result + 4760) = 0u;
    *(_OWORD *)(result + 4744) = 0u;
    *(_OWORD *)(result + 4728) = 0u;
    *(_OWORD *)(result + 4712) = 0u;
    *(_OWORD *)(result + 4696) = 0u;
    *(_OWORD *)(result + 4680) = 0u;
    *(_OWORD *)(result + 4664) = 0u;
    *(_OWORD *)(result + 4648) = 0u;
    *(_OWORD *)(result + 4632) = 0u;
    *(_OWORD *)(result + 4616) = 0u;
    *(_OWORD *)(result + 4600) = 0u;
    *(_OWORD *)(result + 4584) = 0u;
    *(_OWORD *)(result + 4568) = 0u;
    *(_OWORD *)(result + 4552) = 0u;
    *(_OWORD *)(result + 4536) = 0u;
    *(_OWORD *)(result + 4520) = 0u;
    *(_OWORD *)(result + 4504) = 0u;
    *(_OWORD *)(result + 4488) = 0u;
    *(_OWORD *)(result + 4472) = 0u;
    *(_OWORD *)(result + 4456) = 0u;
    *(_OWORD *)(result + 4440) = 0u;
    *(_OWORD *)(result + 4424) = 0u;
    *(_OWORD *)(result + 4408) = 0u;
    *(_OWORD *)(result + 4392) = 0u;
    *(_OWORD *)(result + 4376) = 0u;
    *(_OWORD *)(result + 4360) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 0x2000) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_t(uint64_t a1)
{
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for _opaque_pthread_mutex_t(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _opaque_pthread_mutex_t(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_mutex_t(uint64_t a1)
{
}

void *__swift_memcpy8_4(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CTError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CTError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

void type metadata accessor for CTError(uint64_t a1)
{
}

void type metadata accessor for CFDictionaryRef(uint64_t a1)
{
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance NSDataWritingOptions(void *a1, uint64_t *a2)
{
  return specialized OptionSet<>.insert(_:)(a1, *a2);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for __darwin_pthread_handler_rec(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 24))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      uint64_t v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for __darwin_pthread_handler_rec(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

void type metadata accessor for __darwin_pthread_handler_rec(uint64_t a1)
{
}

void type metadata accessor for _opaque_pthread_t(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

void TransformationRegistry.fallback.setter()
{
}

uint64_t OUTLINED_FUNCTION_0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t NSBundle.packageId.getter()
{
  uint64_t result = outlined bridged method (pb) of @objc NSBundle.bundleIdentifier.getter(v0);
  if (!v2) {
    return 0x3E6C696E3CLL;
  }
  return result;
}

uint64_t NSBundle.configData.getter()
{
  id v1 = objc_msgSend(v0, sel_bundlePath);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

double static NSBundle.packageFrom(_:)@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = type metadata accessor for NSBundle();
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = a1;
  v7._object = a2;
  unint64_t v8 = (unint64_t)NSBundle.__allocating_init(path:)(v7);
  if (v8)
  {
    *(void *)(a3 + 24) = v6;
    *(void *)(a3 + 32) = &protocol witness table for NSBundle;
    *(void *)a3 = v8;
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

NSBundle_optional __swiftcall NSBundle.__allocating_init(path:)(Swift::String path)
{
  object = path._object;
  uint64_t countAndFlagsBits = path._countAndFlagsBits;
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v4 = (void *)MEMORY[0x1CB7919D0](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  uint64_t v5 = (objc_class *)objc_msgSend(v3, sel_initWithPath_, v4);

  Swift::String v7 = v5;
  result.value.super.isa = v7;
  result.is_nil = v6;
  return result;
}

void NSBundle.loadPlugin()()
{
  if (one-time initialization token for pluginLoaderLog != -1) {
    swift_once();
  }
  specialized static Logger.withSignpost<A>(name:log:completion:)((uint64_t)"LoadPlugin", 10, 2, (void *)static Logger.pluginLoaderLog, v0);
}

uint64_t closure #1 in NSBundle.loadPlugin()@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (objc_msgSend(a1, sel_isLoaded) & 1) != 0 || (objc_msgSend(a1, sel_load))
  {
    if (objc_msgSend(a1, sel_principalClass))
    {
      uint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
      if (dynamic_cast_existential_1_conditional(ObjCClassMetadata))
      {
        uint64_t v6 = v5;
        uint64_t result = (*(uint64_t (**)(void))(v5 + 8))();
        *a2 = result;
        a2[1] = v6;
        return result;
      }
      if (one-time initialization token for loader != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.loader);
      id v26 = a1;
      v27 = (void *)Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_5(v28))
      {
        OUTLINED_FUNCTION_4();
        uint64_t v34 = OUTLINED_FUNCTION_6();
        uint64_t v29 = OUTLINED_FUNCTION_1_0(4.8149e-34);
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v34);
        OUTLINED_FUNCTION_0_0();

        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_2(&dword_1C9E4C000, v31, v32, "Bundle %s has unexpected principal class; cannot be loaded as a plugin");
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {
      }
      char v16 = 2;
    }
    else
    {
      if (one-time initialization token for loader != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Logger.loader);
      id v9 = a1;
      v10 = (void *)Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_5(v11))
      {
        OUTLINED_FUNCTION_4();
        uint64_t v34 = OUTLINED_FUNCTION_6();
        uint64_t v12 = OUTLINED_FUNCTION_1_0(4.8149e-34);
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v34);
        OUTLINED_FUNCTION_0_0();

        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_2(&dword_1C9E4C000, v14, v15, "Bundle %s has no principalClass; cannot be loaded as a plugin");
        char v16 = 1;
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {

        char v16 = 1;
      }
    }
  }
  else
  {
    if (one-time initialization token for loader != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.loader);
    id v18 = a1;
    v19 = (void *)Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_5(v20))
    {
      OUTLINED_FUNCTION_4();
      uint64_t v34 = OUTLINED_FUNCTION_6();
      uint64_t v21 = OUTLINED_FUNCTION_1_0(4.8149e-34);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v34);
      OUTLINED_FUNCTION_0_0();

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_2(&dword_1C9E4C000, v23, v24, "Bundle %s failed to load as a plugin");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
    }
    char v16 = 0;
  }
  lazy protocol witness table accessor for type PluginBundleError and conformance PluginBundleError();
  swift_allocError();
  char *v33 = v16;
  return swift_willThrow();
}

uint64_t protocol witness for PluginPackage.packageId.getter in conformance NSBundle()
{
  return NSBundle.packageId.getter();
}

uint64_t protocol witness for PluginPackage.configData.getter in conformance NSBundle()
{
  return NSBundle.configData.getter();
}

double protocol witness for static PluginPackage.packageFrom(_:) in conformance NSBundle@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return static NSBundle.packageFrom(_:)(a1, a2, a3);
}

unint64_t protocol witness for PluginPackage.isLoaded.getter in conformance NSBundle()
{
  return (unint64_t)@nonobjc NSBundle.isLoaded.getter() & 1;
}

id @nonobjc NSBundle.isLoaded.getter()
{
  return objc_msgSend(v0, sel_isLoaded);
}

void protocol witness for PluginPackage.loadPlugin() in conformance NSBundle()
{
}

BOOL static PluginBundleError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PluginBundleError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int PluginBundleError.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PluginBundleError()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Error._domain.getter in conformance PluginBundleError()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t protocol witness for Error._code.getter in conformance PluginBundleError()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance PluginBundleError()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance PluginBundleError()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t outlined bridged method (pb) of @objc NSBundle.bundleIdentifier.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_bundleIdentifier);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t type metadata accessor for NSBundle()
{
  unint64_t result = lazy cache variable for type metadata for NSBundle;
  if (!lazy cache variable for type metadata for NSBundle)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSBundle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PluginBundleError and conformance PluginBundleError()
{
  unint64_t result = lazy protocol witness table cache variable for type PluginBundleError and conformance PluginBundleError;
  if (!lazy protocol witness table cache variable for type PluginBundleError and conformance PluginBundleError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginBundleError and conformance PluginBundleError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PluginBundleError and conformance PluginBundleError;
  if (!lazy protocol witness table cache variable for type PluginBundleError and conformance PluginBundleError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginBundleError and conformance PluginBundleError);
  }
  return result;
}

uint64_t dispatch thunk of PluginPackage.packageId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PluginPackage.configData.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static PluginPackage.packageFrom(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of PluginPackage.isLoaded.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PluginPackage.loadPlugin()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t getEnumTagSinglePayload for PluginBundleError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for PluginBundleError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9E518B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginBundleError()
{
  return &type metadata for PluginBundleError;
}

uint64_t dynamic_cast_existential_1_conditional(uint64_t a1)
{
  if (swift_conformsToProtocol2()) {
    return a1;
  }
  else {
    return 0;
  }
}

uint64_t OUTLINED_FUNCTION_0_0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_1_0(float a1)
{
  float *v1 = a1;
  return NSBundle.packageId.getter();
}

void OUTLINED_FUNCTION_2(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void OUTLINED_FUNCTION_3()
{
  JUMPOUT(0x1CB792FA0);
}

uint64_t OUTLINED_FUNCTION_4()
{
  return swift_slowAlloc();
}

BOOL OUTLINED_FUNCTION_5(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_6()
{
  return swift_slowAlloc();
}

uint64_t specialized == infix<A>(_:_:)()
{
  return 1;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v0 = InputOrigin.rawValue.getter();
  uint64_t v2 = v1;
  if (v0 == InputOrigin.rawValue.getter() && v2 == v3) {
    OUTLINED_FUNCTION_11();
  }
  else {
    LOBYTE(v0) = OUTLINED_FUNCTION_2_0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE900000000000073;
  uint64_t v3 = 0x656974696C697455;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x6F4C6E6967756C50;
    }
    else {
      uint64_t v5 = 0x6D6E6F7269766E45;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEC00000072656461;
    }
    else {
      unint64_t v6 = 0xEB00000000746E65;
    }
  }
  else
  {
    uint64_t v5 = 0x656974696C697455;
    unint64_t v6 = 0xE900000000000073;
  }
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v3 = 0x6F4C6E6967756C50;
    }
    else {
      uint64_t v3 = 0x6D6E6F7269766E45;
    }
    if (a2 == 1) {
      unint64_t v2 = 0xEC00000072656461;
    }
    else {
      unint64_t v2 = 0xEB00000000746E65;
    }
  }
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  char v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = 0x737961776C61;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x726576656ELL;
    }
    else {
      uint64_t v5 = 0x6552657275636573;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE500000000000000;
    }
    else {
      unint64_t v6 = 0xEE00737473657571;
    }
  }
  else
  {
    unint64_t v6 = 0xE600000000000000;
    uint64_t v5 = 0x737961776C61;
  }
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v3 = 0x726576656ELL;
    }
    else {
      uint64_t v3 = 0x6552657275636573;
    }
    if (a2 == 1) {
      uint64_t v7 = 0xE500000000000000;
    }
    else {
      uint64_t v7 = 0xEE00737473657571;
    }
  }
  else
  {
    uint64_t v7 = 0xE600000000000000;
  }
  if (v5 == v3 && v6 == v7) {
    OUTLINED_FUNCTION_11();
  }
  else {
    unint64_t v2 = OUTLINED_FUNCTION_2_0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = 1701667150;
  int v4 = 0xE400000000000000;
  uint64_t v5 = a1;
  unint64_t v6 = 1701667150;
  switch(v5)
  {
    case 1:
      int v4 = 0xE700000000000000;
      unint64_t v6 = 0x6E6F6973726556;
      break;
    case 2:
      unint64_t v6 = 0x7079547475706E49;
      int v4 = 0xE900000000000065;
      break;
    case 3:
      unint64_t v6 = 0x795474757074754FLL;
      int v4 = 0xEA00000000006570;
      break;
    default:
      break;
  }
  uint64_t v7 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      uint64_t v7 = 0xE700000000000000;
      uint64_t v3 = 0x6E6F6973726556;
      break;
    case 2:
      uint64_t v3 = 0x7079547475706E49;
      uint64_t v7 = 0xE900000000000065;
      break;
    case 3:
      uint64_t v3 = 0x795474757074754FLL;
      uint64_t v7 = 0xEA00000000006570;
      break;
    default:
      break;
  }
  if (v6 == v3 && v4 == v7) {
    OUTLINED_FUNCTION_11();
  }
  else {
    unint64_t v2 = OUTLINED_FUNCTION_2_0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = 1701601613;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x656C616D6546;
    }
    else {
      uint64_t v5 = 0x6E776F6E6B6E55;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE600000000000000;
    }
    else {
      unint64_t v6 = 0xE700000000000000;
    }
  }
  else
  {
    unint64_t v6 = 0xE400000000000000;
    uint64_t v5 = 1701601613;
  }
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v3 = 0x656C616D6546;
    }
    else {
      uint64_t v3 = 0x6E776F6E6B6E55;
    }
    if (a2 == 1) {
      uint64_t v7 = 0xE600000000000000;
    }
    else {
      uint64_t v7 = 0xE700000000000000;
    }
  }
  else
  {
    uint64_t v7 = 0xE400000000000000;
  }
  if (v5 == v3 && v6 == v7) {
    OUTLINED_FUNCTION_11();
  }
  else {
    unint64_t v2 = OUTLINED_FUNCTION_2_0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v4 = 0xD00000000000001CLL;
  }
  else {
    unint64_t v4 = 0x6E776F6E6B6E75;
  }
  if (v3) {
    unint64_t v5 = 0xE700000000000000;
  }
  else {
    unint64_t v5 = 0x80000001C9EB7E30;
  }
  if (a2) {
    unint64_t v6 = 0xD00000000000001CLL;
  }
  else {
    unint64_t v6 = 0x6E776F6E6B6E75;
  }
  if (a2) {
    unint64_t v7 = 0x80000001C9EB7E30;
  }
  else {
    unint64_t v7 = 0xE700000000000000;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_11();
  }
  else {
    char v2 = OUTLINED_FUNCTION_2_0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v4 = 0x7244676F6C616944;
  }
  else {
    unint64_t v4 = 0x4479616C70736944;
  }
  if (v3) {
    unint64_t v5 = 0xED00006E65766972;
  }
  else {
    unint64_t v5 = 0xEC0000006E657669;
  }
  if (a2) {
    unint64_t v6 = 0x7244676F6C616944;
  }
  else {
    unint64_t v6 = 0x4479616C70736944;
  }
  if (a2) {
    unint64_t v7 = 0xEC0000006E657669;
  }
  else {
    unint64_t v7 = 0xED00006E65766972;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_11();
  }
  else {
    char v2 = OUTLINED_FUNCTION_2_0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void static DeviceRestrictions.none.getter(void *a1@<X8>)
{
  *a1 = 0;
}

SiriUtilities::DeviceRestrictions __swiftcall DeviceRestrictions.init(rawValue:)(SiriUtilities::DeviceRestrictions rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static DeviceRestrictions.guestMode.getter(void *a1@<X8>)
{
}

void static DeviceRestrictions.carDNDMode.getter(void *a1@<X8>)
{
}

void static DeviceRestrictions.spokenNotificationsOverDoAP.getter(void *a1@<X8>)
{
}

void static DeviceRestrictions.phoneFeaturesUnavailable.getter(void *a1@<X8>)
{
}

void static DeviceRestrictions.starkMode.getter(void *a1@<X8>)
{
}

void static DeviceRestrictions.pinLock.getter(void *a1@<X8>)
{
}

void static DeviceRestrictions.unauthenticatedByWatchProximity.getter(void *a1@<X8>)
{
}

void static DeviceRestrictions.unauthenticatedByHeadphonesState.getter(void *a1@<X8>)
{
}

void static DeviceRestrictions.supportsVehicleData.getter(void *a1@<X8>)
{
}

void static DeviceRestrictions.headGestureRecognitionAvailable.getter(void *a1@<X8>)
{
}

uint64_t DeviceRestrictions.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t DeviceRestrictions.aceSet.getter()
{
  uint64_t v1 = *v0;
  uint64_t v3 = MEMORY[0x1E4FBC870];
  if (*v0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_0_1();
    swift_bridgeObjectRelease();
    if ((v1 & 2) == 0)
    {
LABEL_3:
      if ((v1 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_3;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_0_1();
  swift_bridgeObjectRelease();
  if ((v1 & 4) == 0)
  {
LABEL_4:
    if ((v1 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_0_1();
  swift_bridgeObjectRelease();
  if ((v1 & 8) == 0)
  {
LABEL_5:
    if ((v1 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_0_1();
  swift_bridgeObjectRelease();
  if ((v1 & 0x10) == 0)
  {
LABEL_6:
    if ((v1 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_0_1();
  swift_bridgeObjectRelease();
  if ((v1 & 0x20) == 0)
  {
LABEL_7:
    if ((v1 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_0_1();
  swift_bridgeObjectRelease();
  if ((v1 & 0x40) == 0)
  {
LABEL_8:
    if ((v1 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_0_1();
  swift_bridgeObjectRelease();
  if ((v1 & 0x80) == 0)
  {
LABEL_9:
    if ((v1 & 0x100) == 0) {
      goto LABEL_10;
    }
LABEL_21:
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_0_1();
    swift_bridgeObjectRelease();
    if ((v1 & 0x200) == 0) {
      return v3;
    }
    goto LABEL_11;
  }
LABEL_20:
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_0_1();
  swift_bridgeObjectRelease();
  if ((v1 & 0x100) != 0) {
    goto LABEL_21;
  }
LABEL_10:
  if ((v1 & 0x200) != 0)
  {
LABEL_11:
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_0_1();
    swift_bridgeObjectRelease();
  }
  return v3;
}

SiriUtilities::DeviceRestrictions __swiftcall DeviceRestrictions.init(aceValue:)(Swift::OpaquePointer aceValue)
{
  uint64_t v3 = v1;
  if (*((void *)aceValue._rawValue + 2))
  {
    unint64_t v4 = (void **)((char *)aceValue._rawValue + 40);
    do
    {
      uint64_t v5 = *((void *)aceValue._rawValue + 4);
      unint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      v7._uint64_t countAndFlagsBits = v5;
      v7._object = v6;
      DeviceRestrictions.init(aceValue:)(v7);
      OUTLINED_FUNCTION_14();
    }
    while (!v8);
  }
  result.rawValue = swift_bridgeObjectRelease();
  *uint64_t v3 = 0;
  return result;
}

SiriUtilities::DeviceRestrictions __swiftcall DeviceRestrictions.init(aceValue:)(Swift::String aceValue)
{
  object = aceValue._object;
  uint64_t countAndFlagsBits = aceValue._countAndFlagsBits;
  uint64_t v5 = v1;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == aceValue._countAndFlagsBits && v6 == object)
  {
    result.rawValue = OUTLINED_FUNCTION_4_0();
    goto LABEL_8;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    result.rawValue = swift_bridgeObjectRelease();
LABEL_8:
    uint64_t v9 = 1;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v10 == object)
  {
    uint64_t v9 = 2;
    result.rawValue = OUTLINED_FUNCTION_4_0();
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    result.rawValue = swift_bridgeObjectRelease();
    uint64_t v9 = 2;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v12 == object)
  {
    result.rawValue = OUTLINED_FUNCTION_4_0();
    goto LABEL_24;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    result.rawValue = swift_bridgeObjectRelease();
LABEL_24:
    uint64_t v9 = 4;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v14 == object)
  {
    result.rawValue = OUTLINED_FUNCTION_4_0();
    goto LABEL_32;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    result.rawValue = swift_bridgeObjectRelease();
LABEL_32:
    uint64_t v9 = 8;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v16 == object)
  {
    result.rawValue = OUTLINED_FUNCTION_4_0();
    goto LABEL_40;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    result.rawValue = swift_bridgeObjectRelease();
LABEL_40:
    uint64_t v9 = 16;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v18 == object)
  {
    result.rawValue = OUTLINED_FUNCTION_4_0();
    goto LABEL_48;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    result.rawValue = swift_bridgeObjectRelease();
LABEL_48:
    uint64_t v9 = 32;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v20 == object)
  {
    result.rawValue = OUTLINED_FUNCTION_4_0();
    goto LABEL_56;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    result.rawValue = swift_bridgeObjectRelease();
LABEL_56:
    uint64_t v9 = 64;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v22 == object)
  {
    result.rawValue = OUTLINED_FUNCTION_4_0();
    goto LABEL_64;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    result.rawValue = swift_bridgeObjectRelease();
LABEL_64:
    uint64_t v9 = 128;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v24 == object)
  {
    result.rawValue = OUTLINED_FUNCTION_4_0();
    goto LABEL_72;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    result.rawValue = swift_bridgeObjectRelease();
LABEL_72:
    uint64_t v9 = 256;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v26 == object)
  {
    result.rawValue = OUTLINED_FUNCTION_4_0();
    uint64_t v9 = 512;
  }
  else
  {
    char v28 = OUTLINED_FUNCTION_0();
    swift_bridgeObjectRelease();
    result.rawValue = swift_bridgeObjectRelease();
    if (v28) {
      uint64_t v9 = 512;
    }
    else {
      uint64_t v9 = 0;
    }
  }
LABEL_9:
  uint64_t *v5 = v9;
  return result;
}

void specialized OptionSet.union(_:)(void *a1@<X8>)
{
}

uint64_t static DeviceRestrictions.from(aceRestrictions:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*(void *)(result + 16))
  {
    uint64_t v3 = (void **)(swift_bridgeObjectRetain() + 40);
    do
    {
      uint64_t v4 = (uint64_t)*(v3 - 1);
      uint64_t v5 = *v3;
      swift_bridgeObjectRetain();
      v6._uint64_t countAndFlagsBits = v4;
      v6._object = v5;
      DeviceRestrictions.init(aceValue:)(v6);
      OUTLINED_FUNCTION_14();
    }
    while (!v7);
    SiriUtilities::DeviceRestrictions result = swift_bridgeObjectRelease();
  }
  *a2 = 0;
  return result;
}

SiriUtilities::DeviceRestrictions static DeviceRestrictions.from(aceRestriction:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  uint64_t v4 = a1;
  uint64_t v5 = a2;

  return DeviceRestrictions.init(aceValue:)(*(Swift::String *)&v4);
}

SiriUtilities::DeviceRestrictions protocol witness for OptionSet.init(rawValue:) in conformance DeviceRestrictions(Swift::Int *a1)
{
  return DeviceRestrictions.init(rawValue:)(*a1);
}

void protocol witness for SetAlgebra.union(_:) in conformance DeviceRestrictions(void *a1@<X8>)
{
}

void protocol witness for SetAlgebra.intersection(_:) in conformance DeviceRestrictions(void *a1@<X8>)
{
}

void specialized OptionSet.intersection(_:)(void *a1@<X8>)
{
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance DeviceRestrictions(void *a1)
{
  return specialized OptionSet.symmetricDifference(_:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance DeviceRestrictions(uint64_t a1, void *a2)
{
  return specialized OptionSet<>.insert(_:)(a1, *a2);
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance DeviceRestrictions(void *a1)
{
  return specialized OptionSet<>.remove(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance DeviceRestrictions(void *a1)
{
  return specialized OptionSet<>.update(with:)(*a1);
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance DeviceRestrictions(uint64_t *a1)
{
  return specialized OptionSet<>.formUnion(_:)(*a1);
}

uint64_t specialized OptionSet<>.formUnion(_:)(uint64_t result)
{
  *v1 |= result;
  return result;
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance DeviceRestrictions(uint64_t *a1)
{
  return specialized OptionSet<>.formIntersection(_:)(*a1);
}

uint64_t specialized OptionSet<>.formIntersection(_:)(uint64_t result)
{
  *v1 &= result;
  return result;
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance DeviceRestrictions(void *a1)
{
  return specialized OptionSet<>.formSymmetricDifference(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance DeviceRestrictions(void *a1)
{
  return specialized SetAlgebra.subtracting(_:)(*a1, *v1);
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance DeviceRestrictions(uint64_t *a1)
{
  return specialized SetAlgebra.isSubset(of:)(*a1, *v1);
}

BOOL specialized SetAlgebra.isSubset(of:)(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance DeviceRestrictions(void *a1)
{
  return specialized SetAlgebra.isDisjoint(with:)(*a1, *v1);
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance DeviceRestrictions(uint64_t *a1)
{
  return specialized SetAlgebra.isSuperset(of:)(*a1, *v1);
}

BOOL specialized SetAlgebra.isSuperset(of:)(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance DeviceRestrictions()
{
  return specialized SetAlgebra.isEmpty.getter(*v0);
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance DeviceRestrictions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance DeviceRestrictions(void *a1)
{
  return specialized SetAlgebra.subtract(_:)(*a1);
}

SiriUtilities::DeviceRestrictions protocol witness for RawRepresentable.init(rawValue:) in conformance DeviceRestrictions@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  result.rawValue = DeviceRestrictions.init(rawValue:)(*a1).rawValue;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance DeviceRestrictions@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = DeviceRestrictions.rawValue.getter();
  *a1 = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DeviceRestrictions(uint64_t *a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t specialized Set._Variant.insert(_:)()
{
  OUTLINED_FUNCTION_7();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  uint64_t v7 = v5 & ~v6;
  OUTLINED_FUNCTION_5_0();
  if (v8)
  {
    OUTLINED_FUNCTION_9();
    BOOL v10 = v10 && v9 == v2;
    if (v10 || (OUTLINED_FUNCTION_8() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_13();
      return 0;
    }
    uint64_t v12 = ~v6;
    while (1)
    {
      uint64_t v7 = (v7 + 1) & v12;
      OUTLINED_FUNCTION_5_0();
      if ((v13 & 1) == 0) {
        break;
      }
      OUTLINED_FUNCTION_9();
      BOOL v15 = v10 && v14 == v2;
      if (v15 || (OUTLINED_FUNCTION_8() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_10();
  uint64_t v16 = OUTLINED_FUNCTION_12();
  specialized _NativeSet.insertNew(_:at:isUnique:)(v16, v17, v18, v19);
  void *v1 = v20;
  swift_bridgeObjectRelease();
  void *v0 = v3;
  v0[1] = v2;
  return 1;
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;

  OUTLINED_FUNCTION_7();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  uint64_t v7 = v5 & ~v6;
  OUTLINED_FUNCTION_5_0();
  if (v8)
  {
    OUTLINED_FUNCTION_9();
    BOOL v10 = v10 && v9 == v2;
    if (v10 || (OUTLINED_FUNCTION_8() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_13();
      return 0;
    }
    uint64_t v12 = ~v6;
    while (1)
    {
      uint64_t v7 = (v7 + 1) & v12;
      OUTLINED_FUNCTION_5_0();
      if ((v13 & 1) == 0) {
        break;
      }
      OUTLINED_FUNCTION_9();
      BOOL v15 = v10 && v14 == v2;
      if (v15 || (OUTLINED_FUNCTION_8() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_10();
  uint64_t v16 = OUTLINED_FUNCTION_12();
  specialized _NativeSet.insertNew(_:at:isUnique:)(v16, v17, v18, v19);
  void *v1 = v20;
  swift_bridgeObjectRelease();
  void *v0 = v3;
  v0[1] = v2;
  return 1;
}

unint64_t lazy protocol witness table accessor for type DeviceRestrictions and conformance DeviceRestrictions()
{
  unint64_t result = lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions;
  if (!lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions;
  if (!lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions;
  if (!lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions;
  if (!lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions);
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceRestrictions()
{
  return &type metadata for DeviceRestrictions;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Swift::UInt v6 = *a2;
  long long v36 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)v37 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)&v37[16] = *(_OWORD *)(a2 + 40);
  *(void *)&v37[32] = *((void *)a2 + 7);
  Hasher._combine(_:)(v6);
  uint64_t v41 = *(void *)v37;
  long long v39 = *(_OWORD *)&v37[8];
  long long v40 = v36;
  long long v38 = *(_OWORD *)&v37[24];
  swift_bridgeObjectRetain();
  outlined retain of TransformationCapability((uint64_t)a2);
  outlined retain of TypeIdentifier((uint64_t)&v40);
  String.hash(into:)();
  Hasher._combine(_:)(*(Swift::UInt *)v37);
  outlined release of TypeIdentifier((uint64_t)&v40);
  outlined retain of TypeIdentifier((uint64_t)&v39);
  String.hash(into:)();
  outlined release of TypeIdentifier((uint64_t)&v39);
  outlined retain of TypeIdentifier((uint64_t)&v38);
  String.hash(into:)();
  outlined release of TypeIdentifier((uint64_t)&v38);
  outlined release of TransformationCapability((uint64_t)a2);
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v10 = v5 + 56;
  v33 = a2;
  uint64_t v34 = a1;
  uint64_t v32 = v2;
  if ((*(void *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v11 = ~v8;
    uint64_t v12 = *(void *)(v5 + 48);
    while (1)
    {
      char v13 = (void *)(v12 + (v9 << 6));
      if (v6 == *(unsigned __int8 *)v13)
      {
        uint64_t v15 = v13[3];
        uint64_t v14 = v13[4];
        uint64_t v17 = v13[5];
        uint64_t v16 = v13[6];
        uint64_t v18 = v13[7];
        BOOL v19 = v13[1] == (void)v36 && v13[2] == *((void *)&v36 + 1);
        if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && v15 == *(void *)v37)
        {
          BOOL v20 = v14 == *(void *)&v37[8] && v17 == *(void *)&v37[16];
          if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            BOOL v21 = v16 == *(void *)&v37[24] && v18 == *(void *)&v37[32];
            if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              break;
            }
          }
        }
      }
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_21;
      }
    }
    swift_bridgeObjectRelease();
    outlined release of TransformationCapability((uint64_t)v33);
    unint64_t v26 = *(void *)(*v32 + 48) + (v9 << 6);
    uint64_t v28 = *(void *)(v26 + 8);
    uint64_t v27 = *(void *)(v26 + 16);
    uint64_t v30 = *(void *)(v26 + 40);
    uint64_t v29 = *(void *)(v26 + 48);
    uint64_t v31 = *(void *)(v26 + 56);
    *(unsigned char *)uint64_t v34 = *(unsigned char *)v26;
    *(void *)(v34 + 8) = v28;
    *(void *)(v34 + 16) = v27;
    *(_OWORD *)(v34 + 24) = *(_OWORD *)(v26 + 24);
    *(void *)(v34 + 40) = v30;
    *(void *)(v34 + 48) = v29;
    *(void *)(v34 + 56) = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return 0;
  }
  else
  {
LABEL_21:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v35 = *v32;
    void *v32 = 0x8000000000000000;
    outlined retain of TransformationCapability((uint64_t)v33);
    specialized _NativeSet.insertNew(_:at:isUnique:)((Swift::Int)v33, v9, isUniquelyReferenced_nonNull_native);
    void *v32 = v35;
    swift_bridgeObjectRelease();
    long long v23 = v33[1];
    *(_OWORD *)uint64_t v34 = *v33;
    *(_OWORD *)(v34 + 16) = v23;
    long long v24 = v33[3];
    *(_OWORD *)(v34 + 32) = v33[2];
    *(_OWORD *)(v34 + 48) = v24;
    return 1;
  }
}

uint64_t outlined retain of TransformationCapability(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of TypeIdentifier(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of TypeIdentifier(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of TransformationCapability(uint64_t a1)
{
  return a1;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          BOOL v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      uint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
      void *v28 = v18;
      v28[1] = v19;
      ++*(void *)(v4 + 16);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_38;
      }
      if (v14 >= v8) {
        goto LABEL_32;
      }
      unint64_t v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        int64_t v11 = v14 + 1;
        if (v14 + 1 >= v8) {
          goto LABEL_32;
        }
        unint64_t v15 = v30[v11];
        if (!v15)
        {
          int64_t v11 = v14 + 2;
          if (v14 + 2 >= v8) {
            goto LABEL_32;
          }
          unint64_t v15 = v30[v11];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
              if (v29 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v29 + 63) >> 6, v30);
              }
              else {
                void *v30 = -1 << v29;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_39;
                }
                if (v11 >= v8) {
                  goto LABEL_32;
                }
                unint64_t v15 = v30[v11];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v11 = v16;
          }
        }
      }
LABEL_20:
      unint64_t v7 = (v15 - 1) & v15;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<TypeIdentifier>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          BOOL v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      uint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
      void *v28 = v18;
      v28[1] = v19;
      ++*(void *)(v4 + 16);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_38;
      }
      if (v14 >= v8) {
        goto LABEL_32;
      }
      unint64_t v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        int64_t v11 = v14 + 1;
        if (v14 + 1 >= v8) {
          goto LABEL_32;
        }
        unint64_t v15 = v30[v11];
        if (!v15)
        {
          int64_t v11 = v14 + 2;
          if (v14 + 2 >= v8) {
            goto LABEL_32;
          }
          unint64_t v15 = v30[v11];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
              if (v29 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v29 + 63) >> 6, v30);
              }
              else {
                void *v30 = -1 << v29;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_39;
                }
                if (v11 >= v8) {
                  goto LABEL_32;
                }
                unint64_t v15 = v30[v11];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v11 = v16;
          }
        }
      }
LABEL_20:
      unint64_t v7 = (v15 - 1) & v15;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

void specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<TransformationCapability>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  if (*(void *)(v2 + 16))
  {
    uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v5 = (void *)(v2 + 56);
    uint64_t v6 = -1;
    if (v4 < 64) {
      uint64_t v6 = ~(-1 << v4);
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v4 + 63) >> 6;
    swift_retain();
    int64_t v9 = 0;
    if (!v7) {
      goto LABEL_6;
    }
LABEL_5:
    unint64_t v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v9 << 6))
    {
      unint64_t v15 = (_OWORD *)(*(void *)(v2 + 48) + (i << 6));
      long long v16 = v15[1];
      v19[0] = *v15;
      v19[1] = v16;
      long long v17 = v15[3];
      v19[2] = v15[2];
      v19[3] = v17;
      specialized _NativeSet._unsafeInsertNew(_:)((unsigned __int8 *)v19, v3);
      if (v7) {
        goto LABEL_5;
      }
LABEL_6:
      int64_t v12 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
LABEL_28:
        __break(1u);
        return;
      }
      if (v12 >= v8) {
        goto LABEL_22;
      }
      unint64_t v13 = v5[v12];
      ++v9;
      if (!v13)
      {
        int64_t v9 = v12 + 1;
        if (v12 + 1 >= v8) {
          goto LABEL_22;
        }
        unint64_t v13 = v5[v9];
        if (!v13)
        {
          int64_t v9 = v12 + 2;
          if (v12 + 2 >= v8) {
            goto LABEL_22;
          }
          unint64_t v13 = v5[v9];
          if (!v13)
          {
            int64_t v14 = v12 + 3;
            if (v14 >= v8)
            {
LABEL_22:
              swift_release();
              uint64_t v18 = 1 << *(unsigned char *)(v2 + 32);
              if (v18 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v18 + 63) >> 6, (void *)(v2 + 56));
              }
              else {
                void *v5 = -1 << v18;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v13 = v5[v14];
            if (!v13)
            {
              while (1)
              {
                int64_t v9 = v14 + 1;
                if (__OFADD__(v14, 1)) {
                  goto LABEL_28;
                }
                if (v9 >= v8) {
                  goto LABEL_22;
                }
                unint64_t v13 = v5[v9];
                ++v14;
                if (v13) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v9 = v14;
          }
        }
      }
LABEL_19:
      unint64_t v7 = (v13 - 1) & v13;
    }
  }
  swift_release();
  uint64_t *v1 = v3;
}

__n128 specialized _NativeSet._unsafeInsertNew(_:)(unsigned __int8 *a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  long long v9 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v10[16] = *(_OWORD *)(a1 + 40);
  *(void *)&v10[32] = *((void *)a1 + 7);
  Hasher._combine(_:)(*a1);
  uint64_t v14 = *(void *)v10;
  long long v12 = *(_OWORD *)&v10[8];
  long long v13 = v9;
  long long v11 = *(_OWORD *)&v10[24];
  outlined retain of TransformationCapability((uint64_t)a1);
  outlined retain of TypeIdentifier((uint64_t)&v13);
  String.hash(into:)();
  Hasher._combine(_:)(*(Swift::UInt *)v10);
  outlined release of TypeIdentifier((uint64_t)&v13);
  outlined retain of TypeIdentifier((uint64_t)&v12);
  String.hash(into:)();
  outlined release of TypeIdentifier((uint64_t)&v12);
  outlined retain of TypeIdentifier((uint64_t)&v11);
  String.hash(into:)();
  outlined release of TypeIdentifier((uint64_t)&v11);
  outlined release of TransformationCapability((uint64_t)a1);
  Hasher._finalize()();
  unint64_t v4 = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  unint64_t v5 = *(void *)(a2 + 48) + (v4 << 6);
  __n128 result = *(__n128 *)a1;
  long long v7 = *((_OWORD *)a1 + 1);
  long long v8 = *((_OWORD *)a1 + 3);
  *(_OWORD *)(v5 + 32) = *((_OWORD *)a1 + 2);
  *(_OWORD *)(v5 + 48) = v8;
  *(__n128 *)unint64_t v5 = result;
  *(_OWORD *)(v5 + 16) = v7;
  ++*(void *)(a2 + 16);
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  unint64_t v5 = v4;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  a3 = v12 & ~v13;
  uint64_t v14 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v15 = *(void *)(v11 + 48);
    long long v16 = (void *)(v15 + 16 * a3);
    BOOL v17 = *v16 == a1 && v16[1] == a2;
    if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v18 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v18;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v19 = (void *)(v15 + 16 * a3);
        BOOL v20 = *v19 == a1 && v19[1] == a2;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_21;
        }
      }
    }
  }
LABEL_22:
  uint64_t v21 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v22 = (void *)(*(void *)(v21 + 48) + 16 * a3);
  void *v22 = a1;
  v22[1] = a2;
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24) {
    __break(1u);
  }
  else {
    *(void *)(v21 + 16) = v25;
  }
}

{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  uint64_t v18;
  void *v19;
  BOOL v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  unint64_t v5 = v4;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  a3 = v12 & ~v13;
  uint64_t v14 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v15 = *(void *)(v11 + 48);
    long long v16 = (void *)(v15 + 16 * a3);
    BOOL v17 = *v16 == a1 && v16[1] == a2;
    if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v18 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v18;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v19 = (void *)(v15 + 16 * a3);
        BOOL v20 = *v19 == a1 && v19[1] == a2;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_21;
        }
      }
    }
  }
LABEL_22:
  uint64_t v21 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v22 = (void *)(*(void *)(v21 + 48) + 16 * a3);
  void *v22 = a1;
  v22[1] = a2;
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24) {
    __break(1u);
  }
  else {
    *(void *)(v21 + 16) = v25;
  }
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  unint64_t v5 = (unsigned __int8 *)result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  uint64_t v32 = (long long *)result;
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_28;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      __n128 result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_28;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Swift::UInt v9 = *v5;
  long long v33 = *(_OWORD *)(v5 + 8);
  *(_OWORD *)uint64_t v34 = *(_OWORD *)(v5 + 24);
  *(_OWORD *)&v34[16] = *(_OWORD *)(v5 + 40);
  *(void *)&v34[32] = *((void *)v5 + 7);
  Hasher._combine(_:)(v9);
  uint64_t v38 = *(void *)v34;
  long long v36 = *(_OWORD *)&v34[8];
  long long v37 = v33;
  long long v35 = *(_OWORD *)&v34[24];
  outlined retain of TransformationCapability((uint64_t)v5);
  outlined retain of TypeIdentifier((uint64_t)&v37);
  String.hash(into:)();
  Hasher._combine(_:)(*(Swift::UInt *)v34);
  outlined release of TypeIdentifier((uint64_t)&v37);
  outlined retain of TypeIdentifier((uint64_t)&v36);
  String.hash(into:)();
  outlined release of TypeIdentifier((uint64_t)&v36);
  outlined retain of TypeIdentifier((uint64_t)&v35);
  String.hash(into:)();
  outlined release of TypeIdentifier((uint64_t)&v35);
  outlined release of TransformationCapability((uint64_t)v5);
  __n128 result = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v10;
  uint64_t v11 = v8 + 56;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v12 = ~v10;
    uint64_t v13 = *(void *)(v8 + 48);
    do
    {
      uint64_t v14 = (void *)(v13 + (a2 << 6));
      if (v9 == *(unsigned __int8 *)v14)
      {
        __n128 result = v14[1];
        uint64_t v16 = v14[3];
        uint64_t v15 = v14[4];
        uint64_t v18 = v14[5];
        uint64_t v17 = v14[6];
        uint64_t v19 = v14[7];
        BOOL v20 = result == (void)v33 && v14[2] == *((void *)&v33 + 1);
        if (v20 || (__n128 result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
          if (v16 == *(void *)v34)
          {
            BOOL v21 = v15 == *(void *)&v34[8] && v18 == *(void *)&v34[16];
            if (v21 || (__n128 result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              if (v17 == *(void *)&v34[24] && v19 == *(void *)&v34[32]) {
                goto LABEL_31;
              }
              __n128 result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if (result) {
                goto LABEL_31;
              }
            }
          }
        }
      }
      a2 = (a2 + 1) & v12;
    }
    while (((*(void *)(v11 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_28:
  uint64_t v23 = *v31;
  *(void *)(*v31 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  BOOL v24 = (_OWORD *)(*(void *)(v23 + 48) + (a2 << 6));
  long long v25 = *v32;
  long long v26 = v32[1];
  long long v27 = v32[3];
  v24[2] = v32[2];
  v24[3] = v27;
  _OWORD *v24 = v25;
  v24[1] = v26;
  uint64_t v28 = *(void *)(v23 + 16);
  BOOL v29 = __OFADD__(v28, 1);
  uint64_t v30 = v28 + 1;
  if (!v29)
  {
    *(void *)(v23 + 16) = v30;
    return result;
  }
  __break(1u);
LABEL_31:
  __n128 result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
    void *v28 = v18;
    v28[1] = v19;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  void *v28;
  int64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<TypeIdentifier>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
    void *v28 = v18;
    v28[1] = v19;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<TransformationCapability>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(void *)(v2 + 16))
  {
    swift_release();
LABEL_24:
    uint64_t *v1 = v3;
    return;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = v2 + 56;
  uint64_t v6 = -1;
  if (v4 < 64) {
    uint64_t v6 = ~(-1 << v4);
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  int64_t v9 = 0;
  if (!v7) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    unint64_t v15 = (_OWORD *)(*(void *)(v2 + 48) + (i << 6));
    long long v17 = v15[2];
    long long v16 = v15[3];
    long long v18 = v15[1];
    v19[0] = *v15;
    v19[1] = v18;
    v19[2] = v17;
    v19[3] = v16;
    outlined retain of TransformationCapability((uint64_t)v19);
    specialized _NativeSet._unsafeInsertNew(_:)((unsigned __int8 *)v19, v3);
    if (v7) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v12 >= v8) {
      goto LABEL_22;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v8) {
        goto LABEL_22;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v9);
      if (!v13)
      {
        int64_t v9 = v12 + 2;
        if (v12 + 2 >= v8) {
          goto LABEL_22;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v9);
        if (!v13) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v7 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v8)
  {
LABEL_22:
    swift_release_n();
    goto LABEL_24;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v9 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v8) {
      goto LABEL_22;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_1()
{
  return specialized Set._Variant.insert(_:)();
}

uint64_t OUTLINED_FUNCTION_2_0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void OUTLINED_FUNCTION_3_0(void *a1@<X8>)
{
  *a1 = v1;
}

uint64_t OUTLINED_FUNCTION_4_0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_7()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_8()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_9()
{
  return *(void *)(v1 + 16 * v0);
}

uint64_t OUTLINED_FUNCTION_10()
{
  void *v0 = 0x8000000000000000;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13()
{
  uint64_t v4 = (void *)(*(void *)(*(void *)v1 + 48) + 16 * v2);
  uint64_t v5 = v4[1];
  void *v0 = *v4;
  v0[1] = v5;
  return swift_bridgeObjectRetain();
}

BOOL static ExecutionLocation.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v2 = *a1 == *a2 && a1[1] == a2[1];
  return v2
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || (ExecutionLocation.isUnknown.getter() & 1) != 0 && (ExecutionLocation.isUnknown.getter() & 1) != 0;
}

uint64_t ExecutionLocation.isUnknown.getter()
{
  OUTLINED_FUNCTION_7_0();
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  BOOL v4 = v1 == v3 && v2 == 0xE700000000000000;
  if (v4 || (OUTLINED_FUNCTION_2_1(), (OUTLINED_FUNCTION_1_1() & 1) != 0))
  {
    char v5 = 1;
  }
  else
  {
    if (v1 == 1701736302 && v2 == 0xE400000000000000) {
      goto LABEL_26;
    }
    OUTLINED_FUNCTION_2_1();
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v5 = 0;
    if (v8) {
      return v5 & 1;
    }
    if (v1 == 0x726576726573 && v2 == 0xE600000000000000)
    {
LABEL_26:
      char v5 = 0;
      return v5 & 1;
    }
    OUTLINED_FUNCTION_2_1();
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v5 = 0;
    BOOL v12 = v1 == 0x656369766564 && v2 == 0xE600000000000000;
    if ((v10 & 1) == 0 && !v12)
    {
      OUTLINED_FUNCTION_2_1();
      char v5 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
    }
  }
  return v5 & 1;
}

SiriUtilities::ExecutionLocation __swiftcall ExecutionLocation.init(rawValue:)(SiriUtilities::ExecutionLocation rawValue)
{
  SiriUtilities::ExecutionLocation *v1 = rawValue;
  return rawValue;
}

void static ExecutionLocation.none.getter(void *a1@<X8>)
{
}

void static ExecutionLocation.server.getter(void *a1@<X8>)
{
}

void static ExecutionLocation.device.getter(void *a1@<X8>)
{
}

void static ExecutionLocation.unknown.getter(void *a1@<X8>)
{
}

uint64_t ExecutionLocation.isNone.getter()
{
  if (*v0 == 1701736302 && v0[1] == 0xE400000000000000) {
    return specialized == infix<A>(_:_:)();
  }
  else {
    return OUTLINED_FUNCTION_0_2();
  }
}

uint64_t ExecutionLocation.isServer.getter()
{
  if (*v0 == 0x726576726573 && v0[1] == 0xE600000000000000) {
    return specialized == infix<A>(_:_:)();
  }
  else {
    return OUTLINED_FUNCTION_0_2();
  }
}

uint64_t ExecutionLocation.isDevice.getter()
{
  if (*v0 == 0x656369766564 && v0[1] == 0xE600000000000000) {
    return specialized == infix<A>(_:_:)();
  }
  else {
    return OUTLINED_FUNCTION_0_2();
  }
}

uint64_t ExecutionLocation.rawValue.getter()
{
  return OUTLINED_FUNCTION_2_1();
}

uint64_t ExecutionLocation.description.getter()
{
  if (ExecutionLocation.isUnknown.getter()) {
    OUTLINED_FUNCTION_4_1();
  }
  else {
    swift_bridgeObjectRetain();
  }
  return OUTLINED_FUNCTION_6_0();
}

uint64_t ExecutionLocation.debugDescription.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  if ((ExecutionLocation.isUnknown.getter() & 1) == 0
    || ((OUTLINED_FUNCTION_7_0(), v2 == v3) ? (BOOL v4 = v1 == 0xE700000000000000) : (BOOL v4 = 0),
        v4 || (OUTLINED_FUNCTION_6_0(), (OUTLINED_FUNCTION_1_1() & 1) != 0)))
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    v6._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_6_0();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 41;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
  }
  return OUTLINED_FUNCTION_6_0();
}

uint64_t ExecutionLocation.hash(into:)()
{
  if ((ExecutionLocation.isUnknown.getter() & 1) == 0) {
    swift_bridgeObjectRetain();
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t ExecutionLocation.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  OUTLINED_FUNCTION_8_0();
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    OUTLINED_FUNCTION_8_0();
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    uint64_t v7 = v6;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    *a2 = v5;
    a2[1] = v7;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t ExecutionLocation.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

Swift::Int ExecutionLocation.hashValue.getter()
{
  if (ExecutionLocation.isUnknown.getter()) {
    OUTLINED_FUNCTION_4_1();
  }
  else {
    swift_bridgeObjectRetain();
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExecutionLocation()
{
  if ((ExecutionLocation.isUnknown.getter() & 1) == 0) {
    swift_bridgeObjectRetain();
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ExecutionLocation and conformance ExecutionLocation()
{
  unint64_t result = lazy protocol witness table cache variable for type ExecutionLocation and conformance ExecutionLocation;
  if (!lazy protocol witness table cache variable for type ExecutionLocation and conformance ExecutionLocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExecutionLocation and conformance ExecutionLocation);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ExecutionLocation@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return ExecutionLocation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ExecutionLocation(void *a1)
{
  return ExecutionLocation.encode(to:)(a1);
}

void *initializeBufferWithCopyOfBuffer for ExecutionLocation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ExecutionLocation()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for ExecutionLocation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for ExecutionLocation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExecutionLocation(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExecutionLocation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExecutionLocation()
{
  return &type metadata for ExecutionLocation;
}

uint64_t OUTLINED_FUNCTION_0_2()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_1_1()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_2_1()
{
  return v0;
}

void OUTLINED_FUNCTION_3_1(void *a1@<X8>)
{
  *a1 = v1;
  a1[1] = v2;
}

uint64_t OUTLINED_FUNCTION_6_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_0()
{
  return v0;
}

uint64_t TransformationChain.init(transformation:)(long long *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1C9EB3FF0;
  outlined init with take of Transforming(a1, v2 + 32);
  return v2;
}

uint64_t outlined init with take of Transforming(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t TransformationChain.count.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t TransformationChain.withAddedStep(_:)(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 8))(&v21, v4, v5);
  uint64_t v7 = v21;
  uint64_t v6 = v22;
  TransformationChain.outputType.getter(a2);
  if (v7 == v19 && v6 == v20)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
    {
      TransformationChain.outputType.getter(a2);
      uint64_t v10 = v21;
      uint64_t v11 = v22;
      uint64_t v12 = a1[3];
      uint64_t v13 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v12);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v13 + 8))(&v19, v12, v13);
      uint64_t v14 = v19;
      uint64_t v15 = v20;
      lazy protocol witness table accessor for type TransformationChainError and conformance TransformationChainError();
      swift_allocError();
      uint64_t *v16 = v10;
      v16[1] = v11;
      v16[2] = v14;
      v16[3] = v15;
      return swift_willThrow();
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9EB3FF0;
  outlined init with copy of Transforming((uint64_t)a1, inited + 32);
  uint64_t v21 = a2;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  return v21;
}

uint64_t TransformationChain.outputType.getter(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    __swift_project_boxed_opaque_existential_1((void *)(result + 40 * v1 - 8), *(void *)(result + 40 * v1 + 16));
    uint64_t v2 = OUTLINED_FUNCTION_0_3();
    return v3(v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformationChainError and conformance TransformationChainError()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformationChainError and conformance TransformationChainError;
  if (!lazy protocol witness table cache variable for type TransformationChainError and conformance TransformationChainError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationChainError and conformance TransformationChainError);
  }
  return result;
}

uint64_t outlined init with copy of Transforming(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *TransformationChain.inputType.getter(void *result)
{
  if (result[2])
  {
    __swift_project_boxed_opaque_existential_1(result + 4, result[7]);
    uint64_t v1 = OUTLINED_FUNCTION_0_3();
    return (void *)v2(v1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t TransformationChain.typeErasedTransform(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  outlined init with copy of Any(a1, (uint64_t)v15);
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    uint64_t v7 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of Transforming(v7, (uint64_t)v12);
      uint64_t v8 = v13;
      uint64_t v9 = v14;
      __swift_project_boxed_opaque_existential_1(v12, v13);
      (*(void (**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t))(v9 + 24))(v11, v15, v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      if (v3) {
        break;
      }
      outlined init with take of Any(v11, v15);
      v7 += 40;
      if (!--v6) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    outlined init with take of Any(v15, a3);
  }
  return swift_bridgeObjectRelease();
}

void *protocol witness for Transforming.inputType.getter in conformance TransformationChain()
{
  return TransformationChain.inputType.getter(*v0);
}

uint64_t protocol witness for Transforming.outputType.getter in conformance TransformationChain()
{
  return TransformationChain.outputType.getter(*v0);
}

uint64_t protocol witness for Transforming.typeErasedTransform(_:) in conformance TransformationChain@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return TransformationChain.typeErasedTransform(_:)(a1, *v2, a2);
}

void specialized Array.append<A>(contentsOf:)()
{
  OUTLINED_FUNCTION_1_2();
  if (v6)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v7 = v5;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v4 > *(void *)(v1 + 24) >> 1)
  {
    if (v3 <= v4) {
      uint64_t v9 = v4;
    }
    else {
      uint64_t v9 = v3;
    }
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v1);
    uint64_t v1 = v10;
  }
  if (!*(void *)(v7 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_2_2();
  if (v12 != v6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  specialized UnsafeMutablePointer.initialize(from:count:)(v7 + 32, v2, v1 + 40 * v11 + 32);
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t *v0 = v1;
    return;
  }
  uint64_t v13 = *(void *)(v1 + 16);
  BOOL v6 = __OFADD__(v13, v2);
  uint64_t v14 = v13 + v2;
  if (!v6)
  {
    *(void *)(v1 + 16) = v14;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_1_2();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  BOOL v6 = v4;
  if (!swift_isUniquelyReferenced_nonNull_native() || v3 > *(void *)(v1 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v1 = v7;
  }
  if (!*(void *)(v6 + 16))
  {
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_2_2();
  if (v9 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  specialized UnsafeMutablePointer.initialize(from:count:)(v6 + 32, v2, v1 + (v8 << 6) + 32);
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t *v0 = v1;
    return;
  }
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v5 = __OFADD__(v10, v2);
  uint64_t v11 = v10 + v2;
  if (!v5)
  {
    *(void *)(v1 + 16) = v11;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

ValueMetadata *type metadata accessor for TransformationChain()
{
  return &type metadata for TransformationChain;
}

uint64_t destroy for TransformationChainError()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for TransformationChainError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TransformationChainError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for TransformationChainError(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TransformationChainError(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TransformationChainError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for TransformationChainError()
{
  return 0;
}

ValueMetadata *type metadata accessor for TransformationChainError()
{
  return &type metadata for TransformationChainError;
}

uint64_t OUTLINED_FUNCTION_0_3()
{
  return v0;
}

uint64_t key path setter for SiriEnvironmentStorage.storage : SiriEnvironmentStorage(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 96);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t SiriEnvironmentStorage.storage.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SiriEnvironmentStorage.storage.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriEnvironmentStorage.storage.modify())()
{
  return SiriEnvironmentStorage.storage.modify;
}

uint64_t SiriEnvironmentStorage.__allocating_init<A>(namespace:)()
{
  uint64_t v0 = swift_allocObject();
  SiriEnvironmentStorage.init<A>(namespace:)();
  return v0;
}

uint64_t SiriEnvironmentStorage.init<A>(namespace:)()
{
  *(void *)(v0 + 16) = Dictionary.init(dictionaryLiteral:)();
  return v0;
}

void SiriEnvironmentStorage.subscript.getter(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = v5;
  uint64_t v74 = a4;
  uint64_t v76 = type metadata accessor for DecodingError();
  uint64_t v73 = *(void *)(v76 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v76, v10);
  v72 = &v66[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = MEMORY[0x1F4188790](v11, v13);
  v75 = &v66[-v15];
  uint64_t v17 = MEMORY[0x1F4188790](v14, v16);
  uint64_t v19 = &v66[-v18];
  uint64_t v77 = a3;
  uint64_t v20 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v17, v21);
  unint64_t v23 = &v66[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v24 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 88);
  uint64_t v25 = swift_bridgeObjectRetain();
  uint64_t v26 = v24(v25);
  if (*(void *)(v26 + 16) && (unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2), (v28 & 1) != 0))
  {
    uint64_t v70 = a1;
    v71 = (void *)v6;
    int64_t v29 = (uint64_t *)(*(void *)(v26 + 56) + 16 * v27);
    uint64_t v30 = *v29;
    unint64_t v31 = v29[1];
    outlined copy of Data._Representation(*v29, v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    uint64_t v32 = v77;
    long long v33 = v71;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    if (v33)
    {
      uint64_t v74 = v30;
      swift_release();
      id v80 = v33;
      id v34 = v33;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v35 = v76;
      if (swift_dynamicCast())
      {

        uint64_t v36 = v73;
        long long v37 = v75;
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v73 + 32))(v75, v19, v35);
        uint64_t v38 = v70;
        if (one-time initialization token for environment != -1) {
          swift_once();
        }
        v71 = (void *)v31;
        uint64_t v39 = type metadata accessor for Logger();
        __swift_project_value_buffer(v39, (uint64_t)static Logger.environment);
        v69 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v36 + 16);
        v69(v72, v37, v35);
        swift_bridgeObjectRetain_n();
        long long v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.error.getter();
        int v42 = v41;
        if (os_log_type_enabled(v40, v41))
        {
          uint64_t v43 = swift_slowAlloc();
          uint64_t v68 = swift_slowAlloc();
          uint64_t v79 = v68;
          *(_DWORD *)uint64_t v43 = 136315650;
          int v67 = v42;
          swift_bridgeObjectRetain();
          uint64_t v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, (unint64_t)a2, &v79);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v43 + 12) = 2080;
          uint64_t v44 = _typeName(_:qualified:)();
          uint64_t v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v79);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v43 + 22) = 2080;
          uint64_t v35 = v76;
          uint64_t v46 = LocalizedError.errorDescription.getter();
          if (v47)
          {
            unint64_t v48 = v47;
          }
          else
          {
            uint64_t v46 = 0;
            unint64_t v48 = 0xE000000000000000;
          }
          a2 = (void (*)(uint64_t))(v43 + 24);
          uint64_t v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, &v79);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v49 = OUTLINED_FUNCTION_2_3();
          ((void (*)(uint64_t))(v43 + 24))(v49);
          _os_log_impl(&dword_1C9E4C000, v40, (os_log_type_t)v67, "Unable to decode Data for key \"%s\" to type %s with error %s", (uint8_t *)v43, 0x20u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_3();
          OUTLINED_FUNCTION_3();
        }
        else
        {
          swift_bridgeObjectRelease_n();
          uint64_t v61 = OUTLINED_FUNCTION_2_3();
          a2(v61);
        }

        type metadata accessor for SiriEnvironmentStorage.StorageError();
        lazy protocol witness table accessor for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError(&lazy protocol witness table cache variable for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError, (void (*)(uint64_t))type metadata accessor for SiriEnvironmentStorage.StorageError);
        OUTLINED_FUNCTION_0_4();
        v62 = v75;
        v69(v63, v75, v35);
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        outlined consume of Data._Representation(v74, (unint64_t)v71);
        ((void (*)(unsigned char *, uint64_t))a2)(v62, v35);
      }
      else
      {

        if (one-time initialization token for environment != -1) {
          swift_once();
        }
        uint64_t v56 = type metadata accessor for Logger();
        __swift_project_value_buffer(v56, (uint64_t)static Logger.environment);
        swift_bridgeObjectRetain_n();
        v57 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v57, v58))
        {
          v59 = (uint8_t *)swift_slowAlloc();
          id v80 = (id)swift_slowAlloc();
          *(_DWORD *)v59 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, (unint64_t)a2, (uint64_t *)&v80);
          OUTLINED_FUNCTION_4_2(v60);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1C9E4C000, v57, v58, "An unknown error occured while trying to retreive and decode the data for key \"%s\" from Environment Storage", v59, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_3();
          OUTLINED_FUNCTION_3();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v64 = v74;
        type metadata accessor for SiriEnvironmentStorage.StorageError();
        lazy protocol witness table accessor for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError(&lazy protocol witness table cache variable for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError, (void (*)(uint64_t))type metadata accessor for SiriEnvironmentStorage.StorageError);
        OUTLINED_FUNCTION_0_4();
        void *v65 = v33;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        outlined consume of Data._Representation(v64, v31);
      }
    }
    else
    {
      outlined consume of Data._Representation(v30, v31);
      swift_release();
      uint64_t v55 = v74;
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(v20 + 32))(v74, v23, v32);
      __swift_storeEnumTagSinglePayload(v55, 0, 1, v32);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for environment != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.environment);
    swift_bridgeObjectRetain_n();
    v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      id v80 = (id)swift_slowAlloc();
      *(_DWORD *)v53 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, (uint64_t *)&v80);
      OUTLINED_FUNCTION_4_2(v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C9E4C000, v51, v52, "Data for key \"%s\" does not exist in Environment Storage", v53, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    type metadata accessor for SiriEnvironmentStorage.StorageError();
    lazy protocol witness table accessor for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError(&lazy protocol witness table cache variable for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError, (void (*)(uint64_t))type metadata accessor for SiriEnvironmentStorage.StorageError);
    OUTLINED_FUNCTION_0_4();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
}

void SiriEnvironmentStorage.updateStorage(_:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for environment != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.environment);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    v24[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v6 = Dictionary.Keys.description.getter();
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v9 = Set.description.getter();
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9E4C000, v3, v4, "Environment Storage updating. Adding keys %s and removing keys %s. ", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v12 = swift_bridgeObjectRelease_n();
  }
  uint64_t v13 = *(void (**)(void))(*(void *)v1 + 88);
  uint64_t v14 = ((uint64_t (*)(uint64_t))v13)(v12);
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = specialized Dictionary.merging(_:uniquingKeysWith:)(v15, v14);
  (*(void (**)(uint64_t))(*(void *)v1 + 96))(v16);
  swift_retain();
  uint64_t v17 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v17, v1);
  swift_bridgeObjectRelease();
  swift_retain_n();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    v24[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315138;
    v13();
    uint64_t v21 = Dictionary.Keys.description.getter();
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9E4C000, v18, v19, "Enviroment Storage finished updating. Current keys in storage are %s", v20, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v35 = a1 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v36 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v34 = a2;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  int64_t v37 = v8;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = *(uint64_t (**)(unsigned char *))(*(void *)a2 + 104);
    swift_bridgeObjectRetain();
    os_log_type_t v19 = (void (*)(unsigned char *, void))v18(v38);
    uint64_t v21 = v20;
    swift_bridgeObjectRetain();
    unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    char v24 = v23;
    swift_bridgeObjectRelease();
    if (v24)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v39 = *v21;
      uint64_t v26 = v39;
      *uint64_t v21 = 0x8000000000000000;
      uint64_t v27 = v3;
      Swift::Int v28 = *(void *)(v26 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Data>);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v28);
      uint64_t v29 = v39;
      swift_bridgeObjectRelease();
      uint64_t v30 = (uint64_t *)(*(void *)(v29 + 56) + 16 * v22);
      uint64_t v31 = *v30;
      unint64_t v32 = v30[1];
      _NativeDictionary._delete(at:)();
      *uint64_t v21 = v29;
      swift_bridgeObjectRelease();
      unint64_t v33 = v32;
      uint64_t v3 = v27;
      a2 = v34;
      outlined consume of Data._Representation(v31, v33);
    }
    v19(v38, 0);
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v8 = v37;
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v36) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v35 + 8 * v11);
    int64_t v13 = v8 + 1;
    if (!v12)
    {
      int64_t v13 = v8 + 2;
      if (v8 + 2 >= v36) {
        goto LABEL_25;
      }
      unint64_t v12 = *(void *)(v35 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v8 + 3;
        if (v8 + 3 >= v36) {
          goto LABEL_25;
        }
        unint64_t v12 = *(void *)(v35 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v8 + 4;
          if (v8 + 4 >= v36) {
            goto LABEL_25;
          }
          unint64_t v12 = *(void *)(v35 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v6 = (v12 - 1) & v12;
    int64_t v37 = v13;
  }
  uint64_t v14 = v8 + 5;
  if (v8 + 5 >= v36)
  {
LABEL_25:
    swift_release();
    return swift_release();
  }
  unint64_t v12 = *(void *)(v35 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v8 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v36) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v35 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t SiriEnvironmentStorage.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SiriEnvironmentStorage.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t serialize(_:at:)(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return MEMORY[0x1E4FBC860];
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return MEMORY[0x1E4FBC860];
  }
LABEL_6:
  unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return (uint64_t)v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *result;
  *unint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(void (*a1)(void))
{
  a1();

  return _typeName(_:qualified:)();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_3_2();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

{
  Swift::Int v4;
  uint64_t vars8;

  OUTLINED_FUNCTION_3_2();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

uint64_t type metadata accessor for SiriEnvironmentStorage.StorageError()
{
  uint64_t result = type metadata singleton initialization cache for SiriEnvironmentStorage.StorageError;
  if (!type metadata singleton initialization cache for SiriEnvironmentStorage.StorageError) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_1C9E57848@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 88))();
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for SiriEnvironmentStorage()
{
  return self;
}

uint64_t method lookup function for SiriEnvironmentStorage(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SiriEnvironmentStorage);
}

uint64_t dispatch thunk of SiriEnvironmentStorage.storage.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of SiriEnvironmentStorage.storage.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of SiriEnvironmentStorage.storage.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of SiriEnvironmentStorage.__allocating_init<A>(namespace:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of SiriEnvironmentStorage.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of SiriEnvironmentStorage.updateStorage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

char *initializeBufferWithCopyOfBuffer for SiriEnvironmentStorage.StorageError(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    int64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = &v9[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = *a2;
      size_t v11 = v10;
      *(void *)a1 = v10;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(v6 + 64));
        return a1;
      }
      uint64_t v8 = type metadata accessor for DecodingError();
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for SiriEnvironmentStorage.StorageError(void **a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    int v5 = *a1;
  }
  else if (!EnumCaseMultiPayload)
  {
    uint64_t v3 = type metadata accessor for DecodingError();
    Swift::Int v4 = *(void (**)(void **, uint64_t))(*(void *)(v3 - 8) + 8);
    v4(a1, v3);
  }
}

void *initializeWithCopy for SiriEnvironmentStorage.StorageError(void *a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = *a2;
    id v9 = v8;
    *a1 = v8;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
    uint64_t v7 = type metadata accessor for DecodingError();
    (*(void (**)(void *, void **, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for SiriEnvironmentStorage.StorageError(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of SiriEnvironmentStorage.StorageError((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = *a2;
      id v9 = v8;
      *a1 = v8;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      uint64_t v7 = type metadata accessor for DecodingError();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of SiriEnvironmentStorage.StorageError(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SiriEnvironmentStorage.StorageError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for SiriEnvironmentStorage.StorageError(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for DecodingError();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for SiriEnvironmentStorage.StorageError(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of SiriEnvironmentStorage.StorageError((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for DecodingError();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t destructiveInjectEnumTag for SiriEnvironmentStorage.StorageError()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for SiriEnvironmentStorage.StorageError()
{
  uint64_t result = type metadata accessor for DecodingError();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  uint64_t vars8;

  OUTLINED_FUNCTION_3_2();
  Hasher._combine(_:)(*(void *)(a1 + 16));
  uint64_t v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned int a1)
{
  uint64_t v3 = MEMORY[0x1CB792590](*(void *)(v1 + 40), a1, 4);

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, Swift::UInt a3)
{
  OUTLINED_FUNCTION_3_2();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(a3);
  Swift::Int v6 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)()
{
  OUTLINED_FUNCTION_6_1();
  type metadata accessor for CodingUserInfoKey();
  uint64_t v1 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t vars8;

  OUTLINED_FUNCTION_6_1();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  uint64_t v1 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0, v1);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 *a1)
{
  OUTLINED_FUNCTION_3_2();
  long long v4 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)int v5 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&unsigned char v5[16] = *(_OWORD *)(a1 + 40);
  *(void *)&v5[32] = *((void *)a1 + 7);
  Hasher._combine(_:)(*a1);
  uint64_t v9 = *(void *)v5;
  long long v7 = *(_OWORD *)&v5[8];
  long long v8 = v4;
  long long v6 = *(_OWORD *)&v5[24];
  outlined retain of TransformationCapability((uint64_t)a1);
  outlined retain of TypeIdentifier((uint64_t)&v8);
  String.hash(into:)();
  Hasher._combine(_:)(*(Swift::UInt *)v5);
  outlined release of TypeIdentifier((uint64_t)&v8);
  outlined retain of TypeIdentifier((uint64_t)&v7);
  String.hash(into:)();
  outlined release of TypeIdentifier((uint64_t)&v7);
  outlined retain of TypeIdentifier((uint64_t)&v6);
  String.hash(into:)();
  outlined release of TypeIdentifier((uint64_t)&v6);
  outlined release of TransformationCapability((uint64_t)a1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        int64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  void (**v16)(char *, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  unint64_t v22 = a1;
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v23 = v2;
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v10 = a2 & ~v9;
  uint64_t v21 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    BOOL v11 = ~v9;
    BOOL v14 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v12 = v6 + 16;
    int64_t v13 = v14;
    uint64_t v15 = *(void *)(v12 + 56);
    uint64_t v16 = (void (**)(char *, uint64_t))(v12 - 8);
    do
    {
      uint64_t v17 = v12;
      v13(v8, *(void *)(v23 + 48) + v15 * v10, v4);
      uint64_t v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v16)(v8, v4);
      if (v18) {
        break;
      }
      uint64_t v10 = (v10 + 1) & v11;
      uint64_t v12 = v17;
    }
    while (((*(void *)(v21 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v20 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = v2;
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v10 = a2 & ~v9;
  os_log_type_t v19 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    BOOL v11 = ~v9;
    BOOL v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    int64_t v13 = v5 + 16;
    uint64_t v12 = v14;
    uint64_t v15 = *(void *)(v13 + 56);
    do
    {
      v12(v8, *(void *)(v21 + 48) + v15 * v10, v4);
      lazy protocol witness table accessor for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v13 - 8))(v8, v4);
      if (v16) {
        break;
      }
      uint64_t v10 = (v10 + 1) & v11;
    }
    while (((*(void *)(v19 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    uint64_t v8 = *(void *)(a1 + 16);
    if (*(void *)(*(void *)(v7 + 8 * result) + 16) != v8)
    {
      uint64_t v9 = ~v5;
      for (unint64_t result = (result + 1) & v9;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v9)
      {
        if (*(void *)(*(void *)(v7 + 8 * result) + 16) == v8) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    uint64_t v11 = ~v6;
    uint64_t v12 = *(void *)(v4 + 48);
    do
    {
      int64_t v13 = (void *)(v12 + 24 * v7);
      uint64_t v14 = v13[2];
      BOOL v15 = *v13 == a1 && v13[1] == a2;
      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && v14 == a3) {
        break;
      }
      unint64_t v7 = (v7 + 1) & v11;
    }
    while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = ~v4;
    uint64_t v7 = *(void *)(v2 + 48);
    int v8 = *(unsigned __int8 *)a1;
    uint64_t v24 = a1[2];
    uint64_t v25 = a1[1];
    uint64_t v22 = a1[4];
    uint64_t v23 = a1[3];
    uint64_t v20 = a1[6];
    uint64_t v21 = a1[5];
    uint64_t v19 = a1[7];
    do
    {
      uint64_t v9 = (void *)(v7 + (v5 << 6));
      if (v8 == *(unsigned __int8 *)v9)
      {
        uint64_t v10 = v9[3];
        uint64_t v11 = v9[4];
        uint64_t v12 = v9[5];
        uint64_t v13 = v9[6];
        uint64_t v14 = v9[7];
        BOOL v15 = v9[1] == v25 && v9[2] == v24;
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && v10 == v23)
        {
          BOOL v16 = v11 == v22 && v12 == v21;
          if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            BOOL v17 = v13 == v20 && v14 == v19;
            if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              break;
            }
          }
        }
      }
      unint64_t v5 = (v5 + 1) & v6;
    }
    while (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

uint64_t lazy protocol witness table accessor for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  specialized LazyMapSequence.makeIterator()(a1, a2, a3, v34);
  long long v30 = v34[0];
  long long v31 = v34[1];
  long long v32 = v34[2];
  uint64_t v33 = v35;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(&v27);
  uint64_t v7 = *((void *)&v27 + 1);
  if (*((void *)&v27 + 1))
  {
    while (1)
    {
      uint64_t v8 = v27;
      uint64_t v9 = v28;
      uint64_t v10 = v29;
      uint64_t v11 = (void *)*a5;
      unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v7);
      uint64_t v14 = v11[2];
      BOOL v15 = (v12 & 1) == 0;
      if (__OFADD__(v14, v15)) {
        break;
      }
      char v16 = v12;
      if (v11[3] >= v14 + v15)
      {
        if ((a4 & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Data>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
        unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
        if ((v16 & 1) != (v18 & 1)) {
          goto LABEL_16;
        }
        unint64_t v13 = v17;
      }
      uint64_t v19 = (void *)*a5;
      if (v16)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = v19[7] + 16 * v13;
        outlined consume of Data._Representation(*(void *)v20, *(void *)(v20 + 8));
        *(void *)uint64_t v20 = v9;
        *(void *)(v20 + 8) = v10;
      }
      else
      {
        v19[(v13 >> 6) + 8] |= 1 << v13;
        uint64_t v21 = (uint64_t *)(v19[6] + 16 * v13);
        *uint64_t v21 = v8;
        v21[1] = v7;
        uint64_t v22 = (void *)(v19[7] + 16 * v13);
        void *v22 = v9;
        v22[1] = v10;
        uint64_t v23 = v19[2];
        BOOL v24 = __OFADD__(v23, 1);
        uint64_t v25 = v23 + 1;
        if (v24) {
          goto LABEL_15;
        }
        v19[2] = v25;
      }
      specialized LazyMapSequence.Iterator.next()(&v27);
      uint64_t v7 = *((void *)&v27 + 1);
      a4 = 1;
      if (!*((void *)&v27 + 1)) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of [String : Data].Iterator._Variant();
    return swift_release();
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_4()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_2_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_2()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_4_2(uint64_t a1)
{
  *(void *)(v1 - 88) = a1;
  return v1 - 88;
}

uint64_t OUTLINED_FUNCTION_6_1()
{
  return 0;
}

uint64_t static Buildable.builder()()
{
  return Builder.__allocating_init()();
}

uint64_t type metadata accessor for Builder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Builder.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  Builder.init()();
  return v0;
}

uint64_t static Buildable.withBuilder(_:)(void (*a1)(uint64_t *))
{
  type metadata accessor for Builder();
  uint64_t v4 = Builder.__allocating_init()();
  a1(&v4);
  if (v1) {
    return swift_release();
  }
  swift_retain();
  Builder.build()();
  return swift_release_n();
}

uint64_t Builder.build()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 80);
  uint64_t v3 = *(void *)(v1 + 88);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = swift_retain();
  return v4(v5, v2, v3);
}

uint64_t Builder.init()()
{
  type metadata accessor for PartialKeyPath();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  *(void *)(v0 + 16) = Dictionary.init(dictionaryLiteral:)();
  return v0;
}

uint64_t Builder.subscript.getter()
{
  OUTLINED_FUNCTION_2_4();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_11_0();
  type metadata accessor for PartialKeyPath();
  swift_retain();
  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  int v0 = OUTLINED_FUNCTION_8_1();
  return OUTLINED_FUNCTION_13_0(v0);
}

{
  int v0;

  OUTLINED_FUNCTION_2_4();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_11_0();
  type metadata accessor for PartialKeyPath();
  swift_retain();
  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  int v0 = OUTLINED_FUNCTION_8_1();
  return OUTLINED_FUNCTION_13_0(v0);
}

uint64_t key path getter for Builder.subscript<A>(dynamicMember:) : <A><A1>Builder<A>AA1()
{
  return Builder.subscript.getter();
}

{
  return Builder.subscript.getter();
}

uint64_t Builder.subscript.setter()
{
  OUTLINED_FUNCTION_4_3();
  uint64_t v1 = *(void *)(*MEMORY[0x1E4FBC5F0] + *v0 + 8);
  type metadata accessor for Optional();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v7 = &v21[-v6];
  OUTLINED_FUNCTION_0_5();
  uint64_t v9 = v8;
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1F4188790](v10, v11);
  unint64_t v13 = &v21[-v12];
  uint64_t v14 = OUTLINED_FUNCTION_5_1();
  v15(v14);
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v1) == 1)
  {
    char v16 = *(void (**)(void))(v3 + 8);
    OUTLINED_FUNCTION_3_3();
    v16();
    OUTLINED_FUNCTION_1_3();
    type metadata accessor for PartialKeyPath();
    type metadata accessor for Dictionary();
    Dictionary.removeValue(forKey:)();
    swift_endAccess();
    OUTLINED_FUNCTION_3_3();
    v16();
    outlined destroy of Any?((uint64_t)v22);
    return swift_release();
  }
  else
  {
    OUTLINED_FUNCTION_10_0();
    v18();
    v22[3] = v1;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v22);
    (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v9 + 16))(boxed_opaque_existential_0, v13, v1);
    OUTLINED_FUNCTION_1_3();
    type metadata accessor for PartialKeyPath();
    type metadata accessor for Dictionary();
    swift_retain();
    Dictionary.subscript.setter();
    swift_endAccess();
    swift_release();
    OUTLINED_FUNCTION_3_3();
    v20();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v13, v1);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned char *v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  void (*v17)(void);
  void (*v19)(void);
  uint64_t *boxed_opaque_existential_0;
  void (*v21)(void);
  unsigned char v22[24];
  uint64_t v23[4];

  OUTLINED_FUNCTION_4_3();
  uint64_t v1 = *(void *)(*MEMORY[0x1E4FBC5F0] + *v0 + 8);
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v7 = &v22[-v6];
  uint64_t v8 = *(void *)(v1 + 16);
  OUTLINED_FUNCTION_0_5();
  uint64_t v10 = v9;
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v14 = &v22[-v13];
  BOOL v15 = OUTLINED_FUNCTION_5_1();
  v16(v15);
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1)
  {
    unint64_t v17 = *(void (**)(void))(v3 + 8);
    OUTLINED_FUNCTION_3_3();
    v17();
    OUTLINED_FUNCTION_1_3();
    type metadata accessor for PartialKeyPath();
    type metadata accessor for Dictionary();
    Dictionary.removeValue(forKey:)();
    swift_endAccess();
    OUTLINED_FUNCTION_3_3();
    v17();
    outlined destroy of Any?((uint64_t)v23);
    return swift_release();
  }
  else
  {
    OUTLINED_FUNCTION_10_0();
    v19();
    v23[3] = v8;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v23);
    (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v10 + 16))(boxed_opaque_existential_0, v14, v8);
    OUTLINED_FUNCTION_1_3();
    type metadata accessor for PartialKeyPath();
    type metadata accessor for Dictionary();
    swift_retain();
    Dictionary.subscript.setter();
    swift_endAccess();
    swift_release();
    OUTLINED_FUNCTION_3_3();
    v21();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v14, v8);
  }
}

void (*Builder.subscript.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  uint64_t v6 = type metadata accessor for Optional();
  v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  Builder.subscript.getter();
  return Builder.subscript.modify;
}

void Builder.subscript.modify(uint64_t **a1, char a2)
{
}

{
  Builder.subscript.modify(a1, a2, (void (*)(void *, uint64_t))Builder.subscript.setter);
}

uint64_t key path setter for Builder.subscript<A>(dynamicMember:) : <A><A1>Builder<A>AA1(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(char *, uint64_t))
{
  type metadata accessor for Optional();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1F4188790](v8, v9);
  uint64_t v11 = (char *)&v15 - v10;
  uint64_t v12 = *a3;
  (*(void (**)(char *, uint64_t))(v13 + 16))((char *)&v15 - v10, a1);
  swift_retain();
  return a5(v11, v12);
}

void (*Builder.subscript.modify(void *a1, void *a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  v5[2] = *(void *)(*MEMORY[0x1E4FBC5F0] + *a2 + 8);
  OUTLINED_FUNCTION_0_5();
  *(void *)(v6 + 24) = v7;
  size_t v9 = *(void *)(v8 + 64);
  v5[4] = malloc(v9);
  v5[5] = malloc(v9);
  Builder.subscript.getter();
  return Builder.subscript.modify;
}

void Builder.subscript.modify(uint64_t **a1, char a2, void (*a3)(void *, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)(*a1)[4];
  uint64_t v6 = (void *)(*a1)[5];
  if (a2)
  {
    uint64_t v7 = v4[2];
    uint64_t v8 = v4[3];
    uint64_t v9 = *v4;
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))((*a1)[4], v6, v7);
    swift_retain();
    a3(v5, v9);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v7);
  }
  else
  {
    uint64_t v10 = *v4;
    swift_retain();
    a3(v6, v10);
  }
  free(v6);
  free(v5);

  free(v4);
}

uint64_t (*Builder.subscript.getter(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = a1;
  swift_retain();
  swift_retain();
  return partial apply for closure #1 in Builder.subscript.getter;
}

uint64_t closure #1 in Builder.subscript.getter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v8 = *(void *)(*MEMORY[0x1E4FBC5F0] + *a3 + 8);
  uint64_t v4 = v8;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(boxed_opaque_existential_0, a1, v4);
  swift_beginAccess();
  type metadata accessor for PartialKeyPath();
  type metadata accessor for Dictionary();
  swift_retain();
  Dictionary.subscript.setter();
  swift_endAccess();
  return swift_retain();
}

uint64_t Builder.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Builder.__deallocating_deinit()
{
  Builder.deinit();

  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1C9E59E90()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in Builder.subscript.getter(uint64_t a1)
{
  return closure #1 in Builder.subscript.getter(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1C9E59EDC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return key path setter for Builder.subscript<A>(dynamicMember:) : <A><A1>Builder<A>AA1(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t))Builder.subscript.setter);
}

uint64_t sub_1C9E59F14(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return key path setter for Builder.subscript<A>(dynamicMember:) : <A><A1>Builder<A>AA1(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t))Builder.subscript.setter);
}

uint64_t dispatch thunk of Buildable.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata instantiation function for Builder()
{
  return MEMORY[0x1F41863F0]();
}

uint64_t type metadata completion function for Builder()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for Builder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for Builder);
}

uint64_t dispatch thunk of Builder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t OUTLINED_FUNCTION_1_3()
{
  *(void *)(v1 - 120) = v0;
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_5_1()
{
  return v0;
}

__n128 OUTLINED_FUNCTION_6_2(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_8_1()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_9_0()
{
  JUMPOUT(0x1CB791960);
}

uint64_t OUTLINED_FUNCTION_12_0()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_13_0(int a1)
{
  return __swift_storeEnumTagSinglePayload(v1, a1 ^ 1u, 1, v2);
}

uint64_t OUTLINED_FUNCTION_14_0()
{
  return 24;
}

uint64_t CurrentDevice.setIdentifiedUserMeCard(_:)(void *a1)
{
  uint64_t v5 = *(uint64_t (**)(void *))(*(void *)v1 + 216);
  id v3 = a1;

  return v5(a1);
}

Swift::Void __swiftcall CurrentDevice.setDeviceIdiom(_:)(SiriUtilities::DeviceIdiom a1)
{
  OUTLINED_FUNCTION_0_6((unsigned char *)a1);
  uint64_t v1 = OUTLINED_FUNCTION_1_4();
  v2(v1);
}

Swift::Void __swiftcall CurrentDevice.setIsTextToSpeechEnabled(_:)(Swift::Bool a1)
{
  (*(void (**)(Swift::Bool))(*(void *)v1 + 312))(a1);
}

Swift::Void __swiftcall CurrentDevice.setIsLockedWithPasscode(_:)(Swift::Bool a1)
{
  (*(void (**)(Swift::Bool))(*(void *)v1 + 360))(a1);
}

Swift::Void __swiftcall CurrentDevice.setSiriVoiceGender(_:)(SiriUtilities::SiriVoiceGender a1)
{
  OUTLINED_FUNCTION_0_6((unsigned char *)a1);
  uint64_t v1 = OUTLINED_FUNCTION_1_4();
  v2(v1);
}

Swift::Void __swiftcall CurrentDevice.setPreferencesLanguageCode(_:)(Swift::String_optional a1)
{
  object = a1.value._object;
  uint64_t countAndFlagsBits = a1.value._countAndFlagsBits;
  uint64_t v4 = *(void (**)(uint64_t, void *))(*(void *)v1 + 456);
  swift_bridgeObjectRetain();

  v4(countAndFlagsBits, object);
}

uint64_t CurrentDevice.setSiriLocale(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Locale();
  MEMORY[0x1F4188790](v3, v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(*(void *)v1 + 504))(v6);
}

Swift::Void __swiftcall CurrentDevice.setIsVoiceTriggerEnabled(_:)(Swift::Bool a1)
{
  (*(void (**)(Swift::Bool))(*(void *)v1 + 552))(a1);
}

Swift::Void __swiftcall CurrentDevice.setPersonalDomainsAuthenticationMode(_:)(SiriUtilities::PersonalDomainsAuthenticationMode_optional a1)
{
  OUTLINED_FUNCTION_0_6((unsigned char *)a1.value);
  uint64_t v1 = OUTLINED_FUNCTION_1_4();
  v2(v1);
}

Swift::Void __swiftcall CurrentDevice.setRestrictions(_:)(SiriUtilities::DeviceRestrictions a1)
{
  uint64_t v2 = *(void *)a1.rawValue;
  v3[0] = DeviceRestrictions.aceSet.getter();
  v3[1] = v2;
  (*(void (**)(void *))(*(void *)v1 + 648))(v3);
}

uint64_t CurrentDevice.setRestrictedCommands(_:)(void *a1)
{
  uint64_t v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  uint64_t v3 = *(uint64_t (**)(void *))(*(void *)v1 + 648);
  swift_bridgeObjectRetain();
  return v3(v5);
}

Swift::Void __swiftcall CurrentDevice.setDeviceClass(_:)(SiriUtilities::DeviceClass_optional a1)
{
  OUTLINED_FUNCTION_0_6((unsigned char *)a1.value);
  uint64_t v1 = OUTLINED_FUNCTION_1_4();
  v2(v1);
}

unsigned char *OUTLINED_FUNCTION_0_6(unsigned char *result)
{
  *(unsigned char *)(v1 - 1) = *result;
  return result;
}

uint64_t OUTLINED_FUNCTION_1_4()
{
  return v0 - 1;
}

uint64_t SiriEnvironment.networkAvailability.getter()
{
  uint64_t v0 = type metadata accessor for NetworkAvailability();
  OUTLINED_FUNCTION_0_7();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 248);
  uint64_t v3 = lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type NetworkAvailability and conformance NetworkAvailability, v2, (void (*)(uint64_t))type metadata accessor for NetworkAvailability);

  return v5(v0, v0, v3);
}

uint64_t type metadata accessor for NetworkAvailability()
{
  return self;
}

uint64_t key path setter for SiriEnvironment.networkAvailability : SiriEnvironment()
{
  uint64_t v0 = swift_retain();
  return SiriEnvironment.networkAvailability.setter(v0);
}

uint64_t SiriEnvironment.networkAvailability.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NetworkAvailability();
  OUTLINED_FUNCTION_0_7();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 256);
  uint64_t v5 = lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type NetworkAvailability and conformance NetworkAvailability, v4, (void (*)(uint64_t))type metadata accessor for NetworkAvailability);

  return v7(a1, v2, v2, v5);
}

uint64_t (*SiriEnvironment.networkAvailability.modify(void *a1))()
{
  a1[1] = v1;
  uint64_t v3 = type metadata accessor for NetworkAvailability();
  a1[2] = v3;
  OUTLINED_FUNCTION_0_7();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 248);
  uint64_t v7 = lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type NetworkAvailability and conformance NetworkAvailability, v6, (void (*)(uint64_t))type metadata accessor for NetworkAvailability);
  a1[3] = v7;
  *a1 = v5(v3, v3, v7);
  return SiriEnvironment.networkAvailability.modify;
}

uint64_t SiriEnvironment.networkAvailability.modify()
{
  OUTLINED_FUNCTION_0_7();
  uint64_t v1 = *(void (**)(void))(v0 + 256);
  if (v2)
  {
    swift_retain();
    OUTLINED_FUNCTION_39();
    v1();
    return swift_release();
  }
  else
  {
    OUTLINED_FUNCTION_39();
    return ((uint64_t (*)(void))v1)();
  }
}

uint64_t NetworkAvailability.Status.init(reachabilityState:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = result == 1;
  if (result == 2) {
    char v2 = 2;
  }
  *a2 = v2;
  return result;
}

uint64_t NetworkAvailability.Status.description.getter()
{
  OUTLINED_FUNCTION_37();
  uint64_t v2 = 0x616C696176616E75;
  if (!v3) {
    uint64_t v2 = 0x6C62616C69617661;
  }
  if (v0) {
    return v2;
  }
  else {
    return v1;
  }
}

BOOL static NetworkAvailability.Status.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void NetworkAvailability.Status.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int NetworkAvailability.Status.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t key path setter for NetworkAvailability.mock : NetworkAvailability(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 184);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t NetworkAvailability.mock.getter()
{
  return swift_retain();
}

uint64_t NetworkAvailability.mock.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_release();
}

void *key path getter for NetworkAvailability.status : NetworkAvailability@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  __n128 result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 200))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for NetworkAvailability.status : NetworkAvailability(char *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v4 = *a1;
  return (*(uint64_t (**)(char *))(*(void *)v2 + 208))(&v4);
}

uint64_t NetworkAvailability.status.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  specialized static MockablePublished.subscript.getter(v1, KeyPath, a1);
  swift_release();

  return swift_release();
}

uint64_t specialized static MockablePublished.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  v13[4] = a1;
  swift_retain();
  uint64_t v6 = (void (*)(void *, void))swift_readAtKeyPath();
  uint64_t v8 = *v7;
  swift_retain();
  v6(v13, 0);
  uint64_t v9 = swift_release();
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(v9);
  if (v10
    && ((*(void (**)(void *__return_ptr, uint64_t))(*(void *)v10 + 144))(v13, a2),
        swift_release(),
        char v11 = v13[0],
        LOBYTE(v13[0]) != 3))
  {
    uint64_t result = swift_release();
    *a3 = v11;
  }
  else
  {
    (*(void (**)(void))(*(void *)v8 + 104))();
    return swift_release();
  }
  return result;
}

uint64_t specialized static MockablePublished.subscript.getter(uint64_t a1, uint64_t a2)
{
  v11[4] = a1;
  swift_retain();
  char v4 = (void (*)(void *, void))swift_readAtKeyPath();
  uint64_t v6 = *v5;
  swift_retain();
  v4(v11, 0);
  uint64_t v7 = swift_release();
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(v7);
  if (v8
    && ((*(void (**)(void *__return_ptr, uint64_t))(*(void *)v8 + 144))(v11, a2),
        swift_release(),
        char v9 = v11[0],
        LOBYTE(v11[0]) != 2))
  {
    swift_release();
    return v9 & 1;
  }
  else
  {
    (*(void (**)(void *__return_ptr))(*(void *)v6 + 104))(v11);
    swift_release();
    return LOBYTE(v11[0]);
  }
}

#error "1C9E5AEA8: call analysis failed (funcsize=57)"

#error "1C9E5AF8C: call analysis failed (funcsize=51)"

#error "1C9E5B058: call analysis failed (funcsize=57)"

#error "1C9E5B13C: call analysis failed (funcsize=51)"

#error "1C9E5B208: call analysis failed (funcsize=59)"

uint64_t specialized static MockablePublished.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1F4188790](v4 - 8, v5);
  OUTLINED_FUNCTION_12_1();
  uint64_t v8 = v7 - v6;
  uint64_t v16 = a1;
  swift_retain();
  char v9 = (void (*)(unsigned char *, void))swift_readAtKeyPath();
  swift_retain();
  v9(v15, 0);
  swift_release();
  OUTLINED_FUNCTION_0_7();
  if (!(*(uint64_t (**)(void))(v10 + 184))()) {
    goto LABEL_4;
  }
  OUTLINED_FUNCTION_4_4();
  OUTLINED_FUNCTION_13_1();
  v11();
  swift_release();
  uint64_t v12 = type metadata accessor for Locale();
  if (__swift_getEnumTagSinglePayload(v8, 1, v12) == 1)
  {
    outlined destroy of Locale?(v8);
LABEL_4:
    OUTLINED_FUNCTION_14_1();
    v13();
    return swift_release();
  }
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(a2, v8, v12);
}

#error "1C9E5B4B8: call analysis failed (funcsize=51)"

#error "1C9E5B584: call analysis failed (funcsize=51)"

#error "1C9E5B650: call analysis failed (funcsize=51)"

#error "1C9E5B72C: call analysis failed (funcsize=66)"

uint64_t NetworkAvailability.status.setter(char *a1)
{
  char v2 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();

  return specialized static MockablePublished.subscript.setter(v2, v1);
}

uint64_t specialized static MockablePublished.subscript.setter(void *a1)
{
  type metadata accessor for CurrentDevice();
  lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice, 255, (void (*)(uint64_t))type metadata accessor for CurrentDevice);
  OUTLINED_FUNCTION_18();
  ObservableObjectPublisher.send()();
  swift_release();
  OUTLINED_FUNCTION_27();
  swift_retain();
  OUTLINED_FUNCTION_3_4();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_23();
  v2();
  swift_release();
  CurrentValueSubject.send(_:)();
  swift_release();
  OUTLINED_FUNCTION_27();
  swift_retain();
  OUTLINED_FUNCTION_3_4();
  swift_release();
  swift_release();
  uint64_t v15 = (uint64_t)a1;
  OUTLINED_FUNCTION_0_7();
  uint64_t v4 = *(void (**)(uint64_t *))(v3 + 112);
  id v5 = a1;
  uint64_t v13 = OUTLINED_FUNCTION_33((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12, v15);
  v4(v13);

  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t specialized static MockablePublished.subscript.setter()
{
  OUTLINED_FUNCTION_11_1();
  lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice, 255, (void (*)(uint64_t))type metadata accessor for CurrentDevice);
  OUTLINED_FUNCTION_18();
  ObservableObjectPublisher.send()();
  swift_release();
  OUTLINED_FUNCTION_27();
  swift_retain();
  OUTLINED_FUNCTION_3_4();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_23();
  v1();
  swift_release();
  CurrentValueSubject.send(_:)();
  swift_release();
  OUTLINED_FUNCTION_27();
  swift_retain();
  OUTLINED_FUNCTION_3_4();
  swift_release();
  swift_release();
  LOBYTE(v13) = v0;
  OUTLINED_FUNCTION_0_7();
  uint64_t v10 = OUTLINED_FUNCTION_42(v2, v3, v4, v5, v6, v7, v8, v9, v13);
  v11(v10);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t specialized static MockablePublished.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v19[2] = a1;
  v19[3] = a2;
  type metadata accessor for CurrentDevice();
  lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice, 255, (void (*)(uint64_t))type metadata accessor for CurrentDevice);
  OUTLINED_FUNCTION_48();
  ObservableObjectPublisher.send()();
  swift_release();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_0_7();
  (*(void (**)(void *__return_ptr))(v5 + 152))(v19);
  swift_release();
  CurrentValueSubject.send(_:)();
  swift_release();
  v19[1] = a3;
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  uint64_t v18 = a1;
  OUTLINED_FUNCTION_0_7();
  uint64_t v7 = *(void (**)(uint64_t *))(v6 + 112);
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v16 = OUTLINED_FUNCTION_33(v8, v9, v10, v11, v12, v13, v14, v15, v18);
  v7(v16);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void v18[4];

  v18[2] = a1;
  v18[3] = a2;
  type metadata accessor for CurrentDevice();
  lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice, 255, (void (*)(uint64_t))type metadata accessor for CurrentDevice);
  OUTLINED_FUNCTION_48();
  ObservableObjectPublisher.send()();
  swift_release();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_0_7();
  (*(void (**)(void *__return_ptr))(v5 + 152))(v18);
  swift_release();
  CurrentValueSubject.send(_:)();
  swift_release();
  v18[1] = a3;
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_0_7();
  uint64_t v7 = *(void (**)(uint64_t *))(v6 + 112);
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v16 = OUTLINED_FUNCTION_33(v8, v9, v10, v11, v12, v13, v14, v15, a1);
  v7(v16);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t specialized static MockablePublished.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1_5();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7, v8);
  OUTLINED_FUNCTION_12_1();
  uint64_t v11 = v10 - v9;
  type metadata accessor for CurrentDevice();
  lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice, 255, (void (*)(uint64_t))type metadata accessor for CurrentDevice);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  uint64_t v16 = a2;
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_0_7();
  (*(void (**)(void *__return_ptr))(v12 + 152))(v15);
  swift_release();
  CurrentValueSubject.send(_:)();
  swift_release();
  uint64_t v16 = a2;
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  uint64_t v13 = v15[1];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v11, a1, v4);
  (*(void (**)(uint64_t))(*(void *)v13 + 112))(v11);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v4);
}

uint64_t specialized static MockablePublished.subscript.setter(char a1, uint64_t a2)
{
  char v10 = a1;
  type metadata accessor for NetworkAvailability();
  lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type NetworkAvailability and conformance NetworkAvailability, v4, (void (*)(uint64_t))type metadata accessor for NetworkAvailability);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  uint64_t v9 = a2;
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  uint64_t v5 = swift_release();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v8 + 152))(&v7, v5);
  swift_release();
  CurrentValueSubject.send(_:)();
  swift_release();
  uint64_t v9 = a2;
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  LOBYTE(v7) = a1;
  (*(void (**)(uint64_t *))(*(void *)v8 + 112))(&v7);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t specialized static MockablePublished.subscript.setter(void *a1, void *a2)
{
  type metadata accessor for CurrentProcess();
  lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type CurrentProcess and conformance CurrentProcess, 255, (void (*)(uint64_t))type metadata accessor for CurrentProcess);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  id v4 = a2;
  swift_retain();
  OUTLINED_FUNCTION_3_4();

  swift_release();
  OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_23();
  v5();
  swift_release();
  CurrentValueSubject.send(_:)();
  swift_release();
  id v6 = v4;
  swift_retain();
  OUTLINED_FUNCTION_3_4();

  swift_release();
  uint64_t v19 = (uint64_t)a1;
  OUTLINED_FUNCTION_0_7();
  uint64_t v8 = *(void (**)(uint64_t *))(v7 + 112);
  id v9 = a1;
  unint64_t v17 = OUTLINED_FUNCTION_33((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v19);
  v8(v17);

  swift_release();
  swift_release();
  return swift_release();
}

void (*NetworkAvailability.status.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v3[4] = swift_getKeyPath();
  v3[5] = swift_getKeyPath();
  swift_beginAccess();
  OUTLINED_FUNCTION_0_7();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 176);
  uint64_t v6 = swift_retain();
  if (v5(v6) && (OUTLINED_FUNCTION_13_1(), v7(), swift_release(), int v8 = *((unsigned __int8 *)v3 + 49), v8 != 3))
  {
    swift_release();
    *((unsigned char *)v3 + 48) = v8;
  }
  else
  {
    OUTLINED_FUNCTION_14_1();
    v9();
    swift_release();
  }
  return NetworkAvailability.status.modify;
}

void NetworkAvailability.status.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  char v3 = *(unsigned char *)(*(void *)a1 + 48);
  swift_retain();
  specialized static MockablePublished.subscript.setter(v3, v2);

  free(v1);
}

void *key path getter for NetworkAvailability.$status : NetworkAvailability@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 224))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for NetworkAvailability.$status : NetworkAvailability(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v5 = *a1;
  char v3 = *(uint64_t (**)(uint64_t *))(*(void *)v2 + 232);
  swift_retain();
  return v3(&v5);
}

uint64_t NetworkAvailability.$status.getter()
{
  OUTLINED_FUNCTION_2_5();
  OUTLINED_FUNCTION_0_7();
  uint64_t v1 = *(void (**)(void))(v0 + 152);
  swift_retain();
  OUTLINED_FUNCTION_19();
  v1();
  return swift_release();
}

uint64_t NetworkAvailability.$status.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  OUTLINED_FUNCTION_2_5();
  uint64_t v14 = v1;
  OUTLINED_FUNCTION_0_7();
  char v3 = *(void (**)(uint64_t *))(v2 + 160);
  uint64_t v4 = swift_retain();
  uint64_t v12 = OUTLINED_FUNCTION_22(v4, v5, v6, v7, v8, v9, v10, v11, v14);
  v3(v12);
  return swift_release();
}

uint64_t (*NetworkAvailability.$status.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  return NetworkAvailability.$status.modify;
}

uint64_t NetworkAvailability.$status.modify(uint64_t *a1, char a2)
{
  return NetworkAvailability.$status.modify(a1, a2, (void (*)(uint64_t *))NetworkAvailability.$status.setter);
}

uint64_t key path getter for NetworkAvailability.isAvailable : NetworkAvailability@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 248))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for NetworkAvailability.isAvailable : NetworkAvailability(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 256))(*a1);
}

uint64_t NetworkAvailability.isAvailable.getter()
{
  return NetworkAvailability.isAvailable.getter();
}

{
  uint64_t v0;
  uint64_t KeyPath;
  char v2;

  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v2 = specialized static MockablePublished.subscript.getter(v0, KeyPath);
  swift_release();
  swift_release();
  return v2 & 1;
}

uint64_t NetworkAvailability.isAvailable.setter(char a1)
{
  return NetworkAvailability.isAvailable.setter(a1);
}

{
  uint64_t v1;
  uint64_t vars8;

  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();

  return specialized static MockablePublished.subscript.setter(a1, v1);
}

uint64_t (*NetworkAvailability.isAvailable.modify(void *a1))()
{
  OUTLINED_FUNCTION_47(a1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_45(KeyPath);
  uint64_t v2 = swift_getKeyPath();
  uint64_t v3 = OUTLINED_FUNCTION_15(v2);
  OUTLINED_FUNCTION_32(v3);
  return NetworkAvailability.isAvailable.modify;
}

void *key path getter for NetworkAvailability.$isAvailable : NetworkAvailability@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 272))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for NetworkAvailability.$isAvailable : NetworkAvailability(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v5 = *a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(*(void *)v2 + 280);
  swift_retain();
  return v3(&v5);
}

uint64_t NetworkAvailability.$isAvailable.getter()
{
  OUTLINED_FUNCTION_2_5();
  OUTLINED_FUNCTION_0_7();
  uint64_t v1 = *(void (**)(void))(v0 + 152);
  swift_retain();
  OUTLINED_FUNCTION_19();
  v1();
  return swift_release();
}

uint64_t NetworkAvailability.$isAvailable.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  OUTLINED_FUNCTION_2_5();
  uint64_t v14 = v1;
  OUTLINED_FUNCTION_0_7();
  uint64_t v3 = *(void (**)(uint64_t *))(v2 + 160);
  uint64_t v4 = swift_retain();
  uint64_t v12 = OUTLINED_FUNCTION_22(v4, v5, v6, v7, v8, v9, v10, v11, v14);
  v3(v12);
  return swift_release();
}

uint64_t (*NetworkAvailability.$isAvailable.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  return NetworkAvailability.$isAvailable.modify;
}

uint64_t NetworkAvailability.$isAvailable.modify(uint64_t *a1, char a2)
{
  return NetworkAvailability.$status.modify(a1, a2, (void (*)(uint64_t *))NetworkAvailability.$isAvailable.setter);
}

uint64_t key path getter for NetworkAvailability.isExpensive : NetworkAvailability@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 296))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for NetworkAvailability.isExpensive : NetworkAvailability(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 304))(*a1);
}

uint64_t NetworkAvailability.isExpensive.getter()
{
  return NetworkAvailability.isAvailable.getter();
}

uint64_t NetworkAvailability.isExpensive.setter(char a1)
{
  return NetworkAvailability.isAvailable.setter(a1);
}

uint64_t (*NetworkAvailability.isExpensive.modify(void *a1))()
{
  OUTLINED_FUNCTION_47(a1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_45(KeyPath);
  uint64_t v2 = swift_getKeyPath();
  uint64_t v3 = OUTLINED_FUNCTION_15(v2);
  OUTLINED_FUNCTION_32(v3);
  return NetworkAvailability.isAvailable.modify;
}

uint64_t NetworkAvailability.isAvailable.modify(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  char v2 = *(unsigned char *)(a1 + 24);
  swift_retain();

  return specialized static MockablePublished.subscript.setter(v2, v1);
}

void *key path getter for NetworkAvailability.$isExpensive : NetworkAvailability@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 320))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for NetworkAvailability.$isExpensive : NetworkAvailability(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v5 = *a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(*(void *)v2 + 328);
  swift_retain();
  return v3(&v5);
}

uint64_t NetworkAvailability.$isExpensive.getter()
{
  OUTLINED_FUNCTION_2_5();
  OUTLINED_FUNCTION_0_7();
  uint64_t v1 = *(void (**)(void))(v0 + 152);
  swift_retain();
  OUTLINED_FUNCTION_19();
  v1();
  return swift_release();
}

uint64_t NetworkAvailability.$isExpensive.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  OUTLINED_FUNCTION_2_5();
  uint64_t v14 = v1;
  OUTLINED_FUNCTION_0_7();
  uint64_t v3 = *(void (**)(uint64_t *))(v2 + 160);
  uint64_t v4 = swift_retain();
  uint64_t v12 = OUTLINED_FUNCTION_22(v4, v5, v6, v7, v8, v9, v10, v11, v14);
  v3(v12);
  return swift_release();
}

uint64_t (*NetworkAvailability.$isExpensive.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  return NetworkAvailability.$isExpensive.modify;
}

uint64_t NetworkAvailability.$isExpensive.modify(uint64_t *a1, char a2)
{
  return NetworkAvailability.$status.modify(a1, a2, (void (*)(uint64_t *))NetworkAvailability.$isExpensive.setter);
}

uint64_t key path getter for NetworkAvailability.isConstrained : NetworkAvailability@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 344))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for NetworkAvailability.isConstrained : NetworkAvailability(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 352))(*a1);
}

uint64_t NetworkAvailability.isConstrained.getter()
{
  return NetworkAvailability.isAvailable.getter();
}

uint64_t NetworkAvailability.isConstrained.setter(char a1)
{
  return NetworkAvailability.isAvailable.setter(a1);
}

uint64_t (*NetworkAvailability.isConstrained.modify(void *a1))()
{
  OUTLINED_FUNCTION_47(a1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_45(KeyPath);
  uint64_t v2 = swift_getKeyPath();
  uint64_t v3 = OUTLINED_FUNCTION_15(v2);
  OUTLINED_FUNCTION_32(v3);
  return NetworkAvailability.isAvailable.modify;
}

void *key path getter for NetworkAvailability.$isConstrained : NetworkAvailability@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 368))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for NetworkAvailability.$isConstrained : NetworkAvailability(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v5 = *a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(*(void *)v2 + 376);
  swift_retain();
  return v3(&v5);
}

uint64_t NetworkAvailability.$isConstrained.getter()
{
  OUTLINED_FUNCTION_2_5();
  OUTLINED_FUNCTION_0_7();
  uint64_t v1 = *(void (**)(void))(v0 + 152);
  swift_retain();
  OUTLINED_FUNCTION_19();
  v1();
  return swift_release();
}

uint64_t NetworkAvailability.$isConstrained.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  OUTLINED_FUNCTION_2_5();
  uint64_t v14 = v1;
  OUTLINED_FUNCTION_0_7();
  uint64_t v3 = *(void (**)(uint64_t *))(v2 + 160);
  uint64_t v4 = swift_retain();
  uint64_t v12 = OUTLINED_FUNCTION_22(v4, v5, v6, v7, v8, v9, v10, v11, v14);
  v3(v12);
  return swift_release();
}

uint64_t (*NetworkAvailability.$isConstrained.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  return NetworkAvailability.$isConstrained.modify;
}

uint64_t NetworkAvailability.$isConstrained.modify(uint64_t *a1, char a2)
{
  return NetworkAvailability.$status.modify(a1, a2, (void (*)(uint64_t *))NetworkAvailability.$isConstrained.setter);
}

uint64_t key path getter for NetworkAvailability.isInAirplaneMode : NetworkAvailability@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 392))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for NetworkAvailability.isInAirplaneMode : NetworkAvailability(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 400))(*a1);
}

uint64_t NetworkAvailability.isInAirplaneMode.getter()
{
  return NetworkAvailability.isAvailable.getter();
}

uint64_t NetworkAvailability.isInAirplaneMode.setter(char a1)
{
  return NetworkAvailability.isAvailable.setter(a1);
}

uint64_t (*NetworkAvailability.isInAirplaneMode.modify(void *a1))()
{
  OUTLINED_FUNCTION_47(a1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_45(KeyPath);
  uint64_t v2 = swift_getKeyPath();
  uint64_t v3 = OUTLINED_FUNCTION_15(v2);
  OUTLINED_FUNCTION_32(v3);
  return NetworkAvailability.isAvailable.modify;
}

void *key path getter for NetworkAvailability.$isInAirplaneMode : NetworkAvailability@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 416))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for NetworkAvailability.$isInAirplaneMode : NetworkAvailability(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v5 = *a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(*(void *)v2 + 424);
  swift_retain();
  return v3(&v5);
}

uint64_t NetworkAvailability.$isInAirplaneMode.getter()
{
  OUTLINED_FUNCTION_2_5();
  OUTLINED_FUNCTION_0_7();
  uint64_t v1 = *(void (**)(void))(v0 + 152);
  swift_retain();
  OUTLINED_FUNCTION_19();
  v1();
  return swift_release();
}

uint64_t NetworkAvailability.$isInAirplaneMode.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  OUTLINED_FUNCTION_2_5();
  uint64_t v14 = v1;
  OUTLINED_FUNCTION_0_7();
  uint64_t v3 = *(void (**)(uint64_t *))(v2 + 160);
  uint64_t v4 = swift_retain();
  uint64_t v12 = OUTLINED_FUNCTION_22(v4, v5, v6, v7, v8, v9, v10, v11, v14);
  v3(v12);
  return swift_release();
}

uint64_t (*NetworkAvailability.$isInAirplaneMode.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  return NetworkAvailability.$isInAirplaneMode.modify;
}

uint64_t NetworkAvailability.$isInAirplaneMode.modify(uint64_t *a1, char a2)
{
  return NetworkAvailability.$status.modify(a1, a2, (void (*)(uint64_t *))NetworkAvailability.$isInAirplaneMode.setter);
}

uint64_t NetworkAvailability.$status.modify(uint64_t *a1, char a2, void (*a3)(uint64_t *))
{
  if (a2)
  {
    uint64_t v5 = *a1;
    swift_retain();
    a3(&v5);
    return swift_release();
  }
  else
  {
    uint64_t v5 = *a1;
    return ((uint64_t (*)(uint64_t *))a3)(&v5);
  }
}

id NetworkAvailability.networkReachability.getter()
{
  return *(id *)(v0 + 64);
}

uint64_t NetworkAvailability.__allocating_init(storage:)()
{
  uint64_t v0 = swift_allocObject();
  NetworkAvailability.init(storage:)();
  return v0;
}

id NetworkAvailability.init(storage:)()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v24 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  OUTLINED_FUNCTION_1_5();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4, v5);
  OUTLINED_FUNCTION_12_1();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v9, v10);
  OUTLINED_FUNCTION_12_1();
  uint64_t v11 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v11 - 8, v12);
  OUTLINED_FUNCTION_12_1();
  v0[2] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<NetworkAvailability.Status>);
  swift_allocObject();
  v0[3] = specialized MockablePublished.init(wrappedValue:)(0, &demangling cache variable for type metadata for CurrentValueSubject<NetworkAvailability.Status, Never>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<Bool>);
  swift_allocObject();
  v0[4] = specialized MockablePublished.init(wrappedValue:)(1);
  OUTLINED_FUNCTION_36();
  v0[5] = specialized MockablePublished.init(wrappedValue:)(0);
  OUTLINED_FUNCTION_36();
  v0[6] = specialized MockablePublished.init(wrappedValue:)(0);
  OUTLINED_FUNCTION_36();
  v0[7] = specialized MockablePublished.init(wrappedValue:)(0);
  v0[8] = objc_msgSend(objc_allocWithZone((Class)SUNetworkReachability), sel_init);
  v0[13] = dispatch_semaphore_create(1);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.userInitiated.getter();
  lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, 255, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v8, *MEMORY[0x1E4FBCC58], v24);
  uint64_t v13 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for NWPathMonitor();
  OUTLINED_FUNCTION_26();
  v0[9] = NWPathMonitor.init()();
  type metadata accessor for NetworkAvailability.PathUpdateHandler(0);
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  *(void *)(v1 + 80) = v14;
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4BE78]), sel_initWithQueue_, v13);
  if (result)
  {
    uint64_t v16 = result;
    *(void *)(v1 + 88) = result;
    type metadata accessor for NetworkAvailability.AirplaneModeUpdateHandler(0);
    uint64_t v17 = swift_allocObject();
    swift_weakInit();
    *(void *)(v1 + 96) = v17;
    objc_msgSend(v16, sel_refresh);
    LOBYTE(v16) = objc_msgSend(v16, sel_airplaneMode);
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    specialized static MockablePublished.subscript.setter((char)v16, v1);
    OUTLINED_FUNCTION_0_7();
    uint64_t v19 = *(void (**)(uint64_t))(v18 + 104);
    swift_retain();
    swift_retain();
    v19(v1);
    swift_release();
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWPath) -> ())?((uint64_t)partial apply for implicit closure #2 in implicit closure #1 in NetworkAvailability.init(storage:));
    NWPathMonitor.pathUpdateHandler.setter();
    swift_release();
    swift_release();
    swift_retain();
    NWPathMonitor.start(queue:)();
    swift_release();
    OUTLINED_FUNCTION_0_7();
    uint64_t v21 = *(void (**)(uint64_t))(v20 + 104);
    swift_retain();
    swift_retain();
    v21(v1);
    swift_release();
    uint64_t v22 = *(void *)(v1 + 96);
    id v23 = *(id *)(v1 + 88);
    swift_retain();
    objc_msgSend(v23, sel_setDelegate_, v22);

    swift_release();
    swift_release();
    return (id)v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t NetworkAvailability.PathUpdateHandler.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_weakInit();
  return v0;
}

uint64_t implicit closure #2 in implicit closure #1 in NetworkAvailability.init(storage:)()
{
  return specialized SafeCallback.reify(_:)(partial apply for closure #1 in NetworkAvailability.PathUpdateHandler.handlePathUpdate(_:));
}

id *NetworkAvailability.deinit()
{
  uint64_t v1 = v0;
  id v2 = v0[13];
  OS_dispatch_semaphore.wait()();

  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWPath) -> ())?(0);
  NWPathMonitor.pathUpdateHandler.setter();
  NWPathMonitor.cancel()();
  objc_msgSend(v1[11], sel_setDelegate_, 0);
  id v3 = v1[13];
  OS_dispatch_semaphore.signal()();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  swift_release();
  return v1;
}

uint64_t NetworkAvailability.__deallocating_deinit()
{
  NetworkAvailability.deinit();

  return MEMORY[0x1F4186488](v0, 112, 7);
}

uint64_t specialized SafeCallback.reify(_:)(void (*a1)(void))
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 96))();
  if (result)
  {
    a1();
    return swift_release();
  }
  return result;
}

void NetworkAvailability.handlePathUpdate(_:)(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for NWPath.Status();
  OUTLINED_FUNCTION_1_5();
  uint64_t v85 = v5;
  MEMORY[0x1F4188790](v6, v7);
  OUTLINED_FUNCTION_12_1();
  uint64_t v83 = v9 - v8;
  uint64_t v10 = type metadata accessor for NWPath();
  OUTLINED_FUNCTION_1_5();
  uint64_t v12 = v11;
  uint64_t v15 = MEMORY[0x1F4188790](v13, v14);
  uint64_t v79 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v15, v17);
  uint64_t v20 = (char *)&v74 - v19;
  MEMORY[0x1F4188790](v18, v21);
  id v23 = (char *)&v74 - v22;
  id v24 = *(id *)(v1 + 104);
  OS_dispatch_semaphore.wait()();

  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  uint64_t v26 = __swift_project_value_buffer(v25, (uint64_t)static Logger.logger);
  long long v27 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v84 = a1;
  id v80 = v27;
  uint64_t v81 = v12 + 16;
  v27(v23, a1, v10);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  BOOL v30 = os_log_type_enabled(v28, v29);
  uint64_t v82 = v12;
  if (v30)
  {
    uint64_t v31 = swift_slowAlloc();
    uint64_t v76 = v20;
    long long v32 = (uint8_t *)v31;
    uint64_t v33 = swift_slowAlloc();
    uint64_t v78 = v26;
    uint64_t v87 = v33;
    uint64_t v77 = v4;
    uint64_t v75 = v10;
    *(_DWORD *)long long v32 = 136315138;
    uint64_t v34 = NWPath.networkAvailabilityDebugInformation.getter();
    uint64_t v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v87);
    uint64_t v10 = v75;
    uint64_t v4 = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v36 = OUTLINED_FUNCTION_35();
    ((void (*)(uint64_t))v12)(v36);
    _os_log_impl(&dword_1C9E4C000, v28, v29, "Received NWPath update: %s", v32, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    uint64_t v20 = v76;
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v37 = OUTLINED_FUNCTION_35();
    ((void (*)(uint64_t))v12)(v37);
  }

  uint64_t v38 = v84;
  NWPath.isExpensive.getter();
  OUTLINED_FUNCTION_9_1();
  (*(void (**)(void))(v39 + 304))(v40 & 1);
  NWPath.isConstrained.getter();
  OUTLINED_FUNCTION_21();
  (*(void (**)(void))(v41 + 352))(v42 & 1);
  uint64_t v43 = v83;
  NWPath.status.getter();
  uint64_t v44 = v43;
  uint64_t v45 = v85;
  int v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v85 + 88))(v44, v4);
  BOOL v47 = v46 == *MEMORY[0x1E4F38B20] || v46 == *MEMORY[0x1E4F38B18];
  if (v47)
  {
    char v48 = NWPath.supportsDNS.getter();
    uint64_t v49 = v80;
    v80(v20, v38, v10);
    if (v48)
    {
      char v50 = NWPath.supportsIPv4.getter();
      v51 = v79;
      v49(v79, v20, v10);
      if (v50) {
        char v52 = 1;
      }
      else {
        char v52 = NWPath.supportsIPv6.getter();
      }
      ((void (*)(char *, uint64_t))v12)(v51, v10);
    }
    else
    {
      char v52 = 0;
    }
    ((void (*)(char *, uint64_t))v12)(v20, v10);
    OUTLINED_FUNCTION_9_1();
    uint64_t v56 = (void (**)(void))(v55 + 256);
    if (v52) {
      char v57 = 2;
    }
    else {
      char v57 = 1;
    }
    (*v56)(v52 & 1);
    LOBYTE(v87) = v57;
    OUTLINED_FUNCTION_9_1();
    (*(void (**)(uint64_t *))(v58 + 208))(&v87);
  }
  else
  {
    OUTLINED_FUNCTION_9_1();
    (*(void (**)(void))(v53 + 256))(0);
    LOBYTE(v87) = 1;
    OUTLINED_FUNCTION_9_1();
    (*(void (**)(uint64_t *))(v54 + 208))(&v87);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v4);
  }
  swift_retain_n();
  v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v61 = swift_slowAlloc();
    uint64_t v87 = swift_slowAlloc();
    *(_DWORD *)uint64_t v61 = 136315394;
    OUTLINED_FUNCTION_9_1();
    (*(void (**)(uint64_t *__return_ptr))(v62 + 200))(&v86);
    OUTLINED_FUNCTION_37();
    unint64_t v67 = v66 & 0xFFFF0000FFFFLL | 0xEC000000656C0000;
    uint64_t v68 = 0x616C696176616E75;
    if (!v47)
    {
      uint64_t v68 = 0x6C62616C69617661;
      unint64_t v67 = 0xE900000000000065;
    }
    if (v63) {
      uint64_t v69 = v68;
    }
    else {
      uint64_t v69 = v65;
    }
    if (v63) {
      unint64_t v70 = v67;
    }
    else {
      unint64_t v70 = v64;
    }
    uint64_t v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v61 + 12) = 1024;
    OUTLINED_FUNCTION_9_1();
    char v72 = (*(uint64_t (**)(void))(v71 + 248))();
    swift_release();
    LODWORD(v86) = v72 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1C9E4C000, v59, v60, "NetworkAvailability.status set to %s. NetworkAvailability.isAvailable set to %{BOOL}d", (uint8_t *)v61, 0x12u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_release_n();
  }
  NetworkAvailability.recheckAirplaneModeUnderLock()();
  id v73 = *(id *)(v2 + 104);
  OS_dispatch_semaphore.signal()();
}

uint64_t NWPath.networkAvailabilityDebugInformation.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C9EB41C0;
  *(void *)(v0 + 32) = NWPath.debugDescription.getter();
  *(void *)(v0 + 40) = v1;
  strcpy((char *)v28, "isExpensive: ");
  HIWORD(v28[1]) = -4864;
  char v2 = NWPath.isExpensive.getter();
  BOOL v3 = (v2 & 1) == 0;
  if (v2) {
    uint64_t v4 = 1702195828;
  }
  else {
    uint64_t v4 = 0x65736C6166;
  }
  if (v3) {
    unint64_t v5 = 0xE500000000000000;
  }
  else {
    unint64_t v5 = 0xE400000000000000;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  uint64_t v7 = v28[1];
  *(void *)(v0 + 48) = v28[0];
  *(void *)(v0 + 56) = v7;
  strcpy((char *)v28, "supportsDNS: ");
  HIWORD(v28[1]) = -4864;
  char v8 = NWPath.supportsDNS.getter();
  BOOL v9 = (v8 & 1) == 0;
  if (v8) {
    uint64_t v10 = 1702195828;
  }
  else {
    uint64_t v10 = 0x65736C6166;
  }
  if (v9) {
    unint64_t v11 = 0xE500000000000000;
  }
  else {
    unint64_t v11 = 0xE400000000000000;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  uint64_t v13 = v28[1];
  *(void *)(v0 + 64) = v28[0];
  *(void *)(v0 + 72) = v13;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v28, "supportsIPv4: ");
  HIBYTE(v28[1]) = -18;
  char v14 = NWPath.supportsIPv4.getter();
  BOOL v15 = (v14 & 1) == 0;
  if (v14) {
    uint64_t v16 = 1702195828;
  }
  else {
    uint64_t v16 = 0x65736C6166;
  }
  if (v15) {
    unint64_t v17 = 0xE500000000000000;
  }
  else {
    unint64_t v17 = 0xE400000000000000;
  }
  unint64_t v18 = v17;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  uint64_t v19 = v28[1];
  *(void *)(v0 + 80) = v28[0];
  *(void *)(v0 + 88) = v19;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v28, "supportsIPv6: ");
  HIBYTE(v28[1]) = -18;
  char v20 = NWPath.supportsIPv6.getter();
  BOOL v21 = (v20 & 1) == 0;
  if (v20) {
    uint64_t v22 = 1702195828;
  }
  else {
    uint64_t v22 = 0x65736C6166;
  }
  if (v21) {
    unint64_t v23 = 0xE500000000000000;
  }
  else {
    unint64_t v23 = 0xE400000000000000;
  }
  unint64_t v24 = v23;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease();
  uint64_t v25 = v28[1];
  *(void *)(v0 + 96) = v28[0];
  *(void *)(v0 + 104) = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  uint64_t v26 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t NetworkAvailability.AirplaneModeUpdateHandler.airplaneModeChanged()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    NetworkAvailability.airplaneModeChanged()();
    return swift_release();
  }
  return result;
}

uint64_t @objc NetworkAvailability.AirplaneModeUpdateHandler.airplaneModeChanged()()
{
  swift_retain();
  NetworkAvailability.AirplaneModeUpdateHandler.airplaneModeChanged()();

  return swift_release();
}

uint64_t NetworkAvailability.PathUpdateHandler.__deallocating_deinit()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186488](v0, 24, 7);
}

void NetworkAvailability.airplaneModeChanged()()
{
  uint64_t v1 = v0;
  id v2 = *(id *)(v0 + 104);
  OS_dispatch_semaphore.wait()();

  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.logger);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v6 = 0;
    _os_log_impl(&dword_1C9E4C000, v4, v5, "Received airplaneModeChanged callback", v6, 2u);
    OUTLINED_FUNCTION_3();
  }

  NetworkAvailability.recheckAirplaneModeUnderLock()();
  id v7 = *(id *)(v1 + 104);
  OS_dispatch_semaphore.signal()();
}

uint64_t NetworkAvailability.recheckAirplaneModeUnderLock()()
{
  uint64_t v1 = *(void **)(v0 + 88);
  objc_msgSend(v1, sel_refresh);
  id v2 = objc_msgSend(v1, sel_airplaneMode);
  OUTLINED_FUNCTION_21();
  uint64_t result = (*(uint64_t (**)(void))(v3 + 392))();
  if (v2 != (result & 1))
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.logger);
    unint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      char v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)char v8 = 136315138;
      uint64_t v13 = v9;
      if (v2) {
        uint64_t v10 = 20047;
      }
      else {
        uint64_t v10 = 4605519;
      }
      if (v2) {
        unint64_t v11 = 0xE200000000000000;
      }
      else {
        unint64_t v11 = 0xE300000000000000;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C9E4C000, v6, v7, "Airplane mode changed: now %s", v8, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }

    OUTLINED_FUNCTION_9_1();
    return (*(uint64_t (**)(id))(v12 + 400))(v2);
  }
  return result;
}

uint64_t protocol witness for MockableEnvironmentProvider.mock.getter in conformance NetworkAvailability()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t sub_1C9E5EB48()
{
  OUTLINED_FUNCTION_0_7();
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 248))();
  return OUTLINED_FUNCTION_46(v1);
}

uint64_t sub_1C9E5EB90()
{
  OUTLINED_FUNCTION_0_7();
  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t sub_1C9E5EBDC()
{
  OUTLINED_FUNCTION_0_7();
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 296))();
  return OUTLINED_FUNCTION_46(v1);
}

uint64_t sub_1C9E5EC2C()
{
  OUTLINED_FUNCTION_0_7();
  return (*(uint64_t (**)(void))(v0 + 304))();
}

uint64_t sub_1C9E5EC78()
{
  OUTLINED_FUNCTION_0_7();
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 344))();
  return OUTLINED_FUNCTION_46(v1);
}

uint64_t sub_1C9E5ECC8()
{
  OUTLINED_FUNCTION_0_7();
  return (*(uint64_t (**)(void))(v0 + 352))();
}

uint64_t sub_1C9E5ED14()
{
  OUTLINED_FUNCTION_0_7();
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 392))();
  return OUTLINED_FUNCTION_46(v1);
}

uint64_t sub_1C9E5ED64()
{
  OUTLINED_FUNCTION_0_7();
  return (*(uint64_t (**)(void))(v0 + 400))();
}

uint64_t protocol witness for MockableEnvironmentProvider.mock.setter in conformance NetworkAvailability()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

void (*protocol witness for MockableEnvironmentProvider.mock.modify in conformance NetworkAvailability(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 192))();
  return protocol witness for MockableEnvironmentProvider.mock.modify in conformance NetworkAvailability;
}

void protocol witness for MockableEnvironmentProvider.mock.modify in conformance NetworkAvailability(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t protocol witness for SiriEnvironmentProvider.init(storage:) in conformance NetworkAvailability()
{
  return (*(uint64_t (**)(void))(v0 + 440))();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance NetworkAvailability@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for NetworkAvailability();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t specialized MockablePublished.init(wrappedValue:)(void *a1)
{
  return specialized MockablePublished.init(wrappedValue:)(a1, &demangling cache variable for type metadata for CurrentValueSubject<SAPerson?, Never>);
}

{
  return specialized MockablePublished.init(wrappedValue:)(a1, &demangling cache variable for type metadata for CurrentValueSubject<IdleTracker?, Never>);
}

uint64_t specialized MockablePublished.init(wrappedValue:)(char a1)
{
  return specialized MockablePublished.init(wrappedValue:)(a1, &demangling cache variable for type metadata for CurrentValueSubject<DeviceIdiom, Never>);
}

{
  uint64_t v1;
  uint64_t v2;

  *(unsigned char *)(v1 + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  OUTLINED_FUNCTION_26();
  id v2 = CurrentValueSubject.init(_:)();
  return OUTLINED_FUNCTION_44(v2);
}

{
  return specialized MockablePublished.init(wrappedValue:)(a1, &demangling cache variable for type metadata for CurrentValueSubject<SiriVoiceGender, Never>);
}

{
  return specialized MockablePublished.init(wrappedValue:)(a1, &demangling cache variable for type metadata for CurrentValueSubject<PersonalDomainsAuthenticationMode?, Never>);
}

{
  return specialized MockablePublished.init(wrappedValue:)(a1, &demangling cache variable for type metadata for CurrentValueSubject<DeviceClass?, Never>);
}

void *specialized MockablePublished.init(wrappedValue:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<String?, Never>);
  OUTLINED_FUNCTION_26();
  swift_bridgeObjectRetain();
  v2[4] = CurrentValueSubject.init(_:)();
  return v2;
}

{
  void *v2;

  v2[2] = a1;
  v2[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Restrictions, Never>);
  OUTLINED_FUNCTION_26();
  swift_bridgeObjectRetain();
  v2[4] = CurrentValueSubject.init(_:)();
  return v2;
}

uint64_t specialized MockablePublished.init(wrappedValue:)(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1_5();
  uint64_t v6 = v5;
  uint64_t v9 = MEMORY[0x1F4188790](v7, v8);
  MEMORY[0x1F4188790](v9, v10);
  uint64_t v12 = (char *)&v17 - v11;
  OUTLINED_FUNCTION_9_1();
  uint64_t v13 = *(void (**)(void))(v6 + 16);
  OUTLINED_FUNCTION_38();
  v13();
  OUTLINED_FUNCTION_38();
  v13();
  OUTLINED_FUNCTION_38();
  v13();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Locale, Never>);
  OUTLINED_FUNCTION_26();
  uint64_t v14 = CurrentValueSubject.init(_:)();
  BOOL v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v12, v4);
  v15(a1, v4);
  *(void *)(v2 + *(void *)(*(void *)v2 + 96)) = v14;
  return v2;
}

uint64_t specialized MockablePublished.init(wrappedValue:)(char a1, uint64_t *a2)
{
  OUTLINED_FUNCTION_43(a1, a2);
  OUTLINED_FUNCTION_26();
  uint64_t v2 = CurrentValueSubject.init(_:)();
  return OUTLINED_FUNCTION_44(v2);
}

uint64_t specialized MockablePublished.init(wrappedValue:)(void *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  *(void *)(v3 + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_26();
  id v5 = a1;
  uint64_t v6 = CurrentValueSubject.init(_:)();
  return OUTLINED_FUNCTION_44(v6);
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for NetworkAvailability.PathUpdateHandler(uint64_t a1)
{
  return type metadata accessor for NetworkAvailability.PathUpdateHandler(a1, (uint64_t *)&type metadata singleton initialization cache for NetworkAvailability.PathUpdateHandler);
}

uint64_t type metadata accessor for NetworkAvailability.AirplaneModeUpdateHandler(uint64_t a1)
{
  return type metadata accessor for NetworkAvailability.PathUpdateHandler(a1, (uint64_t *)&type metadata singleton initialization cache for NetworkAvailability.AirplaneModeUpdateHandler);
}

uint64_t type metadata accessor for NetworkAvailability.PathUpdateHandler(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in NetworkAvailability.init(storage:)()
{
  return implicit closure #2 in implicit closure #1 in NetworkAvailability.init(storage:)();
}

uint64_t outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWPath) -> ())?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkAvailability.Status and conformance NetworkAvailability.Status()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkAvailability.Status and conformance NetworkAvailability.Status;
  if (!lazy protocol witness table cache variable for type NetworkAvailability.Status and conformance NetworkAvailability.Status)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkAvailability.Status and conformance NetworkAvailability.Status);
  }
  return result;
}

uint64_t associated type witness table accessor for MockableEnvironmentProvider.Provider : SiriEnvironmentProvider in NetworkAvailability(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type NetworkAvailability and conformance NetworkAvailability, a2, (void (*)(uint64_t))type metadata accessor for NetworkAvailability);
}

uint64_t instantiation function for generic protocol witness table for NetworkAvailability(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type NetworkAvailability and conformance NetworkAvailability, a2, (void (*)(uint64_t))type metadata accessor for NetworkAvailability);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type NetworkAvailability and conformance NetworkAvailability, a2, (void (*)(uint64_t))type metadata accessor for NetworkAvailability);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in NetworkAvailability()
{
  return MEMORY[0x1E4F1ABE8];
}

uint64_t sub_1C9E5F4BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SiriEnvironment.networkAvailability.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1C9E5F4EC@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_0_7();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 176))();
  *a1 = result;
  return result;
}

uint64_t method lookup function for NetworkAvailability(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NetworkAvailability);
}

uint64_t dispatch thunk of NetworkAvailability.mock.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of NetworkAvailability.mock.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of NetworkAvailability.mock.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of NetworkAvailability.status.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of NetworkAvailability.status.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of NetworkAvailability.status.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of NetworkAvailability.$status.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of NetworkAvailability.$status.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of NetworkAvailability.$status.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of NetworkAvailability.isAvailable.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of NetworkAvailability.isAvailable.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of NetworkAvailability.isAvailable.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of NetworkAvailability.$isAvailable.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of NetworkAvailability.$isAvailable.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of NetworkAvailability.$isAvailable.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of NetworkAvailability.isExpensive.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of NetworkAvailability.isExpensive.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of NetworkAvailability.isExpensive.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of NetworkAvailability.$isExpensive.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of NetworkAvailability.$isExpensive.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of NetworkAvailability.$isExpensive.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of NetworkAvailability.isConstrained.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of NetworkAvailability.isConstrained.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of NetworkAvailability.isConstrained.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of NetworkAvailability.$isConstrained.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of NetworkAvailability.$isConstrained.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of NetworkAvailability.$isConstrained.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of NetworkAvailability.isInAirplaneMode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of NetworkAvailability.isInAirplaneMode.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of NetworkAvailability.isInAirplaneMode.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of NetworkAvailability.$isInAirplaneMode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of NetworkAvailability.$isInAirplaneMode.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of NetworkAvailability.$isInAirplaneMode.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 432))();
}

uint64_t dispatch thunk of NetworkAvailability.__allocating_init(storage:)()
{
  return (*(uint64_t (**)(void))(v0 + 440))();
}

unsigned char *storeEnumTagSinglePayload for NetworkAvailability.Status(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9E5FBB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NetworkAvailability.Status()
{
  return &type metadata for NetworkAvailability.Status;
}

uint64_t type metadata completion function for NetworkAvailability.PathUpdateHandler()
{
  return swift_initClassMetadata2();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(uint64_t (*a1)(void))
{
  return a1() & 1;
}

{
  return a1();
}

uint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of Locale?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #1 in NetworkAvailability.PathUpdateHandler.handlePathUpdate(_:)()
{
  NetworkAvailability.handlePathUpdate(_:)(*(char **)(v0 + 16));
}

uint64_t OUTLINED_FUNCTION_2_5()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_3_4()
{
  return swift_getAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_5_2()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_7_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_2()
{
  return swift_readAtKeyPath();
}

char *OUTLINED_FUNCTION_10_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

uint64_t OUTLINED_FUNCTION_11_1()
{
  return type metadata accessor for CurrentDevice();
}

uint64_t OUTLINED_FUNCTION_15(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return specialized static MockablePublished.subscript.getter(v2, v3);
}

char *OUTLINED_FUNCTION_16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

uint64_t OUTLINED_FUNCTION_17()
{
  return swift_readAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_18()
{
  return dispatch thunk of ObservableObject.objectWillChange.getter();
}

uint64_t *OUTLINED_FUNCTION_22(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

uint64_t OUTLINED_FUNCTION_24(uint64_t result)
{
  *(void *)(result + 8) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_25()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_26()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_27()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_28()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_32(uint64_t result)
{
  *(unsigned char *)(v1 + 24) = result & 1;
  return result;
}

uint64_t *OUTLINED_FUNCTION_33(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

uint64_t OUTLINED_FUNCTION_34()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_35()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_36()
{
  return swift_allocObject();
}

uint64_t *OUTLINED_FUNCTION_42(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

uint64_t OUTLINED_FUNCTION_43(char a1, uint64_t *a2)
{
  *(unsigned char *)(v2 + 16) = a1;
  return __swift_instantiateConcreteTypeFromMangledName(a2);
}

uint64_t OUTLINED_FUNCTION_44(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return v1;
}

uint64_t OUTLINED_FUNCTION_45(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_46(uint64_t result)
{
  unsigned char *v1 = result & 1;
  return result;
}

void *OUTLINED_FUNCTION_47(void *result)
{
  *uint64_t result = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_48()
{
  return dispatch thunk of ObservableObject.objectWillChange.getter();
}

uint64_t withTimeout<A>(seconds:operation:)()
{
  OUTLINED_FUNCTION_2_6();
  v0[6] = v1;
  v0[7] = v2;
  v0[5] = v3;
  v0[4] = v4;
  v0[3] = v5;
  v0[8] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v6 = type metadata accessor for Result();
  v0[9] = v6;
  OUTLINED_FUNCTION_8_3(v6);
  v0[10] = v7;
  v0[11] = swift_task_alloc();
  v0[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for CooperativeTimeoutResult();
  v0[13] = v8;
  OUTLINED_FUNCTION_8_3(v8);
  v0[14] = v9;
  v0[15] = swift_task_alloc();
  v0[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v0[17] = swift_task_alloc();
  OUTLINED_FUNCTION_5_3();
  return MEMORY[0x1F4188298](v10, v11, v12);
}

{
  double *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v15;

  OUTLINED_FUNCTION_10_2();
  uint64_t v1 = *((void *)v0 + 17);
  uint64_t v3 = *((void *)v0 + 6);
  uint64_t v2 = *((void *)v0 + 7);
  uint64_t v4 = *((void *)v0 + 5);
  uint64_t v5 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v5);
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v2;
  v6[5] = v4;
  v6[6] = v3;
  swift_retain();
  uint64_t v7 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC(v1, (uint64_t)&async function pointer to partial apply for closure #1 in withTimeout<A>(seconds:operation:), (uint64_t)v6);
  *((void *)v0 + 18) = v7;
  uint64_t v8 = swift_allocObject();
  *((void *)v0 + 19) = v8;
  *(void *)(v8 + 16) = v2;
  *(void *)(v8 + 24) = v7;
  swift_retain();
  swift_task_alloc();
  OUTLINED_FUNCTION_18_0();
  *((void *)v0 + 20) = v9;
  void *v9 = v10;
  v9[1] = withTimeout<A>(seconds:operation:);
  uint64_t v11 = *((void *)v0 + 16);
  uint64_t v12 = *((void *)v0 + 7);
  uint64_t v13 = v0[4];
  return withCooperativeTimeout<A>(seconds:cancellableOperation:)(v11, (uint64_t)&async function pointer to partial apply for closure #2 in withTimeout<A>(seconds:operation:), v8, v12, v13);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_0_8();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_1_6();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_5_3();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t (*v16)(void);
  uint64_t v18;

  (*(void (**)(void, void, void))(v0[14] + 16))(v0[15], v0[16], v0[13]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = v0[11];
    uint64_t v1 = v0[12];
    uint64_t v3 = v0[9];
    uint64_t v4 = v0[10];
    uint64_t v5 = v0[3];
    (*(void (**)(uint64_t, void, uint64_t))(v4 + 32))(v1, v0[15], v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
    _ss6ResultOsRi_zrlE3getxyq_YKF(v3, (uint64_t)(v0 + 2), v5);
    uint64_t v11 = v0[16];
    uint64_t v12 = v0[14];
    uint64_t v13 = v0[13];
    swift_release();
    uint64_t v14 = OUTLINED_FUNCTION_19_0();
    v15(v14);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_7_3();
  }
  else
  {
    uint64_t v6 = v0[16];
    uint64_t v7 = v0[13];
    uint64_t v8 = v0[14];
    MEMORY[0x1CB791D20](v0[18], v0[7], v0[8], MEMORY[0x1E4FBC0F0]);
    lazy protocol witness table accessor for type TimeoutError and conformance TimeoutError();
    swift_allocError();
    swift_willThrow();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    uint64_t v9 = OUTLINED_FUNCTION_19_0();
    v10(v9);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6_4();
  }
  return v16();
}

uint64_t type metadata accessor for CooperativeTimeoutResult()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in withTimeout<A>(seconds:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  void *v6 = v4;
  v6[1] = closure #1 in withTimeout<A>(seconds:operation:);
  return v8(a1);
}

uint64_t closure #1 in withTimeout<A>(seconds:operation:)()
{
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_0_8();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_1_6();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_4();
  return v3();
}

uint64_t partial apply for closure #1 in withTimeout<A>(seconds:operation:)()
{
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_21_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_4_5(v0);
  void *v1 = v2;
  v1[1] = closure #1 in withTimeout<A>(seconds:operation:);
  uint64_t v3 = OUTLINED_FUNCTION_13_2();
  return closure #1 in withTimeout<A>(seconds:operation:)(v3, v4, v5, v6);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  if (__swift_getEnumTagSinglePayload(a1, 1, v5) == 1)
  {
    outlined destroy of CheckedContinuation<(), Error>?(a1, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t closure #2 in withTimeout<A>(seconds:operation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for CancellationError();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #2 in withTimeout<A>(seconds:operation:), 0, 0);
}

uint64_t closure #2 in withTimeout<A>(seconds:operation:)()
{
  OUTLINED_FUNCTION_2_6();
  swift_retain();
  swift_task_alloc();
  OUTLINED_FUNCTION_18_0();
  v0[9] = v1;
  void *v1 = v2;
  v1[1] = closure #2 in withTimeout<A>(seconds:operation:);
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[3];
  return withCancellableContinuation<A>(body:)(v5, (uint64_t)partial apply for closure #1 in closure #2 in withTimeout<A>(seconds:operation:), v3, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_0_8();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_3_5();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_1_6();
  int *v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_5_3();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    OUTLINED_FUNCTION_7_3();
    return v10();
  }
}

{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_10_2();
  uint64_t v1 = (void *)v0[10];
  swift_release();
  v0[2] = v1;
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    uint64_t v4 = v0[5];
    uint64_t v5 = v0[4];
    (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
    MEMORY[0x1CB791D20](v5, v4, v3, MEMORY[0x1E4FBC0F0]);
  }
  swift_willThrow();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_4();
  return v6();
}

uint64_t partial apply for closure #2 in withTimeout<A>(seconds:operation:)()
{
  OUTLINED_FUNCTION_9_2();
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_4_5(v5);
  void *v6 = v7;
  v6[1] = partial apply for closure #2 in withTimeout<A>(seconds:operation:);
  return closure #2 in withTimeout<A>(seconds:operation:)(v2, v3, v4);
}

uint64_t closure #1 in closure #2 in withTimeout<A>(seconds:operation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 1, 1, v8);
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  void v9[4] = a1;
  v9[5] = a2;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #2 in withTimeout<A>(seconds:operation:), (uint64_t)v9);
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #2 in withTimeout<A>(seconds:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[2] = a4;
  uint64_t v7 = *(void *)(*(void *)a4 + 80);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v9 = MEMORY[0x1E4FBC0F0];
  uint64_t v10 = type metadata accessor for Result();
  v5[3] = v10;
  v5[4] = *(void *)(v10 - 8);
  uint64_t v11 = swift_task_alloc();
  v5[5] = v11;
  uint64_t v12 = (void *)swift_task_alloc();
  v5[6] = v12;
  void *v12 = v5;
  v12[1] = closure #1 in closure #1 in closure #2 in withTimeout<A>(seconds:operation:);
  return MEMORY[0x1F4187DA0](v11, a5, v7, v8, v9);
}

uint64_t closure #1 in closure #1 in closure #2 in withTimeout<A>(seconds:operation:)()
{
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_0_8();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_1_6();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_3();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_9_2();
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  ManagedContinuation.resume(with:)(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_4();
  return v4();
}

uint64_t specialized ManagedContinuation.resume(with:)(void *a1, char a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 1, 1, v8);
  a2 &= 1u;
  outlined copy of Result<(), Error>(a1, a2);
  specialized ManagedContinuation.updateState(continuation:result:)((uint64_t)v7, a1, a2);
  outlined consume of Result<(), Error>(a1, a2);
  return outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v7, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (__swift_getEnumTagSinglePayload(a1, 1, v6) == 1)
  {
    outlined destroy of CheckedContinuation<(), Error>?(a1, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  return swift_task_create();
}

uint64_t specialized withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  void v3[2] = a1;
  return MEMORY[0x1F4188298](specialized withCancellableContinuation<A>(body:), 0, 0);
}

uint64_t specialized withCancellableContinuation<A>(body:)()
{
  OUTLINED_FUNCTION_9_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedContinuation<()>);
  swift_allocObject();
  long long v7 = *(_OWORD *)(v0 + 24);
  uint64_t v1 = specialized ManagedContinuation.().init()();
  *(void *)(v0 + 40) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v7;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized withCancellableContinuation<A>(body:);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = MEMORY[0x1E4FBC848] + 8;
  return MEMORY[0x1F4188148](v4, &async function pointer to partial apply for specialized closure #2 in withCancellableContinuation<A>(body:), v2, partial apply for specialized closure #1 in withCancellableContinuation<A>(body:), v1, 0, 0, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_0_8();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_3_5();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_1_6();
  void *v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  OUTLINED_FUNCTION_5_3();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_2_6();
  swift_release();
  OUTLINED_FUNCTION_7_3();
  return v0();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_2_6();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t withCooperativeTimeout<A>(seconds:cancellableOperation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  *(void *)(v5 + 40) = a3;
  *(void *)(v5 + 48) = a4;
  *(void *)(v5 + 32) = a2;
  *(double *)(v5 + 24) = a5;
  *(void *)(v5 + 16) = a1;
  return OUTLINED_FUNCTION_11_2((uint64_t)withCooperativeTimeout<A>(seconds:cancellableOperation:));
}

uint64_t withCooperativeTimeout<A>(seconds:cancellableOperation:)()
{
  OUTLINED_FUNCTION_9_2();
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v3 + 16) = v1;
  *(_OWORD *)(v3 + 24) = v4;
  *(void *)(v3 + 40) = v2;
  type metadata accessor for CooperativeTimeoutResult();
  swift_task_alloc();
  OUTLINED_FUNCTION_18_0();
  *(void *)(v0 + 64) = v5;
  void *v5 = v6;
  v5[1] = withCooperativeTimeout<A>(seconds:cancellableOperation:);
  uint64_t v7 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188080](v7);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_0_8();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_1_6();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_4();
  return v3();
}

unint64_t lazy protocol witness table accessor for type TimeoutError and conformance TimeoutError()
{
  unint64_t result = lazy protocol witness table cache variable for type TimeoutError and conformance TimeoutError;
  if (!lazy protocol witness table cache variable for type TimeoutError and conformance TimeoutError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeoutError and conformance TimeoutError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimeoutError and conformance TimeoutError;
  if (!lazy protocol witness table cache variable for type TimeoutError and conformance TimeoutError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeoutError and conformance TimeoutError);
  }
  return result;
}

uint64_t _ss6ResultOsRi_zrlE3getxyq_YKF@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 32))(a3, v3);
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 24) - 8) + 32))(a2, v3, *(void *)(a1 + 24));
  return swift_willThrowTypedImpl();
}

uint64_t closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  *(void *)(v6 + 64) = a5;
  *(double *)(v6 + 56) = a6;
  *(void *)(v6 + 40) = a3;
  *(void *)(v6 + 48) = a4;
  *(void *)(v6 + 24) = a1;
  *(void *)(v6 + 32) = a2;
  *(void *)(v6 + 72) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v7 = type metadata accessor for Result();
  *(void *)(v6 + 80) = v7;
  type metadata accessor for Optional();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 96) = swift_task_alloc();
  *(void *)(v6 + 104) = *(void *)(v7 - 8);
  *(void *)(v6 + 112) = swift_task_alloc();
  *(void *)(v6 + 120) = swift_task_alloc();
  *(void *)(v6 + 128) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v6 + 136) = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:), 0, 0);
}

uint64_t closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[7];
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_20_0();
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v2;
  v6[5] = v5;
  v6[6] = v4;
  v0[18] = type metadata accessor for ThrowingTaskGroup();
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(v1, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:), (uint64_t)v6);
  outlined destroy of CheckedContinuation<(), Error>?(v1, &demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_20_0();
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = 0;
  uint64_t v7[3] = 0;
  v7[4] = v2;
  v7[5] = v3;
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(v1, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:), (uint64_t)v7);
  outlined destroy of CheckedContinuation<(), Error>?(v1, &demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_18_0();
  v0[19] = v8;
  *uint64_t v8 = v9;
  v8[1] = closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:);
  OUTLINED_FUNCTION_5_3();
  return v11();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_0_8();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_1_6();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_3();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  void **v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t (*v20)(void);
  uint64_t (*v21)(void);
  uint64_t v22;

  uint64_t v1 = v0[12];
  uint64_t v2 = v0[10];
  unint64_t result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if (result == 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v5 = v0[15];
  uint64_t v4 = v0[16];
  uint64_t v6 = v0[13];
  uint64_t v8 = v0[8];
  uint64_t v7 = v0[9];
  uint64_t v9 = (void *)v0[4];
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v0[20] = v10;
  v0[21] = (v6 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v10(v4, v1, v2);
  MEMORY[0x1CB791D70](*v9, v8, v7, MEMORY[0x1E4FBC0F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v2);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v12 = (void **)v0[15];
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v13 = *v12;
    v0[22] = *v12;
    v0[2] = v13;
    uint64_t v14 = v13;
    if (swift_dynamicCast())
    {
      OUTLINED_FUNCTION_14_2();
      OUTLINED_FUNCTION_18_0();
      v0[23] = v15;
      *BOOL v15 = v16;
      v15[1] = closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:);
      OUTLINED_FUNCTION_5_3();
      return v21();
    }
  }
  else
  {
    (*(void (**)(void **, void))(v0[13] + 8))(v12, v0[10]);
  }
  uint64_t v17 = v0[16];
  unint64_t v18 = OUTLINED_FUNCTION_16_0();
  v19(v18, v17);
  type metadata accessor for CooperativeTimeoutResult();
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_3();
  return v20();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_0_8();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_1_6();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_3();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  void *v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(void);
  uint64_t v11;

  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  unint64_t result = __swift_getEnumTagSinglePayload(v2, 1, v1);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = (void *)v0[22];
    uint64_t v5 = (void (*)(uint64_t, uint64_t, uint64_t))v0[20];
    uint64_t v6 = v0[14];
    (*(void (**)(void, uint64_t))(v0[13] + 8))(v0[16], v1);

    v5(v6, v2, v1);
    uint64_t v7 = v0[14];
    uint64_t v8 = OUTLINED_FUNCTION_16_0();
    v9(v8, v7);
    type metadata accessor for CooperativeTimeoutResult();
    swift_storeEnumTagMultiPayload();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_7_3();
    return v10();
  }
  return result;
}

uint64_t partial apply for closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *((void *)v2 + 2);
  uint64_t v6 = *((void *)v2 + 3);
  uint64_t v7 = *((void *)v2 + 4);
  double v8 = v2[5];
  uint64_t v9 = swift_task_alloc();
  uint64_t v10 = (void *)OUTLINED_FUNCTION_4_5(v9);
  void *v10 = v11;
  v10[1] = partial apply for closure #2 in withTimeout<A>(seconds:operation:);
  return closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)(a1, a2, v6, v7, v5, v8);
}

uint64_t closure #1 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  double v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  void *v6 = v4;
  v6[1] = partial apply for closure #2 in withTimeout<A>(seconds:operation:);
  return v8(a1);
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8, v8);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v10);
  uint64_t v11 = type metadata accessor for TaskPriority();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11) == 1)
  {
    outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v10, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v14 = v13;
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v14 = 0;
  }
  uint64_t v15 = *v4;
  uint64_t v16 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v16 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t closure #2 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)(double a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = closure #2 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:);
  return static Task<>.sleepCooperatively(seconds:)(a1);
}

uint64_t closure #2 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)()
{
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_0_8();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_1_6();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  if (v0) {

  }
  OUTLINED_FUNCTION_5_3();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_2();
  lazy protocol witness table accessor for type CoopTimeoutError and conformance CoopTimeoutError();
  swift_allocError();
  swift_willThrow();
  OUTLINED_FUNCTION_6_4();
  return v0();
}

uint64_t static Task<>.sleepCooperatively(seconds:)(double a1)
{
  *(double *)(v1 + 16) = a1;
  return OUTLINED_FUNCTION_11_2((uint64_t)static Task<>.sleepCooperatively(seconds:));
}

uint64_t static Task<>.sleepCooperatively(seconds:)()
{
  OUTLINED_FUNCTION_9_2();
  uint64_t v1 = v0[2];
  uint64_t v2 = swift_allocObject();
  v0[3] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)OUTLINED_FUNCTION_14_2();
  v0[4] = v3;
  *uint64_t v3 = v0;
  v3[1] = static Task<>.sleepCooperatively(seconds:);
  return v5();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_0_8();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_3_5();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_1_6();
  void *v6 = v5;
  *(void *)(v3 + 40) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  OUTLINED_FUNCTION_5_3();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  uint64_t (*v0)(void);

  OUTLINED_FUNCTION_7_3();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_2_6();
  swift_release();
  OUTLINED_FUNCTION_6_4();
  return v0();
}

uint64_t ThrowingTaskGroup.nextResult(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a2;
  v4[3] = a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v4[4] = v7;
  *uint64_t v7 = v4;
  v7[1] = ThrowingTaskGroup.nextResult(isolation:);
  return MEMORY[0x1F4187E20](a1, a4);
}

uint64_t ThrowingTaskGroup.nextResult(isolation:)()
{
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_0_8();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_3_5();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_1_6();
  void *v6 = v5;
  *(void *)(v3 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    if (*(void *)(v3 + 16))
    {
      swift_getObjectType();
      uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v9 = v8;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v9 = 0;
    }
    return MEMORY[0x1F4188298](ThrowingTaskGroup.nextResult(isolation:), v7, v9);
  }
  else
  {
    OUTLINED_FUNCTION_6_4();
    return v10();
  }
}

{
  uint64_t v0;

  return MEMORY[0x1F41867D8](*(void *)(v0 + 40), "_Concurrency/TaskGroup.swift", 28, 1, 1173);
}

uint64_t TimeoutError.localizedDescription.getter()
{
  return 0x74756F656D6974;
}

uint64_t static TimeoutError.== infix(_:_:)()
{
  return 1;
}

void TimeoutError.hash(into:)()
{
}

Swift::Int TimeoutError.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TimeoutError()
{
  return TimeoutError.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance TimeoutError()
{
}

uint64_t closure #1 in static Task<>.sleepCooperatively(seconds:)(uint64_t a1, double a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 1, 1, v8);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = 0;
  *(double *)(v9 + 32) = a2;
  *(void *)(v9 + 40) = a1;
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8);
  swift_retain();
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v7, &demangling cache variable for type metadata for TaskPriority?);
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
    if (*(void *)(v9 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v12 = v13;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
  }
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in static Task<>.sleepCooperatively(seconds:);
  *(void *)(v14 + 24) = v9;
  if (v12 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v12;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_1C9E63024()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in static Task<>.sleepCooperatively(seconds:)(uint64_t a1)
{
  return closure #1 in static Task<>.sleepCooperatively(seconds:)(a1, *(double *)(v1 + 16));
}

ValueMetadata *type metadata accessor for TimeoutError()
{
  return &type metadata for TimeoutError;
}

uint64_t type metadata instantiation function for CooperativeTimeoutResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

uint64_t type metadata completion function for CooperativeTimeoutResult()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t result = type metadata accessor for Result();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for CooperativeTimeoutResult(char *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 2) > 0x18)
  {
    uint64_t v8 = *(char **)a2;
    *(void *)uint64_t v3 = *(void *)a2;
    uint64_t v3 = &v8[(unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8];
    swift_retain();
  }
  else
  {
    uint64_t v9 = v5 + 1;
    unsigned int v10 = a2[v5 + 1];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a2;
          goto LABEL_19;
        case 2:
          int v13 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v13 = *(_DWORD *)a2;
LABEL_19:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    unsigned int v15 = a2[v5];
    if (v10 == 1)
    {
      unsigned int v16 = v15 - 2;
      if (v15 >= 2)
      {
        if (v5 <= 3) {
          uint64_t v17 = v5;
        }
        else {
          uint64_t v17 = 4;
        }
        switch(v17)
        {
          case 1:
            int v18 = *a2;
            goto LABEL_37;
          case 2:
            int v18 = *(unsigned __int16 *)a2;
            goto LABEL_37;
          case 3:
            int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_37;
          case 4:
            int v18 = *(_DWORD *)a2;
LABEL_37:
            int v22 = (v18 | (v16 << (8 * v5))) + 2;
            unsigned int v15 = v18 + 2;
            if (v5 < 4) {
              unsigned int v15 = v22;
            }
            break;
          default:
            break;
        }
      }
      if (v15 == 1)
      {
        uint64_t v23 = *(void *)a2;
        id v24 = *(id *)a2;
        *(void *)uint64_t v3 = v23;
        char v25 = 1;
      }
      else
      {
        (*(void (**)(char *))(v4 + 16))(a1);
        char v25 = 0;
      }
      v3[v5] = v25;
      v3[v9] = 1;
    }
    else
    {
      unsigned int v19 = v15 - 2;
      if (v15 >= 2)
      {
        if (v5 <= 3) {
          uint64_t v20 = v5;
        }
        else {
          uint64_t v20 = 4;
        }
        switch(v20)
        {
          case 1:
            int v21 = *a2;
            goto LABEL_46;
          case 2:
            int v21 = *(unsigned __int16 *)a2;
            goto LABEL_46;
          case 3:
            int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_46;
          case 4:
            int v21 = *(_DWORD *)a2;
LABEL_46:
            int v26 = (v21 | (v19 << (8 * v5))) + 2;
            unsigned int v15 = v21 + 2;
            if (v5 < 4) {
              unsigned int v15 = v26;
            }
            break;
          default:
            break;
        }
      }
      if (v15 == 1)
      {
        id v27 = *(id *)a2;
        id v28 = *(id *)a2;
        *(void *)uint64_t v3 = v27;
        char v29 = 1;
      }
      else
      {
        (*(void (**)(char *))(v4 + 16))(a1);
        char v29 = 0;
      }
      v3[v5] = v29;
      v3[v9] = 0;
    }
  }
  return v3;
}

void destroy for CooperativeTimeoutResult(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 8) {
    unint64_t v2 = 8;
  }
  unsigned int v3 = v2 + 1;
  unsigned int v4 = a1[v2 + 1];
  unsigned int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        int v8 = (v7 | (v5 << (8 * v3))) + 2;
        unsigned int v4 = v7 + 2;
        if (v3 < 4) {
          unsigned int v4 = v8;
        }
        break;
      default:
        break;
    }
  }
  unsigned int v9 = a1[v2];
  if (v4 == 1)
  {
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v2 <= 3) {
        uint64_t v11 = v2;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          goto LABEL_25;
        case 2:
          goto LABEL_26;
        case 3:
          goto LABEL_27;
        case 4:
          goto LABEL_28;
        default:
          break;
      }
    }
  }
  else
  {
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v2 <= 3) {
        uint64_t v12 = v2;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
LABEL_25:
          int v13 = *a1;
          goto LABEL_29;
        case 2:
LABEL_26:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_29;
        case 3:
LABEL_27:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_29;
        case 4:
LABEL_28:
          int v13 = *(_DWORD *)a1;
LABEL_29:
          int v14 = (v13 | (v10 << (8 * v2))) + 2;
          unsigned int v9 = v13 + 2;
          if (v2 < 4) {
            unsigned int v9 = v14;
          }
          break;
        default:
          break;
      }
    }
  }
  if (v9 == 1) {

  }
  else {
    (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
}

void *initializeWithCopy for CooperativeTimeoutResult(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  uint64_t v6 = v5 + 1;
  unsigned int v7 = a2[v5 + 1];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  unsigned int v12 = a2[v5];
  if (v7 == 1)
  {
    unsigned int v13 = v12 - 2;
    if (v12 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v14 = v5;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a2;
          goto LABEL_31;
        case 2:
          int v15 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v15 = *(_DWORD *)a2;
LABEL_31:
          int v19 = (v15 | (v13 << (8 * v5))) + 2;
          unsigned int v12 = v15 + 2;
          if (v5 < 4) {
            unsigned int v12 = v19;
          }
          break;
        default:
          break;
      }
    }
    if (v12 == 1)
    {
      uint64_t v20 = *(void *)a2;
      id v21 = *(id *)a2;
      *a1 = v20;
      char v22 = 1;
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      char v22 = 0;
    }
    char v23 = 1;
  }
  else
  {
    unsigned int v16 = v12 - 2;
    if (v12 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v17 = v5;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a2;
          goto LABEL_40;
        case 2:
          int v18 = *(unsigned __int16 *)a2;
          goto LABEL_40;
        case 3:
          int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_40;
        case 4:
          int v18 = *(_DWORD *)a2;
LABEL_40:
          int v24 = (v18 | (v16 << (8 * v5))) + 2;
          unsigned int v12 = v18 + 2;
          if (v5 < 4) {
            unsigned int v12 = v24;
          }
          break;
        default:
          break;
      }
    }
    if (v12 == 1)
    {
      id v25 = *(id *)a2;
      id v26 = *(id *)a2;
      char v23 = 0;
      *a1 = v25;
      char v22 = 1;
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      char v22 = 0;
      char v23 = 0;
    }
  }
  *((unsigned char *)a1 + v5) = v22;
  *((unsigned char *)a1 + v6) = v23;
  return a1;
}

unsigned __int8 *assignWithCopy for CooperativeTimeoutResult(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    uint64_t v8 = v7 + 1;
    unsigned int v9 = a1[v7 + 1];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          goto LABEL_14;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v12 = *(_DWORD *)a1;
LABEL_14:
          if (v8 < 4) {
            unsigned int v9 = (v12 | (v10 << (8 * v8))) + 2;
          }
          else {
            unsigned int v9 = v12 + 2;
          }
          break;
        default:
          break;
      }
    }
    unsigned int v13 = a1[v7];
    if (v9 == 1)
    {
      unsigned int v14 = v13 - 2;
      if (v13 >= 2)
      {
        if (v7 <= 3) {
          uint64_t v15 = v7;
        }
        else {
          uint64_t v15 = 4;
        }
        switch(v15)
        {
          case 1:
            goto LABEL_28;
          case 2:
            goto LABEL_29;
          case 3:
            goto LABEL_30;
          case 4:
            goto LABEL_31;
          default:
            break;
        }
      }
    }
    else
    {
      unsigned int v14 = v13 - 2;
      if (v13 >= 2)
      {
        if (v7 <= 3) {
          uint64_t v16 = v7;
        }
        else {
          uint64_t v16 = 4;
        }
        switch(v16)
        {
          case 1:
LABEL_28:
            int v17 = *a1;
            goto LABEL_32;
          case 2:
LABEL_29:
            int v17 = *(unsigned __int16 *)a1;
            goto LABEL_32;
          case 3:
LABEL_30:
            int v17 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_32;
          case 4:
LABEL_31:
            int v17 = *(_DWORD *)a1;
LABEL_32:
            if (v7 < 4) {
              v17 |= v14 << (8 * v7);
            }
            unsigned int v13 = v17 + 2;
            break;
          default:
            break;
        }
      }
    }
    if (v13 == 1) {

    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v18 = a2[v8];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v20 = v8;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_47;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_47;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_47;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_47:
          if (v8 < 4) {
            unsigned int v18 = (v21 | (v19 << (8 * v8))) + 2;
          }
          else {
            unsigned int v18 = v21 + 2;
          }
          break;
        default:
          break;
      }
    }
    unsigned int v22 = a2[v7];
    if (v18 == 1)
    {
      unsigned int v23 = v22 - 2;
      if (v22 >= 2)
      {
        if (v7 <= 3) {
          uint64_t v24 = v7;
        }
        else {
          uint64_t v24 = 4;
        }
        switch(v24)
        {
          case 1:
            int v25 = *a2;
            goto LABEL_66;
          case 2:
            int v25 = *(unsigned __int16 *)a2;
            goto LABEL_66;
          case 3:
            int v25 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_66;
          case 4:
            int v25 = *(_DWORD *)a2;
LABEL_66:
            if (v7 < 4) {
              v25 |= v23 << (8 * v7);
            }
            unsigned int v22 = v25 + 2;
            break;
          default:
            break;
        }
      }
      if (v22 == 1)
      {
        char v29 = *(void **)a2;
        id v30 = v29;
        *(void *)a1 = v29;
        char v31 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        char v31 = 0;
      }
      char v32 = 1;
    }
    else
    {
      unsigned int v26 = v22 - 2;
      if (v22 >= 2)
      {
        if (v7 <= 3) {
          uint64_t v27 = v7;
        }
        else {
          uint64_t v27 = 4;
        }
        switch(v27)
        {
          case 1:
            int v28 = *a2;
            goto LABEL_76;
          case 2:
            int v28 = *(unsigned __int16 *)a2;
            goto LABEL_76;
          case 3:
            int v28 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_76;
          case 4:
            int v28 = *(_DWORD *)a2;
LABEL_76:
            if (v7 < 4) {
              v28 |= v26 << (8 * v7);
            }
            unsigned int v22 = v28 + 2;
            break;
          default:
            break;
        }
      }
      if (v22 == 1)
      {
        uint64_t v33 = *(void **)a2;
        id v34 = v33;
        char v32 = 0;
        *(void *)a1 = v33;
        char v31 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        char v31 = 0;
        char v32 = 0;
      }
    }
    a1[v7] = v31;
    a1[v8] = v32;
  }
  return a1;
}

void *initializeWithTake for CooperativeTimeoutResult(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  uint64_t v6 = v5 + 1;
  unsigned int v7 = a2[v5 + 1];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  unsigned int v12 = a2[v5];
  if (v7 == 1)
  {
    unsigned int v13 = v12 - 2;
    if (v12 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v14 = v5;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a2;
          goto LABEL_31;
        case 2:
          int v15 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v15 = *(_DWORD *)a2;
LABEL_31:
          int v19 = (v15 | (v13 << (8 * v5))) + 2;
          unsigned int v12 = v15 + 2;
          if (v5 < 4) {
            unsigned int v12 = v19;
          }
          break;
        default:
          break;
      }
    }
    if (v12 == 1)
    {
      *a1 = *(void *)a2;
      char v20 = 1;
    }
    else
    {
      (*(void (**)(void *))(v4 + 32))(a1);
      char v20 = 0;
    }
    char v21 = 1;
  }
  else
  {
    unsigned int v16 = v12 - 2;
    if (v12 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v17 = v5;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a2;
          goto LABEL_40;
        case 2:
          int v18 = *(unsigned __int16 *)a2;
          goto LABEL_40;
        case 3:
          int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_40;
        case 4:
          int v18 = *(_DWORD *)a2;
LABEL_40:
          int v22 = (v18 | (v16 << (8 * v5))) + 2;
          unsigned int v12 = v18 + 2;
          if (v5 < 4) {
            unsigned int v12 = v22;
          }
          break;
        default:
          break;
      }
    }
    if (v12 == 1)
    {
      char v21 = 0;
      *a1 = *(void *)a2;
      char v20 = 1;
    }
    else
    {
      (*(void (**)(void *))(v4 + 32))(a1);
      char v20 = 0;
      char v21 = 0;
    }
  }
  *((unsigned char *)a1 + v5) = v20;
  *((unsigned char *)a1 + v6) = v21;
  return a1;
}

unsigned __int8 *assignWithTake for CooperativeTimeoutResult(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    uint64_t v8 = v7 + 1;
    unsigned int v9 = a1[v7 + 1];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          goto LABEL_14;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v12 = *(_DWORD *)a1;
LABEL_14:
          if (v8 < 4) {
            unsigned int v9 = (v12 | (v10 << (8 * v8))) + 2;
          }
          else {
            unsigned int v9 = v12 + 2;
          }
          break;
        default:
          break;
      }
    }
    unsigned int v13 = a1[v7];
    if (v9 == 1)
    {
      unsigned int v14 = v13 - 2;
      if (v13 >= 2)
      {
        if (v7 <= 3) {
          uint64_t v15 = v7;
        }
        else {
          uint64_t v15 = 4;
        }
        switch(v15)
        {
          case 1:
            goto LABEL_28;
          case 2:
            goto LABEL_29;
          case 3:
            goto LABEL_30;
          case 4:
            goto LABEL_31;
          default:
            break;
        }
      }
    }
    else
    {
      unsigned int v14 = v13 - 2;
      if (v13 >= 2)
      {
        if (v7 <= 3) {
          uint64_t v16 = v7;
        }
        else {
          uint64_t v16 = 4;
        }
        switch(v16)
        {
          case 1:
LABEL_28:
            int v17 = *a1;
            goto LABEL_32;
          case 2:
LABEL_29:
            int v17 = *(unsigned __int16 *)a1;
            goto LABEL_32;
          case 3:
LABEL_30:
            int v17 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_32;
          case 4:
LABEL_31:
            int v17 = *(_DWORD *)a1;
LABEL_32:
            if (v7 < 4) {
              v17 |= v14 << (8 * v7);
            }
            unsigned int v13 = v17 + 2;
            break;
          default:
            break;
        }
      }
    }
    if (v13 == 1) {

    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v18 = a2[v8];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v20 = v8;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_47;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_47;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_47;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_47:
          if (v8 < 4) {
            unsigned int v18 = (v21 | (v19 << (8 * v8))) + 2;
          }
          else {
            unsigned int v18 = v21 + 2;
          }
          break;
        default:
          break;
      }
    }
    unsigned int v22 = a2[v7];
    if (v18 == 1)
    {
      unsigned int v23 = v22 - 2;
      if (v22 >= 2)
      {
        if (v7 <= 3) {
          uint64_t v24 = v7;
        }
        else {
          uint64_t v24 = 4;
        }
        switch(v24)
        {
          case 1:
            int v25 = *a2;
            goto LABEL_66;
          case 2:
            int v25 = *(unsigned __int16 *)a2;
            goto LABEL_66;
          case 3:
            int v25 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_66;
          case 4:
            int v25 = *(_DWORD *)a2;
LABEL_66:
            if (v7 < 4) {
              v25 |= v23 << (8 * v7);
            }
            unsigned int v22 = v25 + 2;
            break;
          default:
            break;
        }
      }
      if (v22 == 1)
      {
        *(void *)a1 = *(void *)a2;
        char v29 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        char v29 = 0;
      }
      char v30 = 1;
    }
    else
    {
      unsigned int v26 = v22 - 2;
      if (v22 >= 2)
      {
        if (v7 <= 3) {
          uint64_t v27 = v7;
        }
        else {
          uint64_t v27 = 4;
        }
        switch(v27)
        {
          case 1:
            int v28 = *a2;
            goto LABEL_76;
          case 2:
            int v28 = *(unsigned __int16 *)a2;
            goto LABEL_76;
          case 3:
            int v28 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_76;
          case 4:
            int v28 = *(_DWORD *)a2;
LABEL_76:
            if (v7 < 4) {
              v28 |= v26 << (8 * v7);
            }
            unsigned int v22 = v28 + 2;
            break;
          default:
            break;
        }
      }
      if (v22 == 1)
      {
        char v30 = 0;
        *(void *)a1 = *(void *)a2;
        char v29 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        char v29 = 0;
        char v30 = 0;
      }
    }
    a1[v7] = v29;
    a1[v8] = v30;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CooperativeTimeoutResult(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 8;
  if (*(void *)(v3 + 64) > 8uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 2;
  char v6 = 8 * (v4 + 2);
  if ((v4 + 2) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4 + 1);
      if (v11 >= 2) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 255;
}

void storeEnumTagSinglePayload for CooperativeTimeoutResult(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = 8;
  if (*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) > 8uLL) {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  }
  size_t v6 = v5 + 2;
  char v7 = 8 * (v5 + 2);
  if (a3 < 0xFF)
  {
    int v8 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v11 = ((a3 + ~(-1 << v7) - 254) >> v7) + 1;
    if (HIWORD(v11))
    {
      int v8 = 4;
    }
    else if (v11 >= 0x100)
    {
      int v8 = 2;
    }
    else
    {
      int v8 = v11 > 1;
    }
  }
  else
  {
    int v8 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v9 = a2 - 255;
    if (v6 < 4)
    {
      int v10 = (v9 >> v7) + 1;
      if (v5 != -2)
      {
        int v12 = v9 & ~(-1 << v7);
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 2);
      *(_DWORD *)a1 = v9;
      int v10 = 1;
    }
    switch(v8)
    {
      case 1:
        a1[v6] = v10;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v10;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x1C9E6474CLL);
      case 4:
        *(_DWORD *)&a1[v6] = v10;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v8)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5 + 1] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for CooperativeTimeoutResult(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 8) {
    unint64_t v2 = 8;
  }
  unsigned int v3 = v2 + 1;
  uint64_t v4 = a1[v2 + 1];
  int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 2;
        LODWORD(v4) = v7 + 2;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

void destructiveInjectEnumTag for CooperativeTimeoutResult(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (v4 <= 8) {
    unint64_t v4 = 8;
  }
  size_t v5 = v4 + 1;
  if (a2 > 1)
  {
    unsigned int v6 = a2 - 2;
    if (v5 < 4)
    {
      unsigned int v7 = v6 >> (8 * v5);
      int v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if (v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if (v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    a1[v5] = a2;
  }
}

uint64_t closure #1 in closure #1 in static Task<>.sleepCooperatively(seconds:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 24) = a5;
  *(double *)(v5 + 16) = a1;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in static Task<>.sleepCooperatively(seconds:), 0, 0);
}

uint64_t closure #1 in closure #1 in static Task<>.sleepCooperatively(seconds:)()
{
  OUTLINED_FUNCTION_2_6();
  double v2 = *(double *)(v0 + 16) * 1000000000.0;
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v2 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v2 >= 1.84467441e19)
  {
LABEL_9:
    __break(1u);
    return MEMORY[0x1F4187DF0](v1);
  }
  unint64_t v3 = (unint64_t)v2;
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v4;
  *unint64_t v4 = v0;
  v4[1] = closure #1 in closure #1 in static Task<>.sleepCooperatively(seconds:);
  unint64_t v1 = v3;
  return MEMORY[0x1F4187DF0](v1);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_0_8();
  unint64_t v1 = *v0;
  OUTLINED_FUNCTION_1_6();
  *double v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_3();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_2_6();
  ManagedContinuation<A>.resume()();
  OUTLINED_FUNCTION_6_4();
  return v0();
}

void CoopTimeoutError.hash(into:)()
{
}

Swift::Int CoopTimeoutError.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimeoutError()
{
  return Hasher._finalize()();
}

void specialized closure #1 in withCancellableContinuation<A>(body:)()
{
  type metadata accessor for CancellationError();
  lazy protocol witness table accessor for type CancellationError and conformance CancellationError();
  uint64_t v0 = (void *)swift_allocError();
  CancellationError.init()();
  specialized ManagedContinuation.resume(with:)(v0, 1);
}

uint64_t specialized closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x1F4188298](specialized closure #2 in withCancellableContinuation<A>(body:), 0, 0);
}

uint64_t specialized closure #2 in withCancellableContinuation<A>(body:)()
{
  OUTLINED_FUNCTION_2_6();
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(void *)(v2 + 32) = v1;
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *unint64_t v3 = v0;
  v3[1] = specialized closure #2 in withCancellableContinuation<A>(body:);
  OUTLINED_FUNCTION_5_3();
  return MEMORY[0x1F4188160]();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_0_8();
  unint64_t v3 = v2;
  OUTLINED_FUNCTION_3_5();
  *unint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_1_6();
  void *v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_5_3();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_6_4();
    return v10();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_2_6();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void specialized closure #1 in closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  specialized ManagedContinuation.setContinuation(_:)(a1);
  if (static Task<>.isCancelled.getter())
  {
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type CancellationError and conformance CancellationError();
    uint64_t v5 = (void *)swift_allocError();
    CancellationError.init()();
    specialized ManagedContinuation.resume(with:)(v5, 1);
  }
  else
  {
    a3(a2);
  }
}

uint64_t specialized ManagedContinuation.setContinuation(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v5, a1, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
  specialized ManagedContinuation.updateState(continuation:result:)((uint64_t)v5, 0, 0xFFu);
  return outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v5, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
}

uint64_t specialized ManagedContinuation.().init()()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 88);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 96);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = -1;
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E08]), sel_init);
  *(void *)(v0 + *(void *)(*(void *)v0 + 104)) = v4;
  id v5 = v4;
  uint64_t v6 = (void *)MEMORY[0x1CB7919D0](0xD000000000000027, 0x80000001C9EB8490);
  objc_msgSend(v5, sel_setName_, v6);

  return v0;
}

void partial apply for specialized closure #1 in withCancellableContinuation<A>(body:)()
{
}

uint64_t partial apply for specialized closure #2 in withCancellableContinuation<A>(body:)()
{
  OUTLINED_FUNCTION_9_2();
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_4_5(v2);
  *uint64_t v3 = v4;
  v3[1] = partial apply for closure #2 in withTimeout<A>(seconds:operation:);
  uint64_t v5 = OUTLINED_FUNCTION_12_2();
  return specialized closure #2 in withCancellableContinuation<A>(body:)(v5, v6, v7, v1);
}

void partial apply for specialized closure #1 in closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1)
{
  specialized closure #1 in closure #2 in withCancellableContinuation<A>(body:)(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type CancellationError and conformance CancellationError()
{
  unint64_t result = lazy protocol witness table cache variable for type CancellationError and conformance CancellationError;
  if (!lazy protocol witness table cache variable for type CancellationError and conformance CancellationError)
  {
    type metadata accessor for CancellationError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError);
  }
  return result;
}

id outlined copy of Result<(), Error>(id result, char a2)
{
  if (a2) {
    return result;
  }
  return result;
}

void outlined consume of Result<(), Error>(id a1, char a2)
{
  if (a2) {
}
  }

uint64_t sub_1C9E6527C()
{
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_17_0();

  return MEMORY[0x1F4186498](v0, v1, v2);
}

uint64_t partial apply for closure #1 in closure #1 in static Task<>.sleepCooperatively(seconds:)()
{
  OUTLINED_FUNCTION_10_2();
  double v1 = *(double *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_4_5(v3);
  *uint64_t v4 = v5;
  v4[1] = partial apply for closure #2 in withTimeout<A>(seconds:operation:);
  uint64_t v6 = OUTLINED_FUNCTION_12_2();
  return closure #1 in closure #1 in static Task<>.sleepCooperatively(seconds:)(v1, v6, v7, v8, v2);
}

uint64_t outlined destroy of CheckedContinuation<(), Error>?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_0_8();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_1_6();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_3();
  return v3();
}

uint64_t sub_1C9E65558()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA()
{
  OUTLINED_FUNCTION_9_2();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_4_5(v0);
  void *v1 = v2;
  v1[1] = partial apply for closure #2 in withTimeout<A>(seconds:operation:);
  uint64_t v3 = OUTLINED_FUNCTION_15_0();
  return v4(v3);
}

uint64_t objectdestroyTm()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)()
{
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_21_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_4_5(v0);
  void *v1 = v2;
  v1[1] = partial apply for closure #2 in withTimeout<A>(seconds:operation:);
  uint64_t v3 = OUTLINED_FUNCTION_13_2();
  return closure #1 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)(v3, v4, v5, v6);
}

uint64_t sub_1C9E65704()
{
  swift_unknownObjectRelease();
  uint64_t v0 = OUTLINED_FUNCTION_17_0();

  return MEMORY[0x1F4186498](v0, v1, v2);
}

uint64_t partial apply for closure #2 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)()
{
  OUTLINED_FUNCTION_10_2();
  double v1 = *(double *)(v0 + 40);
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_4_5(v2);
  *uint64_t v3 = v4;
  v3[1] = partial apply for closure #2 in withTimeout<A>(seconds:operation:);
  return closure #2 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)(v1);
}

unint64_t lazy protocol witness table accessor for type CoopTimeoutError and conformance CoopTimeoutError()
{
  unint64_t result = lazy protocol witness table cache variable for type CoopTimeoutError and conformance CoopTimeoutError;
  if (!lazy protocol witness table cache variable for type CoopTimeoutError and conformance CoopTimeoutError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoopTimeoutError and conformance CoopTimeoutError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CoopTimeoutError and conformance CoopTimeoutError;
  if (!lazy protocol witness table cache variable for type CoopTimeoutError and conformance CoopTimeoutError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoopTimeoutError and conformance CoopTimeoutError);
  }
  return result;
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #2 in withTimeout<A>(seconds:operation:)(uint64_t a1)
{
  return closure #1 in closure #2 in withTimeout<A>(seconds:operation:)(a1, v1);
}

uint64_t sub_1C9E658A8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_17_0();

  return MEMORY[0x1F4186498](v0, v1, v2);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in withTimeout<A>(seconds:operation:)()
{
  OUTLINED_FUNCTION_10_2();
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_4_5(v3);
  *uint64_t v4 = v5;
  v4[1] = closure #1 in withTimeout<A>(seconds:operation:);
  uint64_t v6 = OUTLINED_FUNCTION_12_2();
  return closure #1 in closure #1 in closure #2 in withTimeout<A>(seconds:operation:)(v6, v7, v8, v2, v1);
}

uint64_t getEnumTagSinglePayload for TimeoutError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for TimeoutError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C9E65A7CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for CoopTimeoutError()
{
  return &unk_1F2428960;
}

uint64_t OUTLINED_FUNCTION_4_5(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_6_4()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_7_3()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_8_3(uint64_t a1)
{
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_11_2(uint64_t a1)
{
  return MEMORY[0x1F4188298](a1, 0, 0);
}

uint64_t OUTLINED_FUNCTION_12_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_14_2()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_15_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_16_0()
{
  return *(void *)(v0 + 24);
}

uint64_t OUTLINED_FUNCTION_17_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_19_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_20_0()
{
  return __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
}

uint64_t ObjectEntry.init(key:value:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectRelease();
  uint64_t v6 = a3 + *(int *)(type metadata accessor for ObjectEntry() + 28);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v7(v6, a1, a2);
}

uint64_t ObjectAssociation.count.getter()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  __swift_project_boxed_opaque_existential_1(v0 + 3, v1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t *@<X8>), void *, void, uint64_t, uint64_t))(v2 + 24))(&v4, partial apply for closure #1 in ObjectAssociation.count.getter, v0, MEMORY[0x1E4FBB550], v1, v2);
  return v4;
}

uint64_t closure #1 in ObjectAssociation.count.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = SiriEnvironmentStorage.storage.getter();
  uint64_t v3 = type metadata accessor for ObjectEntry();
  uint64_t v4 = MEMORY[0x1CB791910](v2, MEMORY[0x1E4FBB058], v3, MEMORY[0x1E4FBB060]);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v4;
  return result;
}

uint64_t partial apply for closure #1 in ObjectAssociation.count.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in ObjectAssociation.count.getter(a1);
}

uint64_t ObjectAssociation.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  ObjectAssociation.init()();
  return v0;
}

void *ObjectAssociation.init()()
{
  OUTLINED_FUNCTION_0_7();
  type metadata accessor for ObjectEntry();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  v0[2] = Dictionary.init(dictionaryLiteral:)();
  uint64_t v1 = type metadata accessor for DispatchSemaphoreLock();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = dispatch_semaphore_create(1);
  v0[6] = v1;
  v0[7] = &protocol witness table for DispatchSemaphoreLock;
  v0[3] = v2;
  return v0;
}

uint64_t key path getter for ObjectAssociation.subscript(_:) : <A>ObjectAssociation<A>A(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 144))(*a2);
}

uint64_t key path setter for ObjectAssociation.subscript(_:) : <A>ObjectAssociation<A>A(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v9 = (char *)&v14 - v8;
  uint64_t v10 = *a3;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v14 - v8, a1);
  int v12 = *(uint64_t (**)(char *, uint64_t))(**(void **)a2 + 152);
  swift_unknownObjectRetain();
  return v12(v9, v10);
}

uint64_t ObjectAssociation.subscript.setter(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_7();
  uint64_t v5 = *(void *)(v4 + 80);
  uint64_t v6 = type metadata accessor for Optional();
  OUTLINED_FUNCTION_0_5();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9, v10);
  int v12 = (char *)&v22 - v11;
  OUTLINED_FUNCTION_0_5();
  uint64_t v14 = v13;
  MEMORY[0x1F4188790](v15, v16);
  unsigned int v18 = (char *)&v22 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v12, a1, v6);
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v5) == 1)
  {
    unsigned int v19 = *(void (**)(void))(v8 + 8);
    OUTLINED_FUNCTION_2_7();
    v19();
    ObjectAssociation.clear(for:)(a2);
    swift_unknownObjectRelease();
    OUTLINED_FUNCTION_2_7();
    return ((uint64_t (*)(void))v19)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v12, v5);
    ObjectAssociation.store(value:for:)();
    swift_unknownObjectRelease();
    OUTLINED_FUNCTION_2_7();
    v21();
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v5);
  }
}

void (*ObjectAssociation.subscript.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  OUTLINED_FUNCTION_0_7();
  uint64_t v6 = type metadata accessor for Optional();
  void v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  ObjectAssociation.value(for:)(a2);
  return ObjectAssociation.subscript.modify;
}

void ObjectAssociation.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  if (a2)
  {
    uint64_t v5 = v2[2];
    uint64_t v6 = v2[3];
    uint64_t v7 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    swift_unknownObjectRetain();
    ObjectAssociation.subscript.setter((uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    uint64_t v8 = *v2;
    swift_unknownObjectRetain();
    ObjectAssociation.subscript.setter((uint64_t)v4, v8);
  }
  free(v4);
  free(v3);

  free(v2);
}

Swift::Void __swiftcall ObjectAssociation.clearAll()()
{
}

uint64_t closure #1 in ObjectAssociation.clearAll()()
{
  return swift_endAccess();
}

Swift::Void __swiftcall ObjectAssociation.flush()()
{
}

uint64_t ObjectAssociation.clearAll()()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 24), *(void *)(v0 + 48));
  OUTLINED_FUNCTION_1_7();
  return v1();
}

uint64_t closure #1 in ObjectAssociation.flush()()
{
  type metadata accessor for ObjectEntry();
  uint64_t v0 = type metadata accessor for Optional();
  v11[0] = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v1);
  uint64_t v3 = (char *)v11 - v2;
  SiriEnvironmentStorage.storage.getter();
  uint64_t v4 = swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11[1] = v4;
  type metadata accessor for Dictionary.Keys();
  swift_getWitnessTable();
  uint64_t v5 = Sequence.filter(_:)();
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = (uint64_t *)(v5 + 32);
    swift_beginAccess();
    type metadata accessor for Dictionary();
    uint64_t v8 = (void (**)(char *, uint64_t))(v11[0] + 8);
    do
    {
      uint64_t v9 = *v7++;
      void v11[5] = v9;
      Dictionary.removeValue(forKey:)();
      (*v8)(v3, v0);
      --v6;
    }
    while (v6);
    swift_endAccess();
  }
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in ObjectAssociation.flush()(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for ObjectEntry();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v12 - v6;
  uint64_t v8 = *a1;
  uint64_t v9 = SiriEnvironmentStorage.storage.getter();
  uint64_t v13 = v8;
  MEMORY[0x1CB791960](&v13, v9, MEMORY[0x1E4FBB058], v2, MEMORY[0x1E4FBB060]);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v2))
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return 1;
  }
  uint64_t v11 = MEMORY[0x1CB7930A0](v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  if (!v11) {
    return 1;
  }
  swift_unknownObjectRelease();
  return 0;
}

uint64_t ObjectAssociation.store(value:for:)()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 24), *(void *)(v0 + 48));
  OUTLINED_FUNCTION_1_7();
  return v1();
}

uint64_t closure #1 in ObjectAssociation.store(value:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)a1 + 80);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v9 = (char *)v16 - v8;
  uint64_t v10 = type metadata accessor for ObjectEntry();
  uint64_t v11 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v11 - 8, v12);
  uint64_t v14 = (char *)v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a4, v6);
  swift_unknownObjectRetain();
  ObjectEntry.init(key:value:)((uint64_t)v9, v6, (uint64_t)v14);
  __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v10);
  v16[5] = a2;
  swift_beginAccess();
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  return swift_endAccess();
}

uint64_t ObjectAssociation.value(for:)(uint64_t a1)
{
  uint64_t v3 = v1[6];
  uint64_t v4 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v3);
  uint64_t v9 = v1;
  uint64_t v10 = a1;
  uint64_t v11 = a1;
  uint64_t v5 = *(uint64_t (**)(uint64_t (*)@<X0>(uint64_t@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t))(v4 + 24);
  uint64_t v6 = type metadata accessor for Optional();
  return v5(partial apply for closure #1 in ObjectAssociation.value(for:), &v8, v6, v3, v4);
}

uint64_t closure #1 in ObjectAssociation.value(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v31 = a4;
  uint64_t v32 = *(void *)(*(void *)a1 + 80);
  uint64_t v5 = type metadata accessor for ObjectEntry();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v6, v8);
  char v29 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9, v11);
  uint64_t v14 = (char *)&v27 - v13;
  uint64_t v15 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v12, v16);
  unsigned int v18 = (char *)&v27 - v17;
  uint64_t v19 = SiriEnvironmentStorage.storage.getter();
  uint64_t v30 = a2;
  v33[0] = a2;
  MEMORY[0x1CB791960](v33, v19, MEMORY[0x1E4FBB058], v5, MEMORY[0x1E4FBB060]);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v14, v5);
    uint64_t v20 = MEMORY[0x1CB7930A0](v18);
    if (v20)
    {
      uint64_t v21 = v20;
      swift_unknownObjectRelease();
      if (v21 == v28)
      {
        uint64_t v25 = v31;
        uint64_t v24 = v32;
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v31, &v18[*(int *)(v5 + 28)], v32);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v5);
        uint64_t v23 = 0;
        return __swift_storeEnumTagSinglePayload(v25, v23, 1, v24);
      }
    }
    v33[4] = v30;
    swift_beginAccess();
    type metadata accessor for Dictionary();
    uint64_t v22 = v29;
    Dictionary.removeValue(forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v6);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v5);
  }
  uint64_t v23 = 1;
  uint64_t v25 = v31;
  uint64_t v24 = v32;
  return __swift_storeEnumTagSinglePayload(v25, v23, 1, v24);
}

uint64_t ObjectAssociation.clear(for:)(uint64_t a1)
{
  OUTLINED_FUNCTION_0_7();
  type metadata accessor for ObjectEntry();
  uint64_t v3 = type metadata accessor for Optional();
  OUTLINED_FUNCTION_0_5();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v9 = &v13[-v8];
  uint64_t v10 = v1[6];
  uint64_t v11 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v10);
  uint64_t v14 = v1;
  uint64_t v15 = a1;
  (*(void (**)(uint64_t (*)(), unsigned char *, uint64_t, uint64_t, uint64_t))(v11 + 24))(partial apply for closure #1 in ObjectAssociation.clear(for:), v13, v3, v10, v11);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v9, v3);
}

uint64_t closure #1 in ObjectAssociation.clear(for:)()
{
  return swift_endAccess();
}

uint64_t ObjectAssociation.deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return v0;
}

uint64_t ObjectAssociation.__deallocating_deinit()
{
  ObjectAssociation.deinit();

  return MEMORY[0x1F4186488](v0, 64, 7);
}

uint64_t type metadata accessor for ObjectEntry()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in ObjectAssociation.clearAll()()
{
  return closure #1 in ObjectAssociation.clearAll()();
}

uint64_t partial apply for closure #1 in ObjectAssociation.flush()()
{
  return closure #1 in ObjectAssociation.flush()();
}

uint64_t sub_1C9E671F8()
{
  return 8;
}

void *sub_1C9E67204(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata completion function for ObjectAssociation()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ObjectAssociation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for ObjectAssociation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ObjectAssociation);
}

uint64_t dispatch thunk of ObjectAssociation.count.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of ObjectAssociation.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of ObjectAssociation.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of ObjectAssociation.subscript.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of ObjectAssociation.subscript.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of ObjectAssociation.clearAll()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of ObjectAssociation.flush()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t type metadata completion function for ObjectEntry()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ObjectEntry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v3 = *(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = v4 + ((unsigned __int16)((v3 & 0xF8) + 23) & (unsigned __int16)~(v3 & 0xF8) & 0x1F8);
  swift_retain();
  return v5;
}

uint64_t destroy for ObjectEntry(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakDestroy();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t initializeWithCopy for ObjectEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_unknownObjectWeakCopyInit();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(unsigned __int8 *)(v7 + 80) + 8 + v6) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 8 + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithCopy for ObjectEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_unknownObjectWeakCopyAssign();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(unsigned __int8 *)(v7 + 80) + 8 + v6) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 8 + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithTake for ObjectEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_unknownObjectWeakTakeInit();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(unsigned __int8 *)(v7 + 80) + 8 + v6) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 8 + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithTake for ObjectEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_unknownObjectWeakTakeAssign();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(unsigned __int8 *)(v7 + 80) + 8 + v6) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 8 + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ObjectEntry(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 <= v6) {
    goto LABEL_19;
  }
  uint64_t v9 = ((v7 + 8) & ~v7) + *(void *)(*(void *)(v4 - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v12 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v12 < 2)
    {
LABEL_19:
      if (v6) {
        return __swift_getEnumTagSinglePayload(((unint64_t)a1 + v7 + 8) & ~v7, v6, v4);
      }
      return 0;
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_19;
  }
LABEL_11:
  int v13 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v13 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v6 + (v9 | v13) + 1;
}

void storeEnumTagSinglePayload for ObjectEntry(char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(v7 + 64);
  char v11 = 8 * v10;
  BOOL v12 = a3 >= v8;
  int v13 = a3 - v8;
  if (v13 != 0 && v12)
  {
    if (v10 <= 3)
    {
      unsigned int v17 = ((v13 + ~(-1 << v11)) >> v11) + 1;
      if (HIWORD(v17))
      {
        int v14 = 4;
      }
      else if (v17 >= 0x100)
      {
        int v14 = 2;
      }
      else
      {
        int v14 = v17 > 1;
      }
    }
    else
    {
      int v14 = 1;
    }
  }
  else
  {
    int v14 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v15 = ~v8 + a2;
    if (v10 < 4)
    {
      int v16 = (v15 >> v11) + 1;
      if (v10)
      {
        int v18 = v15 & ~(-1 << v11);
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v16;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v10] = v16;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1C9E67A78);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
        __swift_storeEnumTagSinglePayload(v19, a2, v8, v6);
      }
      return;
  }
}

uint64_t partial apply for closure #1 in closure #1 in ObjectAssociation.flush()(uint64_t *a1)
{
  return closure #1 in closure #1 in ObjectAssociation.flush()(a1) & 1;
}

uint64_t partial apply for closure #1 in ObjectAssociation.store(value:for:)()
{
  return closure #1 in ObjectAssociation.store(value:for:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t partial apply for closure #1 in ObjectAssociation.clear(for:)()
{
  return closure #1 in ObjectAssociation.clear(for:)();
}

uint64_t partial apply for closure #1 in ObjectAssociation.value(for:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ObjectAssociation.value(for:)(v1[2], v1[3], v1[4], a1);
}

uint64_t key path getter for CoreTelephonyAPIBridge.createAndLaunchConnection : CoreTelephonyAPIBridge@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned OpaquePointer);
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v5;

  return swift_retain();
}

uint64_t key path setter for CoreTelephonyAPIBridge.createAndLaunchConnection : CoreTelephonyAPIBridge(uint64_t *a1, uint64_t (**a2)())
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out OpaquePointer);
  a2[1] = (uint64_t (*)())v5;
  return result;
}

uint64_t CoreTelephonyAPIBridge.createAndLaunchConnection.getter()
{
  return OUTLINED_FUNCTION_2_1();
}

uint64_t CoreTelephonyAPIBridge.createAndLaunchConnection.setter()
{
  OUTLINED_FUNCTION_2_8();
  uint64_t result = swift_release();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*CoreTelephonyAPIBridge.createAndLaunchConnection.modify())()
{
  return destructiveProjectEnumData for InputOrigin;
}

uint64_t key path getter for CoreTelephonyAPIBridge.createOnTargetQueue : CoreTelephonyAPIBridge@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed OS_dispatch_queue) -> (@unowned OpaquePointer);
  a2[1] = v5;

  return swift_retain();
}

uint64_t key path setter for CoreTelephonyAPIBridge.createOnTargetQueue : CoreTelephonyAPIBridge(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a2 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed OpaquePointer) -> (@out CTError);
  *(void *)(a2 + 24) = v5;
  return result;
}

uint64_t CoreTelephonyAPIBridge.createOnTargetQueue.getter()
{
  return OUTLINED_FUNCTION_2_1();
}

uint64_t CoreTelephonyAPIBridge.createOnTargetQueue.setter()
{
  OUTLINED_FUNCTION_2_8();
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v0;
  return result;
}

uint64_t (*CoreTelephonyAPIBridge.createOnTargetQueue.modify())()
{
  return destructiveProjectEnumData for InputOrigin;
}

uint64_t key path getter for CoreTelephonyAPIBridge.registerBlockForNotification : CoreTelephonyAPIBridge@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = _ss13OpaquePointerVSo11CFStringRefaSo012CFDictionaryD0aSgIegg_So7CTErroraIegyggd_AbDxq_Ri_zRi0_zRi__Ri0__r0_lyAGytIsegnr_AIIegnnnr_TRTA;
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t *@<X1>, uint64_t *@<X2>, uint64_t *@<X8>))v5;

  return swift_retain();
}

uint64_t _ss13OpaquePointerVSo11CFStringRefaSo012CFDictionaryD0aSgIegg_So7CTErroraIegyggd_AbDxq_Ri_zRi0_zRi__Ri0__r0_lyAGytIsegnr_AIIegnnnr_TR@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t (*)(uint64_t a1), uint64_t)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *a2;
  uint64_t v10 = *a3;
  uint64_t v9 = a3[1];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = v9;
  swift_retain();
  uint64_t v12 = a4(v7, v8, partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CFDictionaryRef?) -> (@out ()), v11);
  uint64_t result = swift_release();
  *a5 = v12;
  return result;
}

uint64_t key path setter for CoreTelephonyAPIBridge.registerBlockForNotification : CoreTelephonyAPIBridge(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a2 + 32) = _ss13OpaquePointerVSo11CFStringRefaxq_Ri_zRi0_zRi__Ri0__r0_lySo012CFDictionaryD0aSgytIsegnr_So7CTErroraIegnnnr_AbdGIegg_AIIegyggd_TRTA;
  *(void *)(a2 + 40) = v5;
  return result;
}

uint64_t _ss13OpaquePointerVSo11CFStringRefaxq_Ri_zRi0_zRi__Ri0__r0_lySo012CFDictionaryD0aSgytIsegnr_So7CTErroraIegnnnr_AbdGIegg_AIIegyggd_TR(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t *, uint64_t *, void *))
{
  uint64_t v12 = a2;
  uint64_t v13 = a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a4;
  v11[0] = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed CFDictionaryRef?) -> ();
  v11[1] = v8;
  swift_retain();
  a5(&v10, &v13, &v12, v11);
  swift_release();
  return v10;
}

uint64_t CoreTelephonyAPIBridge.registerBlockForNotification.getter()
{
  return OUTLINED_FUNCTION_2_1();
}

uint64_t CoreTelephonyAPIBridge.registerBlockForNotification.setter()
{
  OUTLINED_FUNCTION_2_8();
  uint64_t result = swift_release();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v0;
  return result;
}

uint64_t (*CoreTelephonyAPIBridge.registerBlockForNotification.modify())()
{
  return destructiveProjectEnumData for InputOrigin;
}

uint64_t key path getter for CoreTelephonyAPIBridge.unregisterForAllNotifications : CoreTelephonyAPIBridge@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned CTError);
  a2[1] = v5;

  return swift_retain();
}

uint64_t key path setter for CoreTelephonyAPIBridge.unregisterForAllNotifications : CoreTelephonyAPIBridge(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a2 + 48) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed OpaquePointer) -> (@out CTError);
  *(void *)(a2 + 56) = v5;
  return result;
}

uint64_t CoreTelephonyAPIBridge.unregisterForAllNotifications.getter()
{
  return OUTLINED_FUNCTION_2_1();
}

uint64_t CoreTelephonyAPIBridge.unregisterForAllNotifications.setter()
{
  OUTLINED_FUNCTION_2_8();
  uint64_t result = swift_release();
  *(void *)(v1 + 48) = v2;
  *(void *)(v1 + 56) = v0;
  return result;
}

uint64_t (*CoreTelephonyAPIBridge.unregisterForAllNotifications.modify())()
{
  return destructiveProjectEnumData for InputOrigin;
}

const char *one-time initialization function for clientIdentifier()
{
  uint64_t result = closure #1 in variable initialization expression of static CoreTelephonyAPIBridge.clientIdentifier();
  static CoreTelephonyAPIBridge.clientIdentifier = (uint64_t)result;
  return result;
}

const char *closure #1 in variable initialization expression of static CoreTelephonyAPIBridge.clientIdentifier()
{
  uint64_t result = getprogname();
  if (result)
  {
    uint64_t v4 = String.init(cString:)();
    uint64_t v5 = v1;
    v2._uint64_t countAndFlagsBits = 0x614D20544152692DLL;
    v2._object = (void *)0xED0000726567616ELL;
    String.append(_:)(v2);
    uint64_t v3 = MEMORY[0x1CB7919D0](v4, v5);
    swift_bridgeObjectRelease();
    return (const char *)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *CoreTelephonyAPIBridge.clientIdentifier.unsafeMutableAddressor()
{
  if (one-time initialization token for clientIdentifier != -1) {
    swift_once();
  }
  return &static CoreTelephonyAPIBridge.clientIdentifier;
}

id static CoreTelephonyAPIBridge.clientIdentifier.getter()
{
  if (one-time initialization token for clientIdentifier != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static CoreTelephonyAPIBridge.clientIdentifier;

  return v0;
}

void CoreTelephonyAPIBridge.init()(uint64_t (**a1)()@<X8>)
{
  *a1 = closure #1 in CoreTelephonyAPIBridge.init();
  a1[1] = 0;
  a1[2] = (uint64_t (*)())closure #2 in CoreTelephonyAPIBridge.init();
  a1[3] = 0;
  a1[4] = (uint64_t (*)())closure #3 in CoreTelephonyAPIBridge.init();
  a1[5] = 0;
  a1[6] = closure #4 in CoreTelephonyAPIBridge.init();
  a1[7] = 0;
}

uint64_t closure #1 in CoreTelephonyAPIBridge.init()()
{
  if (one-time initialization token for clientIdentifier != -1) {
    swift_once();
  }
  uint64_t result = _CTServerConnectionCreateAndLaunchWithIdentifier();
  if (!result) {
    __break(1u);
  }
  return result;
}

void closure #2 in CoreTelephonyAPIBridge.init()()
{
  if (one-time initialization token for clientIdentifier != -1) {
    swift_once();
  }
  v2[4] = destructiveProjectEnumData for InputOrigin;
  v2[5] = 0;
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 1107296256;
  v2[2] = thunk for @escaping @callee_guaranteed (@guaranteed CFStringRef?, @guaranteed CFDictionaryRef?) -> ();
  v2[3] = &block_descriptor_36;
  uint64_t v0 = _Block_copy(v2);
  uint64_t v1 = _CTServerConnectionCreateOnTargetQueue();
  _Block_release(v0);
  if (!v1) {
    __break(1u);
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed CFStringRef?, @guaranteed CFDictionaryRef?) -> ()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t closure #3 in CoreTelephonyAPIBridge.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[4] = a3;
  v7[5] = a4;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed CFDictionaryRef?) -> ();
  uint64_t v7[3] = &block_descriptor;
  uint64_t v4 = _Block_copy(v7);
  swift_retain();
  swift_release();
  uint64_t v5 = _CTServerConnectionRegisterBlockForNotification();
  _Block_release(v4);
  return v5;
}

void thunk for @escaping @callee_guaranteed (@guaranteed CFDictionaryRef?) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t closure #4 in CoreTelephonyAPIBridge.init()()
{
  return MEMORY[0x1F40DF230]();
}

uint64_t destroy for CoreTelephonyAPIBridge()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for CoreTelephonyAPIBridge(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for CoreTelephonyAPIBridge(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for CoreTelephonyAPIBridge(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreTelephonyAPIBridge(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreTelephonyAPIBridge(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreTelephonyAPIBridge()
{
  return &type metadata for CoreTelephonyAPIBridge;
}

uint64_t sub_1C9E689B4()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed OpaquePointer) -> (@out CTError)()
{
  OUTLINED_FUNCTION_0_9();
  v0();
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned CTError)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t _ss13OpaquePointerVSo11CFStringRefaxq_Ri_zRi0_zRi__Ri0__r0_lySo012CFDictionaryD0aSgytIsegnr_So7CTErroraIegnnnr_AbdGIegg_AIIegyggd_TRTA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ss13OpaquePointerVSo11CFStringRefaxq_Ri_zRi0_zRi__Ri0__r0_lySo012CFDictionaryD0aSgytIsegnr_So7CTErroraIegnnnr_AbdGIegg_AIIegyggd_TR(a1, a2, a3, a4, *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *, void *))(v4 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed CFDictionaryRef?) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t _ss13OpaquePointerVSo11CFStringRefaSo012CFDictionaryD0aSgIegg_So7CTErroraIegyggd_AbDxq_Ri_zRi0_zRi__Ri0__r0_lyAGytIsegnr_AIIegnnnr_TRTA@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  return _ss13OpaquePointerVSo11CFStringRefaSo012CFDictionaryD0aSgIegg_So7CTErroraIegyggd_AbDxq_Ri_zRi0_zRi__Ri0__r0_lyAGytIsegnr_AIIegnnnr_TR(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t))(v4 + 16), a4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CFDictionaryRef?) -> (@out ())(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed OS_dispatch_queue) -> (@unowned OpaquePointer)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out OpaquePointer)()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned OpaquePointer)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

void TransformationCapability.type.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t TransformationCapability.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  *(void *)a1 = *(void *)(v1 + 8);
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

BOOL static TransformationCapability.TransformationCapabilityType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void TransformationCapability.TransformationCapabilityType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static TransformationCapability.TransformationCapabilityType.CodingKeys.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void TransformationCapability.TransformationCapabilityType.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
}

uint64_t TransformationCapability.TransformationCapabilityType.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64656D616ELL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6465707974 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t TransformationCapability.TransformationCapabilityType.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t TransformationCapability.TransformationCapabilityType.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t TransformationCapability.TransformationCapabilityType.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x6465707974;
  }
  else {
    return 0x64656D616ELL;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TransformationCapability.TransformationCapabilityType.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static TransformationCapability.TransformationCapabilityType.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TransformationCapability.TransformationCapabilityType.CodingKeys()
{
  return TransformationCapability.TransformationCapabilityType.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance TransformationCapability.TransformationCapabilityType.CodingKeys(uint64_t a1)
{
  TransformationCapability.TransformationCapabilityType.CodingKeys.hash(into:)(a1, *v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TransformationCapability.TransformationCapabilityType.CodingKeys()
{
  return TransformationCapability.TransformationCapabilityType.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TransformationCapability.TransformationCapabilityType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = TransformationCapability.TransformationCapabilityType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance TransformationCapability.TransformationCapabilityType.CodingKeys()
{
  return TransformationCapability.TransformationCapabilityType.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance TransformationCapability.TransformationCapabilityType.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = TransformationCapability.TransformationCapabilityType.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TransformationCapability.TransformationCapabilityType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TransformationCapability.TransformationCapabilityType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t TransformationCapability.TransformationCapabilityType.NamedCodingKeys.init(stringValue:)()
{
  return 1;
}

uint64_t TransformationCapability.TransformationCapabilityType.NamedCodingKeys.stringValue.getter()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = TransformationCapability.TransformationCapabilityType.NamedCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys()
{
  return TransformationCapability.TransformationCapabilityType.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized == infix<A>(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

void TransformationCapability.TransformationCapabilityType.encode(to:)()
{
  OUTLINED_FUNCTION_6_5();
  unint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TransformationCapability.TransformationCapabilityType.TypedCodingKeys>);
  OUTLINED_FUNCTION_1_5();
  MEMORY[0x1F4188790](v3, v4);
  OUTLINED_FUNCTION_12_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TransformationCapability.TransformationCapabilityType.NamedCodingKeys>);
  OUTLINED_FUNCTION_1_5();
  MEMORY[0x1F4188790](v5, v6);
  OUTLINED_FUNCTION_12_1();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TransformationCapability.TransformationCapabilityType.CodingKeys>);
  OUTLINED_FUNCTION_1_5();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10, v11);
  OUTLINED_FUNCTION_12_1();
  uint64_t v14 = v13 - v12;
  char v15 = *v0;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  int v16 = (void (**)(uint64_t, uint64_t))(v9 + 8);
  if (v15) {
    lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys();
  }
  else {
    lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys();
  }
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  OUTLINED_FUNCTION_5_4();
  v18(v17);
  (*v16)(v14, v7);
  OUTLINED_FUNCTION_9_3();
}

unint64_t lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys);
  }
  return result;
}

Swift::Int TransformationCapability.TransformationCapabilityType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void TransformationCapability.TransformationCapabilityType.init(from:)()
{
  OUTLINED_FUNCTION_6_5();
  uint64_t v3 = v2;
  uint64_t v25 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TransformationCapability.TransformationCapabilityType.TypedCodingKeys>);
  OUTLINED_FUNCTION_1_5();
  MEMORY[0x1F4188790](v5, v6);
  OUTLINED_FUNCTION_12_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TransformationCapability.TransformationCapabilityType.NamedCodingKeys>);
  OUTLINED_FUNCTION_1_5();
  MEMORY[0x1F4188790](v7, v8);
  OUTLINED_FUNCTION_12_1();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TransformationCapability.TransformationCapabilityType.CodingKeys>);
  OUTLINED_FUNCTION_1_5();
  uint64_t v26 = v10;
  MEMORY[0x1F4188790](v11, v12);
  OUTLINED_FUNCTION_8_4();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0) {
    goto LABEL_6;
  }
  uint64_t v27 = (uint64_t)v3;
  uint64_t v13 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v14 = *(void *)(v13 + 16);
  if (!v14
    || (char v15 = *(unsigned char *)(v13 + 32),
        specialized ArraySlice.subscript.getter(1, v14, v13, v13 + 32, 0, (2 * v14) | 1),
        uint64_t v17 = v16,
        unint64_t v19 = v18,
        swift_bridgeObjectRelease(),
        v17 != v19 >> 1))
  {
    uint64_t v20 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    void *v22 = &type metadata for TransformationCapability.TransformationCapabilityType;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v22, *MEMORY[0x1E4FBBA70], v20);
    swift_willThrow();
    swift_unknownObjectRelease();
    OUTLINED_FUNCTION_5_4();
    v23();
    uint64_t v3 = (void *)v27;
LABEL_6:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
    goto LABEL_7;
  }
  lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  OUTLINED_FUNCTION_5_4();
  v24();
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v1, v9);
  *uint64_t v25 = v15;
  __swift_destroy_boxed_opaque_existential_1(v27);
LABEL_7:
  OUTLINED_FUNCTION_9_3();
}

void protocol witness for Decodable.init(from:) in conformance TransformationCapability.TransformationCapabilityType()
{
}

void protocol witness for Encodable.encode(to:) in conformance TransformationCapability.TransformationCapabilityType()
{
}

uint64_t TransformationCapability.hash(into:)()
{
  Swift::UInt v1 = *((void *)v0 + 3);
  Hasher._combine(_:)(*v0);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

uint64_t static TransformationCapability.== infix(_:_:)(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  uint64_t v8 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v9 = a2[6];
  BOOL v11 = a1[1] == a2[1] && a1[2] == a2[2];
  if ((uint64_t v12 = a2[7], v11) || (_stringCompareWithSmolCheck(_:_:expecting:)())
    && v2 == v8
    && (v3 == v7 ? (BOOL v13 = v4 == v10) : (BOOL v13 = 0),
        (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
     && (v5 == v9 ? (BOOL v14 = v6 == v12) : (BOOL v14 = 0), v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t TransformationCapability.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7470697263736564 && a2 == 0xEA0000000000726FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

Swift::Int TransformationCapability.TransformationCapabilityType.CodingKeys.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t TransformationCapability.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x7470697263736564;
  }
  else {
    return 1701869940;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TransformationCapability.CodingKeys()
{
  return TransformationCapability.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TransformationCapability.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = TransformationCapability.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TransformationCapability.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TransformationCapability.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

void TransformationCapability.encode(to:)()
{
  OUTLINED_FUNCTION_6_5();
  uint64_t v3 = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TransformationCapability.CodingKeys>);
  OUTLINED_FUNCTION_1_5();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7, v8);
  OUTLINED_FUNCTION_8_4();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType();
  OUTLINED_FUNCTION_7_4();
  if (!v0)
  {
    lazy protocol witness table accessor for type TransformationDescriptor and conformance TransformationDescriptor();
    OUTLINED_FUNCTION_7_4();
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  OUTLINED_FUNCTION_9_3();
}

Swift::Int TransformationCapability.hashValue.getter()
{
  OUTLINED_FUNCTION_4_6();
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v0);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

void TransformationCapability.init(from:)()
{
  OUTLINED_FUNCTION_6_5();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TransformationCapability.CodingKeys>);
  OUTLINED_FUNCTION_1_5();
  MEMORY[0x1F4188790](v5, v6);
  OUTLINED_FUNCTION_12_1();
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  lazy protocol witness table accessor for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v0)
  {
    lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType();
    OUTLINED_FUNCTION_3_6();
    lazy protocol witness table accessor for type TransformationDescriptor and conformance TransformationDescriptor();
    OUTLINED_FUNCTION_3_6();
    uint64_t v7 = OUTLINED_FUNCTION_10_3();
    v8(v7);
    *(unsigned char *)uint64_t v4 = v9;
    *(void *)(v4 + 8) = v9;
    *(void *)(v4 + 16) = v10;
    *(_OWORD *)(v4 + 24) = v11;
    *(_OWORD *)(v4 + 40) = v12;
    *(void *)(v4 + 56) = v13;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  OUTLINED_FUNCTION_9_3();
}

void __swiftcall TransformationCapability.init(type:descriptor:)(SiriUtilities::TransformationCapability *__return_ptr retstr, SiriUtilities::TransformationCapability::TransformationCapabilityType type, SiriUtilities::TransformationDescriptor *descriptor)
{
  uint64_t countAndFlagsBits = descriptor->id.name._countAndFlagsBits;
  object = descriptor->id.name._object;
  uint64_t v5 = descriptor->outputType.encoding._object;
  retstr->type = *(unsigned char *)type;
  retstr->descriptor.id.name._uint64_t countAndFlagsBits = countAndFlagsBits;
  retstr->descriptor.id.name._object = object;
  long long v6 = *(_OWORD *)&descriptor->inputType.encoding._object;
  *(_OWORD *)&retstr->descriptor.id.version = *(_OWORD *)&descriptor->id.version;
  *(_OWORD *)&retstr->descriptor.inputType.encoding._object = v6;
  retstr->descriptor.outputType.encoding._object = v5;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TransformationCapability()
{
  OUTLINED_FUNCTION_4_6();
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v0);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance TransformationCapability()
{
}

void protocol witness for Encodable.encode(to:) in conformance TransformationCapability()
{
}

uint64_t specialized TransformationPluginPackage.exposedCapabilities()()
{
  specialized TransformationPluginPackage.loadTransformationPlugin()();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(ObjectType, v1);
  if (one-time initialization token for kToTyped != -1) {
    swift_once();
  }
  uint64_t v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities24TransformationDescriptorVG_AF0F10CapabilityVs5NeverOTg504_s13d11Utilities24fg7VAA0C10h11VIgnr_AcEs5I11OIegnrzr_TRAhKIgnr_Tf1cn_n(v3, (void (*)(uint64_t *__return_ptr, void *))kToTyped);
  swift_bridgeObjectRelease();
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 32))(ObjectType, v1);
  if (one-time initialization token for kToNamed != -1) {
    swift_once();
  }
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities24TransformationDescriptorVG_AF0F10CapabilityVs5NeverOTg504_s13d11Utilities24fg7VAA0C10h11VIgnr_AcEs5I11OIegnrzr_TRAhKIgnr_Tf1cn_n(v5, (void (*)(uint64_t *__return_ptr, void *))kToNamed);
  swift_bridgeObjectRelease();
  specialized Array.append<A>(contentsOf:)();
  swift_unknownObjectRelease();
  return v4;
}

uint64_t TransformationPluginPackage.exposedCapabilities()(uint64_t a1, uint64_t a2)
{
  TransformationPluginPackage.loadTransformationPlugin()(a1, a2);
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(ObjectType, v3);
  if (one-time initialization token for kToTyped != -1) {
    swift_once();
  }
  uint64_t v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities24TransformationDescriptorVG_AF0F10CapabilityVs5NeverOTg504_s13d11Utilities24fg7VAA0C10h11VIgnr_AcEs5I11OIegnrzr_TRAhKIgnr_Tf1cn_n(v5, (void (*)(uint64_t *__return_ptr, void *))kToTyped);
  swift_bridgeObjectRelease();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(ObjectType, v3);
  if (one-time initialization token for kToNamed != -1) {
    swift_once();
  }
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities24TransformationDescriptorVG_AF0F10CapabilityVs5NeverOTg504_s13d11Utilities24fg7VAA0C10h11VIgnr_AcEs5I11OIegnrzr_TRAhKIgnr_Tf1cn_n(v7, (void (*)(uint64_t *__return_ptr, void *))kToNamed);
  swift_bridgeObjectRelease();
  specialized Array.append<A>(contentsOf:)();
  swift_unknownObjectRelease();
  return v6;
}

void specialized TransformationPluginPackage.loadTransformationPlugin()()
{
  if (one-time initialization token for pluginLoaderLog != -1) {
    swift_once();
  }
  specialized static Logger.withSignpost<A>(name:log:completion:)((uint64_t)"LoadPlugin", 10, 2, (void *)static Logger.pluginLoaderLog, v0);
  if (!v1)
  {
    uint64_t v3 = v2;
    swift_getObjectType();
    if (!dynamic_cast_existential_1_conditional(v3))
    {
      lazy protocol witness table accessor for type PluginBundleError and conformance PluginBundleError();
      swift_allocError();
      *uint64_t v4 = 2;
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
}

uint64_t TransformationPluginPackage.loadTransformationPlugin()(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 40))();
  if (!v2)
  {
    uint64_t v4 = result;
    swift_getObjectType();
    uint64_t result = dynamic_cast_existential_1_conditional(v4);
    if (!result)
    {
      lazy protocol witness table accessor for type PluginBundleError and conformance PluginBundleError();
      swift_allocError();
      unsigned char *v5 = 2;
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities24TransformationDescriptorVG_AF0F10CapabilityVs5NeverOTg504_s13d11Utilities24fg7VAA0C10h11VIgnr_AcEs5I11OIegnrzr_TRAhKIgnr_Tf1cn_n(uint64_t a1, void (*a2)(uint64_t *__return_ptr, void *))
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v38 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v38;
    uint64_t v5 = (void *)(a1 + 80);
    do
    {
      uint64_t v6 = *(v5 - 5);
      uint64_t v8 = *(v5 - 2);
      uint64_t v7 = *(v5 - 1);
      uint64_t v9 = *v5;
      v26[0] = *(v5 - 6);
      v26[1] = v6;
      long long v27 = *((_OWORD *)v5 - 2);
      uint64_t v28 = v8;
      uint64_t v29 = v7;
      uint64_t v30 = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a2(&v31, v26);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v10 = v31;
      uint64_t v11 = v32;
      uint64_t v12 = v33;
      long long v13 = v34;
      uint64_t v15 = v35;
      uint64_t v14 = v36;
      uint64_t v16 = v37;
      uint64_t v38 = v3;
      unint64_t v18 = *(void *)(v3 + 16);
      unint64_t v17 = *(void *)(v3 + 24);
      if (v18 >= v17 >> 1)
      {
        uint64_t v20 = v37;
        long long v24 = v34;
        uint64_t v22 = v36;
        uint64_t v23 = v32;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1);
        uint64_t v14 = v22;
        uint64_t v11 = v23;
        long long v13 = v24;
        uint64_t v16 = v20;
        uint64_t v3 = v38;
      }
      *(void *)(v3 + 16) = v18 + 1;
      uint64_t v19 = v3 + (v18 << 6);
      *(unsigned char *)(v19 + 32) = v10;
      *(void *)(v19 + 40) = v11;
      *(void *)(v19 + 48) = v12;
      *(_OWORD *)(v19 + 56) = v13;
      *(void *)(v19 + 72) = v15;
      *(void *)(v19 + 80) = v14;
      v5 += 7;
      *(void *)(v19 + 88) = v16;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t specialized TransformationPluginPackage.get(capability:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void (*v7)(void *__return_ptr, long long *, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  uint64_t *boxed_opaque_existential_0;
  uint64_t result;
  long long v12;
  uint64_t v13;
  void v14[3];
  uint64_t v15;
  long long v16;
  uint64_t v17;

  specialized TransformationPluginPackage.loadTransformationPlugin()();
  uint64_t v5 = v4;
  uint64_t v16 = *(_OWORD *)(a1 + 8);
  unint64_t v17 = *(void *)(a1 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = *(_OWORD *)(a1 + 8);
  long long v13 = *(void *)(a1 + 24);
  uint64_t v7 = *(void (**)(void *__return_ptr, long long *, uint64_t, uint64_t))(v5 + 40);
  outlined retain of TypeIdentifier((uint64_t)&v16);
  v7(v14, &v12, ObjectType, v5);
  outlined release of TypeIdentifier((uint64_t)&v16);
  uint64_t v8 = v15;
  if (v15)
  {
    uint64_t v9 = __swift_project_boxed_opaque_existential_1(v14, v15);
    *(void *)(a2 + 24) = v8;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a2);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(boxed_opaque_existential_0, v9, v8);
    swift_unknownObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t result = outlined destroy of Transforming?((uint64_t)v14, &demangling cache variable for type metadata for Transforming?);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t TransformationPluginPackage.get(capability:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void (*v11)(void *__return_ptr, void *, uint64_t, uint64_t);
  uint64_t v12;
  void *v13;
  uint64_t *boxed_opaque_existential_0;
  uint64_t result;
  void v16[3];
  void v17[3];
  uint64_t v18;

  uint64_t v6 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v7 = a1[3];
  TransformationPluginPackage.loadTransformationPlugin()(a2, a3);
  uint64_t v9 = v8;
  uint64_t ObjectType = swift_getObjectType();
  v16[0] = v6;
  v16[1] = v5;
  v16[2] = v7;
  uint64_t v11 = *(void (**)(void *__return_ptr, void *, uint64_t, uint64_t))(v9 + 40);
  swift_bridgeObjectRetain();
  v11(v17, v16, ObjectType, v9);
  swift_bridgeObjectRelease();
  uint64_t v12 = v18;
  if (v18)
  {
    long long v13 = __swift_project_boxed_opaque_existential_1(v17, v18);
    *(void *)(a4 + 24) = v12;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a4);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(boxed_opaque_existential_0, v13, v12);
    swift_unknownObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t result = outlined destroy of Transforming?((uint64_t)v17, &demangling cache variable for type metadata for Transforming?);
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t NSBundle.getTransformations(key:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = (void *)MEMORY[0x1CB7919D0]();
  id v6 = objc_msgSend(v2, sel_objectForInfoDictionaryKey_, v5);

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v38, 0, 32);
  }
  outlined init with take of Any?((uint64_t)v38, (uint64_t)&v36);
  if (!v36.value.inputType.encoding._countAndFlagsBits)
  {
    outlined destroy of Transforming?((uint64_t)&v36, &demangling cache variable for type metadata for Any?);
    return MEMORY[0x1E4FBC860];
  }
  unint64_t v33 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : String]]);
  if ((swift_dynamicCast() & 1) == 0) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v34 = *(void *)(v37 + 16);
  if (!v34)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v7 = 0;
  uint64_t v8 = MEMORY[0x1E4FBC860];
  uint64_t v31 = v3;
  do
  {
    uint64_t v9 = swift_bridgeObjectRetain();
    TransformationDescriptor.init(from:)(&v36, (Swift::OpaquePointer)v9);
    object = v36.value.id.name._object;
    if (v36.value.id.name._object)
    {
      uint64_t countAndFlagsBits = v36.value.id.name._countAndFlagsBits;
      long long v35 = *(_OWORD *)&v36.value.id.version;
      uint64_t v13 = v36.value.outputType.encoding._countAndFlagsBits;
      uint64_t v12 = v36.value.outputType.encoding._object;
      uint64_t v14 = v36.value.inputType.encoding._object;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v8 = v28;
      }
      unint64_t v15 = *(void *)(v8 + 16);
      if (v15 >= *(void *)(v8 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v8 = v29;
      }
      *(void *)(v8 + 16) = v15 + 1;
      uint64_t v16 = v8 + 56 * v15;
      *(void *)(v16 + 32) = countAndFlagsBits;
      *(void *)(v16 + 40) = object;
      *(_OWORD *)(v16 + 48) = v35;
      *(void *)(v16 + 64) = v14;
      *(void *)(v16 + 72) = v13;
      *(void *)(v16 + 80) = v12;
    }
    else
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Logger.logger);
      swift_bridgeObjectRetain_n();
      id v18 = v3;
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = swift_slowAlloc();
        uint64_t v22 = swift_slowAlloc();
        v36.value.id.name._uint64_t countAndFlagsBits = v22;
        *(_DWORD *)uint64_t v21 = 136315650;
        swift_bridgeObjectRetain();
        *(void *)(v21 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v33, &v36.value.id.name._countAndFlagsBits);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v21 + 12) = 2048;
        *(void *)(v21 + 14) = v7;
        *(_WORD *)(v21 + 22) = 2080;
        id v23 = objc_msgSend(v18, sel_bundlePath);
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v26 = v25;

        *(void *)(v21 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v36.value.id.name._countAndFlagsBits);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C9E4C000, v19, v20, "Could not load %s[%ld] from %s", (uint8_t *)v21, 0x20u);
        swift_arrayDestroy();
        uint64_t v27 = v22;
        uint64_t v3 = v31;
        MEMORY[0x1CB792FA0](v27, -1, -1);
        MEMORY[0x1CB792FA0](v21, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    ++v7;
  }
  while (v34 != v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t NSBundle.advertisedCapabilities()()
{
  uint64_t v0 = OUTLINED_FUNCTION_11_3((uint64_t)"SiriUtilitiesTypedTransformations");
  if (one-time initialization token for kToTyped != -1) {
    swift_once();
  }
  uint64_t v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities24TransformationDescriptorVG_AF0F10CapabilityVs5NeverOTg504_s13d11Utilities24fg7VAA0C10h11VIgnr_AcEs5I11OIegnrzr_TRAhKIgnr_Tf1cn_n(v0, (void (*)(uint64_t *__return_ptr, void *))kToTyped);
  swift_bridgeObjectRelease();
  uint64_t v6 = v1;
  if (!*(void *)(v1 + 16))
  {
    uint64_t v2 = NSBundle.getTransformations(key:)(0xD000000000000025, 0x80000001C9EB85D0);
    uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities24TransformationDescriptorVG_AF0F10CapabilityVs5NeverOTg504_s13d11Utilities24fg7VAA0C10h11VIgnr_AcEs5I11OIegnrzr_TRAhKIgnr_Tf1cn_n(v2, (void (*)(uint64_t *__return_ptr, void *))kToTyped);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = v3;
  }
  uint64_t v4 = OUTLINED_FUNCTION_11_3((uint64_t)"SiriUtilitiesNamedTransformations");
  if (one-time initialization token for kToNamed != -1) {
    swift_once();
  }
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities24TransformationDescriptorVG_AF0F10CapabilityVs5NeverOTg504_s13d11Utilities24fg7VAA0C10h11VIgnr_AcEs5I11OIegnrzr_TRAhKIgnr_Tf1cn_n(v4, (void (*)(uint64_t *__return_ptr, void *))kToNamed);
  swift_bridgeObjectRelease();
  specialized Array.append<A>(contentsOf:)();
  return v6;
}

uint64_t protocol witness for PluginCapabilityExposing.advertisedCapabilities() in conformance NSBundle()
{
  return NSBundle.advertisedCapabilities()();
}

uint64_t protocol witness for PluginCapabilityExposing.exposedCapabilities() in conformance NSBundle()
{
  return specialized TransformationPluginPackage.exposedCapabilities()();
}

uint64_t protocol witness for PluginCapabilityExposing.get(capability:) in conformance NSBundle@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  long long v3 = a1[3];
  void v5[2] = a1[2];
  v5[3] = v3;
  return specialized TransformationPluginPackage.get(capability:)((uint64_t)v5, a2);
}

uint64_t closure #1 in toCapability(type:)@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v6 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v7 = a1[6];
  *(unsigned char *)a3 = a2 & 1;
  *(void *)(a3 + 8) = v4;
  *(void *)(a3 + 16) = v3;
  *(_OWORD *)(a3 + 24) = *((_OWORD *)a1 + 1);
  *(void *)(a3 + 40) = v6;
  *(void *)(a3 + 48) = v5;
  *(void *)(a3 + 56) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for kToTyped()
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 1;
  kToTyped = (uint64_t)closure #1 in toCapability(type:)partial apply;
  unk_1EB9BF610 = result;
  return result;
}

uint64_t one-time initialization function for kToNamed()
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 0;
  kToNamed = (uint64_t)partial apply for closure #1 in toCapability(type:);
  unk_1EB9BF600 = result;
  return result;
}

uint64_t specialized ArraySlice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2) {
    goto LABEL_10;
  }
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    return swift_unknownObjectRetain();
  }
LABEL_12:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformationDescriptor and conformance TransformationDescriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformationDescriptor and conformance TransformationDescriptor;
  if (!lazy protocol witness table cache variable for type TransformationDescriptor and conformance TransformationDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationDescriptor and conformance TransformationDescriptor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationDescriptor and conformance TransformationDescriptor;
  if (!lazy protocol witness table cache variable for type TransformationDescriptor and conformance TransformationDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationDescriptor and conformance TransformationDescriptor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationDescriptor and conformance TransformationDescriptor;
  if (!lazy protocol witness table cache variable for type TransformationDescriptor and conformance TransformationDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationDescriptor and conformance TransformationDescriptor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformationCapability and conformance TransformationCapability()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability;
  if (!lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability;
  if (!lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability;
  if (!lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability;
  if (!lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for NSBundle(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type NSBundle and conformance NSBundle();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type NSBundle and conformance NSBundle()
{
  unint64_t result = lazy protocol witness table cache variable for type NSBundle and conformance NSBundle;
  if (!lazy protocol witness table cache variable for type NSBundle and conformance NSBundle)
  {
    type metadata accessor for NSBundle();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSBundle and conformance NSBundle);
  }
  return result;
}

uint64_t destroy for TransformationCapability()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TransformationCapability(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TransformationCapability(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TransformationCapability(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TransformationCapability(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TransformationCapability(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TransformationCapability()
{
  return &type metadata for TransformationCapability;
}

ValueMetadata *type metadata accessor for TransformationCapability.TransformationCapabilityType()
{
  return &type metadata for TransformationCapability.TransformationCapabilityType;
}

void *type metadata accessor for TransformationCapability.CodingKeys()
{
  return &unk_1F2428E90;
}

uint64_t getEnumTagSinglePayload for TransformationCapability.TransformationCapabilityType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for TransformationCapability.TransformationCapabilityType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9E6B808);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for TransformationCapability.TransformationCapabilityType.CodingKeys(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

void *type metadata accessor for TransformationCapability.TransformationCapabilityType.CodingKeys()
{
  return &unk_1F2428F20;
}

void *type metadata accessor for TransformationCapability.TransformationCapabilityType.NamedCodingKeys()
{
  return &unk_1F2428F40;
}

void *type metadata accessor for TransformationCapability.TransformationCapabilityType.TypedCodingKeys()
{
  return &unk_1F2428F60;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Transforming?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_5_4();
  v3();
  return a1;
}

uint64_t partial apply for closure #1 in toCapability(type:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in toCapability(type:)(a1, *(unsigned char *)(v2 + 16), a2);
}

uint64_t OUTLINED_FUNCTION_2_9()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t OUTLINED_FUNCTION_3_6()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_7_4()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_10_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_3@<X0>(uint64_t a1@<X8>)
{
  return NSBundle.getTransformations(key:)(0xD000000000000021, (a1 - 32) | 0x8000000000000000);
}

Swift::Void __swiftcall TransformationRegistry.registerCommonTransformers()()
{
  if (one-time initialization token for _commonTransformers != -1) {
    swift_once();
  }
  uint64_t v1 = *((void *)static TransformationRegistry._commonTransformers + 2);
  if (v1)
  {
    uint64_t v2 = (char *)static TransformationRegistry._commonTransformers + 32;
    int v3 = *(void (**)(char *))(*(void *)v0 + 184);
    swift_bridgeObjectRetain();
    do
    {
      v3(v2);
      v2 += 40;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
}

void *one-time initialization function for _commonTransformers()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C9EB4DB0;
  *(void *)(v0 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int, Int32>);
  *(void *)(v0 + 64) = &protocol witness table for Transformer<A, B>;
  uint64_t v1 = (void *)swift_allocObject();
  *(void *)(v0 + 32) = v1;
  v1[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v1[3] = 0;
  v1[4] = specialized closure #1 in Transformer.init(transform:);
  v1[5] = 0;
  *(void *)(v0 + 96) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int, Int64>);
  *(void *)(v0 + 104) = &protocol witness table for Transformer<A, B>;
  uint64_t v2 = (void *)swift_allocObject();
  *(void *)(v0 + 72) = v2;
  v2[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v2[3] = 0;
  v2[4] = specialized closure #1 in Transformer.init(transform:);
  v2[5] = 0;
  *(void *)(v0 + 136) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int, UInt32>);
  *(void *)(v0 + 144) = &protocol witness table for Transformer<A, B>;
  int v3 = (void *)swift_allocObject();
  *(void *)(v0 + 112) = v3;
  void v3[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v3[3] = 0;
  v3[4] = specialized closure #1 in Transformer.init(transform:);
  v3[5] = 0;
  *(void *)(v0 + 176) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int, UInt64>);
  *(void *)(v0 + 184) = &protocol witness table for Transformer<A, B>;
  uint64_t v4 = (void *)swift_allocObject();
  *(void *)(v0 + 152) = v4;
  v4[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v4[3] = 0;
  v4[4] = specialized closure #1 in Transformer.init(transform:);
  v4[5] = 0;
  *(void *)(v0 + 216) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int, Double>);
  *(void *)(v0 + 224) = &protocol witness table for Transformer<A, B>;
  uint64_t v5 = (void *)swift_allocObject();
  *(void *)(v0 + 192) = v5;
  void v5[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v5[3] = 0;
  _OWORD v5[4] = specialized closure #1 in Transformer.init(transform:);
  v5[5] = 0;
  *(void *)(v0 + 256) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int, Float>);
  *(void *)(v0 + 264) = &protocol witness table for Transformer<A, B>;
  unsigned int v6 = (void *)swift_allocObject();
  *(void *)(v0 + 232) = v6;
  v6[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v6[3] = 0;
  v6[4] = specialized closure #1 in Transformer.init(transform:);
  v6[5] = 0;
  *(void *)(v0 + 296) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int, String>);
  *(void *)(v0 + 304) = &protocol witness table for Transformer<A, B>;
  BOOL v7 = (void *)swift_allocObject();
  *(void *)(v0 + 272) = v7;
  v7[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  uint64_t v7[3] = 0;
  v7[4] = specialized closure #1 in Transformer.init(transform:);
  v7[5] = 0;
  *(void *)(v0 + 336) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int, Bool>);
  *(void *)(v0 + 344) = &protocol witness table for Transformer<A, B>;
  uint64_t v8 = (void *)swift_allocObject();
  *(void *)(v0 + 312) = v8;
  v8[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v8[3] = 0;
  v8[4] = specialized closure #1 in Transformer.init(transform:);
  v8[5] = 0;
  *(void *)(v0 + 376) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int32, Int>);
  *(void *)(v0 + 384) = &protocol witness table for Transformer<A, B>;
  uint64_t v9 = (void *)swift_allocObject();
  *(void *)(v0 + 352) = v9;
  v9[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v9[3] = 0;
  void v9[4] = specialized closure #1 in Transformer.init(transform:);
  v9[5] = 0;
  *(void *)(v0 + 416) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int32, Int64>);
  *(void *)(v0 + 424) = &protocol witness table for Transformer<A, B>;
  char v10 = (void *)swift_allocObject();
  *(void *)(v0 + 392) = v10;
  v10[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v10[3] = 0;
  v10[4] = specialized closure #1 in Transformer.init(transform:);
  v10[5] = 0;
  *(void *)(v0 + 456) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int32, UInt32>);
  *(void *)(v0 + 464) = &protocol witness table for Transformer<A, B>;
  uint64_t v11 = (void *)swift_allocObject();
  *(void *)(v0 + 432) = v11;
  void v11[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v11[3] = 0;
  v11[4] = specialized closure #1 in Transformer.init(transform:);
  void v11[5] = 0;
  *(void *)(v0 + 496) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int32, UInt64>);
  *(void *)(v0 + 504) = &protocol witness table for Transformer<A, B>;
  uint64_t v12 = (void *)swift_allocObject();
  *(void *)(v0 + 472) = v12;
  v12[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  void v12[3] = 0;
  v12[4] = specialized closure #1 in Transformer.init(transform:);
  v12[5] = 0;
  *(void *)(v0 + 536) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int32, Double>);
  *(void *)(v0 + 544) = &protocol witness table for Transformer<A, B>;
  uint64_t v13 = (void *)swift_allocObject();
  *(void *)(v0 + 512) = v13;
  v13[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v13[3] = 0;
  v13[4] = specialized closure #1 in Transformer.init(transform:);
  void v13[5] = 0;
  *(void *)(v0 + 576) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int32, Float>);
  *(void *)(v0 + 584) = &protocol witness table for Transformer<A, B>;
  uint64_t v14 = (void *)swift_allocObject();
  *(void *)(v0 + 552) = v14;
  v14[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v14[3] = 0;
  v14[4] = specialized closure #1 in Transformer.init(transform:);
  v14[5] = 0;
  *(void *)(v0 + 616) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int32, String>);
  *(void *)(v0 + 624) = &protocol witness table for Transformer<A, B>;
  unint64_t v15 = (void *)swift_allocObject();
  *(void *)(v0 + 592) = v15;
  void v15[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v15[3] = 0;
  v15[4] = specialized closure #1 in Transformer.init(transform:);
  v15[5] = 0;
  *(void *)(v0 + 656) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int64, Int32>);
  *(void *)(v0 + 664) = &protocol witness table for Transformer<A, B>;
  uint64_t v16 = (void *)swift_allocObject();
  *(void *)(v0 + 632) = v16;
  v16[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v16[3] = 0;
  void v16[4] = specialized closure #1 in Transformer.init(transform:);
  v16[5] = 0;
  *(void *)(v0 + 696) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int64, Int>);
  *(void *)(v0 + 704) = &protocol witness table for Transformer<A, B>;
  uint64_t v17 = (void *)swift_allocObject();
  *(void *)(v0 + 672) = v17;
  v17[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v17[3] = 0;
  v17[4] = specialized closure #1 in Transformer.init(transform:);
  v17[5] = 0;
  *(void *)(v0 + 736) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int64, UInt32>);
  *(void *)(v0 + 744) = &protocol witness table for Transformer<A, B>;
  id v18 = (void *)swift_allocObject();
  *(void *)(v0 + 712) = v18;
  v18[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v18[3] = 0;
  void v18[4] = specialized closure #1 in Transformer.init(transform:);
  v18[5] = 0;
  *(void *)(v0 + 776) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int64, UInt64>);
  *(void *)(v0 + 784) = &protocol witness table for Transformer<A, B>;
  uint64_t v19 = (void *)swift_allocObject();
  *(void *)(v0 + 752) = v19;
  v19[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v19[3] = 0;
  void v19[4] = specialized closure #1 in Transformer.init(transform:);
  v19[5] = 0;
  *(void *)(v0 + 816) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int64, Double>);
  *(void *)(v0 + 824) = &protocol witness table for Transformer<A, B>;
  os_log_type_t v20 = (void *)swift_allocObject();
  *(void *)(v0 + 792) = v20;
  v20[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v20[3] = 0;
  v20[4] = specialized closure #1 in Transformer.init(transform:);
  v20[5] = 0;
  *(void *)(v0 + 856) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int64, Float>);
  *(void *)(v0 + 864) = &protocol witness table for Transformer<A, B>;
  uint64_t v21 = (void *)swift_allocObject();
  *(void *)(v0 + 832) = v21;
  v21[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v21[3] = 0;
  v21[4] = specialized closure #1 in Transformer.init(transform:);
  v21[5] = 0;
  *(void *)(v0 + 896) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int64, String>);
  *(void *)(v0 + 904) = &protocol witness table for Transformer<A, B>;
  uint64_t v22 = (void *)swift_allocObject();
  *(void *)(v0 + 872) = v22;
  v22[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v22[3] = 0;
  uint64_t v22[4] = specialized closure #1 in Transformer.init(transform:);
  v22[5] = 0;
  *(void *)(v0 + 936) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt32, Int32>);
  *(void *)(v0 + 944) = &protocol witness table for Transformer<A, B>;
  id v23 = (void *)swift_allocObject();
  *(void *)(v0 + 912) = v23;
  v23[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v23[3] = 0;
  v23[4] = specialized closure #1 in Transformer.init(transform:);
  v23[5] = 0;
  *(void *)(v0 + 976) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt32, Int64>);
  *(void *)(v0 + 984) = &protocol witness table for Transformer<A, B>;
  uint64_t v24 = (void *)swift_allocObject();
  *(void *)(v0 + 952) = v24;
  uint64_t v24[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v24[3] = 0;
  v24[4] = specialized closure #1 in Transformer.init(transform:);
  v24[5] = 0;
  *(void *)(v0 + 1016) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt32, Int>);
  *(void *)(v0 + 1024) = &protocol witness table for Transformer<A, B>;
  unint64_t v25 = (void *)swift_allocObject();
  *(void *)(v0 + 992) = v25;
  v25[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v25[3] = 0;
  v25[4] = specialized closure #1 in Transformer.init(transform:);
  v25[5] = 0;
  *(void *)(v0 + 1056) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt32, UInt64>);
  *(void *)(v0 + 1064) = &protocol witness table for Transformer<A, B>;
  unint64_t v26 = (void *)swift_allocObject();
  *(void *)(v0 + 1032) = v26;
  void v26[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v26[3] = 0;
  v26[4] = specialized closure #1 in Transformer.init(transform:);
  v26[5] = 0;
  *(void *)(v0 + 1096) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt32, Double>);
  *(void *)(v0 + 1104) = &protocol witness table for Transformer<A, B>;
  uint64_t v27 = (void *)swift_allocObject();
  *(void *)(v0 + 1072) = v27;
  v27[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v27[3] = 0;
  v27[4] = specialized closure #1 in Transformer.init(transform:);
  v27[5] = 0;
  *(void *)(v0 + 1136) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt32, Float>);
  *(void *)(v0 + 1144) = &protocol witness table for Transformer<A, B>;
  uint64_t v28 = (void *)swift_allocObject();
  *(void *)(v0 + 1112) = v28;
  void v28[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v28[3] = 0;
  v28[4] = specialized closure #1 in Transformer.init(transform:);
  v28[5] = 0;
  *(void *)(v0 + 1176) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt32, String>);
  *(void *)(v0 + 1184) = &protocol witness table for Transformer<A, B>;
  uint64_t v29 = (void *)swift_allocObject();
  *(void *)(v0 + 1152) = v29;
  v29[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v29[3] = 0;
  v29[4] = specialized closure #1 in Transformer.init(transform:);
  v29[5] = 0;
  *(void *)(v0 + 1216) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt64, Int32>);
  *(void *)(v0 + 1224) = &protocol witness table for Transformer<A, B>;
  uint64_t v30 = (void *)swift_allocObject();
  *(void *)(v0 + 1192) = v30;
  v30[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v30[3] = 0;
  v30[4] = specialized closure #1 in Transformer.init(transform:);
  v30[5] = 0;
  *(void *)(v0 + 1256) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt64, Int64>);
  *(void *)(v0 + 1264) = &protocol witness table for Transformer<A, B>;
  uint64_t v31 = (void *)swift_allocObject();
  *(void *)(v0 + 1232) = v31;
  v31[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v31[3] = 0;
  v31[4] = specialized closure #1 in Transformer.init(transform:);
  v31[5] = 0;
  *(void *)(v0 + 1296) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt64, UInt32>);
  *(void *)(v0 + 1304) = &protocol witness table for Transformer<A, B>;
  uint64_t v32 = (void *)swift_allocObject();
  *(void *)(v0 + 1272) = v32;
  v32[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v32[3] = 0;
  v32[4] = specialized closure #1 in Transformer.init(transform:);
  v32[5] = 0;
  *(void *)(v0 + 1336) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt64, Int>);
  *(void *)(v0 + 1344) = &protocol witness table for Transformer<A, B>;
  unint64_t v33 = (void *)swift_allocObject();
  *(void *)(v0 + 1312) = v33;
  v33[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v33[3] = 0;
  v33[4] = specialized closure #1 in Transformer.init(transform:);
  void v33[5] = 0;
  *(void *)(v0 + 1376) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt64, Double>);
  *(void *)(v0 + 1384) = &protocol witness table for Transformer<A, B>;
  uint64_t v34 = (void *)swift_allocObject();
  *(void *)(v0 + 1352) = v34;
  v34[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  _OWORD v34[3] = 0;
  v34[4] = specialized closure #1 in Transformer.init(transform:);
  v34[5] = 0;
  *(void *)(v0 + 1416) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt64, Float>);
  *(void *)(v0 + 1424) = &protocol witness table for Transformer<A, B>;
  long long v35 = (void *)swift_allocObject();
  *(void *)(v0 + 1392) = v35;
  v35[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v35[3] = 0;
  v35[4] = specialized closure #1 in Transformer.init(transform:);
  v35[5] = 0;
  *(void *)(v0 + 1456) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt64, String>);
  *(void *)(v0 + 1464) = &protocol witness table for Transformer<A, B>;
  SiriUtilities::TransformationDescriptor_optional v36 = (void *)swift_allocObject();
  *(void *)(v0 + 1432) = v36;
  v36[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v36[3] = 0;
  v36[4] = specialized closure #1 in Transformer.init(transform:);
  v36[5] = 0;
  *(void *)(v0 + 1496) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Double, Int32>);
  *(void *)(v0 + 1504) = &protocol witness table for Transformer<A, B>;
  uint64_t v37 = (void *)swift_allocObject();
  *(void *)(v0 + 1472) = v37;
  v37[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v37[3] = 0;
  v37[4] = specialized closure #1 in Transformer.init(transform:);
  v37[5] = 0;
  *(void *)(v0 + 1536) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Double, Int64>);
  *(void *)(v0 + 1544) = &protocol witness table for Transformer<A, B>;
  uint64_t v38 = (void *)swift_allocObject();
  *(void *)(v0 + 1512) = v38;
  v38[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  _OWORD v38[3] = 0;
  v38[4] = specialized closure #1 in Transformer.init(transform:);
  v38[5] = 0;
  *(void *)(v0 + 1576) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Double, UInt32>);
  *(void *)(v0 + 1584) = &protocol witness table for Transformer<A, B>;
  uint64_t v39 = (void *)swift_allocObject();
  *(void *)(v0 + 1552) = v39;
  v39[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v39[3] = 0;
  v39[4] = specialized closure #1 in Transformer.init(transform:);
  v39[5] = 0;
  *(void *)(v0 + 1616) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Double, UInt64>);
  *(void *)(v0 + 1624) = &protocol witness table for Transformer<A, B>;
  char v40 = (void *)swift_allocObject();
  *(void *)(v0 + 1592) = v40;
  v40[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v40[3] = 0;
  v40[4] = specialized closure #1 in Transformer.init(transform:);
  v40[5] = 0;
  *(void *)(v0 + 1656) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Double, Int>);
  *(void *)(v0 + 1664) = &protocol witness table for Transformer<A, B>;
  uint64_t v41 = (void *)swift_allocObject();
  *(void *)(v0 + 1632) = v41;
  v41[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v41[3] = 0;
  v41[4] = specialized closure #1 in Transformer.init(transform:);
  v41[5] = 0;
  *(void *)(v0 + 1696) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Double, Float>);
  *(void *)(v0 + 1704) = &protocol witness table for Transformer<A, B>;
  char v42 = (void *)swift_allocObject();
  *(void *)(v0 + 1672) = v42;
  v42[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v42[3] = 0;
  v42[4] = specialized closure #1 in Transformer.init(transform:);
  v42[5] = 0;
  *(void *)(v0 + 1736) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Double, String>);
  *(void *)(v0 + 1744) = &protocol witness table for Transformer<A, B>;
  uint64_t v43 = (void *)swift_allocObject();
  *(void *)(v0 + 1712) = v43;
  v43[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v43[3] = 0;
  v43[4] = specialized closure #1 in Transformer.init(transform:);
  v43[5] = 0;
  *(void *)(v0 + 1776) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Double, Bool>);
  *(void *)(v0 + 1784) = &protocol witness table for Transformer<A, B>;
  uint64_t v44 = (void *)swift_allocObject();
  *(void *)(v0 + 1752) = v44;
  v44[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v44[3] = 0;
  v44[4] = specialized closure #1 in Transformer.init(transform:);
  v44[5] = 0;
  *(void *)(v0 + 1816) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Float, Int32>);
  *(void *)(v0 + 1824) = &protocol witness table for Transformer<A, B>;
  uint64_t v45 = (void *)swift_allocObject();
  *(void *)(v0 + 1792) = v45;
  v45[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v45[3] = 0;
  v45[4] = specialized closure #1 in Transformer.init(transform:);
  v45[5] = 0;
  *(void *)(v0 + 1856) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Float, Int64>);
  *(void *)(v0 + 1864) = &protocol witness table for Transformer<A, B>;
  int v46 = (void *)swift_allocObject();
  *(void *)(v0 + 1832) = v46;
  v46[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v46[3] = 0;
  v46[4] = specialized closure #1 in Transformer.init(transform:);
  v46[5] = 0;
  *(void *)(v0 + 1896) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Float, UInt32>);
  *(void *)(v0 + 1904) = &protocol witness table for Transformer<A, B>;
  BOOL v47 = (void *)swift_allocObject();
  *(void *)(v0 + 1872) = v47;
  v47[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v47[3] = 0;
  v47[4] = specialized closure #1 in Transformer.init(transform:);
  v47[5] = 0;
  *(void *)(v0 + 1936) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Float, UInt64>);
  *(void *)(v0 + 1944) = &protocol witness table for Transformer<A, B>;
  char v48 = (void *)swift_allocObject();
  *(void *)(v0 + 1912) = v48;
  v48[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v48[3] = 0;
  v48[4] = specialized closure #1 in Transformer.init(transform:);
  v48[5] = 0;
  *(void *)(v0 + 1976) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Float, Double>);
  *(void *)(v0 + 1984) = &protocol witness table for Transformer<A, B>;
  uint64_t v49 = (void *)swift_allocObject();
  *(void *)(v0 + 1952) = v49;
  v49[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v49[3] = 0;
  v49[4] = specialized closure #1 in Transformer.init(transform:);
  v49[5] = 0;
  *(void *)(v0 + 2016) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Float, Int>);
  *(void *)(v0 + 2024) = &protocol witness table for Transformer<A, B>;
  char v50 = (void *)swift_allocObject();
  *(void *)(v0 + 1992) = v50;
  v50[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v50[3] = 0;
  v50[4] = specialized closure #1 in Transformer.init(transform:);
  v50[5] = 0;
  *(void *)(v0 + 2056) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Float, String>);
  *(void *)(v0 + 2064) = &protocol witness table for Transformer<A, B>;
  v51 = (void *)swift_allocObject();
  *(void *)(v0 + 2032) = v51;
  v51[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v51[3] = 0;
  v51[4] = specialized closure #1 in Transformer.init(transform:);
  v51[5] = 0;
  *(void *)(v0 + 2096) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Float, Bool>);
  *(void *)(v0 + 2104) = &protocol witness table for Transformer<A, B>;
  char v52 = (void *)swift_allocObject();
  *(void *)(v0 + 2072) = v52;
  v52[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v52[3] = 0;
  v52[4] = specialized closure #1 in Transformer.init(transform:);
  v52[5] = 0;
  *(void *)(v0 + 2136) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Bool, Int>);
  *(void *)(v0 + 2144) = &protocol witness table for Transformer<A, B>;
  uint64_t v53 = (void *)swift_allocObject();
  *(void *)(v0 + 2112) = v53;
  v53[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v53[3] = 0;
  v53[4] = specialized closure #1 in Transformer.init(transform:);
  v53[5] = 0;
  *(void *)(v0 + 2176) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Bool, String>);
  *(void *)(v0 + 2184) = &protocol witness table for Transformer<A, B>;
  uint64_t v54 = (void *)swift_allocObject();
  *(void *)(v0 + 2152) = v54;
  v54[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v54[3] = 0;
  v54[4] = specialized closure #1 in Transformer.init(transform:);
  v54[5] = 0;
  *(void *)(v0 + 2216) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<String, Int>);
  *(void *)(v0 + 2224) = &protocol witness table for Transformer<A, B>;
  uint64_t v55 = (void *)swift_allocObject();
  *(void *)(v0 + 2192) = v55;
  v55[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v55[3] = 0;
  v55[4] = specialized closure #1 in Transformer.init(transform:);
  v55[5] = 0;
  *(void *)(v0 + 2256) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<String, Double>);
  *(void *)(v0 + 2264) = &protocol witness table for Transformer<A, B>;
  uint64_t v56 = (void *)swift_allocObject();
  *(void *)(v0 + 2232) = v56;
  v56[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v56[3] = 0;
  v56[4] = specialized closure #1 in Transformer.init(transform:);
  v56[5] = 0;
  *(void *)(v0 + 2296) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<String, Float>);
  *(void *)(v0 + 2304) = &protocol witness table for Transformer<A, B>;
  char v57 = (void *)swift_allocObject();
  *(void *)(v0 + 2272) = v57;
  v57[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v57[3] = 0;
  v57[4] = specialized closure #1 in Transformer.init(transform:);
  v57[5] = 0;
  *(void *)(v0 + 2336) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<String, Bool>);
  *(void *)(v0 + 2344) = &protocol witness table for Transformer<A, B>;
  unint64_t result = (void *)swift_allocObject();
  *(void *)(v0 + 2312) = result;
  result[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[3] = 0;
  result[4] = specialized closure #1 in Transformer.init(transform:);
  result[5] = 0;
  static TransformationRegistry._commonTransformers = (_UNKNOWN *)v0;
  return result;
}

uint64_t objectdestroyTm_0()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t LoadableTransformation.inputType.getter@<X0>(void *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_10(*(void *)(v1 + *(void *)(*(void *)v1 + 104) + 40), a1);
}

uint64_t LoadableTransformation.outputType.getter@<X0>(void *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_10(*(void *)(v1 + *(void *)(*(void *)v1 + 104) + 56), a1);
}

uint64_t LoadableTransformation.typeErasedTransform(_:)(uint64_t a1)
{
  (*(void (**)(void *__return_ptr))(*(void *)v1 + 144))(v6);
  if (v6[3])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transforming);
    if (swift_dynamicCast())
    {
      if (*((void *)&v8 + 1))
      {
        outlined init with take of Transforming(&v7, (uint64_t)v10);
        uint64_t v3 = v11;
        uint64_t v4 = v12;
        __swift_project_boxed_opaque_existential_1(v10, v11);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(a1, v3, v4);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      }
    }
    else
    {
      uint64_t v9 = 0;
      long long v7 = 0u;
      long long v8 = 0u;
    }
  }
  else
  {
    outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v6, &demangling cache variable for type metadata for Any?);
    long long v7 = 0u;
    long long v8 = 0u;
    uint64_t v9 = 0;
  }
  outlined destroy of CheckedContinuation<(), Error>?((uint64_t)&v7, &demangling cache variable for type metadata for Transforming?);
  lazy protocol witness table accessor for type LoadableTransformationError and conformance LoadableTransformationError();
  swift_allocError();
  return swift_willThrow();
}

unint64_t lazy protocol witness table accessor for type LoadableTransformationError and conformance LoadableTransformationError()
{
  unint64_t result = lazy protocol witness table cache variable for type LoadableTransformationError and conformance LoadableTransformationError;
  if (!lazy protocol witness table cache variable for type LoadableTransformationError and conformance LoadableTransformationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LoadableTransformationError and conformance LoadableTransformationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LoadableTransformationError and conformance LoadableTransformationError;
  if (!lazy protocol witness table cache variable for type LoadableTransformationError and conformance LoadableTransformationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LoadableTransformationError and conformance LoadableTransformationError);
  }
  return result;
}

uint64_t *LoadableTransformation.__allocating_init(container:capability:)(uint64_t a1, uint64_t a2)
{
  return LoadableTransformation.init(container:capability:)(a1, a2);
}

uint64_t *LoadableTransformation.init(container:capability:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  v7[0] = *(unsigned char *)a2;
  uint64_t v8 = v2;
  uint64_t v9 = v3;
  long long v10 = *(_OWORD *)(a2 + 24);
  long long v11 = v4;
  uint64_t v12 = v5;
  return LoadableCapability.init(container:capability:)(a1, (uint64_t)v7);
}

uint64_t LoadableTransformation.__deallocating_deinit()
{
  uint64_t v0 = LoadableCapability.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t protocol witness for Transforming.inputType.getter in conformance LoadableTransformation<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t protocol witness for Transforming.outputType.getter in conformance LoadableTransformation<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))();
}

uint64_t protocol witness for Transforming.typeErasedTransform(_:) in conformance LoadableTransformation<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

uint64_t static LoadableTransformationError.== infix(_:_:)()
{
  return 1;
}

void LoadableTransformationError.hash(into:)()
{
}

Swift::Int LoadableTransformationError.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t type metadata completion function for LoadableTransformation()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for LoadableTransformation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for LoadableTransformation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LoadableTransformation);
}

uint64_t dispatch thunk of LoadableTransformation.inputType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of LoadableTransformation.outputType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of LoadableTransformation.typeErasedTransform(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of LoadableTransformation.__allocating_init(container:capability:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

unsigned char *storeEnumTagSinglePayload for LoadableTransformationError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C9E6D8C8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for LoadableTransformationError()
{
  return &type metadata for LoadableTransformationError;
}

uint64_t OUTLINED_FUNCTION_0_10@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v2;
  a2[1] = a1;
  return swift_bridgeObjectRetain();
}

uint64_t NullCacheDataSource.readCacheData()()
{
  lazy protocol witness table accessor for type CacheDataError and conformance CacheDataError();
  swift_allocError();
  unsigned char *v0 = 1;
  return swift_willThrow();
}

unint64_t lazy protocol witness table accessor for type CacheDataError and conformance CacheDataError()
{
  unint64_t result = lazy protocol witness table cache variable for type CacheDataError and conformance CacheDataError;
  if (!lazy protocol witness table cache variable for type CacheDataError and conformance CacheDataError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CacheDataError and conformance CacheDataError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CacheDataError and conformance CacheDataError;
  if (!lazy protocol witness table cache variable for type CacheDataError and conformance CacheDataError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CacheDataError and conformance CacheDataError);
  }
  return result;
}

uint64_t protocol witness for CacheDataSource.readCacheData() in conformance NullCacheDataSource()
{
  return NullCacheDataSource.readCacheData()();
}

uint64_t Cacheable.projectedValue.getter()
{
  return swift_retain();
}

uint64_t key path setter for Cacheable.cache : <A>Cacheable<A>(uint64_t a1, uint64_t a2)
{
  outlined init with copy of CacheDataSource?(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 136))(v4);
}

uint64_t Cacheable.cache.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return outlined init with copy of CacheDataSource?(v1 + 16, a1);
}

uint64_t outlined init with copy of CacheDataSource?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CacheDataSource?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Cacheable.cache.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_12_3();
  outlined assign with copy of CacheDataSource?(a1, v1 + 16);
  uint64_t v3 = swift_endAccess();
  (*(void (**)(uint64_t))(*(void *)v1 + 208))(v3);
  return outlined destroy of CacheDataSource?(a1, &demangling cache variable for type metadata for CacheDataSource?);
}

uint64_t outlined assign with copy of CacheDataSource?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CacheDataSource?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t (*Cacheable.cache.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_12_3();
  return Cacheable.cache.modify;
}

uint64_t Cacheable.cache.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t))(**(void **)(a1 + 24) + 208))(result);
  }
  return result;
}

uint64_t Cacheable._value.getter@<X0>(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_14_3();
  uint64_t v4 = v1 + *(void *)(v3 + 112);
  swift_beginAccess();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_6_6();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(a1, v4);
}

uint64_t Cacheable._value.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_14_3();
  uint64_t v4 = v1 + *(void *)(v3 + 112);
  OUTLINED_FUNCTION_12_3();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_6_6();
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t key path setter for Cacheable.wrappedValue : <A>Cacheable<A>(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a1);
  uint64_t v4 = (char *)&v7 - v3;
  (*(void (**)(char *))(v5 + 16))((char *)&v7 - v3);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 184))(v4);
}

uint64_t Cacheable.wrappedValue.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_0_7();
  uint64_t v3 = *(void *)(v2 + 80);
  OUTLINED_FUNCTION_0_5();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v9 = (char *)&v12 - v8;
  OUTLINED_FUNCTION_9_4();
  v10();
  Cacheable._value.setter((uint64_t)v9);
  Cacheable.tryWrite()();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v3);
}

void (*Cacheable.wrappedValue.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  OUTLINED_FUNCTION_0_7();
  *(void *)(v5 + 8) = *(void *)(v4 + 80);
  OUTLINED_FUNCTION_0_5();
  *(void *)(v6 + 16) = v7;
  size_t v9 = *(void *)(v8 + 64);
  v3[3] = malloc(v9);
  long long v10 = malloc(v9);
  v3[4] = v10;
  Cacheable._value.getter((uint64_t)v10);
  return Cacheable.wrappedValue.modify;
}

void Cacheable.wrappedValue.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    uint64_t v5 = v2[1];
    uint64_t v6 = v2[2];
    OUTLINED_FUNCTION_9_4();
    v7();
    Cacheable.wrappedValue.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    Cacheable.wrappedValue.setter(*(void *)(*(void *)a1 + 32));
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t Cacheable.__allocating_init(cache:wrappedValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  Cacheable.init(cache:wrappedValue:)(a1, a2);
  return v4;
}

uint64_t *Cacheable.init(cache:wrappedValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  *((_OWORD *)v2 + 2) = 0u;
  void v2[6] = 0;
  *((_OWORD *)v2 + 1) = 0u;
  OUTLINED_FUNCTION_12_3();
  outlined assign with copy of CacheDataSource?(a1, (uint64_t)(v2 + 2));
  swift_endAccess();
  OUTLINED_FUNCTION_0_7();
  uint64_t v6 = *(void *)(v5 + 80);
  uint64_t v7 = *(void *)(v6 - 8);
  OUTLINED_FUNCTION_9_4();
  uint64_t v9 = v8();
  (*(void (**)(uint64_t))(*v2 + 208))(v9);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  outlined destroy of CacheDataSource?(a1, &demangling cache variable for type metadata for CacheDataSource?);
  return v2;
}

Swift::Void __swiftcall Cacheable.sync()()
{
}

uint64_t Cacheable.read()()
{
  OUTLINED_FUNCTION_1_8();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_6_6();
  uint64_t v5 = MEMORY[0x1F4188790](v3, v4);
  uint64_t v7 = (char *)&v15 - v6;
  (*(void (**)(long long *__return_ptr, uint64_t))(v2 + 128))(&v16, v5);
  if (!v17) {
    return outlined destroy of CacheDataSource?((uint64_t)&v16, &demangling cache variable for type metadata for CacheDataSource?);
  }
  outlined init with take of Transforming(&v16, (uint64_t)v18);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  uint64_t v8 = v19;
  uint64_t v9 = v20;
  __swift_project_boxed_opaque_existential_1(v18, v19);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  if (!v0)
  {
    uint64_t v12 = v10;
    unint64_t v13 = v11;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    Cacheable._value.setter((uint64_t)v7);
    outlined consume of Data._Representation(v12, v13);
  }
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t Cacheable.tryWrite()()
{
  OUTLINED_FUNCTION_1_8();
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_0_5();
  uint64_t v4 = MEMORY[0x1F4188790](v2, v3);
  uint64_t v6 = (char *)&v21[-1] - v5;
  (*(void (**)(void *__return_ptr, uint64_t))(v1 + 128))(v26, v4);
  if (!v27)
  {
    outlined destroy of CacheDataSource?((uint64_t)v26, &demangling cache variable for type metadata for CacheDataSource?);
    long long v23 = 0u;
    long long v24 = 0u;
    uint64_t v25 = 0;
    return outlined destroy of CacheDataSource?((uint64_t)&v23, &demangling cache variable for type metadata for CacheDataSink?);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CacheDataSource);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CacheDataSink);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v25 = 0;
    long long v23 = 0u;
    long long v24 = 0u;
    return outlined destroy of CacheDataSource?((uint64_t)&v23, &demangling cache variable for type metadata for CacheDataSink?);
  }
  if (!*((void *)&v24 + 1)) {
    return outlined destroy of CacheDataSource?((uint64_t)&v23, &demangling cache variable for type metadata for CacheDataSink?);
  }
  outlined init with take of Transforming(&v23, (uint64_t)v26);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  Cacheable._value.getter((uint64_t)v6);
  uint64_t v8 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v10 = v9;
  OUTLINED_FUNCTION_7_5();
  v11();
  uint64_t v12 = v27;
  uint64_t v13 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v13 + 8))(v8, v10, v12, v13);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.logger);
  outlined init with copy of CacheDataSource((uint64_t)v26, (uint64_t)&v23);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    outlined init with copy of CacheDataSource((uint64_t)&v23, (uint64_t)v21);
    uint64_t v18 = String.init<A>(describing:)();
    v21[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
    _os_log_impl(&dword_1C9E4C000, v15, v16, "Wrote cached object to %s", v17, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
  }
  outlined consume of Data._Representation(v8, v10);

  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
}

uint64_t Cacheable.deinit()
{
  outlined destroy of CacheDataSource?(v0 + 16, &demangling cache variable for type metadata for CacheDataSource?);
  OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_6_6();
  (*(void (**)(void))(v1 + 8))();
  return v0;
}

uint64_t Cacheable.__deallocating_deinit()
{
  Cacheable.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t URL.readCacheData()()
{
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0_5();
  MEMORY[0x1F4188790](v1, v2);
  id v3 = objc_msgSend(self, sel_defaultManager);
  uint64_t v4 = URL.path.getter();
  uint64_t v5 = (void *)MEMORY[0x1CB7919D0](v4);
  swift_bridgeObjectRelease();
  unsigned int v6 = objc_msgSend(v3, sel_fileExistsAtPath_, v5);

  if (v6)
  {
    uint64_t result = Data.init(contentsOf:options:)();
    if (!v0) {
      return result;
    }
    if (one-time initialization token for loader != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.loader);
    OUTLINED_FUNCTION_9_4();
    v9();
    id v10 = v0;
    id v11 = v0;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315394;
      lazy protocol witness table accessor for type URL and conformance URL();
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v23);
      OUTLINED_FUNCTION_2_10(v17);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_7_5();
      v18();
      OUTLINED_FUNCTION_8_5();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v19 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C9E4C000, v12, v13, "Failed to read cache data from %s: error=%s.", v14, 0x16u);
      OUTLINED_FUNCTION_13_3();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      OUTLINED_FUNCTION_7_5();
      v22();
    }
  }
  else
  {
    lazy protocol witness table accessor for type CacheDataError and conformance CacheDataError();
    swift_allocError();
    *uint64_t v21 = 1;
  }
  return swift_willThrow();
}

uint64_t URL.writeCacheData(_:)()
{
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0_5();
  MEMORY[0x1F4188790](v1, v2);
  uint64_t result = Data.write(to:options:)();
  if (v0)
  {
    if (one-time initialization token for loader != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.loader);
    OUTLINED_FUNCTION_9_4();
    v5();
    id v6 = v0;
    id v7 = v0;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      id v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)id v10 = 136315394;
      lazy protocol witness table accessor for type URL and conformance URL();
      uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v13 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v18);
      OUTLINED_FUNCTION_2_10(v13);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_7_5();
      v14();
      OUTLINED_FUNCTION_8_5();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v15 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C9E4C000, v8, v9, "Failed to write cache data to %s: error=%s.", v10, 0x16u);
      OUTLINED_FUNCTION_13_3();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      OUTLINED_FUNCTION_7_5();
      v17();
    }
    return swift_willThrow();
  }
  return result;
}

uint64_t protocol witness for CacheDataSource.readCacheData() in conformance URL()
{
  return URL.readCacheData()();
}

uint64_t protocol witness for CacheDataSink.writeCacheData(_:) in conformance URL()
{
  return URL.writeCacheData(_:)();
}

BOOL static CacheDataError.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void CacheDataError.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int CacheDataError.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CacheDataError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static CacheDataError.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CacheDataError()
{
  return CacheDataError.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance CacheDataError(uint64_t a1)
{
  CacheDataError.hash(into:)(a1, *v1);
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

BOOL specialized OptionSet<>.insert(_:)(void *a1, uint64_t a2)
{
  uint64_t v3 = *v2 & a2;
  if (v3 != a2) {
    *v2 |= a2;
  }
  *a1 = a2;
  return v3 != a2;
}

uint64_t sub_1C9E6F364()
{
  OUTLINED_FUNCTION_0_7();
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_1C9E6F3B0()
{
  OUTLINED_FUNCTION_0_7();
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of CacheDataSource.readCacheData()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CacheDataSink.writeCacheData(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ValueMetadata *type metadata accessor for NullCacheDataSource()
{
  return &type metadata for NullCacheDataSource;
}

uint64_t type metadata completion function for Cacheable()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for Cacheable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for Cacheable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for Cacheable);
}

uint64_t dispatch thunk of Cacheable.projectedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of Cacheable.cache.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of Cacheable.cache.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of Cacheable.cache.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of Cacheable.wrappedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of Cacheable.wrappedValue.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of Cacheable.wrappedValue.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of Cacheable.__allocating_init(cache:wrappedValue:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of Cacheable.sync()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

unsigned char *storeEnumTagSinglePayload for CacheDataError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9E6F72CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CacheDataError()
{
  return &type metadata for CacheDataError;
}

uint64_t outlined destroy of CacheDataSource?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_6_6();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t outlined init with copy of CacheDataSource(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  OUTLINED_FUNCTION_6_6();
  (*v3)(a2);
  return a2;
}

uint64_t OUTLINED_FUNCTION_2_10(uint64_t a1)
{
  *(void *)(v1 - 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

id OUTLINED_FUNCTION_8_5()
{
  *(_WORD *)(v1 + 12) = 2080;
  *(void *)(v2 - 88) = v0;
  return v0;
}

uint64_t OUTLINED_FUNCTION_12_3()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_13_3()
{
  return swift_arrayDestroy();
}

uint64_t MergedPluginFinder.finders.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MergedPluginFinder.findAllPackages()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)v0 + 32;
    swift_bridgeObjectRetain();
    uint64_t v3 = MEMORY[0x1E4FBC860];
    while (1)
    {
      outlined init with copy of Transforming(v2, (uint64_t)v20);
      uint64_t v4 = v21;
      uint64_t v5 = v22;
      __swift_project_boxed_opaque_existential_1(v20, v21);
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      uint64_t v7 = *(void *)(v6 + 16);
      uint64_t v8 = *(void *)(v3 + 16);
      uint64_t v9 = v8 + v7;
      if (__OFADD__(v8, v7)) {
        break;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v3 + 24) >> 1)
      {
        if (v8 <= v9) {
          uint64_t v11 = v8 + v7;
        }
        else {
          uint64_t v11 = v8;
        }
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PluginPackage>, &demangling cache variable for type metadata for PluginPackage);
        uint64_t v3 = v12;
      }
      if (*(void *)(v6 + 16))
      {
        uint64_t v13 = *(void *)(v3 + 16);
        if ((*(void *)(v3 + 24) >> 1) - v13 < v7) {
          goto LABEL_27;
        }
        unint64_t v14 = v3 + 40 * v13 + 32;
        if (v6 + 32 < v14 + 40 * v7 && v14 < v6 + 32 + 40 * v7) {
          goto LABEL_29;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginPackage);
        swift_arrayInitWithCopy();
        if (v7)
        {
          uint64_t v16 = *(void *)(v3 + 16);
          BOOL v17 = __OFADD__(v16, v7);
          uint64_t v18 = v16 + v7;
          if (v17) {
            goto LABEL_28;
          }
          *(void *)(v3 + 16) = v18;
        }
      }
      else if (v7)
      {
        goto LABEL_26;
      }
      swift_bridgeObjectRelease();
      v2 += 40;
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_4_7();
    uint64_t result = OUTLINED_FUNCTION_3_7();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t MergedPluginFinder.init(finders:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t FallbackPluginFinder.findAllPackages()()
{
  uint64_t v1 = *v0;
  unint64_t v2 = *(void *)(*v0 + 16);
  uint64_t v3 = *v0 + 32;
  uint64_t result = swift_bridgeObjectRetain_n();
  unint64_t v5 = 0;
  while (1)
  {
    if (v5 == v2)
    {
      uint64_t v15 = 0;
      unint64_t v5 = v2;
      memset(v14, 0, sizeof(v14));
      goto LABEL_6;
    }
    if (v5 >= *(void *)(v1 + 16)) {
      break;
    }
    outlined init with copy of Transforming(v3 + 40 * v5++, (uint64_t)v14);
LABEL_6:
    outlined init with take of PluginFinder?((uint64_t)v14, (uint64_t)&v12);
    if (!v13)
    {
      swift_bridgeObjectRelease_n();
      return MEMORY[0x1E4FBC860];
    }
    outlined init with take of Transforming(&v12, (uint64_t)v9);
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    if (*(void *)(v8 + 16))
    {
      swift_bridgeObjectRelease_n();
      return v8;
    }
    uint64_t result = swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t FallbackPluginFinder.init(finders:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t URL.findAllPackages()()
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v1, v3);
  uint64_t v6 = (char *)v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)v50 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v10 - 8, v11);
  uint64_t v13 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = objc_msgSend(self, sel_defaultManager);
  URL._bridgeToObjectiveC()(v15);
  BOOL v17 = v16;
  *(void *)&v57[0] = 0;
  id v18 = objc_msgSend(v14, sel_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_, v16, 0, 0, v57);

  uint64_t v19 = *(void **)&v57[0];
  if (v18)
  {
    uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v21 = v19;

    uint64_t v22 = *(void *)(v20 + 16);
    v50[1] = v20;
    if (v22)
    {
      long long v24 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
      uint64_t v23 = v2 + 16;
      unint64_t v25 = v20 + ((*(unsigned __int8 *)(v23 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 64));
      uint64_t v51 = *(void *)(v23 + 56);
      char v52 = v24;
      unint64_t v26 = (void (**)(char *, char *, uint64_t))(v23 + 16);
      uint64_t v53 = (void *)v23;
      uint64_t v27 = (void (**)(char *, uint64_t))(v23 - 8);
      swift_bridgeObjectRetain();
      uint64_t v28 = MEMORY[0x1E4FBC860];
      while (1)
      {
        v52(v13, v25, v1);
        __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v1);
        if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v1) == 1) {
          break;
        }
        (*v26)(v9, v13, v1);
        unint64_t v29 = type metadata accessor for NSBundle();
        v30._uint64_t countAndFlagsBits = URL.path.getter();
        unint64_t v31 = (unint64_t)NSBundle.__allocating_init(path:)(v30);
        if (v31)
        {
          *((void *)&v55 + 1) = v29;
          uint64_t v56 = &protocol witness table for NSBundle;
          *(void *)&long long v54 = v31;
        }
        else
        {
          uint64_t v56 = 0;
          long long v54 = 0u;
          long long v55 = 0u;
        }
        (*v27)(v9, v1);
        if (*((void *)&v55 + 1))
        {
          outlined init with take of Transforming(&v54, (uint64_t)v57);
          outlined init with take of Transforming(v57, (uint64_t)&v54);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v28 + 16) + 1, 1, v28, &demangling cache variable for type metadata for _ContiguousArrayStorage<PluginPackage>, &demangling cache variable for type metadata for PluginPackage);
            uint64_t v28 = v34;
          }
          unint64_t v33 = *(void *)(v28 + 16);
          unint64_t v32 = *(void *)(v28 + 24);
          if (v33 >= v32 >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v28, &demangling cache variable for type metadata for _ContiguousArrayStorage<PluginPackage>, &demangling cache variable for type metadata for PluginPackage);
            uint64_t v28 = v35;
          }
          *(void *)(v28 + 16) = v33 + 1;
          outlined init with take of Transforming(&v54, v28 + 40 * v33 + 32);
        }
        else
        {
          outlined destroy of PluginPackage?((uint64_t)&v54);
        }
        v25 += v51;
        if (!--v22) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v28 = MEMORY[0x1E4FBC860];
LABEL_22:
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 1, 1, v1);
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    id v36 = *(id *)&v57[0];
    uint64_t v37 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for loader != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.loader);
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v6, v0, v1);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(void *)&v57[0] = v42;
      *(_DWORD *)uint64_t v41 = 136315138;
      uint64_t v53 = v37;
      lazy protocol witness table accessor for type URL and conformance URL();
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, (uint64_t *)v57);
      uint64_t v37 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v45 = OUTLINED_FUNCTION_14_4();
      v46(v45);
      _os_log_impl(&dword_1C9E4C000, v39, v40, "Cannot read directory %s; not loading plugins from there.", v41, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB792FA0](v42, -1, -1);
      MEMORY[0x1CB792FA0](v41, -1, -1);
    }
    else
    {
      uint64_t v47 = OUTLINED_FUNCTION_14_4();
      v48(v47);
    }

    return MEMORY[0x1E4FBC860];
  }
  return v28;
}

uint64_t Array<A>.findAllPackages()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginPackage);

  return MEMORY[0x1F4185048](a1, a2, v4);
}

uint64_t protocol witness for PluginFinder.findAllPackages() in conformance <A> [A](uint64_t a1)
{
  return Array<A>.findAllPackages()(*v1, *(void *)(a1 + 16));
}

uint64_t <+> infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return <+> infix(_:_:)(a1, a2, (uint64_t)&type metadata for MergedPluginFinder, (uint64_t)&protocol witness table for MergedPluginFinder, a3);
}

uint64_t <|> infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return <+> infix(_:_:)(a1, a2, (uint64_t)&type metadata for FallbackPluginFinder, (uint64_t)&protocol witness table for FallbackPluginFinder, a3);
}

uint64_t <+> infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PluginFinder>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1C9EB5060;
  outlined init with copy of Transforming(a1, v10 + 32);
  uint64_t result = outlined init with copy of Transforming(a2, v10 + 72);
  a5[3] = a3;
  a5[4] = a4;
  *a5 = v10;
  return result;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  OUTLINED_FUNCTION_13_4();
  if (v2)
  {
    OUTLINED_FUNCTION_7_6();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_10_4();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_5_5();
    }
  }
  OUTLINED_FUNCTION_8_6();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SiriEnvironment.InitializingProvider>);
    uint64_t v5 = (const void *)swift_allocObject();
    size_t v6 = _swift_stdlib_malloc_size(v5);
    OUTLINED_FUNCTION_12_4((uint64_t)(v6 - 32) / 24);
  }
  if (v0)
  {
    uint64_t v7 = (char *)OUTLINED_FUNCTION_15_1();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_11_4();
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_9_5();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  const void *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_13_4();
  if (v2)
  {
    OUTLINED_FUNCTION_7_6();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_10_4();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_5_5();
    }
  }
  OUTLINED_FUNCTION_8_6();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TransformationCapability>);
    uint64_t v5 = (const void *)swift_allocObject();
    size_t v6 = _swift_stdlib_malloc_size(v5);
    OUTLINED_FUNCTION_12_4((uint64_t)(v6 - 32) / 64);
  }
  if (v0)
  {
    uint64_t v7 = (char *)OUTLINED_FUNCTION_15_1();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_11_4();
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_9_5();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  const void *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_13_4();
  if (v2)
  {
    OUTLINED_FUNCTION_7_6();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_10_4();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_5_5();
    }
  }
  OUTLINED_FUNCTION_8_6();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TransformationDescriptor>);
    uint64_t v5 = (const void *)swift_allocObject();
    size_t v6 = _swift_stdlib_malloc_size(v5);
    OUTLINED_FUNCTION_12_4((uint64_t)(v6 - 32) / 56);
  }
  if (v0)
  {
    uint64_t v7 = (char *)OUTLINED_FUNCTION_15_1();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_11_4();
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_9_5();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  const void *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_13_4();
  if (v2)
  {
    OUTLINED_FUNCTION_7_6();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_10_4();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_5_5();
    }
  }
  OUTLINED_FUNCTION_8_6();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TransformationChain>);
    uint64_t v5 = (const void *)swift_allocObject();
    size_t v6 = _swift_stdlib_malloc_size(v5);
    OUTLINED_FUNCTION_12_4((uint64_t)(v6 - 32) / 8);
  }
  if (v0)
  {
    uint64_t v7 = (char *)OUTLINED_FUNCTION_15_1();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_11_4();
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_9_5();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    OUTLINED_FUNCTION_7_6();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_10_4();
      if (v10)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_5_5();
    }
  }
  else
  {
    uint64_t v9 = a2;
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (v13)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    id v14 = (char *)swift_allocObject();
    size_t v15 = _swift_stdlib_malloc_size(v14);
    *((void *)v14 + 2) = v12;
    *((void *)v14 + 3) = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  else
  {
    id v14 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v16 = v14 + 32;
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v12, v16);
    OUTLINED_FUNCTION_11_4();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v12, (unint64_t)v16, a4, a6);
  }
}

uint64_t outlined init with take of PluginFinder?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginFinder?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_6_7();
    goto LABEL_11;
  }
  unint64_t v6 = a4 + 40 * a1 + 32;
  unint64_t v7 = a3 + 40 * v5;
  if (v6 >= v7 || v6 + 40 * v5 <= a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return v7;
  }
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_4_7();
LABEL_11:
  uint64_t result = OUTLINED_FUNCTION_3_7();
  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_11();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_11();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_9(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_11();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_11();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_9(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_11();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_11();
    __break(1u);
  }
  else if (a3 != result || &result[64 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_9(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_11();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_11();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_9(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_11();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_11();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_9(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_11();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_11();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_9(a3, result);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[56 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 56 * a2);
  }
  return __src;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_6_7();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_3_7();
    __break(1u);
    return result;
  }
  if (a3 + 40 * a2 > a1 && a1 + 40 * a2 > a3)
  {
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_4_7();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transforming);

  return swift_arrayInitWithCopy();
}

{
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_6_7();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_3_7();
    __break(1u);
    return result;
  }
  if (a3 + 16 * a2 > a1 && a1 + 16 * a2 > a3)
  {
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_4_7();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

{
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_6_7();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_3_7();
    __break(1u);
    return result;
  }
  if (a3 + (a2 << 6) > a1 && a1 + (a2 << 6) > a3)
  {
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_4_7();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

{
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_6_7();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_3_7();
    __break(1u);
    return result;
  }
  if (a3 + 32 * a2 > a1 && a1 + 32 * a2 > a3)
  {
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_4_7();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t outlined destroy of PluginPackage?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginPackage?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of PluginFinder.findAllPackages()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for MergedPluginFinder()
{
  return &type metadata for MergedPluginFinder;
}

ValueMetadata *type metadata accessor for FallbackPluginFinder()
{
  return &type metadata for FallbackPluginFinder;
}

void *OUTLINED_FUNCTION_1_9@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t OUTLINED_FUNCTION_2_11()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_3_7()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_9_5()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_11_4()
{
  *(void *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_12_4(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * a1;
}

uint64_t OUTLINED_FUNCTION_14_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_15_1()
{
  return v0 + 32;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayypG_ypsAE_pTg5(void (*a1)(_OWORD *__return_ptr, uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (v5)
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = v15;
    for (uint64_t i = a3 + 32; ; i += 32)
    {
      a1(v14, i, &v13);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v15 = v6;
      unint64_t v11 = *(void *)(v6 + 16);
      unint64_t v10 = *(void *)(v6 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1);
        uint64_t v6 = v15;
      }
      *(void *)(v6 + 16) = v11 + 1;
      outlined init with take of Any(v14, (_OWORD *)(v6 + 32 * v11 + 32));
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t TransformationRegistry.__allocating_init(fallback:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  TransformationRegistry.init(fallback:)(a1);
  return v2;
}

void *TransformationRegistry.init(fallback:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Transforming]);
  lazy protocol witness table accessor for type TypeIdentifier and conformance TypeIdentifier();
  v1[2] = Dictionary.init(dictionaryLiteral:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transforming);
  lazy protocol witness table accessor for type TransformationIdentifier and conformance TransformationIdentifier();
  v1[3] = Dictionary.init(dictionaryLiteral:)();
  v1[4] = a1;
  return v1;
}

unint64_t lazy protocol witness table accessor for type TypeIdentifier and conformance TypeIdentifier()
{
  unint64_t result = lazy protocol witness table cache variable for type TypeIdentifier and conformance TypeIdentifier;
  if (!lazy protocol witness table cache variable for type TypeIdentifier and conformance TypeIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypeIdentifier and conformance TypeIdentifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TypeIdentifier and conformance TypeIdentifier;
  if (!lazy protocol witness table cache variable for type TypeIdentifier and conformance TypeIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypeIdentifier and conformance TypeIdentifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformationIdentifier and conformance TransformationIdentifier()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformationIdentifier and conformance TransformationIdentifier;
  if (!lazy protocol witness table cache variable for type TransformationIdentifier and conformance TransformationIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationIdentifier and conformance TransformationIdentifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationIdentifier and conformance TransformationIdentifier;
  if (!lazy protocol witness table cache variable for type TransformationIdentifier and conformance TransformationIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationIdentifier and conformance TransformationIdentifier);
  }
  return result;
}

void TransformationRegistry.register(_:)(void *a1)
{
  uint64_t v2 = v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  OUTLINED_FUNCTION_17_1();
  v4();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  OUTLINED_FUNCTION_7_7();
  v5();
  if (v46[0] == v44 && v46[1] == v45)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      OUTLINED_FUNCTION_17_1();
      v8();
      uint64_t v10 = v49;
      uint64_t v9 = v50;
      outlined init with copy of Transforming((uint64_t)a1, (uint64_t)v46);
      unint64_t v11 = (void *)(v1 + 16);
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v43 = *(void *)(v1 + 16);
      uint64_t v13 = v43;
      *(void *)(v2 + 16) = 0x8000000000000000;
      unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
      uint64_t v16 = *(void *)(v13 + 16);
      BOOL v17 = (v15 & 1) == 0;
      Swift::Int v18 = v16 + v17;
      if (__OFADD__(v16, v17))
      {
        __break(1u);
      }
      else
      {
        unint64_t v19 = v14;
        char v20 = v15;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<TypeIdentifier, [Transforming]>);
        if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v18))
        {
LABEL_10:
          *unint64_t v11 = v43;
          swift_bridgeObjectRelease();
          uint64_t v23 = (void *)*v11;
          swift_bridgeObjectRetain();
          if ((v20 & 1) == 0)
          {
            specialized _NativeDictionary._insert(at:key:value:)(v19, v10, v9, MEMORY[0x1E4FBC860], v23);
            swift_bridgeObjectRetain();
          }
          uint64_t v24 = v23[7];
          swift_bridgeObjectRelease();
          unint64_t v25 = (uint64_t *)(v24 + 8 * v19);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
          uint64_t v26 = *(void *)(*v25 + 16);
          specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v26, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
          uint64_t v27 = v47;
          uint64_t v28 = v48;
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v46, v47);
          OUTLINED_FUNCTION_0_5();
          MEMORY[0x1F4188790](v29, v30);
          unint64_t v32 = (char *)&v42 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *))(v33 + 16))(v32);
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, (uint64_t)v32, v25, v27, v28);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
          swift_endAccess();
          swift_bridgeObjectRelease();
          return;
        }
        unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
        if ((v20 & 1) == (v22 & 1))
        {
          unint64_t v19 = v21;
          goto LABEL_10;
        }
      }
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return;
    }
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  __swift_project_value_buffer(v34, (uint64_t)static Logger.logger);
  outlined init with copy of Transforming((uint64_t)a1, (uint64_t)v46);
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315138;
    __swift_project_boxed_opaque_existential_1(v46, v47);
    OUTLINED_FUNCTION_17_1();
    v38();
    uint64_t v49 = v44;
    uint64_t v50 = v45;
    unint64_t v39 = TypeIdentifier.description.getter();
    unint64_t v41 = v40;
    swift_bridgeObjectRelease();
    uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
    _os_log_impl(&dword_1C9E4C000, v35, v36, "Ignored registration of null transformation for %s", v37, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  }
}

BOOL TransformationRegistry.register(id:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  Swift::UInt v4 = a1[2];
  outlined init with copy of Transforming(a2, (uint64_t)v7);
  swift_beginAccess();
  specialized Dictionary._Variant.updateValue(_:forKey:)(v7, v2, v3, v4, (uint64_t)v8);
  swift_endAccess();
  BOOL v5 = v9 == 0;
  _s13SiriUtilities12Transforming_pSgWOhTm_0((uint64_t)v8, &demangling cache variable for type metadata for Transforming?);
  return v5;
}

void *TransformationRegistry.defaultLengthLimit.unsafeMutableAddressor()
{
  return &static TransformationRegistry.defaultLengthLimit;
}

Swift::Bool __swiftcall TransformationRegistry.canTransform(from:to:lengthLimit:)(SiriUtilities::TypeIdentifier from, SiriUtilities::TypeIdentifier to, Swift::Int lengthLimit)
{
  uint64_t v3 = *(void *)from.encoding._countAndFlagsBits;
  uint64_t v4 = *(void *)(from.encoding._countAndFlagsBits + 8);
  uint64_t v5 = *(void *)from.encoding._object;
  uint64_t v6 = *((void *)from.encoding._object + 1);
  if (*(void *)from.encoding._object == *(void *)from.encoding._countAndFlagsBits && v6 == v4) {
    return 1;
  }
  uint64_t countAndFlagsBits = to.encoding._countAndFlagsBits;
  OUTLINED_FUNCTION_23_0();
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    return 1;
  }
  if (one-time initialization token for any != -1) {
    swift_once();
  }
  if (v5 == static TypeIdentifier.any && v6 == *(void *)algn_1EA5CB238) {
    return 1;
  }
  OUTLINED_FUNCTION_23_0();
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    return 1;
  }
  v14[0] = v3;
  v14[1] = v4;
  v13[0] = v5;
  v13[1] = v6;
  OUTLINED_FUNCTION_0_7();
  uint64_t v12 = *(void *)((*(uint64_t (**)(void *, void *, uint64_t, void))(v11 + 224))(v14, v13, countAndFlagsBits, 0)+ 16);
  swift_bridgeObjectRelease();
  return v12 != 0;
}

uint64_t TransformationRegistry.transform<A>(_:to:lengthLimit:tryAllPaths:)@<X0>(void *a1@<X0>, long long **a2@<X1>, char *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v58 = a4;
  long long v54 = a3;
  uint64_t v51 = a6;
  uint64_t v56 = type metadata accessor for Optional();
  OUTLINED_FUNCTION_0_5();
  uint64_t v52 = v9;
  uint64_t v12 = MEMORY[0x1F4188790](v10, v11);
  long long v55 = (uint64_t *)((char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v12, v14);
  uint64_t v16 = (char *)&v48 - v15;
  Swift::Int v18 = *a2;
  BOOL v17 = a2[1];
  uint64_t v19 = a1[3];
  v59 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  swift_getDynamicType();
  TypeInformation.init(for:)((uint64_t)&v65);
  char v20 = v68;
  unint64_t v21 = v69;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v57 = a5;
  TypeInformation.init(for:)((uint64_t)&v65);
  char v22 = (long long *)v68;
  uint64_t v23 = v69;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = v18;
  BOOL v25 = v18 == v22 && v17 == v23;
  uint64_t v26 = 0x1EA5CA000uLL;
  uint64_t v27 = &static TypeIdentifier.any;
  if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (one-time initialization token for any != -1) {
      goto LABEL_49;
    }
    goto LABEL_7;
  }
LABEL_13:
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v31 = v20;
  uint64_t v32 = (uint64_t)v24;
  BOOL v33 = v20 == (uint64_t *)v24 && v21 == v17;
  if (v33 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    goto LABEL_26;
  }
  if (*(void *)(v26 + 2344) != -1) {
    swift_once();
  }
  BOOL v34 = v24 == (long long *)static TypeIdentifier.any && v17 == *(long long **)algn_1EA5CB238;
  if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_26:
    outlined init with copy of Any((uint64_t)v59, (uint64_t)&v65);
    uint64_t v35 = v57;
    if (swift_dynamicCast())
    {
      __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v35);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_25_0();
      return v36();
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 1, 1, v35);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v16, v56);
  }
  unint64_t v65 = (unint64_t)v20;
  *(void *)&long long v66 = v21;
  *(void *)&long long v62 = v32;
  *((void *)&v62 + 1) = v17;
  char v20 = v53;
  OUTLINED_FUNCTION_0_7();
  uint64_t v26 = v32;
  uint64_t v27 = v31;
  uint64_t v16 = (char *)(*(uint64_t (**)(unint64_t *, long long *, char *, void))(v38 + 224))(&v65, &v62, v54, v58 & 1);
  uint64_t v24 = (long long *)*((void *)v16 + 2);
  if (v24)
  {
    swift_bridgeObjectRelease();
    long long v54 = v16 + 32;
    BOOL v17 = v61;
    uint64_t v53 = (uint64_t *)&v62 + 1;
    char v22 = &v66;
    uint64_t v50 = (void (**)(uint64_t *, uint64_t))(v52 + 8);
    swift_bridgeObjectRetain();
    uint64_t v23 = 0;
    uint64_t v52 = MEMORY[0x1E4FBC840] + 8;
    unint64_t v49 = 0x80000001C9EB8680;
    while (1)
    {
      if (v23 == v24)
      {
        long long v63 = 0u;
        long long v64 = 0u;
        uint64_t v23 = v24;
        long long v62 = 0u;
      }
      else
      {
        if ((unint64_t)v23 >= *((void *)v16 + 2))
        {
          __break(1u);
LABEL_49:
          swift_once();
LABEL_7:
          if (v22 == (long long *)*v27 && v23 == (long long *)v27[1]) {
            goto LABEL_13;
          }
          char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v29 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
            OUTLINED_FUNCTION_20_1();
            *(void *)uint64_t v30 = 0xD000000000000040;
            *(void *)(v30 + 8) = 0x80000001C9EB8600;
            goto LABEL_46;
          }
          goto LABEL_14;
        }
        outlined init with copy of Transforming((uint64_t)&v54[40 * (void)v23], (uint64_t)v61);
        *(void *)&long long v62 = v23;
        outlined init with take of Transforming(v61, (uint64_t)v53);
        uint64_t v23 = (long long *)((char *)v23 + 1);
      }
      outlined init with take of (offset: Int, element: Transforming)?((uint64_t)&v62, (uint64_t)&v65);
      if (!v67)
      {
        swift_bridgeObjectRelease_n();
        lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
        OUTLINED_FUNCTION_20_1();
        *(void *)uint64_t v30 = 0xD000000000000021;
        *(void *)(v30 + 8) = 0x80000001C9EB8650;
        goto LABEL_46;
      }
      unint64_t v21 = (long long *)v65;
      outlined init with take of Transforming(&v66, (uint64_t)&v62);
      uint64_t v26 = *((void *)&v63 + 1);
      uint64_t v27 = (uint64_t *)v64;
      __swift_project_boxed_opaque_existential_1(&v62, *((uint64_t *)&v63 + 1));
      unint64_t v39 = v70;
      ((void (*)(uint64_t *__return_ptr, void *, uint64_t, uint64_t *))v27[3])(&v60, v59, v26, v27);
      char v20 = v39;
      if (!v39)
      {
        uint64_t v27 = v55;
        uint64_t v26 = v57;
        if (swift_dynamicCast())
        {
          __swift_storeEnumTagSinglePayload((uint64_t)v27, 0, 1, v26);
          swift_bridgeObjectRelease_n();
          OUTLINED_FUNCTION_25_0();
          v47();
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
        }
        __swift_storeEnumTagSinglePayload((uint64_t)v27, 1, 1, v26);
        (*v50)(v27, v56);
        lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
        char v20 = (uint64_t *)OUTLINED_FUNCTION_20_1();
        unint64_t v40 = v49;
        *(void *)uint64_t v41 = 0xD000000000000026;
        *(void *)(v41 + 8) = v40;
        *(unsigned char *)(v41 + 16) = 0;
        swift_willThrow();
      }
      if ((v58 & 1) == 0 || v21 == (long long *)(*((void *)v16 + 2) - 1))
      {
        swift_bridgeObjectRelease_n();
        swift_willThrow();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
      }
      unint64_t v70 = 0;

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v65 = 0;
  *(void *)&long long v66 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  unint64_t v65 = 0xD000000000000021;
  *(void *)&long long v66 = 0x80000001C9EB86B0;
  *(void *)&long long v62 = v31;
  *((void *)&v62 + 1) = v21;
  v42._uint64_t countAndFlagsBits = TypeIdentifier.description.getter();
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v43._uint64_t countAndFlagsBits = 544175136;
  v43._object = (void *)0xE400000000000000;
  String.append(_:)(v43);
  *(void *)&long long v62 = v26;
  *((void *)&v62 + 1) = v17;
  v44._uint64_t countAndFlagsBits = TypeIdentifier.description.getter();
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  unint64_t v45 = v65;
  uint64_t v46 = v66;
  lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
  OUTLINED_FUNCTION_20_1();
  *(void *)uint64_t v30 = v45;
  *(void *)(v30 + 8) = v46;
LABEL_46:
  *(unsigned char *)(v30 + 16) = 0;
  return swift_willThrow();
}

uint64_t TransformationRegistry.namedTransformation(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  Swift::UInt v6 = a1[2];
  uint64_t result = swift_beginAccess();
  uint64_t v8 = *(void *)(v2 + 24);
  if (*(void *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v4, v6);
    if (v10)
    {
      outlined init with copy of Transforming(*(void *)(v8 + 56) + 40 * v9, a2);
    }
    else
    {
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t static TransformationRegistry.defaultLengthLimit.getter()
{
  return 5;
}

__n128 *TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v7 = *a2;
  unint64_t v6 = a2[1];
  BOOL v8 = *a1 == *a2 && v4 == v6;
  if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (one-time initialization token for any != -1) {
      swift_once();
    }
    BOOL v11 = v7 == static TypeIdentifier.any && v6 == *(void *)algn_1EA5CB238;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v244 = v5;
      unint64_t v245 = v4;
      *(void *)&long long v240 = v7;
      *((void *)&v240 + 1) = v6;
      uint64_t v12 = (__n128 *)TransformationRegistry.findBasicTransformation(from:to:lengthLimit:findAllPaths:)(&v244, &v240, a3, a4 & 1);
      if (v12[1].n128_u64[0]) {
        return v12;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      specialized TypeInformation.init<A>(encoding:)(v5, v4, (uint64_t)&v244);
      int v16 = v244;
      int v17 = BYTE1(v244);
      uint64_t v200 = v245;
      uint64_t v222 = v247;
      uint64_t v228 = v246;
      uint64_t v216 = v248;
      swift_bridgeObjectRetain();
      specialized TypeInformation.init<A>(encoding:)(v7, v6, (uint64_t)&v244);
      unint64_t v18 = v245;
      uint64_t v234 = v247;
      if (v244 == 1)
      {
        uint64_t v209 = v248;
        if (v16)
        {
          *(void *)&long long v240 = v200;
          *((void *)&v240 + 1) = v228;
          uint64_t v242 = v245;
          unint64_t v243 = v246;
          OUTLINED_FUNCTION_0_7();
          uint64_t v201 = *(void *)(v19 + 224);
          swift_bridgeObjectRetain();
          uint64_t v20 = swift_bridgeObjectRetain();
          uint64_t v28 = OUTLINED_FUNCTION_10_5(v20, v21, v22, v23, v24, v25, v26, v27, v194, v201, v209, v216, v222, v228, v234, v240);
          uint64_t v30 = v29(v28);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_13_5();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          uint64_t v31 = OUTLINED_FUNCTION_11_5((uint64_t)&v240);
          if (v241)
          {
            OUTLINED_FUNCTION_15_2(v31, v32, v33, v34, v35, v36, v37);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
            uint64_t v12 = (__n128 *)OUTLINED_FUNCTION_4_8();
            OUTLINED_FUNCTION_3_8(v12, (__n128)xmmword_1C9EB3FF0, v38, v39, v40, v41, v42, v43, v44);
            uint64_t v45 = OUTLINED_FUNCTION_14_5();
            OUTLINED_FUNCTION_5_6(v45, v46, v47, v48, v49, v50, v51, v52, v195, v202, v210, v217, v223, v229, v235, v240);
            v12[3].n128_u64[1] = (unint64_t)&unk_1F2429DB8;
            v12[4].n128_u64[0] = (unint64_t)&protocol witness table for TransformationRegistry.GenericTransformer;
            uint64_t v53 = (void *)OUTLINED_FUNCTION_12_5();
            long long v54 = OUTLINED_FUNCTION_2_12(v53);
            long long v55 = partial apply for closure #2 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:);
LABEL_31:
            v54[6] = v55;
            v54[7] = v30;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v244);
            return v12;
          }
        }
        else
        {
          unint64_t v90 = v246;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)&long long v240 = v5;
          *((void *)&v240 + 1) = v4;
          uint64_t v242 = v18;
          unint64_t v243 = v90;
          OUTLINED_FUNCTION_0_7();
          v92 = *(uint64_t (**)(char *))(v91 + 224);
          uint64_t v93 = swift_bridgeObjectRetain();
          v101 = OUTLINED_FUNCTION_1_10(v93, v94, v95, v96, v97, v98, v99, v100, v194, v200, v209, v216, v222, v228, v234, v240);
          uint64_t v30 = v92(v101);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_13_5();
          uint64_t v102 = OUTLINED_FUNCTION_11_5((uint64_t)&v240);
          if (v241)
          {
            OUTLINED_FUNCTION_15_2(v102, v103, v104, v105, v106, v107, v108);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
            uint64_t v12 = (__n128 *)OUTLINED_FUNCTION_4_8();
            OUTLINED_FUNCTION_3_8(v12, (__n128)xmmword_1C9EB3FF0, v109, v110, v111, v112, v113, v114, v115);
            uint64_t v116 = OUTLINED_FUNCTION_14_5();
            OUTLINED_FUNCTION_5_6(v116, v117, v118, v119, v120, v121, v122, v123, v197, v205, v213, v219, v225, v231, v237, v240);
            v12[3].n128_u64[1] = (unint64_t)&unk_1F2429DB8;
            v12[4].n128_u64[0] = (unint64_t)&protocol witness table for TransformationRegistry.GenericTransformer;
            v124 = (void *)OUTLINED_FUNCTION_12_5();
            long long v54 = OUTLINED_FUNCTION_2_12(v124);
            long long v55 = partial apply for closure #3 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:);
            goto LABEL_31;
          }
        }
      }
      else if (BYTE1(v244))
      {
        uint64_t v211 = v248;
        if (v17)
        {
          *(void *)&long long v240 = v200;
          *((void *)&v240 + 1) = v228;
          uint64_t v242 = v245;
          unint64_t v243 = v246;
          OUTLINED_FUNCTION_0_7();
          uint64_t v203 = *(void *)(v56 + 224);
          swift_bridgeObjectRetain();
          uint64_t v57 = swift_bridgeObjectRetain();
          unint64_t v65 = OUTLINED_FUNCTION_10_5(v57, v58, v59, v60, v61, v62, v63, v64, v194, v203, v211, v216, v222, v228, v234, v240);
          uint64_t v30 = v66(v65);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_13_5();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          uint64_t v67 = OUTLINED_FUNCTION_11_5((uint64_t)&v240);
          if (v241)
          {
            OUTLINED_FUNCTION_15_2(v67, v68, v69, v70, v71, v72, v73);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
            uint64_t v12 = (__n128 *)OUTLINED_FUNCTION_4_8();
            OUTLINED_FUNCTION_3_8(v12, (__n128)xmmword_1C9EB3FF0, v74, v75, v76, v77, v78, v79, v80);
            uint64_t v81 = OUTLINED_FUNCTION_14_5();
            OUTLINED_FUNCTION_5_6(v81, v82, v83, v84, v85, v86, v87, v88, v196, v204, v212, v218, v224, v230, v236, v240);
            v12[3].n128_u64[1] = (unint64_t)&unk_1F2429DB8;
            v12[4].n128_u64[0] = (unint64_t)&protocol witness table for TransformationRegistry.GenericTransformer;
            v89 = (void *)OUTLINED_FUNCTION_12_5();
            long long v54 = OUTLINED_FUNCTION_2_12(v89);
            long long v55 = partial apply for closure #4 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:);
            goto LABEL_31;
          }
        }
        else
        {
          unint64_t v159 = v246;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)&long long v240 = v5;
          *((void *)&v240 + 1) = v4;
          uint64_t v242 = v18;
          unint64_t v243 = v159;
          OUTLINED_FUNCTION_0_7();
          v161 = *(uint64_t (**)(char *))(v160 + 224);
          uint64_t v162 = swift_bridgeObjectRetain();
          v170 = OUTLINED_FUNCTION_1_10(v162, v163, v164, v165, v166, v167, v168, v169, v194, v200, v211, v216, v222, v228, v234, v240);
          uint64_t v30 = v161(v170);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_13_5();
          uint64_t v171 = OUTLINED_FUNCTION_11_5((uint64_t)&v240);
          if (v241)
          {
            OUTLINED_FUNCTION_15_2(v171, v172, v173, v174, v175, v176, v177);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
            uint64_t v12 = (__n128 *)OUTLINED_FUNCTION_4_8();
            OUTLINED_FUNCTION_3_8(v12, (__n128)xmmword_1C9EB3FF0, v178, v179, v180, v181, v182, v183, v184);
            uint64_t v185 = OUTLINED_FUNCTION_14_5();
            OUTLINED_FUNCTION_5_6(v185, v186, v187, v188, v189, v190, v191, v192, v199, v207, v215, v221, v227, v233, v239, v240);
            v12[3].n128_u64[1] = (unint64_t)&unk_1F2429DB8;
            v12[4].n128_u64[0] = (unint64_t)&protocol witness table for TransformationRegistry.GenericTransformer;
            v193 = (void *)OUTLINED_FUNCTION_12_5();
            long long v54 = OUTLINED_FUNCTION_2_12(v193);
            long long v55 = partial apply for closure #5 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:);
            goto LABEL_31;
          }
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v16)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return (__n128 *)MEMORY[0x1E4FBC860];
        }
        *(void *)&long long v240 = v200;
        *((void *)&v240 + 1) = v228;
        uint64_t v242 = v7;
        unint64_t v243 = v6;
        OUTLINED_FUNCTION_0_7();
        v126 = *(uint64_t (**)(char *))(v125 + 224);
        uint64_t v127 = swift_bridgeObjectRetain();
        v135 = OUTLINED_FUNCTION_1_10(v127, v128, v129, v130, v131, v132, v133, v134, v194, v200, v208, v216, v222, v228, v234, v240);
        uint64_t v30 = v126(v135);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_13_5();
        uint64_t v136 = OUTLINED_FUNCTION_11_5((uint64_t)&v240);
        if (v241)
        {
          OUTLINED_FUNCTION_15_2(v136, v137, v138, v139, v140, v141, v142);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
          uint64_t v12 = (__n128 *)OUTLINED_FUNCTION_4_8();
          OUTLINED_FUNCTION_3_8(v12, (__n128)xmmword_1C9EB3FF0, v143, v144, v145, v146, v147, v148, v149);
          uint64_t v150 = OUTLINED_FUNCTION_14_5();
          OUTLINED_FUNCTION_5_6(v150, v151, v152, v153, v154, v155, v156, v157, v198, v206, v214, v220, v226, v232, v238, v240);
          v12[3].n128_u64[1] = (unint64_t)&unk_1F2429DB8;
          v12[4].n128_u64[0] = (unint64_t)&protocol witness table for TransformationRegistry.GenericTransformer;
          v158 = (void *)OUTLINED_FUNCTION_12_5();
          long long v54 = OUTLINED_FUNCTION_2_12(v158);
          long long v55 = partial apply for closure #6 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:);
          goto LABEL_31;
        }
      }
      _s13SiriUtilities12Transforming_pSgWOhTm_0((uint64_t)&v240, &demangling cache variable for type metadata for Transforming?);
      return (__n128 *)MEMORY[0x1E4FBC860];
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
  uint64_t v12 = (__n128 *)OUTLINED_FUNCTION_4_8();
  v12[1] = (__n128)xmmword_1C9EB3FF0;
  v12[3].n128_u64[1] = (unint64_t)&unk_1F2429DB8;
  v12[4].n128_u64[0] = (unint64_t)&protocol witness table for TransformationRegistry.GenericTransformer;
  uint64_t v13 = (void *)OUTLINED_FUNCTION_12_5();
  uint64_t v14 = OUTLINED_FUNCTION_2_12(v13);
  v14[6] = closure #1 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:);
  v14[7] = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v12;
}

uint64_t closure #1 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of Any(a1, a2);
}

double specialized Collection.first.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    outlined init with copy of Transforming(a1 + 32, a2);
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t closure #2 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  outlined init with copy of Any(a1, (uint64_t)&v13);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  swift_dynamicCast();
  a3[3] = v6;
  uint64_t v7 = swift_allocObject();
  BOOL v8 = (_OWORD *)(v7 + 16);
  *a3 = v7;
  outlined init with copy of Any?((uint64_t)v15, (uint64_t)&v13);
  if (v14)
  {
    outlined init with take of Any(&v13, v12);
    uint64_t v9 = a2[3];
    uint64_t v10 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v9);
    (*(void (**)(_OWORD *, uint64_t, uint64_t))(v10 + 24))(v12, v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    if (v3)
    {
      _s13SiriUtilities12Transforming_pSgWOhTm_0((uint64_t)v15, &demangling cache variable for type metadata for Any?);
      return __swift_deallocate_boxed_opaque_existential_0((uint64_t)a3);
    }
  }
  else
  {
    *BOOL v8 = 0u;
    v8[1] = 0u;
  }
  return _s13SiriUtilities12Transforming_pSgWOhTm_0((uint64_t)v15, &demangling cache variable for type metadata for Any?);
}

uint64_t closure #3 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  a3[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  *a3 = swift_allocObject();
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v7);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(a1, v7, v8);
  if (v3) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)a3);
  }
  return result;
}

uint64_t closure #4 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  outlined init with copy of Any(a1, (uint64_t)v13);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  uint64_t v7 = swift_dynamicCast();
  if (v7) {
    uint64_t v9 = v12[5];
  }
  else {
    uint64_t v9 = MEMORY[0x1E4FBC860];
  }
  MEMORY[0x1F4188790](v7, v8);
  _OWORD v12[2] = a2;
  uint64_t v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayypG_ypsAE_pTg5((void (*)(_OWORD *__return_ptr, uint64_t, uint64_t *))partial apply for closure #1 in closure #4 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:), (uint64_t)v12, v9);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v3)
  {
    a3[3] = v6;
    *a3 = v10;
  }
  return result;
}

uint64_t closure #1 in closure #4 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v6);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, v6, v7);
  if (v3) {
    *a3 = v3;
  }
  return result;
}

uint64_t closure #5 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1C9EB3FF0;
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(a1, v8, v9);
  if (v3)
  {
    *(void *)(v7 + 16) = 0;
    return swift_release();
  }
  else
  {
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    a3[3] = result;
    *a3 = v7;
  }
  return result;
}

_OWORD *closure #6 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  outlined init with copy of Any(a1, (uint64_t)&v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  swift_dynamicCast();
  outlined init with copy of Any?((uint64_t)v14, (uint64_t)&v12);
  if (!v13)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    _s13SiriUtilities12Transforming_pSgWOhTm_0((uint64_t)v14, &demangling cache variable for type metadata for Any?);
LABEL_5:
    _s13SiriUtilities12Transforming_pSgWOhTm_0((uint64_t)&v15, &demangling cache variable for type metadata for Any?);
    lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    swift_allocError();
    *(void *)uint64_t v9 = 0xD000000000000033;
    *(void *)(v9 + 8) = 0x80000001C9EB8760;
    *(unsigned char *)(v9 + 16) = 0;
    return (_OWORD *)swift_willThrow();
  }
  outlined init with take of Any(&v12, v11);
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v6);
  (*(void (**)(long long *__return_ptr, _OWORD *, uint64_t, uint64_t))(v7 + 24))(&v15, v11, v6, v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  if (v3) {
    return (_OWORD *)_s13SiriUtilities12Transforming_pSgWOhTm_0((uint64_t)v14, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v10 = *((void *)&v16 + 1);
  _s13SiriUtilities12Transforming_pSgWOhTm_0((uint64_t)v14, &demangling cache variable for type metadata for Any?);
  if (!v10) {
    goto LABEL_5;
  }
  return outlined init with take of Any(&v15, a3);
}

uint64_t TransformationRegistry.findBasicTransformation(from:to:lengthLimit:findAllPaths:)(uint64_t *a1, void *a2, uint64_t a3, char a4)
{
  void (*v25)(long long *__return_ptr, uint64_t, uint64_t);
  char v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  unint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  void *v35;
  uint64_t v36;
  Class isa;
  void (*v38)(void);
  uint64_t v39;
  uint64_t v40;
  Class v41;
  uint64_t v42;
  void (*v43)(void);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(void);
  char v48;
  uint64_t v49;
  Class v50;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v52;
  NSObject *v53;
  NSObject *v54;
  Class v55;
  void (*v57)(void);
  char v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(long long *__return_ptr, uint64_t, uint64_t);
  char v65;
  uint64_t v66;
  void (*v67)(uint64_t);
  unint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  objc_class *v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  long long v102;
  ValueMetadata *v103;
  _UNKNOWN **v104;
  long long v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  uint64_t v108 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = a2[1];
  if (*a1 == *a2 && v7 == v8) {
    return MEMORY[0x1E4FBC860];
  }
  OUTLINED_FUNCTION_23_0();
  uint64_t v96 = v10;
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    return MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TypeIdentifier>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9EB3FF0;
  *(void *)(inited + 32) = v6;
  *(void *)(inited + 40) = v7;
  swift_bridgeObjectRetain();
  v101 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  *(void *)&uint64_t v105 = v6;
  *((void *)&v105 + 1) = v7;
  uint64_t v87 = v7;
  swift_bridgeObjectRetain();
  v89 = v4;
  uint64_t v14 = TransformationRegistry.findNextSteps(from:ignoringTypes:)((uint64_t *)&v105, v101);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v95 = v8;
  uint64_t v88 = v6;
  if (v15)
  {
    uint64_t v16 = v14 + 32;
    int v17 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      outlined init with copy of Transforming(v16, (uint64_t)&v105);
      __swift_project_boxed_opaque_existential_1(&v105, v106);
      uint64_t v18 = OUTLINED_FUNCTION_6_8();
      v19(v18);
      if ((void)v102 == v96 && *((void *)&v102 + 1) == v8)
      {
        swift_bridgeObjectRelease();
LABEL_26:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
        uint64_t v11 = OUTLINED_FUNCTION_4_8();
        *(_OWORD *)(v11 + 16) = xmmword_1C9EB3FF0;
        outlined init with copy of Transforming((uint64_t)&v105, v11 + 32);
        goto LABEL_82;
      }
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v21) {
        goto LABEL_26;
      }
      uint64_t v22 = v17;
      uint64_t v23 = v106;
      uint64_t v24 = v107;
      __swift_project_boxed_opaque_existential_1(&v105, v106);
      uint64_t v25 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v24 + 16);
      swift_bridgeObjectRetain();
      v25(&v102, v23, v24);
      specialized Set.contains(_:)(v102, *((uint64_t *)&v102 + 1), v101);
      LOBYTE(v23) = v26;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v23)
      {
        uint64_t v8 = v95;
        int v17 = v22;
      }
      else
      {
        __swift_project_boxed_opaque_existential_1(&v105, v106);
        uint64_t v27 = OUTLINED_FUNCTION_6_8();
        v28(v27);
        specialized Set._Variant.insert(_:)();
        swift_bridgeObjectRelease();
        outlined init with copy of Transforming((uint64_t)&v105, (uint64_t)&v102);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
        char v29 = OUTLINED_FUNCTION_4_8();
        *(_OWORD *)(v29 + 16) = xmmword_1C9EB3FF0;
        outlined init with take of Transforming(&v102, v29 + 32);
        int v17 = v22;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_16_1();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          int v17 = v31;
        }
        uint64_t v8 = v95;
        uint64_t v30 = v17[2];
        if (v30 >= v17[3] >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          int v17 = v32;
        }
        v17[2] = v30 + 1;
        v17[v30 + 4] = v29;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v105);
      v16 += 40;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    uint64_t v6 = v88;
  }
  else
  {
    swift_bridgeObjectRelease();
    int v17 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v33 = v17[2];
  if (!v33)
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
LABEL_84:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v11 + 16)) {
      return v11;
    }
    swift_bridgeObjectRelease();
    if (*(void *)(v89 + 32))
    {
      *(void *)&uint64_t v105 = v6;
      *((void *)&v105 + 1) = v87;
      *(void *)&uint64_t v102 = v96;
      *((void *)&v102 + 1) = v95;
      swift_retain();
      uint64_t v11 = TransformationRegistry.findBasicTransformation(from:to:lengthLimit:findAllPaths:)(&v105, &v102, a3, a4 & 1);
      swift_release();
      return v11;
    }
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v11 = MEMORY[0x1E4FBC860];
  unint64_t v90 = a3;
  while (1)
  {
    uint64_t v34 = v17[4];
    swift_bridgeObjectRetain();
    if (!swift_isUniquelyReferenced_nonNull_native() || (unint64_t)(v33 - 1) > v17[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      int v17 = v35;
    }
    swift_arrayDestroy();
    uint64_t v36 = v17[2];
    if (!v36) {
      goto LABEL_53;
    }
    memmove(v17 + 4, v17 + 5, 8 * v36 - 8);
    v17[2] = v36 - 1;
    isa = v34[2].isa;
    if (!isa) {
      goto LABEL_89;
    }
    __swift_project_boxed_opaque_existential_1(&v34[5 * (void)isa - 1].isa, (uint64_t)v34[5 * (void)isa + 2].isa);
    OUTLINED_FUNCTION_7_7();
    v38();
    uint64_t v102 = v105;
    swift_bridgeObjectRetain();
    uint64_t v39 = TransformationRegistry.findNextSteps(from:ignoringTypes:)((uint64_t *)&v102, v101);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v40 = *(void *)(v39 + 16);
    if (v40) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_79:
    uint64_t v33 = v17[2];
    uint64_t v6 = v88;
    if (!v33) {
      goto LABEL_84;
    }
  }
  uint64_t v91 = v17;
  uint64_t v41 = v34[2].isa;
  if (!v41) {
LABEL_90:
  }
    __break(1u);
  uint64_t v42 = v39 + 32;
  v92 = (uint64_t)&v34[5 * (void)v41 - 1];
  uint64_t v93 = v34[2].isa;
  while (1)
  {
    outlined init with copy of Transforming(v42, (uint64_t)&v105);
    __swift_project_boxed_opaque_existential_1(&v105, v106);
    OUTLINED_FUNCTION_17_1();
    v43();
    if (v93 > v34[2].isa)
    {
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
      goto LABEL_90;
    }
    uint64_t v44 = a3;
    uint64_t v45 = v11;
    outlined init with copy of Transforming(v92, (uint64_t)&v102);
    __swift_project_boxed_opaque_existential_1(&v102, (uint64_t)v103);
    OUTLINED_FUNCTION_7_7();
    v46();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
    if (v99 == v97 && v100 == v98)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      uint64_t v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v48 & 1) == 0)
      {
        while (1)
        {
          TransformationChain.outputType.getter((uint64_t)v34);
          __swift_project_boxed_opaque_existential_1(&v105, v106);
          OUTLINED_FUNCTION_17_1();
          v81(v79, v80);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v82 = type metadata accessor for Logger();
          __swift_project_value_buffer(v82, (uint64_t)static Logger.logger);
          uint64_t v34 = Logger.logObject.getter();
          uint64_t v83 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v34, v83))
          {
            uint64_t v84 = swift_slowAlloc();
            *(void *)&uint64_t v102 = swift_slowAlloc();
            *(_DWORD *)uint64_t v84 = 136315650;
            uint64_t v85 = StaticString.description.getter();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v86, (uint64_t *)&v102);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v84 + 12) = 2048;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v84 + 22) = 2080;
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000031, 0x80000001C9EB87A0, (uint64_t *)&v102);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_1C9E4C000, v34, v83, "FatalError at %s:%lu - %s", (uint8_t *)v84, 0x20u);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_3();
            OUTLINED_FUNCTION_3();
          }

          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_53:
          OUTLINED_FUNCTION_0_11();
          _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
        }
      }
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
    uint64_t v49 = swift_initStackObject();
    *(_OWORD *)(v49 + 16) = xmmword_1C9EB3FF0;
    outlined init with copy of Transforming((uint64_t)&v105, v49 + 32);
    uint64_t v50 = v34[2].isa;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (!isUniquelyReferenced_nonNull_native
      || (uint64_t v52 = (unint64_t)v34[3].isa >> 1, v53 = v34, v52 <= (unint64_t)v50))
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, (uint64_t)v50 + 1, 1, (uint64_t)v34);
      uint64_t v53 = v54;
      uint64_t v52 = (unint64_t)v54[3].isa >> 1;
    }
    long long v55 = v53[2].isa;
    if (v52 <= (unint64_t)v55) {
      goto LABEL_88;
    }
    if (v49 + 32 < (unint64_t)&v53[5 * (void)v55 + 9]
      && (unint64_t)&v53[5 * (void)v55 + 4] < v49 + 72)
    {
      goto LABEL_53;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transforming);
    swift_arrayInitWithCopy();
    ++v53[2].isa;
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    __swift_project_boxed_opaque_existential_1(&v105, v106);
    OUTLINED_FUNCTION_7_7();
    v57();
    if ((void)v102 == v96 && *((void *)&v102 + 1) == v95) {
      break;
    }
    uint64_t v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v11 = v45;
    if (v59) {
      goto LABEL_61;
    }
    a3 = v44;
LABEL_67:
    if ((uint64_t)v53[2].isa >= a3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v63 = v106;
      uint64_t v62 = v107;
      __swift_project_boxed_opaque_existential_1(&v105, v106);
      uint64_t v64 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v62 + 16);
      swift_bridgeObjectRetain();
      v64(&v102, v63, v62);
      specialized Set.contains(_:)(v102, *((uint64_t *)&v102 + 1), v101);
      LOBYTE(v63) = v65;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v63)
      {
        swift_bridgeObjectRelease();
        a3 = v90;
      }
      else
      {
        if ((a4 & 1) == 0)
        {
          __swift_project_boxed_opaque_existential_1(&v105, v106);
          long long v66 = OUTLINED_FUNCTION_6_8();
          v67(v66);
          specialized Set._Variant.insert(_:)();
          swift_bridgeObjectRelease();
        }
        a3 = v90;
        uint64_t v69 = v91[2];
        uint64_t v68 = v91[3];
        if (v69 >= v68 >> 1)
        {
          OUTLINED_FUNCTION_24_0(v68);
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v91 = v78;
        }
        v91[2] = v69 + 1;
        v91[v69 + 4] = v53;
      }
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v105);
    v42 += 40;
    if (!--v40)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v17 = v91;
      goto LABEL_79;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = v45;
LABEL_61:
  if (a4)
  {
    a3 = v44;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v70 = OUTLINED_FUNCTION_16_1();
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v70, v71, v72, v11);
      uint64_t v11 = v73;
    }
    uint64_t v61 = *(void *)(v11 + 16);
    uint64_t v60 = *(void *)(v11 + 24);
    if (v61 >= v60 >> 1)
    {
      uint64_t v74 = OUTLINED_FUNCTION_24_0(v60);
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v74, v75, v76, v11);
      uint64_t v11 = v77;
    }
    uint64_t v104 = &protocol witness table for TransformationChain;
    uint64_t v103 = &type metadata for TransformationChain;
    *(void *)&uint64_t v102 = v53;
    *(void *)(v11 + 16) = v61 + 1;
    outlined init with take of Transforming(&v102, v11 + 40 * v61 + 32);
    goto LABEL_67;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = OUTLINED_FUNCTION_4_8();
  *(_OWORD *)(v11 + 16) = xmmword_1C9EB3FF0;
  *(void *)(v11 + 56) = &type metadata for TransformationChain;
  *(void *)(v11 + 64) = &protocol witness table for TransformationChain;
  *(void *)(v11 + 32) = v53;
LABEL_82:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v105);
  return v11;
}

uint64_t TransformationRegistry.findNextSteps(from:ignoringTypes:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = MEMORY[0x1E4FBC860];
  uint64_t v34 = MEMORY[0x1E4FBC860];
  swift_beginAccess();
  uint64_t v7 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = specialized Dictionary.subscript.getter(v4, v5, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      uint64_t v10 = v8 + 32;
      do
      {
        outlined init with copy of Transforming(v10, (uint64_t)v33);
        __swift_project_boxed_opaque_existential_1(v33, v33[3]);
        OUTLINED_FUNCTION_23_0();
        OUTLINED_FUNCTION_7_7();
        v11();
        specialized Set.contains(_:)(v30[0], v30[1], a2);
        char v13 = v12;
        swift_bridgeObjectRelease();
        if ((v13 & 1) == 0)
        {
          outlined init with copy of Transforming((uint64_t)v33, (uint64_t)v30);
          uint64_t v14 = v34;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            char v24 = OUTLINED_FUNCTION_16_1();
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24, v25, v26, v14);
            uint64_t v14 = v27;
            uint64_t v34 = v27;
          }
          unint64_t v16 = *(void *)(v14 + 16);
          unint64_t v15 = *(void *)(v14 + 24);
          if (v16 >= v15 >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1, v14);
            uint64_t v34 = v28;
          }
          uint64_t v17 = v31;
          uint64_t v18 = v32;
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v30, v31);
          OUTLINED_FUNCTION_0_5();
          MEMORY[0x1F4188790](v19, v20);
          uint64_t v22 = (char *)v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *))(v23 + 16))(v22);
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, (uint64_t)v22, &v34, v17, v18);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
        v10 += 40;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
      return v34;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return v6;
}

uint64_t TransformationRegistry.GenericTransformer.typeErasedTransform(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t protocol witness for Transforming.inputType.getter in conformance TransformationRegistry.GenericTransformer@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Transforming.outputType.getter in conformance TransformationRegistry.GenericTransformer@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *a1 = *(void *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Transforming.typeErasedTransform(_:) in conformance TransformationRegistry.GenericTransformer()
{
  return TransformationRegistry.GenericTransformer.typeErasedTransform(_:)();
}

uint64_t TransformationRegistry.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 32);
  *(void *)(v0 + 32) = 0;
  if (v1)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native()) {
        break;
      }
      uint64_t v2 = *(void *)(v1 + 32);
      swift_retain();
      swift_release();
      uint64_t v1 = v2;
    }
    while (v2);
  }
  swift_release();
  return v0;
}

uint64_t TransformationRegistry.__deallocating_deinit()
{
  TransformationRegistry.deinit();

  return MEMORY[0x1F4186488](v0, 40, 7);
}

uint64_t specialized TypeInformation.init<A>(encoding:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t v6 = OUTLINED_FUNCTION_22_0();
  uint64_t v8 = v7;
  swift_bridgeObjectRetain();
  uint64_t v9 = OUTLINED_FUNCTION_22_0();
  uint64_t v11 = v10;
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = 26451;
  v12._object = (void *)0xE200000000000000;
  Swift::Bool v13 = String.hasSuffix(_:)(v12);
  if (v13)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    specialized BidirectionalCollection.dropLast(_:)(2);
    lazy protocol witness table accessor for type Substring and conformance Substring();
    uint64_t v14 = String.init<A>(_:)();
    uint64_t v16 = v15;
    uint64_t result = swift_bridgeObjectRelease();
    char v18 = 0;
  }
  else
  {
    v19._uint64_t countAndFlagsBits = 7954771;
    v19._object = (void *)0xE300000000000000;
    if (String.hasPrefix(_:)(v19)
      && (swift_bridgeObjectRetain(),
          v20._uint64_t countAndFlagsBits = 71,
          v20._object = (void *)0xE100000000000000,
          Swift::Bool v21 = String.hasSuffix(_:)(v20),
          swift_bridgeObjectRelease(),
          v21))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      unint64_t v22 = specialized Collection.dropFirst(_:)(3uLL, a1, a2);
      char v18 = 1;
      specialized Collection.dropLast(_:)(1, v22, v23);
      lazy protocol witness table accessor for type Substring and conformance Substring();
      uint64_t v14 = String.init<A>(_:)();
      uint64_t v16 = v24;
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      char v18 = 0;
      uint64_t v14 = v9;
      uint64_t v16 = v11;
    }
  }
  *(unsigned char *)a3 = v13;
  *(unsigned char *)(a3 + 1) = v18;
  *(void *)(a3 + 8) = v14;
  *(void *)(a3 + 16) = v16;
  *(void *)(a3 + 24) = v9;
  *(void *)(a3 + 32) = v11;
  *(void *)(a3 + 40) = v6;
  *(void *)(a3 + 48) = v8;
  return result;
}

uint64_t specialized BidirectionalCollection.dropLast(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    uint64_t v1 = String.subscript.getter();
    swift_bridgeObjectRelease();
    return v1;
  }
  return result;
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0) {
      uint64_t v3 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
      uint64_t v4 = 11;
    }
    unint64_t v5 = v4 | (v3 << 16);
    uint64_t result = String.index(_:offsetBy:limitedBy:)();
    if (v6) {
      uint64_t result = v5;
    }
    if (4 * v3 >= result >> 14)
    {
      uint64_t v7 = String.subscript.getter();
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Collection.dropLast(_:)(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = result;
  uint64_t result = Substring.distance(from:to:)();
  if (__OFSUB__(result, v5))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t result = Substring.index(_:offsetBy:limitedBy:)();
  if (v6) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = result;
  }
  if (v7 >> 14 >= a2 >> 14)
  {
    uint64_t v8 = Substring.subscript.getter();
    swift_bridgeObjectRelease();
    return v8;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transforming);
  swift_arrayDestroy();

  return MEMORY[0x1F4186488](v0, 32, 7);
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return MEMORY[0x1F4183E80]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    uint64_t *v1 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  if (result + 1 > *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = OUTLINED_FUNCTION_8_7(a1, a2, a3, a4);
  uint64_t result = outlined init with take of Any(v7, (_OWORD *)(v6 + 32 * v5));
  uint64_t v9 = *(void *)(a4 + 16);
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    *(void *)(a4 + 16) = v11;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  unint64_t v5 = (void *)(a5[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, void *a6)
{
  a6[(a1 >> 6) + 8] |= 1 << a1;
  BOOL v7 = (void *)(a6[6] + 24 * a1);
  *BOOL v7 = a2;
  v7[1] = a3;
  long long v7[2] = a4;
  uint64_t result = outlined init with take of Transforming(a5, a6[7] + 40 * a1);
  uint64_t v9 = a6[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a6[2] = v11;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  OUTLINED_FUNCTION_19_1(a1, a4 + 8 * (a1 >> 6));
  type metadata accessor for CodingUserInfoKey();
  OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_25_0();
  v7();
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(*(void *)(a4 + 56) + 32 * a1));
  uint64_t v9 = *(void *)(a4 + 16);
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    *(void *)(a4 + 16) = v11;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  OUTLINED_FUNCTION_19_1(a1, a5 + 8 * (a1 >> 6));
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_25_0();
  uint64_t result = v9();
  uint64_t v11 = (void *)(*(void *)(a5 + 56) + 16 * a1);
  *uint64_t v11 = a3;
  v11[1] = a4;
  uint64_t v12 = *(void *)(a5 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    *(void *)(a5 + 16) = v14;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result = OUTLINED_FUNCTION_8_7(a1, a2, a3, a4);
  *(void *)(v7 + 8 * result) = v6;
  uint64_t v8 = *(void *)(v5 + 16);
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    *(void *)(v5 + 16) = v10;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.updateValue(_:forKey:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, Swift::UInt a4@<X3>, uint64_t a5@<X8>)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v5;
  uint64_t *v5 = 0x8000000000000000;
  specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(a1, a2, a3, a4, isUniquelyReferenced_nonNull_native, a5);
  uint64_t *v5 = v13;

  return swift_bridgeObjectRelease();
}

uint64_t specialized _NativeDictionary.updateValue(_:forKey:isUnique:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, Swift::UInt a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7 = (void **)v6;
  uint64_t v14 = (void *)*v6;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4);
  uint64_t v17 = v14[2];
  BOOL v18 = (v16 & 1) == 0;
  Swift::Int v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v20 = v15;
  char v21 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<TransformationIdentifier, Transforming>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v19)) {
    goto LABEL_5;
  }
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4);
  if ((v21 & 1) != (v23 & 1))
  {
LABEL_13:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v20 = v22;
LABEL_5:
  uint64_t v24 = (uint64_t)*v7;
  if (v21)
  {
    outlined init with take of Transforming((long long *)(*(void *)(v24 + 56) + 40 * v20), a6);
    uint64_t v25 = *(void *)(v24 + 56) + 40 * v20;
    return outlined init with take of Transforming(a1, v25);
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v20, a2, a3, a4, a1, *v7);
    *(void *)(a6 + 32) = 0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    return swift_bridgeObjectRetain();
  }
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_0, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return outlined init with take of Transforming(&v12, v10 + 40 * a1 + 32);
}

unint64_t lazy protocol witness table accessor for type TransformationError and conformance TransformationError()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformationError and conformance TransformationError;
  if (!lazy protocol witness table cache variable for type TransformationError and conformance TransformationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationError and conformance TransformationError);
  }
  return result;
}

uint64_t outlined init with take of (offset: Int, element: Transforming)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Transforming)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C9E74D68()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return MEMORY[0x1F4186498](v0, 56, 7);
}

_OWORD *partial apply for closure #6 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return closure #6 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)(a1, (void *)(v2 + 16), a2);
}

uint64_t sub_1C9E74DBC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #5 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #5 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)(a1, (void *)(v2 + 16), a2);
}

uint64_t partial apply for closure #4 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #4 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)(a1, v2 + 16, a2);
}

uint64_t partial apply for closure #3 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #3 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)(a1, (void *)(v2 + 16), a2);
}

uint64_t partial apply for closure #2 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)(a1, (void *)(v2 + 16), a2);
}

uint64_t type metadata accessor for TransformationRegistry()
{
  return self;
}

uint64_t method lookup function for TransformationRegistry(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TransformationRegistry);
}

uint64_t dispatch thunk of TransformationRegistry.__allocating_init(fallback:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of TransformationRegistry.register(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of TransformationRegistry.register(id:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of TransformationRegistry.canTransform(from:to:lengthLimit:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of TransformationRegistry.transform<A>(_:to:lengthLimit:tryAllPaths:)()
{
  OUTLINED_FUNCTION_0_7();
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of TransformationRegistry.namedTransformation(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t destroy for TransformationRegistry.GenericTransformer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for TransformationRegistry.GenericTransformer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for TransformationRegistry.GenericTransformer(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TransformationRegistry.GenericTransformer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TransformationRegistry.GenericTransformer(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TransformationRegistry.GenericTransformer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for TransformationRegistry.GenericTransformer()
{
  return &unk_1F2429DB8;
}

uint64_t sub_1C9E751F0()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _s13SiriUtilities12Transforming_pSgWOhTm_0(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_18_1();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t __swift_deallocate_boxed_opaque_existential_0(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    JUMPOUT(0x1CB792FA0);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #4 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)(uint64_t a1, void *a2)
{
  return closure #1 in closure #4 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)(a1, *(void **)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

char *OUTLINED_FUNCTION_1_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  return &a16;
}

void *OUTLINED_FUNCTION_2_12(void *result)
{
  *(void *)(v5 + 32) = result;
  result[2] = v4;
  result[3] = v2;
  result[4] = v3;
  result[5] = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_3_8(__n128 *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  a1[1] = a2;
  return outlined init with copy of Transforming((uint64_t)va1, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_4_8()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_5_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, long long a16)
{
  return outlined init with take of Transforming(&a16, a1 + 16);
}

uint64_t OUTLINED_FUNCTION_6_8()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_8_7(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 8 * (result >> 6) + 64) |= 1 << result;
  *(void *)(*(void *)(a4 + 48) + 8 * result) = a2;
  return result;
}

char *OUTLINED_FUNCTION_10_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  return &a16;
}

uint64_t OUTLINED_FUNCTION_11_5@<X0>(uint64_t a1@<X8>)
{
  specialized Collection.first.getter(v1, a1);
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_12_5()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_13_5()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_14_5()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_15_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  long long v9 = va_arg(va1, __int128);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  return outlined init with take of Transforming((long long *)va, (uint64_t)va1);
}

uint64_t OUTLINED_FUNCTION_16_1()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_19_1@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) |= 1 << result;
  return result;
}

uint64_t OUTLINED_FUNCTION_20_1()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_22_0()
{
  return String.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_23_0()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_24_0@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t SiriEnvironment.currentDevice.getter()
{
  uint64_t v0 = type metadata accessor for CurrentDevice();
  OUTLINED_FUNCTION_0_7();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 248);
  uint64_t v2 = lazy protocol witness table accessor for type CurrentDevice and conformance CurrentDevice(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice);

  return v4(v0, v0, v2);
}

uint64_t type metadata accessor for CurrentDevice()
{
  return self;
}

uint64_t key path setter for SiriEnvironment.currentDevice : SiriEnvironment()
{
  uint64_t v0 = swift_retain();
  return SiriEnvironment.currentDevice.setter(v0);
}

uint64_t SiriEnvironment.currentDevice.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CurrentDevice();
  OUTLINED_FUNCTION_0_7();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 256);
  uint64_t v4 = lazy protocol witness table accessor for type CurrentDevice and conformance CurrentDevice(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice);

  return v6(a1, v2, v2, v4);
}

uint64_t (*SiriEnvironment.currentDevice.modify(void *a1))()
{
  a1[1] = v1;
  uint64_t v3 = type metadata accessor for CurrentDevice();
  a1[2] = v3;
  OUTLINED_FUNCTION_0_7();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 248);
  uint64_t v6 = lazy protocol witness table accessor for type CurrentDevice and conformance CurrentDevice(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice);
  a1[3] = v6;
  *a1 = v5(v3, v3, v6);
  return SiriEnvironment.networkAvailability.modify;
}

uint64_t key path setter for CurrentDevice.mock : CurrentDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 192);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t key path getter for CurrentDevice.identifiedUserMeCard : CurrentDevice@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 208))();
  *a2 = result;
  return result;
}

uint64_t key path setter for CurrentDevice.identifiedUserMeCard : CurrentDevice(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 216);
  id v4 = *a1;
  return v3(v2);
}

uint64_t CurrentDevice.identifiedUserMeCard.getter()
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v2 = swift_getKeyPath();
  uint64_t v3 = specialized static MockablePublished.subscript.getter(v0, KeyPath, v2);
  swift_release();
  swift_release();
  return v3;
}

uint64_t sub_1C9E75968@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_0_7();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 208))();
  *a1 = result;
  return result;
}

uint64_t CurrentDevice.identifiedUserMeCard.setter(void *a1)
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();

  return specialized static MockablePublished.subscript.setter(a1);
}

void (*CurrentDevice.identifiedUserMeCard.modify(void *a1))(id *a1, char a2)
{
  a1[1] = v1;
  uint64_t KeyPath = swift_getKeyPath();
  a1[2] = KeyPath;
  uint64_t v4 = swift_getKeyPath();
  a1[3] = v4;
  *a1 = specialized static MockablePublished.subscript.getter(v1, KeyPath, v4);
  return CurrentDevice.identifiedUserMeCard.modify;
}

void CurrentDevice.identifiedUserMeCard.modify(id *a1, char a2)
{
  if (a2)
  {
    id v4 = *a1;
    swift_retain();
    OUTLINED_FUNCTION_20_2();
    specialized static MockablePublished.subscript.setter(v2);
  }
  else
  {
    swift_retain();
    OUTLINED_FUNCTION_20_2();
    specialized static MockablePublished.subscript.setter(v3);
  }
}

void *key path getter for CurrentDevice.$identifiedUserMeCard : CurrentDevice@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 232))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.$identifiedUserMeCard : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v5 = *a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(*(void *)v2 + 240);
  swift_retain();
  return v3(&v5);
}

uint64_t (*CurrentDevice.$identifiedUserMeCard.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  return CurrentDevice.$identifiedUserMeCard.modify;
}

uint64_t CurrentDevice.$identifiedUserMeCard.modify(uint64_t *a1, char a2)
{
  return CurrentDevice.$identifiedUserMeCard.modify(a1, a2, (void (*)(uint64_t *))NetworkAvailability.$status.setter);
}

void *key path getter for CurrentDevice.deviceIdiom : CurrentDevice@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 256))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.deviceIdiom : CurrentDevice(char *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v4 = *a1;
  return (*(uint64_t (**)(char *))(*(void *)v2 + 264))(&v4);
}

uint64_t CurrentDevice.deviceIdiom.getter()
{
  return CurrentDevice.deviceIdiom.getter((uint64_t)&unk_1C9EB5200, (uint64_t)&unk_1C9EB5228, (void (*)(uint64_t))specialized static MockablePublished.subscript.getter);
}

uint64_t CurrentDevice.deviceIdiom.setter(uint64_t a1)
{
  return CurrentDevice.deviceIdiom.setter(a1, (uint64_t)&unk_1C9EB5200, (uint64_t)&unk_1C9EB5228, (uint64_t (*)(uint64_t))specialized static MockablePublished.subscript.setter);
}

void CurrentDevice.deviceIdiom.modify()
{
  OUTLINED_FUNCTION_16_2();
  uint64_t v2 = OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_11_6((uint64_t)v2);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_29_0(KeyPath);
  *((void *)v1 + 5) = swift_getKeyPath();
  OUTLINED_FUNCTION_2_13();
  OUTLINED_FUNCTION_0_7();
  uint64_t v5 = *(uint64_t (**)(void))(v4 + 184);
  swift_retain();
  OUTLINED_FUNCTION_23_1();
  if (v5() && (OUTLINED_FUNCTION_10_6(), v6 = OUTLINED_FUNCTION_9_6(), v7(v6), swift_release(), int v8 = *v1, v8 != 10))
  {
    swift_release();
    unsigned char *v0 = v8;
  }
  else
  {
    OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_8_8();
    v9();
    swift_release();
  }
  OUTLINED_FUNCTION_15_3();
}

void CurrentDevice.deviceIdiom.modify(uint64_t a1, uint64_t a2)
{
}

void *key path getter for CurrentDevice.$deviceIdiom : CurrentDevice@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 280))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.$deviceIdiom : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v5 = *a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(*(void *)v2 + 288);
  swift_retain();
  return v3(&v5);
}

uint64_t (*CurrentDevice.$deviceIdiom.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  return CurrentDevice.$deviceIdiom.modify;
}

uint64_t CurrentDevice.$deviceIdiom.modify(uint64_t *a1, char a2)
{
  return CurrentDevice.$identifiedUserMeCard.modify(a1, a2, (void (*)(uint64_t *))NetworkAvailability.$isAvailable.setter);
}

uint64_t key path getter for CurrentDevice.isTextToSpeechEnabled : CurrentDevice@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 304))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for CurrentDevice.isTextToSpeechEnabled : CurrentDevice(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 312))(*a1);
}

uint64_t CurrentDevice.isTextToSpeechEnabled.getter()
{
  return CurrentDevice.isTextToSpeechEnabled.getter();
}

{
  uint64_t v0;
  char v1;

  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v0 = OUTLINED_FUNCTION_30_0();
  uint64_t v1 = specialized static MockablePublished.subscript.getter(v0);
  swift_release();
  swift_release();
  return v1 & 1;
}

uint64_t CurrentDevice.isTextToSpeechEnabled.setter()
{
  return CurrentDevice.isTextToSpeechEnabled.setter();
}

{
  uint64_t vars8;

  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  OUTLINED_FUNCTION_28_0();

  return specialized static MockablePublished.subscript.setter();
}

uint64_t (*CurrentDevice.isTextToSpeechEnabled.modify(void *a1))()
{
  *a1 = v1;
  a1[1] = swift_getKeyPath();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v3 = OUTLINED_FUNCTION_14_6(KeyPath);
  OUTLINED_FUNCTION_32(v3);
  return CurrentDevice.isTextToSpeechEnabled.modify;
}

void *key path getter for CurrentDevice.$isTextToSpeechEnabled : CurrentDevice@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 328))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.$isTextToSpeechEnabled : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v5 = *a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(*(void *)v2 + 336);
  swift_retain();
  return v3(&v5);
}

uint64_t (*CurrentDevice.$isTextToSpeechEnabled.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  return CurrentDevice.$isTextToSpeechEnabled.modify;
}

uint64_t CurrentDevice.$isTextToSpeechEnabled.modify(uint64_t *a1, char a2)
{
  return CurrentDevice.$identifiedUserMeCard.modify(a1, a2, (void (*)(uint64_t *))NetworkAvailability.$isExpensive.setter);
}

uint64_t key path getter for CurrentDevice.isLockedWithPasscode : CurrentDevice@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 352))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for CurrentDevice.isLockedWithPasscode : CurrentDevice(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 360))(*a1);
}

uint64_t CurrentDevice.isLockedWithPasscode.getter()
{
  return CurrentDevice.isTextToSpeechEnabled.getter();
}

uint64_t CurrentDevice.isLockedWithPasscode.setter()
{
  return CurrentDevice.isTextToSpeechEnabled.setter();
}

uint64_t (*CurrentDevice.isLockedWithPasscode.modify(void *a1))()
{
  *a1 = v1;
  a1[1] = swift_getKeyPath();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v3 = OUTLINED_FUNCTION_14_6(KeyPath);
  OUTLINED_FUNCTION_32(v3);
  return CurrentDevice.isTextToSpeechEnabled.modify;
}

void *key path getter for CurrentDevice.$isLockedWithPasscode : CurrentDevice@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 376))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.$isLockedWithPasscode : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v5 = *a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(*(void *)v2 + 384);
  swift_retain();
  return v3(&v5);
}

uint64_t (*CurrentDevice.$isLockedWithPasscode.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  return CurrentDevice.$isLockedWithPasscode.modify;
}

uint64_t CurrentDevice.$isLockedWithPasscode.modify(uint64_t *a1, char a2)
{
  return CurrentDevice.$identifiedUserMeCard.modify(a1, a2, (void (*)(uint64_t *))NetworkAvailability.$isConstrained.setter);
}

void *key path getter for CurrentDevice.siriVoiceGender : CurrentDevice@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 400))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.siriVoiceGender : CurrentDevice(char *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v4 = *a1;
  return (*(uint64_t (**)(char *))(*(void *)v2 + 408))(&v4);
}

uint64_t CurrentDevice.siriVoiceGender.getter()
{
  return CurrentDevice.deviceIdiom.getter((uint64_t)&unk_1C9EB52D8, (uint64_t)&unk_1C9EB5300, (void (*)(uint64_t))specialized static MockablePublished.subscript.getter);
}

uint64_t CurrentDevice.deviceIdiom.getter(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v4 = OUTLINED_FUNCTION_21_1();
  a3(v4);
  swift_release();

  return swift_release();
}

uint64_t CurrentDevice.siriVoiceGender.setter(uint64_t a1)
{
  return CurrentDevice.deviceIdiom.setter(a1, (uint64_t)&unk_1C9EB52D8, (uint64_t)&unk_1C9EB5300, (uint64_t (*)(uint64_t))specialized static MockablePublished.subscript.setter);
}

void CurrentDevice.siriVoiceGender.modify()
{
  OUTLINED_FUNCTION_16_2();
  uint64_t v2 = OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_11_6((uint64_t)v2);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_29_0(KeyPath);
  *((void *)v1 + 5) = swift_getKeyPath();
  OUTLINED_FUNCTION_2_13();
  OUTLINED_FUNCTION_0_7();
  uint64_t v5 = *(uint64_t (**)(void))(v4 + 184);
  swift_retain();
  OUTLINED_FUNCTION_23_1();
  if (v5() && (OUTLINED_FUNCTION_10_6(), v6 = OUTLINED_FUNCTION_9_6(), v7(v6), swift_release(), int v8 = *v1, v8 != 3))
  {
    swift_release();
    unsigned char *v0 = v8;
  }
  else
  {
    OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_8_8();
    v9();
    swift_release();
  }
  OUTLINED_FUNCTION_15_3();
}

void *key path getter for CurrentDevice.$siriVoiceGender : CurrentDevice@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 424))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.$siriVoiceGender : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v5 = *a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(*(void *)v2 + 432);
  swift_retain();
  return v3(&v5);
}

uint64_t (*CurrentDevice.$siriVoiceGender.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  return CurrentDevice.$siriVoiceGender.modify;
}

uint64_t CurrentDevice.$siriVoiceGender.modify(uint64_t *a1, char a2)
{
  return CurrentDevice.$identifiedUserMeCard.modify(a1, a2, (void (*)(uint64_t *))NetworkAvailability.$isInAirplaneMode.setter);
}

uint64_t key path getter for CurrentDevice.preferencesLanguageCode : CurrentDevice@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 448))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.preferencesLanguageCode : CurrentDevice(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 456);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t CurrentDevice.preferencesLanguageCode.getter()
{
  return CurrentDevice.preferencesLanguageCode.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v0 = OUTLINED_FUNCTION_30_0();
  uint64_t v1 = specialized static MockablePublished.subscript.getter(v0);
  swift_release();
  swift_release();
  return v1;
}

uint64_t CurrentDevice.preferencesLanguageCode.setter(uint64_t a1, uint64_t a2)
{
  return CurrentDevice.preferencesLanguageCode.setter(a1, a2);
}

{
  uint64_t v2;
  uint64_t vars8;

  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();

  return specialized static MockablePublished.subscript.setter(a1, a2, v2);
}

uint64_t (*CurrentDevice.preferencesLanguageCode.modify(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  void v3[2] = v1;
  v3[3] = swift_getKeyPath();
  uint64_t KeyPath = swift_getKeyPath();
  *uint64_t v3 = OUTLINED_FUNCTION_27_0(KeyPath);
  v3[1] = v5;
  return CurrentDevice.preferencesLanguageCode.modify;
}

void *key path getter for CurrentDevice.$preferencesLanguageCode : CurrentDevice@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 472))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.$preferencesLanguageCode : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v5 = *a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(*(void *)v2 + 480);
  swift_retain();
  return v3(&v5);
}

uint64_t CurrentDevice.$preferencesLanguageCode.getter()
{
  OUTLINED_FUNCTION_2_5();
  OUTLINED_FUNCTION_0_7();
  uint64_t v1 = *(void (**)(void))(v0 + 152);
  swift_retain();
  OUTLINED_FUNCTION_19();
  v1();
  return swift_release();
}

uint64_t CurrentDevice.$preferencesLanguageCode.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  OUTLINED_FUNCTION_2_5();
  uint64_t v14 = v1;
  OUTLINED_FUNCTION_0_7();
  uint64_t v3 = *(void (**)(uint64_t *))(v2 + 160);
  uint64_t v4 = swift_retain();
  uint64_t v12 = OUTLINED_FUNCTION_22(v4, v5, v6, v7, v8, v9, v10, v11, v14);
  v3(v12);
  return swift_release();
}

uint64_t (*CurrentDevice.$preferencesLanguageCode.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  return CurrentDevice.$preferencesLanguageCode.modify;
}

uint64_t CurrentDevice.$preferencesLanguageCode.modify(uint64_t *a1, char a2)
{
  return CurrentDevice.$identifiedUserMeCard.modify(a1, a2, (void (*)(uint64_t *))CurrentDevice.$preferencesLanguageCode.setter);
}

uint64_t key path getter for CurrentDevice.siriLocale : CurrentDevice(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 496))();
}

uint64_t key path setter for CurrentDevice.siriLocale : CurrentDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Locale();
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v7, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 504))(v7);
}

uint64_t CurrentDevice.siriLocale.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v0 = OUTLINED_FUNCTION_22_1();
  specialized static MockablePublished.subscript.getter(v0, v1);
  swift_release();

  return swift_release();
}

void CurrentDevice.siriLocale.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  OUTLINED_FUNCTION_16_2();
  a17 = v19;
  a18 = v20;
  uint64_t v22 = v21;
  uint64_t v23 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1_5();
  uint64_t v25 = v24;
  MEMORY[0x1F4188790](v26, v27);
  char v29 = (char *)&a9 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v29, v22, v23);
  swift_retain();
  specialized static MockablePublished.subscript.setter((uint64_t)v29, v18);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v22, v23);
  OUTLINED_FUNCTION_15_3();
}

void (*CurrentDevice.siriLocale.modify())()
{
  uint64_t v2 = OUTLINED_FUNCTION_24_1();
  void *v0 = v2;
  *uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for Locale();
  v2[1] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[2] = v4;
  size_t v5 = *(void *)(v4 + 64);
  v2[3] = malloc(v5);
  uint64_t v6 = malloc(v5);
  v2[4] = v6;
  v2[5] = swift_getKeyPath();
  void v2[6] = swift_getKeyPath();
  specialized static MockablePublished.subscript.getter(v1, (uint64_t)v6);
  return CurrentDevice.siriLocale.modify;
}

void CurrentDevice.siriLocale.modify()
{
  OUTLINED_FUNCTION_16_2();
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)(*v0)[3];
  uint64_t v3 = (void *)(*v0)[4];
  if (v4)
  {
    uint64_t v5 = v1[1];
    uint64_t v6 = v1[2];
    uint64_t v7 = *v1;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*v0)[3], v3, v5);
    swift_retain();
    specialized static MockablePublished.subscript.setter((uint64_t)v2, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v3, v5);
  }
  else
  {
    uint64_t v8 = *v1;
    swift_retain();
    specialized static MockablePublished.subscript.setter((uint64_t)v3, v8);
  }
  free(v3);
  free(v2);
  OUTLINED_FUNCTION_15_3();
  free(v9);
}

void *key path getter for CurrentDevice.$siriLocale : CurrentDevice@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 520))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.$siriLocale : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v5 = *a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(*(void *)v2 + 528);
  swift_retain();
  return v3(&v5);
}

uint64_t CurrentDevice.$siriLocale.getter()
{
  OUTLINED_FUNCTION_2_5();
  OUTLINED_FUNCTION_0_7();
  uint64_t v1 = *(void (**)(void))(v0 + 152);
  swift_retain();
  OUTLINED_FUNCTION_19();
  v1();
  return swift_release();
}

uint64_t CurrentDevice.$siriLocale.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  OUTLINED_FUNCTION_2_5();
  uint64_t v14 = v1;
  OUTLINED_FUNCTION_0_7();
  uint64_t v3 = *(void (**)(uint64_t *))(v2 + 160);
  uint64_t v4 = swift_retain();
  uint64_t v12 = OUTLINED_FUNCTION_22(v4, v5, v6, v7, v8, v9, v10, v11, v14);
  v3(v12);
  return swift_release();
}

uint64_t (*CurrentDevice.$siriLocale.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  return CurrentDevice.$siriLocale.modify;
}

uint64_t CurrentDevice.$siriLocale.modify(uint64_t *a1, char a2)
{
  return CurrentDevice.$identifiedUserMeCard.modify(a1, a2, (void (*)(uint64_t *))CurrentDevice.$siriLocale.setter);
}

uint64_t key path getter for CurrentDevice.isVoiceTriggerEnabled : CurrentDevice@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 544))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for CurrentDevice.isVoiceTriggerEnabled : CurrentDevice(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 552))(*a1);
}

uint64_t CurrentDevice.isVoiceTriggerEnabled.getter()
{
  return CurrentDevice.isTextToSpeechEnabled.getter();
}

uint64_t CurrentDevice.isVoiceTriggerEnabled.setter()
{
  return CurrentDevice.isTextToSpeechEnabled.setter();
}

uint64_t (*CurrentDevice.isVoiceTriggerEnabled.modify(void *a1))()
{
  *a1 = v1;
  a1[1] = swift_getKeyPath();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v3 = OUTLINED_FUNCTION_14_6(KeyPath);
  OUTLINED_FUNCTION_32(v3);
  return CurrentDevice.isTextToSpeechEnabled.modify;
}

uint64_t CurrentDevice.isTextToSpeechEnabled.modify()
{
  swift_retain();
  OUTLINED_FUNCTION_20_2();

  return specialized static MockablePublished.subscript.setter();
}

void *key path getter for CurrentDevice.$isVoiceTriggerEnabled : CurrentDevice@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 568))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.$isVoiceTriggerEnabled : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v5 = *a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(*(void *)v2 + 576);
  swift_retain();
  return v3(&v5);
}

uint64_t CurrentDevice.$isVoiceTriggerEnabled.getter()
{
  OUTLINED_FUNCTION_2_5();
  OUTLINED_FUNCTION_0_7();
  uint64_t v1 = *(void (**)(void))(v0 + 152);
  swift_retain();
  OUTLINED_FUNCTION_19();
  v1();
  return swift_release();
}

uint64_t CurrentDevice.$isVoiceTriggerEnabled.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  OUTLINED_FUNCTION_2_5();
  uint64_t v14 = v1;
  OUTLINED_FUNCTION_0_7();
  uint64_t v3 = *(void (**)(uint64_t *))(v2 + 160);
  uint64_t v4 = swift_retain();
  uint64_t v12 = OUTLINED_FUNCTION_22(v4, v5, v6, v7, v8, v9, v10, v11, v14);
  v3(v12);
  return swift_release();
}

uint64_t (*CurrentDevice.$isVoiceTriggerEnabled.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  return CurrentDevice.$isVoiceTriggerEnabled.modify;
}

uint64_t CurrentDevice.$isVoiceTriggerEnabled.modify(uint64_t *a1, char a2)
{
  return CurrentDevice.$identifiedUserMeCard.modify(a1, a2, (void (*)(uint64_t *))CurrentDevice.$isVoiceTriggerEnabled.setter);
}

void *key path getter for CurrentDevice.personalDomainsAuthenticationMode : CurrentDevice@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 592))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.personalDomainsAuthenticationMode : CurrentDevice(char *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v4 = *a1;
  return (*(uint64_t (**)(char *))(*(void *)v2 + 600))(&v4);
}

uint64_t CurrentDevice.personalDomainsAuthenticationMode.getter()
{
  return CurrentDevice.personalDomainsAuthenticationMode.getter((uint64_t)&unk_1C9EB53F8, (uint64_t)&unk_1C9EB5420, (void (*)(uint64_t))specialized static MockablePublished.subscript.getter);
}

uint64_t CurrentDevice.personalDomainsAuthenticationMode.setter(uint64_t a1)
{
  return CurrentDevice.deviceIdiom.setter(a1, (uint64_t)&unk_1C9EB53F8, (uint64_t)&unk_1C9EB5420, (uint64_t (*)(uint64_t))specialized static MockablePublished.subscript.setter);
}

void CurrentDevice.personalDomainsAuthenticationMode.modify()
{
  OUTLINED_FUNCTION_16_2();
  uint64_t v2 = OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_11_6((uint64_t)v2);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_29_0(KeyPath);
  *((void *)v1 + 5) = swift_getKeyPath();
  OUTLINED_FUNCTION_2_13();
  OUTLINED_FUNCTION_0_7();
  uint64_t v5 = *(uint64_t (**)(void))(v4 + 184);
  swift_retain();
  OUTLINED_FUNCTION_23_1();
  if (v5() && (OUTLINED_FUNCTION_10_6(), v6 = OUTLINED_FUNCTION_9_6(), v7(v6), swift_release(), int v8 = *v1, v8 != 4))
  {
    swift_release();
    unsigned char *v0 = v8;
  }
  else
  {
    OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_8_8();
    v9();
    swift_release();
  }
  OUTLINED_FUNCTION_15_3();
}

void *key path getter for CurrentDevice.$personalDomainsAuthenticationMode : CurrentDevice@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 616))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.$personalDomainsAuthenticationMode : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v5 = *a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(*(void *)v2 + 624);
  swift_retain();
  return v3(&v5);
}

uint64_t CurrentDevice.$personalDomainsAuthenticationMode.getter()
{
  OUTLINED_FUNCTION_2_5();
  OUTLINED_FUNCTION_0_7();
  uint64_t v1 = *(void (**)(void))(v0 + 152);
  swift_retain();
  OUTLINED_FUNCTION_19();
  v1();
  return swift_release();
}

uint64_t CurrentDevice.$personalDomainsAuthenticationMode.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  OUTLINED_FUNCTION_2_5();
  uint64_t v14 = v1;
  OUTLINED_FUNCTION_0_7();
  uint64_t v3 = *(void (**)(uint64_t *))(v2 + 160);
  uint64_t v4 = swift_retain();
  uint64_t v12 = OUTLINED_FUNCTION_22(v4, v5, v6, v7, v8, v9, v10, v11, v14);
  v3(v12);
  return swift_release();
}

uint64_t (*CurrentDevice.$personalDomainsAuthenticationMode.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  return CurrentDevice.$personalDomainsAuthenticationMode.modify;
}

uint64_t CurrentDevice.$personalDomainsAuthenticationMode.modify(uint64_t *a1, char a2)
{
  return CurrentDevice.$identifiedUserMeCard.modify(a1, a2, (void (*)(uint64_t *))CurrentDevice.$personalDomainsAuthenticationMode.setter);
}

void *key path getter for CurrentDevice.restrictedCommands : CurrentDevice@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(void *__return_ptr))(**(void **)a1 + 640))(v5);
  uint64_t v4 = v5[1];
  *a2 = v5[0];
  a2[1] = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.restrictedCommands : CurrentDevice(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *a2;
  v6[0] = *a1;
  v6[1] = v2;
  uint64_t v4 = *(uint64_t (**)(void *))(*(void *)v3 + 648);
  swift_bridgeObjectRetain();
  return v4(v6);
}

uint64_t CurrentDevice.restrictedCommands.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v0 = OUTLINED_FUNCTION_22_1();
  specialized static MockablePublished.subscript.getter(v0);
  swift_release();

  return swift_release();
}

uint64_t CurrentDevice.restrictedCommands.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();

  return specialized static MockablePublished.subscript.setter(v2, v3, v1);
}

void CurrentDevice.restrictedCommands.modify()
{
  OUTLINED_FUNCTION_16_2();
  uint64_t v2 = v1;
  uint64_t v3 = malloc(0x50uLL);
  *uint64_t v2 = v3;
  v3[7] = v0;
  uint64_t KeyPath = swift_getKeyPath();
  v3[8] = KeyPath;
  v3[9] = swift_getKeyPath();
  OUTLINED_FUNCTION_2_13();
  uint64_t v5 = *(void *)(v0 + 96);
  OUTLINED_FUNCTION_0_7();
  uint64_t v7 = *(uint64_t (**)(void))(v6 + 184);
  swift_retain();
  OUTLINED_FUNCTION_23_1();
  uint64_t v8 = v7();
  if (v8 && ((*(void (**)(uint64_t))(*(void *)v8 + 144))(KeyPath), swift_release(), (uint64_t v9 = v3[5]) != 0))
  {
    uint64_t v10 = v3[6];
    swift_release();
    v3[3] = v9;
    v3[4] = v10;
  }
  else
  {
    (*(void (**)(void))(*(void *)v5 + 104))();
    swift_release();
  }
  OUTLINED_FUNCTION_15_3();
}

{
  char v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  OUTLINED_FUNCTION_16_2();
  uint64_t v1 = v0;
  uint64_t v3 = *(void *)(*(void *)v2 + 24);
  swift_retain();
  if (v1)
  {
    uint64_t v4 = swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_25_1(v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_25_1(v3);
  }
  OUTLINED_FUNCTION_15_3();
  free(v5);
}

void *key path getter for CurrentDevice.$restrictedCommands : CurrentDevice@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 664))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.$restrictedCommands : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v5 = *a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(*(void *)v2 + 672);
  swift_retain();
  return v3(&v5);
}

uint64_t CurrentDevice.$restrictedCommands.getter()
{
  OUTLINED_FUNCTION_2_5();
  OUTLINED_FUNCTION_0_7();
  uint64_t v1 = *(void (**)(void))(v0 + 152);
  swift_retain();
  OUTLINED_FUNCTION_19();
  v1();
  return swift_release();
}

uint64_t CurrentDevice.$restrictedCommands.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  OUTLINED_FUNCTION_2_5();
  uint64_t v14 = v1;
  OUTLINED_FUNCTION_0_7();
  uint64_t v3 = *(void (**)(uint64_t *))(v2 + 160);
  uint64_t v4 = swift_retain();
  uint64_t v12 = OUTLINED_FUNCTION_22(v4, v5, v6, v7, v8, v9, v10, v11, v14);
  v3(v12);
  return swift_release();
}

uint64_t (*CurrentDevice.$restrictedCommands.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  return CurrentDevice.$restrictedCommands.modify;
}

uint64_t CurrentDevice.$restrictedCommands.modify(uint64_t *a1, char a2)
{
  return CurrentDevice.$identifiedUserMeCard.modify(a1, a2, (void (*)(uint64_t *))CurrentDevice.$restrictedCommands.setter);
}

uint64_t key path getter for CurrentDevice.deviceRegionCode : CurrentDevice@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 688))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.deviceRegionCode : CurrentDevice(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 696);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t CurrentDevice.deviceRegionCode.getter()
{
  return CurrentDevice.preferencesLanguageCode.getter();
}

uint64_t CurrentDevice.deviceRegionCode.setter(uint64_t a1, uint64_t a2)
{
  return CurrentDevice.preferencesLanguageCode.setter(a1, a2);
}

uint64_t (*CurrentDevice.deviceRegionCode.modify(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  void v3[2] = v1;
  v3[3] = swift_getKeyPath();
  uint64_t KeyPath = swift_getKeyPath();
  *uint64_t v3 = OUTLINED_FUNCTION_27_0(KeyPath);
  v3[1] = v5;
  return CurrentDevice.preferencesLanguageCode.modify;
}

void CurrentDevice.preferencesLanguageCode.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    OUTLINED_FUNCTION_18_2();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    OUTLINED_FUNCTION_18_2();
  }

  free(v2);
}

void *key path getter for CurrentDevice.$deviceRegionCode : CurrentDevice@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 712))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.$deviceRegionCode : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v5 = *a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(*(void *)v2 + 720);
  swift_retain();
  return v3(&v5);
}

uint64_t CurrentDevice.$deviceRegionCode.getter()
{
  OUTLINED_FUNCTION_2_5();
  OUTLINED_FUNCTION_0_7();
  uint64_t v1 = *(void (**)(void))(v0 + 152);
  swift_retain();
  OUTLINED_FUNCTION_19();
  v1();
  return swift_release();
}

uint64_t CurrentDevice.$deviceRegionCode.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  OUTLINED_FUNCTION_2_5();
  uint64_t v14 = v1;
  OUTLINED_FUNCTION_0_7();
  uint64_t v3 = *(void (**)(uint64_t *))(v2 + 160);
  uint64_t v4 = swift_retain();
  uint64_t v12 = OUTLINED_FUNCTION_22(v4, v5, v6, v7, v8, v9, v10, v11, v14);
  v3(v12);
  return swift_release();
}

uint64_t (*CurrentDevice.$deviceRegionCode.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  return CurrentDevice.$deviceRegionCode.modify;
}

uint64_t CurrentDevice.$deviceRegionCode.modify(uint64_t *a1, char a2)
{
  return CurrentDevice.$identifiedUserMeCard.modify(a1, a2, (void (*)(uint64_t *))CurrentDevice.$deviceRegionCode.setter);
}

void *key path getter for CurrentDevice.deviceClass : CurrentDevice@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 736))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.deviceClass : CurrentDevice(char *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v4 = *a1;
  return (*(uint64_t (**)(char *))(*(void *)v2 + 744))(&v4);
}

uint64_t CurrentDevice.deviceClass.getter()
{
  return CurrentDevice.personalDomainsAuthenticationMode.getter((uint64_t)"phq ", (uint64_t)"Phq ", (void (*)(uint64_t))specialized static MockablePublished.subscript.getter);
}

uint64_t CurrentDevice.personalDomainsAuthenticationMode.getter(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v4 = OUTLINED_FUNCTION_21_1();
  a3(v4);
  swift_release();

  return swift_release();
}

uint64_t CurrentDevice.deviceClass.setter(uint64_t a1)
{
  return CurrentDevice.deviceIdiom.setter(a1, (uint64_t)"phq ", (uint64_t)"Phq ", (uint64_t (*)(uint64_t))specialized static MockablePublished.subscript.setter);
}

uint64_t CurrentDevice.deviceIdiom.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  uint64_t v4 = OUTLINED_FUNCTION_28_0();

  return a4(v4);
}

void CurrentDevice.deviceClass.modify()
{
  OUTLINED_FUNCTION_16_2();
  uint64_t v2 = OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_11_6((uint64_t)v2);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_29_0(KeyPath);
  *((void *)v1 + 5) = swift_getKeyPath();
  OUTLINED_FUNCTION_2_13();
  OUTLINED_FUNCTION_0_7();
  uint64_t v5 = *(uint64_t (**)(void))(v4 + 184);
  swift_retain();
  OUTLINED_FUNCTION_23_1();
  if (v5() && (OUTLINED_FUNCTION_10_6(), v6 = OUTLINED_FUNCTION_9_6(), v7(v6), swift_release(), int v8 = *v1, v8 != 8))
  {
    swift_release();
    unsigned char *v0 = v8;
  }
  else
  {
    OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_8_8();
    v9();
    swift_release();
  }
  OUTLINED_FUNCTION_15_3();
}

void CurrentDevice.deviceIdiom.modify(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 40);
  uint64_t v7 = *(void *)(*(void *)a1 + 24);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)a1 + 48);
  swift_retain();
  a3(v8, v7, v6, v5);

  free(v4);
}

void *key path getter for CurrentDevice.$deviceClass : CurrentDevice@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 760))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.$deviceClass : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v5 = *a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(*(void *)v2 + 768);
  swift_retain();
  return v3(&v5);
}

uint64_t CurrentDevice.$deviceClass.getter()
{
  OUTLINED_FUNCTION_2_5();
  OUTLINED_FUNCTION_0_7();
  uint64_t v1 = *(void (**)(void))(v0 + 152);
  swift_retain();
  OUTLINED_FUNCTION_19();
  v1();
  return swift_release();
}

uint64_t CurrentDevice.$deviceClass.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  OUTLINED_FUNCTION_2_5();
  uint64_t v14 = v1;
  OUTLINED_FUNCTION_0_7();
  uint64_t v3 = *(void (**)(uint64_t *))(v2 + 160);
  uint64_t v4 = swift_retain();
  uint64_t v12 = OUTLINED_FUNCTION_22(v4, v5, v6, v7, v8, v9, v10, v11, v14);
  v3(v12);
  return swift_release();
}

uint64_t (*CurrentDevice.$deviceClass.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  return CurrentDevice.$deviceClass.modify;
}

uint64_t CurrentDevice.$deviceClass.modify(uint64_t *a1, char a2)
{
  return CurrentDevice.$identifiedUserMeCard.modify(a1, a2, (void (*)(uint64_t *))CurrentDevice.$deviceClass.setter);
}

uint64_t CurrentDevice.$identifiedUserMeCard.modify(uint64_t *a1, char a2, void (*a3)(uint64_t *))
{
  if (a2)
  {
    uint64_t v5 = *a1;
    swift_retain();
    a3(&v5);
    return swift_release();
  }
  else
  {
    uint64_t v5 = *a1;
    return ((uint64_t (*)(uint64_t *))a3)(&v5);
  }
}

BOOL CurrentDevice.isHomePod.getter()
{
  OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_6_9();
  v0();
  return v2 == 1;
}

BOOL CurrentDevice.isWatch.getter()
{
  OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_6_9();
  v0();
  return v2 == 6;
}

BOOL CurrentDevice.isMac.getter()
{
  OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_6_9();
  v0();
  return v2 == 2;
}

BOOL CurrentDevice.isAppleTV.getter()
{
  OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_6_9();
  v0();
  return v2 == 7;
}

BOOL CurrentDevice.isPhone.getter()
{
  OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_6_9();
  v0();
  return v2 == 5;
}

BOOL CurrentDevice.isPad.getter()
{
  OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_6_9();
  v0();
  return v2 == 3;
}

BOOL CurrentDevice.isPod.getter()
{
  OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_6_9();
  v0();
  return v2 == 4;
}

BOOL CurrentDevice.isReality.getter()
{
  OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_6_9();
  v0();
  return v2 == 8;
}

uint64_t CurrentDevice.isCarPlay.getter()
{
  OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_13_6();
  v0();
  return (v2 >> 4) & 1;
}

uint64_t CurrentDevice.isCarDNDMode.getter()
{
  OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_13_6();
  v0();
  return (v2 >> 1) & 1;
}

uint64_t CurrentDevice.supportsVehicleData.getter()
{
  OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_13_6();
  v0();
  return (v2 >> 8) & 1;
}

uint64_t CurrentDevice.isHeadGestureRecognitionAvailable.getter()
{
  OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_13_6();
  v0();
  return (v2 >> 9) & 1;
}

uint64_t CurrentDevice.restrictions.getter@<X0>(void *a1@<X8>)
{
  OUTLINED_FUNCTION_0_7();
  (*(void (**)(void *__return_ptr))(v2 + 640))(v5);
  uint64_t v3 = v5[1];
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t CurrentDevice.__allocating_init(storage:)()
{
  uint64_t v0 = swift_allocObject();
  CurrentDevice.init(storage:)();
  return v0;
}

void *CurrentDevice.init(storage:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1_5();
  uint64_t v4 = v3;
  uint64_t v7 = MEMORY[0x1F4188790](v5, v6);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7, v10);
  uint64_t v12 = (char *)v27 - v11;
  v0[2] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<SAPerson?>);
  OUTLINED_FUNCTION_12_6();
  v0[3] = specialized MockablePublished.init(wrappedValue:)(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<DeviceIdiom>);
  OUTLINED_FUNCTION_12_6();
  v0[4] = specialized MockablePublished.init(wrappedValue:)(9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<Bool>);
  OUTLINED_FUNCTION_12_6();
  v0[5] = specialized MockablePublished.init(wrappedValue:)(0);
  OUTLINED_FUNCTION_12_6();
  v0[6] = specialized MockablePublished.init(wrappedValue:)(1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<SiriVoiceGender>);
  OUTLINED_FUNCTION_12_6();
  v0[7] = specialized MockablePublished.init(wrappedValue:)(2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<String?>);
  swift_allocObject();
  v0[8] = specialized MockablePublished.init(wrappedValue:)(0, 0);
  if (one-time initialization token for defaultLocale != -1) {
    swift_once();
  }
  uint64_t v13 = __swift_project_value_buffer(v2, (uint64_t)static CurrentDevice.defaultLocale);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v14(v12, v13, v2);
  v14(v9, (uint64_t)v12, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<Locale>);
  swift_allocObject();
  uint64_t v15 = specialized MockablePublished.init(wrappedValue:)(v9);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v2);
  v1[9] = v15;
  OUTLINED_FUNCTION_12_6();
  v1[10] = specialized MockablePublished.init(wrappedValue:)(1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<PersonalDomainsAuthenticationMode?>);
  OUTLINED_FUNCTION_12_6();
  v1[11] = specialized MockablePublished.init(wrappedValue:)(3);
  Restrictions.init(restrictedCommands:)(MEMORY[0x1E4FBC870], v27);
  uint64_t v16 = v27[0];
  uint64_t v17 = v27[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<Restrictions>);
  swift_allocObject();
  v1[12] = specialized MockablePublished.init(wrappedValue:)(v16, v17);
  swift_allocObject();
  v1[13] = specialized MockablePublished.init(wrappedValue:)(0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<DeviceClass?>);
  OUTLINED_FUNCTION_12_6();
  v1[14] = specialized MockablePublished.init(wrappedValue:)(7);
  if (one-time initialization token for deviceRegionCodeKey != -1) {
    swift_once();
  }
  uint64_t v18 = MGGetStringAnswer();
  if (v18)
  {
    uint64_t v19 = (void *)v18;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v22 = 0;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  specialized static MockablePublished.subscript.setter(v20, v22, (uint64_t)v1);
  MobileGestaltDeviceClassProvider.currentDeviceClass.getter((char *)v27);
  uint64_t v23 = LOBYTE(v27[0]);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v25 = swift_getKeyPath();
  swift_retain();
  specialized static MockablePublished.subscript.setter(v23, v1, KeyPath, v25);
  swift_release();
  return v1;
}

uint64_t one-time initialization function for defaultLocale()
{
  uint64_t v0 = type metadata accessor for Locale();
  __swift_allocate_value_buffer(v0, static CurrentDevice.defaultLocale);
  __swift_project_value_buffer(v0, (uint64_t)static CurrentDevice.defaultLocale);
  return Locale.init(identifier:)();
}

uint64_t one-time initialization function for deviceRegionCodeKey()
{
  uint64_t result = MEMORY[0x1CB7919D0](0x6F436E6F69676552, 0xEA00000000006564);
  static CurrentDevice.deviceRegionCodeKey = result;
  return result;
}

uint64_t static CurrentDevice.adjustMock(_:)(uint64_t a1)
{
  swift_getKeyPath();
  char v2 = (*(uint64_t (**)(void))(*(void *)a1 + 136))();
  swift_release();
  if ((v2 & 1) == 0)
  {
    swift_getKeyPath();
    (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 144))(&v9);
    swift_release();
    if (v10 != 1)
    {
      uint64_t v3 = v9;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(PartialKeyPath<CurrentDevice>, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C9EB3FF0;
      *(void *)(inited + 32) = swift_getKeyPath();
      *(void *)(inited + 64) = &type metadata for Restrictions;
      uint64_t v9 = v3;
      *(void *)(inited + 40) = DeviceRestrictions.aceSet.getter();
      *(void *)(inited + 48) = v3;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialKeyPath<CurrentDevice>);
      uint64_t v5 = Dictionary.init(dictionaryLiteral:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnvironmentProviderMockHelper<CurrentDevice>);
      *(void *)(swift_allocObject() + 16) = v5;
      uint64_t v6 = *(void (**)(uint64_t))(*(void *)a1 + 152);
      uint64_t v7 = swift_retain();
      v6(v7);
      swift_release_n();
    }
  }
  return swift_retain();
}

void *key path getter for CurrentDevice.restrictions : CurrentDevice@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 880))(&v4);
  *a2 = v4;
  return result;
}

uint64_t CurrentDevice.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t CurrentDevice.__deallocating_deinit()
{
  CurrentDevice.deinit();

  return MEMORY[0x1F4186488](v0, 120, 7);
}

uint64_t protocol witness for MockableEnvironmentProvider.mock.getter in conformance CurrentDevice()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t sub_1C9E79674@<X0>(unsigned char *a1@<X8>)
{
  OUTLINED_FUNCTION_0_7();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 304))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1C9E796C8()
{
  OUTLINED_FUNCTION_0_7();
  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t sub_1C9E79714@<X0>(unsigned char *a1@<X8>)
{
  OUTLINED_FUNCTION_0_7();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 352))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1C9E79768()
{
  OUTLINED_FUNCTION_0_7();
  return (*(uint64_t (**)(void))(v0 + 360))();
}

uint64_t sub_1C9E797BC@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_0_7();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 448))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C9E79810()
{
  OUTLINED_FUNCTION_0_7();
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t sub_1C9E7985C@<X0>(unsigned char *a1@<X8>)
{
  OUTLINED_FUNCTION_0_7();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 544))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1C9E798B0()
{
  OUTLINED_FUNCTION_0_7();
  return (*(uint64_t (**)(void))(v0 + 552))();
}

uint64_t sub_1C9E7990C@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_0_7();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 688))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for MockableEnvironmentProvider.mock.setter in conformance CurrentDevice()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

void (*protocol witness for MockableEnvironmentProvider.mock.modify in conformance CurrentDevice(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 200))();
  return protocol witness for MockableEnvironmentProvider.mock.modify in conformance NetworkAvailability;
}

uint64_t protocol witness for static MockableEnvironmentProvider.adjustMock(_:) in conformance CurrentDevice(uint64_t a1)
{
  return static CurrentDevice.adjustMock(_:)(a1);
}

uint64_t protocol witness for SiriEnvironmentProvider.init(storage:) in conformance CurrentDevice()
{
  return (*(uint64_t (**)(void))(v0 + 888))();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CurrentDevice@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CurrentDevice();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t associated type witness table accessor for MockableEnvironmentProvider.Provider : SiriEnvironmentProvider in CurrentDevice()
{
  return lazy protocol witness table accessor for type CurrentDevice and conformance CurrentDevice(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice);
}

uint64_t instantiation function for generic protocol witness table for CurrentDevice(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CurrentDevice and conformance CurrentDevice(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type CurrentDevice and conformance CurrentDevice(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CurrentDevice and conformance CurrentDevice(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CurrentDevice();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C9E79B6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SiriEnvironment.currentDevice.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1C9E79B9C@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_0_7();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 184))();
  *a1 = result;
  return result;
}

uint64_t method lookup function for CurrentDevice(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CurrentDevice);
}

uint64_t dispatch thunk of CurrentDevice.mock.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of CurrentDevice.mock.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of CurrentDevice.mock.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of CurrentDevice.identifiedUserMeCard.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of CurrentDevice.identifiedUserMeCard.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of CurrentDevice.identifiedUserMeCard.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of CurrentDevice.$identifiedUserMeCard.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of CurrentDevice.$identifiedUserMeCard.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of CurrentDevice.$identifiedUserMeCard.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of CurrentDevice.deviceIdiom.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of CurrentDevice.deviceIdiom.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of CurrentDevice.deviceIdiom.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of CurrentDevice.$deviceIdiom.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of CurrentDevice.$deviceIdiom.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of CurrentDevice.$deviceIdiom.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of CurrentDevice.isTextToSpeechEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of CurrentDevice.isTextToSpeechEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of CurrentDevice.isTextToSpeechEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of CurrentDevice.$isTextToSpeechEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of CurrentDevice.$isTextToSpeechEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of CurrentDevice.$isTextToSpeechEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of CurrentDevice.isLockedWithPasscode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of CurrentDevice.isLockedWithPasscode.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of CurrentDevice.isLockedWithPasscode.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of CurrentDevice.$isLockedWithPasscode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of CurrentDevice.$isLockedWithPasscode.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of CurrentDevice.$isLockedWithPasscode.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of CurrentDevice.siriVoiceGender.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of CurrentDevice.siriVoiceGender.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of CurrentDevice.siriVoiceGender.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of CurrentDevice.$siriVoiceGender.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of CurrentDevice.$siriVoiceGender.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 432))();
}

uint64_t dispatch thunk of CurrentDevice.$siriVoiceGender.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440))();
}

uint64_t dispatch thunk of CurrentDevice.preferencesLanguageCode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448))();
}

uint64_t dispatch thunk of CurrentDevice.preferencesLanguageCode.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 456))();
}

uint64_t dispatch thunk of CurrentDevice.preferencesLanguageCode.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 464))();
}

uint64_t dispatch thunk of CurrentDevice.$preferencesLanguageCode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 472))();
}

uint64_t dispatch thunk of CurrentDevice.$preferencesLanguageCode.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 480))();
}

uint64_t dispatch thunk of CurrentDevice.$preferencesLanguageCode.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 488))();
}

uint64_t dispatch thunk of CurrentDevice.siriLocale.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 496))();
}

uint64_t dispatch thunk of CurrentDevice.siriLocale.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of CurrentDevice.siriLocale.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of CurrentDevice.$siriLocale.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of CurrentDevice.$siriLocale.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of CurrentDevice.$siriLocale.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of CurrentDevice.isVoiceTriggerEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of CurrentDevice.isVoiceTriggerEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of CurrentDevice.isVoiceTriggerEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of CurrentDevice.$isVoiceTriggerEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of CurrentDevice.$isVoiceTriggerEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of CurrentDevice.$isVoiceTriggerEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of CurrentDevice.personalDomainsAuthenticationMode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of CurrentDevice.personalDomainsAuthenticationMode.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of CurrentDevice.personalDomainsAuthenticationMode.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of CurrentDevice.$personalDomainsAuthenticationMode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of CurrentDevice.$personalDomainsAuthenticationMode.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of CurrentDevice.$personalDomainsAuthenticationMode.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of CurrentDevice.restrictedCommands.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of CurrentDevice.restrictedCommands.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of CurrentDevice.restrictedCommands.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of CurrentDevice.$restrictedCommands.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of CurrentDevice.$restrictedCommands.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of CurrentDevice.$restrictedCommands.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of CurrentDevice.deviceRegionCode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of CurrentDevice.deviceRegionCode.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of CurrentDevice.deviceRegionCode.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of CurrentDevice.$deviceRegionCode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of CurrentDevice.$deviceRegionCode.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t dispatch thunk of CurrentDevice.$deviceRegionCode.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728))();
}

uint64_t dispatch thunk of CurrentDevice.deviceClass.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 736))();
}

uint64_t dispatch thunk of CurrentDevice.deviceClass.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 744))();
}

uint64_t dispatch thunk of CurrentDevice.deviceClass.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t dispatch thunk of CurrentDevice.$deviceClass.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760))();
}

uint64_t dispatch thunk of CurrentDevice.$deviceClass.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 768))();
}

uint64_t dispatch thunk of CurrentDevice.$deviceClass.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 776))();
}

uint64_t dispatch thunk of CurrentDevice.isHomePod.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 784))();
}

uint64_t dispatch thunk of CurrentDevice.isWatch.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 792))();
}

uint64_t dispatch thunk of CurrentDevice.isMac.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 800))();
}

uint64_t dispatch thunk of CurrentDevice.isAppleTV.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 808))();
}

uint64_t dispatch thunk of CurrentDevice.isPhone.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 816))();
}

uint64_t dispatch thunk of CurrentDevice.isPad.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 824))();
}

uint64_t dispatch thunk of CurrentDevice.isPod.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 832))();
}

uint64_t dispatch thunk of CurrentDevice.isReality.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 840))();
}

uint64_t dispatch thunk of CurrentDevice.isCarPlay.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 848))();
}

uint64_t dispatch thunk of CurrentDevice.isCarDNDMode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 856))();
}

uint64_t dispatch thunk of CurrentDevice.supportsVehicleData.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 864))();
}

uint64_t dispatch thunk of CurrentDevice.isHeadGestureRecognitionAvailable.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 872))();
}

uint64_t dispatch thunk of CurrentDevice.restrictions.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 880))();
}

uint64_t dispatch thunk of CurrentDevice.__allocating_init(storage:)()
{
  return (*(uint64_t (**)(void))(v0 + 888))();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t OUTLINED_FUNCTION_2_13()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_9_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_6(uint64_t result)
{
  void *v1 = result;
  *(void *)(result + 24) = v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_12_6()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_14_6(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return specialized static MockablePublished.subscript.getter(v2);
}

uint64_t OUTLINED_FUNCTION_18_2()
{
  return specialized static MockablePublished.subscript.setter(v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_21_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_22_1()
{
  return v0;
}

void *OUTLINED_FUNCTION_24_1()
{
  return malloc(0x38uLL);
}

uint64_t OUTLINED_FUNCTION_25_1(uint64_t a1)
{
  return specialized static MockablePublished.subscript.setter(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_27_0(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  return specialized static MockablePublished.subscript.getter(v1);
}

uint64_t OUTLINED_FUNCTION_28_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_29_0(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_30_0()
{
  return v0;
}

uint64_t DispatchSemaphoreLock.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = dispatch_semaphore_create(1);
  return v0;
}

uint64_t SimpleLock.withLocked<A>(_:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SimpleLock.withLocked<A>(_:)(a1, a2, a4, a4, a5);
}

{
  uint64_t v8;

  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a3, a5);
  a1(v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
}

Swift::Void __swiftcall DispatchSemaphoreLock.takeLock()()
{
  id v1 = *(id *)(v0 + 16);
  OS_dispatch_semaphore.wait()();
}

Swift::Void __swiftcall DispatchSemaphoreLock.releaseLock()()
{
  id v1 = *(id *)(v0 + 16);
  OS_dispatch_semaphore.signal()();
}

uint64_t DispatchSemaphoreLock.deinit()
{
  return v0;
}

uint64_t DispatchSemaphoreLock.__deallocating_deinit()
{
  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t DispatchSemaphoreLock.init()()
{
  *(void *)(v0 + 16) = dispatch_semaphore_create(1);
  return v0;
}

uint64_t protocol witness for SimpleLock.takeLock() in conformance DispatchSemaphoreLock()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for SimpleLock.releaseLock() in conformance DispatchSemaphoreLock()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t (*static DeadlockDetectingLock.defaultDeadlockAction.getter())()
{
  return closure #1 in variable initialization expression of static DeadlockDetectingLock.defaultDeadlockAction;
}

uint64_t DeadlockDetectingLock.__allocating_init(name:wrapping:deadlockAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  DeadlockDetectingLock.init(name:wrapping:deadlockAction:)(a1, a2, a3, a4, a5);
  return v10;
}

void *DeadlockDetectingLock.init(name:wrapping:deadlockAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v25 = a3;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v16 = UUID.uuidString.getter();
  uint64_t v18 = v17;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  if (!a2)
  {
    swift_bridgeObjectRetain();
    a1 = v16;
    a2 = v18;
  }
  void v6[2] = a1;
  v6[3] = a2;
  uint64_t v19 = MEMORY[0x1CB7919D0](v16, v18);
  swift_bridgeObjectRelease();
  void v6[4] = v19;
  v6[5] = a4;
  v6[6] = a5;
  uint64_t v20 = v25;
  outlined init with copy of SimpleLock?(v25, (uint64_t)&v26);
  if (v27)
  {
    outlined destroy of CheckedContinuation<(), Error>?(v20, &demangling cache variable for type metadata for SimpleLock?);
    outlined init with take of Transforming(&v26, (uint64_t)&v28);
  }
  else
  {
    swift_retain();
    outlined destroy of CheckedContinuation<(), Error>?((uint64_t)&v26, &demangling cache variable for type metadata for SimpleLock?);
    uint64_t v21 = type metadata accessor for DispatchSemaphoreLock();
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = dispatch_semaphore_create(1);
    uint64_t v29 = v21;
    uint64_t v30 = &protocol witness table for DispatchSemaphoreLock;
    swift_release();
    *(void *)&long long v28 = v22;
    outlined destroy of CheckedContinuation<(), Error>?(v20, &demangling cache variable for type metadata for SimpleLock?);
  }
  outlined init with take of Transforming(&v28, (uint64_t)(v6 + 7));
  return v6;
}

uint64_t closure #1 in variable initialization expression of static DeadlockDetectingLock.defaultDeadlockAction()
{
  uint64_t v0 = DeadlockDetectingLock.logDeadlockAndCrash()();
  return outlined init with copy of SimpleLock?(v0);
}

uint64_t outlined init with copy of SimpleLock?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SimpleLock?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for DispatchSemaphoreLock()
{
  return self;
}

Swift::Void __swiftcall DeadlockDetectingLock.takeLock()()
{
}

Swift::Void __swiftcall DeadlockDetectingLock.releaseLock()()
{
  id v1 = objc_msgSend(self, sel_currentThread);
  id v2 = objc_msgSend(v1, sel_threadDictionary);

  objc_msgSend(v2, sel_removeObjectForKey_, *(void *)(v0 + 32));
  outlined init with copy of Transforming(v0 + 56, (uint64_t)v5);
  uint64_t v3 = v6;
  uint64_t v4 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t DeadlockDetectingLock.withLocked<A>(_:)(uint64_t (*a1)(void))
{
  uint64_t v3 = v1;
  DeadlockDetectingLock.tryLock()();
  uint64_t v5 = v2;
  if (v2)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.logger);
    swift_retain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v15 = a1;
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v16 = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      uint64_t v11 = v3[2];
      unint64_t v12 = v3[3];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C9E4C000, v7, v8, "Deadlock detected for %s but deadlockAction returned; executing action re-entrantly (possibly unsafe)",
        v9,
        0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB792FA0](v10, -1, -1);
      uint64_t v13 = v9;
      a1 = v15;
      MEMORY[0x1CB792FA0](v13, -1, -1);
    }
    else
    {
      swift_release();
    }
  }
  uint64_t result = a1();
  if (!v5) {
    return (*(uint64_t (**)(uint64_t))(*v3 + 152))(result);
  }
  return result;
}

void DeadlockDetectingLock.tryLock()()
{
  id v1 = self;
  id v2 = objc_msgSend(v1, sel_currentThread);
  id v3 = objc_msgSend(v2, sel_threadDictionary);

  uint64_t v4 = *(void *)(v0 + 32);
  id v5 = objc_msgSend(v3, sel_objectForKey_, v4);

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined destroy of CheckedContinuation<(), Error>?((uint64_t)&v10, &demangling cache variable for type metadata for Any?);
    (*(void (**)(uint64_t))(v0 + 40))(v0);
    lazy protocol witness table accessor for type DeadlockDetectingLock.DeadlockError and conformance DeadlockDetectingLock.DeadlockError();
    swift_allocError();
    swift_willThrow();
  }
  else
  {
    long long v10 = 0u;
    long long v11 = 0u;
    outlined destroy of CheckedContinuation<(), Error>?((uint64_t)&v10, &demangling cache variable for type metadata for Any?);
    outlined init with copy of Transforming(v0 + 56, (uint64_t)&v10);
    uint64_t v6 = *((void *)&v11 + 1);
    uint64_t v7 = v12;
    __swift_project_boxed_opaque_existential_1(&v10, *((uint64_t *)&v11 + 1));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
    id v8 = objc_msgSend(v1, sel_currentThread);
    id v9 = objc_msgSend(v8, sel_threadDictionary);

    objc_msgSend(v9, sel_setObject_forKey_, v4, v4);
  }
}

uint64_t DeadlockDetectingLock.logDeadlockAndCrash()()
{
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  v14[0] = 0xD00000000000001BLL;
  v14[1] = 0x80000001C9EB8B10;
  uint64_t v2 = *(void *)(v0 + 16);
  id v1 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v2;
  v3._object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x80000001C9EB8B30;
  v4._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v4);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.logger);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    v14[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315650;
    uint64_t v9 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v14);
    OUTLINED_FUNCTION_3_9();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_4_9();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001BLL, 0x80000001C9EB8B10, v14);
    OUTLINED_FUNCTION_3_9();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_1_11(&dword_1C9E4C000, v11, v12, "FatalError at %s:%lu - %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t result = OUTLINED_FUNCTION_0_12();
  __break(1u);
  return result;
}

uint64_t DeadlockDetectingLock.deinit()
{
  swift_bridgeObjectRelease();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return v0;
}

uint64_t DeadlockDetectingLock.__deallocating_deinit()
{
  DeadlockDetectingLock.deinit();

  return MEMORY[0x1F4186488](v0, 96, 7);
}

uint64_t protocol witness for SimpleLock.takeLock() in conformance DeadlockDetectingLock()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t protocol witness for SimpleLock.releaseLock() in conformance DeadlockDetectingLock()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t protocol witness for SimpleLock.withLocked<A>(_:) in conformance DeadlockDetectingLock()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t dispatch thunk of SimpleLock.takeLock()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SimpleLock.releaseLock()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SimpleLock.withLocked<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t method lookup function for DispatchSemaphoreLock(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DispatchSemaphoreLock);
}

uint64_t dispatch thunk of DispatchSemaphoreLock.takeLock()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of DispatchSemaphoreLock.releaseLock()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of DispatchSemaphoreLock.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t type metadata accessor for DeadlockDetectingLock()
{
  return self;
}

uint64_t method lookup function for DeadlockDetectingLock(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DeadlockDetectingLock);
}

uint64_t dispatch thunk of DeadlockDetectingLock.__allocating_init(name:wrapping:deadlockAction:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of DeadlockDetectingLock.takeLock()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of DeadlockDetectingLock.releaseLock()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of DeadlockDetectingLock.withLocked<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

unint64_t lazy protocol witness table accessor for type DeadlockDetectingLock.DeadlockError and conformance DeadlockDetectingLock.DeadlockError()
{
  unint64_t result = lazy protocol witness table cache variable for type DeadlockDetectingLock.DeadlockError and conformance DeadlockDetectingLock.DeadlockError;
  if (!lazy protocol witness table cache variable for type DeadlockDetectingLock.DeadlockError and conformance DeadlockDetectingLock.DeadlockError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeadlockDetectingLock.DeadlockError and conformance DeadlockDetectingLock.DeadlockError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DeadlockDetectingLock.DeadlockError and conformance DeadlockDetectingLock.DeadlockError;
  if (!lazy protocol witness table cache variable for type DeadlockDetectingLock.DeadlockError and conformance DeadlockDetectingLock.DeadlockError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeadlockDetectingLock.DeadlockError and conformance DeadlockDetectingLock.DeadlockError);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DeadlockDetectingLock.DeadlockError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C9E7C0A4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for DeadlockDetectingLock.DeadlockError()
{
  return &unk_1F2429F00;
}

uint64_t OUTLINED_FUNCTION_0_12()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

void OUTLINED_FUNCTION_1_11(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x20u);
}

uint64_t OUTLINED_FUNCTION_3_9()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_4_9()
{
  *(_WORD *)(v0 + 22) = 2080;
  return swift_bridgeObjectRetain();
}

void specialized OptionSet<>.init()(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t specialized OptionSet.symmetricDifference(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = a2 ^ result;
  return result;
}

void specialized OptionSet<>.remove(_:)(uint64_t a1@<X8>, uint64_t a2@<X0>)
{
  if ((*v2 & a2) != 0) {
    *v2 &= ~a2;
  }
  OUTLINED_FUNCTION_1_12(a1);
}

void specialized OptionSet<>.update(with:)(uint64_t a1@<X8>, uint64_t a2@<X0>)
{
  *v2 |= a2;
  OUTLINED_FUNCTION_1_12(a1);
}

uint64_t specialized OptionSet<>.formSymmetricDifference(_:)(uint64_t result)
{
  *v1 ^= result;
  return result;
}

uint64_t specialized SetAlgebra.subtracting(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = a2 & ~result;
  return result;
}

BOOL specialized SetAlgebra.isDisjoint(with:)(uint64_t a1, uint64_t a2)
{
  return (a2 & a1) == 0;
}

BOOL specialized SetAlgebra.isEmpty.getter(uint64_t a1)
{
  return a1 == 0;
}

uint64_t specialized SetAlgebra.subtract(_:)(uint64_t result)
{
  *v1 &= ~result;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

void static BargeInMode.none.getter(void *a1@<X8>)
{
  *a1 = 0;
}

SiriUtilities::BargeInMode __swiftcall BargeInMode.init(rawValue:)(SiriUtilities::BargeInMode rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static BargeInMode.overSiri.getter(void *a1@<X8>)
{
}

void static BargeInMode.overMedia.getter(void *a1@<X8>)
{
}

void static BargeInMode.overTimer.getter(void *a1@<X8>)
{
}

void static BargeInMode.overAlarm.getter(void *a1@<X8>)
{
}

uint64_t BargeInMode.rawValue.getter()
{
  return *(void *)v0;
}

SiriUtilities::BargeInMode protocol witness for OptionSet.init(rawValue:) in conformance BargeInMode(Swift::Int *a1)
{
  return BargeInMode.init(rawValue:)(*a1);
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance BargeInMode(void *a1)
{
  return specialized OptionSet<>.contains(_:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance BargeInMode@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized OptionSet.symmetricDifference(_:)(*a1, *v2, a2);
}

void protocol witness for SetAlgebra.remove(_:) in conformance BargeInMode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
}

void protocol witness for SetAlgebra.update(with:) in conformance BargeInMode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance BargeInMode(uint64_t *a1)
{
  return specialized OptionSet<>.formSymmetricDifference(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance BargeInMode@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized SetAlgebra.subtracting(_:)(*a1, *v2, a2);
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance BargeInMode(uint64_t *a1)
{
  return specialized SetAlgebra.isDisjoint(with:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance BargeInMode(uint64_t *a1)
{
  return specialized SetAlgebra.subtract(_:)(*a1);
}

SiriUtilities::BargeInMode protocol witness for RawRepresentable.init(rawValue:) in conformance BargeInMode@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  result.rawValue = BargeInMode.init(rawValue:)(*a1).rawValue;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance BargeInMode@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = BargeInMode.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance BargeInMode@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized SetAlgebra<>.init(arrayLiteral:)(a1, a2);
}

void BargeInContext.mode.getter(void *a1@<X8>)
{
}

uint64_t BargeInContext.approximatePreviousTTSInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for BargeInContext() + 20);

  return outlined init with copy of DateInterval?(v3, a1);
}

uint64_t type metadata accessor for BargeInContext()
{
  uint64_t result = type metadata singleton initialization cache for BargeInContext;
  if (!type metadata singleton initialization cache for BargeInContext) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of DateInterval?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t BargeInContext.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  uint64_t v1 = (uint64_t)a1 + *(int *)(type metadata accessor for BargeInContext() + 20);
  uint64_t v2 = type metadata accessor for DateInterval();

  return __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
}

uint64_t BargeInContext.init(mode:approximatePreviousTTSInterval:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = *a1;
  uint64_t v4 = (uint64_t)a3 + *(int *)(type metadata accessor for BargeInContext() + 20);

  return outlined init with take of DateInterval?(a2, v4);
}

uint64_t outlined init with take of DateInterval?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type BargeInMode and conformance BargeInMode()
{
  unint64_t result = lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode;
  if (!lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode;
  if (!lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode;
  if (!lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode;
  if (!lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode);
  }
  return result;
}

ValueMetadata *type metadata accessor for BargeInMode()
{
  return &type metadata for BargeInMode;
}

uint64_t *initializeBufferWithCopyOfBuffer for BargeInContext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for DateInterval();
    if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
      memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
      __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t destroy for BargeInContext(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for DateInterval();
  uint64_t result = __swift_getEnumTagSinglePayload(v2, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v5(v2, v3);
  }
  return result;
}

void *initializeWithCopy for BargeInContext(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for DateInterval();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

void *assignWithCopy for BargeInContext(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for DateInterval();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v5, 1, v7);
  int v9 = __swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7);
  if (!EnumTagSinglePayload)
  {
    uint64_t v10 = *(void *)(v7 - 8);
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    memcpy(v5, v6, *(void *)(*(void *)(v11 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  return a1;
}

void *initializeWithTake for BargeInContext(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for DateInterval();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

void *assignWithTake for BargeInContext(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for DateInterval();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v5, 1, v7);
  int v9 = __swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7);
  if (!EnumTagSinglePayload)
  {
    uint64_t v10 = *(void *)(v7 - 8);
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    memcpy(v5, v6, *(void *)(*(void *)(v11 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for BargeInContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C9E7CD60);
}

uint64_t sub_1C9E7CD60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);

  return __swift_getEnumTagSinglePayload(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for BargeInContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C9E7CDC4);
}

uint64_t sub_1C9E7CDC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);

  return __swift_storeEnumTagSinglePayload(v5, a2, a2, v6);
}

void type metadata completion function for BargeInContext()
{
  type metadata accessor for DateInterval?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for DateInterval?()
{
  if (!lazy cache variable for type metadata for DateInterval?)
  {
    type metadata accessor for DateInterval();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DateInterval?);
    }
  }
}

void OUTLINED_FUNCTION_1_12(uint64_t a1@<X8>)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v12);
    return specialized Dictionary._Variant.setValue(_:forKey:)();
  }
  else
  {
    outlined destroy of Any?(a1);
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v6)
    {
      unint64_t v7 = v5;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      uint64_t v9 = *v2;
      *char v2 = 0x8000000000000000;
      Swift::Int v10 = *(void *)(v9 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<ObjectIdentifier, Any>);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
      outlined init with take of Any((_OWORD *)(*(void *)(v11 + 56) + 32 * v7), v12);
      _NativeDictionary._delete(at:)();
      *char v2 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v12, 0, sizeof(v12));
    }
    return outlined destroy of Any?((uint64_t)v12);
  }
}

{
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];

  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v6);
    specialized Dictionary._Variant.setValue(_:forKey:)();
    type metadata accessor for CodingUserInfoKey();
    OUTLINED_FUNCTION_8_9();
    return (*(uint64_t (**)(uint64_t))(v3 + 8))(a2);
  }
  else
  {
    outlined destroy of Any?(a1);
    specialized Dictionary._Variant.removeValue(forKey:)(v6);
    type metadata accessor for CodingUserInfoKey();
    OUTLINED_FUNCTION_8_9();
    (*(void (**)(uint64_t))(v5 + 8))(a2);
    return outlined destroy of Any?((uint64_t)v6);
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities0D11EnvironmentC20InitializingProvider33_20CF7F1B525A92BC26D56D0E773ECAB3LLVG_SSs5NeverOTg504_s13d13Utilities0A11f12CyxxmcAA0aC8h13RzluigSSAC012g7D033_20ijklmnopQ56LLVcfu_33_86b206f40a68fe2df9bfbd6c55755c4aAGSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v4 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      }
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v6;
      *(void *)(v9 + 40) = v5;
      v4 += 3;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t one-time initialization function for root()
{
  type metadata accessor for SiriEnvironment();
  uint64_t v0 = swift_allocObject();
  uint64_t result = SiriEnvironment.init(parent:)(0);
  static SiriEnvironment.root = v0;
  return result;
}

uint64_t SiriEnvironment.__allocating_init(parent:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  SiriEnvironment.init(parent:)(a1);
  return v2;
}

uint64_t static SiriEnvironment.root.getter()
{
  if (one-time initialization token for root != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t static SiriEnvironment.default.getter()
{
  uint64_t result = static SiriEnvironment.forCurrentTask.getter();
  if (!result)
  {
    if (one-time initialization token for root != -1) {
      swift_once();
    }
    return swift_retain();
  }
  return result;
}

uint64_t SiriEnvironment.parent.getter()
{
  return swift_retain();
}

uint64_t key path setter for SiriEnvironment.children : SiriEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 136);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t SiriEnvironment.children.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SiriEnvironment.children.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriEnvironment.children.modify())()
{
  return SiriEnvironmentStorage.storage.modify;
}

BOOL static SiriEnvironment.InitializingProvider.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a4;
}

uint64_t SiriEnvironment.InitializingProvider.init<A>(_:)(uint64_t a1)
{
  return a1;
}

void SiriEnvironment.InitializingProvider.hash(into:)(int a1, Swift::UInt a2)
{
}

Swift::Int SiriEnvironment.InitializingProvider.hashValue.getter(Swift::UInt a1)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SiriEnvironment.InitializingProvider()
{
  return SiriEnvironment.InitializingProvider.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance SiriEnvironment.InitializingProvider(int a1)
{
  SiriEnvironment.InitializingProvider.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SiriEnvironment.InitializingProvider()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SiriEnvironment.InitializingProvider(uint64_t *a1, uint64_t *a2)
{
  return static SiriEnvironment.InitializingProvider.== infix(_:_:)(*a1, a1[1], a1[2], *a2);
}

SiriUtilities::SiriEnvironment::Scope __swiftcall SiriEnvironment.Scope.init(rawValue:)(SiriUtilities::SiriEnvironment::Scope rawValue)
{
  SiriUtilities::SiriEnvironment::Scope *v1 = rawValue;
  return rawValue;
}

void static SiriEnvironment.Scope.conversation.getter(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t SiriEnvironment.Scope.rawValue.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriEnvironment.Scope.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t static SiriEnvironment.Scope.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t SiriEnvironment.Scope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x65756C6156776172 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t SiriEnvironment.Scope.CodingKeys.stringValue.getter()
{
  return 0x65756C6156776172;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriEnvironment.Scope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = SiriEnvironment.Scope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriEnvironment.Scope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriEnvironment.Scope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t SiriEnvironment.Scope.encode(to:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriEnvironment.Scope.CodingKeys>);
  OUTLINED_FUNCTION_0_13();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6, v7);
  OUTLINED_FUNCTION_6_10();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v2, v1);
}

Swift::Int SiriEnvironment.Scope.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t SiriEnvironment.Scope.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriEnvironment.Scope.CodingKeys>);
  OUTLINED_FUNCTION_0_13();
  MEMORY[0x1F4188790](v5, v6);
  OUTLINED_FUNCTION_6_10();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v9 = v8;
    uint64_t v10 = OUTLINED_FUNCTION_4_10();
    v11(v10);
    *a2 = v7;
    a2[1] = v9;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SiriEnvironment.Scope()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SiriEnvironment.Scope@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return SiriEnvironment.Scope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriEnvironment.Scope(void *a1)
{
  return SiriEnvironment.Scope.encode(to:)(a1);
}

unint64_t SiriEnvironment.iterateChildren(_:)(void (*a1)(uint64_t))
{
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_7();
  uint64_t v5 = *(uint64_t (**)(void))(v4 + 128);
  unint64_t result = v5();
  unint64_t v7 = result;
  uint64_t v22 = MEMORY[0x1E4FBC860];
  if (result >> 62)
  {
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v8 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v12 = MEMORY[0x1E4FBC860];
    goto LABEL_15;
  }
  uint64_t v8 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v8) {
    goto LABEL_14;
  }
LABEL_3:
  if (v8 < 1)
  {
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v21 = v5;
  for (uint64_t i = 0; i != v8; ++i)
  {
    if ((v7 & 0xC000000000000001) != 0)
    {
      uint64_t v10 = MEMORY[0x1CB792160](i, v7);
    }
    else
    {
      uint64_t v10 = *(void *)(v7 + 8 * i + 32);
      swift_retain();
    }
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v10 + 96))();
    swift_release();
    if (v11)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = v21;
  uint64_t v12 = v22;
LABEL_15:
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 136))(v12);
  unint64_t result = ((uint64_t (*)(uint64_t))v5)(v13);
  unint64_t v14 = result;
  if (result >> 62)
  {
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v15 = result;
    if (result)
    {
LABEL_17:
      if (v15 >= 1)
      {
        for (uint64_t j = 0; j != v15; ++j)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            uint64_t v17 = MEMORY[0x1CB792160](j, v14);
          }
          else
          {
            uint64_t v17 = *(void *)(v14 + 8 * j + 32);
            swift_retain();
          }
          uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v17 + 96))();
          if (v18)
          {
            uint64_t v19 = *(void *)(v18 + 24);
            if (v19) {
              BOOL v20 = v19 == v2;
            }
            else {
              BOOL v20 = 0;
            }
            if (v20) {
              a1(v18);
            }
            swift_release();
          }
          swift_release();
        }
        goto LABEL_31;
      }
LABEL_37:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v15) {
      goto LABEL_17;
    }
  }
LABEL_31:

  return swift_bridgeObjectRelease();
}

uint64_t key path setter for SiriEnvironment.providers : SiriEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 192);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t SiriEnvironment.providers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SiriEnvironment.providers.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 64) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriEnvironment.providers.modify())()
{
  return SiriEnvironment.providers.modify;
}

uint64_t SiriEnvironment.init(parent:)(uint64_t a1)
{
  uint64_t v2 = v1;
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28FD0]), sel_init);
  uint64_t v5 = MEMORY[0x1E4FBC860];
  *(void *)(v1 + 56) = MEMORY[0x1E4FBC860];
  uint64_t v6 = v1 + 56;
  *(void *)(v6 + 8) = MEMORY[0x1E4FBC868];
  *(void *)(v6 - 40) = v4;
  *(void *)(v6 - 32) = a1;
  *(void *)(v6 - 16) = 0;
  *(void *)(v6 - 8) = 0;
  *(void *)(v6 - 24) = v5;
  OUTLINED_FUNCTION_12_3();
  swift_retain();
  specialized Array.reserveCapacity(_:)(8);
  swift_endAccess();
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakBox<SiriEnvironment>);
    swift_allocObject();
    swift_retain();
    swift_retain();
    uint64_t v7 = specialized WeakBox.init(_:)();
    uint64_t v15 = OUTLINED_FUNCTION_9_7(v7, v8, v9, v10, v11, v12, v13, v14, v28);
    uint64_t v17 = (void (*)(uint64_t *))v16(v15);
    MEMORY[0x1CB791BB0]();
    OUTLINED_FUNCTION_7_8();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    uint64_t v18 = specialized Array._endMutation()();
    long long v26 = OUTLINED_FUNCTION_2_14(v18, v19, v20, v21, v22, v23, v24, v25, v29);
    v17(v26);
    swift_release_n();
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys);
  }
  return result;
}

void specialized Array.reserveCapacity(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  if (!swift_isUniquelyReferenced_nonNull_native() || a1 > *(void *)(v3 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v3 = v4;
  }
  uint64_t *v1 = v3;
}

uint64_t SiriEnvironment.__allocating_init(scope:parent:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  SiriEnvironment.init(scope:parent:)(a1, a2);
  return v4;
}

uint64_t SiriEnvironment.init(scope:parent:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28FD0]), sel_init);
  uint64_t v8 = MEMORY[0x1E4FBC860];
  *(void *)(v2 + 56) = MEMORY[0x1E4FBC860];
  uint64_t v9 = v2 + 56;
  *(void *)(v9 + 8) = MEMORY[0x1E4FBC868];
  *(void *)(v9 - 40) = v7;
  *(void *)(v9 - 32) = a2;
  *(void *)(v9 - 24) = v8;
  *(void *)(v9 - 16) = v5;
  *(void *)(v9 - 8) = v6;
  OUTLINED_FUNCTION_12_3();
  swift_retain();
  specialized Array.reserveCapacity(_:)(8);
  swift_endAccess();
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakBox<SiriEnvironment>);
    swift_allocObject();
    swift_retain();
    swift_retain();
    uint64_t v10 = specialized WeakBox.init(_:)();
    uint64_t v18 = OUTLINED_FUNCTION_9_7(v10, v11, v12, v13, v14, v15, v16, v17, v31);
    uint64_t v20 = (void (*)(uint64_t *))v19(v18);
    MEMORY[0x1CB791BB0]();
    OUTLINED_FUNCTION_7_8();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    uint64_t v21 = specialized Array._endMutation()();
    uint64_t v29 = OUTLINED_FUNCTION_2_14(v21, v22, v23, v24, v25, v26, v27, v28, v32);
    v20(v29);
    swift_release_n();
  }
  return v3;
}

uint64_t SiriEnvironment.requireProvider<A>(of:)()
{
  OUTLINED_FUNCTION_0_7();
  (*(void (**)(void))(v0 + 248))();

  return swift_unknownObjectRelease();
}

uint64_t SiriEnvironment.existingProvider<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = *(void **)(v3 + 16);
  objc_msgSend(v7, sel_lock);
  OUTLINED_FUNCTION_0_7();
  uint64_t v9 = (*(uint64_t (**)(void))(v8 + 184))();
  specialized Dictionary.subscript.getter(a1, v9, &v14);
  swift_bridgeObjectRelease();
  if (v15)
  {
    if (swift_dynamicCast())
    {
      uint64_t v10 = v13;
      goto LABEL_7;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v14);
  }
  uint64_t v10 = *(void *)(v3 + 24);
  if (v10)
  {
    OUTLINED_FUNCTION_0_7();
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 232))(a1, a2, a3);
  }
LABEL_7:
  objc_msgSend(v7, sel_unlock);
  return v10;
}

void *SiriEnvironment.environment(for:)(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = *a1;
    swift_retain_n();
    uint64_t v4 = v1;
    while (1)
    {
      uint64_t v5 = v1[6];
      if (v5)
      {
        BOOL v6 = v1[5] == v3 && v5 == v2;
        if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_release();
          uint64_t v4 = v1;
        }
        else
        {
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();
      }
      id v7 = (void *)v1[3];
      swift_retain();
      swift_release();
      if (!v7) {
        break;
      }
      swift_retain();
      uint64_t v1 = v7;
    }
    return v4;
  }
  else
  {
    swift_retain();
  }
  return v1;
}

uint64_t SiriEnvironment.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = *(void **)(v3 + 16);
  objc_msgSend(v7, sel_lock);
  OUTLINED_FUNCTION_0_7();
  uint64_t v9 = (*(uint64_t (**)(void))(v8 + 184))();
  specialized Dictionary.subscript.getter(a1, v9, &v49);
  swift_bridgeObjectRelease();
  if (v50)
  {
    if (swift_dynamicCast())
    {
      uint64_t v10 = v48[0];
LABEL_10:
      objc_msgSend(v7, sel_unlock);
      return v10;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v49);
  }
  if (*(void *)(v3 + 24))
  {
    OUTLINED_FUNCTION_0_7();
    uint64_t v11 = OUTLINED_FUNCTION_5_7();
    uint64_t v13 = v12(v11);
    if (v13)
    {
      uint64_t v10 = v13;
      goto LABEL_10;
    }
  }
  uint64_t v47 = v7;
  uint64_t v14 = OUTLINED_FUNCTION_5_7();
  uint64_t v15 = SiriEnvironment.InitializingProvider.init<A>(_:)(v14);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  swift_beginAccess();
  char v46 = specialized Sequence<>.contains(_:)(v15, v17, v19, *(void **)(v3 + 56));
  OUTLINED_FUNCTION_12_3();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v20 = *(void *)(*(void *)(v3 + 56) + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
  uint64_t v21 = *(void *)(v3 + 56);
  *(void *)(v21 + 16) = v20 + 1;
  uint64_t v22 = (void *)(v21 + 24 * v20);
  uint64_t v22[4] = v15;
  v22[5] = v17;
  v22[6] = v19;
  swift_endAccess();
  if ((v46 & 1) == 0)
  {
    type metadata accessor for SiriEnvironmentStorage();
    OUTLINED_FUNCTION_5_7();
    SiriEnvironmentStorage.__allocating_init<A>(namespace:)();
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 24);
    uint64_t v24 = swift_retain();
    uint64_t v10 = v23(v24, a2, a3);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v49, a2, a3);
    uint64_t v25 = SiriEnvironment.environment(for:)((uint64_t *)&v49);
    swift_bridgeObjectRelease();
    uint64_t v50 = a2;
    *(void *)&long long v49 = v10;
    uint64_t v26 = *(uint64_t (**)(void *))(*v25 + 200);
    swift_unknownObjectRetain();
    uint64_t v27 = (void (*)(void *, void))v26(v48);
    specialized Dictionary.subscript.setter((uint64_t)&v49, a1);
    v27(v48, 0);
    swift_release();
    swift_release();
    OUTLINED_FUNCTION_12_3();
    specialized RangeReplaceableCollection<>.removeLast()();
    swift_endAccess();
    swift_bridgeObjectRelease();
    id v7 = v47;
    goto LABEL_10;
  }
  uint64_t v29 = swift_bridgeObjectRetain();
  uint64_t v30 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities0D11EnvironmentC20InitializingProvider33_20CF7F1B525A92BC26D56D0E773ECAB3LLVG_SSs5NeverOTg504_s13d13Utilities0A11f12CyxxmcAA0aC8h13RzluigSSAC012g7D033_20ijklmnopQ56LLVcfu_33_86b206f40a68fe2df9bfbd6c55755c4aAGSSTf3nnnpk_nTf1cn_n(v29);
  swift_bridgeObjectRelease();
  *(void *)&long long v49 = v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v31 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v33 = v32;
  swift_bridgeObjectRelease();
  *(void *)&long long v49 = 0;
  *((void *)&v49 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(116);
  v34._object = (void *)0x80000001C9EB8B50;
  v34._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
  String.append(_:)(v34);
  v35._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = 0xD000000000000042;
  v36._object = (void *)0x80000001C9EB8B80;
  String.append(_:)(v36);
  v37._uint64_t countAndFlagsBits = v31;
  v37._object = v33;
  String.append(_:)(v37);
  long long v38 = v49;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  __swift_project_value_buffer(v39, (uint64_t)static Logger.logger);
  swift_bridgeObjectRetain_n();
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(void *)&long long v49 = v43;
    *(_DWORD *)uint64_t v42 = 136315650;
    uint64_t v44 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, (uint64_t *)&v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v42 + 22) = 2080;
    swift_bridgeObjectRetain();
    v48[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, *((unint64_t *)&v38 + 1), (uint64_t *)&v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C9E4C000, v40, v41, "FatalError at %s:%lu - %s", (uint8_t *)v42, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1CB792FA0](v43, -1, -1);
    MEMORY[0x1CB792FA0](v42, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4[2];
  if (!v4) {
    return 0;
  }
  if (a4[4] == result) {
    return 1;
  }
  if (v4 == 1) {
    return 0;
  }
  BOOL v6 = a4 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v8 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    uint64_t v9 = *v6;
    v6 += 3;
    BOOL v5 = v9 == result;
    if (v9 == result || v8 == v4) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t SiriEnvironment.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = *(void **)(v3 + 16);
  objc_msgSend(v7, sel_lock);
  v22[3] = a3;
  v22[0] = a1;
  OUTLINED_FUNCTION_0_7();
  uint64_t v9 = *(uint64_t (**)(uint64_t *))(v8 + 200);
  swift_unknownObjectRetain();
  uint64_t v10 = (void (*)(uint64_t *))v9(v21);
  uint64_t v11 = specialized Dictionary.subscript.setter((uint64_t)v22, a2);
  uint64_t v19 = OUTLINED_FUNCTION_2_14(v11, v12, v13, v14, v15, v16, v17, v18, v21[0]);
  v10(v19);
  objc_msgSend(v7, sel_unlock);
  return swift_unknownObjectRelease();
}

void (*SiriEnvironment.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x28uLL);
  *a1 = v9;
  void v9[3] = a4;
  void v9[4] = v4;
  v9[1] = a2;
  v9[2] = a3;
  void *v9 = SiriEnvironment.subscript.getter(a2, a3, a4);
  return SiriEnvironment.subscript.modify;
}

void SiriEnvironment.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = (*a1)[1];
  uint64_t v3 = (*a1)[2];
  uint64_t v5 = **a1;
  if (a2)
  {
    uint64_t v6 = swift_unknownObjectRetain();
    SiriEnvironment.subscript.setter(v6, v4, v3);
    swift_unknownObjectRelease();
  }
  else
  {
    SiriEnvironment.subscript.setter(v5, v4, v3);
  }

  free(v2);
}

uint64_t SiriEnvironment.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v0 + 24) = 0;
  if (v1)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native()) {
        break;
      }
      uint64_t v2 = *(void *)(v1 + 24);
      swift_retain();
      swift_release();
      uint64_t v1 = v2;
    }
    while (v2);
  }
  swift_release();
  return v0;
}

uint64_t SiriEnvironment.__deallocating_deinit()
{
  SiriEnvironment.deinit();

  return MEMORY[0x1F4186488](v0, 72, 7);
}

uint64_t specialized WeakBox.init(_:)()
{
  swift_weakInit();
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v0;
}

void specialized RangeReplaceableCollection<>.removeLast()()
{
  if (*(void *)(*(void *)v0 + 16))
  {
    specialized Array._customRemoveLast()();
    if (!v1) {
      specialized Array.remove(at:)(*(void *)(*(void *)v0 + 16) - 1);
    }
  }
  else
  {
    __break(1u);
  }
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriEnvironment.Scope and conformance SiriEnvironment.Scope()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriEnvironment.Scope and conformance SiriEnvironment.Scope;
  if (!lazy protocol witness table cache variable for type SiriEnvironment.Scope and conformance SiriEnvironment.Scope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriEnvironment.Scope and conformance SiriEnvironment.Scope);
  }
  return result;
}

uint64_t sub_1C9E7EE28@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_0_7();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 128))();
  *a1 = result;
  return result;
}

uint64_t sub_1C9E7EE74@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_0_7();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 184))();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for SiriEnvironment()
{
  return self;
}

uint64_t method lookup function for SiriEnvironment(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SiriEnvironment);
}

uint64_t dispatch thunk of SiriEnvironment.children.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of SiriEnvironment.children.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of SiriEnvironment.children.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of SiriEnvironment.iterateChildren(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of SiriEnvironment.providers.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of SiriEnvironment.providers.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of SiriEnvironment.providers.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of SiriEnvironment.__allocating_init(parent:)()
{
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of SiriEnvironment.__allocating_init(scope:parent:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of SiriEnvironment.requireProvider<A>(of:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of SiriEnvironment.existingProvider<A>(of:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of SiriEnvironment.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of SiriEnvironment.subscript.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of SiriEnvironment.subscript.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

ValueMetadata *type metadata accessor for SiriEnvironment.Scope()
{
  return &type metadata for SiriEnvironment.Scope;
}

uint64_t initializeBufferWithCopyOfBuffer for SiriEnvironment.InitializingProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SiriEnvironment.InitializingProvider()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for SiriEnvironment.InitializingProvider(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SiriEnvironment.InitializingProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriEnvironment.InitializingProvider(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriEnvironment.InitializingProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriEnvironment.InitializingProvider()
{
  return &type metadata for SiriEnvironment.InitializingProvider;
}

unsigned char *storeEnumTagSinglePayload for SiriEnvironment.Scope.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C9E7F2E8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for SiriEnvironment.Scope.CodingKeys()
{
  return &unk_1F242A0B8;
}

unint64_t lazy protocol witness table accessor for type SiriEnvironment.InitializingProvider and conformance SiriEnvironment.InitializingProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriEnvironment.InitializingProvider and conformance SiriEnvironment.InitializingProvider;
  if (!lazy protocol witness table cache variable for type SiriEnvironment.InitializingProvider and conformance SiriEnvironment.InitializingProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriEnvironment.InitializingProvider and conformance SiriEnvironment.InitializingProvider);
  }
  return result;
}

void specialized Array.remove(at:)(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    uint64_t v3 = v6;
  }
  unint64_t v4 = *(void *)(v3 + 16);
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v3 + 24 * a1 + 56), v4 - 1 - a1, (char *)(v3 + 24 * a1 + 32));
    *(void *)(v3 + 16) = v5;
    uint64_t *v1 = v3;
  }
}

void specialized Array._customRemoveLast()()
{
  uint64_t v1 = *v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    uint64_t v1 = v3;
  }
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    *(void *)(v1 + 16) = v2 - 1;
    uint64_t *v0 = v1;
  }
  else
  {
    __break(1u);
  }
}

void specialized _ArrayBuffer._consumeAndCreateNew()()
{
}

uint64_t *OUTLINED_FUNCTION_2_14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

uint64_t OUTLINED_FUNCTION_4_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_8()
{
  uint64_t v2 = *(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v2);
}

uint64_t *OUTLINED_FUNCTION_9_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

BOOL static DeviceIdiom.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

SiriUtilities::DeviceIdiom __swiftcall DeviceIdiom.init(aceValue:)(Swift::String aceValue)
{
  object = aceValue._object;
  uint64_t countAndFlagsBits = aceValue._countAndFlagsBits;
  unint64_t v5 = v1;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == aceValue._countAndFlagsBits && v6 == object)
  {
    SiriUtilities::DeviceIdiom result = OUTLINED_FUNCTION_4_0();
    goto LABEL_8;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    SiriUtilities::DeviceIdiom result = swift_bridgeObjectRelease();
LABEL_8:
    char v9 = 5;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v10 == object)
  {
    SiriUtilities::DeviceIdiom result = OUTLINED_FUNCTION_4_0();
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    SiriUtilities::DeviceIdiom result = swift_bridgeObjectRelease();
LABEL_17:
    char v9 = 3;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v12 == object)
  {
    SiriUtilities::DeviceIdiom result = OUTLINED_FUNCTION_4_0();
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    SiriUtilities::DeviceIdiom result = swift_bridgeObjectRelease();
LABEL_25:
    char v9 = 0;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v14 == object)
  {
    SiriUtilities::DeviceIdiom result = OUTLINED_FUNCTION_4_0();
    goto LABEL_33;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    SiriUtilities::DeviceIdiom result = swift_bridgeObjectRelease();
LABEL_33:
    char v9 = 7;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v16 == object)
  {
    SiriUtilities::DeviceIdiom result = OUTLINED_FUNCTION_4_0();
    goto LABEL_41;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    SiriUtilities::DeviceIdiom result = swift_bridgeObjectRelease();
LABEL_41:
    char v9 = 6;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v18 == object)
  {
    SiriUtilities::DeviceIdiom result = OUTLINED_FUNCTION_4_0();
    goto LABEL_49;
  }
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1();
  if (v2)
  {
    SiriUtilities::DeviceIdiom result = swift_bridgeObjectRelease();
LABEL_49:
    char v9 = 1;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v20 == object)
  {
    char v9 = 2;
    SiriUtilities::DeviceIdiom result = OUTLINED_FUNCTION_4_0();
  }
  else
  {
    char v22 = OUTLINED_FUNCTION_0();
    swift_bridgeObjectRelease();
    SiriUtilities::DeviceIdiom result = swift_bridgeObjectRelease();
    if (v22) {
      char v9 = 2;
    }
    else {
      char v9 = 9;
    }
  }
LABEL_9:
  char *v5 = v9;
  return result;
}

uint64_t static DeviceIdiom.fromSAUserInterfaceIdiom(userInterfaceIdiom:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  uint64_t v4 = a1;
  uint64_t v5 = a2;

  return DeviceIdiom.init(aceValue:)(*(Swift::String *)&v4);
}

void DeviceIdiom.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int DeviceIdiom.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type DeviceIdiom and conformance DeviceIdiom()
{
  unint64_t result = lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom;
  if (!lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DeviceIdiom(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v5 = v6 - 10;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for DeviceIdiom(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9E7FAC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceIdiom()
{
  return &type metadata for DeviceIdiom;
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(a2 + 56) + 32 * v5;
    outlined init with copy of Any(v7, (uint64_t)a3);
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

unint64_t specialized Dictionary.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (double result = specialized __RawDictionaryStorage.find<A>(_:)(result), (v5 & 1) != 0)) {
    char v6 = *(unsigned char *)(*(void *)(a2 + 56) + result);
  }
  else {
    char v6 = 7;
  }
  *a3 = v6;
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(a3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

{
  char v3;

  if (*(void *)(a3 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v3 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 40 * v6;
    outlined init with copy of Transforming(v8, a4);
  }
  else
  {
    *(void *)(a4 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(), (v5 & 1) != 0))
  {
    uint64_t v6 = *(void *)(a1 + 56) + 32 * v4;
    outlined init with copy of Any(v6, (uint64_t)a2);
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t static TransformationDescriptor.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  uint64_t v8 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v11 = a2[6];
  if (*a1 == *a2 && a1[1] == a2[1])
  {
    if (v2 != v8) {
      return 0;
    }
  }
  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v13 & 1) == 0 || v2 != v8) {
      return result;
    }
  }
  BOOL v15 = v3 == v7 && v4 == v10;
  if (v15 || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v16 & 1) != 0))
  {
    if (v5 == v9 && v6 == v11)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

void __swiftcall TransformationDescriptor.init(from:)(SiriUtilities::TransformationDescriptor_optional *__return_ptr retstr, Swift::OpaquePointer from)
{
  if (!*((void *)from._rawValue + 2)) {
    goto LABEL_19;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(1701667150, 0xE400000000000000);
  if ((v5 & 1) == 0) {
    goto LABEL_19;
  }
  uint64_t v6 = (uint64_t *)(*((void *)from._rawValue + 7) + 16 * v4);
  uint64_t v8 = *v6;
  uint64_t v7 = (void *)v6[1];
  swift_bridgeObjectRetain();
  uint64_t v9 = specialized Dictionary.subscript.getter(0x6E6F6973726556, 0xE700000000000000, (uint64_t)from._rawValue);
  if (!v10) {
    goto LABEL_18;
  }
  uint64_t v11 = v9;
  unint64_t v12 = v10;
  specialized Dictionary.subscript.getter(0x7079547475706E49, 0xE900000000000065, (uint64_t)from._rawValue);
  if (!v13)
  {
    swift_bridgeObjectRelease();
LABEL_18:
    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRelease();
    retstr->value.outputType.encoding._object = 0;
    *(_OWORD *)&retstr->value.id.version = 0u;
    *(_OWORD *)&retstr->value.inputType.encoding._object = 0u;
    retstr->value.id.name = 0u;
    return;
  }
  specialized Dictionary.subscript.getter(0x795474757074754FLL, 0xEA00000000006570, (uint64_t)from._rawValue);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  if (!v15)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  uint64_t v16 = HIBYTE(v12) & 0xF;
  uint64_t v17 = v11 & 0xFFFFFFFFFFFFLL;
  if ((v12 & 0x2000000000000000) != 0) {
    uint64_t v18 = HIBYTE(v12) & 0xF;
  }
  else {
    uint64_t v18 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if (!v18)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if ((v12 & 0x1000000000000000) != 0)
  {
    Swift::Int v20 = (Swift::Int)specialized _parseInteger<A, B>(ascii:radix:)(v11, v12, 10);
    LOBYTE(v11) = v43;
    goto LABEL_57;
  }
  if ((v12 & 0x2000000000000000) == 0)
  {
    if ((v11 & 0x1000000000000000) != 0) {
      uint64_t v19 = (unsigned __int8 *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v19 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    Swift::Int v20 = (Swift::Int)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v19, v17, 10);
    LOBYTE(v11) = v21 & 1;
LABEL_57:
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v36 = OUTLINED_FUNCTION_20_3();
      long long v38 = v37;
      uint64_t v39 = OUTLINED_FUNCTION_20_3();
      retstr->value.id.name._uint64_t countAndFlagsBits = v8;
      retstr->value.id.name._object = v7;
      retstr->value.id.version = v20;
      retstr->value.inputType.encoding._uint64_t countAndFlagsBits = v36;
      retstr->value.inputType.encoding._object = v38;
      retstr->value.outputType.encoding._uint64_t countAndFlagsBits = v39;
      retstr->value.outputType.encoding._object = v40;
      return;
    }
    goto LABEL_20;
  }
  if (v11 == 43)
  {
    if (!v16) {
      goto LABEL_71;
    }
    if (v16 == 1) {
      goto LABEL_43;
    }
    OUTLINED_FUNCTION_5_8();
    if (!v25 & v24) {
      goto LABEL_43;
    }
    Swift::Int v20 = v27;
    if (v26 != 2)
    {
      OUTLINED_FUNCTION_5_8();
      if (!v25 & v24) {
        goto LABEL_43;
      }
      Swift::Int v20 = 10 * v20 + v29;
      if (v28 != 3)
      {
        while (1)
        {
          OUTLINED_FUNCTION_18_3();
          if (!v25 & v24) {
            goto LABEL_43;
          }
          OUTLINED_FUNCTION_6_11();
          if (!v25) {
            goto LABEL_43;
          }
          Swift::Int v20 = v31 + v30;
          if (__OFADD__(v31, v30)) {
            goto LABEL_43;
          }
          OUTLINED_FUNCTION_9_8();
          if (v25) {
            goto LABEL_57;
          }
        }
      }
    }
LABEL_56:
    LOBYTE(v11) = 0;
    goto LABEL_57;
  }
  if (v11 != 45)
  {
    if (!v16 || (v11 - 48) > 9u) {
      goto LABEL_43;
    }
    Swift::Int v20 = (v11 - 48);
    if (v16 != 1)
    {
      OUTLINED_FUNCTION_5_8();
      if (!v25 & v24) {
        goto LABEL_43;
      }
      Swift::Int v20 = 10 * (v11 - 48) + v33;
      if (v32 != 2)
      {
        while (1)
        {
          OUTLINED_FUNCTION_18_3();
          if (!v25 & v24) {
            goto LABEL_43;
          }
          OUTLINED_FUNCTION_6_11();
          if (!v25) {
            goto LABEL_43;
          }
          Swift::Int v20 = v35 + v34;
          if (__OFADD__(v35, v34)) {
            goto LABEL_43;
          }
          OUTLINED_FUNCTION_9_8();
          if (v25) {
            goto LABEL_57;
          }
        }
      }
    }
    goto LABEL_56;
  }
  if (v16)
  {
    if (v16 != 1)
    {
      OUTLINED_FUNCTION_5_8();
      if (!(!v25 & v24))
      {
        if (v22 == 2)
        {
          LOBYTE(v11) = 0;
          Swift::Int v20 = -(uint64_t)v23;
          goto LABEL_57;
        }
        if ((BYTE2(v11) - 48) <= 9u)
        {
          Swift::Int v20 = -10 * v23 - (BYTE2(v11) - 48);
          if (v22 == 3) {
            goto LABEL_56;
          }
          while (1)
          {
            OUTLINED_FUNCTION_18_3();
            if (!v25 & v24) {
              break;
            }
            OUTLINED_FUNCTION_6_11();
            if (!v25) {
              break;
            }
            Swift::Int v20 = v42 - v41;
            if (__OFSUB__(v42, v41)) {
              break;
            }
            OUTLINED_FUNCTION_9_8();
            if (v25) {
              goto LABEL_57;
            }
          }
        }
      }
    }
LABEL_43:
    Swift::Int v20 = 0;
    LOBYTE(v11) = 1;
    goto LABEL_57;
  }
  __break(1u);
LABEL_71:
  __break(1u);
}

uint64_t TransformationPlugin.supportedTransformations()()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t TransformationPlugin.namedTransformations()()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t TransformationIdentifier.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TransformationIdentifier.version.getter()
{
  return *(void *)(v0 + 16);
}

SiriUtilities::TransformationIdentifier __swiftcall TransformationIdentifier.init(name:version:)(Swift::String name, Swift::Int version)
{
  *uint64_t v2 = name;
  v2[1]._uint64_t countAndFlagsBits = version;
  result.name = name;
  result.version = version;
  return result;
}

BOOL static TransformationIdentifier.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return v2 == v3;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v5) {
    return v2 == v3;
  }
  return result;
}

void TransformationIdentifier.hash(into:)()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
}

uint64_t TransformationIdentifier.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t TransformationIdentifier.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x6E6F6973726576;
  }
  else {
    return 1701667182;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TransformationIdentifier.CodingKeys()
{
  return TransformationCapability.TransformationCapabilityType.CodingKeys.hashValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TransformationIdentifier.CodingKeys()
{
  return TransformationIdentifier.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TransformationIdentifier.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = TransformationIdentifier.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TransformationIdentifier.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TransformationIdentifier.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

void TransformationIdentifier.encode(to:)()
{
  OUTLINED_FUNCTION_6_5();
  uint64_t v3 = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TransformationIdentifier.CodingKeys>);
  OUTLINED_FUNCTION_1_5();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7, v8);
  OUTLINED_FUNCTION_8_4();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0) {
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  OUTLINED_FUNCTION_9_3();
}

Swift::Int TransformationIdentifier.hashValue.getter()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_13_7();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void TransformationIdentifier.init(from:)()
{
  OUTLINED_FUNCTION_6_5();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TransformationIdentifier.CodingKeys>);
  OUTLINED_FUNCTION_1_5();
  MEMORY[0x1F4188790](v5, v6);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  lazy protocol witness table accessor for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  }
  else
  {
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v9 = v8;
    swift_bridgeObjectRetain();
    uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = OUTLINED_FUNCTION_10_3();
    v12(v11);
    *uint64_t v4 = v7;
    v4[1] = v9;
    v4[2] = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_9_3();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TransformationIdentifier()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_13_7();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance TransformationIdentifier()
{
}

void protocol witness for Encodable.encode(to:) in conformance TransformationIdentifier()
{
}

uint64_t TransformationDescriptor.id.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  uint64_t v3 = v1[2];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t TransformationDescriptor.inputType.getter@<X0>(void *a1@<X8>)
{
  return OUTLINED_FUNCTION_7_9(*(void *)(v1 + 32), a1);
}

uint64_t TransformationDescriptor.outputType.getter@<X0>(void *a1@<X8>)
{
  return OUTLINED_FUNCTION_7_9(*(void *)(v1 + 48), a1);
}

void __swiftcall TransformationDescriptor.init(id:inputType:outputType:)(SiriUtilities::TransformationDescriptor *__return_ptr retstr, SiriUtilities::TransformationIdentifier id, SiriUtilities::TypeIdentifier inputType, SiriUtilities::TypeIdentifier outputType)
{
  Swift::Int v4 = *(void *)(id.name._countAndFlagsBits + 16);
  uint64_t v5 = *(void *)id.name._object;
  uint64_t v6 = (void *)*((void *)id.name._object + 1);
  uint64_t v7 = *(void *)id.version;
  uint64_t v8 = *(void **)(id.version + 8);
  retstr->id.name = *(Swift::String *)id.name._countAndFlagsBits;
  retstr->id.version = v4;
  retstr->inputType.encoding._uint64_t countAndFlagsBits = v5;
  retstr->inputType.encoding._object = v6;
  retstr->outputType.encoding._uint64_t countAndFlagsBits = v7;
  retstr->outputType.encoding._object = v8;
}

uint64_t TransformationDescriptor.init(id:transformation:)@<X0>(long long *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  long long v11 = *a1;
  uint64_t v5 = *((void *)a1 + 2);
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v6 = OUTLINED_FUNCTION_16_3();
  v7(v6);
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v8 = OUTLINED_FUNCTION_16_3();
  v9(v8);
  *(_OWORD *)a3 = v11;
  *(void *)(a3 + 16) = v5;
  *(void *)(a3 + 24) = v12;
  *(void *)(a3 + 32) = v13;
  *(void *)(a3 + 40) = v12;
  *(void *)(a3 + 48) = v13;

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
}

uint64_t TransformationDescriptor.init(name:version:transformation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  uint64_t v10 = OUTLINED_FUNCTION_10_7();
  v11(v10);
  __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  uint64_t v12 = OUTLINED_FUNCTION_10_7();
  v13(v12);
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = v15;
  a5[4] = v16;
  a5[5] = v15;
  a5[6] = v16;

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a4);
}

uint64_t TransformationDescriptor.CodingKeys.rawValue.getter()
{
  uint64_t result = 1701667150;
  switch(*v0)
  {
    case 1:
      uint64_t result = OUTLINED_FUNCTION_4_11();
      break;
    case 2:
      uint64_t result = OUTLINED_FUNCTION_3_10();
      break;
    case 3:
      uint64_t result = 0x795474757074754FLL;
      break;
    default:
      return result;
  }
  return result;
}

void TransformationDescriptor.init(from:)()
{
  OUTLINED_FUNCTION_6_5();
  uint64_t v2 = v1;
  Swift::Int v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TransformationDescriptor.CodingKeys>);
  OUTLINED_FUNCTION_1_5();
  MEMORY[0x1F4188790](v5, v6);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  lazy protocol witness table accessor for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  }
  else
  {
    uint64_t v7 = OUTLINED_FUNCTION_21_2();
    uint64_t v9 = v8;
    uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_21_2();
    uint64_t v15 = String.init<A>(_:)();
    uint64_t v17 = v10;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v16 = String.init<A>(_:)();
    uint64_t v12 = v11;
    uint64_t v13 = OUTLINED_FUNCTION_1_13();
    v14(v13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *Swift::Int v4 = v7;
    v4[1] = v9;
    v4[2] = v18;
    v4[3] = v15;
    v4[4] = v17;
    v4[5] = v16;
    v4[6] = v12;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_9_3();
}

void TransformationDescriptor.encode(to:)()
{
  OUTLINED_FUNCTION_6_5();
  uint64_t v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TransformationDescriptor.CodingKeys>);
  OUTLINED_FUNCTION_1_5();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6, v7);
  OUTLINED_FUNCTION_8_4();
  uint64_t v8 = v3[3];
  uint64_t v9 = v3;
  uint64_t v11 = v10;
  __swift_project_boxed_opaque_existential_1(v9, v8);
  lazy protocol witness table accessor for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  OUTLINED_FUNCTION_12_7();
  if (!v0)
  {
    KeyedEncodingContainer.encode(_:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    OUTLINED_FUNCTION_12_7();
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v11);
  OUTLINED_FUNCTION_9_3();
}

SiriUtilities::TransformationDescriptor::CodingKeys_optional __swiftcall TransformationDescriptor.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TransformationDescriptor.CodingKeys.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 4;
  if (v5 < 4) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

SiriUtilities::TransformationDescriptor::CodingKeys_optional __swiftcall TransformationDescriptor.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  uint64_t v2 = v1;
  result.value = TransformationDescriptor.CodingKeys.init(rawValue:)(stringValue).value;
  *uint64_t v2 = v4;
  return result;
}

SiriUtilities::TransformationDescriptor::CodingKeys_optional __swiftcall TransformationDescriptor.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  unsigned char *v1 = 4;
  return (SiriUtilities::TransformationDescriptor::CodingKeys_optional)intValue;
}

uint64_t TransformationDescriptor.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t TransformationDescriptor.CodingKeys.stringValue.getter()
{
  uint64_t result = 1701667150;
  switch(*v0)
  {
    case 1:
      uint64_t result = OUTLINED_FUNCTION_4_11();
      break;
    case 2:
      uint64_t result = OUTLINED_FUNCTION_3_10();
      break;
    case 3:
      uint64_t result = 0x795474757074754FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TransformationDescriptor.CodingKeys(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TransformationDescriptor.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TransformationDescriptor.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TransformationDescriptor.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriUtilities::TransformationDescriptor::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance TransformationDescriptor.CodingKeys(Swift::String *a1)
{
  return TransformationDescriptor.CodingKeys.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance TransformationDescriptor.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TransformationDescriptor.CodingKeys.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TransformationDescriptor.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TransformationDescriptor.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t TransformationDescriptor.hash(into:)()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int TransformationDescriptor.hashValue.getter()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_13_7();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TransformationDescriptor()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance TransformationDescriptor()
{
}

void protocol witness for Encodable.encode(to:) in conformance TransformationDescriptor()
{
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  char v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v6 = String.UTF16View.index(_:offsetBy:)();
    OUTLINED_FUNCTION_8_10(v6);
    return v7 | 4;
  }
  else
  {
    uint64_t v3 = MEMORY[0x1CB791A80](15, a1 >> 16);
    OUTLINED_FUNCTION_8_10(v3);
    return v4 | 8;
  }
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(a1, a2, a3);
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = static String._copying(_:)();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unint64_t lazy protocol witness table accessor for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys);
  }
  return result;
}

uint64_t dispatch thunk of TransformationPlugin.typedTransformations()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of TransformationPlugin.namedTransformations()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of TransformationPlugin.load(transformation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

void *initializeBufferWithCopyOfBuffer for TransformationIdentifier(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TransformationIdentifier(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

void *assignWithTake for TransformationIdentifier(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for TransformationIdentifier(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TransformationIdentifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for TransformationIdentifier()
{
}

uint64_t destroy for TransformationDescriptor()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TransformationDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TransformationDescriptor(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TransformationDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TransformationDescriptor(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TransformationDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for TransformationDescriptor()
{
}

uint64_t getEnumTagSinglePayload for TransformationDescriptor.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for TransformationDescriptor.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9E81CC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for TransformationDescriptor.CodingKeys()
{
}

unsigned char *storeEnumTagSinglePayload for TransformationIdentifier.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9E81DC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TransformationIdentifier.CodingKeys()
{
  return &unk_1F242A370;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v15 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v16 = a3 + 48;
        unsigned __int8 v17 = a3 + 55;
        unsigned __int8 v18 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = 58;
        }
        else
        {
          unsigned __int8 v18 = 97;
          unsigned __int8 v17 = 65;
        }
        if (result)
        {
          uint64_t v9 = 0;
          uint64_t v19 = result + 1;
          do
          {
            unsigned int v20 = *v19;
            if (v20 < 0x30 || v20 >= v16)
            {
              if (v20 < 0x41 || v20 >= v17)
              {
                uint64_t v13 = 0;
                if (v20 < 0x61 || v20 >= v18) {
                  return (unsigned __int8 *)v13;
                }
                char v21 = -87;
              }
              else
              {
                char v21 = -55;
              }
            }
            else
            {
              char v21 = -48;
            }
            uint64_t v22 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
              return 0;
            }
            uint64_t v9 = v22 + (v20 + v21);
            if (__OFADD__(v22, (v20 + v21))) {
              return 0;
            }
            ++v19;
            --v15;
          }
          while (v15);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        unsigned __int8 v23 = a3 + 48;
        unsigned __int8 v24 = a3 + 55;
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v23 = 58;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v24 = 65;
        }
        if (result)
        {
          uint64_t v26 = 0;
          do
          {
            unsigned int v27 = *result;
            if (v27 < 0x30 || v27 >= v23)
            {
              if (v27 < 0x41 || v27 >= v24)
              {
                uint64_t v13 = 0;
                if (v27 < 0x61 || v27 >= v25) {
                  return (unsigned __int8 *)v13;
                }
                char v28 = -87;
              }
              else
              {
                char v28 = -55;
              }
            }
            else
            {
              char v28 = -48;
            }
            uint64_t v29 = v26 * a3;
            if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
              return 0;
            }
            uint64_t v26 = v29 + (v27 + v28);
            if (__OFADD__(v29, (v27 + v28))) {
              return 0;
            }
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)(v29 + (v27 + v28));
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      uint64_t v5 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v6 = a3 + 48;
        unsigned __int8 v7 = a3 + 55;
        unsigned __int8 v8 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = 58;
        }
        else
        {
          unsigned __int8 v8 = 97;
          unsigned __int8 v7 = 65;
        }
        if (result)
        {
          uint64_t v9 = 0;
          for (uint64_t i = result + 1; ; ++i)
          {
            unsigned int v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                uint64_t v13 = 0;
                if (v11 < 0x61 || v11 >= v8) {
                  return (unsigned __int8 *)v13;
                }
                char v12 = -87;
              }
              else
              {
                char v12 = -55;
              }
            }
            else
            {
              char v12 = -48;
            }
            uint64_t v14 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
              return 0;
            }
            uint64_t v9 = v14 - (v11 + v12);
            if (__OFSUB__(v14, (v11 + v12))) {
              return 0;
            }
            if (!--v5) {
              return (unsigned __int8 *)v9;
            }
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0 = specialized Collection.subscript.getter();
  uint64_t v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized Collection.subscript.getter()
{
  return String.subscript.getter();
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      unsigned int v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      unint64_t v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        _StringObject.sharedUTF8.getter();
LABEL_4:
        JUMPOUT(0x1CB791A10);
      }
    }
    else
    {
      unsigned int v11 = (void *)MEMORY[0x1E4FBC860];
    }
    uint64_t v13 = MEMORY[0x1CB791A10](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1CB791A10]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

uint64_t specialized Collection.count.getter(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return MEMORY[0x1F4183AA8](a1, a2, a3, a4);
  }
  __break(1u);
  return MEMORY[0x1F4183AA8](a1, a2, a3, a4);
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_35;
  }
  if (a3 < 0) {
    goto LABEL_38;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_35:
    void *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    void v9[3] = a7;
    void v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    __n128 result = v12;
    if ((v12 & 0xC) == v15) {
      __n128 result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      __n128 result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
      }
      else
      {
        __n128 result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          __n128 result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
      }
    }
    if ((v12 & 0xC) == v15)
    {
      __n128 result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
      unint64_t v12 = result;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v23 <= v12 >> 16) {
      goto LABEL_37;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_31:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_35;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_1_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_2_15(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t OUTLINED_FUNCTION_3_10()
{
  return 0x7079547475706E49;
}

uint64_t OUTLINED_FUNCTION_4_11()
{
  return 0x6E6F6973726556;
}

uint64_t OUTLINED_FUNCTION_7_9@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v2;
  a2[1] = a1;
  return swift_bridgeObjectRetain();
}

unint64_t OUTLINED_FUNCTION_8_10(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t OUTLINED_FUNCTION_10_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_12_7()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_13_7()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_16_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_20_3()
{
  return String.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_21_2()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t SiriEnvironment.currentProcess.getter()
{
  uint64_t v0 = type metadata accessor for CurrentProcess();
  OUTLINED_FUNCTION_0_7();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 248);
  uint64_t v2 = lazy protocol witness table accessor for type CurrentProcess and conformance CurrentProcess(&lazy protocol witness table cache variable for type CurrentProcess and conformance CurrentProcess);

  return v4(v0, v0, v2);
}

uint64_t type metadata accessor for CurrentProcess()
{
  return self;
}

uint64_t key path setter for SiriEnvironment.currentProcess : SiriEnvironment(id *a1)
{
  return SiriEnvironment.currentProcess.setter((uint64_t)*a1);
}

uint64_t SiriEnvironment.currentProcess.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CurrentProcess();
  OUTLINED_FUNCTION_0_7();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 256);
  uint64_t v4 = lazy protocol witness table accessor for type CurrentProcess and conformance CurrentProcess(&lazy protocol witness table cache variable for type CurrentProcess and conformance CurrentProcess);

  return v6(a1, v2, v2, v4);
}

void (*SiriEnvironment.currentProcess.modify(void *a1))()
{
  a1[1] = v1;
  uint64_t v3 = type metadata accessor for CurrentProcess();
  a1[2] = v3;
  OUTLINED_FUNCTION_0_7();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 248);
  uint64_t v6 = lazy protocol witness table accessor for type CurrentProcess and conformance CurrentProcess(&lazy protocol witness table cache variable for type CurrentProcess and conformance CurrentProcess);
  a1[3] = v6;
  *a1 = v5(v3, v3, v6);
  return SiriEnvironment.currentProcess.modify;
}

void SiriEnvironment.currentProcess.modify()
{
  OUTLINED_FUNCTION_0_7();
  uint64_t v2 = *(void (**)(void))(v1 + 256);
  if (v3)
  {
    id v4 = v0;
    OUTLINED_FUNCTION_2_16();
    v2();
  }
  else
  {
    OUTLINED_FUNCTION_2_16();
    v2();
  }
}

uint64_t key path getter for CurrentProcess.mock : CurrentProcess@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x60))();
  *a2 = result;
  return result;
}

uint64_t key path setter for CurrentProcess.mock : CurrentProcess(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x68);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t CurrentProcess.mock.getter()
{
  return swift_retain();
}

uint64_t CurrentProcess.mock.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___SUCurrentProcess_mock);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*CurrentProcess.mock.modify())()
{
  return SiriEnvironmentStorage.storage.modify;
}

uint64_t CurrentProcess.idleTracker.getter()
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v2 = swift_getKeyPath();
  uint64_t v3 = specialized static MockablePublished.subscript.getter(v0, KeyPath, v2);
  swift_release();
  swift_release();
  return v3;
}

uint64_t CurrentProcess.idleTracker.setter(void *a1)
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v1;

  return specialized static MockablePublished.subscript.setter(a1, v3);
}

uint64_t key path getter for CurrentProcess.idleTracker : CurrentProcess@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x78))();
  *a2 = result;
  return result;
}

uint64_t key path setter for CurrentProcess.idleTracker : CurrentProcess(id *a1, void **a2)
{
  id v2 = *a1;
  id v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x80);
  id v4 = *a1;
  return v3(v2);
}

void (*CurrentProcess.idleTracker.modify(void *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  uint64_t KeyPath = swift_getKeyPath();
  a1[2] = KeyPath;
  uint64_t v4 = swift_getKeyPath();
  a1[3] = v4;
  *a1 = specialized static MockablePublished.subscript.getter(v1, KeyPath, v4);
  return CurrentProcess.idleTracker.modify;
}

void CurrentProcess.idleTracker.modify(uint64_t a1, char a2)
{
  id v2 = *(void **)(a1 + 8);
  if (a2)
  {
    id v9 = *(id *)a1;
    id v3 = v2;
    uint64_t v4 = (void *)OUTLINED_FUNCTION_3_11();
    specialized static MockablePublished.subscript.setter(v4, v5);
  }
  else
  {
    id v6 = v2;
    unint64_t v7 = (void *)OUTLINED_FUNCTION_3_11();
    specialized static MockablePublished.subscript.setter(v7, v8);
  }
}

void *key path getter for CurrentProcess.$idleTracker : CurrentProcess@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x90))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentProcess.$idleTracker : CurrentProcess(uint64_t *a1, void **a2)
{
  id v2 = *a2;
  uint64_t v5 = *a1;
  id v3 = *(uint64_t (**)(uint64_t *))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x98);
  swift_retain();
  return v3(&v5);
}

uint64_t CurrentProcess.$idleTracker.getter()
{
  swift_beginAccess();
  OUTLINED_FUNCTION_0_7();
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 152);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t CurrentProcess.$idleTracker.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  OUTLINED_FUNCTION_1_14();
  v5[0] = v1;
  OUTLINED_FUNCTION_0_7();
  id v3 = *(void (**)(void *))(v2 + 160);
  swift_retain();
  v3(v5);
  return swift_release();
}

uint64_t (*CurrentProcess.$idleTracker.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 8) = v1;
  CurrentProcess.$idleTracker.getter();
  return CurrentProcess.$idleTracker.modify;
}

uint64_t CurrentProcess.$idleTracker.modify(uint64_t *a1, char a2)
{
  if (a2)
  {
    uint64_t v3 = *a1;
    swift_retain();
    CurrentProcess.$idleTracker.setter(&v3);
    return swift_release();
  }
  else
  {
    uint64_t v3 = *a1;
    return CurrentProcess.$idleTracker.setter(&v3);
  }
}

id CurrentProcess.__allocating_init(storage:)()
{
  id v1 = objc_allocWithZone(v0);
  return CurrentProcess.init(storage:)();
}

id CurrentProcess.init(storage:)()
{
  *(void *)&v0[OBJC_IVAR___SUCurrentProcess_mock] = 0;
  uint64_t v1 = OBJC_IVAR___SUCurrentProcess__idleTracker;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<IdleTracker?>);
  swift_allocObject();
  uint64_t v2 = v0;
  *(void *)&v0[v1] = specialized MockablePublished.init(wrappedValue:)(0);

  v5.receiver = v2;
  v5.super_class = (Class)type metadata accessor for CurrentProcess();
  id v3 = objc_msgSendSuper2(&v5, sel_init);
  swift_release();
  return v3;
}

uint64_t static CurrentProcess.default.getter()
{
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  uint64_t v0 = type metadata accessor for CurrentProcess();
  OUTLINED_FUNCTION_0_7();
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 248);
  uint64_t v3 = lazy protocol witness table accessor for type CurrentProcess and conformance CurrentProcess(&lazy protocol witness table cache variable for type CurrentProcess and conformance CurrentProcess);
  uint64_t v4 = v2(v0, v0, v3);
  swift_release();
  return v4;
}

id CurrentProcess.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CurrentProcess.init()()
{
}

id CurrentProcess.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CurrentProcess();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for MockableEnvironmentProvider.mock.getter in conformance CurrentProcess()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t protocol witness for MockableEnvironmentProvider.mock.setter in conformance CurrentProcess()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

void (*protocol witness for MockableEnvironmentProvider.mock.modify in conformance CurrentProcess(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70))();
  return protocol witness for MockableEnvironmentProvider.mock.modify in conformance NetworkAvailability;
}

uint64_t protocol witness for SiriEnvironmentProvider.init(storage:) in conformance CurrentProcess()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CurrentProcess@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CurrentProcess();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t associated type witness table accessor for MockableEnvironmentProvider.Provider : SiriEnvironmentProvider in CurrentProcess()
{
  return lazy protocol witness table accessor for type CurrentProcess and conformance CurrentProcess(&lazy protocol witness table cache variable for type CurrentProcess and conformance CurrentProcess);
}

uint64_t instantiation function for generic protocol witness table for CurrentProcess(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CurrentProcess and conformance CurrentProcess(&lazy protocol witness table cache variable for type CurrentProcess and conformance CurrentProcess);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type CurrentProcess and conformance CurrentProcess(&lazy protocol witness table cache variable for type CurrentProcess and conformance CurrentProcess);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CurrentProcess and conformance CurrentProcess(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CurrentProcess();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C9E83710@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SiriEnvironment.currentProcess.getter();
  *a1 = result;
  return result;
}

uint64_t method lookup function for CurrentProcess(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CurrentProcess);
}

uint64_t dispatch thunk of CurrentProcess.mock.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of CurrentProcess.mock.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of CurrentProcess.mock.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of CurrentProcess.idleTracker.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of CurrentProcess.idleTracker.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of CurrentProcess.idleTracker.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of CurrentProcess.$idleTracker.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of CurrentProcess.$idleTracker.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of CurrentProcess.$idleTracker.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CurrentProcess.__allocating_init(storage:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t OUTLINED_FUNCTION_1_14()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_3_11()
{
  return v0;
}

uint64_t static Transformation.defaultLengthLimit.getter()
{
  return 5;
}

uint64_t static Transformation.canTransform(from:to:lengthLimit:)(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  v13[0] = v4;
  v13[1] = v5;
  v12[0] = v6;
  v12[1] = v7;
  OUTLINED_FUNCTION_0_7();
  id v9 = *(uint64_t (**)(void *, void *, uint64_t))(v8 + 200);
  swift_retain();
  char v10 = v9(v13, v12, a3);
  swift_release();
  return v10 & 1;
}

uint64_t static Transformation.canTransform(from:to:lengthLimit:)(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  swift_getDynamicType();
  TypeInformation.init(for:)((uint64_t)v13);
  uint64_t v6 = v13[5];
  uint64_t v7 = v13[6];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  v13[0] = v6;
  v13[1] = v7;
  v12[0] = v4;
  v12[1] = v5;
  OUTLINED_FUNCTION_0_7();
  id v9 = *(uint64_t (**)(void *, void *, uint64_t))(v8 + 200);
  swift_retain();
  char v10 = v9(v13, v12, a3);
  swift_bridgeObjectRelease();
  swift_release();
  return v10 & 1;
}

uint64_t static Transformation.transform<A>(_:to:lengthLimit:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  return static Transformation.transform<A>(_:to:lengthLimit:tryAllPaths:)(a1, v6, a3, 0, a4);
}

uint64_t static Transformation.transform<A>(_:to:lengthLimit:tryAllPaths:)(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  uint64_t v11 = *((void *)static TransformationPluginLoader.sharedInstance + 4);
  v14[0] = v9;
  v14[1] = v10;
  unint64_t v12 = *(void (**)(uint64_t, void *, uint64_t, void, uint64_t))(*(void *)v11 + 208);
  swift_retain();
  v12(a1, v14, a3, a4 & 1, a5);
  return swift_release();
}

uint64_t static Transformation.transform<A, B>(_:to:lengthLimit:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(uint64_t, uint64_t))partial apply for closure #1 in static Transformation.transform<A, B>(_:to:lengthLimit:), a1, (uint64_t)&v5, a2);
}

uint64_t closure #1 in static Transformation.transform<A, B>(_:to:lengthLimit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  void v18[3] = a5;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v18);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(boxed_opaque_existential_0, a1, a5);
  v17[0] = a2;
  v17[1] = a3;
  static Transformation.transform<A>(_:to:lengthLimit:tryAllPaths:)((uint64_t)v18, v17, a4, 0, a6);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  if (v7) {
    *a7 = v7;
  }
  return result;
}

uint64_t static Transformation.transform<A>(_:to:lengthLimit:queue:completion:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v31 = a3;
  uint64_t v32 = a5;
  uint64_t v34 = a4;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_1_5();
  uint64_t v13 = v12;
  MEMORY[0x1F4188790](v14, v15);
  unsigned __int8 v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_1_5();
  uint64_t v19 = v18;
  MEMORY[0x1F4188790](v20, v21);
  unint64_t v23 = (char *)&v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *a2;
  uint64_t v25 = a2[1];
  outlined init with copy of Any(a1, (uint64_t)v37);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = a7;
  outlined init with take of Any(v37, (_OWORD *)(v26 + 24));
  *(void *)(v26 + 56) = v24;
  *(void *)(v26 + 64) = v25;
  uint64_t v27 = v32;
  *(void *)(v26 + 72) = v31;
  *(void *)(v26 + 80) = v27;
  *(void *)(v26 + 88) = a6;
  aBlock[4] = partial apply for closure #1 in static Transformation.transform<A>(_:to:lengthLimit:queue:completion:);
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_0;
  char v28 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v35 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1CB791EF0](0, v23, v17, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v11);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v33);
  return swift_release();
}

uint64_t closure #1 in static Transformation.transform<A>(_:to:lengthLimit:queue:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *), uint64_t a6, uint64_t a7)
{
  v23[1] = a6;
  uint64_t v24 = a5;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v12 = type metadata accessor for Result();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v12, v14);
  unsigned __int8 v17 = (char *)v23 - v16;
  uint64_t v18 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](v15, v19);
  uint64_t v21 = (char *)v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[0] = a2;
  v25[1] = a3;
  static Transformation.transform<A>(_:to:lengthLimit:)(a1, v25, a4, a7);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v17, v21, a7);
  swift_storeEnumTagMultiPayload();
  v24(v17);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, a7);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  id v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t static Transformation.transformer<A, B>(from:to:lengthLimit:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  uint64_t v14 = *((void *)static TransformationPluginLoader.sharedInstance + 4);
  *(void *)&long long v22 = v10;
  *((void *)&v22 + 1) = v11;
  *(void *)&v21[0] = v12;
  *((void *)&v21[0] + 1) = v13;
  uint64_t v15 = *(uint64_t (**)(long long *, _OWORD *, uint64_t, void))(*(void *)v14 + 224);
  swift_retain();
  uint64_t v16 = v15(&v22, v21, a3, 0);
  swift_release();
  specialized Collection.first.getter(v16, (uint64_t)&v22);
  swift_bridgeObjectRelease();
  if (v23)
  {
    outlined init with take of Transforming(&v22, (uint64_t)v24);
    outlined init with copy of Transforming((uint64_t)v24, (uint64_t)&v22);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = a4;
    *(void *)(v17 + 24) = a5;
    outlined init with take of Transforming(&v22, v17 + 32);
    Transformer.init(transform:)((uint64_t)partial apply for closure #1 in static Transformation.transformer<A, B>(from:to:lengthLimit:), v17, a4, a5, v21);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    long long v19 = v21[0];
    long long v20 = v21[1];
  }
  else
  {
    uint64_t result = outlined destroy of Transforming?((uint64_t)&v22);
    long long v19 = 0uLL;
    long long v20 = 0uLL;
  }
  *a6 = v19;
  a6[1] = v20;
  return result;
}

uint64_t closure #1 in static Transformation.transformer<A, B>(from:to:lengthLimit:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v22 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v15 = a2[3];
  uint64_t v14 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v15);
  v23[3] = a3;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v23);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_0, a1, a3);
  (*(void (**)(void *__return_ptr, uint64_t *, uint64_t, uint64_t))(v14 + 24))(v24, v23, v15, v14);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  if (!v5)
  {
    uint64_t v18 = v22;
    uint64_t v19 = v25;
    outlined init with copy of Any((uint64_t)v24, (uint64_t)v23);
    if (swift_dynamicCast())
    {
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, a4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a4 - 8) + 32))(v19, v13, a4);
    }
    else
    {
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 1, 1, a4);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v10);
      lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
      swift_allocError();
      *(void *)uint64_t v20 = 0xD000000000000026;
      *(void *)(v20 + 8) = 0x80000001C9EB8680;
      *(unsigned char *)(v20 + 16) = 0;
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    }
  }
  return result;
}

uint64_t static Transformation.resolve(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  v7[0] = v1;
  v7[1] = v2;
  long long v7[2] = v3;
  OUTLINED_FUNCTION_0_7();
  uint64_t v5 = *(void (**)(void *))(v4 + 216);
  swift_retain();
  v5(v7);

  return swift_release();
}

uint64_t static Transformation.register(transformation:)(uint64_t a1)
{
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_0_7();
  uint64_t v3 = *(void (**)(uint64_t))(v2 + 184);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in static Transformation.transform<A, B>(_:to:lengthLimit:)(uint64_t a1, void *a2)
{
  return closure #1 in static Transformation.transform<A, B>(_:to:lengthLimit:)(a1, v2[4], v2[5], v2[6], v2[2], v2[3], a2);
}

uint64_t sub_1C9E848B4()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 96, 7);
}

uint64_t partial apply for closure #1 in static Transformation.transform<A>(_:to:lengthLimit:queue:completion:)()
{
  return closure #1 in static Transformation.transform<A>(_:to:lengthLimit:queue:completion:)(v0 + 24, *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void (**)(char *))(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 16));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t outlined destroy of Transforming?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transforming?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C9E84A30()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t partial apply for closure #1 in static Transformation.transformer<A, B>(from:to:lengthLimit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in static Transformation.transformer<A, B>(from:to:lengthLimit:)(a1, v2 + 4, v2[2], v2[3], a2);
}

ValueMetadata *type metadata accessor for Transformation()
{
  return &type metadata for Transformation;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities11AudioSourceVG_SSs5NeverOTg504_s13d11Utilities11fG119V11knownValues33_0AF68ACE543613C0C5793AD85E701BA5LLShySSGvpZfiSSACcfu_33_8a1a369d30fae838e599eb067dc78b95ACSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      }
      v4 += 2;
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v6;
      *(void *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    OUTLINED_FUNCTION_4_12();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._finalize()();
    OUTLINED_FUNCTION_5_0();
    if (v4)
    {
      OUTLINED_FUNCTION_2_17();
      BOOL v6 = v6 && v5 == v3;
      if (!v6 && (OUTLINED_FUNCTION_3_12() & 1) == 0)
      {
        OUTLINED_FUNCTION_0_14();
        if (v7)
        {
          do
          {
            OUTLINED_FUNCTION_2_17();
            if (v6 && v8 == v3) {
              break;
            }
            if (OUTLINED_FUNCTION_3_12()) {
              break;
            }
            OUTLINED_FUNCTION_0_14();
          }
          while ((v10 & 1) != 0);
        }
      }
    }
  }
}

{
  uint64_t v3;
  char v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t v8;
  char v10;

  if (*(void *)(a3 + 16))
  {
    OUTLINED_FUNCTION_4_12();
    String.hash(into:)();
    Hasher._finalize()();
    OUTLINED_FUNCTION_5_0();
    if (v4)
    {
      OUTLINED_FUNCTION_2_17();
      BOOL v6 = v6 && v5 == v3;
      if (!v6 && (OUTLINED_FUNCTION_3_12() & 1) == 0)
      {
        OUTLINED_FUNCTION_0_14();
        if (v7)
        {
          do
          {
            OUTLINED_FUNCTION_2_17();
            if (v6 && v8 == v3) {
              break;
            }
            if (OUTLINED_FUNCTION_3_12()) {
              break;
            }
            OUTLINED_FUNCTION_0_14();
          }
          while ((v10 & 1) != 0);
        }
      }
    }
  }
}

uint64_t specialized Set.contains(_:)(unsigned __int8 *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Swift::UInt v4 = *a1;
  long long v21 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)uint64_t v22 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v22[16] = *(_OWORD *)(a1 + 40);
  *(void *)&v22[32] = *((void *)a1 + 7);
  Hasher._combine(_:)(v4);
  uint64_t v26 = *(void *)v22;
  long long v24 = *(_OWORD *)&v22[8];
  long long v25 = v21;
  long long v23 = *(_OWORD *)&v22[24];
  outlined retain of TransformationCapability((uint64_t)a1);
  outlined retain of TypeIdentifier((uint64_t)&v25);
  String.hash(into:)();
  Hasher._combine(_:)(*(Swift::UInt *)v22);
  outlined release of TypeIdentifier((uint64_t)&v25);
  outlined retain of TypeIdentifier((uint64_t)&v24);
  String.hash(into:)();
  outlined release of TypeIdentifier((uint64_t)&v24);
  outlined retain of TypeIdentifier((uint64_t)&v23);
  String.hash(into:)();
  outlined release of TypeIdentifier((uint64_t)&v23);
  outlined release of TransformationCapability((uint64_t)a1);
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v7 = v5 & ~v6;
  uint64_t v8 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
    return 0;
  }
  uint64_t v9 = ~v6;
  uint64_t v10 = *(void *)(a2 + 48);
  while (1)
  {
    uint64_t v11 = (void *)(v10 + (v7 << 6));
    if (v4 == *(unsigned __int8 *)v11)
    {
      uint64_t v12 = v11[3];
      uint64_t v13 = v11[4];
      uint64_t v15 = v11[5];
      uint64_t v14 = v11[6];
      uint64_t v16 = v11[7];
      BOOL v17 = v11[1] == (void)v21 && v11[2] == *((void *)&v21 + 1);
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && v12 == *(void *)v22)
      {
        BOOL v18 = v13 == *(void *)&v22[8] && v15 == *(void *)&v22[16];
        if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          BOOL v19 = v14 == *(void *)&v22[24] && v16 == *(void *)&v22[32];
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
        }
      }
    }
    unint64_t v7 = (v7 + 1) & v9;
    if (((*(void *)(v8 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
      return 0;
    }
  }
  return 1;
}

uint64_t one-time initialization function for lineIn()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioSource.lineIn = result;
  unk_1EB9BEAD0 = v1;
  return result;
}

uint64_t static AudioSource.lineIn.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for lineIn, &static AudioSource.lineIn, &qword_1EB9BEAD0, a1);
}

uint64_t one-time initialization function for builtInMic()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioSource.builtInMic = result;
  *(void *)algn_1EB9BEA38 = v1;
  return result;
}

uint64_t static AudioSource.builtInMic.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for builtInMic, &static AudioSource.builtInMic, (uint64_t *)algn_1EB9BEA38, a1);
}

uint64_t one-time initialization function for wiredHeadsetMic()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioSource.wiredHeadsetMic = result;
  unk_1EB9BEA80 = v1;
  return result;
}

uint64_t static AudioSource.wiredHeadsetMic.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for wiredHeadsetMic, &static AudioSource.wiredHeadsetMic, &qword_1EB9BEA80, a1);
}

uint64_t one-time initialization function for bluetoothHandsFreeDevice()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioSource.bluetoothHandsFreeDevice = result;
  *(void *)algn_1EB9BEAB8 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioDestination.bluetoothHandsFreeDevice = result;
  unk_1EB9BED20 = v1;
  return result;
}

uint64_t static AudioSource.bluetoothHandsFreeDevice.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for bluetoothHandsFreeDevice, &static AudioSource.bluetoothHandsFreeDevice, (uint64_t *)algn_1EB9BEAB8, a1);
}

uint64_t one-time initialization function for usbAudio()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioSource.usbAudio = result;
  unk_1EB9BEA20 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioDestination.usbAudio = result;
  unk_1EB9BEC70 = v1;
  return result;
}

uint64_t static AudioSource.usbAudio.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for usbAudio, &static AudioSource.usbAudio, &qword_1EB9BEA20, a1);
}

uint64_t one-time initialization function for carAudio()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioSource.carAudio = result;
  unk_1EB9BEA00 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioDestination.carAudio = result;
  *(void *)algn_1EB9BEC58 = v1;
  return result;
}

uint64_t static AudioSource.carAudio.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for carAudio, &static AudioSource.carAudio, (uint64_t *)&unk_1EB9BEA00, a1);
}

uint64_t one-time initialization function for bluetoothDoAPDevice()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioSource.bluetoothDoAPDevice = result;
  unk_1EB9BEA98 = v1;
  return result;
}

uint64_t static AudioSource.bluetoothDoAPDevice.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for bluetoothDoAPDevice, &static AudioSource.bluetoothDoAPDevice, (uint64_t *)&unk_1EB9BEA98, a1);
}

uint64_t one-time initialization function for carJarvisDevice()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioSource.carJarvisDevice = result;
  *(void *)algn_1EB9BEA68 = v1;
  return result;
}

uint64_t static AudioSource.carJarvisDevice.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for carJarvisDevice, &static AudioSource.carJarvisDevice, (uint64_t *)algn_1EB9BEA68, a1);
}

uint64_t static AudioSource.lineIn.getter@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = *a3;
  *a4 = *a2;
  a4[1] = v7;

  return swift_bridgeObjectRetain();
}

void static AudioSource.unknown.getter(void *a1@<X8>)
{
  *a1 = 0x6E776F6E6B6E55;
  a1[1] = 0xE700000000000000;
}

uint64_t one-time initialization function for knownValues()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AudioSource>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9EB6290;
  if (one-time initialization token for lineIn != -1) {
    swift_once();
  }
  uint64_t v1 = qword_1EB9BEAD0;
  *(void *)(inited + 32) = static AudioSource.lineIn;
  *(void *)(inited + 40) = v1;
  uint64_t v2 = one-time initialization token for builtInMic;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)algn_1EB9BEA38;
  *(void *)(inited + 48) = static AudioSource.builtInMic;
  *(void *)(inited + 56) = v3;
  uint64_t v4 = one-time initialization token for wiredHeadsetMic;
  swift_bridgeObjectRetain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_1EB9BEA80;
  *(void *)(inited + 64) = static AudioSource.wiredHeadsetMic;
  *(void *)(inited + 72) = v5;
  uint64_t v6 = one-time initialization token for bluetoothHandsFreeDevice;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = *(void *)algn_1EB9BEAB8;
  *(void *)(inited + 80) = static AudioSource.bluetoothHandsFreeDevice;
  *(void *)(inited + 88) = v7;
  uint64_t v8 = one-time initialization token for usbAudio;
  swift_bridgeObjectRetain();
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_1EB9BEA20;
  *(void *)(inited + 96) = static AudioSource.usbAudio;
  *(void *)(inited + 104) = v9;
  uint64_t v10 = one-time initialization token for carAudio;
  swift_bridgeObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v11 = unk_1EB9BEA00;
  *(void *)(inited + 112) = static AudioSource.carAudio;
  *(void *)(inited + 120) = v11;
  uint64_t v12 = one-time initialization token for bluetoothDoAPDevice;
  swift_bridgeObjectRetain();
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v13 = unk_1EB9BEA98;
  *(void *)(inited + 128) = static AudioSource.bluetoothDoAPDevice;
  *(void *)(inited + 136) = v13;
  uint64_t v14 = one-time initialization token for carJarvisDevice;
  swift_bridgeObjectRetain();
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v15 = *(void *)algn_1EB9BEA68;
  *(void *)(inited + 144) = static AudioSource.carJarvisDevice;
  *(void *)(inited + 152) = v15;
  *(void *)(inited + 160) = 0x6E776F6E6B6E55;
  *(void *)(inited + 168) = 0xE700000000000000;
  swift_bridgeObjectRetain();
  uint64_t v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities11AudioSourceVG_SSs5NeverOTg504_s13d11Utilities11fG119V11knownValues33_0AF68ACE543613C0C5793AD85E701BA5LLShySSGvpZfiSSACcfu_33_8a1a369d30fae838e599eb067dc78b95ACSSTf3nnnpk_nTf1cn_n(inited);
  swift_bridgeObjectRelease();
  uint64_t result = specialized Set.init<A>(_:)(v16);
  static AudioSource.knownValues = result;
  return result;
}

{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ResponseMode>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9EB6540;
  if (one-time initialization token for displayOnly != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)algn_1EB9BEB50;
  *(void *)(inited + 32) = static ResponseMode.displayOnly;
  *(void *)(inited + 40) = v1;
  uint64_t v2 = one-time initialization token for displayForward;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1EB9BEB90;
  *(void *)(inited + 48) = static ResponseMode.displayForward;
  *(void *)(inited + 56) = v3;
  uint64_t v4 = one-time initialization token for voiceForward;
  swift_bridgeObjectRetain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = *(void *)algn_1EB9BEB78;
  *(void *)(inited + 64) = static ResponseMode.voiceForward;
  *(void *)(inited + 72) = v5;
  uint64_t v6 = one-time initialization token for voiceOnly;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = unk_1EB9BEBA8;
  *(void *)(inited + 80) = static ResponseMode.voiceOnly;
  *(void *)(inited + 88) = v7;
  swift_bridgeObjectRetain();
  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities11AudioSourceVG_SSs5NeverOTg504_s13d11Utilities11fG119V11knownValues33_0AF68ACE543613C0C5793AD85E701BA5LLShySSGvpZfiSSACcfu_33_8a1a369d30fae838e599eb067dc78b95ACSSTf3nnnpk_nTf1cn_n(inited);
  swift_bridgeObjectRelease();
  uint64_t result = specialized Set.init<A>(_:)(v8);
  static ResponseMode.knownValues = result;
  return result;
}

{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AudioDestination>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9EB74B0;
  if (one-time initialization token for builtInSpeaker != -1) {
    swift_once();
  }
  uint64_t v1 = unk_1EB9BECB8;
  *(void *)(inited + 32) = static AudioDestination.builtInSpeaker;
  *(void *)(inited + 40) = v1;
  uint64_t v2 = one-time initialization token for builtInReceiver;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)algn_1EB9BECD8;
  *(void *)(inited + 48) = static AudioDestination.builtInReceiver;
  *(void *)(inited + 56) = v3;
  uint64_t v4 = one-time initialization token for headphones;
  swift_bridgeObjectRetain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = unk_1EB9BEC88;
  *(void *)(inited + 64) = static AudioDestination.headphones;
  *(void *)(inited + 72) = v5;
  uint64_t v6 = one-time initialization token for bluetoothHandsFreeDevice;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = unk_1EB9BED20;
  *(void *)(inited + 80) = static AudioDestination.bluetoothHandsFreeDevice;
  *(void *)(inited + 88) = v7;
  uint64_t v8 = one-time initialization token for bluetoothLEDevice;
  swift_bridgeObjectRetain();
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_1EB9BECF0;
  *(void *)(inited + 96) = static AudioDestination.bluetoothLEDevice;
  *(void *)(inited + 104) = v9;
  uint64_t v10 = one-time initialization token for bluetoothA2DPDevice;
  swift_bridgeObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v11 = *(void *)algn_1EB9BED08;
  *(void *)(inited + 112) = static AudioDestination.bluetoothA2DPDevice;
  *(void *)(inited + 120) = v11;
  uint64_t v12 = one-time initialization token for usbAudio;
  swift_bridgeObjectRetain();
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_1EB9BEC70;
  *(void *)(inited + 128) = static AudioDestination.usbAudio;
  *(void *)(inited + 136) = v13;
  uint64_t v14 = one-time initialization token for carAudio;
  swift_bridgeObjectRetain();
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v15 = *(void *)algn_1EB9BEC58;
  *(void *)(inited + 144) = static AudioDestination.carAudio;
  *(void *)(inited + 152) = v15;
  uint64_t v16 = one-time initialization token for hdmi;
  swift_bridgeObjectRetain();
  if (v16 != -1) {
    swift_once();
  }
  BOOL v17 = qword_1EB9BED40;
  *(void *)(inited + 160) = static AudioDestination.hdmi;
  *(void *)(inited + 168) = v17;
  BOOL v18 = one-time initialization token for other;
  swift_bridgeObjectRetain();
  if (v18 != -1) {
    swift_once();
  }
  BOOL v19 = *(void *)algn_1EB9BED58;
  *(void *)(inited + 176) = static AudioDestination.other;
  *(void *)(inited + 184) = v19;
  swift_bridgeObjectRetain();
  uint64_t v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities11AudioSourceVG_SSs5NeverOTg504_s13d11Utilities11fG119V11knownValues33_0AF68ACE543613C0C5793AD85E701BA5LLShySSGvpZfiSSACcfu_33_8a1a369d30fae838e599eb067dc78b95ACSSTf3nnnpk_nTf1cn_n(inited);
  swift_bridgeObjectRelease();
  uint64_t result = specialized Set.init<A>(_:)(v20);
  static AudioDestination.knownValues = result;
  return result;
}

uint64_t AudioSource.aceValue.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

SiriUtilities::AudioSource_optional __swiftcall AudioSource.init(aceValue:)(SiriUtilities::AudioSource_optional aceValue)
{
  uint64_t v2 = v1;
  if (aceValue.value.aceValue._object)
  {
    object = aceValue.value.aceValue._object;
    uint64_t countAndFlagsBits = aceValue.value.aceValue._countAndFlagsBits;
    if (one-time initialization token for knownValues != -1) {
      swift_once();
    }
    specialized Set.contains(_:)(countAndFlagsBits, (uint64_t)object, static AudioSource.knownValues);
    if (aceValue.value.aceValue._countAndFlagsBits)
    {
      *uint64_t v2 = countAndFlagsBits;
      v2[1] = (uint64_t)object;
      return aceValue;
    }
    aceValue.value.aceValue._uint64_t countAndFlagsBits = swift_bridgeObjectRelease();
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  return aceValue;
}

uint64_t AudioSource.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t AudioSource.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  OUTLINED_FUNCTION_8_0();
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    OUTLINED_FUNCTION_8_0();
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    uint64_t v7 = v6;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    *a2 = v5;
    a2[1] = v7;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t static AudioSource.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t AudioSource.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int AudioSource.hashValue.getter()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type AudioSource and conformance AudioSource()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioSource and conformance AudioSource;
  if (!lazy protocol witness table cache variable for type AudioSource and conformance AudioSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioSource and conformance AudioSource);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AudioSource@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return AudioSource.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AudioSource(void *a1)
{
  return AudioSource.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for AudioSource()
{
  return &type metadata for AudioSource;
}

uint64_t OUTLINED_FUNCTION_2_17()
{
  return *(void *)(v0 + 16 * v1);
}

uint64_t OUTLINED_FUNCTION_3_12()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_4_12()
{
  return Hasher.init(_seed:)();
}

char **SiriUtilitiesSignpost.loadPlugin.unsafeMutableAddressor()
{
  return &static SiriUtilitiesSignpost.loadPlugin;
}

void specialized static Logger.withSignpost<A>(name:log:completion:)(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5)
{
  int v13 = a3;
  type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_1_5();
  MEMORY[0x1F4188790](v7, v8);
  OUTLINED_FUNCTION_12_1();
  if (OS_os_log.signpostsEnabled.getter())
  {
    id v9 = a4;
    OSSignpostID.init(log:)();
    static os_signpost_type_t.begin.getter();
    OUTLINED_FUNCTION_1_15();
    closure #1 in NSBundle.loadPlugin()(a5, &v12);
    static os_signpost_type_t.end.getter();
    OUTLINED_FUNCTION_1_15();
    uint64_t v10 = OUTLINED_FUNCTION_6_12();
    v11(v10);
  }
  else
  {
    closure #1 in NSBundle.loadPlugin()(a5, &v12);
  }
}

uint64_t static Logger.withSignpost<A>(name:log:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v7 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_1_5();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10, v11);
  OUTLINED_FUNCTION_12_1();
  uint64_t v14 = v13 - v12;
  if (OS_os_log.signpostsEnabled.getter())
  {
    id v15 = a4;
    OSSignpostID.init(log:)();
    static os_signpost_type_t.begin.getter();
    OUTLINED_FUNCTION_8_11();
    OUTLINED_FUNCTION_7_10();
    a5(v16, v17);
    static os_signpost_type_t.end.getter();
    OUTLINED_FUNCTION_8_11();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v14, v7);
  }
  else
  {
    OUTLINED_FUNCTION_7_10();
    return ((uint64_t (*)(uint64_t, uint64_t))a5)(v19, v20);
  }
}

void static SiriUtilitiesCrashHelper.logAndCrash(_:file:line:)(uint64_t a1, unint64_t a2)
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.logger);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = v10;
    *(_DWORD *)uint64_t v7 = 136315650;
    uint64_t v8 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 22) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C9E4C000, v5, v6, "FatalError at %s:%lu - %s", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1CB792FA0](v10, -1, -1);
    MEMORY[0x1CB792FA0](v7, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t Logger.Subsystem.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Logger.Subsystem.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

unint64_t Logger.Subsystem.rawValue.getter()
{
  return OUTLINED_FUNCTION_5_9();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Logger.Subsystem@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  return Logger.Subsystem.init(rawValue:)(*a1, a2);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Logger.Subsystem@<X0>(void *a1@<X8>)
{
  unint64_t result = Logger.Subsystem.rawValue.getter();
  *a1 = 0xD000000000000016;
  a1[1] = v3;
  return result;
}

SiriUtilities::Logger::Category_optional __swiftcall Logger.Category.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Logger.Category.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 3;
  if (v5 < 3) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

uint64_t Logger.Category.rawValue.getter()
{
  uint64_t v1 = 0x6F4C6E6967756C50;
  if (*v0 != 1) {
    uint64_t v1 = 0x6D6E6F7269766E45;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656974696C697455;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Logger.Category(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Logger.Category()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Logger.Category(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Logger.Category()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriUtilities::Logger::Category_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Logger.Category(Swift::String *a1)
{
  return Logger.Category.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Logger.Category@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Logger.Category.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t one-time initialization function for log()
{
  type metadata accessor for OS_os_log();
  OUTLINED_FUNCTION_5_9();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Logger.log = result;
  return result;
}

id static Logger.log.getter()
{
  return static Logger.log.getter(&one-time initialization token for log, (void **)&static Logger.log);
}

uint64_t one-time initialization function for logger(uint64_t a1)
{
  return one-time initialization function for logger(a1, static Logger.logger, &one-time initialization token for log, (id *)&static Logger.log);
}

uint64_t static Logger.logger.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.logger.getter(&one-time initialization token for logger, (uint64_t)static Logger.logger, a1);
}

uint64_t one-time initialization function for pluginLoaderLog()
{
  type metadata accessor for OS_os_log();
  OUTLINED_FUNCTION_5_9();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Logger.pluginLoaderLog = result;
  return result;
}

id static Logger.pluginLoaderLog.getter()
{
  return static Logger.log.getter(&one-time initialization token for pluginLoaderLog, (void **)&static Logger.pluginLoaderLog);
}

uint64_t one-time initialization function for loader(uint64_t a1)
{
  return one-time initialization function for logger(a1, static Logger.loader, &one-time initialization token for pluginLoaderLog, (id *)&static Logger.pluginLoaderLog);
}

uint64_t static Logger.loader.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.logger.getter(&one-time initialization token for loader, (uint64_t)static Logger.loader, a1);
}

uint64_t one-time initialization function for environmentLog()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Logger.environmentLog = result;
  return result;
}

id static Logger.environmentLog.getter()
{
  return static Logger.log.getter(&one-time initialization token for environmentLog, (void **)&static Logger.environmentLog);
}

id static Logger.log.getter(void *a1, void **a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;

  return v3;
}

uint64_t one-time initialization function for environment(uint64_t a1)
{
  return one-time initialization function for logger(a1, static Logger.environment, &one-time initialization token for environmentLog, (id *)&static Logger.environmentLog);
}

uint64_t one-time initialization function for logger(uint64_t a1, uint64_t *a2, void *a3, id *a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  if (*a3 != -1) {
    swift_once();
  }
  id v8 = *a4;
  return Logger.init(_:)();
}

uint64_t static Logger.environment.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.logger.getter(&one-time initialization token for environment, (uint64_t)static Logger.environment, a1);
}

uint64_t static Logger.logger.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t static Logger.makeSignpostID(log:)(void *a1)
{
  id v1 = a1;

  return OSSignpostID.init(log:)();
}

uint64_t static Logger.begin(_:log:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4 = a4;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();

  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t static Logger.begin(_:_:log:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static Logger.begin(_:_:log:)(a1, a2, a3, a4, a5, MEMORY[0x1E4FBD3A0]);
}

uint64_t static Logger.event(_:log:)()
{
  uint64_t v0 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_1_5();
  uint64_t v2 = v1;
  MEMORY[0x1F4188790](v3, v4);
  OUTLINED_FUNCTION_12_1();
  uint64_t v7 = v6 - v5;
  static os_signpost_type_t.event.getter();
  static OSSignpostID.exclusive.getter();
  OUTLINED_FUNCTION_9_9();
  os_signpost(_:dso:log:name:signpostID:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v7, v0);
}

uint64_t static Logger.end(_:_:log:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static Logger.begin(_:_:log:)(a1, a2, a3, a4, a5, MEMORY[0x1E4FBD398]);
}

uint64_t static Logger.begin(_:_:log:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  a6();
  OUTLINED_FUNCTION_9_9();

  return os_signpost(_:dso:log:name:signpostID:)();
}

char **SiriUtilitiesSignpost.registerTransformations.unsafeMutableAddressor()
{
  return &static SiriUtilitiesSignpost.registerTransformations;
}

void static SiriUtilitiesSignpost.registerTransformations.getter()
{
}

void static SiriUtilitiesSignpost.loadPlugin.getter()
{
}

char **SiriUtilitiesSignpost.readPluginCache.unsafeMutableAddressor()
{
  return &static SiriUtilitiesSignpost.readPluginCache;
}

void static SiriUtilitiesSignpost.readPluginCache.getter()
{
}

char **SiriUtilitiesSignpost.writePluginCache.unsafeMutableAddressor()
{
  return &static SiriUtilitiesSignpost.writePluginCache;
}

void static SiriUtilitiesSignpost.writePluginCache.getter()
{
}

char **SiriUtilitiesSignpost.findPlugins.unsafeMutableAddressor()
{
  return &static SiriUtilitiesSignpost.findPlugins;
}

void static SiriUtilitiesSignpost.findPlugins.getter()
{
}

uint64_t closure #1 in serialize<A>(_:at:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned UInt)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Logger.Subsystem and conformance Logger.Subsystem()
{
  unint64_t result = lazy protocol witness table cache variable for type Logger.Subsystem and conformance Logger.Subsystem;
  if (!lazy protocol witness table cache variable for type Logger.Subsystem and conformance Logger.Subsystem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Logger.Subsystem and conformance Logger.Subsystem);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Logger.Category and conformance Logger.Category()
{
  unint64_t result = lazy protocol witness table cache variable for type Logger.Category and conformance Logger.Category;
  if (!lazy protocol witness table cache variable for type Logger.Category and conformance Logger.Category)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Logger.Category and conformance Logger.Category);
  }
  return result;
}

void type metadata accessor for Logger()
{
}

unsigned char *storeEnumTagSinglePayload for Logger.Subsystem(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C9E867F8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for Logger.Subsystem()
{
}

unsigned char *storeEnumTagSinglePayload for Logger.Category(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9E868F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for Logger.Category()
{
}

void type metadata accessor for SiriUtilitiesSignpost()
{
}

void type metadata accessor for SiriUtilitiesCrashHelper()
{
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_15()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

unint64_t OUTLINED_FUNCTION_5_9()
{
  return 0xD000000000000016;
}

uint64_t OUTLINED_FUNCTION_6_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_11()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t one-time initialization function for displayOnly()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static ResponseMode.displayOnly = result;
  *(void *)algn_1EB9BEB50 = v1;
  return result;
}

uint64_t static ResponseMode.displayOnly.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for displayOnly, &static ResponseMode.displayOnly, (uint64_t *)algn_1EB9BEB50, a1);
}

uint64_t one-time initialization function for displayForward()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static ResponseMode.displayForward = result;
  unk_1EB9BEB90 = v1;
  return result;
}

uint64_t static ResponseMode.displayForward.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for displayForward, &static ResponseMode.displayForward, &qword_1EB9BEB90, a1);
}

uint64_t one-time initialization function for voiceForward()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static ResponseMode.voiceForward = result;
  *(void *)algn_1EB9BEB78 = v1;
  return result;
}

uint64_t static ResponseMode.voiceForward.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for voiceForward, &static ResponseMode.voiceForward, (uint64_t *)algn_1EB9BEB78, a1);
}

uint64_t one-time initialization function for voiceOnly()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static ResponseMode.voiceOnly = result;
  unk_1EB9BEBA8 = v1;
  return result;
}

uint64_t static ResponseMode.voiceOnly.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for voiceOnly, &static ResponseMode.voiceOnly, (uint64_t *)&unk_1EB9BEBA8, a1);
}

uint64_t ResponseMode.aceValue.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

SiriUtilities::ResponseMode_optional __swiftcall ResponseMode.init(aceValue:)(SiriUtilities::ResponseMode_optional aceValue)
{
  uint64_t v2 = v1;
  if (aceValue.value.aceValue._object)
  {
    object = aceValue.value.aceValue._object;
    uint64_t countAndFlagsBits = aceValue.value.aceValue._countAndFlagsBits;
    if (one-time initialization token for knownValues != -1) {
      swift_once();
    }
    specialized Set.contains(_:)(countAndFlagsBits, (uint64_t)object, static ResponseMode.knownValues);
    if (aceValue.value.aceValue._countAndFlagsBits)
    {
      *uint64_t v2 = countAndFlagsBits;
      v2[1] = (uint64_t)object;
      return aceValue;
    }
    aceValue.value.aceValue._uint64_t countAndFlagsBits = swift_bridgeObjectRelease();
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  return aceValue;
}

uint64_t ResponseMode.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t ResponseMode.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  OUTLINED_FUNCTION_8_0();
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    OUTLINED_FUNCTION_8_0();
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    uint64_t v7 = v6;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    *a2 = v5;
    a2[1] = v7;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t static ResponseMode.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t ResponseMode.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int ResponseMode.hashValue.getter()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode()
{
  unint64_t result = lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode;
  if (!lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ResponseMode@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return ResponseMode.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ResponseMode(void *a1)
{
  return ResponseMode.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for ResponseMode()
{
  return &type metadata for ResponseMode;
}

uint64_t static NamedTransformerLoggingIdentity.identity<A>(name:)@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  MEMORY[0x1F4188790](a1, a1);
  (*(void (**)(char *))(v4 + 16))((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = String.init<A>(_:)();
  uint64_t v7 = v6;
  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v7;
  Swift::Int v9 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of static NamedTransformerLoggingIdentity.identity<A>(name:), v8);
  uint64_t result = swift_bridgeObjectRelease();
  BOOL v11 = 0;
  if (v9) {
    BOOL v11 = v9 == 1;
  }
  *a2 = v11;
  return result;
}

SiriUtilities::NamedTransformerLoggingIdentity_optional __swiftcall NamedTransformerLoggingIdentity.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of NamedTransformerLoggingIdentity.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *uint64_t v4 = v7;
  return result;
}

uint64_t NamedTransformerLoggingIdentity.rawValue.getter()
{
  if (*v0) {
    return 0xD00000000000001CLL;
  }
  else {
    return 0x6E776F6E6B6E75;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NamedTransformerLoggingIdentity(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type NamedTransformerLoggingIdentity and conformance NamedTransformerLoggingIdentity()
{
  unint64_t result = lazy protocol witness table cache variable for type NamedTransformerLoggingIdentity and conformance NamedTransformerLoggingIdentity;
  if (!lazy protocol witness table cache variable for type NamedTransformerLoggingIdentity and conformance NamedTransformerLoggingIdentity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NamedTransformerLoggingIdentity and conformance NamedTransformerLoggingIdentity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NamedTransformerLoggingIdentity and conformance NamedTransformerLoggingIdentity;
  if (!lazy protocol witness table cache variable for type NamedTransformerLoggingIdentity and conformance NamedTransformerLoggingIdentity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NamedTransformerLoggingIdentity and conformance NamedTransformerLoggingIdentity);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NamedTransformerLoggingIdentity()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NamedTransformerLoggingIdentity()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NamedTransformerLoggingIdentity()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriUtilities::NamedTransformerLoggingIdentity_optional protocol witness for RawRepresentable.init(rawValue:) in conformance NamedTransformerLoggingIdentity(Swift::String *a1)
{
  return NamedTransformerLoggingIdentity.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NamedTransformerLoggingIdentity@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NamedTransformerLoggingIdentity.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NamedTransformerLoggingIdentity()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NamedTransformerLoggingIdentity()
{
  return RawRepresentable<>.encode(to:)();
}

unsigned char *storeEnumTagSinglePayload for NamedTransformerLoggingIdentity(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9E87474);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NamedTransformerLoggingIdentity()
{
  return &type metadata for NamedTransformerLoggingIdentity;
}

uint64_t PThreadMutex.__allocating_init(name:abortOnFail:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v6 = swift_allocObject();
  PThreadMutex.init(name:abortOnFail:)(a1, a2, a3);
  return v6;
}

uint64_t PThreadMutex.init(name:abortOnFail:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v5 + 24) = 0;
  *(_DWORD *)(v5 + 32) = 0;
  uint64_t v14 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v14)
  {
    swift_bridgeObjectRelease();
    UUID.init()();
    a1 = UUID.uuidString.getter();
    a2 = v15;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  *(void *)(v5 + 40) = a1;
  *(void *)(v5 + 48) = a2;
  *(unsigned char *)(v5 + 56) = a3 & 1;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.logger);
  swift_retain();
  uint64_t v17 = (void *)Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  BOOL v19 = OUTLINED_FUNCTION_2_18(v18);
  unint64_t v20 = MEMORY[0x1E4FBC840];
  if (v19)
  {
    swift_slowAlloc();
    uint64_t v42 = OUTLINED_FUNCTION_7_11();
    OUTLINED_FUNCTION_16_4(4.8149e-34);
    uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v20, &v42);
    OUTLINED_FUNCTION_26_1(v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_21_3(&dword_1C9E4C000, v22, v23, "PThreadMutex#init created mutex: %s");
    OUTLINED_FUNCTION_13_8();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_release();
  }
  long long v24 = (pthread_mutex_t *)swift_slowAlloc();
  *(void *)(v5 + 16) = v24;
  int v25 = pthread_mutex_init(v24, 0);
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_11_7();
  if ((v26() & 1) == 0) {
    return v5;
  }
  uint64_t v42 = 0;
  unint64_t v43 = 0xE000000000000000;
  _StringGuts.grow(_:)(54);
  v27._object = (void *)0x80000001C9EB8DC0;
  v27._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  String.append(_:)(v27);
  v41[2] = v25;
  v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_13();
  uint64_t v29 = *(void *)(v5 + 40);
  uint64_t v30 = *(void **)(v5 + 48);
  swift_bridgeObjectRetain();
  v31._uint64_t countAndFlagsBits = v29;
  v31._object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  unint64_t v32 = v43;
  OUTLINED_FUNCTION_27_1();
  if (!v33)
  {
    uint64_t v34 = v42;
    swift_bridgeObjectRetain();
    uint64_t v35 = (void *)Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_2_18(v36))
    {
      OUTLINED_FUNCTION_3_14();
      uint64_t v42 = OUTLINED_FUNCTION_7_11();
      OUTLINED_FUNCTION_25_2(4.8149e-34);
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v32, &v42);
      OUTLINED_FUNCTION_26_1(v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_22_2(&dword_1C9E4C000, v38, v39, "%s");
      OUTLINED_FUNCTION_12_8();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return v5;
  }
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

void PThreadMutex.deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_4_13();
  a23 = v26;
  a24 = v27;
  uint64_t v28 = v24;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Logger.logger);
  swift_retain();
  uint64_t v30 = (void *)Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.info.getter();
  BOOL v32 = OUTLINED_FUNCTION_2_18(v31);
  unint64_t v33 = MEMORY[0x1E4FBC840];
  if (v32)
  {
    swift_slowAlloc();
    a11 = OUTLINED_FUNCTION_7_11();
    OUTLINED_FUNCTION_16_4(4.8149e-34);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v33, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_21_3(&dword_1C9E4C000, v34, v35, "PThreadMutex#deinit for mutex: %s");
    OUTLINED_FUNCTION_13_8();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_release();
  }
  pthread_mutex_destroy(*(pthread_mutex_t **)(v28 + 16));
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_11_7();
  if ((v36() & 1) == 0) {
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_9_10();
  _StringGuts.grow(_:)(57);
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_8_12();
  v37._uint64_t countAndFlagsBits = 0xD000000000000030;
  String.append(_:)(v37);
  v38._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_13();
  uint64_t v39 = *(void *)(v28 + 40);
  uint64_t v40 = *(void **)(v28 + 48);
  swift_bridgeObjectRetain();
  v41._uint64_t countAndFlagsBits = v39;
  v41._object = v40;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  unint64_t v42 = a12;
  OUTLINED_FUNCTION_27_1();
  if (!v43)
  {
    uint64_t v44 = a11;
    swift_bridgeObjectRetain();
    unint64_t v45 = (void *)Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_2_18(v46))
    {
      OUTLINED_FUNCTION_3_14();
      OUTLINED_FUNCTION_7_11();
      OUTLINED_FUNCTION_15_4();
      OUTLINED_FUNCTION_25_2(4.8149e-34);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v42, &a11);
      OUTLINED_FUNCTION_0_15();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_22_2(&dword_1C9E4C000, v47, v48, "%s");
      OUTLINED_FUNCTION_12_8();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
LABEL_11:
    OUTLINED_FUNCTION_3();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_5_10();
    return;
  }
  swift_bridgeObjectRelease();
  __break(1u);
}

#error "1C9E87BFC: call analysis failed (funcsize=17)"

Swift::Bool __swiftcall PThreadMutex.isError(errorCode:)(Swift::Int32 errorCode)
{
  return errorCode != 0;
}

Swift::Bool __swiftcall PThreadMutex.lock()()
{
  OUTLINED_FUNCTION_4_13();
  uint64_t v30 = v3;
  uint64_t v31 = v4;
  uint64_t v5 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.logger);
  swift_retain();
  char v7 = (void *)Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_2_18(v8))
  {
    swift_slowAlloc();
    uint64_t v28 = OUTLINED_FUNCTION_7_11();
    OUTLINED_FUNCTION_23_2(4.8151e-34);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v2, &v28);
    OUTLINED_FUNCTION_14_7();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_8();
    swift_release();
    OUTLINED_FUNCTION_20_4(&dword_1C9E4C000, v9, v10, "PThreadMutex#lock %s lockCount: %d");
    OUTLINED_FUNCTION_13_8();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_release();
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 16));
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_11_7();
  if (v11())
  {
    OUTLINED_FUNCTION_9_10();
    _StringGuts.grow(_:)(54);
    OUTLINED_FUNCTION_17_2();
    OUTLINED_FUNCTION_8_12();
    v12._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_6_13();
    uint64_t v14 = *(void *)(v5 + 40);
    unint64_t v15 = *(void **)(v5 + 48);
    swift_bridgeObjectRetain();
    v16._uint64_t countAndFlagsBits = v14;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    unint64_t v17 = v29;
    OUTLINED_FUNCTION_27_1();
    if (!v18)
    {
      uint64_t v19 = v28;
      swift_bridgeObjectRetain();
      unint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        OUTLINED_FUNCTION_3_14();
        OUTLINED_FUNCTION_7_11();
        OUTLINED_FUNCTION_15_4();
        OUTLINED_FUNCTION_24_2(4.8149e-34);
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v17, &v28);
        OUTLINED_FUNCTION_0_15();
        swift_bridgeObjectRelease_n();
        OUTLINED_FUNCTION_18_4(&dword_1C9E4C000, v22, v23, "%s");
        OUTLINED_FUNCTION_12_8();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      goto LABEL_13;
    }
  }
  else
  {
    *(void *)(v5 + 24) = pthread_self();
    int v24 = *(_DWORD *)(v5 + 32);
    BOOL v25 = __OFADD__(v24, 1);
    int v26 = v24 + 1;
    if (!v25)
    {
      *(_DWORD *)(v5 + 32) = v26;
LABEL_13:
      OUTLINED_FUNCTION_5_10();
      return result;
    }
    __break(1u);
  }
  Swift::Bool result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

Swift::Bool __swiftcall PThreadMutex.unlock()()
{
  OUTLINED_FUNCTION_4_13();
  uint64_t v30 = v3;
  uint64_t v31 = v4;
  uint64_t v5 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.logger);
  swift_retain();
  char v7 = (void *)Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_2_18(v8))
  {
    swift_slowAlloc();
    uint64_t v28 = OUTLINED_FUNCTION_7_11();
    OUTLINED_FUNCTION_23_2(4.8151e-34);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v2, &v28);
    OUTLINED_FUNCTION_14_7();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_8();
    swift_release();
    OUTLINED_FUNCTION_20_4(&dword_1C9E4C000, v9, v10, "PThreadMutex#unlock %s lockCount: %d");
    OUTLINED_FUNCTION_13_8();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_release();
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 16));
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_11_7();
  if (v11())
  {
    OUTLINED_FUNCTION_9_10();
    _StringGuts.grow(_:)(58);
    OUTLINED_FUNCTION_17_2();
    OUTLINED_FUNCTION_8_12();
    v12._uint64_t countAndFlagsBits = 0xD000000000000031;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_6_13();
    uint64_t v14 = *(void *)(v5 + 40);
    unint64_t v15 = *(void **)(v5 + 48);
    swift_bridgeObjectRetain();
    v16._uint64_t countAndFlagsBits = v14;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    unint64_t v17 = v29;
    OUTLINED_FUNCTION_27_1();
    if (!v18)
    {
      uint64_t v19 = v28;
      swift_bridgeObjectRetain();
      unint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        OUTLINED_FUNCTION_3_14();
        OUTLINED_FUNCTION_7_11();
        OUTLINED_FUNCTION_15_4();
        OUTLINED_FUNCTION_24_2(4.8149e-34);
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v17, &v28);
        OUTLINED_FUNCTION_0_15();
        swift_bridgeObjectRelease_n();
        OUTLINED_FUNCTION_18_4(&dword_1C9E4C000, v22, v23, "%s");
        OUTLINED_FUNCTION_12_8();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
LABEL_14:
      OUTLINED_FUNCTION_5_10();
      return result;
    }
  }
  else
  {
    int v24 = *(_DWORD *)(v5 + 32);
    BOOL v25 = __OFSUB__(v24, 1);
    int v26 = v24 - 1;
    if (!v25)
    {
      *(_DWORD *)(v5 + 32) = v26;
      if (!v26) {
        *(void *)(v5 + 24) = 0;
      }
      goto LABEL_14;
    }
    __break(1u);
  }
  Swift::Bool result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t PThreadMutex.getCurrentThreadID()()
{
  return *(void *)(v0 + 24);
}

Swift::Int32 __swiftcall PThreadMutex.getLockCount()()
{
  return *(_DWORD *)(v0 + 32);
}

Swift::String __swiftcall PThreadMutex.getName()()
{
  uint64_t v1 = *(void *)(v0 + 40);
  unint64_t v2 = *(void **)(v0 + 48);
  swift_bridgeObjectRetain();
  uint64_t v3 = v1;
  uint64_t v4 = v2;
  result._object = v4;
  result._uint64_t countAndFlagsBits = v3;
  return result;
}

void static PThreadMutex.mutexCheckIsLockedOnThisThread(mutex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_4_13();
  a23 = v24;
  a24 = v25;
  uint64_t v27 = v26;
  uint64_t v28 = (*(uint64_t (**)(void))(*(void *)v26 + 224))();
  pthread_t v29 = pthread_self();
  if (v28) {
    BOOL v30 = v29 == (pthread_t)v28;
  }
  else {
    BOOL v30 = 0;
  }
  if (v30)
  {
LABEL_11:
    OUTLINED_FUNCTION_5_10();
    return;
  }
  OUTLINED_FUNCTION_9_10();
  _StringGuts.grow(_:)(78);
  OUTLINED_FUNCTION_17_2();
  v31._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
  v31._object = (void *)0x80000001C9EB8EA0;
  String.append(_:)(v31);
  v32._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v27 + 240))();
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_12();
  v33._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v33);
  unint64_t v34 = a12;
  if (v27[56] != 1)
  {
    uint64_t v35 = a11;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.logger);
    swift_bridgeObjectRetain();
    Swift::String v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      OUTLINED_FUNCTION_3_14();
      OUTLINED_FUNCTION_7_11();
      OUTLINED_FUNCTION_15_4();
      OUTLINED_FUNCTION_29_1(4.8149e-34);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v34, &a11);
      OUTLINED_FUNCTION_0_15();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_19_3(&dword_1C9E4C000, v39, v40, "%s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  __break(1u);
}

void static PThreadMutex.mutexCheckIsNotLockedOnThisThread(mutex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_4_13();
  a23 = v24;
  a24 = v25;
  uint64_t v27 = v26;
  uint64_t v28 = (*(uint64_t (**)(void))(*(void *)v26 + 224))();
  pthread_t v29 = pthread_self();
  if (v28) {
    BOOL v30 = v29 == (pthread_t)v28;
  }
  else {
    BOOL v30 = 0;
  }
  if (!v30)
  {
LABEL_12:
    OUTLINED_FUNCTION_5_10();
    return;
  }
  OUTLINED_FUNCTION_9_10();
  _StringGuts.grow(_:)(82);
  OUTLINED_FUNCTION_17_2();
  v31._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
  v31._object = (void *)0x80000001C9EB8EA0;
  String.append(_:)(v31);
  v32._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v27 + 240))();
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_12();
  v33._uint64_t countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v33);
  unint64_t v34 = a12;
  if (v27[56] != 1)
  {
    uint64_t v35 = a11;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.logger);
    swift_bridgeObjectRetain();
    Swift::String v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      OUTLINED_FUNCTION_3_14();
      OUTLINED_FUNCTION_7_11();
      OUTLINED_FUNCTION_15_4();
      OUTLINED_FUNCTION_29_1(4.8149e-34);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v34, &a11);
      OUTLINED_FUNCTION_0_15();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_19_3(&dword_1C9E4C000, v39, v40, "%s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  __break(1u);
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for PThreadMutex()
{
  return self;
}

uint64_t method lookup function for PThreadMutex(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PThreadMutex);
}

uint64_t dispatch thunk of PThreadMutex.__allocating_init(name:abortOnFail:)()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of PThreadMutex.isError(errorCode:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of PThreadMutex.lock()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of PThreadMutex.unlock()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of PThreadMutex.getCurrentThreadID()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of PThreadMutex.getLockCount()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of PThreadMutex.getName()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t OUTLINED_FUNCTION_0_15()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

BOOL OUTLINED_FUNCTION_2_18(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_3_14()
{
  return swift_slowAlloc();
}

void OUTLINED_FUNCTION_6_13()
{
  uint64_t v1 = 0x20726F6620;
  unint64_t v2 = 0xE500000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_7_11()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_10_8()
{
  *(_WORD *)(v0 + 12) = 1024;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_12_8()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_13_8()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_14_7()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_16_4(float a1)
{
  float *v1 = a1;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_18_4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void OUTLINED_FUNCTION_19_3(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void OUTLINED_FUNCTION_20_4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x12u);
}

void OUTLINED_FUNCTION_21_3(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void OUTLINED_FUNCTION_22_2(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_23_2(float a1)
{
  float *v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_24_2(float a1)
{
  float *v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_25_2(float a1)
{
  float *v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_26_1(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t OUTLINED_FUNCTION_29_1(float a1)
{
  float *v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t ManagedContinuation.resume(with:)(uint64_t a1)
{
  OUTLINED_FUNCTION_0_7();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  OUTLINED_FUNCTION_11_8();
  uint64_t v3 = type metadata accessor for Result();
  uint64_t v4 = type metadata accessor for Optional();
  OUTLINED_FUNCTION_1_5();
  uint64_t v6 = v5;
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1F4188790](v7, v8);
  OUTLINED_FUNCTION_8_13();
  OUTLINED_FUNCTION_11_8();
  uint64_t v9 = type metadata accessor for CheckedContinuation();
  uint64_t v10 = type metadata accessor for Optional();
  OUTLINED_FUNCTION_1_5();
  uint64_t v12 = v11;
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1F4188790](v13, v14);
  Swift::String v16 = (char *)&v19 - v15;
  __swift_storeEnumTagSinglePayload((uint64_t)&v19 - v15, 1, 1, v9);
  OUTLINED_FUNCTION_6_6();
  (*(void (**)(void (*)(char *, uint64_t), uint64_t, uint64_t))(v17 + 16))(v1, a1, v3);
  OUTLINED_FUNCTION_16_5();
  ManagedContinuation.updateState(continuation:result:)((uint64_t)v16, v1);
  (*(void (**)(void, uint64_t))(v6 + 8))(v1, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, v10);
}

uint64_t withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x1F4188298](withCancellableContinuation<A>(body:), 0, 0);
}

uint64_t withCancellableContinuation<A>(body:)()
{
  type metadata accessor for ManagedContinuation();
  long long v7 = *(_OWORD *)(v0 + 24);
  uint64_t v1 = ManagedContinuation.__allocating_init()();
  *(void *)(v0 + 48) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v7;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to withTaskCancellationHandler<A>(handler:operation:)
                                                                                    + async function pointer to withTaskCancellationHandler<A>(handler:operation:));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v3;
  *uint64_t v3 = v0;
  v3[1] = withCancellableContinuation<A>(body:);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 16);
  return v8(v5, (uint64_t)partial apply for closure #1 in withCancellableContinuation<A>(body:), v1, (uint64_t)&async function pointer to partial apply for closure #2 in withCancellableContinuation<A>(body:), v2, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)();
  uint64_t v8;

  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_0_8();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_1_6();
  uint8_t *v5 = v4;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = withCancellableContinuation<A>(body:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = withCancellableContinuation<A>(body:);
  }
  return MEMORY[0x1F4188298](v6, 0, 0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_2_6();
  swift_release();
  OUTLINED_FUNCTION_6_4();
  return v0();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_2_6();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ManagedContinuation<A>.resume()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  MEMORY[0x1F4188790](v0 - 8, v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 1, 1, v4);
  specialized ManagedContinuation.updateState(continuation:result:)((uint64_t)v3, 0, 0);
  return outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v3);
}

uint64_t ManagedContinuation.__allocating_init()()
{
  return ManagedContinuation.().init()();
}

uint64_t closure #1 in withCancellableContinuation<A>(body:)()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v0 = type metadata accessor for Result();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  uint64_t v4 = (uint64_t *)((char *)&v7 - v3);
  type metadata accessor for CancellationError();
  lazy protocol witness table accessor for type CancellationError and conformance CancellationError();
  uint64_t v5 = swift_allocError();
  CancellationError.init()();
  *uint64_t v4 = v5;
  swift_storeEnumTagMultiPayload();
  ManagedContinuation.resume(with:)((uint64_t)v4);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *a2;
  return MEMORY[0x1F4188298](closure #2 in withCancellableContinuation<A>(body:), 0, 0);
}

uint64_t closure #2 in withCancellableContinuation<A>(body:)()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 24);
  *(void *)(v3 + 32) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  uint64_t v5 = *(void *)(v1 + 80);
  *uint64_t v4 = v0;
  v4[1] = closure #2 in withCancellableContinuation<A>(body:);
  uint64_t v6 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188160](v6, 0, 0, 0xD000000000000022, 0x80000001C9EB8460, partial apply for closure #1 in closure #2 in withCancellableContinuation<A>(body:), v3, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_0_8();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_1_6();
  uint8_t *v5 = v4;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #2 in withCancellableContinuation<A>(body:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_6_4();
    return v6();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_2_6();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v6 = type metadata accessor for Result();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (uint64_t *)((char *)&v13 - v9);
  ManagedContinuation.setContinuation(_:)(a1);
  if ((static Task<>.isCancelled.getter() & 1) == 0) {
    return a3(a2);
  }
  type metadata accessor for CancellationError();
  lazy protocol witness table accessor for type CancellationError and conformance CancellationError();
  uint64_t v11 = swift_allocError();
  CancellationError.init()();
  uint64_t *v10 = v11;
  swift_storeEnumTagMultiPayload();
  ManagedContinuation.resume(with:)((uint64_t)v10);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t ManagedContinuation.setContinuation(_:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v2 = type metadata accessor for Result();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (void (*)(char *, uint64_t))((char *)&v15 - v6);
  uint64_t v8 = type metadata accessor for CheckedContinuation();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))((char *)&v15 - v12, a1, v8);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v8);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 1, 1, v2);
  ManagedContinuation.updateState(continuation:result:)((uint64_t)v13, v7);
  (*(void (**)(void, uint64_t))(v4 + 8))(v7, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t withTaskCancellationHandler<A>(handler:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = (char *)&async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)
      + async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = closure #1 in withTimeout<A>(seconds:operation:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t))v15)(a1, a4, a5, a2, a3, 0, 0, a6);
}

uint64_t ManagedContinuation.__allocating_init(_:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v3 = type metadata accessor for CheckedContinuation();
  uint64_t v4 = type metadata accessor for Optional();
  OUTLINED_FUNCTION_1_5();
  uint64_t v6 = v5;
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1F4188790](v7, v8);
  OUTLINED_FUNCTION_8_13();
  uint64_t v9 = ManagedContinuation.__allocating_init()();
  OUTLINED_FUNCTION_6_6();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v1, a1, v3);
  OUTLINED_FUNCTION_16_5();
  OUTLINED_FUNCTION_0_7();
  uint64_t v12 = v9 + *(void *)(v11 + 88);
  OUTLINED_FUNCTION_9_11();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40))(v12, v1, v4);
  swift_endAccess();
  return v9;
}

uint64_t ManagedContinuation.().init()()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 88);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v2 = type metadata accessor for CheckedContinuation();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 96);
  uint64_t v4 = type metadata accessor for Result();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v4);
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E08]), sel_init);
  *(void *)(v0 + *(void *)(*(void *)v0 + 104)) = v5;
  id v6 = v5;
  uint64_t v7 = (void *)MEMORY[0x1CB7919D0](0xD000000000000027, 0x80000001C9EB8490);
  objc_msgSend(v6, sel_setName_, v7);

  return v0;
}

uint64_t specialized ManagedContinuation.updateState(continuation:result:)(uint64_t a1, void *a2, unsigned __int8 a3)
{
  uint64_t v51 = a2;
  uint64_t v54 = a1;
  int v4 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  uint64_t v7 = MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v7, v10);
  uint64_t v13 = (char *)&v50 - v12;
  MEMORY[0x1F4188790](v11, v14);
  uint64_t v16 = (char *)&v50 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  OUTLINED_FUNCTION_1_5();
  uint64_t v19 = v18;
  uint64_t v21 = *(void *)(v20 + 64);
  uint64_t v24 = MEMORY[0x1F4188790](v22, v23);
  uint64_t v52 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24, v25);
  long long v55 = (char *)&v50 - v27;
  MEMORY[0x1F4188790](v26, v28);
  OUTLINED_FUNCTION_0_7();
  uint64_t v53 = *(void *)(v29 + 104);
  objc_msgSend(*(id *)(v3 + v53), sel_lock);
  if (v4 != 255)
  {
    OUTLINED_FUNCTION_0_7();
    uint64_t v31 = v3 + *(void *)(v30 + 96);
    swift_beginAccess();
    if (*(unsigned __int8 *)(v31 + 8) == 255)
    {
      uint64_t v50 = *(void **)v31;
      Swift::String v32 = v51;
      *(void *)uint64_t v31 = v51;
      *(unsigned char *)(v31 + 8) = v4;
      outlined copy of Result<(), Error>(v32, v4 & 1);
      outlined consume of Result<(), Error>?(v50, 0xFFu);
    }
  }
  outlined init with copy of CheckedContinuation<(), Error>?(v54, (uint64_t)v16);
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17) == 1)
  {
    outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v16);
    uint64_t v33 = v19;
  }
  else
  {
    uint64_t v33 = v19;
    unint64_t v34 = *(void (**)(void))(v19 + 32);
    OUTLINED_FUNCTION_3_15();
    v34();
    OUTLINED_FUNCTION_3_15();
    v34();
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v17);
    OUTLINED_FUNCTION_0_7();
    uint64_t v36 = v3 + *(void *)(v35 + 88);
    OUTLINED_FUNCTION_9_11();
    outlined assign with take of CheckedContinuation<(), Error>?((uint64_t)v13, v36);
    swift_endAccess();
  }
  OUTLINED_FUNCTION_0_7();
  uint64_t v38 = v3 + *(void *)(v37 + 88);
  swift_beginAccess();
  outlined init with copy of CheckedContinuation<(), Error>?(v38, (uint64_t)v9);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v17);
  uint64_t v40 = v55;
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v9);
  }
  else
  {
    Swift::String v41 = *(void (**)(void))(v33 + 32);
    OUTLINED_FUNCTION_3_15();
    v41();
    uint64_t v42 = v3 + *(void *)(*(void *)v3 + 96);
    swift_beginAccess();
    int v43 = *(unsigned __int8 *)(v42 + 8);
    if (v43 != 255)
    {
      unint64_t v45 = *(void **)v42;
      char v46 = v43 & 1;
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 1, 1, v17);
      OUTLINED_FUNCTION_9_11();
      outlined copy of Result<(), Error>(v45, v46);
      outlined assign with take of CheckedContinuation<(), Error>?((uint64_t)v13, v38);
      swift_endAccess();
      OUTLINED_FUNCTION_3_15();
      v41();
      uint64_t v56 = v45;
      char v57 = v46;
      unint64_t v47 = (v21 + ((*(unsigned __int8 *)(v33 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v48 = swift_allocObject();
      OUTLINED_FUNCTION_3_15();
      v41();
      outlined init with take of Result<(), Error>((uint64_t)&v56, v48 + v47);
      uint64_t v44 = partial apply for specialized closure #2 in ManagedContinuation.updateState(continuation:result:);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v40, v17);
  }
  uint64_t v44 = destructiveProjectEnumData for InputOrigin;
LABEL_13:
  ((void (*)(id))v44)(objc_msgSend(*(id *)(v3 + v53), sel_unlock));
  return swift_release();
}

uint64_t ManagedContinuation.updateState(continuation:result:)(uint64_t a1, void (*a2)(char *, uint64_t))
{
  uint64_t v3 = v2;
  uint64_t v113 = a2;
  uint64_t v116 = a1;
  uint64_t v4 = *(void *)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v6 = type metadata accessor for CheckedContinuation();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v7 - 8);
  uint64_t v123 = (void (*)(void, void, void))v7;
  v124 = v8;
  uint64_t v10 = MEMORY[0x1F4188790](v7, v9);
  uint64_t v119 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10, v12);
  uint64_t v112 = (char *)&v98 - v14;
  uint64_t v16 = MEMORY[0x1F4188790](v13, v15);
  uint64_t v115 = (char *)&v98 - v17;
  uint64_t v121 = v6;
  uint64_t v120 = *(void *)(v6 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v16, v18);
  uint64_t v107 = (char *)&v98 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v19, v21);
  uint64_t v122 = (char *)&v98 - v23;
  uint64_t v106 = v24;
  MEMORY[0x1F4188790](v22, v25);
  uint64_t v109 = (char *)&v98 - v26;
  uint64_t v108 = v5;
  uint64_t v27 = type metadata accessor for Result();
  uint64_t v28 = type metadata accessor for Optional();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v28, v30);
  uint64_t v117 = (char *)&v98 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x1F4188790](v31, v33);
  uint64_t v100 = (char *)&v98 - v35;
  uint64_t v37 = MEMORY[0x1F4188790](v34, v36);
  uint64_t v39 = (char *)&v98 - v38;
  uint64_t v41 = MEMORY[0x1F4188790](v37, v40);
  int v43 = (char *)&v98 - v42;
  uint64_t v44 = *(void *)(v27 - 8);
  uint64_t v46 = MEMORY[0x1F4188790](v41, v45);
  uint64_t v104 = (char *)&v98 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = MEMORY[0x1F4188790](v46, v48);
  v101 = (char *)&v98 - v50;
  uint64_t v103 = v51;
  MEMORY[0x1F4188790](v49, v52);
  uint64_t v54 = (char *)&v98 - v53;
  objc_msgSend(*(id *)(v2 + *(void *)(v4 + 104)), sel_lock);
  long long v55 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v55(v43, (uint64_t)v113, v28);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v43, 1, v27);
  uint64_t v105 = v44;
  uint64_t v111 = v27;
  uint64_t v118 = v28;
  uint64_t v102 = v29;
  uint64_t v114 = v29 + 16;
  uint64_t v110 = v55;
  if (EnumTagSinglePayload == 1)
  {
    uint64_t v113 = *(void (**)(char *, uint64_t))(v29 + 8);
    v113(v43, v28);
    uint64_t v57 = v121;
    uint64_t v58 = v124;
    uint64_t v59 = v3;
  }
  else
  {
    uint64_t v98 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
    v98(v54, v43, v27);
    uint64_t v60 = *(void *)(*(void *)v3 + 96);
    uint64_t v99 = v3;
    uint64_t v61 = (void (*)(void, void))(v3 + v60);
    swift_beginAccess();
    uint64_t v62 = v118;
    v55(v39, (uint64_t)v61, v118);
    int v63 = __swift_getEnumTagSinglePayload((uint64_t)v39, 1, v27);
    uint64_t v113 = *(void (**)(char *, uint64_t))(v29 + 8);
    v113(v39, v62);
    if (v63 == 1)
    {
      uint64_t v64 = (uint64_t)v100;
      v98(v100, v54, v27);
      __swift_storeEnumTagSinglePayload(v64, 0, 1, v27);
      swift_beginAccess();
      (*(void (**)(void (*)(void, void), uint64_t, uint64_t))(v29 + 40))(v61, v64, v62);
      swift_endAccess();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v44 + 8))(v54, v27);
    }
    uint64_t v57 = v121;
    uint64_t v58 = v124;
    uint64_t v59 = v99;
  }
  unint64_t v65 = (void (*)(char *, uint64_t, void))*((void *)v58 + 2);
  uint64_t v66 = (uint64_t)v115;
  uint64_t v67 = v123;
  v65(v115, v116, v123);
  if (__swift_getEnumTagSinglePayload(v66, 1, v57) == 1)
  {
    (*((void (**)(uint64_t, void (*)(void, void, void)))v58 + 1))(v66, v67);
  }
  else
  {
    uint64_t v68 = *(void (**)(char *, uint64_t, uint64_t))(v120 + 32);
    uint64_t v69 = v109;
    v68(v109, v66, v57);
    uint64_t v70 = (uint64_t)v112;
    v68(v112, (uint64_t)v69, v57);
    uint64_t v67 = v123;
    __swift_storeEnumTagSinglePayload(v70, 0, 1, v57);
    uint64_t v71 = v59 + *(void *)(*(void *)v59 + 88);
    swift_beginAccess();
    (*((void (**)(uint64_t, uint64_t, void))v58 + 5))(v71, v70, v67);
    swift_endAccess();
  }
  uint64_t v72 = v122;
  uint64_t v73 = (uint64_t)v119;
  uint64_t v74 = v59 + *(void *)(*(void *)v59 + 88);
  swift_beginAccess();
  v65((char *)v73, v74, v67);
  if (__swift_getEnumTagSinglePayload(v73, 1, v57) == 1)
  {
    (*((void (**)(uint64_t, void (*)(void, void, void)))v124 + 1))(v73, v67);
  }
  else
  {
    uint64_t v75 = v73;
    uint64_t v76 = v120;
    uint64_t v77 = *(void (**)(char *, uint64_t, uint64_t))(v120 + 32);
    v77(v72, v75, v57);
    uint64_t v78 = v59 + *(void *)(*(void *)v59 + 96);
    swift_beginAccess();
    uint64_t v79 = (uint64_t)v117;
    uint64_t v80 = v78;
    uint64_t v81 = v118;
    v110(v117, v80, v118);
    uint64_t v82 = v111;
    if (__swift_getEnumTagSinglePayload(v79, 1, v111) != 1)
    {
      uint64_t v84 = v57;
      uint64_t v85 = v105 + 32;
      uint64_t v123 = *(void (**)(void, void, void))(v105 + 32);
      uint64_t v86 = v101;
      v123(v101, v117, v82);
      uint64_t v87 = (uint64_t)v112;
      __swift_storeEnumTagSinglePayload((uint64_t)v112, 1, 1, v84);
      swift_beginAccess();
      (*((void (**)(uint64_t, uint64_t, void))v124 + 5))(v74, v87, v67);
      swift_endAccess();
      uint64_t v88 = v82;
      v89 = v107;
      v77(v107, (uint64_t)v122, v84);
      unint64_t v90 = v104;
      v124 = v77;
      uint64_t v91 = (void (*)(unint64_t, char *, uint64_t))v123;
      v123(v104, v86, v88);
      unint64_t v92 = (*(unsigned __int8 *)(v120 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80);
      unint64_t v93 = (v106 + *(unsigned __int8 *)(v85 + 48) + v92) & ~(unint64_t)*(unsigned __int8 *)(v85 + 48);
      uint64_t v94 = swift_allocObject();
      *(void *)(v94 + 16) = v108;
      v124((char *)(v94 + v92), (uint64_t)v89, v121);
      v91(v94 + v93, v90, v88);
      uint64_t v83 = partial apply for closure #2 in ManagedContinuation.updateState(continuation:result:);
      goto LABEL_16;
    }
    (*(void (**)(char *, uint64_t))(v76 + 8))(v122, v57);
    v113(v117, v81);
  }
  uint64_t v83 = destructiveProjectEnumData for InputOrigin;
LABEL_16:
  uint64_t v95 = v83;
  id v96 = $defer #1 <A>() in ManagedContinuation.updateState(continuation:result:)(v59);
  ((void (*)(id))v95)(v96);
  return swift_release();
}

uint64_t type metadata accessor for ManagedContinuation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in withCancellableContinuation<A>(body:)()
{
  return closure #1 in withCancellableContinuation<A>(body:)();
}

uint64_t partial apply for closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1)
{
  uint64_t v4 = (void *)v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = closure #1 in withTimeout<A>(seconds:operation:);
  return closure #2 in withCancellableContinuation<A>(body:)(a1, v4, v5, v6);
}

uint64_t outlined destroy of CheckedContinuation<(), Error>?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ManagedContinuation.resume(returning:)(uint64_t a1)
{
  OUTLINED_FUNCTION_0_7();
  uint64_t v4 = *(void *)(v3 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v5 = type metadata accessor for Result();
  OUTLINED_FUNCTION_1_5();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1F4188790](v8, v9);
  OUTLINED_FUNCTION_8_13();
  OUTLINED_FUNCTION_6_6();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v1, a1, v4);
  swift_storeEnumTagMultiPayload();
  ManagedContinuation.resume(with:)(v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v1, v5);
}

uint64_t ManagedContinuation.resume(throwing:)(void *a1)
{
  OUTLINED_FUNCTION_0_7();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v2 = type metadata accessor for Result();
  OUTLINED_FUNCTION_1_5();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v8 = (char *)&v11 - v7;
  *(uint64_t *)((char *)&v11 - v7) = (uint64_t)a1;
  swift_storeEnumTagMultiPayload();
  id v9 = a1;
  ManagedContinuation.resume(with:)((uint64_t)v8);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v8, v2);
}

id $defer #1 <A>() in ManagedContinuation.updateState(continuation:result:)(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + *(void *)(*(void *)a1 + 104)), sel_unlock);
}

uint64_t specialized closure #2 in ManagedContinuation.updateState(continuation:result:)(int a1, id a2, char a3)
{
  if (a3)
  {
    id v4 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t closure #2 in ManagedContinuation.updateState(continuation:result:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v3 = type metadata accessor for CheckedContinuation();
  return CheckedContinuation.resume(with:)(a2, v3);
}

uint64_t CheckedContinuation.resume(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Result();
  MEMORY[0x1F4188790](v13, v14);
  uint64_t v16 = (char *)&v19 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v19 - v15, a1, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v16, v9);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v16, v3);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t ManagedContinuation.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 88);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  OUTLINED_FUNCTION_12_9();
  type metadata accessor for CheckedContinuation();
  type metadata accessor for Optional();
  OUTLINED_FUNCTION_6_6();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 96);
  OUTLINED_FUNCTION_12_9();
  type metadata accessor for Result();
  type metadata accessor for Optional();
  OUTLINED_FUNCTION_6_6();
  (*(void (**)(uint64_t))(v4 + 8))(v3);

  return v0;
}

uint64_t ManagedContinuation.__deallocating_deinit()
{
  ManagedContinuation.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t type metadata completion function for ManagedContinuation()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for CheckedContinuation();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Result();
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t method lookup function for ManagedContinuation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ManagedContinuation);
}

uint64_t outlined init with copy of CheckedContinuation<(), Error>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of CheckedContinuation<(), Error>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v17;
  *uint64_t v17 = v8;
  v17[1] = partial apply for closure #2 in withTimeout<A>(seconds:operation:);
  return MEMORY[0x1F4188148](a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t specialized closure #2 in ManagedContinuation.updateState(continuation:result:)(int a1, uint64_t a2)
{
  return specialized closure #2 in ManagedContinuation.updateState(continuation:result:)(a1, *(id *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t sub_1C9E8B474()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  OUTLINED_FUNCTION_6_6();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  outlined consume of Result<(), Error>(*(id *)(v0 + v5), *(unsigned char *)(v0 + v5 + 8));

  return MEMORY[0x1F4186498](v0, v5 + 9, v4);
}

uint64_t outlined init with take of Result<(), Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<(), Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #2 in ManagedContinuation.updateState(continuation:result:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  OUTLINED_FUNCTION_8_3(v1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = v0 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);

  return specialized closure #2 in ManagedContinuation.updateState(continuation:result:)((int)v0 + (int)v6, v7);
}

void outlined consume of Result<(), Error>?(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    outlined consume of Result<(), Error>(a1, a2 & 1);
  }
}

uint64_t partial apply for closure #1 in closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1)
{
  return closure #1 in closure #2 in withCancellableContinuation<A>(body:)(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_1C9E8B618()
{
  uint64_t v1 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v2 = OUTLINED_FUNCTION_14_8();
  OUTLINED_FUNCTION_1_5();
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 24) & ~v5;
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(OUTLINED_FUNCTION_15_5() - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v6 + v8 + v10) & ~v10;
  uint64_t v14 = *(void *)(v9 + 64);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v6, v2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
  }
  else
  {
    OUTLINED_FUNCTION_6_6();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v0 + v11, v1);
  }

  return MEMORY[0x1F4186498](v0, v11 + v14, v5 | v10 | 7);
}

uint64_t partial apply for closure #2 in ManagedContinuation.updateState(continuation:result:)()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v1 = OUTLINED_FUNCTION_14_8();
  OUTLINED_FUNCTION_8_3(v1);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(OUTLINED_FUNCTION_15_5() - 8);
  uint64_t v7 = v0 + ((v3 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return closure #2 in ManagedContinuation.updateState(continuation:result:)(v0 + v3, v7);
}

uint64_t OUTLINED_FUNCTION_9_11()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_11_8()
{
  return 255;
}

uint64_t OUTLINED_FUNCTION_12_9()
{
  return 255;
}

uint64_t OUTLINED_FUNCTION_14_8()
{
  return type metadata accessor for CheckedContinuation();
}

uint64_t OUTLINED_FUNCTION_15_5()
{
  return type metadata accessor for Result();
}

uint64_t OUTLINED_FUNCTION_16_5()
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
}

uint64_t Transformer<>.transformer.unsafeMutableAddressor()
{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

uint64_t Transformer<>.transformer.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(void *)a2;
}

void *one-time initialization function for transformer()
{
  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *uint64_t result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

uint64_t *closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  return closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1, a2);
}

void static Transformer<>.transformer.getter(void *a1@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(void *a1@<X8>)
{
}

{
  OUTLINED_FUNCTION_3_0(a1);
}

{
  OUTLINED_FUNCTION_3_0(a1);
}

{
  OUTLINED_FUNCTION_3_0(a1);
}

{
  closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1);
}

{
  closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1);
}

{
  closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1);
}

unint64_t *closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer@<X0>(unint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  return closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1, a2);
}

void *closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if ((*result & 0x8000000000000000) != 0)
  {
    OUTLINED_FUNCTION_0_11();
    uint64_t result = (void *)OUTLINED_FUNCTION_6_14();
    __break(1u);
  }
  else
  {
    *a2 = *result;
  }
  return result;
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(uint64_t *a1@<X0>, double *a2@<X8>)
{
}

{
  closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1, a2);
}

void static Transformer<>.transformer.getter(void (**a1)(uint64_t *a1@<X0>, double *a2@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (void (*)(uint64_t *@<X0>, double *@<X8>))specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (void (*)(uint64_t *@<X0>, double *@<X8>))specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(uint64_t *a1@<X0>, float *a2@<X8>)
{
}

{
  closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1, a2);
}

void static Transformer<>.transformer.getter(void (**a1)(uint64_t *a1@<X0>, float *a2@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (void (*)(uint64_t *@<X0>, float *@<X8>))specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (void (*)(uint64_t *@<X0>, float *@<X8>))specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

uint64_t closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1);
}

{
  return closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1);
}

{
  return closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1);
}

{
  return closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1);
}

{
  uint64_t result;
  uint64_t v3;

  uint64_t result = dispatch thunk of CustomStringConvertible.description.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

{
  return closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1);
}

{
  uint64_t result;
  uint64_t v3;

  uint64_t result = dispatch thunk of CustomStringConvertible.description.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void static Transformer<>.transformer.getter(uint64_t (**a1)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (uint64_t (*)@<X0>(uint64_t *@<X8>))specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (uint64_t (*)@<X0>(uint64_t *@<X8>))specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (uint64_t (*)@<X0>(uint64_t *@<X8>))specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (uint64_t (*)@<X0>(uint64_t *@<X8>))specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (uint64_t (*)@<X0>(uint64_t *@<X8>))specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

void *closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

_DWORD *closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  if ((*result & 0x80000000) != 0)
  {
    OUTLINED_FUNCTION_0_11();
    uint64_t result = (_DWORD *)OUTLINED_FUNCTION_6_14();
    __break(1u);
  }
  else
  {
    *a2 = *result;
  }
  return result;
}

unsigned int *closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer@<X0>(unsigned int *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((v2 & 0x80000000) != 0)
  {
    OUTLINED_FUNCTION_0_11();
    uint64_t result = (unsigned int *)OUTLINED_FUNCTION_6_14();
    __break(1u);
  }
  else
  {
    *a2 = v2;
  }
  return result;
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(int *a1@<X0>, double *a2@<X8>)
{
}

void static Transformer<>.transformer.getter(void (**a1)(int *a1@<X0>, double *a2@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (void (*)(int *@<X0>, double *@<X8>))specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(int *a1@<X0>, float *a2@<X8>)
{
}

void static Transformer<>.transformer.getter(void (**a1)(int *a1@<X0>, float *a2@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (void (*)(int *@<X0>, float *@<X8>))specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

uint64_t *closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer@<X0>(uint64_t *result@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2 = *result;
  if (*result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v2 <= 0x7FFFFFFF)
  {
    *a2 = v2;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t *closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer@<X0>(unint64_t *result@<X0>, _DWORD *a2@<X8>)
{
  unint64_t v2 = *result;
  if ((*result & 0x8000000000000000) != 0 || HIDWORD(v2))
  {
    OUTLINED_FUNCTION_0_11();
    uint64_t result = (unint64_t *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a2 = v2;
  }
  return result;
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(_DWORD *a1@<X8>, _DWORD *a2@<X0>)
{
  if ((*a2 & 0x80000000) != 0) {
    __break(1u);
  }
  else {
    OUTLINED_FUNCTION_9_12(a1);
  }
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(_DWORD *a1@<X0>, double *a2@<X8>, unint64_t a3@<D0>)
{
  LODWORD(a3) = *a1;
  OUTLINED_FUNCTION_11_9(a2, (double)a3);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(unsigned int *a1@<X0>, float *a2@<X8>)
{
}

void static Transformer<>.transformer.getter(void (**a1)(unsigned int *a1@<X0>, float *a2@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (void (*)(unsigned int *@<X0>, float *@<X8>))specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

void *closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer@<X0>(void *result@<X0>, _DWORD *a2@<X8>)
{
  if (*result >> 31) {
    __break(1u);
  }
  else {
    *a2 = *result;
  }
  return result;
}

{
  if (HIDWORD(*result))
  {
    OUTLINED_FUNCTION_0_11();
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a2 = *result;
  }
  return result;
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(void *a1@<X8>, void *a2@<X0>)
{
  if ((*a2 & 0x8000000000000000) != 0) {
    __break(1u);
  }
  else {
    OUTLINED_FUNCTION_3_0(a1);
  }
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(unint64_t *a1@<X0>, double *a2@<X8>)
{
}

void static Transformer<>.transformer.getter(void (**a1)(unint64_t *a1@<X0>, double *a2@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (void (*)(unint64_t *@<X0>, double *@<X8>))specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(unint64_t *a1@<X0>, float *a2@<X8>)
{
}

void static Transformer<>.transformer.getter(void (**a1)(unint64_t *a1@<X0>, float *a2@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (void (*)(unint64_t *@<X0>, float *@<X8>))specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(_DWORD *a1@<X8>, double *a2@<X0>)
{
  double v2 = *a2;
  if ((~*(void *)a2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -2147483650.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 2147483650.0)
  {
    OUTLINED_FUNCTION_9_12(a1);
    return;
  }
LABEL_7:
  __break(1u);
}

{
  double v2;

  double v2 = *a2;
  if ((~*(void *)a2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 4294967300.0)
  {
    OUTLINED_FUNCTION_9_12(a1);
    return;
  }
LABEL_7:
  __break(1u);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(double *a1@<X0>, void *a2@<X8>)
{
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(void *a1@<X8>, double *a2@<X0>)
{
  double v2 = *a2;
  if ((~*(void *)a2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 1.84467441e19)
  {
    OUTLINED_FUNCTION_3_0(a1);
    return;
  }
LABEL_7:
  __break(1u);
}

{
  double v2;

  double v2 = *a2;
  if ((~*(void *)a2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 9.22337204e18)
  {
    OUTLINED_FUNCTION_3_0(a1);
    return;
  }
LABEL_7:
  __break(1u);
}

float closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer@<S0>(double *a1@<X0>, float *a2@<X8>)
{
  float v2 = *a1;
  OUTLINED_FUNCTION_10_9(a2, v2);
  return result;
}

void static Transformer<>.transformer.getter(float (**a1)@<S0>(double *a1@<X0>, float *a2@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (float (*)@<S0>(double *@<X0>, float *@<X8>))specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

uint64_t closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer()
{
  OUTLINED_FUNCTION_16_6();
  uint64_t result = Double.write<A>(to:)();
  void *v0 = 0;
  v0[1] = 0xE000000000000000;
  return result;
}

{
  void *v0;
  uint64_t result;

  OUTLINED_FUNCTION_16_6();
  uint64_t result = Float.write<A>(to:)();
  void *v0 = 0;
  v0[1] = 0xE000000000000000;
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  char v4;
  uint64_t v5;

  OUTLINED_FUNCTION_17_3();
  uint64_t result = specialized Double.init<A>(_:)(v1, v2);
  if (v4)
  {
    lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    OUTLINED_FUNCTION_20_1();
    return OUTLINED_FUNCTION_3_16(v5, (uint64_t)"cannot parse Double from String");
  }
  else
  {
    void *v0 = result;
  }
  return result;
}

void static Transformer<>.transformer.getter(uint64_t (**a1)()@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (uint64_t (*)())specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (uint64_t (*)())specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (uint64_t (*)())specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(char *a1@<X8>)
{
}

{
  OUTLINED_FUNCTION_15_6(a1);
}

void static Transformer<>.transformer.getter(void (**a1)(char *a1@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (void (*)(char *@<X8>))specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (void (*)(char *@<X8>))specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(_DWORD *a1@<X8>, float *a2@<X0>)
{
  float v2 = *a2;
  if ((~*(_DWORD *)a2 & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -2147500000.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 2147500000.0)
  {
    OUTLINED_FUNCTION_9_12(a1);
    return;
  }
LABEL_7:
  __break(1u);
}

{
  float v2;

  float v2 = *a2;
  if ((~*(_DWORD *)a2 & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 4295000000.0)
  {
    OUTLINED_FUNCTION_9_12(a1);
    return;
  }
LABEL_7:
  __break(1u);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(float *a1@<X0>, void *a2@<X8>)
{
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(void *a1@<X8>, float *a2@<X0>)
{
  float v2 = *a2;
  if ((~*(_DWORD *)a2 & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 1.8447e19)
  {
    OUTLINED_FUNCTION_3_0(a1);
    return;
  }
LABEL_7:
  __break(1u);
}

{
  float v2;

  float v2 = *a2;
  if ((~*(_DWORD *)a2 & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -9.2234e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 9.2234e18)
  {
    OUTLINED_FUNCTION_3_0(a1);
    return;
  }
LABEL_7:
  __break(1u);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(float *a1@<X0>, double *a2@<X8>)
{
}

void static Transformer<>.transformer.getter(void (**a1)(float *a1@<X0>, double *a2@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (void (*)(float *@<X0>, double *@<X8>))specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

unsigned char *closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer@<X0>(unsigned char *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = 1702195828;
  if (!*result) {
    uint64_t v2 = 0x65736C6166;
  }
  unint64_t v3 = 0xE500000000000000;
  if (*result) {
    unint64_t v3 = 0xE400000000000000;
  }
  *a2 = v2;
  a2[1] = v3;
  return result;
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer()
{
  OUTLINED_FUNCTION_16_6();
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  uint64_t v5 = HIBYTE(v4) & 0xF;
  uint64_t v6 = *v2 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000) != 0) {
    uint64_t v7 = HIBYTE(v4) & 0xF;
  }
  else {
    uint64_t v7 = *v2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
LABEL_48:
    lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    OUTLINED_FUNCTION_20_1();
    OUTLINED_FUNCTION_3_16(v25, (uint64_t)"cannot parse Int from String");
    return;
  }
  if ((v4 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(v3, v4, 10);
    char v1 = v28;
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  if ((v4 & 0x2000000000000000) == 0)
  {
    if ((v3 & 0x1000000000000000) != 0) {
      uint64_t v8 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v9 = (uint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v8, v6, 10);
    char v1 = v10 & 1;
LABEL_46:
    if ((v1 & 1) == 0)
    {
      uint64_t *v0 = v9;
      return;
    }
    goto LABEL_48;
  }
  if (*v2 == 43)
  {
    if (!v5) {
      goto LABEL_59;
    }
    if (v5 == 1) {
      goto LABEL_32;
    }
    OUTLINED_FUNCTION_5_8();
    if (!v14 & v13) {
      goto LABEL_32;
    }
    uint64_t v9 = v16;
    if (v15 != 2)
    {
      OUTLINED_FUNCTION_5_8();
      if (!v14 & v13) {
        goto LABEL_32;
      }
      uint64_t v9 = 10 * v9 + v18;
      if (v17 != 3)
      {
        while (1)
        {
          OUTLINED_FUNCTION_18_3();
          if (!v14 & v13) {
            goto LABEL_32;
          }
          OUTLINED_FUNCTION_8_14();
          if (!v14) {
            goto LABEL_32;
          }
          uint64_t v9 = v20 + v19;
          if (__OFADD__(v20, v19)) {
            goto LABEL_32;
          }
          OUTLINED_FUNCTION_13_9();
          if (v14) {
            goto LABEL_46;
          }
        }
      }
    }
LABEL_45:
    char v1 = 0;
    goto LABEL_46;
  }
  if (*v2 != 45)
  {
    if (!v5 || (v3 - 48) > 9u) {
      goto LABEL_32;
    }
    uint64_t v9 = (v3 - 48);
    if (v5 != 1)
    {
      OUTLINED_FUNCTION_5_8();
      if (!v14 & v13) {
        goto LABEL_32;
      }
      uint64_t v9 = 10 * (v3 - 48) + v22;
      if (v21 != 2)
      {
        while (1)
        {
          OUTLINED_FUNCTION_18_3();
          if (!v14 & v13) {
            goto LABEL_32;
          }
          OUTLINED_FUNCTION_8_14();
          if (!v14) {
            goto LABEL_32;
          }
          uint64_t v9 = v24 + v23;
          if (__OFADD__(v24, v23)) {
            goto LABEL_32;
          }
          OUTLINED_FUNCTION_13_9();
          if (v14) {
            goto LABEL_46;
          }
        }
      }
    }
    goto LABEL_45;
  }
  if (v5)
  {
    if (v5 != 1)
    {
      OUTLINED_FUNCTION_5_8();
      if (!(!v14 & v13))
      {
        if (v11 == 2)
        {
          char v1 = 0;
          uint64_t v9 = -(uint64_t)v12;
          goto LABEL_46;
        }
        if ((BYTE2(v3) - 48) <= 9u)
        {
          uint64_t v9 = -10 * v12 - (BYTE2(v3) - 48);
          if (v11 == 3) {
            goto LABEL_45;
          }
          while (1)
          {
            OUTLINED_FUNCTION_18_3();
            if (!v14 & v13) {
              break;
            }
            OUTLINED_FUNCTION_8_14();
            if (!v14) {
              break;
            }
            uint64_t v9 = v27 - v26;
            if (__OFSUB__(v27, v26)) {
              break;
            }
            OUTLINED_FUNCTION_13_9();
            if (v14) {
              goto LABEL_46;
            }
          }
        }
      }
    }
LABEL_32:
    uint64_t v9 = 0;
    char v1 = 1;
    goto LABEL_46;
  }
  __break(1u);
LABEL_59:
  __break(1u);
}

void static Transformer<>.transformer.getter(void (**a1)()@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (void (*)())specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

uint64_t specialized Double.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    char v6 = v9;
  }
  else
  {
    MEMORY[0x1F4188790](a1, a2);
    if ((a2 & 0x2000000000000000) != 0)
    {
      char v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (uint64_t v7 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
        && *v7 == 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      char v6 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v4, v5, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
      swift_bridgeObjectRelease();
    }
  }
  if (v6) {
    return 0;
  }
  else {
    return 0;
  }
}

unint64_t closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer()
{
  OUTLINED_FUNCTION_17_3();
  unint64_t result = specialized Float.init<A>(_:)(v1, v2);
  if ((result & 0x100000000) != 0)
  {
    lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    OUTLINED_FUNCTION_20_1();
    return OUTLINED_FUNCTION_3_16(v4, (uint64_t)"cannot parse Float from String");
  }
  else
  {
    _DWORD *v0 = result;
  }
  return result;
}

unint64_t specialized Float.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    char v6 = v9;
  }
  else
  {
    MEMORY[0x1F4188790](a1, a2);
    if ((a2 & 0x2000000000000000) != 0)
    {
      char v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (uint64_t v7 = (unsigned char *)_swift_stdlib_strtof_clocale()) != 0
        && *v7 == 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      char v6 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v4, v5, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
      swift_bridgeObjectRelease();
    }
  }
  return (unint64_t)((v6 & 1) == 0) << 32;
}

void static Transformer<>.transformer.getter(unint64_t (**a1)()@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  a1[2] = (unint64_t (*)())specialized closure #1 in Transformer.init(transform:);
  a1[3] = 0;
}

unsigned __int8 closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer@<W0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CharacterSet();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  char v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v13 = String.lowercased()();
  static CharacterSet.whitespacesAndNewlines.getter();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v7 = StringProtocol.trimmingCharacters(in:)();
  char v9 = v8;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = v7;
  v10._object = v9;
  unsigned __int8 result = Bool.init(_:)(v10).value;
  if (result == 2)
  {
    lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    OUTLINED_FUNCTION_20_1();
    return OUTLINED_FUNCTION_3_16(v12, (uint64_t)"cannot parse Bool from String");
  }
  else
  {
    *a1 = result & 1;
  }
  return result;
}

uint64_t specialized closure #1 in Transformer.init(transform:)()
{
  lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
  swift_allocError();
  *(void *)uint64_t v0 = 0;
  *(void *)(v0 + 8) = 0;
  *(unsigned char *)(v0 + 16) = 2;
  return swift_willThrow();
}

{
  uint64_t v0;
  uint64_t v1;

  lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
  uint64_t v0 = OUTLINED_FUNCTION_20_1();
  return OUTLINED_FUNCTION_0_16(v0, v1);
}

{
  uint64_t v0;

  lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
  swift_allocError();
  *(void *)uint64_t v0 = 0;
  *(void *)(v0 + 8) = 0;
  *(unsigned char *)(v0 + 16) = 2;
  swift_willThrow();
  return 0;
}

void closure #1 in closure #1 in Double.init<A>(_:)()
{
  OUTLINED_FUNCTION_16_6();
  unsigned int v3 = *v2;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (uint64_t v8 = (unsigned char *)v1()) != 0 && *v8 == 0;
  BOOL *v0 = v7;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

uint64_t specialized closure #1 in Transformer.init(transform:)(unsigned int *a1)
{
  OUTLINED_FUNCTION_21_4(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = result;
  }
  return result;
}

{
  _DWORD *v1;
  uint64_t v2;
  uint64_t result;

  OUTLINED_FUNCTION_21_4(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = result;
  }
  return result;
}

{
  void *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  OUTLINED_FUNCTION_21_4(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = v4;
  }
  return result;
}

{
  _DWORD *v1;
  uint64_t v2;
  uint64_t result;
  int v4;

  OUTLINED_FUNCTION_21_4(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = v4;
  }
  return result;
}

{
  return specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  return specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  return specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  return specialized closure #1 in Transformer.init(transform:)(a1);
}

uint64_t specialized closure #1 in Transformer.init(transform:)(uint64_t a1)
{
  OUTLINED_FUNCTION_12_10(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = result;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  OUTLINED_FUNCTION_20_5(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = result;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  OUTLINED_FUNCTION_19_4(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = result;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  OUTLINED_FUNCTION_5_11(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = result;
  }
  return result;
}

{
  _DWORD *v1;
  uint64_t v2;
  uint64_t result;

  OUTLINED_FUNCTION_12_10(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = result;
  }
  return result;
}

{
  _DWORD *v1;
  uint64_t v2;
  uint64_t result;

  OUTLINED_FUNCTION_20_5(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = result;
  }
  return result;
}

{
  _DWORD *v1;
  uint64_t v2;
  uint64_t result;

  OUTLINED_FUNCTION_19_4(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = result;
  }
  return result;
}

{
  _DWORD *v1;
  uint64_t v2;
  uint64_t result;

  OUTLINED_FUNCTION_5_11(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = result;
  }
  return result;
}

{
  void *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  OUTLINED_FUNCTION_12_10(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = v4;
  }
  return result;
}

{
  void *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  OUTLINED_FUNCTION_19_4(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = v4;
  }
  return result;
}

{
  void *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  OUTLINED_FUNCTION_5_11(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = v4;
  }
  return result;
}

{
  _DWORD *v1;
  uint64_t v2;
  uint64_t result;
  int v4;

  OUTLINED_FUNCTION_20_5(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = v4;
  }
  return result;
}

{
  _DWORD *v1;
  uint64_t v2;
  uint64_t result;
  int v4;

  OUTLINED_FUNCTION_12_10(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = v4;
  }
  return result;
}

{
  _DWORD *v1;
  uint64_t v2;
  uint64_t result;
  int v4;

  OUTLINED_FUNCTION_5_11(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = v4;
  }
  return result;
}

{
  unsigned char *v1;
  uint64_t v2;
  uint64_t result;

  OUTLINED_FUNCTION_12_10(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = result & 1;
  }
  return result;
}

{
  unsigned char *v1;
  uint64_t v2;
  uint64_t result;

  OUTLINED_FUNCTION_5_11(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = result & 1;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  OUTLINED_FUNCTION_12_10(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
  {
    uint64_t *v1 = result;
    v1[1] = v4;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  OUTLINED_FUNCTION_20_5(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
  {
    uint64_t *v1 = result;
    v1[1] = v4;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  OUTLINED_FUNCTION_19_4(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
  {
    uint64_t *v1 = result;
    v1[1] = v4;
  }
  return result;
}

{
  return specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  return specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  return specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  return specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  return specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  return specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  return specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  return specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  return specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  return specialized closure #1 in Transformer.init(transform:)(a1);
}

uint64_t specialized closure #1 in Transformer.init(transform:)(unsigned __int8 *a1)
{
  OUTLINED_FUNCTION_18_5(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = result;
  }
  return result;
}

{
  void *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  OUTLINED_FUNCTION_18_5(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = v4;
  }
  return result;
}

{
  _DWORD *v1;
  uint64_t v2;
  uint64_t result;
  int v4;

  OUTLINED_FUNCTION_18_5(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2) {
    uint64_t *v1 = v4;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  OUTLINED_FUNCTION_18_5(a1);
  uint64_t result = specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
  {
    uint64_t *v1 = result;
    v1[1] = v4;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

void partial apply for closure #1 in closure #1 in Float.init<A>(_:)()
{
}

void *partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)@<X0>(unsigned char *a1@<X8>)
{
  return partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  void *result;
  uint64_t v5;

  unint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

void partial apply for closure #1 in closure #1 in Double.init<A>(_:)()
{
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(void *a1@<X0>, void *a2@<X8>)
{
}

void *closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1, a2);
}

uint64_t OUTLINED_FUNCTION_0_16(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 2;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_3_16@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = v2 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  *(void *)(a1 + 8) = (a2 - 32) | 0x8000000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_5_11(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t OUTLINED_FUNCTION_6_14()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

void OUTLINED_FUNCTION_9_12(_DWORD *a1@<X8>)
{
  *a1 = v1;
}

void OUTLINED_FUNCTION_10_9(float *a1@<X8>, float a2@<S0>)
{
  *a1 = a2;
}

void OUTLINED_FUNCTION_11_9(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

uint64_t OUTLINED_FUNCTION_12_10(uint64_t a1)
{
  return *(void *)a1;
}

void OUTLINED_FUNCTION_15_6(char *a1@<X8>)
{
  if (v1) {
    char v2 = 0;
  }
  else {
    char v2 = 1;
  }
  *a1 = v2;
}

uint64_t OUTLINED_FUNCTION_17_3()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_18_5(unsigned __int8 *a1)
{
  return *a1;
}

float OUTLINED_FUNCTION_19_4(uint64_t a1)
{
  return *(float *)a1;
}

double OUTLINED_FUNCTION_20_5(uint64_t a1)
{
  return *(double *)a1;
}

uint64_t OUTLINED_FUNCTION_21_4(unsigned int *a1)
{
  return *a1;
}

uint64_t dispatch thunk of Plugin.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PluginCapabilityExposing.advertisedCapabilities()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PluginCapabilityExposing.exposedCapabilities()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of PluginCapabilityExposing.get(capability:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of PluginCapabilityExclusiveRegistration.exclusiveRegistration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t static IdleTracker.defaultTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultTimeout != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static IdleTracker.defaultTimeout);
  char v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

void (*static IdleTracker.defaultAction.getter())()
{
  return implicit closure #1 in variable initialization expression of static IdleTracker.defaultAction;
}

void IdleTracker.__allocating_init(name:queue:timeout:timeoutAction:)()
{
}

void IdleTracker.init(name:queue:timeout:timeoutAction:)()
{
  OUTLINED_FUNCTION_10_10();
  uint64_t v34 = v1;
  uint64_t v35 = v2;
  uint64_t v33 = v3;
  uint64_t v5 = v4;
  BOOL v7 = v6;
  uint64_t v9 = v8;
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  OUTLINED_FUNCTION_1_5();
  MEMORY[0x1F4188790](v10, v11);
  OUTLINED_FUNCTION_6_10();
  type metadata accessor for OS_dispatch_queue.Attributes();
  OUTLINED_FUNCTION_18_1();
  MEMORY[0x1F4188790](v12, v13);
  OUTLINED_FUNCTION_15_7();
  uint64_t v14 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v14 - 8, v15);
  OUTLINED_FUNCTION_5_12();
  *(void *)(v0 + OBJC_IVAR___SUIdleTracker_timer) = 0;
  *(void *)(v0 + OBJC_IVAR___SUIdleTracker_refs) = MEMORY[0x1E4FBC868];
  unsigned __int8 v16 = (uint64_t *)(v0 + OBJC_IVAR___SUIdleTracker_name);
  uint64_t v31 = v9;
  uint64_t *v16 = v9;
  v16[1] = (uint64_t)v7;
  uint64_t v17 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  unsigned __int8 v18 = (char *)OUTLINED_FUNCTION_4_14(v17);
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = v9;
  v19._object = v7;
  String.append(_:)(v19);
  static DispatchQoS.default.getter();
  v37[0] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  id v32 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  _sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OUTLINED_FUNCTION_18_6();
  v20();
  *(void *)&v18[OBJC_IVAR___SUIdleTracker_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v21 = &v18[OBJC_IVAR___SUIdleTracker_timeout];
  uint64_t v22 = type metadata accessor for DispatchTimeInterval();
  OUTLINED_FUNCTION_3_17();
  uint64_t v24 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v21, v33, v22);
  uint64_t v25 = &v18[OBJC_IVAR___SUIdleTracker_timeoutAction];
  *(void *)uint64_t v25 = v34;
  *((void *)v25 + 1) = v35;
  OUTLINED_FUNCTION_7_12();
  swift_retain();
  v26._uint64_t countAndFlagsBits = v31;
  v26._object = v7;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  uint64_t v27 = type metadata accessor for DeadlockDetectingLock();
  OUTLINED_FUNCTION_16_7();
  char v28 = DeadlockDetectingLock.init(name:wrapping:deadlockAction:)(v37[0], v37[1], (uint64_t)v37, (uint64_t)closure #1 in variable initialization expression of static DeadlockDetectingLock.defaultDeadlockAction, 0);
  uint64_t v29 = &v18[OBJC_IVAR___SUIdleTracker_lock];
  *((void *)v29 + 3) = v27;
  *((void *)v29 + 4) = &protocol witness table for DeadlockDetectingLock;
  *(void *)uint64_t v29 = v28;

  v36.receiver = v18;
  v36.super_class = (Class)type metadata accessor for IdleTracker();
  id v30 = objc_msgSendSuper2(&v36, sel_init);
  IdleTracker.scheduleTimerIfIdle()();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v33, v22);
  OUTLINED_FUNCTION_12_11();
}

void IdleTracker.__allocating_init(lock:name:queue:timeout:timeoutAction:)()
{
  id v1 = objc_allocWithZone(v0);
  IdleTracker.init(lock:name:queue:timeout:timeoutAction:)();
}

void IdleTracker.init(lock:name:queue:timeout:timeoutAction:)()
{
  OUTLINED_FUNCTION_10_10();
  uint64_t v30 = v1;
  uint64_t v31 = v2;
  uint64_t v28 = v3;
  uint64_t v29 = v4;
  BOOL v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  OUTLINED_FUNCTION_1_5();
  MEMORY[0x1F4188790](v11, v12);
  OUTLINED_FUNCTION_12_1();
  type metadata accessor for OS_dispatch_queue.Attributes();
  OUTLINED_FUNCTION_18_1();
  MEMORY[0x1F4188790](v13, v14);
  OUTLINED_FUNCTION_12_1();
  uint64_t v15 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v15 - 8, v16);
  OUTLINED_FUNCTION_5_12();
  *(void *)&v0[OBJC_IVAR___SUIdleTracker_timer] = 0;
  *(void *)&v0[OBJC_IVAR___SUIdleTracker_refs] = MEMORY[0x1E4FBC868];
  uint64_t v17 = (uint64_t *)&v0[OBJC_IVAR___SUIdleTracker_name];
  *uint64_t v17 = v10;
  v17[1] = (uint64_t)v8;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  strcpy(v33, "IdleTracker:");
  char v34 = 0;
  __int16 v35 = -5120;
  unsigned __int8 v18 = v0;
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = v10;
  v19._object = v8;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  static DispatchQoS.default.getter();
  *(void *)uint64_t v33 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  id v27 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  _sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OUTLINED_FUNCTION_18_6();
  v20();
  *(void *)&v18[OBJC_IVAR___SUIdleTracker_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v21 = &v18[OBJC_IVAR___SUIdleTracker_timeout];
  uint64_t v22 = type metadata accessor for DispatchTimeInterval();
  OUTLINED_FUNCTION_3_17();
  uint64_t v24 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v21, v28, v22);
  uint64_t v25 = &v18[OBJC_IVAR___SUIdleTracker_timeoutAction];
  *(void *)uint64_t v25 = v29;
  *((void *)v25 + 1) = v31;
  outlined init with copy of Transforming(v30, (uint64_t)&v18[OBJC_IVAR___SUIdleTracker_lock]);
  swift_retain();

  v32.receiver = v18;
  v32.super_class = (Class)type metadata accessor for IdleTracker();
  id v26 = objc_msgSendSuper2(&v32, sel_init);
  IdleTracker.scheduleTimerIfIdle()();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v28, v22);
  __swift_destroy_boxed_opaque_existential_1(v30);
  OUTLINED_FUNCTION_12_11();
}

uint64_t static IdleTracker.defaultTimeoutSeconds.getter()
{
  return 180;
}

void IdleTracker.__allocating_init(name:queue:timeoutSeconds:timeoutAction:)()
{
}

void IdleTracker.init(name:queue:timeoutSeconds:timeoutAction:)()
{
  OUTLINED_FUNCTION_10_10();
  uint64_t v30 = v1;
  uint64_t v31 = v2;
  uint64_t v29 = v3;
  uint64_t v5 = v4;
  BOOL v7 = v6;
  uint64_t v9 = v8;
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  OUTLINED_FUNCTION_1_5();
  MEMORY[0x1F4188790](v10, v11);
  OUTLINED_FUNCTION_12_1();
  type metadata accessor for OS_dispatch_queue.Attributes();
  OUTLINED_FUNCTION_18_1();
  MEMORY[0x1F4188790](v12, v13);
  OUTLINED_FUNCTION_12_1();
  uint64_t v14 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v14 - 8, v15);
  OUTLINED_FUNCTION_15_7();
  *(void *)(v0 + OBJC_IVAR___SUIdleTracker_timer) = 0;
  *(void *)(v0 + OBJC_IVAR___SUIdleTracker_refs) = MEMORY[0x1E4FBC868];
  uint64_t v16 = (uint64_t *)(v0 + OBJC_IVAR___SUIdleTracker_name);
  uint64_t *v16 = v9;
  v16[1] = (uint64_t)v7;
  uint64_t v17 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  unsigned __int8 v18 = (char *)OUTLINED_FUNCTION_4_14(v17);
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = v9;
  v19._object = v7;
  String.append(_:)(v19);
  static DispatchQoS.default.getter();
  v33[0] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  id v28 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  _sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OUTLINED_FUNCTION_18_6();
  v20();
  *(void *)&v18[OBJC_IVAR___SUIdleTracker_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v18[OBJC_IVAR___SUIdleTracker_timeout] = v29;
  type metadata accessor for DispatchTimeInterval();
  OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_18_6();
  v21();
  uint64_t v22 = &v18[OBJC_IVAR___SUIdleTracker_timeoutAction];
  *(void *)uint64_t v22 = v30;
  *((void *)v22 + 1) = v31;
  OUTLINED_FUNCTION_7_12();
  swift_retain();
  v23._uint64_t countAndFlagsBits = v9;
  v23._object = v7;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  uint64_t v24 = type metadata accessor for DeadlockDetectingLock();
  OUTLINED_FUNCTION_16_7();
  uint64_t v25 = DeadlockDetectingLock.init(name:wrapping:deadlockAction:)(v33[0], v33[1], (uint64_t)v33, (uint64_t)closure #1 in variable initialization expression of static DeadlockDetectingLock.defaultDeadlockAction, 0);
  id v26 = &v18[OBJC_IVAR___SUIdleTracker_lock];
  *((void *)v26 + 3) = v24;
  *((void *)v26 + 4) = &protocol witness table for DeadlockDetectingLock;
  *(void *)id v26 = v25;

  v32.receiver = v18;
  v32.super_class = (Class)type metadata accessor for IdleTracker();
  id v27 = objc_msgSendSuper2(&v32, sel_init);
  IdleTracker.scheduleTimerIfIdle()();

  swift_release();
  OUTLINED_FUNCTION_12_11();
}

uint64_t IdleTracker.__allocating_init(name:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return IdleTracker.init(name:)(a1, a2);
}

uint64_t IdleTracker.init(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  OUTLINED_FUNCTION_1_5();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8, v9);
  OUTLINED_FUNCTION_6_10();
  uint64_t ObjectType = swift_getObjectType();
  if (one-time initialization token for defaultTimeout != -1) {
    swift_once();
  }
  uint64_t v11 = __swift_project_value_buffer(v5, (uint64_t)static IdleTracker.defaultTimeout);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v2, v11, v5);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void (*)(), void))(ObjectType + 136))(a1, a2, 0, v2, implicit closure #1 in variable initialization expression of static IdleTracker.defaultAction, 0);
  swift_deallocPartialClassInstance();
  return v12;
}

uint64_t IdleTracker.idle.getter()
{
  OUTLINED_FUNCTION_11_10(OBJC_IVAR___SUIdleTracker_lock, v2, v3, v4, v5, v6);
  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  OUTLINED_FUNCTION_17_4();
  OUTLINED_FUNCTION_6_15();
  v0();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v7;
}

uint64_t closure #1 in IdleTracker.idle.getter@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3 = a1 + OBJC_IVAR___SUIdleTracker_refs;
  uint64_t result = swift_beginAccess();
  *a2 = *(void *)(*(void *)v3 + 16) == 0;
  return result;
}

uint64_t IdleTracker.count.getter()
{
  OUTLINED_FUNCTION_11_10(OBJC_IVAR___SUIdleTracker_lock, v2, v3, v4, v5, v6);
  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  OUTLINED_FUNCTION_17_4();
  OUTLINED_FUNCTION_6_15();
  v0();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v7;
}

uint64_t closure #1 in IdleTracker.count.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1 + OBJC_IVAR___SUIdleTracker_refs;
  uint64_t result = swift_beginAccess();
  *a2 = *(void *)(*(void *)v3 + 16);
  return result;
}

uint64_t static IdleTracker.defaultTrackingName.getter()
{
  return OUTLINED_FUNCTION_19_5();
}

uint64_t IdleTracker.track(name:)(uint64_t a1, uint64_t a2)
{
  void (*v7)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t *@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void v16[3];
  uint64_t v17;
  uint64_t v18;

  outlined init with copy of Transforming(v2 + OBJC_IVAR___SUIdleTracker_lock, (uint64_t)v16);
  uint64_t v5 = v17;
  uint64_t v6 = v18;
  __swift_project_boxed_opaque_existential_1(v16, v17);
  uint64_t v12 = v2;
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  uint64_t v7 = *(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t *@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t))(v6 + 24);
  uint64_t v8 = type metadata accessor for AnyCancellable();
  v7(&v15, partial apply for closure #1 in IdleTracker.track(name:), &v11, v8, v5, v6);
  uint64_t v9 = v15;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return v9;
}

uint64_t closure #1 in IdleTracker.track(name:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v39 = a3;
  uint64_t v38 = a2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v10 = MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v14 = (char *)v31 - v13;
  if (*(void *)&a1[OBJC_IVAR___SUIdleTracker_timer])
  {
    objc_super v36 = a4;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.logger);
    uint64_t v37 = a1;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unsigned __int8 v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      v40[0] = v33;
      uint64_t v34 = v6;
      __int16 v35 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
      *(_DWORD *)unsigned __int8 v18 = 136315138;
      v31[1] = v18 + 4;
      objc_super v32 = v18;
      Swift::String v19 = v37;
      uint64_t v20 = *(void *)&v37[OBJC_IVAR___SUIdleTracker_name];
      unint64_t v21 = *(void *)&v37[OBJC_IVAR___SUIdleTracker_name + 8];
      swift_bridgeObjectRetain();
      v40[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v40);
      uint64_t v11 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v6 = v34;
      swift_bridgeObjectRelease();
      os_log_type_t v22 = v17;
      Swift::String v23 = v32;
      _os_log_impl(&dword_1C9E4C000, v16, v22, "IdleTracker:%s detects active condition; cancelling existing timer",
        v32,
        0xCu);
      uint64_t v24 = v33;
      swift_arrayDestroy();
      MEMORY[0x1CB792FA0](v24, -1, -1);
      MEMORY[0x1CB792FA0](v23, -1, -1);
    }
    else
    {
    }
    a4 = v36;
    IdleTracker.timer.setter(0);
  }
  UUID.init()();
  swift_beginAccess();
  uint64_t v25 = v39;
  swift_bridgeObjectRetain();
  specialized Dictionary._Variant.setValue(_:forKey:)(v38, v25, (uint64_t)v14);
  swift_endAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v14, v6);
  unint64_t v26 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v27 + v26, v11, v6);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  id v28 = a1;
  uint64_t v29 = AnyCancellable.init(_:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  *a4 = v29;
  return result;
}

uint64_t IdleTracker.track()()
{
  uint64_t v1 = OUTLINED_FUNCTION_19_5();
  uint64_t v2 = (void *)MEMORY[0x1CB7919D0](v1);
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();

  return v3;
}

id IdleTracker.track(name:)()
{
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))(v1);
  swift_bridgeObjectRelease();
  uint64_t v3 = (objc_class *)type metadata accessor for IdleTrackerActivity();
  uint64_t v4 = (char *)objc_allocWithZone(v3);
  *(void *)&v4[OBJC_IVAR___SUIdleTrackerActivity_cancellable] = v2;
  v6.receiver = v4;
  v6.super_class = v3;
  return objc_msgSendSuper2(&v6, sel_init);
}

id IdleTrackerActivity.__allocating_init(cancellable:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR___SUIdleTrackerActivity_cancellable] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t one-time initialization function for defaultTimeout()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  __swift_allocate_value_buffer(v0, static IdleTracker.defaultTimeout);
  *(void *)__swift_project_value_buffer(v0, (uint64_t)static IdleTracker.defaultTimeout) = 180;
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 - 8) + 104);

  return v1();
}

void implicit closure #1 in variable initialization expression of static IdleTracker.defaultAction()
{
}

uint64_t type metadata accessor for IdleTracker()
{
  uint64_t result = type metadata singleton initialization cache for IdleTracker;
  if (!type metadata singleton initialization cache for IdleTracker) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void static IdleTracker.exitProcess()()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.logger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1C9E4C000, v1, v2, "IdleTracker exiting process after idle timeout.", v3, 2u);
    MEMORY[0x1CB792FA0](v3, -1, -1);
  }

  exit(0);
}

uint64_t IdleTracker.dump()()
{
  void (*v3)(uint64_t *__return_ptr, uint64_t (*)@<X0>(void *@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void v11[3];
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_11_10(OBJC_IVAR___SUIdleTracker_lock, v7[0], v7[1], v8, v9, v10);
  uint64_t v1 = v12;
  uint64_t v2 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  uint64_t v8 = v0;
  uint64_t v3 = *(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(void *@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t))(v2 + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  v3(&v10, partial apply for closure #1 in IdleTracker.dump(), v7, v4, v1, v2);
  objc_super v5 = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return v5;
}

uint64_t closure #1 in IdleTracker.dump()@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t IdleTracker.untrack(_:)(uint64_t a1)
{
  OUTLINED_FUNCTION_11_10(OBJC_IVAR___SUIdleTracker_lock, v6[0], v6[1], v7, v8, v9);
  uint64_t v3 = v11;
  uint64_t v4 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  uint64_t v7 = v1;
  uint64_t v8 = a1;
  (*(void (**)(void (*)(), uint64_t *, uint64_t, uint64_t, uint64_t))(v4 + 24))(partial apply for closure #1 in IdleTracker.untrack(_:), v6, MEMORY[0x1E4FBC848] + 8, v3, v4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

void closure #1 in IdleTracker.untrack(_:)()
{
}

void IdleTracker.scheduleTimerIfIdle()()
{
  OUTLINED_FUNCTION_10_10();
  uint64_t v2 = v0;
  type metadata accessor for DispatchTime();
  OUTLINED_FUNCTION_1_5();
  v89 = v4;
  uint64_t v90 = v3;
  uint64_t v6 = MEMORY[0x1F4188790](v3, v5);
  uint64_t v87 = (char *)v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v88 = (char *)v75 - v9;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_1_5();
  uint64_t v85 = v11;
  uint64_t v86 = v10;
  MEMORY[0x1F4188790](v10, v12);
  OUTLINED_FUNCTION_12_1();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_1_5();
  uint64_t v84 = v17;
  MEMORY[0x1F4188790](v18, v19);
  OUTLINED_FUNCTION_12_1();
  uint64_t v22 = v21 - v20;
  type metadata accessor for OS_dispatch_source.TimerFlags();
  OUTLINED_FUNCTION_1_5();
  uint64_t v82 = v23;
  MEMORY[0x1F4188790](v24, v25);
  OUTLINED_FUNCTION_5_12();
  uint64_t v26 = type metadata accessor for DispatchTimeInterval();
  OUTLINED_FUNCTION_1_5();
  uint64_t v28 = v27;
  uint64_t v31 = MEMORY[0x1F4188790](v29, v30);
  uint64_t v33 = (void *)((char *)v75 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v31, v34);
  objc_super v36 = (char *)v75 - v35;
  id v83 = v2;
  uint64_t v37 = &v2[OBJC_IVAR___SUIdleTracker_refs];
  swift_beginAccess();
  if (!*(void *)(*(void *)v37 + 16))
  {
    v75[0] = v1;
    v75[1] = v22;
    uint64_t v80 = v36;
    uint64_t v76 = v33;
    uint64_t v77 = v15;
    uint64_t v78 = v16;
    uint64_t v81 = v28;
    uint64_t v79 = v26;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.logger);
    uint64_t v39 = (char *)v83;
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.info.getter();
    int v42 = v41;
    BOOL v43 = os_log_type_enabled(v40, v41);
    uint64_t v45 = (uint64_t)v80;
    uint64_t v44 = v81;
    if (v43)
    {
      uint64_t v46 = swift_slowAlloc();
      LODWORD(v83) = v42;
      uint64_t v47 = v46;
      uint64_t v48 = swift_slowAlloc();
      v92[0] = v48;
      *(_DWORD *)uint64_t v47 = 136315394;
      uint64_t v50 = *(void *)&v39[OBJC_IVAR___SUIdleTracker_name];
      unint64_t v49 = *(void *)&v39[OBJC_IVAR___SUIdleTracker_name + 8];
      swift_bridgeObjectRetain();
      uint64_t v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v49, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v47 + 12) = 2080;
      (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v45, &v39[OBJC_IVAR___SUIdleTracker_timeout], v79);
      uint64_t v51 = String.init<A>(describing:)();
      uint64_t v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C9E4C000, v40, (os_log_type_t)v83, "IdleTracker:%s detects idle condition; scheduling timer for %s",
        (uint8_t *)v47,
        0x16u);
      swift_arrayDestroy();
      MEMORY[0x1CB792FA0](v48, -1, -1);
      MEMORY[0x1CB792FA0](v47, -1, -1);
    }
    else
    {
    }
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for OS_dispatch_source);
    v92[0] = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, MEMORY[0x1E4FBCC70]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
    _sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGSayxGSTsWlTm_0(&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    static OS_dispatch_source.makeTimerSource(flags:queue:)();
    OUTLINED_FUNCTION_5_4();
    v55(v53, v54);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v57 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v92[4] = (uint64_t)partial apply for closure #1 in IdleTracker.scheduleTimerIfIdle();
    v92[5] = v57;
    v92[0] = MEMORY[0x1E4F143A8];
    v92[1] = 1107296256;
    v92[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v92[3] = (uint64_t)&block_descriptor_1;
    uint64_t v58 = _Block_copy(v92);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    _Block_release(v58);
    OUTLINED_FUNCTION_5_4();
    v61(v59, v60);
    OUTLINED_FUNCTION_5_4();
    v64(v62, v63);
    swift_release();
    swift_release();
    unint64_t v65 = v87;
    static DispatchTime.now()();
    uint64_t v66 = v88;
    DispatchTime.advanced(by:)();
    uint64_t v67 = v90;
    uint64_t v68 = (void (*)(char *, uint64_t))*((void *)v89 + 1);
    v68(v65, v90);
    v89 = v39;
    uint64_t v69 = (uint64_t)v80;
    default argument 1 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)((uint64_t)v80);
    uint64_t v70 = v76;
    default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v76);
    MEMORY[0x1CB791FA0](v66, v69, v70, ObjectType);
    uint64_t v71 = *(void (**)(void *, uint64_t))(v81 + 8);
    uint64_t v72 = v70;
    uint64_t v73 = v79;
    v71(v72, v79);
    v71((void *)v69, v73);
    v68(v66, v67);
    OS_dispatch_source.resume()();
    uint64_t v74 = swift_unknownObjectRetain();
    IdleTracker.timer.setter(v74);
    swift_unknownObjectRelease();
  }
  OUTLINED_FUNCTION_12_11();
}

uint64_t partial apply for closure #1 in IdleTracker.idle.getter@<X0>(BOOL *a1@<X8>)
{
  return closure #1 in IdleTracker.idle.getter(*(void *)(v1 + 16), a1);
}

uint64_t partial apply for closure #1 in IdleTracker.count.getter@<X0>(void *a1@<X8>)
{
  return closure #1 in IdleTracker.count.getter(*(void *)(v1 + 16), a1);
}

uint64_t partial apply for closure #1 in IdleTracker.track(name:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in IdleTracker.track(name:)(*(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t type metadata accessor for IdleTrackerActivity()
{
  return self;
}

void closure #1 in IdleTracker.scheduleTimerIfIdle()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1CB7930A0](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    IdleTracker.invokeTimeoutAction()();
  }
}

uint64_t default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t default argument 1 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x1E4FBCAD0];
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  uint64_t v2 = *MEMORY[0x1E4FBCAA8];
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t IdleTracker.invokeTimeoutAction()()
{
  OUTLINED_FUNCTION_11_10(OBJC_IVAR___SUIdleTracker_lock, v4[0], v4[1], v5, v6, v7);
  uint64_t v1 = v9;
  uint64_t v2 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  uint64_t v5 = v0;
  (*(void (**)(uint64_t (*)(), uint64_t *, uint64_t, uint64_t, uint64_t))(v2 + 24))(partial apply for closure #1 in IdleTracker.invokeTimeoutAction(), v4, MEMORY[0x1E4FBC848] + 8, v1, v2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t closure #1 in IdleTracker.invokeTimeoutAction()(uint64_t a1)
{
  uint64_t v2 = a1 + OBJC_IVAR___SUIdleTracker_refs;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)v2 + 16)) {
    return (*(uint64_t (**)(uint64_t))(a1 + OBJC_IVAR___SUIdleTracker_timeoutAction))(result);
  }
  return result;
}

uint64_t IdleTracker.timer.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR___SUIdleTracker_timer) = a1;
  return swift_unknownObjectRelease();
}

id IdleTracker.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void IdleTracker.init()()
{
}

id IdleTracker.__deallocating_deinit()
{
  return IdleTracker.__deallocating_deinit(0, type metadata accessor for IdleTracker);
}

id IdleTrackerActivity.init(cancellable:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR___SUIdleTrackerActivity_cancellable] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for IdleTrackerActivity();
  return objc_msgSendSuper2(&v3, sel_init);
}

void IdleTrackerActivity.init()()
{
}

id IdleTrackerActivity.__deallocating_deinit(uint64_t a1)
{
  return IdleTracker.__deallocating_deinit(a1, type metadata accessor for IdleTrackerActivity);
}

id IdleTracker.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t partial apply for closure #1 in IdleTracker.dump()@<X0>(void *a1@<X8>)
{
  return closure #1 in IdleTracker.dump()(a1);
}

uint64_t ObjC metadata update function for IdleTracker()
{
  return type metadata accessor for IdleTracker();
}

uint64_t type metadata completion function for IdleTracker()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for IdleTracker(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IdleTracker);
}

uint64_t dispatch thunk of IdleTracker.__allocating_init(name:queue:timeout:timeoutAction:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of IdleTracker.__allocating_init(lock:name:queue:timeout:timeoutAction:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of IdleTracker.__allocating_init(name:queue:timeoutSeconds:timeoutAction:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of IdleTracker.idle.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of IdleTracker.count.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of IdleTracker.track(name:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

{
  void *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of IdleTracker.track()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of IdleTracker.dump()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t method lookup function for IdleTrackerActivity(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IdleTrackerActivity);
}

uint64_t dispatch thunk of IdleTrackerActivity.__allocating_init(cancellable:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t partial apply for closure #1 in IdleTracker.invokeTimeoutAction()()
{
  return closure #1 in IdleTracker.invokeTimeoutAction()(*(void *)(v0 + 16));
}

void partial apply for closure #1 in IdleTracker.untrack(_:)()
{
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)();
  char v6 = v5;
  swift_bridgeObjectRelease();
  if (v6)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    Swift::Int v9 = *(void *)(v8 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<CodingUserInfoKey, Any>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v9);
    type metadata accessor for CodingUserInfoKey();
    OUTLINED_FUNCTION_18_1();
    OUTLINED_FUNCTION_5_4();
    v10();
    outlined init with take of Any((_OWORD *)(*(void *)(v12 + 56) + 32 * v4), a1);
    _NativeDictionary._delete(at:)();
    *uint64_t v2 = v12;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)()
{
  unint64_t v1 = v0;
  swift_bridgeObjectRetain();
  unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)();
  char v4 = v3;
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0) {
    return 0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *v1;
  uint64_t v6 = *v1;
  uint64_t *v1 = 0x8000000000000000;
  Swift::Int v7 = *(void *)(v6 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UUID, String>);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v7);
  uint64_t v8 = *(void *)(v12 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v2, v9);
  uint64_t v10 = *(void *)(*(void *)(v12 + 56) + 16 * v2);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  _NativeDictionary._delete(at:)();
  uint64_t *v1 = v12;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1C9E926FC()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_1C9E92744()
{
  uint64_t v1 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_5();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 24) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);

  return MEMORY[0x1F4186498](v0, v8, v9);
}

uint64_t partial apply for closure #1 in closure #1 in IdleTracker.track(name:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  return IdleTracker.untrack(_:)(v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t type metadata accessor for OS_dispatch_queue(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1C9E92888()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for closure #1 in IdleTracker.scheduleTimerIfIdle()()
{
  closure #1 in IdleTracker.scheduleTimerIfIdle()(v0);
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGSayxGSTsWlTm_0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id OUTLINED_FUNCTION_4_14(uint64_t a1)
{
  *(void *)(v2 - 208) = a1;
  strcpy((char *)(v2 - 128), "IdleTracker:");
  *(unsigned char *)(v2 - 115) = 0;
  *(_WORD *)(v2 - 114) = -5120;
  return v1;
}

void OUTLINED_FUNCTION_7_12()
{
  *(void *)(v0 - 128) = 0x726F66206B636F6CLL;
  *(void *)(v0 - 120) = 0xE900000000000020;
}

id OUTLINED_FUNCTION_8_15()
{
  return objc_allocWithZone(v0);
}

uint64_t OUTLINED_FUNCTION_9_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_10@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  return outlined init with copy of Transforming(v6 + a1, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_16_7()
{
  *(_OWORD *)(v0 - 128) = 0u;
  *(_OWORD *)(v0 - 112) = 0u;
  *(void *)(v0 - 96) = 0;
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_19_5()
{
  return 0x756F6D796E6F6E61;
}

uint64_t one-time initialization function for tailspinRequestQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v7 - 8, v8);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.userInitiated.getter();
  v10[1] = 0;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  dispatch thunk of OptionSet.init(rawValue:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E4FBCC58], v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static TailSpinManager.tailspinRequestQueue = result;
  return result;
}

unint64_t static TailSpinManager.tailspinDefaultDirectory.getter()
{
  return 0xD00000000000001FLL;
}

void static TailSpinManager.createTailSpinFile(fileName:suiteName:options:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, Class isa, void (*a6)(void, void, void), uint64_t a7)
{
  if (!IsAppleInternalBuild())
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.logger);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v23, v24)) {
      goto LABEL_22;
    }
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    uint64_t v26 = "TailSpinManager#createTailSpinFile refusing to generate tailspin file";
    goto LABEL_21;
  }
  uint64_t v14 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v14) {
    goto LABEL_13;
  }
  uint64_t v15 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v15 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v15)
  {
LABEL_13:
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.logger);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v23, v24)) {
      goto LABEL_22;
    }
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    uint64_t v26 = "TailSpinManager#createTailSpinFile invalid param(s) passed in";
LABEL_21:
    _os_log_impl(&dword_1C9E4C000, v23, v24, v26, v25, 2u);
    MEMORY[0x1CB792FA0](v25, -1, -1);
LABEL_22:

    a6(0, 0, 0);
    return;
  }
  id v16 = objc_msgSend(objc_allocWithZone((Class)TailSpinHelper), sel_init);
  uint64_t v17 = (void *)MEMORY[0x1CB7919D0](a1, a2);
  uint64_t v18 = (void *)MEMORY[0x1CB7919D0](a3, a4);
  if (isa) {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  if (one-time initialization token for tailspinRequestQueue != -1) {
    swift_once();
  }
  uint64_t v19 = static TailSpinManager.tailspinRequestQueue;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a6;
  *(void *)(v20 + 24) = a7;
  v28[4] = partial apply for closure #1 in static TailSpinManager.createTailSpinFile(fileName:suiteName:options:completion:);
  v28[5] = v20;
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 1107296256;
  void v28[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed String?) -> ();
  v28[3] = &block_descriptor_2;
  uint64_t v21 = _Block_copy(v28);
  swift_retain();
  swift_release();
  objc_msgSend(v16, sel_dumpTailSpinOutputToFile_suiteName_options_queue_handler_, v17, v18, isa, v19, v21);
  _Block_release(v21);
}

uint64_t closure #1 in static TailSpinManager.createTailSpinFile(fileName:suiteName:options:completion:)(char a1, uint64_t a2, unint64_t a3, void (*a4)(void, uint64_t, unint64_t))
{
  if (a3) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 4271950;
  }
  if (a3) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = 0xE300000000000000;
  }
  uint64_t v8 = one-time initialization token for logger;
  swift_bridgeObjectRetain();
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.logger);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v15 = v13;
    *(_DWORD *)uint64_t v12 = 67109378;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 8) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C9E4C000, v10, v11, "TailSpinManager#createTailSpinFile status: %{BOOL}d, path: %s", (uint8_t *)v12, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1CB792FA0](v13, -1, -1);
    MEMORY[0x1CB792FA0](v12, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  a4(a1 & 1, v6, v7);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C9E93280()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in static TailSpinManager.createTailSpinFile(fileName:suiteName:options:completion:)(char a1, uint64_t a2, unint64_t a3)
{
  return closure #1 in static TailSpinManager.createTailSpinFile(fileName:suiteName:options:completion:)(a1, a2, a3, *(void (**)(void, uint64_t, unint64_t))(v3 + 16));
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed String?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  if (a3)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  swift_retain();
  v4(a2, v5, v7);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

void static TailSpinManager.deleteTailSpinFiles(suiteName:)(uint64_t a1, uint64_t a2)
{
  if (IsAppleInternalBuild())
  {
    id v4 = objc_msgSend(objc_allocWithZone((Class)TailSpinHelper), sel_init);
    oslog = MEMORY[0x1CB7919D0](a1, a2);
    if (one-time initialization token for tailspinRequestQueue != -1) {
      swift_once();
    }
    objc_msgSend(v4, sel_clearDirectory_queue_);
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.logger);
    oslog = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1C9E4C000, oslog, v6, "TailSpinManager#createTailSpinFile refusing to delete tailspin files", v7, 2u);
      MEMORY[0x1CB792FA0](v7, -1, -1);
    }
  }
}

ValueMetadata *type metadata accessor for TailSpinManager()
{
  return &type metadata for TailSpinManager;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

uint64_t WeakBox.__allocating_init(_:)()
{
  uint64_t v0 = swift_allocObject();
  WeakBox.init(_:)();
  return v0;
}

uint64_t key path setter for WeakBox.value : <A>WeakBox<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 104);
  uint64_t v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t WeakBox.value.getter()
{
  swift_beginAccess();
  return MEMORY[0x1CB7930A0](v0 + 16);
}

uint64_t WeakBox.value.setter()
{
  return swift_unknownObjectRelease();
}

void (*WeakBox.value.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = MEMORY[0x1CB7930A0](v1 + 16);
  return WeakBox.value.modify;
}

void WeakBox.value.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t WeakBox.init(_:)()
{
  swift_unknownObjectWeakInit();
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t WeakBox.deinit()
{
  swift_unknownObjectWeakDestroy();
  return v0;
}

uint64_t WeakBox.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t sub_1C9E93830@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_1C9E93880()
{
  return 8;
}

void *sub_1C9E9388C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata completion function for WeakBox()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for WeakBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for WeakBox(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for WeakBox);
}

uint64_t dispatch thunk of WeakBox.value.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of WeakBox.value.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of WeakBox.value.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of WeakBox.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

void specialized static Logger.withSignpost<A>(name:log:completion:)()
{
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_12_12(v2, v3, v4);
  OUTLINED_FUNCTION_0_5();
  MEMORY[0x1F4188790](v5, v6);
  if (OUTLINED_FUNCTION_8_16())
  {
    v0;
    OSSignpostID.init(log:)();
    static os_signpost_type_t.begin.getter();
    OUTLINED_FUNCTION_8_11();
    OUTLINED_FUNCTION_2_19();
    v1();
    static os_signpost_type_t.end.getter();
    OUTLINED_FUNCTION_8_11();
    OUTLINED_FUNCTION_6_16();
    v7();
  }
  else
  {
    OUTLINED_FUNCTION_2_19();
    v1();
  }
  OUTLINED_FUNCTION_9_3();
}

{
  void (*v0)(uint64_t);
  void (*v1)(uint64_t);
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_6_5();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_0_5();
  MEMORY[0x1F4188790](v4, v5);
  if (OUTLINED_FUNCTION_8_16())
  {
    v3;
    OSSignpostID.init(log:)();
    static os_signpost_type_t.begin.getter();
    OUTLINED_FUNCTION_5_13();
    OUTLINED_FUNCTION_2_19();
    v1(v6);
    static os_signpost_type_t.end.getter();
    OUTLINED_FUNCTION_5_13();
    uint64_t v7 = OUTLINED_FUNCTION_30_1();
    v8(v7);
  }
  else
  {
    OUTLINED_FUNCTION_2_19();
    v1(v9);
  }
  OUTLINED_FUNCTION_9_3();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v40 = a5;
  uint64_t v41 = a8;
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  uint64_t v39 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1, a2);
  unint64_t v52 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v45 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x1F4188790](AssociatedTypeWitness, v11);
  uint64_t v14 = (char *)&v37 - v13;
  uint64_t v15 = a4;
  MEMORY[0x1F4188790](v12, v16);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(v19 - 8);
  uint64_t v43 = v19;
  uint64_t v21 = MEMORY[0x1F4188790](v19, v20);
  uint64_t v38 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21, v23);
  uint64_t v25 = (char *)&v37 - v24;
  uint64_t v26 = dispatch thunk of Collection.count.getter();
  if (!v26) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v27 = v26;
  uint64_t v55 = MEMORY[0x1CB792210](v15);
  uint64_t v44 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v27);
  uint64_t v48 = a6;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v27 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v46 = (void (**)(char *))(v45 + 2);
    uint64_t v47 = v18;
    ++v45;
    while (1)
    {
      uint64_t v29 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v30 = v14;
      uint64_t v31 = v14;
      uint64_t v32 = AssociatedTypeWitness;
      (*v46)(v30);
      v29(v54, 0);
      uint64_t v33 = v53;
      v50(v31, v52);
      if (v33) {
        break;
      }
      uint64_t v53 = 0;
      (*v45)(v31, v32);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      --v27;
      uint64_t v14 = v31;
      if (!v27)
      {
        uint64_t v34 = v42;
        uint64_t v35 = v43;
        objc_super v36 = v38;
        (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v38, v25, v43);
        _expectEnd<A>(of:is:)();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v35);
        return v55;
      }
    }
    (*v45)(v31, v32);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v25, v43);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v41, v52, v40);
  }
  return result;
}

uint64_t key path setter for PluginCatalog.packageCache : PluginCatalog(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 96);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t (*PluginCatalog.packageCache.modify())()
{
  return SiriEnvironmentStorage.storage.modify;
}

uint64_t PluginCatalog.__allocating_init(finder:)(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v1 + 120))(v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v6;
}

uint64_t PluginCatalog.__allocating_init(packageCache:)()
{
  uint64_t result = OUTLINED_FUNCTION_36_0();
  *(void *)(result + 16) = v0;
  return result;
}

uint64_t PluginCatalog.init(packageCache:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t PluginCatalog.__allocating_init(packages:)()
{
  OUTLINED_FUNCTION_36_0();
  uint64_t v1 = OUTLINED_FUNCTION_14_9();
  PluginCatalog.init(packages:)(v1);
  return v0;
}

uint64_t PluginCatalog.init(packages:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = a1 + 32;
    uint64_t v4 = (void *)MEMORY[0x1E4FBC868];
    while (1)
    {
      outlined init with copy of CacheDataSource(v3, (uint64_t)v30);
      uint64_t v5 = v30[4];
      __swift_project_boxed_opaque_existential_1(v30, v30[3]);
      uint64_t v6 = OUTLINED_FUNCTION_14_9();
      uint64_t v8 = v7(v6, v5);
      uint64_t v10 = v9;
      outlined init with copy of CacheDataSource((uint64_t)v30, (uint64_t)v29);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v28 = v4;
      unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10);
      uint64_t v14 = v4[2];
      BOOL v15 = (v13 & 1) == 0;
      Swift::Int v16 = v14 + v15;
      if (__OFADD__(v14, v15)) {
        break;
      }
      unint64_t v17 = v12;
      char v18 = v13;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, PluginPackage>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v16))
      {
        unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10);
        if ((v18 & 1) != (v20 & 1)) {
          goto LABEL_17;
        }
        unint64_t v17 = v19;
      }
      uint64_t v4 = v28;
      if (v18)
      {
        uint64_t v21 = v28[7] + 40 * v17;
        __swift_destroy_boxed_opaque_existential_1(v21);
        outlined init with take of Transforming(v29, v21);
      }
      else
      {
        v28[(v17 >> 6) + 8] |= 1 << v17;
        uint64_t v22 = (uint64_t *)(v28[6] + 16 * v17);
        uint64_t *v22 = v8;
        v22[1] = v10;
        outlined init with take of Transforming(v29, v28[7] + 40 * v17);
        uint64_t v23 = v28[2];
        BOOL v24 = __OFADD__(v23, 1);
        uint64_t v25 = v23 + 1;
        if (v24) {
          goto LABEL_16;
        }
        void v28[2] = v25;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
      v3 += 40;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v27;
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = (void *)MEMORY[0x1E4FBC868];
LABEL_14:
    *(void *)(v1 + 16) = v4;
    return v1;
  }
  return result;
}

uint64_t PluginCatalog.getPluginPackage(id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  OUTLINED_FUNCTION_0_7();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v6 + 88);
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = v7(v8);
  specialized Dictionary.subscript.getter(a1, a2, v9, a3);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t PluginCatalog.getPlugin(id:)()
{
  OUTLINED_FUNCTION_0_7();
  (*(void (**)(void *__return_ptr))(v0 + 128))(v10);
  outlined init with copy of PluginPackage?((uint64_t)v10, (uint64_t)&v8);
  if (v9)
  {
    outlined init with take of Transforming(&v8, (uint64_t)v5);
    uint64_t v1 = v6;
    uint64_t v2 = v7;
    __swift_project_boxed_opaque_existential_1(v5, v6);
    uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  else
  {
    uint64_t v3 = 0;
  }
  outlined destroy of PluginPackage?((uint64_t)v10, &demangling cache variable for type metadata for PluginPackage?);
  return v3;
}

uint64_t PluginCatalog.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PluginCatalog.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t key path setter for PluginCapabilityCatalog.capabilityCache : <A>PluginCapabilityCatalog<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 184);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t PluginCapabilityCatalog.capabilityCache.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PluginCapabilityCatalog.capabilityCache.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PluginCapabilityCatalog.capabilityCache.modify())()
{
  return SiriEnvironment.providers.modify;
}

uint64_t PluginCapabilityCatalog.__allocating_init(finder:)()
{
  OUTLINED_FUNCTION_17_5();
  swift_allocObject();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14_9();
  PluginCapabilityCatalog.init(finder:)(v1);
  return v0;
}

uint64_t PluginCapabilityCatalog.init(finder:)(void *a1)
{
  uint64_t v184 = (void *)*v1;
  uint64_t v3 = v184[19];
  uint64_t v4 = v184[18];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_0_5();
  uint64_t v185 = v6;
  MEMORY[0x1F4188790](v7, v8);
  OUTLINED_FUNCTION_1_16();
  MEMORY[0x1F4188790](v9, v10);
  OUTLINED_FUNCTION_11_11();
  OUTLINED_FUNCTION_1_16();
  MEMORY[0x1F4188790](v11, v12);
  OUTLINED_FUNCTION_11_11();
  OUTLINED_FUNCTION_1_16();
  MEMORY[0x1F4188790](v13, v14);
  OUTLINED_FUNCTION_11_11();
  OUTLINED_FUNCTION_1_16();
  MEMORY[0x1F4188790](v15, v16);
  OUTLINED_FUNCTION_11_11();
  OUTLINED_FUNCTION_1_16();
  MEMORY[0x1F4188790](v17, v18);
  OUTLINED_FUNCTION_11_11();
  OUTLINED_FUNCTION_1_16();
  MEMORY[0x1F4188790](v19, v20);
  OUTLINED_FUNCTION_11_11();
  OUTLINED_FUNCTION_1_16();
  MEMORY[0x1F4188790](v21, v22);
  OUTLINED_FUNCTION_11_11();
  unint64_t v196 = v23;
  MEMORY[0x1F4188790](v24, v25);
  OUTLINED_FUNCTION_11_11();
  unint64_t v179 = v26;
  uint64_t v155 = v27;
  MEMORY[0x1F4188790](v28, v29);
  OUTLINED_FUNCTION_32_0((uint64_t)&v155 - v30);
  uint64_t v162 = type metadata accessor for Optional();
  OUTLINED_FUNCTION_0_5();
  uint64_t v192 = v31;
  MEMORY[0x1F4188790](v32, v33);
  uint64_t v163 = (char *)&v155 - v34;
  OUTLINED_FUNCTION_0_5();
  uint64_t v191 = v35;
  MEMORY[0x1F4188790](v36, v37);
  OUTLINED_FUNCTION_35_0();
  uint64_t v188 = v38;
  MEMORY[0x1F4188790](v39, v40);
  OUTLINED_FUNCTION_32_0((uint64_t)&v155 - v41);
  uint64_t v42 = type metadata accessor for Array();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v157 = v1;
  swift_retain();
  uint64_t v193 = v42;
  uint64_t v200 = Dictionary.init()();
  uint64_t v44 = a1[3];
  uint64_t v45 = a1[4];
  uint64_t v156 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v44);
  uint64_t v46 = OUTLINED_FUNCTION_14_9();
  uint64_t v48 = v47(v46, v45);
  uint64_t v194 = AssociatedConformanceWitness;
  uint64_t v195 = AssociatedTypeWitness;
  uint64_t v49 = v3;
  v199[2] = Set.init()();
  uint64_t v50 = *(void *)(v48 + 16);
  uint64_t v186 = v3;
  uint64_t v183 = v4;
  uint64_t v164 = v48;
  uint64_t v167 = v50;
  uint64_t v169 = 0;
  if (v50)
  {
    uint64_t v166 = v48 + 32;
    v161 = (char *)v192 + 8;
    uint64_t v160 = (char *)v191 + 32;
    uint64_t v159 = v3 + 40;
    *(void *)&long long v177 = v185 + 16;
    uint64_t v176 = v185 + 32;
    uint64_t v182 = (void (**)(void))(v185 + 8);
    uint64_t v175 = (char *)v191 + 16;
    v158 = (char *)v191 + 8;
    swift_bridgeObjectRetain();
    uint64_t v191 = 0;
    uint64_t v51 = 0;
    unint64_t v52 = 0;
    uint64_t v53 = 0;
    unint64_t v54 = 0;
    uint64_t v55 = v195;
    uint64_t v56 = v193;
    uint64_t v57 = (uint64_t)v163;
    do
    {
      if (v54 >= *(void *)(v48 + 16)) {
        goto LABEL_76;
      }
      uint64_t v170 = v54;
      outlined init with copy of CacheDataSource(v166 + 40 * v54, (uint64_t)v201);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginPackage);
      if (swift_dynamicCast())
      {
        __swift_storeEnumTagSinglePayload(v57, 0, 1, v4);
        OUTLINED_FUNCTION_25_0();
        v58();
        uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 40))(v4, v49);
        swift_bridgeObjectRetain();
        uint64_t v60 = Array.startIndex.getter();
        swift_bridgeObjectRelease();
        v199[0] = v60;
        uint64_t v180 = v59;
        if (v60 != MEMORY[0x1CB791C60](v59, v55))
        {
          uint64_t v55 = v195;
          uint64_t v65 = v180;
          while (1)
          {
            uint64_t v192 = v52;
            uint64_t v190 = v53;
            Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
            Array._checkSubscript(_:wasNativeTypeChecked:)();
            uint64_t v67 = (void (**)(unint64_t, unint64_t, uint64_t))v177;
            unint64_t v68 = v177 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
            uint64_t v69 = v4;
            if (IsNativeType)
            {
              uint64_t v70 = *(void (**)(unint64_t, unint64_t, uint64_t))(v185 + 16);
              v70(v179, v65+ ((*(unsigned __int8 *)(v185 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v185 + 80))+ *(void *)(v185 + 72) * v60, v55);
            }
            else
            {
              uint64_t v99 = _ArrayBuffer._getElementSlowPath(_:)();
              if (v155 != 8) {
                goto LABEL_78;
              }
              v201[0] = v99;
              uint64_t v70 = *v67;
              (*v67)(v179, (unint64_t)v201, v55);
              swift_unknownObjectRelease();
            }
            swift_bridgeObjectRetain();
            MEMORY[0x1CB791C70](v199, v65, v55);
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_28_1();
            OUTLINED_FUNCTION_39_0();
            OUTLINED_FUNCTION_25_0();
            v71();
            uint64_t v72 = OUTLINED_FUNCTION_27_2();
            ((void (*)(uint64_t))v70)(v72);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginCapabilityExclusiveRegistration);
            uint64_t v73 = (void (*)(uint64_t, uint64_t, uint64_t))v70;
            if (swift_dynamicCast())
            {
              outlined init with take of Transforming(v197, (uint64_t)v201);
              __swift_project_boxed_opaque_existential_1(v201, v202);
              uint64_t v74 = OUTLINED_FUNCTION_39_0();
              uint64_t v76 = v69;
              if (v75(v74))
              {
                v70(v172, v196, v55);
                OUTLINED_FUNCTION_37_0();
                type metadata accessor for Set();
                OUTLINED_FUNCTION_39_0();
                Set.insert(_:)();
                OUTLINED_FUNCTION_28_1();
                uint64_t v73 = (void (*)(uint64_t, uint64_t, uint64_t))v70;
                OUTLINED_FUNCTION_5_4();
                v77();
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v201);
              }
              else
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v201);
                uint64_t v73 = (void (*)(uint64_t, uint64_t, uint64_t))v70;
              }
            }
            else
            {
              uint64_t v76 = v69;
              uint64_t v198 = 0;
              memset(v197, 0, sizeof(v197));
              outlined destroy of PluginPackage?((uint64_t)v197, &demangling cache variable for type metadata for PluginCapabilityExclusiveRegistration?);
            }
            uint64_t v78 = (uint64_t)v192;
            uint64_t v79 = v189;
            uint64_t v187 = v68;
            uint64_t v80 = v73;
            v73(v189, v196, v55);
            uint64_t v61 = (void *)swift_allocObject();
            uint64_t v81 = v186;
            long long v61[2] = v76;
            v61[3] = v81;
            uint64_t v82 = v184[20];
            v61[4] = v82;
            _sSayxGRi_zRi0_zlyxIsego_Sg13SiriUtilities24PluginCapabilityExposingRzAC0C7PackageRzlWOe((uint64_t)v191);
            OUTLINED_FUNCTION_28_1();
            v83(v188, v181, v76);
            uint64_t v62 = (void *)swift_allocObject();
            v62[2] = v76;
            v62[3] = v81;
            v62[4] = v82;
            v62[5] = partial apply for implicit closure #1 in PluginCapabilityCatalog.init(finder:);
            v62[6] = v61;
            _sSayxGRi_zRi0_zlyxIsego_Sg13SiriUtilities24PluginCapabilityExposingRzAC0C7PackageRzlWOe(v78);
            uint64_t v84 = v200;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v200 = 0x8000000000000000;
            v201[0] = v84;
            uint64_t v86 = v194;
            __RawDictionaryStorage.find<A>(_:)(v79, v55, v194);
            uint64_t v88 = *(void *)(v84 + 16);
            BOOL v89 = (v87 & 1) == 0;
            Swift::Int v90 = v88 + v89;
            if (__OFADD__(v88, v89)) {
              break;
            }
            char v91 = v87;
            OUTLINED_FUNCTION_37_0();
            type metadata accessor for _NativeDictionary();
            Swift::Bool v92 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v90);
            uint64_t v4 = v183;
            uint64_t v93 = v86;
            uint64_t v94 = v189;
            if (v92)
            {
              __RawDictionaryStorage.find<A>(_:)(v189, v195, v93);
              if ((v91 & 1) != (v95 & 1)) {
                goto LABEL_79;
              }
            }
            uint64_t v200 = v201[0];
            swift_bridgeObjectRelease();
            if (v91)
            {
              swift_bridgeObjectRetain();
              uint64_t v55 = v195;
              uint64_t v56 = v193;
            }
            else
            {
              uint64_t v96 = swift_bridgeObjectRetain();
              v201[0] = ((uint64_t (*)(uint64_t))v62[5])(v96);
              uint64_t v55 = v195;
              v80(v174, v94, v195);
              uint64_t v56 = v193;
              _NativeDictionary._insert(at:key:value:)();
            }
            swift_bridgeObjectRelease();
            Array.append(_:)();
            uint64_t v97 = *v182;
            ((void (*)(uint64_t, uint64_t))*v182)(v94, v55);
            ((void (*)(unint64_t, uint64_t))v97)(v196, v55);
            uint64_t v60 = v199[0];
            uint64_t v65 = v180;
            uint64_t v98 = MEMORY[0x1CB791C60](v180, v55);
            unint64_t v52 = partial apply for thunk for @callee_guaranteed () -> (@owned [A]);
            uint64_t v191 = partial apply for implicit closure #1 in PluginCapabilityCatalog.init(finder:);
            uint64_t v53 = v62;
            if (v60 == v98) {
              goto LABEL_7;
            }
          }
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        uint64_t v61 = v51;
        uint64_t v62 = v53;
        uint64_t v55 = v195;
LABEL_7:
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_5_4();
        v63();
        uint64_t v51 = v61;
        uint64_t v53 = v62;
        uint64_t v49 = v186;
        uint64_t v48 = v164;
        uint64_t v57 = (uint64_t)v163;
      }
      else
      {
        __swift_storeEnumTagSinglePayload(v57, 1, 1, v4);
        OUTLINED_FUNCTION_28_1();
        v64(v57, v162);
      }
      unint64_t v54 = v170 + 1;
    }
    while (v170 + 1 != v167);
    uint64_t v175 = (char *)v51;
    uint64_t v190 = v53;
    uint64_t v192 = v52;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v191 = 0;
    uint64_t v175 = 0;
    uint64_t v192 = 0;
    uint64_t v190 = 0;
    uint64_t v56 = v193;
  }
  swift_bridgeObjectRetain();
  uint64_t v100 = v195;
  swift_bridgeObjectRetain();
  uint64_t v101 = v100;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_27_2();
  _NativeDictionary.makeIterator()();
  uint64_t v187 = v202;
  unint64_t v179 = (unint64_t)(v201[2] + 64) >> 6;
  uint64_t v102 = v185;
  unint64_t v196 = v185 + 16;
  uint64_t v180 = v185 + 32;
  uint64_t v181 = v201[0];
  uint64_t v178 = v201[1];
  unint64_t v103 = v203;
  uint64_t v182 = (void (**)(void))(v185 + 8);
  *(void *)&long long v104 = 136315394;
  long long v177 = v104;
  uint64_t v170 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v105 = v169;
  uint64_t v106 = v168;
  while (v103)
  {
    unint64_t v107 = __clz(__rbit64(v103));
    uint64_t v108 = (v103 - 1) & v103;
    unint64_t v109 = v107 | (v187 << 6);
LABEL_48:
    uint64_t v116 = *(void (**)(void))(v102 + 16);
    ((void (*)(uint64_t, unint64_t, uint64_t))v116)(v173, *(void *)(v181 + 48) + *(void *)(v102 + 72) * v109, v101);
    OUTLINED_FUNCTION_25_0();
    v117();
    uint64_t v118 = MEMORY[0x1CB791960](v197, v106, v200, v101, v56, v194);
    uint64_t v120 = *(void **)&v197[0];
    uint64_t v121 = v183;
    if (!*(void *)&v197[0])
    {
      uint64_t v118 = (void *)static Array._allocateUninitialized(_:)();
      uint64_t v120 = v118;
    }
    *(void *)&v197[0] = v120;
    MEMORY[0x1F4188790](v118, v119);
    uint64_t v122 = v186;
    *(&v155 - 4) = v121;
    *(&v155 - 3) = v122;
    *(&v155 - 2) = v184[20];
    uint64_t WitnessTable = swift_getWitnessTable();
    *(void *)&v197[0] = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in PluginCapabilityCatalog.init(finder:), (uint64_t)(&v155 - 6), v56, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v124);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    uint64_t v188 = BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    char v125 = Set.contains(_:)();
    swift_bridgeObjectRelease();
    uint64_t v189 = v108;
    if (v125)
    {
      uint64_t v126 = MEMORY[0x1CB791C40](v120, v121);
      swift_bridgeObjectRelease();
      if (v126 <= 1) {
        goto LABEL_57;
      }
      uint64_t v169 = v105;
      uint64_t v101 = v195;
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v127 = type metadata accessor for Logger();
      uint64_t v128 = __swift_project_value_buffer(v127, (uint64_t)static Logger.logger);
      uint64_t v129 = v165;
      OUTLINED_FUNCTION_22_3();
      v116();
      swift_bridgeObjectRetain();
      uint64_t v176 = v128;
      uint64_t v130 = Logger.logObject.getter();
      os_log_type_t v131 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v130, v131))
      {
        uint64_t v132 = swift_slowAlloc();
        uint64_t v172 = swift_slowAlloc();
        *(void *)&v197[0] = v172;
        *(_DWORD *)uint64_t v132 = v177;
        ((void (*)(uint64_t, uint64_t, uint64_t))v116)(v174, v129, v101);
        uint64_t v133 = String.init<A>(describing:)();
        *(void *)(v132 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v133, v134, (uint64_t *)v197);
        swift_bridgeObjectRelease();
        v135 = *v182;
        uint64_t v106 = v168;
        OUTLINED_FUNCTION_40_0();
        v135();
        *(_WORD *)(v132 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(void *)(v132 + 14) = OUTLINED_FUNCTION_31();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C9E4C000, v130, v131, "Capability %s is marked exclusive, but multiple registrations were found: %s", (uint8_t *)v132, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {
        v135 = *v182;
        OUTLINED_FUNCTION_40_0();
        v135();

        swift_bridgeObjectRelease_n();
      }
      unint64_t v103 = v189;
      uint64_t v147 = Logger.logObject.getter();
      os_log_type_t v148 = static os_log_type_t.error.getter();
      BOOL v149 = os_log_type_enabled(v147, v148);
      uint64_t v105 = v169;
      uint64_t v102 = v185;
      if (v149)
      {
        uint64_t v150 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v150 = 0;
        _os_log_impl(&dword_1C9E4C000, v147, v148, "All of the plugins for this capability will be ignored.", v150, 2u);
        OUTLINED_FUNCTION_3();
      }

      OUTLINED_FUNCTION_37_0();
      type metadata accessor for Dictionary();
      Dictionary.removeValue(forKey:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_40_0();
      v135();
    }
    else
    {
      swift_bridgeObjectRelease();
LABEL_57:
      uint64_t v101 = v195;
      uint64_t v136 = v171;
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v137 = type metadata accessor for Logger();
      __swift_project_value_buffer(v137, (uint64_t)static Logger.logger);
      OUTLINED_FUNCTION_22_3();
      v116();
      swift_bridgeObjectRetain();
      uint64_t v138 = Logger.logObject.getter();
      os_log_type_t v139 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v138, v139))
      {
        uint64_t v140 = v136;
        uint64_t v141 = swift_slowAlloc();
        *(void *)&v197[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v141 = v177;
        ((void (*)(uint64_t, uint64_t, uint64_t))v116)(v174, v140, v195);
        uint64_t v56 = v193;
        uint64_t v142 = String.init<A>(describing:)();
        *(void *)(v141 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v142, v143, (uint64_t *)v197);
        swift_bridgeObjectRelease();
        uint64_t v144 = *v182;
        uint64_t v145 = v140;
        uint64_t v106 = v168;
        ((void (*)(uint64_t, uint64_t))*v182)(v145, v195);
        *(_WORD *)(v141 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(void *)(v141 + 14) = OUTLINED_FUNCTION_31();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C9E4C000, v138, v139, "Capability %s is supported by: %s", (uint8_t *)v141, 0x16u);
        swift_arrayDestroy();
        uint64_t v101 = v195;
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();

        ((void (*)(uint64_t, uint64_t))v144)(v106, v101);
      }
      else
      {
        swift_bridgeObjectRelease_n();

        uint64_t v146 = *v182;
        ((void (*)(uint64_t, uint64_t))*v182)(v136, v101);
        ((void (*)(uint64_t, uint64_t))v146)(v106, v101);
      }
      uint64_t v102 = v185;
      unint64_t v103 = v189;
    }
  }
  uint64_t v110 = (uint64_t)v192;
  if (__OFADD__(v187, 1)) {
    goto LABEL_77;
  }
  OUTLINED_FUNCTION_20_6();
  if (v111 == v112) {
    goto LABEL_74;
  }
  OUTLINED_FUNCTION_18_7();
  if (v114)
  {
LABEL_47:
    uint64_t v108 = (v114 - 1) & v114;
    unint64_t v109 = __clz(__rbit64(v114)) + (v113 << 6);
    uint64_t v187 = v113;
    goto LABEL_48;
  }
  OUTLINED_FUNCTION_21_5();
  if (v111 == v112) {
    goto LABEL_74;
  }
  OUTLINED_FUNCTION_19_6();
  if (v114) {
    goto LABEL_46;
  }
  OUTLINED_FUNCTION_21_5();
  if (v111 == v112) {
    goto LABEL_74;
  }
  OUTLINED_FUNCTION_19_6();
  if (v114) {
    goto LABEL_46;
  }
  OUTLINED_FUNCTION_21_5();
  if (v111 == v112) {
    goto LABEL_74;
  }
  OUTLINED_FUNCTION_19_6();
  if (v114)
  {
LABEL_46:
    uint64_t v113 = v115;
    goto LABEL_47;
  }
  OUTLINED_FUNCTION_20_6();
  if (v111 == v112) {
    goto LABEL_74;
  }
  OUTLINED_FUNCTION_18_7();
  if (v114) {
    goto LABEL_47;
  }
  while (1)
  {
    OUTLINED_FUNCTION_20_6();
    if (v111 == v112) {
      break;
    }
    OUTLINED_FUNCTION_18_7();
    uint64_t v152 = v151 + 1;
    if (v114)
    {
      uint64_t v113 = v152 - 1;
      goto LABEL_47;
    }
  }
LABEL_74:
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v153 = v157;
  v157[3] = v200;
  swift_bridgeObjectRetain();
  swift_release();
  PluginCatalog.init(packages:)(v164);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v156);
  _sSayxGRi_zRi0_zlyxIsego_Sg13SiriUtilities24PluginCapabilityExposingRzAC0C7PackageRzlWOe((uint64_t)v191);
  _sSayxGRi_zRi0_zlyxIsego_Sg13SiriUtilities24PluginCapabilityExposingRzAC0C7PackageRzlWOe(v110);
  return (uint64_t)v153;
}

uint64_t PluginCapabilityCatalog.getPackages(capability:)(uint64_t a1)
{
  OUTLINED_FUNCTION_0_7();
  uint64_t v3 = (*(uint64_t (**)(void))(v2 + 176))();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Array();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x1CB791960](&v8, a1, v3, AssociatedTypeWitness, v5, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  uint64_t result = v8;
  if (!v8) {
    return static Array._allocateUninitialized(_:)();
  }
  return result;
}

uint64_t PluginCapabilityCatalog.getAll(capability:)()
{
  OUTLINED_FUNCTION_0_7();
  (*(void (**)(void))(v0 + 208))();
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v1 = Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t static PluginCapabilityCatalog.load<A>(finder:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v87 = a4;
  uint64_t v84 = a1;
  type metadata accessor for CodingUserInfoKey();
  OUTLINED_FUNCTION_0_5();
  uint64_t v80 = v9;
  uint64_t v81 = v8;
  MEMORY[0x1F4188790](v8, v10);
  OUTLINED_FUNCTION_12_1();
  uint64_t v82 = v12 - v11;
  uint64_t v13 = type metadata accessor for Optional();
  OUTLINED_FUNCTION_0_5();
  uint64_t v15 = v14;
  MEMORY[0x1F4188790](v16, v17);
  OUTLINED_FUNCTION_35_0();
  uint64_t v85 = v18;
  MEMORY[0x1F4188790](v19, v20);
  uint64_t v22 = (char *)v71 - v21;
  OUTLINED_FUNCTION_0_5();
  uint64_t v24 = v23;
  MEMORY[0x1F4188790](v25, v26);
  OUTLINED_FUNCTION_12_1();
  uint64_t v29 = v28 - v27;
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  uint64_t v86 = a2;
  id v83 = v30;
  v30((uint64_t)v22, a2, v13);
  if (__swift_getEnumTagSinglePayload((uint64_t)v22, 1, a3) == 1)
  {
    OUTLINED_FUNCTION_40_0();
    uint64_t v32 = v31();
  }
  else
  {
    uint64_t v79 = v13;
    uint64_t v78 = v15;
    uint64_t v34 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v29, v22, a3);
    uint64_t v36 = v24;
    if (one-time initialization token for pluginLoaderLog != -1) {
      uint64_t v34 = swift_once();
    }
    MEMORY[0x1F4188790](v34, v35);
    uint64_t v38 = v5[18];
    uint64_t v37 = v5[19];
    v71[-6] = v38;
    v71[-5] = a3;
    uint64_t v39 = v5[20];
    uint64_t v77 = v37;
    v71[-4] = v37;
    v71[-3] = v39;
    uint64_t v76 = v39;
    v71[-2] = v87;
    v71[-1] = v29;
    specialized static Logger.withSignpost<A>(name:log:completion:)();
    unint64_t v40 = v89;
    if (v89 >> 60 == 15)
    {
      OUTLINED_FUNCTION_6_16();
      uint64_t v32 = v41();
    }
    else
    {
      uint64_t v73 = 0;
      uint64_t v75 = v29;
      uint64_t v74 = v36;
      uint64_t v42 = v88;
      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      uint64_t v72 = v42;
      uint64_t v43 = OUTLINED_FUNCTION_39_0();
      outlined copy of Data._Representation(v43, v44);
      v71[1] = PropertyListDecoder.init()();
      v71[0] = v40;
      if (one-time initialization token for catalogPackageInflator != -1) {
        swift_once();
      }
      uint64_t v45 = v81;
      uint64_t v46 = __swift_project_value_buffer(v81, (uint64_t)static CodingUserInfoKey.catalogPackageInflator);
      uint64_t v47 = v82;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 16))(v82, v46, v45);
      uint64_t v48 = (void *)swift_allocObject();
      uint64_t v49 = v38;
      v48[2] = v38;
      v48[3] = a3;
      uint64_t v50 = v77;
      uint64_t v51 = v76;
      void v48[4] = v77;
      v48[5] = v51;
      uint64_t v52 = v87;
      v48[6] = v87;
      uint64_t v53 = (void *)swift_allocObject();
      v53[2] = v49;
      v53[3] = a3;
      v53[4] = v50;
      v53[5] = v51;
      v53[6] = v52;
      v53[7] = partial apply for closure #2 in static PluginCapabilityCatalog.load<A>(finder:cache:);
      v53[8] = v48;
      type metadata accessor for Optional();
      v93[3] = swift_getFunctionTypeMetadata1();
      v93[0] = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@out A?);
      v93[1] = v53;
      unint64_t v54 = (void (*)(long long *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
      specialized Dictionary.subscript.setter((uint64_t)v93, v47);
      v54(&v90, 0);
      type metadata accessor for PluginCapabilityCatalog();
      swift_getWitnessTable();
      uint64_t v55 = v72;
      unint64_t v56 = v71[0];
      uint64_t v57 = v73;
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      if (!v57)
      {
        outlined consume of Data?(v55, v56);
        swift_release();
        outlined consume of Data?(v55, v56);
        OUTLINED_FUNCTION_6_16();
        v70();
        return v93[0];
      }

      outlined consume of Data?(v55, v56);
      swift_release();
      outlined consume of Data?(v55, v56);
      OUTLINED_FUNCTION_6_16();
      uint64_t v32 = v58();
    }
    uint64_t v15 = v78;
    uint64_t v13 = v79;
  }
  if (one-time initialization token for pluginLoaderLog != -1) {
    uint64_t v32 = swift_once();
  }
  uint64_t v59 = (void *)static Logger.pluginLoaderLog;
  MEMORY[0x1F4188790](v32, v33);
  uint64_t v60 = v5[19];
  v71[-6] = v5[18];
  v71[-5] = a3;
  uint64_t v61 = v5[20];
  v71[-4] = v60;
  v71[-3] = v61;
  uint64_t v62 = v84;
  v71[-2] = v87;
  v71[-1] = v62;
  type metadata accessor for PluginCapabilityCatalog();
  static Logger.withSignpost<A>(name:log:completion:)((uint64_t)"FindPlugins", 11, 2, v59, (void (*)(uint64_t, uint64_t))partial apply for closure #3 in static PluginCapabilityCatalog.load<A>(finder:cache:));
  uint64_t v63 = v88;
  uint64_t v64 = v85;
  v83(v85, v86, v13);
  if (__swift_getEnumTagSinglePayload(v64, 1, a3) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v64, v13);
LABEL_19:
    uint64_t v92 = 0;
    long long v90 = 0u;
    long long v91 = 0u;
    goto LABEL_20;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CacheDataSink);
  if (!swift_dynamicCast()) {
    goto LABEL_19;
  }
  if (!*((void *)&v91 + 1))
  {
LABEL_20:
    outlined destroy of PluginPackage?((uint64_t)&v90, &demangling cache variable for type metadata for CacheDataSink?);
    return v63;
  }
  outlined init with take of Transforming(&v90, (uint64_t)v93);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  uint64_t v65 = PropertyListEncoder.init()();
  uint64_t v66 = dispatch thunk of PropertyListEncoder.outputFormat.setter();
  MEMORY[0x1F4188790](v66, v67);
  uint64_t v68 = v87;
  v71[-6] = a3;
  v71[-5] = v68;
  v71[-4] = v65;
  v71[-3] = v63;
  v71[-2] = v93;
  specialized static Logger.withSignpost<A>(name:log:completion:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
  swift_release();
  return v63;
}

uint64_t closure #1 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X5>, uint64_t *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  if (v3)
  {

    uint64_t result = 0;
    unint64_t v6 = 0xF000000000000000;
  }
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t CodingUserInfoKey.catalogPackageInflator.unsafeMutableAddressor()
{
  if (one-time initialization token for catalogPackageInflator != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for CodingUserInfoKey();

  return __swift_project_value_buffer(v0, (uint64_t)static CodingUserInfoKey.catalogPackageInflator);
}

uint64_t closure #2 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 24))(v9, a1, a2, a3, a4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginPackage?);
  int v7 = swift_dynamicCast();
  return __swift_storeEnumTagSinglePayload(a5, v7 ^ 1u, 1, a3);
}

uint64_t closure #3 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for PluginCapabilityCatalog();
  outlined init with copy of CacheDataSource(a1, (uint64_t)v5);
  uint64_t result = PluginCapabilityCatalog.__allocating_init(finder:)();
  *a2 = result;
  return result;
}

uint64_t closure #4 in static PluginCapabilityCatalog.load<A>(finder:cache:)(uint64_t a1, uint64_t a2, void *a3)
{
  type metadata accessor for PluginCapabilityCatalog();
  swift_getWitnessTable();
  uint64_t result = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (!v3)
  {
    uint64_t v7 = result;
    unint64_t v8 = v6;
    uint64_t v9 = a3[3];
    uint64_t v10 = a3[4];
    __swift_project_boxed_opaque_existential_1(a3, v9);
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v10 + 8))(v7, v8, v9, v10);
    return outlined consume of Data._Representation(v7, v8);
  }
  return result;
}

uint64_t static PluginCapabilityCatalog.load(finder:)(uint64_t a1)
{
  char v2 = 0;
  return static PluginCapabilityCatalog.load<A>(finder:cache:)(a1, (uint64_t)&v2, (uint64_t)&type metadata for NullCacheDataSource, (uint64_t)&protocol witness table for NullCacheDataSource);
}

uint64_t PluginCapabilityCatalog.advertisedCapabilities()()
{
  OUTLINED_FUNCTION_0_7();
  (*(void (**)(void))(v0 + 176))();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  OUTLINED_FUNCTION_27_2();
  swift_getAssociatedConformanceWitness();
  OUTLINED_FUNCTION_14_9();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  type metadata accessor for Dictionary.Keys();
  swift_getWitnessTable();
  return Array.init<A>(_:)();
}

uint64_t PluginCapabilityCatalog.exposedCapabilities()()
{
  OUTLINED_FUNCTION_0_7();
  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t PluginCapabilityCatalog.get(capability:)@<X0>(_OWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_0_7();
  uint64_t v3 = (*(uint64_t (**)(void))(v2 + 216))();
  if (*(void *)(v3 + 16))
  {
    outlined init with copy of Any(v3 + 32, (uint64_t)a1);
  }
  else
  {
    *a1 = 0u;
    a1[1] = 0u;
  }

  return swift_bridgeObjectRelease();
}

unint64_t PluginCapabilityCatalog.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PluginCapabilityCatalog.CodingKeys.init(rawValue:), v3);
  OUTLINED_FUNCTION_14_9();
  swift_bridgeObjectRelease();
  if (v1 >= 3) {
    return 3;
  }
  else {
    return v1;
  }
}

uint64_t PluginCapabilityCatalog.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t PluginCapabilityCatalog.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t PluginCapabilityCatalog.CodingKeys.rawValue.getter(char a1)
{
  if (!a1) {
    return OUTLINED_FUNCTION_10_11();
  }
  if (a1 == 1) {
    return 0x696C696261706163;
  }
  return 0x736567616B636170;
}

uint64_t PluginCapabilityCatalog.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return OUTLINED_FUNCTION_10_11();
  }
  if (a1 == 1) {
    return 0x696C696261706163;
  }
  return 0x736567616B636170;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PluginCapabilityCatalog<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1C8];

  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PluginCapabilityCatalog<A>.CodingKeys(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PluginCapabilityCatalog<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance PluginCapabilityCatalog<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PluginCapabilityCatalog<A>.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = PluginCapabilityCatalog.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PluginCapabilityCatalog<A>.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PluginCapabilityCatalog.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PluginCapabilityCatalog<A>.CodingKeys()
{
  return PluginCapabilityCatalog.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PluginCapabilityCatalog<A>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = PluginCapabilityCatalog.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PluginCapabilityCatalog<A>.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PluginCapabilityCatalog<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PluginCapabilityCatalog<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

void PluginCapabilityCatalog.encode(to:)()
{
  OUTLINED_FUNCTION_6_5();
  uint64_t v37 = v1;
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(*(void *)v2 + 144);
  uint64_t v6 = *(void *)(*(void *)v2 + 160);
  uint64_t v35 = *(void *)(*(void *)v2 + 152);
  uint64_t v36 = v5;
  uint64_t v34 = v6;
  type metadata accessor for PluginCapabilityCatalog.CodingKeys();
  swift_getWitnessTable();
  OUTLINED_FUNCTION_37_0();
  uint64_t v7 = type metadata accessor for KeyedEncodingContainer();
  OUTLINED_FUNCTION_0_5();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v13 = (char *)&v29 - v12;
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  id v14 = objc_msgSend(self, sel_processInfo);
  id v15 = objc_msgSend(v14, sel_operatingSystemVersionString);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v37;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v16)
  {
    uint64_t v17 = OUTLINED_FUNCTION_41_0();
    v18(v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v33 = v9;
    uint64_t v19 = swift_bridgeObjectRelease();
    uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 176))(v19);
    uint64_t v31 = v13;
    uint64_t v32 = &v29;
    MEMORY[0x1F4188790](v30, v20);
    uint64_t v21 = v35;
    *(&v29 - 4) = v36;
    *(&v29 - 3) = v21;
    *(&v29 - 2) = v34;
    swift_getAssociatedTypeWitness();
    uint64_t v34 = type metadata accessor for Array();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    swift_getAssociatedConformanceWitness();
    uint64_t v37 = v7;
    uint64_t v22 = Dictionary.mapValues<A>(_:)();
    swift_bridgeObjectRelease();
    uint64_t v34 = v22;
    char v40 = 1;
    type metadata accessor for Dictionary();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v24 = lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    uint64_t v38 = AssociatedConformanceWitness;
    uint64_t v39 = v24;
    swift_getWitnessTable();
    OUTLINED_FUNCTION_16_8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v25 = swift_bridgeObjectRelease();
    uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 88))(v25);
    specialized _NativeDictionary.mapValues<A>(_:)(v26);
    swift_bridgeObjectRelease();
    char v40 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    OUTLINED_FUNCTION_16_8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    swift_release();
    uint64_t v27 = OUTLINED_FUNCTION_41_0();
    v28(v27);
  }
  OUTLINED_FUNCTION_9_3();
}

uint64_t closure #1 in PluginCapabilityCatalog.encode(to:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = *a1;
  v11[4] = a4;
  void v11[5] = v6;
  _OWORD v11[2] = a2;
  v11[3] = a3;
  uint64_t v7 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #1 in PluginCapabilityCatalog.encode(to:), (uint64_t)v11, v7, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v9);
  *a5 = result;
  return result;
}

uint64_t PluginCapabilityCatalog.__allocating_init(from:)()
{
  OUTLINED_FUNCTION_17_5();
  uint64_t v0 = swift_allocObject();
  PluginCapabilityCatalog.init(from:)();
  return v0;
}

void PluginCapabilityCatalog.init(from:)()
{
  OUTLINED_FUNCTION_6_5();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(*(void *)v0 + 152);
  uint64_t v6 = *(void *)(*(void *)v0 + 160);
  uint64_t v64 = *(void *)(*(void *)v0 + 144);
  uint64_t v65 = v5;
  uint64_t v71 = v6;
  type metadata accessor for PluginCapabilityCatalog.CodingKeys();
  swift_getWitnessTable();
  type metadata accessor for KeyedDecodingContainer();
  OUTLINED_FUNCTION_0_5();
  uint64_t v61 = v8;
  uint64_t v62 = v7;
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v63 = (char *)&v56 - v10;
  uint64_t v11 = (void *)OUTLINED_FUNCTION_41_0();
  __swift_project_boxed_opaque_existential_1(v11, v12);
  OUTLINED_FUNCTION_14_9();
  swift_retain();
  uint64_t v13 = dispatch thunk of Decoder.userInfo.getter();
  if (one-time initialization token for catalogPackageInflator != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for CodingUserInfoKey();
  __swift_project_value_buffer(v14, (uint64_t)static CodingUserInfoKey.catalogPackageInflator);
  specialized Dictionary.subscript.getter(v13, &v69);
  swift_bridgeObjectRelease();
  uint64_t v15 = v65;
  if (!v70)
  {
    outlined destroy of PluginPackage?((uint64_t)&v69, &demangling cache variable for type metadata for Any?);
    goto LABEL_8;
  }
  uint64_t v16 = v64;
  type metadata accessor for Optional();
  swift_getFunctionTypeMetadata1();
  if (!swift_dynamicCast())
  {
LABEL_8:
    lazy protocol witness table accessor for type PluginCatalogError and conformance PluginCatalogError();
    swift_allocError();
    *uint64_t v21 = 0u;
    v21[1] = 0u;
    swift_willThrow();
    goto LABEL_11;
  }
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = (void *)v4;
  uint64_t v19 = v17;
  *(void *)(v17 + 16) = v16;
  *(void *)(v17 + 24) = v15;
  *(void *)(v17 + 32) = v71;
  *(_OWORD *)(v17 + 40) = v68;
  uint64_t v20 = v18[3];
  uint64_t v60 = v18;
  __swift_project_boxed_opaque_existential_1(v18, v20);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    swift_release();
  }
  else
  {
    uint64_t v59 = v19;
    LOBYTE(v69) = 0;
    uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)();
    unint64_t v24 = v23;
    id v25 = objc_msgSend(self, sel_processInfo);
    id v26 = objc_msgSend(v25, sel_operatingSystemVersionString);

    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v29 = v28;

    BOOL v30 = v22 == v27 && v24 == v29;
    uint64_t v31 = v65;
    uint64_t v32 = v22;
    uint64_t v33 = (uint64_t)v60;
    if (v30 || (uint64_t v58 = v32, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v34 = v64;
      swift_getAssociatedTypeWitness();
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
      uint64_t v57 = OUTLINED_FUNCTION_33_0();
      uint64_t v58 = v35;
      type metadata accessor for Dictionary();
      LOBYTE(v68) = 1;
      uint64_t v36 = OUTLINED_FUNCTION_33_0();
      uint64_t v37 = lazy protocol witness table accessor for type [String] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
      uint64_t v66 = v36;
      uint64_t v67 = v37;
      swift_getWitnessTable();
      OUTLINED_FUNCTION_38_0();
      uint64_t v38 = KeyedDecodingContainer.decode<A>(_:forKey:)();
      MEMORY[0x1F4188790](v38, v39);
      *(&v56 - 6) = v34;
      *(&v56 - 5) = v31;
      *(&v56 - 4) = v71;
      *(&v56 - 3) = (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out A?);
      *(&v56 - 2) = v59;
      type metadata accessor for Array();
      uint64_t v40 = Dictionary.compactMapValues<A>(_:)();
      swift_bridgeObjectRelease();
      *(void *)(v2 + 24) = v40;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
      LOBYTE(v68) = 2;
      lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
      OUTLINED_FUNCTION_38_0();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v51 = swift_release();
      uint64_t v52 = v69;
      MEMORY[0x1F4188790](v51, v53);
      *(&v56 - 6) = v34;
      *(&v56 - 5) = v31;
      *(&v56 - 4) = v71;
      *(&v56 - 3) = (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out A?);
      *(&v56 - 2) = v59;
      uint64_t v54 = specialized Dictionary.compactMapValues<A>(_:)((void (*)(long long *__return_ptr, void *))partial apply for closure #2 in PluginCapabilityCatalog.init(from:), (uint64_t)(&v56 - 8), v52);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_5_4();
      v55();
      swift_release();
      *(void *)(v2 + 16) = v54;
      __swift_destroy_boxed_opaque_existential_1(v33);
      goto LABEL_12;
    }
    uint64_t v41 = v27;
    if (one-time initialization token for loader != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.loader);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v43, v44))
    {
      unint64_t v45 = v24;
      uint64_t v46 = swift_slowAlloc();
      uint64_t v57 = swift_slowAlloc();
      *(void *)&long long v69 = v57;
      *(_DWORD *)uint64_t v46 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)&long long v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v45, (uint64_t *)&v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v46 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&long long v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v29, (uint64_t *)&v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C9E4C000, v43, v44, "Not using cached plugin information, as it is from %s and we are running %s.", (uint8_t *)v46, 0x16u);
      uint64_t v47 = v57;
      swift_arrayDestroy();
      MEMORY[0x1CB792FA0](v47, -1, -1);
      uint64_t v48 = v46;
      unint64_t v24 = v45;
      MEMORY[0x1CB792FA0](v48, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    lazy protocol witness table accessor for type PluginCatalogError and conformance PluginCatalogError();
    swift_allocError();
    *uint64_t v49 = v41;
    v49[1] = v29;
    v49[2] = v58;
    v49[3] = v24;
    swift_willThrow();
    swift_release();
    OUTLINED_FUNCTION_5_4();
    v50();
  }
  uint64_t v4 = (uint64_t)v60;
LABEL_11:
  __swift_destroy_boxed_opaque_existential_1(v4);
  swift_release();
  type metadata accessor for PluginCapabilityCatalog();
  swift_deallocPartialClassInstance();
LABEL_12:
  OUTLINED_FUNCTION_9_3();
}

uint64_t closure #1 in PluginCapabilityCatalog.init(from:)@<X0>(uint64_t *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A]);
  uint64_t result = Sequence.compactMap<A>(_:)();
  *a1 = result;
  return result;
}

uint64_t specialized Dictionary.compactMapValues<A>(_:)(void (*a1)(long long *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = MEMORY[0x1E4FBC868];
  uint64_t v39 = MEMORY[0x1E4FBC868];
  specialized _NativeDictionary.makeIterator()(v38, a3);
  uint64_t v31 = v38[0];
  int64_t v5 = v38[3];
  unint64_t v6 = v38[4];
  int64_t v28 = (unint64_t)(v38[2] + 64) >> 6;
  uint64_t v29 = v38[1];
  uint64_t result = swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_3;
  }
LABEL_2:
  uint64_t v32 = (v6 - 1) & v6;
  unint64_t v8 = __clz(__rbit64(v6)) | (v5 << 6);
  for (i = v5; ; unint64_t v8 = __clz(__rbit64(v10)) + (i << 6))
  {
    uint64_t v12 = (uint64_t *)(*(void *)(v31 + 48) + 16 * v8);
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    uint64_t v15 = (void *)(*(void *)(v31 + 56) + 16 * v8);
    uint64_t v16 = v15[1];
    v37[0] = *v15;
    v37[1] = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1(&v33, v37);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_38:
      outlined consume of [String : Data].Iterator._Variant();
      return v4;
    }
    if (!v34)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = outlined destroy of PluginPackage?((uint64_t)&v33, &demangling cache variable for type metadata for PluginPackage?);
      goto LABEL_29;
    }
    outlined init with take of Transforming(&v33, (uint64_t)v36);
    outlined init with take of Transforming(v36, (uint64_t)v35);
    if (*(void *)(v4 + 24) <= *(void *)(v4 + 16))
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
      uint64_t v4 = v39;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v17 = v4 + 64;
    uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v4 + 64 + 8 * (v19 >> 6))) == 0) {
      break;
    }
    unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v4 + 64 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_28:
    *(void *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    id v26 = (void *)(*(void *)(v4 + 48) + 16 * v21);
    void *v26 = v14;
    v26[1] = v13;
    outlined init with take of Transforming(v35, *(void *)(v4 + 56) + 40 * v21);
    ++*(void *)(v4 + 16);
    uint64_t result = swift_bridgeObjectRelease();
LABEL_29:
    int64_t v5 = i;
    unint64_t v6 = v32;
    if (v32) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t i = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_40;
    }
    if (i >= v28) {
      goto LABEL_38;
    }
    unint64_t v10 = *(void *)(v29 + 8 * i);
    if (!v10)
    {
      int64_t v11 = v5 + 2;
      if (v5 + 2 >= v28) {
        goto LABEL_38;
      }
      unint64_t v10 = *(void *)(v29 + 8 * v11);
      if (v10) {
        goto LABEL_12;
      }
      int64_t v11 = v5 + 3;
      if (v5 + 3 >= v28) {
        goto LABEL_38;
      }
      unint64_t v10 = *(void *)(v29 + 8 * v11);
      if (v10) {
        goto LABEL_12;
      }
      int64_t v11 = v5 + 4;
      if (v5 + 4 >= v28) {
        goto LABEL_38;
      }
      unint64_t v10 = *(void *)(v29 + 8 * v11);
      if (v10)
      {
LABEL_12:
        int64_t i = v11;
      }
      else
      {
        int64_t i = v5 + 5;
        if (v5 + 5 >= v28) {
          goto LABEL_38;
        }
        unint64_t v10 = *(void *)(v29 + 8 * i);
        if (!v10)
        {
          int64_t v27 = v5 + 6;
          while (v27 < v28)
          {
            unint64_t v10 = *(void *)(v29 + 8 * v27++);
            if (v10)
            {
              int64_t i = v27 - 1;
              goto LABEL_13;
            }
          }
          goto LABEL_38;
        }
      }
    }
LABEL_13:
    uint64_t v32 = (v10 - 1) & v10;
  }
  char v22 = 0;
  unint64_t v23 = (unint64_t)(63 - v18) >> 6;
  while (++v20 != v23 || (v22 & 1) == 0)
  {
    BOOL v24 = v20 == v23;
    if (v20 == v23) {
      unint64_t v20 = 0;
    }
    v22 |= v24;
    uint64_t v25 = *(void *)(v17 + 8 * v20);
    if (v25 != -1)
    {
      unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
      goto LABEL_28;
    }
  }
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t closure #2 in PluginCapabilityCatalog.init(from:)@<X0>(void *a1@<X0>, void (*a2)(void, void)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v14 = (char *)&v17 - v13;
  a2(*a1, a1[1]);
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, a3) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    *(void *)(a5 + 32) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  else
  {
    *(void *)(a5 + 24) = a3;
    *(void *)(a5 + 32) = a4;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a5);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(*(void *)(a3 - 8) + 32))(boxed_opaque_existential_0, v14, a3);
  }
  return result;
}

void PluginCapabilityCatalog.__allocating_init(packageCache:)()
{
}

void PluginCapabilityCatalog.init(packageCache:)()
{
}

void PluginCapabilityCatalog.__allocating_init(packages:)()
{
}

void PluginCapabilityCatalog.init(packages:)()
{
}

uint64_t PluginCapabilityCatalog.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t PluginCapabilityCatalog.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PluginCapabilityCatalog.__deallocating_deinit()
{
  PluginCapabilityCatalog.deinit();
  uint64_t v0 = OUTLINED_FUNCTION_17_5();

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t protocol witness for PluginCapabilityExposing.advertisedCapabilities() in conformance PluginCapabilityCatalog<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 224))();
}

uint64_t protocol witness for PluginCapabilityExposing.exposedCapabilities() in conformance PluginCapabilityCatalog<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 232))();
}

uint64_t protocol witness for PluginCapabilityExposing.get(capability:) in conformance PluginCapabilityCatalog<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 240))();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PluginCapabilityCatalog<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 256))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PluginCapabilityCatalog<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 248))();
}

uint64_t one-time initialization function for catalogPackageInflator()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingUserInfoKey?);
  MEMORY[0x1F4188790](v0 - 8, v1);
  OUTLINED_FUNCTION_12_1();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  __swift_allocate_value_buffer(v5, static CodingUserInfoKey.catalogPackageInflator);
  uint64_t v6 = OUTLINED_FUNCTION_27_2();
  __swift_project_value_buffer(v6, v7);
  CodingUserInfoKey.init(rawValue:)();
  uint64_t result = __swift_getEnumTagSinglePayload(v4, 1, v5);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_6_6();
    OUTLINED_FUNCTION_25_0();
    return v9();
  }
  return result;
}

uint64_t static CodingUserInfoKey.catalogPackageInflator.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for catalogPackageInflator != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for CodingUserInfoKey();
  __swift_project_value_buffer(v2, (uint64_t)static CodingUserInfoKey.catalogPackageInflator);
  OUTLINED_FUNCTION_6_6();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 16);

  return v4(a1);
}

unint64_t __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v6, a2, a3);
}

unint64_t __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[1] = a1;
  _OWORD v21[2] = a4;
  MEMORY[0x1F4188790](a1, a2);
  unint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v4;
  uint64_t v9 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v11 = v10 & ~v9;
  v21[0] = v4 + 64;
  if ((*(void *)(v4 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
  {
    uint64_t v12 = ~v9;
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v13 = v6 + 16;
    uint64_t v14 = v15;
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v13 - 8);
    do
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v22 + 48) + v16 * v11, a3);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v17)(v8, a3);
      if (v19) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
      uint64_t v13 = v18;
    }
    while (((*(void *)(v21[0] + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

uint64_t outlined init with copy of PluginPackage?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginPackage?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in PluginCapabilityCatalog.init(finder:)()
{
  OUTLINED_FUNCTION_24_3();
  uint64_t result = (*(uint64_t (**)(uint64_t))(v1 + 8))(v2);
  uint64_t *v0 = result;
  v0[1] = v4;
  return result;
}

uint64_t _sSayxGRi_zRi0_zlyxIsego_Sg13SiriUtilities24PluginCapabilityExposingRzAC0C7PackageRzlWOe(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v3 = 0;
  uint64_t v38 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v5 = a1 + 64;
  uint64_t v4 = v6;
  uint64_t v7 = 1 << *(unsigned char *)(v5 - 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v4;
  uint64_t v31 = v5;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  long long v33 = (void *)result;
  uint64_t v34 = result + 64;
  if ((v8 & v4) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  int64_t v11 = v3;
  for (unint64_t i = v10 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v15 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v38 + 48) + 16 * i);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    outlined init with copy of CacheDataSource(*(void *)(v38 + 56) + 40 * i, (uint64_t)v35);
    uint64_t v20 = v36;
    uint64_t v21 = v37;
    __swift_project_boxed_opaque_existential_1(v35, v36);
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 16);
    swift_bridgeObjectRetain();
    uint64_t v23 = v22(v20, v21);
    uint64_t v25 = v24;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    uint64_t result = (uint64_t)v33;
    *(void *)(v34 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    id v26 = (void *)(v33[6] + 16 * i);
    void *v26 = v19;
    v26[1] = v18;
    int64_t v27 = (uint64_t *)(v33[7] + 16 * i);
    uint64_t *v27 = v23;
    v27[1] = v25;
    uint64_t v28 = v33[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v33[2] = v30;
    int64_t v3 = v11;
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_24;
    }
    if (v13 >= v32) {
      return result;
    }
    unint64_t v14 = *(void *)(v31 + 8 * v13);
    int64_t v15 = v3 + 1;
    if (!v14)
    {
      int64_t v15 = v3 + 2;
      if (v3 + 2 >= v32) {
        return result;
      }
      unint64_t v14 = *(void *)(v31 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v3 + 3;
        if (v3 + 3 >= v32) {
          return result;
        }
        unint64_t v14 = *(void *)(v31 + 8 * v15);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v9 = (v14 - 1) & v14;
    int64_t v11 = v15;
  }
  uint64_t v16 = v3 + 4;
  if (v3 + 4 >= v32) {
    return result;
  }
  unint64_t v14 = *(void *)(v31 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v3 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v32) {
      return result;
    }
    unint64_t v14 = *(void *)(v31 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1C9E98A70()
{
  return OUTLINED_FUNCTION_4_15(v0, 40);
}

uint64_t partial apply for implicit closure #1 in PluginCapabilityCatalog.init(finder:)()
{
  return static Array._allocateUninitialized(_:)();
}

uint64_t sub_1C9E98A88()
{
  return OUTLINED_FUNCTION_4_15(v0, 56);
}

uint64_t partial apply for thunk for @callee_guaranteed () -> (@owned [A])@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 40))();
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in PluginCapabilityCatalog.getAll(capability:)()
{
  return (*(uint64_t (**)(void, void))(v0[3] + 56))(v0[5], v0[2]);
}

uint64_t partial apply for closure #3 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #3 in static PluginCapabilityCatalog.load<A>(finder:cache:)(*(void *)(v1 + 56), a1);
}

uint64_t type metadata accessor for PluginCapabilityCatalog()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #4 in static PluginCapabilityCatalog.load<A>(finder:cache:)()
{
  return closure #4 in static PluginCapabilityCatalog.load<A>(finder:cache:)(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48));
}

uint64_t partial apply for closure #1 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in static PluginCapabilityCatalog.load<A>(finder:cache:)(*(void *)(v1 + 24), *(void *)(v1 + 48), a1);
}

uint64_t sub_1C9E98B90()
{
  return OUTLINED_FUNCTION_4_15(v0, 56);
}

uint64_t partial apply for closure #2 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #2 in static PluginCapabilityCatalog.load<A>(finder:cache:)(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 40), a3);
}

uint64_t sub_1C9E98BAC()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@out A?)(void *a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 56))(*a1, a1[1]);
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t type metadata accessor for PluginCapabilityCatalog.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in PluginCapabilityCatalog.encode(to:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in PluginCapabilityCatalog.encode(to:)(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t outlined destroy of PluginPackage?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_5_4();
  v3();
  return a1;
}

unint64_t lazy protocol witness table accessor for type PluginCatalogError and conformance PluginCatalogError()
{
  unint64_t result = lazy protocol witness table cache variable for type PluginCatalogError and conformance PluginCatalogError;
  if (!lazy protocol witness table cache variable for type PluginCatalogError and conformance PluginCatalogError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginCatalogError and conformance PluginCatalogError);
  }
  return result;
}

uint64_t sub_1C9E98D00()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out A?)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(void *))(v2 + 40);
  v5[0] = a1;
  v5[1] = a2;
  return v3(v5);
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in PluginCapabilityCatalog.init(from:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in PluginCapabilityCatalog.init(from:)(a1);
}

uint64_t partial apply for closure #2 in PluginCapabilityCatalog.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #2 in PluginCapabilityCatalog.init(from:)(a1, *(void (**)(void, void))(v2 + 40), *(void *)(v2 + 16), *(void *)(v2 + 32), a2);
}

uint64_t base witness table accessor for Equatable in PluginCapabilityCatalog<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PluginCapabilityCatalog<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in PluginCapabilityCatalog<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for PluginCapabilityExposing.PluginCapability : Decodable in PluginCapabilityCatalog<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for PluginCapabilityExposing.PluginCapability : Encodable in PluginCapabilityCatalog<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for PluginCapabilityExposing.PluginCapability : Hashable in PluginCapabilityCatalog<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_1C9E98F28@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_0_7();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 88))();
  *a1 = result;
  return result;
}

uint64_t sub_1C9E98F74@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_0_7();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 176))();
  *a1 = result;
  return result;
}

uint64_t sub_1C9E98FC0()
{
  return 24;
}

__n128 sub_1C9E98FCC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for PluginCatalog()
{
  return self;
}

uint64_t method lookup function for PluginCatalog(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PluginCatalog);
}

uint64_t dispatch thunk of PluginCatalog.packageCache.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of PluginCatalog.packageCache.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of PluginCatalog.packageCache.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PluginCatalog.__allocating_init(packageCache:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of PluginCatalog.__allocating_init(packages:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of PluginCatalog.getPluginPackage(id:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PluginCatalog.getPlugin(id:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t type metadata completion function for PluginCapabilityCatalog()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for PluginCapabilityCatalog(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PluginCapabilityCatalog);
}

uint64_t dispatch thunk of PluginCapabilityCatalog.capabilityCache.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of PluginCapabilityCatalog.capabilityCache.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of PluginCapabilityCatalog.capabilityCache.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of PluginCapabilityCatalog.__allocating_init(finder:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of PluginCapabilityCatalog.getPackages(capability:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of PluginCapabilityCatalog.getAll(capability:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of PluginCapabilityCatalog.advertisedCapabilities()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of PluginCapabilityCatalog.exposedCapabilities()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of PluginCapabilityCatalog.get(capability:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of PluginCapabilityCatalog.encode(to:)()
{
  OUTLINED_FUNCTION_0_7();
  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of PluginCapabilityCatalog.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t type metadata instantiation function for PluginCapabilityCatalog.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

unsigned char *storeEnumTagSinglePayload for PluginCapabilityCatalog.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9E993BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

unint64_t destroy for PluginCatalogError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for PluginCatalogError(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    uint64_t v4 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for PluginCatalogError(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PluginCatalogError(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PluginCatalogError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PluginCatalogError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for PluginCatalogError(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for PluginCatalogError(void *result, int a2)
{
  if (a2 < 0)
  {
    result[2] = 0;
    result[3] = 0;
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginCatalogError()
{
  return &type metadata for PluginCatalogError;
}

uint64_t partial apply for closure #1 in closure #1 in PluginCapabilityCatalog.init(from:)(void *a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 40))(*a1, a1[1]);
}

uint64_t lazy protocol witness table accessor for type [String] and conformance [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in PluginCapabilityCatalog.encode(to:)()
{
  OUTLINED_FUNCTION_24_3();
  uint64_t result = (*(uint64_t (**)(uint64_t))(v1 + 16))(v2);
  uint64_t *v0 = result;
  v0[1] = v4;
  return result;
}

void OUTLINED_FUNCTION_1_16()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t OUTLINED_FUNCTION_4_15(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186498](a1, a2, 7);
}

uint64_t OUTLINED_FUNCTION_5_13()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_8_16()
{
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t OUTLINED_FUNCTION_10_11()
{
  return 0x6F6973726556736FLL;
}

uint64_t OUTLINED_FUNCTION_12_12(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(v3 - 68) = a3;
  *(void *)(v3 - 96) = a1;
  *(void *)(v3 - 88) = a2;
  return type metadata accessor for OSSignpostID();
}

uint64_t OUTLINED_FUNCTION_14_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_16_8()
{
  return v0 - 72;
}

uint64_t OUTLINED_FUNCTION_17_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_26_2()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_27_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_30_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_31()
{
  uint64_t v3 = *(void *)(v1 - 280);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v0, (uint64_t *)(v1 - 208));
}

uint64_t OUTLINED_FUNCTION_32_0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return 0;
}

uint64_t OUTLINED_FUNCTION_33_0()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t OUTLINED_FUNCTION_36_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_37_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_38_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_39_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_41_0()
{
  return v0;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v27 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    unint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v28 = *a2;
      uint64_t v21 = *a2;
      *a2 = 0x8000000000000000;
      Swift::Int v22 = *(void *)(v21 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Data>);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v22);
      swift_bridgeObjectRelease();
      uint64_t v23 = (uint64_t *)(*(void *)(v28 + 56) + 16 * v17);
      uint64_t v24 = *v23;
      unint64_t v25 = v23[1];
      _NativeDictionary._delete(at:)();
      *a2 = v28;
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v24, v25);
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v27) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v26 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v27) {
        return swift_release();
      }
      unint64_t v12 = *(void *)(v26 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v27) {
          return swift_release();
        }
        unint64_t v12 = *(void *)(v26 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v27) {
            return swift_release();
          }
          unint64_t v12 = *(void *)(v26 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v6 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v27) {
    return swift_release();
  }
  unint64_t v12 = *(void *)(v26 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v27) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v26 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;

  uint64_t v3 = a1;
  BOOL v29 = a1 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  uint64_t v30 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  uint64_t v31 = v8;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
    unint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v18 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    if (v20)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      int64_t v32 = *a2;
      Swift::Int v22 = *a2;
      *a2 = 0x8000000000000000;
      uint64_t v23 = v3;
      uint64_t v24 = *(void *)(v22 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Data>);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v24);
      swift_bridgeObjectRelease();
      unint64_t v25 = (uint64_t *)(*(void *)(v32 + 56) + 16 * v18);
      uint64_t v26 = *v25;
      int64_t v27 = v25[1];
      _NativeDictionary._delete(at:)();
      *a2 = v32;
      swift_bridgeObjectRelease();
      uint64_t v28 = v27;
      uint64_t v3 = v23;
      outlined consume of Data._Representation(v26, v28);
    }
    specialized Set._Variant.remove(_:)(v17, v16);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v8 = v31;
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v30) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v29 + 8 * v11);
    int64_t v13 = v8 + 1;
    if (!v12)
    {
      int64_t v13 = v8 + 2;
      if (v8 + 2 >= v30) {
        return swift_release();
      }
      unint64_t v12 = *(void *)(v29 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v8 + 3;
        if (v8 + 3 >= v30) {
          return swift_release();
        }
        unint64_t v12 = *(void *)(v29 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v8 + 4;
          if (v8 + 4 >= v30) {
            return swift_release();
          }
          unint64_t v12 = *(void *)(v29 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v6 = (v12 - 1) & v12;
    uint64_t v31 = v13;
  }
  unint64_t v14 = v8 + 5;
  if (v8 + 5 >= v30) {
    return swift_release();
  }
  unint64_t v12 = *(void *)(v29 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v8 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v30) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v29 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1)
{
  specialized _NativeDictionary.makeIterator()(v18, a1);
  uint64_t v1 = v18[0];
  uint64_t v19 = v18[1];
  int64_t v2 = v18[3];
  unint64_t v3 = v18[4];
  int64_t v4 = (unint64_t)(v18[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v6 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  unint64_t v7 = v6 | (v2 << 6);
  while (1)
  {
    unint64_t v12 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v7);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = (uint64_t *)(*(void *)(v1 + 56) + 16 * v7);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v16, v17);
    specialized Set._Variant.remove(_:)(v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = outlined consume of Data._Representation(v16, v17);
    if (v3) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v8 = v2 + 1;
    if (__OFADD__(v2, 1)) {
      break;
    }
    if (v8 >= v4) {
      return swift_release();
    }
    unint64_t v9 = *(void *)(v19 + 8 * v8);
    int64_t v10 = v2 + 1;
    if (!v9)
    {
      int64_t v10 = v2 + 2;
      if (v2 + 2 >= v4) {
        return swift_release();
      }
      unint64_t v9 = *(void *)(v19 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v2 + 3;
        if (v2 + 3 >= v4) {
          return swift_release();
        }
        unint64_t v9 = *(void *)(v19 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v2 + 4;
          if (v2 + 4 >= v4) {
            return swift_release();
          }
          unint64_t v9 = *(void *)(v19 + 8 * v10);
          if (!v9)
          {
            int64_t v10 = v2 + 5;
            if (v2 + 5 >= v4) {
              return swift_release();
            }
            unint64_t v9 = *(void *)(v19 + 8 * v10);
            if (!v9)
            {
              int64_t v11 = v2 + 6;
              while (v11 < v4)
              {
                unint64_t v9 = *(void *)(v19 + 8 * v11++);
                if (v9)
                {
                  int64_t v10 = v11 - 1;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v3 = (v9 - 1) & v9;
    unint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
    int64_t v2 = v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)();
  uint64_t v7 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)();
      swift_bridgeObjectRelease();
      v4 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v7;
  }
  else
  {
    uint64_t v5 = v2;
    swift_bridgeObjectRelease();
  }
  return v5;
}

void *specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v11 = Set.init(minimumCapacity:)();
  uint64_t result = specialized _NativeDictionary.makeIterator()(v12, a1);
  uint64_t v3 = v12[1];
  int64_t v4 = v12[3];
  uint64_t v5 = v13;
  int64_t v6 = (unint64_t)(v12[2] + 64) >> 6;
  if (!v13) {
    goto LABEL_3;
  }
LABEL_2:
  v5 &= v5 - 1;
  while (1)
  {
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v7 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_21;
    }
    uint64_t v8 = *(void *)(v3 + 8 * v7);
    int64_t v9 = v4 + 1;
    if (!v8)
    {
      int64_t v9 = v4 + 2;
      if (v4 + 2 >= v6) {
        goto LABEL_21;
      }
      uint64_t v8 = *(void *)(v3 + 8 * v9);
      if (!v8)
      {
        int64_t v9 = v4 + 3;
        if (v4 + 3 >= v6) {
          goto LABEL_21;
        }
        uint64_t v8 = *(void *)(v3 + 8 * v9);
        if (!v8)
        {
          int64_t v9 = v4 + 4;
          if (v4 + 4 >= v6) {
            goto LABEL_21;
          }
          uint64_t v8 = *(void *)(v3 + 8 * v9);
          if (!v8)
          {
            int64_t v9 = v4 + 5;
            if (v4 + 5 >= v6) {
              goto LABEL_21;
            }
            uint64_t v8 = *(void *)(v3 + 8 * v9);
            if (!v8)
            {
              int64_t v10 = v4 + 6;
              while (v10 < v6)
              {
                uint64_t v8 = *(void *)(v3 + 8 * v10++);
                if (v8)
                {
                  int64_t v9 = v10 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              swift_release();
              return (void *)v11;
            }
          }
        }
      }
    }
LABEL_18:
    uint64_t v5 = (v8 - 1) & v8;
    int64_t v4 = v9;
  }
  __break(1u);
  return result;
}

uint64_t SiriEnvironmentKeyValuePairs.addedValues.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SiriEnvironmentKeyValuePairs.removedValues.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SiriEnvironmentKeyValuePairs.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  uint64_t v3 = MEMORY[0x1E4FBC870];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t SiriEnvironmentKeyValuePairs.update(addingValues:removingKeys:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = swift_bridgeObjectRetain();
  int64_t v7 = specialized Set.init<A>(_:)(v6);
  uint64_t v8 = swift_bridgeObjectRetain();
  int64_t v9 = specialized Set.init<A>(_:)(v8);
  specialized Set.subtracting(_:)((uint64_t)v9, (uint64_t)v7);
  swift_bridgeObjectRelease();
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = specialized Set.init<A>(_:)(v10);
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = specialized Set.init<A>(_:)(v12);
  specialized _NativeSet.intersection(_:)((uint64_t)v13, (uint64_t)v11);
  swift_bridgeObjectRelease();
  if (one-time initialization token for environment != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.environment);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    os_log_type_t type = v16;
    uint64_t v17 = swift_slowAlloc();
    v39[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315650;
    swift_bridgeObjectRetain();
    uint64_t v18 = Set.description.getter();
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v21 = Set.description.getter();
    unint64_t v23 = v22;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v24 = Set.description.getter();
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9E4C000, v15, type, "SiriEnvironmentKeyPairs adding keys: %s, overwriting keys: %s, and removing keys: %s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v27 = swift_bridgeObjectRetain();
  specialized Dictionary._Variant.merge<A>(_:uniquingKeysWith:)(v27, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v3);
  specialized Sequence.forEach(_:)(a2, v3);
  uint64_t v28 = v3[1];
  uint64_t v29 = swift_bridgeObjectRetain();
  v3[1] = specialized Set.union<A>(_:)(v29, v28);
  specialized Sequence.forEach(_:)(a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v30 = specialized _NativeSet.genericIntersection<A>(_:)(a1, a2);
  swift_bridgeObjectRelease();
  if (*(void *)(v30 + 16))
  {
    swift_retain_n();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      long long v33 = (uint8_t *)swift_slowAlloc();
      v39[0] = swift_slowAlloc();
      *(_DWORD *)long long v33 = 136315138;
      swift_retain();
      uint64_t v34 = Set.description.getter();
      unint64_t v36 = v35;
      swift_release();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C9E4C000, v31, v32, "Atempted to both add and remove keys %s, these keys will be ignored", v33, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      swift_release_n();
    }
    specialized Sequence.forEach(_:)(v30, v3);
  }
  return swift_release();
}

uint64_t specialized Set.subtracting(_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) <= *(void *)(a2 + 16) >> 3)
  {
    specialized Set._subtract<A>(_:)(a1);
    return a2;
  }
  else
  {
    return specialized _NativeSet.subtracting<A>(_:)(a1, a2);
  }
}

uint64_t specialized Set.union<A>(_:)(uint64_t result, uint64_t a2)
{
  int64_t v2 = 0;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  for (v6 &= v6 - 1; ; uint64_t v6 = (v9 - 1) & v9)
  {
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v8 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v8 >= v7) {
      goto LABEL_23;
    }
    uint64_t v9 = *(void *)(v3 + 8 * v8);
    ++v2;
    if (!v9)
    {
      int64_t v2 = v8 + 1;
      if (v8 + 1 >= v7) {
        goto LABEL_23;
      }
      uint64_t v9 = *(void *)(v3 + 8 * v2);
      if (!v9)
      {
        int64_t v2 = v8 + 2;
        if (v8 + 2 >= v7) {
          goto LABEL_23;
        }
        uint64_t v9 = *(void *)(v3 + 8 * v2);
        if (!v9)
        {
          int64_t v2 = v8 + 3;
          if (v8 + 3 >= v7) {
            goto LABEL_23;
          }
          uint64_t v9 = *(void *)(v3 + 8 * v2);
          if (!v9) {
            break;
          }
        }
      }
    }
LABEL_20:
    ;
  }
  int64_t v10 = v8 + 4;
  if (v10 >= v7)
  {
LABEL_23:
    swift_release();
    return a2;
  }
  uint64_t v9 = *(void *)(v3 + 8 * v10);
  if (v9)
  {
    int64_t v2 = v10;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v2 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v2 >= v7) {
      goto LABEL_23;
    }
    uint64_t v9 = *(void *)(v3 + 8 * v2);
    ++v10;
    if (v9) {
      goto LABEL_20;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t SiriEnvironmentKeyValuePairs.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C61566465646461 && a2 == 0xEB00000000736575;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x566465766F6D6572 && a2 == 0xED00007365756C61)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t SiriEnvironmentKeyValuePairs.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x566465766F6D6572;
  }
  else {
    return 0x6C61566465646461;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriEnvironmentKeyValuePairs.CodingKeys()
{
  return SiriEnvironmentKeyValuePairs.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriEnvironmentKeyValuePairs.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = SiriEnvironmentKeyValuePairs.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriEnvironmentKeyValuePairs.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriEnvironmentKeyValuePairs.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t SiriEnvironmentKeyValuePairs.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriEnvironmentKeyValuePairs.CodingKeys>);
  OUTLINED_FUNCTION_1_5();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7, v8);
  int64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v1;
  uint64_t v13 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = v11;
  char v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
  lazy protocol witness table accessor for type [String : Data] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : Data] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type Data and conformance Data);
  OUTLINED_FUNCTION_4_16();
  if (!v2)
  {
    uint64_t v15 = v13;
    char v14 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>);
    OUTLINED_FUNCTION_4_16();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v4);
}

uint64_t SiriEnvironmentKeyValuePairs.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriEnvironmentKeyValuePairs.CodingKeys>);
  OUTLINED_FUNCTION_1_5();
  MEMORY[0x1F4188790](v4, v5);
  Dictionary.init(dictionaryLiteral:)();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
    lazy protocol witness table accessor for type [String : Data] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : Data] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type Data and conformance Data);
    OUTLINED_FUNCTION_3_18();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>);
    OUTLINED_FUNCTION_3_18();
    uint64_t v6 = OUTLINED_FUNCTION_6_17();
    v7(v6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v10;
    a2[1] = v10;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SiriEnvironmentKeyValuePairs@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return SiriEnvironmentKeyValuePairs.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriEnvironmentKeyValuePairs(void *a1)
{
  return SiriEnvironmentKeyValuePairs.encode(to:)(a1);
}

void specialized _NativeSet.copy()()
{
  uint64_t v6 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v7 = OUTLINED_FUNCTION_9_14();
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    swift_release();
    uint64_t *v6 = v7;
    return;
  }
  uint64_t v8 = (void *)OUTLINED_FUNCTION_0_17();
  if (v11) {
    BOOL v12 = (unint64_t)v8 >= v10;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12) {
    memmove(v8, v2, 8 * v9);
  }
  OUTLINED_FUNCTION_1_17();
  if (!v5) {
    goto LABEL_10;
  }
LABEL_9:
  OUTLINED_FUNCTION_8_17();
  while (1)
  {
    OUTLINED_FUNCTION_5_14(v13);
    if (v5) {
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v14 >= v3) {
      goto LABEL_26;
    }
    ++v4;
    if (!*((void *)v2 + v14))
    {
      uint64_t v4 = v14 + 1;
      if (v14 + 1 >= v3) {
        goto LABEL_26;
      }
      if (!*((void *)v2 + v4))
      {
        uint64_t v4 = v14 + 2;
        if (v14 + 2 >= v3) {
          goto LABEL_26;
        }
        if (!*((void *)v2 + v4)) {
          break;
        }
      }
    }
LABEL_23:
    OUTLINED_FUNCTION_7_13();
  }
  uint64_t v15 = v14 + 3;
  if (v15 >= v3) {
    goto LABEL_26;
  }
  if (*((void *)v2 + v15))
  {
    uint64_t v4 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v3) {
      goto LABEL_26;
    }
    ++v15;
    if (*((void *)v2 + v4)) {
      goto LABEL_23;
    }
  }
LABEL_28:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v6 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<TypeIdentifier>);
  uint64_t v7 = OUTLINED_FUNCTION_9_14();
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    swift_release();
    uint64_t *v6 = v7;
    return;
  }
  uint64_t v8 = (void *)OUTLINED_FUNCTION_0_17();
  if (v11) {
    BOOL v12 = (unint64_t)v8 >= v10;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12) {
    memmove(v8, v2, 8 * v9);
  }
  OUTLINED_FUNCTION_1_17();
  if (!v5) {
    goto LABEL_10;
  }
LABEL_9:
  OUTLINED_FUNCTION_8_17();
  while (1)
  {
    OUTLINED_FUNCTION_5_14(v13);
    if (v5) {
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v14 >= v3) {
      goto LABEL_26;
    }
    ++v4;
    if (!*((void *)v2 + v14))
    {
      uint64_t v4 = v14 + 1;
      if (v14 + 1 >= v3) {
        goto LABEL_26;
      }
      if (!*((void *)v2 + v4))
      {
        uint64_t v4 = v14 + 2;
        if (v14 + 2 >= v3) {
          goto LABEL_26;
        }
        if (!*((void *)v2 + v4)) {
          break;
        }
      }
    }
LABEL_23:
    OUTLINED_FUNCTION_7_13();
  }
  uint64_t v15 = v14 + 3;
  if (v15 >= v3) {
    goto LABEL_26;
  }
  if (*((void *)v2 + v15))
  {
    uint64_t v4 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v3) {
      goto LABEL_26;
    }
    ++v15;
    if (*((void *)v2 + v4)) {
      goto LABEL_23;
    }
  }
LABEL_28:
  __break(1u);
}

void *specialized _NativeSet.copy()()
{
  uint64_t v3 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<TransformationCapability>);
  uint64_t v4 = OUTLINED_FUNCTION_9_14();
  if (!*(void *)(v1 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v3 = v4;
    return result;
  }
  uint64_t result = (void *)OUTLINED_FUNCTION_0_17();
  if (v8) {
    BOOL v9 = (unint64_t)result >= v7;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    uint64_t result = memmove(result, v2, 8 * v6);
  }
  int64_t v10 = 0;
  *(void *)(v4 + 16) = *(void *)(v1 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v12 = *(void *)(v1 + 56);
  uint64_t v13 = -1;
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  unint64_t v14 = v13 & v12;
  int64_t v15 = (unint64_t)(v11 + 63) >> 6;
  if ((v13 & v12) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v16 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (unint64_t i = v16 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v10 << 6))
  {
    unint64_t v21 = *(void *)(v1 + 48) + (i << 6);
    uint64_t v23 = *(void *)(v21 + 8);
    uint64_t v22 = *(void *)(v21 + 16);
    uint64_t v25 = *(void *)(v21 + 40);
    uint64_t v24 = *(void *)(v21 + 48);
    uint64_t v26 = *(void *)(v21 + 56);
    unint64_t v27 = *(void *)(v4 + 48) + (i << 6);
    long long v28 = *(_OWORD *)(v21 + 24);
    *(unsigned char *)unint64_t v27 = *(unsigned char *)v21;
    *(void *)(v27 + 8) = v23;
    *(void *)(v27 + 16) = v22;
    *(_OWORD *)(v27 + 24) = v28;
    *(void *)(v27 + 40) = v25;
    *(void *)(v27 + 48) = v24;
    *(void *)(v27 + 56) = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v15) {
      goto LABEL_28;
    }
    unint64_t v19 = *((void *)v2 + v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v15) {
        goto LABEL_28;
      }
      unint64_t v19 = *((void *)v2 + v10);
      if (!v19)
      {
        int64_t v10 = v18 + 2;
        if (v18 + 2 >= v15) {
          goto LABEL_28;
        }
        unint64_t v19 = *((void *)v2 + v10);
        if (!v19) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v14 = (v19 - 1) & v19;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v15) {
    goto LABEL_28;
  }
  unint64_t v19 = *((void *)v2 + v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v15) {
      goto LABEL_28;
    }
    unint64_t v19 = *((void *)v2 + v10);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  *a1 = a4;
  a1[1] = a5;
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a4, a5);
  return a2;
}

uint64_t specialized Dictionary._Variant.merge<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *a4;
  *a4 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, a2, a3, isUniquelyReferenced_nonNull_native, &v10);
  *a4 = v10;
  return swift_bridgeObjectRelease();
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    unint64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.remove(_:)(v15, v16);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v11 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v6 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 < v7)
  {
    unint64_t v12 = *(void *)(v3 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_21;
        }
      }
    }
    int64_t v8 = v13;
    goto LABEL_21;
  }
LABEL_24:

  return swift_release();
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v38 = a1 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v36 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1 << -(char)v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & v4;
    int64_t v37 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v11 = v10 | (v9 << 6);
    while (1)
    {
      uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if ((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21)) {
        break;
      }
LABEL_37:
      swift_bridgeObjectRelease();
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v12 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_50;
      }
      if (v12 >= v37) {
        goto LABEL_48;
      }
      unint64_t v13 = *(void *)(v38 + 8 * v12);
      int64_t v14 = v9 + 1;
      if (!v13)
      {
        int64_t v14 = v9 + 2;
        if (v9 + 2 >= v37) {
          goto LABEL_48;
        }
        unint64_t v13 = *(void *)(v38 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v9 + 3;
          if (v9 + 3 >= v37) {
            goto LABEL_48;
          }
          unint64_t v13 = *(void *)(v38 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 4;
            if (v9 + 4 >= v37) {
              goto LABEL_48;
            }
            unint64_t v13 = *(void *)(v38 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v9 + 5;
              if (v9 + 5 >= v37)
              {
LABEL_48:
                outlined consume of [String : Data].Iterator._Variant();
                return v2;
              }
              unint64_t v13 = *(void *)(v38 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  int64_t v14 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    break;
                  }
                  if (v14 >= v37) {
                    goto LABEL_48;
                  }
                  unint64_t v13 = *(void *)(v38 + 8 * v14);
                  ++v15;
                  if (v13) {
                    goto LABEL_22;
                  }
                }
LABEL_50:
                __break(1u);
              }
              int64_t v14 = v9 + 5;
            }
          }
        }
      }
LABEL_22:
      unint64_t v7 = (v13 - 1) & v13;
      unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
      int64_t v9 = v14;
    }
    uint64_t v22 = *(void *)(v2 + 48);
    uint64_t v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
      uint64_t v39 = a1;
      uint64_t v40 = v38;
      uint64_t v41 = v36;
      int64_t v42 = v9;
      unint64_t v43 = v7;
    }
    else
    {
      uint64_t v25 = ~v20;
      do
      {
        unint64_t v21 = (v21 + 1) & v25;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          goto LABEL_37;
        }
        uint64_t v26 = (void *)(v22 + 16 * v21);
        BOOL v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      uint64_t v39 = a1;
      uint64_t v40 = v38;
      uint64_t v41 = v36;
      int64_t v42 = v9;
      unint64_t v43 = v7;
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    char v30 = *(unsigned char *)(v2 + 32);
    unint64_t v31 = (unint64_t)((1 << v30) + 63) >> 6;
    size_t v32 = 8 * v31;
    if ((v30 & 0x3Fu) < 0xE
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      MEMORY[0x1F4188790](isStackAllocationSafe, v29);
      memcpy((char *)&v36 - ((v32 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v32);
      uint64_t v33 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)&v36 - ((v32 + 15) & 0x3FFFFFFFFFFFFFF0), v31, v2, v21, &v39);
      swift_release();
      outlined consume of [String : Data].Iterator._Variant();
    }
    else
    {
      uint64_t v34 = (void *)swift_slowAlloc();
      memcpy(v34, (const void *)(v2 + 56), v32);
      uint64_t v33 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v34, v31, v2, v21, &v39);
      swift_release();
      outlined consume of [String : Data].Iterator._Variant();
      MEMORY[0x1CB792FA0](v34, -1, -1);
    }
    return v33;
  }
  else
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
}

uint64_t specialized _NativeSet.genericIntersection<A>(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x1E4F143B8];
  char v4 = *(unsigned char *)(a2 + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  if ((v4 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe, a2);
    uint64_t v6 = (void *)((char *)v10 - ((8 * v5 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v5, v6);
    uint64_t v7 = specialized closure #1 in _NativeSet.genericIntersection<A>(_:)(v6, v5, v3, a2);
    swift_release();
  }
  else
  {
    uint64_t v8 = (unint64_t *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v5, v8);
    uint64_t v7 = specialized closure #1 in _NativeSet.genericIntersection<A>(_:)(v8, v5, v3, a2);
    swift_release();
    MEMORY[0x1CB792FA0](v8, -1, -1);
  }
  return v7;
}

uint64_t specialized closure #1 in _NativeSet.genericIntersection<A>(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized _NativeDictionary.makeIterator()(v38, a3);
  uint64_t v36 = v38[0];
  int64_t v37 = v38[3];
  unint64_t v5 = v38[4];
  uint64_t v34 = v38[1];
  int64_t v35 = (unint64_t)(v38[2] + 64) >> 6;
  uint64_t v39 = a4 + 56;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v7 = 0;
LABEL_2:
  uint64_t v32 = v7;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v37 << 6);
      goto LABEL_21;
    }
    int64_t v10 = v37 + 1;
    if (__OFADD__(v37, 1)) {
      break;
    }
    if (v10 >= v35) {
      goto LABEL_43;
    }
    unint64_t v11 = *(void *)(v34 + 8 * v10);
    int64_t v12 = v37 + 1;
    if (!v11)
    {
      int64_t v12 = v37 + 2;
      if (v37 + 2 >= v35) {
        goto LABEL_43;
      }
      unint64_t v11 = *(void *)(v34 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v37 + 3;
        if (v37 + 3 >= v35) {
          goto LABEL_43;
        }
        unint64_t v11 = *(void *)(v34 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v37 + 4;
          if (v37 + 4 >= v35) {
            goto LABEL_43;
          }
          unint64_t v11 = *(void *)(v34 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v37 + 5;
            if (v37 + 5 >= v35) {
              goto LABEL_43;
            }
            unint64_t v11 = *(void *)(v34 + 8 * v12);
            if (!v11)
            {
              int64_t v13 = v37 + 6;
              while (v13 < v35)
              {
                unint64_t v11 = *(void *)(v34 + 8 * v13++);
                if (v11)
                {
                  int64_t v12 = v13 - 1;
                  goto LABEL_20;
                }
              }
LABEL_43:
              swift_release();
              swift_retain();
              return specialized _NativeSet.extractSubset(using:count:)(a1, a2, v32, a4);
            }
          }
        }
      }
    }
LABEL_20:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    int64_t v37 = v12;
LABEL_21:
    int64_t v14 = (uint64_t *)(*(void *)(v36 + 48) + 16 * v9);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v17 = Hasher._finalize()();
    uint64_t v18 = -1 << *(unsigned char *)(a4 + 32);
    unint64_t v19 = v17 & ~v18;
    unint64_t v20 = v19 >> 6;
    uint64_t v21 = 1 << v19;
    if (((1 << v19) & *(void *)(v39 + 8 * (v19 >> 6))) == 0) {
      goto LABEL_38;
    }
    uint64_t v22 = *(void *)(a4 + 48);
    uint64_t v23 = (void *)(v22 + 16 * v19);
    BOOL v24 = *v23 == v16 && v23[1] == v15;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t result = swift_bridgeObjectRelease();
LABEL_28:
      unint64_t v25 = a1[v20];
      a1[v20] = v21 | v25;
      if ((v21 & v25) == 0)
      {
        uint64_t v7 = v32 + 1;
        if (!__OFADD__(v32, 1)) {
          goto LABEL_2;
        }
        __break(1u);
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v26 = ~v18;
      for (unint64_t i = v19 + 1; ; unint64_t i = v28 + 1)
      {
        unint64_t v28 = i & v26;
        if (((*(void *)(v39 + (((i & v26) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v26)) & 1) == 0) {
          break;
        }
        uint64_t v29 = (void *)(v22 + 16 * v28);
        BOOL v30 = *v29 == v16 && v29[1] == v15;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v20 = v28 >> 6;
          uint64_t v21 = 1 << v28;
          goto LABEL_28;
        }
      }
LABEL_38:
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.intersection(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x1E4F143B8];
  char v4 = *(unsigned char *)(a2 + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  if ((v4 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe, a2);
    uint64_t v6 = (void *)((char *)v10 - ((8 * v5 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v5, v6);
    uint64_t v7 = specialized closure #1 in _NativeSet.intersection(_:)((uint64_t)v6, v5, a2, v3);
    swift_release();
  }
  else
  {
    unint64_t v8 = (void *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v5, v8);
    uint64_t v7 = specialized closure #1 in _NativeSet.intersection(_:)((uint64_t)v8, v5, a2, v3);
    swift_release();
    MEMORY[0x1CB792FA0](v8, -1, -1);
  }
  return v7;
}

uint64_t specialized closure #1 in _NativeSet.intersection(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  uint64_t v57 = (unint64_t *)result;
  if (*(void *)(a4 + 16) >= *(void *)(a3 + 16))
  {
    int64_t v34 = 0;
    uint64_t v60 = a3 + 56;
    uint64_t v61 = 0;
    uint64_t v35 = 1 << *(unsigned char *)(a3 + 32);
    if (v35 < 64) {
      uint64_t v36 = ~(-1 << v35);
    }
    else {
      uint64_t v36 = -1;
    }
    unint64_t v37 = v36 & *(void *)(a3 + 56);
    int64_t v63 = (unint64_t)(v35 + 63) >> 6;
    uint64_t v38 = a4 + 56;
    while (1)
    {
      while (1)
      {
        if (v37)
        {
          unint64_t v39 = __clz(__rbit64(v37));
          v37 &= v37 - 1;
          unint64_t v40 = v39 | (v34 << 6);
        }
        else
        {
          int64_t v41 = v34 + 1;
          if (__OFADD__(v34, 1))
          {
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
            goto LABEL_84;
          }
          if (v41 >= v63) {
            goto LABEL_79;
          }
          unint64_t v42 = *(void *)(v60 + 8 * v41);
          ++v34;
          if (!v42)
          {
            int64_t v34 = v41 + 1;
            if (v41 + 1 >= v63) {
              goto LABEL_79;
            }
            unint64_t v42 = *(void *)(v60 + 8 * v34);
            if (!v42)
            {
              int64_t v34 = v41 + 2;
              if (v41 + 2 >= v63) {
                goto LABEL_79;
              }
              unint64_t v42 = *(void *)(v60 + 8 * v34);
              if (!v42)
              {
                int64_t v43 = v41 + 3;
                if (v43 >= v63) {
                  goto LABEL_79;
                }
                unint64_t v42 = *(void *)(v60 + 8 * v43);
                if (!v42)
                {
                  while (1)
                  {
                    int64_t v34 = v43 + 1;
                    if (__OFADD__(v43, 1)) {
                      goto LABEL_85;
                    }
                    if (v34 >= v63) {
                      break;
                    }
                    unint64_t v42 = *(void *)(v60 + 8 * v34);
                    ++v43;
                    if (v42) {
                      goto LABEL_61;
                    }
                  }
LABEL_79:
                  swift_retain();
                  return specialized _NativeSet.extractSubset(using:count:)(v57, a2, v61, v5);
                }
                int64_t v34 = v43;
              }
            }
          }
LABEL_61:
          unint64_t v37 = (v42 - 1) & v42;
          unint64_t v40 = __clz(__rbit64(v42)) + (v34 << 6);
        }
        uint64_t v44 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v40);
        uint64_t v46 = *v44;
        uint64_t v45 = v44[1];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v47 = Hasher._finalize()();
        uint64_t v48 = -1 << *(unsigned char *)(v4 + 32);
        unint64_t v49 = v47 & ~v48;
        if ((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49)) {
          break;
        }
LABEL_78:
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v5 = a3;
        uint64_t v4 = a4;
      }
      uint64_t v50 = *(void *)(a4 + 48);
      uint64_t v51 = (void *)(v50 + 16 * v49);
      BOOL v52 = *v51 == v46 && v51[1] == v45;
      if (!v52 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v53 = ~v48;
        do
        {
          unint64_t v49 = (v49 + 1) & v53;
          if (((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
            goto LABEL_78;
          }
          uint64_t v54 = (void *)(v50 + 16 * v49);
          BOOL v55 = *v54 == v46 && v54[1] == v45;
        }
        while (!v55 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      }
      uint64_t result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v57 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v5 = a3;
      uint64_t v4 = a4;
      if (v33) {
        goto LABEL_83;
      }
    }
  }
  int64_t v6 = 0;
  uint64_t v58 = a4 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a4 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  int64_t v59 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v61 = 0;
  uint64_t v10 = a3 + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      int64_t v62 = v6;
      unint64_t v12 = v11 | (v6 << 6);
      goto LABEL_22;
    }
    int64_t v13 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v13 >= v59) {
      goto LABEL_79;
    }
    unint64_t v14 = *(void *)(v58 + 8 * v13);
    int64_t v15 = v6 + 1;
    if (!v14)
    {
      int64_t v15 = v6 + 2;
      if (v6 + 2 >= v59) {
        goto LABEL_79;
      }
      unint64_t v14 = *(void *)(v58 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v6 + 3;
        if (v6 + 3 >= v59) {
          goto LABEL_79;
        }
        unint64_t v14 = *(void *)(v58 + 8 * v15);
        if (!v14) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v9 = (v14 - 1) & v14;
    int64_t v62 = v15;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
LABEL_22:
    Swift::Int v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v20 = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v5 + 32);
    unint64_t v22 = v20 & ~v21;
    unint64_t v23 = v22 >> 6;
    uint64_t v24 = 1 << v22;
    if (((1 << v22) & *(void *)(v10 + 8 * (v22 >> 6))) == 0) {
      goto LABEL_36;
    }
    uint64_t v25 = *(void *)(a3 + 48);
    uint64_t v26 = (void *)(v25 + 16 * v22);
    BOOL v27 = *v26 == v19 && v26[1] == v18;
    if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t result = swift_bridgeObjectRelease();
LABEL_38:
      int64_t v6 = v62;
      uint64_t v5 = a3;
      v57[v23] |= v24;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v4 = a4;
      if (v33) {
        goto LABEL_82;
      }
    }
    else
    {
      uint64_t v28 = ~v21;
      for (unint64_t i = v22 + 1; ; unint64_t i = v30 + 1)
      {
        unint64_t v30 = i & v28;
        if (((*(void *)(v10 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0) {
          break;
        }
        unint64_t v31 = (void *)(v25 + 16 * v30);
        BOOL v32 = *v31 == v19 && v31[1] == v18;
        if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v23 = v30 >> 6;
          uint64_t v24 = 1 << v30;
          goto LABEL_38;
        }
      }
LABEL_36:
      uint64_t result = swift_bridgeObjectRelease();
      int64_t v6 = v62;
      uint64_t v5 = a3;
      uint64_t v4 = a4;
    }
  }
  uint64_t v16 = v6 + 4;
  if (v6 + 4 >= v59) {
    goto LABEL_79;
  }
  unint64_t v14 = *(void *)(v58 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v6 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v59) {
      goto LABEL_79;
    }
    unint64_t v14 = *(void *)(v58 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_21;
    }
  }
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = MEMORY[0x1E4FBC870];
LABEL_35:
    swift_release();
    return v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_35;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_35;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    Swift::Int v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*(void *)(v8 + 48) + 16 * v23);
    void *v28 = v18;
    v28[1] = v19;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_35;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_35;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  specialized _NativeSet._delete(at:)(v8);
  *uint64_t v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t specialized closure #1 in _NativeSet.subtracting<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  unint64_t v39 = (unint64_t *)result;
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v40 = a3 + 56;
  while (2)
  {
    uint64_t v38 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_15;
        }
        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_48;
        }
        int64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
        int64_t v15 = a5[3];
        if (v13 >= v14) {
          goto LABEL_46;
        }
        uint64_t v16 = a5[1];
        unint64_t v17 = *(void *)(v16 + 8 * v13);
        if (!v17)
        {
          int64_t v18 = v9 + 2;
          int64_t v15 = v9 + 1;
          if (v9 + 2 >= v14) {
            goto LABEL_46;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            int64_t v15 = v9 + 2;
            if (v9 + 3 >= v14) {
              goto LABEL_46;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              int64_t v13 = v9 + 3;
              goto LABEL_14;
            }
            int64_t v18 = v9 + 4;
            int64_t v15 = v9 + 3;
            if (v9 + 4 >= v14) {
              goto LABEL_46;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (!v17)
            {
              int64_t v13 = v9 + 5;
              int64_t v15 = v9 + 4;
              if (v9 + 5 >= v14) {
                goto LABEL_46;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v13);
              if (!v17)
              {
                int64_t v36 = v9 + 6;
                while (v36 < v14)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v36++);
                  if (v17)
                  {
                    int64_t v13 = v36 - 1;
                    goto LABEL_14;
                  }
                }
                int64_t v15 = v14 - 1;
LABEL_46:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain();
                return specialized _NativeSet.extractSubset(using:count:)(v39, a2, v38, a3);
              }
              goto LABEL_14;
            }
          }
          int64_t v13 = v18;
        }
LABEL_14:
        uint64_t v11 = (v17 - 1) & v17;
        unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
        int64_t v9 = v13;
LABEL_15:
        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v22 = Hasher._finalize()();
        uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = 1 << v24;
        if (((1 << v24) & *(void *)(v40 + 8 * (v24 >> 6))) == 0) {
          goto LABEL_32;
        }
        uint64_t v27 = *(void *)(a3 + 48);
        uint64_t v28 = (void *)(v27 + 16 * v24);
        BOOL v29 = *v28 == v21 && v28[1] == v20;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        uint64_t v31 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v33 + 1)
        {
          unint64_t v33 = i & v31;
          if (((*(void *)(v40 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0) {
            break;
          }
          int64_t v34 = (void *)(v27 + 16 * v33);
          BOOL v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v25 = v33 >> 6;
            uint64_t v26 = 1 << v33;
            goto LABEL_22;
          }
        }
LABEL_32:
        uint64_t result = swift_bridgeObjectRelease();
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_22:
      unint64_t v30 = v39[v25];
      v39[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    uint64_t v8 = v38 - 1;
    if (__OFSUB__(v38, 1))
    {
LABEL_48:
      __break(1u);
      return result;
    }
    if (v38 != 1) {
      continue;
    }
    return MEMORY[0x1E4FBC870];
  }
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        Swift::Int v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 >= v9 && v2 >= v11)
          {
LABEL_15:
            uint64_t v14 = *(void *)(v3 + 48);
            int64_t v15 = (_OWORD *)(v14 + 16 * v2);
            uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
            BOOL v17 = v2 != v6 || v15 >= v16 + 1;
            int64_t v2 = v6;
            if (v17)
            {
              *int64_t v15 = *v16;
              int64_t v2 = v6;
            }
          }
        }
        else if (v11 >= v9 || v2 >= v11)
        {
          goto LABEL_15;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v18 = *(void *)(v3 + 16);
  BOOL v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(a2 + 2, *(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
  *a2 = result;
  a2[1] = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<String>);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for SiriEnvironmentKeyValuePairs()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for SiriEnvironmentKeyValuePairs(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SiriEnvironmentKeyValuePairs(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for SiriEnvironmentKeyValuePairs(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriEnvironmentKeyValuePairs(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriEnvironmentKeyValuePairs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriEnvironmentKeyValuePairs()
{
  return &type metadata for SiriEnvironmentKeyValuePairs;
}

unsigned char *storeEnumTagSinglePayload for SiriEnvironmentKeyValuePairs.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9E9D4C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SiriEnvironmentKeyValuePairs.CodingKeys()
{
  return &unk_1F242AD98;
}

uint64_t specialized LazyMapSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v8 = -1;
  }
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

void specialized LazyMapSequence.Iterator.next()(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  int64_t v5 = v1[3];
  unint64_t v4 = v1[4];
  int64_t v6 = v5;
  if (!v4)
  {
    int64_t v16 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      return;
    }
    int64_t v17 = (unint64_t)(v1[2] + 64) >> 6;
    if (v16 < v17)
    {
      uint64_t v18 = v1[1];
      unint64_t v19 = *(void *)(v18 + 8 * v16);
      if (v19)
      {
LABEL_9:
        uint64_t v7 = (v19 - 1) & v19;
        unint64_t v8 = __clz(__rbit64(v19)) + (v16 << 6);
        int64_t v6 = v16;
        goto LABEL_3;
      }
      int64_t v20 = v5 + 2;
      int64_t v6 = v5 + 1;
      if (v5 + 2 < v17)
      {
        unint64_t v19 = *(void *)(v18 + 8 * v20);
        if (v19)
        {
LABEL_12:
          int64_t v16 = v20;
          goto LABEL_9;
        }
        int64_t v6 = v5 + 2;
        if (v5 + 3 < v17)
        {
          unint64_t v19 = *(void *)(v18 + 8 * (v5 + 3));
          if (v19)
          {
            int64_t v16 = v5 + 3;
            goto LABEL_9;
          }
          int64_t v20 = v5 + 4;
          int64_t v6 = v5 + 3;
          if (v5 + 4 < v17)
          {
            unint64_t v19 = *(void *)(v18 + 8 * v20);
            if (v19) {
              goto LABEL_12;
            }
            int64_t v16 = v5 + 5;
            int64_t v6 = v5 + 4;
            if (v5 + 5 < v17)
            {
              unint64_t v19 = *(void *)(v18 + 8 * v16);
              if (v19) {
                goto LABEL_9;
              }
              int64_t v6 = v17 - 1;
              int64_t v21 = v5 + 6;
              while (v21 < v17)
              {
                unint64_t v19 = *(void *)(v18 + 8 * v21++);
                if (v19)
                {
                  int64_t v16 = v21 - 1;
                  goto LABEL_9;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *a1 = 0u;
    a1[1] = 0u;
    return;
  }
  uint64_t v7 = (v4 - 1) & v4;
  unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
  unint64_t v9 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v8);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  unint64_t v12 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v8);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  v1[3] = v6;
  v1[4] = v7;
  int64_t v15 = (void (*)(void *))v1[5];
  v22[0] = v10;
  v22[1] = v11;
  v22[2] = v13;
  v22[3] = v14;
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v13, v14);
  v15(v22);
  swift_bridgeObjectRelease();

  outlined consume of Data._Representation(v13, v14);
}

uint64_t OUTLINED_FUNCTION_0_17()
{
  return v0 + 56;
}

void OUTLINED_FUNCTION_1_17()
{
  *(void *)(v0 + 16) = *(void *)(v1 + 16);
}

uint64_t OUTLINED_FUNCTION_3_18()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_4_16()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_5_14@<X0>(uint64_t a1@<X8>)
{
  unint64_t v4 = (void *)(*(void *)(v2 + 48) + 16 * a1);
  uint64_t v5 = v4[1];
  int64_t v6 = (void *)(*(void *)(v1 + 48) + 16 * a1);
  void *v6 = *v4;
  v6[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_6_17()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_14()
{
  uint64_t v2 = *v0;
  return MEMORY[0x1F4184C90](v2);
}

uint64_t one-time initialization function for runQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  unint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v7 - 8, v8);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.utility.getter();
  v10[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  _sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E4FBCC58], v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static AutoBugCaptureManager.runQueue = result;
  return result;
}

uint64_t AutoBugCaptureManager.diagnosticReporter.setter(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return MEMORY[0x1F41817F8]();
}

uint64_t AutoBugCaptureManager.__allocating_init(domain:sessionDuration:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 40) = 0;
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  *(double *)(result + 32) = a3;
  return result;
}

uint64_t AutoBugCaptureManager.init(domain:sessionDuration:)(uint64_t a1, uint64_t a2, double a3)
{
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  *(double *)(v3 + 32) = a3;
  return v3;
}

uint64_t AutoBugCaptureManager.generateSnapshot(errorType:errorSubType:subTypeContext:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = a5;
  uint64_t v32 = a7;
  uint64_t v30 = a3;
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_1_5();
  uint64_t v35 = v15;
  MEMORY[0x1F4188790](v16, v17);
  unint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_1_5();
  uint64_t v21 = v20;
  MEMORY[0x1F4188790](v22, v23);
  unint64_t v25 = (char *)&v29 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for runQueue != -1) {
    swift_once();
  }
  uint64_t v33 = static AutoBugCaptureManager.runQueue;
  uint64_t v26 = (void *)swift_allocObject();
  void v26[2] = a1;
  void v26[3] = a2;
  v26[4] = v30;
  v26[5] = a4;
  v26[6] = v31;
  v26[7] = a6;
  v26[8] = v32;
  v26[9] = a8;
  v26[10] = v8;
  aBlock[4] = partial apply for closure #1 in AutoBugCaptureManager.generateSnapshot(errorType:errorSubType:subTypeContext:completion:);
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_3;
  uint64_t v27 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v36 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  _sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1CB791EF0](0, v25, v19, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v19, v14);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v34);
  return swift_release();
}

void closure #1 in AutoBugCaptureManager.generateSnapshot(errorType:errorSubType:subTypeContext:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(void), uint64_t a8, void *a9)
{
  uint64_t v10 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v10 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10) {
    goto LABEL_14;
  }
  uint64_t v13 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v13 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v13) {
    goto LABEL_14;
  }
  uint64_t v16 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x2000000000000000) == 0) {
    uint64_t v16 = a5 & 0xFFFFFFFFFFFFLL;
  }
  if (v16)
  {
    AutoBugCaptureManager.diagnosticReporter.setter((uint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA8AF0]), sel_init));
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.logger);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    log = Logger.logObject.getter();
    os_log_type_t type = static os_log_type_t.debug.getter();
    uint64_t v50 = a7;
    if (os_log_type_enabled(log, type))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      uint64_t v52 = v48;
      *(_DWORD *)uint64_t v20 = 136315650;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v20 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v20 + 22) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a5, a6, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C9E4C000, log, type, "AutoBugCaptureManager#generateSnapshot, with errorType: %s, errorSubType: %s and subTypeContext: %s", (uint8_t *)v20, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1CB792FA0](v48, -1, -1);
      MEMORY[0x1CB792FA0](v20, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    unint64_t v25 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, void, void))(*a9 + 144))(a1, a2, a3, a4, a5, a6, a9[2], a9[3]);
    uint64_t v26 = v25;
    if (v25)
    {
      uint64_t v52 = 0;
      id v27 = v25;
      static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

      if (v52)
      {
        char v28 = (*(uint64_t (**)(uint64_t))(*a9 + 152))(v52);
        swift_bridgeObjectRetain();
        uint64_t v29 = Logger.logObject.getter();
        if (v28)
        {
          os_log_type_t v30 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v29, v30))
          {
            uint64_t v31 = (uint8_t *)swift_slowAlloc();
            uint64_t v32 = swift_slowAlloc();
            uint64_t v52 = v32;
            *(_DWORD *)uint64_t v31 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v33 = Dictionary.description.getter();
            unint64_t v35 = v34;
            swift_bridgeObjectRelease();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, &v52);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            uint64_t v36 = "AutoBugCaptureManager#generateSnapshot, generated snapshot for signature: %s";
LABEL_31:
            _os_log_impl(&dword_1C9E4C000, v29, v30, v36, v31, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1CB792FA0](v32, -1, -1);
            MEMORY[0x1CB792FA0](v31, -1, -1);

LABEL_33:
            v50(v28 & 1);

            return;
          }
        }
        else
        {
          os_log_type_t v30 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v29, v30))
          {
            uint64_t v31 = (uint8_t *)swift_slowAlloc();
            uint64_t v32 = swift_slowAlloc();
            uint64_t v52 = v32;
            *(_DWORD *)uint64_t v31 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v45 = Dictionary.description.getter();
            unint64_t v47 = v46;
            swift_bridgeObjectRelease();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, &v52);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            uint64_t v36 = "AutoBugCaptureManager#generateSnapshot, could not generate snapshot for signature: %s";
            goto LABEL_31;
          }
        }

        swift_bridgeObjectRelease_n();
        goto LABEL_33;
      }
    }
    id v37 = v26;
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      uint64_t v52 = v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      id v42 = v37;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSMutableDictionary?);
      uint64_t v43 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C9E4C000, v38, v39, "AutoBugCaptureManager#generateSnapshot, couldn't parse signature: %s", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB792FA0](v41, -1, -1);
      MEMORY[0x1CB792FA0](v40, -1, -1);
    }
    else
    {
    }
    a7(0);
  }
  else
  {
LABEL_14:
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.logger);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_1C9E4C000, v22, v23, "AutoBugCaptureManager#generateSnapshot invalid argument(s) passed in, all strings should be populated", v24, 2u);
      MEMORY[0x1CB792FA0](v24, -1, -1);
    }

    a7(0);
  }
}

uint64_t sub_1C9E9E708()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 88, 7);
}

void partial apply for closure #1 in AutoBugCaptureManager.generateSnapshot(errorType:errorSubType:subTypeContext:completion:)()
{
  closure #1 in AutoBugCaptureManager.generateSnapshot(errorType:errorSubType:subTypeContext:completion:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void (**)(void))(v0 + 64), *(void *)(v0 + 72), *(void **)(v0 + 80));
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

NSMutableDictionary_optional __swiftcall AutoBugCaptureManager.createSignature(errorType:errorSubType:subTypeContext:domain:)(Swift::String errorType, Swift::String errorSubType, Swift::String subTypeContext, Swift::String domain)
{
  uint64_t v5 = *(void **)(v4 + 40);
  if (v5)
  {
    object = domain._object;
    uint64_t countAndFlagsBits = domain._countAndFlagsBits;
    uint64_t v8 = subTypeContext._object;
    uint64_t v9 = subTypeContext._countAndFlagsBits;
    uint64_t v10 = errorSubType._object;
    uint64_t v11 = errorSubType._countAndFlagsBits;
    unint64_t v12 = errorType._object;
    uint64_t v13 = errorType._countAndFlagsBits;
    id v14 = v5;
    id v15 = outlined bridged method (mbgbgbgbgbgnnn) of @objc SDRDiagnosticReporter.signature(withDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:)(countAndFlagsBits, (uint64_t)object, v13, (uint64_t)v12, v11, (uint64_t)v10, v9, (uint64_t)v8, 0xD000000000000011, 0x80000001C9EB9300, 0, v14);

    errorType._uint64_t countAndFlagsBits = (uint64_t)v15;
  }
  else
  {
    errorType._uint64_t countAndFlagsBits = 0;
  }
  return *(NSMutableDictionary_optional *)&errorType._countAndFlagsBits;
}

Swift::Bool __swiftcall AutoBugCaptureManager.createSnapshot(signature:)(Swift::OpaquePointer signature)
{
  uint64_t v2 = *(void **)(v1 + 40);
  if (v2)
  {
    double v4 = *(double *)(v1 + 32);
    void v9[4] = closure #1 in AutoBugCaptureManager.createSnapshot(signature:);
    void v9[5] = 0;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    v9[2] = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?) -> ();
    void v9[3] = &block_descriptor_3;
    uint64_t v5 = _Block_copy(v9);
    id v6 = v2;
    unsigned __int8 v7 = outlined bridged method (mbgnnnnnn) of @objc SDRDiagnosticReporter.snapshot(withSignature:duration:event:payload:reply:)(v4, (uint64_t)signature._rawValue, 0, 0, (uint64_t)v5, v6);
    _Block_release(v5);
  }
  else
  {
    unsigned __int8 v7 = 0;
  }
  return v7 & 1;
}

void closure #1 in AutoBugCaptureManager.createSnapshot(signature:)()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.logger);
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v7 = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
    uint64_t v5 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9E4C000, v1, v2, "AutoBugCaptureManager#createSnapshot, DiagnosticReporter snapshot response: %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB792FA0](v4, -1, -1);
    MEMORY[0x1CB792FA0](v3, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t AutoBugCaptureManager.deinit()
{
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t AutoBugCaptureManager.__deallocating_deinit()
{
  AutoBugCaptureManager.deinit();

  return MEMORY[0x1F4186488](v0, 48, 7);
}

id outlined bridged method (mbgbgbgbgbgnnn) of @objc SDRDiagnosticReporter.signature(withDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v18 = (void *)MEMORY[0x1CB7919D0]();
  uint64_t v19 = (void *)MEMORY[0x1CB7919D0](a3, a4);
  uint64_t v20 = (void *)MEMORY[0x1CB7919D0](a5, a6);
  uint64_t v21 = (void *)MEMORY[0x1CB7919D0](a7, a8);
  uint64_t v22 = (void *)MEMORY[0x1CB7919D0](a9, a10);
  id v23 = objc_msgSend(a12, sel_signatureWithDomain_type_subType_subtypeContext_detectedProcess_triggerThresholdValues_, v18, v19, v20, v21, v22, a11);

  return v23;
}

id outlined bridged method (mbgnnnnnn) of @objc SDRDiagnosticReporter.snapshot(withSignature:duration:event:payload:reply:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v12 = objc_msgSend(a6, sel_snapshotWithSignature_duration_event_payload_reply_, isa, a3, a4, a5, a1);

  return v12;
}

uint64_t type metadata accessor for AutoBugCaptureManager()
{
  return self;
}

uint64_t method lookup function for AutoBugCaptureManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AutoBugCaptureManager);
}

uint64_t dispatch thunk of AutoBugCaptureManager.__allocating_init(domain:sessionDuration:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of AutoBugCaptureManager.generateSnapshot(errorType:errorSubType:subTypeContext:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of AutoBugCaptureManager.createSignature(errorType:errorSubType:subTypeContext:domain:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of AutoBugCaptureManager.createSnapshot(signature:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void static MockablePublished.subscript.getter()
{
  OUTLINED_FUNCTION_10_10();
  uint64_t v2 = v1;
  uint64_t v23 = v3;
  uint64_t v24 = v4;
  uint64_t v6 = v5;
  uint64_t v8 = *v7;
  uint64_t v9 = *(void *)(v0 + 80);
  uint64_t v10 = type metadata accessor for Optional();
  OUTLINED_FUNCTION_0_5();
  uint64_t v12 = v11;
  MEMORY[0x1F4188790](v13, v14);
  uint64_t v16 = (char *)&v22 - v15;
  v25[4] = v6;
  swift_unknownObjectRetain();
  uint64_t v17 = (void (*)(void *, void))swift_readAtKeyPath();
  uint64_t v19 = *v18;
  swift_retain();
  v17(v25, 0);
  swift_unknownObjectRelease();
  uint64_t v20 = (*(uint64_t (**)(void, uint64_t))(v2 + 32))(*(void *)(v8 + *MEMORY[0x1E4FBBE08]), v2);
  if (v20)
  {
    (*(void (**)(uint64_t))(*(void *)v20 + 144))(v23);
    swift_release();
    if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v9) != 1)
    {
      swift_release();
      OUTLINED_FUNCTION_6_6();
      (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v24, v16, v9);
      goto LABEL_6;
    }
    uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, v10);
  }
  (*(void (**)(uint64_t))(*(void *)v19 + 104))(v20);
  swift_release();
LABEL_6:
  OUTLINED_FUNCTION_12_11();
}

void static MockablePublished.subscript.setter()
{
  OUTLINED_FUNCTION_10_10();
  v17[1] = v2;
  uint64_t v18 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v0 + 80);
  OUTLINED_FUNCTION_3_19();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8, v9);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_6_6();
  MEMORY[0x1F4188790](v12, v13);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  type metadata accessor for ObservableObjectPublisher();
  if (swift_dynamicCast())
  {
    ObservableObjectPublisher.send()();
    swift_release();
  }
  uint64_t v20 = v4;
  swift_unknownObjectRetain();
  swift_retain();
  swift_getAtKeyPath();
  swift_unknownObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_0_7();
  (*(void (**)(void *__return_ptr))(v14 + 152))(v19);
  swift_release();
  uint64_t v15 = v18;
  CurrentValueSubject.send(_:)();
  swift_release();
  uint64_t v20 = v4;
  swift_unknownObjectRetain();
  swift_retain();
  swift_getAtKeyPath();
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v16 = v19[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v11, v15, v5);
  (*(void (**)(char *))(*(void *)v16 + 112))(v11);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v5);
  OUTLINED_FUNCTION_12_11();
}

uint64_t protocol witness for MockableEnvironmentProvider.mock<A>(override:run:) in conformance NetworkAvailability()
{
  OUTLINED_FUNCTION_1_18();
  uint64_t v0 = type metadata accessor for NetworkAvailability();
  return OUTLINED_FUNCTION_2_20(v0);
}

uint64_t MockableEnvironmentProvider.mock<A>(override:run:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for EnvironmentProviderMockHelper();
  uint64_t v10 = EnvironmentProviderMockHelper.__allocating_init(overrides:)(a1);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a6 + 64);
  swift_bridgeObjectRetain();
  uint64_t v12 = v11(v10, a4, a6);
  uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v10 + 152))();
  a2(v13);
  $defer #1 <A><A1>() in MockableEnvironmentProvider.mock<A>(override:run:)(v6, v12, a4, a5, a6);
  swift_release();
  return swift_release();
}

{
  return MockableEnvironmentProvider.mock<A>(override:run:)(a1, a2, a3, a5, a4, a6);
}

uint64_t type metadata accessor for EnvironmentProviderMockHelper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized MockableEnvironmentProvider.install(_:)(uint64_t a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 184))();
  type metadata accessor for CurrentDevice();
  lazy protocol witness table accessor for type CoreTelephonyService and conformance CoreTelephonyService(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice, (void (*)(uint64_t))type metadata accessor for CurrentDevice);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  if (a1) {
    uint64_t v4 = static CurrentDevice.adjustMock(_:)(a1);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 192))(v4);
  return v3;
}

uint64_t specialized MockableEnvironmentProvider.install(_:)()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
  type metadata accessor for CurrentProcess();
  lazy protocol witness table accessor for type CoreTelephonyService and conformance CoreTelephonyService(&lazy protocol witness table cache variable for type CurrentProcess and conformance CurrentProcess, (void (*)(uint64_t))type metadata accessor for CurrentProcess);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  uint64_t v3 = *(void (**)(uint64_t))((*v1 & *v0) + 0x68);
  uint64_t v4 = swift_retain();
  v3(v4);
  return v2;
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;

  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 176))();
  type metadata accessor for NetworkAvailability();
  lazy protocol witness table accessor for type CoreTelephonyService and conformance CoreTelephonyService(&lazy protocol witness table cache variable for type NetworkAvailability and conformance NetworkAvailability, (void (*)(uint64_t))type metadata accessor for NetworkAvailability);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  uint64_t v2 = *(void (**)(uint64_t))(*(void *)v0 + 184);
  uint64_t v3 = swift_retain();
  v2(v3);
  return v1;
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;

  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 136))();
  type metadata accessor for CoreTelephonyService();
  lazy protocol witness table accessor for type CoreTelephonyService and conformance CoreTelephonyService(&lazy protocol witness table cache variable for type CoreTelephonyService and conformance CoreTelephonyService, (void (*)(uint64_t))type metadata accessor for CoreTelephonyService);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  uint64_t v2 = *(void (**)(uint64_t))(*(void *)v0 + 144);
  uint64_t v3 = swift_retain();
  v2(v3);
  return v1;
}

void MockableEnvironmentProvider.install(_:)()
{
  OUTLINED_FUNCTION_10_10();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_6_6();
  uint64_t v8 = MEMORY[0x1F4188790](v6, v7);
  MEMORY[0x1F4188790](v8, v9);
  uint64_t v22 = (*(uint64_t (**)(uint8_t *, uint64_t))(v1 + 32))(v3, v1);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  type metadata accessor for ObservableObjectPublisher();
  if (swift_dynamicCast())
  {
    ObservableObjectPublisher.send()();
LABEL_5:
    uint64_t v10 = swift_release();
    goto LABEL_11;
  }
  dispatch thunk of ObservableObject.objectWillChange.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  if (swift_dynamicCast())
  {
    lazy protocol witness table accessor for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>();
    Subject<>.send()();
    goto LABEL_5;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.logger);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v24 = v21;
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v20 = v15 + 4;
    swift_getAssociatedTypeWitness();
    uint64_t v16 = _typeName(_:qualified:)();
    uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9E4C000, v13, v14, "Unable to signal objectWillChange for provider of type %s", v15, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

LABEL_11:
  uint64_t v23 = v5;
  MEMORY[0x1F4188790](v10, v11);
  *(&v20 - 2) = v3;
  *(&v20 - 1) = (uint8_t *)v1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v18 = type metadata accessor for EnvironmentProviderMockHelper();
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(uint64_t, uint64_t))partial apply for closure #1 in MockableEnvironmentProvider.install(_:), v18, v19, (uint64_t)&v24);
  (*(void (**)(uint64_t, uint8_t *, uint64_t))(v1 + 40))(v24, v3, v1);
  OUTLINED_FUNCTION_12_11();
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X4>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  OUTLINED_FUNCTION_0_5();
  uint64_t v31 = v7;
  uint64_t v32 = v6;
  MEMORY[0x1F4188790](v8, v9);
  OUTLINED_FUNCTION_12_1();
  uint64_t v12 = v11 - v10;
  uint64_t v14 = *(void *)(v13 + 16);
  OUTLINED_FUNCTION_0_5();
  uint64_t v16 = v15;
  MEMORY[0x1F4188790](v17, v18);
  OUTLINED_FUNCTION_12_1();
  uint64_t v21 = v20 - v19;
  OUTLINED_FUNCTION_0_5();
  MEMORY[0x1F4188790](v22, v23);
  OUTLINED_FUNCTION_12_1();
  uint64_t v26 = v25 - v24;
  (*(void (**)(uint64_t, uint64_t))(v27 + 16))(v25 - v24, v28);
  uint64_t v29 = 1;
  if (__swift_getEnumTagSinglePayload(v26, 1, v14) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v21, v26, v14);
    a1(v21, v12);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v21, v14);
    if (v4) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(a3, v12, v32);
    }
    uint64_t v29 = 0;
  }
  return __swift_storeEnumTagSinglePayload(a4, v29, 1, a2);
}

uint64_t EnvironmentProviderMockHelper.__allocating_init(overrides:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t protocol witness for MockableEnvironmentProvider.mock<A>(override:run:) in conformance CurrentDevice()
{
  OUTLINED_FUNCTION_1_18();
  uint64_t v0 = type metadata accessor for CurrentDevice();
  return OUTLINED_FUNCTION_2_20(v0);
}

uint64_t protocol witness for MockableEnvironmentProvider.mock<A>(override:run:) in conformance CurrentProcess()
{
  OUTLINED_FUNCTION_1_18();
  uint64_t v0 = type metadata accessor for CurrentProcess();
  return OUTLINED_FUNCTION_2_20(v0);
}

uint64_t static MockableEnvironmentProvider.adjustMock(_:)()
{
  return static MockableEnvironmentProvider.adjustMock(_:)();
}

uint64_t MockableEnvironmentProvider.mock<A>(override:run:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  void v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  void v8[3] = a2;
  return MEMORY[0x1F4188298](MockableEnvironmentProvider.mock<A>(override:run:), 0, 0);
}

uint64_t MockableEnvironmentProvider.mock<A>(override:run:)()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = (int *)v0[4];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for EnvironmentProviderMockHelper();
  uint64_t v5 = EnvironmentProviderMockHelper.__allocating_init(overrides:)(v4);
  v0[10] = v5;
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 64);
  swift_bridgeObjectRetain();
  v0[11] = v6(v5, v2, v1);
  (*(void (**)(void))(*(void *)v5 + 152))();
  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)v3 + *v3);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[12] = v7;
  *uint64_t v7 = v0;
  v7[1] = MockableEnvironmentProvider.mock<A>(override:run:);
  uint64_t v8 = v0[2];
  return v10(v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = MockableEnvironmentProvider.mock<A>(override:run:);
  }
  else {
    uint64_t v2 = MockableEnvironmentProvider.mock<A>(override:run:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_14_10();
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_14_10();
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t $defer #1 <A><A1>() in MockableEnvironmentProvider.mock<A>(override:run:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 64))(a2, a3, a5);

  return swift_release();
}

uint64_t partial apply for closure #1 in MockableEnvironmentProvider.install(_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(v2 + 24) + 72))(*a1);
  *a2 = result;
  return result;
}

uint64_t EnvironmentProviderMockHelper.init(overrides:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t EnvironmentProviderMockHelper.overrides<A>(_:)()
{
  SiriEnvironmentStorage.storage.getter();
  OUTLINED_FUNCTION_14_3();
  type metadata accessor for PartialKeyPath();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  type metadata accessor for Dictionary.Keys();
  swift_getWitnessTable();
  char v0 = Sequence<>.contains(_:)();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

uint64_t EnvironmentProviderMockHelper.subscript.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = SiriEnvironmentStorage.storage.getter();
  uint64_t v10 = a1;
  uint64_t v6 = type metadata accessor for PartialKeyPath();
  swift_retain();
  MEMORY[0x1CB791960](v11, &v10, v5, v6, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB8F8]);
  swift_release();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v7 = *(void *)(*MEMORY[0x1E4FBC5F0] + v4 + 8);
  int v8 = swift_dynamicCast();
  return __swift_storeEnumTagSinglePayload(a2, v8 ^ 1u, 1, v7);
}

uint64_t EnvironmentProviderMockHelper.backfill(previousMock:)(uint64_t result)
{
  if (result)
  {
    SiriEnvironmentStorage.storage.getter();
    OUTLINED_FUNCTION_13_10();
    type metadata accessor for PartialKeyPath();
    type metadata accessor for Dictionary();
    swift_retain();
    Dictionary.merge(_:uniquingKeysWith:)();
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t EnvironmentProviderMockHelper.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t EnvironmentProviderMockHelper.__deallocating_deinit()
{
  EnvironmentProviderMockHelper.deinit();

  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t key path setter for MockablePublished.value : <A>MockablePublished<A>(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a1);
  uint64_t v4 = (char *)&v7 - v3;
  (*(void (**)(char *))(v5 + 16))((char *)&v7 - v3);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 112))(v4);
}

uint64_t MockablePublished.value.getter@<X0>(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_14_3();
  uint64_t v4 = v1 + *(void *)(v3 + 88);
  swift_beginAccess();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_6_6();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(a1, v4);
}

uint64_t MockablePublished.value.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_14_3();
  uint64_t v4 = v1 + *(void *)(v3 + 88);
  OUTLINED_FUNCTION_13_10();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_6_6();
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t (*MockablePublished.value.modify())()
{
  return SiriEnvironment.providers.modify;
}

uint64_t key path setter for MockablePublished.wrappedValue : <A>MockablePublished<A>(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a1);
  uint64_t v4 = (char *)&v7 - v3;
  (*(void (**)(char *))(v5 + 16))((char *)&v7 - v3);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 136))(v4);
}

uint64_t MockablePublished.wrappedValue.getter()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.logger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315650;
    uint64_t v4 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 22) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6465737520746F6ELL, 0xE800000000000000, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C9E4C000, v1, v2, "FatalError at %s:%lu - %s", (uint8_t *)v3, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t MockablePublished.wrappedValue.setter()
{
  v8[0] = 0;
  v8[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  v0._object = (void *)0x80000001C9EB9450;
  v0._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.logger);
  swift_bridgeObjectRetain_n();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    v8[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315650;
    uint64_t v5 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 22) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C9E4C000, v2, v3, "FatalError at %s:%lu - %s", (uint8_t *)v4, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t MockablePublished.wrappedValue.modify()
{
  uint64_t v0 = MockablePublished.wrappedValue.getter();
  return static MockablePublished.subscript.modify(v0);
}

void (*static MockablePublished.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  _OWORD v11[2] = a4;
  v11[3] = a5;
  *uint64_t v11 = a2;
  v11[1] = a3;
  uint64_t v12 = *(void *)(v5 + 80);
  void v11[4] = v5;
  void v11[5] = v12;
  OUTLINED_FUNCTION_0_5();
  *(void *)(v13 + 48) = v14;
  size_t v16 = *(void *)(v15 + 64);
  v11[7] = malloc(v16);
  v11[8] = malloc(v16);
  static MockablePublished.subscript.getter();
  return static MockablePublished.subscript.modify;
}

void static MockablePublished.subscript.modify()
{
  OUTLINED_FUNCTION_10_10();
  uint64_t v1 = *v0;
  os_log_type_t v2 = *(void **)(*v0 + 56);
  os_log_type_t v3 = *(void **)(*v0 + 64);
  if (v4)
  {
    uint64_t v5 = *(void *)(v1 + 40);
    uint64_t v6 = *(void *)(v1 + 48);
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*v0 + 56), v3, v5);
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    static MockablePublished.subscript.setter();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v3, v5);
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    static MockablePublished.subscript.setter();
  }
  free(v3);
  free(v2);
  OUTLINED_FUNCTION_12_11();
  free(v7);
}

void *key path getter for MockablePublished.projectedValue : <A>MockablePublished<A>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 152))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for MockablePublished.projectedValue : <A>MockablePublished<A>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v5 = *a1;
  os_log_type_t v3 = *(uint64_t (**)(uint64_t *))(*(void *)v2 + 160);
  swift_retain();
  return v3(&v5);
}

uint64_t MockablePublished.projectedValue.getter@<X0>(void *a1@<X8>)
{
  OUTLINED_FUNCTION_0_7();
  uint64_t v4 = (void *)(v1 + *(void *)(v3 + 96));
  swift_beginAccess();
  *a1 = *v4;
  return swift_retain();
}

uint64_t MockablePublished.projectedValue.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 96));
  swift_beginAccess();
  *uint64_t v3 = v2;
  return swift_release();
}

uint64_t (*MockablePublished.projectedValue.modify())()
{
  return SiriEnvironmentStorage.storage.modify;
}

uint64_t MockablePublished.__allocating_init(wrappedValue:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  MockablePublished.init(wrappedValue:)(a1);
  return v2;
}

uint64_t MockablePublished.init(wrappedValue:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  OUTLINED_FUNCTION_3_19();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v9 = (char *)&v14 - v8;
  uint64_t v10 = *(void (**)(void))(v5 + 16);
  OUTLINED_FUNCTION_15_8();
  v10();
  OUTLINED_FUNCTION_15_8();
  v10();
  MockablePublished.Publisher.init(_:)((uint64_t)v9, v3, &v15);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v3);
  OUTLINED_FUNCTION_0_7();
  *(void *)(v1 + *(void *)(v11 + 96)) = v12;
  return v1;
}

uint64_t MockablePublished.Publisher.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CurrentValueSubject();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  uint64_t v9 = CurrentValueSubject.__allocating_init(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v9;
  return result;
}

uint64_t MockablePublished.Publisher.receive<A>(subscriber:)()
{
  return CurrentValueSubject.receive<A>(subscriber:)();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance MockablePublished<A>.Publisher()
{
  return MockablePublished.Publisher.receive<A>(subscriber:)();
}

uint64_t MockablePublished.deinit()
{
  OUTLINED_FUNCTION_6_6();
  (*(void (**)(void))(v1 + 8))();
  swift_release();
  return v0;
}

uint64_t MockablePublished.__deallocating_deinit()
{
  MockablePublished.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t protocol witness for MockableEnvironmentProvider.mock<A>(override:run:) in conformance CoreTelephonyService()
{
  OUTLINED_FUNCTION_1_18();
  uint64_t v0 = type metadata accessor for CoreTelephonyService();
  return OUTLINED_FUNCTION_2_20(v0);
}

unint64_t lazy protocol witness table accessor for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>;
  if (!lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in MockablePublished<A>.Publisher()
{
  return MEMORY[0x1E4FBC278];
}

uint64_t sub_1C9EA177C()
{
  OUTLINED_FUNCTION_0_7();
  return (*(uint64_t (**)(void))(v0 + 104))();
}

void *sub_1C9EA17C4(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1C9EA17D0()
{
  OUTLINED_FUNCTION_0_7();
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of MockableEnvironmentProvider.mock.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of MockableEnvironmentProvider.mock.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of MockableEnvironmentProvider.mock.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of MockableEnvironmentProvider.mock<A>(override:run:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

uint64_t dispatch thunk of MockableEnvironmentProvider.install(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of static MockableEnvironmentProvider.adjustMock(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t method lookup function for EnvironmentProviderMockHelper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for EnvironmentProviderMockHelper);
}

uint64_t dispatch thunk of EnvironmentProviderMockHelper.__allocating_init(overrides:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of EnvironmentProviderMockHelper.overrides<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of EnvironmentProviderMockHelper.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of EnvironmentProviderMockHelper.backfill(previousMock:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t type metadata completion function for MockablePublished()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for MockablePublished()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for MockablePublished(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MockablePublished);
}

uint64_t dispatch thunk of MockablePublished.value.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of MockablePublished.value.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of MockablePublished.value.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of MockablePublished.wrappedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of MockablePublished.wrappedValue.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of MockablePublished.wrappedValue.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of MockablePublished.projectedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of MockablePublished.projectedValue.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of MockablePublished.projectedValue.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of MockablePublished.__allocating_init(wrappedValue:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t type metadata accessor for MockablePublished.Publisher()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type CoreTelephonyService and conformance CoreTelephonyService(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_18()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_2_20(uint64_t a1)
{
  return MockableEnvironmentProvider.mock<A>(override:run:)(v5, v4, v3, a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_7_14()
{
  return 8;
}

uint64_t OUTLINED_FUNCTION_11_12()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_13_10()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_14_10()
{
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[11];
  return $defer #1 <A><A1>() in MockableEnvironmentProvider.mock<A>(override:run:)(v2, v6, v4, v5, v3);
}

uint64_t static TypeIdentifier.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t TypeIdentifier.init(for:)@<X0>(void *a1@<X8>)
{
  TypeInformation.init(for:)((uint64_t)v5);
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  a1[1] = v3;
  return result;
}

uint64_t TypeIdentifier.init<A>(encoding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  uint64_t v8 = String.init<A>(_:)();
  uint64_t v10 = v9;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v8;
  a3[1] = v10;
  return result;
}

uint64_t TypeIdentifier.encoding.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TypeIdentifier.typeName.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  swift_bridgeObjectRetain();
  specialized TypeInformation.init<A>(encoding:)(v1, v2, (uint64_t)&v5);
  uint64_t v3 = TypeInformation.typeName.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t TypeIdentifier.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  OUTLINED_FUNCTION_8_0();
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    OUTLINED_FUNCTION_8_0();
    dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    uint64_t v5 = String.init<A>(_:)();
    uint64_t v7 = v6;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    *a2 = v5;
    a2[1] = v7;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t TypeIdentifier.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

unint64_t TypeIdentifier.description.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = (void *)v0[1];
  swift_bridgeObjectRetain();
  specialized TypeInformation.init<A>(encoding:)(v2, (unint64_t)v1, (uint64_t)&v11);
  uint64_t v3 = TypeInformation.typeName.getter();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v11 = v3;
  unint64_t v12 = (unint64_t)v5;
  lazy protocol witness table accessor for type String and conformance String();
  if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    unint64_t v11 = 0;
    unint64_t v12 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    unint64_t v11 = 0xD00000000000001ALL;
    unint64_t v12 = 0x80000001C9EB94B0;
    swift_bridgeObjectRetain();
    v6._uint64_t countAndFlagsBits = v2;
    v6._object = v1;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    uint64_t v7 = 10530;
    unint64_t v8 = 0xE200000000000000;
  }
  else
  {
    unint64_t v11 = 0;
    unint64_t v12 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    unint64_t v11 = 0xD000000000000014;
    unint64_t v12 = 0x80000001C9EB9490;
    v9._uint64_t countAndFlagsBits = v3;
    v9._object = v5;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    uint64_t v7 = 0x29666C65732ELL;
    unint64_t v8 = 0xE600000000000000;
  }
  String.append(_:)(*(Swift::String *)&v7);
  return v11;
}

uint64_t one-time initialization function for any()
{
  TypeInformation.init(for:)((uint64_t)v3);
  uint64_t v0 = v4;
  uint64_t v1 = v5;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  static TypeIdentifier.any = v0;
  *(void *)algn_1EA5CB238 = v1;
  return result;
}

uint64_t static TypeIdentifier.any.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for any, &static TypeIdentifier.any, (uint64_t *)algn_1EA5CB238, a1);
}

uint64_t one-time initialization function for int()
{
  TypeInformation.init(for:)((uint64_t)v3);
  uint64_t v0 = v4;
  uint64_t v1 = v5;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  static TypeIdentifier.int = v0;
  *(void *)algn_1EA5CB248 = v1;
  return result;
}

uint64_t static TypeIdentifier.int.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for int, &static TypeIdentifier.int, (uint64_t *)algn_1EA5CB248, a1);
}

uint64_t one-time initialization function for string()
{
  TypeInformation.init(for:)((uint64_t)v3);
  uint64_t v0 = v4;
  uint64_t v1 = v5;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  static TypeIdentifier.string = v0;
  *(void *)algn_1EA5CB258 = v1;
  return result;
}

uint64_t static TypeIdentifier.string.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for string, &static TypeIdentifier.string, (uint64_t *)algn_1EA5CB258, a1);
}

uint64_t one-time initialization function for double()
{
  TypeInformation.init(for:)((uint64_t)v3);
  uint64_t v0 = v4;
  uint64_t v1 = v5;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  static TypeIdentifier.double = v0;
  *(void *)algn_1EA5CB268 = v1;
  return result;
}

uint64_t static TypeIdentifier.double.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for double, &static TypeIdentifier.double, (uint64_t *)algn_1EA5CB268, a1);
}

uint64_t one-time initialization function for float()
{
  TypeInformation.init(for:)((uint64_t)v3);
  uint64_t v0 = v4;
  uint64_t v1 = v5;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  static TypeIdentifier.float = v0;
  *(void *)algn_1EA5CB278 = v1;
  return result;
}

uint64_t static TypeIdentifier.float.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for float, &static TypeIdentifier.float, (uint64_t *)algn_1EA5CB278, a1);
}

uint64_t one-time initialization function for BOOL()
{
  TypeInformation.init(for:)((uint64_t)v3);
  uint64_t v0 = v4;
  uint64_t v1 = v5;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  static TypeIdentifier.BOOL = v0;
  *(void *)algn_1EA5CB288 = v1;
  return result;
}

uint64_t static TypeIdentifier.BOOL.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for BOOL, &static TypeIdentifier.BOOL, (uint64_t *)algn_1EA5CB288, a1);
}

uint64_t TypeIdentifier.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int TypeIdentifier.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TypeIdentifier@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return TypeIdentifier.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TypeIdentifier(void *a1)
{
  return TypeIdentifier.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for TypeIdentifier()
{
  return &type metadata for TypeIdentifier;
}

double protocol witness for static SiriEnvironmentProvider.defaultScope.getter in conformance NetworkAvailability@<D0>(_OWORD *a1@<X8>)
{
  return static SiriEnvironmentProvider.defaultScope.getter(a1);
}

double static SiriEnvironmentProvider.defaultScope.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = 2.73405468e161;
  *a1 = xmmword_1C9EB7080;
  return result;
}

uint64_t specialized Sequence.filter(_:)(uint64_t a1)
{
  uint64_t v17 = MEMORY[0x1E4FBC860];
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t result = __CocoaDictionary.makeIterator()();
    uint64_t v14 = 0;
    uint64_t v2 = 0;
    int64_t v3 = 0;
    unint64_t v4 = 0;
    unint64_t v5 = result | 0x8000000000000000;
  }
  else
  {
    uint64_t result = specialized _NativeDictionary.makeIterator()(a1, v16);
    unint64_t v5 = v16[0];
    uint64_t v14 = v16[1];
    uint64_t v2 = v16[2];
    int64_t v3 = v16[3];
    unint64_t v4 = v16[4];
  }
  int64_t v6 = (unint64_t)(v2 + 64) >> 6;
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_7;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v7 = (v4 - 1) & v4;
      unint64_t v8 = __clz(__rbit64(v4)) | (v3 << 6);
      int64_t v9 = v3;
      goto LABEL_26;
    }
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v11 >= v6) {
      goto LABEL_32;
    }
    unint64_t v12 = *(void *)(v14 + 8 * v11);
    int64_t v9 = v3 + 1;
    if (!v12)
    {
      int64_t v9 = v3 + 2;
      if (v3 + 2 >= v6) {
        goto LABEL_32;
      }
      unint64_t v12 = *(void *)(v14 + 8 * v9);
      if (!v12)
      {
        int64_t v9 = v3 + 3;
        if (v3 + 3 >= v6) {
          goto LABEL_32;
        }
        unint64_t v12 = *(void *)(v14 + 8 * v9);
        if (!v12)
        {
          int64_t v9 = v3 + 4;
          if (v3 + 4 >= v6) {
            goto LABEL_32;
          }
          unint64_t v12 = *(void *)(v14 + 8 * v9);
          if (!v12)
          {
            int64_t v9 = v3 + 5;
            if (v3 + 5 >= v6) {
              goto LABEL_32;
            }
            unint64_t v12 = *(void *)(v14 + 8 * v9);
            if (!v12)
            {
              int64_t v13 = v3 + 6;
              while (v13 < v6)
              {
                unint64_t v12 = *(void *)(v14 + 8 * v13++);
                if (v12)
                {
                  int64_t v9 = v13 - 1;
                  goto LABEL_25;
                }
              }
LABEL_32:
              outlined consume of [String : Data].Iterator._Variant();
              return v17;
            }
          }
        }
      }
    }
LABEL_25:
    uint64_t v7 = (v12 - 1) & v12;
    unint64_t v8 = __clz(__rbit64(v12)) + (v9 << 6);
LABEL_26:
    uint64_t v10 = *(void *)(*(void *)(v5 + 48) + 8 * v8);
    swift_retain();
    if (!v10) {
      goto LABEL_32;
    }
    while (1)
    {
      if (MEMORY[0x1CB7930A0](v10 + 24))
      {
        swift_release();
        uint64_t result = swift_unknownObjectRelease();
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t result = specialized ContiguousArray._endMutation()();
      }
      int64_t v3 = v9;
      unint64_t v4 = v7;
      if ((v5 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_7:
      if (__CocoaDictionary.Iterator.nextKey()())
      {
        type metadata accessor for _EnvironmentProviderTable.Key();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v10 = v15;
        swift_unknownObjectRelease();
        int64_t v9 = v3;
        uint64_t v7 = v4;
        if (v15) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
  return result;
}

uint64_t SiriEnvironmentProvider.objectDidChange.getter(uint64_t a1, uint64_t a2)
{
  return static _EnvironmentProviderTable.publisher<A>(for:)(v2, a1, a2);
}

uint64_t static _EnvironmentProviderTable.publisher<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for lock != -1) {
    goto LABEL_54;
  }
  while (1)
  {
    objc_msgSend((id)static _EnvironmentProviderTable.lock, sel_lock);
    if (one-time initialization token for table != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v3 = swift_bridgeObjectRetain();
    unint64_t v4 = specialized Sequence.filter(_:)(v3);
    unint64_t v5 = v4;
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v6 = result;
      if (!result)
      {
LABEL_40:
        swift_bridgeObjectRelease_n();
        type metadata accessor for _EnvironmentProviderTable.Key();
        swift_allocObject();
        uint64_t v33 = swift_unknownObjectRetain();
        uint64_t v34 = _EnvironmentProviderTable.Key.init(object:)(v33);
        swift_beginAccess();
        if (((unint64_t)static _EnvironmentProviderTable.table & 0xC000000000000001) != 0)
        {
          swift_retain();
          if (__CocoaDictionary.lookup(_:)())
          {
LABEL_46:
            swift_endAccess();
            swift_release();
            type metadata accessor for EnvironmentProviderDidChangePublisher();
            uint64_t v36 = swift_dynamicCastClass();
            if (!v36)
            {
              swift_unknownObjectRelease();
              goto LABEL_50;
            }
LABEL_51:
            swift_release();
            objc_msgSend((id)static _EnvironmentProviderTable.lock, sel_unlock);
            return v36;
          }
          swift_endAccess();
          swift_release();
        }
        else
        {
          if (*((void *)static _EnvironmentProviderTable.table + 2))
          {
            specialized __RawDictionaryStorage.find<A>(_:)(v34);
            if (v35)
            {
              swift_retain();
              swift_unknownObjectRetain();
              goto LABEL_46;
            }
          }
          swift_endAccess();
        }
LABEL_50:
        type metadata accessor for EnvironmentProviderDidChangePublisher();
        uint64_t v37 = *(void *)(a3 + 8);
        uint64_t v38 = swift_unknownObjectRetain();
        uint64_t v36 = EnvironmentProviderDidChangePublisher.__allocating_init<A>(source:)(v38, a2, v37);
        swift_beginAccess();
        swift_retain();
        uint64_t v39 = swift_retain();
        specialized Dictionary._Variant.setValue(_:forKey:)(v39, v34);
        swift_endAccess();
        swift_release();
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (!v6) {
        goto LABEL_40;
      }
    }
    if (v6 < 1) {
      break;
    }
    uint64_t v8 = 0;
    unint64_t v45 = v5 & 0xC000000000000001;
    unint64_t v42 = v5 + 32;
    unint64_t v43 = v5;
    uint64_t v44 = v6;
    while (1)
    {
      if (v45)
      {
        uint64_t v9 = MEMORY[0x1CB792160](v8, v5);
      }
      else
      {
        uint64_t v9 = *(void *)(v42 + 8 * v8);
        swift_retain();
      }
      swift_beginAccess();
      if (((unint64_t)static _EnvironmentProviderTable.table & 0xC000000000000001) == 0)
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v9);
        if (v28)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v46 = static _EnvironmentProviderTable.table;
          os_log_type_t v30 = static _EnvironmentProviderTable.table;
          static _EnvironmentProviderTable.table = (_UNKNOWN *)0x8000000000000000;
          Swift::Int v31 = v30[3];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<_EnvironmentProviderTable.Key, Swift.AnyObject>);
          _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v31);
          swift_release();
          type metadata accessor for _EnvironmentProviderTable.Key();
          lazy protocol witness table accessor for type _EnvironmentProviderTable.Key and conformance _EnvironmentProviderTable.Key(&lazy protocol witness table cache variable for type _EnvironmentProviderTable.Key and conformance _EnvironmentProviderTable.Key, (void (*)(uint64_t))type metadata accessor for _EnvironmentProviderTable.Key);
          uint64_t v6 = v44;
          _NativeDictionary._delete(at:)();
          static _EnvironmentProviderTable.table = v46;
          unint64_t v5 = v43;
          swift_bridgeObjectRelease();
        }
        goto LABEL_39;
      }
      if ((uint64_t)static _EnvironmentProviderTable.table < 0) {
        uint64_t v10 = static _EnvironmentProviderTable.table;
      }
      else {
        uint64_t v10 = (void *)((unint64_t)static _EnvironmentProviderTable.table & 0xFFFFFFFFFFFFFF8);
      }
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v11 = __CocoaDictionary.lookup(_:)();
      swift_release();
      if (!v11)
      {
        swift_bridgeObjectRelease();
        goto LABEL_39;
      }
      swift_unknownObjectRelease();
      if (!MEMORY[0x1CB7922E0](v10))
      {
        swift_bridgeObjectRelease();
        uint64_t v12 = MEMORY[0x1E4FBC868];
        goto LABEL_37;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_EnvironmentProviderTable.Key, Swift.AnyObject>);
      uint64_t v12 = static _DictionaryStorage.convert(_:capacity:)();
      uint64_t v48 = v12;
      __CocoaDictionary.makeIterator()();
      if (__CocoaDictionary.Iterator.next()()) {
        break;
      }
LABEL_31:
      swift_release();
      unint64_t v5 = v43;
LABEL_37:
      specialized __RawDictionaryStorage.find<A>(_:)(v9);
      if ((v32 & 1) == 0) {
        goto LABEL_53;
      }
      swift_release();
      type metadata accessor for _EnvironmentProviderTable.Key();
      lazy protocol witness table accessor for type _EnvironmentProviderTable.Key and conformance _EnvironmentProviderTable.Key(&lazy protocol witness table cache variable for type _EnvironmentProviderTable.Key and conformance _EnvironmentProviderTable.Key, (void (*)(uint64_t))type metadata accessor for _EnvironmentProviderTable.Key);
      _NativeDictionary._delete(at:)();
      static _EnvironmentProviderTable.table = (_UNKNOWN *)v12;
      swift_bridgeObjectRelease();
      uint64_t v6 = v44;
LABEL_39:
      ++v8;
      swift_endAccess();
      swift_release();
      swift_unknownObjectRelease();
      if (v8 == v6) {
        goto LABEL_40;
      }
    }
    uint64_t v14 = v13;
    type metadata accessor for _EnvironmentProviderTable.Key();
    while (1)
    {
      swift_dynamicCast();
      uint64_t v12 = v48;
      unint64_t v15 = *(void *)(v48 + 16);
      if (*(void *)(v48 + 24) <= v15)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15 + 1, 1);
        uint64_t v12 = v48;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(*(void *)(v47 + 16));
      Swift::Int v16 = Hasher._finalize()();
      uint64_t v17 = v12 + 64;
      uint64_t v18 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v19 = v16 & ~v18;
      unint64_t v20 = v19 >> 6;
      if (((-1 << v19) & ~*(void *)(v12 + 64 + 8 * (v19 >> 6))) == 0) {
        break;
      }
      unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v12 + 64 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      *(void *)(*(void *)(v12 + 48) + 8 * v21) = v47;
      *(void *)(*(void *)(v12 + 56) + 8 * v21) = v14;
      ++*(void *)(v12 + 16);
      uint64_t v26 = __CocoaDictionary.Iterator.next()();
      uint64_t v14 = v27;
      if (!v26) {
        goto LABEL_31;
      }
    }
    char v22 = 0;
    unint64_t v23 = (unint64_t)(63 - v18) >> 6;
    while (++v20 != v23 || (v22 & 1) == 0)
    {
      BOOL v24 = v20 == v23;
      if (v20 == v23) {
        unint64_t v20 = 0;
      }
      v22 |= v24;
      uint64_t v25 = *(void *)(v17 + 8 * v20);
      if (v25 != -1)
      {
        unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    swift_once();
  }
  __break(1u);
  return result;
}

uint64_t EnvironmentProviderDidChangePublisher.__allocating_init<A>(source:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EnvironmentProviderDidChangePublisher.init<A>(source:)(a1, a2, a3);
}

uint64_t EnvironmentProviderDidChangePublisher.init<A>(source:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v61 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v58 = (uint64_t)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v59 = *(void *)(v8 - 8);
  uint64_t v60 = v8;
  MEMORY[0x1F4188790](v8, v9);
  uint64_t v57 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = a3;
  uint64_t AssociatedTypeWitness = (void *)swift_getAssociatedTypeWitness();
  uint64_t v55 = *(AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness, v12);
  uint64_t v14 = (char *)&v42 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CurrentValueSubject<(), Never>);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v50 = AssociatedConformanceWitness;
  unint64_t v49 = lazy protocol witness table accessor for type CurrentValueSubject<(), Never> and conformance CurrentValueSubject<A, B>();
  id v63 = AssociatedTypeWitness;
  unint64_t v64 = v15;
  uint64_t v65 = AssociatedConformanceWitness;
  unint64_t v66 = v49;
  uint64_t v17 = type metadata accessor for Publishers.CombineLatest();
  uint64_t v54 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17, v18);
  unint64_t v20 = (char *)&v42 - v19;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v47 = MEMORY[0x1E4FBC848] + 8;
  unint64_t v21 = (void *)type metadata accessor for Publishers.Map();
  uint64_t v44 = v21;
  uint64_t v56 = *(v21 - 1);
  MEMORY[0x1F4188790](v21, v22);
  unint64_t v43 = (char *)&v42 - v23;
  unint64_t v24 = type metadata accessor for OS_dispatch_queue();
  unint64_t v42 = v24;
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v46 = v25;
  uint64_t v45 = lazy protocol witness table accessor for type _EnvironmentProviderTable.Key and conformance _EnvironmentProviderTable.Key(&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (void (*)(uint64_t))type metadata accessor for OS_dispatch_queue);
  id v63 = v21;
  unint64_t v64 = v24;
  uint64_t v65 = v25;
  unint64_t v66 = v45;
  uint64_t v26 = type metadata accessor for Publishers.Debounce();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v52 = v26;
  uint64_t v53 = v27;
  MEMORY[0x1F4188790](v26, v28);
  os_log_type_t v30 = (char *)&v42 - v29;
  swift_allocObject();
  Swift::Int v31 = (void *)CurrentValueSubject.init(_:)();
  *(void *)(v62 + 24) = v31;
  uint64_t v32 = v51;
  dispatch thunk of ObservableObject.objectWillChange.getter();
  id v63 = v31;
  Publisher.combineLatest<A>(_:)();
  (*(void (**)(char *, void *))(v55 + 8))(v14, AssociatedTypeWitness);
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = a2;
  *(void *)(v33 + 24) = v32;
  uint64_t v34 = v43;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v20, v17);
  char v35 = v57;
  OS_dispatch_queue.SchedulerTimeType.Stride.init(floatLiteral:)();
  id v63 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v36 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v37 = v58;
  __swift_storeEnumTagSinglePayload(v58, 1, 1, v36);
  uint64_t v38 = v44;
  Publisher.debounce<A>(for:scheduler:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v37);

  (*(void (**)(char *, uint64_t))(v59 + 8))(v35, v60);
  (*(void (**)(char *, void *))(v56 + 8))(v34, v38);
  uint64_t v39 = v52;
  swift_getWitnessTable();
  uint64_t v40 = Publisher.eraseToAnyPublisher()();
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v30, v39);
  uint64_t result = v62;
  *(void *)(v62 + 16) = v40;
  return result;
}

uint64_t EnvironmentProviderDidChangePublisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F40D6910](a1, *(void *)(v3 + 16), MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], a2, a3);
}

Swift::Void __swiftcall EnvironmentProviderDidChangePublisher.send()()
{
}

uint64_t EnvironmentProviderDidChangePublisher.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t EnvironmentProviderDidChangePublisher.__deallocating_deinit()
{
  EnvironmentProviderDidChangePublisher.deinit();

  return MEMORY[0x1F4186488](v0, 32, 7);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance EnvironmentProviderDidChangePublisher()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t dispatch thunk of static SiriEnvironmentProvider.defaultScope.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SiriEnvironmentProvider.init(storage:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t type metadata accessor for EnvironmentProviderDidChangePublisher()
{
  return self;
}

uint64_t method lookup function for EnvironmentProviderDidChangePublisher(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for EnvironmentProviderDidChangePublisher);
}

uint64_t dispatch thunk of EnvironmentProviderDidChangePublisher.receive<A>(subscriber:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of EnvironmentProviderDidChangePublisher.send()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

BOOL static _EnvironmentProviderTable.Key.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

uint64_t _EnvironmentProviderTable.Key.init(object:)(uint64_t a1)
{
  swift_unknownObjectWeakInit();
  *(void *)(v1 + 16) = a1;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return v1;
}

void _EnvironmentProviderTable.Key.hash(into:)()
{
  Hasher._combine(_:)(*(void *)(v0 + 16));
}

uint64_t _EnvironmentProviderTable.Key.__deallocating_deinit()
{
  outlined destroy of weak Swift.AnyObject?(v0 + 24);

  return MEMORY[0x1F4186488](v0, 32, 7);
}

uint64_t type metadata accessor for _EnvironmentProviderTable.Key()
{
  return self;
}

Swift::Int _EnvironmentProviderTable.Key.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(v0 + 16));
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _EnvironmentProviderTable.Key()
{
  return _EnvironmentProviderTable.Key.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance _EnvironmentProviderTable.Key()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _EnvironmentProviderTable.Key()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _EnvironmentProviderTable.Key(uint64_t *a1, uint64_t *a2)
{
  return static _EnvironmentProviderTable.Key.== infix(_:_:)(*a1, *a2);
}

uint64_t base witness table accessor for Equatable in _EnvironmentProviderTable.Key()
{
  return lazy protocol witness table accessor for type _EnvironmentProviderTable.Key and conformance _EnvironmentProviderTable.Key(&lazy protocol witness table cache variable for type _EnvironmentProviderTable.Key and conformance _EnvironmentProviderTable.Key, (void (*)(uint64_t))type metadata accessor for _EnvironmentProviderTable.Key);
}

uint64_t outlined destroy of weak Swift.AnyObject?(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type CurrentValueSubject<(), Never> and conformance CurrentValueSubject<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type CurrentValueSubject<(), Never> and conformance CurrentValueSubject<A, B>;
  if (!lazy protocol witness table cache variable for type CurrentValueSubject<(), Never> and conformance CurrentValueSubject<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CurrentValueSubject<(), Never>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrentValueSubject<(), Never> and conformance CurrentValueSubject<A, B>);
  }
  return result;
}

uint64_t sub_1C9EA3B20()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t outlined destroy of OS_dispatch_queue.SchedulerOptions?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id one-time initialization function for lock()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E08]), sel_init);
  static _EnvironmentProviderTable.lock = (uint64_t)result;
  return result;
}

void one-time initialization function for table()
{
  static _EnvironmentProviderTable.table = (_UNKNOWN *)MEMORY[0x1E4FBC868];
}

uint64_t specialized UnsafeMutablePointer.assign(repeating:count:)(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void *specialized _NativeDictionary.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_EnvironmentProviderTable.Key, Swift.AnyObject>);
    uint64_t v2 = (void *)static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v10 = v2;
    __CocoaDictionary.makeIterator()();
    if (__CocoaDictionary.Iterator.next()())
    {
      uint64_t v4 = v3;
      type metadata accessor for _EnvironmentProviderTable.Key();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v10;
        unint64_t v5 = v10[2];
        if (v10[3] <= v5)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v5 + 1, 1);
          uint64_t v2 = v10;
        }
        specialized _NativeDictionary._unsafeInsertNew(key:value:)(v9, v4, v2);
        uint64_t v6 = __CocoaDictionary.Iterator.next()();
        uint64_t v4 = v7;
      }
      while (v6);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (void *)MEMORY[0x1E4FBC868];
  }
  return v2;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)()
{
  OUTLINED_FUNCTION_5_15();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  char v3 = v2;
  uint64_t v4 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v1 + 16))
  {
    OUTLINED_FUNCTION_6_18();
    uint64_t v25 = v5;
    OUTLINED_FUNCTION_2_21();
    uint64_t v24 = v6;
    swift_retain();
    uint64_t v7 = 0;
    if (!v0) {
      goto LABEL_4;
    }
LABEL_3:
    OUTLINED_FUNCTION_8_18();
    for (uint64_t i = v8 | (v7 << 6); ; uint64_t i = v12 + (v7 << 6))
    {
      long long v26 = *(_OWORD *)(*(void *)(v1 + 56) + 16 * i);
      if ((v3 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v26, *((unint64_t *)&v26 + 1));
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._finalize()();
      OUTLINED_FUNCTION_3_20();
      if (v13)
      {
        OUTLINED_FUNCTION_9_15();
        while (++v16 != v17 || (v15 & 1) == 0)
        {
          BOOL v18 = v16 == v17;
          if (v16 == v17) {
            uint64_t v16 = 0;
          }
          v15 |= v18;
          if (*(void *)(v4 + 64 + 8 * v16) != -1)
          {
            OUTLINED_FUNCTION_7_15();
            goto LABEL_27;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_10_12();
LABEL_27:
      OUTLINED_FUNCTION_0_18(v14);
      *(_OWORD *)(v20 + 16 * v19) = v26;
      ++*(void *)(v4 + 16);
      if (v0) {
        goto LABEL_3;
      }
LABEL_4:
      uint64_t v10 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_36;
      }
      if (v10 >= v24) {
        goto LABEL_29;
      }
      ++v7;
      if (!v25[v10])
      {
        uint64_t v7 = v10 + 1;
        if (v10 + 1 >= v24) {
          goto LABEL_29;
        }
        if (!v25[v7])
        {
          uint64_t v11 = v10 + 2;
          if (v11 >= v24)
          {
LABEL_29:
            swift_release();
            if (v3)
            {
              OUTLINED_FUNCTION_13_11();
              if (v22 != v23) {
                *uint64_t v25 = -1 << v21;
              }
              else {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v21 + 63) >> 6, v25);
              }
              *(void *)(v1 + 16) = 0;
            }
            break;
          }
          if (!v25[v11])
          {
            while (1)
            {
              uint64_t v7 = v11 + 1;
              if (__OFADD__(v11, 1)) {
                goto LABEL_37;
              }
              if (v7 >= v24) {
                goto LABEL_29;
              }
              ++v11;
              if (v25[v7]) {
                goto LABEL_15;
              }
            }
          }
          uint64_t v7 = v11;
        }
      }
LABEL_15:
      OUTLINED_FUNCTION_11_13();
    }
  }
  swift_release();
  uint64_t *v0 = v4;
}

{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  long long *v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  char v30;
  long long v31[2];

  uint64_t v4 = v0;
  OUTLINED_FUNCTION_5_15();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PluginPackage>);
  os_log_type_t v30 = v2;
  unint64_t v5 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(void *)(v1 + 16)) {
    goto LABEL_37;
  }
  OUTLINED_FUNCTION_6_18();
  uint64_t v29 = v6;
  OUTLINED_FUNCTION_2_21();
  uint64_t v27 = v0;
  uint64_t v28 = v7;
  swift_retain();
  uint64_t v8 = 0;
  if (!v3) {
    goto LABEL_4;
  }
LABEL_3:
  OUTLINED_FUNCTION_8_18();
  for (uint64_t i = v9 | (v8 << 6); ; uint64_t i = v14 + (v8 << 6))
  {
    char v15 = (long long *)(*(void *)(v1 + 56) + 40 * i);
    if (v30)
    {
      outlined init with take of Transforming(v15, (uint64_t)v31);
    }
    else
    {
      outlined init with copy of Transforming((uint64_t)v15, (uint64_t)v31);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    Hasher._finalize()();
    OUTLINED_FUNCTION_3_20();
    if (v16)
    {
      OUTLINED_FUNCTION_9_15();
      while (++v19 != v20 || (v18 & 1) == 0)
      {
        uint64_t v21 = v19 == v20;
        if (v19 == v20) {
          uint64_t v19 = 0;
        }
        v18 |= v21;
        if (*(void *)(v5 + 64 + 8 * v19) != -1)
        {
          OUTLINED_FUNCTION_7_15();
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      return;
    }
    OUTLINED_FUNCTION_10_12();
LABEL_28:
    OUTLINED_FUNCTION_0_18(v17);
    outlined init with take of Transforming(v31, v23 + 40 * v22);
    ++*(void *)(v5 + 16);
    if (v3) {
      goto LABEL_3;
    }
LABEL_4:
    uint64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_39;
    }
    if (v11 >= v28)
    {
      swift_release();
      uint64_t v4 = v27;
      uint64_t v12 = v29;
      goto LABEL_32;
    }
    uint64_t v12 = v29;
    ++v8;
    if (!v29[v11])
    {
      uint64_t v8 = v11 + 1;
      if (v11 + 1 >= v28) {
        goto LABEL_30;
      }
      if (!v29[v8]) {
        break;
      }
    }
LABEL_15:
    OUTLINED_FUNCTION_11_13();
  }
  char v13 = v11 + 2;
  if (v13 < v28)
  {
    if (!v29[v13])
    {
      while (1)
      {
        uint64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_40;
        }
        if (v8 >= v28) {
          goto LABEL_30;
        }
        ++v13;
        if (v29[v8]) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v8 = v13;
    goto LABEL_15;
  }
LABEL_30:
  swift_release();
  uint64_t v4 = v27;
LABEL_32:
  if (v30)
  {
    OUTLINED_FUNCTION_13_11();
    if (v25 != v26) {
      void *v12 = -1 << v24;
    }
    else {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v24 + 63) >> 6, v12);
    }
    *(void *)(v1 + 16) = 0;
  }
LABEL_37:
  swift_release();
  *uint64_t v4 = v5;
}

unint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  char v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_EnvironmentProviderTable.Key, Swift.AnyObject>);
  uint64_t v6 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v8 = (void *)(v5 + 64);
    uint64_t v9 = -1;
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    unint64_t result = swift_retain();
    int64_t v13 = 0;
    if (!v10) {
      goto LABEL_6;
    }
LABEL_5:
    unint64_t v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      uint64_t v19 = *(void *)(*(void *)(v5 + 48) + 8 * i);
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * i);
      if ((a2 & 1) == 0)
      {
        swift_retain();
        swift_unknownObjectRetain();
      }
      unint64_t result = specialized _NativeDictionary._unsafeInsertNew(key:value:)(v19, v20, v6);
      if (v10) {
        goto LABEL_5;
      }
LABEL_6:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
LABEL_29:
        __break(1u);
        return result;
      }
      if (v16 >= v11) {
        goto LABEL_22;
      }
      unint64_t v17 = v8[v16];
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v11) {
          goto LABEL_22;
        }
        unint64_t v17 = v8[v13];
        if (!v17)
        {
          int64_t v18 = v16 + 2;
          if (v18 >= v11)
          {
LABEL_22:
            swift_release();
            if (a2)
            {
              uint64_t v21 = 1 << *(unsigned char *)(v5 + 32);
              if (v21 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v21 + 63) >> 6, (void *)(v5 + 64));
              }
              else {
                *uint64_t v8 = -1 << v21;
              }
              *(void *)(v5 + 16) = 0;
            }
            break;
          }
          unint64_t v17 = v8[v18];
          if (!v17)
          {
            while (1)
            {
              int64_t v13 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                goto LABEL_29;
              }
              if (v13 >= v11) {
                goto LABEL_22;
              }
              unint64_t v17 = v8[v13];
              ++v18;
              if (v17) {
                goto LABEL_17;
              }
            }
          }
          int64_t v13 = v18;
        }
      }
LABEL_17:
      unint64_t v10 = (v17 - 1) & v17;
    }
  }
  unint64_t result = swift_release();
  *char v3 = v6;
  return result;
}

unint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(uint64_t a1, uint64_t a2, void *a3)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(a1 + 16));
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  *(void *)(a3[6] + 8 * result) = a1;
  *(void *)(a3[7] + 8 * result) = a2;
  ++a3[2];
  return result;
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)()
{
  OUTLINED_FUNCTION_12_13();
  uint64_t v0 = (_OWORD *)OUTLINED_FUNCTION_1_19();
  char v3 = specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v0, v1, v2);
  OUTLINED_FUNCTION_4_17((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);

  return swift_bridgeObjectRelease();
}

{
  _OWORD *v0;
  uint64_t v1;
  char v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t vars8;

  OUTLINED_FUNCTION_12_13();
  uint64_t v0 = (_OWORD *)OUTLINED_FUNCTION_1_19();
  char v3 = specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v0, v1, v2);
  OUTLINED_FUNCTION_4_17((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);

  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *v3;
  *char v3 = 0x8000000000000000;
  uint64_t v8 = specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  OUTLINED_FUNCTION_4_17(v8, v9, v10, v11, v12, v13, v14, v15, v17, v18);

  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2)
{
  char v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t result = MEMORY[0x1CB7922E0](v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    *char v3 = (uint64_t)specialized _NativeDictionary.init(_:capacity:)(v7, result + 1);
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v3;
  *char v3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
  *char v3 = v10;

  return swift_bridgeObjectRelease();
}

uint64_t lazy protocol witness table accessor for type _EnvironmentProviderTable.Key and conformance _EnvironmentProviderTable.Key(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<ObjectIdentifier, Any>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_13:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v16;
LABEL_5:
  uint64_t v18 = *v4;
  if (v15)
  {
    uint64_t v19 = (_OWORD *)(*(void *)(v18 + 56) + 32 * v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return outlined init with take of Any(a1, v19);
  }
  else
  {
    return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, (uint64_t)a1, v18);
  }
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  BOOL v17;
  Swift::Int v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *result;
  uint64_t v26;
  uint64_t vars8;

  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  unint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  BOOL v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v13 = *v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)();
  unint64_t v16 = *(void *)(v13 + 16);
  char v17 = (v15 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v19 = v14;
  uint64_t v20 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<CodingUserInfoKey, Any>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v18)) {
    goto LABEL_5;
  }
  uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v20 & 1) != (v22 & 1))
  {
LABEL_11:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v19 = v21;
LABEL_5:
  char v23 = *v4;
  if (v20)
  {
    uint64_t v24 = (_OWORD *)(*(void *)(v23 + 56) + 32 * v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    return outlined init with take of Any(a1, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
    return specialized _NativeDictionary._insert(at:key:value:)(v19, (uint64_t)v12, a1, v23);
  }
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v29 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  Swift::Int v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v4;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)();
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v16 & 1) == 0;
  Swift::Int v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v20 = v15;
  char v21 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UUID, String>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v19)) {
    goto LABEL_5;
  }
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v21 & 1) != (v23 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v20 = v22;
LABEL_5:
  uint64_t v24 = *v5;
  if (v21)
  {
    uint64_t v25 = (uint64_t *)(*(void *)(v24 + 56) + 16 * v20);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v27 = v29;
    *uint64_t v25 = a1;
    v25[1] = v27;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a3, v9);
    return specialized _NativeDictionary._insert(at:key:value:)(v20, (uint64_t)v13, a1, v29, v24);
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<_EnvironmentProviderTable.Key, Swift.AnyObject>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_11:
    type metadata accessor for _EnvironmentProviderTable.Key();
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v16;
LABEL_5:
  uint64_t v18 = *v4;
  if (v15)
  {
    uint64_t v19 = *(void *)(v18 + 56);
    uint64_t result = swift_unknownObjectRelease();
    *(void *)(v19 + 8 * v14) = a1;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a1, v18);
    return swift_retain();
  }
  return result;
}

uint64_t specialized _NativeDictionary.makeIterator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

void *type metadata accessor for _EnvironmentProviderTable()
{
  return &unk_1F242B048;
}

void OUTLINED_FUNCTION_0_18(unint64_t a1@<X8>)
{
  *(void *)(v4 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
  uint64_t v5 = (void *)(*(void *)(v1 + 48) + 16 * a1);
  void *v5 = v3;
  v5[1] = v2;
}

uint64_t OUTLINED_FUNCTION_1_19()
{
  void *v0 = 0x8000000000000000;
  return v1;
}

uint64_t OUTLINED_FUNCTION_4_17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  uint64_t *v10 = a10;
  return result;
}

uint64_t OUTLINED_FUNCTION_12_13()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t Reducer.reduce.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t Reducer.init()()
{
  OUTLINED_FUNCTION_0_19();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v1;
  *(void *)(result + 24) = v0;
  *uint64_t v2 = destructiveProjectEnumData for InputOrigin;
  v2[1] = result;
  return result;
}

uint64_t sub_1C9EA4E50()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t Reducer.init(apply:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t Reducer.init<A>(getter:setter:)()
{
  OUTLINED_FUNCTION_0_19();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v1;
  *(void *)(result + 24) = v0;
  *uint64_t v2 = partial apply for closure #1 in Reducer.init<A>(getter:setter:);
  v2[1] = (uint64_t (*)(uint64_t, uint64_t))result;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (**v2)(uint64_t, uint64_t);
  uint64_t result;

  OUTLINED_FUNCTION_0_19();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v1;
  *(void *)(result + 24) = v0;
  *uint64_t v2 = partial apply for closure #1 in Reducer.init<A>(getter:setter:);
  v2[1] = (uint64_t (*)(uint64_t, uint64_t))result;
  return result;
}

uint64_t closure #1 in Reducer.init<A>(getter:setter:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(*MEMORY[0x1E4FBC5F0] + *a3 + 8);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v8);
  char v10 = (char *)v12 - v9;
  swift_getAtKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v10, v3);
  swift_setAtReferenceWritableKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v10, v3);
}

uint64_t partial apply for closure #1 in Reducer.init<A>(getter:setter:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in Reducer.init<A>(getter:setter:)(a1, a2, *(void **)(v2 + 16));
}

{
  return closure #1 in Reducer.init<A>(getter:setter:)(a1, a2);
}

uint64_t closure #1 in Reducer.init<A>(getter:setter:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v4 = (char *)v12 - v3;
  uint64_t v6 = *(void *)(*MEMORY[0x1E4FBC5F0] + v5 + 8);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v2, v8);
  char v10 = (char *)v12 - v9;
  swift_getAtKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v4, v10, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v4, 0, 1, v6);
  swift_setAtReferenceWritableKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t objectdestroy_2Tm()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

double Reducer.init(builder:)@<D0>(void (*a1)(long long *__return_ptr)@<X0>, _OWORD *a2@<X8>)
{
  a1(&v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double Transformer.init(_:reducer:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a4;
  *(void *)(v12 + 24) = a5;
  *(void *)(v12 + 32) = a1;
  *(void *)(v12 + 40) = a2;
  *(_OWORD *)(v12 + 48) = *a3;
  Transformer.init(transform:)((uint64_t)partial apply for closure #1 in Transformer.init(_:reducer:), v12, a4, a5, v15);
  double result = *(double *)v15;
  long long v14 = v15[1];
  *a6 = v15[0];
  a6[1] = v14;
  return result;
}

uint64_t partial apply for closure #1 in Transformer.init(_:reducer:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in Transformer.init(_:reducer:)(a1, a2);
}

{
  uint64_t v2;

  return closure #1 in Transformer.init(_:reducer:)(a1, *(void (**)(void))(v2 + 32), *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48), *(void *)(v2 + 24), a2);
}

double Transformer.init(_:builder:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(_OWORD *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _OWORD *a6@<X8>)
{
  a3(v15);
  long long v14 = v15[0];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a4;
  *(void *)(v11 + 24) = a5;
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  *(_OWORD *)(v11 + 48) = v14;
  Transformer.init(transform:)((uint64_t)partial apply for closure #1 in Transformer.init(_:reducer:), v11, a4, a5, v15);
  double result = *(double *)v15;
  long long v13 = v15[1];
  *a6 = v15[0];
  a6[1] = v13;
  return result;
}

uint64_t closure #1 in Transformer.init(_:reducer:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  a2();
  uint64_t result = a3(a1, a5);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a5, a4);
  }
  return result;
}

uint64_t objectdestroy_8Tm()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t static ReducerBuilder.buildIf(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1)
  {
    *a2 = v2;
    a2[1] = v3;
  }
  else
  {
    Reducer.init()();
  }

  return outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWPath) -> ())?(v2);
}

uint64_t static ReducerBuilder.buildExpression(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t static ReducerBuilder.buildBlock(_:)()
{
  OUTLINED_FUNCTION_1_20();
  long long v4 = (uint64_t (*)(uint64_t, uint64_t))swift_allocObject();
  *((void *)v4 + 2) = v1;
  *((void *)v4 + 3) = v0;
  *((void *)v4 + 4) = v2;
  *uint64_t v3 = partial apply for closure #1 in static ReducerBuilder.buildBlock(_:);
  v3[1] = v4;

  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in static ReducerBuilder.buildBlock(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a5 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](a1, a1);
  uint64_t v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v10, v15);
  char v17 = &v19[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *))(v14 + 16))(v17);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, a5);
  uint64_t v24 = a3;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  unint64_t v22 = v17;
  char v23 = v12;
  type metadata accessor for Reducer();
  type metadata accessor for Array();
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v12, a5);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v14 + 8))(v17, a4);
}

uint64_t sub_1C9EA586C()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in static ReducerBuilder.buildBlock(_:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static ReducerBuilder.buildBlock(_:)(a1, a2, v2[4], v2[2], v2[3]);
}

uint64_t --> infix<A, B, C>(_:_:)(uint64_t a1, uint64_t a2)
{
  return --> infix<A, B, C>(_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))Reducer.init<A>(getter:setter:));
}

{
  return --> infix<A, B, C>(_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))Reducer.init<A>(getter:setter:));
}

uint64_t --> infix<A, B, C>(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  OUTLINED_FUNCTION_0_19();
  swift_retain();
  swift_retain();

  return a3(v4, v3);
}

uint64_t -- infix<A, B, C>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  *(void *)a1 = *(void *)a3;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a3 + 8);
  *(void *)(a1 + 24) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return a2;
}

uint64_t --> infix<A, B, C, D>(_:_:)()
{
  OUTLINED_FUNCTION_1_20();
  uint64_t v5 = *v4;
  uint64_t v6 = v4[3];
  uint64_t v8 = *v7;
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = (void *)(v8 + *MEMORY[0x1E4FBC5F0]);
  *(void *)(v9 + 16) = *v10;
  *(void *)(v9 + 24) = v10[1];
  *(void *)(v9 + 32) = v2;
  *(void *)(v9 + 40) = v5;
  *(_OWORD *)(v9 + 48) = *(_OWORD *)(v1 + 8);
  *(void *)(v9 + 64) = v6;
  *(void *)(v9 + 72) = v0;
  *uint64_t v3 = partial apply for closure #1 in --> infix<A, B, C, D>(_:_:);
  v3[1] = (uint64_t (*)(uint64_t, uint64_t))v9;
  swift_retain();
  swift_retain();
  swift_retain();

  return swift_retain();
}

uint64_t closure #1 in --> infix<A, B, C, D>(_:_:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  v21[0] = a2;
  uint64_t v4 = (void (*)(char *))a3[1];
  uint64_t v5 = *(void *)(*MEMORY[0x1E4FBBE08] + *a4 + 8);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1, *a3);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v7, v10);
  uint64_t v13 = (char *)v21 - v12;
  uint64_t v22 = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v11, v16);
  uint64_t v18 = (char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAtKeyPath();
  uint64_t v19 = v21[1];
  v4(v18);
  if (!v19)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v13, v5);
    swift_setAtReferenceWritableKeyPath();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v22);
}

uint64_t sub_1C9EA5CC8()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t partial apply for closure #1 in --> infix<A, B, C, D>(_:_:)(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(v2 + 48);
  v6[0] = *(_OWORD *)(v2 + 32);
  v6[1] = v3;
  uint64_t v4 = *(void **)(v2 + 72);
  uint64_t v7 = *(void *)(v2 + 64);
  return closure #1 in --> infix<A, B, C, D>(_:_:)(a1, a2, v6, v4);
}

void *initializeBufferWithCopyOfBuffer for Reducer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for Reducer()
{
  return swift_release();
}

void *assignWithCopy for Reducer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for Reducer(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for Reducer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ReducerBuilder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in closure #1 in static ReducerBuilder.buildBlock(_:)(uint64_t (**a1)(void, void))
{
  return (*a1)(*(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t HomeInfo.homeIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HomeInfo.homeIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*HomeInfo.homeIdentifier.modify())()
{
  return destructiveProjectEnumData for InputOrigin;
}

SiriUtilities::HomeInfo __swiftcall HomeInfo.init()()
{
  void *v0 = 0;
  v0[1] = 0;
  return result;
}

uint64_t getEnumTagSinglePayload for HomeInfo(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HomeInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)SiriUtilities::HomeInfo result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HomeInfo()
{
  return &type metadata for HomeInfo;
}

uint64_t Transformer.init(transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = a4;
  *a5 = a1;
  a5[1] = a2;
  a5[2] = partial apply for closure #1 in Transformer.init(transform:);
  a5[3] = result;
  return result;
}

uint64_t Transformer.transform.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t Transformer.reverseTransform.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t Transformer.init(transform:reverseTransform:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t closure #1 in Transformer.init(transform:)()
{
  lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
  swift_allocError();
  *(void *)uint64_t v0 = 0;
  *(void *)(v0 + 8) = 0;
  *(unsigned char *)(v0 + 16) = 2;
  return swift_willThrow();
}

uint64_t partial apply for closure #1 in Transformer.init(transform:)()
{
  return closure #1 in Transformer.init(transform:)();
}

uint64_t static RawRepresentable.transformer.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (**a3)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  swift_getAssociatedTypeWitness();
  uint64_t result = type metadata accessor for Optional();
  *a3 = partial apply for closure #1 in static RawRepresentable.transformer.getter;
  a3[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v6;
  a3[2] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))partial apply for closure #2 in static RawRepresentable.transformer.getter;
  a3[3] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v7;
  return result;
}

uint64_t closure #1 in static RawRepresentable.transformer.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v40 = a4;
  uint64_t v44 = a1;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v39 = v6;
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v9 = (char *)&v37 - v8;
  uint64_t v41 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v11, v13);
  uint64_t v16 = (char *)&v37 - v15;
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v14, v18);
  uint64_t v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19, v22);
  uint64_t v24 = (char *)&v37 - v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v16, v44, v11);
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
    unint64_t v42 = 0;
    unint64_t v43 = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    unint64_t v42 = 0xD000000000000028;
    unint64_t v43 = 0x80000001C9EB9590;
    v25._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    unint64_t v26 = v42;
    unint64_t v27 = v43;
    lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    swift_allocError();
    *(void *)uint64_t v28 = v26;
    *(void *)(v28 + 8) = v27;
    *(unsigned char *)(v28 + 16) = 0;
    return swift_willThrow();
  }
  else
  {
    uint64_t v30 = v17;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v24, v16, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v21, v24, AssociatedTypeWitness);
    dispatch thunk of RawRepresentable.init(rawValue:)();
    if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, a2) == 1)
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v39);
      unint64_t v42 = 0;
      unint64_t v43 = 0xE000000000000000;
      _StringGuts.grow(_:)(41);
      v31._object = (void *)0x80000001C9EB95C0;
      v31._uint64_t countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v31);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v32._uint64_t countAndFlagsBits = 0xD000000000000014;
      v32._object = (void *)0x80000001C9EB95E0;
      String.append(_:)(v32);
      v33._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      unint64_t v34 = v42;
      unint64_t v35 = v43;
      lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
      swift_allocError();
      *(void *)uint64_t v36 = v34;
      *(void *)(v36 + 8) = v35;
      *(unsigned char *)(v36 + 16) = 0;
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v24, AssociatedTypeWitness);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a2 - 8) + 32))(v40, v9, a2);
    }
  }
}

uint64_t partial apply for closure #1 in static RawRepresentable.transformer.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in static RawRepresentable.transformer.getter(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t closure #2 in static RawRepresentable.transformer.getter@<X0>(uint64_t a1@<X8>)
{
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, AssociatedTypeWitness);
}

uint64_t partial apply for closure #2 in static RawRepresentable.transformer.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in static RawRepresentable.transformer.getter(a1);
}

uint64_t destroy for Transformer()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for Transformer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for Transformer(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for Transformer(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Transformer(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Transformer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for Transformer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined copy of TransformationError(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for TransformationError(uint64_t a1)
{
  return outlined consume of TransformationError(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of TransformationError(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for TransformationError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of TransformationError(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for TransformationError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of TransformationError(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of TransformationError(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for TransformationError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of TransformationError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransformationError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TransformationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for TransformationError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for TransformationError(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TransformationError()
{
  return &type metadata for TransformationError;
}

uint64_t OUTLINED_FUNCTION_0_20()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void __swiftcall TypeInformation.init(for:)(SiriUtilities::TypeInformation *__return_ptr retstr, SiriUtilities::TypeIdentifier a2)
{
  specialized TypeInformation.init<A>(encoding:)(*(void *)a2.encoding._countAndFlagsBits, *(void *)(a2.encoding._countAndFlagsBits + 8), (uint64_t)v8);
  char v3 = v8[1];
  SiriUtilities::TypeIdentifier v4 = v9;
  SiriUtilities::TypeIdentifier v5 = v10;
  uint64_t v6 = v11;
  uint64_t v7 = v12;
  retstr->isOptional = v8[0];
  retstr->isArray = v3;
  retstr->baseType = v4;
  retstr->originalType = v5;
  retstr->encoding._uint64_t countAndFlagsBits = v6;
  retstr->encoding._object = v7;
}

uint64_t TypeInformation.init(for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = _mangledTypeName(_:)();
  if (v3)
  {
    uint64_t result = specialized TypeInformation.init<A>(encoding:)(v2, v3, (uint64_t)&v18);
    char v5 = BYTE1(v18);
    long long v6 = v19;
    long long v7 = v20;
    uint64_t v8 = v21;
    uint64_t v9 = v22;
    *(unsigned char *)a1 = v18;
    *(unsigned char *)(a1 + 1) = v5;
    *(_OWORD *)(a1 + 8) = v6;
    *(_OWORD *)(a1 + 24) = v7;
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v9;
  }
  else
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    uint64_t v18 = 0xD000000000000025;
    *(void *)&long long v19 = 0x80000001C9EB9600;
    v10._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.logger);
    swift_bridgeObjectRetain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v18 = v15;
      *(_DWORD *)uint64_t v14 = 136315650;
      uint64_t v16 = StaticString.description.getter();
      uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2048;
      uint64_t v23 = 38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001C9EB9600, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C9E4C000, v12, v13, "FatalError at %s:%lu - %s", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1CB792FA0](v15, -1, -1);
      MEMORY[0x1CB792FA0](v14, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t TypeInformation.init<A>(encoding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v48 = a4;
  uint64_t v45 = *(void *)(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness, v7);
  OUTLINED_FUNCTION_35_0();
  uint64_t v43 = v8;
  uint64_t v11 = MEMORY[0x1F4188790](v9, v10);
  uint64_t v46 = (char *)&v41 - v12;
  uint64_t v13 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v11, v14);
  OUTLINED_FUNCTION_35_0();
  uint64_t v44 = v15;
  MEMORY[0x1F4188790](v16, v17);
  long long v19 = (char *)&v41 - v18;
  long long v20 = *(void (**)(void))(v13 + 16);
  OUTLINED_FUNCTION_0_21();
  v20();
  uint64_t v49 = String.init<A>(_:)();
  uint64_t v51 = v21;
  OUTLINED_FUNCTION_0_21();
  v20();
  TypeIdentifier.init<A>(encoding:)((uint64_t)v19, a2, &v53);
  uint64_t v22 = v54;
  uint64_t v50 = v53;
  swift_bridgeObjectRetain();
  uint64_t v52 = a3;
  if ((dispatch thunk of StringProtocol.hasSuffix(_:)() & 1) == 0)
  {
    uint64_t v45 = v22;
    char v32 = dispatch thunk of StringProtocol.hasPrefix(_:)();
    Swift::String v33 = v44;
    uint64_t v42 = a1;
    OUTLINED_FUNCTION_0_21();
    v20();
    if (v32)
    {
      char v34 = dispatch thunk of StringProtocol.hasSuffix(_:)();
      uint64_t v35 = v13 + 8;
      uint64_t v44 = *(void (**)(void, void))(v13 + 8);
      v44(v33, a2);
      uint64_t v31 = v48;
      uint64_t v29 = v49;
      uint64_t v22 = v45;
      if (v34)
      {
        swift_bridgeObjectRelease();
        __int16 v55 = 1;
        uint64_t v41 = v35;
        uint64_t v36 = v42;
        OUTLINED_FUNCTION_0_21();
        v20();
        Collection.dropFirst(_:)();
        uint64_t v37 = AssociatedTypeWitness;
        swift_getAssociatedConformanceWitness();
        uint64_t v38 = (uint64_t)v46;
        Collection.dropLast(_:)();
        swift_getAssociatedConformanceWitness();
        TypeIdentifier.init<A>(encoding:)(v38, v37, &v53);
        uint64_t v22 = v45;
        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v44)(v36, a2);
        uint64_t v26 = v53;
        uint64_t v27 = v54;
        uint64_t v28 = v50;
        uint64_t v30 = v51;
        goto LABEL_9;
      }
      uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t))v44;
    }
    else
    {
      uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
      v39((uint64_t)v33, a2);
      uint64_t v31 = v48;
      uint64_t v29 = v49;
      uint64_t v22 = v45;
    }
    uint64_t result = v39(v42, a2);
    __int16 v55 = 0;
    uint64_t v28 = v50;
    uint64_t v30 = v51;
    uint64_t v26 = v50;
    uint64_t v27 = v22;
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  __int16 v55 = 256;
  OUTLINED_FUNCTION_0_21();
  v20();
  uint64_t v23 = (uint64_t)v46;
  BidirectionalCollection.dropLast(_:)();
  uint64_t v24 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  TypeIdentifier.init<A>(encoding:)(v23, v24, &v53);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a1, a2);
  uint64_t v26 = v53;
  uint64_t v27 = v54;
  uint64_t v29 = v49;
  uint64_t v28 = v50;
  uint64_t v30 = v51;
  uint64_t v31 = v48;
LABEL_9:
  char v40 = v55;
  *(unsigned char *)uint64_t v31 = HIBYTE(v55);
  *(unsigned char *)(v31 + 1) = v40;
  *(void *)(v31 + 8) = v26;
  *(void *)(v31 + 16) = v27;
  *(void *)(v31 + 24) = v28;
  *(void *)(v31 + 32) = v22;
  *(void *)(v31 + 40) = v29;
  *(void *)(v31 + 48) = v30;
  return result;
}

uint64_t TypeInformation.typeName.getter()
{
  int v1 = *v0;
  int v2 = v0[1];
  uint64_t v4 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  uint64_t v6 = *((void *)v0 + 5);
  char v5 = (void *)*((void *)v0 + 6);
  uint64_t v7 = _typeByName(_:)();
  if (v7)
  {
    if (v7 != MEMORY[0x1E4FBC848] + 8) {
      return _typeName(_:qualified:)();
    }
    swift_bridgeObjectRetain();
    uint64_t v9 = _mangledTypeName(_:)();
    if (v10)
    {
      if (v6 == v9 && v10 == v5)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return _typeName(_:qualified:)();
      }
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v12) {
        return _typeName(_:qualified:)();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  if ((v1 | v2) == 1)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = specialized TypeInformation.init<A>(encoding:)(v4, v3, (uint64_t)v21);
    uint64_t v14 = TypeInformation.typeName.getter(v13);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v1)
    {
      v21[0] = v14;
      v21[1] = v16;
      uint64_t v17 = 63;
    }
    else
    {
      v21[0] = 91;
      v21[1] = 0xE100000000000000;
      v20._uint64_t countAndFlagsBits = v14;
      v20._object = v16;
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      uint64_t v17 = 93;
    }
    unint64_t v19 = 0xE100000000000000;
  }
  else
  {
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    strcpy((char *)v21, "_typeByName(\"");
    HIWORD(v21[1]) = -4864;
    swift_bridgeObjectRetain();
    v18._uint64_t countAndFlagsBits = v6;
    v18._object = v5;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    uint64_t v17 = 10530;
    unint64_t v19 = 0xE200000000000000;
  }
  String.append(_:)(*(Swift::String *)&v17);
  return v21[0];
}

uint64_t TypeInformation.isOptional.getter()
{
  return *v0;
}

uint64_t TypeInformation.isArray.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t TypeInformation.baseType.getter@<X0>(void *a1@<X8>)
{
  return OUTLINED_FUNCTION_7_9(*(void *)(v1 + 16), a1);
}

uint64_t TypeInformation.originalType.getter@<X0>(void *a1@<X8>)
{
  return OUTLINED_FUNCTION_7_9(*(void *)(v1 + 32), a1);
}

uint64_t TypeInformation.encoding.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t TypeInformation.description.getter()
{
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = TypeInformation.typeName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 0x29666C65732ELL;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  return 0xD000000000000015;
}

uint64_t destroy for TypeInformation()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TypeInformation(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TypeInformation(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TypeInformation(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TypeInformation(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TypeInformation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TypeInformation()
{
  return &type metadata for TypeInformation;
}

uint64_t SafeCallback.init()()
{
  swift_unknownObjectWeakInit();
  return v0;
}

uint64_t SafeCallback.deinit()
{
  swift_unknownObjectWeakDestroy();
  return v0;
}

uint64_t SafeCallback.maybeObj.getter()
{
  swift_beginAccess();
  return MEMORY[0x1CB7930A0](v0 + 16);
}

uint64_t SafeCallback.maybeObj.setter()
{
  return swift_unknownObjectRelease();
}

void (*SafeCallback.maybeObj.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = MEMORY[0x1CB7930A0](v1 + 16);
  return WeakBox.value.modify;
}

uint64_t SafeCallback.reify(_:)(void (*a1)(void))
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 96))();
  if (result)
  {
    a1();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t key path setter for SafeCallback.maybeObj : <A>SafeCallback<A>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 104);
  uint64_t v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t SafeCallback.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t SafeCallback.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  SafeCallback.init()();
  return v0;
}

uint64_t sub_1C9EA7AE0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_1C9EA7B30()
{
  return 8;
}

void *sub_1C9EA7B3C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata completion function for SafeCallback()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for SafeCallback()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for SafeCallback(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SafeCallback);
}

uint64_t dispatch thunk of SafeCallback.maybeObj.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of SafeCallback.maybeObj.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of SafeCallback.maybeObj.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of SafeCallback.reify(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of SafeCallback.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t InteractionType.aceInteractionType.getter()
{
  if (*v0) {
    return 0x7244676F6C616944;
  }
  else {
    return 0x4479616C70736944;
  }
}

uint64_t InteractionType.rawValue.getter()
{
  if (*v0) {
    return 0x7244676F6C616944;
  }
  else {
    return 0x4479616C70736944;
  }
}

SiriUtilities::InteractionType_optional __swiftcall InteractionType.init(aceValue:)(Swift::String aceValue)
{
  object = aceValue._object;
  uint64_t countAndFlagsBits = aceValue._countAndFlagsBits;
  uint64_t v4 = v1;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == aceValue._countAndFlagsBits && v5 == object)
  {
    char v8 = 1;
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  char v7 = OUTLINED_FUNCTION_0();
  swift_bridgeObjectRelease();
  if (v7)
  {
    char v8 = 1;
LABEL_17:
    result.value = swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v9 == object)
  {
    char v8 = 0;
    goto LABEL_16;
  }
  char v11 = OUTLINED_FUNCTION_0();
  swift_bridgeObjectRelease();
  result.value = swift_bridgeObjectRelease();
  if (v11) {
    char v8 = 0;
  }
  else {
    char v8 = 2;
  }
LABEL_18:
  *uint64_t v4 = v8;
  return result;
}

SiriUtilities::InteractionType_optional static InteractionType.from(aceInteractionType:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  uint64_t v4 = a1;
  uint64_t v5 = a2;

  return InteractionType.init(aceValue:)(*(Swift::String *)&v4);
}

SiriUtilities::InteractionType_optional __swiftcall InteractionType.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of InteractionType.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *uint64_t v4 = v7;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InteractionType(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type InteractionType and conformance InteractionType()
{
  unint64_t result = lazy protocol witness table cache variable for type InteractionType and conformance InteractionType;
  if (!lazy protocol witness table cache variable for type InteractionType and conformance InteractionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InteractionType and conformance InteractionType);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InteractionType()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InteractionType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InteractionType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriUtilities::InteractionType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance InteractionType(Swift::String *a1)
{
  return InteractionType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance InteractionType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = InteractionType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unsigned char *storeEnumTagSinglePayload for InteractionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9EA8000);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InteractionType()
{
  return &type metadata for InteractionType;
}

uint64_t one-time initialization function for builtInSpeaker()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioDestination.builtInSpeaker = result;
  unk_1EB9BECB8 = v1;
  return result;
}

uint64_t static AudioDestination.builtInSpeaker.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for builtInSpeaker, &static AudioDestination.builtInSpeaker, (uint64_t *)&unk_1EB9BECB8, a1);
}

uint64_t one-time initialization function for builtInReceiver()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioDestination.builtInReceiver = result;
  *(void *)algn_1EB9BECD8 = v1;
  return result;
}

uint64_t static AudioDestination.builtInReceiver.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for builtInReceiver, &static AudioDestination.builtInReceiver, (uint64_t *)algn_1EB9BECD8, a1);
}

uint64_t one-time initialization function for headphones()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioDestination.headphones = result;
  unk_1EB9BEC88 = v1;
  return result;
}

uint64_t static AudioDestination.headphones.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for headphones, &static AudioDestination.headphones, (uint64_t *)&unk_1EB9BEC88, a1);
}

uint64_t static AudioDestination.bluetoothHandsFreeDevice.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for bluetoothHandsFreeDevice, &static AudioDestination.bluetoothHandsFreeDevice, (uint64_t *)&unk_1EB9BED20, a1);
}

uint64_t one-time initialization function for bluetoothLEDevice()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioDestination.bluetoothLEDevice = result;
  unk_1EB9BECF0 = v1;
  return result;
}

uint64_t static AudioDestination.bluetoothLEDevice.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for bluetoothLEDevice, &static AudioDestination.bluetoothLEDevice, &qword_1EB9BECF0, a1);
}

uint64_t one-time initialization function for bluetoothA2DPDevice()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioDestination.bluetoothA2DPDevice = result;
  *(void *)algn_1EB9BED08 = v1;
  return result;
}

uint64_t static AudioDestination.bluetoothA2DPDevice.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for bluetoothA2DPDevice, &static AudioDestination.bluetoothA2DPDevice, (uint64_t *)algn_1EB9BED08, a1);
}

uint64_t static AudioDestination.usbAudio.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for usbAudio, &static AudioDestination.usbAudio, &qword_1EB9BEC70, a1);
}

uint64_t static AudioDestination.carAudio.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for carAudio, &static AudioDestination.carAudio, (uint64_t *)algn_1EB9BEC58, a1);
}

uint64_t one-time initialization function for hdmi()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioDestination.hdmunint64_t i = result;
  unk_1EB9BED40 = v1;
  return result;
}

uint64_t static AudioDestination.hdmi.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for hdmi, &static AudioDestination.hdmi, &qword_1EB9BED40, a1);
}

uint64_t one-time initialization function for other()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioDestination.other = result;
  *(void *)algn_1EB9BED58 = v1;
  return result;
}

uint64_t static AudioDestination.other.getter@<X0>(void *a1@<X8>)
{
  return static AudioSource.lineIn.getter(&one-time initialization token for other, &static AudioDestination.other, (uint64_t *)algn_1EB9BED58, a1);
}

uint64_t AudioDestination.aceValue.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

SiriUtilities::AudioDestination_optional __swiftcall AudioDestination.init(aceValue:)(SiriUtilities::AudioDestination_optional aceValue)
{
  unint64_t v2 = v1;
  if (aceValue.value.aceValue._object)
  {
    object = aceValue.value.aceValue._object;
    uint64_t countAndFlagsBits = aceValue.value.aceValue._countAndFlagsBits;
    if (one-time initialization token for knownValues != -1) {
      swift_once();
    }
    specialized Set.contains(_:)(countAndFlagsBits, (uint64_t)object, static AudioDestination.knownValues);
    if (aceValue.value.aceValue._countAndFlagsBits)
    {
      *unint64_t v2 = countAndFlagsBits;
      v2[1] = (uint64_t)object;
      return aceValue;
    }
    aceValue.value.aceValue._uint64_t countAndFlagsBits = swift_bridgeObjectRelease();
  }
  *unint64_t v2 = 0;
  v2[1] = 0;
  return aceValue;
}

uint64_t AudioDestination.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t AudioDestination.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  OUTLINED_FUNCTION_8_0();
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    OUTLINED_FUNCTION_8_0();
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    uint64_t v7 = v6;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    *a2 = v5;
    a2[1] = v7;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t static AudioDestination.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t AudioDestination.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int AudioDestination.hashValue.getter()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type AudioDestination and conformance AudioDestination()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioDestination and conformance AudioDestination;
  if (!lazy protocol witness table cache variable for type AudioDestination and conformance AudioDestination)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioDestination and conformance AudioDestination);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AudioDestination@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return AudioDestination.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AudioDestination(void *a1)
{
  return AudioDestination.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for AudioDestination()
{
  return &type metadata for AudioDestination;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  char v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TransformationCapability>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 64);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  char v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 32);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  char v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

uint64_t *LoadableCapability.init(container:capability:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  char v5 = (_OWORD *)((char *)v2 + *(void *)(*v2 + 112));
  _OWORD *v5 = 0u;
  v5[1] = 0u;
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(v4 + 80) - 8) + 32))((uint64_t)v2 + *(void *)(*v2 + 96), a1, *(void *)(v4 + 80));
  uint64_t v6 = (uint64_t)v2 + *(void *)(*v2 + 104);
  swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_18_1();
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, a2);
  return v2;
}

uint64_t LoadableCapability.deinit()
{
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 96), *(void *)(*(void *)v0 + 80));
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 104);
  swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_18_1();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  outlined destroy of Any?(v0 + *(void *)(*(void *)v0 + 112));
  return v0;
}

uint64_t LoadableCapability._handler.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 112);
  swift_beginAccess();
  return outlined init with copy of Any?(v3, a1);
}

uint64_t LoadableCapability._handler.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 112);
  swift_beginAccess();
  outlined assign with take of Any?(a1, v3);
  return swift_endAccess();
}

uint64_t LoadableCapability.handler.getter@<X0>(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_0_22();
  uint64_t v4 = v3;
  LoadableCapability._handler.getter((uint64_t)v6);
  if (v6[3])
  {
    outlined destroy of Any?((uint64_t)v6);
  }
  else
  {
    outlined destroy of Any?((uint64_t)v6);
    (*(void (**)(void *__return_ptr, uint64_t, void))(*(void *)(v4 + 88) + 56))(v6, v1 + *(void *)(*(void *)v1 + 104), *(void *)(v4 + 80));
    LoadableCapability._handler.setter((uint64_t)v6);
  }
  return LoadableCapability._handler.getter(a1);
}

uint64_t LoadableCapability.container.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 96));
}

uint64_t LoadableCapability.capability.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 104);
  swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_18_1();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);

  return v6(a1, v3, v4);
}

uint64_t LoadableCapability.__allocating_init(container:capability:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  LoadableCapability.init(container:capability:)(a1, a2);
  return v4;
}

uint64_t LoadableCapability.__deallocating_deinit()
{
  LoadableCapability.deinit();
  OUTLINED_FUNCTION_0_22();
  uint64_t v2 = *(unsigned int *)(v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(v1 + 52);

  return MEMORY[0x1F4186488](v0, v2, v3);
}

uint64_t type metadata completion function for LoadableCapability()
{
  uint64_t AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      uint64_t inited = swift_initClassMetadata2();
      if (inited) {
        return inited;
      }
      else {
        return 0;
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t type metadata accessor for LoadableCapability()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for LoadableCapability(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LoadableCapability);
}

uint64_t dispatch thunk of LoadableCapability.handler.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of LoadableCapability.__allocating_init(container:capability:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t static SiriEnvironment.forCurrentTask.getter()
{
  if (one-time initialization token for $environment != -1) {
    swift_once();
  }
  TaskLocal.get()();
  uint64_t v0 = v11;
  if (v11)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.logger);
    swift_retain_n();
    unint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v2, v3))
    {

      swift_release_n();
      return v0;
    }
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v5 = ObjectIdentifier.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9E4C000, v2, v3, "SiriEnvironment.forCurrentTask -> %s", v4, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.logger);
    unint64_t v2 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v2, v8)) {
      goto LABEL_13;
    }
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_1C9E4C000, v2, v8, "SiriEnvironment.forCurrentTask -> nil", v9, 2u);
  }
  OUTLINED_FUNCTION_3();
LABEL_13:

  return v0;
}

uint64_t static SiriEnvironmentTaskLocalStorage.environment.getter()
{
  if (one-time initialization token for $environment != -1) {
    swift_once();
  }
  TaskLocal.get()();
  return v1;
}

uint64_t static SiriEnvironment.withTaskLocalEnvironment<A, B>(for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 8))(a4, a6);
  static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)(v7, a2);
  return swift_release();
}

uint64_t static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for $environment != -1) {
    a1 = swift_once();
  }
  MEMORY[0x1F4188790](a1, a2);
  swift_retain();
  TaskLocal.withValue<A>(_:operation:file:line:)();
  return swift_release();
}

uint64_t static SiriEnvironment.withTaskLocalEnvironment<A, B>(for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned char v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  void v8[4] = a3;
  v8[5] = a4;
  uint64_t v8[2] = a1;
  void v8[3] = a2;
  return OUTLINED_FUNCTION_11_2((uint64_t)static SiriEnvironment.withTaskLocalEnvironment<A, B>(for:_:));
}

uint64_t static SiriEnvironment.withTaskLocalEnvironment<A, B>(for:_:)()
{
  OUTLINED_FUNCTION_2_6();
  uint64_t v1 = (*(uint64_t (**)(void))(v0[8] + 8))(v0[6]);
  v0[10] = v1;
  swift_task_alloc();
  OUTLINED_FUNCTION_18_0();
  v0[11] = v2;
  *unint64_t v2 = v3;
  v2[1] = static SiriEnvironment.withTaskLocalEnvironment<A, B>(for:_:);
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[2];
  return static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)(v7, v1, v5, v6, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_0_8();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_1_6();
  _OWORD *v5 = v4;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](static SiriEnvironment.withTaskLocalEnvironment<A, B>(for:_:), 0, 0);
  }
  else
  {
    swift_release();
    OUTLINED_FUNCTION_6_4();
    return v6();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_2_6();
  swift_release();
  OUTLINED_FUNCTION_6_4();
  return v0();
}

uint64_t static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  void v5[4] = a2;
  v5[5] = a3;
  void v5[3] = a1;
  return OUTLINED_FUNCTION_11_2((uint64_t)static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:));
}

uint64_t static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)()
{
  if (one-time initialization token for $environment != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 64) = v3;
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v0 + 16) = *(void *)(v0 + 32);
  *(void *)(v3 + 16) = v1;
  *(_OWORD *)(v3 + 24) = v4;
  *(void *)(v3 + 40) = v2;
  swift_retain();
  swift_task_alloc();
  OUTLINED_FUNCTION_18_0();
  *(void *)(v0 + 72) = v5;
  void *v5 = v6;
  v5[1] = static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:);
  uint64_t v7 = *(void *)(v0 + 24);
  return MEMORY[0x1F41881B8](v7, v0 + 16, &async function pointer to partial apply for closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:), v3, 0, 0, 0xD000000000000034, 0x80000001C9EB96E0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_0_8();
  uint64_t v3 = v2;
  long long v4 = *v1;
  OUTLINED_FUNCTION_1_6();
  void *v5 = v4;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:), 0, 0);
  }
  else
  {
    OUTLINED_FUNCTION_6_4();
    return v6();
  }
}

{
  uint64_t (*v0)(void);

  OUTLINED_FUNCTION_6_4();
  return v0();
}

void closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)(uint64_t a1, void (*a2)(uint64_t))
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.logger);
  swift_retain_n();
  long long v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v11 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = ObjectIdentifier.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9E4C000, v4, v5, "SiriEnvironment.forCurrentTask <- %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB792FA0](v7, -1, -1);
    MEMORY[0x1CB792FA0](v6, -1, -1);
  }
  else
  {

    uint64_t v10 = swift_release_n();
  }
  a2(v10);
  $defer #1 <A>() in closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
}

uint64_t closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return MEMORY[0x1F4188298](closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:), 0, 0);
}

uint64_t closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)()
{
  uint64_t v13 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.logger);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    long long v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)long long v4 = 136315138;
    uint64_t v5 = ObjectIdentifier.debugDescription.getter();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1C9E4C000, v2, v3, "SiriEnvironment.forCurrentTask <- %s", v4, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v11 = (uint64_t (*)(uint64_t))(v0[5] + *(int *)v0[5]);
  swift_task_alloc();
  OUTLINED_FUNCTION_18_0();
  v0[7] = v7;
  *uint64_t v7 = v8;
  v7[1] = closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:);
  uint64_t v9 = v0[3];
  return v11(v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_0_8();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_1_6();
  *os_log_type_t v3 = v2;
  *(void *)(v4 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v5 = closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:);
  }
  else {
    uint64_t v5 = closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:);
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_2_6();
  $defer #1 <A>() in closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
  OUTLINED_FUNCTION_6_4();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_2_6();
  $defer #1 <A>() in closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
  OUTLINED_FUNCTION_6_4();
  return v0();
}

void $defer #1 <A>() in closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.logger);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1C9E4C000, oslog, v1, "SiriEnvironment.forCurrentTask <- nil", v2, 2u);
    OUTLINED_FUNCTION_3();
  }
}

uint64_t one-time initialization function for $environment()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskLocal<SiriEnvironment?>);
  swift_allocObject();
  uint64_t result = TaskLocal.init(wrappedValue:)();
  static SiriEnvironmentTaskLocalStorage.$environment = result;
  return result;
}

uint64_t static SiriEnvironmentTaskLocalStorage.$environment.getter()
{
  if (one-time initialization token for $environment != -1) {
    swift_once();
  }

  return swift_retain();
}

void partial apply for closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)()
{
  closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)(*(void *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

uint64_t partial apply for closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v5 = v1[5];
  swift_task_alloc();
  OUTLINED_FUNCTION_18_0();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v8;
  v7[1] = closure #1 in withTimeout<A>(seconds:operation:);
  return closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)(a1, v4, v6, v5);
}

ValueMetadata *type metadata accessor for SiriEnvironmentTaskLocalStorage()
{
  return &type metadata for SiriEnvironmentTaskLocalStorage;
}

uint64_t specialized PluginCapabilityCatalog.init(finder:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v103 = v1;
  swift_retain();
  uint64_t v5 = v4(v2, v3);
  uint64_t v124 = MEMORY[0x1E4FBC870];
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v105 = v5;
  if (!v6)
  {
    uint64_t v117 = 0;
    uint64_t v9 = 0;
    uint64_t v11 = MEMORY[0x1E4FBC868];
    goto LABEL_29;
  }
  uint64_t v7 = v5 + 32;
  swift_bridgeObjectRetain();
  uint64_t v8 = v105;
  uint64_t v117 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = MEMORY[0x1E4FBC868];
  uint64_t v110 = v7;
  uint64_t v111 = v6;
  while (1)
  {
    if (v10 >= *(void *)(v8 + 16)) {
      goto LABEL_90;
    }
    outlined init with copy of Transforming(v7 + 40 * v10, (uint64_t)&v125);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginPackage);
    type metadata accessor for NSBundle();
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_26;
    }
    uint64_t v12 = (void *)v120;
    if (!(void)v120) {
      goto LABEL_26;
    }
    unint64_t v113 = v10;
    uint64_t v13 = NSBundle.advertisedCapabilities()();
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)(v13 + 16);
    if (v15) {
      break;
    }

    swift_bridgeObjectRelease();
LABEL_25:
    unint64_t v10 = v113;
LABEL_26:
    ++v10;
    uint64_t v8 = v105;
    if (v10 == v6)
    {
      swift_bridgeObjectRelease();
LABEL_29:
      uint64_t v106 = v11 + 64;
      uint64_t v46 = 1 << *(unsigned char *)(v11 + 32);
      uint64_t v47 = -1;
      if (v46 < 64) {
        uint64_t v47 = ~(-1 << v46);
      }
      unint64_t v48 = v47 & *(void *)(v11 + 64);
      int64_t v109 = (unint64_t)(v46 + 63) >> 6;
      swift_bridgeObjectRetain();
      int64_t v49 = 0;
      unint64_t v50 = MEMORY[0x1E4FBC860];
      uint64_t v51 = v11;
      unint64_t v107 = v9;
      uint64_t v108 = v11;
      if (!v48) {
        goto LABEL_33;
      }
LABEL_32:
      uint64_t v112 = (v48 - 1) & v48;
      int64_t v114 = v49;
      for (unint64_t i = __clz(__rbit64(v48)) | (v49 << 6); ; unint64_t i = __clz(__rbit64(v54)) + (v55 << 6))
      {
        uint64_t v57 = (long long *)(*(void *)(v11 + 48) + (i << 6));
        long long v58 = *v57;
        long long v59 = v57[1];
        long long v60 = v57[3];
        long long v127 = v57[2];
        long long v128 = v60;
        long long v125 = v58;
        long long v126 = v59;
        uint64_t v61 = *(void *)(v51 + 16);
        outlined retain of TransformationCapability((uint64_t)&v125);
        if (v61)
        {
          unint64_t v62 = specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)&v125);
          unint64_t v63 = v50;
          if (v64)
          {
            unint64_t v63 = *(void *)(*(void *)(v51 + 56) + 8 * v62);
            swift_bridgeObjectRetain();
          }
        }
        else
        {
          unint64_t v63 = v50;
        }
        if (v63 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v65 = *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v116 = v51;
        if (v65)
        {
          *(void *)&long long v120 = v50;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v65 & ~(v65 >> 63), 0);
          if (v65 < 0) {
            goto LABEL_89;
          }
          uint64_t v66 = 0;
          unint64_t v50 = v120;
          do
          {
            if ((v63 & 0xC000000000000001) != 0) {
              id v67 = (id)MEMORY[0x1CB792160](v66, v63);
            }
            else {
              id v67 = *(id *)(v63 + 8 * v66 + 32);
            }
            long long v68 = v67;
            uint64_t v69 = NSBundle.packageId.getter();
            uint64_t v71 = v70;

            *(void *)&long long v120 = v50;
            unint64_t v73 = *(void *)(v50 + 16);
            unint64_t v72 = *(void *)(v50 + 24);
            if (v73 >= v72 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1);
              unint64_t v50 = v120;
            }
            ++v66;
            *(void *)(v50 + 16) = v73 + 1;
            unint64_t v74 = v50 + 16 * v73;
            *(void *)(v74 + 32) = v69;
            *(void *)(v74 + 40) = v71;
          }
          while (v65 != v66);
          uint64_t v9 = v107;
          uint64_t v11 = v108;
        }
        *(void *)&long long v120 = v50;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
        uint64_t v75 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v77 = v76;
        swift_bridgeObjectRelease();
        uint64_t v78 = v124;
        swift_bridgeObjectRetain();
        char v79 = specialized Set.contains(_:)((unsigned __int8 *)&v125, v78);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v65 >= 2 && (v79 & 1) != 0)
        {
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v80 = type metadata accessor for Logger();
          __swift_project_value_buffer(v80, (uint64_t)static Logger.logger);
          outlined retain of TransformationCapability((uint64_t)&v125);
          outlined retain of TransformationCapability((uint64_t)&v125);
          swift_bridgeObjectRetain();
          uint64_t v81 = Logger.logObject.getter();
          os_log_type_t v82 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v81, v82))
          {
            uint64_t v83 = swift_slowAlloc();
            uint64_t v84 = swift_slowAlloc();
            *(void *)&v118[0] = v84;
            *(_DWORD *)uint64_t v83 = 136315394;
            long long v120 = v125;
            long long v121 = v126;
            long long v122 = v127;
            long long v123 = v128;
            outlined retain of TransformationCapability((uint64_t)&v125);
            uint64_t v85 = String.init<A>(describing:)();
            *(void *)(v83 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v86, (uint64_t *)v118);
            swift_bridgeObjectRelease();
            outlined release of TransformationCapability((uint64_t)&v125);
            outlined release of TransformationCapability((uint64_t)&v125);
            *(_WORD *)(v83 + 12) = 2080;
            swift_bridgeObjectRetain();
            *(void *)(v83 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v77, (uint64_t *)v118);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1C9E4C000, v81, v82, "Capability %s is marked exclusive, but multiple registrations were found: %s", (uint8_t *)v83, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1CB792FA0](v84, -1, -1);
            MEMORY[0x1CB792FA0](v83, -1, -1);
          }
          else
          {
            outlined release of TransformationCapability((uint64_t)&v125);
            outlined release of TransformationCapability((uint64_t)&v125);

            swift_bridgeObjectRelease_n();
          }
          uint64_t v51 = v116;
          unint64_t v50 = MEMORY[0x1E4FBC860];
          uint64_t v94 = Logger.logObject.getter();
          os_log_type_t v95 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v94, v95))
          {
            uint64_t v96 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v96 = 0;
            _os_log_impl(&dword_1C9E4C000, v94, v95, "All of the plugins for this capability will be ignored.", v96, 2u);
            MEMORY[0x1CB792FA0](v96, -1, -1);
          }

          swift_bridgeObjectRetain();
          specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)&v125);
          char v98 = v97;
          swift_bridgeObjectRelease();
          if (v98)
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v120 = v116;
            Swift::Int v100 = *(void *)(v116 + 24);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<TransformationCapability, [NSBundle]>);
            _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v100);
            uint64_t v51 = v120;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSBundle]);
            lazy protocol witness table accessor for type TransformationCapability and conformance TransformationCapability();
            _NativeDictionary._delete(at:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          outlined release of TransformationCapability((uint64_t)&v125);
        }
        else
        {
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v87 = type metadata accessor for Logger();
          __swift_project_value_buffer(v87, (uint64_t)static Logger.logger);
          outlined retain of TransformationCapability((uint64_t)&v125);
          outlined retain of TransformationCapability((uint64_t)&v125);
          swift_bridgeObjectRetain();
          uint64_t v88 = Logger.logObject.getter();
          os_log_type_t v89 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v88, v89))
          {
            uint64_t v90 = swift_slowAlloc();
            uint64_t v91 = swift_slowAlloc();
            *(void *)&v118[0] = v91;
            *(_DWORD *)uint64_t v90 = 136315394;
            long long v120 = v125;
            long long v121 = v126;
            long long v122 = v127;
            long long v123 = v128;
            outlined retain of TransformationCapability((uint64_t)&v125);
            uint64_t v92 = String.init<A>(describing:)();
            *(void *)(v90 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v93, (uint64_t *)v118);
            swift_bridgeObjectRelease();
            outlined release of TransformationCapability((uint64_t)&v125);
            outlined release of TransformationCapability((uint64_t)&v125);
            *(_WORD *)(v90 + 12) = 2080;
            swift_bridgeObjectRetain();
            *(void *)(v90 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v77, (uint64_t *)v118);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1C9E4C000, v88, v89, "Capability %s is supported by: %s", (uint8_t *)v90, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1CB792FA0](v91, -1, -1);
            MEMORY[0x1CB792FA0](v90, -1, -1);
          }
          else
          {
            swift_bridgeObjectRelease_n();

            outlined release of TransformationCapability((uint64_t)&v125);
            outlined release of TransformationCapability((uint64_t)&v125);
          }
          outlined release of TransformationCapability((uint64_t)&v125);
          uint64_t v51 = v116;
          unint64_t v50 = MEMORY[0x1E4FBC860];
        }
        unint64_t v48 = v112;
        int64_t v49 = v114;
        if (v112) {
          goto LABEL_32;
        }
LABEL_33:
        int64_t v53 = v49 + 1;
        if (__OFADD__(v49, 1)) {
          goto LABEL_91;
        }
        if (v53 >= v109)
        {
LABEL_86:
          swift_release();
          swift_bridgeObjectRelease();
          *(void *)(v103 + 24) = v51;
          swift_bridgeObjectRetain();
          swift_release();
          uint64_t v101 = PluginCatalog.init(packages:)(v105);
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
          _sSayxGRi_zRi0_zlyxIsego_Sg13SiriUtilities24PluginCapabilityExposingRzAC0C7PackageRzlWOe((uint64_t)v117);
          _sSayxGRi_zRi0_zlyxIsego_Sg13SiriUtilities24PluginCapabilityExposingRzAC0C7PackageRzlWOe((uint64_t)v9);
          return v101;
        }
        unint64_t v54 = *(void *)(v106 + 8 * v53);
        int64_t v55 = v49 + 1;
        if (!v54)
        {
          int64_t v55 = v49 + 2;
          if (v49 + 2 >= v109) {
            goto LABEL_86;
          }
          unint64_t v54 = *(void *)(v106 + 8 * v55);
          if (!v54)
          {
            int64_t v55 = v49 + 3;
            if (v49 + 3 >= v109) {
              goto LABEL_86;
            }
            unint64_t v54 = *(void *)(v106 + 8 * v55);
            if (!v54)
            {
              int64_t v55 = v49 + 4;
              if (v49 + 4 >= v109) {
                goto LABEL_86;
              }
              unint64_t v54 = *(void *)(v106 + 8 * v55);
              if (!v54)
              {
                uint64_t v56 = v49 + 5;
                if (v49 + 5 >= v109) {
                  goto LABEL_86;
                }
                unint64_t v54 = *(void *)(v106 + 8 * v56);
                if (!v54)
                {
                  while (1)
                  {
                    int64_t v55 = v56 + 1;
                    if (__OFADD__(v56, 1)) {
                      goto LABEL_92;
                    }
                    if (v55 >= v109) {
                      goto LABEL_86;
                    }
                    unint64_t v54 = *(void *)(v106 + 8 * v55);
                    ++v56;
                    if (v54) {
                      goto LABEL_48;
                    }
                  }
                }
                int64_t v55 = v49 + 5;
              }
            }
          }
        }
LABEL_48:
        uint64_t v112 = (v54 - 1) & v54;
        int64_t v114 = v55;
      }
    }
  }
  uint64_t v16 = 32;
  uint64_t v115 = v13;
  while (1)
  {
    long long v17 = *(_OWORD *)(v14 + v16);
    long long v18 = *(_OWORD *)(v14 + v16 + 16);
    long long v19 = *(_OWORD *)(v14 + v16 + 48);
    long long v131 = *(_OWORD *)(v14 + v16 + 32);
    long long v132 = v19;
    long long v129 = v17;
    long long v130 = v18;
    long long v125 = v17;
    long long v126 = v18;
    long long v127 = v131;
    long long v128 = v19;
    outlined retain of TransformationCapability((uint64_t)&v129);
    outlined retain of TransformationCapability((uint64_t)&v129);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginCapabilityExclusiveRegistration);
    if (swift_dynamicCast())
    {
      outlined init with take of Transforming(v118, (uint64_t)&v120);
      uint64_t v20 = *((void *)&v121 + 1);
      uint64_t v21 = v122;
      __swift_project_boxed_opaque_existential_1(&v120, *((uint64_t *)&v121 + 1));
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21))
      {
        outlined retain of TransformationCapability((uint64_t)&v129);
        specialized Set._Variant.insert(_:)((uint64_t)&v125, (unsigned __int8 *)&v129);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v120);
    }
    else
    {
      uint64_t v119 = 0;
      memset(v118, 0, sizeof(v118));
      outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v118, &demangling cache variable for type metadata for PluginCapabilityExclusiveRegistration?);
    }
    outlined retain of TransformationCapability((uint64_t)&v129);
    _sSayxGRi_zRi0_zlyxIsego_Sg13SiriUtilities24PluginCapabilityExposingRzAC0C7PackageRzlWOe((uint64_t)v117);
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = TransformationPlugin.supportedTransformations();
    *(void *)(v22 + 24) = 0;
    id v23 = v12;
    _sSayxGRi_zRi0_zlyxIsego_Sg13SiriUtilities24PluginCapabilityExposingRzAC0C7PackageRzlWOe((uint64_t)v9);
    char v24 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v125 = v11;
    unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)&v129);
    uint64_t v27 = *(void *)(v11 + 16);
    BOOL v28 = (v26 & 1) == 0;
    Swift::Int v29 = v27 + v28;
    if (__OFADD__(v27, v28)) {
      break;
    }
    unint64_t v30 = v25;
    char v31 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<TransformationCapability, [NSBundle]>);
    Swift::Bool v32 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v24, v29);
    uint64_t v11 = v125;
    if (v32)
    {
      unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)&v129);
      if ((v31 & 1) != (v34 & 1)) {
        goto LABEL_93;
      }
      unint64_t v30 = v33;
    }
    swift_bridgeObjectRelease();
    uint64_t v35 = swift_bridgeObjectRetain();
    uint64_t v14 = v115;
    if ((v31 & 1) == 0)
    {
      uint64_t v36 = (*(uint64_t (**)(uint64_t))(v22 + 16))(v35);
      *(void *)(v11 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      uint64_t v37 = (_OWORD *)(*(void *)(v11 + 48) + (v30 << 6));
      long long v39 = v131;
      long long v38 = v132;
      long long v40 = v130;
      *uint64_t v37 = v129;
      v37[1] = v40;
      void v37[2] = v39;
      v37[3] = v38;
      *(void *)(*(void *)(v11 + 56) + 8 * v30) = v36;
      uint64_t v41 = *(void *)(v11 + 16);
      BOOL v42 = __OFADD__(v41, 1);
      uint64_t v43 = v41 + 1;
      if (v42) {
        goto LABEL_88;
      }
      *(void *)(v11 + 16) = v43;
      outlined retain of TransformationCapability((uint64_t)&v129);
    }
    uint64_t v44 = *(void *)(v11 + 56);
    uint64_t v45 = swift_bridgeObjectRelease();
    MEMORY[0x1CB791BB0](v45);
    if (*(void *)((*(void *)(v44 + 8 * v30) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v44 + 8 * v30) & 0xFFFFFFFFFFFFFF8)
                                                                                             + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    outlined release of TransformationCapability((uint64_t)&v129);
    outlined release of TransformationCapability((uint64_t)&v129);
    v16 += 64;
    uint64_t v9 = partial apply for specialized thunk for @callee_guaranteed () -> (@owned [A]);
    uint64_t v117 = TransformationPlugin.supportedTransformations();
    if (!--v15)
    {

      swift_bridgeObjectRelease();
      uint64_t v9 = partial apply for specialized thunk for @callee_guaranteed () -> (@owned [A]);
      uint64_t v117 = TransformationPlugin.supportedTransformations();
      uint64_t v7 = v110;
      uint64_t v6 = v111;
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

double specialized closure #1 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_1C9EB7660;
  return result;
}

uint64_t specialized closure #1 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = URL.readCacheData()();
  if (v1)
  {

    uint64_t result = 0;
    unint64_t v4 = 0xF000000000000000;
  }
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t specialized closure #2 in static PluginCapabilityCatalog.load<A>(finder:cache:)(uint64_t a1, void *a2)
{
  type metadata accessor for NSBundle();
  static NSBundle.packageFrom(_:)(a1, a2, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginPackage?);
  if (swift_dynamicCast()) {
    return v5[5];
  }
  else {
    return 0;
  }
}

uint64_t specialized closure #3 in static PluginCapabilityCatalog.load<A>(finder:cache:)(uint64_t a1)
{
  outlined init with copy of Transforming(a1, (uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginCapabilityCatalog<NSBundle>);
  swift_allocObject();
  return specialized PluginCapabilityCatalog.init(finder:)(v2);
}

uint64_t specialized closure #4 in static PluginCapabilityCatalog.load<A>(finder:cache:)(uint64_t a1, uint64_t a2, void *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginCapabilityCatalog<NSBundle>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type PluginCapabilityCatalog<NSBundle> and conformance PluginCapabilityCatalog<A>, &demangling cache variable for type metadata for PluginCapabilityCatalog<NSBundle>);
  uint64_t result = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (!v3)
  {
    uint64_t v7 = result;
    unint64_t v8 = v6;
    uint64_t v9 = a3[3];
    uint64_t v10 = a3[4];
    __swift_project_boxed_opaque_existential_1(a3, v9);
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v10 + 8))(v7, v8, v9, v10);
    return outlined consume of Data._Representation(v7, v8);
  }
  return result;
}

void *one-time initialization function for sharedInstance()
{
  type metadata accessor for TransformationPluginLoader();
  swift_allocObject();
  uint64_t result = (void *)TransformationPluginLoader.().init()();
  static TransformationPluginLoader.sharedInstance = result;
  return result;
}

uint64_t static TransformationPluginLoader.sharedInstance.getter()
{
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t one-time initialization function for systemPluginPath(uint64_t a1)
{
  return one-time initialization function for systemPluginPath(a1, static TransformationPluginLoader.systemPluginPath);
}

void static TransformationPluginLoader.libraryDirectory()()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v0 = objc_msgSend(self, sel_defaultManager);
  id v15 = 0;
  id v1 = objc_msgSend(v0, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 5, 8, 0, 0, &v15);

  id v2 = v15;
  if (v1)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    id v3 = v2;
  }
  else
  {
    id v4 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id v15 = 0;
    unint64_t v16 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    id v15 = (id)0xD000000000000027;
    unint64_t v16 = 0x80000001C9EB98D0;
    swift_getErrorValue();
    v5._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    uint64_t v7 = (uint64_t)v15;
    unint64_t v6 = v16;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.logger);
    swift_bridgeObjectRetain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v12 = (void *)swift_slowAlloc();
      id v15 = v12;
      *(_DWORD *)uint64_t v11 = 136315650;
      uint64_t v13 = StaticString.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, (uint64_t *)&v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 22) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, (uint64_t *)&v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C9E4C000, v9, v10, "FatalError at %s:%lu - %s", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1CB792FA0](v12, -1, -1);
      MEMORY[0x1CB792FA0](v11, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t one-time initialization function for legacyPluginPath(uint64_t a1)
{
  return one-time initialization function for systemPluginPath(a1, static TransformationPluginLoader.legacyPluginPath);
}

uint64_t one-time initialization function for systemPluginPath(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v3, v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_allocate_value_buffer(v6, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  type metadata accessor for TransformationPluginLoader();
  static TransformationPluginLoader.libraryDirectory()();
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v8, v3);
}

uint64_t TransformationPluginLoader.transformations.getter()
{
  return swift_retain();
}

uint64_t TransformationPluginLoader.().init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v7 - 8, v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v0 + 24) = 0;
  type metadata accessor for TransformationRegistry();
  swift_allocObject();
  *(void *)(v0 + 32) = TransformationRegistry.init(fallback:)(0);
  swift_retain();
  TransformationRegistry.registerCommonTransformers()();
  swift_release();
  if (one-time initialization token for systemPluginPath != -1) {
    swift_once();
  }
  uint64_t v11 = __swift_project_value_buffer(v2, (uint64_t)static TransformationPluginLoader.systemPluginPath);
  v28[3] = v2;
  v28[4] = (uint64_t)&protocol witness table for URL;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v28);
  uint64_t v13 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16);
  v13(boxed_opaque_existential_0, v11, v2);
  if (one-time initialization token for legacyPluginPath != -1) {
    swift_once();
  }
  uint64_t v14 = __swift_project_value_buffer(v2, (uint64_t)static TransformationPluginLoader.legacyPluginPath);
  uint64_t v26 = v2;
  uint64_t v27 = &protocol witness table for URL;
  id v15 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v25);
  v13(v15, v14, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PluginFinder>);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1C9EB5060;
  outlined init with copy of Transforming((uint64_t)v28, v16 + 32);
  outlined init with take of Transforming(&v25, v16 + 72);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  static TransformationPluginLoader.getSystemPluginCachePathURL()();
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v2);
  uint64_t v17 = specialized static PluginCapabilityCatalog.load<A>(finder:cache:)(v16, (uint64_t)v10);
  outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v10, &demangling cache variable for type metadata for URL?);
  swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = v17;
  id v18 = objc_msgSend(self, sel_processInfo);
  id v19 = objc_msgSend(v18, sel_environment);

  uint64_t v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  specialized Dictionary.subscript.getter(0xD00000000000002BLL, 0x80000001C9EB97A0, v20);
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  if (v22)
  {
    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    uint64_t v23 = specialized static PluginCapabilityCatalog.load<A>(finder:cache:)((uint64_t)v6, 0);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    *(void *)(v1 + 24) = v23;
    swift_release();
  }
  swift_retain();
  specialized TransformationPluginLoader.registerLoadableTransformations<A>(container:)();
  swift_release();
  if (*(void *)(v1 + 24))
  {
    swift_retain();
    specialized TransformationPluginLoader.registerLoadableTransformations<A>(container:)();
    swift_release();
  }
  return v1;
}

uint64_t static TransformationPluginLoader.getSystemPluginCachePathURL()()
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = objc_msgSend(self, sel_defaultManager);
  id v23 = 0;
  id v6 = objc_msgSend(v5, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 13, 1, 0, 0, &v23);

  id v7 = v23;
  if (v6)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    id v8 = v7;

    URL.appendingPathComponent(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  }
  else
  {
    id v10 = v23;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id v23 = 0;
    unint64_t v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    id v23 = (id)0xD000000000000025;
    unint64_t v24 = 0x80000001C9EB97D0;
    swift_getErrorValue();
    v11._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    uint64_t v13 = (uint64_t)v23;
    unint64_t v12 = v24;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.logger);
    swift_bridgeObjectRetain_n();
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      id v18 = (void *)swift_slowAlloc();
      id v23 = v18;
      *(_DWORD *)uint64_t v17 = 136315650;
      uint64_t v19 = StaticString.description.getter();
      uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, (uint64_t *)&v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2048;
      uint64_t v22 = 106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, (uint64_t *)&v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C9E4C000, v15, v16, "FatalError at %s:%lu - %s", (uint8_t *)v17, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1CB792FA0](v18, -1, -1);
      MEMORY[0x1CB792FA0](v17, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void specialized TransformationPluginLoader.registerLoadableTransformations<A>(container:)()
{
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  id v0 = (id)static Logger.log;
  specialized static Logger.withSignpost<A>(name:log:completion:)();

  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.logger);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134218240;
    swift_beginAccess();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2048;
    swift_beginAccess();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C9E4C000, v2, v3, "Loaded %ld typed transformations and %ld named transformations", (uint8_t *)v4, 0x16u);
    MEMORY[0x1CB792FA0](v4, -1, -1);
  }
}

uint64_t specialized closure #1 in TransformationPluginLoader.registerLoadableTransformations<A>(container:)(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 224);
  uint64_t v38 = a1;
  uint64_t v8 = v7(a1);
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9) {
    return swift_bridgeObjectRelease();
  }
  unint64_t v24 = a2;
  uint64_t v25 = v8;
  uint64_t v10 = 32;
  while (1)
  {
    long long v11 = *(_OWORD *)(v8 + v10);
    long long v12 = *(_OWORD *)(v8 + v10 + 16);
    long long v13 = *(_OWORD *)(v8 + v10 + 48);
    long long v32 = *(_OWORD *)(v8 + v10 + 32);
    long long v33 = v13;
    *(_OWORD *)char v31 = v11;
    *(_OWORD *)&v31[16] = v12;
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadableTransformation<PluginCapabilityCatalog<NSBundle>>);
    uint64_t result = swift_allocObject();
    uint64_t v16 = result;
    *(void *)(result + 16) = v38;
    *(_OWORD *)(result + 24) = *(_OWORD *)v31;
    long long v17 = v32;
    *(_OWORD *)(result + 40) = *(_OWORD *)&v31[16];
    *(_OWORD *)(result + 56) = v17;
    *(_OWORD *)(result + 72) = v33;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    if (v31[0] == 1) {
      break;
    }
    if (__OFADD__(*a4, 1)) {
      goto LABEL_13;
    }
    ++*a4;
    uint64_t v22 = *(void *)(a3 + 32);
    long long v34 = *(_OWORD *)&v31[8];
    uint64_t v35 = *(void *)&v31[24];
    long long v29 = *(_OWORD *)&v31[8];
    uint64_t v30 = *(void *)&v31[24];
    uint64_t v27 = v14;
    BOOL v28 = &protocol witness table for LoadableTransformation<A>;
    v26[0] = result;
    id v23 = *(void (**)(long long *, void *))(*(void *)v22 + 192);
    outlined retain of TransformationCapability((uint64_t)v31);
    outlined retain of TransformationCapability((uint64_t)v31);
    swift_retain();
    swift_retain();
    outlined retain of TypeIdentifier((uint64_t)&v34);
    v23(&v29, v26);
    outlined release of TransformationCapability((uint64_t)v31);
    swift_release();
    uint64_t v21 = &v34;
LABEL_8:
    outlined release of TypeIdentifier((uint64_t)v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    v10 += 64;
    --v9;
    uint64_t v8 = v25;
    if (!v9) {
      return swift_bridgeObjectRelease();
    }
  }
  if (!__OFADD__(*a2, 1))
  {
    ++*a2;
    uint64_t v18 = *(void *)(a3 + 32);
    uint64_t v27 = v14;
    BOOL v28 = &protocol witness table for LoadableTransformation<A>;
    v26[0] = result;
    uint64_t v19 = *(void (**)(void *))(*(void *)v18 + 184);
    outlined retain of TransformationCapability((uint64_t)v31);
    outlined retain of TransformationCapability((uint64_t)v31);
    swift_retain();
    swift_retain();
    v19(v26);
    a2 = v24;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    long long v36 = *(_OWORD *)&v31[8];
    uint64_t v37 = *(void *)&v31[24];
    long long v29 = *(_OWORD *)&v31[8];
    uint64_t v30 = *(void *)&v31[24];
    uint64_t v27 = v14;
    BOOL v28 = &protocol witness table for LoadableTransformation<A>;
    v26[0] = v16;
    unint64_t v20 = *(void (**)(long long *, void *))(*(void *)v18 + 192);
    swift_retain();
    outlined retain of TypeIdentifier((uint64_t)&v36);
    v20(&v29, v26);
    outlined release of TransformationCapability((uint64_t)v31);
    swift_release();
    uint64_t v21 = &v36;
    goto LABEL_8;
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t TransformationPluginLoader.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t TransformationPluginLoader.__deallocating_deinit()
{
  TransformationPluginLoader.deinit();

  return MEMORY[0x1F4186488](v0, 40, 7);
}

uint64_t type metadata accessor for TransformationPluginLoader()
{
  return self;
}

uint64_t method lookup function for TransformationPluginLoader(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TransformationPluginLoader);
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t specialized closure #1 in TransformationPluginLoader.registerLoadableTransformations<A>(container:)(uint64_t *a1, void *a2, uint64_t a3, void *a4)
{
  return specialized closure #1 in TransformationPluginLoader.registerLoadableTransformations<A>(container:)(*a1, a2, a3, a4);
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@out A?)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized closure #2 in static PluginCapabilityCatalog.load<A>(finder:cache:)(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t specialized closure #3 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized closure #3 in static PluginCapabilityCatalog.load<A>(finder:cache:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t specialized static PluginCapabilityCatalog.load<A>(finder:cache:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  uint64_t v41 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v5);
  BOOL v42 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v9 = MEMORY[0x1F4188790](v7 - 8, v8);
  long long v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v12);
  uint64_t v14 = (char *)&v38 - v13;
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15, v17);
  uint64_t v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49[3] = &type metadata for MergedPluginFinder;
  v49[4] = &protocol witness table for MergedPluginFinder;
  v49[0] = a1;
  outlined init with copy of URL?(a2, (uint64_t)v14);
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15) == 1)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v14, &demangling cache variable for type metadata for URL?);
LABEL_10:
    if (one-time initialization token for pluginLoaderLog != -1) {
      uint64_t v20 = swift_once();
    }
    MEMORY[0x1F4188790](v20, v21);
    *(&v38 - 2) = (uint64_t)v49;
    specialized static Logger.withSignpost<A>(name:log:completion:)();
    uint64_t v37 = v31;
    outlined init with copy of URL?(a2, (uint64_t)v11);
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v15) == 1)
    {
      outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v11, &demangling cache variable for type metadata for URL?);
    }
    else
    {
      uint64_t v46 = v15;
      uint64_t v47 = &protocol witness table for URL;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v45);
      (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 32))(boxed_opaque_existential_0, v11, v15);
      outlined init with take of Transforming(&v45, (uint64_t)v48);
      type metadata accessor for PropertyListEncoder();
      swift_allocObject();
      uint64_t v33 = PropertyListEncoder.init()();
      uint64_t v34 = dispatch thunk of PropertyListEncoder.outputFormat.setter();
      MEMORY[0x1F4188790](v34, v35);
      *(&v38 - 4) = v33;
      *(&v38 - 3) = v37;
      *(&v38 - 2) = (uint64_t)v48;
      specialized static Logger.withSignpost<A>(name:log:completion:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
      swift_release();
    }
    goto LABEL_15;
  }
  uint64_t v39 = a2;
  uint64_t v40 = v16;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v14, v15);
  uint64_t v22 = one-time initialization token for pluginLoaderLog;
  uint64_t v23 = swift_bridgeObjectRetain();
  if (v22 != -1) {
    uint64_t v23 = swift_once();
  }
  MEMORY[0x1F4188790](v23, v24);
  *(&v38 - 2) = (uint64_t)v19;
  specialized static Logger.withSignpost<A>(name:log:completion:)();
  unint64_t v25 = v44;
  if (v44 >> 60 == 15)
  {
    uint64_t v16 = v40;
    uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v19, v15);
    a2 = v39;
    goto LABEL_10;
  }
  uint64_t v26 = v43;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v38 = v26;
  outlined copy of Data._Representation(v26, v25);
  PropertyListDecoder.init()();
  if (one-time initialization token for catalogPackageInflator != -1) {
    swift_once();
  }
  uint64_t v27 = __swift_project_value_buffer(v4, (uint64_t)static CodingUserInfoKey.catalogPackageInflator);
  uint64_t v28 = (uint64_t)v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v42, v27, v4);
  v48[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  v48[0] = specialized thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@out A?);
  v48[1] = 0;
  long long v29 = (void (*)(long long *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  specialized Dictionary.subscript.setter((uint64_t)v48, v28);
  v29(&v45, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginCapabilityCatalog<NSBundle>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type PluginCapabilityCatalog<NSBundle> and conformance PluginCapabilityCatalog<A>, &demangling cache variable for type metadata for PluginCapabilityCatalog<NSBundle>);
  uint64_t v30 = v38;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  outlined consume of Data?(v30, v25);
  swift_release();
  outlined consume of Data?(v30, v25);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v19, v15);
  uint64_t v37 = v48[0];
LABEL_15:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  return v37;
}

uint64_t specialized static PluginCapabilityCatalog.load<A>(finder:cache:)(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  v29[3] = v9;
  v29[4] = (uint64_t)&protocol witness table for URL;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v29);
  uint64_t v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(boxed_opaque_existential_0, a1, v9);
  if (a2) {
    goto LABEL_8;
  }
  if (one-time initialization token for pluginLoaderLog != -1) {
    uint64_t v11 = swift_once();
  }
  MEMORY[0x1F4188790](v11, v12);
  specialized static Logger.withSignpost<A>(name:log:completion:)();
  unint64_t v13 = v24;
  if (v24 >> 60 == 15)
  {
LABEL_8:
    if (one-time initialization token for pluginLoaderLog != -1) {
      uint64_t v11 = swift_once();
    }
    MEMORY[0x1F4188790](v11, v12);
    *(&v23 - 2) = (uint64_t)v29;
    specialized static Logger.withSignpost<A>(name:log:completion:)();
    uint64_t v22 = v17;
    LOBYTE(v23) = a2 & 1;
    if (a2)
    {
      long long v25 = 0u;
      long long v26 = 0u;
      uint64_t v27 = 0;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CacheDataSink);
      if (swift_dynamicCast())
      {
        if (*((void *)&v26 + 1))
        {
          outlined init with take of Transforming(&v25, (uint64_t)v28);
          type metadata accessor for PropertyListEncoder();
          swift_allocObject();
          uint64_t v18 = PropertyListEncoder.init()();
          uint64_t v19 = dispatch thunk of PropertyListEncoder.outputFormat.setter();
          MEMORY[0x1F4188790](v19, v20);
          *(&v23 - 4) = v18;
          *(&v23 - 3) = v22;
          *(&v23 - 2) = (uint64_t)v28;
          specialized static Logger.withSignpost<A>(name:log:completion:)();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
          swift_release();
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v27 = 0;
        long long v25 = 0u;
        long long v26 = 0u;
      }
    }
    outlined destroy of CheckedContinuation<(), Error>?((uint64_t)&v25, &demangling cache variable for type metadata for CacheDataSink?);
    goto LABEL_17;
  }
  uint64_t v14 = v23;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  outlined copy of Data._Representation(v14, v13);
  PropertyListDecoder.init()();
  if (one-time initialization token for catalogPackageInflator != -1) {
    swift_once();
  }
  uint64_t v15 = __swift_project_value_buffer(v4, (uint64_t)static CodingUserInfoKey.catalogPackageInflator);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v15, v4);
  v28[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  v28[0] = specialized thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@out A?);
  v28[1] = 0;
  uint64_t v16 = (void (*)(long long *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  specialized Dictionary.subscript.setter((uint64_t)v28, (uint64_t)v8);
  v16(&v25, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginCapabilityCatalog<NSBundle>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type PluginCapabilityCatalog<NSBundle> and conformance PluginCapabilityCatalog<A>, &demangling cache variable for type metadata for PluginCapabilityCatalog<NSBundle>);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  outlined consume of Data?(v14, v13);
  swift_release();
  outlined consume of Data?(v14, v13);
  uint64_t v22 = v28[0];
LABEL_17:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return v22;
}

double partial apply for specialized closure #1 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<D0>(_OWORD *a1@<X8>)
{
  return specialized closure #1 in static PluginCapabilityCatalog.load<A>(finder:cache:)(a1);
}

uint64_t sub_1C9EAD608()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for specialized thunk for @callee_guaranteed () -> (@owned [A])@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in TransformationPluginLoader.registerLoadableTransformations<A>(container:)()
{
  return specialized closure #1 in TransformationPluginLoader.registerLoadableTransformations<A>(container:)(*(uint64_t **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #3 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<X0>(uint64_t *a1@<X8>)
{
  return specialized closure #3 in static PluginCapabilityCatalog.load<A>(finder:cache:)(*(void *)(v1 + 16), a1);
}

{
  return partial apply for specialized closure #3 in static PluginCapabilityCatalog.load<A>(finder:cache:)(a1);
}

uint64_t partial apply for specialized closure #4 in static PluginCapabilityCatalog.load<A>(finder:cache:)()
{
  return specialized closure #4 in static PluginCapabilityCatalog.load<A>(finder:cache:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

{
  return partial apply for specialized closure #4 in static PluginCapabilityCatalog.load<A>(finder:cache:)();
}

uint64_t partial apply for specialized closure #1 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<X0>(uint64_t *a1@<X8>)
{
  return specialized closure #1 in static PluginCapabilityCatalog.load<A>(finder:cache:)(a1);
}

uint64_t Restrictions.init(deviceRestrictions:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = DeviceRestrictions.aceSet.getter();
  *a2 = result;
  a2[1] = v3;
  return result;
}

uint64_t Restrictions.init(restrictedCommands:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = specialized _copyCollectionToContiguousArray<A>(_:)(v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = v5[2];
  if (v6)
  {
    swift_retain();
    uint64_t v7 = 0;
    uint64_t v8 = (void **)(v5 + 5);
    do
    {
      uint64_t v9 = (uint64_t)*(v8 - 1);
      uint64_t v10 = *v8;
      swift_bridgeObjectRetain();
      v11._uint64_t countAndFlagsBits = v9;
      v11._object = v10;
      DeviceRestrictions.init(aceValue:)(v11);
      v7 |= v13;
      v8 += 2;
      --v6;
    }
    while (v6);
    swift_release();
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t result = swift_release();
  *a2 = a1;
  a2[1] = v7;
  return result;
}

uint64_t Restrictions.restrictedCommands.getter()
{
  return swift_bridgeObjectRetain();
}

void Restrictions.deviceRestrictions.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

uint64_t Restrictions.init(aceValue:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = specialized Set.init<A>(_:)(a1);
  uint64_t result = Restrictions.init(restrictedCommands:)(v3, v6);
  uint64_t v5 = v6[1];
  *a2 = v6[0];
  a2[1] = v5;
  return result;
}

uint64_t Restrictions.init(aceValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9EB3FF0;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  uint64_t v7 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  uint64_t result = Restrictions.init(restrictedCommands:)(v7, v10);
  uint64_t v9 = v10[1];
  *a3 = v10[0];
  a3[1] = v9;
  return result;
}

uint64_t Restrictions.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  uint64_t v1 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v1);
  swift_bridgeObjectRelease();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t Restrictions.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v10, v10[3]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    uint64_t v5 = specialized Set.init<A>(_:)(v9[0]);
    Restrictions.init(restrictedCommands:)(v5, v9);
    uint64_t v6 = v9[0];
    uint64_t v7 = v9[1];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    *a2 = v6;
    a2[1] = v7;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Bool __swiftcall Restrictions.isRestricted(_:)(Swift::String a1)
{
  specialized Set.contains(_:)(a1._countAndFlagsBits, (uint64_t)a1._object, *v1);
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Restrictions@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Restrictions.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Restrictions(void *a1)
{
  return Restrictions.encode(to:)(a1);
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  void v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 16);
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : Data].Iterator._Variant();
  if (v5 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  void v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 16);
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : Data].Iterator._Variant();
  if (v5 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = MEMORY[0x1E4FBC870];
    goto LABEL_25;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<TypeIdentifier>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v3 = result;
  uint64_t v24 = *(void *)(a1 + 16);
  if (!v24)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    return v3;
  }
  unint64_t v4 = 0;
  uint64_t v5 = result + 56;
  while (v4 < *(void *)(a1 + 16))
  {
    uint64_t v6 = (uint64_t *)(a1 + 32 + 16 * v4);
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v10 = result & ~v9;
    unint64_t v11 = v10 >> 6;
    uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
    uint64_t v13 = 1 << v10;
    if (((1 << v10) & v12) != 0)
    {
      uint64_t v14 = *(void *)(v3 + 48);
      uint64_t v15 = (void *)(v14 + 16 * v10);
      BOOL v16 = *v15 == v8 && v15[1] == v7;
      if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
LABEL_11:
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      uint64_t v17 = ~v9;
      while (1)
      {
        unint64_t v10 = (v10 + 1) & v17;
        unint64_t v11 = v10 >> 6;
        uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
        uint64_t v13 = 1 << v10;
        if ((v12 & (1 << v10)) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * v10);
        if (*v18 != v8 || v18[1] != v7)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_11;
      }
    }
    *(void *)(v5 + 8 * v11) = v13 | v12;
    uint64_t v20 = (void *)(*(void *)(v3 + 48) + 16 * v10);
    void *v20 = v8;
    v20[1] = v7;
    uint64_t v21 = *(void *)(v3 + 16);
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_27;
    }
    *(void *)(v3 + 16) = v23;
LABEL_22:
    if (++v4 == v24) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  void *v18;
  void *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = MEMORY[0x1E4FBC870];
    goto LABEL_25;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v3 = result;
  uint64_t v24 = *(void *)(a1 + 16);
  if (!v24)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    return v3;
  }
  unint64_t v4 = 0;
  uint64_t v5 = result + 56;
  while (v4 < *(void *)(a1 + 16))
  {
    uint64_t v6 = (uint64_t *)(a1 + 32 + 16 * v4);
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v10 = result & ~v9;
    unint64_t v11 = v10 >> 6;
    uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
    uint64_t v13 = 1 << v10;
    if (((1 << v10) & v12) != 0)
    {
      uint64_t v14 = *(void *)(v3 + 48);
      uint64_t v15 = (void *)(v14 + 16 * v10);
      BOOL v16 = *v15 == v8 && v15[1] == v7;
      if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
LABEL_11:
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      uint64_t v17 = ~v9;
      while (1)
      {
        unint64_t v10 = (v10 + 1) & v17;
        unint64_t v11 = v10 >> 6;
        uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
        uint64_t v13 = 1 << v10;
        if ((v12 & (1 << v10)) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * v10);
        if (*v18 != v8 || v18[1] != v7)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_11;
      }
    }
    *(void *)(v5 + 8 * v11) = v13 | v12;
    uint64_t v20 = (void *)(*(void *)(v3 + 48) + 16 * v10);
    void *v20 = v8;
    v20[1] = v7;
    uint64_t v21 = *(void *)(v3 + 16);
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_27;
    }
    *(void *)(v3 + 16) = v23;
LABEL_22:
    if (++v4 == v24) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void *initializeBufferWithCopyOfBuffer for Restrictions(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for Restrictions()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for Restrictions(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for Restrictions(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for Restrictions()
{
  return &type metadata for Restrictions;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    void v5[2] = ~v7;
    void v5[3] = v12;
    void v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *unint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;

  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    void v5[2] = ~v7;
    void v5[3] = v12;
    void v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 56) + 16 * v16);
    uint64_t v21 = v20[1];
    *unint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t SiriEnvironmentValue.wrappedValue.getter()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.logger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v8 = v4;
    *(_DWORD *)uint64_t v3 = 136315650;
    uint64_t v5 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 22) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001BLL, 0x80000001C9EB9920, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C9E4C000, v1, v2, "FatalError at %s:%lu - %s", (uint8_t *)v3, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1CB792FA0](v4, -1, -1);
    MEMORY[0x1CB792FA0](v3, -1, -1);
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static SiriEnvironmentValue.subscript.getter(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*a2 + *MEMORY[0x1E4FBC5F0]);
  MEMORY[0x1F4188790](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v11 - v4, a1, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriEnvironmentLocating);
  if (swift_dynamicCast())
  {
    outlined init with take of Transforming(v11, (uint64_t)v13);
    uint64_t v6 = v14;
    uint64_t v7 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    outlined destroy of SiriEnvironmentLocating?((uint64_t)v11);
    type metadata accessor for SiriEnvironment();
    uint64_t v8 = static SiriEnvironment.default.getter();
  }
  swift_getAtKeyPath();
  unint64_t v9 = *(void (**)(uint64_t))(v13[0] + 16);
  swift_retain();
  swift_release();
  v9(v8);
  swift_release();
  return swift_release();
}

uint64_t SiriEnvironmentValue.__allocating_init<A>()()
{
  uint64_t KeyPath = swift_getKeyPath();
  os_log_type_t v2 = *(uint64_t (**)(uint64_t))(v0 + 104);

  return v2(KeyPath);
}

uint64_t SiriEnvironmentValue.__allocating_init(_:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = partial apply for closure #1 in SiriEnvironmentValue.init(_:);
  *(void *)(result + 24) = a1;
  return result;
}

uint64_t SiriEnvironmentValue.init(_:)(uint64_t a1)
{
  *(void *)(v1 + 16) = partial apply for closure #1 in SiriEnvironmentValue.init(_:);
  *(void *)(v1 + 24) = a1;
  return v1;
}

uint64_t closure #1 in SiriEnvironmentValue.init(_:)()
{
  return swift_release();
}

uint64_t SiriEnvironmentValue.__allocating_init<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  SiriEnvironmentValue.init<A>(_:_:)(a1, a2, a3);
  return v6;
}

uint64_t SiriEnvironmentValue.init<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_allocObject();
  long long v7[2] = a3;
  void v7[3] = a1;
  v7[4] = a2;
  *(void *)(v3 + 16) = partial apply for closure #1 in SiriEnvironmentValue.init<A>(_:_:);
  *(void *)(v3 + 24) = v7;
  return v3;
}

uint64_t closure #1 in SiriEnvironmentValue.init<A>(_:_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return swift_unknownObjectRelease();
}

uint64_t SiriEnvironmentValue.deinit()
{
  swift_release();
  return v0;
}

uint64_t SiriEnvironmentValue.__deallocating_deinit()
{
  SiriEnvironmentValue.deinit();

  return MEMORY[0x1F4186488](v0, 32, 7);
}

uint64_t outlined destroy of SiriEnvironmentLocating?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriEnvironmentLocating?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in SiriEnvironmentValue.init(_:)()
{
  return closure #1 in SiriEnvironmentValue.init(_:)();
}

uint64_t sub_1C9EAECD8()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in SiriEnvironmentValue.init<A>(_:_:)(uint64_t a1)
{
  return closure #1 in SiriEnvironmentValue.init<A>(_:_:)(a1, *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 16));
}

uint64_t type metadata completion function for SiriEnvironmentValue()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for SiriEnvironmentValue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for SiriEnvironmentValue(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SiriEnvironmentValue);
}

uint64_t dispatch thunk of SiriEnvironmentValue.wrappedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of SiriEnvironmentValue.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of SiriEnvironmentValue.__allocating_init<A>(_:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

void *specialized ObjectAssociation.init()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectEntry<SiriEnvironment>);
  v0[2] = Dictionary.init(dictionaryLiteral:)();
  uint64_t v1 = type metadata accessor for DispatchSemaphoreLock();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = dispatch_semaphore_create(1);
  v0[6] = v1;
  v0[7] = &protocol witness table for DispatchSemaphoreLock;
  v0[3] = v2;
  return v0;
}

uint64_t SiriEnvironmentLocating<>.siriEnvironment.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)static ProcessWideEnvironment.cache + 144))(&v2, v0);
  uint64_t result = v2;
  if (!v2)
  {
    type metadata accessor for SiriEnvironment();
    return static SiriEnvironment.default.getter();
  }
  return result;
}

uint64_t key path getter for SiriEnvironmentLocating<>.siriEnvironment : <A>A@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SiriEnvironmentLocating<>.siriEnvironment.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for SiriEnvironmentLocating<>.siriEnvironment : <A>A()
{
  uint64_t v0 = swift_retain();
  return SiriEnvironmentLocating<>.siriEnvironment.setter(v0);
}

uint64_t SiriEnvironmentLocating<>.siriEnvironment.setter(uint64_t a1)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v5 = a1;
  uint64_t v3 = *(void (**)(uint64_t *, uint64_t))(*(void *)static ProcessWideEnvironment.cache + 152);
  swift_retain();
  swift_unknownObjectRetain();
  v3(&v5, v1);
  return swift_release();
}

uint64_t (*SiriEnvironmentLocating<>.siriEnvironment.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = SiriEnvironmentLocating<>.siriEnvironment.getter();
  return SiriEnvironmentLocating<>.siriEnvironment.modify;
}

uint64_t SiriEnvironmentLocating<>.siriEnvironment.modify(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return SiriEnvironmentLocating<>.siriEnvironment.setter(*a1);
  }
  uint64_t v2 = swift_retain();
  SiriEnvironmentLocating<>.siriEnvironment.setter(v2);

  return swift_release();
}

Swift::Void __swiftcall flushProcessWideSiriEnvironmentCache()()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  (*(void (**)(void))(*(void *)static ProcessWideEnvironment.cache + 176))();
}

void *one-time initialization function for cache()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectAssociation<SiriEnvironment>);
  swift_allocObject();
  uint64_t result = specialized ObjectAssociation.init()();
  static ProcessWideEnvironment.cache = result;
  return result;
}

uint64_t sub_1C9EAF190()
{
  return 16;
}

__n128 sub_1C9EAF19C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of SiriEnvironmentLocating.siriEnvironment.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SiriEnvironmentLocating.siriEnvironment.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of SiriEnvironmentLocating.siriEnvironment.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t SiriEnvironment.coreTelephonyService.getter()
{
  uint64_t v0 = type metadata accessor for CoreTelephonyService();
  OUTLINED_FUNCTION_0_7();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 248);
  uint64_t v3 = lazy protocol witness table accessor for type CoreTelephonyService and conformance CoreTelephonyService(&lazy protocol witness table cache variable for type CoreTelephonyService and conformance CoreTelephonyService, v2, (void (*)(uint64_t))type metadata accessor for CoreTelephonyService);

  return v5(v0, v0, v3);
}

uint64_t type metadata accessor for CoreTelephonyService()
{
  return self;
}

uint64_t key path setter for SiriEnvironment.coreTelephonyService : SiriEnvironment()
{
  uint64_t v0 = swift_retain();
  return SiriEnvironment.coreTelephonyService.setter(v0);
}

uint64_t SiriEnvironment.coreTelephonyService.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CoreTelephonyService();
  OUTLINED_FUNCTION_0_7();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 256);
  uint64_t v5 = lazy protocol witness table accessor for type CoreTelephonyService and conformance CoreTelephonyService(&lazy protocol witness table cache variable for type CoreTelephonyService and conformance CoreTelephonyService, v4, (void (*)(uint64_t))type metadata accessor for CoreTelephonyService);

  return v7(a1, v2, v2, v5);
}

uint64_t (*SiriEnvironment.coreTelephonyService.modify(void *a1))()
{
  a1[1] = v1;
  uint64_t v3 = type metadata accessor for CoreTelephonyService();
  a1[2] = v3;
  OUTLINED_FUNCTION_0_7();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 248);
  uint64_t v7 = lazy protocol witness table accessor for type CoreTelephonyService and conformance CoreTelephonyService(&lazy protocol witness table cache variable for type CoreTelephonyService and conformance CoreTelephonyService, v6, (void (*)(uint64_t))type metadata accessor for CoreTelephonyService);
  a1[3] = v7;
  *a1 = v5(v3, v3, v7);
  return SiriEnvironment.networkAvailability.modify;
}

uint64_t key path setter for CoreTelephonyService.mock : CoreTelephonyService(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 144);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t CoreTelephonyService.mock.getter()
{
  return swift_retain();
}

uint64_t (*CoreTelephonyService.mock.modify())()
{
  return SiriEnvironment.providers.modify;
}

double key path getter for CoreTelephonyService.coreTelephonyAPIBridge : CoreTelephonyService@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)a1 + 160))(v6);
  long long v3 = v6[1];
  *a2 = v6[0];
  a2[1] = v3;
  double result = *(double *)&v7;
  long long v5 = v8;
  a2[2] = v7;
  a2[3] = v5;
  return result;
}

uint64_t key path setter for CoreTelephonyService.coreTelephonyAPIBridge : CoreTelephonyService(_OWORD *a1, uint64_t a2)
{
  long long v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  long long v3 = a1[3];
  _OWORD v6[2] = a1[2];
  v6[3] = v3;
  uint64_t v4 = *(uint64_t (**)(_OWORD *))(**(void **)a2 + 168);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v4(v6);
}

uint64_t CoreTelephonyService.coreTelephonyAPIBridge.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 80);
  *(void *)a1 = *(void *)(v1 + 24);
  long long v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 64);
  *(void *)(a1 + 56) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t CoreTelephonyService.coreTelephonyAPIBridge.setter(_OWORD *a1)
{
  swift_beginAccess();
  long long v3 = a1[1];
  *(_OWORD *)(v1 + 24) = *a1;
  *(_OWORD *)(v1 + 40) = v3;
  long long v4 = a1[3];
  *(_OWORD *)(v1 + 56) = a1[2];
  *(_OWORD *)(v1 + 72) = v4;
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t (*CoreTelephonyService.coreTelephonyAPIBridge.modify())()
{
  return SiriEnvironmentStorage.storage.modify;
}

uint64_t CoreTelephonyService.__allocating_init(coreTelephonyAPIBridge:)(_OWORD *a1)
{
  uint64_t v2 = swift_allocObject();
  CoreTelephonyService.init(coreTelephonyAPIBridge:)(a1);
  return v2;
}

void *CoreTelephonyService.init(coreTelephonyAPIBridge:)(_OWORD *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  OUTLINED_FUNCTION_12_1();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v9, v10);
  OUTLINED_FUNCTION_12_1();
  uint64_t v11 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v11 - 8, v12);
  OUTLINED_FUNCTION_12_1();
  v1[2] = 0;
  type metadata accessor for OS_dispatch_queue();
  v1[12] = 0;
  v1[13] = 0;
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type CoreTelephonyService and conformance CoreTelephonyService(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, 255, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v13 = *MEMORY[0x1E4FBCC58];
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104);
  v14(v8, v13, v3);
  v1[14] = OUTLINED_FUNCTION_2_22();
  static DispatchQoS.unspecified.getter();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v14(v8, v13, v3);
  OUTLINED_FUNCTION_4_18();
  v1[15] = OUTLINED_FUNCTION_2_22();
  id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E08]), sel_init);
  v1[11] = v15;
  id v16 = v15;
  unint64_t v17 = OUTLINED_FUNCTION_4_18();
  outlined bridged method (mbgnn) of @objc NSLock.name.setter(v17, v18, v16);

  long long v19 = a1[1];
  *(_OWORD *)(v2 + 3) = *a1;
  *(_OWORD *)(v2 + 5) = v19;
  long long v20 = a1[3];
  *(_OWORD *)(v2 + 7) = a1[2];
  *(_OWORD *)(v2 + 9) = v20;
  return v2;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t CoreTelephonyService.__allocating_init(storage:)()
{
  v3[0] = closure #1 in CoreTelephonyAPIBridge.init();
  v3[1] = 0;
  void v3[2] = closure #2 in CoreTelephonyAPIBridge.init();
  v3[3] = 0;
  v3[4] = closure #3 in CoreTelephonyAPIBridge.init();
  v3[5] = 0;
  v3[6] = closure #4 in CoreTelephonyAPIBridge.init();
  v3[7] = 0;
  uint64_t v1 = (*(uint64_t (**)(void *))(v0 + 232))(v3);
  swift_release();
  return v1;
}

id *CoreTelephonyService.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return v0;
}

uint64_t CoreTelephonyService.__deallocating_deinit()
{
  CoreTelephonyService.deinit();

  return MEMORY[0x1F4186488](v0, 128, 7);
}

uint64_t protocol witness for MockableEnvironmentProvider.mock.getter in conformance CoreTelephonyService()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t protocol witness for MockableEnvironmentProvider.mock.setter in conformance CoreTelephonyService()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

void (*protocol witness for MockableEnvironmentProvider.mock.modify in conformance CoreTelephonyService(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 152))();
  return protocol witness for MockableEnvironmentProvider.mock.modify in conformance NetworkAvailability;
}

uint64_t protocol witness for SiriEnvironmentProvider.init(storage:) in conformance CoreTelephonyService()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CoreTelephonyService@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CoreTelephonyService();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

void outlined bridged method (mbgnn) of @objc NSLock.name.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x1CB7919D0]();
  objc_msgSend(a3, sel_setName_, v4);
}

uint64_t associated type witness table accessor for MockableEnvironmentProvider.Provider : SiriEnvironmentProvider in CoreTelephonyService(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CoreTelephonyService and conformance CoreTelephonyService(&lazy protocol witness table cache variable for type CoreTelephonyService and conformance CoreTelephonyService, a2, (void (*)(uint64_t))type metadata accessor for CoreTelephonyService);
}

uint64_t instantiation function for generic protocol witness table for CoreTelephonyService(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CoreTelephonyService and conformance CoreTelephonyService(&lazy protocol witness table cache variable for type CoreTelephonyService and conformance CoreTelephonyService, a2, (void (*)(uint64_t))type metadata accessor for CoreTelephonyService);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type CoreTelephonyService and conformance CoreTelephonyService(&lazy protocol witness table cache variable for type CoreTelephonyService and conformance CoreTelephonyService, a2, (void (*)(uint64_t))type metadata accessor for CoreTelephonyService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CoreTelephonyService and conformance CoreTelephonyService(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C9EAFEF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SiriEnvironment.coreTelephonyService.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1C9EAFF28@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_0_7();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 136))();
  *a1 = result;
  return result;
}

uint64_t method lookup function for CoreTelephonyService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CoreTelephonyService);
}

uint64_t dispatch thunk of CoreTelephonyService.mock.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of CoreTelephonyService.mock.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of CoreTelephonyService.mock.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of CoreTelephonyService.coreTelephonyAPIBridge.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of CoreTelephonyService.coreTelephonyAPIBridge.setter()
{
  OUTLINED_FUNCTION_0_7();
  uint64_t v1 = *(uint64_t (**)(_OWORD *))(v0 + 168);
  long long v3 = v2[1];
  v6[0] = *v2;
  v6[1] = v3;
  long long v4 = v2[3];
  _OWORD v6[2] = v2[2];
  v6[3] = v4;
  return v1(v6);
}

uint64_t dispatch thunk of CoreTelephonyService.coreTelephonyAPIBridge.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of CoreTelephonyService.__allocating_init(coreTelephonyAPIBridge:)(_OWORD *a1)
{
  uint64_t v2 = *(uint64_t (**)(_OWORD *))(v1 + 232);
  long long v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  long long v4 = a1[3];
  _OWORD v6[2] = a1[2];
  v6[3] = v4;
  return v2(v6);
}

uint64_t dispatch thunk of CoreTelephonyService.__allocating_init(storage:)()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t OUTLINED_FUNCTION_2_22()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

unint64_t OUTLINED_FUNCTION_4_18()
{
  return 0xD000000000000021;
}

SiriUtilities::SiriVoiceGender_optional __swiftcall SiriVoiceGender.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  long long v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SiriVoiceGender.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 3;
  if (v5 < 3) {
    char v7 = v5;
  }
  *long long v4 = v7;
  return result;
}

uint64_t SiriVoiceGender.rawValue.getter()
{
  uint64_t v1 = 0x656C616D6546;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E776F6E6B6E55;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701601613;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SiriVoiceGender(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type SiriVoiceGender and conformance SiriVoiceGender()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriVoiceGender and conformance SiriVoiceGender;
  if (!lazy protocol witness table cache variable for type SiriVoiceGender and conformance SiriVoiceGender)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriVoiceGender and conformance SiriVoiceGender);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SiriVoiceGender()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SiriVoiceGender()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SiriVoiceGender()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriUtilities::SiriVoiceGender_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SiriVoiceGender(Swift::String *a1)
{
  return SiriVoiceGender.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SiriVoiceGender@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SiriVoiceGender.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unsigned char *storeEnumTagSinglePayload for SiriVoiceGender(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9EB0348);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriVoiceGender()
{
  return &type metadata for SiriVoiceGender;
}

uint64_t MobileGestaltDeviceClassProvider.currentDeviceClass.getter@<X0>(char *a1@<X8>)
{
  if (one-time initialization token for classNumberToDeviceClass != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)MEMORY[0x1CB7919D0](0xD000000000000011, 0x80000001C9EB9B30);
  unint64_t v3 = MGGetSInt32Answer();

  swift_beginAccess();
  specialized Dictionary.subscript.getter(v3, static MobileGestaltDeviceClassProvider.classNumberToDeviceClass, a1);
  return swift_endAccess();
}

BOOL static DeviceClass.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void DeviceClass.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int DeviceClass.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t one-time initialization function for classNumberToDeviceClass()
{
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  static MobileGestaltDeviceClassProvider.classNumberToDeviceClass = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type DeviceClass and conformance DeviceClass()
{
  unint64_t result = lazy protocol witness table cache variable for type DeviceClass and conformance DeviceClass;
  if (!lazy protocol witness table cache variable for type DeviceClass and conformance DeviceClass)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceClass and conformance DeviceClass);
  }
  return result;
}

uint64_t protocol witness for DeviceClassProvider.currentDeviceClass.getter in conformance MobileGestaltDeviceClassProvider@<X0>(char *a1@<X8>)
{
  return MobileGestaltDeviceClassProvider.currentDeviceClass.getter(a1);
}

uint64_t getEnumTagSinglePayload for DeviceClass(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for DeviceClass(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9EB06DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceClass()
{
  return &type metadata for DeviceClass;
}

uint64_t dispatch thunk of DeviceClassProvider.currentDeviceClass.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for MobileGestaltDeviceClassProvider()
{
  return &type metadata for MobileGestaltDeviceClassProvider;
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_3_21();
  return Hasher._finalize()();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  return String.hash(into:)();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  InputOrigin.rawValue.getter();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  if (!a2) {
    OUTLINED_FUNCTION_1_21();
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_23();
  InputOrigin.rawValue.getter();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_23();
  OUTLINED_FUNCTION_4_19();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_23();
  specialized RawRepresentable<>.hash(into:)();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_23();
  OUTLINED_FUNCTION_4_19();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  char v0;

  OUTLINED_FUNCTION_2_23();
  if (!v0) {
    OUTLINED_FUNCTION_1_21();
  }
  OUTLINED_FUNCTION_4_19();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_3_21();
  return Hasher._finalize()();
}

uint64_t PersonalDomainsAuthenticationMode.acePersonalDomainsAuthenticationMode.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

SiriUtilities::PersonalDomainsAuthenticationMode_optional __swiftcall PersonalDomainsAuthenticationMode.init(aceValue:)(Swift::String_optional aceValue)
{
  int v2 = v1;
  if (!aceValue.value._object) {
    goto LABEL_23;
  }
  object = aceValue.value._object;
  uint64_t countAndFlagsBits = aceValue.value._countAndFlagsBits;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() != aceValue.value._countAndFlagsBits || v5 != object)
  {
    char v7 = OUTLINED_FUNCTION_0_23();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_9;
    }
    if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v9 == object)
    {
      swift_bridgeObjectRelease();
LABEL_17:
      LOBYTE(aceValue.value._countAndFlagsBits) = swift_bridgeObjectRelease();
      char v8 = 1;
      goto LABEL_24;
    }
    char v11 = OUTLINED_FUNCTION_0_23();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_17;
    }
    if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v12 == object)
    {
      swift_bridgeObjectRelease();
      LOBYTE(aceValue.value._countAndFlagsBits) = swift_bridgeObjectRelease();
    }
    else
    {
      char v14 = OUTLINED_FUNCTION_0_23();
      swift_bridgeObjectRelease();
      LOBYTE(aceValue.value._countAndFlagsBits) = swift_bridgeObjectRelease();
      if ((v14 & 1) == 0)
      {
LABEL_23:
        char v8 = 3;
        goto LABEL_24;
      }
    }
    char v8 = 2;
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();
LABEL_9:
  LOBYTE(aceValue.value._countAndFlagsBits) = swift_bridgeObjectRelease();
  char v8 = 0;
LABEL_24:
  *int v2 = v8;
  return (SiriUtilities::PersonalDomainsAuthenticationMode_optional)aceValue.value._countAndFlagsBits;
}

SiriUtilities::PersonalDomainsAuthenticationMode_optional static PersonalDomainsAuthenticationMode.fromAceValue(_:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  uint64_t v4 = a1;
  uint64_t v5 = a2;

  return PersonalDomainsAuthenticationMode.init(aceValue:)(*(Swift::String_optional *)&v4);
}

SiriUtilities::PersonalDomainsAuthenticationMode_optional __swiftcall PersonalDomainsAuthenticationMode.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PersonalDomainsAuthenticationMode.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 3;
  if (v5 < 3) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

uint64_t PersonalDomainsAuthenticationMode.rawValue.getter()
{
  uint64_t v1 = 0x726576656ELL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6552657275636573;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x737961776C61;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PersonalDomainsAuthenticationMode(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type PersonalDomainsAuthenticationMode and conformance PersonalDomainsAuthenticationMode()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonalDomainsAuthenticationMode and conformance PersonalDomainsAuthenticationMode;
  if (!lazy protocol witness table cache variable for type PersonalDomainsAuthenticationMode and conformance PersonalDomainsAuthenticationMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalDomainsAuthenticationMode and conformance PersonalDomainsAuthenticationMode);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PersonalDomainsAuthenticationMode()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PersonalDomainsAuthenticationMode()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PersonalDomainsAuthenticationMode()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriUtilities::PersonalDomainsAuthenticationMode_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PersonalDomainsAuthenticationMode(Swift::String *a1)
{
  return PersonalDomainsAuthenticationMode.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PersonalDomainsAuthenticationMode@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PersonalDomainsAuthenticationMode.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unsigned char *storeEnumTagSinglePayload for PersonalDomainsAuthenticationMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9EB1340);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PersonalDomainsAuthenticationMode()
{
  return &type metadata for PersonalDomainsAuthenticationMode;
}

uint64_t OUTLINED_FUNCTION_0_23()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_2_23()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_3_21()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_4_19()
{
  return String.hash(into:)();
}

uint64_t Transformer.inputType.getter@<X0>(void *a1@<X8>)
{
  TypeInformation.init(for:)((uint64_t)v5);
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  a1[1] = v3;
  return result;
}

uint64_t Transformer.outputType.getter@<X0>(void *a1@<X8>)
{
  TypeInformation.init(for:)((uint64_t)v5);
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  a1[1] = v3;
  return result;
}

uint64_t Transformer.typeErasedTransform(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = type metadata accessor for Optional();
  OUTLINED_FUNCTION_0_5();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v13 = (char *)v25 - v12;
  OUTLINED_FUNCTION_0_5();
  uint64_t v15 = v14;
  MEMORY[0x1F4188790](v16, v17);
  long long v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[0] = *v3;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v26);
  if (swift_dynamicCast())
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v6);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v13, v6);
    long long v20 = v27;
    v27[3] = *(void *)(a2 + 24);
    __swift_allocate_boxed_opaque_existential_0(v20);
    uint64_t v21 = v25[1];
    ((void (*)(char *))v25[0])(v19);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v6);
    if (v21) {
      return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v20);
    }
  }
  else
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 1, 1, v6);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v7);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t DynamicType = swift_getDynamicType();
    lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    swift_allocError();
    *(void *)uint64_t v24 = v6;
    *(void *)(v24 + 8) = DynamicType;
    *(unsigned char *)(v24 + 16) = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t protocol witness for Transforming.inputType.getter in conformance Transformer<A, B>@<X0>(void *a1@<X8>)
{
  return Transformer.inputType.getter(a1);
}

uint64_t protocol witness for Transforming.outputType.getter in conformance Transformer<A, B>@<X0>(void *a1@<X8>)
{
  return Transformer.outputType.getter(a1);
}

uint64_t protocol witness for Transforming.typeErasedTransform(_:) in conformance Transformer<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return Transformer.typeErasedTransform(_:)(a1, a2, a3);
}

uint64_t dispatch thunk of Transforming.inputType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Transforming.outputType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Transforming.typeErasedTransform(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x1F40E3038]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x1F40E3060]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x1F40E3070]();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x1F40E3128]();
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x1F40E3150]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x1F40E3160]();
}

uint64_t static CharacterSet.whitespacesAndNewlines.getter()
{
  return MEMORY[0x1F40E3368]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x1F40E3420]();
}

uint64_t type metadata accessor for DateInterval()
{
  return MEMORY[0x1F40E3530]();
}

uint64_t LocalizedError.errorDescription.getter()
{
  return MEMORY[0x1F40E3AB0]();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x1F40E41E0]();
}

uint64_t dispatch thunk of PropertyListDecoder.userInfo.modify()
{
  return MEMORY[0x1F40E41E8]();
}

uint64_t PropertyListDecoder.init()()
{
  return MEMORY[0x1F40E4210]();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return MEMORY[0x1F40E4220]();
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.setter()
{
  return MEMORY[0x1F40E4228]();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return MEMORY[0x1F40E4240]();
}

uint64_t PropertyListEncoder.init()()
{
  return MEMORY[0x1F40E4260]();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return MEMORY[0x1F40E4270]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x1F40E4550]();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return MEMORY[0x1F40E4938]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.appendingPathComponent(_:isDirectory:)()
{
  return MEMORY[0x1F40E49E0]();
}

uint64_t URL.appendingPathComponent(_:)()
{
  return MEMORY[0x1F40E49E8]();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E4A70]();
}

uint64_t URL.path.getter()
{
  return MEMORY[0x1F40E4AC0]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x1F40E4B80]();
}

uint64_t Data.init(contentsOf:options:)()
{
  return MEMORY[0x1F40E4BE0]();
}

uint64_t Data.write(to:options:)()
{
  return MEMORY[0x1F40E4E10]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x1F40E53B0]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x1F40E5438]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x1F40E5448]();
}

uint64_t Locale.init(identifier:)()
{
  return MEMORY[0x1F40E5500]();
}

uint64_t type metadata accessor for Locale()
{
  return MEMORY[0x1F40E5890]();
}

uint64_t os_signpost(_:dso:log:name:signpostID:)()
{
  return MEMORY[0x1F4188510]();
}

uint64_t OSSignpostID.init(log:)()
{
  return MEMORY[0x1F4188568]();
}

uint64_t static OSSignpostID.exclusive.getter()
{
  return MEMORY[0x1F4188578]();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return MEMORY[0x1F4188580]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x1F4188670]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x1F41886A0]();
}

uint64_t Logger.init(_:)()
{
  return MEMORY[0x1F41886B0]();
}

uint64_t type metadata accessor for Publishers.CombineLatest()
{
  return MEMORY[0x1F40D6610]();
}

uint64_t type metadata accessor for Publishers.Map()
{
  return MEMORY[0x1F40D6728]();
}

uint64_t type metadata accessor for Publishers.Debounce()
{
  return MEMORY[0x1F40D6810]();
}

uint64_t type metadata accessor for AnyCancellable()
{
  return MEMORY[0x1F40D6960]();
}

uint64_t AnyCancellable.init(_:)()
{
  return MEMORY[0x1F40D6988]();
}

uint64_t dispatch thunk of ObservableObject.objectWillChange.getter()
{
  return MEMORY[0x1F40D69D8]();
}

uint64_t ObservableObject<>.objectWillChange.getter()
{
  return MEMORY[0x1F40D69E0]();
}

uint64_t CurrentValueSubject.send(_:)()
{
  return MEMORY[0x1F40D6A40]();
}

uint64_t CurrentValueSubject.receive<A>(subscriber:)()
{
  return MEMORY[0x1F40D6A60]();
}

uint64_t type metadata accessor for CurrentValueSubject()
{
  return MEMORY[0x1F40D6A68]();
}

uint64_t CurrentValueSubject.__allocating_init(_:)()
{
  return MEMORY[0x1F40D6A70]();
}

uint64_t CurrentValueSubject.init(_:)()
{
  return MEMORY[0x1F40D6A78]();
}

Swift::Void __swiftcall ObservableObjectPublisher.send()()
{
}

uint64_t type metadata accessor for ObservableObjectPublisher()
{
  return MEMORY[0x1F40D6AC0]();
}

uint64_t Subject<>.send()()
{
  return MEMORY[0x1F40D6B68]();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return MEMORY[0x1F40D6BD8]();
}

uint64_t Publisher.combineLatest<A>(_:)()
{
  return MEMORY[0x1F40D6C10]();
}

uint64_t Publisher.map<A>(_:)()
{
  return MEMORY[0x1F40D6C50]();
}

uint64_t Publisher.debounce<A>(for:scheduler:options:)()
{
  return MEMORY[0x1F40D6D90]();
}

uint64_t NWPathMonitor.pathUpdateHandler.setter()
{
  return MEMORY[0x1F40F2398]();
}

uint64_t NWPathMonitor.start(queue:)()
{
  return MEMORY[0x1F40F23A0]();
}

Swift::Void __swiftcall NWPathMonitor.cancel()()
{
}

uint64_t NWPathMonitor.init()()
{
  return MEMORY[0x1F40F23C0]();
}

uint64_t type metadata accessor for NWPathMonitor()
{
  return MEMORY[0x1F40F23C8]();
}

uint64_t NWPath.isExpensive.getter()
{
  return MEMORY[0x1F40F2690]();
}

uint64_t NWPath.supportsDNS.getter()
{
  return MEMORY[0x1F40F2698]();
}

uint64_t NWPath.supportsIPv4.getter()
{
  return MEMORY[0x1F40F26A0]();
}

uint64_t NWPath.supportsIPv6.getter()
{
  return MEMORY[0x1F40F26A8]();
}

uint64_t NWPath.isConstrained.getter()
{
  return MEMORY[0x1F40F26B0]();
}

uint64_t NWPath.debugDescription.getter()
{
  return MEMORY[0x1F40F26C8]();
}

uint64_t type metadata accessor for NWPath.Status()
{
  return MEMORY[0x1F40F2700]();
}

uint64_t NWPath.status.getter()
{
  return MEMORY[0x1F40F2708]();
}

uint64_t type metadata accessor for NWPath()
{
  return MEMORY[0x1F40F2718]();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return MEMORY[0x1F4186C60]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x1F4186CB0]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x1F4186CF8]();
}

uint64_t static DispatchQoS.userInitiated.getter()
{
  return MEMORY[0x1F4186D08]();
}

uint64_t static DispatchQoS.default.getter()
{
  return MEMORY[0x1F4186D28]();
}

uint64_t static DispatchQoS.utility.getter()
{
  return MEMORY[0x1F4186D40]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x1F4186D60]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x1F4186E28]();
}

uint64_t DispatchTime.advanced(by:)()
{
  return MEMORY[0x1F4186E38]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x1F4186E60]();
}

uint64_t Dictionary.init()()
{
  return MEMORY[0x1F4183270]();
}

uint64_t CancellationError.init()()
{
  return MEMORY[0x1F4187BE8]();
}

uint64_t Set.init()()
{
  return MEMORY[0x1F4183288]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x1F40E6000]();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1F40E6018]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6030]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x1F4183318]();
}

uint64_t Dictionary.removeValue(forKey:)()
{
  return MEMORY[0x1F4183320]();
}

uint64_t Dictionary.compactMapValues<A>(_:)()
{
  return MEMORY[0x1F4183348]();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x1F4183358]();
}

uint64_t Dictionary.Keys.description.getter()
{
  return MEMORY[0x1F4183370]();
}

uint64_t type metadata accessor for Dictionary.Keys()
{
  return MEMORY[0x1F4183398]();
}

uint64_t Dictionary.keys.getter()
{
  return MEMORY[0x1F41833A0]();
}

uint64_t Dictionary.count.getter()
{
  return MEMORY[0x1F41833D0]();
}

uint64_t Dictionary.merge(_:uniquingKeysWith:)()
{
  return MEMORY[0x1F41833E8]();
}

uint64_t Dictionary.mapValues<A>(_:)()
{
  return MEMORY[0x1F4183498]();
}

Swift::Void __swiftcall Dictionary.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t type metadata accessor for Dictionary()
{
  return MEMORY[0x1F41834A8]();
}

uint64_t Dictionary.subscript.getter()
{
  return MEMORY[0x1F41834F8]();
}

uint64_t Dictionary.subscript.setter()
{
  return MEMORY[0x1F4183500]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x1F41835C0]();
}

uint64_t BidirectionalCollection.dropLast(_:)()
{
  return MEMORY[0x1F4183708]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x1F4183730]();
}

uint64_t ObjectIdentifier.debugDescription.getter()
{
  return MEMORY[0x1F4183818]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x1F4183838]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x1F40E6190]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x1F4183880]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = MEMORY[0x1F4183898]();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x1F4183958]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1F4183A08]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init(cString:)()
{
  return MEMORY[0x1F4183A60]();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x1F4183A88]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x1F4183AA0]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x1F4183AB0]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x1F4183B10]();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return MEMORY[0x1F4183B30](a1._countAndFlagsBits, a1._object);
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return MEMORY[0x1F4183B38](a1._countAndFlagsBits, a1._object);
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x1F4183B90]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x1F4183BA0]();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return MEMORY[0x1F4183BE8]();
}

uint64_t Sequence.filter(_:)()
{
  return MEMORY[0x1F4183C48]();
}

uint64_t Sequence.forEach(_:)()
{
  return MEMORY[0x1F4183C80]();
}

uint64_t Sequence<>.contains(_:)()
{
  return MEMORY[0x1F4183CE0]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x1F4183D70]();
}

uint64_t dispatch thunk of RawRepresentable.init(rawValue:)()
{
  return MEMORY[0x1F4183D78]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x1F4183D80]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x1F4183DF8]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t Array.startIndex.getter()
{
  return MEMORY[0x1F4183E88]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x1F4183E98]();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return MEMORY[0x1F4183EA8]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1F4183EC8]();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x1F4183EF0]();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return MEMORY[0x1F4183F18]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1F4183F38]();
}

uint64_t Array.count.getter()
{
  return MEMORY[0x1F4183F40]();
}

uint64_t Array.append(_:)()
{
  return MEMORY[0x1F4183F60]();
}

uint64_t Array.endIndex.getter()
{
  return MEMORY[0x1F4183F78]();
}

Swift::Void __swiftcall Array.formIndex(after:)(Swift::Int *after)
{
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x1F4183FA8]();
}

uint64_t Array.init<A>(_:)()
{
  return MEMORY[0x1F4183FD8]();
}

Swift::Bool_optional __swiftcall Bool.init(_:)(Swift::String a1)
{
  return (Swift::Bool_optional)MEMORY[0x1F4184000](a1._countAndFlagsBits, a1._object);
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x1F4187BF0]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x1F4187C00]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x1F4187C08]();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return MEMORY[0x1F4187C10]();
}

uint64_t type metadata accessor for CancellationError()
{
  return MEMORY[0x1F4187C18]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x1F4187CF8]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x1F4187D00]();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Task<>.isCancelled.getter()
{
  return MEMORY[0x1F4187DC8]();
}

Swift::Void __swiftcall ThrowingTaskGroup.cancelAll()()
{
}

uint64_t type metadata accessor for ThrowingTaskGroup()
{
  return MEMORY[0x1F4187E60]();
}

uint64_t Double.write<A>(to:)()
{
  return MEMORY[0x1F4184048]();
}

uint64_t Float.write<A>(to:)()
{
  return MEMORY[0x1F41840C0]();
}

uint64_t Set.description.getter()
{
  return MEMORY[0x1F4184100]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x1F4184138]();
}

uint64_t Set.insert(_:)()
{
  return MEMORY[0x1F41841A8]();
}

uint64_t Set.contains(_:)()
{
  return MEMORY[0x1F41841F0]();
}

uint64_t type metadata accessor for Set()
{
  return MEMORY[0x1F4184230]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x1F41842D0]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x1F41842F8]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x1F4184338]();
}

uint64_t Collection.dropLast(_:)()
{
  return MEMORY[0x1F41843E0]();
}

uint64_t Collection.dropFirst(_:)()
{
  return MEMORY[0x1F41843E8]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x1F4184440]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x1F41886C0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x1F41886D0]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x1F41886E0]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x1F4186FD8]();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerOptions()
{
  return MEMORY[0x1F4187040]();
}

uint64_t OS_dispatch_queue.SchedulerTimeType.Stride.init(floatLiteral:)()
{
  return MEMORY[0x1F4187048]();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride()
{
  return MEMORY[0x1F4187088]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x1F41870A0]();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return MEMORY[0x1F41870B8]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x1F41870E0]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x1F4187100]();
}

uint64_t type metadata accessor for OS_dispatch_source.TimerFlags()
{
  return MEMORY[0x1F4187130]();
}

uint64_t static OS_dispatch_source.makeTimerSource(flags:queue:)()
{
  return MEMORY[0x1F4187168]();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return MEMORY[0x1F41871D0]();
}

Swift::Void __swiftcall OS_dispatch_source.resume()()
{
}

uint64_t static os_signpost_type_t.end.getter()
{
  return MEMORY[0x1F4188708]();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return MEMORY[0x1F4188710]();
}

uint64_t static os_signpost_type_t.event.getter()
{
  return MEMORY[0x1F4188718]();
}

Swift::Void __swiftcall OS_dispatch_semaphore.wait()()
{
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return MEMORY[0x1F4187288]();
}

uint64_t OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)()
{
  return MEMORY[0x1F41872D0]();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return MEMORY[0x1F4188720]();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return MEMORY[0x1F4188758]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1F4184640]();
}

uint64_t Substring.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1F4184730]();
}

uint64_t Substring.distance(from:to:)()
{
  return MEMORY[0x1F4184770]();
}

uint64_t Substring.subscript.getter()
{
  return MEMORY[0x1F4184790]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x1F41847C0]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x1F4184820]();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return MEMORY[0x1F40E6C68]();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return MEMORY[0x1F40E6D88]();
}

uint64_t dispatch thunk of StringProtocol.hasPrefix(_:)()
{
  return MEMORY[0x1F4184870]();
}

uint64_t dispatch thunk of StringProtocol.hasSuffix(_:)()
{
  return MEMORY[0x1F4184878]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x1F4184978]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x1F4184B18]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x1F4184B20]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x1F4184B30]();
}

uint64_t _expectEnd<A>(of:is:)()
{
  return MEMORY[0x1F4184BE0]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1F4184C98]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x1F4184CA8]();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return MEMORY[0x1F4184CC0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t _typeByName(_:)()
{
  return MEMORY[0x1F4184CF8]();
}

uint64_t StaticString.description.getter()
{
  return MEMORY[0x1F4184D20]();
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1F4184D78]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x1F4184DD0]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x1F4184DF0]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t type metadata accessor for PartialKeyPath()
{
  return MEMORY[0x1F4184E88]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x1F4184EC8]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x1F4184ED8]();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x1F4184F28]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1F4184F30]();
}

uint64_t ContiguousArray.append(_:)()
{
  return MEMORY[0x1F4184F48]();
}

uint64_t ContiguousArray.init()()
{
  return MEMORY[0x1F4184F68]();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return MEMORY[0x1F4184F70]();
}

uint64_t _mangledTypeName(_:)()
{
  return MEMORY[0x1F41850A0]();
}

uint64_t CodingUserInfoKey.init(rawValue:)()
{
  return MEMORY[0x1F41850B0]();
}

uint64_t type metadata accessor for CodingUserInfoKey()
{
  return MEMORY[0x1F41850C0]();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return MEMORY[0x1F41851A0](isUnique, capacity);
}

uint64_t _NativeDictionary.makeIterator()()
{
  return MEMORY[0x1F41851A8]();
}

Swift::Void __swiftcall _NativeDictionary.copy()()
{
}

uint64_t _NativeDictionary._delete(at:)()
{
  return MEMORY[0x1F41851C0]();
}

uint64_t _NativeDictionary._insert(at:key:value:)()
{
  return MEMORY[0x1F41851C8]();
}

uint64_t type metadata accessor for _NativeDictionary()
{
  return MEMORY[0x1F41851E0]();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return MEMORY[0x1F41851F8]();
}

uint64_t __CocoaDictionary.count.getter()
{
  return MEMORY[0x1F4185238]();
}

uint64_t __CocoaDictionary.lookup(_:)()
{
  return MEMORY[0x1F4185260]();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return MEMORY[0x1F4185270]();
}

uint64_t __CocoaDictionary.Iterator.nextKey()()
{
  return MEMORY[0x1F4185278]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1F4185298]();
}

{
  return MEMORY[0x1F41852A0]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x1F4185350]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x1F4185368]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1F4185370]();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return MEMORY[0x1F4185378]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x1F4185398]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x1F41854C8](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x1F41854D8]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x1F41854E0]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x1F4185568]();
}

{
  return MEMORY[0x1F4185588]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x1F4185598]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x1F41855E0]();
}

uint64_t type metadata accessor for KeyedDecodingContainer()
{
  return MEMORY[0x1F41855F0]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x1F4185608]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x1F4185690]();
}

{
  return MEMORY[0x1F41856B0]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x1F41856C0]();
}

uint64_t type metadata accessor for KeyedEncodingContainer()
{
  return MEMORY[0x1F4185710]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x1F4185758]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x1F41859E8]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode(_:)()
{
  return MEMORY[0x1F4185A58]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)()
{
  return MEMORY[0x1F4185A88]();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode(_:)()
{
  return MEMORY[0x1F4185AF0]();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)()
{
  return MEMORY[0x1F4185B20]();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return MEMORY[0x1F4185D10]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1F4185DD8]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x1F40E6E30]();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return MEMORY[0x1F4185E98]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x1F4185EA8]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1F4185EB0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t type metadata accessor for Result()
{
  return MEMORY[0x1F4185F68]();
}

uint64_t dispatch thunk of Decoder.singleValueContainer()()
{
  return MEMORY[0x1F4185FB8]();
}

uint64_t dispatch thunk of Decoder.userInfo.getter()
{
  return MEMORY[0x1F4185FC0]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1F4185FC8]();
}

uint64_t dispatch thunk of Encoder.singleValueContainer()()
{
  return MEMORY[0x1F4185FE0]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1F4185FF0]();
}

uint64_t dispatch thunk of OptionSet.init(rawValue:)()
{
  return MEMORY[0x1F41862B8]();
}

uint64_t TaskLocal.init(wrappedValue:)()
{
  return MEMORY[0x1F4188198]();
}

uint64_t TaskLocal.get()()
{
  return MEMORY[0x1F41881A8]();
}

uint64_t TaskLocal.withValue<A>(_:operation:file:line:)()
{
  return MEMORY[0x1F41881B0]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x1F4186318]();
}

uint64_t IsAppleInternalBuild()
{
  return MEMORY[0x1F41165A0]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x1F417CE28]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x1F417CE38]();
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E72C8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CTServerConnectionCreateAndLaunchWithIdentifier()
{
  return MEMORY[0x1F40DF0C0]();
}

uint64_t _CTServerConnectionCreateOnTargetQueue()
{
  return MEMORY[0x1F40DF0C8]();
}

uint64_t _CTServerConnectionRegisterBlockForNotification()
{
  return MEMORY[0x1F40DF1C8]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return MEMORY[0x1F4186398]();
}

uint64_t _swift_stdlib_strtof_clocale()
{
  return MEMORY[0x1F41863A0]();
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void exit(int a1)
{
}

void free(void *a1)
{
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1F40CC4C0]();
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

uint64_t nwi_ifstate_get_flags()
{
  return MEMORY[0x1F40CD098]();
}

uint64_t nwi_state_copy()
{
  return MEMORY[0x1F40CD0A8]();
}

uint64_t nwi_state_get_first_ifstate()
{
  return MEMORY[0x1F40CD0B0]();
}

uint64_t nwi_state_get_reachability_flags()
{
  return MEMORY[0x1F40CD0C8]();
}

uint64_t nwi_state_release()
{
  return MEMORY[0x1F40CD0D0]();
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1F4186460]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x1F4186478]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1F41864A0]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x1F41864B0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1F41864C0]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1F4186518]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1F4186538]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1F4186540]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1F4186550]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1F4186568]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1F4186570]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1F4186580]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getFunctionTypeMetadata1()
{
  return MEMORY[0x1F41865C8]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1F41865E0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1F41865E8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1F41865F8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1F4186650]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1F4186688]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1F4186690]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isUniquelyReferenced_native()
{
  return MEMORY[0x1F41866E8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1F4186710]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_readAtKeyPath()
{
  return MEMORY[0x1F4186738]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_setAtReferenceWritableKeyPath()
{
  return MEMORY[0x1F4186780]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1F4186790]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1F41867A8]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1F41867B8]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1F4188250]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1F4188258]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1F4188260]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1F4186840]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x1F4186848]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x1F4186850]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1F4186858]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1F4186860]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1F4186868]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x1F4186870]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x1F4186878]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1F4186898]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x1F41868A0]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1F41868B8]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1F41868C0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1F41868C8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1F41868E8]();
}

uint64_t tailspin_dump_output_with_options_sync()
{
  return MEMORY[0x1F41824C0]();
}