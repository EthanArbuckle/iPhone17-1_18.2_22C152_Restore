uint64_t e_rules()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  char v181;
  int v182;
  __int16 v183;
  char v184;
  int v185;
  __int16 v186;
  char v187;
  char v188;
  uint64_t v189;

  OUTLINED_FUNCTION_6_34();
  v189 = *MEMORY[0x263EF8340];
  v178 = 0;
  v179 = 0;
  OUTLINED_FUNCTION_1_37(v4, v5, v6, v7, v8, v9, v10, v11, v82, v86, v90, v94, v98, v102, v106, v110, v114, v118, v122,
    v126,
    v130,
    v134,
    v138,
    v142,
    v146,
    v150,
    v154,
    v158,
    v162,
    v166,
    v170,
    v174,
    v175,
    v176,
    v177);
  OUTLINED_FUNCTION_50_14();
  v12 = setjmp(v3);
  if (!v12
    && !OUTLINED_FUNCTION_53_14(v12, v13, v14, v15, v16, v17, v18, v19, v83, v87, v91, v95, v99, v103, v107, v111, v115, v119, v123,
                        v127,
                        v131,
                        v135,
                        v139,
                        v143,
                        v147,
                        v151,
                        v155,
                        v159,
                        v163,
                        v167,
                        v171,
                        v174,
                        v175,
                        v176,
                        v177,
                        v178,
                        v179,
                        v180,
                        v181,
                        v182,
                        v183,
                        v184,
                        v185,
                        v186,
                        v187,
                        v188))
  {
    OUTLINED_FUNCTION_5_34();
    OUTLINED_FUNCTION_30_23(v0, (uint64_t)&v176);
    OUTLINED_FUNCTION_71_10(v21, v22, v23, v24, v25, v26, v27, v28, v84, v88, v92, v96, v100, v104, v108, v112, v116, v120, v124,
      v128,
      v132,
      v136,
      v140,
      v144,
      v148,
      v152,
      v156,
      v160,
      v164,
      v168,
      v172,
      v174);
    v29 = fence_35(v0, 0, (uint64_t)&null_str_12);
    OUTLINED_FUNCTION_47_14((uint64_t)v29, v30, (uint64_t)&unk_268C67DE2);
    starttest(v0, v2);
    if (!lpta_loadp_setscan_r(v0, (uint64_t)&v178))
    {
      if (OUTLINED_FUNCTION_79_10()) {
        goto LABEL_22;
      }
      v31 = advance_tok();
      if (v31) {
        goto LABEL_22;
      }
LABEL_8:
      v39 = OUTLINED_FUNCTION_37_19(v31, v32, v33, v34, v35, v36, v37, v38, v85, v89, v93, v97, v101, v105, v109, v113, v117, v121, v125,
              v129,
              v133,
              v137,
              v141,
              v145,
              v149,
              v153,
              v157,
              v161,
              v165,
              v169,
              v173,
              v174,
              v175,
              v176,
              v177,
              v178);
      v42 = &unk_268C67DEF;
      goto LABEL_13;
    }
    while (2)
    {
      v43 = OUTLINED_FUNCTION_27_23(3);
      if (OUTLINED_FUNCTION_16_31(v43, (uint64_t)&v178))
      {
LABEL_15:
        v52 = OUTLINED_FUNCTION_27_23(4);
        if (!OUTLINED_FUNCTION_41_15(v52, (uint64_t)&v178))
        {
          OUTLINED_FUNCTION_20_29(5);
          v64 = (uint64_t *)&unk_268C67DDF;
LABEL_21:
          v44 = OUTLINED_FUNCTION_2_37(v44, v45, v46, v64);
          if (v44) {
            goto LABEL_22;
          }
LABEL_36:
          v39 = OUTLINED_FUNCTION_37_19(v44, v45, v46, v47, v48, v49, v50, v51, v85, v89, v93, v97, v101, v105, v109, v113, v117, v121, v125,
                  v129,
                  v133,
                  v137,
                  v141,
                  v145,
                  v149,
                  v153,
                  v157,
                  v161,
                  v165,
                  v169,
                  v173,
                  v174,
                  v175,
                  v176,
                  v177,
                  v178);
          v42 = &unk_268C67DD2;
LABEL_13:
          if (!OUTLINED_FUNCTION_18_30(v39, v40, v41, (uint64_t)v42, 0)) {
            goto LABEL_14;
          }
LABEL_22:
          v65 = *(void *)(v0 + 104);
          if (v65) {
            v44 = OUTLINED_FUNCTION_17_31(v65);
          }
          else {
            v44 = OUTLINED_FUNCTION_23_25();
          }
          switch((int)v44)
          {
            case 1:
              continue;
            case 2:
              goto LABEL_14;
            case 3:
              goto LABEL_15;
            case 4:
              break;
            case 5:
              v64 = (uint64_t *)&unk_268C67DE6;
              goto LABEL_21;
            case 6:
              goto LABEL_36;
            case 7:
              goto LABEL_27;
            case 8:
              goto LABEL_29;
            case 9:
              goto LABEL_12;
            case 10:
              goto LABEL_30;
            default:
              goto LABEL_3;
          }
        }
        lpta_loadpn(v0, &v176);
        rpta_loadpn(v0, v0 + 1656);
        if (!compare_ptas(v0))
        {
          v53 = testeq(v0);
          if (!v53)
          {
            v61 = OUTLINED_FUNCTION_37_19(v53, v54, v55, v56, v57, v58, v59, v60, v85, v89, v93, v97, v101, v105, v109, v113, v117, v121, v125,
                    v129,
                    v133,
                    v137,
                    v141,
                    v145,
                    v149,
                    v153,
                    v157,
                    v161,
                    v165,
                    v169,
                    v173,
                    v174,
                    v175,
                    v176,
                    v177,
                    v178);
            if (!OUTLINED_FUNCTION_18_30(v61, v62, v63, (uint64_t)&unk_268C67DD8, 0)) {
              goto LABEL_14;
            }
          }
        }
LABEL_27:
        v66 = is_nasalized_vowel((void *)v0, (uint64_t)&v176);
        if (!v66)
        {
          v74 = OUTLINED_FUNCTION_37_19(v66, v67, v68, v69, v70, v71, v72, v73, v85, v89, v93, v97, v101, v105, v109, v113, v117, v121, v125,
                  v129,
                  v133,
                  v137,
                  v141,
                  v145,
                  v149,
                  v153,
                  v157,
                  v161,
                  v165,
                  v169,
                  v173,
                  v174,
                  v175,
                  v176,
                  v177,
                  v178);
          if (!OUTLINED_FUNCTION_18_30(v74, v75, v76, (uint64_t)&unk_268C67DF0, 0))
          {
LABEL_14:
            OUTLINED_FUNCTION_36_20(v177);
            goto LABEL_4;
          }
        }
LABEL_29:
        v77 = OUTLINED_FUNCTION_27_23(9);
        v44 = OUTLINED_FUNCTION_41_15(v77, (uint64_t)&v178);
        if (!v44)
        {
LABEL_30:
          OUTLINED_FUNCTION_35_21(10, v85, v89, v93, v97, v101, v105, v109, v113, v117, v121, v125, v129, v133, v137, v141, v145, v149, v153,
            v157,
            v161,
            v165,
            v169,
            v173,
            v174);
          v81 = OUTLINED_FUNCTION_2_37(v78, v79, v80, (uint64_t *)&unk_268C67DD7);
          if (v81) {
            goto LABEL_22;
          }
          if (OUTLINED_FUNCTION_16_31(v81, (uint64_t)&v174)) {
            goto LABEL_22;
          }
          if (advance_tok()) {
            goto LABEL_22;
          }
          if (test_string_s(v0, 1u, 1u, (uint64_t *)&unk_268C67DCD)) {
            goto LABEL_22;
          }
          *(unsigned char *)(v0 + 136) = 1;
          v31 = OUTLINED_FUNCTION_46_14();
          if (v31) {
            goto LABEL_22;
          }
          goto LABEL_8;
        }
      }
      else
      {
        if (OUTLINED_FUNCTION_70_10()) {
          goto LABEL_22;
        }
        v44 = advance_tok();
        if (v44) {
          goto LABEL_22;
        }
      }
      break;
    }
LABEL_12:
    v39 = OUTLINED_FUNCTION_37_19(v44, v45, v46, v47, v48, v49, v50, v51, v85, v89, v93, v97, v101, v105, v109, v113, v117, v121, v125,
            v129,
            v133,
            v137,
            v141,
            v145,
            v149,
            v153,
            v157,
            v161,
            v165,
            v169,
            v173,
            v174,
            v175,
            v176,
            v177,
            v178);
    v42 = &unk_268C67DD9;
    goto LABEL_13;
  }
LABEL_3:
  v1 = 94;
LABEL_4:
  vretproc(v0);
  return v1;
}

void e_acute_rules()
{
  OUTLINED_FUNCTION_77_10();
  OUTLINED_FUNCTION_6_34();
  OUTLINED_FUNCTION_1_37(v2, v3, v4, v5, v6, v7, v8, v9, v66, v72, v78, v84, v90, v96, v102, v108, v114, v120, v126,
    v132,
    v138,
    v144,
    v150,
    v156,
    v162,
    v168,
    v174,
    v180,
    v186,
    v192,
    v198,
    v204,
    v210,
    v215,
    v220);
  OUTLINED_FUNCTION_3_36(v10, v11, v12, v13, v14, v15, v16, v17, v67, v73, v79, v85, v91, v97, v103, v109, v115, v121, v127,
    v133,
    v139,
    v145,
    v151,
    v157,
    v163,
    v169,
    v175,
    v181,
    v187,
    v193,
    v199,
    v205,
    v211,
    v216,
    v221,
    v223,
    v225,
    v227,
    v229,
    v231);
  uint64_t v18 = setjmp(v1);
  if (!v18)
  {
    uint64_t v26 = OUTLINED_FUNCTION_0_39(v18, v19, v20, v21, v22, v23, v24, v25, v68, v74, v80, v86, v92, v98, v104, v110, v116, v122, v128,
            v134,
            v140,
            v146,
            v152,
            v158,
            v164,
            v170,
            v176,
            v182,
            v188,
            v194,
            v200,
            v206,
            v212,
            v217,
            v222,
            *(int *)v224,
            v224[4],
            *(int *)v226,
            *(__int16 *)&v226[4],
            v226[6],
            v228,
            SWORD2(v228),
            SBYTE6(v228),
            SHIBYTE(v228),
            v230,
            v232);
    if (!v26)
    {
      OUTLINED_FUNCTION_9_34(v26, v27, v28, v29, v30, v31, v32, v33, v69, v75, v81, v87, v93, v99, v105, v111, v117, v123, v129,
        v135,
        v141,
        v147,
        v153,
        v159,
        v165,
        v171,
        v177,
        v183,
        v189,
        v195,
        v201,
        v207,
        v213,
        v218);
      OUTLINED_FUNCTION_12_33(v34, v35, v36, v37, v38, v39, v40, v41, v70, v76, v82, v88, v94, v100, v106, v112, v118, v124, v130,
        v136,
        v142,
        v148,
        v154,
        v160,
        v166,
        v172,
        v178,
        v184,
        v190,
        v196,
        v202,
        v208);
      v42 = fence_35(v0, 0, (uint64_t)&null_str_12);
      OUTLINED_FUNCTION_29_23((uint64_t)v42, v43, (uint64_t)&unk_268C67DE2);
      OUTLINED_FUNCTION_39_16();
      uint64_t v44 = OUTLINED_FUNCTION_63_11();
      if (v44
        || (uint64_t v52 = OUTLINED_FUNCTION_11_34(v44, v45, v46, v47, v48, v49, v50, v51, v71, v77, v83, v89, v95, v101, v107, v113, v119, v125, v131,
                    v137,
                    v143,
                    v149,
                    v155,
                    v161,
                    v167,
                    v173,
                    v179,
                    v185,
                    v191,
                    v197,
                    v203,
                    v209,
                    v214,
                    v219),
            uint64_t v55 = OUTLINED_FUNCTION_18_30(v52, v53, v54, (uint64_t)&unk_268C67DF0, 0),
            v55))
      {
        OUTLINED_FUNCTION_43_14();
        while (1)
        {
          OUTLINED_FUNCTION_45_14();
          uint64_t v55 = OUTLINED_FUNCTION_40_16();
          if (!v55) {
            break;
          }
          uint64_t v63 = *(void *)(v0 + 104);
          if (v63) {
            int v64 = OUTLINED_FUNCTION_17_31(v63);
          }
          else {
            int v64 = OUTLINED_FUNCTION_23_25();
          }
          if (v64 != 1)
          {
            OUTLINED_FUNCTION_57_12();
            if (v65) {
              break;
            }
            goto LABEL_3;
          }
        }
      }
      OUTLINED_FUNCTION_21_28(v55, v56, v57, v58, v59, v60, v61, v62, v71, v77, v83, v89, v95, v101, v107, v113, v119, v125, v131,
        v137,
        v143,
        v149,
        v155,
        v161,
        v167,
        v173,
        v179,
        v185,
        v191,
        v197,
        v203,
        v209,
        v214);
    }
  }
LABEL_3:
  vretproc(v0);
  OUTLINED_FUNCTION_24_24();
  OUTLINED_FUNCTION_76_10();
}

void e_circon_rules()
{
  OUTLINED_FUNCTION_77_10();
  OUTLINED_FUNCTION_6_34();
  OUTLINED_FUNCTION_1_37(v2, v3, v4, v5, v6, v7, v8, v9, v66, v72, v78, v84, v90, v96, v102, v108, v114, v120, v126,
    v132,
    v138,
    v144,
    v150,
    v156,
    v162,
    v168,
    v174,
    v180,
    v186,
    v192,
    v198,
    v204,
    v210,
    v215,
    v220);
  OUTLINED_FUNCTION_3_36(v10, v11, v12, v13, v14, v15, v16, v17, v67, v73, v79, v85, v91, v97, v103, v109, v115, v121, v127,
    v133,
    v139,
    v145,
    v151,
    v157,
    v163,
    v169,
    v175,
    v181,
    v187,
    v193,
    v199,
    v205,
    v211,
    v216,
    v221,
    v223,
    v225,
    v227,
    v229,
    v231);
  uint64_t v18 = setjmp(v1);
  if (!v18)
  {
    uint64_t v26 = OUTLINED_FUNCTION_0_39(v18, v19, v20, v21, v22, v23, v24, v25, v68, v74, v80, v86, v92, v98, v104, v110, v116, v122, v128,
            v134,
            v140,
            v146,
            v152,
            v158,
            v164,
            v170,
            v176,
            v182,
            v188,
            v194,
            v200,
            v206,
            v212,
            v217,
            v222,
            *(int *)v224,
            v224[4],
            *(int *)v226,
            *(__int16 *)&v226[4],
            v226[6],
            v228,
            SWORD2(v228),
            SBYTE6(v228),
            SHIBYTE(v228),
            v230,
            v232);
    if (!v26)
    {
      OUTLINED_FUNCTION_9_34(v26, v27, v28, v29, v30, v31, v32, v33, v69, v75, v81, v87, v93, v99, v105, v111, v117, v123, v129,
        v135,
        v141,
        v147,
        v153,
        v159,
        v165,
        v171,
        v177,
        v183,
        v189,
        v195,
        v201,
        v207,
        v213,
        v218);
      OUTLINED_FUNCTION_12_33(v34, v35, v36, v37, v38, v39, v40, v41, v70, v76, v82, v88, v94, v100, v106, v112, v118, v124, v130,
        v136,
        v142,
        v148,
        v154,
        v160,
        v166,
        v172,
        v178,
        v184,
        v190,
        v196,
        v202,
        v208);
      v42 = fence_35(v0, 0, (uint64_t)&null_str_12);
      OUTLINED_FUNCTION_29_23((uint64_t)v42, v43, (uint64_t)&unk_268C67DE2);
      OUTLINED_FUNCTION_39_16();
      uint64_t v44 = OUTLINED_FUNCTION_63_11();
      if (v44
        || (uint64_t v52 = OUTLINED_FUNCTION_11_34(v44, v45, v46, v47, v48, v49, v50, v51, v71, v77, v83, v89, v95, v101, v107, v113, v119, v125, v131,
                    v137,
                    v143,
                    v149,
                    v155,
                    v161,
                    v167,
                    v173,
                    v179,
                    v185,
                    v191,
                    v197,
                    v203,
                    v209,
                    v214,
                    v219),
            uint64_t v55 = OUTLINED_FUNCTION_18_30(v52, v53, v54, (uint64_t)&unk_268C67DF0, 0),
            v55))
      {
        OUTLINED_FUNCTION_43_14();
        while (1)
        {
          OUTLINED_FUNCTION_45_14();
          uint64_t v55 = OUTLINED_FUNCTION_40_16();
          if (!v55) {
            break;
          }
          uint64_t v63 = *(void *)(v0 + 104);
          if (v63) {
            int v64 = OUTLINED_FUNCTION_17_31(v63);
          }
          else {
            int v64 = OUTLINED_FUNCTION_23_25();
          }
          if (v64 != 1)
          {
            OUTLINED_FUNCTION_57_12();
            if (v65) {
              break;
            }
            goto LABEL_3;
          }
        }
      }
      OUTLINED_FUNCTION_21_28(v55, v56, v57, v58, v59, v60, v61, v62, v71, v77, v83, v89, v95, v101, v107, v113, v119, v125, v131,
        v137,
        v143,
        v149,
        v155,
        v161,
        v167,
        v173,
        v179,
        v185,
        v191,
        v197,
        v203,
        v209,
        v214);
    }
  }
LABEL_3:
  vretproc(v0);
  OUTLINED_FUNCTION_24_24();
  OUTLINED_FUNCTION_76_10();
}

void i_rules()
{
  OUTLINED_FUNCTION_52_14();
  OUTLINED_FUNCTION_6_34();
  uint64_t v51 = *MEMORY[0x263EF8340];
  v46[0] = 0;
  v46[1] = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  bzero(v43, 0xB8uLL);
  OUTLINED_FUNCTION_64_11();
  bzero(v50, v1);
  if (setjmp(v50)
    || ventproc((uint64_t)v0, (uint64_t)v43, (uint64_t)v49, (uint64_t)v48, (uint64_t)v47, (uint64_t)v50))
  {
    goto LABEL_3;
  }
  OUTLINED_FUNCTION_5_34();
  OUTLINED_FUNCTION_30_23((uint64_t)v0, (uint64_t)&v44);
  int v2 = fence_35((uint64_t)v0, 0, (uint64_t)&null_str_12);
  OUTLINED_FUNCTION_47_14((uint64_t)v2, v3, (uint64_t)&unk_268C67DE2);
  uint64_t v4 = lpta_loadp_setscan_l((uint64_t)v0, (uint64_t)v46);
  if (!v4 && !OUTLINED_FUNCTION_2_37(v4, v5, v6, (uint64_t *)&unk_268C67DDF))
  {
    uint64_t v7 = lpta_rpta_loadp((uint64_t)v0, (uint64_t)v46, (uint64_t)&v44);
    if (!OUTLINED_FUNCTION_18_30(v7, v8, v9, (uint64_t)&unk_268C67DD2, 0)) {
      goto LABEL_42;
    }
  }
  uint64_t v10 = 0;
  while (2)
  {
    if (!OUTLINED_FUNCTION_63_11())
    {
      OUTLINED_FUNCTION_19_30();
      uint64_t v11 = OUTLINED_FUNCTION_42_15();
      if (!insert_2pt_s(v11, v12, v13, (uint64_t)&unk_268C67DF1, v14))
      {
LABEL_42:
        OUTLINED_FUNCTION_36_20(v45);
        break;
      }
    }
LABEL_10:
    starttest((uint64_t)v0, 4);
    if (!lpta_loadp_setscan_l((uint64_t)v0, (uint64_t)v46))
    {
      if (OUTLINED_FUNCTION_74_10() || advance_tok()) {
        goto LABEL_35;
      }
      starttest((uint64_t)v0, 5);
      if (OUTLINED_FUNCTION_49_14()
        || (uint64_t v15 = OUTLINED_FUNCTION_22_26(),
            int v18 = test_string_s(v15, v16, v17, (uint64_t *)&unk_268C67DD2),
            uint64_t v19 = v10,
            v18))
      {
LABEL_15:
        if (!OUTLINED_FUNCTION_49_14())
        {
          uint64_t v20 = OUTLINED_FUNCTION_75_10();
          if (!test_string_s(v20, v21, v22, v23))
          {
            OUTLINED_FUNCTION_19_30();
            uint64_t v24 = OUTLINED_FUNCTION_42_15();
            if (!insert_2pt_s(v24, v25, v26, (uint64_t)&unk_268C67DD8, v27)) {
              goto LABEL_42;
            }
          }
        }
LABEL_18:
        starttest((uint64_t)v0, 9);
        if (!OUTLINED_FUNCTION_49_14())
        {
          if (OUTLINED_FUNCTION_74_10() || advance_tok()) {
            goto LABEL_35;
          }
LABEL_28:
          OUTLINED_FUNCTION_19_30();
          uint64_t v32 = OUTLINED_FUNCTION_59_11();
          goto LABEL_29;
        }
LABEL_19:
        if (!OUTLINED_FUNCTION_49_14()
          && !test_string_s((uint64_t)v0, 1u, 2u, (uint64_t *)&unk_268C67E07))
        {
          OUTLINED_FUNCTION_19_30();
          uint64_t v28 = OUTLINED_FUNCTION_42_15();
          if (!insert_2pt_s(v28, v29, v30, (uint64_t)&unk_268C67DD8, v31)) {
            goto LABEL_42;
          }
        }
LABEL_22:
        starttest((uint64_t)v0, 11);
        if (!lpta_loadp_setscan_l((uint64_t)v0, (uint64_t)v46))
        {
          bspush_ca_scan_boa((uint64_t)v0, 12);
          bspush_ca_scan((uint64_t)v0, 13);
          uint64_t v37 = OUTLINED_FUNCTION_22_26();
          uint64_t v40 = (uint64_t *)&unk_268C67DE2;
LABEL_34:
          if (!test_string_s(v37, v38, v39, v40)) {
LABEL_41:
          }
            uint64_t v10 = 1;
          goto LABEL_35;
        }
      }
      else
      {
LABEL_32:
        uint64_t v10 = v19;
        if (test_synch(v0, 6, 1u, (unsigned __int8 *)&_MergedGlobals_32)) {
          goto LABEL_35;
        }
      }
    }
LABEL_23:
    OUTLINED_FUNCTION_19_30();
    uint64_t v32 = OUTLINED_FUNCTION_42_15();
    uint64_t v36 = &unk_268C67DD8;
LABEL_29:
    if (!insert_2pt_s(v32, v33, v34, (uint64_t)v36, v35)) {
      goto LABEL_42;
    }
LABEL_35:
    uint64_t v41 = v0[13];
    if (v41)
    {
      OUTLINED_FUNCTION_17_31(v41);
    }
    else
    {
      vback(v0, v10);
      uint64_t v10 = 0;
    }
    OUTLINED_FUNCTION_56_12();
    switch(v42)
    {
      case 0:
        continue;
      case 1:
      case 6:
        goto LABEL_42;
      case 2:
        goto LABEL_10;
      case 3:
      case 10:
        goto LABEL_23;
      case 4:
        goto LABEL_15;
      case 5:
        uint64_t v19 = v10;
        goto LABEL_32;
      case 7:
        goto LABEL_18;
      case 8:
        goto LABEL_19;
      case 9:
        goto LABEL_22;
      case 11:
        bspop_boa(v0);
        goto LABEL_28;
      case 12:
        uint64_t v37 = OUTLINED_FUNCTION_75_10();
        goto LABEL_34;
      case 13:
        goto LABEL_41;
      default:
        goto LABEL_3;
    }
  }
LABEL_3:
  vretproc((uint64_t)v0);
  OUTLINED_FUNCTION_48_14();
}

uint64_t i_acute_rules()
{
  OUTLINED_FUNCTION_6_34();
  OUTLINED_FUNCTION_1_37(v2, v3, v4, v5, v6, v7, v8, v9, v48, v53, v58, v63, v68, v73, v78, v83, v88, v93, v98,
    v103,
    v108,
    v113,
    v118,
    v123,
    v128,
    v133,
    v138,
    v143,
    v148,
    v153,
    v158,
    v163,
    v168,
    v172,
    v176);
  OUTLINED_FUNCTION_3_36(v10, v11, v12, v13, v14, v15, v16, v17, v49, v54, v59, v64, v69, v74, v79, v84, v89, v94, v99,
    v104,
    v109,
    v114,
    v119,
    v124,
    v129,
    v134,
    v139,
    v144,
    v149,
    v154,
    v159,
    v164,
    v169,
    v173,
    v177,
    v179,
    v181,
    v183,
    v185,
    v187);
  uint64_t v18 = setjmp(v1);
  if (!v18)
  {
    uint64_t v26 = OUTLINED_FUNCTION_0_39(v18, v19, v20, v21, v22, v23, v24, v25, v50, v55, v60, v65, v70, v75, v80, v85, v90, v95, v100,
            v105,
            v110,
            v115,
            v120,
            v125,
            v130,
            v135,
            v140,
            v145,
            v150,
            v155,
            v160,
            v165,
            v170,
            v174,
            v178,
            *(int *)v180,
            v180[4],
            *(int *)v182,
            *(__int16 *)&v182[4],
            v182[6],
            v184,
            SWORD2(v184),
            SBYTE6(v184),
            SHIBYTE(v184),
            v186,
            v188);
    if (!v26)
    {
      OUTLINED_FUNCTION_4_35(v26, v27, v28, v29, v30, v31, v32, v33, v51, v56, v61, v66, v71, v76, v81, v86, v91, v96, v101,
        v106,
        v111,
        v116,
        v121,
        v126,
        v131,
        v136,
        v141,
        v146,
        v151,
        v156,
        v161,
        v166,
        v171,
        v175);
      OUTLINED_FUNCTION_8_34(v35, v36, v37, v38, v39, v40, v41, v42, v52, v57, v62, v67, v72, v77, v82, v87, v92, v97, v102,
        v107,
        v112,
        v117,
        v122,
        v127,
        v132,
        v137,
        v142,
        v147,
        v152,
        v157,
        v162,
        v167);
      OUTLINED_FUNCTION_31_22(v43, v44, (uint64_t)&null_str_12);
      uint64_t v45 = OUTLINED_FUNCTION_19_30();
      if (OUTLINED_FUNCTION_7_34(v45, v46, v47, (uint64_t)&unk_268C67DD8))
      {
        if (*(void *)(v0 + 104)) {
          OUTLINED_FUNCTION_38_17();
        }
        else {
          OUTLINED_FUNCTION_23_25();
        }
      }
    }
  }
  vretproc(v0);
  return OUTLINED_FUNCTION_24_24();
}

uint64_t o_rules()
{
  OUTLINED_FUNCTION_6_34();
  uint64_t v212 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_1_37(v3, v4, v5, v6, v7, v8, v9, v10, v88, v93, v98, v103, v108, v113, v118, v123, v128, v133, v138,
    v143,
    v148,
    v153,
    v158,
    v163,
    v168,
    v173,
    v178,
    v183,
    v188,
    v193,
    v198,
    v203,
    v204,
    v205,
    v206);
  OUTLINED_FUNCTION_3_36(v11, v12, v13, v14, v15, v16, v17, v18, v89, v94, v99, v104, v109, v114, v119, v124, v129, v134, v139,
    v144,
    v149,
    v154,
    v159,
    v164,
    v169,
    v174,
    v179,
    v184,
    v189,
    v194,
    v199,
    v203,
    v204,
    v205,
    v206,
    v207,
    v208,
    v209,
    v210,
    v211);
  uint64_t v19 = setjmp(v2);
  if (v19) {
    goto LABEL_3;
  }
  uint64_t v27 = OUTLINED_FUNCTION_0_39(v19, v20, v21, v22, v23, v24, v25, v26, v90, v95, v100, v105, v110, v115, v120, v125, v130, v135, v140,
          v145,
          v150,
          v155,
          v160,
          v165,
          v170,
          v175,
          v180,
          v185,
          v190,
          v195,
          v200,
          v203,
          v204,
          v205,
          v206,
          v207,
          SBYTE4(v207),
          v208,
          SWORD2(v208),
          SBYTE6(v208),
          v209,
          SWORD2(v209),
          SBYTE6(v209),
          SHIBYTE(v209),
          v210,
          v211);
  if (v27) {
    goto LABEL_3;
  }
  OUTLINED_FUNCTION_4_35(v27, v28, v29, v30, v31, v32, v33, v34, v91, v96, v101, v106, v111, v116, v121, v126, v131, v136, v141,
    v146,
    v151,
    v156,
    v161,
    v166,
    v171,
    v176,
    v181,
    v186,
    v191,
    v196,
    v201,
    v203,
    v204,
    v205);
  OUTLINED_FUNCTION_30_23((uint64_t)v0, (uint64_t)&v203);
  uint64_t v36 = fence_35((uint64_t)v0, 0, (uint64_t)&null_str_12);
  OUTLINED_FUNCTION_47_14((uint64_t)v36, v37, (uint64_t)&unk_268C67DE2);
  starttest((uint64_t)v0, v1);
  if (lpta_loadp_setscan_r((uint64_t)v0, (uint64_t)v2))
  {
LABEL_8:
    uint64_t v50 = OUTLINED_FUNCTION_27_23(3);
    uint64_t v51 = OUTLINED_FUNCTION_16_31(v50, (uint64_t)&v205);
    if (v51)
    {
LABEL_15:
      uint64_t v60 = OUTLINED_FUNCTION_41_15(v51, (uint64_t)&v205);
      if (!v60)
      {
        uint64_t v63 = OUTLINED_FUNCTION_2_37(v60, v61, v62, (uint64_t *)&unk_268C67DDF);
        if (!v63)
        {
          uint64_t v71 = OUTLINED_FUNCTION_11_34(v63, v64, v65, v66, v67, v68, v69, v70, v92, v97, v102, v107, v112, v117, v122, v127, v132, v137, v142,
                  v147,
                  v152,
                  v157,
                  v162,
                  v167,
                  v172,
                  v177,
                  v182,
                  v187,
                  v192,
                  v197,
                  v202,
                  v203,
                  v204,
                  v205);
          uint64_t v51 = OUTLINED_FUNCTION_18_30(v71, v72, v73, (uint64_t)&unk_268C67DD4, 0);
          if (!v51) {
            goto LABEL_25;
          }
        }
      }
LABEL_18:
      lpta_loadpn(v0, &v203);
      rpta_loadpn(v0, v0 + 207);
      if (!compare_ptas((uint64_t)v0))
      {
        BOOL v74 = testeq((uint64_t)v0);
        if (!v74)
        {
          uint64_t v82 = OUTLINED_FUNCTION_11_34(v74, v75, v76, v77, v78, v79, v80, v81, v92, v97, v102, v107, v112, v117, v122, v127, v132, v137, v142,
                  v147,
                  v152,
                  v157,
                  v162,
                  v167,
                  v172,
                  v177,
                  v182,
                  v187,
                  v192,
                  v197,
                  v202,
                  v203,
                  v204,
                  v205);
          uint64_t v51 = OUTLINED_FUNCTION_18_30(v82, v83, v84, (uint64_t)&unk_268C67DDA, 0);
          if (!v51)
          {
LABEL_25:
            OUTLINED_FUNCTION_21_28(v51, v52, v53, v54, v55, v56, v57, v58, v92, v97, v102, v107, v112, v117, v122, v127, v132, v137, v142,
              v147,
              v152,
              v157,
              v162,
              v167,
              v172,
              v177,
              v182,
              v187,
              v192,
              v197,
              v202,
              v203,
              v204);
            goto LABEL_3;
          }
        }
      }
LABEL_21:
      OUTLINED_FUNCTION_27_23(6);
      uint64_t v51 = is_nasalized_vowel(v0, (uint64_t)&v203);
      if (!v51)
      {
        uint64_t v85 = OUTLINED_FUNCTION_11_34(v51, v52, v53, v54, v55, v56, v57, v58, v92, v97, v102, v107, v112, v117, v122, v127, v132, v137, v142,
                v147,
                v152,
                v157,
                v162,
                v167,
                v172,
                v177,
                v182,
                v187,
                v192,
                v197,
                v202,
                v203,
                v204,
                v205);
        uint64_t v51 = OUTLINED_FUNCTION_18_30(v85, v86, v87, (uint64_t)&unk_268C67DF3, 0);
        if (!v51) {
          goto LABEL_25;
        }
      }
    }
    else
    {
      if (OUTLINED_FUNCTION_70_10()) {
        goto LABEL_11;
      }
      uint64_t v51 = advance_tok();
      if (v51) {
        goto LABEL_11;
      }
    }
LABEL_23:
    uint64_t v46 = OUTLINED_FUNCTION_11_34(v51, v52, v53, v54, v55, v56, v57, v58, v92, v97, v102, v107, v112, v117, v122, v127, v132, v137, v142,
            v147,
            v152,
            v157,
            v162,
            v167,
            v172,
            v177,
            v182,
            v187,
            v192,
            v197,
            v202,
            v203,
            v204,
            v205);
    uint64_t v49 = &unk_268C67DDB;
  }
  else
  {
    if (OUTLINED_FUNCTION_79_10()) {
      goto LABEL_11;
    }
    BOOL v38 = advance_tok();
    if (v38) {
      goto LABEL_11;
    }
    uint64_t v46 = OUTLINED_FUNCTION_11_34(v38, v39, v40, v41, v42, v43, v44, v45, v92, v97, v102, v107, v112, v117, v122, v127, v132, v137, v142,
            v147,
            v152,
            v157,
            v162,
            v167,
            v172,
            v177,
            v182,
            v187,
            v192,
            v197,
            v202,
            v203,
            v204,
            v205);
    uint64_t v49 = &unk_268C67DF2;
  }
  uint64_t v51 = OUTLINED_FUNCTION_18_30(v46, v47, v48, (uint64_t)v49, 0);
  if (!v51) {
    goto LABEL_25;
  }
LABEL_11:
  uint64_t v59 = v0[13];
  if (v59) {
    uint64_t v51 = OUTLINED_FUNCTION_17_31(v59);
  }
  else {
    uint64_t v51 = OUTLINED_FUNCTION_23_25();
  }
  switch((int)v51)
  {
    case 1:
      goto LABEL_8;
    case 2:
      goto LABEL_25;
    case 3:
      goto LABEL_15;
    case 4:
      goto LABEL_18;
    case 5:
      goto LABEL_21;
    case 6:
      goto LABEL_23;
    default:
      break;
  }
LABEL_3:
  vretproc((uint64_t)v0);
  return OUTLINED_FUNCTION_24_24();
}

uint64_t o_acute_rules()
{
  OUTLINED_FUNCTION_6_34();
  OUTLINED_FUNCTION_1_37(v2, v3, v4, v5, v6, v7, v8, v9, v48, v53, v58, v63, v68, v73, v78, v83, v88, v93, v98,
    v103,
    v108,
    v113,
    v118,
    v123,
    v128,
    v133,
    v138,
    v143,
    v148,
    v153,
    v158,
    v163,
    v168,
    v172,
    v176);
  OUTLINED_FUNCTION_3_36(v10, v11, v12, v13, v14, v15, v16, v17, v49, v54, v59, v64, v69, v74, v79, v84, v89, v94, v99,
    v104,
    v109,
    v114,
    v119,
    v124,
    v129,
    v134,
    v139,
    v144,
    v149,
    v154,
    v159,
    v164,
    v169,
    v173,
    v177,
    v179,
    v181,
    v183,
    v185,
    v187);
  uint64_t v18 = setjmp(v1);
  if (!v18)
  {
    uint64_t v26 = OUTLINED_FUNCTION_0_39(v18, v19, v20, v21, v22, v23, v24, v25, v50, v55, v60, v65, v70, v75, v80, v85, v90, v95, v100,
            v105,
            v110,
            v115,
            v120,
            v125,
            v130,
            v135,
            v140,
            v145,
            v150,
            v155,
            v160,
            v165,
            v170,
            v174,
            v178,
            *(int *)v180,
            v180[4],
            *(int *)v182,
            *(__int16 *)&v182[4],
            v182[6],
            v184,
            SWORD2(v184),
            SBYTE6(v184),
            SHIBYTE(v184),
            v186,
            v188);
    if (!v26)
    {
      OUTLINED_FUNCTION_4_35(v26, v27, v28, v29, v30, v31, v32, v33, v51, v56, v61, v66, v71, v76, v81, v86, v91, v96, v101,
        v106,
        v111,
        v116,
        v121,
        v126,
        v131,
        v136,
        v141,
        v146,
        v151,
        v156,
        v161,
        v166,
        v171,
        v175);
      OUTLINED_FUNCTION_8_34(v35, v36, v37, v38, v39, v40, v41, v42, v52, v57, v62, v67, v72, v77, v82, v87, v92, v97, v102,
        v107,
        v112,
        v117,
        v122,
        v127,
        v132,
        v137,
        v142,
        v147,
        v152,
        v157,
        v162,
        v167);
      OUTLINED_FUNCTION_31_22(v43, v44, (uint64_t)&null_str_12);
      uint64_t v45 = OUTLINED_FUNCTION_19_30();
      if (OUTLINED_FUNCTION_7_34(v45, v46, v47, (uint64_t)&unk_268C67DF2))
      {
        if (*(void *)(v0 + 104)) {
          OUTLINED_FUNCTION_38_17();
        }
        else {
          OUTLINED_FUNCTION_23_25();
        }
      }
    }
  }
  vretproc(v0);
  return OUTLINED_FUNCTION_24_24();
}

void o_circon_rules()
{
  OUTLINED_FUNCTION_77_10();
  OUTLINED_FUNCTION_6_34();
  OUTLINED_FUNCTION_1_37(v2, v3, v4, v5, v6, v7, v8, v9, v66, v72, v78, v84, v90, v96, v102, v108, v114, v120, v126,
    v132,
    v138,
    v144,
    v150,
    v156,
    v162,
    v168,
    v174,
    v180,
    v186,
    v192,
    v198,
    v204,
    v210,
    v215,
    v220);
  OUTLINED_FUNCTION_3_36(v10, v11, v12, v13, v14, v15, v16, v17, v67, v73, v79, v85, v91, v97, v103, v109, v115, v121, v127,
    v133,
    v139,
    v145,
    v151,
    v157,
    v163,
    v169,
    v175,
    v181,
    v187,
    v193,
    v199,
    v205,
    v211,
    v216,
    v221,
    v223,
    v225,
    v227,
    v229,
    v231);
  uint64_t v18 = setjmp(v1);
  if (!v18)
  {
    uint64_t v26 = OUTLINED_FUNCTION_0_39(v18, v19, v20, v21, v22, v23, v24, v25, v68, v74, v80, v86, v92, v98, v104, v110, v116, v122, v128,
            v134,
            v140,
            v146,
            v152,
            v158,
            v164,
            v170,
            v176,
            v182,
            v188,
            v194,
            v200,
            v206,
            v212,
            v217,
            v222,
            *(int *)v224,
            v224[4],
            *(int *)v226,
            *(__int16 *)&v226[4],
            v226[6],
            v228,
            SWORD2(v228),
            SBYTE6(v228),
            SHIBYTE(v228),
            v230,
            v232);
    if (!v26)
    {
      OUTLINED_FUNCTION_9_34(v26, v27, v28, v29, v30, v31, v32, v33, v69, v75, v81, v87, v93, v99, v105, v111, v117, v123, v129,
        v135,
        v141,
        v147,
        v153,
        v159,
        v165,
        v171,
        v177,
        v183,
        v189,
        v195,
        v201,
        v207,
        v213,
        v218);
      OUTLINED_FUNCTION_12_33(v34, v35, v36, v37, v38, v39, v40, v41, v70, v76, v82, v88, v94, v100, v106, v112, v118, v124, v130,
        v136,
        v142,
        v148,
        v154,
        v160,
        v166,
        v172,
        v178,
        v184,
        v190,
        v196,
        v202,
        v208);
      uint64_t v42 = fence_35(v0, 0, (uint64_t)&null_str_12);
      OUTLINED_FUNCTION_29_23((uint64_t)v42, v43, (uint64_t)&unk_268C67DE2);
      OUTLINED_FUNCTION_39_16();
      uint64_t v44 = OUTLINED_FUNCTION_63_11();
      if (v44
        || (uint64_t v52 = OUTLINED_FUNCTION_11_34(v44, v45, v46, v47, v48, v49, v50, v51, v71, v77, v83, v89, v95, v101, v107, v113, v119, v125, v131,
                    v137,
                    v143,
                    v149,
                    v155,
                    v161,
                    v167,
                    v173,
                    v179,
                    v185,
                    v191,
                    v197,
                    v203,
                    v209,
                    v214,
                    v219),
            uint64_t v55 = OUTLINED_FUNCTION_18_30(v52, v53, v54, (uint64_t)&unk_268C67DF3, 0),
            v55))
      {
        OUTLINED_FUNCTION_43_14();
        while (1)
        {
          OUTLINED_FUNCTION_45_14();
          uint64_t v55 = OUTLINED_FUNCTION_40_16();
          if (!v55) {
            break;
          }
          uint64_t v63 = *(void *)(v0 + 104);
          if (v63) {
            int v64 = OUTLINED_FUNCTION_17_31(v63);
          }
          else {
            int v64 = OUTLINED_FUNCTION_23_25();
          }
          if (v64 != 1)
          {
            OUTLINED_FUNCTION_57_12();
            if (v65) {
              break;
            }
            goto LABEL_3;
          }
        }
      }
      OUTLINED_FUNCTION_21_28(v55, v56, v57, v58, v59, v60, v61, v62, v71, v77, v83, v89, v95, v101, v107, v113, v119, v125, v131,
        v137,
        v143,
        v149,
        v155,
        v161,
        v167,
        v173,
        v179,
        v185,
        v191,
        v197,
        v203,
        v209,
        v214);
    }
  }
LABEL_3:
  vretproc(v0);
  OUTLINED_FUNCTION_24_24();
  OUTLINED_FUNCTION_76_10();
}

uint64_t o_tilda_rules()
{
  OUTLINED_FUNCTION_6_34();
  OUTLINED_FUNCTION_1_37(v2, v3, v4, v5, v6, v7, v8, v9, v48, v53, v58, v63, v68, v73, v78, v83, v88, v93, v98,
    v103,
    v108,
    v113,
    v118,
    v123,
    v128,
    v133,
    v138,
    v143,
    v148,
    v153,
    v158,
    v163,
    v168,
    v172,
    v176);
  OUTLINED_FUNCTION_3_36(v10, v11, v12, v13, v14, v15, v16, v17, v49, v54, v59, v64, v69, v74, v79, v84, v89, v94, v99,
    v104,
    v109,
    v114,
    v119,
    v124,
    v129,
    v134,
    v139,
    v144,
    v149,
    v154,
    v159,
    v164,
    v169,
    v173,
    v177,
    v179,
    v181,
    v183,
    v185,
    v187);
  uint64_t v18 = setjmp(v1);
  if (!v18)
  {
    uint64_t v26 = OUTLINED_FUNCTION_0_39(v18, v19, v20, v21, v22, v23, v24, v25, v50, v55, v60, v65, v70, v75, v80, v85, v90, v95, v100,
            v105,
            v110,
            v115,
            v120,
            v125,
            v130,
            v135,
            v140,
            v145,
            v150,
            v155,
            v160,
            v165,
            v170,
            v174,
            v178,
            *(int *)v180,
            v180[4],
            *(int *)v182,
            *(__int16 *)&v182[4],
            v182[6],
            v184,
            SWORD2(v184),
            SBYTE6(v184),
            SHIBYTE(v184),
            v186,
            v188);
    if (!v26)
    {
      OUTLINED_FUNCTION_4_35(v26, v27, v28, v29, v30, v31, v32, v33, v51, v56, v61, v66, v71, v76, v81, v86, v91, v96, v101,
        v106,
        v111,
        v116,
        v121,
        v126,
        v131,
        v136,
        v141,
        v146,
        v151,
        v156,
        v161,
        v166,
        v171,
        v175);
      OUTLINED_FUNCTION_8_34(v35, v36, v37, v38, v39, v40, v41, v42, v52, v57, v62, v67, v72, v77, v82, v87, v92, v97, v102,
        v107,
        v112,
        v117,
        v122,
        v127,
        v132,
        v137,
        v142,
        v147,
        v152,
        v157,
        v162,
        v167);
      OUTLINED_FUNCTION_31_22(v43, v44, (uint64_t)&null_str_12);
      uint64_t v45 = OUTLINED_FUNCTION_19_30();
      if (OUTLINED_FUNCTION_7_34(v45, v46, v47, (uint64_t)&unk_268C67DF3))
      {
        if (*(void *)(v0 + 104)) {
          OUTLINED_FUNCTION_38_17();
        }
        else {
          OUTLINED_FUNCTION_23_25();
        }
      }
    }
  }
  vretproc(v0);
  return OUTLINED_FUNCTION_24_24();
}

void u_rules()
{
  OUTLINED_FUNCTION_52_14();
  OUTLINED_FUNCTION_6_34();
  uint64_t v45 = *MEMORY[0x263EF8340];
  v40[0] = 0;
  v40[1] = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  bzero(v37, 0xB8uLL);
  OUTLINED_FUNCTION_64_11();
  bzero(v44, v3);
  if (setjmp(v44)) {
    goto LABEL_3;
  }
  uint64_t v4 = ventproc(v0, (uint64_t)v37, (uint64_t)v43, (uint64_t)v42, (uint64_t)v41, (uint64_t)v44);
  if (v4) {
    goto LABEL_3;
  }
  OUTLINED_FUNCTION_10_34(v4, (uint64_t)v40);
  uint64_t v5 = OUTLINED_FUNCTION_55_13();
  get_parm(v5, v6, v1, (__int16)v44);
  int v7 = fence_35(v0, 0, (uint64_t)&null_str_12);
  OUTLINED_FUNCTION_47_14((uint64_t)v7, v8, (uint64_t)&unk_268C67DE2);
  int v9 = (void *)OUTLINED_FUNCTION_55_13();
  if (!is_nasalized_vowel(v9, v10))
  {
    uint64_t v11 = lpta_rpta_loadp(v0, (uint64_t)v40, (uint64_t)&v38);
    if (!OUTLINED_FUNCTION_18_30(v11, v12, v13, (uint64_t)&unk_268C67DF4, 0)) {
      goto LABEL_26;
    }
  }
  int v14 = 0;
  while (2)
  {
    starttest(v0, 3);
    uint64_t v15 = OUTLINED_FUNCTION_55_13();
    if (!lpta_loadp_setscan_l(v15, v16))
    {
      uint64_t v34 = OUTLINED_FUNCTION_62_11();
      if (!testFldeq(v34, v35, v36, 2))
      {
        bspush_ca_scan_boa(v0, 4);
        if (!testFldeq(v0, 4u, 0, 30)) {
          int v14 = 1;
        }
      }
      goto LABEL_12;
    }
LABEL_8:
    starttest(v0, 5);
    if (lpta_loadp_setscan_r(v0, (uint64_t)&v38)
      || (int v17 = test_string_s(v0, v2, v2, (uint64_t *)&unk_268C67DE2), v18 = v14, v17))
    {
LABEL_10:
      OUTLINED_FUNCTION_60_11();
      uint64_t v19 = OUTLINED_FUNCTION_62_11();
      uint64_t v23 = &unk_268C67DDA;
    }
    else
    {
LABEL_24:
      int v14 = v18;
      savescptr(v0, 6, (uint64_t)&v38);
      *(unsigned char *)(v0 + 136) = v2;
      if (OUTLINED_FUNCTION_46_14()) {
        goto LABEL_12;
      }
      OUTLINED_FUNCTION_60_11();
      int v22 = 0;
      uint64_t v19 = v0;
      unsigned __int8 v20 = 4;
      uint64_t v21 = 2;
      uint64_t v23 = &unk_268C67E09;
    }
    if (!insert_2pt_s(v19, v20, v21, (uint64_t)v23, v22))
    {
LABEL_26:
      OUTLINED_FUNCTION_36_20(v39);
      break;
    }
LABEL_12:
    int v24 = v14;
LABEL_13:
    uint64_t v25 = *(void *)(v0 + 104);
    if (v25)
    {
      int v26 = OUTLINED_FUNCTION_17_31(v25);
      int v14 = v27;
    }
    else
    {
      int v26 = vback((void *)v0, v24);
      int v14 = 0;
    }
    switch(v26)
    {
      case 1:
        continue;
      case 2:
        goto LABEL_26;
      case 3:
        goto LABEL_8;
      case 4:
        bspop_boa(v0);
        BOOL v28 = advance_tok();
        int v24 = v14;
        if (!v28)
        {
          OUTLINED_FUNCTION_60_11();
          uint64_t v29 = OUTLINED_FUNCTION_62_11();
          int inserted = insert_2pt_s(v29, v30, v31, (uint64_t)&unk_268C67DD3, v32);
          int v24 = v14;
          if (!inserted) {
            goto LABEL_26;
          }
        }
        goto LABEL_13;
      case 5:
        goto LABEL_10;
      case 6:
        int v18 = v14;
        goto LABEL_24;
      default:
        goto LABEL_3;
    }
  }
LABEL_3:
  vretproc(v0);
  OUTLINED_FUNCTION_48_14();
}

uint64_t u_acute_rules()
{
  OUTLINED_FUNCTION_6_34();
  OUTLINED_FUNCTION_1_37(v2, v3, v4, v5, v6, v7, v8, v9, v48, v53, v58, v63, v68, v73, v78, v83, v88, v93, v98,
    v103,
    v108,
    v113,
    v118,
    v123,
    v128,
    v133,
    v138,
    v143,
    v148,
    v153,
    v158,
    v163,
    v168,
    v172,
    v176);
  OUTLINED_FUNCTION_3_36(v10, v11, v12, v13, v14, v15, v16, v17, v49, v54, v59, v64, v69, v74, v79, v84, v89, v94, v99,
    v104,
    v109,
    v114,
    v119,
    v124,
    v129,
    v134,
    v139,
    v144,
    v149,
    v154,
    v159,
    v164,
    v169,
    v173,
    v177,
    v179,
    v181,
    v183,
    v185,
    v187);
  uint64_t v18 = setjmp(v1);
  if (!v18)
  {
    uint64_t v26 = OUTLINED_FUNCTION_0_39(v18, v19, v20, v21, v22, v23, v24, v25, v50, v55, v60, v65, v70, v75, v80, v85, v90, v95, v100,
            v105,
            v110,
            v115,
            v120,
            v125,
            v130,
            v135,
            v140,
            v145,
            v150,
            v155,
            v160,
            v165,
            v170,
            v174,
            v178,
            *(int *)v180,
            v180[4],
            *(int *)v182,
            *(__int16 *)&v182[4],
            v182[6],
            v184,
            SWORD2(v184),
            SBYTE6(v184),
            SHIBYTE(v184),
            v186,
            v188);
    if (!v26)
    {
      OUTLINED_FUNCTION_4_35(v26, v27, v28, v29, v30, v31, v32, v33, v51, v56, v61, v66, v71, v76, v81, v86, v91, v96, v101,
        v106,
        v111,
        v116,
        v121,
        v126,
        v131,
        v136,
        v141,
        v146,
        v151,
        v156,
        v161,
        v166,
        v171,
        v175);
      OUTLINED_FUNCTION_8_34(v35, v36, v37, v38, v39, v40, v41, v42, v52, v57, v62, v67, v72, v77, v82, v87, v92, v97, v102,
        v107,
        v112,
        v117,
        v122,
        v127,
        v132,
        v137,
        v142,
        v147,
        v152,
        v157,
        v162,
        v167);
      OUTLINED_FUNCTION_31_22(v43, v44, (uint64_t)&null_str_12);
      uint64_t v45 = OUTLINED_FUNCTION_19_30();
      if (OUTLINED_FUNCTION_7_34(v45, v46, v47, (uint64_t)&unk_268C67DDA))
      {
        if (*(void *)(v0 + 104)) {
          OUTLINED_FUNCTION_38_17();
        }
        else {
          OUTLINED_FUNCTION_23_25();
        }
      }
    }
  }
  vretproc(v0);
  return OUTLINED_FUNCTION_24_24();
}

uint64_t is_nasalized_vowel(void *a1, uint64_t a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  bzero(&v30, 0xB8uLL);
  OUTLINED_FUNCTION_64_11();
  bzero(v58, v4);
  if (setjmp(v58)
    || ventproc((uint64_t)a1, (uint64_t)&v30, (uint64_t)v57, (uint64_t)v56, (uint64_t)v55, (uint64_t)v58))
  {
    goto LABEL_3;
  }
  get_parm((uint64_t)a1, (uint64_t)&v53, (__int16 *)a2, -6);
  int v6 = 0;
  OUTLINED_FUNCTION_31_22(v7, v8, (uint64_t)&null_str_12);
  fence_35((uint64_t)a1, 1, (uint64_t)&unk_268C67DE2);
  starttest((uint64_t)a1, 1);
  uint64_t v9 = lpta_loadp_setscan_r((uint64_t)a1, (uint64_t)&v53);
  if (v9 || (int v6 = 0, v12 = 0, OUTLINED_FUNCTION_2_37(v9, v10, v11, (uint64_t *)&unk_268C67DCE)))
  {
LABEL_9:
    int v16 = v6;
    uint64_t v17 = OUTLINED_FUNCTION_27_23(5);
    uint64_t v18 = OUTLINED_FUNCTION_16_31(v17, (uint64_t)&v53);
    if (v18 || OUTLINED_FUNCTION_2_37(v18, v19, v20, (uint64_t *)&unk_268C67DCF))
    {
LABEL_3:
      vretproc((uint64_t)a1);
      return 94;
    }
LABEL_11:
    OUTLINED_FUNCTION_35_21(6, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47,
      v48,
      v49,
      v50,
      v51,
      v52,
      v53);
    OUTLINED_FUNCTION_65_11(7);
    OUTLINED_FUNCTION_20_29(8);
    BOOL v21 = OUTLINED_FUNCTION_28_23();
    int v14 = v16;
    int v15 = v16;
    if (!v21) {
      goto LABEL_14;
    }
  }
  else
  {
LABEL_6:
    OUTLINED_FUNCTION_35_21(2, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47,
      v48,
      v49,
      v50,
      v51,
      v52,
      v53);
    OUTLINED_FUNCTION_65_11(3);
    BOOL v13 = OUTLINED_FUNCTION_28_23();
    int v14 = v12;
    int v15 = v12;
    if (!v13)
    {
LABEL_14:
      int v22 = v14;
      if (advance_tok()) {
        int v15 = v22;
      }
      else {
        int v15 = 1;
      }
    }
  }
  int v12 = v15;
  while (2)
  {
    uint64_t v23 = a1[13];
    if (v23)
    {
      OUTLINED_FUNCTION_17_31(v23);
      int v12 = v24;
    }
    else
    {
      vback(a1, v12);
      int v12 = 0;
    }
    OUTLINED_FUNCTION_68_11();
    if (!v27 & v26) {
      goto LABEL_3;
    }
    uint64_t v28 = v25;
    int v14 = v12;
    switch(v28)
    {
      case 1:
        goto LABEL_6;
      case 2:
      case 6:
        bspop_boa(a1);
        break;
      case 3:
        break;
      case 4:
        goto LABEL_3;
      case 5:
        int v16 = v12;
        goto LABEL_11;
      case 7:
        BOOL v29 = testFldeq((uint64_t)a1, 1u, 0, 16);
        int v14 = v12;
        if (!v29) {
          goto LABEL_14;
        }
        continue;
      case 8:
        goto LABEL_14;
      default:
        int v6 = v12;
        goto LABEL_9;
    }
    break;
  }
  *(void *)(a2 + 8) = v54;
  vretproc((uint64_t)a1);
  return 0;
}

uint64_t OUTLINED_FUNCTION_0_39(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,char a37,int a38,__int16 a39,char a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46)
{
  return ventproc(v46, (uint64_t)&a9, (uint64_t)&a44, (uint64_t)&a40, (uint64_t)&a37, (uint64_t)&a46);
}

void OUTLINED_FUNCTION_1_37(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  a34 = 0;
  a35 = 0;
  a32 = 0;
  a33 = 0;
  bzero(&a9, 0xB8uLL);
}

uint64_t OUTLINED_FUNCTION_2_37(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return test_string_s(v4, 1u, 1u, a4);
}

void OUTLINED_FUNCTION_3_36(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  bzero(&a40, 0xC0uLL);
}

void OUTLINED_FUNCTION_4_35(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  get_parm(v34, (uint64_t)&a34, v35, -6);
}

void OUTLINED_FUNCTION_5_34()
{
  get_parm(v0, v2, v1, -6);
}

uint64_t OUTLINED_FUNCTION_7_34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return insert_2pt_s(v4, 4u, 1, a4, 0);
}

void OUTLINED_FUNCTION_8_34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  get_parm(v32, (uint64_t)&a32, v33, v34);
}

void OUTLINED_FUNCTION_9_34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  get_parm(v34, (uint64_t)&a34, v35, -6);
}

void OUTLINED_FUNCTION_10_34(uint64_t a1, uint64_t a2)
{
  get_parm(v2, a2, v3, -6);
}

uint64_t OUTLINED_FUNCTION_11_34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  return lpta_rpta_loadp(v34, (uint64_t)&a34, (uint64_t)&a32);
}

void OUTLINED_FUNCTION_12_33(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  get_parm(v32, (uint64_t)&a32, v33, v34);
}

uint64_t OUTLINED_FUNCTION_13_33()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_14_33(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  return lpta_loadp_setscan_r(v59, (uint64_t)&a59);
}

void OUTLINED_FUNCTION_15_32()
{
  get_parm(v0, v2, v1, v3);
}

uint64_t OUTLINED_FUNCTION_16_31(uint64_t a1, uint64_t a2)
{
  return lpta_loadp_setscan_r(v2, a2);
}

uint64_t OUTLINED_FUNCTION_17_31@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 104) = 0;
  return a1;
}

uint64_t OUTLINED_FUNCTION_18_30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return insert_2pt_s(v5, 4u, 1, a4, a5);
}

uint64_t OUTLINED_FUNCTION_19_30()
{
  return lpta_rpta_loadp(v0, v2, v1);
}

double OUTLINED_FUNCTION_20_29@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = bspush_ca_scan(v1, a1).n128_u64[0];
  return result;
}

uint64_t OUTLINED_FUNCTION_21_28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t result = 0;
  *(void *)(v33 + 8) = a33;
  return result;
}

uint64_t OUTLINED_FUNCTION_22_26()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_23_25()
{
  return vback(v0, 0);
}

uint64_t OUTLINED_FUNCTION_24_24()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_24()
{
  return lpta_loadp_setscan_r(v0, v1);
}

uint64_t OUTLINED_FUNCTION_26_24()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_27_23@<X0>(uint64_t a1@<X8>)
{
  return starttest(v1, a1);
}

BOOL OUTLINED_FUNCTION_28_23()
{
  return testFldeq(v0, 1u, 4, 1);
}

void *OUTLINED_FUNCTION_29_23(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return fence_35(v3, 1, a3);
}

void OUTLINED_FUNCTION_30_23(uint64_t a1, uint64_t a2)
{
  get_parm(a1, a2, v2, v3);
}

void *OUTLINED_FUNCTION_31_22(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return fence_35(v3, 0, a3);
}

double OUTLINED_FUNCTION_32_22(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  *(void *)&double result = savescptr(v32, 2, (uint64_t)&a32).n128_u64[0];
  return result;
}

uint64_t OUTLINED_FUNCTION_33_22(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38)
{
  return lpta_rpta_loadp(v38, (uint64_t)&a38, (uint64_t)&a36);
}

uint64_t OUTLINED_FUNCTION_34_22()
{
  return lpta_loadp_setscan_r(v0, v1);
}

double OUTLINED_FUNCTION_35_21@<D0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  *(void *)&double result = savescptr(v25, a1, (uint64_t)&a25).n128_u64[0];
  return result;
}

void OUTLINED_FUNCTION_36_20(uint64_t a1@<X8>)
{
  *(void *)(v1 + 8) = a1;
}

uint64_t OUTLINED_FUNCTION_37_19(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  return lpta_rpta_loadp(v36, (uint64_t)&a36, (uint64_t)&a34);
}

void OUTLINED_FUNCTION_38_17()
{
  *(void *)(v0 + 104) = 0;
}

uint64_t OUTLINED_FUNCTION_39_16()
{
  return starttest(v0, v1);
}

uint64_t OUTLINED_FUNCTION_40_16()
{
  return insert_2pt_s(v0, v1, v2, v3, 0);
}

uint64_t OUTLINED_FUNCTION_41_15(uint64_t a1, uint64_t a2)
{
  return lpta_loadp_setscan_l(v2, a2);
}

uint64_t OUTLINED_FUNCTION_42_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_44_14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  return lpta_rpta_loadp(v34, (uint64_t)&a34, v35);
}

uint64_t OUTLINED_FUNCTION_45_14()
{
  return lpta_rpta_loadp(v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_46_14()
{
  *(void *)(v1 + 112) = v0;
  *(void *)(v1 + 128) = 0;
  return test_ptr(v1);
}

void *OUTLINED_FUNCTION_47_14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return fence_35(v3, 1, a3);
}

uint64_t OUTLINED_FUNCTION_49_14()
{
  return lpta_loadp_setscan_r(v0, v1);
}

void OUTLINED_FUNCTION_50_14()
{
  bzero((void *)(v0 - 248), 0xC0uLL);
}

double OUTLINED_FUNCTION_51_14@<D0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  *(void *)&double result = savescptr(v25, a1, (uint64_t)&a25).n128_u64[0];
  return result;
}

uint64_t OUTLINED_FUNCTION_53_14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,char a39,int a40,__int16 a41,char a42,int a43,__int16 a44,char a45,char a46)
{
  return ventproc(v46, (uint64_t)&a9, (uint64_t)&a46, (uint64_t)&a42, (uint64_t)&a39, v47 - 248);
}

uint64_t OUTLINED_FUNCTION_54_13()
{
  return insert_2pt_s(v0, v1, v2, v3, 0);
}

uint64_t OUTLINED_FUNCTION_55_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_58_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return test_string_s(v4, 1u, 2u, a4);
}

uint64_t OUTLINED_FUNCTION_59_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_60_11()
{
  return lpta_rpta_loadp(v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_61_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_62_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_63_11()
{
  return is_nasalized_vowel(v0, v1);
}

double OUTLINED_FUNCTION_65_11@<D0>(uint64_t a1@<X8>)
{
  return bspush_ca_scan_boa(v1, a1);
}

uint64_t OUTLINED_FUNCTION_67_11()
{
  return lpta_rpta_loadp(v0, v0 + 1640, v1);
}

uint64_t OUTLINED_FUNCTION_69_11@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 104) = 0;
  return a1;
}

BOOL OUTLINED_FUNCTION_70_10()
{
  return testFldeq(v0, 1u, 5, 2);
}

uint64_t OUTLINED_FUNCTION_71_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  return push_ptr_init(v32, (uint64_t)&a32);
}

uint64_t OUTLINED_FUNCTION_73_10()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_74_10()
{
  return testFldeq(v0, v2, v1, v2);
}

uint64_t OUTLINED_FUNCTION_75_10()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_79_10()
{
  return testFldeq(v0, 1u, 5, 1);
}

void *fence_36(uint64_t a1, int a2, uint64_t a3)
{
  *(unsigned char *)(*(void *)(a1 + 192) + 8121) = a2;
  double result = memset(*(void **)(a1 + 264), *(unsigned __int8 *)(a1 + 288), *(unsigned __int8 *)(a1 + 288));
  for (uint64_t i = 0; a2 != i; ++i)
  {
    *(unsigned char *)(*(void *)(a1 + 248) + i) = *(unsigned char *)(a3 + i);
    *(unsigned char *)(*(void *)(a1 + 264) + *(unsigned __int8 *)(a3 + i)) = i;
  }
  return result;
}

void por_non_phrasal_comma()
{
  OUTLINED_FUNCTION_8_35();
  uint64_t v2 = v1;
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  OUTLINED_FUNCTION_28_24(v1);
  OUTLINED_FUNCTION_10_35();
  bzero(v30, v3);
  if (!setjmp(v30) && !ventproc(v2, (uint64_t)v24, (uint64_t)v29, (uint64_t)v28, (uint64_t)v27, (uint64_t)v30))
  {
    OUTLINED_FUNCTION_78_11();
    fence_36(v2, 0, (uint64_t)&null_str_13);
    OUTLINED_FUNCTION_1_38(1);
    if (!lpta_loadp_setscan_r(v2, (uint64_t)&v25))
    {
      bspush_ca_scan(v2, 2);
      if (testFldeq(v2, 2u, 1, 1))
      {
        BOOL v4 = 0;
      }
      else
      {
        bspush_ca_scan_boa(v2, 3);
        BOOL v4 = !testFldeq(v2, 2u, 3, 23);
      }
      int v5 = v4;
      while (2)
      {
        uint64_t v6 = *(void *)(v2 + 104);
        if (v6)
        {
          int v7 = OUTLINED_FUNCTION_66_12(v6);
        }
        else
        {
          int v7 = vback((void *)v2, v5);
          int v0 = 0;
        }
        switch(v7)
        {
          case 2:
            bspush_ca_scan(v2, 6);
            uint64_t v8 = OUTLINED_FUNCTION_39_17();
            int v11 = 4;
            goto LABEL_20;
          case 3:
            bspop_boa(v2);
            OUTLINED_FUNCTION_20_30(4);
            uint64_t v12 = OUTLINED_FUNCTION_39_17();
            if (testFldeq(v12, v13, v14, 28)) {
              int v5 = v0;
            }
            else {
              int v5 = 1;
            }
            continue;
          case 4:
            bspop_boa(v2);
            goto LABEL_21;
          case 5:
            goto LABEL_21;
          case 6:
            uint64_t v15 = OUTLINED_FUNCTION_88_9();
            bspush_ca_scan(v15, v16);
            uint64_t v8 = OUTLINED_FUNCTION_39_17();
            int v11 = 5;
            goto LABEL_20;
          case 7:
            uint64_t v8 = OUTLINED_FUNCTION_39_17();
            int v11 = 6;
LABEL_20:
            BOOL v17 = testFldeq(v8, v9, v10, v11);
            int v5 = v0;
            if (v17) {
              continue;
            }
LABEL_21:
            BOOL v18 = advance_tok();
            int v5 = v0;
            if (v18) {
              continue;
            }
LABEL_22:
            uint64_t v19 = (void *)OUTLINED_FUNCTION_79_11();
            int v21 = test_synch(v19, v20, 1u, (unsigned __int8 *)&_MergedGlobals_33);
            int v5 = v0;
            if (v21) {
              continue;
            }
LABEL_23:
            int v22 = chstream((void *)v2, 9, 1u);
            int v5 = v0;
            if (v22) {
              continue;
            }
            int v23 = test_string_s(v2, 1u, 1u, (uint64_t *)&unk_268C67E13);
            int v5 = v0;
            if (v23) {
              continue;
            }
LABEL_25:
            *(unsigned char *)(v2 + 136) = 1;
            *(void *)(v2 + 112) = v26;
            *(void *)(v2 + 128) = 0;
            delete_1pt(v2);
            break;
          case 8:
            goto LABEL_22;
          case 9:
            goto LABEL_23;
          case 10:
            goto LABEL_25;
          default:
            goto LABEL_4;
        }
        break;
      }
    }
  }
LABEL_4:
  vretproc(v2);
  OUTLINED_FUNCTION_5_35();
}

uint64_t por_post_comma_phrase()
{
  OUTLINED_FUNCTION_18_31();
  OUTLINED_FUNCTION_6_35(v2, v3, v4, v5, v6, v7, v8, v9, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60, v63,
    v66,
    v69,
    v72,
    v75,
    v78,
    v81,
    v84,
    v87,
    v90,
    v93,
    v96,
    v99,
    v102,
    v105,
    v108,
    v111);
  OUTLINED_FUNCTION_92_9(v10, v11, v12, v13, v14, v15, v16, v17, v34, v37, v40, v43, v46, v49, v52, v55, v58, v61, v64,
    v67,
    v70,
    v73,
    v76,
    v79,
    v82,
    v85,
    v88,
    v91,
    v94,
    v97,
    v100,
    v103,
    v106,
    v109,
    v112,
    v114,
    v116,
    v118,
    v120,
    v122);
  uint64_t v18 = setjmp(v1);
  if (!v18
    && !OUTLINED_FUNCTION_43_15(v18, v19, v20, v21, v22, v23, v24, v25, v35, v38, v41, v44, v47, v50, v53, v56, v59, v62, v65,
                        v68,
                        v71,
                        v74,
                        v77,
                        v80,
                        v83,
                        v86,
                        v89,
                        v92,
                        v95,
                        v98,
                        v101,
                        v104,
                        v107,
                        v110,
                        v113,
                        *(int *)v115,
                        v115[4],
                        *(int *)v117,
                        *(__int16 *)&v117[4],
                        v117[6],
                        v119,
                        SWORD2(v119),
                        SBYTE6(v119),
                        SHIBYTE(v119),
                        v121,
                        v123))
  {
    OUTLINED_FUNCTION_2_38();
    OUTLINED_FUNCTION_87_9();
    uint64_t v26 = 0;
    OUTLINED_FUNCTION_22_27(v28, v29, (uint64_t)&null_str_13);
    tag_phrase();
    if (!v30) {
      goto LABEL_4;
    }
    OUTLINED_FUNCTION_47_15();
    vocative_phrase();
    if (!v31 || (OUTLINED_FUNCTION_47_15(), said_phrase(), !v32))
    {
      uint64_t v26 = 0;
      goto LABEL_4;
    }
  }
  uint64_t v26 = 94;
LABEL_4:
  vretproc(v0);
  return v26;
}

void tag_phrase()
{
  OUTLINED_FUNCTION_8_35();
  OUTLINED_FUNCTION_18_31();
  uint64_t v32 = *MEMORY[0x263EF8340];
  v27[0] = 0;
  v27[1] = 0;
  v26[0] = 0;
  v26[1] = 0;
  v25[0] = 0;
  v25[1] = 0;
  v24[0] = 0;
  v24[1] = 0;
  OUTLINED_FUNCTION_28_24(v2);
  OUTLINED_FUNCTION_10_35();
  bzero(v31, v3);
  if (setjmp(v31) || ventproc(v0, (uint64_t)v23, (uint64_t)v30, (uint64_t)v29, (uint64_t)v28, (uint64_t)v31)) {
    goto LABEL_3;
  }
  OUTLINED_FUNCTION_2_38();
  OUTLINED_FUNCTION_27_24(v4, (uint64_t)v26);
  push_ptr_init(v0, (uint64_t)v25);
  uint64_t v5 = push_ptr_init(v0, (uint64_t)v24);
  BOOL v6 = 0;
  OUTLINED_FUNCTION_22_27(v5, v7, (uint64_t)&null_str_13);
  uint64_t v8 = OUTLINED_FUNCTION_35_22();
  if (v8) {
    goto LABEL_8;
  }
  uint64_t v8 = advance_tok();
  if (v8 || (*(unsigned char *)(v0 + 136) = 1, uint64_t v8 = OUTLINED_FUNCTION_7_35(), v8))
  {
    BOOL v6 = 0;
LABEL_8:
    if (OUTLINED_FUNCTION_11_35(v8, (uint64_t)v27)) {
      goto LABEL_3;
    }
    if (advance_tok()) {
      goto LABEL_3;
    }
    if (advance_tok()) {
      goto LABEL_3;
    }
    *(unsigned char *)(v0 + 136) = 1;
    if (OUTLINED_FUNCTION_7_35()) {
      goto LABEL_3;
    }
    OUTLINED_FUNCTION_60_12(6);
    OUTLINED_FUNCTION_59_12();
    lpta_rpta_loadp(v0, (uint64_t)v27, (uint64_t)v26);
    BOOL v9 = !setd_lookup((void *)v0, 1u, 46) || v6;
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_60_12(2);
  OUTLINED_FUNCTION_59_12();
  lpta_rpta_loadp(v0, (uint64_t)v27, (uint64_t)v26);
  BOOL v9 = !setd_lookup((void *)v0, 1u, 45);
LABEL_15:
  int v10 = v9;
  while (2)
  {
    uint64_t v11 = *(void *)(v0 + 104);
    if (v11)
    {
      OUTLINED_FUNCTION_32_23(v11);
    }
    else
    {
      vback((void *)v0, v10);
      int v1 = 0;
    }
    OUTLINED_FUNCTION_62_12();
    if (!(!v14 & v13))
    {
      uint64_t v8 = 0;
      switch(v12)
      {
        case 1:
        case 3:
        case 5:
          *(_WORD *)(v0 + 3190) = *(_WORD *)(v0 + 3198);
          adjust_prev_phr_pause();
          goto LABEL_22;
        case 2:
        case 6:
          bspop_boa(v0);
          break;
        case 4:
        case 8:
          break;
        case 7:
LABEL_22:
          uint64_t v15 = OUTLINED_FUNCTION_52_15();
          starttest(v15, v16);
          if (!lpta_loadp_setscan_l(v0, (uint64_t)v27) && !advanc((void *)v0)) {
            goto LABEL_24;
          }
          break;
        case 9:
LABEL_24:
          savescptr(v0, 10, (uint64_t)v24);
          BOOL v17 = advance_tok();
          int v10 = v1;
          if (!v17) {
            goto LABEL_25;
          }
          continue;
        case 10:
LABEL_25:
          uint64_t v18 = OUTLINED_FUNCTION_79_11();
          savescptr(v18, v19, (uint64_t)v25);
          lpta_rpta_loadp(v0, (uint64_t)v25, (uint64_t)v24);
          int v20 = mark_s();
          int v10 = v1;
          if (!v20)
          {
            int v21 = mark_s();
            int v10 = v1;
            if (!v21)
            {
              int v22 = mark_s();
              int v10 = v1;
              if (!v22) {
                goto LABEL_3;
              }
            }
          }
          continue;
        default:
          BOOL v6 = v1;
          goto LABEL_8;
      }
    }
    break;
  }
LABEL_3:
  vretproc(v0);
  OUTLINED_FUNCTION_5_35();
}

void vocative_phrase()
{
  OUTLINED_FUNCTION_8_35();
  OUTLINED_FUNCTION_18_31();
  uint64_t v70 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_30_24(v1, v2, v3, v4, v5, v6, v7, v8, v35, v36, v37, v38[0], v39, v40, v41, v42, v43, v44, v45,
    v46,
    v47,
    v48,
    v49,
    v50,
    v51,
    v52,
    v53,
    v54,
    v55,
    v56,
    v57,
    v58,
    v59,
    v60,
    v61[0],
    v61[1],
    v62[0],
    v62[1],
    v63[0],
    v63[1],
    v64[0],
    v64[1],
    v65[0],
    v65[1]);
  OUTLINED_FUNCTION_10_35();
  bzero(v69, v9);
  if (!setjmp(v69) && !ventproc(v0, (uint64_t)v38, (uint64_t)v68, (uint64_t)v67, (uint64_t)v66, (uint64_t)v69))
  {
    OUTLINED_FUNCTION_2_38();
    OUTLINED_FUNCTION_27_24(v10, (uint64_t)v64);
    push_ptr_init(v0, (uint64_t)v63);
    push_ptr_init(v0, (uint64_t)v62);
    uint64_t v11 = push_ptr_init(v0, (uint64_t)v61);
    int v12 = 0;
    OUTLINED_FUNCTION_22_27(v11, v13, (uint64_t)&null_str_13);
    OUTLINED_FUNCTION_1_38(1);
    uint64_t v14 = OUTLINED_FUNCTION_52_15();
    uint64_t v16 = lpta_loadp_setscan_l(v14, v15);
    int v17 = 0;
    if (v16)
    {
LABEL_5:
      uint64_t v16 = OUTLINED_FUNCTION_11_35(v16, (uint64_t)v65);
      if (v16
        || (uint64_t v16 = advance_tok(), v16)
        || (*(unsigned char *)(v0 + 136) = 1, uint64_t v16 = OUTLINED_FUNCTION_7_35(), v16))
      {
LABEL_38:
        if (OUTLINED_FUNCTION_11_35(v16, (uint64_t)v65)) {
          goto LABEL_3;
        }
        if (advance_tok()) {
          goto LABEL_3;
        }
        if (advance_tok()) {
          goto LABEL_3;
        }
        *(unsigned char *)(v0 + 136) = 1;
        if (OUTLINED_FUNCTION_7_35()) {
          goto LABEL_3;
        }
        OUTLINED_FUNCTION_60_12(12);
        OUTLINED_FUNCTION_59_12();
        lpta_rpta_loadp(v0, (uint64_t)v65, (uint64_t)v64);
        int v18 = 48;
      }
      else
      {
        OUTLINED_FUNCTION_60_12(9);
        OUTLINED_FUNCTION_59_12();
        lpta_rpta_loadp(v0, (uint64_t)v65, (uint64_t)v64);
        int v18 = 47;
      }
      BOOL v19 = setd_lookup((void *)v0, 1u, v18);
    }
    else
    {
LABEL_9:
      savescptr(v0, 2, (uint64_t)v63);
      bspush_ca_scan_boa(v0, 3);
      BOOL v19 = testFldeq(v0, 2u, 3, 37);
      int v17 = v12;
    }
    if (v19) {
      int v23 = v17;
    }
    else {
      int v23 = 1;
    }
    while (2)
    {
      uint64_t v20 = *(void *)(v0 + 104);
      if (v20)
      {
        uint64_t v16 = OUTLINED_FUNCTION_3_37(v20);
        int v12 = v21;
      }
      else
      {
        uint64_t v16 = vback((void *)v0, v23);
        int v12 = 0;
      }
      switch((int)v16)
      {
        case 1:
          int v17 = v12;
          goto LABEL_5;
        case 2:
          goto LABEL_9;
        case 3:
          bspop_boa(v0);
          bspush_ca_scan_boa(v0, 4);
          int v29 = OUTLINED_FUNCTION_86_9();
          goto LABEL_26;
        case 4:
          bspop_boa(v0);
          BOOL v30 = advance_tok();
          int v23 = v12;
          if (v30) {
            continue;
          }
          bspush_ca_scan_boa(v0, 5);
          goto LABEL_25;
        case 5:
          bspop_boa(v0);
          int v31 = lpta_loadp_setscan_r(v0, (uint64_t)v63);
          int v23 = v12;
          if (v31) {
            continue;
          }
          BOOL v32 = OUTLINED_FUNCTION_86_9();
          int v23 = v12;
          if (v32) {
            continue;
          }
          BOOL v33 = advance_tok();
          int v23 = v12;
          if (v33) {
            continue;
          }
          *(unsigned char *)(v0 + 136) = 1;
          int v34 = OUTLINED_FUNCTION_7_35();
          int v23 = v12;
          if (v34) {
            continue;
          }
          goto LABEL_14;
        case 6:
LABEL_25:
          int v29 = test_synch((void *)v0, 6, 1u, (unsigned __int8 *)&_MergedGlobals_33);
LABEL_26:
          if (v29) {
            int v23 = v12;
          }
          else {
            int v23 = 1;
          }
          continue;
        case 7:
        case 9:
        case 12:
LABEL_14:
          *(_WORD *)(v0 + 3190) = *(_WORD *)(v0 + 3202);
          adjust_prev_phr_pause();
          goto LABEL_15;
        case 8:
          int v17 = v12;
          goto LABEL_38;
        case 10:
        case 13:
          bspop_boa(v0);
          goto LABEL_3;
        case 14:
LABEL_15:
          starttest(v0, 15);
          if (!lpta_loadp_setscan_l(v0, (uint64_t)v65) && !advanc((void *)v0)) {
            goto LABEL_17;
          }
          goto LABEL_3;
        case 16:
LABEL_17:
          savescptr(v0, 16, (uint64_t)v61);
          BOOL v22 = advance_tok();
          int v23 = v12;
          if (!v22) {
            goto LABEL_18;
          }
          continue;
        case 17:
LABEL_18:
          uint64_t v24 = OUTLINED_FUNCTION_42_16();
          savescptr(v24, v25, (uint64_t)v62);
          lpta_rpta_loadp(v0, (uint64_t)v62, (uint64_t)v61);
          int v26 = mark_s();
          int v23 = v12;
          if (!v26)
          {
            int v27 = mark_s();
            int v23 = v12;
            if (!v27)
            {
              int v28 = mark_s();
              int v23 = v12;
              if (!v28) {
                goto LABEL_3;
              }
            }
          }
          continue;
        default:
          goto LABEL_3;
      }
    }
  }
LABEL_3:
  vretproc(v0);
  OUTLINED_FUNCTION_5_35();
}

void por_said_phrase()
{
  OUTLINED_FUNCTION_8_35();
  int v4 = v3;
  OUTLINED_FUNCTION_16_32();
  uint64_t v79 = *MEMORY[0x263EF8340];
  v74[0] = 0;
  v74[1] = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  int v71 = 0;
  v70[0] = 0;
  v70[1] = 0;
  v69[0] = 0;
  v69[1] = 0;
  v68[0] = 0;
  v68[1] = 0;
  OUTLINED_FUNCTION_75_11(v5, v6, v7, v8, v9, v10, v11, v12, v36, v37, v38, v39, v40, v41, v42, v43, v44[0], v45, v46,
    v47,
    v48,
    v49,
    v50,
    v51,
    v52,
    v53,
    v54,
    v55,
    v56,
    v57,
    v58,
    v59,
    v60,
    v61,
    v62,
    v63,
    v64,
    v65,
    v66,
    v67[0],
    v67[1]);
  OUTLINED_FUNCTION_10_35();
  bzero(v78, v13);
  if (!setjmp(v78) && !ventproc(v0, (uint64_t)v44, (uint64_t)v77, (uint64_t)v76, (uint64_t)v75, (uint64_t)v78))
  {
    get_parm(v0, (uint64_t)v74, v2, -6);
    uint64_t v14 = OUTLINED_FUNCTION_67_12();
    get_parm(v14, v15, v1, -6);
    OUTLINED_FUNCTION_12_34(v16, (uint64_t)&v71);
    push_ptr_init(v0, (uint64_t)v70);
    push_ptr_init(v0, (uint64_t)v69);
    push_ptr_init(v0, (uint64_t)v68);
    push_ptr_init(v0, (uint64_t)v67);
    int v17 = fence_36(v0, 0, (uint64_t)&null_str_13);
    OUTLINED_FUNCTION_45_15((uint64_t)v17, v18, (uint64_t)&_MergedGlobals_33);
    if (*(unsigned __int16 *)(v0 + 2546) != HIWORD(v71)
      || (uint64_t v19 = OUTLINED_FUNCTION_67_12(), lpta_loadpn(v19, v20), rpta_loadpn(v0, v0 + 1432), compare_ptas(v0))
      || testneq(v0))
    {
      while (2)
      {
        starttest(v0, 3);
        if (lpta_loadp_setscan_r(v0, (uint64_t)v74)) {
          break;
        }
        if (!testFldeq(v0, 2u, 2, 2))
        {
          bspush_ca_scan(v0, 4);
          uint64_t v21 = OUTLINED_FUNCTION_49_15();
          int v24 = 11;
LABEL_10:
          if (!testFldeq(v21, v22, v23, v24))
          {
LABEL_11:
            if (!advance_tok() && !advanc((void *)v0))
            {
LABEL_13:
              savescptr(v0, 7, (uint64_t)v70);
              uint64_t v25 = OUTLINED_FUNCTION_55_14();
              bspush_ca_scan(v25, v26);
              uint64_t v27 = v0;
              int v28 = 2;
              int v29 = 5;
LABEL_14:
              if (!testFldeq(v27, 2u, v28, v29))
              {
LABEL_15:
                if (!advance_tok())
                {
LABEL_16:
                  uint64_t v30 = OUTLINED_FUNCTION_50_15();
                  savescptr(v30, v31, (uint64_t)v69);
                  *(unsigned char *)(v0 + 136) = v4;
                  if (!OUTLINED_FUNCTION_7_35())
                  {
LABEL_17:
                    if (is_quotative_verb())
                    {
LABEL_18:
                      if (*(unsigned __int16 *)(v0 + 2590) != HIWORD(v71) || is_exclam_verb()) {
                        break;
                      }
                    }
LABEL_20:
                    fence_36(v0, 0, (uint64_t)&null_str_13);
                    starttest(v0, 14);
                    if (lpta_loadp_setscan_l(v0, (uint64_t)v74)) {
                      break;
                    }
LABEL_21:
                    savescptr(v0, 15, (uint64_t)v67);
                    if (!advanc((void *)v0) && !testFldeq(v0, 5u, v4, v4) && !advance_tok())
                    {
LABEL_24:
                      savescptr(v0, 16, (uint64_t)v68);
                      uint64_t v32 = OUTLINED_FUNCTION_52_15();
                      lpta_rpta_loadp(v32, v33, (uint64_t)v67);
                      if (!mark_s()) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v34 = *(void *)(v0 + 104);
        if (v34) {
          OUTLINED_FUNCTION_3_37(v34);
        }
        else {
          OUTLINED_FUNCTION_36_21();
        }
        OUTLINED_FUNCTION_31_23();
        switch(v35)
        {
          case 0:
            continue;
          case 1:
            goto LABEL_17;
          case 3:
            bspush_ca_scan(v0, 6);
            uint64_t v21 = OUTLINED_FUNCTION_49_15();
            int v24 = 10;
            goto LABEL_10;
          case 4:
            goto LABEL_11;
          case 5:
            uint64_t v21 = OUTLINED_FUNCTION_49_15();
            int v24 = 12;
            goto LABEL_10;
          case 6:
            goto LABEL_13;
          case 7:
            uint64_t v27 = v0;
            int v28 = v4;
            int v29 = 11;
            goto LABEL_14;
          case 8:
            goto LABEL_15;
          case 9:
            goto LABEL_16;
          case 10:
            goto LABEL_18;
          case 11:
            goto LABEL_20;
          case 14:
            goto LABEL_21;
          case 15:
            goto LABEL_24;
          default:
            goto LABEL_3;
        }
      }
    }
  }
LABEL_3:
  vretproc(v0);
  OUTLINED_FUNCTION_5_35();
}

uint64_t is_quotative_verb()
{
  OUTLINED_FUNCTION_18_31();
  uint64_t v119 = *MEMORY[0x263EF8340];
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  OUTLINED_FUNCTION_6_35(v3, v4, v5, v6, v7, v8, v9, v10, v35, v38, v41, v44, v47, v50, v53, v56, v59, v62, v65,
    v68,
    v71,
    v74,
    v77,
    v80,
    v83,
    v86,
    v89,
    v92,
    v95,
    v98,
    v101,
    v104,
    v105,
    v106,
    v107);
  OUTLINED_FUNCTION_40_17();
  uint64_t v11 = setjmp(v2);
  if (v11
    || OUTLINED_FUNCTION_44_15(v11, v12, v13, v14, v15, v16, v17, v18, v36, v39, v42, v45, v48, v51, v54, v57, v60, v63, v66,
                       v69,
                       v72,
                       v75,
                       v78,
                       v81,
                       v84,
                       v87,
                       v90,
                       v93,
                       v96,
                       v99,
                       v102,
                       v104,
                       v105,
                       v106,
                       v107,
                       v108,
                       v109,
                       v110,
                       v111,
                       v112,
                       v113,
                       v114,
                       v115,
                       v116,
                       v117,
                       v118))
  {
    goto LABEL_3;
  }
  OUTLINED_FUNCTION_2_38();
  OUTLINED_FUNCTION_27_24(v21, (uint64_t)&v106);
  push_ptr_init((uint64_t)v0, (uint64_t)&v104);
  unsigned int v22 = fence_36((uint64_t)v0, 0, (uint64_t)&null_str_13);
  OUTLINED_FUNCTION_45_15((uint64_t)v22, v23, (uint64_t)&unk_268C67E14);
  starttest((uint64_t)v0, v1);
  if (OUTLINED_FUNCTION_35_22())
  {
LABEL_9:
    OUTLINED_FUNCTION_1_38(3);
    if (lpta_loadp_setscan_l((uint64_t)v0, (uint64_t)&v106))
    {
LABEL_3:
      uint64_t v19 = 94;
      goto LABEL_4;
    }
LABEL_10:
    if (!advance_tok())
    {
      OUTLINED_FUNCTION_0_40(4);
LABEL_12:
      OUTLINED_FUNCTION_91_9(v26, v27, v28, v29, v30, v31, v32, v33, v37, v40, v43, v46, v49, v52, v55, v58, v61, v64, v67,
        v70,
        v73,
        v76,
        v79,
        v82,
        v85,
        v88,
        v91,
        v94,
        v97,
        v100,
        v103,
        v104);
      if (!advance_tok() && !advance_tok() && !advance_tok())
      {
        lpta_rpta_loadp((uint64_t)v0, (uint64_t)&v108, (uint64_t)&v104);
        if (!setd_lookup(v0, 1u, 43))
        {
LABEL_8:
          uint64_t v19 = 0;
          goto LABEL_4;
        }
      }
    }
  }
  else
  {
    OUTLINED_FUNCTION_25_25();
    if (!testFldeq((uint64_t)v0, v24, v25, 21) && !advance_tok()) {
      goto LABEL_8;
    }
  }
  uint64_t v34 = v0[13];
  if (v34) {
    uint64_t v26 = OUTLINED_FUNCTION_3_37(v34);
  }
  else {
    uint64_t v26 = OUTLINED_FUNCTION_36_21();
  }
  uint64_t v19 = 0;
  switch((int)v26)
  {
    case 1:
      goto LABEL_9;
    case 2:
      break;
    case 4:
      goto LABEL_10;
    case 5:
      goto LABEL_12;
    default:
      goto LABEL_3;
  }
LABEL_4:
  vretproc((uint64_t)v0);
  return v19;
}

uint64_t is_exclam_verb()
{
  OUTLINED_FUNCTION_18_31();
  uint64_t v119 = *MEMORY[0x263EF8340];
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  OUTLINED_FUNCTION_6_35(v3, v4, v5, v6, v7, v8, v9, v10, v35, v38, v41, v44, v47, v50, v53, v56, v59, v62, v65,
    v68,
    v71,
    v74,
    v77,
    v80,
    v83,
    v86,
    v89,
    v92,
    v95,
    v98,
    v101,
    v104,
    v105,
    v106,
    v107);
  OUTLINED_FUNCTION_40_17();
  uint64_t v11 = setjmp(v2);
  if (v11
    || OUTLINED_FUNCTION_44_15(v11, v12, v13, v14, v15, v16, v17, v18, v36, v39, v42, v45, v48, v51, v54, v57, v60, v63, v66,
                       v69,
                       v72,
                       v75,
                       v78,
                       v81,
                       v84,
                       v87,
                       v90,
                       v93,
                       v96,
                       v99,
                       v102,
                       v104,
                       v105,
                       v106,
                       v107,
                       v108,
                       v109,
                       v110,
                       v111,
                       v112,
                       v113,
                       v114,
                       v115,
                       v116,
                       v117,
                       v118))
  {
    goto LABEL_3;
  }
  OUTLINED_FUNCTION_2_38();
  OUTLINED_FUNCTION_27_24(v21, (uint64_t)&v106);
  push_ptr_init((uint64_t)v0, (uint64_t)&v104);
  unsigned int v22 = fence_36((uint64_t)v0, 0, (uint64_t)&null_str_13);
  OUTLINED_FUNCTION_45_15((uint64_t)v22, v23, (uint64_t)&unk_268C67E14);
  starttest((uint64_t)v0, v1);
  if (OUTLINED_FUNCTION_35_22())
  {
LABEL_9:
    OUTLINED_FUNCTION_1_38(3);
    if (lpta_loadp_setscan_l((uint64_t)v0, (uint64_t)&v106))
    {
LABEL_3:
      uint64_t v19 = 94;
      goto LABEL_4;
    }
LABEL_10:
    if (!advance_tok())
    {
      OUTLINED_FUNCTION_0_40(4);
LABEL_12:
      OUTLINED_FUNCTION_91_9(v26, v27, v28, v29, v30, v31, v32, v33, v37, v40, v43, v46, v49, v52, v55, v58, v61, v64, v67,
        v70,
        v73,
        v76,
        v79,
        v82,
        v85,
        v88,
        v91,
        v94,
        v97,
        v100,
        v103,
        v104);
      if (!advance_tok() && !advance_tok() && !advance_tok())
      {
        lpta_rpta_loadp((uint64_t)v0, (uint64_t)&v108, (uint64_t)&v104);
        if (!setd_lookup(v0, 1u, 44))
        {
LABEL_8:
          uint64_t v19 = 0;
          goto LABEL_4;
        }
      }
    }
  }
  else
  {
    OUTLINED_FUNCTION_25_25();
    if (!testFldeq((uint64_t)v0, v24, v25, 22) && !advance_tok()) {
      goto LABEL_8;
    }
  }
  uint64_t v34 = v0[13];
  if (v34) {
    uint64_t v26 = OUTLINED_FUNCTION_3_37(v34);
  }
  else {
    uint64_t v26 = OUTLINED_FUNCTION_36_21();
  }
  uint64_t v19 = 0;
  switch((int)v26)
  {
    case 1:
      goto LABEL_9;
    case 2:
      break;
    case 4:
      goto LABEL_10;
    case 5:
      goto LABEL_12;
    default:
      goto LABEL_3;
  }
LABEL_4:
  vretproc((uint64_t)v0);
  return v19;
}

uint64_t find_por_obligatory_phrase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  OUTLINED_FUNCTION_16_32();
  uint64_t v102 = *MEMORY[0x263EF8340];
  v97[0] = 0;
  v97[1] = 0;
  v96[0] = 0;
  v96[1] = 0;
  int v95 = 0;
  v94[0] = 0;
  v94[1] = 0;
  OUTLINED_FUNCTION_28_24(v6);
  OUTLINED_FUNCTION_10_35();
  bzero(v101, v7);
  if (setjmp(v101)
    || ventproc(v4, (uint64_t)&v71, (uint64_t)v100, (uint64_t)v99, (uint64_t)v98, (uint64_t)v101))
  {
    goto LABEL_3;
  }
  OUTLINED_FUNCTION_15_33();
  OUTLINED_FUNCTION_37_20(v10, (uint64_t)v96);
  OUTLINED_FUNCTION_12_34(v11, (uint64_t)&v95);
  uint64_t v12 = push_ptr_init(v4, (uint64_t)v94);
  int v13 = 0;
  OUTLINED_FUNCTION_22_27(v12, v14, (uint64_t)&null_str_13);
  OUTLINED_FUNCTION_1_38(1);
  if (!lpta_loadp_setscan_r(v4, (uint64_t)v97))
  {
    if (OUTLINED_FUNCTION_14_34() || advance_tok())
    {
      int v13 = 0;
    }
    else
    {
      OUTLINED_FUNCTION_0_40(2);
      int v15 = 0;
LABEL_10:
      int v13 = v15;
      if (!test_synch((void *)v4, 3, 1u, (unsigned __int8 *)&_MergedGlobals_33))
      {
LABEL_76:
        HIWORD(v95) = 1;
        *(_WORD *)(a4 + 2) = 1;
        uint64_t v8 = 0;
        goto LABEL_4;
      }
    }
LABEL_83:
    int v22 = v13;
    while (2)
    {
      uint64_t v16 = *(void *)(v4 + 104);
      if (v16)
      {
        OUTLINED_FUNCTION_3_37(v16);
        int v18 = v17;
      }
      else
      {
        vback((void *)v4, v22);
        int v18 = 0;
      }
      OUTLINED_FUNCTION_31_23();
      int v15 = v18;
      int v13 = v18;
      int v20 = v18;
      switch(v18)
      {
        case 0:
          int v13 = v18;
          break;
        case 1:
          BOOL v21 = OUTLINED_FUNCTION_33_23();
          int v22 = v18;
          if (!v21)
          {
            BOOL v23 = advance_tok();
            int v15 = v18;
            int v22 = v18;
            if (!v23) {
              goto LABEL_10;
            }
          }
          continue;
        case 2:
          goto LABEL_10;
        case 3:
          goto LABEL_76;
        case 4:
          goto LABEL_56;
        case 5:
          int v13 = v18;
          goto LABEL_66;
        case 6:
          bspush_ca_scan(v4, 9);
          OUTLINED_FUNCTION_20_30(10);
          unsigned int v24 = 2;
          int v25 = 1;
          uint64_t v26 = v4;
          int v27 = 9;
          goto LABEL_48;
        case 7:
          goto LABEL_69;
        case 8:
          OUTLINED_FUNCTION_0_40(12);
          uint64_t v28 = OUTLINED_FUNCTION_69_12();
          goto LABEL_24;
        case 9:
          bspop_boa(v4);
          uint64_t v28 = OUTLINED_FUNCTION_73_11();
          goto LABEL_24;
        case 10:
          goto LABEL_25;
        case 11:
          OUTLINED_FUNCTION_0_40(13);
          uint64_t v28 = OUTLINED_FUNCTION_74_11();
          goto LABEL_24;
        case 12:
          unsigned int v29 = 2;
          int v30 = 3;
          int v31 = 37;
          uint64_t v28 = v4;
LABEL_24:
          BOOL v32 = testFldeq(v28, v29, v30, v31);
          int v22 = v18;
          if (v32) {
            continue;
          }
LABEL_25:
          BOOL v33 = advance_tok();
          int v13 = v18;
          int v22 = v18;
          if (!v33) {
            goto LABEL_69;
          }
          continue;
        case 13:
          bspop_boa(v4);
          goto LABEL_76;
        case 14:
          BOOL v34 = OUTLINED_FUNCTION_13_34();
          int v20 = v18;
          int v22 = v18;
          if (!v34) {
            goto LABEL_74;
          }
          continue;
        case 15:
          goto LABEL_74;
        case 16:
          goto LABEL_57;
        case 17:
          int v13 = v18;
          goto LABEL_78;
        case 18:
          BOOL v35 = OUTLINED_FUNCTION_4_36();
          int v22 = v18;
          if (v35) {
            continue;
          }
          BOOL v37 = OUTLINED_FUNCTION_19_31(v35, 2u, v36, 5);
          int v22 = v18;
          if (v37) {
            continue;
          }
          goto LABEL_33;
        case 19:
          bspop_boa(v4);
LABEL_33:
          BOOL v19 = advance_tok();
          int v22 = v18;
          if (!v19) {
            goto LABEL_34;
          }
          continue;
        case 20:
LABEL_34:
          int v38 = OUTLINED_FUNCTION_21_29(v19, (uint64_t)v94);
          int v22 = v18;
          if (v38) {
            continue;
          }
          BOOL v39 = OUTLINED_FUNCTION_9_35();
          int v22 = v18;
          if (v39) {
            continue;
          }
          OUTLINED_FUNCTION_20_30(22);
          OUTLINED_FUNCTION_25_25();
          int v27 = 5;
          goto LABEL_47;
        case 21:
          bspop_boa(v4);
          BOOL v40 = advance_tok();
          int v22 = v18;
          if (v40) {
            continue;
          }
          OUTLINED_FUNCTION_0_40(23);
          BOOL v43 = OUTLINED_FUNCTION_19_31(v41, 2u, v42, 1);
          int v22 = v18;
          if (v43) {
            continue;
          }
          BOOL v44 = advance_tok();
          int v22 = v18;
          if (v44) {
            continue;
          }
          unsigned int v45 = 2;
          int v46 = 1;
          int v47 = 9;
          uint64_t v48 = v4;
          goto LABEL_43;
        case 22:
          BOOL v49 = OUTLINED_FUNCTION_13_34();
          int v22 = v18;
          if (v49) {
            continue;
          }
          uint64_t v48 = OUTLINED_FUNCTION_73_11();
LABEL_43:
          BOOL v50 = testFldeq(v48, v45, v46, v47);
          int v22 = v18;
          if (!v50)
          {
            BOOL v51 = advance_tok();
            int v22 = v18;
            if (!v51) {
              goto LABEL_45;
            }
          }
          continue;
        case 23:
LABEL_45:
          *(unsigned char *)(v4 + 136) = 1;
          int v52 = OUTLINED_FUNCTION_7_35();
          goto LABEL_52;
        case 25:
          int v13 = v18;
          goto LABEL_58;
        case 26:
          bspop_boa(v4);
          OUTLINED_FUNCTION_20_30(28);
          unsigned int v24 = 2;
          int v25 = 3;
          int v27 = 16;
LABEL_47:
          uint64_t v26 = v4;
LABEL_48:
          if (testFldeq(v26, v24, v25, v27)) {
            int v22 = v18;
          }
          else {
            int v22 = 1;
          }
          continue;
        case 27:
          bspop_boa(v4);
          int v52 = advance_tok();
LABEL_52:
          int v22 = v18;
          if (!v52) {
            goto LABEL_76;
          }
          continue;
        default:
          goto LABEL_3;
      }
      break;
    }
  }
  int v18 = v13;
  uint64_t v53 = OUTLINED_FUNCTION_1_38(5);
  if (!OUTLINED_FUNCTION_21_29(v53, (uint64_t)v97))
  {
LABEL_66:
    OUTLINED_FUNCTION_58_13(6, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87,
      v88,
      v89,
      v90,
      v91,
      v92,
      v93,
      v94[0]);
    if (OUTLINED_FUNCTION_9_35() || advance_tok()) {
      goto LABEL_83;
    }
    OUTLINED_FUNCTION_0_40(7);
LABEL_69:
    OUTLINED_FUNCTION_25_25();
    if (testFldeq(v4, v63, v64, 28)) {
      goto LABEL_83;
    }
    if (advance_tok()) {
      goto LABEL_83;
    }
    *(unsigned char *)(v4 + 136) = 1;
    uint64_t v65 = OUTLINED_FUNCTION_7_35();
    if (v65) {
      goto LABEL_83;
    }
    if (OUTLINED_FUNCTION_11_35(v65, (uint64_t)v94)) {
      goto LABEL_83;
    }
    OUTLINED_FUNCTION_20_30(14);
    OUTLINED_FUNCTION_0_40(15);
    BOOL v66 = OUTLINED_FUNCTION_9_35();
    int v20 = v13;
    if (v66) {
      goto LABEL_83;
    }
LABEL_74:
    int v13 = v20;
    BOOL v67 = advance_tok();
LABEL_81:
    if (!v67) {
      int v13 = 1;
    }
    goto LABEL_83;
  }
LABEL_56:
  uint64_t v54 = OUTLINED_FUNCTION_1_38(17);
  int v13 = v18;
  if (!OUTLINED_FUNCTION_11_35(v54, (uint64_t)v97))
  {
LABEL_78:
    OUTLINED_FUNCTION_58_13(18, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87,
      v88,
      v89,
      v90,
      v91,
      v92,
      v93,
      v94[0]);
    OUTLINED_FUNCTION_0_40(19);
    if (OUTLINED_FUNCTION_19_31(v68, 2u, v69, 1)) {
      goto LABEL_83;
    }
    OUTLINED_FUNCTION_20_30(20);
    int v61 = 1;
    int v62 = 9;
LABEL_80:
    BOOL v67 = testFldeq(v4, 2u, v61, v62);
    goto LABEL_81;
  }
LABEL_57:
  uint64_t v55 = OUTLINED_FUNCTION_1_38(25);
  int v13 = v18;
  if (!OUTLINED_FUNCTION_21_29(v55, (uint64_t)v97))
  {
LABEL_58:
    OUTLINED_FUNCTION_58_13(26, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87,
      v88,
      v89,
      v90,
      v91,
      v92,
      v93,
      v94[0]);
    BOOL v56 = OUTLINED_FUNCTION_4_36();
    if (v56) {
      goto LABEL_83;
    }
    if (OUTLINED_FUNCTION_19_31(v56, 2u, v57, 5)) {
      goto LABEL_83;
    }
    BOOL v58 = advance_tok();
    if (v58) {
      goto LABEL_83;
    }
    if (OUTLINED_FUNCTION_11_35(v58, (uint64_t)v94)) {
      goto LABEL_83;
    }
    BOOL v59 = OUTLINED_FUNCTION_4_36();
    if (v59 || OUTLINED_FUNCTION_19_31(v59, 2u, v60, 5)) {
      goto LABEL_83;
    }
    OUTLINED_FUNCTION_20_30(27);
    int v61 = 3;
    int v62 = 19;
    goto LABEL_80;
  }
LABEL_3:
  uint64_t v8 = 94;
LABEL_4:
  vretproc(v4);
  return v8;
}

uint64_t find_por_potential_phrase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  OUTLINED_FUNCTION_16_32();
  uint64_t v81 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_95_7();
  v69[0] = 0;
  v69[1] = 0;
  v68[0] = 0;
  v68[1] = 0;
  OUTLINED_FUNCTION_30_24(v9, v10, v11, v12, v13, v14, v15, v16, v36, v37, v38, v40, v41, v42, v43, v44, v45, v46, v47,
    v48,
    (uint64_t)v49,
    (uint64_t)v50,
    v51,
    v52,
    v53,
    v54,
    v55,
    v56,
    v57,
    v58,
    v59,
    v60,
    v61,
    v62,
    v63[0],
    v63[1],
    v64[0],
    v64[1],
    v65[0],
    v65[1],
    v66[0],
    v66[1],
    v67[0],
    v67[1]);
  OUTLINED_FUNCTION_10_35();
  bzero(v80, v17);
  if (setjmp(v80)
    || ventproc((uint64_t)v4, (uint64_t)&v40, (uint64_t)v79, (uint64_t)v78, (uint64_t)v77, (uint64_t)v80))
  {
    goto LABEL_3;
  }
  OUTLINED_FUNCTION_15_33();
  OUTLINED_FUNCTION_37_20(v20, (uint64_t)v73);
  OUTLINED_FUNCTION_12_34(v21, (uint64_t)v71);
  push_ptr_init((uint64_t)v4, (uint64_t)v70);
  push_ptr_init((uint64_t)v4, (uint64_t)v69);
  push_ptr_init((uint64_t)v4, (uint64_t)v68);
  push_ptr_init((uint64_t)v4, (uint64_t)v67);
  push_ptr_init((uint64_t)v4, (uint64_t)v66);
  push_ptr_init((uint64_t)v4, (uint64_t)v65);
  push_ptr_init((uint64_t)v4, (uint64_t)v64);
  push_ptr_init((uint64_t)v4, (uint64_t)v63);
  int v22 = fence_36((uint64_t)v4, 0, (uint64_t)&null_str_13);
  OUTLINED_FUNCTION_61_12((uint64_t)v22, v23, (uint64_t)&_MergedGlobals_33);
  starttest((uint64_t)v4, v7);
  if (lpta_loadp_setscan_r((uint64_t)v4, (uint64_t)v75))
  {
    while (2)
    {
      starttest((uint64_t)v4, 2);
      if (!lpta_loadp_setscan_l((uint64_t)v4, (uint64_t)v75) && !advanc(v4))
      {
LABEL_14:
        savescptr((uint64_t)v4, 3, (uint64_t)v67);
        if (advance_tok()) {
          goto LABEL_8;
        }
LABEL_15:
        savescptr((uint64_t)v4, 4, (uint64_t)v68);
        OUTLINED_FUNCTION_0_40(2);
        if (advanc(v4))
        {
LABEL_8:
          uint64_t v24 = v4[13];
          if (v24) {
            int v25 = OUTLINED_FUNCTION_3_37(v24);
          }
          else {
            int v25 = OUTLINED_FUNCTION_36_21();
          }
          switch(v25)
          {
            case 1:
              continue;
            case 2:
              goto LABEL_18;
            case 3:
              goto LABEL_14;
            case 4:
              goto LABEL_15;
            case 5:
              break;
            case 6:
              goto LABEL_17;
            case 7:
              goto LABEL_24;
            case 8:
              goto LABEL_20;
            case 9:
              goto LABEL_21;
            case 10:
              goto LABEL_22;
            case 11:
              goto LABEL_23;
            case 12:
              goto LABEL_25;
            case 13:
              goto LABEL_30;
            case 14:
              goto LABEL_26;
            case 15:
              goto LABEL_27;
            case 16:
              goto LABEL_28;
            case 17:
              goto LABEL_29;
            default:
              goto LABEL_3;
          }
        }
        savescptr((uint64_t)v4, 5, (uint64_t)v69);
        if (advance_tok()) {
          goto LABEL_8;
        }
LABEL_17:
        savescptr((uint64_t)v4, 6, (uint64_t)v70);
      }
      break;
    }
LABEL_18:
    uint64_t v26 = OUTLINED_FUNCTION_1_38(7);
    if (OUTLINED_FUNCTION_11_35(v26, (uint64_t)v73) || advanc(v4))
    {
LABEL_24:
      OUTLINED_FUNCTION_29_24();
      coord_conj();
      if (v27)
      {
LABEL_25:
        subord_conj((uint64_t)v4, (uint64_t)v75, (uint64_t)v73, (uint64_t)v70, (uint64_t)v69, (uint64_t)v68, (uint64_t)v67, (uint64_t)v66, (uint64_t)v65, (uint64_t)v71, v39, v40, v41, v42, v43, v44, v45, v46, v47,
          v48,
          v49,
          v50);
        if (v28)
        {
LABEL_26:
          OUTLINED_FUNCTION_29_24();
          prep_phrase();
          if (v29)
          {
LABEL_27:
            relpro();
            if (v30)
            {
LABEL_28:
              uint64_t v31 = OUTLINED_FUNCTION_94_8();
              if (verb_phrase(v31, v32, v33, v34))
              {
LABEL_29:
                OUTLINED_FUNCTION_94_8();
                noun_phrase();
                if (v35) {
                  goto LABEL_3;
                }
              }
            }
          }
        }
      }
LABEL_30:
      *(void *)(v6 + 8) = v76;
      *(void *)(v5 + 8) = v74;
      *(_WORD *)(a4 + 2) = v72;
      uint64_t v18 = 0;
      goto LABEL_4;
    }
LABEL_20:
    savescptr((uint64_t)v4, 8, (uint64_t)v66);
    if (!advance_tok())
    {
LABEL_21:
      savescptr((uint64_t)v4, 9, (uint64_t)v65);
      OUTLINED_FUNCTION_0_40(7);
      if (!advanc(v4))
      {
LABEL_22:
        savescptr((uint64_t)v4, 10, (uint64_t)v64);
        if (!advance_tok())
        {
LABEL_23:
          savescptr((uint64_t)v4, 11, (uint64_t)v63);
          goto LABEL_24;
        }
      }
    }
    goto LABEL_8;
  }
  if (OUTLINED_FUNCTION_9_35() || advance_tok()) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v18 = 94;
LABEL_4:
  vretproc((uint64_t)v4);
  return v18;
}

void coord_conj()
{
  OUTLINED_FUNCTION_8_35();
  uint64_t v118 = v0;
  uint64_t v121 = v1;
  int v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v169 = *MEMORY[0x263EF8340];
  v164[0] = 0;
  v164[1] = 0;
  uint64_t v162 = 0;
  uint64_t v163 = 0;
  v161[0] = 0;
  v161[1] = 0;
  v160[0] = 0;
  v160[1] = 0;
  OUTLINED_FUNCTION_95_7();
  v14[2] = 0u;
  v14[3] = 0u;
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  bzero(&v124, 0xB8uLL);
  OUTLINED_FUNCTION_10_35();
  bzero(v168, v15);
  if (!setjmp(v168)
    && !ventproc((uint64_t)v13, (uint64_t)&v124, (uint64_t)v167, (uint64_t)v166, (uint64_t)v165, (uint64_t)v168))
  {
    uint64_t v16 = OUTLINED_FUNCTION_42_16();
    get_parm(v16, v17, v11, -6);
    get_parm((uint64_t)v13, (uint64_t)&v162, (__int16 *)v118, -6);
    get_parm((uint64_t)v13, (uint64_t)v161, v9, -6);
    get_parm((uint64_t)v13, (uint64_t)v160, v7, -6);
    get_parm((uint64_t)v13, (uint64_t)v159, v5, -6);
    get_parm((uint64_t)v13, (uint64_t)v157, v3, -6);
    get_parm((uint64_t)v13, (uint64_t)v155, v121, -4);
    uint64_t v18 = push_ptr_init((uint64_t)v13, (uint64_t)v154);
    uint64_t v152 = 0;
    uint64_t v153 = 0;
    int v151 = -65534;
    uint64_t v149 = 0;
    uint64_t v150 = 0;
    LODWORD(v147) = -65534;
    BOOL v19 = 0;
    uint64_t v21 = OUTLINED_FUNCTION_22_27(v18, v20, (uint64_t)&null_str_13);
    OUTLINED_FUNCTION_46_15((uint64_t)v21, v22, (uint64_t)&_MergedGlobals_33);
    OUTLINED_FUNCTION_93_9();
    bspush_ca_boa((uint64_t)v13);
    uint64_t v23 = OUTLINED_FUNCTION_42_16();
    if (!lpta_loadp_setscan_r(v23, v24)) {
      BOOL v19 = !OUTLINED_FUNCTION_14_34() && !advance_tok();
    }
    LODWORD(v25) = v19;
    uint64_t v115 = 7;
    uint64_t v112 = 8;
    uint64_t v109 = 13;
    uint64_t v106 = 16;
    uint64_t v103 = 18;
    uint64_t v100 = 10;
    uint64_t v97 = 11;
    while (2)
    {
      uint64_t v26 = v13[13];
      if (v26)
      {
        OUTLINED_FUNCTION_66_12(v26);
      }
      else
      {
        vback(v13, v25);
        uint64_t v9 = 0;
      }
      OUTLINED_FUNCTION_31_23();
      switch(v34)
      {
        case 0:
          lpta_loadpn(v13, v161);
          rpta_loadpn(v13, v13 + 418);
          if (compare_ptas((uint64_t)v13) || testeq((uint64_t)v13)) {
            goto LABEL_16;
          }
          goto LABEL_58;
        case 1:
          bspop_boa(v13);
          break;
        case 2:
LABEL_16:
          lpta_loadpn(v13, v159);
          rpta_loadpn(v13, v13 + 418);
          if (compare_ptas((uint64_t)v13) || testeq((uint64_t)v13)) {
            goto LABEL_18;
          }
          goto LABEL_58;
        case 3:
        case 21:
          __int16 v81 = v156;
          goto LABEL_64;
        case 4:
LABEL_18:
          starttest((uint64_t)v13, 6);
          if (OUTLINED_FUNCTION_23_26()) {
            goto LABEL_19;
          }
          goto LABEL_29;
        case 5:
LABEL_19:
          OUTLINED_FUNCTION_93_9();
          if (OUTLINED_FUNCTION_23_26()) {
            goto LABEL_20;
          }
          goto LABEL_30;
        case 6:
LABEL_29:
          savescptr((uint64_t)v13, 7, (uint64_t)v154);
          bspush_ca_scan((uint64_t)v13, 8);
          uint64_t v40 = (uint64_t)v13;
          unsigned int v41 = 2;
          int v42 = 1;
          int v43 = 3;
          goto LABEL_41;
        case 7:
          bspush_ca_scan((uint64_t)v13, 10);
          uint64_t v40 = OUTLINED_FUNCTION_38_18();
          int v43 = 6;
          goto LABEL_41;
        case 8:
          goto LABEL_42;
        case 9:
          bspush_ca_scan((uint64_t)v13, 11);
          uint64_t v40 = OUTLINED_FUNCTION_38_18();
          int v43 = 7;
          goto LABEL_41;
        case 10:
          uint64_t v40 = (uint64_t)v13;
          unsigned int v41 = 2;
          int v42 = 1;
          int v43 = 9;
LABEL_41:
          BOOL v56 = testFldeq(v40, v41, v42, v43);
          LODWORD(v25) = v9;
          if (v56) {
            continue;
          }
LABEL_42:
          BOOL v57 = advance_tok();
          LODWORD(v25) = v9;
          if (v57) {
            continue;
          }
          int v58 = OUTLINED_FUNCTION_51_15();
          LODWORD(v25) = v9;
          if (v58) {
            continue;
          }
          uint64_t v49 = (uint64_t)v13;
          int v50 = 2;
          int v51 = 12;
LABEL_45:
          BOOL v59 = testFldeq(v49, 2u, v50, v51);
          LODWORD(v25) = v9;
          if (v59) {
            continue;
          }
          int v60 = advance_tok();
LABEL_52:
          LODWORD(v25) = v9;
          if (!v60) {
            goto LABEL_59;
          }
          continue;
        case 11:
LABEL_20:
          starttest((uint64_t)v13, 14);
          if (lpta_loadp_setscan_r((uint64_t)v13, (uint64_t)v164)) {
            goto LABEL_21;
          }
          BOOL v52 = OUTLINED_FUNCTION_85_9();
          LODWORD(v25) = v9;
          if (v52) {
            continue;
          }
          BOOL v53 = advance_tok();
          LODWORD(v25) = v9;
          if (v53) {
            continue;
          }
          BOOL v54 = advance_tok();
          LODWORD(v25) = v9;
          if (v54) {
            continue;
          }
          uint64_t v55 = 15;
LABEL_49:
          OUTLINED_FUNCTION_0_40(v55);
LABEL_51:
          unsigned int v63 = (void *)OUTLINED_FUNCTION_50_15();
          int v60 = test_synch(v63, v64, 1u, (unsigned __int8 *)&_MergedGlobals_33);
          goto LABEL_52;
        case 12:
LABEL_30:
          uint64_t v44 = OUTLINED_FUNCTION_55_14();
          savescptr(v44, v45, (uint64_t)v154);
          BOOL v46 = OUTLINED_FUNCTION_85_9();
          LODWORD(v25) = v9;
          if (v46) {
            continue;
          }
          BOOL v47 = advance_tok();
          LODWORD(v25) = v9;
          if (v47) {
            continue;
          }
          int v48 = OUTLINED_FUNCTION_51_15();
          LODWORD(v25) = v9;
          if (v48) {
            continue;
          }
          uint64_t v49 = (uint64_t)v13;
          int v50 = 3;
          int v51 = 36;
          goto LABEL_45;
        case 13:
LABEL_21:
          starttest((uint64_t)v13, 18);
          uint64_t v27 = lpta_loadp_setscan_l((uint64_t)v13, (uint64_t)v160);
          if (!v27) {
            goto LABEL_22;
          }
          goto LABEL_54;
        case 14:
          BOOL v61 = advance_tok();
          LODWORD(v25) = v9;
          if (v61) {
            continue;
          }
          uint64_t v55 = 17;
          goto LABEL_49;
        case 15:
          goto LABEL_51;
        case 16:
          BOOL v62 = advance_tok();
          LODWORD(v25) = v9;
          if (v62) {
            continue;
          }
          goto LABEL_51;
        case 17:
          goto LABEL_54;
        case 18:
LABEL_22:
          savescptr((uint64_t)v13, 19, (uint64_t)v154);
          int v35 = savetok((uint64_t)v13, (unsigned __int16 *)&v151);
          LODWORD(v25) = v9;
          if (v35) {
            continue;
          }
          BOOL v36 = advance_tok();
          LODWORD(v25) = v9;
          if (v36) {
            continue;
          }
          int v37 = OUTLINED_FUNCTION_51_15();
          LODWORD(v25) = v9;
          if (v37) {
            continue;
          }
          BOOL v38 = advance_tok();
          LODWORD(v25) = v9;
          if (v38) {
            continue;
          }
          BOOL v39 = advance_tok();
          LODWORD(v25) = v9;
          if (v39) {
            continue;
          }
          uint64_t v27 = savetok((uint64_t)v13, (unsigned __int16 *)&v147);
          uint64_t v25 = (uint64_t)v9;
          if (v27) {
            continue;
          }
LABEL_54:
          OUTLINED_FUNCTION_64_12(v27, v25, v28, v29, v30, v31, v32, v33, 11, 10, 18, 16, 13, 8, 7, v118, (uint64_t)v121, v124, v125,
            v126,
            v127,
            v128,
            v129,
            v130,
            v131,
            v132,
            v133,
            v134,
            v135,
            v136,
            v137,
            v138,
            v139,
            v140,
            v141,
            v142,
            v143,
            v144,
            v145,
            v146,
            v147,
            v148,
            v149,
            v150,
            v151,
            SHIWORD(v151));
          ncompare_s((uint64_t)v13, 0xCu);
          uint64_t v27 = testeq((uint64_t)v13);
          if (v27
            || (OUTLINED_FUNCTION_63_12(v27, v25, v28, v29, v30, v31, v32, v33, v97, v100, v103, v106, v109, v112, v115, v118, (uint64_t)v121, v124, v125,
                  v126,
                  v127,
                  v128,
                  v129,
                  v130,
                  v131,
                  v132,
                  v133,
                  v134,
                  v135,
                  v136,
                  v137,
                  v138,
                  v139,
                  v140,
                  v141,
                  v142,
                  v143,
                  v144,
                  v145,
                  v146,
                  v147,
                  SWORD1(v147)),
                ncompare_s((uint64_t)v13, 0xCu),
                uint64_t v27 = testeq((uint64_t)v13),
                v27))
          {
LABEL_56:
            uint64_t v65 = OUTLINED_FUNCTION_64_12(v27, v25, v28, v29, v30, v31, v32, v33, v97, v100, v103, v106, v109, v112, v115, v118, (uint64_t)v121, v124, v125,
                    v126,
                    v127,
                    v128,
                    v129,
                    v130,
                    v131,
                    v132,
                    v133,
                    v134,
                    v135,
                    v136,
                    v137,
                    v138,
                    v139,
                    v140,
                    v141,
                    v142,
                    v143,
                    v144,
                    v145,
                    v146,
                    v147,
                    v148,
                    v149,
                    v150,
                    v151,
                    SHIWORD(v151));
            OUTLINED_FUNCTION_63_12(v65, v66, v67, v68, v69, v70, v71, v72, v98, v101, v104, v107, v110, v113, v116, v119, v122, v124, v125,
              v126,
              v127,
              v128,
              v129,
              v130,
              v131,
              v132,
              v133,
              v134,
              v135,
              v136,
              v137,
              v138,
              v139,
              v140,
              v141,
              v142,
              v143,
              v144,
              v145,
              v146,
              v147,
              SWORD1(v147));
            if (if_testeq((uint64_t)v13, v73, v74, v75, v76, v77, v78, v79))
            {
LABEL_57:
              conjoined_NPs();
              if (v80)
              {
LABEL_58:
                __int16 v81 = 2;
                __int16 v156 = 2;
                goto LABEL_64;
              }
LABEL_59:
              __int16 v81 = 0;
              __int16 v156 = 0;
LABEL_64:
              *(void *)(v118 + 8) = v163;
              v121[1] = v81;
              vretproc((uint64_t)v13);
              goto LABEL_4;
            }
          }
          else
          {
            uint64_t v82 = OUTLINED_FUNCTION_64_12(v27, v25, v28, v29, v30, v31, v32, v33, v97, v100, v103, v106, v109, v112, v115, v118, (uint64_t)v121, v124, v125,
                    v126,
                    v127,
                    v128,
                    v129,
                    v130,
                    v131,
                    v132,
                    v133,
                    v134,
                    v135,
                    v136,
                    v137,
                    v138,
                    v139,
                    v140,
                    v141,
                    v142,
                    v143,
                    v144,
                    v145,
                    v146,
                    v147,
                    v148,
                    v149,
                    v150,
                    v151,
                    SHIWORD(v151));
            OUTLINED_FUNCTION_63_12(v82, v83, v84, v85, v86, v87, v88, v89, v99, v102, v105, v108, v111, v114, v117, v120, v123, v124, v125,
              v126,
              v127,
              v128,
              v129,
              v130,
              v131,
              v132,
              v133,
              v134,
              v135,
              v136,
              v137,
              v138,
              v139,
              v140,
              v141,
              v142,
              v143,
              v144,
              v145,
              v146,
              v147,
              SWORD1(v147));
            if (if_testeq((uint64_t)v13, v90, v91, v92, v93, v94, v95, v96)) {
              goto LABEL_58;
            }
          }
          __int16 v81 = 0;
          __int16 v156 = 0;
          uint64_t v163 = v158;
          goto LABEL_64;
        case 19:
          goto LABEL_56;
        case 20:
        case 23:
          goto LABEL_58;
        case 22:
          goto LABEL_57;
        default:
          goto LABEL_3;
      }
      break;
    }
  }
LABEL_3:
  vretproc((uint64_t)v13);
LABEL_4:
  OUTLINED_FUNCTION_5_35();
}

void subord_conj(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int16 *a21,__int16 *a22)
{
  OUTLINED_FUNCTION_8_35();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  int v37 = v36;
  uint64_t v147 = *MEMORY[0x263EF8340];
  uint64_t v141 = 0;
  uint64_t v142 = 0;
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  v138[0] = 0;
  v138[1] = 0;
  v137[0] = 0;
  v137[1] = 0;
  OUTLINED_FUNCTION_34_23();
  int v133 = 0;
  OUTLINED_FUNCTION_75_11(v38, v39, v40, v41, v42, v43, v44, v45, v101, v102, v103, v104, v105, v106, v107, v108, v109[0], v110, v111,
    v112,
    v113,
    v114,
    v115,
    v116,
    v117,
    v118,
    v119,
    v120,
    v121,
    v122,
    v123,
    v124,
    v125,
    v126,
    v127,
    v128,
    v129,
    v130,
    v131,
    v132[0],
    v132[1]);
  OUTLINED_FUNCTION_10_35();
  bzero(v146, v46);
  if (!setjmp(v146)
    && !ventproc((uint64_t)v37, (uint64_t)v109, (uint64_t)v145, (uint64_t)v144, (uint64_t)v143, (uint64_t)v146))
  {
    get_parm((uint64_t)v37, (uint64_t)&v141, (__int16 *)v35, -6);
    get_parm((uint64_t)v37, (uint64_t)&v139, (__int16 *)v33, -6);
    get_parm((uint64_t)v37, (uint64_t)v138, v31, -6);
    get_parm((uint64_t)v37, (uint64_t)v137, v29, -6);
    uint64_t v47 = OUTLINED_FUNCTION_67_12();
    get_parm(v47, v48, v27, -6);
    get_parm((uint64_t)v37, (uint64_t)v136, v25, -6);
    get_parm((uint64_t)v37, (uint64_t)v135, v23, -6);
    get_parm((uint64_t)v37, (uint64_t)v134, a21, -6);
    get_parm((uint64_t)v37, (uint64_t)&v133, a22, -4);
    uint64_t v49 = push_ptr_init((uint64_t)v37, (uint64_t)v132);
    BOOL v50 = 0;
    BOOL v52 = OUTLINED_FUNCTION_22_27(v49, v51, (uint64_t)&null_str_13);
    OUTLINED_FUNCTION_46_15((uint64_t)v52, v53, (uint64_t)&_MergedGlobals_33);
    OUTLINED_FUNCTION_93_9();
    bspush_ca_boa((uint64_t)v37);
    if (!lpta_loadp_setscan_r((uint64_t)v37, (uint64_t)&v141)) {
      BOOL v50 = !testFldeq((uint64_t)v37, 2u, 1, 6) && !advance_tok();
    }
    int v54 = v50;
    while (2)
    {
      uint64_t v55 = v37[13];
      if (v55)
      {
        OUTLINED_FUNCTION_3_37(v55);
        int v57 = v56;
      }
      else
      {
        vback(v37, v54);
        int v57 = 0;
      }
      OUTLINED_FUNCTION_31_23();
      switch(v58)
      {
        case 0:
          uint64_t v59 = OUTLINED_FUNCTION_55_14();
          starttest(v59, v60);
          if (!lpta_loadp_setscan_l((uint64_t)v37, (uint64_t)&v141)) {
            goto LABEL_19;
          }
          goto LABEL_14;
        case 1:
          bspop_boa(v37);
          break;
        case 2:
LABEL_14:
          starttest((uint64_t)v37, 10);
          if (!lpta_loadp_setscan_l((uint64_t)v37, (uint64_t)&v141)) {
            goto LABEL_15;
          }
          goto LABEL_42;
        case 3:
LABEL_19:
          savescptr((uint64_t)v37, 4, (uint64_t)v132);
          uint64_t v71 = OUTLINED_FUNCTION_52_15();
          bspush_ca_scan(v71, v72);
          uint64_t v73 = OUTLINED_FUNCTION_80_11();
          goto LABEL_23;
        case 4:
          bspush_ca_scan((uint64_t)v37, 7);
          uint64_t v73 = OUTLINED_FUNCTION_83_10();
          goto LABEL_23;
        case 5:
          goto LABEL_24;
        case 6:
          bspush_ca_scan((uint64_t)v37, 8);
          uint64_t v73 = OUTLINED_FUNCTION_26_25();
          int v76 = 7;
          goto LABEL_23;
        case 7:
          uint64_t v73 = (uint64_t)v37;
          unsigned int v74 = 2;
          int v75 = 1;
          int v76 = 9;
LABEL_23:
          BOOL v77 = testFldeq(v73, v74, v75, v76);
          int v54 = v57;
          if (v77) {
            continue;
          }
LABEL_24:
          BOOL v78 = advance_tok();
          int v54 = v57;
          if (v78) {
            continue;
          }
          int v79 = OUTLINED_FUNCTION_54_14();
          int v54 = v57;
          if (v79) {
            continue;
          }
          BOOL v80 = OUTLINED_FUNCTION_82_10();
          int v54 = v57;
          if (v80) {
            continue;
          }
          BOOL v81 = advance_tok();
          int v54 = v57;
          if (v81) {
            continue;
          }
LABEL_46:
          __int16 v100 = 0;
          HIWORD(v133) = 0;
LABEL_47:
          *(void *)(v35 + 8) = v142;
          *(void *)(v33 + 8) = v140;
          a22[1] = v100;
          break;
        case 8:
          __int16 v100 = HIWORD(v133);
          goto LABEL_47;
        case 9:
LABEL_42:
          __int16 v100 = 2;
          HIWORD(v133) = 2;
          goto LABEL_47;
        case 10:
LABEL_15:
          savescptr((uint64_t)v37, 11, (uint64_t)v132);
          BOOL v61 = OUTLINED_FUNCTION_81_10();
          int v54 = v57;
          if (v61) {
            continue;
          }
          BOOL v62 = advance_tok();
          int v54 = v57;
          if (v62) {
            continue;
          }
          uint64_t v63 = OUTLINED_FUNCTION_26_25();
          BOOL v66 = testFldeq(v63, v64, v65, 1);
          int v54 = v57;
          if (v66) {
            continue;
          }
          OUTLINED_FUNCTION_0_40(12);
          uint64_t v67 = OUTLINED_FUNCTION_48_15();
          int v70 = 2;
LABEL_30:
          BOOL v82 = testFldeq(v67, v68, v69, v70);
          int v54 = v57;
          if (!v82)
          {
LABEL_31:
            BOOL v83 = advance_tok();
            int v54 = v57;
            if (!v83)
            {
              int v84 = OUTLINED_FUNCTION_54_14();
              int v54 = v57;
              if (!v84)
              {
                BOOL v85 = OUTLINED_FUNCTION_82_10();
                int v54 = v57;
                if (!v85)
                {
                  BOOL v86 = advance_tok();
                  int v54 = v57;
                  if (!v86)
                  {
                    uint64_t v87 = OUTLINED_FUNCTION_80_11();
                    BOOL v91 = testFldeq(v87, v88, v89, v90);
                    int v54 = v57;
                    if (!v91)
                    {
                      uint64_t v92 = OUTLINED_FUNCTION_26_25();
                      BOOL v95 = testFldeq(v92, v93, v94, 5);
                      int v54 = v57;
                      if (!v95)
                      {
                        BOOL v96 = advance_tok();
                        int v54 = v57;
                        if (!v96)
                        {
                          uint64_t v97 = OUTLINED_FUNCTION_50_15();
                          bspush_ca_scan_boa(v97, v98);
                          BOOL v99 = OUTLINED_FUNCTION_81_10();
                          int v54 = v57;
                          if (!v99)
                          {
                            if (advance_tok()) {
                              int v54 = v57;
                            }
                            else {
                              int v54 = 1;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue;
        case 11:
          uint64_t v67 = OUTLINED_FUNCTION_48_15();
          int v70 = 29;
          goto LABEL_30;
        case 12:
          goto LABEL_31;
        case 13:
          bspop_boa(v37);
          goto LABEL_46;
        default:
          goto LABEL_3;
      }
      break;
    }
  }
LABEL_3:
  vretproc((uint64_t)v37);
  OUTLINED_FUNCTION_5_35();
}

void prep_phrase()
{
  OUTLINED_FUNCTION_8_35();
  uint64_t v44 = v4;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  OUTLINED_FUNCTION_16_32();
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  v51[0] = 0;
  v51[1] = 0;
  v50[0] = 0;
  v50[1] = 0;
  v49[0] = 0;
  v49[1] = 0;
  v48[0] = 0;
  v48[1] = 0;
  int v47 = 0;
  v46[0] = 0;
  v46[1] = 0;
  bzero(v45, 0xB8uLL);
  OUTLINED_FUNCTION_10_35();
  bzero(v59, v13);
  if (setjmp(v59)
    || ventproc((uint64_t)v0, (uint64_t)v45, (uint64_t)v58, (uint64_t)v57, (uint64_t)v56, (uint64_t)v59))
  {
LABEL_3:
    vretproc((uint64_t)v0);
  }
  else
  {
    uint64_t v14 = OUTLINED_FUNCTION_79_11();
    get_parm(v14, v15, (__int16 *)v3, -6);
    get_parm((uint64_t)v0, (uint64_t)&v52, (__int16 *)v2, -6);
    get_parm((uint64_t)v0, (uint64_t)v51, v12, -6);
    get_parm((uint64_t)v0, (uint64_t)v50, v10, -6);
    get_parm((uint64_t)v0, (uint64_t)v49, v8, -6);
    get_parm((uint64_t)v0, (uint64_t)v48, v6, -6);
    get_parm((uint64_t)v0, (uint64_t)&v47, v44, -4);
    uint64_t v16 = push_ptr_init((uint64_t)v0, (uint64_t)v46);
    BOOL v17 = 0;
    BOOL v19 = OUTLINED_FUNCTION_22_27(v16, v18, (uint64_t)&null_str_13);
    OUTLINED_FUNCTION_61_12((uint64_t)v19, v20, (uint64_t)&_MergedGlobals_33);
    starttest((uint64_t)v0, (uint64_t)v8);
    bspush_ca_boa((uint64_t)v0);
    uint64_t v21 = OUTLINED_FUNCTION_79_11();
    if (!lpta_loadp_setscan_r(v21, v22)) {
      BOOL v17 = !OUTLINED_FUNCTION_13_34() && !advance_tok();
    }
    int v23 = v17;
    while (2)
    {
      uint64_t v24 = v0[13];
      if (v24)
      {
        OUTLINED_FUNCTION_65_12(v24);
      }
      else
      {
        vback(v0, v23);
        int v1 = 0;
      }
      OUTLINED_FUNCTION_31_23();
      switch(v25)
      {
        case 0:
          starttest((uint64_t)v0, 3);
          if (!lpta_loadp_setscan_l((uint64_t)v0, (uint64_t)&v52)) {
            goto LABEL_15;
          }
          goto LABEL_24;
        case 1:
          bspop_boa(v0);
          goto LABEL_3;
        case 2:
LABEL_24:
          __int16 v43 = 0;
          HIWORD(v47) = 0;
          goto LABEL_27;
        case 3:
LABEL_15:
          savescptr((uint64_t)v0, 4, (uint64_t)v46);
          uint64_t v26 = OUTLINED_FUNCTION_48_15();
          BOOL v29 = testFldeq(v26, v27, v28, 30);
          int v23 = v1;
          if (v29) {
            continue;
          }
          BOOL v30 = advance_tok();
          int v23 = v1;
          if (v30) {
            continue;
          }
          int v31 = OUTLINED_FUNCTION_54_14();
          int v23 = v1;
          if (v31) {
            continue;
          }
          bspush_ca_scan((uint64_t)v0, 5);
LABEL_21:
          uint64_t v37 = OUTLINED_FUNCTION_83_10();
          BOOL v41 = testFldeq(v37, v38, v39, v40);
          int v23 = v1;
          if (v41) {
            continue;
          }
          BOOL v42 = advance_tok();
          int v23 = v1;
          if (v42) {
            continue;
          }
LABEL_23:
          savescptr((uint64_t)v0, 7, (uint64_t)&v52);
          __int16 v43 = 3;
          HIWORD(v47) = 3;
LABEL_27:
          *(void *)(v3 + 8) = v55;
          *(void *)(v2 + 8) = v53;
          v44[1] = v43;
          vretproc((uint64_t)v0);
          break;
        case 4:
          uint64_t v32 = OUTLINED_FUNCTION_26_25();
          BOOL v35 = testFldeq(v32, v33, v34, 2);
          int v23 = v1;
          if (v35) {
            continue;
          }
          BOOL v36 = advance_tok();
          int v23 = v1;
          if (v36) {
            continue;
          }
          goto LABEL_21;
        case 5:
          goto LABEL_21;
        case 6:
          goto LABEL_23;
        case 7:
          __int16 v43 = HIWORD(v47);
          goto LABEL_27;
        default:
          goto LABEL_3;
      }
      break;
    }
  }
  OUTLINED_FUNCTION_5_35();
}

void relpro()
{
  OUTLINED_FUNCTION_8_35();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  OUTLINED_FUNCTION_16_32();
  uint64_t v83 = *MEMORY[0x263EF8340];
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  v74[0] = 0;
  v74[1] = 0;
  v73[0] = 0;
  v73[1] = 0;
  int v72 = 0;
  bzero(v71, 0xB8uLL);
  OUTLINED_FUNCTION_10_35();
  bzero(v82, v9);
  if (!setjmp(v82)
    && !ventproc((uint64_t)v0, (uint64_t)v71, (uint64_t)v81, (uint64_t)v80, (uint64_t)v79, (uint64_t)v82))
  {
    get_parm((uint64_t)v0, (uint64_t)&v77, (__int16 *)v2, -6);
    get_parm((uint64_t)v0, (uint64_t)&v75, (__int16 *)v1, -6);
    get_parm((uint64_t)v0, (uint64_t)v74, v8, -6);
    get_parm((uint64_t)v0, (uint64_t)v73, v6, -6);
    OUTLINED_FUNCTION_12_34(v10, (uint64_t)&v72);
    BOOL v11 = 0;
    uint64_t v14 = OUTLINED_FUNCTION_22_27(v12, v13, (uint64_t)&null_str_13);
    OUTLINED_FUNCTION_61_12((uint64_t)v14, v15, (uint64_t)&_MergedGlobals_33);
    starttest((uint64_t)v0, (uint64_t)v8);
    bspush_ca_boa((uint64_t)v0);
    if (!lpta_loadp_setscan_r((uint64_t)v0, (uint64_t)&v77)) {
      BOOL v11 = !OUTLINED_FUNCTION_33_23() && !advance_tok();
    }
    int v16 = v11;
    uint64_t v70 = v4;
    while (2)
    {
      uint64_t v17 = v0[13];
      if (v17)
      {
        OUTLINED_FUNCTION_65_12(v17);
      }
      else
      {
        vback(v0, v16);
        LODWORD(v4) = 0;
      }
      OUTLINED_FUNCTION_31_23();
      uint64_t v18 = 6;
      switch(v19)
      {
        case 0:
          uint64_t v20 = OUTLINED_FUNCTION_50_15();
          starttest(v20, v21);
          if (OUTLINED_FUNCTION_23_26()) {
            goto LABEL_14;
          }
          uint64_t v63 = OUTLINED_FUNCTION_56_13();
          BOOL v66 = testFldeq(v63, v64, v65, 2);
          int v16 = v4;
          if (!v66)
          {
            BOOL v67 = advance_tok();
            int v16 = v4;
            if (!v67)
            {
              bspush_ca_scan_boa((uint64_t)v0, 4);
              if (OUTLINED_FUNCTION_84_10()) {
                int v16 = v4;
              }
              else {
                int v16 = 1;
              }
            }
          }
          continue;
        case 1:
          bspop_boa(v0);
          goto LABEL_3;
        case 2:
LABEL_14:
          starttest((uint64_t)v0, 5);
          if (OUTLINED_FUNCTION_23_26()) {
            goto LABEL_15;
          }
          BOOL v56 = testFldeq((uint64_t)v0, 2u, 3, 6);
          int v16 = v4;
          if (v56) {
            continue;
          }
          BOOL v57 = advance_tok();
          int v16 = v4;
          if (v57) {
            continue;
          }
          bspush_ca_scan((uint64_t)v0, 6);
          uint64_t v58 = OUTLINED_FUNCTION_56_13();
          BOOL v61 = testFldeq(v58, v59, v60, 8);
          int v16 = v4;
          if (v61) {
            continue;
          }
          BOOL v62 = advance_tok();
          int v16 = v4;
          if (v62) {
            continue;
          }
          uint64_t v18 = 6;
          goto LABEL_43;
        case 3:
          bspop_boa(v0);
          uint64_t v24 = OUTLINED_FUNCTION_38_18();
          BOOL v27 = testFldeq(v24, v25, v26, 1);
          int v16 = v4;
          if (v27) {
            continue;
          }
          BOOL v28 = advance_tok();
          int v16 = v4;
          if (v28) {
            continue;
          }
          __int16 v69 = HIWORD(v72);
          goto LABEL_45;
        case 4:
LABEL_15:
          OUTLINED_FUNCTION_1_38(8);
          if (OUTLINED_FUNCTION_23_26()) {
            goto LABEL_16;
          }
          uint64_t v29 = OUTLINED_FUNCTION_38_18();
          BOOL v32 = testFldeq(v29, v30, v31, 2);
          int v16 = v4;
          if (!v32)
          {
            int v33 = npush_fld((uint64_t)v0, 2u, 5);
            int v16 = v4;
            if (!v33)
            {
              uint64_t v34 = OUTLINED_FUNCTION_55_14();
              npush_v(v34, v35, v36, v37, v38, v39, v40, v41);
              BOOL v49 = if_testeq((uint64_t)v0, v42, v43, v44, v45, v46, v47, v48);
              int v16 = v4;
              if (!v49)
              {
                BOOL v50 = advance_tok();
                int v16 = v4;
                if (!v50)
                {
                  OUTLINED_FUNCTION_0_40(9);
                  uint64_t v51 = OUTLINED_FUNCTION_56_13();
                  BOOL v54 = testFldeq(v51, v52, v53, 9);
                  int v16 = v4;
                  if (!v54)
                  {
                    BOOL v55 = advance_tok();
                    int v16 = v4;
                    if (!v55) {
                      goto LABEL_41;
                    }
                  }
                }
              }
            }
          }
          continue;
        case 5:
          goto LABEL_43;
        case 6:
          goto LABEL_44;
        case 7:
LABEL_16:
          starttest((uint64_t)v0, 7);
          if (OUTLINED_FUNCTION_23_26()) {
            goto LABEL_44;
          }
          BOOL v22 = OUTLINED_FUNCTION_84_10();
          int v16 = v4;
          if (!v22)
          {
            BOOL v23 = advance_tok();
            int v16 = v4;
            if (!v23) {
              goto LABEL_40;
            }
          }
          continue;
        case 8:
LABEL_41:
          uint64_t v68 = 9;
          goto LABEL_42;
        case 9:
LABEL_40:
          uint64_t v68 = 10;
LABEL_42:
          uint64_t v18 = v68;
LABEL_43:
          savescptr((uint64_t)v0, v18, (uint64_t)&v77);
LABEL_44:
          __int16 v69 = 3;
          HIWORD(v72) = 3;
LABEL_45:
          *(void *)(v2 + 8) = v78;
          *(void *)(v1 + 8) = v76;
          *(_WORD *)(v70 + 2) = v69;
          break;
        default:
          goto LABEL_3;
      }
      break;
    }
  }
LABEL_3:
  vretproc((uint64_t)v0);
  OUTLINED_FUNCTION_5_35();
}

uint64_t verb_phrase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  OUTLINED_FUNCTION_16_32();
  uint64_t v171 = *MEMORY[0x263EF8340];
  uint64_t v165 = 0;
  uint64_t v166 = 0;
  uint64_t v163 = 0;
  uint64_t v164 = 0;
  HIDWORD(v162) = 0;
  OUTLINED_FUNCTION_28_24(v8);
  OUTLINED_FUNCTION_10_35();
  bzero(v170, v9);
  if (setjmp(v170)
    || ventproc((uint64_t)v4, (uint64_t)&v139, (uint64_t)v169, (uint64_t)v168, (uint64_t)v167, (uint64_t)v170))
  {
LABEL_3:
    vretproc((uint64_t)v4);
    return 94;
  }
  OUTLINED_FUNCTION_15_33();
  OUTLINED_FUNCTION_37_20(v11, (uint64_t)&v163);
  OUTLINED_FUNCTION_12_34(v12, (uint64_t)&v162 + 4);
  OUTLINED_FUNCTION_22_27(v13, v14, (uint64_t)&null_str_13);
  fence_36((uint64_t)v4, 1, (uint64_t)&_MergedGlobals_33);
  starttest((uint64_t)v4, 1);
  bspush_ca_boa((uint64_t)v4);
  int v15 = 0;
  if (!lpta_loadp_setscan_r((uint64_t)v4, (uint64_t)&v165))
  {
    OUTLINED_FUNCTION_0_40(3);
    BOOL v16 = testFldeq((uint64_t)v4, 2u, 1, 4);
    int v15 = 0;
    int v18 = 0;
    if (!v16)
    {
LABEL_6:
      int v15 = v18;
      if (!OUTLINED_FUNCTION_19_31(v16, 2u, v17, 5) && !advance_tok()) {
        int v15 = 1;
      }
    }
  }
  int v19 = v15;
  while (2)
  {
    uint64_t v20 = v4[13];
    if (v20)
    {
      OUTLINED_FUNCTION_3_37(v20);
      int v22 = v21;
    }
    else
    {
      vback(v4, v19);
      int v22 = 0;
    }
    OUTLINED_FUNCTION_31_23();
    int v18 = v22;
    switch(v22)
    {
      case 0:
        uint64_t v23 = OUTLINED_FUNCTION_1_38(5);
        if (OUTLINED_FUNCTION_11_35(v23, (uint64_t)&v163)) {
          goto LABEL_39;
        }
        OUTLINED_FUNCTION_0_40(6);
        goto LABEL_33;
      case 1:
        bspop_boa(v4);
        goto LABEL_3;
      case 2:
        BOOL v16 = OUTLINED_FUNCTION_4_36();
        int v18 = v22;
        int v19 = v22;
        if (!v16) {
          goto LABEL_6;
        }
        continue;
      case 3:
        goto LABEL_6;
      case 4:
        goto LABEL_39;
      case 5:
        OUTLINED_FUNCTION_0_40(8);
        goto LABEL_28;
      case 6:
        goto LABEL_33;
      case 7:
        OUTLINED_FUNCTION_0_40(10);
        goto LABEL_20;
      case 8:
        goto LABEL_28;
      case 9:
        BOOL v26 = OUTLINED_FUNCTION_4_36();
        int v19 = v22;
        if (v26) {
          continue;
        }
        BOOL v27 = advance_tok();
        int v19 = v22;
        if (v27) {
          continue;
        }
        goto LABEL_20;
      case 10:
LABEL_20:
        BOOL v24 = OUTLINED_FUNCTION_4_36();
        int v19 = v22;
        if (v24) {
          continue;
        }
        OUTLINED_FUNCTION_0_40(12);
        int v25 = 6;
LABEL_26:
        BOOL v28 = OUTLINED_FUNCTION_19_31(v16, 2u, v17, v25);
        int v19 = v22;
        if (v28) {
          continue;
        }
LABEL_27:
        BOOL v29 = advance_tok();
        int v19 = v22;
        if (v29) {
          continue;
        }
LABEL_28:
        BOOL v30 = OUTLINED_FUNCTION_4_36();
        int v19 = v22;
        if (v30) {
          continue;
        }
        OUTLINED_FUNCTION_0_40(14);
        int v31 = 6;
LABEL_31:
        BOOL v32 = OUTLINED_FUNCTION_19_31(v16, 2u, v17, v31);
        int v19 = v22;
        if (v32) {
          continue;
        }
LABEL_32:
        BOOL v33 = advance_tok();
        int v19 = v22;
        if (v33) {
          continue;
        }
LABEL_33:
        OUTLINED_FUNCTION_0_40(16);
        BOOL v34 = OUTLINED_FUNCTION_68_12();
        int v19 = v22;
        if (v34) {
          continue;
        }
        BOOL v35 = advance_tok();
        int v19 = v22;
        if (v35) {
          continue;
        }
LABEL_35:
        OUTLINED_FUNCTION_0_40(17);
        BOOL v36 = OUTLINED_FUNCTION_72_11();
        int v19 = v22;
        if (v36) {
          continue;
        }
        uint64_t v37 = 18;
        goto LABEL_53;
      case 11:
        int v25 = 7;
        goto LABEL_26;
      case 12:
        goto LABEL_27;
      case 13:
        int v31 = 7;
        goto LABEL_31;
      case 14:
        goto LABEL_32;
      case 15:
        goto LABEL_35;
      case 16:
        goto LABEL_38;
      case 17:
        bspop_boa(v4);
        BOOL v38 = advance_tok();
        int v19 = v22;
        if (v38) {
          continue;
        }
LABEL_38:
        savescptr((uint64_t)v4, 17, (uint64_t)&v163);
LABEL_39:
        uint64_t v39 = OUTLINED_FUNCTION_1_38(19);
        if (OUTLINED_FUNCTION_17_32(v39, v40, v41, v42, v43, v44, v45, v46, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148,
                             v149,
                             v150,
                             v151,
                             v152,
                             v153,
                             v154,
                             v155,
                             v156,
                             v157,
                             v158,
                             v159,
                             v160,
                             v161,
                             v162,
                             v163,
                             v164,
                             v165))
          goto LABEL_43;
        BOOL v47 = OUTLINED_FUNCTION_68_12();
        int v19 = v22;
        if (v47) {
          continue;
        }
        BOOL v48 = advance_tok();
        int v19 = v22;
        if (v48) {
          continue;
        }
LABEL_42:
        OUTLINED_FUNCTION_41_16(20, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, v155,
          v156,
          v157,
          v158,
          v159,
          v160,
          v161,
          v162,
          v163,
          v164,
          v165);
LABEL_43:
        uint64_t v49 = OUTLINED_FUNCTION_1_38(21);
        if (OUTLINED_FUNCTION_17_32(v49, v50, v51, v52, v53, v54, v55, v56, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148,
                             v149,
                             v150,
                             v151,
                             v152,
                             v153,
                             v154,
                             v155,
                             v156,
                             v157,
                             v158,
                             v159,
                             v160,
                             v161,
                             v162,
                             v163,
                             v164,
                             v165))
          goto LABEL_47;
        BOOL v57 = testFldeq((uint64_t)v4, 2u, 1, 8);
        int v19 = v22;
        if (v57) {
          continue;
        }
        BOOL v58 = advance_tok();
        int v19 = v22;
        if (v58) {
          continue;
        }
LABEL_46:
        OUTLINED_FUNCTION_41_16(22, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, v155,
          v156,
          v157,
          v158,
          v159,
          v160,
          v161,
          v162,
          v163,
          v164,
          v165);
LABEL_47:
        uint64_t v59 = OUTLINED_FUNCTION_1_38(23);
        if (!OUTLINED_FUNCTION_17_32(v59, v60, v61, v62, v63, v64, v65, v66, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148,
                              v149,
                              v150,
                              v151,
                              v152,
                              v153,
                              v154,
                              v155,
                              v156,
                              v157,
                              v158,
                              v159,
                              v160,
                              v161,
                              v162,
                              v163,
                              v164,
                              v165))
        {
          BOOL v80 = OUTLINED_FUNCTION_72_11();
          int v19 = v22;
          if (!v80)
          {
            uint64_t v37 = 24;
LABEL_53:
            OUTLINED_FUNCTION_20_30(v37);
            OUTLINED_FUNCTION_25_25();
            int v79 = 23;
LABEL_58:
            uint64_t v76 = (uint64_t)v4;
LABEL_59:
            if (testFldeq(v76, v77, v78, v79)) {
              int v19 = v22;
            }
            else {
              int v19 = 1;
            }
          }
          continue;
        }
LABEL_48:
        uint64_t v67 = OUTLINED_FUNCTION_1_38(29);
        if (!OUTLINED_FUNCTION_17_32(v67, v68, v69, v70, v71, v72, v73, v74, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148,
                              v149,
                              v150,
                              v151,
                              v152,
                              v153,
                              v154,
                              v155,
                              v156,
                              v157,
                              v158,
                              v159,
                              v160,
                              v161,
                              v162,
                              v163,
                              v164,
                              v165))
        {
          BOOL v75 = OUTLINED_FUNCTION_14_34();
          int v19 = v22;
          if (!v75)
          {
            OUTLINED_FUNCTION_20_30(30);
            uint64_t v76 = OUTLINED_FUNCTION_70_11();
            goto LABEL_59;
          }
          continue;
        }
LABEL_66:
        uint64_t v84 = OUTLINED_FUNCTION_1_38(32);
        if (OUTLINED_FUNCTION_17_32(v84, v85, v86, v87, v88, v89, v90, v91, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148,
                             v149,
                             v150,
                             v151,
                             v152,
                             v153,
                             v154,
                             v155,
                             v156,
                             v157,
                             v158,
                             v159,
                             v160,
                             v161,
                             v162,
                             v163,
                             v164,
                             v165))
        {
LABEL_67:
          uint64_t v92 = OUTLINED_FUNCTION_1_38(35);
          if (OUTLINED_FUNCTION_17_32(v92, v93, v94, v95, v96, v97, v98, v99, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148,
                               v149,
                               v150,
                               v151,
                               v152,
                               v153,
                               v154,
                               v155,
                               v156,
                               v157,
                               v158,
                               v159,
                               v160,
                               v161,
                               v162,
                               v163,
                               v164,
                               v165))
          {
LABEL_68:
            uint64_t v100 = OUTLINED_FUNCTION_1_38(37);
            if (!OUTLINED_FUNCTION_11_35(v100, (uint64_t)&v165))
            {
              unsigned int v117 = 2;
              int v118 = 3;
              int v119 = 10;
              goto LABEL_75;
            }
LABEL_69:
            uint64_t v101 = OUTLINED_FUNCTION_1_38(38);
            if (OUTLINED_FUNCTION_17_32(v101, v102, v103, v104, v105, v106, v107, v108, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148,
                                 v149,
                                 v150,
                                 v151,
                                 v152,
                                 v153,
                                 v154,
                                 v155,
                                 v156,
                                 v157,
                                 v158,
                                 v159,
                                 v160,
                                 v161,
                                 v162,
                                 v163,
                                 v164,
                                 v165))
            {
LABEL_70:
              uint64_t v109 = OUTLINED_FUNCTION_1_38(47);
              if (OUTLINED_FUNCTION_11_35(v109, (uint64_t)&v165))
              {
LABEL_102:
                __int16 v137 = 3;
                HIWORD(v162) = 3;
                goto LABEL_104;
              }
              OUTLINED_FUNCTION_0_40(48);
              unsigned int v110 = 2;
              int v111 = 3;
              int v112 = 19;
              goto LABEL_98;
            }
            BOOL v122 = OUTLINED_FUNCTION_9_35();
            int v19 = v22;
            if (!v122)
            {
              BOOL v123 = advance_tok();
              int v19 = v22;
              if (!v123)
              {
                OUTLINED_FUNCTION_0_40(39);
LABEL_91:
                OUTLINED_FUNCTION_0_40(45);
LABEL_92:
                BOOL v132 = OUTLINED_FUNCTION_33_23();
                int v19 = v22;
                if (!v132)
                {
                  unsigned int v110 = 2;
                  int v111 = 3;
                  int v112 = 33;
LABEL_98:
                  uint64_t v121 = (uint64_t)v4;
                  goto LABEL_99;
                }
              }
            }
          }
          else
          {
            OUTLINED_FUNCTION_25_25();
            int v119 = 11;
LABEL_75:
            BOOL v120 = testFldeq((uint64_t)v4, v117, v118, v119);
            int v19 = v22;
            if (!v120)
            {
              uint64_t v121 = OUTLINED_FUNCTION_74_11();
LABEL_99:
              BOOL v135 = testFldeq(v121, v110, v111, v112);
              int v19 = v22;
              if (!v135)
              {
LABEL_100:
                BOOL v136 = advance_tok();
                int v19 = v22;
                if (!v136)
                {
                  __int16 v137 = 0;
                  HIWORD(v162) = 0;
                  goto LABEL_104;
                }
              }
            }
          }
          continue;
        }
        OUTLINED_FUNCTION_0_40(33);
        unsigned int v113 = 2;
        int v114 = 1;
        int v115 = 10;
        uint64_t v116 = (uint64_t)v4;
LABEL_81:
        BOOL v124 = testFldeq(v116, v113, v114, v115);
        int v19 = v22;
        if (v124) {
          continue;
        }
LABEL_82:
        BOOL v125 = advance_tok();
        int v19 = v22;
        if (v125) {
          continue;
        }
LABEL_103:
        __int16 v137 = HIWORD(v162);
LABEL_104:
        *(void *)(v6 + 8) = v166;
        *(void *)(v5 + 8) = v164;
        *(_WORD *)(a4 + 2) = v137;
        vretproc((uint64_t)v4);
        return 0;
      case 18:
        goto LABEL_43;
      case 19:
        goto LABEL_42;
      case 20:
        goto LABEL_47;
      case 21:
        goto LABEL_46;
      case 22:
        goto LABEL_48;
      case 23:
        bspop_boa(v4);
        OUTLINED_FUNCTION_20_30(25);
        OUTLINED_FUNCTION_25_25();
        int v79 = 24;
        goto LABEL_58;
      case 24:
        bspop_boa(v4);
        OUTLINED_FUNCTION_20_30(26);
        OUTLINED_FUNCTION_25_25();
        int v79 = 25;
        goto LABEL_58;
      case 25:
        bspop_boa(v4);
        BOOL v81 = advance_tok();
        int v19 = v22;
        if (v81) {
          continue;
        }
        goto LABEL_57;
      case 26:
LABEL_57:
        OUTLINED_FUNCTION_41_16(27, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, v155,
          v156,
          v157,
          v158,
          v159,
          v160,
          v161,
          v162,
          v163,
          v164,
          v165);
        OUTLINED_FUNCTION_20_30(28);
        unsigned int v77 = 2;
        int v78 = 1;
        int v79 = 9;
        goto LABEL_58;
      case 27:
        bspop_boa(v4);
        BOOL v82 = advance_tok();
        int v19 = v22;
        if (v82) {
          continue;
        }
        goto LABEL_48;
      case 28:
        goto LABEL_66;
      case 29:
        bspop_boa(v4);
        BOOL v83 = advance_tok();
        int v19 = v22;
        if (v83) {
          continue;
        }
        goto LABEL_65;
      case 30:
LABEL_65:
        OUTLINED_FUNCTION_41_16(31, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, v155,
          v156,
          v157,
          v158,
          v159,
          v160,
          v161,
          v162,
          v163,
          v164,
          v165);
        goto LABEL_66;
      case 31:
        goto LABEL_67;
      case 32:
        uint64_t v116 = OUTLINED_FUNCTION_70_11();
        goto LABEL_81;
      case 33:
        goto LABEL_82;
      case 34:
        goto LABEL_68;
      case 35:
        goto LABEL_103;
      case 36:
        goto LABEL_69;
      case 37:
        goto LABEL_70;
      case 38:
        OUTLINED_FUNCTION_0_40(41);
        uint64_t v126 = OUTLINED_FUNCTION_69_12();
        goto LABEL_89;
      case 39:
        goto LABEL_91;
      case 40:
        OUTLINED_FUNCTION_0_40(43);
        unsigned int v127 = 2;
        int v128 = 3;
        int v129 = 37;
        goto LABEL_87;
      case 41:
        goto LABEL_90;
      case 42:
        OUTLINED_FUNCTION_0_40(44);
        OUTLINED_FUNCTION_25_25();
        int v129 = 4;
LABEL_87:
        uint64_t v126 = (uint64_t)v4;
        goto LABEL_89;
      case 43:
        int v128 = 1;
        unsigned int v127 = 2;
        uint64_t v126 = (uint64_t)v4;
        int v129 = 2;
LABEL_89:
        BOOL v130 = testFldeq(v126, v127, v128, v129);
        int v19 = v22;
        if (v130) {
          continue;
        }
LABEL_90:
        BOOL v131 = advance_tok();
        int v19 = v22;
        if (!v131) {
          goto LABEL_91;
        }
        continue;
      case 44:
        BOOL v133 = OUTLINED_FUNCTION_19_31(v16, 2u, v17, 1);
        int v19 = v22;
        if (v133) {
          continue;
        }
        BOOL v134 = advance_tok();
        int v19 = v22;
        if (v134) {
          continue;
        }
        goto LABEL_92;
      case 45:
        goto LABEL_92;
      case 46:
        goto LABEL_102;
      case 47:
        unsigned int v110 = 2;
        int v111 = 3;
        int v112 = 16;
        goto LABEL_98;
      case 48:
        goto LABEL_100;
      default:
        goto LABEL_3;
    }
  }
}

void noun_phrase()
{
  OUTLINED_FUNCTION_8_35();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_16_32();
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v25 = 0;
  bzero(v24, 0xB8uLL);
  OUTLINED_FUNCTION_10_35();
  bzero(v33, v6);
  if (!setjmp(v33)
    && !ventproc((uint64_t)v0, (uint64_t)v24, (uint64_t)v32, (uint64_t)v31, (uint64_t)v30, (uint64_t)v33))
  {
    OUTLINED_FUNCTION_15_33();
    OUTLINED_FUNCTION_37_20(v7, (uint64_t)&v26);
    OUTLINED_FUNCTION_12_34(v8, (uint64_t)&v25);
    BOOL v9 = 0;
    OUTLINED_FUNCTION_22_27(v10, v11, (uint64_t)&null_str_13);
    fence_36((uint64_t)v0, 1, (uint64_t)&_MergedGlobals_33);
    starttest((uint64_t)v0, 1);
    bspush_ca_boa((uint64_t)v0);
    uint64_t v12 = lpta_loadp_setscan_r((uint64_t)v0, (uint64_t)&v28);
    if (!v12) {
      BOOL v9 = !OUTLINED_FUNCTION_19_31(v12, 2u, v13, 1) && !advance_tok();
    }
    int v14 = v9;
    while (2)
    {
      uint64_t v15 = v0[13];
      if (v15)
      {
        OUTLINED_FUNCTION_32_23(v15);
      }
      else
      {
        vback(v0, v14);
        int v3 = 0;
      }
      OUTLINED_FUNCTION_31_23();
      switch(v16)
      {
        case 0:
          starttest((uint64_t)v0, 3);
          if (lpta_loadp_setscan_l((uint64_t)v0, (uint64_t)&v28)) {
            goto LABEL_22;
          }
          BOOL v17 = testFldeq((uint64_t)v0, 2u, 1, 2);
          int v14 = v3;
          if (v17) {
            continue;
          }
          bspush_ca_scan_boa((uint64_t)v0, 4);
          uint64_t v18 = (uint64_t)v0;
          unsigned int v19 = 2;
          int v20 = 3;
          int v21 = 5;
          goto LABEL_17;
        case 1:
          bspop_boa(v0);
          goto LABEL_3;
        case 2:
LABEL_22:
          __int16 v23 = 0;
          HIWORD(v25) = 0;
          goto LABEL_25;
        case 3:
          bspop_boa(v0);
          bspush_ca_scan_boa((uint64_t)v0, 5);
          uint64_t v18 = OUTLINED_FUNCTION_26_25();
          int v21 = 6;
LABEL_17:
          if (testFldeq(v18, v19, v20, v21)) {
            int v14 = v3;
          }
          else {
            int v14 = 1;
          }
          continue;
        case 4:
          bspop_boa(v0);
          BOOL v22 = advance_tok();
          int v14 = v3;
          if (v22) {
            continue;
          }
          __int16 v23 = 3;
          HIWORD(v25) = 3;
          goto LABEL_25;
        case 5:
          __int16 v23 = HIWORD(v25);
LABEL_25:
          *(void *)(v2 + 8) = v29;
          *(void *)(v1 + 8) = v27;
          *(_WORD *)(v5 + 2) = v23;
          break;
        default:
          goto LABEL_3;
      }
      break;
    }
  }
LABEL_3:
  vretproc((uint64_t)v0);
  OUTLINED_FUNCTION_5_35();
}

void conjoined_NPs()
{
  OUTLINED_FUNCTION_8_35();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  BOOL v9 = v8;
  OUTLINED_FUNCTION_77_11();
  uint64_t v73 = *MEMORY[0x263EF8340];
  v68[0] = 0;
  v68[1] = 0;
  v67[0] = 0;
  v67[1] = 0;
  v66[0] = 0;
  v66[1] = 0;
  OUTLINED_FUNCTION_34_23();
  bzero(v60, 0xB8uLL);
  OUTLINED_FUNCTION_10_35();
  bzero(v72, v10);
  if (!setjmp(v72))
  {
    uint64_t v11 = ventproc((uint64_t)v0, (uint64_t)v60, (uint64_t)v71, (uint64_t)v70, (uint64_t)v69, (uint64_t)v72);
    if (!v11)
    {
      OUTLINED_FUNCTION_76_11(v11, (uint64_t)v68);
      get_parm((uint64_t)v0, (uint64_t)v67, v2, (__int16)v72);
      get_parm((uint64_t)v0, (uint64_t)v66, v1, (__int16)v72);
      uint64_t v12 = OUTLINED_FUNCTION_67_12();
      get_parm(v12, v13, v9, (__int16)v72);
      get_parm((uint64_t)v0, (uint64_t)v63, v7, (__int16)v72);
      get_parm((uint64_t)v0, (uint64_t)v62, v5, (__int16)v72);
      uint64_t v14 = push_ptr_init((uint64_t)v0, (uint64_t)v61);
      int v15 = 0;
      BOOL v17 = OUTLINED_FUNCTION_22_27(v14, v16, (uint64_t)&null_str_13);
      OUTLINED_FUNCTION_46_15((uint64_t)v17, v18, (uint64_t)&_MergedGlobals_33);
      OUTLINED_FUNCTION_93_9();
      uint64_t v19 = OUTLINED_FUNCTION_42_16();
      if (lpta_loadp_setscan_l(v19, v20))
      {
LABEL_5:
        uint64_t v59 = v9;
        OUTLINED_FUNCTION_1_38(3);
        OUTLINED_FUNCTION_59_12();
        if (!OUTLINED_FUNCTION_21_29(v21, (uint64_t)v66) && !OUTLINED_FUNCTION_9_35() && !advance_tok()) {
          int v15 = 1;
        }
      }
      else
      {
        uint64_t v59 = v9;
        if (!testFldeq((uint64_t)v0, 2u, 1, 11) && !advance_tok())
        {
LABEL_48:
          *((void *)v59 + 1) = v65;
          goto LABEL_3;
        }
        int v15 = 0;
      }
      int v22 = v15;
      while (2)
      {
        uint64_t v23 = v0[13];
        if (v23)
        {
          int v24 = OUTLINED_FUNCTION_32_23(v23);
        }
        else
        {
          int v24 = vback(v0, v22);
          int v3 = 0;
        }
        switch(v24)
        {
          case 1:
            int v15 = v3;
            BOOL v9 = v59;
            goto LABEL_5;
          case 2:
          case 9:
          case 16:
            goto LABEL_48;
          case 3:
            starttest((uint64_t)v0, 5);
            if (OUTLINED_FUNCTION_53_15()) {
              goto LABEL_22;
            }
            uint64_t v54 = OUTLINED_FUNCTION_57_13();
            BOOL v57 = testFldeq(v54, v55, v56, 11);
            int v22 = v3;
            if (!v57)
            {
              BOOL v58 = advance_tok();
              int v22 = v3;
              if (!v58) {
                goto LABEL_48;
              }
            }
            continue;
          case 4:
          case 10:
          case 17:
            bspop_boa(v0);
            goto LABEL_3;
          case 5:
LABEL_22:
            starttest((uint64_t)v0, 6);
            if (OUTLINED_FUNCTION_53_15()) {
              goto LABEL_23;
            }
            BOOL v49 = OUTLINED_FUNCTION_24_25();
            int v22 = v3;
            if (v49) {
              continue;
            }
            BOOL v50 = OUTLINED_FUNCTION_90_9();
            int v22 = v3;
            if (v50) {
              continue;
            }
            uint64_t v34 = (uint64_t)v0;
            uint64_t v35 = 7;
            goto LABEL_42;
          case 6:
LABEL_23:
            starttest((uint64_t)v0, 13);
            if (OUTLINED_FUNCTION_53_15()) {
              goto LABEL_3;
            }
            BOOL v32 = OUTLINED_FUNCTION_24_25();
            int v22 = v3;
            if (v32) {
              continue;
            }
            BOOL v33 = OUTLINED_FUNCTION_89_9();
            int v22 = v3;
            if (v33) {
              continue;
            }
            uint64_t v34 = (uint64_t)v0;
            uint64_t v35 = 14;
            goto LABEL_42;
          case 7:
            bspop_boa(v0);
            BOOL v36 = advance_tok();
            int v22 = v3;
            if (v36) {
              continue;
            }
            BOOL v37 = advance_tok();
            int v22 = v3;
            if (v37) {
              continue;
            }
            goto LABEL_29;
          case 8:
LABEL_29:
            savescptr((uint64_t)v0, 8, (uint64_t)v64);
            OUTLINED_FUNCTION_60_12(9);
            bspush_ca_boa((uint64_t)v0);
            int v38 = lpta_loadp_setscan_l((uint64_t)v0, (uint64_t)v68);
            int v22 = v3;
            if (!v38) {
              goto LABEL_30;
            }
            continue;
          case 11:
LABEL_30:
            savescptr((uint64_t)v0, 11, (uint64_t)v61);
            BOOL v39 = OUTLINED_FUNCTION_24_25();
            int v22 = v3;
            if (v39) {
              continue;
            }
            BOOL v40 = OUTLINED_FUNCTION_90_9();
            int v22 = v3;
            if (v40) {
              continue;
            }
            uint64_t v34 = OUTLINED_FUNCTION_55_14();
            goto LABEL_42;
          case 12:
          case 19:
            bspop_boa(v0);
            BOOL v25 = advance_tok();
            int v22 = v3;
            if (v25) {
              continue;
            }
            int v26 = lpta_loadp_setscan_r((uint64_t)v0, (uint64_t)v61);
            int v22 = v3;
            if (v26) {
              continue;
            }
            uint64_t v27 = OUTLINED_FUNCTION_57_13();
            BOOL v30 = testFldeq(v27, v28, v29, 2);
            int v22 = v3;
            if (v30) {
              continue;
            }
            BOOL v31 = advance_tok();
            goto LABEL_43;
          case 14:
            bspop_boa(v0);
            BOOL v41 = advance_tok();
            int v22 = v3;
            if (v41) {
              continue;
            }
            BOOL v42 = advance_tok();
            int v22 = v3;
            if (v42) {
              continue;
            }
            goto LABEL_35;
          case 15:
LABEL_35:
            uint64_t v43 = OUTLINED_FUNCTION_50_15();
            savescptr(v43, v44, (uint64_t)v64);
            starttest_l((uint64_t)v0, 16);
            uint64_t v45 = OUTLINED_FUNCTION_88_9();
            bspush_ca_boa(v45);
            int v46 = lpta_loadp_setscan_l((uint64_t)v0, (uint64_t)v68);
            int v22 = v3;
            if (!v46) {
              goto LABEL_36;
            }
            continue;
          case 18:
LABEL_36:
            savescptr((uint64_t)v0, 18, (uint64_t)v61);
            BOOL v47 = OUTLINED_FUNCTION_24_25();
            int v22 = v3;
            if (!v47)
            {
              BOOL v48 = OUTLINED_FUNCTION_89_9();
              int v22 = v3;
              if (!v48)
              {
                uint64_t v34 = (uint64_t)v0;
                uint64_t v35 = 19;
LABEL_42:
                bspush_ca_scan_boa(v34, v35);
                uint64_t v51 = OUTLINED_FUNCTION_57_13();
                BOOL v31 = testFldeq(v51, v52, v53, 9);
LABEL_43:
                if (v31) {
                  int v22 = v3;
                }
                else {
                  int v22 = 1;
                }
              }
            }
            continue;
          default:
            goto LABEL_3;
        }
      }
    }
  }
LABEL_3:
  vretproc((uint64_t)v0);
  OUTLINED_FUNCTION_5_35();
}

uint64_t misc_phrase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 *a5)
{
  OUTLINED_FUNCTION_77_11();
  uint64_t v24 = *MEMORY[0x263EF8340];
  v19[0] = 0;
  v19[1] = 0;
  v18[0] = 0;
  v18[1] = 0;
  v17[0] = 0;
  v17[1] = 0;
  v16[0] = 0;
  v16[1] = 0;
  int v15 = 0;
  OUTLINED_FUNCTION_28_24(v9);
  OUTLINED_FUNCTION_10_35();
  bzero(v23, v10);
  if (!setjmp(v23))
  {
    uint64_t v11 = ventproc(v5, (uint64_t)v14, (uint64_t)v22, (uint64_t)v21, (uint64_t)v20, (uint64_t)v23);
    if (!v11)
    {
      OUTLINED_FUNCTION_76_11(v11, (uint64_t)v19);
      get_parm(v5, (uint64_t)v18, v7, (__int16)v23);
      get_parm(v5, (uint64_t)v17, v6, (__int16)v23);
      get_parm(v5, (uint64_t)v16, a5, (__int16)v23);
      OUTLINED_FUNCTION_12_34(v12, (uint64_t)&v15);
      fence_36(v5, 0, (uint64_t)&null_str_13);
    }
  }
  vretproc(v5);
  return 94;
}

uint64_t apply_por_comma_rules()
{
  OUTLINED_FUNCTION_18_31();
  uint64_t v117 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_6_35(v3, v4, v5, v6, v7, v8, v9, v10, v39, v42, v45, v48, v51, v54, v57, v60, v63, v66, v69,
    v72,
    v75,
    v78,
    v81,
    v84,
    v87,
    v90,
    v93,
    v96,
    v99,
    v102,
    v105,
    v108,
    v109,
    v110,
    v111);
  OUTLINED_FUNCTION_92_9(v11, v12, v13, v14, v15, v16, v17, v18, v40, v43, v46, v49, v52, v55, v58, v61, v64, v67, v70,
    v73,
    v76,
    v79,
    v82,
    v85,
    v88,
    v91,
    v94,
    v97,
    v100,
    v103,
    v106,
    v108,
    v109,
    v110,
    v111,
    v112,
    v113,
    v114,
    v115,
    v116);
  uint64_t v19 = setjmp(v2);
  if (v19
    || OUTLINED_FUNCTION_43_15(v19, v20, v21, v22, v23, v24, v25, v26, v41, v44, v47, v50, v53, v56, v59, v62, v65, v68, v71,
                       v74,
                       v77,
                       v80,
                       v83,
                       v86,
                       v89,
                       v92,
                       v95,
                       v98,
                       v101,
                       v104,
                       v107,
                       v108,
                       v109,
                       v110,
                       v111,
                       v112,
                       SBYTE4(v112),
                       v113,
                       SWORD2(v113),
                       SBYTE6(v113),
                       v114,
                       SWORD2(v114),
                       SBYTE6(v114),
                       SHIBYTE(v114),
                       v115,
                       v116))
  {
LABEL_3:
    vretproc(v0);
    return 94;
  }
  OUTLINED_FUNCTION_2_38();
  OUTLINED_FUNCTION_27_24(v28, (uint64_t)&v108);
  fence_36(v0, 0, (uint64_t)&null_str_13);
  OUTLINED_FUNCTION_1_38(1);
  if (!OUTLINED_FUNCTION_35_22() && !advance_tok())
  {
    OUTLINED_FUNCTION_0_40(2);
    while (2)
    {
      *(unsigned char *)(v0 + 136) = 1;
      if (!OUTLINED_FUNCTION_7_35()) {
        goto LABEL_3;
      }
LABEL_10:
      uint64_t v30 = *(void *)(v0 + 104);
      if (v30) {
        OUTLINED_FUNCTION_3_37(v30);
      }
      else {
        OUTLINED_FUNCTION_36_21();
      }
      OUTLINED_FUNCTION_62_12();
      if (!(!v34 & v33))
      {
        switch(v32)
        {
          case 1:
            if (!advance_tok()) {
              continue;
            }
            goto LABEL_10;
          case 2:
            continue;
          case 3:
            goto LABEL_26;
          case 4:
            goto LABEL_3;
          case 5:
            if (!OUTLINED_FUNCTION_11_35(v31, (uint64_t)&v108) && !advance_tok()) {
              goto LABEL_19;
            }
            goto LABEL_10;
          case 6:
            OUTLINED_FUNCTION_0_40(9);
            unsigned int v35 = 2;
            int v36 = 1;
            int v37 = 6;
            goto LABEL_21;
          case 7:
            goto LABEL_24;
          case 8:
            uint64_t v38 = OUTLINED_FUNCTION_71_11();
            goto LABEL_23;
          case 9:
            goto LABEL_25;
          case 10:
            goto LABEL_27;
          default:
            goto LABEL_6;
        }
      }
      goto LABEL_3;
    }
  }
LABEL_6:
  OUTLINED_FUNCTION_1_38(5);
  bspush_ca(v0);
  if (OUTLINED_FUNCTION_11_35(v29, (uint64_t)&v108)) {
    goto LABEL_10;
  }
  OUTLINED_FUNCTION_0_40(7);
LABEL_19:
  unsigned int v35 = 2;
  int v36 = 1;
  int v37 = 10;
LABEL_21:
  uint64_t v38 = v0;
LABEL_23:
  if (testFldeq(v38, v35, v36, v37)) {
    goto LABEL_10;
  }
LABEL_24:
  if (advance_tok()) {
    goto LABEL_10;
  }
LABEL_25:
  npush_s(v0);
  *(_WORD *)(v0 + 3090) = 2;
  npop(v0, (unsigned __int16 *)(v0 + 3088));
  npush_s(v0);
  *(_WORD *)(v0 + 3090) = 3;
  npop(v0, (unsigned __int16 *)(v0 + 3088));
  npush_s(v0);
  *(_WORD *)(v0 + 3090) = 4;
  npop(v0, (unsigned __int16 *)(v0 + 3088));
LABEL_26:
  OUTLINED_FUNCTION_47_15();
  insert_comma_phrase();
LABEL_27:
  *(void *)(v1 + 8) = v109;
  vretproc(v0);
  return 0;
}

uint64_t isit_por_WH(void *a1)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  v33[0] = 0;
  v33[1] = 0;
  bzero(v32, 0xB8uLL);
  OUTLINED_FUNCTION_10_35();
  bzero(v37, v2);
  if (setjmp(v37)
    || ventproc((uint64_t)a1, (uint64_t)v32, (uint64_t)v36, (uint64_t)v35, (uint64_t)v34, (uint64_t)v37))
  {
    goto LABEL_3;
  }
  OUTLINED_FUNCTION_78_11();
  fence_36((uint64_t)a1, 0, (uint64_t)&null_str_13);
  OUTLINED_FUNCTION_1_38(1);
  if (lpta_loadp_setscan_r((uint64_t)a1, (uint64_t)v33))
  {
LABEL_6:
    uint64_t v5 = OUTLINED_FUNCTION_1_38(3);
    if (OUTLINED_FUNCTION_11_35(v5, (uint64_t)v33))
    {
LABEL_3:
      uint64_t v3 = 94;
      goto LABEL_4;
    }
    OUTLINED_FUNCTION_0_40(4);
LABEL_8:
    OUTLINED_FUNCTION_0_40(8);
    uint64_t v6 = OUTLINED_FUNCTION_71_11();
LABEL_33:
    if (testFldeq(v6, v7, v8, v9))
    {
      while (1)
      {
LABEL_12:
        uint64_t v10 = a1[13];
        if (v10) {
          OUTLINED_FUNCTION_3_37(v10);
        }
        else {
          OUTLINED_FUNCTION_36_21();
        }
        OUTLINED_FUNCTION_62_12();
        if (!v13 & v12) {
          goto LABEL_3;
        }
        switch(v11)
        {
          case 1:
            goto LABEL_11;
          case 2:
            goto LABEL_3;
          case 3:
            OUTLINED_FUNCTION_0_40(6);
            if (OUTLINED_FUNCTION_14_34()) {
              continue;
            }
            break;
          case 4:
            goto LABEL_8;
          case 5:
            BOOL v14 = OUTLINED_FUNCTION_13_34();
            if (v14) {
              continue;
            }
            if (OUTLINED_FUNCTION_19_31(v14, 2u, v15, 0)) {
              continue;
            }
            if (npush_fld((uint64_t)a1, 2u, 5)) {
              continue;
            }
            npush_i((uint64_t)a1);
            if (if_testgt((uint64_t)a1, v16, v17, v18, v19, v20, v21, v22)) {
              continue;
            }
            break;
          case 6:
            break;
          case 7:
            OUTLINED_FUNCTION_0_40(10);
            int v8 = 3;
            unsigned int v7 = 2;
            uint64_t v6 = (uint64_t)a1;
            int v9 = 2;
            goto LABEL_33;
          case 8:
            goto LABEL_34;
          case 9:
            OUTLINED_FUNCTION_0_40(11);
            unsigned int v7 = 2;
            int v8 = 1;
            int v9 = 5;
            uint64_t v6 = (uint64_t)a1;
            goto LABEL_33;
          case 10:
            BOOL v23 = OUTLINED_FUNCTION_13_34();
            if (!v23 && !OUTLINED_FUNCTION_19_31(v23, 2u, v24, 0) && !npush_fld((uint64_t)a1, 2u, 5))
            {
              npush_i((uint64_t)a1);
              if (!if_testgt((uint64_t)a1, v25, v26, v27, v28, v29, v30, v31)) {
                goto LABEL_34;
              }
            }
            continue;
          default:
            goto LABEL_6;
        }
        if (!advance_tok() && !advanc(a1)) {
          goto LABEL_8;
        }
      }
    }
LABEL_34:
    if (advance_tok() || advanc(a1)) {
      goto LABEL_12;
    }
  }
  if (testFldeq((uint64_t)a1, 2u, 3, 33) || advance_tok()) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v3 = 0;
LABEL_4:
  vretproc((uint64_t)a1);
  return v3;
}

uint64_t isit_por_Alt()
{
  OUTLINED_FUNCTION_18_31();
  uint64_t v33 = *MEMORY[0x263EF8340];
  memset(v28, 0, sizeof(v28));
  OUTLINED_FUNCTION_6_35(v2, v3, v4, v5, v6, v7, v8, v9, v25[0], v25[1], v25[2], v25[3], v25[4], v25[5], v25[6], v25[7], v25[8], v25[9], v25[10],
    v25[11],
    v25[12],
    v25[13],
    v25[14],
    v25[15],
    v25[16],
    v25[17],
    v25[18],
    v25[19],
    v25[20],
    v25[21],
    v25[22],
    v26[0],
    v26[1],
    v27[0],
    v27[1]);
  OUTLINED_FUNCTION_40_17();
  if (!setjmp(v1)
    && !ventproc((uint64_t)v0, (uint64_t)v25, (uint64_t)v31, (uint64_t)v30, (uint64_t)v29, (uint64_t)v32))
  {
    OUTLINED_FUNCTION_2_38();
    OUTLINED_FUNCTION_87_9();
    uint64_t v10 = OUTLINED_FUNCTION_88_9();
    push_ptr_init(v10, v11);
    uint64_t v12 = OUTLINED_FUNCTION_42_16();
    push_ptr_init(v12, v13);
    fence_36((uint64_t)v0, 0, (uint64_t)&null_str_13);
    startloop((uint64_t)v0, 1);
    uint64_t v14 = OUTLINED_FUNCTION_52_15();
    lpta_loadpn(v14, v15);
    lpta_mover((uint64_t)v0);
    uint64_t v16 = OUTLINED_FUNCTION_88_9();
    lpta_storep(v16, v17);
    lpta_loadpn(v0, v28);
    lpta_mover((uint64_t)v0);
    uint64_t v18 = OUTLINED_FUNCTION_42_16();
    lpta_storep(v18, v19);
    if (forall_to_test((uint64_t)v0, (unsigned __int16 *)v27, (__int16 *)v26)) {
      goto LABEL_15;
    }
LABEL_7:
    bspush_ca((uint64_t)v0);
    if (OUTLINED_FUNCTION_11_35(v22, (uint64_t)v27) || OUTLINED_FUNCTION_14_34() || advance_tok()) {
      goto LABEL_15;
    }
    while (2)
    {
      OUTLINED_FUNCTION_1_38(3);
      if (!lpta_loadp_setscan_r((uint64_t)v0, (uint64_t)v27)
        && !test_string_s((uint64_t)v0, 1u, 2u, (uint64_t *)&unk_268C67E15))
      {
LABEL_12:
        if (!test_synch(v0, 4, 1u, (unsigned __int8 *)&unk_268C67E14))
        {
          uint64_t v20 = 0;
          goto LABEL_6;
        }
LABEL_15:
        uint64_t v23 = v0[13];
        if (v23) {
          int v24 = OUTLINED_FUNCTION_3_37(v23);
        }
        else {
          int v24 = OUTLINED_FUNCTION_36_21();
        }
        switch(v24)
        {
          case 2:
            continue;
          case 3:
            goto LABEL_14;
          case 4:
            goto LABEL_12;
          case 5:
            goto LABEL_7;
          default:
            goto LABEL_5;
        }
      }
      break;
    }
LABEL_14:
    if (forto_adv_upto_r((uint64_t)v0, 1, 2, 5, 2, (uint64_t)v27)) {
      goto LABEL_15;
    }
  }
LABEL_5:
  uint64_t v20 = 94;
LABEL_6:
  vretproc((uint64_t)v0);
  return v20;
}

double OUTLINED_FUNCTION_0_40@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = bspush_ca_scan(v1, a1).n128_u64[0];
  return result;
}

uint64_t OUTLINED_FUNCTION_1_38@<X0>(uint64_t a1@<X8>)
{
  return starttest(v1, a1);
}

void OUTLINED_FUNCTION_2_38()
{
  get_parm(v0, v2, v1, -6);
}

uint64_t OUTLINED_FUNCTION_3_37@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 104) = 0;
  return a1;
}

BOOL OUTLINED_FUNCTION_4_36()
{
  return testFldeq(v0, 2u, 1, 3);
}

void OUTLINED_FUNCTION_6_35(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  a34 = 0;
  a35 = 0;
  a32 = 0;
  a33 = 0;
  bzero(&a9, 0xB8uLL);
}

uint64_t OUTLINED_FUNCTION_7_35()
{
  *(void *)(v1 + 112) = v0;
  *(void *)(v1 + 128) = 0;
  return test_ptr(v1);
}

BOOL OUTLINED_FUNCTION_9_35()
{
  return testFldeq(v0, 2u, 1, 2);
}

uint64_t OUTLINED_FUNCTION_11_35(uint64_t a1, uint64_t a2)
{
  return lpta_loadp_setscan_r(v2, a2);
}

void OUTLINED_FUNCTION_12_34(uint64_t a1, uint64_t a2)
{
  get_parm(v2, a2, v3, -4);
}

BOOL OUTLINED_FUNCTION_13_34()
{
  return testFldeq(v0, 2u, 1, 9);
}

BOOL OUTLINED_FUNCTION_14_34()
{
  return testFldeq(v0, 2u, 1, 5);
}

void OUTLINED_FUNCTION_15_33()
{
  get_parm(v0, v2, v1, -6);
}

uint64_t OUTLINED_FUNCTION_17_32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  return lpta_loadp_setscan_l(v36, (uint64_t)&a36);
}

BOOL OUTLINED_FUNCTION_19_31(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  return testFldeq(v4, a2, a2, a4);
}

double OUTLINED_FUNCTION_20_30@<D0>(uint64_t a1@<X8>)
{
  return bspush_ca_scan_boa(v1, a1);
}

uint64_t OUTLINED_FUNCTION_21_29(uint64_t a1, uint64_t a2)
{
  return lpta_loadp_setscan_l(v2, a2);
}

void *OUTLINED_FUNCTION_22_27(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return fence_36(v3, 0, a3);
}

uint64_t OUTLINED_FUNCTION_23_26()
{
  return lpta_loadp_setscan_l(v0, v1);
}

BOOL OUTLINED_FUNCTION_24_25()
{
  return testFldeq(v0, v1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_26_25()
{
  return v0;
}

void OUTLINED_FUNCTION_27_24(uint64_t a1, uint64_t a2)
{
  get_parm(v2, a2, v3, v4);
}

void OUTLINED_FUNCTION_28_24(uint64_t a1, ...)
{
  va_start(va, a1);
  bzero(va, 0xB8uLL);
}

uint64_t OUTLINED_FUNCTION_29_24()
{
  return v0;
}

void OUTLINED_FUNCTION_30_24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  a43 = 0;
  a44 = 0;
  a41 = 0;
  a42 = 0;
  a39 = 0;
  a40 = 0;
  a37 = 0;
  a38 = 0;
  a35 = 0;
  a36 = 0;
  bzero(&a12, 0xB8uLL);
}

uint64_t OUTLINED_FUNCTION_32_23@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 104) = 0;
  return a1;
}

BOOL OUTLINED_FUNCTION_33_23()
{
  return testFldeq(v0, 2u, 1, 10);
}

uint64_t OUTLINED_FUNCTION_35_22()
{
  return lpta_loadp_setscan_r(v0, v1);
}

uint64_t OUTLINED_FUNCTION_36_21()
{
  return vback(v0, 0);
}

void OUTLINED_FUNCTION_37_20(uint64_t a1, uint64_t a2)
{
  get_parm(v2, a2, v3, v4);
}

uint64_t OUTLINED_FUNCTION_38_18()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_39_17()
{
  return v0;
}

void OUTLINED_FUNCTION_40_17()
{
  bzero((void *)(v0 - 248), 0xC0uLL);
}

double OUTLINED_FUNCTION_41_16@<D0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  *(void *)&double result = savescptr(v29, a1, (uint64_t)&a29).n128_u64[0];
  return result;
}

uint64_t OUTLINED_FUNCTION_42_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_43_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,char a37,int a38,__int16 a39,char a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46)
{
  return ventproc(v46, (uint64_t)&a9, (uint64_t)&a44, (uint64_t)&a40, (uint64_t)&a37, (uint64_t)&a46);
}

uint64_t OUTLINED_FUNCTION_44_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,char a39,int a40,__int16 a41,char a42,int a43,__int16 a44,char a45,char a46)
{
  return ventproc(v46, (uint64_t)&a9, (uint64_t)&a46, (uint64_t)&a42, (uint64_t)&a39, v47 - 248);
}

void *OUTLINED_FUNCTION_45_15(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return fence_36(v3, 1, a3);
}

void *OUTLINED_FUNCTION_46_15(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return fence_36(v3, 1, a3);
}

uint64_t OUTLINED_FUNCTION_47_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_48_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_49_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_50_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_51_15()
{
  return lpta_loadp_setscan_r(v0, v1);
}

uint64_t OUTLINED_FUNCTION_52_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_53_15()
{
  return lpta_loadp_setscan_r(v0, v1);
}

uint64_t OUTLINED_FUNCTION_54_14()
{
  return lpta_loadp_setscan_r(v0, v1);
}

uint64_t OUTLINED_FUNCTION_55_14()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_56_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_57_13()
{
  return v0;
}

double OUTLINED_FUNCTION_58_13@<D0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  *(void *)&double result = savescptr(v26, a1, (uint64_t)&a26).n128_u64[0];
  return result;
}

void OUTLINED_FUNCTION_59_12()
{
  bspush_ca_boa(v0);
}

uint64_t OUTLINED_FUNCTION_60_12@<X0>(uint64_t a1@<X8>)
{
  return starttest_l(v1, a1);
}

void *OUTLINED_FUNCTION_61_12(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return fence_36(v3, 1, a3);
}

uint64_t OUTLINED_FUNCTION_63_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,unsigned __int16 a41,__int16 a42)
{
  a42 = v43;
  return npush_v(v42, &a41, a3, a4, a5, a6, a7, a8);
}

uint64_t OUTLINED_FUNCTION_64_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,unsigned __int16 a45,__int16 a46)
{
  a46 = v47;
  return npush_v(v46, &a45, a3, a4, a5, a6, a7, a8);
}

uint64_t OUTLINED_FUNCTION_65_12@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 104) = 0;
  return a1;
}

uint64_t OUTLINED_FUNCTION_66_12@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 104) = 0;
  return a1;
}

uint64_t OUTLINED_FUNCTION_67_12()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_68_12()
{
  return testFldeq(v0, 2u, 3, 10);
}

uint64_t OUTLINED_FUNCTION_69_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_70_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_71_11()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_72_11()
{
  return testFldeq(v0, 2u, 1, 1);
}

uint64_t OUTLINED_FUNCTION_73_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_74_11()
{
  return v0;
}

void OUTLINED_FUNCTION_75_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  a40 = 0;
  a41 = 0;
  bzero(&a17, 0xB8uLL);
}

void OUTLINED_FUNCTION_76_11(uint64_t a1, uint64_t a2)
{
  get_parm(v2, a2, v3, -6);
}

void OUTLINED_FUNCTION_78_11()
{
  get_parm(v0, v2, v1, -6);
}

uint64_t OUTLINED_FUNCTION_79_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_80_11()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_81_10()
{
  return testFldeq(v0, v2, v1, v2);
}

BOOL OUTLINED_FUNCTION_82_10()
{
  return testFldeq(v0, v1, v1, 12);
}

uint64_t OUTLINED_FUNCTION_83_10()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_84_10()
{
  return testFldeq(v0, v3, v2, v1);
}

BOOL OUTLINED_FUNCTION_85_9()
{
  return testFldeq(v0, v2, v2, v1);
}

BOOL OUTLINED_FUNCTION_86_9()
{
  return testFldeq(v0, 2u, 3, 12);
}

void OUTLINED_FUNCTION_87_9()
{
  get_parm(v0, v2, v1, v3);
}

uint64_t OUTLINED_FUNCTION_88_9()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_89_9()
{
  return testFldeq(v0, v1, 3, v2);
}

BOOL OUTLINED_FUNCTION_90_9()
{
  return testFldeq(v0, v1, 3, v1);
}

double OUTLINED_FUNCTION_91_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  *(void *)&double result = savescptr(v32, 5, (uint64_t)&a32).n128_u64[0];
  return result;
}

void OUTLINED_FUNCTION_92_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  bzero(&a40, 0xC0uLL);
}

uint64_t OUTLINED_FUNCTION_93_9()
{
  return starttest(v0, v1);
}

uint64_t OUTLINED_FUNCTION_94_8()
{
  return v0;
}

void *fence_37(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 192) + 8121) = 1;
  double result = memset(*(void **)(a1 + 264), *(unsigned __int8 *)(a1 + 288), *(unsigned __int8 *)(a1 + 288));
  **(unsigned char **)(a1 + 248) = 2;
  *(unsigned char *)(*(void *)(a1 + 264) + 2) = 0;
  return result;
}

uint64_t strip_nonlex_prefix()
{
  OUTLINED_FUNCTION_2_39();
  OUTLINED_FUNCTION_0_41(v2, v3, v4, v5, v6, v7, v8, v9, v59, v66, v73, v80, v87, v94, v101, v108, v115, v122, v129,
    v136,
    v143,
    v150,
    v157,
    v164,
    v171,
    v178,
    v185,
    v192,
    v199,
    v206,
    v213,
    v220,
    v227,
    v233,
    v239,
    v244,
    v249,
    v253,
    v257);
  OUTLINED_FUNCTION_4_37(v10, v11, v12, v13, v14, v15, v16, v17, v60, v67, v74, v81, v88, v95, v102, v109, v116, v123, v130,
    v137,
    v144,
    v151,
    v158,
    v165,
    v172,
    v179,
    v186,
    v193,
    v200,
    v207,
    v214,
    v221,
    v228,
    v234,
    v240,
    v245,
    v250,
    v254,
    v258,
    v260,
    v262,
    v264,
    v266,
    v268);
  uint64_t v18 = setjmp(v1);
  if (!v18)
  {
    uint64_t v26 = OUTLINED_FUNCTION_1_39(v18, v19, v20, v21, v22, v23, v24, v25, v61, v68, v75, v82, v89, v96, v103, v110, v117, v124, v131,
            v138,
            v145,
            v152,
            v159,
            v166,
            v173,
            v180,
            v187,
            v194,
            v201,
            v208,
            v215,
            v222,
            v229,
            v235,
            v241,
            v246,
            v251,
            v255,
            v259,
            *(int *)v261,
            v261[4],
            *(int *)v263,
            *(__int16 *)&v263[4],
            v263[6],
            v265,
            SWORD2(v265),
            SBYTE6(v265),
            SHIBYTE(v265),
            v267,
            v269);
    if (!v26)
    {
      OUTLINED_FUNCTION_3_38(v26, v27, v28, v29, v30, v31, v32, v33, v62, v69, v76, v83, v90, v97, v104, v111, v118, v125, v132,
        v139,
        v146,
        v153,
        v160,
        v167,
        v174,
        v181,
        v188,
        v195,
        v202,
        v209,
        v216,
        v223,
        v230,
        v236,
        v242,
        v247,
        v252,
        v256);
      OUTLINED_FUNCTION_7_36(v34, v35, v36, v37, v38, v39, v40, v41, v63, v70, v77, v84, v91, v98, v105, v112, v119, v126, v133,
        v140,
        v147,
        v154,
        v161,
        v168,
        v175,
        v182,
        v189,
        v196,
        v203,
        v210,
        v217,
        v224,
        v231,
        v237,
        v243,
        v248);
      OUTLINED_FUNCTION_6_36(v42, v43, v44, v45, v46, v47, v48, v49, v64, v71, v78, v85, v92, v99, v106, v113, v120, v127, v134,
        v141,
        v148,
        v155,
        v162,
        v169,
        v176,
        v183,
        v190,
        v197,
        v204,
        v211,
        v218,
        v225,
        v232,
        v238);
      OUTLINED_FUNCTION_5_36(v50, v51, v52, v53, v54, v55, v56, v57, v65, v72, v79, v86, v93, v100, v107, v114, v121, v128, v135,
        v142,
        v149,
        v156,
        v163,
        v170,
        v177,
        v184,
        v191,
        v198,
        v205,
        v212,
        v219,
        v226);
      fence_37(v0);
    }
  }
  vretproc(v0);
  return 94;
}

uint64_t strip_prod_prefix()
{
  OUTLINED_FUNCTION_2_39();
  OUTLINED_FUNCTION_0_41(v2, v3, v4, v5, v6, v7, v8, v9, v59, v66, v73, v80, v87, v94, v101, v108, v115, v122, v129,
    v136,
    v143,
    v150,
    v157,
    v164,
    v171,
    v178,
    v185,
    v192,
    v199,
    v206,
    v213,
    v220,
    v227,
    v233,
    v239,
    v244,
    v249,
    v253,
    v257);
  OUTLINED_FUNCTION_4_37(v10, v11, v12, v13, v14, v15, v16, v17, v60, v67, v74, v81, v88, v95, v102, v109, v116, v123, v130,
    v137,
    v144,
    v151,
    v158,
    v165,
    v172,
    v179,
    v186,
    v193,
    v200,
    v207,
    v214,
    v221,
    v228,
    v234,
    v240,
    v245,
    v250,
    v254,
    v258,
    v260,
    v262,
    v264,
    v266,
    v268);
  uint64_t v18 = setjmp(v1);
  if (!v18)
  {
    uint64_t v26 = OUTLINED_FUNCTION_1_39(v18, v19, v20, v21, v22, v23, v24, v25, v61, v68, v75, v82, v89, v96, v103, v110, v117, v124, v131,
            v138,
            v145,
            v152,
            v159,
            v166,
            v173,
            v180,
            v187,
            v194,
            v201,
            v208,
            v215,
            v222,
            v229,
            v235,
            v241,
            v246,
            v251,
            v255,
            v259,
            *(int *)v261,
            v261[4],
            *(int *)v263,
            *(__int16 *)&v263[4],
            v263[6],
            v265,
            SWORD2(v265),
            SBYTE6(v265),
            SHIBYTE(v265),
            v267,
            v269);
    if (!v26)
    {
      OUTLINED_FUNCTION_3_38(v26, v27, v28, v29, v30, v31, v32, v33, v62, v69, v76, v83, v90, v97, v104, v111, v118, v125, v132,
        v139,
        v146,
        v153,
        v160,
        v167,
        v174,
        v181,
        v188,
        v195,
        v202,
        v209,
        v216,
        v223,
        v230,
        v236,
        v242,
        v247,
        v252,
        v256);
      OUTLINED_FUNCTION_7_36(v34, v35, v36, v37, v38, v39, v40, v41, v63, v70, v77, v84, v91, v98, v105, v112, v119, v126, v133,
        v140,
        v147,
        v154,
        v161,
        v168,
        v175,
        v182,
        v189,
        v196,
        v203,
        v210,
        v217,
        v224,
        v231,
        v237,
        v243,
        v248);
      OUTLINED_FUNCTION_6_36(v42, v43, v44, v45, v46, v47, v48, v49, v64, v71, v78, v85, v92, v99, v106, v113, v120, v127, v134,
        v141,
        v148,
        v155,
        v162,
        v169,
        v176,
        v183,
        v190,
        v197,
        v204,
        v211,
        v218,
        v225,
        v232,
        v238);
      OUTLINED_FUNCTION_5_36(v50, v51, v52, v53, v54, v55, v56, v57, v65, v72, v79, v86, v93, v100, v107, v114, v121, v128, v135,
        v142,
        v149,
        v156,
        v163,
        v170,
        v177,
        v184,
        v191,
        v198,
        v205,
        v212,
        v219,
        v226);
      fence_37(v0);
    }
  }
  vretproc(v0);
  return 94;
}

uint64_t legal_initial_consonants(uint64_t a1, __int16 *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  v7[0] = 0;
  v7[1] = 0;
  bzero(v6, 0xB8uLL);
  bzero(v11, 0xC0uLL);
  if (setjmp(v11) || ventproc(a1, (uint64_t)v6, (uint64_t)v10, (uint64_t)v9, (uint64_t)v8, (uint64_t)v11))
  {
    uint64_t v4 = 94;
  }
  else
  {
    get_parm(a1, (uint64_t)v7, a2, -6);
    fence_37(a1);
    uint64_t v4 = 0;
  }
  vretproc(a1);
  return v4;
}

uint64_t strip_other_prefix()
{
  OUTLINED_FUNCTION_2_39();
  OUTLINED_FUNCTION_0_41(v2, v3, v4, v5, v6, v7, v8, v9, v59, v66, v73, v80, v87, v94, v101, v108, v115, v122, v129,
    v136,
    v143,
    v150,
    v157,
    v164,
    v171,
    v178,
    v185,
    v192,
    v199,
    v206,
    v213,
    v220,
    v227,
    v233,
    v239,
    v244,
    v249,
    v253,
    v257);
  OUTLINED_FUNCTION_4_37(v10, v11, v12, v13, v14, v15, v16, v17, v60, v67, v74, v81, v88, v95, v102, v109, v116, v123, v130,
    v137,
    v144,
    v151,
    v158,
    v165,
    v172,
    v179,
    v186,
    v193,
    v200,
    v207,
    v214,
    v221,
    v228,
    v234,
    v240,
    v245,
    v250,
    v254,
    v258,
    v260,
    v262,
    v264,
    v266,
    v268);
  uint64_t v18 = setjmp(v1);
  if (!v18)
  {
    uint64_t v26 = OUTLINED_FUNCTION_1_39(v18, v19, v20, v21, v22, v23, v24, v25, v61, v68, v75, v82, v89, v96, v103, v110, v117, v124, v131,
            v138,
            v145,
            v152,
            v159,
            v166,
            v173,
            v180,
            v187,
            v194,
            v201,
            v208,
            v215,
            v222,
            v229,
            v235,
            v241,
            v246,
            v251,
            v255,
            v259,
            *(int *)v261,
            v261[4],
            *(int *)v263,
            *(__int16 *)&v263[4],
            v263[6],
            v265,
            SWORD2(v265),
            SBYTE6(v265),
            SHIBYTE(v265),
            v267,
            v269);
    if (!v26)
    {
      OUTLINED_FUNCTION_3_38(v26, v27, v28, v29, v30, v31, v32, v33, v62, v69, v76, v83, v90, v97, v104, v111, v118, v125, v132,
        v139,
        v146,
        v153,
        v160,
        v167,
        v174,
        v181,
        v188,
        v195,
        v202,
        v209,
        v216,
        v223,
        v230,
        v236,
        v242,
        v247,
        v252,
        v256);
      OUTLINED_FUNCTION_7_36(v34, v35, v36, v37, v38, v39, v40, v41, v63, v70, v77, v84, v91, v98, v105, v112, v119, v126, v133,
        v140,
        v147,
        v154,
        v161,
        v168,
        v175,
        v182,
        v189,
        v196,
        v203,
        v210,
        v217,
        v224,
        v231,
        v237,
        v243,
        v248);
      OUTLINED_FUNCTION_6_36(v42, v43, v44, v45, v46, v47, v48, v49, v64, v71, v78, v85, v92, v99, v106, v113, v120, v127, v134,
        v141,
        v148,
        v155,
        v162,
        v169,
        v176,
        v183,
        v190,
        v197,
        v204,
        v211,
        v218,
        v225,
        v232,
        v238);
      OUTLINED_FUNCTION_5_36(v50, v51, v52, v53, v54, v55, v56, v57, v65, v72, v79, v86, v93, v100, v107, v114, v121, v128, v135,
        v142,
        v149,
        v156,
        v163,
        v170,
        v177,
        v184,
        v191,
        v198,
        v205,
        v212,
        v219,
        v226);
      fence_37(v0);
    }
  }
  vretproc(v0);
  return 94;
}

void OUTLINED_FUNCTION_0_41(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  *(void *)(v40 - 72) = v39;
  a38 = 0;
  a39 = 0;
  a36 = 0;
  a37 = 0;
  a34 = 0;
  a35 = 0;
  a32 = 0;
  a33 = 0;
  bzero(&a9, 0xB8uLL);
}

uint64_t OUTLINED_FUNCTION_1_39(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,char a41,int a42,__int16 a43,char a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50)
{
  return ventproc(v50, (uint64_t)&a9, (uint64_t)&a48, (uint64_t)&a44, (uint64_t)&a41, (uint64_t)&a50);
}

void OUTLINED_FUNCTION_3_38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  get_parm(v38, (uint64_t)&a38, v39, -6);
}

void OUTLINED_FUNCTION_4_37(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  bzero(&a44, 0xC0uLL);
}

void OUTLINED_FUNCTION_5_36(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  get_parm(v32, (uint64_t)&a32, v33, v34);
}

void OUTLINED_FUNCTION_6_36(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  get_parm(v34, (uint64_t)&a34, v35, v36);
}

void OUTLINED_FUNCTION_7_36(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  get_parm(v36, (uint64_t)&a36, v37, v38);
}

void *fence_38(uint64_t a1, int a2, uint64_t a3)
{
  *(unsigned char *)(*(void *)(a1 + 192) + 8121) = a2;
  double result = memset(*(void **)(a1 + 264), *(unsigned __int8 *)(a1 + 288), *(unsigned __int8 *)(a1 + 288));
  for (uint64_t i = 0; a2 != i; ++i)
  {
    *(unsigned char *)(*(void *)(a1 + 248) + i) = *(unsigned char *)(a3 + i);
    *(unsigned char *)(*(void *)(a1 + 264) + *(unsigned __int8 *)(a3 + i)) = i;
  }
  return result;
}

uint64_t strip_suffix()
{
  OUTLINED_FUNCTION_17_33();
  uint64_t v26 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_1_40(v4, v5, v6, v7, v8, v9, v10, v11, v17[0], v17[1], v17[2], v17[3], v17[4], v17[5], v17[6], v17[7], v17[8], v17[9], v17[10],
    v17[11],
    v17[12],
    v17[13],
    v17[14],
    v17[15],
    v17[16],
    v17[17],
    v17[18],
    v17[19],
    v17[20],
    v17[21],
    v17[22],
    v18[0],
    v18[1],
    v19,
    v20,
    v21[0],
    v21[1]);
  bzero(v25, 0xC0uLL);
  if (setjmp(v25) || ventproc(v0, (uint64_t)v17, (uint64_t)v24, (uint64_t)v23, (uint64_t)v22, (uint64_t)v25))
  {
    uint64_t v12 = 94;
  }
  else
  {
    get_parm(v0, (uint64_t)v21, v3, -6);
    get_parm(v0, (uint64_t)&v19, (__int16 *)v1, -6);
    get_parm(v0, (uint64_t)v18, v2, -6);
    fence_38(v0, 0, (uint64_t)&null_str_14);
    if (strip_mente())
    {
      uint64_t v14 = OUTLINED_FUNCTION_14_35();
      strip_plural_suffix(v14, v15, v16);
      strip_diminutive();
    }
    *(void *)(v1 + 8) = v20;
    uint64_t v12 = 0;
  }
  vretproc(v0);
  return v12;
}

uint64_t strip_mente()
{
  OUTLINED_FUNCTION_17_33();
  uint64_t v22 = *MEMORY[0x263EF8340];
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  v14[0] = 0;
  v14[1] = 0;
  bzero(v13, 0xB8uLL);
  bzero(v21, 0xC0uLL);
  if (setjmp(v21)
    || ventproc((uint64_t)v0, (uint64_t)v13, (uint64_t)v20, (uint64_t)v19, (uint64_t)v18, (uint64_t)v21)
    || (get_parm((uint64_t)v0, (uint64_t)v17, v3, -6),
        get_parm((uint64_t)v0, (uint64_t)&v15, (__int16 *)v1, -6),
        get_parm((uint64_t)v0, (uint64_t)v14, v2, -6),
        fence_38((uint64_t)v0, 0, (uint64_t)&null_str_14),
        fence_38((uint64_t)v0, 1, (uint64_t)&_MergedGlobals_34),
        starttest((uint64_t)v0, 1),
        lpta_loadp_setscan_l((uint64_t)v0, (uint64_t)v14))
    || test_string_s((uint64_t)v0, 1u, 5u, (uint64_t *)&unk_268C67E27))
  {
LABEL_5:
    vretproc((uint64_t)v0);
    return 94;
  }
  else
  {
    int v5 = 0;
    while (2)
    {
      uint64_t v6 = OUTLINED_FUNCTION_14_35();
      savescptr(v6, v7, (uint64_t)&v15);
      if (!advance_tok() && !advance_tok())
      {
        starttest((uint64_t)v0, 3);
        bspush_ca_boa((uint64_t)v0);
        int v8 = lpta_loadp_setscan_l((uint64_t)v0, (uint64_t)&v15);
LABEL_10:
        int v9 = v5;
        if (!v8)
        {
LABEL_11:
          int v5 = v9;
          bspush_ca_scan((uint64_t)v0, 6);
          if (!testFldeq((uint64_t)v0, 1u, 4, 1) && !advance_tok()) {
            int v5 = 1;
          }
        }
      }
      uint64_t v10 = v0[13];
      if (v10)
      {
        int v11 = OUTLINED_FUNCTION_4_38(v10);
        int v5 = v12;
      }
      else
      {
        int v11 = vback(v0, v5);
        int v5 = 0;
      }
      int v9 = v5;
      switch(v11)
      {
        case 2:
          continue;
        case 3:
          if (!one_syllable((uint64_t)v0, (__int16 *)v17, (__int16 *)&v15)) {
            goto LABEL_5;
          }
          goto LABEL_20;
        case 4:
          bspop_boa(v0);
          goto LABEL_5;
        case 5:
          goto LABEL_11;
        case 6:
          int v8 = advance_tok();
          goto LABEL_10;
        case 7:
LABEL_20:
          suffixes((uint64_t)v0, (__int16 *)&v15, (__int16 *)v14, (__int16 *)v17);
          goto LABEL_21;
        case 8:
LABEL_21:
          restore_antepenult_accent();
          break;
        case 9:
        case 10:
          goto LABEL_22;
        default:
          goto LABEL_5;
      }
      break;
    }
LABEL_22:
    *(void *)(v1 + 8) = v16;
    vretproc((uint64_t)v0);
    return 0;
  }
}

uint64_t strip_plural_suffix(uint64_t a1, uint64_t a2, __int16 *a3)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  v69[0] = 0;
  v69[1] = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  bzero(&v43, 0xB8uLL);
  bzero(v75, 0xC0uLL);
  if (!setjmp(v75)
    && !ventproc(a1, (uint64_t)&v43, (uint64_t)v74, (uint64_t)v73, (uint64_t)v72, (uint64_t)v75))
  {
    get_parm(a1, (uint64_t)&v70, (__int16 *)a2, -6);
    get_parm(a1, (uint64_t)v69, a3, -6);
    LOBYTE(v68) = 0;
    LODWORD(v66) = -65533;
    fence_38(a1, 0, (uint64_t)&null_str_14);
    fence_38(a1, 1, (uint64_t)&_MergedGlobals_34);
    uint64_t v6 = lpta_loadp_setscan_l(a1, (uint64_t)&v70);
    if (!v6 && !OUTLINED_FUNCTION_0_42(v6, v7, v8, (uint64_t *)&unk_268C67E1A))
    {
      uint64_t v42 = 4;
      uint64_t v41 = 5;
      while (2)
      {
        savescptr(a1, 2, (uint64_t)&v70);
        starttest(a1, 3);
        uint64_t inserted = lpta_loadp_setscan_l(a1, (uint64_t)&v70);
        if (inserted
          || (uint64_t v19 = OUTLINED_FUNCTION_13_35(),
              uint64_t inserted = test_string_s(v19, v20, v21, (uint64_t *)&_MergedGlobals_34),
              inserted))
        {
LABEL_20:
          OUTLINED_FUNCTION_15_34(inserted, v12, v13, v14, v15, v16, v17, v18, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51,
            v52,
            v53,
            v54,
            v55,
            v56,
            v57,
            v58,
            v59,
            v60,
            v61,
            v62,
            v63,
            v64,
            v65,
            v66,
            v67,
            v68,
            v69[0]);
          uint64_t v35 = a1;
          uint64_t v36 = 1;
          uint64_t v37 = &unk_268C67E1D;
        }
        else
        {
LABEL_10:
          savescptr(a1, v42, (uint64_t)&v70);
          bspush_ca_scan(a1, v41);
          uint64_t v22 = OUTLINED_FUNCTION_13_35();
          uint64_t v25 = (uint64_t *)&unk_268C67E1B;
LABEL_11:
          if (test_string_s(v22, v23, v24, v25)) {
            goto LABEL_12;
          }
LABEL_17:
          if (testFldeq(a1, 1u, 4, 1) || (BOOL v27 = advance_tok()))
          {
LABEL_12:
            uint64_t v26 = *(void *)(a1 + 104);
            if (v26) {
              uint64_t inserted = OUTLINED_FUNCTION_4_38(v26);
            }
            else {
              uint64_t inserted = vback((void *)a1, 0);
            }
            switch((int)inserted)
            {
              case 2:
                continue;
              case 3:
                goto LABEL_20;
              case 4:
                goto LABEL_10;
              case 5:
                uint64_t v22 = OUTLINED_FUNCTION_13_35();
                uint64_t v25 = (uint64_t *)&unk_268C67E1C;
                goto LABEL_11;
              case 6:
                goto LABEL_17;
              case 7:
                goto LABEL_22;
              default:
                goto LABEL_5;
            }
          }
          OUTLINED_FUNCTION_15_34(v27, v28, v29, v30, v31, v32, v33, v34, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51,
            v52,
            v53,
            v54,
            v55,
            v56,
            v57,
            v58,
            v59,
            v60,
            v61,
            v62,
            v63,
            v64,
            v65,
            v66,
            v67,
            v68,
            v69[0]);
          uint64_t v35 = a1;
          uint64_t v36 = 2;
          uint64_t v37 = &unk_268C67E1F;
        }
        break;
      }
      uint64_t inserted = insert_2pt_s(v35, 4u, v36, (uint64_t)v37, 0);
      if (!inserted)
      {
LABEL_22:
        OUTLINED_FUNCTION_15_34(inserted, v12, v13, v14, v15, v16, v17, v18, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51,
          v52,
          v53,
          v54,
          v55,
          v56,
          v57,
          v58,
          v59,
          v60,
          v61,
          v62,
          v63,
          v64,
          v65,
          v66,
          v67,
          v68,
          v69[0]);
        uint64_t v38 = OUTLINED_FUNCTION_14_35();
        settvar_s(v38, v39, 3u);
        insert_2ptv();
        if (!v40)
        {
          ++*(_WORD *)(a1 + 5946);
          *(void *)(a2 + 8) = v71;
          uint64_t v9 = 0;
          goto LABEL_6;
        }
      }
      goto LABEL_12;
    }
  }
LABEL_5:
  uint64_t v9 = 94;
LABEL_6:
  vretproc(a1);
  return v9;
}

uint64_t strip_diminutive()
{
  OUTLINED_FUNCTION_11_36();
  uint64_t v98 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_1_40(v3, v4, v5, v6, v7, v8, v9, v10, v37, v39, v41, v43, v45, v47, v49, v51, v53, v55, v57,
    v59,
    v61,
    v63,
    v65,
    v67,
    v69,
    v71,
    v73,
    v75,
    v77,
    v79,
    v81,
    v83,
    v84,
    v85,
    v86,
    v87,
    v88);
  OUTLINED_FUNCTION_6_37();
  uint64_t v11 = setjmp(v2);
  if (v11) {
    goto LABEL_4;
  }
  uint64_t v19 = OUTLINED_FUNCTION_9_36(v11, v12, v13, v14, v15, v16, v17, v18, v38, v40, v42, v44, v46, v48, v50, v52, v54, v56, v58,
          v60,
          v62,
          v64,
          v66,
          v68,
          v70,
          v72,
          v74,
          v76,
          v78,
          v80,
          v82,
          v83,
          v84,
          v85,
          v86,
          v87,
          v88,
          v89,
          v90,
          v91,
          v92,
          v93,
          v94,
          v95,
          v96,
          v97);
  if (v19
    || (OUTLINED_FUNCTION_7_37(v19, (uint64_t)&v87),
        OUTLINED_FUNCTION_8_36(),
        push_ptr_init((uint64_t)v0, (uint64_t)&v83),
        fence_38((uint64_t)v0, 0, (uint64_t)&null_str_14),
        fence_38((uint64_t)v0, 1, (uint64_t)&_MergedGlobals_34),
        starttest((uint64_t)v0, 1),
        uint64_t v20 = OUTLINED_FUNCTION_14_35(),
        lpta_loadp_setscan_l(v20, v21)))
  {
LABEL_4:
    vretproc((uint64_t)v0);
    return 94;
  }
  else
  {
    OUTLINED_FUNCTION_3_39(2);
    int v26 = OUTLINED_FUNCTION_0_42(v23, v24, v25, (uint64_t *)&unk_268C67E18);
    int v27 = 0;
    int v28 = 0;
    if (!v26)
    {
LABEL_6:
      int v28 = v27;
      int v29 = v27;
      if (!test_string_s((uint64_t)v0, 1u, 4u, (uint64_t *)&unk_268C67E23))
      {
LABEL_7:
        int v28 = v29;
        savescptr((uint64_t)v0, 4, (uint64_t)&v83);
        if (!advance_tok() && !advance_tok())
        {
          OUTLINED_FUNCTION_5_37(5);
          bspush_ca_boa((uint64_t)v0);
          int v30 = lpta_loadp_setscan_l((uint64_t)v0, (uint64_t)&v85);
          int v31 = v29;
          if (!v30)
          {
LABEL_10:
            int v28 = v31;
            OUTLINED_FUNCTION_3_39(8);
            if (!OUTLINED_FUNCTION_2_40() && !advance_tok()) {
              int v28 = 1;
            }
          }
        }
      }
    }
    int v29 = v28;
    while (2)
    {
      uint64_t v32 = v0[13];
      if (v32)
      {
        int v33 = OUTLINED_FUNCTION_4_38(v32);
        int v29 = v34;
      }
      else
      {
        int v33 = vback(v0, v29);
        int v29 = 0;
      }
      int v27 = v29;
      int v31 = v29;
      switch(v33)
      {
        case 2:
          int v35 = test_string_s((uint64_t)v0, 1u, 1u, (uint64_t *)&unk_268C67E19);
          int v27 = v29;
          if (!v35) {
            goto LABEL_6;
          }
          continue;
        case 3:
          goto LABEL_6;
        case 4:
          goto LABEL_7;
        case 5:
          suffixes((uint64_t)v0, (__int16 *)&v83, (__int16 *)&v85, (__int16 *)&v87);
          goto LABEL_23;
        case 6:
          bspop_boa(v0);
          goto LABEL_4;
        case 7:
          goto LABEL_10;
        case 8:
          BOOL v36 = advance_tok();
          int v31 = v29;
          if (!v36) {
            goto LABEL_10;
          }
          continue;
        case 9:
LABEL_23:
          uint64_t v86 = v84;
          OUTLINED_FUNCTION_12_35();
          if (restore_final_accent()) {
            goto LABEL_24;
          }
          goto LABEL_25;
        case 10:
LABEL_24:
          OUTLINED_FUNCTION_12_35();
          restore_antepenult_accent();
          break;
        case 11:
        case 12:
          goto LABEL_25;
        default:
          goto LABEL_4;
      }
      break;
    }
LABEL_25:
    *(void *)(v1 + 8) = v86;
    vretproc((uint64_t)v0);
    return 0;
  }
}

uint64_t restore_antepenult_accent()
{
  OUTLINED_FUNCTION_11_36();
  uint64_t v109 = *MEMORY[0x263EF8340];
  v104[0] = 0;
  v104[1] = 0;
  v103[0] = 0;
  v103[1] = 0;
  OUTLINED_FUNCTION_1_40(v2, v3, v4, v5, v6, v7, v8, v9, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84,
    v85,
    v86,
    v87,
    v88,
    v89,
    v90,
    v91,
    v92,
    v93,
    v94,
    v95,
    v96,
    v97,
    v98,
    v99,
    v100,
    v101,
    v102);
  OUTLINED_FUNCTION_6_37();
  if (setjmp(v1)) {
    goto LABEL_3;
  }
  uint64_t v10 = ventproc(v0, (uint64_t)&v74, (uint64_t)v107, (uint64_t)v106, (uint64_t)v105, (uint64_t)v108);
  if (v10) {
    goto LABEL_3;
  }
  OUTLINED_FUNCTION_7_37(v10, (uint64_t)v104);
  OUTLINED_FUNCTION_8_36();
  push_ptr_init(v0, (uint64_t)&v101);
  push_ptr_init(v0, (uint64_t)&v99);
  push_ptr_init(v0, (uint64_t)&v97);
  fence_38(v0, 0, (uint64_t)&null_str_14);
  fence_38(v0, 1, (uint64_t)&_MergedGlobals_34);
  uint64_t v12 = *(unsigned __int16 *)(v0 + 5958);
  starttest(v0, 1);
  if (!lpta_loadp_setscan_l(v0, (uint64_t)v103))
  {
    OUTLINED_FUNCTION_3_39(2);
    OUTLINED_FUNCTION_3_39(3);
    int v16 = OUTLINED_FUNCTION_0_42(v13, v14, v15, (uint64_t *)&unk_268C67E19);
    uint64_t v17 = v12;
    uint64_t v18 = v12;
    if (v16) {
      goto LABEL_16;
    }
LABEL_6:
    uint64_t v12 = v17;
    savescptr(v0, 2, (uint64_t)&v101);
  }
  while (2)
  {
    uint64_t v19 = OUTLINED_FUNCTION_5_37(4);
    int v27 = OUTLINED_FUNCTION_16_33(v19, v20, v21, v22, v23, v24, v25, v26, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84,
            v85,
            v86,
            v87,
            v88,
            v89,
            v90,
            v91,
            v92,
            v93,
            v94,
            v95,
            v96,
            v97,
            v98,
            v99,
            v100,
            v101,
            v102,
            v103[0]);
    uint64_t v28 = v12;
    if (v27)
    {
LABEL_3:
      vretproc(v0);
      return 94;
    }
LABEL_9:
    uint64_t v18 = v28;
    OUTLINED_FUNCTION_3_39(6);
    if (OUTLINED_FUNCTION_2_40()) {
      goto LABEL_16;
    }
    BOOL v29 = advance_tok();
    uint64_t v30 = v18;
    if (v29) {
      goto LABEL_16;
    }
LABEL_11:
    uint64_t v18 = v30;
    OUTLINED_FUNCTION_3_39(8);
    if (OUTLINED_FUNCTION_2_40()) {
      goto LABEL_16;
    }
    BOOL v31 = advance_tok();
    uint64_t v32 = v18;
    if (v31) {
      goto LABEL_16;
    }
LABEL_13:
    uint64_t v18 = v32;
    OUTLINED_FUNCTION_3_39(10);
LABEL_14:
    savescptr(v0, 11, (uint64_t)&v97);
    if (OUTLINED_FUNCTION_2_40()) {
      goto LABEL_16;
    }
    BOOL v33 = advance_tok();
    uint64_t v34 = v18;
    if (v33) {
      goto LABEL_16;
    }
LABEL_37:
    uint64_t v18 = v34;
    savescptr(v0, 12, (uint64_t)&v99);
    uint64_t v41 = OUTLINED_FUNCTION_5_37(13);
    if (!OUTLINED_FUNCTION_16_33(v41, v42, v43, v44, v45, v46, v47, v48, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84,
                          v85,
                          v86,
                          v87,
                          v88,
                          v89,
                          v90,
                          v91,
                          v92,
                          v93,
                          v94,
                          v95,
                          v96,
                          v97,
                          v98,
                          v99,
                          v100,
                          v101,
                          v102,
                          v103[0]))
    {
      OUTLINED_FUNCTION_3_39(14);
      int v61 = OUTLINED_FUNCTION_0_42(v58, v59, v60, (uint64_t *)&unk_268C67E19);
      uint64_t v37 = v18;
      if (v61) {
        goto LABEL_16;
      }
LABEL_48:
      uint64_t v18 = v37;
      OUTLINED_FUNCTION_3_39(16);
      uint64_t v70 = (uint64_t *)&_MergedGlobals_34;
      uint64_t v72 = v0;
      unsigned int v71 = 1;
      goto LABEL_49;
    }
LABEL_38:
    OUTLINED_FUNCTION_5_37(19);
    if (!lpta_loadp_setscan_r(v0, (uint64_t)&v99))
    {
      OUTLINED_FUNCTION_3_39(20);
      int v65 = OUTLINED_FUNCTION_0_42(v62, v63, v64, (uint64_t *)&_MergedGlobals_34);
      uint64_t v38 = v18;
      if (v65) {
        goto LABEL_16;
      }
LABEL_54:
      uint64_t v18 = v38;
      lpta_rpta_loadp(v0, (uint64_t)v104, (uint64_t)&v101);
      if (!setd_lookup((void *)v0, 1u, 59))
      {
        uint64_t v40 = *(unsigned __int16 *)(v0 + 5962);
        goto LABEL_50;
      }
LABEL_16:
      uint64_t v35 = *(void *)(v0 + 104);
      if (v35) {
        uint64_t v36 = OUTLINED_FUNCTION_4_38(v35);
      }
      else {
        uint64_t v36 = vback((void *)v0, 0);
      }
      uint64_t v17 = v18;
      uint64_t v28 = v18;
      uint64_t v30 = v18;
      uint64_t v32 = v18;
      uint64_t v37 = v18;
      uint64_t v38 = v18;
      uint64_t v39 = v18;
      uint64_t v40 = v18;
      switch((int)v36)
      {
        case 1:
          uint64_t v12 = v18;
          continue;
        case 2:
          goto LABEL_6;
        case 3:
          if (OUTLINED_FUNCTION_0_42(v36, v18, v18, (uint64_t *)&unk_268C67E18)) {
            goto LABEL_16;
          }
          uint64_t v17 = v18;
          goto LABEL_6;
        case 5:
          goto LABEL_9;
        case 6:
          if (advance_tok()) {
            goto LABEL_16;
          }
          uint64_t v28 = v18;
          goto LABEL_9;
        case 7:
          goto LABEL_11;
        case 8:
          if (advance_tok()) {
            goto LABEL_16;
          }
          uint64_t v30 = v18;
          goto LABEL_11;
        case 9:
          goto LABEL_13;
        case 10:
          if (advance_tok()) {
            goto LABEL_16;
          }
          uint64_t v32 = v18;
          goto LABEL_13;
        case 11:
          goto LABEL_14;
        case 12:
          uint64_t v34 = v18;
          goto LABEL_37;
        case 13:
          goto LABEL_38;
        case 14:
          if (OUTLINED_FUNCTION_0_42(v36, v18, v18, (uint64_t *)&unk_268C67E18)) {
            goto LABEL_16;
          }
          uint64_t v37 = v18;
          goto LABEL_48;
        case 15:
          goto LABEL_48;
        case 16:
          if (OUTLINED_FUNCTION_0_42(v36, v18, v18, (uint64_t *)&unk_268C67E1E)) {
            goto LABEL_16;
          }
          uint64_t v40 = v18;
          goto LABEL_50;
        case 17:
        case 18:
        case 26:
          goto LABEL_50;
        case 19:
          goto LABEL_39;
        case 20:
          if (OUTLINED_FUNCTION_0_42(v36, v18, v18, (uint64_t *)&unk_268C67E19)) {
            goto LABEL_16;
          }
          uint64_t v38 = v18;
          goto LABEL_54;
        case 21:
          goto LABEL_54;
        case 22:
          goto LABEL_40;
        case 23:
          if (OUTLINED_FUNCTION_0_42(v36, v18, v18, (uint64_t *)&unk_268C67E18)) {
            goto LABEL_16;
          }
          uint64_t v39 = v18;
          goto LABEL_47;
        case 24:
          goto LABEL_47;
        case 27:
          goto LABEL_52;
        case 28:
          goto LABEL_53;
        default:
          goto LABEL_3;
      }
    }
    break;
  }
LABEL_39:
  uint64_t v49 = OUTLINED_FUNCTION_5_37(22);
  if (OUTLINED_FUNCTION_16_33(v49, v50, v51, v52, v53, v54, v55, v56, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84,
                       v85,
                       v86,
                       v87,
                       v88,
                       v89,
                       v90,
                       v91,
                       v92,
                       v93,
                       v94,
                       v95,
                       v96,
                       v97,
                       v98,
                       v99,
                       v100,
                       v101,
                       v102,
                       v103[0]))
  {
LABEL_40:
    lpta_rpta_loadp(v0, (uint64_t)v104, (uint64_t)&v101);
    BOOL v57 = setd_lookup((void *)v0, 1u, 58);
    uint64_t v40 = v18;
    if (v57) {
      goto LABEL_3;
    }
    goto LABEL_50;
  }
  OUTLINED_FUNCTION_3_39(23);
  int v69 = OUTLINED_FUNCTION_0_42(v66, v67, v68, (uint64_t *)&unk_268C67E19);
  uint64_t v39 = v18;
  if (v69) {
    goto LABEL_16;
  }
LABEL_47:
  uint64_t v18 = v39;
  uint64_t v70 = (uint64_t *)&unk_268C67E21;
  unsigned int v71 = 2;
  uint64_t v72 = v0;
LABEL_49:
  int v73 = test_string_s(v72, 1u, v71, v70);
  uint64_t v40 = v18;
  if (v73) {
    goto LABEL_16;
  }
LABEL_50:
  uint64_t v18 = v40;
  OUTLINED_FUNCTION_5_37(27);
  if (*(unsigned __int16 *)(v0 + 5958) == (unsigned __int16)v18)
  {
    lpta_rpta_loadp(v0, (uint64_t)&v99, (uint64_t)&v97);
    if (!OUTLINED_FUNCTION_10_36()) {
      goto LABEL_53;
    }
  }
LABEL_52:
  lpta_rpta_loadp(v0, (uint64_t)&v99, (uint64_t)&v97);
  if (mark_s()) {
    goto LABEL_16;
  }
LABEL_53:
  *(_WORD *)(v0 + 5954) = *(_WORD *)(v0 + 1010);
  vretproc(v0);
  return 0;
}

uint64_t restore_final_accent()
{
  OUTLINED_FUNCTION_11_36();
  uint64_t v103 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_1_40(v2, v3, v4, v5, v6, v7, v8, v9, v42, v44, v46, v48, v50, v52, v54, v56, v58, v60, v62,
    v64,
    v66,
    v68,
    v70,
    v72,
    v74,
    v76,
    v78,
    v80,
    v82,
    v84,
    v86,
    v88,
    v89,
    v90,
    v91,
    v92,
    v93);
  OUTLINED_FUNCTION_6_37();
  uint64_t v10 = setjmp(v1);
  if (v10) {
    goto LABEL_4;
  }
  uint64_t v18 = OUTLINED_FUNCTION_9_36(v10, v11, v12, v13, v14, v15, v16, v17, v43, v45, v47, v49, v51, v53, v55, v57, v59, v61, v63,
          v65,
          v67,
          v69,
          v71,
          v73,
          v75,
          v77,
          v79,
          v81,
          v83,
          v85,
          v87,
          v88,
          v89,
          v90,
          v91,
          v92,
          v93,
          v94,
          v95,
          v96,
          v97,
          v98,
          v99,
          v100,
          v101,
          v102);
  if (v18) {
    goto LABEL_4;
  }
  OUTLINED_FUNCTION_7_37(v18, (uint64_t)&v92);
  OUTLINED_FUNCTION_8_36();
  push_ptr_init(v0, (uint64_t)&v88);
  fence_38(v0, 0, (uint64_t)&null_str_14);
  fence_38(v0, 1, (uint64_t)&_MergedGlobals_34);
  starttest(v0, 1);
  if (lpta_loadp_setscan_l(v0, (uint64_t)&v90)) {
    goto LABEL_4;
  }
  OUTLINED_FUNCTION_3_39(2);
  int v21 = test_string_s(v0, 1u, 1u, (uint64_t *)&_MergedGlobals_34);
  int v22 = 0;
  int v23 = 0;
  if (v21)
  {
LABEL_15:
    int v24 = v23;
    while (2)
    {
      uint64_t v36 = *(void *)(v0 + 104);
      if (v36)
      {
        int v37 = OUTLINED_FUNCTION_4_38(v36);
        int v24 = v38;
      }
      else
      {
        int v37 = vback((void *)v0, v24);
        int v24 = 0;
      }
      int v22 = v24;
      int v34 = v24;
      int v31 = v24;
      switch(v37)
      {
        case 2:
          int v39 = test_string_s(v0, 1u, 1u, (uint64_t *)&unk_268C67E19);
          int v22 = v24;
          if (!v39) {
            break;
          }
          continue;
        case 3:
          goto LABEL_7;
        case 4:
          goto LABEL_8;
        case 5:
          bspush_nboa(v0);
          *(unsigned char *)(v0 + 136) = 1;
          *(void *)(v0 + 112) = v93;
          *(void *)(v0 + 128) = 0;
          int v40 = test_ptr(v0);
          int v31 = v24;
          if (!v40) {
            goto LABEL_9;
          }
          continue;
        case 6:
          bspop_boa(v0);
          BOOL v41 = advance_tok();
          int v34 = v24;
          if (!v41) {
            goto LABEL_12;
          }
          continue;
        case 7:
          goto LABEL_12;
        case 8:
        case 10:
          goto LABEL_9;
        default:
          goto LABEL_4;
      }
      break;
    }
  }
LABEL_7:
  int v24 = v22;
  savescptr(v0, 3, (uint64_t)&v88);
  OUTLINED_FUNCTION_5_37(4);
  uint64_t v25 = OUTLINED_FUNCTION_14_35();
  if (!lpta_loadp_setscan_l(v25, v26))
  {
    bspush_boa(v0);
    int v34 = v24;
LABEL_12:
    int v35 = v34;
    OUTLINED_FUNCTION_3_39(5);
    bspush_ca_scan_boa(v0, 6);
    if (OUTLINED_FUNCTION_2_40()) {
      int v23 = v35;
    }
    else {
      int v23 = 1;
    }
    goto LABEL_15;
  }
LABEL_8:
  OUTLINED_FUNCTION_5_37(9);
  uint64_t v27 = OUTLINED_FUNCTION_12_35();
  lpta_rpta_loadp(v27, v28, v29);
  BOOL v30 = setd_lookup((void *)v0, 1u, 60);
  int v31 = v24;
  if (!v30)
  {
LABEL_9:
    int v32 = v31;
    lpta_rpta_loadp(v0, (uint64_t)&v88, (uint64_t)&v90);
    int v33 = OUTLINED_FUNCTION_10_36();
    int v23 = v32;
    if (!v33)
    {
      uint64_t v19 = 0;
      *(_WORD *)(v0 + 5954) = *(_WORD *)(v0 + 1018);
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_4:
  uint64_t v19 = 94;
LABEL_5:
  vretproc(v0);
  return v19;
}

uint64_t OUTLINED_FUNCTION_0_42(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return test_string_s(v4, 1u, 1u, a4);
}

void OUTLINED_FUNCTION_1_40(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  a36 = 0;
  a37 = 0;
  a34 = 0;
  a35 = 0;
  a32 = 0;
  a33 = 0;
  bzero(&a9, 0xB8uLL);
}

BOOL OUTLINED_FUNCTION_2_40()
{
  return testFldeq(v0, 1u, 4, 1);
}

double OUTLINED_FUNCTION_3_39@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = bspush_ca_scan(v1, a1).n128_u64[0];
  return result;
}

uint64_t OUTLINED_FUNCTION_4_38@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 104) = 0;
  return a1;
}

uint64_t OUTLINED_FUNCTION_5_37@<X0>(uint64_t a1@<X8>)
{
  return starttest(v1, a1);
}

void OUTLINED_FUNCTION_6_37()
{
  bzero((void *)(v0 - 248), 0xC0uLL);
}

void OUTLINED_FUNCTION_7_37(uint64_t a1, uint64_t a2)
{
  get_parm(v2, a2, v3, -6);
}

void OUTLINED_FUNCTION_8_36()
{
  get_parm(v0, v2, v1, v3);
}

uint64_t OUTLINED_FUNCTION_9_36(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,char a39,int a40,__int16 a41,char a42,int a43,__int16 a44,char a45,char a46)
{
  return ventproc(v46, (uint64_t)&a9, (uint64_t)&a46, (uint64_t)&a42, (uint64_t)&a39, v47 - 248);
}

uint64_t OUTLINED_FUNCTION_10_36()
{
  return mark_s();
}

uint64_t OUTLINED_FUNCTION_12_35()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_35()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_14_35()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_15_34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  return lpta_rpta_loadp(v37, v38, (uint64_t)&a37);
}

uint64_t OUTLINED_FUNCTION_16_33(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  return lpta_loadp_setscan_l(v38, (uint64_t)&a38);
}

void *fence_39(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 192) + 8121) = 0;
  return memset(*(void **)(a1 + 264), *(unsigned __int8 *)(a1 + 288), *(unsigned __int8 *)(a1 + 288));
}

uint64_t print_por_SPR(void *a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  OUTLINED_FUNCTION_8_37((int)a1, a2, a3, a4, a5, a6, a7, a8, v74, v80, v86, v92, v98, v104, v110, v116, v122, v128, v134,
    v140,
    v146,
    v152,
    v158,
    v164,
    v170,
    v176,
    v182,
    v188,
    v194,
    v200,
    v206,
    v212,
    v213,
    v214,
    v215);
  OUTLINED_FUNCTION_11_37(v11, v12, v13, v14, v15, v16, v17, v18, v75, v81, v87, v93, v99, v105, v111, v117, v123, v129, v135,
    v141,
    v147,
    v153,
    v159,
    v165,
    v171,
    v177,
    v183,
    v189,
    v195,
    v201,
    v207,
    v212,
    v213,
    v214,
    v215,
    v216,
    v217,
    v218,
    v219,
    v220);
  uint64_t v19 = setjmp(v8);
  if (!v19)
  {
    uint64_t v27 = OUTLINED_FUNCTION_10_37(v19, v20, v21, v22, v23, v24, v25, v26, v76, v82, v88, v94, v100, v106, v112, v118, v124, v130, v136,
            v142,
            v148,
            v154,
            v160,
            v166,
            v172,
            v178,
            v184,
            v190,
            v196,
            v202,
            v208,
            v212,
            v213,
            v214,
            v215,
            v216,
            SBYTE4(v216),
            v217,
            SWORD2(v217),
            SBYTE6(v217),
            v218,
            SWORD2(v218),
            SBYTE6(v218),
            SHIBYTE(v218),
            v219,
            v220);
    if (!v27)
    {
      OUTLINED_FUNCTION_9_37(v27, v28, v29, v30, v31, v32, v33, v34, v77, v83, v89, v95, v101, v107, v113, v119, v125, v131, v137,
        v143,
        v149,
        v155,
        v161,
        v167,
        v173,
        v179,
        v185,
        v191,
        v197,
        v203,
        v209,
        v212,
        v213,
        v214);
      OUTLINED_FUNCTION_12_36(v37, v38, v39, v40, v41, v42, v43, v44, v78, v84, v90, v96, v102, v108, v114, v120, v126, v132, v138,
        v144,
        v150,
        v156,
        v162,
        v168,
        v174,
        v180,
        v186,
        v192,
        v198,
        v204,
        v210,
        v212);
      fence_39((uint64_t)a1);
      uint64_t v45 = lpta_loadp_setscan_r((uint64_t)a1, (uint64_t)v8);
      if (v45 || (uint64_t v45 = OUTLINED_FUNCTION_7_38(v45, v46, v47, (uint64_t *)&_MergedGlobals_35), v45))
      {
        while (2)
        {
          uint64_t v45 = OUTLINED_FUNCTION_6_38(v45, v46, v47, v48, v49, v50, v51, v52, v79, v85, v91, v97, v103, v109, v115, v121, v127, v133, v139,
                  v145,
                  v151,
                  v157,
                  v163,
                  v169,
                  v175,
                  v181,
                  v187,
                  v193,
                  v199,
                  v205,
                  v211,
                  v212,
                  v213,
                  v214);
          if (!v45)
          {
            uint64_t v45 = OUTLINED_FUNCTION_7_38(v45, v46, v47, (uint64_t *)&unk_268C67E2D);
            if (!v45)
            {
              uint64_t v73 = "'e~'";
              goto LABEL_36;
            }
          }
LABEL_9:
          uint64_t v45 = OUTLINED_FUNCTION_6_38(v45, v46, v47, v48, v49, v50, v51, v52, v79, v85, v91, v97, v103, v109, v115, v121, v127, v133, v139,
                  v145,
                  v151,
                  v157,
                  v163,
                  v169,
                  v175,
                  v181,
                  v187,
                  v193,
                  v199,
                  v205,
                  v211,
                  v212,
                  v213,
                  v214);
          if (!v45)
          {
            uint64_t v45 = OUTLINED_FUNCTION_7_38(v45, v46, v47, (uint64_t *)&unk_268C67E2E);
            if (!v45)
            {
              uint64_t v73 = "'i~'";
              goto LABEL_36;
            }
          }
LABEL_11:
          uint64_t v45 = OUTLINED_FUNCTION_6_38(v45, v46, v47, v48, v49, v50, v51, v52, v79, v85, v91, v97, v103, v109, v115, v121, v127, v133, v139,
                  v145,
                  v151,
                  v157,
                  v163,
                  v169,
                  v175,
                  v181,
                  v187,
                  v193,
                  v199,
                  v205,
                  v211,
                  v212,
                  v213,
                  v214);
          if (!v45)
          {
            uint64_t v45 = OUTLINED_FUNCTION_7_38(v45, v46, v47, (uint64_t *)&unk_268C67E2F);
            if (!v45)
            {
              uint64_t v73 = "'o~'";
              goto LABEL_36;
            }
          }
LABEL_13:
          uint64_t v45 = OUTLINED_FUNCTION_6_38(v45, v46, v47, v48, v49, v50, v51, v52, v79, v85, v91, v97, v103, v109, v115, v121, v127, v133, v139,
                  v145,
                  v151,
                  v157,
                  v163,
                  v169,
                  v175,
                  v181,
                  v187,
                  v193,
                  v199,
                  v205,
                  v211,
                  v212,
                  v213,
                  v214);
          if (!v45)
          {
            uint64_t v45 = OUTLINED_FUNCTION_7_38(v45, v46, v47, (uint64_t *)&unk_268C67E30);
            if (!v45)
            {
              uint64_t v73 = "'u~'";
              goto LABEL_36;
            }
          }
LABEL_15:
          uint64_t v53 = OUTLINED_FUNCTION_6_38(v45, v46, v47, v48, v49, v50, v51, v52, v79, v85, v91, v97, v103, v109, v115, v121, v127, v133, v139,
                  v145,
                  v151,
                  v157,
                  v163,
                  v169,
                  v175,
                  v181,
                  v187,
                  v193,
                  v199,
                  v205,
                  v211,
                  v212,
                  v213,
                  v214);
          if (!v53 && !OUTLINED_FUNCTION_7_38(v53, v54, v55, (uint64_t *)&unk_268C67E31))
          {
            uint64_t v73 = "'ly'";
            goto LABEL_36;
          }
LABEL_17:
          uint64_t v56 = starttest((uint64_t)a1, 8);
          if (OUTLINED_FUNCTION_6_38(v56, v57, v58, v59, v60, v61, v62, v63, v79, v85, v91, v97, v103, v109, v115, v121, v127, v133, v139,
                               v145,
                               v151,
                               v157,
                               v163,
                               v169,
                               v175,
                               v181,
                               v187,
                               v193,
                               v199,
                               v205,
                               v211,
                               v212,
                               v213,
                               v214))
          {
LABEL_22:
            uint64_t v64 = starttest((uint64_t)a1, 10);
            uint64_t v45 = OUTLINED_FUNCTION_6_38(v64, v65, v66, v67, v68, v69, v70, v71, v79, v85, v91, v97, v103, v109, v115, v121, v127, v133, v139,
                    v145,
                    v151,
                    v157,
                    v163,
                    v169,
                    v175,
                    v181,
                    v187,
                    v193,
                    v199,
                    v205,
                    v211,
                    v212,
                    v213,
                    v214);
            if (v45)
            {
LABEL_31:
              uint64_t v45 = OUTLINED_FUNCTION_6_38(v45, v46, v47, v48, v49, v50, v51, v52, v79, v85, v91, v97, v103, v109, v115, v121, v127, v133, v139,
                      v145,
                      v151,
                      v157,
                      v163,
                      v169,
                      v175,
                      v181,
                      v187,
                      v193,
                      v199,
                      v205,
                      v211,
                      v212,
                      v213,
                      v214);
              if (v45 || (uint64_t v45 = OUTLINED_FUNCTION_7_38(v45, v46, v47, (uint64_t *)&unk_268C67E32), v45))
              {
LABEL_33:
                OUTLINED_FUNCTION_2_41(v45, v46, v47, v48, v49, v50, v51, v52, v79, v85, v91, v97, v103, v109, v115, v121, v127, v133, v139,
                  v145,
                  v151,
                  v157,
                  v163,
                  v169,
                  v175,
                  v181,
                  v187,
                  v193,
                  v199,
                  v205,
                  v211,
                  v212,
                  v213,
                  v214);
                print_stream((uint64_t)a1, 8, 4, 0, (const char *)&unk_240047A1A);
              }
              goto LABEL_37;
            }
            if (!testFldeq((uint64_t)a1, 4u, 10, 2) && !advance_tok() && !advance_tok())
            {
LABEL_35:
              savescptr((uint64_t)a1, 11, (uint64_t)&v212);
              uint64_t v73 = "J";
              goto LABEL_36;
            }
          }
          else if (!testFldeq((uint64_t)a1, 4u, 10, 1) && !advance_tok() && !advance_tok())
          {
LABEL_30:
            savescptr((uint64_t)a1, 9, (uint64_t)&v212);
            uint64_t v73 = "C";
LABEL_36:
            print_lit((uint64_t)a1, 8, (uint64_t)v73);
LABEL_37:
            *(void *)(a3 + 8) = v213;
            uint64_t v35 = 0;
            goto LABEL_4;
          }
          uint64_t v72 = a1[13];
          if (v72)
          {
            a1[13] = 0;
            uint64_t v45 = v72;
          }
          else
          {
            uint64_t v45 = vback(a1, 0);
          }
          switch((int)v45)
          {
            case 1:
              continue;
            case 2:
              goto LABEL_37;
            case 3:
              goto LABEL_9;
            case 4:
              goto LABEL_11;
            case 5:
              goto LABEL_13;
            case 6:
              goto LABEL_15;
            case 7:
              goto LABEL_17;
            case 8:
              goto LABEL_22;
            case 9:
              goto LABEL_30;
            case 10:
              goto LABEL_31;
            case 11:
              goto LABEL_35;
            case 12:
              goto LABEL_33;
            default:
              goto LABEL_3;
          }
        }
      }
      uint64_t v73 = "'a~'";
      goto LABEL_36;
    }
  }
LABEL_3:
  uint64_t v35 = 94;
LABEL_4:
  vretproc((uint64_t)a1);
  return v35;
}

uint64_t insert_por_spr_phone(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  OUTLINED_FUNCTION_8_37(a1, a2, a3, a4, a5, a6, a7, a8, v472, v516, v560, v604, v648, v692, v736, v780, v824, v868, v912,
    v956,
    v1000,
    v1044,
    v1088,
    v1132,
    v1176,
    v1220,
    v1264,
    v1308,
    v1352,
    v1396,
    v1440,
    v1484,
    v1528,
    v1571,
    v1613);
  OUTLINED_FUNCTION_11_37(v10, v11, v12, v13, v14, v15, v16, v17, v473, v517, v561, v605, v649, v693, v737, v781, v825, v869, v913,
    v957,
    v1001,
    v1045,
    v1089,
    v1133,
    v1177,
    v1221,
    v1265,
    v1309,
    v1353,
    v1397,
    v1441,
    v1485,
    v1529,
    v1572,
    v1614,
    v1616,
    v1618,
    v1620,
    v1622,
    v1624);
  uint64_t v18 = setjmp(v8);
  if (v18) {
    goto LABEL_3;
  }
  uint64_t v26 = OUTLINED_FUNCTION_10_37(v18, v19, v20, v21, v22, v23, v24, v25, v474, v518, v562, v606, v650, v694, v738, v782, v826, v870, v914,
          v958,
          v1002,
          v1046,
          v1090,
          v1134,
          v1178,
          v1222,
          v1266,
          v1310,
          v1354,
          v1398,
          v1442,
          v1486,
          v1530,
          v1573,
          v1615,
          *(int *)v1617,
          v1617[4],
          *(int *)v1619,
          *(__int16 *)&v1619[4],
          v1619[6],
          v1621,
          SWORD2(v1621),
          SBYTE6(v1621),
          SHIBYTE(v1621),
          v1623,
          v1625);
  if (v26) {
    goto LABEL_3;
  }
  OUTLINED_FUNCTION_9_37(v26, v27, v28, v29, v30, v31, v32, v33, v475, v519, v563, v607, v651, v695, v739, v783, v827, v871, v915,
    v959,
    v1003,
    v1047,
    v1091,
    v1135,
    v1179,
    v1223,
    v1267,
    v1311,
    v1355,
    v1399,
    v1443,
    v1487,
    v1531,
    v1574);
  OUTLINED_FUNCTION_12_36(v35, v36, v37, v38, v39, v40, v41, v42, v476, v520, v564, v608, v652, v696, v740, v784, v828, v872, v916,
    v960,
    v1004,
    v1048,
    v1092,
    v1136,
    v1180,
    v1224,
    v1268,
    v1312,
    v1356,
    v1400,
    v1444,
    v1488);
  fence_39(a1);
  uint64_t v43 = lpta_loadp_setscan_r(a1, (uint64_t)v8);
  if (!v43)
  {
    uint64_t v43 = OUTLINED_FUNCTION_1_41(v43, v44, v45, (uint64_t *)&unk_268C67E33);
    if (!v43)
    {
      uint64_t v43 = OUTLINED_FUNCTION_0_43(v43, v44, v45, v46, v47, v48, v49, v50, v477, v521, v565, v609, v653, v697, v741, v785, v829, v873, v917,
              v961,
              v1005,
              v1049,
              v1093,
              v1137,
              v1181,
              v1225,
              v1269,
              v1313,
              v1357,
              v1401,
              v1445,
              v1489,
              v1532);
      if (!v43)
      {
        uint64_t v51 = OUTLINED_FUNCTION_2_41(v43, v44, v45, v46, v47, v48, v49, v50, v477, v521, v565, v609, v653, v697, v741, v785, v829, v873, v917,
                v961,
                v1005,
                v1049,
                v1093,
                v1137,
                v1181,
                v1225,
                v1269,
                v1313,
                v1357,
                v1401,
                v1445,
                v1489,
                v1532,
                v1575);
        uint64_t v43 = OUTLINED_FUNCTION_3_40(v51, v52, v53, (uint64_t)&unk_268C67E34, 0);
        if (!v43) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v54 = OUTLINED_FUNCTION_4_39(v43, v44, v45, v46, v47, v48, v49, v50, v477, v521, v565, v609, v653, v697, v741, v785, v829, v873, v917,
          v961,
          v1005,
          v1049,
          v1093,
          v1137,
          v1181,
          v1225,
          v1269,
          v1313,
          v1357,
          v1401,
          v1445,
          v1489,
          v1532,
          v1575);
  if (!v54)
  {
    uint64_t v54 = OUTLINED_FUNCTION_1_41(v54, v55, v56, (uint64_t *)&unk_268C67E35);
    if (!v54)
    {
      uint64_t v54 = OUTLINED_FUNCTION_0_43(v54, v55, v56, v57, v58, v59, v60, v61, v478, v522, v566, v610, v654, v698, v742, v786, v830, v874, v918,
              v962,
              v1006,
              v1050,
              v1094,
              v1138,
              v1182,
              v1226,
              v1270,
              v1314,
              v1358,
              v1402,
              v1446,
              v1490,
              v1533);
      if (!v54)
      {
        uint64_t v62 = OUTLINED_FUNCTION_2_41(v54, v55, v56, v57, v58, v59, v60, v61, v478, v522, v566, v610, v654, v698, v742, v786, v830, v874, v918,
                v962,
                v1006,
                v1050,
                v1094,
                v1138,
                v1182,
                v1226,
                v1270,
                v1314,
                v1358,
                v1402,
                v1446,
                v1490,
                v1533,
                v1576);
        uint64_t v54 = OUTLINED_FUNCTION_3_40(v62, v63, v64, (uint64_t)&unk_268C67E36, 0);
        if (!v54) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v65 = OUTLINED_FUNCTION_4_39(v54, v55, v56, v57, v58, v59, v60, v61, v478, v522, v566, v610, v654, v698, v742, v786, v830, v874, v918,
          v962,
          v1006,
          v1050,
          v1094,
          v1138,
          v1182,
          v1226,
          v1270,
          v1314,
          v1358,
          v1402,
          v1446,
          v1490,
          v1533,
          v1576);
  if (!v65)
  {
    uint64_t v65 = OUTLINED_FUNCTION_1_41(v65, v66, v67, (uint64_t *)&unk_268C67E37);
    if (!v65)
    {
      uint64_t v65 = OUTLINED_FUNCTION_0_43(v65, v66, v67, v68, v69, v70, v71, v72, v479, v523, v567, v611, v655, v699, v743, v787, v831, v875, v919,
              v963,
              v1007,
              v1051,
              v1095,
              v1139,
              v1183,
              v1227,
              v1271,
              v1315,
              v1359,
              v1403,
              v1447,
              v1491,
              v1534);
      if (!v65)
      {
        uint64_t v73 = OUTLINED_FUNCTION_2_41(v65, v66, v67, v68, v69, v70, v71, v72, v479, v523, v567, v611, v655, v699, v743, v787, v831, v875, v919,
                v963,
                v1007,
                v1051,
                v1095,
                v1139,
                v1183,
                v1227,
                v1271,
                v1315,
                v1359,
                v1403,
                v1447,
                v1491,
                v1534,
                v1577);
        uint64_t v65 = OUTLINED_FUNCTION_3_40(v73, v74, v75, (uint64_t)&unk_268C67E38, 0);
        if (!v65) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v76 = OUTLINED_FUNCTION_4_39(v65, v66, v67, v68, v69, v70, v71, v72, v479, v523, v567, v611, v655, v699, v743, v787, v831, v875, v919,
          v963,
          v1007,
          v1051,
          v1095,
          v1139,
          v1183,
          v1227,
          v1271,
          v1315,
          v1359,
          v1403,
          v1447,
          v1491,
          v1534,
          v1577);
  if (!v76)
  {
    uint64_t v76 = OUTLINED_FUNCTION_1_41(v76, v77, v78, (uint64_t *)&unk_268C67E39);
    if (!v76)
    {
      uint64_t v76 = OUTLINED_FUNCTION_0_43(v76, v77, v78, v79, v80, v81, v82, v83, v480, v524, v568, v612, v656, v700, v744, v788, v832, v876, v920,
              v964,
              v1008,
              v1052,
              v1096,
              v1140,
              v1184,
              v1228,
              v1272,
              v1316,
              v1360,
              v1404,
              v1448,
              v1492,
              v1535);
      if (!v76)
      {
        uint64_t v84 = OUTLINED_FUNCTION_2_41(v76, v77, v78, v79, v80, v81, v82, v83, v480, v524, v568, v612, v656, v700, v744, v788, v832, v876, v920,
                v964,
                v1008,
                v1052,
                v1096,
                v1140,
                v1184,
                v1228,
                v1272,
                v1316,
                v1360,
                v1404,
                v1448,
                v1492,
                v1535,
                v1578);
        uint64_t v76 = OUTLINED_FUNCTION_3_40(v84, v85, v86, (uint64_t)&unk_268C67E3A, 0);
        if (!v76) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v87 = OUTLINED_FUNCTION_4_39(v76, v77, v78, v79, v80, v81, v82, v83, v480, v524, v568, v612, v656, v700, v744, v788, v832, v876, v920,
          v964,
          v1008,
          v1052,
          v1096,
          v1140,
          v1184,
          v1228,
          v1272,
          v1316,
          v1360,
          v1404,
          v1448,
          v1492,
          v1535,
          v1578);
  if (!v87)
  {
    uint64_t v87 = OUTLINED_FUNCTION_1_41(v87, v88, v89, (uint64_t *)&unk_268C67E3B);
    if (!v87)
    {
      uint64_t v87 = OUTLINED_FUNCTION_0_43(v87, v88, v89, v90, v91, v92, v93, v94, v481, v525, v569, v613, v657, v701, v745, v789, v833, v877, v921,
              v965,
              v1009,
              v1053,
              v1097,
              v1141,
              v1185,
              v1229,
              v1273,
              v1317,
              v1361,
              v1405,
              v1449,
              v1493,
              v1536);
      if (!v87)
      {
        uint64_t v95 = OUTLINED_FUNCTION_2_41(v87, v88, v89, v90, v91, v92, v93, v94, v481, v525, v569, v613, v657, v701, v745, v789, v833, v877, v921,
                v965,
                v1009,
                v1053,
                v1097,
                v1141,
                v1185,
                v1229,
                v1273,
                v1317,
                v1361,
                v1405,
                v1449,
                v1493,
                v1536,
                v1579);
        uint64_t v87 = OUTLINED_FUNCTION_3_40(v95, v96, v97, (uint64_t)&unk_268C67E3C, 0);
        if (!v87) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v98 = OUTLINED_FUNCTION_4_39(v87, v88, v89, v90, v91, v92, v93, v94, v481, v525, v569, v613, v657, v701, v745, v789, v833, v877, v921,
          v965,
          v1009,
          v1053,
          v1097,
          v1141,
          v1185,
          v1229,
          v1273,
          v1317,
          v1361,
          v1405,
          v1449,
          v1493,
          v1536,
          v1579);
  if (!v98)
  {
    uint64_t v98 = OUTLINED_FUNCTION_1_41(v98, v99, v100, (uint64_t *)&unk_268C67E3D);
    if (!v98)
    {
      uint64_t v98 = OUTLINED_FUNCTION_0_43(v98, v99, v100, v101, v102, v103, v104, v105, v482, v526, v570, v614, v658, v702, v746, v790, v834, v878, v922,
              v966,
              v1010,
              v1054,
              v1098,
              v1142,
              v1186,
              v1230,
              v1274,
              v1318,
              v1362,
              v1406,
              v1450,
              v1494,
              v1537);
      if (!v98)
      {
        uint64_t v106 = OUTLINED_FUNCTION_2_41(v98, v99, v100, v101, v102, v103, v104, v105, v482, v526, v570, v614, v658, v702, v746, v790, v834, v878, v922,
                 v966,
                 v1010,
                 v1054,
                 v1098,
                 v1142,
                 v1186,
                 v1230,
                 v1274,
                 v1318,
                 v1362,
                 v1406,
                 v1450,
                 v1494,
                 v1537,
                 v1580);
        uint64_t v98 = OUTLINED_FUNCTION_3_40(v106, v107, v108, (uint64_t)&unk_268C67E3E, 0);
        if (!v98) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v109 = OUTLINED_FUNCTION_4_39(v98, v99, v100, v101, v102, v103, v104, v105, v482, v526, v570, v614, v658, v702, v746, v790, v834, v878, v922,
           v966,
           v1010,
           v1054,
           v1098,
           v1142,
           v1186,
           v1230,
           v1274,
           v1318,
           v1362,
           v1406,
           v1450,
           v1494,
           v1537,
           v1580);
  if (!v109)
  {
    uint64_t v109 = OUTLINED_FUNCTION_1_41(v109, v110, v111, (uint64_t *)&unk_268C67E32);
    if (!v109)
    {
      uint64_t v109 = OUTLINED_FUNCTION_0_43(v109, v110, v111, v112, v113, v114, v115, v116, v483, v527, v571, v615, v659, v703, v747, v791, v835, v879, v923,
               v967,
               v1011,
               v1055,
               v1099,
               v1143,
               v1187,
               v1231,
               v1275,
               v1319,
               v1363,
               v1407,
               v1451,
               v1495,
               v1538);
      if (!v109)
      {
        uint64_t v117 = OUTLINED_FUNCTION_2_41(v109, v110, v111, v112, v113, v114, v115, v116, v483, v527, v571, v615, v659, v703, v747, v791, v835, v879, v923,
                 v967,
                 v1011,
                 v1055,
                 v1099,
                 v1143,
                 v1187,
                 v1231,
                 v1275,
                 v1319,
                 v1363,
                 v1407,
                 v1451,
                 v1495,
                 v1538,
                 v1581);
        uint64_t v109 = OUTLINED_FUNCTION_3_40(v117, v118, v119, (uint64_t)&unk_268C67E3F, 0);
        if (!v109) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v120 = OUTLINED_FUNCTION_4_39(v109, v110, v111, v112, v113, v114, v115, v116, v483, v527, v571, v615, v659, v703, v747, v791, v835, v879, v923,
           v967,
           v1011,
           v1055,
           v1099,
           v1143,
           v1187,
           v1231,
           v1275,
           v1319,
           v1363,
           v1407,
           v1451,
           v1495,
           v1538,
           v1581);
  if (!v120)
  {
    uint64_t v120 = OUTLINED_FUNCTION_1_41(v120, v121, v122, (uint64_t *)&unk_268C67E40);
    if (!v120)
    {
      uint64_t v120 = OUTLINED_FUNCTION_0_43(v120, v121, v122, v123, v124, v125, v126, v127, v484, v528, v572, v616, v660, v704, v748, v792, v836, v880, v924,
               v968,
               v1012,
               v1056,
               v1100,
               v1144,
               v1188,
               v1232,
               v1276,
               v1320,
               v1364,
               v1408,
               v1452,
               v1496,
               v1539);
      if (!v120)
      {
        uint64_t v128 = OUTLINED_FUNCTION_2_41(v120, v121, v122, v123, v124, v125, v126, v127, v484, v528, v572, v616, v660, v704, v748, v792, v836, v880, v924,
                 v968,
                 v1012,
                 v1056,
                 v1100,
                 v1144,
                 v1188,
                 v1232,
                 v1276,
                 v1320,
                 v1364,
                 v1408,
                 v1452,
                 v1496,
                 v1539,
                 v1582);
        uint64_t v120 = OUTLINED_FUNCTION_3_40(v128, v129, v130, (uint64_t)&unk_268C67E41, 0);
        if (!v120) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v131 = OUTLINED_FUNCTION_4_39(v120, v121, v122, v123, v124, v125, v126, v127, v484, v528, v572, v616, v660, v704, v748, v792, v836, v880, v924,
           v968,
           v1012,
           v1056,
           v1100,
           v1144,
           v1188,
           v1232,
           v1276,
           v1320,
           v1364,
           v1408,
           v1452,
           v1496,
           v1539,
           v1582);
  if (!v131)
  {
    uint64_t v131 = OUTLINED_FUNCTION_1_41(v131, v132, v133, (uint64_t *)&unk_268C67E42);
    if (!v131)
    {
      uint64_t v131 = OUTLINED_FUNCTION_0_43(v131, v132, v133, v134, v135, v136, v137, v138, v485, v529, v573, v617, v661, v705, v749, v793, v837, v881, v925,
               v969,
               v1013,
               v1057,
               v1101,
               v1145,
               v1189,
               v1233,
               v1277,
               v1321,
               v1365,
               v1409,
               v1453,
               v1497,
               v1540);
      if (!v131)
      {
        uint64_t v139 = OUTLINED_FUNCTION_2_41(v131, v132, v133, v134, v135, v136, v137, v138, v485, v529, v573, v617, v661, v705, v749, v793, v837, v881, v925,
                 v969,
                 v1013,
                 v1057,
                 v1101,
                 v1145,
                 v1189,
                 v1233,
                 v1277,
                 v1321,
                 v1365,
                 v1409,
                 v1453,
                 v1497,
                 v1540,
                 v1583);
        uint64_t v131 = OUTLINED_FUNCTION_3_40(v139, v140, v141, (uint64_t)&unk_268C67E43, 0);
        if (!v131) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v142 = OUTLINED_FUNCTION_4_39(v131, v132, v133, v134, v135, v136, v137, v138, v485, v529, v573, v617, v661, v705, v749, v793, v837, v881, v925,
           v969,
           v1013,
           v1057,
           v1101,
           v1145,
           v1189,
           v1233,
           v1277,
           v1321,
           v1365,
           v1409,
           v1453,
           v1497,
           v1540,
           v1583);
  if (!v142)
  {
    uint64_t v142 = OUTLINED_FUNCTION_1_41(v142, v143, v144, (uint64_t *)&unk_268C67E44);
    if (!v142)
    {
      uint64_t v142 = OUTLINED_FUNCTION_0_43(v142, v143, v144, v145, v146, v147, v148, v149, v486, v530, v574, v618, v662, v706, v750, v794, v838, v882, v926,
               v970,
               v1014,
               v1058,
               v1102,
               v1146,
               v1190,
               v1234,
               v1278,
               v1322,
               v1366,
               v1410,
               v1454,
               v1498,
               v1541);
      if (!v142)
      {
        uint64_t v150 = OUTLINED_FUNCTION_2_41(v142, v143, v144, v145, v146, v147, v148, v149, v486, v530, v574, v618, v662, v706, v750, v794, v838, v882, v926,
                 v970,
                 v1014,
                 v1058,
                 v1102,
                 v1146,
                 v1190,
                 v1234,
                 v1278,
                 v1322,
                 v1366,
                 v1410,
                 v1454,
                 v1498,
                 v1541,
                 v1584);
        uint64_t v142 = OUTLINED_FUNCTION_3_40(v150, v151, v152, (uint64_t)&unk_268C67E45, 0);
        if (!v142) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v153 = OUTLINED_FUNCTION_4_39(v142, v143, v144, v145, v146, v147, v148, v149, v486, v530, v574, v618, v662, v706, v750, v794, v838, v882, v926,
           v970,
           v1014,
           v1058,
           v1102,
           v1146,
           v1190,
           v1234,
           v1278,
           v1322,
           v1366,
           v1410,
           v1454,
           v1498,
           v1541,
           v1584);
  if (!v153)
  {
    uint64_t v153 = OUTLINED_FUNCTION_1_41(v153, v154, v155, (uint64_t *)&unk_268C67E46);
    if (!v153)
    {
      uint64_t v153 = OUTLINED_FUNCTION_0_43(v153, v154, v155, v156, v157, v158, v159, v160, v487, v531, v575, v619, v663, v707, v751, v795, v839, v883, v927,
               v971,
               v1015,
               v1059,
               v1103,
               v1147,
               v1191,
               v1235,
               v1279,
               v1323,
               v1367,
               v1411,
               v1455,
               v1499,
               v1542);
      if (!v153)
      {
        uint64_t v161 = OUTLINED_FUNCTION_2_41(v153, v154, v155, v156, v157, v158, v159, v160, v487, v531, v575, v619, v663, v707, v751, v795, v839, v883, v927,
                 v971,
                 v1015,
                 v1059,
                 v1103,
                 v1147,
                 v1191,
                 v1235,
                 v1279,
                 v1323,
                 v1367,
                 v1411,
                 v1455,
                 v1499,
                 v1542,
                 v1585);
        uint64_t v153 = OUTLINED_FUNCTION_3_40(v161, v162, v163, (uint64_t)&unk_268C67E47, 0);
        if (!v153) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v164 = OUTLINED_FUNCTION_4_39(v153, v154, v155, v156, v157, v158, v159, v160, v487, v531, v575, v619, v663, v707, v751, v795, v839, v883, v927,
           v971,
           v1015,
           v1059,
           v1103,
           v1147,
           v1191,
           v1235,
           v1279,
           v1323,
           v1367,
           v1411,
           v1455,
           v1499,
           v1542,
           v1585);
  if (!v164)
  {
    uint64_t v164 = OUTLINED_FUNCTION_1_41(v164, v165, v166, (uint64_t *)&unk_268C67E48);
    if (!v164)
    {
      uint64_t v164 = OUTLINED_FUNCTION_0_43(v164, v165, v166, v167, v168, v169, v170, v171, v488, v532, v576, v620, v664, v708, v752, v796, v840, v884, v928,
               v972,
               v1016,
               v1060,
               v1104,
               v1148,
               v1192,
               v1236,
               v1280,
               v1324,
               v1368,
               v1412,
               v1456,
               v1500,
               v1543);
      if (!v164)
      {
        uint64_t v172 = OUTLINED_FUNCTION_2_41(v164, v165, v166, v167, v168, v169, v170, v171, v488, v532, v576, v620, v664, v708, v752, v796, v840, v884, v928,
                 v972,
                 v1016,
                 v1060,
                 v1104,
                 v1148,
                 v1192,
                 v1236,
                 v1280,
                 v1324,
                 v1368,
                 v1412,
                 v1456,
                 v1500,
                 v1543,
                 v1586);
        uint64_t v164 = OUTLINED_FUNCTION_3_40(v172, v173, v174, (uint64_t)&unk_268C67E33, 0);
        if (!v164) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v175 = OUTLINED_FUNCTION_4_39(v164, v165, v166, v167, v168, v169, v170, v171, v488, v532, v576, v620, v664, v708, v752, v796, v840, v884, v928,
           v972,
           v1016,
           v1060,
           v1104,
           v1148,
           v1192,
           v1236,
           v1280,
           v1324,
           v1368,
           v1412,
           v1456,
           v1500,
           v1543,
           v1586);
  if (!v175)
  {
    uint64_t v175 = OUTLINED_FUNCTION_1_41(v175, v176, v177, (uint64_t *)&unk_268C67E2F);
    if (!v175)
    {
      uint64_t v175 = OUTLINED_FUNCTION_0_43(v175, v176, v177, v178, v179, v180, v181, v182, v489, v533, v577, v621, v665, v709, v753, v797, v841, v885, v929,
               v973,
               v1017,
               v1061,
               v1105,
               v1149,
               v1193,
               v1237,
               v1281,
               v1325,
               v1369,
               v1413,
               v1457,
               v1501,
               v1544);
      if (!v175)
      {
        uint64_t v183 = OUTLINED_FUNCTION_2_41(v175, v176, v177, v178, v179, v180, v181, v182, v489, v533, v577, v621, v665, v709, v753, v797, v841, v885, v929,
                 v973,
                 v1017,
                 v1061,
                 v1105,
                 v1149,
                 v1193,
                 v1237,
                 v1281,
                 v1325,
                 v1369,
                 v1413,
                 v1457,
                 v1501,
                 v1544,
                 v1587);
        uint64_t v175 = OUTLINED_FUNCTION_3_40(v183, v184, v185, (uint64_t)&unk_268C67E40, 0);
        if (!v175) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v186 = OUTLINED_FUNCTION_4_39(v175, v176, v177, v178, v179, v180, v181, v182, v489, v533, v577, v621, v665, v709, v753, v797, v841, v885, v929,
           v973,
           v1017,
           v1061,
           v1105,
           v1149,
           v1193,
           v1237,
           v1281,
           v1325,
           v1369,
           v1413,
           v1457,
           v1501,
           v1544,
           v1587);
  if (!v186)
  {
    uint64_t v186 = OUTLINED_FUNCTION_1_41(v186, v187, v188, (uint64_t *)&unk_268C67E49);
    if (!v186)
    {
      uint64_t v186 = OUTLINED_FUNCTION_0_43(v186, v187, v188, v189, v190, v191, v192, v193, v490, v534, v578, v622, v666, v710, v754, v798, v842, v886, v930,
               v974,
               v1018,
               v1062,
               v1106,
               v1150,
               v1194,
               v1238,
               v1282,
               v1326,
               v1370,
               v1414,
               v1458,
               v1502,
               v1545);
      if (!v186)
      {
        uint64_t v194 = OUTLINED_FUNCTION_2_41(v186, v187, v188, v189, v190, v191, v192, v193, v490, v534, v578, v622, v666, v710, v754, v798, v842, v886, v930,
                 v974,
                 v1018,
                 v1062,
                 v1106,
                 v1150,
                 v1194,
                 v1238,
                 v1282,
                 v1326,
                 v1370,
                 v1414,
                 v1458,
                 v1502,
                 v1545,
                 v1588);
        uint64_t v186 = OUTLINED_FUNCTION_3_40(v194, v195, v196, (uint64_t)&unk_268C67E37, 0);
        if (!v186) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v197 = OUTLINED_FUNCTION_4_39(v186, v187, v188, v189, v190, v191, v192, v193, v490, v534, v578, v622, v666, v710, v754, v798, v842, v886, v930,
           v974,
           v1018,
           v1062,
           v1106,
           v1150,
           v1194,
           v1238,
           v1282,
           v1326,
           v1370,
           v1414,
           v1458,
           v1502,
           v1545,
           v1588);
  if (!v197)
  {
    uint64_t v197 = OUTLINED_FUNCTION_1_41(v197, v198, v199, (uint64_t *)&unk_268C67E4A);
    if (!v197)
    {
      uint64_t v197 = OUTLINED_FUNCTION_0_43(v197, v198, v199, v200, v201, v202, v203, v204, v491, v535, v579, v623, v667, v711, v755, v799, v843, v887, v931,
               v975,
               v1019,
               v1063,
               v1107,
               v1151,
               v1195,
               v1239,
               v1283,
               v1327,
               v1371,
               v1415,
               v1459,
               v1503,
               v1546);
      if (!v197)
      {
        uint64_t v205 = OUTLINED_FUNCTION_2_41(v197, v198, v199, v200, v201, v202, v203, v204, v491, v535, v579, v623, v667, v711, v755, v799, v843, v887, v931,
                 v975,
                 v1019,
                 v1063,
                 v1107,
                 v1151,
                 v1195,
                 v1239,
                 v1283,
                 v1327,
                 v1371,
                 v1415,
                 v1459,
                 v1503,
                 v1546,
                 v1589);
        uint64_t v197 = OUTLINED_FUNCTION_3_40(v205, v206, v207, (uint64_t)&unk_268C67E3D, 0);
        if (!v197) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v208 = OUTLINED_FUNCTION_4_39(v197, v198, v199, v200, v201, v202, v203, v204, v491, v535, v579, v623, v667, v711, v755, v799, v843, v887, v931,
           v975,
           v1019,
           v1063,
           v1107,
           v1151,
           v1195,
           v1239,
           v1283,
           v1327,
           v1371,
           v1415,
           v1459,
           v1503,
           v1546,
           v1589);
  if (!v208)
  {
    uint64_t v208 = OUTLINED_FUNCTION_1_41(v208, v209, v210, (uint64_t *)&unk_268C67E31);
    if (!v208)
    {
      uint64_t v208 = OUTLINED_FUNCTION_0_43(v208, v209, v210, v211, v212, v213, v214, v215, v492, v536, v580, v624, v668, v712, v756, v800, v844, v888, v932,
               v976,
               v1020,
               v1064,
               v1108,
               v1152,
               v1196,
               v1240,
               v1284,
               v1328,
               v1372,
               v1416,
               v1460,
               v1504,
               v1547);
      if (!v208)
      {
        uint64_t v216 = OUTLINED_FUNCTION_2_41(v208, v209, v210, v211, v212, v213, v214, v215, v492, v536, v580, v624, v668, v712, v756, v800, v844, v888, v932,
                 v976,
                 v1020,
                 v1064,
                 v1108,
                 v1152,
                 v1196,
                 v1240,
                 v1284,
                 v1328,
                 v1372,
                 v1416,
                 v1460,
                 v1504,
                 v1547,
                 v1590);
        uint64_t v208 = OUTLINED_FUNCTION_3_40(v216, v217, v218, (uint64_t)&unk_268C67E4B, 0);
        if (!v208) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v219 = OUTLINED_FUNCTION_4_39(v208, v209, v210, v211, v212, v213, v214, v215, v492, v536, v580, v624, v668, v712, v756, v800, v844, v888, v932,
           v976,
           v1020,
           v1064,
           v1108,
           v1152,
           v1196,
           v1240,
           v1284,
           v1328,
           v1372,
           v1416,
           v1460,
           v1504,
           v1547,
           v1590);
  if (!v219)
  {
    uint64_t v219 = OUTLINED_FUNCTION_1_41(v219, v220, v221, (uint64_t *)&unk_268C67E4C);
    if (!v219)
    {
      uint64_t v219 = OUTLINED_FUNCTION_0_43(v219, v220, v221, v222, v223, v224, v225, v226, v493, v537, v581, v625, v669, v713, v757, v801, v845, v889, v933,
               v977,
               v1021,
               v1065,
               v1109,
               v1153,
               v1197,
               v1241,
               v1285,
               v1329,
               v1373,
               v1417,
               v1461,
               v1505,
               v1548);
      if (!v219)
      {
        uint64_t v227 = OUTLINED_FUNCTION_2_41(v219, v220, v221, v222, v223, v224, v225, v226, v493, v537, v581, v625, v669, v713, v757, v801, v845, v889, v933,
                 v977,
                 v1021,
                 v1065,
                 v1109,
                 v1153,
                 v1197,
                 v1241,
                 v1285,
                 v1329,
                 v1373,
                 v1417,
                 v1461,
                 v1505,
                 v1548,
                 v1591);
        uint64_t v219 = OUTLINED_FUNCTION_3_40(v227, v228, v229, (uint64_t)&unk_268C67E4D, 0);
        if (!v219) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v230 = OUTLINED_FUNCTION_4_39(v219, v220, v221, v222, v223, v224, v225, v226, v493, v537, v581, v625, v669, v713, v757, v801, v845, v889, v933,
           v977,
           v1021,
           v1065,
           v1109,
           v1153,
           v1197,
           v1241,
           v1285,
           v1329,
           v1373,
           v1417,
           v1461,
           v1505,
           v1548,
           v1591);
  if (!v230)
  {
    uint64_t v230 = OUTLINED_FUNCTION_1_41(v230, v231, v232, (uint64_t *)&unk_268C67E4E);
    if (!v230)
    {
      uint64_t v230 = OUTLINED_FUNCTION_0_43(v230, v231, v232, v233, v234, v235, v236, v237, v494, v538, v582, v626, v670, v714, v758, v802, v846, v890, v934,
               v978,
               v1022,
               v1066,
               v1110,
               v1154,
               v1198,
               v1242,
               v1286,
               v1330,
               v1374,
               v1418,
               v1462,
               v1506,
               v1549);
      if (!v230)
      {
        uint64_t v238 = OUTLINED_FUNCTION_2_41(v230, v231, v232, v233, v234, v235, v236, v237, v494, v538, v582, v626, v670, v714, v758, v802, v846, v890, v934,
                 v978,
                 v1022,
                 v1066,
                 v1110,
                 v1154,
                 v1198,
                 v1242,
                 v1286,
                 v1330,
                 v1374,
                 v1418,
                 v1462,
                 v1506,
                 v1549,
                 v1592);
        uint64_t v230 = OUTLINED_FUNCTION_3_40(v238, v239, v240, (uint64_t)&unk_268C67E3B, 0);
        if (!v230) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v241 = OUTLINED_FUNCTION_4_39(v230, v231, v232, v233, v234, v235, v236, v237, v494, v538, v582, v626, v670, v714, v758, v802, v846, v890, v934,
           v978,
           v1022,
           v1066,
           v1110,
           v1154,
           v1198,
           v1242,
           v1286,
           v1330,
           v1374,
           v1418,
           v1462,
           v1506,
           v1549,
           v1592);
  if (!v241)
  {
    uint64_t v241 = OUTLINED_FUNCTION_1_41(v241, v242, v243, (uint64_t *)&unk_268C67E4F);
    if (!v241)
    {
      uint64_t v241 = OUTLINED_FUNCTION_0_43(v241, v242, v243, v244, v245, v246, v247, v248, v495, v539, v583, v627, v671, v715, v759, v803, v847, v891, v935,
               v979,
               v1023,
               v1067,
               v1111,
               v1155,
               v1199,
               v1243,
               v1287,
               v1331,
               v1375,
               v1419,
               v1463,
               v1507,
               v1550);
      if (!v241)
      {
        uint64_t v249 = OUTLINED_FUNCTION_2_41(v241, v242, v243, v244, v245, v246, v247, v248, v495, v539, v583, v627, v671, v715, v759, v803, v847, v891, v935,
                 v979,
                 v1023,
                 v1067,
                 v1111,
                 v1155,
                 v1199,
                 v1243,
                 v1287,
                 v1331,
                 v1375,
                 v1419,
                 v1463,
                 v1507,
                 v1550,
                 v1593);
        uint64_t v241 = OUTLINED_FUNCTION_3_40(v249, v250, v251, (uint64_t)&unk_268C67E50, 0);
        if (!v241) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v252 = OUTLINED_FUNCTION_4_39(v241, v242, v243, v244, v245, v246, v247, v248, v495, v539, v583, v627, v671, v715, v759, v803, v847, v891, v935,
           v979,
           v1023,
           v1067,
           v1111,
           v1155,
           v1199,
           v1243,
           v1287,
           v1331,
           v1375,
           v1419,
           v1463,
           v1507,
           v1550,
           v1593);
  if (!v252)
  {
    uint64_t v252 = OUTLINED_FUNCTION_1_41(v252, v253, v254, (uint64_t *)&unk_268C67E50);
    if (!v252)
    {
      uint64_t v252 = OUTLINED_FUNCTION_0_43(v252, v253, v254, v255, v256, v257, v258, v259, v496, v540, v584, v628, v672, v716, v760, v804, v848, v892, v936,
               v980,
               v1024,
               v1068,
               v1112,
               v1156,
               v1200,
               v1244,
               v1288,
               v1332,
               v1376,
               v1420,
               v1464,
               v1508,
               v1551);
      if (!v252)
      {
        uint64_t v260 = OUTLINED_FUNCTION_2_41(v252, v253, v254, v255, v256, v257, v258, v259, v496, v540, v584, v628, v672, v716, v760, v804, v848, v892, v936,
                 v980,
                 v1024,
                 v1068,
                 v1112,
                 v1156,
                 v1200,
                 v1244,
                 v1288,
                 v1332,
                 v1376,
                 v1420,
                 v1464,
                 v1508,
                 v1551,
                 v1594);
        uint64_t v252 = OUTLINED_FUNCTION_3_40(v260, v261, v262, (uint64_t)&unk_268C67E4A, 0);
        if (!v252) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v263 = OUTLINED_FUNCTION_4_39(v252, v253, v254, v255, v256, v257, v258, v259, v496, v540, v584, v628, v672, v716, v760, v804, v848, v892, v936,
           v980,
           v1024,
           v1068,
           v1112,
           v1156,
           v1200,
           v1244,
           v1288,
           v1332,
           v1376,
           v1420,
           v1464,
           v1508,
           v1551,
           v1594);
  if (!v263)
  {
    uint64_t v263 = OUTLINED_FUNCTION_1_41(v263, v264, v265, (uint64_t *)&unk_268C67E51);
    if (!v263)
    {
      uint64_t v263 = OUTLINED_FUNCTION_0_43(v263, v264, v265, v266, v267, v268, v269, v270, v497, v541, v585, v629, v673, v717, v761, v805, v849, v893, v937,
               v981,
               v1025,
               v1069,
               v1113,
               v1157,
               v1201,
               v1245,
               v1289,
               v1333,
               v1377,
               v1421,
               v1465,
               v1509,
               v1552);
      if (!v263)
      {
        uint64_t v271 = OUTLINED_FUNCTION_2_41(v263, v264, v265, v266, v267, v268, v269, v270, v497, v541, v585, v629, v673, v717, v761, v805, v849, v893, v937,
                 v981,
                 v1025,
                 v1069,
                 v1113,
                 v1157,
                 v1201,
                 v1245,
                 v1289,
                 v1333,
                 v1377,
                 v1421,
                 v1465,
                 v1509,
                 v1552,
                 v1595);
        uint64_t v263 = OUTLINED_FUNCTION_3_40(v271, v272, v273, (uint64_t)&unk_268C67E35, 0);
        if (!v263) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v274 = OUTLINED_FUNCTION_4_39(v263, v264, v265, v266, v267, v268, v269, v270, v497, v541, v585, v629, v673, v717, v761, v805, v849, v893, v937,
           v981,
           v1025,
           v1069,
           v1113,
           v1157,
           v1201,
           v1245,
           v1289,
           v1333,
           v1377,
           v1421,
           v1465,
           v1509,
           v1552,
           v1595);
  if (!v274)
  {
    uint64_t v274 = OUTLINED_FUNCTION_5_38(v274, v275, v276, (uint64_t *)&unk_268C67E5A);
    if (!v274)
    {
      uint64_t v274 = OUTLINED_FUNCTION_0_43(v274, v275, v276, v277, v278, v279, v280, v281, v498, v542, v586, v630, v674, v718, v762, v806, v850, v894, v938,
               v982,
               v1026,
               v1070,
               v1114,
               v1158,
               v1202,
               v1246,
               v1290,
               v1334,
               v1378,
               v1422,
               v1466,
               v1510,
               v1553);
      if (!v274)
      {
        uint64_t v282 = OUTLINED_FUNCTION_2_41(v274, v275, v276, v277, v278, v279, v280, v281, v498, v542, v586, v630, v674, v718, v762, v806, v850, v894, v938,
                 v982,
                 v1026,
                 v1070,
                 v1114,
                 v1158,
                 v1202,
                 v1246,
                 v1290,
                 v1334,
                 v1378,
                 v1422,
                 v1466,
                 v1510,
                 v1553,
                 v1596);
        uint64_t v274 = OUTLINED_FUNCTION_3_40(v282, v283, v284, (uint64_t)&unk_268C67E31, 0);
        if (!v274) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v285 = OUTLINED_FUNCTION_4_39(v274, v275, v276, v277, v278, v279, v280, v281, v498, v542, v586, v630, v674, v718, v762, v806, v850, v894, v938,
           v982,
           v1026,
           v1070,
           v1114,
           v1158,
           v1202,
           v1246,
           v1290,
           v1334,
           v1378,
           v1422,
           v1466,
           v1510,
           v1553,
           v1596);
  if (!v285)
  {
    uint64_t v285 = OUTLINED_FUNCTION_1_41(v285, v286, v287, (uint64_t *)&unk_268C67E52);
    if (!v285)
    {
      uint64_t v285 = OUTLINED_FUNCTION_0_43(v285, v286, v287, v288, v289, v290, v291, v292, v499, v543, v587, v631, v675, v719, v763, v807, v851, v895, v939,
               v983,
               v1027,
               v1071,
               v1115,
               v1159,
               v1203,
               v1247,
               v1291,
               v1335,
               v1379,
               v1423,
               v1467,
               v1511,
               v1554);
      if (!v285)
      {
        uint64_t v293 = OUTLINED_FUNCTION_2_41(v285, v286, v287, v288, v289, v290, v291, v292, v499, v543, v587, v631, v675, v719, v763, v807, v851, v895, v939,
                 v983,
                 v1027,
                 v1071,
                 v1115,
                 v1159,
                 v1203,
                 v1247,
                 v1291,
                 v1335,
                 v1379,
                 v1423,
                 v1467,
                 v1511,
                 v1554,
                 v1597);
        uint64_t v285 = OUTLINED_FUNCTION_3_40(v293, v294, v295, (uint64_t)&unk_268C67E4E, 0);
        if (!v285) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v296 = OUTLINED_FUNCTION_4_39(v285, v286, v287, v288, v289, v290, v291, v292, v499, v543, v587, v631, v675, v719, v763, v807, v851, v895, v939,
           v983,
           v1027,
           v1071,
           v1115,
           v1159,
           v1203,
           v1247,
           v1291,
           v1335,
           v1379,
           v1423,
           v1467,
           v1511,
           v1554,
           v1597);
  if (!v296)
  {
    uint64_t v296 = OUTLINED_FUNCTION_1_41(v296, v297, v298, (uint64_t *)&unk_268C67E53);
    if (!v296)
    {
      uint64_t v296 = OUTLINED_FUNCTION_0_43(v296, v297, v298, v299, v300, v301, v302, v303, v500, v544, v588, v632, v676, v720, v764, v808, v852, v896, v940,
               v984,
               v1028,
               v1072,
               v1116,
               v1160,
               v1204,
               v1248,
               v1292,
               v1336,
               v1380,
               v1424,
               v1468,
               v1512,
               v1555);
      if (!v296)
      {
        uint64_t v304 = OUTLINED_FUNCTION_2_41(v296, v297, v298, v299, v300, v301, v302, v303, v500, v544, v588, v632, v676, v720, v764, v808, v852, v896, v940,
                 v984,
                 v1028,
                 v1072,
                 v1116,
                 v1160,
                 v1204,
                 v1248,
                 v1292,
                 v1336,
                 v1380,
                 v1424,
                 v1468,
                 v1512,
                 v1555,
                 v1598);
        uint64_t v296 = OUTLINED_FUNCTION_3_40(v304, v305, v306, (uint64_t)&unk_268C67E54, 0);
        if (!v296) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v307 = OUTLINED_FUNCTION_4_39(v296, v297, v298, v299, v300, v301, v302, v303, v500, v544, v588, v632, v676, v720, v764, v808, v852, v896, v940,
           v984,
           v1028,
           v1072,
           v1116,
           v1160,
           v1204,
           v1248,
           v1292,
           v1336,
           v1380,
           v1424,
           v1468,
           v1512,
           v1555,
           v1598);
  if (!v307)
  {
    uint64_t v307 = OUTLINED_FUNCTION_1_41(v307, v308, v309, (uint64_t *)&unk_268C67E55);
    if (!v307)
    {
      uint64_t v307 = OUTLINED_FUNCTION_0_43(v307, v308, v309, v310, v311, v312, v313, v314, v501, v545, v589, v633, v677, v721, v765, v809, v853, v897, v941,
               v985,
               v1029,
               v1073,
               v1117,
               v1161,
               v1205,
               v1249,
               v1293,
               v1337,
               v1381,
               v1425,
               v1469,
               v1513,
               v1556);
      if (!v307)
      {
        uint64_t v315 = OUTLINED_FUNCTION_2_41(v307, v308, v309, v310, v311, v312, v313, v314, v501, v545, v589, v633, v677, v721, v765, v809, v853, v897, v941,
                 v985,
                 v1029,
                 v1073,
                 v1117,
                 v1161,
                 v1205,
                 v1249,
                 v1293,
                 v1337,
                 v1381,
                 v1425,
                 v1469,
                 v1513,
                 v1556,
                 v1599);
        uint64_t v307 = OUTLINED_FUNCTION_3_40(v315, v316, v317, (uint64_t)&unk_268C67E44, 0);
        if (!v307) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v318 = OUTLINED_FUNCTION_4_39(v307, v308, v309, v310, v311, v312, v313, v314, v501, v545, v589, v633, v677, v721, v765, v809, v853, v897, v941,
           v985,
           v1029,
           v1073,
           v1117,
           v1161,
           v1205,
           v1249,
           v1293,
           v1337,
           v1381,
           v1425,
           v1469,
           v1513,
           v1556,
           v1599);
  if (!v318)
  {
    uint64_t v318 = OUTLINED_FUNCTION_1_41(v318, v319, v320, (uint64_t *)&unk_268C67E56);
    if (!v318)
    {
      uint64_t v318 = OUTLINED_FUNCTION_0_43(v318, v319, v320, v321, v322, v323, v324, v325, v502, v546, v590, v634, v678, v722, v766, v810, v854, v898, v942,
               v986,
               v1030,
               v1074,
               v1118,
               v1162,
               v1206,
               v1250,
               v1294,
               v1338,
               v1382,
               v1426,
               v1470,
               v1514,
               v1557);
      if (!v318)
      {
        uint64_t v326 = OUTLINED_FUNCTION_2_41(v318, v319, v320, v321, v322, v323, v324, v325, v502, v546, v590, v634, v678, v722, v766, v810, v854, v898, v942,
                 v986,
                 v1030,
                 v1074,
                 v1118,
                 v1162,
                 v1206,
                 v1250,
                 v1294,
                 v1338,
                 v1382,
                 v1426,
                 v1470,
                 v1514,
                 v1557,
                 v1600);
        uint64_t v318 = OUTLINED_FUNCTION_3_40(v326, v327, v328, (uint64_t)&unk_268C67E39, 0);
        if (!v318) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v329 = OUTLINED_FUNCTION_4_39(v318, v319, v320, v321, v322, v323, v324, v325, v502, v546, v590, v634, v678, v722, v766, v810, v854, v898, v942,
           v986,
           v1030,
           v1074,
           v1118,
           v1162,
           v1206,
           v1250,
           v1294,
           v1338,
           v1382,
           v1426,
           v1470,
           v1514,
           v1557,
           v1600);
  if (!v329)
  {
    uint64_t v329 = OUTLINED_FUNCTION_1_41(v329, v330, v331, (uint64_t *)&unk_268C67E3A);
    if (!v329)
    {
      uint64_t v329 = OUTLINED_FUNCTION_0_43(v329, v330, v331, v332, v333, v334, v335, v336, v503, v547, v591, v635, v679, v723, v767, v811, v855, v899, v943,
               v987,
               v1031,
               v1075,
               v1119,
               v1163,
               v1207,
               v1251,
               v1295,
               v1339,
               v1383,
               v1427,
               v1471,
               v1515,
               v1558);
      if (!v329)
      {
        uint64_t v337 = OUTLINED_FUNCTION_2_41(v329, v330, v331, v332, v333, v334, v335, v336, v503, v547, v591, v635, v679, v723, v767, v811, v855, v899, v943,
                 v987,
                 v1031,
                 v1075,
                 v1119,
                 v1163,
                 v1207,
                 v1251,
                 v1295,
                 v1339,
                 v1383,
                 v1427,
                 v1471,
                 v1515,
                 v1558,
                 v1601);
        uint64_t v329 = OUTLINED_FUNCTION_3_40(v337, v338, v339, (uint64_t)&unk_268C67E55, 0);
        if (!v329) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v340 = OUTLINED_FUNCTION_4_39(v329, v330, v331, v332, v333, v334, v335, v336, v503, v547, v591, v635, v679, v723, v767, v811, v855, v899, v943,
           v987,
           v1031,
           v1075,
           v1119,
           v1163,
           v1207,
           v1251,
           v1295,
           v1339,
           v1383,
           v1427,
           v1471,
           v1515,
           v1558,
           v1601);
  if (!v340)
  {
    uint64_t v340 = OUTLINED_FUNCTION_1_41(v340, v341, v342, (uint64_t *)&unk_268C67E34);
    if (!v340)
    {
      uint64_t v340 = OUTLINED_FUNCTION_0_43(v340, v341, v342, v343, v344, v345, v346, v347, v504, v548, v592, v636, v680, v724, v768, v812, v856, v900, v944,
               v988,
               v1032,
               v1076,
               v1120,
               v1164,
               v1208,
               v1252,
               v1296,
               v1340,
               v1384,
               v1428,
               v1472,
               v1516,
               v1559);
      if (!v340)
      {
        uint64_t v348 = OUTLINED_FUNCTION_2_41(v340, v341, v342, v343, v344, v345, v346, v347, v504, v548, v592, v636, v680, v724, v768, v812, v856, v900, v944,
                 v988,
                 v1032,
                 v1076,
                 v1120,
                 v1164,
                 v1208,
                 v1252,
                 v1296,
                 v1340,
                 v1384,
                 v1428,
                 v1472,
                 v1516,
                 v1559,
                 v1602);
        uint64_t v340 = OUTLINED_FUNCTION_3_40(v348, v349, v350, (uint64_t)&unk_268C67E57, 0);
        if (!v340) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v351 = OUTLINED_FUNCTION_4_39(v340, v341, v342, v343, v344, v345, v346, v347, v504, v548, v592, v636, v680, v724, v768, v812, v856, v900, v944,
           v988,
           v1032,
           v1076,
           v1120,
           v1164,
           v1208,
           v1252,
           v1296,
           v1340,
           v1384,
           v1428,
           v1472,
           v1516,
           v1559,
           v1602);
  if (!v351)
  {
    uint64_t v351 = OUTLINED_FUNCTION_1_41(v351, v352, v353, (uint64_t *)&unk_268C67E36);
    if (!v351)
    {
      uint64_t v351 = OUTLINED_FUNCTION_0_43(v351, v352, v353, v354, v355, v356, v357, v358, v505, v549, v593, v637, v681, v725, v769, v813, v857, v901, v945,
               v989,
               v1033,
               v1077,
               v1121,
               v1165,
               v1209,
               v1253,
               v1297,
               v1341,
               v1385,
               v1429,
               v1473,
               v1517,
               v1560);
      if (!v351)
      {
        uint64_t v359 = OUTLINED_FUNCTION_2_41(v351, v352, v353, v354, v355, v356, v357, v358, v505, v549, v593, v637, v681, v725, v769, v813, v857, v901, v945,
                 v989,
                 v1033,
                 v1077,
                 v1121,
                 v1165,
                 v1209,
                 v1253,
                 v1297,
                 v1341,
                 v1385,
                 v1429,
                 v1473,
                 v1517,
                 v1560,
                 v1603);
        uint64_t v351 = OUTLINED_FUNCTION_3_40(v359, v360, v361, (uint64_t)&unk_268C67E58, 0);
        if (!v351) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v362 = OUTLINED_FUNCTION_4_39(v351, v352, v353, v354, v355, v356, v357, v358, v505, v549, v593, v637, v681, v725, v769, v813, v857, v901, v945,
           v989,
           v1033,
           v1077,
           v1121,
           v1165,
           v1209,
           v1253,
           v1297,
           v1341,
           v1385,
           v1429,
           v1473,
           v1517,
           v1560,
           v1603);
  if (!v362)
  {
    uint64_t v362 = OUTLINED_FUNCTION_1_41(v362, v363, v364, (uint64_t *)&unk_268C67E38);
    if (!v362)
    {
      uint64_t v362 = OUTLINED_FUNCTION_0_43(v362, v363, v364, v365, v366, v367, v368, v369, v506, v550, v594, v638, v682, v726, v770, v814, v858, v902, v946,
               v990,
               v1034,
               v1078,
               v1122,
               v1166,
               v1210,
               v1254,
               v1298,
               v1342,
               v1386,
               v1430,
               v1474,
               v1518,
               v1561);
      if (!v362)
      {
        uint64_t v370 = OUTLINED_FUNCTION_2_41(v362, v363, v364, v365, v366, v367, v368, v369, v506, v550, v594, v638, v682, v726, v770, v814, v858, v902, v946,
                 v990,
                 v1034,
                 v1078,
                 v1122,
                 v1166,
                 v1210,
                 v1254,
                 v1298,
                 v1342,
                 v1386,
                 v1430,
                 v1474,
                 v1518,
                 v1561,
                 v1604);
        uint64_t v362 = OUTLINED_FUNCTION_3_40(v370, v371, v372, (uint64_t)&unk_268C67E42, 0);
        if (!v362) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v373 = OUTLINED_FUNCTION_4_39(v362, v363, v364, v365, v366, v367, v368, v369, v506, v550, v594, v638, v682, v726, v770, v814, v858, v902, v946,
           v990,
           v1034,
           v1078,
           v1122,
           v1166,
           v1210,
           v1254,
           v1298,
           v1342,
           v1386,
           v1430,
           v1474,
           v1518,
           v1561,
           v1604);
  if (!v373)
  {
    uint64_t v373 = OUTLINED_FUNCTION_1_41(v373, v374, v375, (uint64_t *)&unk_268C67E3C);
    if (!v373)
    {
      uint64_t v373 = OUTLINED_FUNCTION_0_43(v373, v374, v375, v376, v377, v378, v379, v380, v507, v551, v595, v639, v683, v727, v771, v815, v859, v903, v947,
               v991,
               v1035,
               v1079,
               v1123,
               v1167,
               v1211,
               v1255,
               v1299,
               v1343,
               v1387,
               v1431,
               v1475,
               v1519,
               v1562);
      if (!v373)
      {
        uint64_t v381 = OUTLINED_FUNCTION_2_41(v373, v374, v375, v376, v377, v378, v379, v380, v507, v551, v595, v639, v683, v727, v771, v815, v859, v903, v947,
                 v991,
                 v1035,
                 v1079,
                 v1123,
                 v1167,
                 v1211,
                 v1255,
                 v1299,
                 v1343,
                 v1387,
                 v1431,
                 v1475,
                 v1519,
                 v1562,
                 v1605);
        uint64_t v373 = OUTLINED_FUNCTION_3_40(v381, v382, v383, (uint64_t)&unk_268C67E53, 0);
        if (!v373) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v384 = OUTLINED_FUNCTION_4_39(v373, v374, v375, v376, v377, v378, v379, v380, v507, v551, v595, v639, v683, v727, v771, v815, v859, v903, v947,
           v991,
           v1035,
           v1079,
           v1123,
           v1167,
           v1211,
           v1255,
           v1299,
           v1343,
           v1387,
           v1431,
           v1475,
           v1519,
           v1562,
           v1605);
  if (!v384)
  {
    uint64_t v384 = OUTLINED_FUNCTION_1_41(v384, v385, v386, (uint64_t *)&unk_268C67E41);
    if (!v384)
    {
      uint64_t v384 = OUTLINED_FUNCTION_0_43(v384, v385, v386, v387, v388, v389, v390, v391, v508, v552, v596, v640, v684, v728, v772, v816, v860, v904, v948,
               v992,
               v1036,
               v1080,
               v1124,
               v1168,
               v1212,
               v1256,
               v1300,
               v1344,
               v1388,
               v1432,
               v1476,
               v1520,
               v1563);
      if (!v384)
      {
        uint64_t v392 = OUTLINED_FUNCTION_2_41(v384, v385, v386, v387, v388, v389, v390, v391, v508, v552, v596, v640, v684, v728, v772, v816, v860, v904, v948,
                 v992,
                 v1036,
                 v1080,
                 v1124,
                 v1168,
                 v1212,
                 v1256,
                 v1300,
                 v1344,
                 v1388,
                 v1432,
                 v1476,
                 v1520,
                 v1563,
                 v1606);
        uint64_t v384 = OUTLINED_FUNCTION_3_40(v392, v393, v394, (uint64_t)&unk_268C67E49, 0);
        if (!v384) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v395 = OUTLINED_FUNCTION_4_39(v384, v385, v386, v387, v388, v389, v390, v391, v508, v552, v596, v640, v684, v728, v772, v816, v860, v904, v948,
           v992,
           v1036,
           v1080,
           v1124,
           v1168,
           v1212,
           v1256,
           v1300,
           v1344,
           v1388,
           v1432,
           v1476,
           v1520,
           v1563,
           v1606);
  if (!v395)
  {
    uint64_t v395 = OUTLINED_FUNCTION_1_41(v395, v396, v397, (uint64_t *)&unk_268C67E47);
    if (!v395)
    {
      uint64_t v395 = OUTLINED_FUNCTION_0_43(v395, v396, v397, v398, v399, v400, v401, v402, v509, v553, v597, v641, v685, v729, v773, v817, v861, v905, v949,
               v993,
               v1037,
               v1081,
               v1125,
               v1169,
               v1213,
               v1257,
               v1301,
               v1345,
               v1389,
               v1433,
               v1477,
               v1521,
               v1564);
      if (!v395)
      {
        uint64_t v403 = OUTLINED_FUNCTION_2_41(v395, v396, v397, v398, v399, v400, v401, v402, v509, v553, v597, v641, v685, v729, v773, v817, v861, v905, v949,
                 v993,
                 v1037,
                 v1081,
                 v1125,
                 v1169,
                 v1213,
                 v1257,
                 v1301,
                 v1345,
                 v1389,
                 v1433,
                 v1477,
                 v1521,
                 v1564,
                 v1607);
        uint64_t v395 = OUTLINED_FUNCTION_3_40(v403, v404, v405, (uint64_t)&unk_268C67E59, 0);
        if (!v395) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v406 = OUTLINED_FUNCTION_4_39(v395, v396, v397, v398, v399, v400, v401, v402, v509, v553, v597, v641, v685, v729, v773, v817, v861, v905, v949,
           v993,
           v1037,
           v1081,
           v1125,
           v1169,
           v1213,
           v1257,
           v1301,
           v1345,
           v1389,
           v1433,
           v1477,
           v1521,
           v1564,
           v1607);
  if (!v406)
  {
    uint64_t v406 = OUTLINED_FUNCTION_5_38(v406, v407, v408, (uint64_t *)&unk_268C67E5C);
    if (!v406)
    {
      uint64_t v406 = OUTLINED_FUNCTION_0_43(v406, v407, v408, v409, v410, v411, v412, v413, v510, v554, v598, v642, v686, v730, v774, v818, v862, v906, v950,
               v994,
               v1038,
               v1082,
               v1126,
               v1170,
               v1214,
               v1258,
               v1302,
               v1346,
               v1390,
               v1434,
               v1478,
               v1522,
               v1565);
      if (!v406)
      {
        uint64_t v414 = OUTLINED_FUNCTION_2_41(v406, v407, v408, v409, v410, v411, v412, v413, v510, v554, v598, v642, v686, v730, v774, v818, v862, v906, v950,
                 v994,
                 v1038,
                 v1082,
                 v1126,
                 v1170,
                 v1214,
                 v1258,
                 v1302,
                 v1346,
                 v1390,
                 v1434,
                 v1478,
                 v1522,
                 v1565,
                 v1608);
        uint64_t v406 = OUTLINED_FUNCTION_3_40(v414, v415, v416, (uint64_t)&unk_268C67E2E, 0);
        if (!v406) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v417 = OUTLINED_FUNCTION_4_39(v406, v407, v408, v409, v410, v411, v412, v413, v510, v554, v598, v642, v686, v730, v774, v818, v862, v906, v950,
           v994,
           v1038,
           v1082,
           v1126,
           v1170,
           v1214,
           v1258,
           v1302,
           v1346,
           v1390,
           v1434,
           v1478,
           v1522,
           v1565,
           v1608);
  if (!v417)
  {
    uint64_t v417 = OUTLINED_FUNCTION_5_38(v417, v418, v419, (uint64_t *)&unk_268C67E5E);
    if (!v417)
    {
      uint64_t v417 = OUTLINED_FUNCTION_0_43(v417, v418, v419, v420, v421, v422, v423, v424, v511, v555, v599, v643, v687, v731, v775, v819, v863, v907, v951,
               v995,
               v1039,
               v1083,
               v1127,
               v1171,
               v1215,
               v1259,
               v1303,
               v1347,
               v1391,
               v1435,
               v1479,
               v1523,
               v1566);
      if (!v417)
      {
        uint64_t v425 = OUTLINED_FUNCTION_2_41(v417, v418, v419, v420, v421, v422, v423, v424, v511, v555, v599, v643, v687, v731, v775, v819, v863, v907, v951,
                 v995,
                 v1039,
                 v1083,
                 v1127,
                 v1171,
                 v1215,
                 v1259,
                 v1303,
                 v1347,
                 v1391,
                 v1435,
                 v1479,
                 v1523,
                 v1566,
                 v1609);
        uint64_t v417 = OUTLINED_FUNCTION_3_40(v425, v426, v427, (uint64_t)&unk_268C67E2D, 0);
        if (!v417) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v428 = OUTLINED_FUNCTION_4_39(v417, v418, v419, v420, v421, v422, v423, v424, v511, v555, v599, v643, v687, v731, v775, v819, v863, v907, v951,
           v995,
           v1039,
           v1083,
           v1127,
           v1171,
           v1215,
           v1259,
           v1303,
           v1347,
           v1391,
           v1435,
           v1479,
           v1523,
           v1566,
           v1609);
  if (!v428)
  {
    uint64_t v428 = OUTLINED_FUNCTION_5_38(v428, v429, v430, (uint64_t *)&unk_268C67E60);
    if (!v428)
    {
      uint64_t v428 = OUTLINED_FUNCTION_0_43(v428, v429, v430, v431, v432, v433, v434, v435, v512, v556, v600, v644, v688, v732, v776, v820, v864, v908, v952,
               v996,
               v1040,
               v1084,
               v1128,
               v1172,
               v1216,
               v1260,
               v1304,
               v1348,
               v1392,
               v1436,
               v1480,
               v1524,
               v1567);
      if (!v428)
      {
        uint64_t v436 = OUTLINED_FUNCTION_2_41(v428, v429, v430, v431, v432, v433, v434, v435, v512, v556, v600, v644, v688, v732, v776, v820, v864, v908, v952,
                 v996,
                 v1040,
                 v1084,
                 v1128,
                 v1172,
                 v1216,
                 v1260,
                 v1304,
                 v1348,
                 v1392,
                 v1436,
                 v1480,
                 v1524,
                 v1567,
                 v1610);
        uint64_t v428 = OUTLINED_FUNCTION_3_40(v436, v437, v438, (uint64_t)&_MergedGlobals_35, 0);
        if (!v428) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v439 = OUTLINED_FUNCTION_4_39(v428, v429, v430, v431, v432, v433, v434, v435, v512, v556, v600, v644, v688, v732, v776, v820, v864, v908, v952,
           v996,
           v1040,
           v1084,
           v1128,
           v1172,
           v1216,
           v1260,
           v1304,
           v1348,
           v1392,
           v1436,
           v1480,
           v1524,
           v1567,
           v1610);
  if (!v439)
  {
    uint64_t v439 = OUTLINED_FUNCTION_5_38(v439, v440, v441, (uint64_t *)&unk_268C67E62);
    if (!v439)
    {
      uint64_t v439 = OUTLINED_FUNCTION_0_43(v439, v440, v441, v442, v443, v444, v445, v446, v513, v557, v601, v645, v689, v733, v777, v821, v865, v909, v953,
               v997,
               v1041,
               v1085,
               v1129,
               v1173,
               v1217,
               v1261,
               v1305,
               v1349,
               v1393,
               v1437,
               v1481,
               v1525,
               v1568);
      if (!v439)
      {
        uint64_t v447 = OUTLINED_FUNCTION_2_41(v439, v440, v441, v442, v443, v444, v445, v446, v513, v557, v601, v645, v689, v733, v777, v821, v865, v909, v953,
                 v997,
                 v1041,
                 v1085,
                 v1129,
                 v1173,
                 v1217,
                 v1261,
                 v1305,
                 v1349,
                 v1393,
                 v1437,
                 v1481,
                 v1525,
                 v1568,
                 v1611);
        uint64_t v439 = OUTLINED_FUNCTION_3_40(v447, v448, v449, (uint64_t)&unk_268C67E2F, 0);
        if (!v439) {
          goto LABEL_156;
        }
      }
    }
  }
  uint64_t v450 = OUTLINED_FUNCTION_4_39(v439, v440, v441, v442, v443, v444, v445, v446, v513, v557, v601, v645, v689, v733, v777, v821, v865, v909, v953,
           v997,
           v1041,
           v1085,
           v1129,
           v1173,
           v1217,
           v1261,
           v1305,
           v1349,
           v1393,
           v1437,
           v1481,
           v1525,
           v1568,
           v1611);
  if (v450
    || (uint64_t v453 = OUTLINED_FUNCTION_5_38(v450, v451, v452, (uint64_t *)&unk_268C67E64), v453)
    || (uint64_t v461 = OUTLINED_FUNCTION_0_43(v453, v454, v455, v456, v457, v458, v459, v460, v514, v558, v602, v646, v690, v734, v778, v822, v866, v910, v954,
                 v998,
                 v1042,
                 v1086,
                 v1130,
                 v1174,
                 v1218,
                 v1262,
                 v1306,
                 v1350,
                 v1394,
                 v1438,
                 v1482,
                 v1526,
                 v1569),
        v461)
    || (uint64_t v469 = OUTLINED_FUNCTION_2_41(v461, v462, v463, v464, v465, v466, v467, v468, v515, v559, v603, v647, v691, v735, v779, v823, v867, v911, v955,
                 v999,
                 v1043,
                 v1087,
                 v1131,
                 v1175,
                 v1219,
                 v1263,
                 v1307,
                 v1351,
                 v1395,
                 v1439,
                 v1483,
                 v1527,
                 v1570,
                 v1612),
        OUTLINED_FUNCTION_3_40(v469, v470, v471, (uint64_t)&unk_268C67E30, 0)))
  {
LABEL_3:
    vretproc(a1);
    return 94;
  }
  else
  {
LABEL_156:
    vretproc(a1);
    return 0;
  }
}

uint64_t OUTLINED_FUNCTION_0_43(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  *(unsigned char *)(v33 + 136) = v34;
  *(void *)(v33 + 112) = a33;
  *(void *)(v33 + 128) = 0;
  return test_ptr(v33);
}

uint64_t OUTLINED_FUNCTION_1_41(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return test_string_s(v4, 1u, 1u, a4);
}

uint64_t OUTLINED_FUNCTION_2_41(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  return lpta_rpta_loadp(v34, (uint64_t)&a34, (uint64_t)&a32);
}

uint64_t OUTLINED_FUNCTION_3_40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return insert_2pt_s(v5, 4u, 1, a4, a5);
}

uint64_t OUTLINED_FUNCTION_4_39(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  return lpta_loadp_setscan_r(v34, (uint64_t)&a34);
}

uint64_t OUTLINED_FUNCTION_5_38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return test_string_s(v4, 1u, 2u, a4);
}

uint64_t OUTLINED_FUNCTION_6_38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  return lpta_loadp_setscan_r(v34, (uint64_t)&a34);
}

uint64_t OUTLINED_FUNCTION_7_38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return test_string_s(v4, 4u, 1u, a4);
}

void OUTLINED_FUNCTION_8_37(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  *(void *)(v36 - 56) = v35;
  a34 = 0;
  a35 = 0;
  a32 = 0;
  a33 = 0;
  bzero(&a9, 0xB8uLL);
}

void OUTLINED_FUNCTION_9_37(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  get_parm(v34, (uint64_t)&a34, v35, -6);
}

uint64_t OUTLINED_FUNCTION_10_37(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,char a37,int a38,__int16 a39,char a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46)
{
  return ventproc(v46, (uint64_t)&a9, (uint64_t)&a44, (uint64_t)&a40, (uint64_t)&a37, (uint64_t)&a46);
}

void OUTLINED_FUNCTION_11_37(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  bzero(&a40, 0xC0uLL);
}

void OUTLINED_FUNCTION_12_36(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  get_parm(v32, (uint64_t)&a32, v33, v34);
}

void *fence_40(uint64_t a1, int a2, uint64_t a3)
{
  *(unsigned char *)(*(void *)(a1 + 192) + 8121) = a2;
  double result = memset(*(void **)(a1 + 264), *(unsigned __int8 *)(a1 + 288), *(unsigned __int8 *)(a1 + 288));
  for (uint64_t i = 0; a2 != i; ++i)
  {
    *(unsigned char *)(*(void *)(a1 + 248) + i) = *(unsigned char *)(a3 + i);
    *(unsigned char *)(*(void *)(a1 + 264) + *(unsigned __int8 *)(a3 + i)) = i;
  }
  return result;
}

void assign_stress()
{
  OUTLINED_FUNCTION_8_38();
  OUTLINED_FUNCTION_4_40();
  uint64_t v36 = *MEMORY[0x263EF8340];
  v31[0] = 0;
  v31[1] = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  int v28 = 0;
  OUTLINED_FUNCTION_6_39(v2, v3, v4, v5, v6, v7, v8, v9, v25[0], v25[1], v25[2], v25[3], v25[4], v25[5], v25[6], v25[7], v25[8], v25[9], v25[10],
    v25[11],
    v25[12],
    v25[13],
    v25[14],
    v25[15],
    v25[16],
    v25[17],
    v25[18],
    v25[19],
    v25[20],
    v25[21],
    v25[22],
    v26,
    v27);
  OUTLINED_FUNCTION_12_37();
  bzero(v35, v10);
  if (setjmp(v35)) {
    goto LABEL_3;
  }
  uint64_t v11 = ventproc(v0, (uint64_t)v25, (uint64_t)v34, (uint64_t)v33, (uint64_t)v32, (uint64_t)v35);
  if (v11) {
    goto LABEL_3;
  }
  OUTLINED_FUNCTION_19_32(v11, (uint64_t)v31);
  get_parm(v0, (uint64_t)&v29, v1, (__int16)v35);
  LOWORD(v28) = -4;
  push_ptr_init(v0, (uint64_t)&v26);
  fence_40(v0, 0, (uint64_t)&_MergedGlobals_1_4);
  HIWORD(v28) = 1;
  uint64_t v27 = v30;
  if (*(_WORD *)(v0 + 3842) == 1)
  {
    assign_user_stress();
    goto LABEL_3;
  }
  while (2)
  {
    if (*(_WORD *)(v0 + 3806) == 1)
    {
      starttest(v0, 5);
      if (lpta_loadp_setscan_r(v0, (uint64_t)v31))
      {
LABEL_17:
        lpta_rpta_loadp(v0, (uint64_t)v31, (uint64_t)&v29);
        uint64_t v19 = OUTLINED_FUNCTION_23_27();
        uint64_t v22 = &string_3;
      }
      else
      {
        if (npush_fld(v0, 2u, 5)
          || (npush_i(v0), if_testgt(v0, v12, v13, v14, v15, v16, v17, v18))
          || advance_tok())
        {
LABEL_13:
          uint64_t v23 = *(void *)(v0 + 104);
          if (v23) {
            int v24 = OUTLINED_FUNCTION_0_44(v23);
          }
          else {
            int v24 = OUTLINED_FUNCTION_11_38();
          }
          switch(v24)
          {
            case 1:
              continue;
            case 4:
              goto LABEL_18;
            case 5:
              goto LABEL_17;
            case 7:
              goto LABEL_19;
            case 8:
              goto LABEL_20;
            case 9:
              goto LABEL_22;
            default:
              goto LABEL_3;
          }
          goto LABEL_3;
        }
        lpta_rpta_loadp(v0, (uint64_t)v31, (uint64_t)&v29);
        uint64_t v19 = OUTLINED_FUNCTION_23_27();
        uint64_t v22 = &unk_268C70106;
      }
      if (!insert_2pt_i(v19, v20, v21, (uint64_t)v22, 0)) {
        goto LABEL_3;
      }
      goto LABEL_13;
    }
    break;
  }
LABEL_18:
  assign_suffix_stress();
LABEL_19:
  assign_root_stress();
LABEL_20:
  if (HIWORD(v28) == 1) {
    assign_secondary_stress();
  }
LABEL_22:
  insert_zero_sylls();
LABEL_3:
  vretproc(v0);
  OUTLINED_FUNCTION_7_39();
}

uint64_t assign_suffix_stress()
{
  OUTLINED_FUNCTION_4_40();
  uint64_t v87 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_3_41(v4);
  OUTLINED_FUNCTION_10_38(v5, v6, v7, v8, v9, v10, v11, v12, v31, v33, v35, v37, v39, v41, v43, v45, v47, v49, v51,
    v53,
    v55,
    v57,
    v59,
    v61,
    v63,
    v65,
    v67,
    v69,
    v71,
    v73,
    v75,
    v77,
    0,
    0,
    0,
    v82,
    v83,
    v84,
    v85,
    v86);
  uint64_t v13 = setjmp(v3);
  if (v13
    || OUTLINED_FUNCTION_1_42(v13, v14, v15, v16, v17, v18, v19, v20, v32, v34, v36, v38, v40, v42, v44, v46, v48, v50, v52,
                       v54,
                       v56,
                       v58,
                       v60,
                       v62,
                       v64,
                       v66,
                       v68,
                       v70,
                       v72,
                       v74,
                       v76,
                       v78,
                       v79,
                       v80,
                       v81,
                       v82,
                       SBYTE4(v82),
                       v83,
                       SWORD2(v83),
                       SBYTE6(v83),
                       v84,
                       SWORD2(v84),
                       SBYTE6(v84),
                       SHIBYTE(v84),
                       v85,
                       v86))
  {
LABEL_3:
    vretproc(v0);
    return 94;
  }
  get_parm(v0, (uint64_t)&v80, (__int16 *)v2, -6);
  OUTLINED_FUNCTION_16_34(v22, (uint64_t)&v79 + 4);
  LODWORD(v79) = 65532;
  fence_40(v0, 0, (uint64_t)&_MergedGlobals_1_4);
  if (*(unsigned __int16 *)(v0 + 2286) == *(unsigned __int16 *)(v0 + 3874))
  {
    uint64_t v23 = OUTLINED_FUNCTION_17_34();
    starttest(v23, v24);
    uint64_t v25 = OUTLINED_FUNCTION_22_28();
    move_i(v25, v26, v27);
    if (insert_penult_stress())
    {
LABEL_6:
      uint64_t v28 = *(void *)(v0 + 104);
      if (v28) {
        OUTLINED_FUNCTION_0_44(v28);
      }
      else {
        OUTLINED_FUNCTION_11_38();
      }
      OUTLINED_FUNCTION_20_31();
      switch(v29)
      {
        case 0:
          goto LABEL_20;
        case 1:
          break;
        case 2:
          goto LABEL_15;
        case 3:
          savescptr(v0, 4, (uint64_t)&v80);
          goto LABEL_15;
        case 4:
          goto LABEL_11;
        case 5:
          goto LABEL_16;
        case 6:
          goto LABEL_18;
        default:
          goto LABEL_3;
      }
    }
    starttest(v0, 3);
    if (!lpta_loadp_setscan_l(v0, (uint64_t)&v80))
    {
LABEL_11:
      while (!testFldeq(v0, 3u, 0, 3) && !advance_tok())
        bspush_ca_scan(v0, 4);
      goto LABEL_6;
    }
LABEL_15:
    if (*(__int16 *)(v0 + 3806) >= 4)
    {
LABEL_16:
      if (*(unsigned __int16 *)(v0 + 1018) != *(unsigned __int16 *)(v0 + 5954))
      {
LABEL_18:
        __int16 v30 = 2;
        goto LABEL_19;
      }
    }
    __int16 v30 = 0;
LABEL_19:
    HIWORD(v79) = v30;
  }
LABEL_20:
  *(void *)(v2 + 8) = v81;
  *(_WORD *)(v1 + 2) = HIWORD(v79);
  vretproc(v0);
  return 0;
}

void assign_root_stress()
{
  OUTLINED_FUNCTION_8_38();
  OUTLINED_FUNCTION_24_26();
  uint64_t v35 = *MEMORY[0x263EF8340];
  v30[0] = 0;
  v30[1] = 0;
  v29[0] = 0;
  v29[1] = 0;
  int v28 = 0;
  v27[0] = 0;
  v27[1] = 0;
  bzero(v26, 0xB8uLL);
  OUTLINED_FUNCTION_12_37();
  bzero(v34, v2);
  if (!setjmp(v34))
  {
    uint64_t v3 = ventproc((uint64_t)v0, (uint64_t)v26, (uint64_t)v33, (uint64_t)v32, (uint64_t)v31, (uint64_t)v34);
    if (!v3)
    {
      OUTLINED_FUNCTION_18_32(v3, (uint64_t)v30);
      get_parm((uint64_t)v0, (uint64_t)v29, v1, (__int16)v34);
      OUTLINED_FUNCTION_16_34(v4, (uint64_t)&v28);
      push_ptr_init((uint64_t)v0, (uint64_t)v27);
      fence_40((uint64_t)v0, 0, (uint64_t)&_MergedGlobals_1_4);
      if (HIWORD(v28))
      {
        while (2)
        {
          dict_assigned_stress();
          if (v5)
          {
LABEL_6:
            accented_vowel();
            if (v6)
            {
LABEL_7:
              starttest((uint64_t)v0, 5);
              if (lpta_loadp_setscan_l((uint64_t)v0, (uint64_t)v29))
              {
LABEL_8:
                starttest((uint64_t)v0, 8);
                if (!lpta_loadp_setscan_l((uint64_t)v0, (uint64_t)v29))
                {
                  bspush_ca_scan((uint64_t)v0, 9);
                  bspush_ca_scan((uint64_t)v0, 10);
                  uint64_t v7 = OUTLINED_FUNCTION_2_42();
                  if (!test_string_s(v7, v8, v9, (uint64_t *)&unk_268C67E6B))
                  {
LABEL_10:
                    bspush_ca_scan((uint64_t)v0, 11);
                    uint64_t v10 = OUTLINED_FUNCTION_2_42();
                    uint64_t v13 = (uint64_t *)&unk_268C67E6C;
LABEL_23:
                    if (test_string_s(v10, v11, v12, v13)) {
                      goto LABEL_24;
                    }
                    goto LABEL_35;
                  }
                  goto LABEL_24;
                }
LABEL_33:
                lpta_rpta_loadp((uint64_t)v0, (uint64_t)v30, (uint64_t)v29);
                if (!setd_lookup(v0, 1u, 67))
                {
LABEL_35:
                  insert_por_penult_stress();
                  break;
                }
              }
              else
              {
                bspush_ca_scan((uint64_t)v0, 6);
                if (test_string_s((uint64_t)v0, 4u, 1u, (uint64_t *)&_MergedGlobals_36)) {
                  goto LABEL_24;
                }
LABEL_12:
                uint64_t v14 = OUTLINED_FUNCTION_17_34();
                savescptr(v14, v15, (uint64_t)v27);
                if (testFldeq((uint64_t)v0, 4u, 4, 6)
                  || advance_tok()
                  || testFldeq((uint64_t)v0, 4u, 1, 2)
                  || advance_tok()
                  || lpta_loadp_setscan_l((uint64_t)v0, (uint64_t)v27)
                  || OUTLINED_FUNCTION_21_30()
                  || advance_tok()
                  || OUTLINED_FUNCTION_21_30()
                  || advance_tok())
                {
LABEL_24:
                  uint64_t v18 = v0[13];
                  if (v18) {
                    OUTLINED_FUNCTION_0_44(v18);
                  }
                  else {
                    OUTLINED_FUNCTION_11_38();
                  }
                  OUTLINED_FUNCTION_20_31();
                  switch(v19)
                  {
                    case 0:
                      continue;
                    case 2:
                      goto LABEL_6;
                    case 3:
                      goto LABEL_7;
                    case 4:
                      goto LABEL_8;
                    case 5:
                      goto LABEL_12;
                    case 7:
                      goto LABEL_33;
                    case 8:
                      uint64_t v20 = OUTLINED_FUNCTION_2_42();
                      if (test_string_s(v20, v21, v22, (uint64_t *)&unk_268C67E70)) {
                        goto LABEL_24;
                      }
                      uint64_t v16 = OUTLINED_FUNCTION_22_28();
                      goto LABEL_22;
                    case 9:
                      goto LABEL_10;
                    case 10:
                      uint64_t v16 = (uint64_t)v0;
                      uint64_t v17 = 13;
LABEL_22:
                      bspush_ca_scan(v16, v17);
                      uint64_t v10 = OUTLINED_FUNCTION_2_42();
                      uint64_t v13 = (uint64_t *)&unk_268C67E6D;
                      goto LABEL_23;
                    case 11:
                    case 14:
                      goto LABEL_35;
                    case 12:
                      bspush_ca_scan((uint64_t)v0, 14);
                      uint64_t v23 = OUTLINED_FUNCTION_2_42();
                      if (test_string_s(v23, v24, v25, (uint64_t *)&unk_268C67E6E)) {
                        goto LABEL_24;
                      }
                      goto LABEL_31;
                    case 13:
                    case 15:
LABEL_31:
                      uint64_t v10 = OUTLINED_FUNCTION_2_42();
                      uint64_t v13 = (uint64_t *)&unk_268C67E6F;
                      goto LABEL_23;
                    case 17:
                      break;
                    default:
                      goto LABEL_3;
                  }
                }
              }
              insert_por_final_stress();
            }
          }
          break;
        }
      }
    }
  }
LABEL_3:
  vretproc((uint64_t)v0);
  OUTLINED_FUNCTION_7_39();
}

void assign_secondary_stress()
{
  OUTLINED_FUNCTION_8_38();
  OUTLINED_FUNCTION_4_40();
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  OUTLINED_FUNCTION_6_39(v2, v3, v4, v5, v6, v7, v8, v9, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33,
    v34,
    v35,
    v36,
    v37,
    v38,
    v39,
    v40,
    v41,
    v42,
    v43,
    v44,
    v45,
    v46,
    v47);
  OUTLINED_FUNCTION_12_37();
  bzero(v62, v10);
  uint64_t v11 = setjmp(v62);
  if (!v11)
  {
    uint64_t v18 = OUTLINED_FUNCTION_15_35(v11, (uint64_t)&v23, v12, v13, v14, v15, v16, v17, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33,
            v34,
            v35,
            v36,
            v37,
            v38,
            v39,
            v40,
            v41,
            v42,
            v43,
            v44,
            v45,
            v46,
            v47,
            v48,
            v49,
            v50,
            v51,
            v52,
            v53,
            v54,
            v55,
            v56,
            v57,
            v58,
            v59,
            v60,
            v61,
            v62[0]);
    if (!v18)
    {
      OUTLINED_FUNCTION_19_32(v18, (uint64_t)&v50);
      get_parm(v0, (uint64_t)&v48, v1, (__int16)v62);
      push_ptr_init(v0, (uint64_t)&v46);
      fence_40(v0, 0, (uint64_t)&_MergedGlobals_1_4);
      if (*(__int16 *)(v0 + 5974) >= 3)
      {
        do
        {
          starttest(v0, 2);
          if (!lpta_loadp_setscan_r(v0, (uint64_t)&v50) && !advanc((void *)v0)) {
            goto LABEL_6;
          }
          do
          {
LABEL_7:
            uint64_t v19 = OUTLINED_FUNCTION_22_28();
            lpta_rpta_loadp(v19, v20, (uint64_t)&v46);
            if (!insert_2pt_i(v0, 7u, 2, (uint64_t)&string_20, 0)) {
              goto LABEL_14;
            }
            uint64_t v21 = *(void *)(v0 + 104);
            if (v21) {
              int v22 = OUTLINED_FUNCTION_0_44(v21);
            }
            else {
              int v22 = OUTLINED_FUNCTION_11_38();
            }
          }
          while (v22 == 2);
        }
        while (v22 == 1);
        if (v22 == 3)
        {
LABEL_6:
          savescptr(v0, 3, (uint64_t)&v46);
          goto LABEL_7;
        }
      }
    }
  }
LABEL_14:
  vretproc(v0);
  OUTLINED_FUNCTION_7_39();
}

void dict_assigned_stress()
{
  OUTLINED_FUNCTION_8_38();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  HIDWORD(v22) = 0;
  OUTLINED_FUNCTION_3_41(v2);
  OUTLINED_FUNCTION_12_37();
  bzero(v37, v4);
  uint64_t v5 = setjmp(v37);
  if (!v5
    && !OUTLINED_FUNCTION_15_35(v5, (uint64_t)v21, v6, v7, v8, v9, v10, v11, v20, v21[0], v21[1], v21[2], v21[3], v21[4], v21[5], v21[6], v21[7], v21[8], v21[9],
                        v21[10],
                        v21[11],
                        v21[12],
                        v21[13],
                        v21[14],
                        v21[15],
                        v21[16],
                        v21[17],
                        v21[18],
                        v21[19],
                        v21[20],
                        v21[21],
                        v21[22],
                        v22,
                        v23,
                        v24,
                        v25,
                        v26,
                        v27,
                        v28,
                        v29,
                        v30,
                        v31,
                        v32,
                        v33,
                        v34,
                        v35,
                        v36,
                        v37[0]))
  {
    get_parm(v3, (uint64_t)&v25, v1, -6);
    push_ptr_init(v3, (uint64_t)&v23);
    HIDWORD(v22) = 65532;
    fence_40(v3, 0, (uint64_t)&_MergedGlobals_1_4);
    uint64_t v12 = OUTLINED_FUNCTION_5_39();
    lpta_loadpn(v12, v13);
    rpta_loadpn(v3, v3 + 3344);
    if (compare_ptas(v3) || testeq(v3))
    {
      while (2)
      {
        uint64_t v14 = OUTLINED_FUNCTION_5_39();
        if (!lpta_loadp_setscan_r(v14, v15) && !advance_tok())
        {
LABEL_8:
          uint64_t v16 = OUTLINED_FUNCTION_22_28();
          savescptr(v16, v17, (uint64_t)&v23);
        }
LABEL_9:
        starttest(v3, 4);
        move_i(v3, (unsigned __int16 *)&v22 + 2, 1);
        if (stress_vowel(v3, (__int16 *)&v25, (__int16 *)(v3 + 5976)))
        {
          uint64_t v18 = *(void *)(v3 + 104);
          if (v18) {
            OUTLINED_FUNCTION_0_44(v18);
          }
          else {
            OUTLINED_FUNCTION_11_38();
          }
          OUTLINED_FUNCTION_20_31();
          switch(v19)
          {
            case 0:
              continue;
            case 1:
              goto LABEL_9;
            case 2:
              goto LABEL_8;
            case 3:
              goto LABEL_14;
            default:
              goto LABEL_3;
          }
        }
        else
        {
LABEL_14:
          *(void *)(v3 + 5984) = *(void *)(v3 + 3352);
        }
        break;
      }
    }
  }
LABEL_3:
  vretproc(v3);
  OUTLINED_FUNCTION_7_39();
}

void accented_vowel()
{
  OUTLINED_FUNCTION_8_38();
  OUTLINED_FUNCTION_24_26();
  uint64_t v30 = *MEMORY[0x263EF8340];
  v25[0] = 0;
  v25[1] = 0;
  v24[0] = 0;
  v24[1] = 0;
  int v23 = 0;
  v22[0] = 0;
  v22[1] = 0;
  OUTLINED_FUNCTION_6_39(v2, v3, v4, v5, v6, v7, v8, v9, v20[0], v20[1], v20[2], v20[3], v20[4], v20[5], v20[6], v20[7], v20[8], v20[9], v20[10],
    v20[11],
    v20[12],
    v20[13],
    v20[14],
    v20[15],
    v20[16],
    v20[17],
    v20[18],
    v20[19],
    v20[20],
    v20[21],
    v20[22],
    v21[0],
    v21[1]);
  OUTLINED_FUNCTION_12_37();
  bzero(v29, v10);
  if (!setjmp(v29))
  {
    uint64_t v11 = ventproc(v0, (uint64_t)v20, (uint64_t)v28, (uint64_t)v27, (uint64_t)v26, (uint64_t)v29);
    if (!v11)
    {
      OUTLINED_FUNCTION_18_32(v11, (uint64_t)v25);
      get_parm(v0, (uint64_t)v24, v1, (__int16)v29);
      OUTLINED_FUNCTION_16_34(v12, (uint64_t)&v23);
      push_ptr_init(v0, (uint64_t)v22);
      push_ptr_init(v0, (uint64_t)v21);
      fence_40(v0, 0, (uint64_t)&_MergedGlobals_1_4);
      fence_40(v0, 1, (uint64_t)&unk_268C67E6F);
      if (*(unsigned __int16 *)(v0 + 2286) != *(unsigned __int16 *)(v0 + 3886))
      {
        uint64_t v13 = 0;
        while (2)
        {
          uint64_t v14 = OUTLINED_FUNCTION_5_39();
          starttest(v14, v15);
          if (!lpta_loadp_setscan_l(v0, (uint64_t)v24))
          {
            uint64_t v16 = v13;
LABEL_8:
            uint64_t v13 = v16;
            bspush_ca_scan(v0, 4);
LABEL_9:
            savescptr(v0, 5, (uint64_t)v21);
            if (!testFldeq(v0, 1u, 4, 1))
            {
              bspush_ca_scan_boa(v0, 6);
              if (testFldeq(v0, 1u, 5, 0)) {
                uint64_t v13 = v13;
              }
              else {
                uint64_t v13 = 1;
              }
            }
LABEL_13:
            uint64_t v17 = *(void *)(v0 + 104);
            if (v17)
            {
              int v18 = OUTLINED_FUNCTION_0_44(v17);
            }
            else
            {
              int v18 = vback((void *)v0, v13);
              uint64_t v13 = 0;
            }
            uint64_t v16 = v13;
            switch(v18)
            {
              case 1:
                continue;
              case 3:
                goto LABEL_8;
              case 4:
                BOOL v19 = advance_tok();
                uint64_t v16 = v13;
                if (!v19) {
                  goto LABEL_8;
                }
                goto LABEL_13;
              case 5:
                goto LABEL_9;
              case 6:
                bspop_boa(v0);
                if (advance_tok()) {
                  goto LABEL_13;
                }
                goto LABEL_20;
              case 7:
LABEL_20:
                savescptr(v0, 7, (uint64_t)v22);
                stress_vowel(v0, (__int16 *)v25, (__int16 *)v22);
                break;
              default:
                goto LABEL_4;
            }
          }
          break;
        }
      }
    }
  }
LABEL_4:
  vretproc(v0);
  OUTLINED_FUNCTION_7_39();
}

uint64_t insert_por_final_stress()
{
  OUTLINED_FUNCTION_4_40();
  OUTLINED_FUNCTION_3_41(v2);
  OUTLINED_FUNCTION_10_38(v3, v4, v5, v6, v7, v8, v9, v10, v29, v32, v35, v38, v41, v44, v47, v50, v53, v56, v59,
    v62,
    v65,
    v68,
    v71,
    v74,
    v77,
    v80,
    v83,
    v86,
    v89,
    v92,
    v95,
    v98,
    v101,
    0,
    0,
    v107,
    v109,
    v111,
    v113,
    v115);
  uint64_t v11 = setjmp(v1);
  if (v11
    || (uint64_t v19 = OUTLINED_FUNCTION_1_42(v11, v12, v13, v14, v15, v16, v17, v18, v30, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60,
                v63,
                v66,
                v69,
                v72,
                v75,
                v78,
                v81,
                v84,
                v87,
                v90,
                v93,
                v96,
                v99,
                v102,
                v104,
                v106,
                *(int *)v108,
                v108[4],
                *(int *)v110,
                *(__int16 *)&v110[4],
                v110[6],
                v112,
                SWORD2(v112),
                SBYTE6(v112),
                SHIBYTE(v112),
                v114,
                v116),
        v19))
  {
    uint64_t v27 = 94;
  }
  else
  {
    OUTLINED_FUNCTION_13_36(v19, v20, v21, v22, v23, v24, v25, v26, v31, v34, v37, v40, v43, v46, v49, v52, v55, v58, v61,
      v64,
      v67,
      v70,
      v73,
      v76,
      v79,
      v82,
      v85,
      v88,
      v91,
      v94,
      v97,
      v100,
      v103,
      v105);
    OUTLINED_FUNCTION_9_38();
    uint64_t v27 = 0;
    fence_40(v0, 0, (uint64_t)&_MergedGlobals_1_4);
    OUTLINED_FUNCTION_14_36();
    insert_final_stress();
    *(_WORD *)(v0 + 5974) = *(_WORD *)(v0 + 3806) - 1;
  }
  vretproc(v0);
  return v27;
}

uint64_t insert_por_penult_stress()
{
  OUTLINED_FUNCTION_4_40();
  OUTLINED_FUNCTION_3_41(v2);
  OUTLINED_FUNCTION_10_38(v3, v4, v5, v6, v7, v8, v9, v10, v29, v32, v35, v38, v41, v44, v47, v50, v53, v56, v59,
    v62,
    v65,
    v68,
    v71,
    v74,
    v77,
    v80,
    v83,
    v86,
    v89,
    v92,
    v95,
    v98,
    v101,
    0,
    0,
    v107,
    v109,
    v111,
    v113,
    v115);
  uint64_t v11 = setjmp(v1);
  if (v11
    || (uint64_t v19 = OUTLINED_FUNCTION_1_42(v11, v12, v13, v14, v15, v16, v17, v18, v30, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60,
                v63,
                v66,
                v69,
                v72,
                v75,
                v78,
                v81,
                v84,
                v87,
                v90,
                v93,
                v96,
                v99,
                v102,
                v104,
                v106,
                *(int *)v108,
                v108[4],
                *(int *)v110,
                *(__int16 *)&v110[4],
                v110[6],
                v112,
                SWORD2(v112),
                SBYTE6(v112),
                SHIBYTE(v112),
                v114,
                v116),
        v19))
  {
    uint64_t v27 = 94;
  }
  else
  {
    OUTLINED_FUNCTION_13_36(v19, v20, v21, v22, v23, v24, v25, v26, v31, v34, v37, v40, v43, v46, v49, v52, v55, v58, v61,
      v64,
      v67,
      v70,
      v73,
      v76,
      v79,
      v82,
      v85,
      v88,
      v91,
      v94,
      v97,
      v100,
      v103,
      v105);
    OUTLINED_FUNCTION_9_38();
    uint64_t v27 = 0;
    fence_40(v0, 0, (uint64_t)&_MergedGlobals_1_4);
    OUTLINED_FUNCTION_14_36();
    insert_penult_stress();
    *(_WORD *)(v0 + 5974) = *(_WORD *)(v0 + 3806) - 2;
  }
  vretproc(v0);
  return v27;
}

uint64_t stress_vowel(uint64_t a1, __int16 *a2, __int16 *a3)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  v37[0] = 0;
  v37[1] = 0;
  v36[0] = 0;
  v36[1] = 0;
  v35[0] = 0;
  v35[1] = 0;
  int v34 = 0;
  v33[0] = 0;
  v33[1] = 0;
  v32[0] = 0;
  v32[1] = 0;
  v31[0] = 0;
  v31[1] = 0;
  v30[0] = 0;
  v30[1] = 0;
  OUTLINED_FUNCTION_3_41(a1);
  OUTLINED_FUNCTION_12_37();
  bzero(v41, v6);
  if (setjmp(v41) || ventproc(a1, (uint64_t)v29, (uint64_t)v40, (uint64_t)v39, (uint64_t)v38, (uint64_t)v41))
  {
LABEL_3:
    uint64_t v7 = 94;
  }
  else
  {
    get_parm(a1, (uint64_t)v37, a2, -6);
    get_parm(a1, (uint64_t)v36, a3, -6);
    uint64_t v9 = OUTLINED_FUNCTION_14_36();
    get_parm(v9, v10, v11, -6);
    OUTLINED_FUNCTION_9_38();
    uint64_t v12 = OUTLINED_FUNCTION_5_39();
    push_ptr_init(v12, v13);
    push_ptr_init(a1, (uint64_t)v32);
    push_ptr_init(a1, (uint64_t)v31);
    push_ptr_init(a1, (uint64_t)v30);
    fence_40(a1, 0, (uint64_t)&_MergedGlobals_1_4);
    lpta_loadpn(a1, v36);
    lpta_ctxtl(a1);
    uint64_t v14 = OUTLINED_FUNCTION_5_39();
    lpta_storep(v14, v15);
    uint64_t v16 = OUTLINED_FUNCTION_5_39();
    lpta_rpta_loadp(v16, v17, (uint64_t)v35);
    rpta_ctxtr(a1);
    insert_2ptv();
    if (!v18)
    {
      uint64_t v19 = OUTLINED_FUNCTION_17_34();
      startloop(v19, v20);
      uint64_t v21 = OUTLINED_FUNCTION_5_39();
      copyvar(v21, v22, v23);
      copyvar(a1, (unsigned __int16 *)v30, (unsigned __int16 *)v33);
      uint64_t v24 = OUTLINED_FUNCTION_5_39();
      if (!forall_to_test(v24, v25, (__int16 *)v30))
      {
LABEL_7:
        uint64_t v26 = OUTLINED_FUNCTION_17_34();
        bspush_ca(v26);
        if (!lpta_loadp_setscan_r(a1, (uint64_t)v32) && !advanc((void *)a1))
        {
LABEL_9:
          savescptr(a1, 4, (uint64_t)v31);
LABEL_10:
          c_assvar(a1, (unsigned __int16 *)(a1 + 5972));
          ++*(_WORD *)(a1 + 5974);
LABEL_11:
          if (!forto_adv_r(a1, 1, 2, 5, 7, (uint64_t)v32))
          {
            uint64_t v7 = 0;
            goto LABEL_4;
          }
        }
      }
    }
    uint64_t v27 = *(void *)(a1 + 104);
    if (v27) {
      OUTLINED_FUNCTION_0_44(v27);
    }
    else {
      OUTLINED_FUNCTION_11_38();
    }
    OUTLINED_FUNCTION_20_31();
    uint64_t v7 = 0;
    switch(v28)
    {
      case 0:
        break;
      case 1:
        goto LABEL_10;
      case 2:
        goto LABEL_11;
      case 3:
        goto LABEL_9;
      case 4:
        goto LABEL_7;
      default:
        goto LABEL_3;
    }
  }
LABEL_4:
  vretproc(a1);
  return v7;
}

uint64_t OUTLINED_FUNCTION_0_44@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 104) = 0;
  return a1;
}

uint64_t OUTLINED_FUNCTION_1_42(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,char a37,int a38,__int16 a39,char a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46)
{
  return ventproc(v46, (uint64_t)&a10, (uint64_t)&a44, (uint64_t)&a40, (uint64_t)&a37, (uint64_t)&a46);
}

uint64_t OUTLINED_FUNCTION_2_42()
{
  return v0;
}

void OUTLINED_FUNCTION_3_41(uint64_t a1, ...)
{
  va_start(va, a1);
  bzero(va, 0xB8uLL);
}

uint64_t OUTLINED_FUNCTION_5_39()
{
  return v0;
}

void OUTLINED_FUNCTION_6_39(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  a32 = 0;
  a33 = 0;
  bzero(&a9, 0xB8uLL);
}

void OUTLINED_FUNCTION_9_38()
{
  get_parm(v0, v2, v1, -4);
}

void OUTLINED_FUNCTION_10_38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  bzero(&a40, 0xC0uLL);
}

uint64_t OUTLINED_FUNCTION_11_38()
{
  return vback(v0, 0);
}

void OUTLINED_FUNCTION_13_36(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  get_parm(v34, (uint64_t)&a34, v35, -6);
}

uint64_t OUTLINED_FUNCTION_14_36()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_15_35(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,char a39,int a40,__int16 a41,char a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,char a48)
{
  return ventproc(v48, a2, (uint64_t)&a46, (uint64_t)&a42, (uint64_t)&a39, (uint64_t)&a48);
}

void OUTLINED_FUNCTION_16_34(uint64_t a1, uint64_t a2)
{
  get_parm(v2, a2, v3, -4);
}

uint64_t OUTLINED_FUNCTION_17_34()
{
  return v0;
}

void OUTLINED_FUNCTION_18_32(uint64_t a1, uint64_t a2)
{
  get_parm(v2, a2, v3, -6);
}

void OUTLINED_FUNCTION_19_32(uint64_t a1, uint64_t a2)
{
  get_parm(v2, a2, v3, -6);
}

BOOL OUTLINED_FUNCTION_21_30()
{
  return testFldeq(v0, v2, v1, v2);
}

uint64_t OUTLINED_FUNCTION_22_28()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_23_27()
{
  return v0;
}

void *fence_41(uint64_t a1, int a2, uint64_t a3)
{
  *(unsigned char *)(*(void *)(a1 + 192) + 8121) = a2;
  double result = memset(*(void **)(a1 + 264), *(unsigned __int8 *)(a1 + 288), *(unsigned __int8 *)(a1 + 288));
  for (uint64_t i = 0; a2 != i; ++i)
  {
    *(unsigned char *)(*(void *)(a1 + 248) + i) = *(unsigned char *)(a3 + i);
    *(unsigned char *)(*(void *)(a1 + 264) + *(unsigned __int8 *)(a3 + i)) = i;
  }
  return result;
}

uint64_t create_syllables(uint64_t a1, __int16 *a2, __int16 *a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  memset(v30, 0, sizeof(v30));
  OUTLINED_FUNCTION_10_39(a1, (int)a2, (int)a3, a4, a5, a6, a7, a8, v27[0], v27[1], v27[2], v27[3], v27[4], v27[5], v27[6], v27[7], v27[8], v27[9], v27[10],
    v27[11],
    v27[12],
    v27[13],
    v27[14],
    v27[15],
    v27[16],
    v27[17],
    v27[18],
    v27[19],
    v27[20],
    v27[21],
    v27[22],
    v28[0],
    v28[1],
    v29[0],
    v29[1]);
  bzero(v34, 0xC0uLL);
  if (setjmp(v34) || ventproc(a1, (uint64_t)v27, (uint64_t)v33, (uint64_t)v32, (uint64_t)v31, (uint64_t)v34))
  {
LABEL_3:
    vretproc(a1);
    return 94;
  }
  uint64_t v12 = OUTLINED_FUNCTION_19_33();
  get_parm(v12, v13, a2, -6);
  get_parm(a1, (uint64_t)v30, a3, -6);
  push_ptr_init(a1, (uint64_t)v29);
  push_ptr_init(a1, (uint64_t)v28);
  fence_41(a1, 0, (uint64_t)&null_str_15);
  startloop(a1, 1);
  uint64_t v14 = OUTLINED_FUNCTION_19_33();
  lpta_loadpn(v14, v15);
  lpta_mover(a1);
  lpta_storep(a1, (uint64_t)v29);
  uint64_t v16 = OUTLINED_FUNCTION_12_38();
  lpta_loadpn(v16, v17);
  lpta_mover(a1);
  lpta_storep(a1, (uint64_t)v28);
  if (forall_to_test(a1, (unsigned __int16 *)v29, (__int16 *)v28))
  {
LABEL_12:
    uint64_t v24 = *(void *)(a1 + 104);
    if (v24) {
      int v25 = OUTLINED_FUNCTION_11_39(v24);
    }
    else {
      int v25 = vback((void *)a1, 0);
    }
    switch(v25)
    {
      case 1:
        goto LABEL_16;
      case 2:
        goto LABEL_9;
      case 3:
        goto LABEL_11;
      case 4:
        goto LABEL_10;
      case 5:
        break;
      case 6:
        goto LABEL_18;
      default:
        goto LABEL_3;
    }
  }
  bspush_ca(a1);
  if (lpta_loadp_setscan_r(a1, (uint64_t)v29) || OUTLINED_FUNCTION_15_36() || advance_tok()) {
    goto LABEL_12;
  }
LABEL_9:
  OUTLINED_FUNCTION_14_37(4);
  assign_syll_onset(a1, (__int16 *)v29, v18, v19, v20, v21, v22, v23);
LABEL_10:
  c_assvar(a1, (unsigned __int16 *)(a1 + 3804));
  ++*(_WORD *)(a1 + 3806);
LABEL_11:
  if (forto_adv_upto_r(a1, 1, 2, 5, 4, (uint64_t)v29)) {
    goto LABEL_12;
  }
LABEL_16:
  __int16 v26 = *(_WORD *)(a1 + 3806);
  *(_WORD *)(a1 + 5950) = v26;
  if (*(unsigned __int16 *)(a1 + 2286) == *(unsigned __int16 *)(a1 + 3874)) {
    *(_WORD *)(a1 + 5950) = v26 - 2;
  }
LABEL_18:
  vretproc(a1);
  return 0;
}

uint64_t assign_syll_onset(uint64_t a1, __int16 *a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v8 = a2;
  uint64_t v99 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_10_39(a1, (int)a2, a3, a4, a5, a6, a7, a8, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79,
    v80,
    v81,
    v82,
    v83,
    v84,
    v85,
    v86,
    v87,
    v88,
    v89,
    v90,
    v91,
    v92,
    v93,
    v94[0],
    v94[1]);
  bzero(v98, 0xC0uLL);
  if (setjmp(v98) || ventproc(a1, (uint64_t)&v69, (uint64_t)v97, (uint64_t)v96, (uint64_t)v95, (uint64_t)v98))
  {
LABEL_3:
    vretproc(a1);
    return 94;
  }
  get_parm(a1, (uint64_t)v94, v8, -6);
  push_ptr_init(a1, (uint64_t)&v92);
  fence_41(a1, 0, (uint64_t)&null_str_15);
  fence_41(a1, 1, (uint64_t)&_MergedGlobals_37);
  starttest(a1, 1);
  uint64_t v11 = OUTLINED_FUNCTION_12_38();
  int v13 = lpta_loadp_setscan_l(v11, v12);
  int v14 = 0;
  LODWORD(v8) = 0;
  if (!v13)
  {
LABEL_17:
    LODWORD(v8) = v14;
    OUTLINED_FUNCTION_5_40(2, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86,
      v87,
      v88,
      v89,
      v90,
      v91,
      v92);
    bspush_ca_scan_boa(a1, 3);
    if (!OUTLINED_FUNCTION_16_35() && !advance_tok()) {
      LODWORD(v8) = 1;
    }
    goto LABEL_39;
  }
LABEL_5:
  uint64_t v15 = OUTLINED_FUNCTION_14_37(5);
  int v23 = (int)v8;
  if (!OUTLINED_FUNCTION_8_39(v15, v16, v17, v18, v19, v20, v21, v22, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79,
                        v80,
                        v81,
                        v82,
                        v83,
                        v84,
                        v85,
                        v86,
                        v87,
                        v88,
                        v89,
                        v90,
                        v91,
                        v92,
                        v93,
                        v94[0]))
  {
LABEL_21:
    while (!testFldeq(a1, 4u, 1, 1) && !advance_tok())
    {
      uint64_t v47 = OUTLINED_FUNCTION_19_33();
      bspush_ca_scan(v47, v48);
    }
    LODWORD(v8) = v23;
    goto LABEL_39;
  }
LABEL_6:
  uint64_t v24 = OUTLINED_FUNCTION_14_37(9);
  if (!OUTLINED_FUNCTION_8_39(v24, v25, v26, v27, v28, v29, v30, v31, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79,
                        v80,
                        v81,
                        v82,
                        v83,
                        v84,
                        v85,
                        v86,
                        v87,
                        v88,
                        v89,
                        v90,
                        v91,
                        v92,
                        v93,
                        v94[0]))
  {
    OUTLINED_FUNCTION_3_42(10);
    uint64_t v44 = (uint64_t *)&unk_268C67E73;
LABEL_14:
    int v45 = OUTLINED_FUNCTION_7_40(v41, v42, v43, v44);
    LODWORD(v42) = v8;
    if (!v45)
    {
LABEL_15:
      LODWORD(v8) = v42;
      OUTLINED_FUNCTION_3_42(14);
      int v46 = 1;
LABEL_51:
      BOOL v67 = testFldeq(a1, 4u, 4, v46);
      int v66 = (int)v8;
      if (!v67)
      {
LABEL_52:
        LODWORD(v8) = v66;
        BOOL v68 = advance_tok();
        int v49 = (int)v8;
        if (!v68)
        {
LABEL_26:
          LODWORD(v8) = v49;
          OUTLINED_FUNCTION_5_40(16, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86,
            v87,
            v88,
            v89,
            v90,
            v91,
            v92);
          bspush_ca_boa(a1);
          uint64_t v58 = OUTLINED_FUNCTION_8_39(v50, v51, v52, v53, v54, v55, v56, v57, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79,
                  v80,
                  v81,
                  v82,
                  v83,
                  v84,
                  v85,
                  v86,
                  v87,
                  v88,
                  v89,
                  v90,
                  v91,
                  v92,
                  v93,
                  v94[0]);
          if (!v58 && !OUTLINED_FUNCTION_7_40(v58, v59, v60, (uint64_t *)&unk_268C67E73))
          {
            OUTLINED_FUNCTION_3_42(18);
            uint64_t v61 = (uint64_t *)&unk_268C67E77;
LABEL_29:
            if (!OUTLINED_FUNCTION_7_40(v41, v42, v43, v61)) {
LABEL_30:
            }
              LODWORD(v8) = 1;
          }
        }
      }
    }
    goto LABEL_39;
  }
LABEL_7:
  int v32 = (int)v8;
  uint64_t v33 = OUTLINED_FUNCTION_14_37(20);
  if (!OUTLINED_FUNCTION_8_39(v33, v34, v35, v36, v37, v38, v39, v40, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79,
                        v80,
                        v81,
                        v82,
                        v83,
                        v84,
                        v85,
                        v86,
                        v87,
                        v88,
                        v89,
                        v90,
                        v91,
                        v92,
                        v93,
                        v94[0]))
  {
LABEL_31:
    OUTLINED_FUNCTION_5_40(21, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86,
      v87,
      v88,
      v89,
      v90,
      v91,
      v92);
    OUTLINED_FUNCTION_3_42(22);
    uint64_t v62 = (uint64_t *)&unk_268C67E76;
LABEL_32:
    int v63 = OUTLINED_FUNCTION_7_40(v41, v42, v43, v62);
    LODWORD(v43) = v8;
    if (!v63)
    {
LABEL_33:
      LODWORD(v8) = v43;
      if (!OUTLINED_FUNCTION_15_36() && !advance_tok()) {
        goto LABEL_37;
      }
    }
    goto LABEL_39;
  }
LABEL_8:
  starttest(a1, 4);
  if (!lpta_loadp_setscan_l(a1, (uint64_t)v94))
  {
    if (OUTLINED_FUNCTION_16_35())
    {
      LODWORD(v8) = v32;
      goto LABEL_39;
    }
    LODWORD(v8) = v32;
    if (!advance_tok())
    {
LABEL_13:
      OUTLINED_FUNCTION_5_40(26, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86,
        v87,
        v88,
        v89,
        v90,
        v91,
        v92);
      goto LABEL_37;
    }
    do
    {
LABEL_39:
      uint64_t v64 = *(void *)(a1 + 104);
      if (v64)
      {
        uint64_t v41 = OUTLINED_FUNCTION_11_39(v64);
        uint64_t v8 = v65;
      }
      else
      {
        uint64_t v41 = vback((void *)a1, (int)v8);
        uint64_t v8 = 0;
      }
      uint64_t v42 = (uint64_t)v8;
      int v66 = (int)v8;
      uint64_t v43 = (uint64_t)v8;
      switch((int)v41)
      {
        case 1:
          goto LABEL_5;
        case 2:
          int v14 = (int)v8;
          goto LABEL_17;
        case 3:
        case 17:
          bspop_boa(a1);
          goto LABEL_37;
        case 4:
          goto LABEL_37;
        case 5:
          goto LABEL_6;
        case 6:
          OUTLINED_FUNCTION_5_40(6, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86,
            v87,
            v88,
            v89,
            v90,
            v91,
            v92);
          break;
        case 7:
          int v23 = (int)v8;
          goto LABEL_21;
        case 8:
          break;
        case 9:
          goto LABEL_7;
        case 10:
          OUTLINED_FUNCTION_3_42(12);
          uint64_t v44 = (uint64_t *)&unk_268C67E74;
          goto LABEL_14;
        case 11:
          goto LABEL_15;
        case 12:
          OUTLINED_FUNCTION_3_42(13);
          uint64_t v44 = (uint64_t *)&unk_268C67E75;
          goto LABEL_14;
        case 13:
          uint64_t v44 = (uint64_t *)&unk_268C67E76;
          goto LABEL_14;
        case 14:
          int v46 = 2;
          goto LABEL_51;
        case 15:
          goto LABEL_52;
        case 16:
          int v49 = (int)v8;
          goto LABEL_26;
        case 18:
          uint64_t v61 = (uint64_t *)&unk_268C67E78;
          goto LABEL_29;
        case 19:
          goto LABEL_30;
        case 20:
          int v32 = (int)v8;
          goto LABEL_8;
        case 21:
          goto LABEL_31;
        case 22:
          OUTLINED_FUNCTION_3_42(24);
          uint64_t v62 = (uint64_t *)&unk_268C67E75;
          goto LABEL_32;
        case 23:
          goto LABEL_33;
        case 24:
          OUTLINED_FUNCTION_3_42(25);
          uint64_t v62 = (uint64_t *)&unk_268C67E79;
          goto LABEL_32;
        case 25:
          uint64_t v62 = (uint64_t *)&unk_268C67E7A;
          goto LABEL_32;
        case 26:
          goto LABEL_13;
        default:
          goto LABEL_3;
      }
    }
    while (test_synch((void *)a1, 8, 1u, (unsigned __int8 *)&unk_268C67E72));
    goto LABEL_38;
  }
LABEL_37:
  *(unsigned char *)(a1 + 136) = 1;
  *(void *)(a1 + 112) = v93;
  *(void *)(a1 + 128) = 0;
  proj_def(a1);
LABEL_38:
  vretproc(a1);
  return 0;
}

uint64_t estimate_por_nsylls(void *a1, __int16 *a2, __int16 *a3, __int16 *a4)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  int v103 = 0;
  v102[1] = 0;
  v102[0] = 0;
  v101[1] = 0;
  v101[0] = 0;
  v100[1] = 0;
  v99[1] = 0;
  v100[0] = 0;
  v98[1] = 0;
  v99[0] = 0;
  v97[1] = 0;
  v98[0] = 0;
  v97[0] = 0;
  bzero(v96, 0xB8uLL);
  bzero(v107, 0xC0uLL);
  if (setjmp(v107)
    || ventproc((uint64_t)a1, (uint64_t)v96, (uint64_t)v106, (uint64_t)v105, (uint64_t)v104, (uint64_t)v107))
  {
LABEL_3:
    uint64_t v8 = 94;
    goto LABEL_4;
  }
  uint64_t v95 = a2;
  get_parm((uint64_t)a1, (uint64_t)&v103, a2, -4);
  get_parm((uint64_t)a1, (uint64_t)v102, a3, -6);
  get_parm((uint64_t)a1, (uint64_t)v101, a4, -6);
  uint64_t v10 = OUTLINED_FUNCTION_12_38();
  push_ptr_init(v10, v11);
  uint64_t v12 = OUTLINED_FUNCTION_19_33();
  push_ptr_init(v12, v13);
  push_ptr_init((uint64_t)a1, (uint64_t)v98);
  push_ptr_init((uint64_t)a1, (uint64_t)v97);
  fence_41((uint64_t)a1, 0, (uint64_t)&null_str_15);
  fence_41((uint64_t)a1, 1, (uint64_t)&unk_268C67E72);
  startloop((uint64_t)a1, 1);
  lpta_loadpn(a1, v102);
  lpta_mover((uint64_t)a1);
  uint64_t v14 = OUTLINED_FUNCTION_12_38();
  lpta_storep(v14, v15);
  lpta_loadpn(a1, v101);
  lpta_mover((uint64_t)a1);
  lpta_storep((uint64_t)a1, (uint64_t)v98);
  uint64_t v16 = 0;
  while (1)
  {
LABEL_6:
    uint64_t v17 = OUTLINED_FUNCTION_12_38();
    if (forall_to_test(v17, v18, (__int16 *)v98)) {
      goto LABEL_34;
    }
LABEL_7:
    uint64_t v19 = OUTLINED_FUNCTION_6_40();
    bspush_ca(v19);
    if (OUTLINED_FUNCTION_2_43() || advance_tok()) {
      goto LABEL_34;
    }
LABEL_9:
    uint64_t v20 = OUTLINED_FUNCTION_6_40();
    savescptr(v20, 4, (uint64_t)v99);
LABEL_10:
    starttest((uint64_t)a1, 5);
    if (!OUTLINED_FUNCTION_2_43()) {
      break;
    }
LABEL_11:
    starttest((uint64_t)a1, 18);
    if (OUTLINED_FUNCTION_2_43())
    {
LABEL_12:
      if (!OUTLINED_FUNCTION_2_43())
      {
        uint64_t v21 = OUTLINED_FUNCTION_0_45();
        if (!test_string_s(v21, v22, v23, (uint64_t *)&unk_268C67E86))
        {
          starttest((uint64_t)a1, 54);
          if (!OUTLINED_FUNCTION_13_37())
          {
LABEL_103:
            uint64_t v77 = OUTLINED_FUNCTION_6_40();
            savescptr(v77, 55, (uint64_t)v97);
            uint64_t v78 = OUTLINED_FUNCTION_0_45();
            if (!test_string_s(v78, v79, v80, (uint64_t *)&unk_268C67E86))
            {
              uint64_t v81 = (uint64_t)a1;
              uint64_t v82 = 56;
              goto LABEL_114;
            }
            goto LABEL_34;
          }
          goto LABEL_19;
        }
      }
      goto LABEL_101;
    }
    if (OUTLINED_FUNCTION_4_41() || advance_tok()) {
      goto LABEL_34;
    }
    starttest((uint64_t)a1, 19);
    if (!OUTLINED_FUNCTION_9_39())
    {
      if (OUTLINED_FUNCTION_4_41() || advance_tok() || OUTLINED_FUNCTION_4_41() || advance_tok()) {
        goto LABEL_34;
      }
LABEL_78:
      uint64_t v58 = OUTLINED_FUNCTION_6_40();
      savescptr(v58, 20, (uint64_t)v99);
      goto LABEL_100;
    }
LABEL_24:
    starttest((uint64_t)a1, 21);
    if (OUTLINED_FUNCTION_9_39()) {
      goto LABEL_101;
    }
    if (OUTLINED_FUNCTION_4_41() || advance_tok()) {
      goto LABEL_34;
    }
LABEL_79:
    uint64_t v59 = OUTLINED_FUNCTION_6_40();
    savescptr(v59, 22, (uint64_t)v99);
    starttest((uint64_t)a1, 23);
    if (!OUTLINED_FUNCTION_9_39())
    {
      bspush_ca_scan((uint64_t)a1, 24);
      uint64_t v86 = OUTLINED_FUNCTION_0_45();
      int v89 = test_string_s(v86, v87, v88, (uint64_t *)&unk_268C67E74);
      int v33 = v16;
      if (!v89)
      {
LABEL_113:
        LODWORD(v16) = v33;
        uint64_t v81 = (uint64_t)a1;
        uint64_t v82 = 26;
LABEL_114:
        bspush_ca_scan_boa(v81, v82);
LABEL_115:
        BOOL v90 = OUTLINED_FUNCTION_4_41();
        int v40 = v16;
        if (!v90)
        {
LABEL_116:
          LODWORD(v16) = v40;
          if (!advance_tok()) {
            LODWORD(v16) = 1;
          }
        }
      }
      goto LABEL_34;
    }
LABEL_80:
    starttest((uint64_t)a1, 28);
    if (!OUTLINED_FUNCTION_2_43())
    {
      bspush_ca_scan((uint64_t)a1, 29);
      uint64_t v83 = OUTLINED_FUNCTION_0_45();
      int v63 = test_string_s(v83, v84, v85, (uint64_t *)&unk_268C67E80);
LABEL_110:
      uint64_t v39 = v16;
      if (v63) {
        goto LABEL_34;
      }
      goto LABEL_102;
    }
LABEL_81:
    if (OUTLINED_FUNCTION_13_37()
      || (uint64_t v60 = OUTLINED_FUNCTION_0_45(), test_string_s(v60, v61, v62, (uint64_t *)&unk_268C67E82)))
    {
LABEL_83:
      starttest((uint64_t)a1, 34);
      if (OUTLINED_FUNCTION_2_43())
      {
LABEL_84:
        starttest((uint64_t)a1, 51);
        if (OUTLINED_FUNCTION_2_43()
          || test_string_s((uint64_t)a1, 1u, 2u, &qword_268C67E87))
        {
          goto LABEL_100;
        }
        bspush_ca_scan((uint64_t)a1, 52);
        uint64_t v38 = v16;
LABEL_87:
        uint64_t v16 = v38;
        int v63 = test_synch(a1, 53, 1u, (unsigned __int8 *)&unk_268C67E72);
        goto LABEL_110;
      }
      bspush_ca_scan((uint64_t)a1, 35);
      uint64_t v64 = OUTLINED_FUNCTION_0_45();
      int v67 = test_string_s(v64, v65, v66, (uint64_t *)&unk_268C67E82);
      uint64_t v34 = v16;
      if (v67) {
        goto LABEL_34;
      }
LABEL_89:
      uint64_t v16 = v34;
      starttest((uint64_t)a1, 37);
      if (!lpta_loadp_setscan_l((uint64_t)a1, (uint64_t)v100))
      {
        bspush_boa((uint64_t)a1);
        do
LABEL_106:
          bspush_ca_scan((uint64_t)a1, 38);
        while (!OUTLINED_FUNCTION_18_33() && !advance_tok());
        goto LABEL_34;
      }
LABEL_90:
      starttest((uint64_t)a1, 41);
      int v68 = OUTLINED_FUNCTION_13_37();
      uint64_t v39 = v16;
      if (!v68)
      {
LABEL_94:
        uint64_t v71 = OUTLINED_FUNCTION_6_40();
        savescptr(v71, 42, (uint64_t)v97);
        bspush_ca_scan((uint64_t)a1, 43);
        uint64_t v72 = OUTLINED_FUNCTION_0_45();
        int v75 = test_string_s(v72, v73, v74, (uint64_t *)&unk_268C67E84);
        uint64_t v35 = v16;
        if (v75) {
          goto LABEL_34;
        }
LABEL_95:
        uint64_t v16 = v35;
        if (lpta_loadp_setscan_r((uint64_t)a1, (uint64_t)v97)) {
          goto LABEL_34;
        }
        bspush_ca_scan((uint64_t)a1, 46);
        uint64_t v36 = v16;
LABEL_97:
        uint64_t v76 = v36;
        bspush_ca_scan((uint64_t)a1, 49);
        uint64_t v37 = v76;
LABEL_98:
        uint64_t v16 = v37;
        uint64_t v69 = a1;
        uint64_t v70 = 50;
LABEL_99:
        if (test_synch(v69, v70, 1u, (unsigned __int8 *)&unk_268C67E72)) {
          goto LABEL_34;
        }
LABEL_100:
        ++HIWORD(v103);
LABEL_101:
        uint64_t v39 = v16;
      }
    }
    else
    {
      starttest_l((uint64_t)a1, 32);
      if (OUTLINED_FUNCTION_9_39()) {
        goto LABEL_101;
      }
      uint64_t v91 = OUTLINED_FUNCTION_0_45();
      int v94 = test_string_s(v91, v92, v93, (uint64_t *)&unk_268C67E79);
      uint64_t v39 = v16;
      if (!v94)
      {
LABEL_93:
        uint64_t v69 = (void *)OUTLINED_FUNCTION_6_40();
        uint64_t v70 = 33;
        goto LABEL_99;
      }
    }
LABEL_102:
    uint64_t v16 = v39;
    ++HIWORD(v103);
    forall_cont_from();
  }
  if (OUTLINED_FUNCTION_18_33() || advance_tok()) {
    goto LABEL_34;
  }
  starttest((uint64_t)a1, 6);
  if (!OUTLINED_FUNCTION_2_43())
  {
    bspush_ca_scan((uint64_t)a1, 7);
    uint64_t v24 = OUTLINED_FUNCTION_0_45();
    int v27 = test_string_s(v24, v25, v26, (uint64_t *)&unk_268C67E7B);
    int v28 = v16;
    if (!v27)
    {
LABEL_29:
      LODWORD(v16) = v28;
      bspush_ca_scan_boa((uint64_t)a1, 12);
      bspush_ca_scan((uint64_t)a1, 13);
      goto LABEL_115;
    }
LABEL_34:
    int v29 = v16;
    while (2)
    {
      uint64_t v30 = a1[13];
      if (v30)
      {
        uint64_t v31 = OUTLINED_FUNCTION_11_39(v30);
        uint64_t v16 = v32;
      }
      else
      {
        uint64_t v31 = vback(a1, v29);
        uint64_t v16 = 0;
      }
      int v28 = v16;
      int v33 = v16;
      uint64_t v34 = v16;
      uint64_t v35 = v16;
      uint64_t v36 = v16;
      uint64_t v37 = v16;
      uint64_t v38 = v16;
      uint64_t v39 = v16;
      int v40 = v16;
      switch((int)v31)
      {
        case 1:
          goto LABEL_121;
        case 2:
          goto LABEL_10;
        case 3:
        case 6:
        case 54:
          break;
        case 4:
          goto LABEL_9;
        case 5:
          goto LABEL_11;
        case 7:
          OUTLINED_FUNCTION_3_42(9);
          uint64_t v41 = (uint64_t *)&unk_268C67E7C;
          goto LABEL_43;
        case 8:
          goto LABEL_29;
        case 9:
          OUTLINED_FUNCTION_3_42(10);
          uint64_t v41 = (uint64_t *)&unk_268C67E7A;
          goto LABEL_43;
        case 10:
          OUTLINED_FUNCTION_3_42(11);
          uint64_t v41 = (uint64_t *)&unk_268C67E7D;
          goto LABEL_43;
        case 11:
          uint64_t v41 = (uint64_t *)&unk_268C67E7E;
LABEL_43:
          int v42 = OUTLINED_FUNCTION_1_43(v31, v32, v39, v41);
          int v28 = v16;
          int v29 = v16;
          if (!v42) {
            goto LABEL_29;
          }
          continue;
        case 12:
        case 57:
          bspop_boa(a1);
          goto LABEL_101;
        case 13:
          OUTLINED_FUNCTION_3_42(15);
          int v43 = 24;
          goto LABEL_47;
        case 14:
          goto LABEL_116;
        case 15:
          int v43 = 19;
LABEL_47:
          BOOL v44 = testFldeq((uint64_t)a1, 1u, 0, v43);
          int v40 = v16;
          int v29 = v16;
          if (!v44) {
            goto LABEL_116;
          }
          continue;
        case 16:
        case 17:
        case 21:
        case 27:
        case 30:
        case 32:
        case 41:
        case 58:
          goto LABEL_102;
        case 18:
          goto LABEL_12;
        case 19:
          goto LABEL_24;
        case 20:
          goto LABEL_78;
        case 22:
          goto LABEL_79;
        case 23:
          goto LABEL_80;
        case 24:
          int v45 = OUTLINED_FUNCTION_1_43(v31, v32, v16, (uint64_t *)&unk_268C67E7F);
          int v33 = v16;
          int v29 = v16;
          if (!v45) {
            goto LABEL_113;
          }
          continue;
        case 25:
          goto LABEL_113;
        case 26:
          bspop_boa(a1);
          goto LABEL_100;
        case 28:
          goto LABEL_81;
        case 29:
          int v46 = OUTLINED_FUNCTION_1_43(v31, v32, v16, (uint64_t *)&unk_268C67E81);
          goto LABEL_57;
        case 31:
          goto LABEL_83;
        case 33:
          goto LABEL_93;
        case 34:
          goto LABEL_84;
        case 35:
          int v47 = OUTLINED_FUNCTION_1_43(v31, v32, v16, (uint64_t *)&unk_268C67E83);
          uint64_t v34 = v16;
          int v29 = v16;
          if (!v47) {
            goto LABEL_89;
          }
          continue;
        case 36:
          goto LABEL_89;
        case 37:
          goto LABEL_90;
        case 38:
          bspush_nboa((uint64_t)a1);
          BOOL v48 = OUTLINED_FUNCTION_17_35();
          int v29 = v16;
          if (v48) {
            continue;
          }
          bspush_ca_scan_boa((uint64_t)a1, 40);
          BOOL v49 = testFldeq((uint64_t)a1, 1u, 5, 0);
          goto LABEL_74;
        case 39:
          goto LABEL_106;
        case 40:
          bspop_boa(a1);
          int v46 = advance_tok();
LABEL_57:
          uint64_t v39 = v16;
          int v29 = v16;
          if (!v46) {
            goto LABEL_102;
          }
          continue;
        case 42:
          goto LABEL_94;
        case 43:
          OUTLINED_FUNCTION_3_42(45);
          uint64_t v50 = (uint64_t *)&unk_268C67E85;
          goto LABEL_61;
        case 44:
          goto LABEL_95;
        case 45:
          uint64_t v50 = (uint64_t *)&unk_268C67E72;
LABEL_61:
          int v51 = OUTLINED_FUNCTION_1_43(v31, v32, v39, v50);
          uint64_t v35 = v16;
          int v29 = v16;
          if (!v51) {
            goto LABEL_95;
          }
          continue;
        case 46:
          OUTLINED_FUNCTION_3_42(48);
          uint64_t v52 = (uint64_t *)&unk_268C67E74;
          goto LABEL_65;
        case 47:
          goto LABEL_97;
        case 48:
          uint64_t v52 = (uint64_t *)&unk_268C67E7F;
LABEL_65:
          int v53 = OUTLINED_FUNCTION_1_43(v31, v32, v39, v52);
          uint64_t v36 = v16;
          int v29 = v16;
          if (!v53) {
            goto LABEL_97;
          }
          continue;
        case 49:
          int v54 = OUTLINED_FUNCTION_1_43(v31, v32, v16, (uint64_t *)&unk_268C67E75);
          uint64_t v37 = v16;
          int v29 = v16;
          if (!v54) {
            goto LABEL_98;
          }
          continue;
        case 50:
          goto LABEL_98;
        case 51:
          goto LABEL_100;
        case 52:
          int v55 = OUTLINED_FUNCTION_1_43(v31, v32, v16, (uint64_t *)&unk_268C67E75);
          uint64_t v38 = v16;
          int v29 = v16;
          if (!v55) {
            goto LABEL_87;
          }
          continue;
        case 53:
          goto LABEL_87;
        case 55:
          goto LABEL_103;
        case 56:
          bspop_boa(a1);
          int v56 = lpta_loadp_setscan_r((uint64_t)a1, (uint64_t)v97);
          int v29 = v16;
          if (v56) {
            continue;
          }
          bspush_ca_scan_boa((uint64_t)a1, 57);
          BOOL v57 = OUTLINED_FUNCTION_17_35();
          int v29 = v16;
          if (v57) {
            continue;
          }
          BOOL v49 = advance_tok();
LABEL_74:
          if (v49) {
            int v29 = v16;
          }
          else {
            int v29 = 1;
          }
          continue;
        case 59:
          goto LABEL_6;
        case 60:
          goto LABEL_7;
        default:
          goto LABEL_3;
      }
      break;
    }
  }
LABEL_19:
  if (forto_adv_upto_r((uint64_t)a1, 1, 2, 60, 1, (uint64_t)v100)) {
    goto LABEL_34;
  }
LABEL_121:
  uint64_t v8 = 0;
  v95[1] = HIWORD(v103);
LABEL_4:
  vretproc((uint64_t)a1);
  return v8;
}

uint64_t OUTLINED_FUNCTION_0_45()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_1_43(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return test_string_s(v4, 1u, 1u, a4);
}

uint64_t OUTLINED_FUNCTION_2_43()
{
  return lpta_loadp_setscan_r(v0, v1);
}

double OUTLINED_FUNCTION_3_42@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = bspush_ca_scan(v1, a1).n128_u64[0];
  return result;
}

BOOL OUTLINED_FUNCTION_4_41()
{
  return testFldeq(v0, v2, v1, v2);
}

double OUTLINED_FUNCTION_5_40@<D0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  *(void *)&double result = savescptr(v25, a1, (uint64_t)&a25).n128_u64[0];
  return result;
}

uint64_t OUTLINED_FUNCTION_6_40()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return test_string_s(v4, 4u, 1u, a4);
}

uint64_t OUTLINED_FUNCTION_8_39(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  return lpta_loadp_setscan_l(v34, (uint64_t)&a34);
}

uint64_t OUTLINED_FUNCTION_9_39()
{
  return lpta_loadp_setscan_r(v0, v1);
}

void OUTLINED_FUNCTION_10_39(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  a34 = 0;
  a35 = 0;
  a32 = 0;
  a33 = 0;
  bzero(&a9, 0xB8uLL);
}

uint64_t OUTLINED_FUNCTION_11_39@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 104) = 0;
  return a1;
}

uint64_t OUTLINED_FUNCTION_12_38()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_37()
{
  return lpta_loadp_setscan_l(v0, v1);
}

uint64_t OUTLINED_FUNCTION_14_37@<X0>(uint64_t a1@<X8>)
{
  return starttest(v1, a1);
}

BOOL OUTLINED_FUNCTION_15_36()
{
  return testFldeq(v0, 4u, 1, 2);
}

BOOL OUTLINED_FUNCTION_16_35()
{
  return testFldeq(v0, 4u, 1, 1);
}

BOOL OUTLINED_FUNCTION_17_35()
{
  return testFldeq(v0, 1u, 4, 1);
}

BOOL OUTLINED_FUNCTION_18_33()
{
  return testFldeq(v0, v3, v2, v1);
}

uint64_t OUTLINED_FUNCTION_19_33()
{
  return v0;
}

void *fence_42(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 192) + 8121) = 0;
  return memset(*(void **)(a1 + 264), *(unsigned __int8 *)(a1 + 288), *(unsigned __int8 *)(a1 + 288));
}

uint64_t por_symbolic_rules(uint64_t a1, uint64_t a2, __int16 *a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  v19[0] = 0;
  v19[1] = 0;
  bzero(v18, 0xB8uLL);
  bzero(v31, 0xC0uLL);
  if (setjmp(v31) || ventproc(a1, (uint64_t)v18, (uint64_t)v30, (uint64_t)v29, (uint64_t)v28, (uint64_t)v31))
  {
    uint64_t v5 = 94;
  }
  else
  {
    uint64_t v7 = OUTLINED_FUNCTION_0_46();
    get_parm(v7, v8, v9, -6);
    get_parm(a1, (uint64_t)&v24, a3, -6);
    push_ptr_init(a1, (uint64_t)&v22);
    push_ptr_init(a1, (uint64_t)&v20);
    push_ptr_init(a1, (uint64_t)v19);
    fence_42(a1);
    uint64_t v23 = v27;
    uint64_t v21 = v25;
    init_por_word_vars(a1);
    break_into_morphs(a1, (__int16 *)&v26, (uint64_t)&v22, (uint64_t)&v20, (__int16 *)&v24);
    generate_diaphones();
    uint64_t v10 = OUTLINED_FUNCTION_0_46();
    create_syllables(v10, v11, v12, v13, v14, v15, v16, v17);
    OUTLINED_FUNCTION_0_46();
    assign_stress();
    adjust_phones();
    uint64_t v5 = 0;
  }
  vretproc(a1);
  return v5;
}

uint64_t init_por_word_vars(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  bzero(v5, 0xB8uLL);
  bzero(v9, 0xC0uLL);
  if (setjmp(v9) || ventproc(a1, (uint64_t)v5, (uint64_t)v8, (uint64_t)v7, (uint64_t)v6, (uint64_t)v9))
  {
    uint64_t v2 = 94;
  }
  else
  {
    fence_42(a1);
    uint64_t v2 = 0;
    __int16 v4 = *(_WORD *)(a1 + 2290);
    *(_WORD *)(a1 + 3886) = v4;
    *(_WORD *)(a1 + 3890) = v4;
    *(_WORD *)(a1 + 3806) = 0;
    *(_WORD *)(a1 + 5950) = 0;
    *(_WORD *)(a1 + 5974) = 0;
    *(_WORD *)(a1 + 3874) = v4;
    *(_WORD *)(a1 + 5946) = 0;
    *(_WORD *)(a1 + 5954) = *(_WORD *)(a1 + 2542);
    *(void *)(a1 + 5984) = *(void *)(a1 + 3352);
  }
  vretproc(a1);
  return v2;
}

uint64_t OUTLINED_FUNCTION_0_46()
{
  return v0;
}

void *delta_new()
{
  MEMORY[0x270FA5388]();
  uint64_t v0 = (char *)malloc_type_malloc(0x1780uLL, 0x10F004043DB8C3EuLL);
  int v1 = v0;
  if (v0)
  {
    *((_WORD *)v0 + 164) = -6;
    *((void *)v0 + 42) = 0;
    *((_WORD *)v0 + 172) = -6;
    *((void *)v0 + 44) = 0;
    *((_WORD *)v0 + 180) = -6;
    *((void *)v0 + 46) = 0;
    *((_WORD *)v0 + 188) = -6;
    *((void *)v0 + 48) = 0;
    *((_WORD *)v0 + 196) = -6;
    *((void *)v0 + 50) = 0;
    *((_WORD *)v0 + 204) = -6;
    *((void *)v0 + 52) = 0;
    *((_WORD *)v0 + 212) = -6;
    *((void *)v0 + 54) = 0;
    *((_WORD *)v0 + 220) = -6;
    *((void *)v0 + 56) = 0;
    *((_WORD *)v0 + 228) = -6;
    *((void *)v0 + 58) = 0;
    *((_WORD *)v0 + 236) = -6;
    *((void *)v0 + 60) = 0;
    *((_WORD *)v0 + 244) = -6;
    *((void *)v0 + 62) = 0;
    *((_WORD *)v0 + 252) = -6;
    *((void *)v0 + 64) = 0;
    *((_WORD *)v0 + 260) = -6;
    *((void *)v0 + 66) = 0;
    *((_WORD *)v0 + 268) = -6;
    *((void *)v0 + 68) = 0;
    *((_WORD *)v0 + 276) = -6;
    *((void *)v0 + 70) = 0;
    *((_WORD *)v0 + 284) = -6;
    *((void *)v0 + 72) = 0;
    *((_WORD *)v0 + 292) = -6;
    *((void *)v0 + 74) = 0;
    *((_WORD *)v0 + 300) = -6;
    *((void *)v0 + 76) = 0;
    *((_WORD *)v0 + 308) = -6;
    *((void *)v0 + 78) = 0;
    *((_DWORD *)v0 + 158) = 65532;
    *((_WORD *)v0 + 320) = -6;
    *((void *)v0 + 81) = 0;
    *((_WORD *)v0 + 328) = -6;
    *((void *)v0 + 83) = 0;
    *((_WORD *)v0 + 336) = -6;
    *((void *)v0 + 85) = 0;
    *((_WORD *)v0 + 344) = -6;
    *((void *)v0 + 87) = 0;
    *((_WORD *)v0 + 352) = -6;
    *((void *)v0 + 89) = 0;
    *((_OWORD *)v0 + 45) = xmmword_240044980;
    *((_OWORD *)v0 + 46) = xmmword_240044980;
    *((_OWORD *)v0 + 47) = xmmword_240044980;
    *((_WORD *)v0 + 384) = -6;
    *((void *)v0 + 97) = 0;
    *((_WORD *)v0 + 392) = -6;
    *((void *)v0 + 99) = 0;
    *((_WORD *)v0 + 400) = -6;
    *((void *)v0 + 101) = 0;
    *((_WORD *)v0 + 408) = -6;
    *((void *)v0 + 103) = 0;
    *((_WORD *)v0 + 416) = -6;
    *((void *)v0 + 105) = 0;
    *((_WORD *)v0 + 424) = -6;
    *((void *)v0 + 107) = 0;
    *((_WORD *)v0 + 432) = -6;
    *((void *)v0 + 109) = 0;
    *((_WORD *)v0 + 440) = -6;
    *((void *)v0 + 111) = 0;
    *((_WORD *)v0 + 448) = -6;
    *((void *)v0 + 113) = 0;
    *((_WORD *)v0 + 456) = -6;
    *((void *)v0 + 115) = 0;
    *((_OWORD *)v0 + 58) = xmmword_240044980;
    *((_OWORD *)v0 + 59) = xmmword_240044980;
    *((_OWORD *)v0 + 60) = xmmword_240044980;
    *((_OWORD *)v0 + 61) = xmmword_240044980;
    *((_OWORD *)v0 + 62) = xmmword_240044980;
    *((_OWORD *)v0 + 63) = xmmword_240044980;
    *((void *)v0 + 128) = 0xFFFC0000FFFCLL;
    *((_WORD *)v0 + 516) = -5;
    *((void *)v0 + 130) = 0;
    *((_WORD *)v0 + 524) = -5;
    *((void *)v0 + 132) = 0;
    *((_WORD *)v0 + 532) = -5;
    *((void *)v0 + 134) = 0;
    *((_WORD *)v0 + 540) = -5;
    *((void *)v0 + 136) = 0;
    *((_WORD *)v0 + 548) = -5;
    *((void *)v0 + 138) = 0;
    *((_WORD *)v0 + 556) = -5;
    *((void *)v0 + 140) = 0;
    *((_DWORD *)v0 + 282) = 65532;
    *((_WORD *)v0 + 568) = -6;
    *((void *)v0 + 143) = 0;
    *((_WORD *)v0 + 576) = -6;
    *((void *)v0 + 145) = 0;
    *((_WORD *)v0 + 584) = -6;
    *((void *)v0 + 147) = 0;
    *((void *)v0 + 148) = 0xFFFC0000FFFCLL;
    *((_WORD *)v0 + 596) = -6;
    *((void *)v0 + 150) = 0;
    *((void *)v0 + 151) = 0xFFFC0000FFFCLL;
    *((_DWORD *)v0 + 304) = 65532;
    *((_WORD *)v0 + 612) = -6;
    *((void *)v0 + 154) = 0;
    *((_WORD *)v0 + 620) = -6;
    *((void *)v0 + 156) = 0;
    *((_WORD *)v0 + 628) = -6;
    *((void *)v0 + 158) = 0;
    *((_WORD *)v0 + 636) = -6;
    *((void *)v0 + 160) = 0;
    *((_WORD *)v0 + 644) = -6;
    *((void *)v0 + 162) = 0;
    *((_WORD *)v0 + 652) = -6;
    *((void *)v0 + 164) = 0;
    *((_WORD *)v0 + 660) = -6;
    *((void *)v0 + 166) = 0;
    *((_WORD *)v0 + 668) = -6;
    *((void *)v0 + 168) = 0;
    *((_WORD *)v0 + 676) = -6;
    *((void *)v0 + 170) = 0;
    *((_WORD *)v0 + 684) = -6;
    *((void *)v0 + 172) = 0;
    *((_WORD *)v0 + 692) = -6;
    *((void *)v0 + 174) = 0;
    *((_WORD *)v0 + 700) = -6;
    *((void *)v0 + 176) = 0;
    *((_WORD *)v0 + 708) = -6;
    *((void *)v0 + 178) = 0;
    *((_WORD *)v0 + 716) = -6;
    *((void *)v0 + 180) = 0;
    *((_WORD *)v0 + 724) = -6;
    *((void *)v0 + 182) = 0;
    *((_WORD *)v0 + 732) = -6;
    *((void *)v0 + 184) = 0;
    *((_WORD *)v0 + 740) = -6;
    *((void *)v0 + 186) = 0;
    *((_WORD *)v0 + 748) = -6;
    *((void *)v0 + 188) = 0;
    *((_WORD *)v0 + 756) = -6;
    *((void *)v0 + 190) = 0;
    *((_WORD *)v0 + 764) = -6;
    *((void *)v0 + 192) = 0;
    *((_WORD *)v0 + 772) = -6;
    *((void *)v0 + 194) = 0;
    *((_WORD *)v0 + 780) = -6;
    *((void *)v0 + 196) = 0;
    *((_WORD *)v0 + 788) = -6;
    *((void *)v0 + 198) = 0;
    *((_WORD *)v0 + 796) = -6;
    *((void *)v0 + 200) = 0;
    *((_WORD *)v0 + 804) = -6;
    *((void *)v0 + 202) = 0;
    *((_WORD *)v0 + 812) = -6;
    *((void *)v0 + 204) = 0;
    *((_WORD *)v0 + 820) = -6;
    *((void *)v0 + 206) = 0;
    *((_WORD *)v0 + 828) = -6;
    *((void *)v0 + 208) = 0;
    *((_WORD *)v0 + 836) = -6;
    *((void *)v0 + 210) = 0;
    *((_WORD *)v0 + 844) = -6;
    *((void *)v0 + 212) = 0;
    *((_WORD *)v0 + 852) = -6;
    *((void *)v0 + 214) = 0;
    *((_WORD *)v0 + 860) = -6;
    *((void *)v0 + 216) = 0;
    *((_WORD *)v0 + 868) = -6;
    *((void *)v0 + 218) = 0;
    *((_WORD *)v0 + 876) = -5;
    *((void *)v0 + 220) = 0;
    *((_WORD *)v0 + 884) = -5;
    *((void *)v0 + 222) = 0;
    *(_OWORD *)(v0 + 1928) = xmmword_240044980;
    *(_OWORD *)(v0 + 1944) = xmmword_240044980;
    *(_OWORD *)(v0 + 1960) = xmmword_240044980;
    *(_OWORD *)(v0 + 1976) = xmmword_240044980;
    *(_OWORD *)(v0 + 1992) = xmmword_240044980;
    *(_OWORD *)(v0 + 2008) = xmmword_240044980;
    *(_OWORD *)(v0 + 2024) = xmmword_240044980;
    *(_OWORD *)(v0 + 2040) = xmmword_240044980;
    *(_OWORD *)(v0 + 2056) = xmmword_240044980;
    *(_OWORD *)(v0 + 2072) = xmmword_240044980;
    *((void *)v0 + 261) = 0xFFFC0000FFFCLL;
    *((_WORD *)v0 + 1048) = -5;
    *((void *)v0 + 263) = 0;
    *((_WORD *)v0 + 1056) = -5;
    *((void *)v0 + 265) = 0;
    *((_WORD *)v0 + 1064) = -5;
    *((void *)v0 + 267) = 0;
    *((_WORD *)v0 + 1072) = -5;
    *((void *)v0 + 269) = 0;
    *((_WORD *)v0 + 1080) = -5;
    *((void *)v0 + 271) = 0;
    *((_WORD *)v0 + 1088) = -5;
    *((void *)v0 + 273) = 0;
    *((_WORD *)v0 + 1096) = -5;
    *((void *)v0 + 275) = 0;
    *((_WORD *)v0 + 1104) = -5;
    *((void *)v0 + 277) = 0;
    *((_WORD *)v0 + 1112) = -5;
    *((void *)v0 + 279) = 0;
    *((_WORD *)v0 + 1120) = -5;
    *((void *)v0 + 281) = 0;
    *((_WORD *)v0 + 1128) = -5;
    *((void *)v0 + 283) = 0;
    *((_OWORD *)v0 + 142) = xmmword_240044980;
    *((_DWORD *)v0 + 572) = 65532;
    *((_WORD *)v0 + 1148) = -6;
    *((void *)v0 + 288) = 0;
    *((_WORD *)v0 + 1156) = -6;
    *((void *)v0 + 290) = 0;
    *((_WORD *)v0 + 1164) = -6;
    *((void *)v0 + 292) = 0;
    *((void *)v0 + 293) = 0xFFFC0000FFFCLL;
    *((_DWORD *)v0 + 588) = 65532;
    *((_OWORD *)v0 + 149) = xmmword_240044980;
    *((_OWORD *)v0 + 150) = xmmword_240044980;
    *((_OWORD *)v0 + 151) = xmmword_240044980;
    *((_OWORD *)v0 + 152) = xmmword_240044980;
    *((_WORD *)v0 + 1224) = -6;
    *((void *)v0 + 307) = 0;
    *((_WORD *)v0 + 1232) = -6;
    *((void *)v0 + 309) = 0;
    *((_WORD *)v0 + 1240) = -6;
    *((void *)v0 + 311) = 0;
    *((_WORD *)v0 + 1248) = -6;
    *((void *)v0 + 313) = 0;
    *((_DWORD *)v0 + 628) = 65532;
    *((_WORD *)v0 + 1260) = -6;
    *((void *)v0 + 316) = 0;
    *(_OWORD *)(v0 + 2536) = xmmword_240044980;
    *(_OWORD *)(v0 + 2552) = xmmword_240044980;
    *(_OWORD *)(v0 + 2568) = xmmword_240044980;
    *(_OWORD *)(v0 + 2584) = xmmword_240044980;
    *(_OWORD *)(v0 + 2600) = xmmword_240044980;
    *(_OWORD *)(v0 + 2616) = xmmword_240044980;
    *(_OWORD *)(v0 + 2632) = xmmword_240044980;
    *(_OWORD *)(v0 + 2648) = xmmword_240044980;
    *(_OWORD *)(v0 + 2664) = xmmword_240044980;
    *(_OWORD *)(v0 + 2680) = xmmword_240044980;
    *(_OWORD *)(v0 + 2696) = xmmword_240044980;
    *(_OWORD *)(v0 + 2712) = xmmword_240044980;
    *(_OWORD *)(v0 + 2728) = xmmword_240044980;
    *(_OWORD *)(v0 + 2744) = xmmword_240044980;
    *(_OWORD *)(v0 + 2760) = xmmword_240044980;
    *(_OWORD *)(v0 + 2776) = xmmword_240044980;
    *(_OWORD *)(v0 + 2792) = xmmword_240044980;
    *(_OWORD *)(v0 + 2808) = xmmword_240044980;
    *(_OWORD *)(v0 + 2824) = xmmword_240044980;
    *(_OWORD *)(v0 + 2840) = xmmword_240044980;
    *(_OWORD *)(v0 + 2856) = xmmword_240044980;
    *(_OWORD *)(v0 + 2872) = xmmword_240044980;
    *(_OWORD *)(v0 + 2888) = xmmword_240044980;
    *(_OWORD *)(v0 + 2904) = xmmword_240044980;
    *(_OWORD *)(v0 + 2920) = xmmword_240044980;
    *(_OWORD *)(v0 + 2936) = xmmword_240044980;
    *(_OWORD *)(v0 + 2952) = xmmword_240044980;
    *(_OWORD *)(v0 + 2968) = xmmword_240044980;
    *(_OWORD *)(v0 + 2984) = xmmword_240044980;
    *(_OWORD *)(v0 + 3000) = xmmword_240044980;
    *(_OWORD *)(v0 + 3016) = xmmword_240044980;
    *(_OWORD *)(v0 + 3032) = xmmword_240044980;
    *(_OWORD *)(v0 + 3048) = xmmword_240044980;
    *(_OWORD *)(v0 + 3064) = xmmword_240044980;
    *((_DWORD *)v0 + 770) = 65532;
    *((_OWORD *)v0 + 199) = xmmword_240044980;
    *((_OWORD *)v0 + 200) = xmmword_240044980;
    *((_OWORD *)v0 + 201) = xmmword_240044980;
    *((_OWORD *)v0 + 202) = xmmword_240044980;
    *((_OWORD *)v0 + 203) = xmmword_240044980;
    *((_OWORD *)v0 + 204) = xmmword_240044980;
    *((_OWORD *)v0 + 205) = xmmword_240044980;
    *((_OWORD *)v0 + 206) = xmmword_240044980;
    *((_OWORD *)v0 + 207) = xmmword_240044980;
    *((_OWORD *)v0 + 208) = xmmword_240044980;
    *((_WORD *)v0 + 1672) = -6;
    *((void *)v0 + 419) = 0;
    *((void *)v0 + 420) = 0xFFFC0000FFFCLL;
    *((_DWORD *)v0 + 842) = 65532;
    *((_WORD *)v0 + 1688) = -5;
    *((void *)v0 + 423) = 0;
    *((_WORD *)v0 + 1696) = -5;
    *((void *)v0 + 425) = 0;
    *((_OWORD *)v0 + 213) = xmmword_240044980;
    *((_OWORD *)v0 + 214) = xmmword_240044980;
    *((_OWORD *)v0 + 215) = xmmword_240044980;
    *((_OWORD *)v0 + 216) = xmmword_240044980;
    *((_OWORD *)v0 + 217) = xmmword_240044980;
    *((_OWORD *)v0 + 218) = xmmword_240044980;
    *((_OWORD *)v0 + 219) = xmmword_240044980;
    *((_OWORD *)v0 + 220) = xmmword_240044980;
    *((_OWORD *)v0 + 221) = xmmword_240044980;
    *((_OWORD *)v0 + 222) = xmmword_240044980;
    *((void *)v0 + 446) = 0xFFFC0000FFFCLL;
    *((_DWORD *)v0 + 894) = 65532;
    *((_WORD *)v0 + 1792) = -3;
    *((void *)v0 + 449) = 0;
    *((_WORD *)v0 + 1864) = -5;
    *((void *)v0 + 467) = 0;
    *((_DWORD *)v0 + 936) = 65532;
    *((_DWORD *)v0 + 944) = 65532;
    *((_WORD *)v0 + 1892) = -3;
    *((void *)v0 + 474) = 0;
    *((void *)v0 + 475) = 0xFFFC0000FFFCLL;
    *((_DWORD *)v0 + 952) = 65532;
    *((_WORD *)v0 + 1908) = -6;
    *((void *)v0 + 478) = 0;
    *(_OWORD *)(v0 + 3832) = xmmword_240044980;
    *((_DWORD *)v0 + 962) = 65532;
    *((_WORD *)v0 + 1928) = -3;
    *((void *)v0 + 483) = 0;
    *((_OWORD *)v0 + 242) = xmmword_240044980;
    *((_OWORD *)v0 + 243) = xmmword_240044980;
    *((void *)v0 + 488) = 0xFFFC0000FFFCLL;
    *((_WORD *)v0 + 1956) = -6;
    *((void *)v0 + 490) = 0;
    *((_WORD *)v0 + 1964) = -6;
    *((void *)v0 + 492) = 0;
    *((_WORD *)v0 + 1972) = -6;
    *((void *)v0 + 494) = 0;
    *((_WORD *)v0 + 1980) = -6;
    *((void *)v0 + 496) = 0;
    *((_WORD *)v0 + 1988) = -6;
    *((void *)v0 + 498) = 0;
    *((_WORD *)v0 + 1996) = -6;
    *((void *)v0 + 500) = 0;
    *((void *)v0 + 501) = 0xFFFC0000FFFCLL;
    *((_WORD *)v0 + 2008) = -5;
    *((void *)v0 + 503) = 0;
    *((_OWORD *)v0 + 252) = xmmword_240044980;
    *((void *)v0 + 506) = 0xFFFC0000FFFCLL;
    *((_WORD *)v0 + 2028) = -5;
    *((void *)v0 + 508) = 0;
    *((_WORD *)v0 + 2036) = -5;
    *((void *)v0 + 510) = 0;
    *((_WORD *)v0 + 2044) = -5;
    *((void *)v0 + 512) = 0;
    *((_WORD *)v0 + 2052) = -5;
    *((void *)v0 + 514) = 0;
    *((_WORD *)v0 + 2060) = -5;
    *((void *)v0 + 516) = 0;
    *((_WORD *)v0 + 2068) = -5;
    *((void *)v0 + 518) = 0;
    *((_WORD *)v0 + 2076) = -5;
    *((void *)v0 + 520) = 0;
    *((_WORD *)v0 + 2084) = -5;
    *((void *)v0 + 522) = 0;
    *((_WORD *)v0 + 2092) = -5;
    *((void *)v0 + 524) = 0;
    *((_WORD *)v0 + 2100) = -5;
    *((void *)v0 + 526) = 0;
    *(_OWORD *)(v0 + 4216) = xmmword_240044980;
    *(_OWORD *)(v0 + 4232) = xmmword_240044980;
    *((void *)v0 + 531) = 0xFFFC0000FFFCLL;
    *((_DWORD *)v0 + 1064) = 65532;
    *((_WORD *)v0 + 2132) = -5;
    *((void *)v0 + 534) = 0;
    *(_OWORD *)(v0 + 4280) = xmmword_240044980;
    *(_OWORD *)(v0 + 4296) = xmmword_240044980;
    *(_OWORD *)(v0 + 4312) = xmmword_240044980;
    *(_OWORD *)(v0 + 4328) = xmmword_240044980;
    *(_OWORD *)(v0 + 4344) = xmmword_240044980;
    *(_OWORD *)(v0 + 4360) = xmmword_240044980;
    *(_OWORD *)(v0 + 4376) = xmmword_240044980;
    *(_OWORD *)(v0 + 4392) = xmmword_240044980;
    *(_OWORD *)(v0 + 4408) = xmmword_240044980;
    *(_OWORD *)(v0 + 4424) = xmmword_240044980;
    *(_OWORD *)(v0 + 4440) = xmmword_240044980;
    *(_OWORD *)(v0 + 4456) = xmmword_240044980;
    *(_OWORD *)(v0 + 4472) = xmmword_240044980;
    *(_OWORD *)(v0 + 4488) = xmmword_240044980;
    *(_OWORD *)(v0 + 4504) = xmmword_240044980;
    *(_OWORD *)(v0 + 4520) = xmmword_240044980;
    *(_OWORD *)(v0 + 4536) = xmmword_240044980;
    *(_OWORD *)(v0 + 4552) = xmmword_240044980;
    *(_OWORD *)(v0 + 4568) = xmmword_240044980;
    *(_OWORD *)(v0 + 4584) = xmmword_240044980;
    *(_OWORD *)(v0 + 4600) = xmmword_240044980;
    *((_WORD *)v0 + 2308) = -6;
    *((void *)v0 + 578) = 0;
    *((_WORD *)v0 + 2316) = -5;
    *((void *)v0 + 580) = 0;
    *((_WORD *)v0 + 2324) = -5;
    *((void *)v0 + 582) = 0;
    *((_WORD *)v0 + 2332) = -6;
    *((void *)v0 + 584) = 0;
    *(_OWORD *)(v0 + 4680) = xmmword_240044980;
    *(_OWORD *)(v0 + 4696) = xmmword_240044980;
    *((_DWORD *)v0 + 1178) = 65532;
    *((void *)v0 + 614) = 0xFFFC0000FFFCLL;
    *((_WORD *)v0 + 2460) = -6;
    *((void *)v0 + 616) = 0;
    *((_WORD *)v0 + 2468) = -5;
    *((void *)v0 + 618) = 0;
    *((_WORD *)v0 + 2476) = -5;
    *((void *)v0 + 620) = 0;
    *((void *)v0 + 621) = 0xFFFC0000FFFCLL;
    *((_WORD *)v0 + 2488) = -6;
    *((void *)v0 + 623) = 0;
    *((_WORD *)v0 + 2496) = -6;
    *((void *)v0 + 625) = 0;
    *((_WORD *)v0 + 2504) = -6;
    *((void *)v0 + 627) = 0;
    *((_WORD *)v0 + 2512) = -6;
    *((void *)v0 + 629) = 0;
    *((_DWORD *)v0 + 1260) = 65532;
    *((_WORD *)v0 + 2524) = -5;
    *((void *)v0 + 632) = 0;
    *((_DWORD *)v0 + 1266) = 65532;
    *((_WORD *)v0 + 2536) = -6;
    *((void *)v0 + 635) = 0;
    *((_OWORD *)v0 + 318) = xmmword_240044980;
    *((_OWORD *)v0 + 319) = xmmword_240044980;
    *((_OWORD *)v0 + 320) = xmmword_240044980;
    *((void *)v0 + 642) = 0xFFFC0000FFFCLL;
    *((_DWORD *)v0 + 1286) = 65532;
    *((_WORD *)v0 + 2576) = -5;
    *((void *)v0 + 645) = 0;
    *((_WORD *)v0 + 2584) = -5;
    *((void *)v0 + 647) = 0;
    *((_WORD *)v0 + 2592) = -5;
    *((void *)v0 + 649) = 0;
    *((_WORD *)v0 + 2600) = -6;
    *((void *)v0 + 651) = 0;
    *((void *)v0 + 652) = 0xFFFC0000FFFCLL;
    *((_DWORD *)v0 + 1330) = 65532;
    *((_WORD *)v0 + 2664) = -5;
    *((void *)v0 + 667) = 0;
    *((_WORD *)v0 + 2672) = -5;
    *((void *)v0 + 669) = 0;
    *((_WORD *)v0 + 2680) = -5;
    *((void *)v0 + 671) = 0;
    *((_OWORD *)v0 + 336) = xmmword_240044980;
    *((void *)v0 + 674) = 0xFFFC0000FFFCLL;
    *((_WORD *)v0 + 2700) = -5;
    *((void *)v0 + 676) = 0;
    *(_OWORD *)(v0 + 5416) = xmmword_240044980;
    *(_OWORD *)(v0 + 5432) = xmmword_240044980;
    *(_OWORD *)(v0 + 5448) = xmmword_240044980;
    *(_OWORD *)(v0 + 5464) = xmmword_240044980;
    *(_OWORD *)(v0 + 5480) = xmmword_240044980;
    *(_OWORD *)(v0 + 5496) = xmmword_240044980;
    *(_OWORD *)(v0 + 5512) = xmmword_240044980;
    *(_OWORD *)(v0 + 5528) = xmmword_240044980;
    *(_OWORD *)(v0 + 5544) = xmmword_240044980;
    *(_OWORD *)(v0 + 5560) = xmmword_240044980;
    *(_OWORD *)(v0 + 5576) = xmmword_240044980;
    *(_OWORD *)(v0 + 5592) = xmmword_240044980;
    *(_OWORD *)(v0 + 5608) = xmmword_240044980;
    *(_OWORD *)(v0 + 5624) = xmmword_240044980;
    *(_OWORD *)(v0 + 5640) = xmmword_240044980;
    *(_OWORD *)(v0 + 5656) = xmmword_240044980;
    *(_OWORD *)(v0 + 5672) = xmmword_240044980;
    *(_OWORD *)(v0 + 5688) = xmmword_240044980;
    *(_OWORD *)(v0 + 5704) = xmmword_240044980;
    *(_OWORD *)(v0 + 5720) = xmmword_240044980;
    *((_DWORD *)v0 + 1434) = 65532;
    *((_WORD *)v0 + 2872) = -5;
    *((void *)v0 + 719) = 0;
    *((_WORD *)v0 + 2880) = -5;
    *((void *)v0 + 721) = 0;
    *((_WORD *)v0 + 2888) = -5;
    *((void *)v0 + 723) = 0;
    *((_WORD *)v0 + 2896) = -5;
    *((void *)v0 + 725) = 0;
    *((_WORD *)v0 + 2904) = -5;
    *((void *)v0 + 727) = 0;
    *((_WORD *)v0 + 2912) = -5;
    *((void *)v0 + 729) = 0;
    *((_WORD *)v0 + 2920) = -5;
    *((void *)v0 + 731) = 0;
    *((_WORD *)v0 + 2928) = -5;
    *((void *)v0 + 733) = 0;
    *((_WORD *)v0 + 2936) = -5;
    *((void *)v0 + 735) = 0;
    *((_WORD *)v0 + 2944) = -5;
    *((void *)v0 + 737) = 0;
    *((_WORD *)v0 + 2952) = -5;
    *((void *)v0 + 739) = 0;
    *((_OWORD *)v0 + 370) = xmmword_240044980;
    *((_OWORD *)v0 + 371) = xmmword_240044980;
    *((_OWORD *)v0 + 372) = xmmword_240044980;
    *((void *)v0 + 746) = 0xFFFC0000FFFCLL;
    *((_WORD *)v0 + 2988) = -6;
    *((void *)v0 + 748) = 0;
    *((_WORD *)v0 + 2996) = -6;
    *((void *)v0 + 750) = 0;
    *((_DWORD *)v0 + 1502) = 65532;
    *((_DWORD *)v0 + 4) = 196;
    *(_OWORD *)uint64_t v0 = xmmword_240044990;
    *((void *)v0 + 11) = v0 + 344;
    *((void *)v0 + 12) = v0 + 360;
    uint64_t v2 = malloc_type_malloc(0x620uLL, 0x2004093837F09uLL);
    v1[3] = v2;
    if (!v2) {
      goto LABEL_8;
    }
    *uint64_t v2 = v1 + 42;
    *(void *)(v1[3] + 8) = v1 + 44;
    *(void *)(v1[3] + 16) = v1 + 46;
    *(void *)(v1[3] + 24) = v1 + 48;
    *(void *)(v1[3] + 32) = v1 + 50;
    *(void *)(v1[3] + 40) = v1 + 52;
    *(void *)(v1[3] + 48) = v1 + 54;
    *(void *)(v1[3] + 56) = v1 + 56;
    *(void *)(v1[3] + 64) = v1 + 58;
    *(void *)(v1[3] + 72) = v1 + 60;
    *(void *)(v1[3] + 80) = v1 + 62;
    *(void *)(v1[3] + 88) = v1 + 64;
    *(void *)(v1[3] + 96) = v1 + 66;
    *(void *)(v1[3] + 104) = v1 + 68;
    *(void *)(v1[3] + 112) = v1 + 70;
    *(void *)(v1[3] + 120) = v1 + 72;
    *(void *)(v1[3] + 128) = v1 + 74;
    *(void *)(v1[3] + 136) = v1 + 76;
    *(void *)(v1[3] + 144) = v1 + 78;
    *(void *)(v1[3] + 152) = v1 + 81;
    *(void *)(v1[3] + 160) = v1 + 83;
    *(void *)(v1[3] + 168) = v1 + 85;
    *(void *)(v1[3] + 176) = v1 + 87;
    *(void *)(v1[3] + 184) = v1 + 89;
    *(void *)(v1[3] + 192) = v1 + 97;
    *(void *)(v1[3] + 200) = v1 + 99;
    *(void *)(v1[3] + 208) = v1 + 101;
    *(void *)(v1[3] + 216) = v1 + 103;
    *(void *)(v1[3] + 224) = v1 + 105;
    *(void *)(v1[3] + 232) = v1 + 107;
    *(void *)(v1[3] + 240) = v1 + 109;
    *(void *)(v1[3] + 248) = v1 + 111;
    *(void *)(v1[3] + 256) = v1 + 113;
    *(void *)(v1[3] + 264) = v1 + 115;
    *(void *)(v1[3] + 272) = v1 + 143;
    *(void *)(v1[3] + 280) = v1 + 145;
    *(void *)(v1[3] + 288) = v1 + 147;
    *(void *)(v1[3] + 296) = v1 + 150;
    *(void *)(v1[3] + 304) = v1 + 154;
    *(void *)(v1[3] + 312) = v1 + 156;
    *(void *)(v1[3] + 320) = v1 + 158;
    *(void *)(v1[3] + 328) = v1 + 160;
    *(void *)(v1[3] + 336) = v1 + 162;
    *(void *)(v1[3] + 344) = v1 + 164;
    *(void *)(v1[3] + 352) = v1 + 166;
    *(void *)(v1[3] + 360) = v1 + 168;
    *(void *)(v1[3] + 368) = v1 + 170;
    *(void *)(v1[3] + 376) = v1 + 172;
    *(void *)(v1[3] + 384) = v1 + 174;
    *(void *)(v1[3] + 392) = v1 + 176;
    *(void *)(v1[3] + 400) = v1 + 178;
    *(void *)(v1[3] + 408) = v1 + 180;
    *(void *)(v1[3] + 416) = v1 + 182;
    *(void *)(v1[3] + 424) = v1 + 184;
    *(void *)(v1[3] + 432) = v1 + 186;
    *(void *)(v1[3] + 440) = v1 + 188;
    *(void *)(v1[3] + 448) = v1 + 190;
    *(void *)(v1[3] + 456) = v1 + 192;
    *(void *)(v1[3] + 464) = v1 + 194;
    *(void *)(v1[3] + 472) = v1 + 196;
    *(void *)(v1[3] + 480) = v1 + 198;
    *(void *)(v1[3] + 488) = v1 + 200;
    *(void *)(v1[3] + 496) = v1 + 202;
    *(void *)(v1[3] + 504) = v1 + 204;
    *(void *)(v1[3] + 512) = v1 + 206;
    *(void *)(v1[3] + 520) = v1 + 208;
    *(void *)(v1[3] + 528) = v1 + 210;
    *(void *)(v1[3] + 536) = v1 + 212;
    *(void *)(v1[3] + 544) = v1 + 214;
    *(void *)(v1[3] + 552) = v1 + 216;
    *(void *)(v1[3] + 560) = v1 + 218;
    *(void *)(v1[3] + 568) = v1 + 288;
    *(void *)(v1[3] + 576) = v1 + 290;
    *(void *)(v1[3] + 584) = v1 + 292;
    *(void *)(v1[3] + 592) = v1 + 307;
    *(void *)(v1[3] + 600) = v1 + 309;
    *(void *)(v1[3] + 608) = v1 + 311;
    *(void *)(v1[3] + 616) = v1 + 313;
    *(void *)(v1[3] + 624) = v1 + 316;
    *(void *)(v1[3] + 632) = v1 + 419;
    *(void *)(v1[3] + 640) = v1 + 478;
    *(void *)(v1[3] + 648) = v1 + 490;
    *(void *)(v1[3] + 656) = v1 + 492;
    *(void *)(v1[3] + 664) = v1 + 494;
    *(void *)(v1[3] + 672) = v1 + 496;
    *(void *)(v1[3] + 680) = v1 + 498;
    *(void *)(v1[3] + 688) = v1 + 500;
    *(void *)(v1[3] + 696) = v1 + 578;
    *(void *)(v1[3] + 704) = v1 + 584;
    *(void *)(v1[3] + 712) = v1 + 616;
    *(void *)(v1[3] + 720) = v1 + 623;
    *(void *)(v1[3] + 728) = v1 + 625;
    *(void *)(v1[3] + 736) = v1 + 627;
    *(void *)(v1[3] + 744) = v1 + 629;
    *(void *)(v1[3] + 752) = v1 + 635;
    *(void *)(v1[3] + 760) = v1 + 651;
    *(void *)(v1[3] + 768) = v1 + 748;
    *(void *)(v1[3] + 776) = v1 + 750;
    *(void *)(v1[3] + 784) = v1 + 42;
    *(void *)(v1[3] + 792) = v1 + 44;
    *(void *)(v1[3] + 800) = v1 + 46;
    *(void *)(v1[3] + 808) = v1 + 48;
    *(void *)(v1[3] + 816) = v1 + 50;
    *(void *)(v1[3] + 824) = v1 + 52;
    *(void *)(v1[3] + 832) = v1 + 54;
    *(void *)(v1[3] + 840) = v1 + 56;
    *(void *)(v1[3] + 848) = v1 + 58;
    *(void *)(v1[3] + 856) = v1 + 60;
    *(void *)(v1[3] + 864) = v1 + 62;
    *(void *)(v1[3] + 872) = v1 + 64;
    *(void *)(v1[3] + 880) = v1 + 66;
    *(void *)(v1[3] + 888) = v1 + 68;
    *(void *)(v1[3] + 896) = v1 + 70;
    *(void *)(v1[3] + 904) = v1 + 72;
    *(void *)(v1[3] + 912) = v1 + 74;
    *(void *)(v1[3] + 920) = v1 + 76;
    *(void *)(v1[3] + 928) = v1 + 78;
    *(void *)(v1[3] + 936) = v1 + 81;
    *(void *)(v1[3] + 944) = v1 + 83;
    *(void *)(v1[3] + 952) = v1 + 85;
    *(void *)(v1[3] + 960) = v1 + 87;
    *(void *)(v1[3] + 968) = v1 + 89;
    *(void *)(v1[3] + 976) = v1 + 97;
    *(void *)(v1[3] + 984) = v1 + 99;
    *(void *)(v1[3] + 992) = v1 + 101;
    *(void *)(v1[3] + 1000) = v1 + 103;
    *(void *)(v1[3] + 1008) = v1 + 105;
    *(void *)(v1[3] + 1016) = v1 + 107;
    *(void *)(v1[3] + 1024) = v1 + 109;
    *(void *)(v1[3] + 1032) = v1 + 111;
    *(void *)(v1[3] + 1040) = v1 + 113;
    *(void *)(v1[3] + 1048) = v1 + 115;
    *(void *)(v1[3] + 1056) = v1 + 143;
    *(void *)(v1[3] + 1064) = v1 + 145;
    *(void *)(v1[3] + 1072) = v1 + 147;
    *(void *)(v1[3] + 1080) = v1 + 150;
    *(void *)(v1[3] + 1088) = v1 + 154;
    *(void *)(v1[3] + 1096) = v1 + 156;
    *(void *)(v1[3] + 1104) = v1 + 158;
    *(void *)(v1[3] + 1112) = v1 + 160;
    *(void *)(v1[3] + 1120) = v1 + 162;
    *(void *)(v1[3] + 1128) = v1 + 164;
    *(void *)(v1[3] + 1136) = v1 + 166;
    *(void *)(v1[3] + 1144) = v1 + 168;
    *(void *)(v1[3] + 1152) = v1 + 170;
    *(void *)(v1[3] + 1160) = v1 + 172;
    *(void *)(v1[3] + 1168) = v1 + 174;
    *(void *)(v1[3] + 1176) = v1 + 176;
    *(void *)(v1[3] + 1184) = v1 + 178;
    *(void *)(v1[3] + 1192) = v1 + 180;
    *(void *)(v1[3] + 1200) = v1 + 182;
    *(void *)(v1[3] + 1208) = v1 + 184;
    *(void *)(v1[3] + 1216) = v1 + 186;
    *(void *)(v1[3] + 1224) = v1 + 188;
    *(void *)(v1[3] + 1232) = v1 + 190;
    *(void *)(v1[3] + 1240) = v1 + 192;
    *(void *)(v1[3] + 1248) = v1 + 194;
    *(void *)(v1[3] + 1256) = v1 + 196;
    *(void *)(v1[3] + 1264) = v1 + 198;
    *(void *)(v1[3] + 1272) = v1 + 200;
    *(void *)(v1[3] + 1280) = v1 + 202;
    *(void *)(v1[3] + 1288) = v1 + 204;
    *(void *)(v1[3] + 1296) = v1 + 206;
    *(void *)(v1[3] + 1304) = v1 + 208;
    *(void *)(v1[3] + 1312) = v1 + 210;
    *(void *)(v1[3] + 1320) = v1 + 212;
    *(void *)(v1[3] + 1328) = v1 + 214;
    *(void *)(v1[3] + 1336) = v1 + 216;
    *(void *)(v1[3] + 1344) = v1 + 218;
    *(void *)(v1[3] + 1352) = v1 + 288;
    *(void *)(v1[3] + 1360) = v1 + 290;
    *(void *)(v1[3] + 1368) = v1 + 292;
    *(void *)(v1[3] + 1376) = v1 + 307;
    *(void *)(v1[3] + 1384) = v1 + 309;
    *(void *)(v1[3] + 1392) = v1 + 311;
    *(void *)(v1[3] + 1400) = v1 + 313;
    *(void *)(v1[3] + 1408) = v1 + 316;
    *(void *)(v1[3] + 1416) = v1 + 419;
    *(void *)(v1[3] + 1424) = v1 + 478;
    *(void *)(v1[3] + 1432) = v1 + 490;
    *(void *)(v1[3] + 1440) = v1 + 492;
    *(void *)(v1[3] + 1448) = v1 + 494;
    *(void *)(v1[3] + 1456) = v1 + 496;
    *(void *)(v1[3] + 1464) = v1 + 498;
    *(void *)(v1[3] + 1472) = v1 + 500;
    *(void *)(v1[3] + 1480) = v1 + 578;
    *(void *)(v1[3] + 1488) = v1 + 584;
    *(void *)(v1[3] + 1496) = v1 + 616;
    *(void *)(v1[3] + 1504) = v1 + 623;
    *(void *)(v1[3] + 1512) = v1 + 625;
    *(void *)(v1[3] + 1520) = v1 + 627;
    *(void *)(v1[3] + 1528) = v1 + 629;
    *(void *)(v1[3] + 1536) = v1 + 635;
    *(void *)(v1[3] + 1544) = v1 + 651;
    *(void *)(v1[3] + 1552) = v1 + 748;
    *(void *)(v1[3] + 1560) = v1 + 750;
    unsigned int v3 = malloc_type_malloc(0x280uLL, 0x1020040EDED9539uLL);
    v1[4] = v3;
    if (!v3) {
      goto LABEL_8;
    }
    *unsigned int v3 = v1 + 223;
    v3[1] = 0x600000001;
    v3[2] = v1 + 226;
    v3[3] = 0x600000001;
    v3[4] = v1 + 229;
    v3[5] = 0x600000001;
    v3[6] = v1 + 232;
    v3[7] = 0x200000007;
    v3[8] = v1 + 235;
    v3[9] = 0x200000008;
    v3[10] = v1 + 238;
    v3[11] = 0x200000000;
    v3[12] = v1 + 295;
    v3[13] = 0x600000001;
    v3[14] = v1 + 386;
    v3[15] = 0xA00000005;
    v3[16] = v1 + 390;
    v3[17] = 0xA00000005;
    v3[18] = v1 + 394;
    v3[19] = 0xA00000005;
    v3[20] = v1 + 450;
    v3[21] = 0x1000000002;
    v3[22] = v1 + 454;
    v3[23] = 0x3000000006;
    v3[24] = v1 + 462;
    v3[25] = 0x1000000002;
    v3[26] = v1 + 469;
    v3[27] = 0x600000001;
    v3[28] = v1 + 590;
    v3[29] = 0x3000000006;
    v3[30] = v1 + 598;
    v3[31] = 0x3000000006;
    v3[32] = v1 + 606;
    v3[33] = 0x3000000006;
    v3[34] = v1 + 653;
    v3[35] = 0xA00000005;
    v3[36] = v1 + 657;
    v3[37] = 0x1000000002;
    v3[38] = v1 + 661;
    v3[39] = 0x1000000002;
    v3[40] = v1 + 223;
    v3[41] = 0x600000001;
    v3[42] = v1 + 226;
    v3[43] = 0x600000001;
    v3[44] = v1 + 229;
    v3[45] = 0x600000001;
    v3[46] = v1 + 232;
    v3[47] = 0x200000007;
    v3[48] = v1 + 235;
    v3[49] = 0x200000008;
    v3[50] = v1 + 238;
    v3[51] = 0x200000000;
    v3[52] = v1 + 295;
    v3[53] = 0x600000001;
    v3[54] = v1 + 386;
    v3[55] = 0xA00000005;
    v3[56] = v1 + 390;
    v3[57] = 0xA00000005;
    v3[58] = v1 + 394;
    v3[59] = 0xA00000005;
    v3[60] = v1 + 450;
    v3[61] = 0x1000000002;
    v3[62] = v1 + 454;
    v3[63] = 0x3000000006;
    v3[64] = v1 + 462;
    v3[65] = 0x1000000002;
    v3[66] = v1 + 469;
    __int16 v4 = (void *)v1[4];
    v4[67] = 0x600000001;
    v4[68] = v1 + 590;
    v4[69] = 0x3000000006;
    v4[70] = v1 + 598;
    v4[71] = 0x3000000006;
    v4[72] = v1 + 606;
    v4[73] = 0x3000000006;
    v4[74] = v1 + 653;
    v4[75] = 0xA00000005;
    v4[76] = v1 + 657;
    v4[77] = 0x1000000002;
    v4[78] = v1 + 661;
    v4[79] = 0x1000000002;
    uint64_t v5 = OUTLINED_FUNCTION_0_47(0x30uLL);
    v1[5] = v5;
    if (!v5) {
      goto LABEL_8;
    }
    *uint64_t v5 = v1 + 449;
    *(void *)(v1[5] + 8) = v1 + 474;
    *(void *)(v1[5] + 16) = v1 + 483;
    *(void *)(v1[5] + 24) = v1 + 449;
    *(void *)(v1[5] + 32) = v1 + 474;
    *(void *)(v1[5] + 40) = v1 + 483;
    size_t v6 = OUTLINED_FUNCTION_0_47(0x2510uLL);
    v1[6] = v6;
    if (!v6) {
      goto LABEL_8;
    }
    *size_t v6 = (char *)v1 + 634;
    *(void *)(v1[6] + 8) = (char *)v1 + 722;
    *(void *)(v1[6] + 16) = (char *)v1 + 726;
    *(void *)(v1[6] + 24) = (char *)v1 + 730;
    *(void *)(v1[6] + 32) = (char *)v1 + 734;
    *(void *)(v1[6] + 40) = (char *)v1 + 738;
    *(void *)(v1[6] + 48) = (char *)v1 + 742;
    *(void *)(v1[6] + 56) = (char *)v1 + 746;
    *(void *)(v1[6] + 64) = (char *)v1 + 750;
    *(void *)(v1[6] + 72) = (char *)v1 + 754;
    *(void *)(v1[6] + 80) = (char *)v1 + 758;
    *(void *)(v1[6] + 88) = (char *)v1 + 762;
    *(void *)(v1[6] + 96) = (char *)v1 + 766;
    *(void *)(v1[6] + 104) = (char *)v1 + 930;
    *(void *)(v1[6] + 112) = (char *)v1 + 934;
    *(void *)(v1[6] + 120) = (char *)v1 + 938;
    *(void *)(v1[6] + 128) = (char *)v1 + 942;
    *(void *)(v1[6] + 136) = (char *)v1 + 946;
    *(void *)(v1[6] + 144) = (char *)v1 + 950;
    *(void *)(v1[6] + 152) = (char *)v1 + 954;
    *(void *)(v1[6] + 160) = (char *)v1 + 958;
    *(void *)(v1[6] + 168) = (char *)v1 + 962;
    *(void *)(v1[6] + 176) = (char *)v1 + 966;
    *(void *)(v1[6] + 184) = (char *)v1 + 970;
    *(void *)(v1[6] + 192) = (char *)v1 + 974;
    *(void *)(v1[6] + 200) = (char *)v1 + 978;
    *(void *)(v1[6] + 208) = (char *)v1 + 982;
    *(void *)(v1[6] + 216) = (char *)v1 + 986;
    *(void *)(v1[6] + 224) = (char *)v1 + 990;
    *(void *)(v1[6] + 232) = (char *)v1 + 994;
    *(void *)(v1[6] + 240) = (char *)v1 + 998;
    *(void *)(v1[6] + 248) = (char *)v1 + 1002;
    *(void *)(v1[6] + 256) = (char *)v1 + 1006;
    *(void *)(v1[6] + 264) = (char *)v1 + 1010;
    *(void *)(v1[6] + 272) = (char *)v1 + 1014;
    *(void *)(v1[6] + 280) = (char *)v1 + 1018;
    *(void *)(v1[6] + 288) = (char *)v1 + 1022;
    *(void *)(v1[6] + 296) = (char *)v1 + 1026;
    *(void *)(v1[6] + 304) = (char *)v1 + 1030;
    *(void *)(v1[6] + 312) = (char *)v1 + 1130;
    *(void *)(v1[6] + 320) = (char *)v1 + 1186;
    *(void *)(v1[6] + 328) = (char *)v1 + 1190;
    *(void *)(v1[6] + 336) = (char *)v1 + 1210;
    *(void *)(v1[6] + 344) = (char *)v1 + 1214;
    *(void *)(v1[6] + 352) = (char *)v1 + 1218;
    *(void *)(v1[6] + 360) = (char *)v1 + 1930;
    *(void *)(v1[6] + 368) = (char *)v1 + 1934;
    *(void *)(v1[6] + 376) = (char *)v1 + 1938;
    *(void *)(v1[6] + 384) = (char *)v1 + 1942;
    *(void *)(v1[6] + 392) = (char *)v1 + 1946;
    *(void *)(v1[6] + 400) = (char *)v1 + 1950;
    *(void *)(v1[6] + 408) = (char *)v1 + 1954;
    *(void *)(v1[6] + 416) = (char *)v1 + 1958;
    *(void *)(v1[6] + 424) = (char *)v1 + 1962;
    *(void *)(v1[6] + 432) = (char *)v1 + 1966;
    *(void *)(v1[6] + 440) = (char *)v1 + 1970;
    *(void *)(v1[6] + 448) = (char *)v1 + 1974;
    *(void *)(v1[6] + 456) = (char *)v1 + 1978;
    *(void *)(v1[6] + 464) = (char *)v1 + 1982;
    *(void *)(v1[6] + 472) = (char *)v1 + 1986;
    *(void *)(v1[6] + 480) = (char *)v1 + 1990;
    *(void *)(v1[6] + 488) = (char *)v1 + 1994;
    *(void *)(v1[6] + 496) = (char *)v1 + 1998;
    *(void *)(v1[6] + 504) = (char *)v1 + 2002;
    *(void *)(v1[6] + 512) = (char *)v1 + 2006;
    *(void *)(v1[6] + 520) = (char *)v1 + 2010;
    *(void *)(v1[6] + 528) = (char *)v1 + 2014;
    *(void *)(v1[6] + 536) = (char *)v1 + 2018;
    *(void *)(v1[6] + 544) = (char *)v1 + 2022;
    *(void *)(v1[6] + 552) = (char *)v1 + 2026;
    *(void *)(v1[6] + 560) = (char *)v1 + 2030;
    *(void *)(v1[6] + 568) = (char *)v1 + 2034;
    *(void *)(v1[6] + 576) = (char *)v1 + 2038;
    *(void *)(v1[6] + 584) = (char *)v1 + 2042;
    *(void *)(v1[6] + 592) = (char *)v1 + 2046;
    *(void *)(v1[6] + 600) = (char *)v1 + 2050;
    *(void *)(v1[6] + 608) = (char *)v1 + 2054;
    *(void *)(v1[6] + 616) = (char *)v1 + 2058;
    *(void *)(v1[6] + 624) = (char *)v1 + 2062;
    *(void *)(v1[6] + 632) = (char *)v1 + 2066;
    *(void *)(v1[6] + 640) = (char *)v1 + 2070;
    *(void *)(v1[6] + 648) = (char *)v1 + 2074;
    *(void *)(v1[6] + 656) = (char *)v1 + 2078;
    *(void *)(v1[6] + 664) = (char *)v1 + 2082;
    *(void *)(v1[6] + 672) = (char *)v1 + 2086;
    *(void *)(v1[6] + 680) = (char *)v1 + 2090;
    *(void *)(v1[6] + 688) = (char *)v1 + 2094;
    *(void *)(v1[6] + 696) = (char *)v1 + 2274;
    *(void *)(v1[6] + 704) = (char *)v1 + 2278;
    *(void *)(v1[6] + 712) = (char *)v1 + 2282;
    *(void *)(v1[6] + 720) = (char *)v1 + 2286;
    *(void *)(v1[6] + 728) = (char *)v1 + 2290;
    *(void *)(v1[6] + 736) = (char *)v1 + 2346;
    *(void *)(v1[6] + 744) = (char *)v1 + 2350;
    *(void *)(v1[6] + 752) = (char *)v1 + 2354;
    *(void *)(v1[6] + 760) = (char *)v1 + 2386;
    *(void *)(v1[6] + 768) = (char *)v1 + 2390;
    *(void *)(v1[6] + 776) = (char *)v1 + 2394;
    *(void *)(v1[6] + 784) = (char *)v1 + 2398;
    *(void *)(v1[6] + 792) = (char *)v1 + 2402;
    *(void *)(v1[6] + 800) = (char *)v1 + 2406;
    *(void *)(v1[6] + 808) = (char *)v1 + 2410;
    *(void *)(v1[6] + 816) = (char *)v1 + 2414;
    *(void *)(v1[6] + 824) = (char *)v1 + 2418;
    *(void *)(v1[6] + 832) = (char *)v1 + 2422;
    *(void *)(v1[6] + 840) = (char *)v1 + 2426;
    *(void *)(v1[6] + 848) = (char *)v1 + 2430;
    *(void *)(v1[6] + 856) = (char *)v1 + 2434;
    *(void *)(v1[6] + 864) = (char *)v1 + 2438;
    *(void *)(v1[6] + 872) = (char *)v1 + 2442;
    *(void *)(v1[6] + 880) = (char *)v1 + 2446;
    *(void *)(v1[6] + 888) = (char *)v1 + 2514;
    *(void *)(v1[6] + 896) = (char *)v1 + 2538;
    *(void *)(v1[6] + 904) = (char *)v1 + 2542;
    *(void *)(v1[6] + 912) = (char *)v1 + 2546;
    *(void *)(v1[6] + 920) = (char *)v1 + 2550;
    *(void *)(v1[6] + 928) = (char *)v1 + 2554;
    *(void *)(v1[6] + 936) = (char *)v1 + 2558;
    *(void *)(v1[6] + 944) = (char *)v1 + 2562;
    *(void *)(v1[6] + 952) = (char *)v1 + 2566;
    *(void *)(v1[6] + 960) = (char *)v1 + 2570;
    *(void *)(v1[6] + 968) = (char *)v1 + 2574;
    *(void *)(v1[6] + 976) = (char *)v1 + 2578;
    *(void *)(v1[6] + 984) = (char *)v1 + 2582;
    *(void *)(v1[6] + 992) = (char *)v1 + 2586;
    *(void *)(v1[6] + 1000) = (char *)v1 + 2590;
    *(void *)(v1[6] + 1008) = (char *)v1 + 2594;
    *(void *)(v1[6] + 1016) = (char *)v1 + 2598;
    *(void *)(v1[6] + 1024) = (char *)v1 + 2602;
    *(void *)(v1[6] + 1032) = (char *)v1 + 2606;
    *(void *)(v1[6] + 1040) = (char *)v1 + 2610;
    *(void *)(v1[6] + 1048) = (char *)v1 + 2614;
    *(void *)(v1[6] + 1056) = (char *)v1 + 2618;
    *(void *)(v1[6] + 1064) = (char *)v1 + 2622;
    *(void *)(v1[6] + 1072) = (char *)v1 + 2626;
    *(void *)(v1[6] + 1080) = (char *)v1 + 2630;
    *(void *)(v1[6] + 1088) = (char *)v1 + 2634;
    *(void *)(v1[6] + 1096) = (char *)v1 + 2638;
    *(void *)(v1[6] + 1104) = (char *)v1 + 2642;
    *(void *)(v1[6] + 1112) = (char *)v1 + 2646;
    *(void *)(v1[6] + 1120) = (char *)v1 + 2650;
    *(void *)(v1[6] + 1128) = (char *)v1 + 2654;
    *(void *)(v1[6] + 1136) = (char *)v1 + 2658;
    *(void *)(v1[6] + 1144) = (char *)v1 + 2662;
    *(void *)(v1[6] + 1152) = (char *)v1 + 2666;
    *(void *)(v1[6] + 1160) = (char *)v1 + 2670;
    *(void *)(v1[6] + 1168) = (char *)v1 + 2674;
    *(void *)(v1[6] + 1176) = (char *)v1 + 2678;
    *(void *)(v1[6] + 1184) = (char *)v1 + 2682;
    *(void *)(v1[6] + 1192) = (char *)v1 + 2686;
    *(void *)(v1[6] + 1200) = (char *)v1 + 2690;
    *(void *)(v1[6] + 1208) = (char *)v1 + 2694;
    *(void *)(v1[6] + 1216) = (char *)v1 + 2698;
    *(void *)(v1[6] + 1224) = (char *)v1 + 2702;
    *(void *)(v1[6] + 1232) = (char *)v1 + 2706;
    *(void *)(v1[6] + 1240) = (char *)v1 + 2710;
    *(void *)(v1[6] + 1248) = (char *)v1 + 2714;
    *(void *)(v1[6] + 1256) = (char *)v1 + 2718;
    *(void *)(v1[6] + 1264) = (char *)v1 + 2722;
    *(void *)(v1[6] + 1272) = (char *)v1 + 2726;
    *(void *)(v1[6] + 1280) = (char *)v1 + 2730;
    *(void *)(v1[6] + 1288) = (char *)v1 + 2734;
    *(void *)(v1[6] + 1296) = (char *)v1 + 2738;
    *(void *)(v1[6] + 1304) = (char *)v1 + 2742;
    *(void *)(v1[6] + 1312) = (char *)v1 + 2746;
    *(void *)(v1[6] + 1320) = (char *)v1 + 2750;
    *(void *)(v1[6] + 1328) = (char *)v1 + 2754;
    *(void *)(v1[6] + 1336) = (char *)v1 + 2758;
    *(void *)(v1[6] + 1344) = (char *)v1 + 2762;
    *(void *)(v1[6] + 1352) = (char *)v1 + 2766;
    *(void *)(v1[6] + 1360) = (char *)v1 + 2770;
    *(void *)(v1[6] + 1368) = (char *)v1 + 2774;
    *(void *)(v1[6] + 1376) = (char *)v1 + 2778;
    *(void *)(v1[6] + 1384) = (char *)v1 + 2782;
    *(void *)(v1[6] + 1392) = (char *)v1 + 2786;
    *(void *)(v1[6] + 1400) = (char *)v1 + 2790;
    *(void *)(v1[6] + 1408) = (char *)v1 + 2794;
    *(void *)(v1[6] + 1416) = (char *)v1 + 2798;
    *(void *)(v1[6] + 1424) = (char *)v1 + 2802;
    *(void *)(v1[6] + 1432) = (char *)v1 + 2806;
    *(void *)(v1[6] + 1440) = (char *)v1 + 2810;
    *(void *)(v1[6] + 1448) = (char *)v1 + 2814;
    *(void *)(v1[6] + 1456) = (char *)v1 + 2818;
    *(void *)(v1[6] + 1464) = (char *)v1 + 2822;
    *(void *)(v1[6] + 1472) = (char *)v1 + 2826;
    *(void *)(v1[6] + 1480) = (char *)v1 + 2830;
    *(void *)(v1[6] + 1488) = (char *)v1 + 2834;
    *(void *)(v1[6] + 1496) = (char *)v1 + 2838;
    *(void *)(v1[6] + 1504) = (char *)v1 + 2842;
    *(void *)(v1[6] + 1512) = (char *)v1 + 2846;
    *(void *)(v1[6] + 1520) = (char *)v1 + 2850;
    *(void *)(v1[6] + 1528) = (char *)v1 + 2854;
    *(void *)(v1[6] + 1536) = (char *)v1 + 2858;
    *(void *)(v1[6] + 1544) = (char *)v1 + 2862;
    *(void *)(v1[6] + 1552) = (char *)v1 + 2866;
    *(void *)(v1[6] + 1560) = (char *)v1 + 2870;
    *(void *)(v1[6] + 1568) = (char *)v1 + 2874;
    *(void *)(v1[6] + 1576) = (char *)v1 + 2878;
    *(void *)(v1[6] + 1584) = (char *)v1 + 2882;
    *(void *)(v1[6] + 1592) = (char *)v1 + 2886;
    *(void *)(v1[6] + 1600) = (char *)v1 + 2890;
    *(void *)(v1[6] + 1608) = (char *)v1 + 2894;
    *(void *)(v1[6] + 1616) = (char *)v1 + 2898;
    *(void *)(v1[6] + 1624) = (char *)v1 + 2902;
    *(void *)(v1[6] + 1632) = (char *)v1 + 2906;
    *(void *)(v1[6] + 1640) = (char *)v1 + 2910;
    *(void *)(v1[6] + 1648) = (char *)v1 + 2914;
    *(void *)(v1[6] + 1656) = (char *)v1 + 2918;
    *(void *)(v1[6] + 1664) = (char *)v1 + 2922;
    *(void *)(v1[6] + 1672) = (char *)v1 + 2926;
    *(void *)(v1[6] + 1680) = (char *)v1 + 2930;
    *(void *)(v1[6] + 1688) = (char *)v1 + 2934;
    *(void *)(v1[6] + 1696) = (char *)v1 + 2938;
    *(void *)(v1[6] + 1704) = (char *)v1 + 2942;
    *(void *)(v1[6] + 1712) = (char *)v1 + 2946;
    *(void *)(v1[6] + 1720) = (char *)v1 + 2950;
    *(void *)(v1[6] + 1728) = (char *)v1 + 2954;
    *(void *)(v1[6] + 1736) = (char *)v1 + 2958;
    *(void *)(v1[6] + 1744) = (char *)v1 + 2962;
    *(void *)(v1[6] + 1752) = (char *)v1 + 2966;
    *(void *)(v1[6] + 1760) = (char *)v1 + 2970;
    *(void *)(v1[6] + 1768) = (char *)v1 + 2974;
    *(void *)(v1[6] + 1776) = (char *)v1 + 2978;
    *(void *)(v1[6] + 1784) = (char *)v1 + 2982;
    *(void *)(v1[6] + 1792) = (char *)v1 + 2986;
    *(void *)(v1[6] + 1800) = (char *)v1 + 2990;
    *(void *)(v1[6] + 1808) = (char *)v1 + 2994;
    *(void *)(v1[6] + 1816) = (char *)v1 + 2998;
    *(void *)(v1[6] + 1824) = (char *)v1 + 3002;
    *(void *)(v1[6] + 1832) = (char *)v1 + 3006;
    *(void *)(v1[6] + 1840) = (char *)v1 + 3010;
    *(void *)(v1[6] + 1848) = (char *)v1 + 3014;
    *(void *)(v1[6] + 1856) = (char *)v1 + 3018;
    *(void *)(v1[6] + 1864) = (char *)v1 + 3022;
    *(void *)(v1[6] + 1872) = (char *)v1 + 3026;
    *(void *)(v1[6] + 1880) = (char *)v1 + 3030;
    *(void *)(v1[6] + 1888) = (char *)v1 + 3034;
    *(void *)(v1[6] + 1896) = (char *)v1 + 3038;
    *(void *)(v1[6] + 1904) = (char *)v1 + 3042;
    *(void *)(v1[6] + 1912) = (char *)v1 + 3046;
    *(void *)(v1[6] + 1920) = (char *)v1 + 3050;
    *(void *)(v1[6] + 1928) = (char *)v1 + 3054;
    *(void *)(v1[6] + 1936) = (char *)v1 + 3058;
    *(void *)(v1[6] + 1944) = (char *)v1 + 3062;
    *(void *)(v1[6] + 1952) = (char *)v1 + 3066;
    *(void *)(v1[6] + 1960) = (char *)v1 + 3070;
    *(void *)(v1[6] + 1968) = (char *)v1 + 3074;
    *(void *)(v1[6] + 1976) = (char *)v1 + 3078;
    *(void *)(v1[6] + 1984) = (char *)v1 + 3082;
    *(void *)(v1[6] + 1992) = (char *)v1 + 3186;
    *(void *)(v1[6] + 2000) = (char *)v1 + 3190;
    *(void *)(v1[6] + 2008) = (char *)v1 + 3194;
    *(void *)(v1[6] + 2016) = (char *)v1 + 3198;
    *(void *)(v1[6] + 2024) = (char *)v1 + 3202;
    *(void *)(v1[6] + 2032) = (char *)v1 + 3206;
    *(void *)(v1[6] + 2040) = (char *)v1 + 3210;
    *(void *)(v1[6] + 2048) = (char *)v1 + 3214;
    *(void *)(v1[6] + 2056) = (char *)v1 + 3218;
    *(void *)(v1[6] + 2064) = (char *)v1 + 3222;
    *(void *)(v1[6] + 2072) = (char *)v1 + 3226;
    *(void *)(v1[6] + 2080) = (char *)v1 + 3230;
    *(void *)(v1[6] + 2088) = (char *)v1 + 3234;
    *(void *)(v1[6] + 2096) = (char *)v1 + 3238;
    *(void *)(v1[6] + 2104) = (char *)v1 + 3242;
    *(void *)(v1[6] + 2112) = (char *)v1 + 3246;
    *(void *)(v1[6] + 2120) = (char *)v1 + 3250;
    *(void *)(v1[6] + 2128) = (char *)v1 + 3254;
    *(void *)(v1[6] + 2136) = (char *)v1 + 3258;
    *(void *)(v1[6] + 2144) = (char *)v1 + 3262;
    *(void *)(v1[6] + 2152) = (char *)v1 + 3266;
    *(void *)(v1[6] + 2160) = (char *)v1 + 3270;
    *(void *)(v1[6] + 2168) = (char *)v1 + 3274;
    *(void *)(v1[6] + 2176) = (char *)v1 + 3278;
    *(void *)(v1[6] + 2184) = (char *)v1 + 3282;
    *(void *)(v1[6] + 2192) = (char *)v1 + 3286;
    *(void *)(v1[6] + 2200) = (char *)v1 + 3290;
    *(void *)(v1[6] + 2208) = (char *)v1 + 3294;
    *(void *)(v1[6] + 2216) = (char *)v1 + 3298;
    *(void *)(v1[6] + 2224) = (char *)v1 + 3302;
    *(void *)(v1[6] + 2232) = (char *)v1 + 3306;
    *(void *)(v1[6] + 2240) = (char *)v1 + 3310;
    *(void *)(v1[6] + 2248) = (char *)v1 + 3314;
    *(void *)(v1[6] + 2256) = (char *)v1 + 3318;
    *(void *)(v1[6] + 2264) = (char *)v1 + 3322;
    *(void *)(v1[6] + 2272) = (char *)v1 + 3326;
    *(void *)(v1[6] + 2280) = (char *)v1 + 3330;
    *(void *)(v1[6] + 2288) = (char *)v1 + 3334;
    *(void *)(v1[6] + 2296) = (char *)v1 + 3338;
    *(void *)(v1[6] + 2304) = (char *)v1 + 3342;
    *(void *)(v1[6] + 2312) = (char *)v1 + 3362;
    *(void *)(v1[6] + 2320) = (char *)v1 + 3366;
    *(void *)(v1[6] + 2328) = (char *)v1 + 3370;
    *(void *)(v1[6] + 2336) = (char *)v1 + 3410;
    *(void *)(v1[6] + 2344) = (char *)v1 + 3414;
    *(void *)(v1[6] + 2352) = (char *)v1 + 3418;
    *(void *)(v1[6] + 2360) = (char *)v1 + 3422;
    *(void *)(v1[6] + 2368) = (char *)v1 + 3426;
    *(void *)(v1[6] + 2376) = (char *)v1 + 3430;
    *(void *)(v1[6] + 2384) = (char *)v1 + 3434;
    *(void *)(v1[6] + 2392) = (char *)v1 + 3438;
    *(void *)(v1[6] + 2400) = (char *)v1 + 3442;
    *(void *)(v1[6] + 2408) = (char *)v1 + 3446;
    *(void *)(v1[6] + 2416) = (char *)v1 + 3450;
    *(void *)(v1[6] + 2424) = (char *)v1 + 3454;
    *(void *)(v1[6] + 2432) = (char *)v1 + 3458;
    *(void *)(v1[6] + 2440) = (char *)v1 + 3462;
    *(void *)(v1[6] + 2448) = (char *)v1 + 3466;
    *(void *)(v1[6] + 2456) = (char *)v1 + 3470;
    *(void *)(v1[6] + 2464) = (char *)v1 + 3474;
    *(void *)(v1[6] + 2472) = (char *)v1 + 3478;
    *(void *)(v1[6] + 2480) = (char *)v1 + 3482;
    *(void *)(v1[6] + 2488) = (char *)v1 + 3486;
    *(void *)(v1[6] + 2496) = (char *)v1 + 3490;
    *(void *)(v1[6] + 2504) = (char *)v1 + 3494;
    *(void *)(v1[6] + 2512) = (char *)v1 + 3498;
    *(void *)(v1[6] + 2520) = (char *)v1 + 3502;
    *(void *)(v1[6] + 2528) = (char *)v1 + 3506;
    *(void *)(v1[6] + 2536) = (char *)v1 + 3510;
    *(void *)(v1[6] + 2544) = (char *)v1 + 3514;
    *(void *)(v1[6] + 2552) = (char *)v1 + 3518;
    *(void *)(v1[6] + 2560) = (char *)v1 + 3522;
    *(void *)(v1[6] + 2568) = (char *)v1 + 3526;
    *(void *)(v1[6] + 2576) = (char *)v1 + 3530;
    *(void *)(v1[6] + 2584) = (char *)v1 + 3534;
    *(void *)(v1[6] + 2592) = (char *)v1 + 3538;
    *(void *)(v1[6] + 2600) = (char *)v1 + 3542;
    *(void *)(v1[6] + 2608) = (char *)v1 + 3546;
    *(void *)(v1[6] + 2616) = (char *)v1 + 3550;
    *(void *)(v1[6] + 2624) = (char *)v1 + 3554;
    *(void *)(v1[6] + 2632) = (char *)v1 + 3558;
    *(void *)(v1[6] + 2640) = (char *)v1 + 3562;
    *(void *)(v1[6] + 2648) = (char *)v1 + 3566;
    *(void *)(v1[6] + 2656) = (char *)v1 + 3570;
    *(void *)(v1[6] + 2664) = (char *)v1 + 3574;
    *(void *)(v1[6] + 2672) = (char *)v1 + 3578;
    *(void *)(v1[6] + 2680) = (char *)v1 + 3746;
    *(void *)(v1[6] + 2688) = (char *)v1 + 3778;
    *(void *)(v1[6] + 2696) = (char *)v1 + 3802;
    *(void *)(v1[6] + 2704) = (char *)v1 + 3806;
    *(void *)(v1[6] + 2712) = (char *)v1 + 3810;
    *(void *)(v1[6] + 2720) = (char *)v1 + 3834;
    *(void *)(v1[6] + 2728) = (char *)v1 + 3838;
    *(void *)(v1[6] + 2736) = (char *)v1 + 3842;
    *(void *)(v1[6] + 2744) = (char *)v1 + 3846;
    *(void *)(v1[6] + 2752) = (char *)v1 + 3850;
    *(void *)(v1[6] + 2760) = (char *)v1 + 3874;
    *(void *)(v1[6] + 2768) = (char *)v1 + 3878;
    *(void *)(v1[6] + 2776) = (char *)v1 + 3882;
    *(void *)(v1[6] + 2784) = (char *)v1 + 3886;
    *(void *)(v1[6] + 2792) = (char *)v1 + 3890;
    *(void *)(v1[6] + 2800) = (char *)v1 + 3894;
    *(void *)(v1[6] + 2808) = (char *)v1 + 3898;
    *(void *)(v1[6] + 2816) = (char *)v1 + 3902;
    *(void *)(v1[6] + 2824) = (char *)v1 + 3906;
    *(void *)(v1[6] + 2832) = (char *)v1 + 3910;
    *(void *)(v1[6] + 2840) = (char *)v1 + 4010;
    *(void *)(v1[6] + 2848) = (char *)v1 + 4014;
    *(void *)(v1[6] + 2856) = (char *)v1 + 4034;
    *(void *)(v1[6] + 2864) = (char *)v1 + 4038;
    *(void *)(v1[6] + 2872) = (char *)v1 + 4042;
    *(void *)(v1[6] + 2880) = (char *)v1 + 4046;
    *(void *)(v1[6] + 2888) = (char *)v1 + 4050;
    *(void *)(v1[6] + 2896) = (char *)v1 + 4054;
    *(void *)(v1[6] + 2904) = (char *)v1 + 4218;
    *(void *)(v1[6] + 2912) = (char *)v1 + 4222;
    *(void *)(v1[6] + 2920) = (char *)v1 + 4226;
    *(void *)(v1[6] + 2928) = (char *)v1 + 4230;
    *(void *)(v1[6] + 2936) = (char *)v1 + 4234;
    *(void *)(v1[6] + 2944) = (char *)v1 + 4238;
    *(void *)(v1[6] + 2952) = (char *)v1 + 4242;
    *(void *)(v1[6] + 2960) = (char *)v1 + 4246;
    *(void *)(v1[6] + 2968) = (char *)v1 + 4250;
    *(void *)(v1[6] + 2976) = (char *)v1 + 4254;
    *(void *)(v1[6] + 2984) = (char *)v1 + 4258;
    *(void *)(v1[6] + 2992) = (char *)v1 + 4282;
    *(void *)(v1[6] + 3000) = (char *)v1 + 4286;
    *(void *)(v1[6] + 3008) = (char *)v1 + 4290;
    *(void *)(v1[6] + 3016) = (char *)v1 + 4294;
    *(void *)(v1[6] + 3024) = (char *)v1 + 4298;
    *(void *)(v1[6] + 3032) = (char *)v1 + 4302;
    *(void *)(v1[6] + 3040) = (char *)v1 + 4306;
    *(void *)(v1[6] + 3048) = (char *)v1 + 4310;
    *(void *)(v1[6] + 3056) = (char *)v1 + 4314;
    *(void *)(v1[6] + 3064) = (char *)v1 + 4318;
    *(void *)(v1[6] + 3072) = (char *)v1 + 4322;
    *(void *)(v1[6] + 3080) = (char *)v1 + 4326;
    *(void *)(v1[6] + 3088) = (char *)v1 + 4330;
    *(void *)(v1[6] + 3096) = (char *)v1 + 4334;
    *(void *)(v1[6] + 3104) = (char *)v1 + 4338;
    *(void *)(v1[6] + 3112) = (char *)v1 + 4342;
    *(void *)(v1[6] + 3120) = (char *)v1 + 4346;
    *(void *)(v1[6] + 3128) = (char *)v1 + 4350;
    *(void *)(v1[6] + 3136) = (char *)v1 + 4354;
    *(void *)(v1[6] + 3144) = (char *)v1 + 4358;
    *(void *)(v1[6] + 3152) = (char *)v1 + 4362;
    *(void *)(v1[6] + 3160) = (char *)v1 + 4366;
    *(void *)(v1[6] + 3168) = (char *)v1 + 4370;
    *(void *)(v1[6] + 3176) = (char *)v1 + 4374;
    *(void *)(v1[6] + 3184) = (char *)v1 + 4378;
    *(void *)(v1[6] + 3192) = (char *)v1 + 4382;
    *(void *)(v1[6] + 3200) = (char *)v1 + 4386;
    *(void *)(v1[6] + 3208) = (char *)v1 + 4390;
    *(void *)(v1[6] + 3216) = (char *)v1 + 4394;
    *(void *)(v1[6] + 3224) = (char *)v1 + 4398;
    *(void *)(v1[6] + 3232) = (char *)v1 + 4402;
    *(void *)(v1[6] + 3240) = (char *)v1 + 4406;
    *(void *)(v1[6] + 3248) = (char *)v1 + 4410;
    *(void *)(v1[6] + 3256) = (char *)v1 + 4414;
    *(void *)(v1[6] + 3264) = (char *)v1 + 4418;
    *(void *)(v1[6] + 3272) = (char *)v1 + 4422;
    *(void *)(v1[6] + 3280) = (char *)v1 + 4426;
    *(void *)(v1[6] + 3288) = (char *)v1 + 4430;
    *(void *)(v1[6] + 3296) = (char *)v1 + 4434;
    *(void *)(v1[6] + 3304) = (char *)v1 + 4438;
    *(void *)(v1[6] + 3312) = (char *)v1 + 4442;
    *(void *)(v1[6] + 3320) = (char *)v1 + 4446;
    *(void *)(v1[6] + 3328) = (char *)v1 + 4450;
    *(void *)(v1[6] + 3336) = (char *)v1 + 4454;
    *(void *)(v1[6] + 3344) = (char *)v1 + 4458;
    *(void *)(v1[6] + 3352) = (char *)v1 + 4462;
    *(void *)(v1[6] + 3360) = (char *)v1 + 4466;
    *(void *)(v1[6] + 3368) = (char *)v1 + 4470;
    *(void *)(v1[6] + 3376) = (char *)v1 + 4474;
    *(void *)(v1[6] + 3384) = (char *)v1 + 4478;
    *(void *)(v1[6] + 3392) = (char *)v1 + 4482;
    *(void *)(v1[6] + 3400) = (char *)v1 + 4486;
    *(void *)(v1[6] + 3408) = (char *)v1 + 4490;
    *(void *)(v1[6] + 3416) = (char *)v1 + 4494;
    *(void *)(v1[6] + 3424) = (char *)v1 + 4498;
    *(void *)(v1[6] + 3432) = (char *)v1 + 4502;
    *(void *)(v1[6] + 3440) = (char *)v1 + 4506;
    *(void *)(v1[6] + 3448) = (char *)v1 + 4510;
    *(void *)(v1[6] + 3456) = (char *)v1 + 4514;
    *(void *)(v1[6] + 3464) = (char *)v1 + 4518;
    *(void *)(v1[6] + 3472) = (char *)v1 + 4522;
    *(void *)(v1[6] + 3480) = (char *)v1 + 4526;
    *(void *)(v1[6] + 3488) = (char *)v1 + 4530;
    *(void *)(v1[6] + 3496) = (char *)v1 + 4534;
    *(void *)(v1[6] + 3504) = (char *)v1 + 4538;
    *(void *)(v1[6] + 3512) = (char *)v1 + 4542;
    *(void *)(v1[6] + 3520) = (char *)v1 + 4546;
    *(void *)(v1[6] + 3528) = (char *)v1 + 4550;
    *(void *)(v1[6] + 3536) = (char *)v1 + 4554;
    *(void *)(v1[6] + 3544) = (char *)v1 + 4558;
    *(void *)(v1[6] + 3552) = (char *)v1 + 4562;
    *(void *)(v1[6] + 3560) = (char *)v1 + 4566;
    *(void *)(v1[6] + 3568) = (char *)v1 + 4570;
    *(void *)(v1[6] + 3576) = (char *)v1 + 4574;
    *(void *)(v1[6] + 3584) = (char *)v1 + 4578;
    *(void *)(v1[6] + 3592) = (char *)v1 + 4582;
    *(void *)(v1[6] + 3600) = (char *)v1 + 4586;
    *(void *)(v1[6] + 3608) = (char *)v1 + 4590;
    *(void *)(v1[6] + 3616) = (char *)v1 + 4594;
    *(void *)(v1[6] + 3624) = (char *)v1 + 4598;
    *(void *)(v1[6] + 3632) = (char *)v1 + 4602;
    *(void *)(v1[6] + 3640) = (char *)v1 + 4606;
    *(void *)(v1[6] + 3648) = (char *)v1 + 4610;
    *(void *)(v1[6] + 3656) = (char *)v1 + 4614;
    *(void *)(v1[6] + 3664) = (char *)v1 + 4682;
    *(void *)(v1[6] + 3672) = (char *)v1 + 4686;
    *(void *)(v1[6] + 3680) = (char *)v1 + 4690;
    *(void *)(v1[6] + 3688) = (char *)v1 + 4694;
    *(void *)(v1[6] + 3696) = (char *)v1 + 4698;
    *(void *)(v1[6] + 3704) = (char *)v1 + 4702;
    *(void *)(v1[6] + 3712) = (char *)v1 + 4706;
    *(void *)(v1[6] + 3720) = (char *)v1 + 4710;
    *(void *)(v1[6] + 3728) = (char *)v1 + 4714;
    *(void *)(v1[6] + 3736) = (char *)v1 + 4914;
    *(void *)(v1[6] + 3744) = (char *)v1 + 4918;
    *(void *)(v1[6] + 3752) = (char *)v1 + 4970;
    *(void *)(v1[6] + 3760) = (char *)v1 + 4974;
    *(void *)(v1[6] + 3768) = (char *)v1 + 5042;
    *(void *)(v1[6] + 3776) = (char *)v1 + 5066;
    *(void *)(v1[6] + 3784) = (char *)v1 + 5090;
    *(void *)(v1[6] + 3792) = (char *)v1 + 5094;
    *(void *)(v1[6] + 3800) = (char *)v1 + 5098;
    *(void *)(v1[6] + 3808) = (char *)v1 + 5102;
    *(void *)(v1[6] + 3816) = (char *)v1 + 5106;
    *(void *)(v1[6] + 3824) = (char *)v1 + 5110;
    *(void *)(v1[6] + 3832) = (char *)v1 + 5114;
    *(void *)(v1[6] + 3840) = (char *)v1 + 5118;
    *(void *)(v1[6] + 3848) = (char *)v1 + 5122;
    *(void *)(v1[6] + 3856) = (char *)v1 + 5126;
    *(void *)(v1[6] + 3864) = (char *)v1 + 5130;
    *(void *)(v1[6] + 3872) = (char *)v1 + 5134;
    *(void *)(v1[6] + 3880) = (char *)v1 + 5138;
    *(void *)(v1[6] + 3888) = (char *)v1 + 5142;
    *(void *)(v1[6] + 3896) = (char *)v1 + 5146;
    *(void *)(v1[6] + 3904) = (char *)v1 + 5218;
    *(void *)(v1[6] + 3912) = (char *)v1 + 5222;
    *(void *)(v1[6] + 3920) = (char *)v1 + 5322;
    *(void *)(v1[6] + 3928) = (char *)v1 + 5378;
    *(void *)(v1[6] + 3936) = (char *)v1 + 5382;
    *(void *)(v1[6] + 3944) = (char *)v1 + 5386;
    *(void *)(v1[6] + 3952) = (char *)v1 + 5390;
    *(void *)(v1[6] + 3960) = (char *)v1 + 5394;
    *(void *)(v1[6] + 3968) = (char *)v1 + 5398;
    *(void *)(v1[6] + 3976) = (char *)v1 + 5418;
    *(void *)(v1[6] + 3984) = (char *)v1 + 5422;
    *(void *)(v1[6] + 3992) = (char *)v1 + 5426;
    *(void *)(v1[6] + 4000) = (char *)v1 + 5430;
    *(void *)(v1[6] + 4008) = (char *)v1 + 5434;
    *(void *)(v1[6] + 4016) = (char *)v1 + 5438;
    *(void *)(v1[6] + 4024) = (char *)v1 + 5442;
    *(void *)(v1[6] + 4032) = (char *)v1 + 5446;
    *(void *)(v1[6] + 4040) = (char *)v1 + 5450;
    *(void *)(v1[6] + 4048) = (char *)v1 + 5454;
    *(void *)(v1[6] + 4056) = (char *)v1 + 5458;
    *(void *)(v1[6] + 4064) = (char *)v1 + 5462;
    *(void *)(v1[6] + 4072) = (char *)v1 + 5466;
    *(void *)(v1[6] + 4080) = (char *)v1 + 5470;
    *(void *)(v1[6] + 4088) = (char *)v1 + 5474;
    *(void *)(v1[6] + 4096) = (char *)v1 + 5478;
    *(void *)(v1[6] + 4104) = (char *)v1 + 5482;
    *(void *)(v1[6] + 4112) = (char *)v1 + 5486;
    *(void *)(v1[6] + 4120) = (char *)v1 + 5490;
    *(void *)(v1[6] + 4128) = (char *)v1 + 5494;
    *(void *)(v1[6] + 4136) = (char *)v1 + 5498;
    *(void *)(v1[6] + 4144) = (char *)v1 + 5502;
    *(void *)(v1[6] + 4152) = (char *)v1 + 5506;
    *(void *)(v1[6] + 4160) = (char *)v1 + 5510;
    *(void *)(v1[6] + 4168) = (char *)v1 + 5514;
    *(void *)(v1[6] + 4176) = (char *)v1 + 5518;
    *(void *)(v1[6] + 4184) = (char *)v1 + 5522;
    *(void *)(v1[6] + 4192) = (char *)v1 + 5526;
    *(void *)(v1[6] + 4200) = (char *)v1 + 5530;
    *(void *)(v1[6] + 4208) = (char *)v1 + 5534;
    *(void *)(v1[6] + 4216) = (char *)v1 + 5538;
    *(void *)(v1[6] + 4224) = (char *)v1 + 5542;
    *(void *)(v1[6] + 4232) = (char *)v1 + 5546;
    *(void *)(v1[6] + 4240) = (char *)v1 + 5550;
    *(void *)(v1[6] + 4248) = (char *)v1 + 5554;
    *(void *)(v1[6] + 4256) = (char *)v1 + 5558;
    *(void *)(v1[6] + 4264) = (char *)v1 + 5562;
    *(void *)(v1[6] + 4272) = (char *)v1 + 5566;
    *(void *)(v1[6] + 4280) = (char *)v1 + 5570;
    *(void *)(v1[6] + 4288) = (char *)v1 + 5574;
    *(void *)(v1[6] + 4296) = (char *)v1 + 5578;
    *(void *)(v1[6] + 4304) = (char *)v1 + 5582;
    *(void *)(v1[6] + 4312) = (char *)v1 + 5586;
    *(void *)(v1[6] + 4320) = (char *)v1 + 5590;
    *(void *)(v1[6] + 4328) = (char *)v1 + 5594;
    *(void *)(v1[6] + 4336) = (char *)v1 + 5598;
    *(void *)(v1[6] + 4344) = (char *)v1 + 5602;
    *(void *)(v1[6] + 4352) = (char *)v1 + 5606;
    *(void *)(v1[6] + 4360) = (char *)v1 + 5610;
    *(void *)(v1[6] + 4368) = (char *)v1 + 5614;
    *(void *)(v1[6] + 4376) = (char *)v1 + 5618;
    *(void *)(v1[6] + 4384) = (char *)v1 + 5622;
    *(void *)(v1[6] + 4392) = (char *)v1 + 5626;
    *(void *)(v1[6] + 4400) = (char *)v1 + 5630;
    *(void *)(v1[6] + 4408) = (char *)v1 + 5634;
    *(void *)(v1[6] + 4416) = (char *)v1 + 5638;
    *(void *)(v1[6] + 4424) = (char *)v1 + 5642;
    *(void *)(v1[6] + 4432) = (char *)v1 + 5646;
    *(void *)(v1[6] + 4440) = (char *)v1 + 5650;
    *(void *)(v1[6] + 4448) = (char *)v1 + 5654;
    *(void *)(v1[6] + 4456) = (char *)v1 + 5658;
    *(void *)(v1[6] + 4464) = (char *)v1 + 5662;
    *(void *)(v1[6] + 4472) = (char *)v1 + 5666;
    *(void *)(v1[6] + 4480) = (char *)v1 + 5670;
    *(void *)(v1[6] + 4488) = (char *)v1 + 5674;
    *(void *)(v1[6] + 4496) = (char *)v1 + 5678;
    *(void *)(v1[6] + 4504) = (char *)v1 + 5682;
    *(void *)(v1[6] + 4512) = (char *)v1 + 5686;
    *(void *)(v1[6] + 4520) = (char *)v1 + 5690;
    *(void *)(v1[6] + 4528) = (char *)v1 + 5694;
    *(void *)(v1[6] + 4536) = (char *)v1 + 5698;
    *(void *)(v1[6] + 4544) = (char *)v1 + 5702;
    *(void *)(v1[6] + 4552) = (char *)v1 + 5706;
    *(void *)(v1[6] + 4560) = (char *)v1 + 5710;
    *(void *)(v1[6] + 4568) = (char *)v1 + 5714;
    *(void *)(v1[6] + 4576) = (char *)v1 + 5718;
    *(void *)(v1[6] + 4584) = (char *)v1 + 5722;
    *(void *)(v1[6] + 4592) = (char *)v1 + 5726;
    *(void *)(v1[6] + 4600) = (char *)v1 + 5730;
    *(void *)(v1[6] + 4608) = (char *)v1 + 5734;
    *(void *)(v1[6] + 4616) = (char *)v1 + 5738;
    *(void *)(v1[6] + 4624) = (char *)v1 + 5922;
    *(void *)(v1[6] + 4632) = (char *)v1 + 5926;
    *(void *)(v1[6] + 4640) = (char *)v1 + 5930;
    *(void *)(v1[6] + 4648) = (char *)v1 + 5934;
    *(void *)(v1[6] + 4656) = (char *)v1 + 5938;
    *(void *)(v1[6] + 4664) = (char *)v1 + 5942;
    *(void *)(v1[6] + 4672) = (char *)v1 + 5946;
    *(void *)(v1[6] + 4680) = (char *)v1 + 5950;
    *(void *)(v1[6] + 4688) = (char *)v1 + 5954;
    *(void *)(v1[6] + 4696) = (char *)v1 + 5958;
    *(void *)(v1[6] + 4704) = (char *)v1 + 5962;
    *(void *)(v1[6] + 4712) = (char *)v1 + 5966;
    *(void *)(v1[6] + 4720) = (char *)v1 + 5970;
    *(void *)(v1[6] + 4728) = (char *)v1 + 5974;
    *(void *)(v1[6] + 4736) = (char *)v1 + 6010;
    *(void *)(v1[6] + 4744) = (char *)v1 + 634;
    *(void *)(v1[6] + 4752) = (char *)v1 + 722;
    *(void *)(v1[6] + 4760) = (char *)v1 + 726;
    *(void *)(v1[6] + 4768) = (char *)v1 + 730;
    *(void *)(v1[6] + 4776) = (char *)v1 + 734;
    *(void *)(v1[6] + 4784) = (char *)v1 + 738;
    *(void *)(v1[6] + 4792) = (char *)v1 + 742;
    *(void *)(v1[6] + 4800) = (char *)v1 + 746;
    *(void *)(v1[6] + 4808) = (char *)v1 + 750;
    *(void *)(v1[6] + 4816) = (char *)v1 + 754;
    *(void *)(v1[6] + 4824) = (char *)v1 + 758;
    *(void *)(v1[6] + 4832) = (char *)v1 + 762;
    *(void *)(v1[6] + 4840) = (char *)v1 + 766;
    *(void *)(v1[6] + 4848) = (char *)v1 + 930;
    *(void *)(v1[6] + 4856) = (char *)v1 + 934;
    *(void *)(v1[6] + 4864) = (char *)v1 + 938;
    *(void *)(v1[6] + 4872) = (char *)v1 + 942;
    *(void *)(v1[6] + 4880) = (char *)v1 + 946;
    *(void *)(v1[6] + 4888) = (char *)v1 + 950;
    *(void *)(v1[6] + 4896) = (char *)v1 + 954;
    *(void *)(v1[6] + 4904) = (char *)v1 + 958;
    *(void *)(v1[6] + 4912) = (char *)v1 + 962;
    *(void *)(v1[6] + 4920) = (char *)v1 + 966;
    *(void *)(v1[6] + 4928) = (char *)v1 + 970;
    *(void *)(v1[6] + 4936) = (char *)v1 + 974;
    *(void *)(v1[6] + 4944) = (char *)v1 + 978;
    *(void *)(v1[6] + 4952) = (char *)v1 + 982;
    *(void *)(v1[6] + 4960) = (char *)v1 + 986;
    *(void *)(v1[6] + 4968) = (char *)v1 + 990;
    *(void *)(v1[6] + 4976) = (char *)v1 + 994;
    *(void *)(v1[6] + 4984) = (char *)v1 + 998;
    *(void *)(v1[6] + 4992) = (char *)v1 + 1002;
    *(void *)(v1[6] + 5000) = (char *)v1 + 1006;
    *(void *)(v1[6] + 5008) = (char *)v1 + 1010;
    *(void *)(v1[6] + 5016) = (char *)v1 + 1014;
    *(void *)(v1[6] + 5024) = (char *)v1 + 1018;
    *(void *)(v1[6] + 5032) = (char *)v1 + 1022;
    *(void *)(v1[6] + 5040) = (char *)v1 + 1026;
    *(void *)(v1[6] + 5048) = (char *)v1 + 1030;
    *(void *)(v1[6] + 5056) = (char *)v1 + 1130;
    *(void *)(v1[6] + 5064) = (char *)v1 + 1186;
    *(void *)(v1[6] + 5072) = (char *)v1 + 1190;
    *(void *)(v1[6] + 5080) = (char *)v1 + 1210;
    *(void *)(v1[6] + 5088) = (char *)v1 + 1214;
    *(void *)(v1[6] + 5096) = (char *)v1 + 1218;
    *(void *)(v1[6] + 5104) = (char *)v1 + 1930;
    *(void *)(v1[6] + 5112) = (char *)v1 + 1934;
    *(void *)(v1[6] + 5120) = (char *)v1 + 1938;
    *(void *)(v1[6] + 5128) = (char *)v1 + 1942;
    *(void *)(v1[6] + 5136) = (char *)v1 + 1946;
    *(void *)(v1[6] + 5144) = (char *)v1 + 1950;
    *(void *)(v1[6] + 5152) = (char *)v1 + 1954;
    *(void *)(v1[6] + 5160) = (char *)v1 + 1958;
    *(void *)(v1[6] + 5168) = (char *)v1 + 1962;
    *(void *)(v1[6] + 5176) = (char *)v1 + 1966;
    *(void *)(v1[6] + 5184) = (char *)v1 + 1970;
    *(void *)(v1[6] + 5192) = (char *)v1 + 1974;
    *(void *)(v1[6] + 5200) = (char *)v1 + 1978;
    *(void *)(v1[6] + 5208) = (char *)v1 + 1982;
    *(void *)(v1[6] + 5216) = (char *)v1 + 1986;
    *(void *)(v1[6] + 5224) = (char *)v1 + 1990;
    *(void *)(v1[6] + 5232) = (char *)v1 + 1994;
    *(void *)(v1[6] + 5240) = (char *)v1 + 1998;
    *(void *)(v1[6] + 5248) = (char *)v1 + 2002;
    *(void *)(v1[6] + 5256) = (char *)v1 + 2006;
    *(void *)(v1[6] + 5264) = (char *)v1 + 2010;
    *(void *)(v1[6] + 5272) = (char *)v1 + 2014;
    *(void *)(v1[6] + 5280) = (char *)v1 + 2018;
    *(void *)(v1[6] + 5288) = (char *)v1 + 2022;
    *(void *)(v1[6] + 5296) = (char *)v1 + 2026;
    *(void *)(v1[6] + 5304) = (char *)v1 + 2030;
    *(void *)(v1[6] + 5312) = (char *)v1 + 2034;
    *(void *)(v1[6] + 5320) = (char *)v1 + 2038;
    *(void *)(v1[6] + 5328) = (char *)v1 + 2042;
    *(void *)(v1[6] + 5336) = (char *)v1 + 2046;
    *(void *)(v1[6] + 5344) = (char *)v1 + 2050;
    *(void *)(v1[6] + 5352) = (char *)v1 + 2054;
    *(void *)(v1[6] + 5360) = (char *)v1 + 2058;
    *(void *)(v1[6] + 5368) = (char *)v1 + 2062;
    *(void *)(v1[6] + 5376) = (char *)v1 + 2066;
    *(void *)(v1[6] + 5384) = (char *)v1 + 2070;
    *(void *)(v1[6] + 5392) = (char *)v1 + 2074;
    *(void *)(v1[6] + 5400) = (char *)v1 + 2078;
    *(void *)(v1[6] + 5408) = (char *)v1 + 2082;
    *(void *)(v1[6] + 5416) = (char *)v1 + 2086;
    *(void *)(v1[6] + 5424) = (char *)v1 + 2090;
    *(void *)(v1[6] + 5432) = (char *)v1 + 2094;
    *(void *)(v1[6] + 5440) = (char *)v1 + 2274;
    *(void *)(v1[6] + 5448) = (char *)v1 + 2278;
    *(void *)(v1[6] + 5456) = (char *)v1 + 2282;
    *(void *)(v1[6] + 5464) = (char *)v1 + 2286;
    *(void *)(v1[6] + 5472) = (char *)v1 + 2290;
    *(void *)(v1[6] + 5480) = (char *)v1 + 2346;
    *(void *)(v1[6] + 5488) = (char *)v1 + 2350;
    *(void *)(v1[6] + 5496) = (char *)v1 + 2354;
    *(void *)(v1[6] + 5504) = (char *)v1 + 2386;
    *(void *)(v1[6] + 5512) = (char *)v1 + 2390;
    *(void *)(v1[6] + 5520) = (char *)v1 + 2394;
    *(void *)(v1[6] + 5528) = (char *)v1 + 2398;
    *(void *)(v1[6] + 5536) = (char *)v1 + 2402;
    *(void *)(v1[6] + 5544) = (char *)v1 + 2406;
    *(void *)(v1[6] + 5552) = (char *)v1 + 2410;
    *(void *)(v1[6] + 5560) = (char *)v1 + 2414;
    *(void *)(v1[6] + 5568) = (char *)v1 + 2418;
    *(void *)(v1[6] + 5576) = (char *)v1 + 2422;
    *(void *)(v1[6] + 5584) = (char *)v1 + 2426;
    *(void *)(v1[6] + 5592) = (char *)v1 + 2430;
    *(void *)(v1[6] + 5600) = (char *)v1 + 2434;
    *(void *)(v1[6] + 5608) = (char *)v1 + 2438;
    *(void *)(v1[6] + 5616) = (char *)v1 + 2442;
    *(void *)(v1[6] + 5624) = (char *)v1 + 2446;
    *(void *)(v1[6] + 5632) = (char *)v1 + 2514;
    *(void *)(v1[6] + 5640) = (char *)v1 + 2538;
    *(void *)(v1[6] + 5648) = (char *)v1 + 2542;
    *(void *)(v1[6] + 5656) = (char *)v1 + 2546;
    *(void *)(v1[6] + 5664) = (char *)v1 + 2550;
    *(void *)(v1[6] + 5672) = (char *)v1 + 2554;
    *(void *)(v1[6] + 5680) = (char *)v1 + 2558;
    *(void *)(v1[6] + 5688) = (char *)v1 + 2562;
    *(void *)(v1[6] + 5696) = (char *)v1 + 2566;
    *(void *)(v1[6] + 5704) = (char *)v1 + 2570;
    *(void *)(v1[6] + 5712) = (char *)v1 + 2574;
    *(void *)(v1[6] + 5720) = (char *)v1 + 2578;
    *(void *)(v1[6] + 5728) = (char *)v1 + 2582;
    *(void *)(v1[6] + 5736) = (char *)v1 + 2586;
    *(void *)(v1[6] + 5744) = (char *)v1 + 2590;
    *(void *)(v1[6] + 5752) = (char *)v1 + 2594;
    *(void *)(v1[6] + 5760) = (char *)v1 + 2598;
    *(void *)(v1[6] + 5768) = (char *)v1 + 2602;
    *(void *)(v1[6] + 5776) = (char *)v1 + 2606;
    *(void *)(v1[6] + 5784) = (char *)v1 + 2610;
    *(void *)(v1[6] + 5792) = (char *)v1 + 2614;
    *(void *)(v1[6] + 5800) = (char *)v1 + 2618;
    *(void *)(v1[6] + 5808) = (char *)v1 + 2622;
    *(void *)(v1[6] + 5816) = (char *)v1 + 2626;
    *(void *)(v1[6] + 5824) = (char *)v1 + 2630;
    *(void *)(v1[6] + 5832) = (char *)v1 + 2634;
    *(void *)(v1[6] + 5840) = (char *)v1 + 2638;
    *(void *)(v1[6] + 5848) = (char *)v1 + 2642;
    *(void *)(v1[6] + 5856) = (char *)v1 + 2646;
    *(void *)(v1[6] + 5864) = (char *)v1 + 2650;
    *(void *)(v1[6] + 5872) = (char *)v1 + 2654;
    *(void *)(v1[6] + 5880) = (char *)v1 + 2658;
    *(void *)(v1[6] + 5888) = (char *)v1 + 2662;
    *(void *)(v1[6] + 5896) = (char *)v1 + 2666;
    *(void *)(v1[6] + 5904) = (char *)v1 + 2670;
    *(void *)(v1[6] + 5912) = (char *)v1 + 2674;
    *(void *)(v1[6] + 5920) = (char *)v1 + 2678;
    *(void *)(v1[6] + 5928) = (char *)v1 + 2682;
    *(void *)(v1[6] + 5936) = (char *)v1 + 2686;
    *(void *)(v1[6] + 5944) = (char *)v1 + 2690;
    *(void *)(v1[6] + 5952) = (char *)v1 + 2694;
    *(void *)(v1[6] + 5960) = (char *)v1 + 2698;
    *(void *)(v1[6] + 5968) = (char *)v1 + 2702;
    *(void *)(v1[6] + 5976) = (char *)v1 + 2706;
    *(void *)(v1[6] + 5984) = (char *)v1 + 2710;
    *(void *)(v1[6] + 5992) = (char *)v1 + 2714;
    *(void *)(v1[6] + 6000) = (char *)v1 + 2718;
    *(void *)(v1[6] + 6008) = (char *)v1 + 2722;
    *(void *)(v1[6] + 6016) = (char *)v1 + 2726;
    *(void *)(v1[6] + 6024) = (char *)v1 + 2730;
    *(void *)(v1[6] + 6032) = (char *)v1 + 2734;
    *(void *)(v1[6] + 6040) = (char *)v1 + 2738;
    *(void *)(v1[6] + 6048) = (char *)v1 + 2742;
    *(void *)(v1[6] + 6056) = (char *)v1 + 2746;
    *(void *)(v1[6] + 6064) = (char *)v1 + 2750;
    *(void *)(v1[6] + 6072) = (char *)v1 + 2754;
    *(void *)(v1[6] + 6080) = (char *)v1 + 2758;
    *(void *)(v1[6] + 6088) = (char *)v1 + 2762;
    *(void *)(v1[6] + 6096) = (char *)v1 + 2766;
    *(void *)(v1[6] + 6104) = (char *)v1 + 2770;
    *(void *)(v1[6] + 6112) = (char *)v1 + 2774;
    *(void *)(v1[6] + 6120) = (char *)v1 + 2778;
    *(void *)(v1[6] + 6128) = (char *)v1 + 2782;
    *(void *)(v1[6] + 6136) = (char *)v1 + 2786;
    *(void *)(v1[6] + 6144) = (char *)v1 + 2790;
    *(void *)(v1[6] + 6152) = (char *)v1 + 2794;
    *(void *)(v1[6] + 6160) = (char *)v1 + 2798;
    *(void *)(v1[6] + 6168) = (char *)v1 + 2802;
    *(void *)(v1[6] + 6176) = (char *)v1 + 2806;
    *(void *)(v1[6] + 6184) = (char *)v1 + 2810;
    *(void *)(v1[6] + 6192) = (char *)v1 + 2814;
    *(void *)(v1[6] + 6200) = (char *)v1 + 2818;
    *(void *)(v1[6] + 6208) = (char *)v1 + 2822;
    *(void *)(v1[6] + 6216) = (char *)v1 + 2826;
    *(void *)(v1[6] + 6224) = (char *)v1 + 2830;
    *(void *)(v1[6] + 6232) = (char *)v1 + 2834;
    *(void *)(v1[6] + 6240) = (char *)v1 + 2838;
    *(void *)(v1[6] + 6248) = (char *)v1 + 2842;
    *(void *)(v1[6] + 6256) = (char *)v1 + 2846;
    *(void *)(v1[6] + 6264) = (char *)v1 + 2850;
    *(void *)(v1[6] + 6272) = (char *)v1 + 2854;
    *(void *)(v1[6] + 6280) = (char *)v1 + 2858;
    *(void *)(v1[6] + 6288) = (char *)v1 + 2862;
    *(void *)(v1[6] + 6296) = (char *)v1 + 2866;
    *(void *)(v1[6] + 6304) = (char *)v1 + 2870;
    *(void *)(v1[6] + 6312) = (char *)v1 + 2874;
    *(void *)(v1[6] + 6320) = (char *)v1 + 2878;
    *(void *)(v1[6] + 6328) = (char *)v1 + 2882;
    *(void *)(v1[6] + 6336) = (char *)v1 + 2886;
    *(void *)(v1[6] + 6344) = (char *)v1 + 2890;
    *(void *)(v1[6] + 6352) = (char *)v1 + 2894;
    *(void *)(v1[6] + 6360) = (char *)v1 + 2898;
    *(void *)(v1[6] + 6368) = (char *)v1 + 2902;
    *(void *)(v1[6] + 6376) = (char *)v1 + 2906;
    *(void *)(v1[6] + 6384) = (char *)v1 + 2910;
    *(void *)(v1[6] + 6392) = (char *)v1 + 2914;
    *(void *)(v1[6] + 6400) = (char *)v1 + 2918;
    *(void *)(v1[6] + 6408) = (char *)v1 + 2922;
    *(void *)(v1[6] + 6416) = (char *)v1 + 2926;
    *(void *)(v1[6] + 6424) = (char *)v1 + 2930;
    *(void *)(v1[6] + 6432) = (char *)v1 + 2934;
    *(void *)(v1[6] + 6440) = (char *)v1 + 2938;
    *(void *)(v1[6] + 6448) = (char *)v1 + 2942;
    *(void *)(v1[6] + 6456) = (char *)v1 + 2946;
    *(void *)(v1[6] + 6464) = (char *)v1 + 2950;
    *(void *)(v1[6] + 6472) = (char *)v1 + 2954;
    *(void *)(v1[6] + 6480) = (char *)v1 + 2958;
    *(void *)(v1[6] + 6488) = (char *)v1 + 2962;
    *(void *)(v1[6] + 6496) = (char *)v1 + 2966;
    *(void *)(v1[6] + 6504) = (char *)v1 + 2970;
    *(void *)(v1[6] + 6512) = (char *)v1 + 2974;
    *(void *)(v1[6] + 6520) = (char *)v1 + 2978;
    *(void *)(v1[6] + 6528) = (char *)v1 + 2982;
    *(void *)(v1[6] + 6536) = (char *)v1 + 2986;
    *(void *)(v1[6] + 6544) = (char *)v1 + 2990;
    *(void *)(v1[6] + 6552) = (char *)v1 + 2994;
    *(void *)(v1[6] + 6560) = (char *)v1 + 2998;
    *(void *)(v1[6] + 6568) = (char *)v1 + 3002;
    *(void *)(v1[6] + 6576) = (char *)v1 + 3006;
    *(void *)(v1[6] + 6584) = (char *)v1 + 3010;
    *(void *)(v1[6] + 6592) = (char *)v1 + 3014;
    *(void *)(v1[6] + 6600) = (char *)v1 + 3018;
    *(void *)(v1[6] + 6608) = (char *)v1 + 3022;
    *(void *)(v1[6] + 6616) = (char *)v1 + 3026;
    *(void *)(v1[6] + 6624) = (char *)v1 + 3030;
    *(void *)(v1[6] + 6632) = (char *)v1 + 3034;
    *(void *)(v1[6] + 6640) = (char *)v1 + 3038;
    *(void *)(v1[6] + 6648) = (char *)v1 + 3042;
    *(void *)(v1[6] + 6656) = (char *)v1 + 3046;
    *(void *)(v1[6] + 6664) = (char *)v1 + 3050;
    *(void *)(v1[6] + 6672) = (char *)v1 + 3054;
    *(void *)(v1[6] + 6680) = (char *)v1 + 3058;
    *(void *)(v1[6] + 6688) = (char *)v1 + 3062;
    *(void *)(v1[6] + 6696) = (char *)v1 + 3066;
    *(void *)(v1[6] + 6704) = (char *)v1 + 3070;
    *(void *)(v1[6] + 6712) = (char *)v1 + 3074;
    *(void *)(v1[6] + 6720) = (char *)v1 + 3078;
    *(void *)(v1[6] + 6728) = (char *)v1 + 3082;
    *(void *)(v1[6] + 6736) = (char *)v1 + 3186;
    *(void *)(v1[6] + 6744) = (char *)v1 + 3190;
    *(void *)(v1[6] + 6752) = (char *)v1 + 3194;
    *(void *)(v1[6] + 6760) = (char *)v1 + 3198;
    *(void *)(v1[6] + 6768) = (char *)v1 + 3202;
    *(void *)(v1[6] + 6776) = (char *)v1 + 3206;
    *(void *)(v1[6] + 6784) = (char *)v1 + 3210;
    *(void *)(v1[6] + 6792) = (char *)v1 + 3214;
    *(void *)(v1[6] + 6800) = (char *)v1 + 3218;
    *(void *)(v1[6] + 6808) = (char *)v1 + 3222;
    *(void *)(v1[6] + 6816) = (char *)v1 + 3226;
    *(void *)(v1[6] + 6824) = (char *)v1 + 3230;
    *(void *)(v1[6] + 6832) = (char *)v1 + 3234;
    *(void *)(v1[6] + 6840) = (char *)v1 + 3238;
    *(void *)(v1[6] + 6848) = (char *)v1 + 3242;
    *(void *)(v1[6] + 6856) = (char *)v1 + 3246;
    *(void *)(v1[6] + 6864) = (char *)v1 + 3250;
    *(void *)(v1[6] + 6872) = (char *)v1 + 3254;
    *(void *)(v1[6] + 6880) = (char *)v1 + 3258;
    *(void *)(v1[6] + 6888) = (char *)v1 + 3262;
    *(void *)(v1[6] + 6896) = (char *)v1 + 3266;
    *(void *)(v1[6] + 6904) = (char *)v1 + 3270;
    *(void *)(v1[6] + 6912) = (char *)v1 + 3274;
    *(void *)(v1[6] + 6920) = (char *)v1 + 3278;
    *(void *)(v1[6] + 6928) = (char *)v1 + 3282;
    *(void *)(v1[6] + 6936) = (char *)v1 + 3286;
    *(void *)(v1[6] + 6944) = (char *)v1 + 3290;
    *(void *)(v1[6] + 6952) = (char *)v1 + 3294;
    *(void *)(v1[6] + 6960) = (char *)v1 + 3298;
    *(void *)(v1[6] + 6968) = (char *)v1 + 3302;
    *(void *)(v1[6] + 6976) = (char *)v1 + 3306;
    *(void *)(v1[6] + 6984) = (char *)v1 + 3310;
    *(void *)(v1[6] + 6992) = (char *)v1 + 3314;
    *(void *)(v1[6] + 7000) = (char *)v1 + 3318;
    *(void *)(v1[6] + 7008) = (char *)v1 + 3322;
    *(void *)(v1[6] + 7016) = (char *)v1 + 3326;
    *(void *)(v1[6] + 7024) = (char *)v1 + 3330;
    *(void *)(v1[6] + 7032) = (char *)v1 + 3334;
    *(void *)(v1[6] + 7040) = (char *)v1 + 3338;
    *(void *)(v1[6] + 7048) = (char *)v1 + 3342;
    *(void *)(v1[6] + 7056) = (char *)v1 + 3362;
    *(void *)(v1[6] + 7064) = (char *)v1 + 3366;
    *(void *)(v1[6] + 7072) = (char *)v1 + 3370;
    *(void *)(v1[6] + 7080) = (char *)v1 + 3410;
    *(void *)(v1[6] + 7088) = (char *)v1 + 3414;
    *(void *)(v1[6] + 7096) = (char *)v1 + 3418;
    *(void *)(v1[6] + 7104) = (char *)v1 + 3422;
    *(void *)(v1[6] + 7112) = (char *)v1 + 3426;
    *(void *)(v1[6] + 7120) = (char *)v1 + 3430;
    *(void *)(v1[6] + 7128) = (char *)v1 + 3434;
    *(void *)(v1[6] + 7136) = (char *)v1 + 3438;
    *(void *)(v1[6] + 7144) = (char *)v1 + 3442;
    *(void *)(v1[6] + 7152) = (char *)v1 + 3446;
    *(void *)(v1[6] + 7160) = (char *)v1 + 3450;
    *(void *)(v1[6] + 7168) = (char *)v1 + 3454;
    *(void *)(v1[6] + 7176) = (char *)v1 + 3458;
    *(void *)(v1[6] + 7184) = (char *)v1 + 3462;
    *(void *)(v1[6] + 7192) = (char *)v1 + 3466;
    *(void *)(v1[6] + 7200) = (char *)v1 + 3470;
    *(void *)(v1[6] + 7208) = (char *)v1 + 3474;
    *(void *)(v1[6] + 7216) = (char *)v1 + 3478;
    *(void *)(v1[6] + 7224) = (char *)v1 + 3482;
    *(void *)(v1[6] + 7232) = (char *)v1 + 3486;
    *(void *)(v1[6] + 7240) = (char *)v1 + 3490;
    *(void *)(v1[6] + 7248) = (char *)v1 + 3494;
    *(void *)(v1[6] + 7256) = (char *)v1 + 3498;
    *(void *)(v1[6] + 7264) = (char *)v1 + 3502;
    *(void *)(v1[6] + 7272) = (char *)v1 + 3506;
    *(void *)(v1[6] + 7280) = (char *)v1 + 3510;
    *(void *)(v1[6] + 7288) = (char *)v1 + 3514;
    *(void *)(v1[6] + 7296) = (char *)v1 + 3518;
    *(void *)(v1[6] + 7304) = (char *)v1 + 3522;
    *(void *)(v1[6] + 7312) = (char *)v1 + 3526;
    *(void *)(v1[6] + 7320) = (char *)v1 + 3530;
    *(void *)(v1[6] + 7328) = (char *)v1 + 3534;
    *(void *)(v1[6] + 7336) = (char *)v1 + 3538;
    *(void *)(v1[6] + 7344) = (char *)v1 + 3542;
    *(void *)(v1[6] + 7352) = (char *)v1 + 3546;
    *(void *)(v1[6] + 7360) = (char *)v1 + 3550;
    *(void *)(v1[6] + 7368) = (char *)v1 + 3554;
    *(void *)(v1[6] + 7376) = (char *)v1 + 3558;
    *(void *)(v1[6] + 7384) = (char *)v1 + 3562;
    *(void *)(v1[6] + 7392) = (char *)v1 + 3566;
    *(void *)(v1[6] + 7400) = (char *)v1 + 3570;
    *(void *)(v1[6] + 7408) = (char *)v1 + 3574;
    *(void *)(v1[6] + 7416) = (char *)v1 + 3578;
    *(void *)(v1[6] + 7424) = (char *)v1 + 3746;
    *(void *)(v1[6] + 7432) = (char *)v1 + 3778;
    *(void *)(v1[6] + 7440) = (char *)v1 + 3802;
    *(void *)(v1[6] + 7448) = (char *)v1 + 3806;
    *(void *)(v1[6] + 7456) = (char *)v1 + 3810;
    *(void *)(v1[6] + 7464) = (char *)v1 + 3834;
    *(void *)(v1[6] + 7472) = (char *)v1 + 3838;
    *(void *)(v1[6] + 7480) = (char *)v1 + 3842;
    *(void *)(v1[6] + 7488) = (char *)v1 + 3846;
    *(void *)(v1[6] + 7496) = (char *)v1 + 3850;
    *(void *)(v1[6] + 7504) = (char *)v1 + 3874;
    *(void *)(v1[6] + 7512) = (char *)v1 + 3878;
    *(void *)(v1[6] + 7520) = (char *)v1 + 3882;
    *(void *)(v1[6] + 7528) = (char *)v1 + 3886;
    *(void *)(v1[6] + 7536) = (char *)v1 + 3890;
    *(void *)(v1[6] + 7544) = (char *)v1 + 3894;
    *(void *)(v1[6] + 7552) = (char *)v1 + 3898;
    *(void *)(v1[6] + 7560) = (char *)v1 + 3902;
    *(void *)(v1[6] + 7568) = (char *)v1 + 3906;
    *(void *)(v1[6] + 7576) = (char *)v1 + 3910;
    *(void *)(v1[6] + 7584) = (char *)v1 + 4010;
    *(void *)(v1[6] + 7592) = (char *)v1 + 4014;
    *(void *)(v1[6] + 7600) = (char *)v1 + 4034;
    *(void *)(v1[6] + 7608) = (char *)v1 + 4038;
    *(void *)(v1[6] + 7616) = (char *)v1 + 4042;
    *(void *)(v1[6] + 7624) = (char *)v1 + 4046;
    *(void *)(v1[6] + 7632) = (char *)v1 + 4050;
    *(void *)(v1[6] + 7640) = (char *)v1 + 4054;
    *(void *)(v1[6] + 7648) = (char *)v1 + 4218;
    *(void *)(v1[6] + 7656) = (char *)v1 + 4222;
    *(void *)(v1[6] + 7664) = (char *)v1 + 4226;
    *(void *)(v1[6] + 7672) = (char *)v1 + 4230;
    *(void *)(v1[6] + 7680) = (char *)v1 + 4234;
    *(void *)(v1[6] + 7688) = (char *)v1 + 4238;
    *(void *)(v1[6] + 7696) = (char *)v1 + 4242;
    *(void *)(v1[6] + 7704) = (char *)v1 + 4246;
    *(void *)(v1[6] + 7712) = (char *)v1 + 4250;
    *(void *)(v1[6] + 7720) = (char *)v1 + 4254;
    *(void *)(v1[6] + 7728) = (char *)v1 + 4258;
    *(void *)(v1[6] + 7736) = (char *)v1 + 4282;
    *(void *)(v1[6] + 7744) = (char *)v1 + 4286;
    *(void *)(v1[6] + 7752) = (char *)v1 + 4290;
    *(void *)(v1[6] + 7760) = (char *)v1 + 4294;
    *(void *)(v1[6] + 7768) = (char *)v1 + 4298;
    *(void *)(v1[6] + 7776) = (char *)v1 + 4302;
    *(void *)(v1[6] + 7784) = (char *)v1 + 4306;
    *(void *)(v1[6] + 7792) = (char *)v1 + 4310;
    *(void *)(v1[6] + 7800) = (char *)v1 + 4314;
    *(void *)(v1[6] + 7808) = (char *)v1 + 4318;
    *(void *)(v1[6] + 7816) = (char *)v1 + 4322;
    *(void *)(v1[6] + 7824) = (char *)v1 + 4326;
    *(void *)(v1[6] + 7832) = (char *)v1 + 4330;
    *(void *)(v1[6] + 7840) = (char *)v1 + 4334;
    *(void *)(v1[6] + 7848) = (char *)v1 + 4338;
    *(void *)(v1[6] + 7856) = (char *)v1 + 4342;
    *(void *)(v1[6] + 7864) = (char *)v1 + 4346;
    *(void *)(v1[6] + 7872) = (char *)v1 + 4350;
    *(void *)(v1[6] + 7880) = (char *)v1 + 4354;
    *(void *)(v1[6] + 7888) = (char *)v1 + 4358;
    *(void *)(v1[6] + 7896) = (char *)v1 + 4362;
    *(void *)(v1[6] + 7904) = (char *)v1 + 4366;
    *(void *)(v1[6] + 7912) = (char *)v1 + 4370;
    *(void *)(v1[6] + 7920) = (char *)v1 + 4374;
    *(void *)(v1[6] + 7928) = (char *)v1 + 4378;
    *(void *)(v1[6] + 7936) = (char *)v1 + 4382;
    *(void *)(v1[6] + 7944) = (char *)v1 + 4386;
    *(void *)(v1[6] + 7952) = (char *)v1 + 4390;
    *(void *)(v1[6] + 7960) = (char *)v1 + 4394;
    *(void *)(v1[6] + 7968) = (char *)v1 + 4398;
    *(void *)(v1[6] + 7976) = (char *)v1 + 4402;
    *(void *)(v1[6] + 7984) = (char *)v1 + 4406;
    *(void *)(v1[6] + 7992) = (char *)v1 + 4410;
    *(void *)(v1[6] + 8000) = (char *)v1 + 4414;
    *(void *)(v1[6] + 8008) = (char *)v1 + 4418;
    *(void *)(v1[6] + 8016) = (char *)v1 + 4422;
    *(void *)(v1[6] + 8024) = (char *)v1 + 4426;
    *(void *)(v1[6] + 8032) = (char *)v1 + 4430;
    *(void *)(v1[6] + 8040) = (char *)v1 + 4434;
    *(void *)(v1[6] + 8048) = (char *)v1 + 4438;
    *(void *)(v1[6] + 8056) = (char *)v1 + 4442;
    *(void *)(v1[6] + 8064) = (char *)v1 + 4446;
    *(void *)(v1[6] + 8072) = (char *)v1 + 4450;
    *(void *)(v1[6] + 8080) = (char *)v1 + 4454;
    *(void *)(v1[6] + 8088) = (char *)v1 + 4458;
    *(void *)(v1[6] + 8096) = (char *)v1 + 4462;
    *(void *)(v1[6] + 8104) = (char *)v1 + 4466;
    *(void *)(v1[6] + 8112) = (char *)v1 + 4470;
    *(void *)(v1[6] + 8120) = (char *)v1 + 4474;
    *(void *)(v1[6] + 8128) = (char *)v1 + 4478;
    *(void *)(v1[6] + 8136) = (char *)v1 + 4482;
    *(void *)(v1[6] + 8144) = (char *)v1 + 4486;
    *(void *)(v1[6] + 8152) = (char *)v1 + 4490;
    *(void *)(v1[6] + 8160) = (char *)v1 + 4494;
    *(void *)(v1[6] + 8168) = (char *)v1 + 4498;
    *(void *)(v1[6] + 8176) = (char *)v1 + 4502;
    *(void *)(v1[6] + 8184) = (char *)v1 + 4506;
    *(void *)(v1[6] + 0x2000) = (char *)v1 + 4510;
    *(void *)(v1[6] + 8200) = (char *)v1 + 4514;
    *(void *)(v1[6] + 8208) = (char *)v1 + 4518;
    *(void *)(v1[6] + 8216) = (char *)v1 + 4522;
    *(void *)(v1[6] + 8224) = (char *)v1 + 4526;
    *(void *)(v1[6] + 8232) = (char *)v1 + 4530;
    *(void *)(v1[6] + 8240) = (char *)v1 + 4534;
    *(void *)(v1[6] + 8248) = (char *)v1 + 4538;
    *(void *)(v1[6] + 8256) = (char *)v1 + 4542;
    *(void *)(v1[6] + 8264) = (char *)v1 + 4546;
    *(void *)(v1[6] + 8272) = (char *)v1 + 4550;
    *(void *)(v1[6] + 8280) = (char *)v1 + 4554;
    *(void *)(v1[6] + 8288) = (char *)v1 + 4558;
    *(void *)(v1[6] + 8296) = (char *)v1 + 4562;
    *(void *)(v1[6] + 8304) = (char *)v1 + 4566;
    *(void *)(v1[6] + 8312) = (char *)v1 + 4570;
    *(void *)(v1[6] + 8320) = (char *)v1 + 4574;
    *(void *)(v1[6] + 8328) = (char *)v1 + 4578;
    *(void *)(v1[6] + 8336) = (char *)v1 + 4582;
    *(void *)(v1[6] + 8344) = (char *)v1 + 4586;
    *(void *)(v1[6] + 8352) = (char *)v1 + 4590;
    *(void *)(v1[6] + 8360) = (char *)v1 + 4594;
    *(void *)(v1[6] + 8368) = (char *)v1 + 4598;
    *(void *)(v1[6] + 8376) = (char *)v1 + 4602;
    *(void *)(v1[6] + 8384) = (char *)v1 + 4606;
    *(void *)(v1[6] + 8392) = (char *)v1 + 4610;
    *(void *)(v1[6] + 8400) = (char *)v1 + 4614;
    *(void *)(v1[6] + 8408) = (char *)v1 + 4682;
    *(void *)(v1[6] + 8416) = (char *)v1 + 4686;
    *(void *)(v1[6] + 8424) = (char *)v1 + 4690;
    *(void *)(v1[6] + 8432) = (char *)v1 + 4694;
    *(void *)(v1[6] + 8440) = (char *)v1 + 4698;
    *(void *)(v1[6] + 8448) = (char *)v1 + 4702;
    *(void *)(v1[6] + 8456) = (char *)v1 + 4706;
    *(void *)(v1[6] + 8464) = (char *)v1 + 4710;
    *(void *)(v1[6] + 8472) = (char *)v1 + 4714;
    *(void *)(v1[6] + 8480) = (char *)v1 + 4914;
    *(void *)(v1[6] + 8488) = (char *)v1 + 4918;
    *(void *)(v1[6] + 8496) = (char *)v1 + 4970;
    *(void *)(v1[6] + 8504) = (char *)v1 + 4974;
    *(void *)(v1[6] + 8512) = (char *)v1 + 5042;
    *(void *)(v1[6] + 8520) = (char *)v1 + 5066;
    *(void *)(v1[6] + 8528) = (char *)v1 + 5090;
    *(void *)(v1[6] + 8536) = (char *)v1 + 5094;
    *(void *)(v1[6] + 8544) = (char *)v1 + 5098;
    *(void *)(v1[6] + 8552) = (char *)v1 + 5102;
    *(void *)(v1[6] + 8560) = (char *)v1 + 5106;
    *(void *)(v1[6] + 8568) = (char *)v1 + 5110;
    *(void *)(v1[6] + 8576) = (char *)v1 + 5114;
    *(void *)(v1[6] + 8584) = (char *)v1 + 5118;
    *(void *)(v1[6] + 8592) = (char *)v1 + 5122;
    *(void *)(v1[6] + 8600) = (char *)v1 + 5126;
    *(void *)(v1[6] + 8608) = (char *)v1 + 5130;
    *(void *)(v1[6] + 8616) = (char *)v1 + 5134;
    *(void *)(v1[6] + 8624) = (char *)v1 + 5138;
    *(void *)(v1[6] + 8632) = (char *)v1 + 5142;
    *(void *)(v1[6] + 8640) = (char *)v1 + 5146;
    *(void *)(v1[6] + 8648) = (char *)v1 + 5218;
    *(void *)(v1[6] + 8656) = (char *)v1 + 5222;
    *(void *)(v1[6] + 8664) = (char *)v1 + 5322;
    *(void *)(v1[6] + 8672) = (char *)v1 + 5378;
    *(void *)(v1[6] + 8680) = (char *)v1 + 5382;
    *(void *)(v1[6] + 8688) = (char *)v1 + 5386;
    *(void *)(v1[6] + 8696) = (char *)v1 + 5390;
    *(void *)(v1[6] + 8704) = (char *)v1 + 5394;
    *(void *)(v1[6] + 8712) = (char *)v1 + 5398;
    *(void *)(v1[6] + 8720) = (char *)v1 + 5418;
    *(void *)(v1[6] + 8728) = (char *)v1 + 5422;
    *(void *)(v1[6] + 8736) = (char *)v1 + 5426;
    *(void *)(v1[6] + 8744) = (char *)v1 + 5430;
    *(void *)(v1[6] + 8752) = (char *)v1 + 5434;
    *(void *)(v1[6] + 8760) = (char *)v1 + 5438;
    *(void *)(v1[6] + 8768) = (char *)v1 + 5442;
    *(void *)(v1[6] + 8776) = (char *)v1 + 5446;
    *(void *)(v1[6] + 8784) = (char *)v1 + 5450;
    *(void *)(v1[6] + 8792) = (char *)v1 + 5454;
    *(void *)(v1[6] + 8800) = (char *)v1 + 5458;
    *(void *)(v1[6] + 8808) = (char *)v1 + 5462;
    *(void *)(v1[6] + 8816) = (char *)v1 + 5466;
    *(void *)(v1[6] + 8824) = (char *)v1 + 5470;
    *(void *)(v1[6] + 8832) = (char *)v1 + 5474;
    *(void *)(v1[6] + 8840) = (char *)v1 + 5478;
    *(void *)(v1[6] + 8848) = (char *)v1 + 5482;
    *(void *)(v1[6] + 8856) = (char *)v1 + 5486;
    *(void *)(v1[6] + 8864) = (char *)v1 + 5490;
    *(void *)(v1[6] + 8872) = (char *)v1 + 5494;
    *(void *)(v1[6] + 8880) = (char *)v1 + 5498;
    *(void *)(v1[6] + 8888) = (char *)v1 + 5502;
    *(void *)(v1[6] + 8896) = (char *)v1 + 5506;
    *(void *)(v1[6] + 8904) = (char *)v1 + 5510;
    *(void *)(v1[6] + 8912) = (char *)v1 + 5514;
    *(void *)(v1[6] + 8920) = (char *)v1 + 5518;
    *(void *)(v1[6] + 8928) = (char *)v1 + 5522;
    *(void *)(v1[6] + 8936) = (char *)v1 + 5526;
    *(void *)(v1[6] + 8944) = (char *)v1 + 5530;
    *(void *)(v1[6] + 8952) = (char *)v1 + 5534;
    *(void *)(v1[6] + 8960) = (char *)v1 + 5538;
    *(void *)(v1[6] + 8968) = (char *)v1 + 5542;
    *(void *)(v1[6] + 8976) = (char *)v1 + 5546;
    *(void *)(v1[6] + 8984) = (char *)v1 + 5550;
    *(void *)(v1[6] + 8992) = (char *)v1 + 5554;
    *(void *)(v1[6] + 9000) = (char *)v1 + 5558;
    *(void *)(v1[6] + 9008) = (char *)v1 + 5562;
    *(void *)(v1[6] + 9016) = (char *)v1 + 5566;
    *(void *)(v1[6] + 9024) = (char *)v1 + 5570;
    *(void *)(v1[6] + 9032) = (char *)v1 + 5574;
    *(void *)(v1[6] + 9040) = (char *)v1 + 5578;
    *(void *)(v1[6] + 9048) = (char *)v1 + 5582;
    *(void *)(v1[6] + 9056) = (char *)v1 + 5586;
    *(void *)(v1[6] + 9064) = (char *)v1 + 5590;
    *(void *)(v1[6] + 9072) = (char *)v1 + 5594;
    *(void *)(v1[6] + 9080) = (char *)v1 + 5598;
    *(void *)(v1[6] + 9088) = (char *)v1 + 5602;
    *(void *)(v1[6] + 9096) = (char *)v1 + 5606;
    *(void *)(v1[6] + 9104) = (char *)v1 + 5610;
    *(void *)(v1[6] + 9112) = (char *)v1 + 5614;
    *(void *)(v1[6] + 9120) = (char *)v1 + 5618;
    *(void *)(v1[6] + 9128) = (char *)v1 + 5622;
    *(void *)(v1[6] + 9136) = (char *)v1 + 5626;
    *(void *)(v1[6] + 9144) = (char *)v1 + 5630;
    *(void *)(v1[6] + 9152) = (char *)v1 + 5634;
    *(void *)(v1[6] + 9160) = (char *)v1 + 5638;
    *(void *)(v1[6] + 9168) = (char *)v1 + 5642;
    *(void *)(v1[6] + 9176) = (char *)v1 + 5646;
    *(void *)(v1[6] + 9184) = (char *)v1 + 5650;
    *(void *)(v1[6] + 9192) = (char *)v1 + 5654;
    *(void *)(v1[6] + 9200) = (char *)v1 + 5658;
    *(void *)(v1[6] + 9208) = (char *)v1 + 5662;
    *(void *)(v1[6] + 9216) = (char *)v1 + 5666;
    *(void *)(v1[6] + 9224) = (char *)v1 + 5670;
    *(void *)(v1[6] + 9232) = (char *)v1 + 5674;
    *(void *)(v1[6] + 9240) = (char *)v1 + 5678;
    *(void *)(v1[6] + 9248) = (char *)v1 + 5682;
    *(void *)(v1[6] + 9256) = (char *)v1 + 5686;
    *(void *)(v1[6] + 9264) = (char *)v1 + 5690;
    *(void *)(v1[6] + 9272) = (char *)v1 + 5694;
    *(void *)(v1[6] + 9280) = (char *)v1 + 5698;
    *(void *)(v1[6] + 9288) = (char *)v1 + 5702;
    *(void *)(v1[6] + 9296) = (char *)v1 + 5706;
    *(void *)(v1[6] + 9304) = (char *)v1 + 5710;
    *(void *)(v1[6] + 9312) = (char *)v1 + 5714;
    *(void *)(v1[6] + 9320) = (char *)v1 + 5718;
    *(void *)(v1[6] + 9328) = (char *)v1 + 5722;
    *(void *)(v1[6] + 9336) = (char *)v1 + 5726;
    *(void *)(v1[6] + 9344) = (char *)v1 + 5730;
    *(void *)(v1[6] + 9352) = (char *)v1 + 5734;
    *(void *)(v1[6] + 9360) = (char *)v1 + 5738;
    *(void *)(v1[6] + 9368) = (char *)v1 + 5922;
    *(void *)(v1[6] + 9376) = (char *)v1 + 5926;
    *(void *)(v1[6] + 9384) = (char *)v1 + 5930;
    *(void *)(v1[6] + 9392) = (char *)v1 + 5934;
    *(void *)(v1[6] + 9400) = (char *)v1 + 5938;
    *(void *)(v1[6] + 9408) = (char *)v1 + 5942;
    *(void *)(v1[6] + 9416) = (char *)v1 + 5946;
    *(void *)(v1[6] + 9424) = (char *)v1 + 5950;
    *(void *)(v1[6] + 9432) = (char *)v1 + 5954;
    *(void *)(v1[6] + 9440) = (char *)v1 + 5958;
    *(void *)(v1[6] + 9448) = (char *)v1 + 5962;
    *(void *)(v1[6] + 9456) = (char *)v1 + 5966;
    *(void *)(v1[6] + 9464) = (char *)v1 + 5970;
    *(void *)(v1[6] + 9472) = (char *)v1 + 5974;
    *(void *)(v1[6] + 9480) = (char *)v1 + 6010;
    uint64_t v7 = malloc_type_malloc(0x390uLL, 0x80040B8603338uLL);
    v1[7] = v7;
    if (v7)
    {
      *uint64_t v7 = v1 + 130;
      *(void *)(v1[7] + 8) = v1 + 132;
      *(void *)(v1[7] + 16) = v1 + 134;
      *(void *)(v1[7] + 24) = v1 + 136;
      *(void *)(v1[7] + 32) = v1 + 138;
      *(void *)(v1[7] + 40) = v1 + 140;
      *(void *)(v1[7] + 48) = v1 + 220;
      *(void *)(v1[7] + 56) = v1 + 222;
      *(void *)(v1[7] + 64) = v1 + 263;
      *(void *)(v1[7] + 72) = v1 + 265;
      *(void *)(v1[7] + 80) = v1 + 267;
      *(void *)(v1[7] + 88) = v1 + 269;
      *(void *)(v1[7] + 96) = v1 + 271;
      *(void *)(v1[7] + 104) = v1 + 273;
      *(void *)(v1[7] + 112) = v1 + 275;
      *(void *)(v1[7] + 120) = v1 + 277;
      *(void *)(v1[7] + 128) = v1 + 279;
      *(void *)(v1[7] + 136) = v1 + 281;
      *(void *)(v1[7] + 144) = v1 + 283;
      *(void *)(v1[7] + 152) = v1 + 423;
      *(void *)(v1[7] + 160) = v1 + 425;
      *(void *)(v1[7] + 168) = v1 + 467;
      *(void *)(v1[7] + 176) = v1 + 503;
      *(void *)(v1[7] + 184) = v1 + 508;
      *(void *)(v1[7] + 192) = v1 + 510;
      *(void *)(v1[7] + 200) = v1 + 512;
      *(void *)(v1[7] + 208) = v1 + 514;
      *(void *)(v1[7] + 216) = v1 + 516;
      *(void *)(v1[7] + 224) = v1 + 518;
      *(void *)(v1[7] + 232) = v1 + 520;
      *(void *)(v1[7] + 240) = v1 + 522;
      *(void *)(v1[7] + 248) = v1 + 524;
      *(void *)(v1[7] + 256) = v1 + 526;
      *(void *)(v1[7] + 264) = v1 + 534;
      *(void *)(v1[7] + 272) = v1 + 580;
      *(void *)(v1[7] + 280) = v1 + 582;
      *(void *)(v1[7] + 288) = v1 + 618;
      *(void *)(v1[7] + 296) = v1 + 620;
      *(void *)(v1[7] + 304) = v1 + 632;
      *(void *)(v1[7] + 312) = v1 + 645;
      *(void *)(v1[7] + 320) = v1 + 647;
      *(void *)(v1[7] + 328) = v1 + 649;
      *(void *)(v1[7] + 336) = v1 + 667;
      *(void *)(v1[7] + 344) = v1 + 669;
      *(void *)(v1[7] + 352) = v1 + 671;
      *(void *)(v1[7] + 360) = v1 + 676;
      *(void *)(v1[7] + 368) = v1 + 719;
      *(void *)(v1[7] + 376) = v1 + 721;
      *(void *)(v1[7] + 384) = v1 + 723;
      *(void *)(v1[7] + 392) = v1 + 725;
      *(void *)(v1[7] + 400) = v1 + 727;
      *(void *)(v1[7] + 408) = v1 + 729;
      *(void *)(v1[7] + 416) = v1 + 731;
      *(void *)(v1[7] + 424) = v1 + 733;
      *(void *)(v1[7] + 432) = v1 + 735;
      *(void *)(v1[7] + 440) = v1 + 737;
      *(void *)(v1[7] + 448) = v1 + 739;
      *(void *)(v1[7] + 456) = v1 + 130;
      *(void *)(v1[7] + 464) = v1 + 132;
      *(void *)(v1[7] + 472) = v1 + 134;
      *(void *)(v1[7] + 480) = v1 + 136;
      *(void *)(v1[7] + 488) = v1 + 138;
      *(void *)(v1[7] + 496) = v1 + 140;
      *(void *)(v1[7] + 504) = v1 + 220;
      *(void *)(v1[7] + 512) = v1 + 222;
      *(void *)(v1[7] + 520) = v1 + 263;
      *(void *)(v1[7] + 528) = v1 + 265;
      *(void *)(v1[7] + 536) = v1 + 267;
      *(void *)(v1[7] + 544) = v1 + 269;
      *(void *)(v1[7] + 552) = v1 + 271;
      *(void *)(v1[7] + 560) = v1 + 273;
      *(void *)(v1[7] + 568) = v1 + 275;
      *(void *)(v1[7] + 576) = v1 + 277;
      *(void *)(v1[7] + 584) = v1 + 279;
      *(void *)(v1[7] + 592) = v1 + 281;
      *(void *)(v1[7] + 600) = v1 + 283;
      *(void *)(v1[7] + 608) = v1 + 423;
      *(void *)(v1[7] + 616) = v1 + 425;
      *(void *)(v1[7] + 624) = v1 + 467;
      *(void *)(v1[7] + 632) = v1 + 503;
      *(void *)(v1[7] + 640) = v1 + 508;
      *(void *)(v1[7] + 648) = v1 + 510;
      *(void *)(v1[7] + 656) = v1 + 512;
      *(void *)(v1[7] + 664) = v1 + 514;
      *(void *)(v1[7] + 672) = v1 + 516;
      *(void *)(v1[7] + 680) = v1 + 518;
      *(void *)(v1[7] + 688) = v1 + 520;
      *(void *)(v1[7] + 696) = v1 + 522;
      *(void *)(v1[7] + 704) = v1 + 524;
      *(void *)(v1[7] + 712) = v1 + 526;
      *(void *)(v1[7] + 720) = v1 + 534;
      *(void *)(v1[7] + 728) = v1 + 580;
      *(void *)(v1[7] + 736) = v1 + 582;
      *(void *)(v1[7] + 744) = v1 + 618;
      *(void *)(v1[7] + 752) = v1 + 620;
      *(void *)(v1[7] + 760) = v1 + 632;
      *(void *)(v1[7] + 768) = v1 + 645;
      *(void *)(v1[7] + 776) = v1 + 647;
      *(void *)(v1[7] + 784) = v1 + 649;
      *(void *)(v1[7] + 792) = v1 + 667;
      *(void *)(v1[7] + 800) = v1 + 669;
      *(void *)(v1[7] + 808) = v1 + 671;
      *(void *)(v1[7] + 816) = v1 + 676;
      *(void *)(v1[7] + 824) = v1 + 719;
      *(void *)(v1[7] + 832) = v1 + 721;
      *(void *)(v1[7] + 840) = v1 + 723;
      *(void *)(v1[7] + 848) = v1 + 725;
      *(void *)(v1[7] + 856) = v1 + 727;
      *(void *)(v1[7] + 864) = v1 + 729;
      *(void *)(v1[7] + 872) = v1 + 731;
      *(void *)(v1[7] + 880) = v1 + 733;
      *(void *)(v1[7] + 888) = v1 + 735;
      *(void *)(v1[7] + 896) = v1 + 737;
      *(void *)(v1[7] + 904) = v1 + 739;
      link_new((uint64_t)v1);
      set_dict_new((uint64_t)v1);
      act_dict_new((uint64_t)v1);
      runtime_new((uint64_t)v1);
    }
    else
    {
LABEL_8:
      delta_delete((uint64_t)v1);
      return 0;
    }
  }
  return v1;
}

void delta_delete(uint64_t a1)
{
  if (a1)
  {
    link_delete((void *)a1);
    set_dict_delete(a1);
    act_dict_delete(a1);
    runtime_delete(a1);
    uint64_t v2 = *(void **)(a1 + 24);
    if (v2)
    {
      free(v2);
      *(void *)(a1 + 24) = 0;
    }
    unsigned int v3 = *(void **)(a1 + 32);
    if (v3)
    {
      free(v3);
      *(void *)(a1 + 32) = 0;
    }
    __int16 v4 = *(void **)(a1 + 48);
    if (v4)
    {
      free(v4);
      *(void *)(a1 + 48) = 0;
    }
    uint64_t v5 = *(void **)(a1 + 56);
    if (v5)
    {
      free(v5);
      *(void *)(a1 + 56) = 0;
    }
    free(*(void **)(a1 + 40));
    free((void *)a1);
  }
}

void *OUTLINED_FUNCTION_0_47(size_t a1)
{
  return malloc_type_malloc(a1, 0x10040436913F5uLL);
}

double viasizes()
{
  qword_268C68C88 = 0x400000004;
  *(void *)&double result = 0x700000007;
  qword_268C68DA8 = 0x700000007;
  return result;
}

void link_new(uint64_t a1)
{
  *(unsigned char *)(a1 + 232) = 49;
  uint64_t v2 = OUTLINED_FUNCTION_5_41(9uLL);
  *(void *)(a1 + 240) = v2;
  if (!v2) {
    goto LABEL_9;
  }
  *(void *)(a1 + 248) = v2;
  unsigned int v3 = OUTLINED_FUNCTION_5_41(9uLL);
  *(void *)(a1 + 256) = v3;
  if (!v3) {
    goto LABEL_9;
  }
  *(void *)(a1 + 264) = v3;
  __int16 v4 = OUTLINED_FUNCTION_5_41(0xAuLL);
  *(void *)(a1 + 272) = v4;
  if (!v4) {
    goto LABEL_9;
  }
  *(void *)(a1 + 280) = v4;
  *(unsigned char *)(a1 + 288) = 9;
  *(_DWORD *)(a1 + 290) = 131073;
  *(void *)(a1 + 296) = vlfnames_glob;
  *(unsigned char *)(a1 + 304) = 12;
  *(_WORD *)(a1 + 306) = 91;
  *(void *)(a1 + 312) = "ptb.ddl";
  *(_WORD *)(a1 + 320) = 7;
  uint64_t v5 = malloc_type_malloc(0x1CC0uLL, 0x101004026C630D6uLL);
  *(void *)(a1 + 64) = v5;
  if (!v5) {
    goto LABEL_9;
  }
  memcpy(v5, &vsetdtbl_glob, 0x1CC0uLL);
  size_t v6 = malloc_type_malloc(0x200uLL, 0x1010040E30AAE52uLL);
  *(void *)(a1 + 72) = v6;
  if (v6)
  {
    memcpy(v6, &vactdtbl_glob, 0x200uLL);
  }
  else
  {
LABEL_9:
    delta_delete(a1);
  }
}

void link_delete(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)a1[32];
    if (v2)
    {
      free(v2);
      a1[32] = 0;
    }
    unsigned int v3 = (void *)a1[30];
    if (v3)
    {
      free(v3);
      a1[30] = 0;
    }
    __int16 v4 = (void *)a1[34];
    if (v4)
    {
      free(v4);
      a1[34] = 0;
    }
    uint64_t v5 = (void *)a1[8];
    if (v5)
    {
      free(v5);
      a1[8] = 0;
    }
    size_t v6 = (void *)a1[9];
    if (v6)
    {
      free(v6);
      a1[9] = 0;
    }
  }
}

uint64_t vfg0004(uint64_t a1)
{
  return a1 + 1;
}

uint64_t vfg0014(uint64_t a1)
{
  return a1 + 9;
}

uint64_t vfg0017(uint64_t a1)
{
  return a1 + 14;
}

uint64_t vfp0013(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(result + 8) = *a2;
  return result;
}

uint64_t vfp0014(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(result + 9) = *a2;
  return result;
}

uint64_t vfp0017(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(result + 14) = *a2;
  return result;
}

uint64_t vfg0019(uint64_t a1)
{
  return a1 + 7;
}

uint64_t vfg0021(uint64_t a1)
{
  return a1 + 1;
}

uint64_t vfg0029(uint64_t a1)
{
  return a1 + 11;
}

uint64_t vfp0019(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(result + 7) = *a2;
  return result;
}

uint64_t vfp0026(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(result + 6) = *a2;
  return result;
}

uint64_t vfp0029(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(result + 11) = *a2;
  return result;
}

uint64_t vfg0045(uint64_t a1)
{
  return a1 + 14;
}

uint64_t vfg0046(uint64_t a1)
{
  return a1 + 16;
}

uint64_t vfg0047(uint64_t a1)
{
  return a1 + 24;
}

uint64_t vfg0048(uint64_t a1)
{
  return a1 + 32;
}

uint64_t vfg0049(uint64_t a1)
{
  return a1 + 34;
}

uint64_t vfg0050(uint64_t a1)
{
  return a1 + 36;
}

uint64_t vfg0051(uint64_t a1)
{
  return a1 + 38;
}

uint64_t vfg0052(uint64_t a1)
{
  return a1 + 40;
}

uint64_t vfp0039(uint64_t result, _WORD *a2)
{
  *(_WORD *)(result + 2) = *a2;
  return result;
}

uint64_t vfp0040(uint64_t result, _WORD *a2)
{
  *(_WORD *)(result + 4) = *a2;
  return result;
}

uint64_t vfp0043(uint64_t result, _WORD *a2)
{
  *(_WORD *)(result + 10) = *a2;
  return result;
}

uint64_t vfp0045(uint64_t result, _WORD *a2)
{
  *(_WORD *)(result + 14) = *a2;
  return result;
}

double vfp0046(uint64_t a1, double *a2)
{
  double result = *a2;
  *(double *)(a1 + 16) = *a2;
  return result;
}

double vfp0047(uint64_t a1, double *a2)
{
  double result = *a2;
  *(double *)(a1 + 24) = *a2;
  return result;
}

uint64_t vfp0048(uint64_t result, _WORD *a2)
{
  *(_WORD *)(result + 32) = *a2;
  return result;
}

uint64_t vfp0049(uint64_t result, _WORD *a2)
{
  *(_WORD *)(result + 34) = *a2;
  return result;
}

uint64_t vfp0050(uint64_t result, _WORD *a2)
{
  *(_WORD *)(result + 36) = *a2;
  return result;
}

uint64_t vfp0051(uint64_t result, _WORD *a2)
{
  *(_WORD *)(result + 38) = *a2;
  return result;
}

uint64_t vfp0052(uint64_t result, _WORD *a2)
{
  *(_WORD *)(result + 40) = *a2;
  return result;
}

_WORD *OUTLINED_FUNCTION_0_48(_WORD *result, _WORD *a2)
{
  *double result = *a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_1_44(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(result + 3) = *a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_2_44(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(result + 2) = *a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_3_43(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(result + 5) = *a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_4_42(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(result + 4) = *a2;
  return result;
}

void *OUTLINED_FUNCTION_5_41(size_t a1)
{
  return malloc_type_malloc(a1, 0x100004077774924uLL);
}

uint64_t OUTLINED_FUNCTION_6_41(uint64_t result, _WORD *a2)
{
  *(_WORD *)(result + 8) = *a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_7_41(uint64_t result, _WORD *a2)
{
  *(_WORD *)(result + 12) = *a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_8_40(uint64_t result, _WORD *a2)
{
  *(_WORD *)(result + 6) = *a2;
  return result;
}

unsigned char *OUTLINED_FUNCTION_9_40(unsigned char *result, unsigned char *a2)
{
  *double result = *a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_10_40(uint64_t a1)
{
  return a1 + 2;
}

uint64_t OUTLINED_FUNCTION_11_40(uint64_t a1)
{
  return a1 + 4;
}

uint64_t OUTLINED_FUNCTION_12_39(uint64_t a1)
{
  return a1 + 3;
}

uint64_t OUTLINED_FUNCTION_13_38(uint64_t a1)
{
  return a1 + 5;
}

uint64_t OUTLINED_FUNCTION_14_38(uint64_t a1)
{
  return a1 + 8;
}

uint64_t OUTLINED_FUNCTION_15_37(uint64_t a1)
{
  return a1 + 6;
}

uint64_t OUTLINED_FUNCTION_16_36(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(result + 1) = *a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_17_36(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(result + 10) = *a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_18_34(uint64_t a1)
{
  return a1 + 12;
}

uint64_t OUTLINED_FUNCTION_19_34(uint64_t a1)
{
  return a1 + 10;
}

void act_dict_new(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x38uLL, 0x10040436913F5uLL);
  *(void *)(a1 + 176) = v2;
  if (v2)
  {
    *uint64_t v2 = &por_gramm_cat_dict_actentries;
    *(void *)(*(void *)(a1 + 176) + 8) = &unk_268C6A71C;
    *(void *)(*(void *)(a1 + 176) + 16) = &_MergedGlobals_38;
    *(void *)(*(void *)(a1 + 176) + 24) = &unk_268C6AEBB;
    *(void *)(*(void *)(a1 + 176) + 32) = &unk_268C6AA59;
    *(void *)(*(void *)(a1 + 176) + 40) = &unk_268C6A8C7;
    *(void *)(*(void *)(a1 + 176) + 48) = &unk_268C6A7D9;
  }
  else
  {
    delta_delete(a1);
  }
}

void act_dict_delete(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 176);
    if (v2)
    {
      free(v2);
      *(void *)(a1 + 176) = 0;
    }
  }
}

void set_dict_new(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x2D8uLL, 0x10040436913F5uLL);
  *(void *)(a1 + 80) = v2;
  if (v2)
  {
    *uint64_t v2 = &unk_268C6D519;
    *(void *)(*(void *)(a1 + 80) + 8) = &unk_268C6D6EC;
    *(void *)(*(void *)(a1 + 80) + 16) = &unk_268C6D49F;
    *(void *)(*(void *)(a1 + 80) + 24) = &unk_268C6DF45;
    *(void *)(*(void *)(a1 + 80) + 32) = &unk_268C6E545;
    *(void *)(*(void *)(a1 + 80) + 40) = &unk_268C6DFD0;
    *(void *)(*(void *)(a1 + 80) + 48) = &unk_268C6E715;
    *(void *)(*(void *)(a1 + 80) + 56) = &_MergedGlobals_1;
    *(void *)(*(void *)(a1 + 80) + 64) = &unk_268C6EAE2;
    *(void *)(*(void *)(a1 + 80) + 72) = &unk_268C6DD2A;
    *(void *)(*(void *)(a1 + 80) + 80) = &unk_268C6E397;
    *(void *)(*(void *)(a1 + 80) + 88) = &unk_268C6DA3D;
    *(void *)(*(void *)(a1 + 80) + 96) = &unk_268C6E0F7;
    *(void *)(*(void *)(a1 + 80) + 104) = &unk_268C6DAFD;
    *(void *)(*(void *)(a1 + 80) + 112) = &unk_268C6E2EC;
    *(void *)(*(void *)(a1 + 80) + 120) = &unk_268C6DDAD;
    *(void *)(*(void *)(a1 + 80) + 128) = &unk_268C6E46B;
    *(void *)(*(void *)(a1 + 80) + 136) = &unk_268C6D9DF;
    *(void *)(*(void *)(a1 + 80) + 144) = &unk_268C6D83F;
    *(void *)(*(void *)(a1 + 80) + 152) = &unk_268C6DC44;
    *(void *)(*(void *)(a1 + 80) + 160) = &unk_268C6D59A;
    *(void *)(*(void *)(a1 + 80) + 168) = &unk_268C6D631;
    *(void *)(*(void *)(a1 + 80) + 176) = &unk_268C6D2E8;
    *(void *)(*(void *)(a1 + 80) + 184) = &unk_268C6D770;
    *(void *)(*(void *)(a1 + 80) + 192) = &unk_268C6D2D2;
    *(void *)(*(void *)(a1 + 80) + 200) = &unk_268C6D23C;
    *(void *)(*(void *)(a1 + 80) + 208) = &unk_268C6F851;
    *(void *)(*(void *)(a1 + 80) + 216) = &unk_268C6D7B3;
    *(void *)(*(void *)(a1 + 80) + 224) = &nounadjs_setentries;
    *(void *)(*(void *)(a1 + 80) + 232) = &unk_268C6DBD2;
    *(void *)(*(void *)(a1 + 80) + 240) = &unk_268C6E9E8;
    *(void *)(*(void *)(a1 + 80) + 248) = &unk_268C6F644;
    *(void *)(*(void *)(a1 + 80) + 256) = &unk_268C6D32D;
    *(void *)(*(void *)(a1 + 80) + 264) = &unk_268C6FA74;
    *(void *)(*(void *)(a1 + 80) + 272) = &unk_268C6D272;
    *(void *)(*(void *)(a1 + 80) + 280) = &unk_268C6D2FF;
    *(void *)(*(void *)(a1 + 80) + 288) = &sg_verbs_setentries;
    *(void *)(*(void *)(a1 + 80) + 296) = &unk_268C6D72E;
    *(void *)(*(void *)(a1 + 80) + 304) = &unk_268C6D3AC;
    *(void *)(*(void *)(a1 + 80) + 312) = &unk_268C6D316;
    *(void *)(*(void *)(a1 + 80) + 320) = &unk_268C6D28E;
    *(void *)(*(void *)(a1 + 80) + 328) = &_MergedGlobals_2;
    *(void *)(*(void *)(a1 + 80) + 336) = &unk_268C6D35E;
    *(void *)(*(void *)(a1 + 80) + 344) = &unk_268C6E804;
    *(void *)(*(void *)(a1 + 80) + 352) = &unk_268C6D24E;
    *(void *)(*(void *)(a1 + 80) + 360) = &unk_268C6D3EB;
    *(void *)(*(void *)(a1 + 80) + 368) = &unk_268C6D543;
    *(void *)(*(void *)(a1 + 80) + 376) = &unk_268C6D3CB;
    *(void *)(*(void *)(a1 + 80) + 384) = &unk_268C6D378;
    *(void *)(*(void *)(a1 + 80) + 392) = &unk_268C6D7F7;
    *(void *)(*(void *)(a1 + 80) + 400) = &unk_268C6DA9C;
    *(void *)(*(void *)(a1 + 80) + 408) = &unk_268C6D66F;
    *(void *)(*(void *)(a1 + 80) + 416) = &unk_268C6DEBB;
    *(void *)(*(void *)(a1 + 80) + 424) = &unk_268C6EBE9;
    *(void *)(*(void *)(a1 + 80) + 432) = &_MergedGlobals_39;
    *(void *)(*(void *)(a1 + 80) + 440) = &unk_268C6D5FC;
    *(void *)(*(void *)(a1 + 80) + 448) = &unk_268C6D478;
    *(void *)(*(void *)(a1 + 80) + 456) = &unk_268C6E243;
    *(void *)(*(void *)(a1 + 80) + 464) = &unk_268C6ECF3;
    *(void *)(*(void *)(a1 + 80) + 472) = &unk_268C6D6AD;
    *(void *)(*(void *)(a1 + 80) + 480) = &unk_268C6D2BD;
    *(void *)(*(void *)(a1 + 80) + 488) = &unk_268C6D4C7;
    *(void *)(*(void *)(a1 + 80) + 496) = &unk_268C6D984;
    *(void *)(*(void *)(a1 + 80) + 504) = &unk_268C6D888;
    *(void *)(*(void *)(a1 + 80) + 512) = &unk_268C6D4F0;
    *(void *)(*(void *)(a1 + 80) + 520) = &unk_268C6D238;
    *(void *)(*(void *)(a1 + 80) + 528) = &unk_268C6D25A;
    *(void *)(*(void *)(a1 + 80) + 536) = &unk_268C6D453;
    *(void *)(*(void *)(a1 + 80) + 544) = &unk_268C6F449;
    *(void *)(*(void *)(a1 + 80) + 552) = &unk_268C6EF65;
    *(void *)(*(void *)(a1 + 80) + 560) = &unk_268C6D42F;
    *(void *)(*(void *)(a1 + 80) + 568) = &unk_268C6DB61;
    *(void *)(*(void *)(a1 + 80) + 576) = &unk_268C6D8D8;
    *(void *)(*(void *)(a1 + 80) + 584) = &unk_268C6E62C;
    *(void *)(*(void *)(a1 + 80) + 592) = &unk_268C6D40C;
    *(void *)(*(void *)(a1 + 80) + 600) = &unk_268C6D92D;
    *(void *)(*(void *)(a1 + 80) + 608) = &unk_268C6DCB7;
    *(void *)(*(void *)(a1 + 80) + 616) = &unk_268C6E8F4;
    *(void *)(*(void *)(a1 + 80) + 624) = &unk_268C6F274;
    *(void *)(*(void *)(a1 + 80) + 632) = &unk_268C6D5CA;
    *(void *)(*(void *)(a1 + 80) + 640) = &unk_268C6D244;
    *(void *)(*(void *)(a1 + 80) + 648) = &unk_268C6DE34;
    *(void *)(*(void *)(a1 + 80) + 656) = &unk_268C6D29D;
    *(void *)(*(void *)(a1 + 80) + 664) = &unk_268C6D56D;
    *(void *)(*(void *)(a1 + 80) + 672) = &unk_268C6EE04;
    *(void *)(*(void *)(a1 + 80) + 680) = &unk_268C6D2AD;
    *(void *)(*(void *)(a1 + 80) + 688) = &unk_268C6D392;
    *(void *)(*(void *)(a1 + 80) + 696) = &unk_268C6D345;
    *(void *)(*(void *)(a1 + 80) + 704) = &unk_268C6D280;
    *(void *)(*(void *)(a1 + 80) + 712) = &unk_268C6D266;
    *(void *)(*(void *)(a1 + 80) + 720) = &unk_268C6E05E;
  }
  else
  {
    delta_delete(a1);
  }
}

void set_dict_delete(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 80);
    if (v2)
    {
      free(v2);
      *(void *)(a1 + 80) = 0;
    }
  }
}

uint64_t setEngsynError(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(result + 224) + 216) = a2;
  return result;
}

uint64_t resetEngsynError(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 224) + 216) = 0;
  return catchDeltaError(result);
}

uint64_t catchEngsynError(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 224) + 216) = 0;
  return result;
}

uint64_t setEngsynErrorRange(uint64_t result, int a2, int a3)
{
  uint64_t v3 = *(void *)(result + 224);
  *(_DWORD *)(v3 + 208) = a2;
  *(_DWORD *)(v3 + 212) = a3;
  return result;
}

uint64_t getEngsynErrorRange(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3 = *(void *)(result + 224);
  *a2 = *(_DWORD *)(v3 + 208);
  *a3 = *(_DWORD *)(v3 + 212);
  return result;
}

BOOL checkEngsynError(uint64_t a1)
{
  return *(_DWORD *)(*(void *)(a1 + 224) + 216) != 0;
}

uint64_t getEngsynError(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 224) + 216);
}

uint64_t initStreamArrays(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 224);
  if (*(unsigned char *)(v1 + 220)) {
    return 0;
  }
  uint64_t v2 = 1;
  *(unsigned char *)(v1 + 220) = 1;
  createStreamArrays(a1, 28);
  if (initStreamArray(a1, 0)
    && initStreamArray(a1, 1)
    && initStreamArray(a1, 2)
    && initStreamArray(a1, 3)
    && initStreamArray(a1, 4)
    && initStreamArray(a1, 5)
    && initStreamArray(a1, 6)
    && initStreamArray(a1, 7)
    && initStreamArray(a1, 8)
    && initStreamArray(a1, 9)
    && initStreamArray(a1, 10)
    && initStreamArray(a1, 11)
    && initStreamArray(a1, 12)
    && initStreamArray(a1, 13)
    && initStreamArray(a1, 14)
    && initStreamArray(a1, 15)
    && initStreamArray(a1, 16)
    && initStreamArray(a1, 17)
    && initStreamArray(a1, 18)
    && initStreamArray(a1, 19)
    && initStreamArray(a1, 20)
    && initStreamArray(a1, 21)
    && initStreamArray(a1, 22)
    && initStreamArray(a1, 23)
    && initStreamArray(a1, 24)
    && initStreamArray(a1, 25)
    && initStreamArray(a1, 26)
    && initStreamArray(a1, 27))
  {
    return 0;
  }
  return v2;
}

uint64_t init_user_dicts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_WORD *)(a2 + 2) = 0;
  *(_WORD *)(a3 + 2) = 1;
  *(_WORD *)(a4 + 2) = 2;
  return 0;
}

uint64_t setNonSequential(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 *a9, uint64_t a10)
{
  for (unint64_t i = 0; i < *(unsigned __int8 *)(a1 + 288); ++i)
    *(unsigned char *)(*(void *)(*(void *)(a1 + 192) + 9072) + i) = 0;
  clearnonseqIndex(a1);
  if (*(__int16 *)(a2 + 2) >= 1)
  {
    int v13 = *(unsigned __int16 *)(a2 + 2);
    for (j = (unsigned __int16 **)&a10; ; ++j)
    {
      BOOL v15 = v13-- != 0;
      if (!v15 || !a9) {
        break;
      }
      int v16 = *a9;
      if (v16 == 65532) {
        LOWORD(v16) = a9[1];
      }
      if ((v16 & 0x8000) == 0 && (__int16)v16 < (int)*(unsigned __int8 *)(a1 + 288))
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 192) + 9072) + (__int16)v16) = 1;
        setnonseqIndex(a1, (__int16)v16);
      }
      int v17 = j;
      a9 = *v17;
    }
  }
  return 0;
}

void eloqc_new(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = malloc_type_malloc(0x100uLL, 0x10D0040F3AD890DuLL);
    *(void *)(a1 + 224) = v2;
    bzero(v2, 0x100uLL);
    ecilink_new(a1);
    *(unsigned char *)(*(void *)(a1 + 224) + 221) = -1;
  }
}

void eloqc_delete(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 224))
    {
      ecilink_delete(a1);
      bzero(*(void **)(a1 + 224), 0x100uLL);
      free(*(void **)(a1 + 224));
      *(void *)(a1 + 224) = 0;
    }
  }
}

uint64_t initializeIO(void *a1)
{
  if (*(unsigned char *)(a1[28] + 248))
  {
    uint64_t v2 = a1[24];
    if (*(void *)(v2 + 9072))
    {
      for (uint64_t i = 0; ; ++i)
      {
        uint64_t v2 = a1[24];
        if (i == 2) {
          break;
        }
        *(unsigned char *)(*(void *)(v2 + 9072) + i) = 1;
      }
    }
    *(_DWORD *)(v2 + 8864) = 0;
    uint64_t v4 = 1;
    if (*(_DWORD *)(v2 + 9080))
    {
      *(_DWORD *)(v2 + 8868) = 1;
      uint64_t v4 = 0;
    }
  }
  else
  {
    initDllLink();
    if (vffind_lf((uint64_t)a1, "cmdout") == -1)
    {
      uint64_t v4 = 1;
    }
    else
    {
      BOOL v5 = showDialogs();
      if (v5) {
        uint64_t v7 = (_OWORD *)(a1[28] + 136);
      }
      else {
        uint64_t v7 = (_OWORD *)(a1[27] + 240);
      }
      uint64_t v4 = 1;
      if (OUTLINED_FUNCTION_1_45(v5, v6, "Eloquence output", v7)
        && vffind_lf((uint64_t)a1, "pgmout") != -1)
      {
        BOOL v8 = showDialogs();
        uint64_t v10 = (_OWORD *)(v8 ? a1[28] + 136 : a1[27] + 240);
        if (OUTLINED_FUNCTION_1_45(v8, v9, "Eloquence program output", v10)) {
          eciLinkNew();
        }
      }
    }
  }
  *(unsigned char *)(a1[28] + 248) = 1;
  return v4;
}

BOOL showDialogs()
{
  uint64_t v0 = fopen("debug", "r");
  uint64_t v1 = v0;
  if (v0) {
    fclose(v0);
  }
  return v1 != 0;
}

uint64_t callSetEngsynError(uint64_t a1, uint64_t a2)
{
  return setEngsynError(a1, *(__int16 *)(a2 + 2));
}

uint64_t multitask(uint64_t a1)
{
  return 0;
}

uint64_t closeIO(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 224);
  uint64_t v3 = *(void ****)(v2 + 232);
  if (v3)
  {
    uint64_t v4 = eciLinkDelete(v3);
    uint64_t v2 = *(void *)(a1 + 224);
    *(void *)(v2 + 232) = v4;
  }
  BOOL v5 = *(void ****)(v2 + 240);
  if (v5) {
    *(void *)(*(void *)(a1 + 224) + 240) = eciLinkDelete(v5);
  }
  return 0;
}

void ***eciLinkCleanup(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 224);
  uint64_t v3 = *(void ****)(v2 + 232);
  if (v3)
  {
    eciLinkDelete(v3);
    uint64_t v2 = *(void *)(a1 + 224);
    *(void *)(v2 + 232) = 0;
  }
  double result = *(void ****)(v2 + 240);
  if (result)
  {
    double result = (void ***)eciLinkDelete(result);
    *(void *)(*(void *)(a1 + 224) + 232) = 0;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_45(uint64_t a1, uint64_t a2, char *a3, _OWORD *a4)
{
  return logicalFileAddPhysical(v4, v5, a3, a4, 0, 1);
}

uint64_t synthesizingWord(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 224);
  uint64_t v3 = *(void (**)(void, void))(v2 + 8);
  if (v3) {
    v3(*(__int16 *)(a2 + 2), *(void *)(v2 + 16));
  }
  return 0;
}

uint64_t wordIndexCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 224);
  uint64_t v3 = *(void (**)(void, void))(v2 + 24);
  if (v3) {
    v3(*(__int16 *)(a2 + 2), *(void *)(v2 + 32));
  }
  return 0;
}

uint64_t userIndexCallback(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 224);
  uint64_t v2 = *(void (**)(void))(v1 + 40);
  if (v2) {
    v2(*(void *)(v1 + 48));
  }
  return 0;
}

uint64_t annoCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 224);
  uint64_t v4 = *(void (**)(void, void, void))(v3 + 56);
  if (v4) {
    v4(*(__int16 *)(a2 + 2), *(__int16 *)(a3 + 2), *(void *)(v3 + 64));
  }
  return 0;
}

uint64_t placePhoneme(uint64_t a1, __int16 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (**(unsigned char **)(a1 + 224))
  {
    int v7 = *a2;
    int v5 = a2 + 16;
    int v6 = v7;
    if (v7 < 0) {
      return 1;
    }
    if (v6 >= *(unsigned __int8 *)(a1 + 288)) {
      return 1;
    }
    disptok(a1, v5, v6, 0, v13);
    char v10 = strlen(v13);
    if (v10 > 4) {
      return 1;
    }
    for (uint64_t i = v10; i != 4; ++i)
      v13[i] = 0;
    insertPhoneme(a1, *(unsigned int *)v13, *(__int16 *)(a4 + 2) * (uint64_t)*(__int16 *)(a3 + 2) / 0x3E8uLL);
  }
  return 0;
}

BOOL getObject(uint64_t a1, void *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_41, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_41))
  {
    RequestLicense::RequestLicense((RequestLicense *)&qword_268C71128);
    __cxa_guard_release(&_MergedGlobals_41);
  }
  *a2 = 0;
  if ((unint64_t)(a1 - 1) > 1)
  {
    if (a1 == 3)
    {
      *a2 = &qword_268C71128;
      (*(void (**)(uint64_t *))(qword_268C71128 + 8))(&qword_268C71128);
    }
  }
  else if (RequestLicense::licenseGranted((RequestLicense *)&qword_268C71128))
  {
    OUTLINED_FUNCTION_4_43();
    operator new();
  }
  return *a2 != 0;
}

void sub_24001F634(_Unwind_Exception *a1)
{
}

BOOL engsynStart(void *a1)
{
  resetEngsynError((uint64_t)a1);
  uint64_t v2 = a1[28];
  if (*(unsigned char *)(v2 + 1)
    || (*(unsigned char *)(v2 + 1) = 1, (int)etiwinMainDLL((uint64_t)a1, 0, 0) < 1)
    || initializeIO(a1))
  {
    int v3 = -4;
LABEL_3:
    setEngsynError((uint64_t)a1, v3);
    goto LABEL_4;
  }
  if (DeltaProc_start((uint64_t)a1, v5, v6, v7, v8, v9, v10, v11))
  {
    int v3 = -3;
    goto LABEL_3;
  }
LABEL_4:
  return checkEngsynError((uint64_t)a1);
}

uint64_t UnixReg(char *__src, char *a2)
{
  if (!a2) {
    a2 = getcwd(0, 0x1000uLL);
  }
  if (reg((uint64_t)a2)) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void *getFullPathName()
{
  return &libpath;
}

BOOL engsynEnd(uint64_t a1)
{
  resetEngsynError(a1);
  uint64_t v9 = *(void *)(a1 + 224);
  if (!*(unsigned char *)(v9 + 2))
  {
    *(unsigned char *)(v9 + 2) = 1;
    DeltaProc_end(a1, v2, v3, v4, v5, v6, v7, v8);
    vcmdend(a1, 0);
  }
  setEngsynError(a1, -5);
  return checkEngsynError(a1);
}

BOOL engsynProcessSentences()
{
  OUTLINED_FUNCTION_3_44();
  if (v3)
  {
    setEngsynError(v0, -8);
    goto LABEL_12;
  }
  *(unsigned char *)(v2 + 4) = 1;
  uint64_t v4 = *(uint64_t **)(v2 + 232);
  if (v4)
  {
    if (!eciLinkDataFromECI(v4, v1)) {
      setEngsynError(v0, -2);
    }
    if (!DeltaProc_process_sentences(v0, v5, v6, v7, v8, v9, v10, v11)
      && !deltaErrorThrown(v0))
    {
      goto LABEL_11;
    }
    int v12 = -3;
  }
  else
  {
    int v12 = -1;
  }
  setEngsynError(v0, v12);
LABEL_11:
  *(unsigned char *)(*(void *)(v0 + 224) + 4) = 0;
LABEL_12:
  return checkEngsynError(v0);
}

BOOL engsynProcessRemaining()
{
  OUTLINED_FUNCTION_3_44();
  if (v3)
  {
    setEngsynError(v0, -8);
    goto LABEL_12;
  }
  *(unsigned char *)(v2 + 4) = 1;
  uint64_t v4 = *(uint64_t **)(v2 + 232);
  if (v4)
  {
    if (eciLinkDataFromECI(v4, v1))
    {
      if (!DeltaProc_process_remaining(v0, v5, v6, v7, v8, v9, v10, v11)
        && !deltaErrorThrown(v0))
      {
        goto LABEL_11;
      }
      int v12 = -3;
    }
    else
    {
      int v12 = -2;
    }
  }
  else
  {
    int v12 = -1;
  }
  setEngsynError(v0, v12);
LABEL_11:
  *(unsigned char *)(*(void *)(v0 + 224) + 4) = 0;
LABEL_12:
  flushDelayedSynthQueue();
  return checkEngsynError(v0);
}

uint64_t engsynGetLastError(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  getEngsynErrorRange(a1, a2, a3);
  return getEngsynError(a1);
}

BOOL engsynRestart(uint64_t a1)
{
  resetEngsynError(a1);
  initGlobalVars((int *)a1);
  resetDelayedSynthQueue(a1);
  flushDelayedSynthQueue();
  if (!vdltinit(a1, 1) || !vinitrun((int *)a1)) {
    return 1;
  }
  int v2 = vffind_lf(a1, "wordsin");
  if (v2 != -1) {
    vf_clrbuf(a1, v2);
  }
  stopSynthesizing(a1);
  if (DeltaProc_start(a1, v3, v4, v5, v6, v7, v8, v9)) {
    setEngsynError(a1, -3);
  }
  *(_WORD *)(*(void *)(a1 + 224) + 3) = 0;
  return checkEngsynError(a1);
}

BOOL engsynReadPhonemes(uint64_t a1, unsigned char *a2, int a3, int *a4)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 224) + 232);
  if (v5 && !eciLinkDataToECI(v5, a2, a3, a4)) {
    setEngsynError(a1, -2);
  }
  return checkEngsynError(a1);
}

uint64_t engsynReadErrorMessage(uint64_t a1, char *a2, int a3, int *a4)
{
  uint64_t v4 = *(void *)(a1 + 224);
  if (!*(void *)(v4 + 232) || eciLinkDataToECI(*(void *)(v4 + 240), a2, a3, a4)) {
    return 0;
  }
  strncpy(a2, "Unable to get error message from Eloquence.", a3);
  a2[a3] = 0;
  return 1;
}

BOOL engsynFlush(uint64_t a1, int a2)
{
  *(unsigned char *)(*(void *)(a1 + 224) + 3) = a2;
  setInterrupt(a1, a2);
  if (a2)
  {
    throwDeltaErrorNow(a1);
    stopSynthesizing(a1);
  }
  else
  {
    engsynRestart(a1);
  }
  return checkEngsynError(a1);
}

BOOL engsynClearInput()
{
  OUTLINED_FUNCTION_3_44();
  if (v2)
  {
    int v3 = -8;
LABEL_3:
    setEngsynError(v0, v3);
    goto LABEL_4;
  }
  if (!eciLinkDataFromECI(*(uint64_t **)(v1 + 232), (char *)&unk_240047A1A))
  {
    int v3 = -2;
    goto LABEL_3;
  }
  if (DeltaProc_flush(v0))
  {
    int v3 = -3;
    goto LABEL_3;
  }
LABEL_4:
  return checkEngsynError(v0);
}

uint64_t engsynSetAbort(uint64_t a1)
{
  return 0;
}

BOOL engsynOutputPlaying(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 224) + 4) || synthDevicePlaying(a1) != 0;
}

BOOL engsynPause(uint64_t a1, unsigned __int8 a2)
{
  int v2 = holdSynthDevice(a1, a2);
  return OUTLINED_FUNCTION_1_46(v2);
}

BOOL engsynSetSynthToNamedFile(uint64_t a1, char *a2)
{
  int v2 = setSynthToNamedFile(a1, a2);
  return OUTLINED_FUNCTION_1_46(v2);
}

BOOL engsynSetSynthToCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = setSynthToCallback(a1, a2, a3);
  return OUTLINED_FUNCTION_1_46(v3);
}

BOOL engsynSetKlattConstHook(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = setKlattConstantHook(a1, a2, a3);
  return OUTLINED_FUNCTION_1_46(v3);
}

BOOL engsynSetKlattDynamicHook(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = setKlattDynamicHook(a1, a2, a3);
  return OUTLINED_FUNCTION_1_46(v3);
}

uint64_t engsynRegisterWordCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 224);
  *(void *)(v3 + 8) = a2;
  *(void *)(v3 + 16) = a3;
  return result;
}

uint64_t engsynRegisterWordIndexCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 224);
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = a3;
  return result;
}

uint64_t engsynRegisterUserIndexCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 224);
  *(void *)(v3 + 40) = a2;
  *(void *)(v3 + 48) = a3;
  return result;
}

uint64_t engsynRegisterAnnoCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 224);
  *(void *)(v3 + 56) = a2;
  *(void *)(v3 + 64) = a3;
  return result;
}

BOOL engsynInsertSynthesisIndex(uint64_t a1, uint64_t a2)
{
  int inserted = insertDelayedSynthIndex(a1, a2);
  return OUTLINED_FUNCTION_1_46(inserted);
}

BOOL engsynInsertDelayedSynthesisIndex(uint64_t a1, uint64_t a2)
{
  int inserted = insertDelayedSynthIndex(a1, a2);
  return OUTLINED_FUNCTION_1_46(inserted);
}

uint64_t engsynWantPhonemeIndices(uint64_t result, char a2)
{
  **(unsigned char **)(result + 224) = a2;
  return result;
}

uint64_t engsynClose(uint64_t a1)
{
  if (a1)
  {
    stopSynthesizing(a1);
    eciLinkCleanup(a1);
    deltaCleanup(a1);
  }
  return 0;
}

void engsynNewDict()
{
}

void sub_24001FDA8(_Unwind_Exception *a1)
{
}

uint64_t engsynDeleteDict(DictionarySet *this)
{
  if (this) {
    DictionarySet::~DictionarySet(this);
  }
  OUTLINED_FUNCTION_0_50();
  return 0;
}

void sub_24001FDF4(_Unwind_Exception *a1)
{
}

uint64_t engsynLoadDict(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 && a4) {
    return DictionarySet::load();
  }
  else {
    return OUTLINED_FUNCTION_2_45();
  }
}

uint64_t engsynSaveDict(uint64_t a1, int a2, char *a3)
{
  if (a1 && a3) {
    return DictionarySet::save(a1, a2, a3);
  }
  else {
    return OUTLINED_FUNCTION_2_45();
  }
}

uint64_t engsynUpdateDict(uint64_t a1, int a2, char *a3, char *a4)
{
  if (a1 && a3) {
    return DictionarySet::updateEntry(a1, a2, a3, a4);
  }
  else {
    return OUTLINED_FUNCTION_2_45();
  }
}

uint64_t engsynDictFindFirst(uint64_t a1, int a2, const char **a3, const char **a4)
{
  if (a1) {
    return DictionarySet::findFirst(a1, a2, a3, a4);
  }
  else {
    return OUTLINED_FUNCTION_2_45();
  }
}

uint64_t engsynDictFindNext(uint64_t a1, int a2, const char **a3, const char **a4)
{
  if (a1) {
    return DictionarySet::findNext(a1, a2, a3, a4);
  }
  else {
    return OUTLINED_FUNCTION_2_45();
  }
}

uint64_t engsynDictLookup(uint64_t a1, int a2, char *a3)
{
  if (a1) {
    return DictionarySet::lookup(a1, a2, a3);
  }
  return a1;
}

void OUTLINED_FUNCTION_0_50()
{
  JUMPOUT(0x2455DD950);
}

BOOL OUTLINED_FUNCTION_1_46(int a1)
{
  return a1 == 0;
}

uint64_t OUTLINED_FUNCTION_2_45()
{
  return 3;
}

BOOL eciLinkFileOpen(uint64_t a1, void *a2, int a3)
{
  *a2 = a1;
  uint64_t v3 = a2[2];
  if (v3)
  {
    if ((a3 - 1) < 2)
    {
      uint64_t v4 = (uint64_t *)(v3 + 8);
LABEL_5:
      dynaBufReset(*v4);
      return v3 != 0;
    }
    uint64_t v4 = (uint64_t *)a2[2];
    if (!a3) {
      goto LABEL_5;
    }
  }
  return v3 != 0;
}

uint64_t eciLinkFileRead(uint64_t a1, uint64_t *a2)
{
  int v2 = *(uint64_t ***)(a1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t result = dynaBufCurrentChar(*v2, 0);
  if (result)
  {
    while (1)
    {
      int v5 = dynaBufCurrentChar(*v2, 1);
      if (!v5 || v5 == 10) {
        break;
      }
      uint64_t result = dynaBufAddChar(a2, v5, 0);
      if (!result) {
        return result;
      }
    }
    uint64_t v7 = dynaBufMoveRel((uint64_t)a2, 0);
    uint64_t v8 = dynaBufMoveRel((uint64_t)a2, 0xFFFFFFFF);
    if (dynaBufCurrentChar(a2, 0) == 32)
    {
      if (v7 != v8) {
        dynaBufMoveRel((uint64_t)a2, 1u);
      }
    }
    else
    {
      if (v7 != v8) {
        dynaBufMoveRel((uint64_t)a2, 1u);
      }
      dynaBufAddChar(a2, 32, 0);
    }
    uint64_t result = dynaBufAddChar(a2, 10, 0);
    if (result)
    {
      uint64_t v9 = *v2;
      if (v5)
      {
        unint64_t v10 = dynaBufMoveRel((uint64_t)v9, 0);
        dynaBufMoveAbs((uint64_t)*v2, 0);
        dynaBufDeleteChars(*v2, v10);
      }
      else
      {
        dynaBufReset((uint64_t)v9);
      }
      return 1;
    }
  }
  return result;
}

BOOL eciLinkFileWrite(uint64_t a1, char *a2)
{
  if (!*a2) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  return v2 && dynaBufAddString(*(uint64_t **)(v2 + 8), a2, 0) != 0;
}

BOOL eciLinkFileEof(uint64_t a1)
{
  uint64_t v1 = *(uint64_t ***)(a1 + 16);
  return !v1 || dynaBufCurrentChar(*v1, 0) == 0;
}

uint64_t eciLinkFileClose()
{
  return 1;
}

BOOL dialogFileOpen(uint64_t a1, void *a2)
{
  *a2 = a1;
  uint64_t v3 = dynaBufNew(0);
  a2[2] = v3;
  return v3 != 0;
}

uint64_t dialogFileRead(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  dynaBufAddChar(a2, 10, 0);
  return 1;
}

uint64_t dialogFileWrite(uint64_t a1, char *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  if (!v2 || !dynaBufAddString(*(uint64_t **)(a1 + 16), a2, 0)) {
    return 0;
  }
  int v3 = dynaBufLength((uint64_t)v2);
  if (dynaBufChar(v2, v3 - 1) != 10) {
    return 1;
  }
  dynaBufMoveAbs((uint64_t)v2, 0xFFFFFFFF);
  dynaBufMoveRel((uint64_t)v2, 0xFFFFFFFF);
  uint64_t v4 = 1;
  dynaBufDeleteChars(v2, 1uLL);
  dynaBufReset((uint64_t)v2);
  return v4;
}

BOOL dialogFileEof(uint64_t a1)
{
  return *(void *)(a1 + 16) == 0;
}

uint64_t dialogFileClose()
{
  return 1;
}

double ecilink_new(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 224);
    if (v1)
    {
      long long v2 = unk_26B93DD90;
      *(_OWORD *)(v1 + 72) = eciLinkFileClass_glob;
      *(_OWORD *)(v1 + 88) = v2;
      long long v3 = *(_OWORD *)&off_26B93DDB0;
      *(_OWORD *)(v1 + 104) = xmmword_26B93DDA0;
      *(_OWORD *)(v1 + 120) = v3;
      uint64_t v4 = *(void *)(a1 + 224);
      long long v5 = unk_26B93DDD0;
      *(_OWORD *)(v4 + 136) = dialogFileClass_glob;
      *(_OWORD *)(v4 + 152) = v5;
      double result = *(double *)&xmmword_26B93DDE0;
      long long v7 = *(_OWORD *)&off_26B93DDF0;
      *(_OWORD *)(v4 + 168) = xmmword_26B93DDE0;
      *(_OWORD *)(v4 + 184) = v7;
    }
  }
  return result;
}

void eciLinkNew()
{
}

uint64_t eciLinkDelete(void ***a1)
{
  return 0;
}

uint64_t eciLinkDataFromECI(uint64_t *a1, char *a2)
{
  uint64_t result = 1;
  if (a1 && a2)
  {
    dynaBufReset(*a1);
    uint64_t result = dynaBufAddString((uint64_t *)*a1, a2, 0);
    if (result)
    {
      dynaBufMoveAbs(*a1, 0);
      return 1;
    }
  }
  return result;
}

uint64_t eciLinkDataToECI(uint64_t result, unsigned char *a2, int a3, int *a4)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = *(void *)(result + 8);
    if (result)
    {
      int v8 = a3 - 1;
      int v9 = dynaBufLength(result);
      if (v9 >= a3) {
        int v10 = v8;
      }
      else {
        int v10 = v9;
      }
      *a4 = v10;
      dynaBufExtract(*(void **)(v4 + 8), 0, (uint64_t)a2, v10);
      dynaBufMoveAbs(*(void *)(v4 + 8), 0);
      dynaBufDeleteChars(*(uint64_t **)(v4 + 8), *a4);
      if (*a2) {
        ++*a4;
      }
      return 1;
    }
  }
  return result;
}

void OUTLINED_FUNCTION_0_51()
{
  JUMPOUT(0x2455DD950);
}

void EngineWrapper::EngineWrapper(EngineWrapper *this)
{
  *(void *)this = &unk_26F3F2948;
  *((void *)this + 1) = 0;
  *((_WORD *)this + 12) = 0;
  long long v2 = delta_new();
  *((void *)this + 2) = v2;
  if (!v2) {
    *((unsigned char *)this + 24) = 1;
  }
}

void EngineWrapper::~EngineWrapper(EngineWrapper *this)
{
  *(void *)this = &unk_26F3F2948;
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    delta_delete(v2);
    *((void *)this + 2) = 0;
  }
}

BOOL EngineWrapper::queryInterface(EngineWrapper *this, uint64_t a2, void **a3)
{
  *a3 = 0;
  if ((unint64_t)(a2 - 1) > 1) {
    return 0;
  }
  *a3 = this;
  (*(void (**)(EngineWrapper *))(*(void *)this + 8))(this);
  return *a3 != 0;
}

uint64_t EngineWrapper::addRef(EngineWrapper *this)
{
  uint64_t v1 = *((void *)this + 1) + 1;
  *((void *)this + 1) = v1;
  return v1;
}

uint64_t EngineWrapper::release(EngineWrapper *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = v1 - 1;
  *((void *)this + 1) = v1 - 1;
  if (v1 == 1)
  {
    EngineWrapper::~EngineWrapper(this);
    OUTLINED_FUNCTION_2_46();
  }
  return v2;
}

void sub_240020580(_Unwind_Exception *a1)
{
}

uint64_t EngineWrapper::start(EngineWrapper *this)
{
  OUTLINED_FUNCTION_1_47();
  if (v2)
  {
    BOOL v3 = 1;
  }
  else
  {
    BOOL v3 = engsynStart(*(void **)(v1 + 16));
    if (v3) {
      *(unsigned char *)(v1 + 24) = 1;
    }
  }
  return OUTLINED_FUNCTION_0_52(v3);
}

uint64_t EngineWrapper::end(EngineWrapper *this)
{
  OUTLINED_FUNCTION_1_47();
  if (v2)
  {
    BOOL v3 = 1;
  }
  else
  {
    BOOL v3 = engsynEnd(*(void *)(v1 + 16));
    if (v3) {
      *(unsigned char *)(v1 + 24) = 1;
    }
  }
  return OUTLINED_FUNCTION_0_52(v3);
}

uint64_t EngineWrapper::processSentences(EngineWrapper *this, const char *a2)
{
  OUTLINED_FUNCTION_1_47();
  if (v3)
  {
    BOOL v4 = 1;
  }
  else
  {
    BOOL v4 = engsynProcessSentences();
    if (v4) {
      *(unsigned char *)(v2 + 24) = 1;
    }
  }
  return OUTLINED_FUNCTION_0_52(v4);
}

uint64_t EngineWrapper::processRemaining(EngineWrapper *this, const char *a2)
{
  OUTLINED_FUNCTION_1_47();
  if (v3)
  {
    BOOL v4 = 1;
  }
  else
  {
    BOOL v4 = engsynProcessRemaining();
    if (v4) {
      *(unsigned char *)(v2 + 24) = 1;
    }
  }
  return OUTLINED_FUNCTION_0_52(v4);
}

uint64_t EngineWrapper::getLastError(EngineWrapper *this, int *a2, int *a3)
{
  OUTLINED_FUNCTION_1_47();
  if (v6)
  {
    uint64_t LastError = 1;
  }
  else
  {
    uint64_t LastError = engsynGetLastError(*(void *)(v3 + 16), v4, v5);
    if (LastError == 1) {
      *(unsigned char *)(v3 + 24) = 1;
    }
  }
  return OUTLINED_FUNCTION_0_52(LastError);
}

uint64_t EngineWrapper::restart(EngineWrapper *this)
{
  OUTLINED_FUNCTION_1_47();
  if (v2)
  {
    BOOL v3 = 1;
  }
  else
  {
    BOOL v3 = engsynRestart(*(void *)(v1 + 16));
    if (v3) {
      *(unsigned char *)(v1 + 24) = 1;
    }
  }
  return OUTLINED_FUNCTION_0_52(v3);
}

uint64_t EngineWrapper::readPhonemes(EngineWrapper *this, char *a2, int a3, int *a4)
{
  OUTLINED_FUNCTION_1_47();
  if (v8)
  {
    BOOL Phonemes = 1;
  }
  else
  {
    BOOL Phonemes = engsynReadPhonemes(*(void *)(v4 + 16), v5, v6, v7);
    if (Phonemes) {
      *(unsigned char *)(v4 + 24) = 1;
    }
  }
  return OUTLINED_FUNCTION_0_52(Phonemes);
}

uint64_t EngineWrapper::readErrorMessage(EngineWrapper *this, char *a2, int a3, int *a4)
{
  OUTLINED_FUNCTION_1_47();
  if (v8)
  {
    uint64_t ErrorMessage = 1;
  }
  else
  {
    uint64_t ErrorMessage = engsynReadErrorMessage(*(void *)(v4 + 16), v5, v6, v7);
    if (ErrorMessage == 1) {
      *(unsigned char *)(v4 + 24) = 1;
    }
  }
  return OUTLINED_FUNCTION_0_52(ErrorMessage);
}

BOOL EngineWrapper::flush(EngineWrapper *this, int a2)
{
  *((unsigned char *)this + 24) = 0;
  *((unsigned char *)this + 25) = a2 != 0;
  return engsynFlush(*((void *)this + 2), a2);
}

uint64_t EngineWrapper::clearInput(EngineWrapper *this)
{
  OUTLINED_FUNCTION_1_47();
  if (v2)
  {
    BOOL v3 = 1;
  }
  else
  {
    BOOL v3 = engsynClearInput();
    if (v3) {
      *(unsigned char *)(v1 + 24) = 1;
    }
  }
  return OUTLINED_FUNCTION_0_52(v3);
}

uint64_t EngineWrapper::setAbort(EngineWrapper *this)
{
  OUTLINED_FUNCTION_1_47();
  if (v2)
  {
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v3 = engsynSetAbort(*(void *)(v1 + 16));
    if (v3 == 1) {
      *(unsigned char *)(v1 + 24) = 1;
    }
  }
  return OUTLINED_FUNCTION_0_52(v3);
}

uint64_t EngineWrapper::outputPlaying(EngineWrapper *this)
{
  OUTLINED_FUNCTION_1_47();
  if (v2)
  {
    BOOL v3 = 1;
  }
  else
  {
    BOOL v3 = engsynOutputPlaying(*(void *)(v1 + 16));
    if (v3) {
      *(unsigned char *)(v1 + 24) = 1;
    }
  }
  return OUTLINED_FUNCTION_0_52(v3);
}

uint64_t EngineWrapper::pause(EngineWrapper *this)
{
  OUTLINED_FUNCTION_1_47();
  if (v3)
  {
    BOOL v4 = 1;
  }
  else
  {
    BOOL v4 = engsynPause(*(void *)(v1 + 16), v2);
    if (v4) {
      *(unsigned char *)(v1 + 24) = 1;
    }
  }
  return OUTLINED_FUNCTION_0_52(v4);
}

uint64_t EngineWrapper::setSynthToNamedFile(EngineWrapper *this, const char *a2)
{
  OUTLINED_FUNCTION_1_47();
  if (v4)
  {
    BOOL v5 = 1;
  }
  else
  {
    BOOL v5 = engsynSetSynthToNamedFile(*(void *)(v2 + 16), v3);
    if (v5) {
      *(unsigned char *)(v2 + 24) = 1;
    }
  }
  return OUTLINED_FUNCTION_0_52(v5);
}

BOOL EngineWrapper::setKlattDynamicHook(EngineWrapper *this, void (*a2)(float *, void *), uint64_t a3)
{
  if (*((unsigned char *)this + 24)) {
    return 1;
  }
  BOOL result = engsynSetKlattDynamicHook(*((void *)this + 2), (uint64_t)a2, a3);
  if (result) {
    *((unsigned char *)this + 24) = 1;
  }
  return result;
}

BOOL EngineWrapper::setKlattConstHook(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 24)) {
    return 1;
  }
  BOOL result = engsynSetKlattConstHook(*(void *)(a1 + 16), a2, a3);
  if (result) {
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t EngineWrapper::setSynthToCallback(EngineWrapper *this, void (*a2)(int, uint64_t *, void *), void *a3)
{
  OUTLINED_FUNCTION_1_47();
  if (v6)
  {
    BOOL v7 = 1;
  }
  else
  {
    BOOL v7 = engsynSetSynthToCallback(*(void *)(v3 + 16), v4, v5);
    if (v7) {
      *(unsigned char *)(v3 + 24) = 1;
    }
  }
  return OUTLINED_FUNCTION_0_52(v7);
}

uint64_t EngineWrapper::setDurationCallback(uint64_t this, void (*a2)(uint64_t, uint64_t, void *), void *a3)
{
  if (!*(unsigned char *)(this + 24)) {
    return engsynSetDurationCallback(*(void *)(this + 16), a2, a3);
  }
  return this;
}

uint64_t EngineWrapper::registerWordCallback(uint64_t this, void (*a2)(int, void *), uint64_t a3)
{
  if (!*(unsigned char *)(this + 24)) {
    return engsynRegisterWordCallback(*(void *)(this + 16), (uint64_t)a2, a3);
  }
  return this;
}

uint64_t EngineWrapper::registerWordIndexCallback(uint64_t this, void (*a2)(int, void *), uint64_t a3)
{
  if (!*(unsigned char *)(this + 24)) {
    return engsynRegisterWordIndexCallback(*(void *)(this + 16), (uint64_t)a2, a3);
  }
  return this;
}

uint64_t EngineWrapper::registerUserIndexCallback(uint64_t this, void (*a2)(void *), uint64_t a3)
{
  if (!*(unsigned char *)(this + 24)) {
    return engsynRegisterUserIndexCallback(*(void *)(this + 16), (uint64_t)a2, a3);
  }
  return this;
}

uint64_t EngineWrapper::registerIndexCallback(uint64_t this, void (*a2)(int, void *), void *a3)
{
  if (!*(unsigned char *)(this + 24)) {
    return engsynRegisterIndexCallback(*(void *)(this + 16), a2, a3);
  }
  return this;
}

uint64_t EngineWrapper::registerPhonemeCallback(uint64_t this, void (*a2)(int, unsigned int, void *), void *a3)
{
  if (!*(unsigned char *)(this + 24)) {
    return engsynRegisterPhonemeCallback(*(void *)(this + 16), a2, a3);
  }
  return this;
}

uint64_t EngineWrapper::registerAnnoCallback(uint64_t this, void (*a2)(uint64_t, uint64_t, void *), uint64_t a3)
{
  if (!*(unsigned char *)(this + 24)) {
    return engsynRegisterAnnoCallback(*(void *)(this + 16), (uint64_t)a2, a3);
  }
  return this;
}

uint64_t EngineWrapper::insertSynthesisIndex(EngineWrapper *this)
{
  OUTLINED_FUNCTION_1_47();
  if (v3)
  {
    BOOL inserted = 1;
  }
  else
  {
    BOOL inserted = engsynInsertSynthesisIndex(*(void *)(v1 + 16), v2);
    if (inserted) {
      *(unsigned char *)(v1 + 24) = 1;
    }
  }
  return OUTLINED_FUNCTION_0_52(inserted);
}

uint64_t EngineWrapper::insertDelayedSynthesisIndex(EngineWrapper *this)
{
  OUTLINED_FUNCTION_1_47();
  if (v3)
  {
    BOOL inserted = 1;
  }
  else
  {
    BOOL inserted = engsynInsertDelayedSynthesisIndex(*(void *)(v1 + 16), v2);
    if (inserted) {
      *(unsigned char *)(v1 + 24) = 1;
    }
  }
  return OUTLINED_FUNCTION_0_52(inserted);
}

uint64_t EngineWrapper::wantPhonemeIndices(uint64_t this, char a2)
{
  if (!*(unsigned char *)(this + 24)) {
    return engsynWantPhonemeIndices(*(void *)(this + 16), a2);
  }
  return this;
}

uint64_t EngineWrapper::close(EngineWrapper *this)
{
  if (engsynClose(*((void *)this + 2)))
  {
    unsigned int v2 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  else
  {
    unsigned int v2 = 0;
  }
  if (*((unsigned char *)this + 25)) {
    return 0;
  }
  else {
    return v2;
  }
}

void EngineWrapper::newDict(EngineWrapper *this)
{
}

uint64_t EngineWrapper::getDict(EngineWrapper *this)
{
  return engsynGetDict(*((void *)this + 2));
}

uint64_t EngineWrapper::setDict(EngineWrapper *this, void *a2)
{
  return engsynSetDict(*((void *)this + 2), a2);
}

uint64_t EngineWrapper::deleteDict(EngineWrapper *this, DictionarySet *a2)
{
  return engsynDeleteDict(a2);
}

uint64_t EngineWrapper::loadDict(EngineWrapper *this, uint64_t a2, uint64_t a3, const char *a4)
{
  return engsynLoadDict(*((void *)this + 2), a2, a3, (uint64_t)a4);
}

uint64_t EngineWrapper::saveDict(EngineWrapper *this, uint64_t a2, int a3, char *a4)
{
  return engsynSaveDict(a2, a3, a4);
}

uint64_t EngineWrapper::updateDict(EngineWrapper *this, uint64_t a2, int a3, char *a4, char *a5)
{
  return engsynUpdateDict(a2, a3, a4, a5);
}

uint64_t EngineWrapper::dictFindFirst(EngineWrapper *this, uint64_t a2, int a3, const char **a4, const char **a5)
{
  return engsynDictFindFirst(a2, a3, a4, a5);
}

uint64_t EngineWrapper::dictFindNext(EngineWrapper *this, uint64_t a2, int a3, const char **a4, const char **a5)
{
  return engsynDictFindNext(a2, a3, a4, a5);
}

uint64_t EngineWrapper::dictLookup(EngineWrapper *this, uint64_t a2, int a3, char *a4)
{
  return engsynDictLookup(a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_0_52(uint64_t result)
{
  if (*(unsigned char *)(v1 + 25)) {
    return 0;
  }
  else {
    return result;
  }
}

void OUTLINED_FUNCTION_2_46()
{
  JUMPOUT(0x2455DD950);
}

uint64_t LanguageID::getPackedInt(LanguageID *this)
{
  return ((uint64_t)*((char *)this + 1) << 8) | ((uint64_t)*(char *)this << 16) | *((char *)this + 2);
}

char *LanguageID::getLanguageString(LanguageID *this)
{
  uint64_t v1 = (char *)this + 3;
  sprintf((char *)this + 3, "%d", *(char *)this);
  return v1;
}

char *LanguageID::getDialectString(LanguageID *this)
{
  uint64_t v1 = (char *)this + 8;
  sprintf((char *)this + 8, "%d", *((char *)this + 2));
  return v1;
}

char *LanguageID::getLanguageDialectString(LanguageID *this)
{
  uint64_t v1 = (char *)this + 13;
  sprintf((char *)this + 13, "%d.%d", *(char *)this, *((char *)this + 2));
  return v1;
}

unsigned char *OUTLINED_FUNCTION_0_53(unsigned char *result, int a2)
{
  *BOOL result = BYTE2(a2);
  result[1] = BYTE1(a2);
  result[2] = a2;
  return result;
}

unsigned char *OUTLINED_FUNCTION_1_48(unsigned char *result, char a2, char a3)
{
  *BOOL result = a2;
  result[1] = 0;
  result[2] = a3;
  return result;
}

unsigned char *OUTLINED_FUNCTION_2_47(unsigned char *result, char a2, char a3, char a4)
{
  *BOOL result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

BOOL reg(uint64_t a1)
{
  unsigned int v2 = delta_new();
  engsynStart(v2);
  if (ensureInputStream((uint64_t)v2))
  {
    qword_268C71140 = a1;
    DeltaProc_registerLanguages((uint64_t)v2);
    delta_delete((uint64_t)v2);
    return (_MergedGlobals_42 & 1) == 0;
  }
  else
  {
    delta_delete((uint64_t)v2);
    return 1;
  }
}

BOOL ensureInputStream(uint64_t a1)
{
  if (*(unsigned __int8 *)(*(void *)(a1 + 224) + 221) != 255) {
    return 1;
  }
  for (int i = 0; i < (int)num_streams(a1); ++i)
  {
    uint64_t v4 = stream_name((char)i);
    if (!strcmp(v4, "inp")) {
      break;
    }
  }
  if (num_streams(a1) == i) {
    return 0;
  }
  *(unsigned char *)(*(void *)(a1 + 224) + 221) = i;
  return single_letter_stream((char)i) != 0;
}

uint64_t unreg()
{
  uint64_t v0 = (const char *)MEMORY[0x270FA5388]();
  uint64_t v6 = *MEMORY[0x263EF8340];
  globalJustGetLanguage = 1;
  uint64_t v1 = delta_new();
  engsynStart(v1);
  if (ensureInputStream((uint64_t)v1))
  {
    DeltaProc_registerLanguages((uint64_t)v1);
    LanguageID::LanguageID((LanguageID *)v5, *(void *)(v1[28] + 224));
    IniFileWriter::IniFileWriter((IniFileWriter *)v4, v0);
    LanguageDialectString = LanguageID::getLanguageDialectString((LanguageID *)v5);
    IniFileWriter::deleteSection((IniFileWriter *)v4, LanguageDialectString);
  }
  delta_delete((uint64_t)v1);
  return 1;
}

void sub_240020F90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  IniFileWriter::~IniFileWriter((IniFileWriter *)va);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

void registerPhoneme(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  MEMORY[0x270FA5388]();
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (!globalJustGetLanguage && (_MergedGlobals_42 & 1) == 0)
  {
    OUTLINED_FUNCTION_1_49();
    int v32 = 0;
    v22[4] = 0u;
    v22[5] = 0u;
    void v22[2] = 0u;
    v22[3] = 0u;
    *uint64_t v22 = 0u;
    v22[1] = 0u;
    if (sprintf(v31, "%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d", *(__int16 *)(v23 + 2), *(__int16 *)(v24 + 2), *(__int16 *)(v25 + 2), *(__int16 *)(v26 + 2), *(__int16 *)(a9 + 2), *(__int16 *)(a10 + 2), *(__int16 *)(a11 + 2), *(__int16 *)(a12 + 2), *(__int16 *)(a13 + 2), *(__int16 *)(a14 + 2), *(__int16 *)(a15 + 2), *(__int16 *)(a16 + 2), *(__int16 *)(a17 + 2), *(__int16 *)(a18 + 2), *(__int16 *)(a19 + 2)) == -1)
    {
      OUTLINED_FUNCTION_0_54();
    }
    else
    {
      LanguageID::LanguageID((LanguageID *)v30, *(unsigned char *)(v21 + 2), *(unsigned char *)(v20 + 2));
      IniFileWriter::IniFileWriter((IniFileWriter *)v28, (const char *)qword_268C71140);
      if (sprintf(v29, "Phoneme%d", *(__int16 *)(v19 + 2)) != -1)
      {
        LanguageDialectString = LanguageID::getLanguageDialectString((LanguageID *)v30);
        IniFileWriter::writeString((IniFileWriter *)v28, LanguageDialectString, v29, v31);
      }
      OUTLINED_FUNCTION_0_54();
      IniFileWriter::~IniFileWriter((IniFileWriter *)v28);
    }
  }
}

void sub_240021198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  IniFileWriter::~IniFileWriter((IniFileWriter *)va);
  _Unwind_Resume(a1);
}

uint64_t registerLanguage()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v8 = LanguageID::LanguageID((LanguageID *)v16, *(unsigned char *)(v6 + 2), *(unsigned char *)(v7 + 2));
  *(void *)(*(void *)(v5 + 224) + 224) = LanguageID::getPackedInt(v8);
  uint64_t v9 = v16[0] - 6;
  if (v9 > 4) {
    int v10 = 63;
  }
  else {
    int v10 = dword_24004627C[v9];
  }
  sprintf(byte_268C71148, "%#x", v10);
  if (globalJustGetLanguage || (_MergedGlobals_42 & 1) != 0) {
    return 0;
  }
  IniFileWriter::IniFileWriter((IniFileWriter *)v14, (const char *)qword_268C71140);
  if (sprintf(v15, "%d.%d", *(__int16 *)(v4 + 2), *(__int16 *)(v2 + 2)) != -1)
  {
    LanguageDialectString = LanguageID::getLanguageDialectString((LanguageID *)v16);
    FullPathName = (const char *)getFullPathName();
    IniFileWriter::writeString((IniFileWriter *)v14, LanguageDialectString, "Path", FullPathName);
  }
  _MergedGlobals_42 = 1;
  IniFileWriter::~IniFileWriter((IniFileWriter *)v14);
  return 0xFFFFFFFFLL;
}

void sub_24002138C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  IniFileWriter::~IniFileWriter((IniFileWriter *)va);
  _Unwind_Resume(a1);
}

void registerVoice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  MEMORY[0x270FA5388]();
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!globalJustGetLanguage && (_MergedGlobals_42 & 1) == 0)
  {
    OUTLINED_FUNCTION_1_49();
    int v25 = 0;
    v17[4] = 0u;
    v17[5] = 0u;
    void v17[2] = 0u;
    v17[3] = 0u;
    *uint64_t v17 = 0u;
    v17[1] = 0u;
    if (sprintf(v24, "%d %d %d %d %d %d %d %d", *(__int16 *)(v18 + 2), *(__int16 *)(v19 + 2), *(__int16 *)(a9 + 2), *(__int16 *)(a10 + 2), *(__int16 *)(a11 + 2), *(__int16 *)(a12 + 2), *(__int16 *)(a13 + 2), *(__int16 *)(a14 + 2)) == -1)
    {
      OUTLINED_FUNCTION_0_54();
    }
    else
    {
      LanguageID::LanguageID((LanguageID *)v23, *(unsigned char *)(v16 + 2), *(unsigned char *)(v15 + 2));
      IniFileWriter::IniFileWriter((IniFileWriter *)v21, (const char *)qword_268C71140);
      if (sprintf(v22, "Voice%d", *(__int16 *)(v14 + 2)) != -1)
      {
        LanguageDialectString = LanguageID::getLanguageDialectString((LanguageID *)v23);
        IniFileWriter::writeString((IniFileWriter *)v21, LanguageDialectString, v22, v24);
      }
      OUTLINED_FUNCTION_0_54();
      IniFileWriter::~IniFileWriter((IniFileWriter *)v21);
    }
  }
}

void sub_240021548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  IniFileWriter::~IniFileWriter((IniFileWriter *)va);
  _Unwind_Resume(a1);
}

uint64_t registerSAPIVoice()
{
  return 0;
}

uint64_t extractInputStreamString(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  uint64_t v8 = *(void *)(a2 + 8);
  unint64_t v9 = *(void *)(a3 + 8);
  uint64_t result = sync_in_stm();
  if (!result) {
    return result;
  }
  uint64_t result = sync_in_stm();
  if (!result) {
    return result;
  }
  uint64_t result = (uint64_t)extract_string(a1, *(char *)(*(void *)(a1 + 224) + 221), v8, v9, a4, a5);
  if (!result) {
    return result;
  }
  if (strlen(a4) < 3) {
    return 1;
  }
  for (int i = a4; ; ++i)
  {
    int v12 = *a4;
    if (v12 != 39) {
      break;
    }
    if (a4[1] == 32 && a4[2] == 39)
    {
      LOBYTE(v12) = 32;
      uint64_t v13 = 3;
      goto LABEL_13;
    }
LABEL_12:
    uint64_t v13 = 1;
LABEL_13:
    *int i = v12;
    a4 += v13;
  }
  if (*a4) {
    goto LABEL_12;
  }
  *int i = 0;
  return 1;
}

void OUTLINED_FUNCTION_0_54()
{
  *(unsigned char *)(v0 + 312) = 1;
}

uint64_t sendArrayParameters(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13 = a3;
  uint64_t v14 = a2;
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v16 = *(void *)(a1 + 208);
  if (!a2) {
    *(_DWORD *)(v16 + 140) = 0;
  }
  uint64_t v17 = 0;
  *(_DWORD *)(v16 + 144) = a3;
  while (v17 != 62)
  {
    v55[v17] = *(float *)(a10 + v17 * 4);
    ++v17;
  }
  v55[0] = (float)a8;
  if (a4)
  {
    if (a5)
    {
      if (!a6)
      {
LABEL_11:
        for (uint64_t i = 4; i != 252; i += 4)
        {
          int v19 = *(_DWORD *)(a9 + i);
          if (v19 != -1)
          {
            unsigned int Offset = arrayStreamLastOffset(a1, v19);
            if (v13 >= Offset) {
              uint64_t v13 = Offset;
            }
          }
        }
        if (v13 <= v14) {
          uint64_t v21 = v14;
        }
        else {
          uint64_t v21 = v13;
        }
        uint64_t v13 = v14 + (v21 - v14) / a8 * a8;
        uint64_t v16 = *(void *)(a1 + 208);
      }
    }
    else
    {
      uint64_t v14 = *(void *)(v16 + 8);
      if (!a6) {
        goto LABEL_11;
      }
    }
    *(void *)(v16 + 8) = v13;
  }
  *(_DWORD *)(v16 + 136) = v13;
  uint64_t v22 = *(void **)v16;
  if (!*(void *)v16)
  {
    uint64_t v23 = malloc_type_malloc(0x18uLL, 0x102004024DAA5DEuLL);
    if (v23)
    {
      uint64_t v24 = v23;
      int v25 = streamArrayCount(a1);
      uint64_t v26 = malloc_type_calloc(v25, 0x30uLL, 0x1000040732E9A81uLL);
      *uint64_t v24 = v26;
      if (v26)
      {
        valueSetReset(a1, v24, v14, v13);
        **(void **)(a1 + 208) = v24;
        goto LABEL_30;
      }
      free(v24);
    }
    uint64_t result = 0;
    **(void **)(a1 + 208) = 0;
    return result;
  }
  if (!a4 || a5) {
    valueSetReset(a1, v22, v14, v13);
  }
  else {
    void v22[2] = v13;
  }
LABEL_30:
  BOOL v27 = 0;
  uint64_t v53 = a8;
  uint64_t v54 = v13;
  while (!v27)
  {
    if (checkInterrupt(a1)) {
      return 1;
    }
    uint64_t v28 = **(void **)(a1 + 208);
    if (*(void *)(v28 + 8) > v14 || *(void *)(v28 + 16) <= v14) {
      return 1;
    }
    for (uint64_t j = 0; j != 62; ++j)
    {
      int v30 = *(_DWORD *)(a9 + 4 * j + 4);
      if (v30 != -1)
      {
        uint64_t v31 = **(uint64_t ***)(a1 + 208);
        uint64_t v32 = *v31;
        uint64_t v33 = *v31 + 48 * v30;
        uint64_t v34 = (_DWORD *)(v33 + 24);
        uint64_t v36 = (uint64_t *)(v33 + 16);
        uint64_t v35 = *(void *)(v33 + 16);
        while (v35 < v14)
        {
          if (v35 == -1)
          {
            uint64_t v41 = OUTLINED_FUNCTION_0_55();
            int Val = arrayStreamFirstVal(v41, v42, v43, v44);
            *(void *)uint64_t v33 = 0;
            *(_DWORD *)(v33 + 8) = 0;
            if (Val)
            {
              uint64_t v35 = 0;
              *uint64_t v36 = 0;
            }
            else
            {
              uint64_t v35 = v31[2];
              *uint64_t v36 = v35;
            }
            *uint64_t v34 = 0;
          }
          else
          {
            *(void *)uint64_t v33 = v35;
            *(_DWORD *)(v33 + 8) = *v34;
            uint64_t v37 = OUTLINED_FUNCTION_0_55();
            if (arrayStreamNextVal(v37, v38, v39, v40))
            {
              uint64_t v35 = 0;
              *uint64_t v36 = 0;
              *uint64_t v34 = 0;
            }
            else
            {
              uint64_t v35 = v31[2];
              *uint64_t v36 = v35;
            }
          }
        }
        uint64_t v46 = *(void *)v33;
        uint64_t v47 = v35 - *(void *)v33;
        uint64_t v48 = v32 + 48 * v30;
        *(void *)(v48 + 32) = v47;
        int v49 = *(_DWORD *)(v33 + 8);
        int v50 = *v34 - v49;
        BOOL v51 = *v34 == v49;
        *(_DWORD *)(v48 + 40) = v50;
        BOOL v51 = v51 || v35 == v46;
        if (!v51) {
          int v49 = (int)(float)((float)((float)((float)(v14 - v46) * (float)v50) / (float)v47) + (float)v49);
        }
        v55[j] = (float)v49;
      }
    }
    v14 += v53;
    if (v14 > v54) {
      v55[0] = (float)(v14 - v54);
    }
    (*(void (**)(float *, void))(*(void *)(*(void *)(a1 + 208) + 32) + 32))(v55, *(void *)(*(void *)(*(void *)(a1 + 208) + 32) + 40));
    BOOL v27 = !KlattSynth(*(void *)(*(void *)(a1 + 208) + 64), (uint64_t)v55);
  }
  return 0;
}

uint64_t valueSetReset(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 0;
  a2[1] = a3;
  a2[2] = a4;
  for (uint64_t i = 16; ; i += 48)
  {
    uint64_t result = streamArrayCount(a1);
    if (v6 >= (int)result) {
      break;
    }
    *(void *)(*a2 + i) = -1;
    ++v6;
  }
  return result;
}

void dlangCleanup(uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 208);
  if (v1)
  {
    free(*v1);
    free(v1);
  }
}

uint64_t OUTLINED_FUNCTION_0_55()
{
  return v0;
}

__int16 *getDeltaCcodeParm(__int16 *result, _WORD *a2, int a3)
{
  int v3 = *result;
  if (v3 != -5)
  {
    if (v3 == -3)
    {
      if (a3 != -5)
      {
        if (a3 != -3)
        {
          if (a3 == -4) {
            *a2 = *((void *)result + 1);
          }
          return result;
        }
        uint64_t v6 = *((void *)result + 1);
        goto LABEL_25;
      }
      double v5 = (double)*((uint64_t *)result + 1);
    }
    else
    {
      if (v3 != -4) {
        return result;
      }
      if (a3 != -5)
      {
        if (a3 != -3)
        {
          if (a3 == -4)
          {
            LOWORD(v4) = result[1];
LABEL_12:
            *a2 = v4;
            return result;
          }
          return result;
        }
        uint64_t v6 = result[1];
LABEL_25:
        *(void *)a2 = v6;
        return result;
      }
      double v5 = (double)result[1];
    }
LABEL_22:
    *(double *)a2 = v5;
    return result;
  }
  switch(a3)
  {
    case -5:
      double v5 = *((double *)result + 1);
      goto LABEL_22;
    case -3:
      uint64_t v6 = (uint64_t)*((double *)result + 1);
      goto LABEL_25;
    case -4:
      int v4 = (int)*((double *)result + 1);
      goto LABEL_12;
  }
  return result;
}

uint64_t setDeltaReturnCode(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 192) + 8024) = a2;
  return result;
}

double *setDeltaCcodeReturnValue(double *result, int a2, double *a3)
{
  int v3 = *(__int16 *)a3;
  switch(v3)
  {
    case -5:
      switch(a2)
      {
        case -5:
          double v5 = *result;
          break;
        case -3:
          double v5 = (double)*(uint64_t *)result;
          break;
        case -4:
          double v5 = (double)*(__int16 *)result;
          break;
        default:
          return result;
      }
      a3[1] = v5;
      break;
    case -3:
      switch(a2)
      {
        case -5:
          *(void *)&double v6 = (uint64_t)*result;
          break;
        case -3:
          double v6 = *result;
          break;
        case -4:
          *(void *)&double v6 = *(__int16 *)result;
          break;
        default:
          return result;
      }
      a3[1] = v6;
      return result;
    case -4:
      switch(a2)
      {
        case -5:
          int v4 = (int)*result;
          goto LABEL_17;
        case -3:
          *((_WORD *)a3 + 1) = *(void *)result;
          break;
        case -4:
          LOWORD(v4) = *(_WORD *)result;
LABEL_17:
          *((_WORD *)a3 + 1) = v4;
          break;
      }
      break;
  }
  return result;
}

uint64_t setdlookup(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*((__int16 *)vstmtbl[12 * *(unsigned __int8 *)(a4 + 16) + 1] + 15) != -1) {
    return 0;
  }
  uint64_t result = extract(a1, a2, a3, a5, __s1, *(unsigned __int8 *)(a4 + 48));
  if (result)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a4 + 8);
    uint64_t v9 = *(void *)(a4 + 32) * *(unsigned __int8 *)(a4 + 48) - 1;
    uint64_t v10 = -1;
    while (v9 >= v7)
    {
      uint64_t v11 = v9;
      uint64_t v12 = (v9 + v7) >> 1;
      if (v12 >= -1) {
        uint64_t v9 = -1;
      }
      else {
        uint64_t v9 = (v9 + v7) >> 1;
      }
      if ((v12 & 0x8000000000000000) == 0)
      {
        while (*(unsigned char *)(v8 + v12))
        {
          if (--v12 < 0) {
            goto LABEL_15;
          }
        }
        uint64_t v9 = v12;
      }
LABEL_15:
      uint64_t v13 = v9 + 1;
      if (v9 + 1 == v10) {
        break;
      }
      int v14 = strcmp(__s1, (const char *)(v8 + v13));
      if (!v14) {
        return 1;
      }
      uint64_t v10 = v9 + 1;
      if ((v14 & 0x80000000) == 0)
      {
        uint64_t v7 = v9 + 1;
        while (*(unsigned __int8 *)(v8 + v7++))
          ;
        uint64_t v9 = v11;
        uint64_t v10 = v13;
      }
    }
    return 0;
  }
  return result;
}

uint64_t extract(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, unsigned char *a5, unsigned int a6)
{
  unsigned int v6 = *(_DWORD *)(*(void *)(a1 + 192) + 9084) + a4;
  if ((*(void *)(a2 + 8 * (int)v6) & 1) == 0 || (*(void *)(a3 + 8 * (int)v6) & 1) == 0) {
    return 0;
  }
  unint64_t v11 = a2;
  unsigned int v13 = 0;
  int v14 = *(uint64_t (**)(unint64_t))vstmtbl[12 * a4 + 2];
  unsigned int v15 = 0xFE / a6;
  size_t v16 = a6;
  while (1)
  {
    BOOL v17 = v11 == a3 || v11 == *(void *)(*(void *)(a1 + 200) + 8);
    if (v17 || v13 >= v15) {
      break;
    }
    unint64_t v11 = *(void *)(v11 + 8 * (int)(*(_DWORD *)(*(void *)(a1 + 192) + 9084) + a4)) & 0xFFFFFFFFFFFFFFFCLL;
    if (!v11 || (*(unsigned char *)v11 & 2) == 0)
    {
      int v19 = (const void *)v14(v11 + 16);
      memcpy(a5, v19, v16);
      a5 += v16;
      unint64_t v11 = *(void *)(v11 + 8) & 0xFFFFFFFFFFFFFFFCLL;
    }
    ++v13;
  }
  *a5 = 0;
  return 1;
}

const char *actdlookup(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unsigned int v5 = *(unsigned __int8 *)(a4 + 16);
  if (*((__int16 *)vstmtbl[12 * v5 + 1] + 15) == -1
    && extract(a1, a2, a3, v5, __s1, *(unsigned __int8 *)(a4 + 48)))
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(a4 + 8);
    uint64_t v10 = v9 + 2 * *(void *)(a4 + 24);
    uint64_t v11 = *(void *)(a4 + 24) - 1;
    while (v11 >= v8)
    {
      uint64_t v12 = (const char *)(v10 + *(__int16 *)(v9 + ((v11 + v8) & 0x1FFFFFFFELL)));
      int v13 = strcmp(__s1, v12);
      if (!v13)
      {
        unsigned int v6 = v12;
        while (*(unsigned __int8 *)v6++)
          ;
        return v6;
      }
      uint64_t v14 = (v11 + v8) >> 1;
      if (v13 < 0) {
        uint64_t v11 = v14 - 1;
      }
      else {
        uint64_t v8 = v14 + 1;
      }
    }
  }
  return 0;
}

uint64_t vdictinit(uint64_t a1)
{
  __int16 v2 = *(_WORD *)(a1 + 306);
  if (v2 || *(_WORD *)(a1 + 320))
  {
    uint64_t v3 = 0;
    for (uint64_t i = 0; i < v2; ++i)
    {
      dictinit(a1, *(void *)(a1 + 64) + v3, 0, i);
      __int16 v2 = *(_WORD *)(a1 + 306);
      v3 += 64;
    }
    uint64_t v5 = 0;
    for (uint64_t j = 0; j < *(__int16 *)(a1 + 320); ++j)
    {
      dictinit(a1, *(void *)(a1 + 72) + v5, 1, j);
      v5 += 64;
    }
  }
  return 1;
}

void *dictinit(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v14 = 0;
  __int16 v13 = 0;
  uint64_t v12 = 0;
  switch(*((_WORD *)vstmtbl[12 * *(unsigned __int8 *)(a2 + 16) + 1] + 15))
  {
    case 0xFFFB:
      uint64_t v12 = 0x10000000000000;
      unsigned int v8 = 8;
      uint64_t v9 = &v12;
      break;
    case 0xFFFC:
      __int16 v13 = -32767;
      unsigned int v8 = 2;
      uint64_t v9 = (uint64_t *)&v13;
      break;
    case 0xFFFD:
      uint64_t v14 = -2147483647;
      unsigned int v8 = 8;
      uint64_t v9 = &v14;
      break;
    case 0xFFFE:
      unsigned int v8 = 2;
      uint64_t v9 = (uint64_t *)&unk_240046292;
      break;
    case 0xFFFF:
      unsigned int v8 = 1;
      uint64_t v9 = (uint64_t *)&unk_240046290;
      break;
    default:
      uint64_t v9 = 0;
      unsigned int v8 = 0;
      break;
  }
  uint64_t result = memcpy((void *)(a2 + 49), v9, v8);
  *(unsigned char *)(a2 + 48) = v8;
  uint64_t v11 = 176;
  if (!a3) {
    uint64_t v11 = 80;
  }
  *(void *)(a2 + 8) = *(void *)(*(void *)(a1 + v11) + 8 * a4);
  return result;
}

uint64_t vgen_frame(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 192);
  if (**(unsigned __int8 **)(v1 + 8032) == 195) {
    uint64_t v2 = v1 + 8128;
  }
  else {
    uint64_t v2 = v1 + 8160;
  }
  *(void *)(v1 + 8400) = v2;
  *(_WORD *)(v1 + 8408) = -4;
  *(unsigned char *)(v1 + 8410) = 0;
  vassign(a1, (void **)(v1 + 8400), (const void **)(v1 + 8384));
  *(unsigned char *)(v2 + 24) |= 1u;
  return 0;
}

uint64_t vgen_time(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 192);
  uint64_t v2 = v1 + 8128;
  uint64_t v3 = v1 + 8160;
  BOOL v4 = **(unsigned __int8 **)(v1 + 8032) == 196;
  char v5 = *(unsigned char *)(v1 + 0x2000);
  if (v4) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = v3;
  }
  *(unsigned char *)(v6 + 8) = v5;
  *(unsigned char *)(v6 + 24) |= 2u;
  return 0;
}

uint64_t vgen_params(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 192);
  uint64_t v3 = (unsigned char *)(v2 + 0x2000);
  int v4 = **(unsigned __int8 **)(v2 + 8032);
  uint64_t v5 = v2 + 8128;
  uint64_t v6 = v2 + 8160;
  if (v4 == 197) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = v6;
  }
  *(unsigned char *)(v7 + 9) = *v3;
  if ((*(unsigned char *)(v7 + 24) & 4) != 0)
  {
    unsigned int v8 = *(void **)(v7 + 16);
  }
  else
  {
    unsigned int v8 = dynaBufNew(v3[1]);
    *(void *)(v7 + 16) = v8;
  }
  dynaBufReset((uint64_t)v8);
  for (unsigned int i = 1; ; ++i)
  {
    uint64_t v10 = *(void *)(a1 + 192);
    if (i > *(unsigned __int8 *)(v10 + 8193)) {
      break;
    }
    uint64_t v11 = *(uint64_t **)(v7 + 16);
    uint64_t v12 = *(char **)(v10 + 8264);
    *(void *)(v10 + 8264) = v12 + 1;
    dynaBufAddChar(v11, *v12, 0);
  }
  *(unsigned char *)(v7 + 24) |= 4u;
  return 0;
}

uint64_t vgen_copy(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 192);
  if ((~*(unsigned __int8 *)(v1 + 8152) & 7) != 0) {
    return 245;
  }
  *(void *)(v1 + 8160) = *(void *)(v1 + 8128);
  *(_WORD *)(v1 + 8168) = *(_WORD *)(v1 + 8136);
  *(unsigned char *)(*(void *)(a1 + 192) + 0x2000) = dynaBufLength(*(void *)(v1 + 8144));
  dynaBufReset(*(void *)(*(void *)(a1 + 192) + 8176));
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v4 = *(void *)(a1 + 192);
    if (i >= *(unsigned __int8 *)(v4 + 0x2000)) {
      break;
    }
    uint64_t v5 = *(uint64_t **)(v4 + 8176);
    char v6 = dynaBufChar(*(void **)(v4 + 8144), i);
    dynaBufAddChar(v5, v6, 0);
  }
  uint64_t result = 0;
  *(unsigned char *)(v4 + 8184) |= 7u;
  return result;
}

uint64_t vgenerate(uint64_t a1)
{
  uint64_t v2 = a1 + 112;
  uint64_t v3 = (uint64_t *)(a1 + 144);
  uint64_t v4 = 245;
  if (vprt_range(a1, a1 + 112, a1 + 144))
  {
    if (vgen(a1, v2, v3, *(void *)(a1 + 192) + 8160, *(unsigned char *)(*(void *)(a1 + 192) + 0x2000))) {
      return 0;
    }
    else {
      return 245;
    }
  }
  return v4;
}

uint64_t ins_tokens(uint64_t *a1, unsigned int a2, unsigned char *a3, int a4)
{
  unint64_t v30 = 0;
  uint64_t v27 = 0;
  double v28 = 0.0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  if (a4 == 1)
  {
    uint64_t v6 = a1[14];
    unint64_t v7 = *(void *)(v6 + 8 * (int)(*(_DWORD *)(a1[24] + 9084) + a2)) & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v8 = a1[18];
    if (v8 != v7 || v6 != (*(void *)(v7 + 8 * (a2 + 3)) & 0xFFFFFFFFFFFFFFFCLL)) {
      vdel_2pt(a1, a2, v6, v8);
    }
  }
  else
  {
    LOWORD(v27) = STMTYP((char)a2);
    char v12 = vstmtbl[12 * a2 + 1][32];
    BYTE2(v27) = v12;
    switch(STMTYP((char)a2))
    {
      case 0xFFFFFFFB:
        __int16 v13 = &v28;
        goto LABEL_11;
      case 0xFFFFFFFC:
      case 0xFFFFFFFE:
        __int16 v13 = (double *)&v29;
        goto LABEL_11;
      case 0xFFFFFFFD:
        __int16 v13 = (double *)&v30;
        goto LABEL_11;
      case 0xFFFFFFFF:
        __int16 v13 = (double *)&v31;
LABEL_11:
        uint64_t v26 = v13;
        uint64_t v14 = a3 + 1;
        switch(*a3)
        {
          case 0xC7:
            LOWORD(v25) = -1;
            unsigned int v15 = (double *)&v31;
            break;
          case 0xC8:
            __int16 v16 = -2;
            goto LABEL_16;
          case 0xC9:
            LOWORD(v25) = -3;
            unsigned int v15 = (double *)&v30;
            break;
          case 0xCA:
            __int16 v16 = -4;
LABEL_16:
            LOWORD(v25) = v16;
            unsigned int v15 = (double *)&v29;
            break;
          case 0xCB:
            LOWORD(v25) = -5;
            unsigned int v15 = &v28;
            break;
          default:
            return 0;
        }
        uint64_t v24 = v15;
        char v31 = 0;
        uint64_t v17 = &a3[a4];
        __int16 v29 = 0;
        BYTE2(v25) = v12;
        break;
      default:
        return 0;
    }
    while (v14 < v17)
    {
      unsigned __int16 v18 = v25;
      switch((__int16)v25)
      {
        case -5:
          int v21 = *(unsigned __int8 *)v14;
          uint64_t v20 = v14 + 1;
          char v31 = v21;
          double v28 = atof(v20);
          uint64_t v14 = &v20[v21];
          break;
        case -4:
        case -2:
          __int16 v19 = *((unsigned __int8 *)v14 + 1) | ((*v14 & 0x7F) << 8);
          __int16 v29 = v19;
          if (*v14 < 0) {
            __int16 v29 = -v19;
          }
          v14 += 2;
          break;
        case -3:
          unint64_t v22 = ((unint64_t)*((unsigned __int8 *)v14 + 1) << 16) & 0xFFFFFFFF80FFFFFFLL | ((unint64_t)(*v14 & 0x7F) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + 2) << 8) | *((unsigned __int8 *)v14 + 3);
          unint64_t v30 = v22;
          if (*v14 < 0) {
            unint64_t v30 = -(uint64_t)v22;
          }
          v14 += 4;
          break;
        case -1:
          char v23 = *v14++;
          char v31 = v23;
          break;
        default:
          return 0;
      }
      if ((unsigned __int16)v27 != v18) {
        vassign((uint64_t)a1, (void **)&v26, (const void **)&v24);
      }
      uint64_t result = vins_tok(a1, a2, a1[14], a1[18], (uint64_t)&v26);
      if (result)
      {
        if (v14 >= v17) {
          continue;
        }
        uint64_t result = vins_sync((uint64_t)a1, a2, *(void *)(a1[18] + 8 * (a2 + 3)) & 0xFFFFFFFFFFFFFFFCLL, a1[18]);
        a1[14] = result;
        if (result) {
          continue;
        }
      }
      return result;
    }
  }
  return 1;
}

uint64_t ins_rdtoks(void *a1, unsigned int a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1[25];
  uint64_t v8 = *(unsigned __int8 **)(v7 + 1720);
  if (*v8 != 5)
  {
    STMTYP((char)a2);
    for (char i = 1; ; char i = 0)
    {
      int v16 = *v8;
      if (v16 == 5) {
        break;
      }
      if ((i & 1) == 0)
      {
        uint64_t result = vins_sync((uint64_t)a1, a2, a3, *(void *)(a3 + 8 * (int)(*(_DWORD *)(a1[24] + 9084) + a2)) & 0xFFFFFFFFFFFFFFFCLL);
        if (!result) {
          return result;
        }
        int v16 = *v8;
      }
      if (v16 != 2) {
        return 0;
      }
      uint64_t v17 = (uint64_t *)OUTLINED_FUNCTION_0_56();
      uint64_t result = vins_tok(v17, v18, v19, v20, v21);
      if (!result) {
        return result;
      }
      popDeltaStackTop((uint64_t)a1);
      uint64_t v8 = *(unsigned __int8 **)(a1[25] + 1720);
    }
    uint64_t v7 = a1[25];
    goto LABEL_15;
  }
  if ((*(void *)(a3 + 8 * (int)(*(_DWORD *)(a1[24] + 9084) + a2)) & 0xFFFFFFFFFFFFFFFCLL) == a4
    && (*(void *)(a4 + 8 * (a2 + 3)) & 0xFFFFFFFFFFFFFFFCLL) == a3)
  {
LABEL_15:
    *(void *)(v7 + 1760) = *((void *)v8 + 1);
    goto LABEL_16;
  }
  uint64_t v9 = (uint64_t *)OUTLINED_FUNCTION_0_56();
  vdel_2pt(v9, v10, v11, v12);
  int v13 = *v8;
  *(void *)(a1[25] + 1760) = *((void *)v8 + 1);
  if (v13 != 5) {
    return 0;
  }
LABEL_16:
  popDeltaStackTop((uint64_t)a1);
  uint64_t result = 1;
  *(_DWORD *)(a1[23] + 452) = 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_0_56()
{
  return v0;
}

uint64_t timeDuration(uint64_t a1, unsigned char *a2, unsigned char *a3, int a4)
{
  uint64_t v8 = 0;
  uint64_t v9 = &vstmtbl[12 * a4 + 2];
  while (a2 != a3)
  {
    if (a2 == *(unsigned char **)(*(void *)(a1 + 200) + 8)) {
      return 0;
    }
    if (a2 && (*a2 & 2) != 0)
    {
      uint64_t v12 = &a2[8 * *(_DWORD *)(*(void *)(a1 + 192) + 9084) + 8 * a4];
    }
    else
    {
      int v10 = STMTYP(a4);
      if (v10 == -3)
      {
        uint64_t v11 = *(void *)(*(uint64_t (**)(unsigned char *))*v9)(a2 + 16);
      }
      else if (v10 == -4)
      {
        LODWORD(v11) = *(__int16 *)(*(uint64_t (**)(unsigned char *))*v9)(a2 + 16);
      }
      else
      {
        LODWORD(v11) = 0;
      }
      v8 += (int)v11;
      uint64_t v12 = a2 + 8;
    }
    a2 = (unsigned char *)(*v12 & 0xFFFFFFFFFFFFFFFCLL);
  }
  return v8;
}

uint64_t synthesize(uint64_t a1, int a2, char a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, float a11, float a12, float a13, uint64_t a14, unsigned int a15, int a16, int a17, void *__s2)
{
  uint64_t v27 = *(void *)(a1 + 208);
  uint64_t v28 = *(void *)(v27 + 32);
  *(unsigned char *)(v28 + 110) = 1;
  if (*(unsigned char *)(v27 + 48))
  {
    uint64_t v29 = 0;
    char v30 = 0;
    char v31 = *(unsigned char **)(v27 + 40);
    *char v31 = a3;
    uint64_t v32 = v31 + 4;
    while (v29 != 62)
    {
      int v33 = arrayStreamFind(a1);
      *(_DWORD *)&v32[4 * v29] = v33;
      if (v33 != -1) {
        char v30 = 1;
      }
      ++v29;
    }
    uint64_t v27 = *(void *)(a1 + 208);
    if (!v30)
    {
      uint64_t v37 = 0;
      uint64_t v28 = *(void *)(v27 + 32);
      goto LABEL_67;
    }
    *(unsigned char *)(v27 + 48) = 0;
    uint64_t v28 = *(void *)(v27 + 32);
  }
  int v34 = *(unsigned __int8 *)(v28 + 108);
  BOOL v35 = *(unsigned char *)(v28 + 108) == 0;
  *(unsigned char *)(v28 + 108) = 1;
  uint64_t v36 = a7 - a6;
  if (a7 - a6 < 0 || a7 == a6 && !a8) {
    goto LABEL_12;
  }
  int v61 = v35;
  int v38 = a17;
  memcpy(__dst, &unk_26F3F2AB8, 0x58uLL);
  if (a15)
  {
    float v39 = (float)a15;
    *((float *)__dst + 1) = (float)a15;
    *(_DWORD *)(v27 + 148) = a15;
  }
  else
  {
    float v39 = 0.0;
  }
  LODWORD(__dst[1]) = 16;
  if (a17) {
    HIDWORD(__dst[1]) = a17;
  }
  else {
    int v38 = 5;
  }
  float v40 = 0.0;
  float v41 = 0.0;
  if (a9 != 0.0)
  {
    float v41 = a9 + 0.0;
    *((float *)&__dst[5] + 1) = a9 + 0.0;
  }
  if (a10 != 0.0)
  {
    float v40 = a10 + 0.0;
    *((float *)&__dst[4] + 1) = a10 + 0.0;
  }
  float v42 = 0.0;
  float v43 = 0.0;
  if (a11 != 0.0)
  {
    float v43 = a11 + 0.0;
    *(float *)&__dst[5] = a11 + 0.0;
  }
  int v44 = a16;
  if (a12 != 0.0)
  {
    float v42 = a12 + 0.0;
    *(float *)&__dst[4] = a12 + 0.0;
  }
  __dst[8] = errorIgnore;
  LODWORD(__dst[9]) = 2;
  __dst[10] = ourKlattCallback;
  if (!a16) {
    int v44 = 5;
  }
  unsigned int v62 = v44;
  uint64_t v45 = *(void *)(v27 + 56);
  if (v39 == *(float *)(v45 + 4)
    && v38 == *(_DWORD *)(v45 + 12)
    && v41 == *(float *)(v45 + 44)
    && v40 == *(float *)(v45 + 36)
    && v43 == *(float *)(v45 + 40)
    && v42 == *(float *)(v45 + 32))
  {
    int v46 = 1;
  }
  else
  {
    memcpy((void *)v45, __dst, 0x58uLL);
    int v46 = 0;
    uint64_t v27 = *(void *)(a1 + 208);
    uint64_t v28 = *(void *)(v27 + 32);
  }
  if (*(unsigned char *)(v28 + 111))
  {
    if (v34)
    {
      if (!v46
        || (uint64_t v47 = *(void *)(v27 + 56), *(float *)(v47 + 88) != a13)
        || memcmp((const void *)(v47 + 92), __s2, 0xF8uLL))
      {
        int v48 = sendArrayParameters(a1, a6, a6, 1, 0, 1, 0, v62, *(void *)(v27 + 40), (uint64_t)__s2);
        uint64_t v27 = *(void *)(a1 + 208);
        if (!v48)
        {
          uint64_t v37 = 0;
          uint64_t v28 = *(void *)(v27 + 32);
          goto LABEL_13;
        }
      }
    }
    uint64_t v49 = *(void *)(v27 + 56);
    *(float *)(v49 + 88) = a13;
    memcpy((void *)(v49 + 92), __s2, 0xF8uLL);
    uint64_t v27 = *(void *)(a1 + 208);
  }
  uint64_t v28 = *(void *)(v27 + 32);
  if (v46)
  {
    uint64_t v50 = a15;
    if (*(unsigned char *)(v28 + 109)) {
      goto LABEL_50;
    }
  }
  else
  {
    (*(void (**)(void *, void))(v28 + 48))(__dst, *(void *)(v28 + 56));
    uint64_t v51 = *(void *)(*(void *)(a1 + 208) + 64);
    memcpy(v63, __dst, sizeof(v63));
    KlattSetConstParms(v51, v63);
    uint64_t v27 = *(void *)(a1 + 208);
    *(unsigned char *)(*(void *)(v27 + 32) + 109) = 0;
    uint64_t v50 = a15;
  }
  BOOL v52 = KlattOpen(*(void *)(v27 + 64));
  uint64_t v27 = *(void *)(a1 + 208);
  uint64_t v28 = *(void *)(v27 + 32);
  if (!v52)
  {
LABEL_12:
    uint64_t v37 = 0;
LABEL_13:
    *(unsigned char *)(v28 + 108) = 0;
    goto LABEL_67;
  }
LABEL_50:
  *(unsigned char *)(v28 + 109) = 1;
  if (a8)
  {
    if (v36 <= a8) {
      uint64_t v53 = a8;
    }
    else {
      uint64_t v53 = a7 - a6;
    }
    *(void *)(v28 + 112) = v53;
    if (*(void *)v28 && (uint64_t v54 = *(void (**)(uint64_t, uint64_t, void))(v28 + 16)) != 0)
    {
      v54(v53 * v50 / 1000, v50 * a14 / 1000, *(void *)(v28 + 24));
      int v55 = 0;
      uint64_t v27 = *(void *)(a1 + 208);
    }
    else
    {
      int v55 = 0;
    }
  }
  else
  {
    *(void *)(v28 + 112) = 0;
    int v55 = 1;
  }
  klattSetVolumeMultiplier(*(void *)(v27 + 64), a13);
  uint64_t v37 = sendArrayParameters(a1, a6, a7, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 208) + 32) + 111), v61, v55, 0, v62, *(void *)(*(void *)(a1 + 208) + 40), (uint64_t)__s2);
  int v56 = checkInterrupt(a1);
  uint64_t v28 = *(void *)(*(void *)(a1 + 208) + 32);
  if (v56)
  {
    uint64_t v57 = 0;
    *(void *)(v28 + 112) = 0;
  }
  else
  {
    uint64_t v57 = *(void *)(v28 + 112);
  }
  BOOL v58 = v57 <= v36;
  uint64_t v59 = v57 - v36;
  if (v58) {
    uint64_t v59 = 0;
  }
  *(void *)(v28 + 112) = v59;
  if (!a8)
  {
    finishSynthesis(a1);
    uint64_t v28 = *(void *)(*(void *)(a1 + 208) + 32);
  }
LABEL_67:
  *(unsigned char *)(v28 + 110) = 0;
  return v37;
}

uint64_t ourKlattCallback(uint64_t a1, uint64_t a2)
{
  while (*(unsigned char *)(*(void *)(*(void *)(a1 + 208) + 32) + 128))
  {
    if (checkInterrupt(a1)) {
      return 0;
    }
  }
  for (int i = 0; ; i += v6)
  {
    uint64_t v6 = (*(_DWORD *)a2 - i);
    if (*(_DWORD *)a2 <= i) {
      break;
    }
    uint64_t v7 = *(void *)(*(void *)(a1 + 208) + 32);
    if (*(void *)(v7 + 80))
    {
      uint64_t v8 = IndexQueue::reduceLeadTime((IndexQueue *)(v7 + 72), (int)v6);
      uint64_t v7 = *(void *)(*(void *)(a1 + 208) + 32);
      uint64_t v6 = v8;
    }
    if (*(void *)v7) {
      (*(void (**)(uint64_t, uint64_t, void))v7)(v6, *(void *)(a2 + 8) + 8 * i, *(void *)(v7 + 8));
    }
    if (IndexQueue::indexDue((IndexQueue *)(*(void *)(*(void *)(a1 + 208) + 32) + 72))) {
      IndexQueue::remove((IndexQueue *)(*(void *)(*(void *)(a1 + 208) + 32) + 72));
    }
  }
  return 1;
}

void finishSynthesis(uint64_t a1)
{
  KlattClose(*(void *)(*(void *)(a1 + 208) + 64));
  OUTLINED_FUNCTION_1_50();
  *(unsigned char *)(v1 + 109) = 0;
  clock();
  OUTLINED_FUNCTION_1_50();
  *(void *)(v3 + 120) = v2;
  *(unsigned char *)(v3 + 108) = 0;
}

void callSynthesizeArray()
{
}

uint64_t callPlayFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (*(_WORD *)(a2 + 2) && *(__int16 *)(a2 + 2) <= 999) {
    sprintf(v3, "delta%i.%s", *(__int16 *)(a2 + 2), "au");
  }
  return 0;
}

uint64_t floatDur(uint64_t a1, __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v6 = *a2;
  double v7 = 0.0;
  if ((*a2 & 0x80) == 0)
  {
    int v9 = (char)v6;
    if ((char)v6 < (int)*(unsigned __int8 *)(a1 + 288))
    {
      int v10 = *(unsigned char **)(a3 + 8);
      int v11 = *(_DWORD *)(*(void *)(a1 + 192) + 9084) + (char)v6;
      if (*(void *)&v10[8 * v11])
      {
        uint64_t v12 = *(unsigned char **)(a4 + 8);
        if (*(void *)&v12[8 * v11]) {
          double v7 = (double)timeDuration(a1, v10, v12, v9);
        }
      }
    }
  }
  *(double *)(a5 + 8) = v7;
  return 0;
}

uint64_t synthDevicePlaying(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 208) + 32) + 108);
}

uint64_t stopSynthesizing(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 208) + 32);
  if (*(unsigned char *)(v1 + 110))
  {
    uint64_t v2 = 1;
    setInterrupt(a1, 1);
  }
  else if (*(unsigned char *)(v1 + 108))
  {
    *(void *)(v1 + 112) = 0;
    finishSynthesis(a1);
    return 1;
  }
  else
  {
    return 0;
  }
  return v2;
}

uint64_t turnLazyWriteOn(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 208) + 32) + 111) = 1;
  return OUTLINED_FUNCTION_0_57();
}

uint64_t turnLazyWriteOff(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 208) + 32) + 111) = 0;
  return OUTLINED_FUNCTION_0_57();
}

uint64_t setSynthToNamedFile(uint64_t a1, char *__s1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 208) + 32);
  if (*(unsigned char *)(v2 + 108)) {
    return 0;
  }
  if (*(void *)v2) {
    *(void *)uint64_t v2 = 0;
  }
  if (!__s1 || !*__s1)
  {
    uint64_t v4 = *(void **)(v2 + 64);
    if (v4)
    {
      free(v4);
      OUTLINED_FUNCTION_1_50();
      *(void *)(v5 + 64) = 0;
    }
    return 1;
  }
  uint64_t result = (uint64_t)strdup(__s1);
  *(void *)(v2 + 64) = result;
  if (result) {
    return 1;
  }
  return result;
}

uint64_t setSynthToCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 208) + 32);
  if (*(unsigned char *)(v3 + 108)) {
    return 0;
  }
  if (*(void *)(v3 + 64))
  {
    setSynthToNamedFile(a1, 0);
    uint64_t v3 = *(void *)(*(void *)(a1 + 208) + 32);
  }
  *(void *)uint64_t v3 = a2;
  *(void *)(v3 + 8) = a3;
  return 1;
}

uint64_t setKlattDynamicHook(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 208) + 32);
  if (*(unsigned char *)(v3 + 108)) {
    return OUTLINED_FUNCTION_0_57();
  }
  *(void *)(v3 + 32) = a2;
  *(void *)(v3 + 40) = a3;
  return OUTLINED_FUNCTION_3_45();
}

uint64_t setKlattConstantHook(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 208) + 32);
  if (*(unsigned char *)(v3 + 108)) {
    return OUTLINED_FUNCTION_0_57();
  }
  *(void *)(v3 + 48) = a2;
  *(void *)(v3 + 56) = a3;
  return OUTLINED_FUNCTION_3_45();
}

uint64_t setSynthDurationCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 208) + 32);
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = a3;
  return result;
}

uint64_t registerSynthIndexCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 208) + 32);
  *(void *)(v3 + 136) = a2;
  *(void *)(v3 + 144) = a3;
  return result;
}

uint64_t registerPhonemeCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 208) + 32);
  *(void *)(v3 + 152) = a2;
  *(void *)(v3 + 160) = a3;
  return result;
}

uint64_t insertPhoneme(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 208) + 32);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, void))(v3 + 152);
  if (v4)
  {
    v4(a2, a3, *(void *)(v3 + 160));
    return 1;
  }
  else
  {
    return insertDelayedSynthIndex(a1, a2);
  }
}

uint64_t insertDelayedSynthIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 208);
  int v5 = *(_DWORD *)(v3 + 136);
  int v4 = *(_DWORD *)(v3 + 140);
  if (v4 <= v5) {
    int v6 = *(_DWORD *)(v3 + 136);
  }
  else {
    int v6 = *(_DWORD *)(v3 + 140);
  }
  int v7 = *(_DWORD *)(v3 + 144);
  if (v6 <= v7) {
    int v8 = *(_DWORD *)(v3 + 144);
  }
  else {
    int v8 = v6;
  }
  *(_DWORD *)(v3 + 140) = v6;
  *(_DWORD *)(v3 + 144) = v8;
  if (v5 < v4 || v6 < v7)
  {
    uint64_t result = IndexQueue::addOffsetFromLast((IndexQueue *)(*(void *)(v3 + 32) + 72), a2, *(_DWORD *)(v3 + 148) * (v8 - v6) / 1000);
    *(_DWORD *)(*(void *)(a1 + 208) + 140) = *(_DWORD *)(*(void *)(a1 + 208) + 144);
  }
  else
  {
    return insertSynthIndex(a1, a2);
  }
  return result;
}

uint64_t insertSynthIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 208) + 32);
  if (!*v2) {
    return 0;
  }
  uint64_t v3 = (void (*)(uint64_t, void))v2[17];
  if (v3) {
    v3(a2, v2[18]);
  }
  return 1;
}

uint64_t flushDelayedSynthQueue()
{
  OUTLINED_FUNCTION_1_50();
  if (*(void *)(v0 + 80)) {
    IndexQueue::remove((IndexQueue *)(v0 + 72));
  }
  return 1;
}

BOOL IndexQueue::isEmpty(IndexQueue *this)
{
  return *((void *)this + 1) == 0;
}

uint64_t resetDelayedSynthQueue(uint64_t a1)
{
  return IndexQueue::reset((IndexQueue *)(*(void *)(*(void *)(a1 + 208) + 32) + 72));
}

uint64_t IndexQueue::reset(IndexQueue *this)
{
  *((void *)this + 3) = 0;
  return EList::reset(this);
}

void deltaCleanup(uint64_t a1)
{
  deltaHeapCleanup();
  dlangCleanup(a1);
  vnstackCleanup(a1);
  vdelCleanup(a1);
  logicalIOCleanup(a1);
}

void dlang_new(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x98uLL, 0x1090040BA41C4AEuLL);
  *(void *)(a1 + 208) = v2;
  bzero(v2, 0x98uLL);
  uint64_t v3 = malloc_type_malloc(0x100uLL, 0x10000400763368AuLL);
  *(void *)(*(void *)(a1 + 208) + 40) = v3;
  bzero(v3, 0x100uLL);
  OUTLINED_FUNCTION_4_44();
  operator new();
}

void sub_240023808(_Unwind_Exception *a1)
{
}

void dlang_delete(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 208);
    if (v2)
    {
      klatt_delete(*(void **)(v2 + 64));
      stmarray_delete(a1);
      uint64_t v3 = *(void *)(a1 + 208);
      if (*(void *)(v3 + 32))
      {
        MEMORY[0x2455DD950](*(void *)(v3 + 32), 0);
        uint64_t v3 = *(void *)(a1 + 208);
        *(void *)(v3 + 32) = 0;
      }
      if (*(void *)(v3 + 56))
      {
        bzero(*(void **)(v3 + 56), 0x158uLL);
        free(*(void **)(*(void *)(a1 + 208) + 56));
        uint64_t v3 = *(void *)(a1 + 208);
        *(void *)(v3 + 56) = 0;
      }
      if (*(void *)(v3 + 40))
      {
        bzero(*(void **)(v3 + 40), 0x100uLL);
        free(*(void **)(*(void *)(a1 + 208) + 40));
        uint64_t v3 = *(void *)(a1 + 208);
        *(void *)(v3 + 40) = 0;
      }
      int v4 = *(void **)(v3 + 96);
      if (v4)
      {
        *int v4 = 0;
        free(*(void **)(*(void *)(a1 + 208) + 96));
        uint64_t v3 = *(void *)(a1 + 208);
        *(void *)(v3 + 96) = 0;
      }
      bzero((void *)v3, 0x98uLL);
      free(*(void **)(a1 + 208));
      *(void *)(a1 + 208) = 0;
    }
  }
}

BOOL EListQueue::isEmpty(EListQueue *this)
{
  return *((void *)this + 1) == 0;
}

BOOL IndexQueue::indexDue(IndexQueue *this)
{
  return !(**(unsigned int (***)(IndexQueue *))this)(this)
      && *(void *)((*(uint64_t (**)(IndexQueue *))(*(void *)this + 24))(this) + 8) == 0;
}

void SoundDeviceInfo::SoundDeviceInfo(SoundDeviceInfo *this)
{
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = &unk_26F3F2C78;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((unsigned char *)this + 128) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
}

uint64_t ESList::head(ESList *this)
{
  return *((void *)this + 1);
}

uint64_t ESList::tail(ESList *this)
{
  return *((void *)this + 2);
}

void IndexQueue::~IndexQueue(IndexQueue *this)
{
  EListQueue::~EListQueue(this);
  JUMPOUT(0x2455DD950);
}

void sub_240023A34(_Unwind_Exception *a1)
{
  MEMORY[0x2455DD950](v1, 0x10A1C40A4A8B666);
  _Unwind_Resume(a1);
}

void EListQueue::~EListQueue(EListQueue *this)
{
  EListQueue::~EListQueue(this);
  JUMPOUT(0x2455DD950);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26F3F2D38;
  EList::reset(this);
  ESList::~ESList(this);
}

void sub_240023AA4(_Unwind_Exception *a1)
{
  MEMORY[0x2455DD950](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void sub_240023B1C(_Unwind_Exception *a1)
{
  ESList::~ESList(v1);
  _Unwind_Resume(a1);
}

void ESList::~ESList(ESList *this)
{
  *(void *)this = &unk_26F3F2DA8;
  EList::reset(this);
}

{
  uint64_t vars8;

  ESList::~ESList(this);
  JUMPOUT(0x2455DD950);
}

uint64_t OUTLINED_FUNCTION_0_57()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_3_45()
{
  return 1;
}

uint64_t createStreamArrays(uint64_t a1, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  if (!*(void *)OUTLINED_FUNCTION_2_49(a1)) {
    StreamArrayList::build();
  }
  return 0;
}

void StreamArrayList::build()
{
}

void sub_240023CA8(_Unwind_Exception *a1)
{
  for (; v2; v2 -= 32)
    StreamArray::~StreamArray((StreamArray *)(v1 - 16 + v2));
  MEMORY[0x2455DD940](v1, 0x1030C803AA113E6);
  _Unwind_Resume(a1);
}

BOOL initStreamArray(uint64_t a1, int a2)
{
  uint64_t v3 = (StreamArrayList *)OUTLINED_FUNCTION_2_49(a1);
  return StreamArrayList::addName(v3, v4) == a2;
}

uint64_t StreamArrayList::addName(StreamArrayList *this, const char *a2)
{
  int v2 = *((__int16 *)this + 5);
  if (v2 < *((__int16 *)this + 4))
  {
    uint64_t v3 = *(void *)this;
    *((_WORD *)this + 5) = v2 + 1;
    StreamArray::setName((StreamArray *)(v3 + 32 * v2), a2);
  }
  return 0xFFFFFFFFLL;
}

BOOL addStreamArrayPtValC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return StreamArrayList::appendValueToStream(*(StreamArrayList **)(*(void *)(a1 + 208) + 72), *(__int16 *)(a2 + 2), *(double *)(a4 + 8), *(__int16 *)(a3 + 2)) == 0;
}

uint64_t StreamArrayList::appendValueToStream(StreamArrayList *this, int a2, unsigned int a3, int a4)
{
  return StreamArray::appendValue((StreamArray *)(*(void *)this + 32 * a2), a3, a4);
}

BOOL addStreamArraySsValC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v6 = *(double *)(a5 + 8);
  __int16 v7 = *(_WORD *)(a2 + 2);
  int v8 = *(__int16 *)(a3 + 2);
  return !StreamArrayList::appendValueToStream(*(StreamArrayList **)(*(void *)(a1 + 208) + 72), v7, *(double *)(a4 + 8), v8)|| StreamArrayList::appendValueToStream(*(StreamArrayList **)(*(void *)(a1 + 208) + 72), v7, v6, (__int16)v8) == 0;
}

uint64_t resetStreamArrayStreamC(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t StreamArrayList::clear(void *a1, uint64_t a2, int a3)
{
  return StreamArray::clear((TimeValueQueue *)(*a1 + 32 * a3), a2);
}

uint64_t resetStreamArrayC(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_2_49(a1);
  StreamArrayList::clearAll(v1, v2);
  return 0;
}

uint64_t StreamArrayList::clearAll(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  for (uint64_t i = 0; i < *(__int16 *)(v3 + 8); ++i)
  {
    uint64_t result = StreamArray::clear((TimeValueQueue *)(*(void *)v3 + v4), a2);
    v4 += 32;
  }
  return result;
}

uint64_t deleteStreamArrayStream()
{
  return 0;
}

uint64_t deleteStreamArray()
{
  return 0;
}

uint64_t printStreamArrays()
{
  return 0;
}

uint64_t printAllStreamArrays()
{
  return 0;
}

uint64_t arrayStreamFind(uint64_t a1)
{
  uint64_t v1 = (StreamArrayList *)OUTLINED_FUNCTION_2_49(a1);
  return StreamArrayList::findStream(v1, v2);
}

uint64_t StreamArrayList::findStream(StreamArrayList *this, const char *a2)
{
  uint64_t v4 = 0;
  for (uint64_t i = 0; i < *((__int16 *)this + 4); ++i)
  {
    if (!StreamArray::nameMatch((const char **)(*(void *)this + v4), a2)) {
      return (__int16)i;
    }
    v4 += 32;
  }
  LOWORD(i) = -1;
  return (__int16)i;
}

uint64_t arrayStreamFirstVal(uint64_t a1, __int16 a2, unsigned int *a3, int *a4)
{
  return StreamArrayList::fetchFirstValue(*(StreamArrayList **)(*(void *)(a1 + 208) + 72), a2, a3, a4);
}

uint64_t StreamArrayList::fetchFirstValue(StreamArrayList *this, int a2, unsigned int *a3, int *a4)
{
  return StreamArray::fetchNext((StreamArray *)(*(void *)this + 32 * a2), a3, a4);
}

uint64_t arrayStreamNextVal(uint64_t a1, __int16 a2, unsigned int *a3, int *a4)
{
  return StreamArrayList::fetchNextValue(*(StreamArrayList **)(*(void *)(a1 + 208) + 72), a2, a3, a4);
}

uint64_t StreamArrayList::fetchNextValue(StreamArrayList *this, int a2, unsigned int *a3, int *a4)
{
  return StreamArray::fetchNext((StreamArray *)(*(void *)this + 32 * a2), a3, a4);
}

uint64_t arrayStreamLastOffset(uint64_t a1, __int16 a2)
{
  return *(unsigned int *)(**(void **)(*(void *)(a1 + 208) + 72) + 32 * a2 + 24);
}

uint64_t streamArrayCount(uint64_t a1)
{
  return *(__int16 *)(*(void *)(*(void *)(a1 + 208) + 72) + 8);
}

uint64_t stmarray_new(uint64_t result)
{
  if (result)
  {
    if (*(void *)(result + 208)) {
      operator new();
    }
  }
  return result;
}

void stmarray_delete(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 208);
    if (v2)
    {
      if (*(void *)(v2 + 72)) {
        StreamArrayList::~StreamArrayList(*(StreamArrayList **)(v2 + 72));
      }
      OUTLINED_FUNCTION_0_58();
      *(void *)(*(void *)(a1 + 208) + 72) = 0;
    }
  }
}

void sub_2400240E0(_Unwind_Exception *a1)
{
}

void StreamArray::setName(StreamArray *this, const char *__s)
{
  if (*((void *)this + 2))
  {
    OUTLINED_FUNCTION_1_51();
    MEMORY[0x2455DD940]();
  }
  strlen(__s);
  OUTLINED_FUNCTION_1_51();
  operator new[]();
}

uint64_t StreamArray::nameMatch(const char **this, const char *a2)
{
  return strcasecmp(a2, this[2]);
}

uint64_t StreamArray::clear(TimeValueQueue *a1, uint64_t a2)
{
  uint64_t result = TimeValueQueue::reset(a1);
  *((void *)a1 + 3) = *(unsigned int *)(*(void *)(a2 + 208) + 80);
  return result;
}

void StreamArray::StreamArray(StreamArray *this)
{
  uint64_t v1 = TimeValueQueue::TimeValueQueue(this, 0x12Cu);
  *((void *)v1 + 2) = 0;
  *((_DWORD *)v1 + 6) = 0;
}

void StreamArray::~StreamArray(StreamArray *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    MEMORY[0x2455DD940](v2, 0x1000C8077774924);
    *((void *)this + 2) = 0;
  }
  TimeValueQueue::~TimeValueQueue(this);
}

uint64_t StreamArray::appendValue(StreamArray *this, unsigned int a2, int a3)
{
  unsigned int v3 = *((_DWORD *)this + 6);
  BOOL v4 = a2 >= v3;
  unsigned int v5 = a2 - v3;
  if (!v4) {
    return 0;
  }
  if (v5 <= 0xFFFE)
  {
    int v9 = v5 | (a3 << 16);
LABEL_7:
    uint64_t result = TimeValueQueue::push(this, v9);
    goto LABEL_8;
  }
  uint64_t result = TimeValueQueue::push(this, ((unsigned __int16)a3 << 16) | 0xFFFFu);
  if (result)
  {
    HIDWORD(v10) = a2;
    LODWORD(v10) = a2;
    int v9 = v10 >> 16;
    goto LABEL_7;
  }
LABEL_8:
  *((_DWORD *)this + 6) = a2;
  return result;
}

uint64_t StreamArray::fetchNext(StreamArray *this, unsigned int *a2, int *a3)
{
  if (TimeValueQueue::isEmpty(this)) {
    return 0;
  }
  TimeValueQueue::pop((uint64_t)this, &v8);
  *a3 = SHIWORD(v8);
  if ((unsigned __int16)v8 == 0xFFFF)
  {
    if (TimeValueQueue::isEmpty(this)) {
      return 0;
    }
    TimeValueQueue::pop((uint64_t)this, &v8);
    int v7 = HIWORD(v8) | ((unsigned __int16)v8 << 16);
  }
  else
  {
    int v7 = *((_DWORD *)this + 7) + (unsigned __int16)v8;
  }
  *a2 = v7;
  *((_DWORD *)this + 7) = v7;
  return 1;
}

void StreamArrayList::~StreamArrayList(StreamArrayList *this)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v3 = *(void *)(v2 - 8);
    if (v3)
    {
      uint64_t v4 = 32 * v3;
      do
      {
        StreamArray::~StreamArray((StreamArray *)(v2 - 32 + v4));
        v4 -= 32;
      }
      while (v4);
    }
    MEMORY[0x2455DD940](v2 - 16, 0x1030C803AA113E6);
    *(void *)this = 0;
  }
}

void OUTLINED_FUNCTION_0_58()
{
  JUMPOUT(0x2455DD950);
}

uint64_t OUTLINED_FUNCTION_2_49(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 208) + 72);
}

void TimeValueQueue::TimeValueQueue(TimeValueQueue *this, unsigned int a2)
{
  *(void *)this = 0;
  *((_WORD *)this + 4) = a2;
  *(_DWORD *)((char *)this + 10) = 0;
  *((_WORD *)this + 7) = a2;
  uint64_t v3 = OUTLINED_FUNCTION_0_59(4 * a2);
  *(void *)this = v3;
  if (!v3) {
    *((_WORD *)this + 4) = 0;
  }
}

uint64_t TimeValueQueue::size(TimeValueQueue *this)
{
  unsigned int v1 = *((unsigned __int16 *)this + 5);
  unsigned int v2 = *((unsigned __int16 *)this + 6);
  BOOL v3 = v2 >= v1;
  unsigned __int16 v4 = v2 - v1;
  if (!v3) {
    v4 += *((_WORD *)this + 4);
  }
  return v4;
}

uint64_t TimeValueQueue::totalSize(TimeValueQueue *this)
{
  return *((unsigned __int16 *)this + 4);
}

void TimeValueQueue::~TimeValueQueue(TimeValueQueue *this)
{
  unsigned int v2 = *(void **)this;
  if (v2)
  {
    free(v2);
    *(void *)((char *)this + 6) = 0;
    *(void *)this = 0;
  }
}

uint64_t TimeValueQueue::reset(TimeValueQueue *this)
{
  free(*(void **)this);
  uint64_t result = (uint64_t)OUTLINED_FUNCTION_0_59(4 * *((unsigned __int16 *)this + 7));
  *(void *)this = result;
  if (result)
  {
    *((_WORD *)this + 4) = *((_WORD *)this + 7);
    *(_DWORD *)((char *)this + 10) = 0;
    return 1;
  }
  return result;
}

BOOL TimeValueQueue::isEmpty(TimeValueQueue *this)
{
  return !*(void *)this || *((unsigned __int16 *)this + 5) == *((unsigned __int16 *)this + 6);
}

uint64_t TimeValueQueue::push(TimeValueQueue *this, int a2)
{
  uint64_t v2 = *(void *)this;
  if (!*(void *)this) {
    return 0;
  }
  uint64_t v4 = *((unsigned __int16 *)this + 6);
  *((_WORD *)this + 6) = v4 + 1;
  *(_DWORD *)(v2 + 4 * v4) = a2;
  int v5 = *((unsigned __int16 *)this + 6);
  if (v5 == *((unsigned __int16 *)this + 4))
  {
    int v5 = 0;
    *((_WORD *)this + 6) = 0;
  }
  if (v5 != *((unsigned __int16 *)this + 5) || TimeValueQueue::expand(this)) {
    return 1;
  }
  __int16 v7 = *((_WORD *)this + 6);
  if (!v7) {
    __int16 v7 = *((_WORD *)this + 4);
  }
  uint64_t result = 0;
  *((_WORD *)this + 6) = v7 - 1;
  return result;
}

uint64_t TimeValueQueue::expand(TimeValueQueue *this)
{
  uint64_t result = *(void *)this;
  if (result)
  {
    __int16 v3 = *((_WORD *)this + 4);
    uint64_t v4 = (char *)OUTLINED_FUNCTION_1_52((void *)result, 8 * (v3 & 0x7FFF));
    memmove(&v4[4 * *((unsigned __int16 *)this + 4)], v4, 4 * *((unsigned __int16 *)this + 6));
    memmove(v4, &v4[4 * *((unsigned __int16 *)this + 5)], 4 * *((unsigned __int16 *)this + 4));
    if (v4)
    {
      *(void *)this = v4;
      *((_WORD *)this + 5) = 0;
      *((_WORD *)this + 6) = *((_WORD *)this + 4);
      *((_WORD *)this + 4) = 2 * v3;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TimeValueQueue::pop(uint64_t a1, _DWORD *a2)
{
  uint64_t result = TimeValueQueue::peekHead(a1, a2);
  if (result)
  {
    __int16 v4 = *(_WORD *)(a1 + 10);
    if (*(unsigned __int16 *)(a1 + 8) == (unsigned __int16)(v4 + 1)) {
      __int16 v5 = 0;
    }
    else {
      __int16 v5 = v4 + 1;
    }
    *(_WORD *)(a1 + 10) = v5;
    return TimeValueQueue::shrinkIfNeeded((const void **)a1);
  }
  return result;
}

uint64_t TimeValueQueue::peekHead(uint64_t a1, _DWORD *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *(unsigned __int16 *)(a1 + 10);
  if (v2 == *(unsigned __int16 *)(a1 + 12)) {
    return 0;
  }
  *a2 = *(_DWORD *)(*(void *)a1 + 4 * v2);
  return 1;
}

uint64_t TimeValueQueue::shrinkIfNeeded(const void **this)
{
  unsigned int v2 = *((unsigned __int16 *)this + 6);
  uint64_t v3 = *((unsigned __int16 *)this + 5);
  int v4 = v2 - v3;
  if (v2 <= v3)
  {
    uint64_t v9 = *((unsigned __int16 *)this + 4);
    int v4 = v9 - v3 + v2;
    if (v9 <= *((unsigned __int16 *)this + 7) || v4 >= (int)(v9 >> 1)) {
      return 1;
    }
    memmove((char *)*this + 4 * v9 + -4 * v3, *this, 4 * *((unsigned __int16 *)this + 6));
    double v6 = (void *)*this;
    uint64_t v11 = *((unsigned __int16 *)this + 5);
    __int16 v7 = (char *)*this + 4 * v11;
    size_t v8 = 4 * (*((unsigned __int16 *)this + 4) - v11);
  }
  else
  {
    unsigned int v5 = *((unsigned __int16 *)this + 4);
    if (v5 <= *((unsigned __int16 *)this + 7) || v4 >= (int)(v5 >> 1)) {
      return 1;
    }
    double v6 = (void *)*this;
    __int16 v7 = (char *)*this + 4 * v3;
    size_t v8 = 4 * v4;
  }
  memmove(v6, v7, v8);
  unint64_t v12 = *((unsigned __int16 *)this + 4);
  uint64_t result = (uint64_t)OUTLINED_FUNCTION_1_52((void *)*this, (2 * v12) & 0x1FFFC);
  if (!result) {
    return result;
  }
  *this = (const void *)result;
  *((_WORD *)this + 5) = 0;
  *((_WORD *)this + 6) = v4;
  *((_WORD *)this + 4) = v12 >> 1;
  return 1;
}

_DWORD *TimeValueQueue::getElements(TimeValueQueue *this, unsigned int *a2)
{
  unsigned int v4 = TimeValueQueue::size(this);
  uint64_t result = OUTLINED_FUNCTION_0_59(4 * v4);
  if (result)
  {
    for (uint64_t i = 0; v4 != i; ++i)
      result[i] = *(_DWORD *)(*(void *)this
                            + 4
                            * ((i + *((unsigned __int16 *)this + 5)) % *((unsigned __int16 *)this + 4)));
    *a2 = v4;
  }
  return result;
}

void *OUTLINED_FUNCTION_0_59(size_t a1)
{
  return malloc_type_malloc(a1, 0x100004052888210uLL);
}

void *OUTLINED_FUNCTION_1_52(void *a1, size_t a2)
{
  return malloc_type_realloc(a1, a2, 0x100004052888210uLL);
}

uint64_t setUserDictInputStream(uint64_t a1, const char *a2)
{
  if (!a2 || !*a2) {
    return 3;
  }
  for (int i = 0; i < (int)num_streams(a1); ++i)
  {
    unsigned int v5 = stream_name((char)i);
    if (!strcmp(v5, a2)) {
      break;
    }
  }
  uint64_t v6 = 3;
  if (num_streams(a1) != i)
  {
    *(unsigned char *)(*(void *)(a1 + 208) + 120) = i;
    if (single_letter_stream((char)i)) {
      return 0;
    }
    else {
      return 3;
    }
  }
  return v6;
}

BOOL callUserDictLookup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 208) + 112);
  return !v4
      || DictionarySet::lookupAndTranslate(v4, *(__int16 *)(a2 + 2), *(void *)(a3 + 8), *(void *)(a4 + 8)) != 0;
}

uint64_t DictionarySet::lookupAndTranslate(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  return UserDict::lookupAndTranslate(*(void *)(a1 + 8 * a2), *(uint64_t **)(a1 + 32), a3, a4);
}

BOOL callInsertLastDictString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 208) + 112);
  return !v4
      || DictionarySet::lookupUndo(v4, *(__int16 *)(a2 + 2), *(void *)(a3 + 8), *(void *)(a4 + 8)) != 0;
}

uint64_t DictionarySet::lookupUndo(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  return UserDict::lookupUndo(*(void *)(a1 + 8 * a2), *(uint64_t **)(a1 + 32), a3, a4);
}

uint64_t getCurrentUserDict(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 208) + 112);
}

uint64_t setCurrentUserDict(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(a1 + 208) + 112) = a2;
  return 0;
}

void UserDict::UserDict(UserDict *this)
{
  uint64_t v1 = (UserDict *)OUTLINED_FUNCTION_3_46((uint64_t)this);
  UserDict::buildHashTable(v1, v2);
}

uint64_t UserDict::buildHashTable(UserDict *this, uint64_t a2)
{
  if (a2) {
    int v3 = a2;
  }
  else {
    int v3 = 256;
  }
  uint64_t v4 = 1;
  unsigned int v5 = hashNew(v3, 1, 1);
  *((void *)this + 513) = v5;
  if (!v5) {
    return 0;
  }
  *((_DWORD *)this + 1028) = 1;
  return v4;
}

uint64_t UserDict::UserDict(uint64_t a1)
{
  OUTLINED_FUNCTION_3_46(a1);
  UserDict::loadDictionary();
  return v1;
}

uint64_t UserDict::loadDictionary()
{
  uint64_t v0 = (UserDict *)MEMORY[0x270FA5388]();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  unsigned int v5 = v0;
  uint64_t v9 = *MEMORY[0x263EF8340];
  off_t DictFile = UserDict::findDictFile(v0, v1, v8);
  if (DictFile == -1) {
    return 1;
  }
  if (!DictFile) {
    return 0;
  }
  if (*((void *)v5 + 513) || UserDict::buildHashTable(v5, (int)(DictFile / 15)))
  {
    UserDict::loadHashTable(v5, v4);
    strcpy((char *)v5, v2);
    return 0;
  }
  return 2;
}

void UserDict::~UserDict(UserDict *this)
{
}

off_t UserDict::findDictFile(UserDict *this, const char *a2, char *a3)
{
  if (fileFindInPath() && !stat(a3, &v5)) {
    return v5.st_size;
  }
  else {
    return -1;
  }
}

uint64_t UserDict::loadHashTable(UserDict *a1, uint64_t a2)
{
  v9[72] = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v9);
  uint64_t Line = std::ifstream::open();
  while (UserDict::readNextLine(Line, v9, v8))
  {
    uint64_t Line = UserDict::parseNextLine((uint64_t)a1, a2, v8, (unint64_t)__s, (uint64_t)v6);
    if (Line) {
      uint64_t Line = UserDict::addOneEntry(a1, __s, v6);
    }
  }
  std::ifstream::close(v9);
  std::ifstream::~ifstream(v9);
  return 1;
}

void sub_240024D04(_Unwind_Exception *a1)
{
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C308] + 24;
  *a1 = MEMORY[0x263F8C308] + 24;
  uint64_t v3 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  uint64_t v4 = a1 + 2;
  std::istream::basic_istream[abi:ne180100](a1, (uint64_t *)(MEMORY[0x263F8C2A8] + 8), a1 + 2);
  *a1 = v2;
  a1[53] = v3;
  MEMORY[0x2455DD830](v4);
  return a1;
}

void sub_240024DDC(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x2455DD920](v1);
  _Unwind_Resume(a1);
}

BOOL UserDict::readNextLine(uint64_t a1, void *a2, unsigned char *a3)
{
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
    return 0;
  }
  std::istream::getline[abi:ne180100](a2, (uint64_t)a3, 704);
  return *a3 != 0;
}

uint64_t UserDict::parseNextLine(uint64_t a1, uint64_t a2, unsigned char *a3, unint64_t a4, uint64_t a5)
{
  while (1)
  {
    uint64_t result = *a3;
    if (!*a3) {
      break;
    }
    if (!isspace(result))
    {
      int v11 = *a3;
      if (!*a3) {
        return 0;
      }
      uint64_t v12 = 0;
      do
      {
        if (v11 == 9 || v12 == 704) {
          break;
        }
        uint64_t result = UserDict::proofCharacter(a1, a2, v11);
        if (!result) {
          return result;
        }
        *(unsigned char *)(a4 + v12) = a3[v12];
        int v11 = a3[++v12];
      }
      while (v11);
      int v13 = (unsigned char *)(a4 + v12);
      *(unsigned char *)(a4 + v12) = 0;
      uint64_t v14 = &a3[v12];
      do
      {
        unsigned int v15 = v13;
        if ((unint64_t)v13 <= a4) {
          break;
        }
        --v13;
      }
      while (isspace(*(v15 - 1)));
      *unsigned int v15 = 0;
      while (1)
      {
        uint64_t result = *v14;
        if (result != 9 && result != 32) {
          break;
        }
        ++v14;
      }
      if (*v14)
      {
        uint64_t v16 = 0;
        do
        {
          if (v16 == 704) {
            break;
          }
          if (isspace(result))
          {
            char v17 = 32;
          }
          else
          {
            uint64_t result = UserDict::proofCharacter(a1, a2, v14[v16]);
            if (!result) {
              return result;
            }
            char v17 = v14[v16];
          }
          *(unsigned char *)(a5 + v16) = v17;
          LODWORD(result) = v14[++v16];
        }
        while (result);
        do
        {
          uint64_t v18 = v16 - 1;
          BOOL v19 = *(unsigned char *)(a5 + v16 - 1) != 32 || v16 == 1;
          --v16;
        }
        while (!v19);
        *(unsigned char *)(a5 + v18 + hashDelete(*((void **)this + 513), 1, 1) = 0;
        return 1;
      }
      return result;
    }
    ++a3;
  }
  return result;
}

uint64_t UserDict::addOneEntry(UserDict *this, const char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 < 0x81)
  {
    size_t v7 = v6 + 1;
    malloc_type_id_t v8 = 3220888891;
  }
  else
  {
    OUTLINED_FUNCTION_4_45();
  }
  uint64_t v9 = (char *)malloc_type_malloc(v7, v8);
  if (!v9) {
    return 2;
  }
  if (strlen(__s) < 0x81)
  {
    strcpy(v9, __s);
  }
  else
  {
    strncpy(v9, __s, 0x80uLL);
    if (strlen(__s) >= 0x80) {
      v9[128] = 0;
    }
  }
  size_t v10 = strlen(a3);
  if (v10 < 0x201)
  {
    size_t v11 = v10 + 1;
    malloc_type_id_t v12 = 3766453158;
  }
  else
  {
    OUTLINED_FUNCTION_4_45();
  }
  int v13 = (char *)malloc_type_malloc(v11, v12);
  if (!v13) {
    return 2;
  }
  if (strlen(a3) < 0x201)
  {
    strcpy(v13, a3);
  }
  else
  {
    strncpy(v13, a3, 0x200uLL);
    if (strlen(a3) >= 0x200) {
      v13[512] = 0;
    }
  }
  int inserted = hashInsertString(*((void *)this + 513), v9, (uint64_t)v13);
  uint64_t result = 2;
  if (inserted)
  {
    *((_DWORD *)this + 1028) = 2;
    return 0;
  }
  return result;
}

void std::ifstream::close(void *a1)
{
  if (!std::filebuf::close())
  {
    uint64_t v2 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
    std::ios_base::setstate[abi:ne180100](v2, 4);
  }
}

uint64_t *std::ifstream::~ifstream(uint64_t *a1)
{
  return a1;
}

uint64_t std::istream::getline[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = std::ios::widen[abi:ne180100]((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), 10);
  return MEMORY[0x270F986B8](a1, a2, a3, v6);
}

int isspace(int _c)
{
  return __istype(_c, 0x4000uLL);
}

{
  return MEMORY[0x270ED9F20](*(void *)&_c);
}

uint64_t UserDict::proofCharacter(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  v13[1] = 0;
  size_t v11 = &v12;
  int v10 = 0;
  uint64_t v9 = &v10;
  v13[0] = a3;
  char v8 = 0;
  __int16 v7 = 0;
  uint64_t v6 = 0;
  int v5 = 0;
  uint64_t v4 = 0;
  return non_unique_value(a2, *(char *)(*(void *)(a2 + 208) + 120), 0, v13, &v11, &v9, (uint64_t)&v8, &v7, &v6, &v5, &v4);
}

uint64_t UserDict::saveDictionary(UserDict *this, const char *a2)
{
  v13[71] = *MEMORY[0x263EF8340];
  std::ofstream::basic_ofstream(v13);
  std::ofstream::open();
  if (*((unsigned char *)&v13[4] + *(void *)(v13[0] - 24)))
  {
    uint64_t v10 = 1;
  }
  else
  {
    uint64_t v4 = *((void *)this + 513);
    if (v4)
    {
      if (hashIterConstruct((uint64_t)v12, v4))
      {
        do
        {
          int v5 = (char *)hashIterString((uint64_t)v12);
          uint64_t v6 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, v5);
          __int16 v7 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "\t");
          char v8 = (char *)hashIterRef((uint64_t)v12);
          uint64_t v9 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, v8);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v9);
        }
        while (hashIterNext((uint64_t)v12));
      }
      std::ofstream::close(v13);
      chmod(a2, 0x180u);
    }
    else
    {
      std::ofstream::close(v13);
      chmod(a2, 0x180u);
    }
    uint64_t v10 = 0;
  }
  std::ofstream::~ofstream(v13);
  return v10;
}

void sub_240025420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ofstream::~ofstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::ofstream::basic_ofstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C310] + 24;
  *a1 = MEMORY[0x263F8C310] + 24;
  uint64_t v3 = MEMORY[0x263F8C310] + 64;
  a1[52] = MEMORY[0x263F8C310] + 64;
  uint64_t v4 = a1 + 1;
  std::ostream::basic_ostream[abi:ne180100](a1, (uint64_t *)(MEMORY[0x263F8C2B0] + 8), a1 + 1);
  *a1 = v2;
  a1[52] = v3;
  MEMORY[0x2455DD830](v4);
  return a1;
}

void sub_2400254F8(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x2455DD920](v1);
  _Unwind_Resume(a1);
}

void std::ofstream::close(void *a1)
{
  if (!std::filebuf::close())
  {
    uint64_t v2 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
    std::ios_base::setstate[abi:ne180100](v2, 4);
  }
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
}

void *std::endl[abi:ne180100]<char,std::char_traits<char>>(void *a1)
{
  return a1;
}

uint64_t *std::ofstream::~ofstream(uint64_t *a1)
{
  return a1;
}

uint64_t UserDict::update(UserDict *this, char *a2, const char *a3)
{
  uint64_t v6 = *((void *)this + 513);
  if (!v6)
  {
    if (!UserDict::buildHashTable(this, 256)) {
      return 2;
    }
    uint64_t v6 = *((void *)this + 513);
  }
  if (hashLookupString(v6, a2))
  {
    hashDeleteString(*((void *)this + 513), a2, 1, 1);
    if (!a3)
    {
      uint64_t result = 0;
      *((_DWORD *)this + 1028) = 2;
      return result;
    }
  }
  else if (!a3)
  {
    return 0;
  }
  return UserDict::addOneEntry(this, a2, a3);
}

uint64_t UserDict::findFirst(UserDict *this, const char **a2, const char **a3)
{
  uint64_t v4 = *((void *)this + 513);
  if (!v4) {
    return 4;
  }
  uint64_t v6 = (char *)this + 4120;
  if (!hashIterConstruct((uint64_t)this + 4120, v4)) {
    return 4;
  }
  *a2 = (const char *)hashIterString((uint64_t)v6);
  __int16 v7 = (const char *)hashIterRef((uint64_t)v6);
  uint64_t result = 0;
  *a3 = v7;
  return result;
}

uint64_t UserDict::findNext(UserDict *this, const char **a2, const char **a3)
{
  int v5 = (char *)this + 4120;
  if (!hashIterNext((uint64_t)this + 4120)) {
    return 4;
  }
  *a2 = (const char *)hashIterString((uint64_t)v5);
  uint64_t v6 = (const char *)hashIterRef((uint64_t)v5);
  uint64_t result = 0;
  *a3 = v6;
  return result;
}

uint64_t UserDict::lookup(UserDict *this, char *a2)
{
  if (a2 && *a2 && (uint64_t v2 = *((void *)this + 513)) != 0) {
    return hashLookupString(v2, a2);
  }
  else {
    return 0;
  }
}

void DictionarySet::DictionarySet(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = a2;
  OUTLINED_FUNCTION_0_60();
}

{
  *(void *)(a1 + 32) = a2;
  OUTLINED_FUNCTION_0_60();
}

{
  *(void *)(a1 + 32) = a2;
  OUTLINED_FUNCTION_0_60();
}

void sub_24002594C(_Unwind_Exception *a1)
{
}

void sub_2400259F0(_Unwind_Exception *a1)
{
}

void DictionarySet::~DictionarySet(UserDict **this)
{
  if (*this) {
    UserDict::~UserDict(*this);
  }
  OUTLINED_FUNCTION_1_53();
  if (this[1]) {
    UserDict::~UserDict(this[1]);
  }
  OUTLINED_FUNCTION_1_53();
  if (this[2]) {
    UserDict::~UserDict(this[2]);
  }
  OUTLINED_FUNCTION_1_53();
  uint64_t v2 = *((void *)this[4] + 26);
  if (*(void *)this[3] == *(void *)(v2 + 112)) {
    *(void *)(v2 + 112) = 0;
  }
}

void sub_240025A98(_Unwind_Exception *a1)
{
}

uint64_t DictionarySet::load()
{
  return UserDict::loadDictionary();
}

uint64_t DictionarySet::save(uint64_t a1, int a2, char *a3)
{
  return UserDict::saveDictionary(*(UserDict **)(a1 + 8 * a2), a3);
}

uint64_t DictionarySet::updateEntry(uint64_t a1, int a2, char *a3, char *a4)
{
  return UserDict::update(*(UserDict **)(a1 + 8 * a2), a3, a4);
}

uint64_t DictionarySet::findFirst(uint64_t a1, int a2, const char **a3, const char **a4)
{
  return UserDict::findFirst(*(UserDict **)(a1 + 8 * a2), a3, a4);
}

uint64_t DictionarySet::findNext(uint64_t a1, int a2, const char **a3, const char **a4)
{
  return UserDict::findNext(*(UserDict **)(a1 + 8 * a2), a3, a4);
}

uint64_t DictionarySet::lookup(uint64_t a1, int a2, char *a3)
{
  return UserDict::lookup(*(UserDict **)(a1 + 8 * a2), a3);
}

uint64_t UserDict::lookupAndTranslate(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  if (!*(void *)(a1 + 4104)) {
    return 2;
  }
  if (!sync_in_stm()
    || !sync_in_stm()
    || !extract_string((uint64_t)a2, *(char *)(a2[26] + 120), a3, a4, (char *)(a1 + 4144), 80))
  {
    return 3;
  }
  uint64_t v8 = hashLookupString(*(void *)(a1 + 4104), (char *)(a1 + 4144));
  if (!v8) {
    return 5;
  }
  uint64_t v9 = (char *)v8;
  del_two_point(a2, *(unsigned char *)(a2[26] + 120), a3, a4);
  *(_DWORD *)(a2[23] + 452) = 1;
  if (insert_string(a2, *(char *)(a2[26] + 120), a4, v9)) {
    return 0;
  }
  else {
    return 3;
  }
}

uint64_t UserDict::lookupUndo(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = (char *)(a1 + 4144);
  if (!*(unsigned char *)(a1 + 4144)) {
    return 5;
  }
  del_two_point(a2, *(unsigned char *)(a2[26] + 120), a3, a4);
  *(_DWORD *)(a2[23] + 452) = 1;
  if (insert_string(a2, *(char *)(a2[26] + 120), a4, v4)) {
    return 0;
  }
  else {
    return 3;
  }
}

uint64_t std::ifstream::~ifstream(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v2 - 24)) = a2[3];
  MEMORY[0x2455DD840](a1 + 2);
  return std::istream::~istream();
}

void sub_240025D74(_Unwind_Exception *a1)
{
}

int __istype(__darwin_ct_rune_t _c, unint64_t _f)
{
  if (_c <= 0x7F) {
    BOOL v2 = (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * _c + 60) & _f) == 0;
  }
  else {
    BOOL v2 = __maskrune(_c, _f) == 0;
  }
  return !v2;
}

uint64_t std::ofstream::~ofstream(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v2 - 24)) = a2[3];
  MEMORY[0x2455DD840](a1 + 1);
  return std::ostream::~ostream();
}

void sub_240025EA0(_Unwind_Exception *a1)
{
}

uint64_t *std::istream::basic_istream[abi:ne180100](uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - 24)) = a2[1];
  a1[1] = 0;
  std::ios::init[abi:ne180100]((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), a3);
  return a1;
}

void std::ios::init[abi:ne180100](std::ios_base *a1, void *a2)
{
  a1[1].__vftable = 0;
  a1[1].__fmtflags_ = -1;
}

void std::ios_base::setstate[abi:ne180100](std::ios_base *a1, int a2)
{
}

uint64_t std::ios::widen[abi:ne180100](const std::ios_base *a1, uint64_t a2)
{
  std::ios_base::getloc(a1);
  uint64_t v3 = std::use_facet[abi:ne180100]<std::ctype<char>>(&v6);
  uint64_t v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, a2);
  std::locale::~locale(&v6);
  return v4;
}

void sub_240026034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

const std::locale::facet *std::use_facet[abi:ne180100]<std::ctype<char>>(const std::locale *a1)
{
  return std::locale::use_facet(a1, MEMORY[0x263F8C108]);
}

uint64_t *std::ostream::basic_ostream[abi:ne180100](uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - 24)) = a2[1];
  std::ios::init[abi:ne180100]((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), a3);
  return a1;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2455DD890](v12, a1);
  if (v12[0])
  {
    std::locale v6 = (const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
    uint64_t rdbuf = (uint64_t)v6->__rdbuf_;
    std::ios_base::fmtflags fmtflags = v6->__fmtflags_;
    std::string::value_type v9 = std::ios::fill[abi:ne180100](v6);
    if ((fmtflags & 0xB0) == 0x20) {
      uint64_t v10 = a2 + a3;
    }
    else {
      uint64_t v10 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(rdbuf, a2, v10, a2 + a3, (uint64_t)v6, v9)) {
      std::ios_base::setstate[abi:ne180100]((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), 5);
    }
  }
  MEMORY[0x2455DD8A0](v12);
  return a1;
}

void sub_2400261F4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x2455DD8A0](&a9);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x2400261D8);
}

void sub_240026238(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::string::value_type __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if ((a3 - a2 < 1 || (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) == a3 - a2)
      && (v12 < 1
       || ((std::string::__init(&v17, v12, __c), (v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
         ? (int v13 = &v17)
         : (int v13 = (std::string *)v17.__r_.__value_.__r.__words[0]),
           uint64_t v14 = (*(uint64_t (**)(uint64_t, std::string *, int64_t))(*(void *)v6 + 96))(v6, v13, v12), std::string::~string(&v17), v14 == v12))&& ((v15 = a4 - a3, v15 < 1)|| (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15))
    {
      *(void *)(a5 + 24) = 0;
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

void sub_2400263B0(_Unwind_Exception *a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::ios::fill[abi:ne180100](const std::ios_base *a1)
{
  std::ios_base::fmtflags fmtflags = a1[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::fmtflags fmtflags = std::ios::widen[abi:ne180100](a1, 32);
    a1[1].__fmtflags_ = fmtflags;
  }
  return (char)fmtflags;
}

void OUTLINED_FUNCTION_0_60()
{
  operator new();
}

void OUTLINED_FUNCTION_1_53()
{
  JUMPOUT(0x2455DD950);
}

uint64_t OUTLINED_FUNCTION_2_50(uint64_t result)
{
  *(void *)(result + 4104) = 0;
  *(_DWORD *)(result + 4112) = 0;
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 4144) = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_3_46(uint64_t result)
{
  *(void *)(result + 4104) = 0;
  *(_DWORD *)(result + 4112) = 0;
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 4144) = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_5_42()
{
  *(void *)(v0 + 24) = *(void *)(v1 + 208) + 112;
  return v0;
}

void *settvar_s(uint64_t a1, unsigned __int8 *a2, unsigned __int8 a3)
{
  unsigned __int8 v8 = a3;
  OUTLINED_FUNCTION_0_61();
  if (v6) {
    uint64_t v4 = OUTLINED_FUNCTION_9_41();
  }
  return OUTLINED_FUNCTION_8_41((uint64_t)v4, *a2, v5, &v8);
}

void *settvar_l(uint64_t a1, unsigned __int8 *a2, __int16 a3)
{
  __int16 v8 = a3;
  OUTLINED_FUNCTION_0_61();
  if (v6) {
    uint64_t v4 = OUTLINED_FUNCTION_9_41();
  }
  return OUTLINED_FUNCTION_8_41((uint64_t)v4, *a2, v5, (unsigned __int8 *)&v8);
}

void *settvar_lng(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v8 = a3;
  OUTLINED_FUNCTION_0_61();
  if (v6) {
    uint64_t v4 = OUTLINED_FUNCTION_9_41();
  }
  return OUTLINED_FUNCTION_8_41((uint64_t)v4, *a2, v5, (unsigned __int8 *)&v8);
}

void *settvar_i(uint64_t a1, unsigned __int8 *a2, __int16 a3)
{
  __int16 v8 = a3;
  OUTLINED_FUNCTION_0_61();
  if (v6) {
    uint64_t v4 = OUTLINED_FUNCTION_9_41();
  }
  return OUTLINED_FUNCTION_8_41((uint64_t)v4, *a2, v5, (unsigned __int8 *)&v8);
}

void *settvar_f(double a1, uint64_t a2, unsigned __int8 *a3)
{
  double v8 = a1;
  OUTLINED_FUNCTION_0_61();
  if (v6) {
    uint64_t v4 = OUTLINED_FUNCTION_9_41();
  }
  return OUTLINED_FUNCTION_8_41((uint64_t)v4, *a3, v5, (unsigned __int8 *)&v8);
}

void settvar_v(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  OUTLINED_FUNCTION_0_61();
  if (v6) {
    save_var(a1, a2);
  }
  v7[0] = 0;
  v7[1] = 0;
  vinitloc_new(a1, (uint64_t)v7, a3);
  vinitflds(a1, *(unsigned __int8 *)a2, a2 + 8, v7[0]);
  if (((__int16)*a3 & 0x80000000) == 0) {
    OUTLINED_FUNCTION_11_41();
  }
}

void copyvar(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  OUTLINED_FUNCTION_0_61();
  if (v6) {
    save_var(a1, a2);
  }
  v8[0] = 0;
  v8[1] = 0;
  v7[0] = 0;
  v7[1] = 0;
  vinitloc_new(a1, (uint64_t)v8, a2);
  vinitloc_new(a1, (uint64_t)v7, a3);
  vassign(a1, v8, v7);
  if (((__int16)*a2 & 0x80000000) == 0) {
    a2[1] = -1;
  }
  if (((__int16)*a3 & 0x80000000) == 0) {
    OUTLINED_FUNCTION_11_41();
  }
}

void c_assvar(uint64_t a1, unsigned __int16 *a2)
{
  OUTLINED_FUNCTION_0_61();
  if (v4) {
    save_var(v3, a2);
  }
  if (((__int16)*a2 & 0x80000000) == 0) {
    OUTLINED_FUNCTION_11_41();
  }
}

void assok(uint64_t a1, __int16 *a2)
{
  if ((*a2 & 0x80000000) == 0) {
    a2[1] = -1;
  }
}

void noass(uint64_t a1, __int16 *a2)
{
  if ((*a2 & 0x80000000) == 0) {
    a2[1] = -1;
  }
}

__n128 savescptr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 192);
  if (*(unsigned char *)(v6 + 8096))
  {
    save_var(a1, (unsigned __int16 *)a3);
    uint64_t v6 = *(void *)(a1 + 192);
  }
  *(void *)(a3 + 8) = *(void *)(v6 + 8080);
  uint64_t v7 = *(void *)(a1 + 200);
  uint64_t v8 = *(int *)(v7 + 288);
  uint64_t v9 = *(void *)(v7 + 1720) - v8;
  int v10 = *(_DWORD *)(v7 + 1728);
  *(unsigned char *)uint64_t v9 = 3;
  *(void *)(v9 + 8) = a2;
  uint64_t v11 = *(int *)(v7 + 284);
  uint64_t v12 = v9 - v11;
  *(void *)(v7 + 1720) = v12;
  *(_DWORD *)(v7 + 1728) = v10 - (v8 + v11);
  *(unsigned char *)uint64_t v12 = 1;
  __n128 result = *(__n128 *)(v6 + 8080);
  *(__n128 *)(v12 + 8) = result;
  return result;
}

uint64_t savetok(uint64_t a1, unsigned __int16 *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v10 = 0;
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(a1 + 192) + 8088) + 3;
  int v4 = (unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 192) + 8080) + 8 * v3) & 0xFFFFFFFFFFFFFFFCLL);
  if (!v4)
  {
LABEL_4:
    uint64_t v6 = 1;
    uint64_t result = 1;
    if ((__int16)*a2 < 0) {
      return result;
    }
    goto LABEL_5;
  }
  while ((*v4 & 2) != 0)
  {
    int v4 = (unsigned char *)(*(void *)&v4[8 * v3] & 0xFFFFFFFFFFFFFFFCLL);
    if (!v4) {
      goto LABEL_4;
    }
  }
  vinitloc_new(a1, (uint64_t)v11, a2);
  uint64_t v8 = (unsigned __int8 *)(*(void *)(a1 + 192) + 8088);
  LOWORD(v10) = *v8;
  uint64_t v9 = v4 + 16;
  BYTE2(v10) = 0;
  if (v8[8]) {
    vpush_var(a1, (uint64_t)v11);
  }
  vassign(a1, v11, &v9);
  uint64_t v6 = 0;
  uint64_t result = 0;
  if (((__int16)*a2 & 0x80000000) == 0)
  {
LABEL_5:
    a2[1] = -1;
    return v6;
  }
  return result;
}

void dur_ass(uint64_t a1, signed __int8 a2, unsigned __int16 *a3, int a4)
{
  uint64_t v6 = (unint64_t *)(a1 + 112);
  uint64_t v7 = (void *)(a1 + 144);
  int v8 = a2;
  if (vrange_2pt((uint64_t *)a1, (unint64_t *)(a1 + 112), a1 + 144, a2, a4))
  {
    if ((__int16)*a3 < 0) {
      return;
    }
  }
  else
  {
    v10[0] = 0;
    v10[1] = 0;
    uint64_t v9 = 0;
    v11[0] = &v9;
    v11[1] = (void *)65533;
    vinitloc_new(a1, (uint64_t)v10, a3);
    vassign(a1, v11, v10);
    vdur_ass((uint64_t *)a1, v6, v7, v8, v9);
    if ((__int16)*a3 < 0) {
      return;
    }
  }
  OUTLINED_FUNCTION_11_41();
}

void setscan_l(uint64_t a1)
{
  if (!OUTLINED_FUNCTION_2_51(a1) && *v1)
  {
    OUTLINED_FUNCTION_1_54();
    if (v3) {
      OUTLINED_FUNCTION_6_42(v2);
    }
  }
}

uint64_t vtstsnc_tv(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 24) & 1) == 0)
  {
    unsigned int v3 = vnormalize(a1, a2);
    uint64_t result = 1;
    if (v3 < 3) {
      return result;
    }
    *(unsigned char *)(a2 + 24) = 1;
  }
  return 0;
}

void setscan_r(uint64_t a1)
{
  if (!OUTLINED_FUNCTION_2_51(a1) && *v1)
  {
    OUTLINED_FUNCTION_1_54();
    if (v3) {
      OUTLINED_FUNCTION_5_43(v2);
    }
  }
}

uint64_t lpta_loadp_setscan_l(uint64_t a1, uint64_t a2)
{
  if (!OUTLINED_FUNCTION_3_47(a1, a2))
  {
    if (*v3)
    {
      OUTLINED_FUNCTION_1_54();
      if (v6)
      {
        uint64_t v2 = 0;
        OUTLINED_FUNCTION_6_42(v5);
      }
    }
  }
  return v2;
}

uint64_t lpta_loadp_setscan_r(uint64_t a1, uint64_t a2)
{
  if (!OUTLINED_FUNCTION_3_47(a1, a2))
  {
    if (*v3)
    {
      OUTLINED_FUNCTION_1_54();
      if (v6)
      {
        uint64_t v2 = 0;
        OUTLINED_FUNCTION_5_43(v5);
      }
    }
  }
  return v2;
}

uint64_t rpta_loadp_setscan_l(uint64_t a1, uint64_t a2)
{
  if (!OUTLINED_FUNCTION_4_46(a1, a2))
  {
    if (*v3)
    {
      OUTLINED_FUNCTION_12_40();
      if (v6)
      {
        OUTLINED_FUNCTION_7_42(v5);
        *(_WORD *)(v7 + hashDelete(*((void **)this + 513), 1, 1) = 256;
      }
    }
  }
  return v2;
}

uint64_t rpta_loadp_setscan_r(uint64_t a1, uint64_t a2)
{
  if (!OUTLINED_FUNCTION_4_46(a1, a2))
  {
    if (*v3)
    {
      OUTLINED_FUNCTION_12_40();
      if (v6)
      {
        OUTLINED_FUNCTION_7_42(v5);
        *(_WORD *)(v7 + hashDelete(*((void **)this + 513), 1, 1) = 257;
      }
    }
  }
  return v2;
}

void setscan_nof_l(uint64_t a1)
{
  if (!OUTLINED_FUNCTION_2_51(a1) && *v1)
  {
    OUTLINED_FUNCTION_1_54();
    if (v3)
    {
      OUTLINED_FUNCTION_10_41(v2);
      *(_WORD *)(v4 + hashDelete(*((void **)this + 513), 1, 1) = 0;
    }
  }
}

uint64_t setscan_nof_r(uint64_t a1)
{
  if (OUTLINED_FUNCTION_2_51(a1) || !*v1) {
    return 1;
  }
  OUTLINED_FUNCTION_1_54();
  uint64_t result = 1;
  if (v4)
  {
    OUTLINED_FUNCTION_10_41(v3);
    *(_WORD *)(v6 + hashDelete(*((void **)this + 513), 1, 1) = v5;
    return 0;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_51(uint64_t a1)
{
  return vtstsnc_tv(a1, a1 + 112);
}

uint64_t OUTLINED_FUNCTION_3_47(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 136) = 1;
  *(void *)(a1 + 128) = 0;
  return vtstsnc_tv(a1, a1 + 112);
}

uint64_t OUTLINED_FUNCTION_4_46(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 168) = 1;
  *(void *)(a1 + 144) = *(void *)(a2 + 8);
  *(void *)(a1 + 128) = 0;
  return vtstsnc_tv(a1, a1 + 112);
}

void OUTLINED_FUNCTION_5_43(uint64_t a1@<X8>)
{
  *(void *)(v1 + 8080) = a1;
  *(unsigned char *)(v1 + 8088) = v2;
  *(_WORD *)(v1 + 8089) = 257;
}

void OUTLINED_FUNCTION_6_42(uint64_t a1@<X8>)
{
  *(void *)(v1 + 8080) = a1;
  *(unsigned char *)(v1 + 8088) = v2;
  *(_WORD *)(v1 + 8089) = 256;
}

void OUTLINED_FUNCTION_7_42(uint64_t a1@<X8>)
{
  *(void *)(v1 + 8080) = a1;
  *(unsigned char *)(v1 + 8088) = v2;
}

void *OUTLINED_FUNCTION_8_41(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 *a4)
{
  return vinitflds(v5, a2, v4, a4);
}

void *OUTLINED_FUNCTION_9_41()
{
  return save_var(v1, v0);
}

void OUTLINED_FUNCTION_10_41(uint64_t a1@<X8>)
{
  *(void *)(v1 + 8080) = a1;
  *(unsigned char *)(v1 + 8088) = v2;
}

void OUTLINED_FUNCTION_11_41()
{
  *(_WORD *)(v0 + 2) = -1;
}

uint64_t chstream(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = 1;
  while (1)
  {
    uint64_t v7 = a1[24];
    if (*(void *)(*(void *)(v7 + 8080) + 8 * (int)(*(_DWORD *)(v7 + 9084) + a3))) {
      break;
    }
    if (!vscanadv(a1, 0, 1)) {
      return v6;
    }
  }
  uint64_t v6 = 0;
  uint64_t v8 = a1[25];
  uint64_t v9 = *(int *)(v8 + 288);
  uint64_t v10 = *(void *)(v8 + 1720) - v9;
  *(unsigned char *)uint64_t v10 = 3;
  int v11 = *(_DWORD *)(v8 + 1728);
  *(void *)(v10 + 8) = a2;
  uint64_t v12 = *(int *)(v8 + 284);
  uint64_t v13 = v10 - v12;
  *(void *)(v8 + 1720) = v13;
  *(_DWORD *)(v8 + 1728) = v11 - (v9 + v12);
  *(unsigned char *)uint64_t v13 = 1;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)(v7 + 8080);
  *(unsigned char *)(a1[35] + *(unsigned __int8 *)(a1[33] + a3)) = 1;
  *(unsigned char *)(a1[24] + 8088) = a3;
  return v6;
}

BOOL advanc(void *a1)
{
  return vscanadv(a1, 0, 1) == 0;
}

BOOL advance_tok()
{
  return vscanadvOverToken() == 0;
}

BOOL conj_merge(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char **)(a2 + 8);
  int v5 = visleft(a1, *(void *)(*(void *)(a1 + 192) + 8080), (unint64_t)v4);
  uint64_t v6 = *(void *)(a1 + 192);
  unint64_t v7 = *(void *)(v6 + 8080);
  if (v5)
  {
    uint64_t v8 = (unsigned __int8 *)(v6 + 8088);
    while (v4 != (unsigned char *)v7)
    {
      if (!v4 || (*v4 & 2) == 0) {
        return 1;
      }
      char v4 = (unsigned char *)(*(void *)&v4[8 * *v8 + 24] & 0xFFFFFFFFFFFFFFFCLL);
    }
    if (v8[1]) {
      return 0;
    }
    goto LABEL_17;
  }
  int v9 = visright(a1, v7, (uint64_t)v4);
  uint64_t v10 = *(void *)(a1 + 192);
  unint64_t v7 = *(void *)(v10 + 8080);
  if (v9)
  {
    while (v4 != (unsigned char *)v7)
    {
      if (!v4 || (*v4 & 2) == 0) {
        return 1;
      }
      char v4 = (unsigned char *)(*(void *)&v4[8 * *(_DWORD *)(v10 + 9084) + 8 * *(unsigned __int8 *)(v10 + 8088)] & 0xFFFFFFFFFFFFFFFCLL);
    }
    if (*(unsigned char *)(v10 + 8089) != 1) {
      return 0;
    }
LABEL_17:
    *(void *)(a2 + 8) = v7;
    return 0;
  }
  return (unsigned char *)v7 != v4;
}

uint64_t addfence(uint64_t a1, char a2)
{
  return SETFENCE(a1, *(void *)(a1 + 112), a2);
}

uint64_t remfence(uint64_t a1, char a2)
{
  return UNSETFENCE(a1, *(void *)(a1 + 112), a2);
}

uint64_t proj_def_mult(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = result;
  uint64_t v7 = a2;
  if (a2)
  {
    do
    {
      *(unsigned char *)(v6 + 136) = 1;
      *(void *)(v6 + 112) = *(void *)(a4 + 8);
      *(void *)(v6 + 128) = 0;
      ++a3;
      uint64_t result = proj_def(v6);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t proj_def(uint64_t a1)
{
  if (!OUTLINED_FUNCTION_10_42(a1)
    || (uint64_t result = vdef_proj(v1, *(void *)(v1 + 112), v2), !result))
  {
    forceErrorBacktrack(v1);
  }
  return result;
}

uint64_t proj_l(uint64_t a1)
{
  if (!vsync_tv(a1, a1 + 144)
    || (uint64_t v2 = OUTLINED_FUNCTION_19_35(), result = vproj_l(v2, v3, v4, v5), !result))
  {
    forceErrorBacktrack(a1);
  }
  return result;
}

uint64_t proj_r(uint64_t a1)
{
  if (!OUTLINED_FUNCTION_10_42(a1)
    || (uint64_t v2 = OUTLINED_FUNCTION_19_35(), result = vproj_r(v2, v3, v4, v5), !result))
  {
    forceErrorBacktrack(v1);
  }
  return result;
}

uint64_t merge(uint64_t a1)
{
  if (!vsync_tv(a1, a1 + 112) || !vsync_tv(a1, a1 + 144)) {
    forceErrorBacktrack(a1);
  }
  if (!vmergable(a1, *(void *)(a1 + 112), *(void *)(a1 + 144))) {
    forceErrorBacktrack(a1);
  }
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 144);
  return vmerge(a1, v2, v3);
}

uint64_t initdelta(uint64_t a1, unsigned int a2, char *a3)
{
  if (a2)
  {
    if (*(unsigned __int8 *)(a1 + 288) == a2)
    {
      freeDeltaHeapTo(a1, *(void *)(*(void *)(a1 + 200) + 8), 0);
      deltaReinit(a1, 1);
    }
    else
    {
      uint64_t v7 = a2;
      do
      {
        if (!vinit_stm(a1, *a3)) {
          forceErrorBacktrack(a1);
        }
        --v7;
        ++a3;
      }
      while (v7);
    }
  }
  else
  {
    for (unsigned int i = 0; i < *(unsigned __int8 *)(a1 + 288); ++i)
    {
      if (!vinit_stm(a1, (char)i)) {
        forceErrorBacktrack(a1);
      }
    }
  }
  return vscaninit(a1);
}

uint64_t delete_1pt(uint64_t a1)
{
  if (!OUTLINED_FUNCTION_10_42(a1) || (uint64_t result = vdel_1pt(v1, v2, *(void *)(v1 + 112)), !result))
  {
    forceErrorBacktrack(v1);
  }
  return result;
}

uint64_t delete_2pt(uint64_t a1, char a2, int a3)
{
  if (vrange_2pt((uint64_t *)a1, (unint64_t *)(a1 + 112), a1 + 144, a2, a3)) {
    return 1;
  }
  vdel_2pt((uint64_t *)a1, a2, *(void *)(a1 + 112), *(void *)(a1 + 144));
  return 0;
}

uint64_t mark_v(uint64_t a1, unsigned __int8 a2, uint64_t a3, unsigned __int16 *a4, int a5)
{
  int v8 = a3;
  if (OUTLINED_FUNCTION_11_42(a1, a2, a3, (uint64_t)a4, a5))
  {
    uint64_t v9 = 1;
    uint64_t result = 1;
    if ((__int16)*a4 < 0) {
      return result;
    }
    goto LABEL_3;
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  vinitloc_new(v6, (uint64_t)&v27, a4);
  if ((unsigned __int16)v28 == *(unsigned __int16 *)&vstmtbl[12 * v5 + 1][40 * v8 + 30])
  {
    uint64_t v19 = OUTLINED_FUNCTION_7_43(v11, v12, v13, v14, v15, v16, v17, v18, v27);
    if ((unsigned __int16)v28 >= 0xFFFAu) {
      OUTLINED_FUNCTION_7_43(v19, v20, v21, v22, v23, v24, v25, v26, v27);
    }
  }
  uint64_t v9 = 0;
  uint64_t result = 0;
  if (((__int16)*a4 & 0x80000000) == 0)
  {
LABEL_3:
    a4[1] = -1;
    return v9;
  }
  return result;
}

uint64_t mark_s()
{
  OUTLINED_FUNCTION_14_39();
  char v11 = v1;
  if (OUTLINED_FUNCTION_4_47(v2, v3, v4, v1, v5)) {
    return 1;
  }
  OUTLINED_FUNCTION_0_62();
  if (v10 == -1) {
    OUTLINED_FUNCTION_3_48(v7, v8, v9, *(void *)(v0 + 112), *(void *)(v0 + 144), (uint64_t)&v11);
  }
  return 0;
}

uint64_t mark_l(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v11 = a4;
  if (OUTLINED_FUNCTION_4_47(a1, a2, a3, a4, a5)) {
    return 1;
  }
  OUTLINED_FUNCTION_0_62();
  if (v10 == -2) {
    OUTLINED_FUNCTION_3_48(v7, v8, v9, *(void *)(a1 + 112), *(void *)(a1 + 144), (uint64_t)&v11);
  }
  return 0;
}

uint64_t mark_lng()
{
  OUTLINED_FUNCTION_14_39();
  uint64_t v11 = v1;
  if (OUTLINED_FUNCTION_4_47(v2, v3, v4, v1, v5)) {
    return 1;
  }
  OUTLINED_FUNCTION_0_62();
  if (v10 == -3) {
    OUTLINED_FUNCTION_3_48(v7, v8, v9, *(void *)(v0 + 112), *(void *)(v0 + 144), (uint64_t)&v11);
  }
  return 0;
}

uint64_t mark_i(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v11 = a4;
  if (OUTLINED_FUNCTION_4_47(a1, a2, a3, a4, a5)) {
    return 1;
  }
  OUTLINED_FUNCTION_0_62();
  if (v10 == -4) {
    OUTLINED_FUNCTION_3_48(v7, v8, v9, *(void *)(a1 + 112), *(void *)(a1 + 144), (uint64_t)&v11);
  }
  return 0;
}

uint64_t mark_f()
{
  OUTLINED_FUNCTION_14_39();
  uint64_t v12 = v1;
  if (OUTLINED_FUNCTION_4_47(v2, v3, v4, v5, v6)) {
    return 1;
  }
  OUTLINED_FUNCTION_0_62();
  if (v11 == -5) {
    OUTLINED_FUNCTION_3_48(v8, v9, v10, *(void *)(v0 + 112), *(void *)(v0 + 144), (uint64_t)&v12);
  }
  return 0;
}

uint64_t insert_2pt(uint64_t a1, unsigned __int8 a2, uint64_t a3, unsigned char *a4, int a5)
{
  int v8 = a3;
  if (OUTLINED_FUNCTION_11_42(a1, a2, a3, (uint64_t)a4, a5)) {
    return 1;
  }
  visnonseq((uint64_t)v6, v5, v6[14], v6[18]);
  if (ins_tokens(v6, v5, a4, v8)) {
    return 0;
  }
  else {
    return 245;
  }
}

void insert_2ptv()
{
  OUTLINED_FUNCTION_5_44();
  if (vrange_2pt(v5, v6, v7, v8, v9))
  {
    if ((*v0 & 0x80000000) == 0) {
LABEL_3:
    }
      OUTLINED_FUNCTION_8_42();
  }
  else
  {
    OUTLINED_FUNCTION_15_38();
    if (v4 < 0 && (uint64_t v10 = STMTYP(v3), v4 != v10))
    {
      int v21 = STMTYP(v3);
      switch(v21)
      {
        case -5:
          uint64_t v22 = v1[24];
          uint64_t v23 = 8256;
          goto LABEL_18;
        case -4:
        case -2:
          uint64_t v22 = v1[24];
          uint64_t v23 = 8242;
          goto LABEL_18;
        case -3:
          uint64_t v22 = v1[24];
          uint64_t v23 = 8200;
          goto LABEL_18;
        case -1:
          uint64_t v22 = v1[24];
          uint64_t v23 = 8194;
LABEL_18:
          uint64_t v36 = v22 + v23;
          break;
        default:
          break;
      }
      OUTLINED_FUNCTION_1_55((uint64_t)vstmtbl, v32, v34, v36, v21, v38);
      OUTLINED_FUNCTION_17_37(v24, v25, v26, v27, v28, v29, v30, v31, v33, v35, v37);
      OUTLINED_FUNCTION_13_39();
    }
    else
    {
      OUTLINED_FUNCTION_2_52(v10, v11, v12, v13, v14, v15, v16, v17, v32);
      OUTLINED_FUNCTION_12_41();
    }
    if (!vins_tok(v1, v2, v18, v19, v20)) {
      forceErrorBacktrack((uint64_t)v1);
    }
    if ((*v0 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
}

uint64_t insert_l()
{
  OUTLINED_FUNCTION_18_35();
  if (!vrange_l() || (uint64_t result = OUTLINED_FUNCTION_16_37(), !result))
  {
    forceErrorBacktrack(v0);
  }
  return result;
}

uint64_t insert_r()
{
  OUTLINED_FUNCTION_18_35();
  if (!vrange_r() || (uint64_t result = OUTLINED_FUNCTION_16_37(), !result))
  {
    forceErrorBacktrack(v0);
  }
  return result;
}

void insert_lv(uint64_t *a1, unsigned int a2, __int16 *a3)
{
  if (!vrange_l()) {
    forceErrorBacktrack((uint64_t)a1);
  }
  OUTLINED_FUNCTION_15_38();
  if (v3 < 0 && (uint64_t v7 = STMTYP((char)a2), v3 != v7))
  {
    int v18 = STMTYP((char)a2);
    switch(v18)
    {
      case -5:
        uint64_t v19 = a1[24];
        uint64_t v20 = 8256;
        goto LABEL_16;
      case -4:
      case -2:
        uint64_t v19 = a1[24];
        uint64_t v20 = 8242;
        goto LABEL_16;
      case -3:
        uint64_t v19 = a1[24];
        uint64_t v20 = 8200;
        goto LABEL_16;
      case -1:
        uint64_t v19 = a1[24];
        uint64_t v20 = 8194;
LABEL_16:
        uint64_t v33 = v19 + v20;
        break;
      default:
        break;
    }
    OUTLINED_FUNCTION_1_55((uint64_t)vstmtbl, v29, v31, v33, v18, v35);
    OUTLINED_FUNCTION_17_37(v21, v22, v23, v24, v25, v26, v27, v28, v30, v32, v34);
    OUTLINED_FUNCTION_13_39();
  }
  else
  {
    OUTLINED_FUNCTION_2_52(v7, v8, v9, v10, v11, v12, v13, v14, v29);
    OUTLINED_FUNCTION_12_41();
  }
  if (!vins_tok(a1, a2, v15, v16, v17)) {
    forceErrorBacktrack((uint64_t)a1);
  }
  if ((*a3 & 0x80000000) == 0) {
    OUTLINED_FUNCTION_8_42();
  }
}

void insert_rv()
{
  OUTLINED_FUNCTION_5_44();
  if (!vrange_r()) {
    forceErrorBacktrack((uint64_t)v1);
  }
  OUTLINED_FUNCTION_15_38();
  if (v4 < 0 && (uint64_t v5 = STMTYP(v3), v4 != v5))
  {
    int v16 = STMTYP(v3);
    switch(v16)
    {
      case -5:
        uint64_t v17 = v1[24];
        uint64_t v18 = 8256;
        break;
      case -4:
      case -2:
        uint64_t v17 = v1[24];
        uint64_t v18 = 8242;
        break;
      case -3:
        uint64_t v17 = v1[24];
        uint64_t v18 = 8200;
        break;
      case -1:
        uint64_t v17 = v1[24];
        uint64_t v18 = 8194;
        break;
      default:
        forceErrorBacktrack((uint64_t)v1);
    }
    OUTLINED_FUNCTION_1_55((uint64_t)vstmtbl, v27, v29, v17 + v18, v16, v32);
    OUTLINED_FUNCTION_17_37(v19, v20, v21, v22, v23, v24, v25, v26, v28, v30, v31);
    OUTLINED_FUNCTION_13_39();
  }
  else
  {
    OUTLINED_FUNCTION_2_52(v5, v6, v7, v8, v9, v10, v11, v12, v27);
    OUTLINED_FUNCTION_12_41();
  }
  if (!vins_tok(v1, v2, v13, v14, v15)) {
    forceErrorBacktrack((uint64_t)v1);
  }
  if ((*v0 & 0x80000000) == 0) {
    OUTLINED_FUNCTION_8_42();
  }
}

uint64_t generate(uint64_t a1, char a2)
{
  uint64_t v4 = a1 + 112;
  uint64_t v5 = (uint64_t *)(a1 + 144);
  if (!vprt_range(a1, a1 + 112, a1 + 144)
    || (uint64_t result = vgen(a1, v4, v5, *(void *)(a1 + 192) + 8160, a2), !result))
  {
    forceErrorBacktrack(a1);
  }
  return result;
}

void gendef_framedur()
{
  OUTLINED_FUNCTION_21_31();
  OUTLINED_FUNCTION_9_42(v1, v2, v3);
  vassign(v0, &v5, &v6);
  OUTLINED_FUNCTION_20_32();
  if ((v4 & 0x80000000) == 0) {
    OUTLINED_FUNCTION_8_42();
  }
}

void gendef_timestm(uint64_t a1, char a2)
{
}

uint64_t gendef_params(uint64_t a1, char a2, unsigned int a3, char *a4)
{
  unsigned int v5 = a3;
  uint64_t v6 = *(void *)(a1 + 192);
  *(unsigned char *)(v6 + 8137) = a2;
  if ((*(unsigned char *)(v6 + 8152) & 4) != 0)
  {
    uint64_t v7 = *(void **)(v6 + 8144);
  }
  else
  {
    uint64_t v7 = dynaBufNew(a3);
    *(void *)(v6 + 8144) = v7;
  }
  for (uint64_t result = dynaBufReset((uint64_t)v7); v5; --v5)
  {
    char v9 = *a4++;
    uint64_t result = dynaBufAddChar(*(uint64_t **)(v6 + 8144), v9, 0);
  }
  *(unsigned char *)(v6 + 8152) |= 4u;
  return result;
}

void gencur_framedur()
{
  OUTLINED_FUNCTION_21_31();
  OUTLINED_FUNCTION_9_42(v1, v2, v3);
  vassign(v0, &v5, &v6);
  OUTLINED_FUNCTION_20_32();
  if ((v4 & 0x80000000) == 0) {
    OUTLINED_FUNCTION_8_42();
  }
}

void gencur_timestm(uint64_t a1, char a2)
{
}

uint64_t gencur_params(uint64_t a1, char a2, unsigned int a3, char *a4)
{
  unsigned int v5 = a3;
  uint64_t v6 = *(void *)(a1 + 192);
  *(unsigned char *)(v6 + 8169) = a2;
  if ((*(unsigned char *)(v6 + 8184) & 4) != 0)
  {
    uint64_t v7 = *(void **)(v6 + 8176);
  }
  else
  {
    uint64_t v7 = dynaBufNew(a3);
    *(void *)(v6 + 8176) = v7;
  }
  for (uint64_t result = dynaBufReset((uint64_t)v7); v5; --v5)
  {
    char v9 = *a4++;
    uint64_t result = dynaBufAddChar(*(uint64_t **)(v6 + 8176), v9, 0);
  }
  *(unsigned char *)(v6 + 8184) |= 4u;
  return result;
}

void OUTLINED_FUNCTION_1_55(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, char a6)
{
  a6 = *(unsigned char *)(*(void *)(a1 + 96 * v8 + 8) + 32);
  vinitloc_new(v7, (uint64_t)&a2, v6);
}

void OUTLINED_FUNCTION_2_52(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vinitloc_new(v10, (uint64_t)&a9, v9);
}

uint64_t OUTLINED_FUNCTION_3_48(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  return vmark(v8, v7, v6, a4, a5, a6);
}

uint64_t OUTLINED_FUNCTION_4_47(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return vrange_2pt((uint64_t *)a1, (unint64_t *)(a1 + 112), a1 + 144, v5, a5);
}

void OUTLINED_FUNCTION_6_43(char a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(a2 + v2);
  *uint64_t v3 = a1;
  v3[16] |= 2u;
}

uint64_t OUTLINED_FUNCTION_7_43(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v13 = v11[14];
  uint64_t v14 = v11[18];
  return vmark(v11, v10, v9, v13, v14, a9);
}

void OUTLINED_FUNCTION_8_42()
{
  *(_WORD *)(v0 + 2) = -1;
}

void OUTLINED_FUNCTION_9_42(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  vinitloc_new(a1, (uint64_t)va, v3);
}

uint64_t OUTLINED_FUNCTION_10_42(uint64_t a1)
{
  return vsync_tv(a1, a1 + 112);
}

uint64_t OUTLINED_FUNCTION_11_42(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, int a5)
{
  return vrange_2pt((uint64_t *)a1, (unint64_t *)(a1 + 112), a1 + 144, a2, a5);
}

uint64_t OUTLINED_FUNCTION_16_37()
{
  return ins_tokens(v0, v3, v1, v2);
}

void OUTLINED_FUNCTION_17_37(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, void *a11)
{
  vassign(v11, &a11, &a9);
}

uint64_t OUTLINED_FUNCTION_19_35()
{
  return v0;
}

void OUTLINED_FUNCTION_20_32()
{
  *(unsigned char *)(v0 + 24) |= 1u;
}

uint64_t ccode_new(uint64_t a1)
{
  int v2 = malloc_type_malloc(0x2460uLL, 0x10F004041F5ADEFuLL);
  *(void *)(a1 + 192) = v2;
  bzero(v2, 0x2460uLL);
  return ccode_misc_new(a1);
}

void ccode_delete(uint64_t a1)
{
  if (a1)
  {
    int v2 = *(void **)(a1 + 192);
    if (v2)
    {
      bzero(v2, 0x2460uLL);
      free(*(void **)(a1 + 192));
      *(void *)(a1 + 192) = 0;
    }
  }
}

uint64_t throwDeltaErrorNow(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 192) + 8012) = 1;
  return result;
}

uint64_t catchDeltaError(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 192) + 8012) = 0;
  return result;
}

uint64_t deltaErrorThrown(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 192) + 8012);
}

void forceErrorBacktrack(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 192);
  *(unsigned char *)(v1 + 8012) = 1;
  longjmp(*(int **)(v1 + 8016), 1);
}

void get_parm(uint64_t a1, uint64_t a2, __int16 *a3, __int16 a4)
{
  v14[0] = 0;
  v14[1] = 0;
  *(_WORD *)a2 = a4;
  switch(a4)
  {
    case -6:
      *(void *)(a2 + 8) = *((void *)a3 + 1);
      uint64_t v6 = *(int **)(a1 + 192);
      uint64_t v7 = *v6;
      if ((int)v7 <= 998)
      {
        *uint64_t v6 = v7 + 1;
        *(void *)&v6[2 * v7 + 2] = a2;
      }
      return;
    case -5:
      int v8 = *a3;
      switch(v8)
      {
        case -5:
          double v9 = OUTLINED_FUNCTION_3_49();
          goto LABEL_18;
        case -4:
          double v9 = (double)a3[1];
          goto LABEL_18;
        case -3:
          double v9 = (double)COERCE__INT64(OUTLINED_FUNCTION_3_49());
LABEL_18:
          *(double *)(a2 + 8) = v9;
          return;
      }
      if ((v8 & 0x80000000) == 0)
      {
        vinitloc_new(a1, (uint64_t)v14, (unsigned __int16 *)a3);
        *(double *)(a2 + 8) = (double)*(__int16 *)v14[0];
        goto LABEL_31;
      }
      return;
    case -4:
      int v10 = *a3;
      if (v10 == -5)
      {
        int v13 = (int)OUTLINED_FUNCTION_3_49();
      }
      else
      {
        if (v10 != -4)
        {
          if (v10 == -3)
          {
            *(_WORD *)(a2 + 2) = *((void *)a3 + 1);
          }
          else if ((v10 & 0x80000000) == 0)
          {
            vinitloc_new(a1, (uint64_t)v14, (unsigned __int16 *)a3);
            *(_WORD *)(a2 + 2) = *(_WORD *)v14[0];
            goto LABEL_31;
          }
          return;
        }
        LOWORD(v13) = a3[1];
      }
      *(_WORD *)(a2 + 2) = v13;
      return;
    case -3:
      int v11 = *a3;
      switch(v11)
      {
        case -5:
          uint64_t v12 = (uint64_t)OUTLINED_FUNCTION_3_49();
          goto LABEL_28;
        case -4:
          uint64_t v12 = a3[1];
          goto LABEL_28;
        case -3:
          uint64_t v12 = *((void *)a3 + 1);
LABEL_28:
          *(void *)(a2 + 8) = v12;
          return;
      }
      if ((v11 & 0x80000000) == 0)
      {
        vinitloc_new(a1, (uint64_t)v14, (unsigned __int16 *)a3);
        *(void *)(a2 + 8) = *(__int16 *)v14[0];
LABEL_31:
        if ((*a3 & 0x80000000) == 0) {
          a3[1] = -1;
        }
      }
      return;
    default:
      return;
  }
}

void vinitloc_new(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  int v5 = (__int16)*a3;
  if (v5 < 0)
  {
    *(_WORD *)(a2 + 8) = v5;
    switch(v5)
    {
      case -6:
      case -5:
      case -3:
        double v9 = (__int16 *)(a3 + 4);
        goto LABEL_9;
      case -4:
        double v9 = (__int16 *)(a3 + 1);
LABEL_9:
        char v8 = 0;
        goto LABEL_10;
      default:
        char v8 = 0;
        goto LABEL_11;
    }
  }
  uint64_t v6 = (__int16)a3[1];
  if (v6 == -1)
  {
    char v8 = 0;
    *(_WORD *)(a2 + 8) = v5;
    double v9 = (__int16 *)(a3 + 8);
LABEL_10:
    *(void *)a2 = v9;
  }
  else
  {
    *(void *)a2 = (*(uint64_t (**)(__int16 *))&vstmtbl[12 * *a3 + 2][8 * v6])((__int16 *)a3 + 8);
    uint64_t v7 = &vstmtbl[12 * (__int16)*a3 + 1][40 * (int)v6];
    *(_WORD *)(a2 + 8) = *((_WORD *)v7 + 15);
    char v8 = v7[32];
  }
LABEL_11:
  *(unsigned char *)(a2 + 10) = v8;
}

uint64_t push_ptr_init(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = 0;
  *(_WORD *)a2 = -6;
  int v2 = *(int **)(a1 + 192);
  uint64_t v3 = *v2;
  if ((int)v3 > 998) {
    return 0;
  }
  *int v2 = v3 + 1;
  *(void *)&v2[2 * v3 + 2] = a2;
  return 1;
}

uint64_t set_saved_ptrs(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 8 * (*(_DWORD *)(result + 16) & ~(*(int *)(result + 16) >> 31));
  while (v4 != v3)
  {
    int v5 = *(void **)(*(void *)(result + 24) + v3);
    if (*v5 == a2) {
      *int v5 = a3;
    }
    v3 += 8;
  }
  uint64_t v6 = *(int **)(result + 192);
  int v7 = v6[2002];
  int v8 = *v6;
  while (v8 >= 1)
  {
    for (uint64_t i = v7; i < v8; ++i)
    {
      uint64_t v10 = *(void *)&v6[2 * i + 2];
      if (*(void *)(v10 + 8) == a2) {
        *(void *)(v10 + 8) = a3;
      }
    }
    int v8 = v7 - 2;
    int v7 = v6[2 * v7];
  }
  return result;
}

uint64_t for_loop_preamble(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 192);
  uint64_t v6 = (unsigned char *)(v5 + 8088);
  *(void *)(v5 + 8056) = a3;
  *(void *)(v5 + 8064) = a2;
  *(unsigned char *)(v5 + 8096) = 0;
  *(unsigned char *)(a1 + 136) = 1;
  uint64_t v7 = *(void *)(a5 + 8);
  *(void *)(a1 + 112) = v7;
  if (!v7 || (*(void *)(v7 + 8 * (*(_DWORD *)(v5 + 9084) + a4)) & 1) == 0) {
    return 0;
  }
  *(void *)(v5 + 8080) = v7;
  *uint64_t v6 = a4;
  uint64_t v8 = 1;
  v6[2] = 1;
  *(unsigned char *)(*(void *)(a1 + 280) + *(unsigned __int8 *)(*(void *)(a1 + 264) + a4)) = 1;
  return v8;
}

uint64_t vback(void *a1, int a2)
{
  if (*(unsigned char *)(a1[24] + 8012)) {
    return -1;
  }
  while (2)
  {
    uint64_t v5 = a1[25];
    uint64_t v6 = *(void *)(v5 + 1720);
    switch(*(unsigned char *)v6)
    {
      case 0:
        OUTLINED_FUNCTION_0_63(v5);
        if (a2) {
          continue;
        }
        break;
      case 1:
        OUTLINED_FUNCTION_0_63(v5);
        *(_OWORD *)(a1[24] + 8080) = *(_OWORD *)(v6 + 8);
        continue;
      case 2:
        uint64_t v7 = *(int *)(v5 + 280);
        size_t v8 = *(int *)(v6 + 16);
        int v9 = v7 + ((v8 - 1) | 3) + 1;
        *(_DWORD *)(v5 + 1728) += v9;
        *(void *)(v5 + 1720) = v6 + v9;
        memcpy(*(void **)(v6 + 8), (const void *)(v6 + v7), v8);
        continue;
      case 3:
        OUTLINED_FUNCTION_0_63(v5);
        if (a2 || !vscanadv(a1, 0, 1)) {
          continue;
        }
        break;
      case 4:
        OUTLINED_FUNCTION_0_63(v5);
        a2 -= a2 > 0;
        continue;
      case 5:
        OUTLINED_FUNCTION_0_63(v5);
        *(void *)(v10 + 1760) = *(void *)(v6 + 8);
        continue;
      case 6:
        OUTLINED_FUNCTION_0_63(v5);
        ++a2;
        continue;
      default:
        return -1;
    }
    break;
  }
  return *(void *)(v6 + 8);
}

uint64_t vinitrun(int *a1)
{
  unint64_t v2 = 0;
  *(unsigned char *)(*((void *)a1 + 24) + 812hashDelete(*((void **)this + 513), 1, 1) = 0;
  while (1)
  {
    unint64_t v3 = *((unsigned __int8 *)a1 + 288);
    if (v2 >= v3) {
      break;
    }
    *(unsigned char *)(*((void *)a1 + 31) + v2) = 0;
    *(unsigned char *)(*((void *)a1 + 33) + v2) = *((unsigned char *)a1 + 288);
    *(unsigned char *)(*((void *)a1 + 35) + v2++) = 0;
  }
  *(unsigned char *)(*((void *)a1 + 35) + v3) = 0;
  uint64_t v5 = *((void *)a1 + 24);
  uint64_t v4 = (uint64_t *)*((void *)a1 + 25);
  uint64_t v7 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v8 = *((void *)a1 + 12);
  *(void *)(*((void *)a1 + 11) + 8) = v7;
  *(void *)(v8 + 8) = v6;
  *(unsigned char *)(v5 + 8152) = 0;
  *(unsigned char *)(v5 + 8184) = 0;
  *(_DWORD *)(v5 + 9296) = 0;
  int v9 = *(unsigned __int8 *)(v5 + 8024);
  if (v9 == 255 || v9 == 249)
  {
    uint64_t result = vdltinit((uint64_t)a1, 1);
    if (!result) {
      return result;
    }
    int v11 = (uint64_t *)*((void *)a1 + 25);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    uint64_t v14 = *((void *)a1 + 12);
    *(void *)(*((void *)a1 + 11) + 8) = v13;
    *(void *)(v14 + 8) = v12;
  }
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  *(_DWORD *)(*((void *)a1 + 23) + 452) = 0;
  while (v16 < *a1)
  {
    OUTLINED_FUNCTION_1_56();
    ++v16;
    v15 += 16;
  }
  return 1;
}

void *save_var(uint64_t a1, unsigned __int16 *a2)
{
  v4[0] = 0;
  v4[1] = 0;
  vinitloc_new(a1, (uint64_t)v4, a2);
  return vpush_var(a1, (uint64_t)v4);
}

uint64_t ventproc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a1 + 104) = 0;
  if (!a2) {
    return 1;
  }
  uint64_t v7 = *(int **)(a1 + 192);
  uint64_t v8 = *v7;
  if ((int)v8 > 998) {
    return 1;
  }
  uint64_t result = 0;
  uint64_t v10 = v7[2002];
  *uint64_t v7 = v8 + 1;
  *(void *)&v7[2 * v8 + 2] = v10;
  uint64_t v11 = *(void *)(a1 + 192);
  *(_DWORD *)(v11 + 8008) = *(_DWORD *)v11;
  *(void *)a2 = *(void *)(v11 + 8104);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v11 + 8056);
  uint64_t v12 = *(void *)(a1 + 192);
  uint64_t v13 = *(void *)(a1 + 200);
  *(unsigned char *)(a2 + 48) = *(unsigned char *)(v12 + 8096);
  uint64_t v14 = *(void *)(v13 + 1720);
  *(void *)(a2 + 56) = *(void *)(v12 + 8112);
  *(void *)(a2 + 64) = v14;
  *(void *)(a2 + 72) = *(void *)(v13 + 1760);
  *(unsigned char *)(a2 + 80) = *(unsigned char *)(v12 + 8121);
  *(void *)(a2 + 88) = *(void *)(v12 + 8016);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(v12 + 8080);
  long long v15 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 128) = v15;
  long long v16 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 160) = v16;
  uint64_t v17 = *(void *)(a1 + 192);
  uint64_t v18 = *(void *)(a1 + 200);
  *(unsigned char *)(a2 + 176) = *(unsigned char *)(v17 + 8120);
  *(unsigned char *)(a2 + 177) = *(unsigned char *)(v18 + 272);
  uint64_t v19 = *(int *)(v18 + 276);
  uint64_t v20 = *(void *)(v18 + 1720) - v19;
  LODWORD(v14) = *(_DWORD *)(v18 + 1728);
  *(void *)(v18 + 1720) = v20;
  *(_DWORD *)(v18 + 1728) = v14 - v19;
  *(unsigned char *)uint64_t v20 = 7;
  uint64_t v21 = *(void *)(a1 + 248);
  *(void *)(a1 + 248) = a4;
  uint64_t v22 = *(void *)(a1 + 264);
  *(void *)(v20 + 8) = a2;
  *(void *)(v20 + 16) = v22;
  *(void *)(a1 + 264) = a3;
  uint64_t v23 = *(void *)(a1 + 280);
  *(void *)(v20 + 24) = v21;
  *(void *)(v20 + 32) = v23;
  *(void *)(a1 + 280) = a5;
  *(void *)(v17 + 8112) = v20;
  *(void *)(v17 + 8016) = a6;
  return result;
}

BOOL vretproc(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 192);
  if (*(int *)v2 < 1)
  {
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(int *)(v2 + 8008) - 1;
    *(_DWORD *)uint64_t v2 = v4;
    *(_DWORD *)(v2 + 8008) = *(void *)(v2 + 8 * v4 + 8);
  }
  uint64_t v5 = *(void *)(v2 + 8112);
  int v6 = *(unsigned __int8 *)(v5 + *(int *)(*(void *)(a1 + 200) + 276));
  freeDeltaStackTo(a1, v5);
  uint64_t v7 = *(void *)(a1 + 192);
  uint64_t v8 = *(void **)(*(void *)(a1 + 200) + 1720);
  uint64_t v9 = v8[2];
  *(void *)(a1 + 248) = v8[3];
  uint64_t v10 = *(void *)(v5 + 8);
  *(void *)(a1 + 264) = v9;
  *(void *)(a1 + 280) = v8[4];
  *(void *)(v7 + 8104) = *(void *)v10;
  *(_OWORD *)(v7 + 8056) = *(_OWORD *)(v10 + 32);
  uint64_t v11 = *(void *)(a1 + 192);
  *(unsigned char *)(v11 + 8096) = *(unsigned char *)(v10 + 48);
  uint64_t v12 = *(void *)(v10 + 64);
  *(void *)(v11 + 8112) = *(void *)(v10 + 56);
  freeDeltaStackTo(a1, v12);
  uint64_t v13 = *(void *)(a1 + 192);
  *(void *)(*(void *)(a1 + 200) + 1760) = *(void *)(v10 + 72);
  *(unsigned char *)(v13 + 812hashDelete(*((void **)this + 513), 1, 1) = *(unsigned char *)(v10 + 80);
  *(void *)(v13 + 8016) = *(void *)(v10 + 88);
  *(_OWORD *)(v13 + 8080) = *(_OWORD *)(v10 + 96);
  long long v14 = *(_OWORD *)(v10 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(v10 + 112);
  *(_OWORD *)(a1 + 128) = v14;
  long long v15 = *(_OWORD *)(v10 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(v10 + 144);
  *(_OWORD *)(a1 + 160) = v15;
  uint64_t v16 = *(void *)(a1 + 192);
  uint64_t v17 = *(void *)(a1 + 200);
  uint64_t v18 = (unsigned char *)(v16 + 8012);
  *(unsigned char *)(v16 + 8120) = *(unsigned char *)(v10 + 176);
  *(unsigned char *)(v17 + 272) = *(unsigned char *)(v10 + 177);
  *(_DWORD *)(v16 + 9296) = 0;
  if (v6 == 8)
  {
    *(_DWORD *)(*(void *)(a1 + 184) + 432) = 234;
    return *v18 != 0;
  }
  else if (*v18)
  {
    forceErrorBacktrack(a1);
  }
  return v3;
}

uint64_t freeDeltaStackTo(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 200);
  uint64_t v3 = *(void *)(v2 + 1744);
  if (v3)
  {
    *(void *)(v2 + 1720) = a2;
    *(_DWORD *)(v2 + 1728) = *(_DWORD *)(v2 + 1780) + a2 - *(_DWORD *)(v3 + 32);
  }
  return result;
}

uint64_t vprt_var(uint64_t result, int a2, __int16 *a3)
{
  uint64_t v4 = result;
  uint64_t v9 = *MEMORY[0x263EF8340];
  switch(*a3)
  {
    case -6:
      uint64_t v5 = *((void *)a3 + 1);
      if (v5 == 1)
      {
        int v6 = "dangling";
      }
      else
      {
        if (v5)
        {
          absoluteSyncNum(result, v5);
          goto LABEL_15;
        }
        int v6 = "NULL";
      }
      return vf_puts(result, a2, (uint64_t)v6, 1);
    case -5:
      __sprintf_chk(__s1, 0, 0x50uLL, "%f");
      return vf_puts(v4, a2, (uint64_t)__s1, 1);
    case -4:
LABEL_15:
      __sprintf_chk(__s1, 0, 0x50uLL, "%d");
      return vf_puts(v4, a2, (uint64_t)__s1, 1);
    case -3:
      __sprintf_chk(__s1, 0, 0x50uLL, "%ld");
      return vf_puts(v4, a2, (uint64_t)__s1, 1);
    default:
      int v7 = a3[1];
      if (v7 == 255) {
        return result;
      }
      disptok(result, a3 + 16, *a3, v7, __s1);
      if (__s1[0] == 92) {
        cleanLiteral((unsigned __int8 *)__s1, 0, 0);
      }
      return vf_puts(v4, a2, (uint64_t)__s1, 1);
  }
}

void initGlobalVars(int *a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 8 * (a1[4] & ~(a1[4] >> 31));
  while (v3 != v2)
    OUTLINED_FUNCTION_2_53(v2);
  uint64_t v4 = 0;
  for (uint64_t i = 0; i < *a1; ++i)
  {
    OUTLINED_FUNCTION_1_56();
    v4 += 16;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 8 * (a1[1] & ~(a1[1] >> 31));
  while (v7 != v6)
    OUTLINED_FUNCTION_2_53(v6);
  uint64_t v8 = 0;
  uint64_t v9 = 8 * (a1[2] & ~(a1[2] >> 31));
  while (v9 != v8)
  {
    **(_WORD **)(*((void *)a1 + 6) + v8) = 0;
    v8 += 8;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * (a1[3] & ~(a1[3] >> 31));
  while (v11 != v10)
    OUTLINED_FUNCTION_2_53(v10);
}

uint64_t runtime_new(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    init_new(result);
    ccode_new(v1);
    delta_lib_new(v1);
    dlang_new(v1);
  }
  return result;
}

double runtime_delete(uint64_t a1)
{
  if (a1)
  {
    init_delete(a1);
    ccode_delete(a1);
    delta_lib_delete(a1);
    dlang_delete(a1);
    logio_delete(a1);
    eloqc_delete(a1);
    double result = 0.0;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
  }
  return result;
}

void OUTLINED_FUNCTION_0_63(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 1728) += v1;
  *(void *)(a1 + 1720) = v2 + v1;
}

void OUTLINED_FUNCTION_1_56()
{
  uint64_t v4 = *(void *)(v0 + 32) + v1;
  uint64_t v5 = *(_WORD **)v4;
  size_t v6 = *(int *)(v4 + 12);
  *uint64_t v5 = *(_DWORD *)(v4 + 8);
  v5[1] = v2;
  bzero(v5 + 8, v6);
}

void OUTLINED_FUNCTION_2_53(uint64_t a1@<X8>)
{
  **(void **)(v1 + ahashDelete(*((void **)this + 513), 1, 1) = 0;
}

double OUTLINED_FUNCTION_3_49()
{
  return *(double *)(v0 + 8);
}

uint64_t startloop(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(a1 + 192) + 8064) = a2;
  uint64_t result = clearDeltaStackBack(a1);
  *(unsigned char *)(*(void *)(a1 + 192) + 8096) = 0;
  return result;
}

uint64_t clearDeltaStackBack(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(*(void *)(a1 + 200) + 1760);
  if (*v1 == 8) {
    uint64_t v1 = *(unsigned char **)(*(void *)(a1 + 192) + 8112);
  }
  return freeDeltaStackTo_0(a1, (uint64_t)v1);
}

uint64_t forall_adv_l(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  if (!OUTLINED_FUNCTION_1_57(a1, a2, a3, a4, a5, a6)) {
    return 1;
  }
  *(unsigned char *)(*(void *)(v6 + 192) + 8089) = 0;
  uint64_t result = OUTLINED_FUNCTION_3_50();
  if (result)
  {
    clearDeltaStackBack(v6);
    uint64_t v8 = *(void *)(v6 + 192);
    *(_DWORD *)(*(void *)(v6 + 200) + 256) = 0;
    *(unsigned char *)(v8 + 8096) = 1;
    return OUTLINED_FUNCTION_2_54();
  }
  return result;
}

uint64_t forall_adv_upto_l(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  if (!OUTLINED_FUNCTION_1_57(a1, a2, a3, a4, a5, a6)) {
    return 1;
  }
  *(unsigned char *)(*(void *)(v6 + 192) + 8089) = 0;
  OUTLINED_FUNCTION_12_42();
  OUTLINED_FUNCTION_6_44();
  if (v8 || (*v7 & 2) != 0) {
    return 0;
  }
  uint64_t result = OUTLINED_FUNCTION_3_50();
  if (!result) {
    return result;
  }
  OUTLINED_FUNCTION_12_42();
  OUTLINED_FUNCTION_6_44();
  if (v8 || (*v10 & 2) != 0) {
    return 0;
  }
  else {
    return OUTLINED_FUNCTION_0_64();
  }
}

uint64_t forall_adv_over_l(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  if (!OUTLINED_FUNCTION_1_57(a1, a2, a3, a4, a5, a6)) {
    return 1;
  }
  *(unsigned char *)(*(void *)(v6 + 192) + 8089) = 0;
  OUTLINED_FUNCTION_12_42();
  OUTLINED_FUNCTION_6_44();
  if (v8 || (*v7 & 2) != 0) {
    return 0;
  }
  uint64_t result = OUTLINED_FUNCTION_3_50();
  if (result)
  {
    clearDeltaStackBack(v6);
    uint64_t v10 = *(void *)(v6 + 192);
    *(_DWORD *)(*(void *)(v6 + 200) + 256) = 0;
    *(unsigned char *)(v10 + 8096) = 1;
    return OUTLINED_FUNCTION_2_54();
  }
  return result;
}

uint64_t forall_adv_r(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  OUTLINED_FUNCTION_1_57(a1, a2, a3, a4, a5, a6);
  uint64_t result = OUTLINED_FUNCTION_13_40();
  if (v8)
  {
    *(unsigned char *)(*(void *)(v6 + 192) + 8089) = result;
    uint64_t result = OUTLINED_FUNCTION_3_50();
    if (result) {
      return OUTLINED_FUNCTION_0_64();
    }
  }
  return result;
}

uint64_t forall_adv_upto_r(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  OUTLINED_FUNCTION_1_57(a1, a2, a3, a4, a5, a6);
  uint64_t result = OUTLINED_FUNCTION_13_40();
  if (v8)
  {
    *(unsigned char *)(*(void *)(v6 + 192) + 8089) = result;
    OUTLINED_FUNCTION_12_42();
    OUTLINED_FUNCTION_4_48();
    if (v10 || (*v9 & 2) != 0) {
      return 0;
    }
    uint64_t result = OUTLINED_FUNCTION_3_50();
    if (!result) {
      return result;
    }
    OUTLINED_FUNCTION_12_42();
    OUTLINED_FUNCTION_4_48();
    if (v10 || (*v11 & 2) != 0) {
      return 0;
    }
    else {
      return OUTLINED_FUNCTION_0_64();
    }
  }
  return result;
}

uint64_t forall_adv_over_r(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  OUTLINED_FUNCTION_1_57(a1, a2, a3, a4, a5, a6);
  uint64_t result = OUTLINED_FUNCTION_13_40();
  if (v8)
  {
    *(unsigned char *)(*(void *)(v6 + 192) + 8089) = result;
    OUTLINED_FUNCTION_12_42();
    OUTLINED_FUNCTION_4_48();
    if (v10 || (*v9 & 2) != 0)
    {
      return 0;
    }
    else
    {
      uint64_t result = OUTLINED_FUNCTION_3_50();
      if (result)
      {
        clearDeltaStackBack(v6);
        uint64_t v11 = *(void *)(v6 + 192);
        *(_DWORD *)(*(void *)(v6 + 200) + 256) = 0;
        *(unsigned char *)(v11 + 8096) = 1;
        return OUTLINED_FUNCTION_2_54();
      }
    }
  }
  return result;
}

uint64_t forto_adv_l(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  if (!OUTLINED_FUNCTION_1_57(a1, a2, a3, a4, a5, a6)) {
    return 1;
  }
  *(unsigned char *)(*(void *)(v6 + 192) + 8089) = 0;
  uint64_t result = OUTLINED_FUNCTION_3_50();
  if (result)
  {
    OUTLINED_FUNCTION_9_43();
    if (v8) {
      return 0;
    }
    else {
      return OUTLINED_FUNCTION_0_64();
    }
  }
  return result;
}

uint64_t forto_adv_upto_l(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  if (!OUTLINED_FUNCTION_1_57(a1, a2, a3, a4, a5, a6)) {
    return 1;
  }
  *(unsigned char *)(*(void *)(v6 + 192) + 8089) = 0;
  OUTLINED_FUNCTION_11_43();
  OUTLINED_FUNCTION_5_45();
  if (v7) {
    return 0;
  }
  OUTLINED_FUNCTION_7_44();
  if (v7 || (*v8 & 2) != 0) {
    return 0;
  }
  uint64_t result = OUTLINED_FUNCTION_3_50();
  if (!result) {
    return result;
  }
  OUTLINED_FUNCTION_19_36();
  if (v7) {
    return 0;
  }
  vscanadvUptoTokenOrMarker();
  OUTLINED_FUNCTION_5_45();
  if (v7) {
    return 0;
  }
  OUTLINED_FUNCTION_7_44();
  if (v7 || (*v10 & 2) != 0) {
    return 0;
  }
  else {
    return OUTLINED_FUNCTION_0_64();
  }
}

uint64_t forto_adv_over_l(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  if (!OUTLINED_FUNCTION_1_57(a1, a2, a3, a4, a5, a6)) {
    return 1;
  }
  *(unsigned char *)(*(void *)(v6 + 192) + 8089) = 0;
  OUTLINED_FUNCTION_11_43();
  OUTLINED_FUNCTION_5_45();
  if (v7) {
    return 0;
  }
  OUTLINED_FUNCTION_7_44();
  if (v7 || (*v8 & 2) != 0) {
    return 0;
  }
  uint64_t result = OUTLINED_FUNCTION_3_50();
  if (!result) {
    return result;
  }
  OUTLINED_FUNCTION_9_43();
  if (v7) {
    return 0;
  }
  else {
    return OUTLINED_FUNCTION_0_64();
  }
}

uint64_t forto_adv_r(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  OUTLINED_FUNCTION_1_57(a1, a2, a3, a4, a5, a6);
  uint64_t result = OUTLINED_FUNCTION_13_40();
  if (v8)
  {
    *(unsigned char *)(*(void *)(v6 + 192) + 8089) = result;
    uint64_t result = OUTLINED_FUNCTION_3_50();
    if (result)
    {
      OUTLINED_FUNCTION_9_43();
      if (v9) {
        return 0;
      }
      else {
        return OUTLINED_FUNCTION_0_64();
      }
    }
  }
  return result;
}

uint64_t forto_adv_upto_r(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  OUTLINED_FUNCTION_1_57(a1, a2, a3, a4, a5, a6);
  uint64_t result = OUTLINED_FUNCTION_13_40();
  if (v8)
  {
    *(unsigned char *)(*(void *)(v6 + 192) + 8089) = result;
    OUTLINED_FUNCTION_11_43();
    OUTLINED_FUNCTION_5_45();
    if (v9) {
      return 0;
    }
    OUTLINED_FUNCTION_8_43();
    if (v9 || (*v10 & 2) != 0) {
      return 0;
    }
    uint64_t result = OUTLINED_FUNCTION_3_50();
    if (!result) {
      return result;
    }
    OUTLINED_FUNCTION_19_36();
    if (v9) {
      return 0;
    }
    vscanadvUptoTokenOrMarker();
    OUTLINED_FUNCTION_5_45();
    if (v9) {
      return 0;
    }
    OUTLINED_FUNCTION_8_43();
    if (v9 || (*v11 & 2) != 0) {
      return 0;
    }
    else {
      return OUTLINED_FUNCTION_0_64();
    }
  }
  return result;
}

uint64_t forto_adv_over_r(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  OUTLINED_FUNCTION_1_57(a1, a2, a3, a4, a5, a6);
  uint64_t result = OUTLINED_FUNCTION_13_40();
  if (v8)
  {
    *(unsigned char *)(*(void *)(v6 + 192) + 8089) = result;
    OUTLINED_FUNCTION_11_43();
    OUTLINED_FUNCTION_5_45();
    if (v9) {
      return 0;
    }
    OUTLINED_FUNCTION_8_43();
    if (v9 || (*v10 & 2) != 0) {
      return 0;
    }
    uint64_t result = OUTLINED_FUNCTION_3_50();
    if (!result) {
      return result;
    }
    OUTLINED_FUNCTION_9_43();
    if (v9) {
      return 0;
    }
    else {
      return OUTLINED_FUNCTION_0_64();
    }
  }
  return result;
}

uint64_t forall_to_test(uint64_t a1, unsigned __int16 *a2, __int16 *a3)
{
  v17[0] = 0;
  v17[1] = 0;
  v16[1] = 0;
  vinitloc_new(a1, (uint64_t)v17, a2);
  OUTLINED_FUNCTION_18_36(v6, v7, v8, v9, v10, v11, v12, v13, 0);
  vcompare(a1, v17, v16);
  if (((__int16)*a2 & 0x80000000) == 0) {
    a2[1] = -1;
  }
  if ((*a3 & 0x80000000) == 0) {
    OUTLINED_FUNCTION_16_38();
  }
  uint64_t v14 = *(void *)(a1 + 192);
  if (*(unsigned char *)(v14 + 8120)) {
    return 0;
  }
  *(void *)(a1 + 104) = *(void *)(v14 + 8064);
  return 2;
}

void forall_cont_from()
{
  OUTLINED_FUNCTION_10_43();
  if (v11) {
    uint64_t v3 = save_var(v2, v1);
  }
  OUTLINED_FUNCTION_14_40((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, (uint64_t)v13[0], (uint64_t)v13[1], (uint64_t)v14[0], (uint64_t)v14[1]);
  vinitloc_new(v2, (uint64_t)v13, v0);
  vassign(v2, v14, v13);
  OUTLINED_FUNCTION_17_38();
  if ((v12 & 0x80000000) == 0) {
    OUTLINED_FUNCTION_16_38();
  }
  if (((__int16)*v0 & 0x80000000) == 0) {
    v0[1] = -1;
  }
}

uint64_t for_adv(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4, unsigned __int16 *a5, __int16 *a6)
{
  OUTLINED_FUNCTION_15_39();
  *(void *)(v11 + 8056) = v10;
  *(void *)(v11 + 8064) = v12;
  *(unsigned char *)(v11 + 8096) = 0;
  vinitloc_new(v13, (uint64_t)v28, v14);
  OUTLINED_FUNCTION_18_36(v15, v16, v17, v18, v19, v20, v21, v22, (uint64_t)v26[0]);
  vinitloc_new(v6, (uint64_t)v27, a5);
  vadd(v6, (double **)v28, v26);
  vcompare(v6, v28, v27);
  if ((*a4 & 0x80000000) == 0) {
    a4[1] = -1;
  }
  if (((__int16)*a5 & 0x80000000) == 0) {
    a5[1] = -1;
  }
  if ((*a6 & 0x80000000) == 0) {
    OUTLINED_FUNCTION_16_38();
  }
  BOOL v23 = vnegative(v6, v26);
  int v24 = *(unsigned __int8 *)(*(void *)(v6 + 192) + 8120);
  if (v23)
  {
    if (v24 == 255) {
      return 0;
    }
  }
  else if (v24 == 1)
  {
    return 0;
  }
  return 2;
}

uint64_t for_test(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, __int16 *a4)
{
  OUTLINED_FUNCTION_15_39();
  *(unsigned char *)(v8 + 8096) = 0;
  vinitloc_new(v9, (uint64_t)v24, a2);
  vinitloc_new(v4, (uint64_t)v23, a3);
  OUTLINED_FUNCTION_18_36(v10, v11, v12, v13, v14, v15, v16, v17, (uint64_t)v22);
  vcompare(v4, v24, v23);
  if (((__int16)*a2 & 0x80000000) == 0) {
    a2[1] = -1;
  }
  if (((__int16)*a3 & 0x80000000) == 0) {
    a3[1] = -1;
  }
  if ((*a4 & 0x80000000) == 0) {
    OUTLINED_FUNCTION_16_38();
  }
  BOOL v18 = vnegative(v4, &v22);
  uint64_t v19 = *(void *)(v4 + 192);
  int v20 = *(unsigned __int8 *)(v19 + 8120);
  if (v18)
  {
    if (v20 == 255)
    {
LABEL_9:
      *(void *)(v4 + 104) = *(void *)(v19 + 8064);
      return 2;
    }
  }
  else if (v20 == 1)
  {
    goto LABEL_9;
  }
  return 0;
}

void for_cont_from()
{
  OUTLINED_FUNCTION_10_43();
  if (v11) {
    uint64_t v3 = save_var(v2, v1);
  }
  OUTLINED_FUNCTION_14_40((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, (uint64_t)v13[0], (uint64_t)v13[1], (uint64_t)v14[0], (uint64_t)v14[1]);
  vinitloc_new(v2, (uint64_t)v13, v0);
  vassign(v2, v14, v13);
  OUTLINED_FUNCTION_17_38();
  if ((v12 & 0x80000000) == 0) {
    OUTLINED_FUNCTION_16_38();
  }
  if (((__int16)*v0 & 0x80000000) == 0) {
    v0[1] = -1;
  }
}

uint64_t while_iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 192);
  *(void *)(v4 + 8056) = a3;
  *(void *)(v4 + 8064) = a2;
  uint64_t result = clearDeltaStackBack(a1);
  *(_DWORD *)(*(void *)(a1 + 200) + 256) = 0;
  return result;
}

uint64_t freeDeltaStackTo_0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 200);
  uint64_t v3 = *(void *)(v2 + 1744);
  if (v3)
  {
    *(void *)(v2 + 1720) = a2;
    *(_DWORD *)(v2 + 1728) = *(_DWORD *)(v2 + 1780) + a2 - *(_DWORD *)(v3 + 32);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_64()
{
  clearDeltaStackBack((uint64_t)v2);
  uint64_t v3 = v2[24];
  *(_DWORD *)(v2[25] + 256) = 0;
  *(unsigned char *)(v3 + 8096) = 1;
  v2[13] = v1;
  *(void *)(v0 + 8) = *(void *)(v3 + 8080);
  return 2;
}

uint64_t OUTLINED_FUNCTION_1_57(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  return for_loop_preamble(a1, a2, a3, a5, a6);
}

uint64_t OUTLINED_FUNCTION_2_54()
{
  *(void *)(v3 + 104) = v2;
  *(void *)(v1 + 8) = *(void *)(v0 + 8080);
  return 2;
}

uint64_t OUTLINED_FUNCTION_3_50()
{
  return vscanadv(v0, 1, 0);
}

uint64_t OUTLINED_FUNCTION_11_43()
{
  return vscanadvUptoTokenOrMarker();
}

uint64_t OUTLINED_FUNCTION_12_42()
{
  return vscanadvUptoToken();
}

uint64_t OUTLINED_FUNCTION_13_40()
{
  return 1;
}

void OUTLINED_FUNCTION_14_40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  a11 = 0;
  a12 = 0;
  vinitloc_new(v13, (uint64_t)&a11, v12);
}

void OUTLINED_FUNCTION_16_38()
{
  *(_WORD *)(v0 + 2) = -1;
}

uint64_t OUTLINED_FUNCTION_17_38()
{
  uint64_t v3 = *(void *)(v0 + 192);
  *(void *)(v3 + 8056) = v2;
  *(void *)(v3 + 8064) = v1;
  uint64_t result = clearDeltaStackBack(v0);
  *(_DWORD *)(*(void *)(v0 + 200) + 256) = 0;
  return result;
}

void OUTLINED_FUNCTION_18_36(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vinitloc_new(v9, (uint64_t)&a9, v10);
}

uint64_t read_2pt(uint64_t a1, char a2, unsigned int a3)
{
  if (OUTLINED_FUNCTION_1_58(a1, a2, a3)) {
    return 1;
  }
  uint64_t v3 = (uint64_t *)OUTLINED_FUNCTION_4_49();
  if (vrange_2pt(v3, v4, v5, v6, v7)) {
    return 1;
  }
  OUTLINED_FUNCTION_2_55();
  OUTLINED_FUNCTION_0_65();
  return 0;
}

uint64_t read_l(uint64_t a1, char a2, unsigned int a3)
{
  if (OUTLINED_FUNCTION_1_58(a1, a2, a3)) {
    return 1;
  }
  OUTLINED_FUNCTION_4_49();
  if (!vrange_l()) {
    forceErrorBacktrack(v3);
  }
  OUTLINED_FUNCTION_2_55();
  OUTLINED_FUNCTION_0_65();
  return 0;
}

uint64_t read_r(uint64_t a1, char a2, unsigned int a3)
{
  if (OUTLINED_FUNCTION_1_58(a1, a2, a3)) {
    return 1;
  }
  OUTLINED_FUNCTION_4_49();
  if (!vrange_r()) {
    forceErrorBacktrack(v3);
  }
  OUTLINED_FUNCTION_2_55();
  OUTLINED_FUNCTION_0_65();
  return 0;
}

uint64_t read_nvar(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3_51(a1, a2, a3, a4, a5, a6, a7, a8, v10, v11);
  uint64_t result = vrd_nvar();
  if ((*v8 & 0x80000000) == 0) {
    v8[1] = -1;
  }
  return result;
}

BOOL read_tvar(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3_51(a1, a2, a3, a4, a5, a6, a7, a8, v13[0], v13[1]);
  int v11 = vrd_tvar(v10, v9, (uint64_t)v13);
  if ((*v8 & 0x80000000) == 0) {
    v8[1] = -1;
  }
  return v11 != 0;
}

uint64_t open_input(uint64_t a1, char a2)
{
  uint64_t v3 = (char *)logicalFileName(a1, a2);
  uint64_t result = logicalFileOpen(a1, v3, 0);
  if (!result)
  {
    forceErrorBacktrack(a1);
  }
  return result;
}

uint64_t open_output(uint64_t a1, char a2)
{
  uint64_t v3 = (char *)logicalFileName(a1, a2);
  uint64_t result = logicalFileOpen(a1, v3, 1);
  if (!result)
  {
    forceErrorBacktrack(a1);
  }
  return result;
}

uint64_t open_append(uint64_t a1, char a2)
{
  uint64_t v3 = (char *)logicalFileName(a1, a2);
  uint64_t result = logicalFileOpen(a1, v3, 2);
  if (!result)
  {
    forceErrorBacktrack(a1);
  }
  return result;
}

void closeLF()
{
}

void print_delta1(uint64_t a1, char a2, uint64_t a3, unsigned char *a4, int a5, uint64_t a6, unsigned int a7)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!vprt_range(a1, a1 + 112, a1 + 144)) {
    forceErrorBacktrack(a1);
  }
  uint64_t v13 = 0;
  v14[0] = a5;
  v14[1] = 0;
  while (a5 != v13)
  {
    v14[v13 + 2] = *(unsigned char *)(a6 + v13);
    ++v13;
  }
  lf_print_delta(a1, a2, *(void *)(a1 + 112), *(void *)(a1 + 144), a4, (a7 >> 1) & 1, 0, (uint64_t)v14, 0, 0, 0, 80);
}

uint64_t print_stream(uint64_t a1, char a2, int a3, int a4, const char *a5)
{
  if (!vprt_range(a1, a1 + 112, a1 + 144)) {
    forceErrorBacktrack(a1);
  }
  unint64_t v10 = *(void *)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 144);
  return vprt_strm(a1, a2, v10, v11, a3, a4, a5);
}

uint64_t print_lit(uint64_t a1, char a2, uint64_t a3)
{
  return vf_puts(a1, a2, a3, 1);
}

uint64_t print_var(uint64_t a1, char a2, __int16 *a3)
{
  uint64_t result = vprt_var(a1, a2, a3);
  if ((*a3 & 0x80000000) == 0) {
    a3[1] = -1;
  }
  return result;
}

uint64_t print_tvar(uint64_t a1, char a2, __int16 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v6 = a3 + 1;
  uint64_t result = prt_tvar(a2, a3 + 1, a5);
  if ((*a3 & 0x80000000) == 0) {
    *unsigned __int8 v6 = -1;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_65()
{
  unint64_t v3 = v1[14];
  uint64_t v4 = v1[18];
  return ins_rdtoks(v1, v0, v3, v4);
}

uint64_t OUTLINED_FUNCTION_1_58(uint64_t a1, char a2, unsigned int a3)
{
  uint64_t v4 = a2;
  return vrd_delta(a1, v4, a3);
}

uint64_t OUTLINED_FUNCTION_2_55()
{
  uint64_t v3 = *(void *)(v1 + 112);
  uint64_t v4 = *(void *)(v1 + 144);
  return visnonseq(v1, v0, v3, v4);
}

void OUTLINED_FUNCTION_3_51(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a9 = 0;
  a10 = 0;
  vinitloc_new(a1, (uint64_t)&a9, a3);
}

uint64_t OUTLINED_FUNCTION_4_49()
{
  return v0;
}

uint64_t ccode_misc_new(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 192) + 8024) = -1;
  return result;
}

uint64_t etiwinMain(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v4 = a3 + 1;
  uint64_t v7 = *(void *)(a1 + 184);
  uint64_t v6 = *(void *)(a1 + 192);
  *(void *)(v6 + 9304) = v5;
  BOOL v8 = __OFSUB__(a2, 1);
  int v9 = a2 - 1;
  *(_DWORD *)(v7 + 480) = v9;
  if ((v9 < 0) ^ v8 | (v9 == 0)) {
    uint64_t v4 = 0;
  }
  *(void *)(v7 + 488) = v4;
  *(_DWORD *)(v6 + 8872) = 0;
  if (vcmdinit(a1) && vinitrun((int *)a1))
  {
    DeltaProc_main(a1, v10, v11, v12, v13, v14, v15, v16);
    vcmdend(a1, 0);
  }
  return 1;
}

uint64_t etiwinMainDLL(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 184);
  *(_DWORD *)(v4 + 480) = a2 - 1;
  if (a2 < 2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(a3 + 8);
  }
  *(void *)(v4 + 488) = v5;
  *(_DWORD *)(*(void *)(a1 + 192) + 8872) = 0;
  uint64_t result = vcmdinit(a1);
  if (result) {
    return vinitrun((int *)a1) != 0;
  }
  return result;
}

uint64_t getProgramName(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 192) + 9304);
}

void halt()
{
}

void abort_1(void)
{
}

void dur_expr(uint64_t a1, char a2, unsigned __int16 *a3)
{
  uint64_t v6 = a1 + 112;
  if (!vtimept_tv(a1, a1 + 112) || !vtimept_tv(a1, a1 + 144)) {
    forceErrorBacktrack(a1);
  }
  v9[1] = 0;
  v8[0] = 0;
  v8[1] = 0;
  vinitloc_new(a1, (uint64_t)v8, a3);
  vdur(a1, v6, a1 + 144, a2);
  OUTLINED_FUNCTION_0_66();
  vassign(a1, v7, v9);
  if (((__int16)*a3 & 0x80000000) == 0) {
    a3[1] = -1;
  }
}

void val_expr1(uint64_t a1, unsigned __int16 *a2, char a3, int a4)
{
  if (val_expr(a1, a1 + 112, a3, a4, 0) == -2147483647)
  {
    if (((__int16)*a2 & 0x80000000) == 0) {
      a2[1] = -1;
    }
    forceErrorBacktrack(a1);
  }
  v8[1] = 0;
  v7[0] = 0;
  v7[1] = 0;
  OUTLINED_FUNCTION_0_66();
  vinitloc_new(a1, v6, a2);
  vassign(a1, v7, v8);
  if (((__int16)*a2 & 0x80000000) == 0) {
    a2[1] = -1;
  }
}

uint64_t actd_lookup(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = (unsigned char **)(a1 + 14);
  if (!vprt_range((uint64_t)a1, (uint64_t)(a1 + 14), (uint64_t)(a1 + 18))) {
    forceErrorBacktrack((uint64_t)a1);
  }
  uint64_t v9 = a1[9] + ((uint64_t)a2 << 6);
  uint64_t v10 = actdlookup((uint64_t)a1, a1[14], a1[18], v9);
  if (v10)
  {
    int v11 = 0;
    *(_WORD *)(a1[24] + 9300) = *((_WORD *)v10 + 1);
    while (1)
    {
      if (v11 == 2) {
        return 0;
      }
      int v13 = *(unsigned __int8 *)v10++;
      int v12 = v13;
      if (v13 != 255)
      {
        int v14 = 0;
        uint64_t v15 = *v8;
        while (v14 < v12)
        {
          if (v15 && (*v15 & 2) != 0)
          {
            uint64_t v16 = &v15[8 * *(_DWORD *)(a1[24] + 9084) + 8 * *(unsigned __int8 *)(v9 + 16)];
          }
          else
          {
            uint64_t v16 = v15 + 8;
            ++v14;
          }
          uint64_t v15 = (unsigned char *)(*v16 & 0xFFFFFFFFFFFFFFFCLL);
        }
        if (v11)
        {
          uint64_t v17 = a4;
          if (!a4) {
            goto LABEL_17;
          }
LABEL_16:
          *(void *)(v17 + 8) = v15;
          goto LABEL_17;
        }
        uint64_t v17 = a3;
        if (a3) {
          goto LABEL_16;
        }
      }
LABEL_17:
      ++v11;
    }
  }
  return 1;
}

BOOL setd_lookup(void *a1, unsigned __int8 a2, int a3)
{
  if (!a1[14] || !a1[18]) {
    return 1;
  }
  if (!vprt_range((uint64_t)a1, (uint64_t)(a1 + 14), (uint64_t)(a1 + 18))) {
    forceErrorBacktrack((uint64_t)a1);
  }
  return setdlookup((uint64_t)a1, a1[14], a1[18], a1[8] + ((uint64_t)a3 << 6), a2) == 0;
}

uint64_t actd_goto(uint64_t result)
{
  *(void *)(result + 104) = *(__int16 *)(*(void *)(result + 192) + 9300);
  return result;
}

BOOL if_testeq_v_lng(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_17_39(a1, a2, a3, a4, a5, a6, a7, a8);
  OUTLINED_FUNCTION_16_39();
  return if_testeq(v8, v9, v10, v11, v12, v13, v14, v15);
}

BOOL if_testeq(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = OUTLINED_FUNCTION_7_45(a1, a2, a3, a4, a5, a6, a7, a8, v26, v29, v31, v33);
  uint64_t v16 = OUTLINED_FUNCTION_13_41(v8, v9, v10, v11, v12, v13, v14, v15, v27);
  OUTLINED_FUNCTION_8_44(v16, v17, v18, v19, v20, v21, v22, v23, v28, v30, v32);
  OUTLINED_FUNCTION_25_26();
  return !v24;
}

BOOL if_testle_v_lng(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_17_39(a1, a2, a3, a4, a5, a6, a7, a8);
  OUTLINED_FUNCTION_16_39();
  return if_testle(v8, v9, v10, v11, v12, v13, v14, v15);
}

BOOL if_testle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = OUTLINED_FUNCTION_7_45(a1, a2, a3, a4, a5, a6, a7, a8, v26, v29, v31, v33);
  uint64_t v16 = OUTLINED_FUNCTION_13_41(v8, v9, v10, v11, v12, v13, v14, v15, v27);
  OUTLINED_FUNCTION_8_44(v16, v17, v18, v19, v20, v21, v22, v23, v28, v30, v32);
  OUTLINED_FUNCTION_26_26();
  return v24 != 0;
}

BOOL if_testge_v_lng(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_17_39(a1, a2, a3, a4, a5, a6, a7, a8);
  OUTLINED_FUNCTION_16_39();
  return if_testge(v8, v9, v10, v11, v12, v13, v14, v15);
}

BOOL if_testge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = OUTLINED_FUNCTION_7_45(a1, a2, a3, a4, a5, a6, a7, a8, v26, v29, v31, v33);
  uint64_t v16 = OUTLINED_FUNCTION_13_41(v8, v9, v10, v11, v12, v13, v14, v15, v27);
  OUTLINED_FUNCTION_8_44(v16, v17, v18, v19, v20, v21, v22, v23, v28, v30, v32);
  OUTLINED_FUNCTION_24_27();
  return v24 != 0;
}

BOOL if_testgt_v_lng(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_17_39(a1, a2, a3, a4, a5, a6, a7, a8);
  OUTLINED_FUNCTION_16_39();
  return if_testgt(v8, v9, v10, v11, v12, v13, v14, v15);
}

BOOL if_testgt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = OUTLINED_FUNCTION_7_45(a1, a2, a3, a4, a5, a6, a7, a8, v26, v29, v31, v33);
  uint64_t v16 = OUTLINED_FUNCTION_13_41(v8, v9, v10, v11, v12, v13, v14, v15, v27);
  OUTLINED_FUNCTION_8_44(v16, v17, v18, v19, v20, v21, v22, v23, v28, v30, v32);
  OUTLINED_FUNCTION_26_26();
  return !v24;
}

BOOL if_testlt_v_lng(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_17_39(a1, a2, a3, a4, a5, a6, a7, a8);
  OUTLINED_FUNCTION_16_39();
  return if_testlt(v8, v9, v10, v11, v12, v13, v14, v15);
}

BOOL if_testlt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = OUTLINED_FUNCTION_7_45(a1, a2, a3, a4, a5, a6, a7, a8, v26, v29, v31, v33);
  uint64_t v16 = OUTLINED_FUNCTION_13_41(v8, v9, v10, v11, v12, v13, v14, v15, v27);
  OUTLINED_FUNCTION_8_44(v16, v17, v18, v19, v20, v21, v22, v23, v28, v30, v32);
  OUTLINED_FUNCTION_24_27();
  return !v24;
}

BOOL if_testneq_v_lng(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_17_39(a1, a2, a3, a4, a5, a6, a7, a8);
  OUTLINED_FUNCTION_16_39();
  return if_testneq(v8, v9, v10, v11, v12, v13, v14, v15);
}

BOOL if_testneq(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = OUTLINED_FUNCTION_7_45(a1, a2, a3, a4, a5, a6, a7, a8, v26, v29, v31, v33);
  uint64_t v16 = OUTLINED_FUNCTION_13_41(v8, v9, v10, v11, v12, v13, v14, v15, v27);
  OUTLINED_FUNCTION_8_44(v16, v17, v18, v19, v20, v21, v22, v23, v28, v30, v32);
  OUTLINED_FUNCTION_25_26();
  return v24 != 0;
}

BOOL if_testeq_v_i(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_14_41(a1, a2, a3, a4, a5, a6, a7, a8);
  OUTLINED_FUNCTION_15_40();
  return if_testeq(v8, v9, v10, v11, v12, v13, v14, v15);
}

BOOL if_testle_v_i(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_14_41(a1, a2, a3, a4, a5, a6, a7, a8);
  OUTLINED_FUNCTION_15_40();
  return if_testle(v8, v9, v10, v11, v12, v13, v14, v15);
}

BOOL if_testge_v_i(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_14_41(a1, a2, a3, a4, a5, a6, a7, a8);
  OUTLINED_FUNCTION_15_40();
  return if_testge(v8, v9, v10, v11, v12, v13, v14, v15);
}

BOOL if_testgt_v_i(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_14_41(a1, a2, a3, a4, a5, a6, a7, a8);
  OUTLINED_FUNCTION_15_40();
  return if_testgt(v8, v9, v10, v11, v12, v13, v14, v15);
}

BOOL if_testlt_v_i(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_14_41(a1, a2, a3, a4, a5, a6, a7, a8);
  OUTLINED_FUNCTION_15_40();
  return if_testlt(v8, v9, v10, v11, v12, v13, v14, v15);
}

BOOL if_testneq_v_i(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_14_41(a1, a2, a3, a4, a5, a6, a7, a8);
  OUTLINED_FUNCTION_15_40();
  return if_testneq(v8, v9, v10, v11, v12, v13, v14, v15);
}

BOOL testeq_tvars(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  compare_tvars(a1, a2, a3);
  return testeq(a1);
}

BOOL testneq_tvars(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  compare_tvars(a1, a2, a3);
  return testneq(a1);
}

BOOL testFldeq(uint64_t a1, unsigned int a2, int a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 192);
  uint64_t v5 = (unsigned __int8 *)(v4 + 8088);
  uint64_t v6 = *(unsigned char **)(v4 + 8080);
  while (1)
  {
    unint64_t v7 = *(unsigned char *)(v4 + 8089) ? *(int *)(v4 + 9084) + (unint64_t)*v5 : *v5 + 3;
    uint64_t v6 = (unsigned char *)(*(void *)&v6[8 * v7] & 0xFFFFFFFFFFFFFFFCLL);
    if (!v6) {
      break;
    }
    if ((*v6 & 2) == 0) {
      return *(unsigned __int8 *)(*(uint64_t (**)(unsigned char *))&vstmtbl[12 * a2 + 2][8 * a3])(v6 + 16) != a4;
    }
  }
  return 1;
}

void move_lng(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  OUTLINED_FUNCTION_18_37();
  if (v6) {
    save_var(a1, a2);
  }
  switch(*a2)
  {
    case 0xFFFA:
    case 0xFFFD:
      *((void *)a2 + hashDelete(*((void **)this + 513), 1, 1) = a3;
      break;
    case 0xFFFB:
      *((double *)a2 + hashDelete(*((void **)this + 513), 1, 1) = (double)a3;
      break;
    case 0xFFFC:
      a2[1] = a3;
      break;
    default:
      if ((__int16)*a2 < 0)
      {
        forceErrorBacktrack(a1);
      }
      OUTLINED_FUNCTION_9_44(0xFFFDu, v8, 0, 0, v9, v10);
      OUTLINED_FUNCTION_21_32(v7);
      if (((__int16)*a2 & 0x80000000) == 0) {
        a2[1] = -1;
      }
      break;
  }
}

void move_i(uint64_t a1, unsigned __int16 *a2, int a3)
{
  OUTLINED_FUNCTION_18_37();
  if (v6) {
    save_var(a1, a2);
  }
  switch(*a2)
  {
    case 0xFFFA:
    case 0xFFFD:
      *((void *)a2 + hashDelete(*((void **)this + 513), 1, 1) = a3;
      break;
    case 0xFFFB:
      *((double *)a2 + hashDelete(*((void **)this + 513), 1, 1) = (double)a3;
      break;
    case 0xFFFC:
      a2[1] = a3;
      break;
    default:
      if ((__int16)*a2 < 0)
      {
        forceErrorBacktrack(a1);
      }
      OUTLINED_FUNCTION_9_44(0xFFFCu, v8, 0, 0, v9, v10);
      OUTLINED_FUNCTION_21_32(v7);
      if (((__int16)*a2 & 0x80000000) == 0) {
        a2[1] = -1;
      }
      break;
  }
}

void move_f(uint64_t a1, unsigned __int16 *a2, double a3)
{
  OUTLINED_FUNCTION_18_37();
  if (v6) {
    save_var(a1, a2);
  }
  switch(*a2)
  {
    case 0xFFFA:
      goto LABEL_8;
    case 0xFFFB:
      *((double *)a2 + hashDelete(*((void **)this + 513), 1, 1) = a3;
      return;
    case 0xFFFC:
      int v8 = (int)a3;
      goto LABEL_12;
    case 0xFFFD:
      *((void *)a2 + hashDelete(*((void **)this + 513), 1, 1) = (uint64_t)a3;
      return;
    default:
      if ((__int16)*a2 < 0)
      {
LABEL_8:
        forceErrorBacktrack(a1);
      }
      OUTLINED_FUNCTION_9_44(0xFFFBu, v9, 0, 0, v10, v11);
      OUTLINED_FUNCTION_21_32(v7);
      if (((__int16)*a2 & 0x80000000) == 0)
      {
        LOWORD(v8) = -1;
LABEL_12:
        a2[1] = v8;
      }
      return;
  }
}

void bspush_ca_boa(uint64_t a1)
{
  bspush_boa(a1);
  bspush_ca(a1);
}

double bspush_ca_scan_boa(uint64_t a1, uint64_t a2)
{
  bspush_boa(a1);
  *(void *)&double result = bspush_ca_scan(a1, a2).n128_u64[0];
  return result;
}

uint64_t lpta_rpta_loadp(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(result + 168) = 1;
  *(unsigned char *)(result + 136) = 1;
  *(void *)(result + 112) = *(void *)(a2 + 8);
  *(void *)(result + 144) = *(void *)(a3 + 8);
  *(void *)(result + 160) = 0;
  *(void *)(result + 128) = 0;
  return result;
}

#error "24002AE94: call analysis failed (funcsize=59)"

#error "24002AFC0: call analysis failed (funcsize=69)"

#error "24002B0F4: call analysis failed (funcsize=70)"

#error "24002B218: call analysis failed (funcsize=66)"

uint64_t ins_tokens_f()
{
  OUTLINED_FUNCTION_23_28();
  if (v4)
  {
    OUTLINED_FUNCTION_3_52();
    int v5 = OUTLINED_FUNCTION_0_67();
    uint64_t result = 0;
    switch(v5)
    {
      case -5:
        uint64_t v7 = &v24;
        goto LABEL_9;
      case -4:
      case -2:
        uint64_t v7 = (double *)&v25;
        goto LABEL_9;
      case -1:
        uint64_t v7 = (double *)&v26;
LABEL_9:
        uint64_t v23 = v7;
        char v26 = 0;
        __int16 v25 = 0;
        double v24 = 0.0;
        int v8 = (unsigned __int8 *)&v1[v2];
        uint64_t v22 = 65531;
        uint64_t v21 = &v24;
        BYTE2(v22) = v3;
        OUTLINED_FUNCTION_4_50();
        break;
      default:
        return result;
    }
    while (v1 < (const char *)v8)
    {
      unsigned int v11 = *(unsigned __int8 *)v1;
      uint64_t v9 = v1 + 1;
      uint64_t v10 = v11;
      char v26 = v11;
      double v24 = atof(v9);
      OUTLINED_FUNCTION_11_44();
      if (!v20) {
        OUTLINED_FUNCTION_10_44(v12, v13, v14, v15, v16, v17, v18, v19, v21, v22, v23);
      }
      uint64_t result = OUTLINED_FUNCTION_6_45(v12, v13, v21, v22, v23);
      if (result)
      {
        uint64_t v1 = &v9[v10];
        if (v1 >= (const char *)v8) {
          continue;
        }
        uint64_t result = OUTLINED_FUNCTION_2_56();
        *(void *)(v0 + 112) = result;
        if (result) {
          continue;
        }
      }
      return result;
    }
  }
  else
  {
    OUTLINED_FUNCTION_4_50();
  }
  return 1;
}

uint64_t insert_2pt_s(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, int a5)
{
  if (OUTLINED_FUNCTION_1_59(a1, a2, a3, a4, a5)) {
    return 1;
  }
  uint64_t v6 = OUTLINED_FUNCTION_5_46();
  ins_tokens_s(v6);
  return 0;
}

uint64_t insert_2pt_l(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, int a5)
{
  if (OUTLINED_FUNCTION_1_59(a1, a2, a3, a4, a5)) {
    return 1;
  }
  uint64_t v6 = OUTLINED_FUNCTION_5_46();
  ins_tokens_l(v6);
  return 0;
}

uint64_t insert_2pt_lng(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, int a5)
{
  if (OUTLINED_FUNCTION_1_59(a1, a2, a3, a4, a5)) {
    return 1;
  }
  uint64_t v6 = OUTLINED_FUNCTION_5_46();
  ins_tokens_lng(v6);
  return 0;
}

uint64_t insert_2pt_i(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, int a5)
{
  if (OUTLINED_FUNCTION_1_59(a1, a2, a3, a4, a5)) {
    return 1;
  }
  uint64_t v6 = OUTLINED_FUNCTION_5_46();
  ins_tokens_i(v6);
  return 0;
}

uint64_t insert_2pt_f(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, int a5)
{
  if (OUTLINED_FUNCTION_1_59(a1, a2, a3, a4, a5)) {
    return 1;
  }
  OUTLINED_FUNCTION_5_46();
  ins_tokens_f();
  return 0;
}

uint64_t OUTLINED_FUNCTION_0_67()
{
  return STMTYP(v0);
}

uint64_t OUTLINED_FUNCTION_1_59(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, int a5)
{
  return vrange_2pt((uint64_t *)a1, (unint64_t *)(a1 + 112), a1 + 144, a2, a5);
}

uint64_t OUTLINED_FUNCTION_2_56()
{
  unint64_t v4 = *(void *)(v1 + 144);
  unint64_t v5 = *(void *)(v4 + 8 * v2) & 0xFFFFFFFFFFFFFFFCLL;
  return vins_sync(v1, v0, v5, v4);
}

uint64_t OUTLINED_FUNCTION_3_52()
{
  return STMTYP(v0);
}

uint64_t OUTLINED_FUNCTION_4_50()
{
  uint64_t v3 = v1[14];
  uint64_t v4 = v1[18];
  return vdel_2pt(v1, v0, v3, v4);
}

uint64_t OUTLINED_FUNCTION_5_46()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_45(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = v3[14];
  uint64_t v6 = v3[18];
  return vins_tok(v3, v2, v5, v6, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_7_45(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  a11 = 0;
  a12 = 0;
  return vnspop(a1, (uint64_t)&a11);
}

void OUTLINED_FUNCTION_8_44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t *a11)
{
  vcompare(v11, &a11, &a9);
}

void OUTLINED_FUNCTION_9_44(unsigned __int16 a1@<W8>, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a5 = v6;
  a6 = a1;
  BYTE2(a6) = 0;
  vinitloc_new(v8, (uint64_t)&a3, v7);
}

void OUTLINED_FUNCTION_10_44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, void *a11)
{
  vassign(v11, &a11, &a9);
}

uint64_t OUTLINED_FUNCTION_13_41(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return vnspop(v9, (uint64_t)&a9);
}

uint64_t OUTLINED_FUNCTION_14_41(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return npush_v(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t OUTLINED_FUNCTION_15_40()
{
  return npush_i(v0);
}

uint64_t OUTLINED_FUNCTION_16_39()
{
  return npush_lng(v0);
}

uint64_t OUTLINED_FUNCTION_17_39(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return npush_v(a1, a2, a3, a4, a5, a6, a7, a8);
}

void OUTLINED_FUNCTION_21_32(uint64_t a1, ...)
{
  va_start(va1, a1);
  va_start(va, a1);
  uint64_t v3 = va_arg(va1, void *);
  uint64_t v5 = va_arg(va1, void);
  vassign(v1, (void **)va, (const void **)va1);
}

uint64_t lpta_loadv(uint64_t a1, char a2, __int16 *a3)
{
  *(unsigned char *)(a1 + 136) = 2;
  *(unsigned char *)(a1 + 120) = a2;
  int v3 = *a3;
  switch(v3)
  {
    case -5:
      uint64_t v4 = (uint64_t)*((double *)a3 + 1);
      break;
    case -4:
      uint64_t v4 = a3[1];
      break;
    case -3:
      uint64_t v4 = *((void *)a3 + 1);
      break;
    default:
      forceErrorBacktrack(a1);
  }
  *(void *)(a1 + 128) = v4;
  return a1;
}

uint64_t rpta_loadv(uint64_t a1, char a2, __int16 *a3)
{
  *(unsigned char *)(a1 + 168) = 2;
  *(unsigned char *)(a1 + 152) = a2;
  int v3 = *a3;
  switch(v3)
  {
    case -5:
      uint64_t v4 = (uint64_t)*((double *)a3 + 1);
      break;
    case -4:
      uint64_t v4 = a3[1];
      break;
    case -3:
      uint64_t v4 = *((void *)a3 + 1);
      break;
    default:
      forceErrorBacktrack(a1);
  }
  *(void *)(a1 + 160) = v4;
  return a1;
}

uint64_t lpta_loadlng(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result = OUTLINED_FUNCTION_3_53(a1, a2);
  if ((result + 4) >= 2)
  {
    if (result != -5) {
      return result;
    }
    a3 = (uint64_t)(double)a3;
  }
  *(void *)(a1 + 128) = a3;
  return result;
}

uint64_t rpta_loadl(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result = OUTLINED_FUNCTION_4_51((char *)a1, a2);
  if ((result + 4) >= 2)
  {
    if (result != -5) {
      return result;
    }
    a3 = (uint64_t)(double)a3;
  }
  *(void *)(a1 + 160) = a3;
  return result;
}

void lpta_loadi(uint64_t a1, char a2, int a3)
{
  OUTLINED_FUNCTION_3_53(a1, a2);
  OUTLINED_FUNCTION_10_45();
  if (!(!v6 & v5)) {
    *(void *)(a1 + 128) = a3;
  }
}

void rpta_loadi(uint64_t a1, char a2, int a3)
{
  OUTLINED_FUNCTION_4_51((char *)a1, a2);
  OUTLINED_FUNCTION_10_45();
  if (!(!v6 & v5)) {
    *(void *)(a1 + 160) = a3;
  }
}

void lpta_loadf(uint64_t a1, char a2, double a3)
{
  OUTLINED_FUNCTION_3_53(a1, a2);
  OUTLINED_FUNCTION_10_45();
  if (!(!v6 & v5)) {
    *(void *)(a1 + 128) = (uint64_t)a3;
  }
}

void rpta_loadf(uint64_t a1, char a2, double a3)
{
  OUTLINED_FUNCTION_4_51((char *)a1, a2);
  OUTLINED_FUNCTION_10_45();
  if (!(!v6 & v5)) {
    *(void *)(a1 + 160) = (uint64_t)a3;
  }
}

uint64_t lpta_leftmost(uint64_t a1, char a2)
{
  return OUTLINED_FUNCTION_13_42(a1, a2, 6);
}

uint64_t rpta_leftmost(uint64_t a1, char a2)
{
  return OUTLINED_FUNCTION_11_45(a1, a2, 6);
}

uint64_t lpta_rightmost(uint64_t a1, char a2)
{
  return OUTLINED_FUNCTION_13_42(a1, a2, 10);
}

uint64_t rpta_rightmost(uint64_t a1, char a2)
{
  return OUTLINED_FUNCTION_11_45(a1, a2, 10);
}

void lpta_ctxtl(uint64_t a1)
{
  if (!vctxt_tv(a1, a1 + 112)) {
    forceErrorBacktrack(a1);
  }
  OUTLINED_FUNCTION_0_68();
  if ((v6 & 1) == 0) {
    *(void *)(a1 + 112) = OUTLINED_FUNCTION_2_57(v2, v3, v4, v5);
  }
}

void rpta_ctxtl(uint64_t a1)
{
  if (!vctxt_tv(a1, a1 + 144)) {
    forceErrorBacktrack(a1);
  }
  OUTLINED_FUNCTION_0_68();
  if ((v6 & 1) == 0) {
    *(void *)(a1 + 144) = OUTLINED_FUNCTION_2_57(v2, v3, v4, v5);
  }
}

void lpta_ctxtr(uint64_t a1)
{
  if (!vctxt_tv(a1, a1 + 112)) {
    forceErrorBacktrack(a1);
  }
  OUTLINED_FUNCTION_0_68();
  if ((v6 & 1) == 0) {
    *(void *)(a1 + 112) = OUTLINED_FUNCTION_1_60(v2, v3, v4, v5);
  }
}

void rpta_ctxtr(uint64_t a1)
{
  if (!vctxt_tv(a1, a1 + 144)) {
    forceErrorBacktrack(a1);
  }
  OUTLINED_FUNCTION_0_68();
  if ((v6 & 1) == 0) {
    *(void *)(a1 + 144) = OUTLINED_FUNCTION_1_60(v2, v3, v4, v5);
  }
}

unsigned char *lpta_movel(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 112);
  if (!vmove_tv(a1, a1 + 112)) {
    forceErrorBacktrack(a1);
  }
  uint64_t result = OUTLINED_FUNCTION_9_45();
  *uint64_t v2 = result;
  return result;
}

unsigned char *rpta_movel(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 144);
  if (!vmove_tv(a1, a1 + 144)) {
    forceErrorBacktrack(a1);
  }
  uint64_t result = OUTLINED_FUNCTION_9_45();
  *uint64_t v2 = result;
  return result;
}

unsigned char *lpta_mover(uint64_t a1)
{
  uint64_t v2 = vmove_tv(a1, a1 + 112);
  if (!v2) {
    forceErrorBacktrack(a1);
  }
  uint64_t result = OUTLINED_FUNCTION_12_44(v2, *(unsigned char **)(a1 + 112));
  *(void *)(a1 + 112) = result;
  return result;
}

unsigned char *rpta_mover(uint64_t a1)
{
  uint64_t v2 = vmove_tv(a1, a1 + 144);
  if (!v2) {
    forceErrorBacktrack(a1);
  }
  uint64_t result = OUTLINED_FUNCTION_12_44(v2, *(unsigned char **)(a1 + 144));
  *(void *)(a1 + 144) = result;
  return result;
}

uint64_t lpta_tstctxtl()
{
  OUTLINED_FUNCTION_8_45();
  vtstctx_tv(v1, v2);
  if (v3) {
    return 1;
  }
  OUTLINED_FUNCTION_0_68();
  if (v9) {
    return 0;
  }
  unint64_t v10 = OUTLINED_FUNCTION_2_57(v5, v6, v7, v8);
  uint64_t result = 0;
  *(void *)(v0 + 112) = v10;
  return result;
}

uint64_t rpta_tstctxtl(uint64_t a1)
{
  vtstctx_tv(a1, a1 + 144);
  if (v2) {
    return 1;
  }
  OUTLINED_FUNCTION_0_68();
  if (v8) {
    return 0;
  }
  unint64_t v9 = OUTLINED_FUNCTION_2_57(v4, v5, v6, v7);
  uint64_t result = 0;
  *(void *)(a1 + 144) = v9;
  return result;
}

uint64_t lpta_tstctxtr(uint64_t a1)
{
  uint64_t v2 = 1;
  vtstctx_tv(a1, a1 + 112);
  if (!v3)
  {
    OUTLINED_FUNCTION_0_68();
    uint64_t v2 = 0;
    if ((v8 & 1) == 0) {
      *(void *)(a1 + 112) = OUTLINED_FUNCTION_1_60(v4, v5, v6, v7);
    }
  }
  return v2;
}

uint64_t rpta_tstctxtr()
{
  OUTLINED_FUNCTION_7_46();
  vtstctx_tv(v2, v3);
  if (!v4)
  {
    OUTLINED_FUNCTION_0_68();
    uint64_t v1 = 0;
    if ((v9 & 1) == 0) {
      *(void *)(v0 + 144) = OUTLINED_FUNCTION_1_60(v5, v6, v7, v8);
    }
  }
  return v1;
}

uint64_t lpta_tstmovel(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 112);
  vtsttmark_tv(a1, a1 + 112);
  if (v2) {
    return 1;
  }
  int v4 = OUTLINED_FUNCTION_9_45();
  uint64_t result = 0;
  void *v1 = v4;
  return result;
}

uint64_t rpta_tstmovel(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 144);
  uint64_t v2 = 1;
  vtsttmark_tv(a1, a1 + 144);
  if (!v3)
  {
    uint64_t v2 = 0;
    void *v1 = OUTLINED_FUNCTION_9_45();
  }
  return v2;
}

uint64_t lpta_tstmover()
{
  OUTLINED_FUNCTION_8_45();
  vtsttmark_tv(v1, v2);
  if (v3) {
    return 1;
  }
  uint64_t v5 = OUTLINED_FUNCTION_12_44(v3, *(unsigned char **)(v0 + 112));
  uint64_t result = 0;
  *(void *)(v0 + 112) = v5;
  return result;
}

uint64_t rpta_tstmover()
{
  OUTLINED_FUNCTION_7_46();
  vtsttmark_tv(v2, v3);
  if (!v4)
  {
    uint64_t v1 = 0;
    *(void *)(v0 + 144) = OUTLINED_FUNCTION_12_44(v4, *(unsigned char **)(v0 + 144));
  }
  return v1;
}

uint64_t lpta_storep(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + 112);
  uint64_t result = vsync_tv(a1, a1 + 112);
  if (!result) {
    forceErrorBacktrack(a1);
  }
  if (*(unsigned char *)(*(void *)(a1 + 192) + 8096)) {
    uint64_t result = (uint64_t)save_var(a1, (unsigned __int16 *)a2);
  }
  *(void *)(a2 + 8) = *v4;
  return result;
}

uint64_t rpta_storep(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + 144);
  uint64_t result = vsync_tv(a1, a1 + 144);
  if (!result) {
    forceErrorBacktrack(a1);
  }
  if (*(unsigned char *)(*(void *)(a1 + 192) + 8096)) {
    uint64_t result = (uint64_t)save_var(a1, (unsigned __int16 *)a2);
  }
  *(void *)(a2 + 8) = *v4;
  return result;
}

unint64_t OUTLINED_FUNCTION_1_60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return vgetsc(v4, 0, 1, a4, v5);
}

unint64_t OUTLINED_FUNCTION_2_57(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return vgetsc(v4, 1, 1, a4, v5);
}

uint64_t OUTLINED_FUNCTION_3_53(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 136) = 2;
  *(unsigned char *)(a1 + 120) = a2;
  return STMTYP(a2);
}

uint64_t OUTLINED_FUNCTION_4_51(char *a1, char a2)
{
  a1[168] = 2;
  a1[152] = a2;
  int v3 = a1[120];
  return STMTYP(v3);
}

uint64_t OUTLINED_FUNCTION_5_47(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 136) = 1;
  *(void *)(result + 112) = *(void *)(a2 + 8);
  *(void *)(result + 128) = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_6_46(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 168) = 1;
  *(void *)(result + 144) = *(void *)(a2 + 8);
  *(void *)(result + 128) = 0;
  return result;
}

unsigned char *OUTLINED_FUNCTION_9_45()
{
  int v3 = *v0;
  return vmovel(v3, v1);
}

uint64_t OUTLINED_FUNCTION_11_45@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W8>)
{
  *(unsigned char *)(result + 168) = a3;
  *(unsigned char *)(result + 152) = a2;
  return result;
}

unsigned char *OUTLINED_FUNCTION_12_44(uint64_t a1, unsigned char *a2)
{
  return vmover(v2, a2, v3);
}

uint64_t OUTLINED_FUNCTION_13_42@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W8>)
{
  *(unsigned char *)(result + 136) = a3;
  *(unsigned char *)(result + 120) = a2;
  return result;
}

uint64_t npush_v(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_2_58(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v11[0], (uint64_t)v11[1]);
  uint64_t result = vnspush(v9, v11);
  if ((*v8 & 0x80000000) == 0) {
    v8[1] = -1;
  }
  return result;
}

uint64_t npush_vf(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_2_58(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v11[0], (uint64_t)v11[1]);
  uint64_t result = vnspush(v9, v11);
  if ((*v8 & 0x80000000) == 0) {
    v8[1] = -1;
  }
  return result;
}

uint64_t npush_s(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_69(a1, 0xFFFFu, v2, v3, v4);
}

uint64_t npush_l(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_69(a1, 0xFFFEu, v2, v3, v4);
}

uint64_t npush_lng(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_69(a1, 0xFFFDu, v2, v3, v4);
}

uint64_t npush_i(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_69(a1, 0xFFFCu, v2, v3, v4);
}

uint64_t npush_f(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_69(a1, 0xFFFBu, v2, v3, v4);
}

uint64_t npush_fld(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v14 = 0;
  uint64_t v4 = &vstmtbl[12 * a2 + 1][40 * a3];
  LOWORD(v14) = *((_WORD *)v4 + 15);
  BYTE2(v14) = v4[32];
  uint64_t v5 = *(void *)(a1 + 192);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 8088);
  if (*(unsigned char *)(v5 + 8089)) {
    uint64_t v7 = *(int *)(v5 + 9084) + v6;
  }
  else {
    uint64_t v7 = v6 + 3;
  }
  uint64_t v8 = (unsigned char *)(*(void *)(*(void *)(v5 + 8080) + 8 * v7) & 0xFFFFFFFFFFFFFFFCLL);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = *(unsigned __int8 *)(v5 + 8088);
  while ((*v8 & 2) != 0)
  {
    uint64_t v10 = *(unsigned __int8 *)(v5 + 8088);
    uint64_t v11 = v10 + 3;
    if (*(unsigned char *)(v5 + 8089))
    {
      uint64_t v11 = *(int *)(v5 + 9084) + (uint64_t)(int)v9;
      uint64_t v10 = v9;
    }
    uint64_t v9 = v10;
    uint64_t v8 = (unsigned char *)(*(void *)&v8[8 * v11] & 0xFFFFFFFFFFFFFFFCLL);
    if (!v8) {
      return 1;
    }
  }
  uint64_t v13 = (_WORD *)(*(uint64_t (**)(unsigned char *))&vstmtbl[12 * a2 + 2][8 * a3])(v8 + 16);
  vnspush(a1, &v13);
  return 0;
}

void npop(uint64_t a1, unsigned __int16 *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  v4[0] = 0;
  v4[1] = 0;
  vnspop(a1, (uint64_t)v5);
  if (*(unsigned char *)(*(void *)(a1 + 192) + 8096)) {
    save_var(a1, a2);
  }
  vinitloc_new(a1, (uint64_t)v4, a2);
  vassign(a1, v4, v5);
  if (((__int16)*a2 & 0x80000000) == 0) {
    a2[1] = -1;
  }
}

void ncompare(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  v2[0] = 0;
  v2[1] = 0;
  vnspop(a1, (uint64_t)v3);
  vnspop(a1, (uint64_t)v2);
  vcompare(a1, v3, v2);
}

void ncompare_s(uint64_t a1, unsigned int a2)
{
  char v10 = a2;
  uint64_t v9 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  vnspop(a1, (uint64_t)&v6);
  if ((__int16)v7 == -1)
  {
    unsigned int v4 = *(unsigned __int8 *)v6;
    if (v4 == a2)
    {
      *(unsigned char *)(*(void *)(a1 + 192) + 8120) = 0;
    }
    else
    {
      if (v4 <= a2) {
        char v5 = -1;
      }
      else {
        char v5 = 1;
      }
      *(unsigned char *)(*(void *)(a1 + 192) + 8120) = v5;
    }
  }
  else
  {
    LOWORD(v9) = -1;
    uint64_t v8 = &v10;
    BYTE2(v9) = 0;
    vcompare(a1, (uint64_t **)&v8, &v6);
  }
}

uint64_t clearDeltaStackBack_0(uint64_t a1)
{
  int v1 = *(unsigned char **)(*(void *)(a1 + 200) + 1760);
  if (*v1 == 8) {
    int v1 = *(unsigned char **)(*(void *)(a1 + 192) + 8112);
  }
  return freeDeltaStackTo_1(a1, (uint64_t)v1);
}

void bsclr_pushca(uint64_t a1, uint64_t a2)
{
  clearDeltaStackBack_0(a1);
  OUTLINED_FUNCTION_1_61(*(void *)(a1 + 200));
  *(void *)(v4 + 8) = a2;
}

void bspush_ca(uint64_t a1)
{
  OUTLINED_FUNCTION_1_61(*(void *)(a1 + 200));
  *(void *)(v2 + 8) = v1;
}

__n128 bspush_ca_scan(uint64_t a1, uint64_t a2)
{
  int v3 = *(__n128 **)(a1 + 192);
  uint64_t v2 = *(void *)(a1 + 200);
  uint64_t v4 = *(int *)(v2 + 288);
  uint64_t v5 = *(void *)(v2 + 1720) - v4;
  int v6 = *(_DWORD *)(v2 + 1728);
  *(unsigned char *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = a2;
  uint64_t v7 = *(int *)(v2 + 284);
  uint64_t v8 = v5 - v7;
  *(void *)(v2 + 1720) = v8;
  *(_DWORD *)(v2 + 1728) = v6 - (v4 + v7);
  *(unsigned char *)uint64_t v8 = 1;
  __n128 result = v3[505];
  *(__n128 *)(v8 + 8) = result;
  return result;
}

void bspush_boa(uint64_t a1)
{
  OUTLINED_FUNCTION_3_54(*(void *)(a1 + 200));
  unsigned char *v1 = 4;
}

void bspush_nboa(uint64_t a1)
{
  OUTLINED_FUNCTION_3_54(*(void *)(a1 + 200));
  unsigned char *v1 = 6;
}

void bspush_vbot(uint64_t a1)
{
  OUTLINED_FUNCTION_3_54(*(void *)(a1 + 200));
  *(unsigned char *)uint64_t v1 = 5;
  *(void *)(v1 + 8) = *(void *)(v2 + 1760);
  *(void *)(v2 + 1760) = v1;
}

uint64_t bspop_vbot(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 200) + 1760) = *(void *)(*(void *)(*(void *)(a1 + 200) + 1720) + 8);
  return popDeltaStackTop(a1);
}

uint64_t back()
{
  return 1;
}

uint64_t back_nboa(uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 192) + 9296) = 1;
  return 1;
}

uint64_t freeDeltaStackTo_1(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 200);
  uint64_t v3 = *(void *)(v2 + 1744);
  if (v3)
  {
    *(void *)(v2 + 1720) = a2;
    *(_DWORD *)(v2 + 1728) = *(_DWORD *)(v2 + 1780) + a2 - *(_DWORD *)(v3 + 32);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_69@<X0>(uint64_t a1@<X0>, unsigned __int16 a2@<W8>, uint64_t a3, _WORD *a4, uint64_t a5)
{
  a4 = v5;
  a5 = a2;
  return vnspush(a1, &a4);
}

void OUTLINED_FUNCTION_1_61(uint64_t a1@<X8>)
{
  uint64_t v1 = *(int *)(a1 + 288);
  uint64_t v2 = (unsigned char *)(*(void *)(a1 + 1720) - v1);
  *(void *)(a1 + 1720) = v2;
  *(_DWORD *)(a1 + 1728) -= v1;
  *uint64_t v2 = 0;
}

void OUTLINED_FUNCTION_2_58(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a9 = 0;
  a10 = 0;
  vinitloc_new(a1, (uint64_t)&a9, a2);
}

void OUTLINED_FUNCTION_3_54(uint64_t a1@<X8>)
{
  *(void *)(a1 + 1720) -= v1;
  *(_DWORD *)(a1 + 1728) -= v1;
}

uint64_t starttest_l(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_0_70(a1, a2);
}

uint64_t clearDeltaStackBack_1(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(*(void *)(a1 + 200) + 1760);
  if (*v1 == 8) {
    uint64_t v1 = *(unsigned char **)(*(void *)(a1 + 192) + 8112);
  }
  return freeDeltaStackTo_2(a1, (uint64_t)v1);
}

uint64_t starttest_e(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_0_70(a1, a2);
}

uint64_t starttest(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_0_70(a1, a2);
}

BOOL testeq(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 192) + 8120) != 0;
}

BOOL testneq(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 192) + 8120) == 0;
}

BOOL testgt(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 192) + 8120) != 1;
}

BOOL testge(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 192) + 8120) == 255;
}

BOOL testlt(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 192) + 8120) != 255;
}

BOOL testle(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 192) + 8120) == 1;
}

BOOL compare_ptas(uint64_t a1)
{
  return vcomp_pta(a1, a1 + 112, a1 + 144) != 0;
}

void compare_tvars(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  v7[0] = 0;
  v7[1] = 0;
  v6[0] = 0;
  v6[1] = 0;
  vinitloc_new(a1, (uint64_t)v7, a2);
  vinitloc_new(a1, (uint64_t)v6, a3);
  vcompare(a1, v7, v6);
  if (((__int16)*a2 & 0x80000000) == 0) {
    a2[1] = -1;
  }
  if (((__int16)*a3 & 0x80000000) == 0) {
    a3[1] = -1;
  }
}

BOOL test_string(void *a1, uint64_t a2, int a3, unsigned char *a4)
{
  unint64_t v24 = 0;
  __int16 v23 = 0;
  double v22 = 0.0;
  if (!a3) {
    return vscanadvOverToken() == 0;
  }
  char v20 = 0;
  uint64_t v21 = 0;
  uint64_t v5 = (uint64_t *)(a4 + 1);
  int v6 = *a4 - 199;
  switch(*a4)
  {
    case 0xC7:
      LOWORD(v2hashDelete(*((void **)this + 513), 1, 1) = -1;
      break;
    case 0xC8:
      __int16 v8 = -2;
      goto LABEL_8;
    case 0xC9:
      LOWORD(v2hashDelete(*((void **)this + 513), 1, 1) = -3;
      uint64_t v9 = (uint64_t *)&v24;
      goto LABEL_10;
    case 0xCA:
      __int16 v8 = -4;
LABEL_8:
      LOWORD(v2hashDelete(*((void **)this + 513), 1, 1) = v8;
      uint64_t v9 = (uint64_t *)&v23;
      goto LABEL_10;
    case 0xCB:
      LOWORD(v2hashDelete(*((void **)this + 513), 1, 1) = -5;
      uint64_t v9 = (uint64_t *)&v22;
LABEL_10:
      char v20 = v9;
      break;
    default:
      break;
  }
  uint64_t v10 = (uint64_t *)&a4[a3];
  v19[0] = 0;
  v19[1] = 0;
  OUTLINED_FUNCTION_8_46();
  uint64_t v12 = (uint64_t (***)(uint64_t))(v11 + 16);
  while (v5 < v10)
  {
    if (*(unsigned char *)(a1[24] + 8089)) {
      OUTLINED_FUNCTION_2_59();
    }
    else {
      OUTLINED_FUNCTION_10_46();
    }
    uint64_t v15 = (unsigned char *)(*(void *)(*(void *)(v13 + 8080) + 8 * v14) & 0xFFFFFFFFFFFFFFFCLL);
    if (!v15) {
      return 1;
    }
    if ((*v15 & 2) == 0)
    {
      switch(v6)
      {
        case 0:
          char v20 = v5;
          uint64_t v5 = (uint64_t *)((char *)v5 + 1);
          break;
        case 1:
        case 2:
          unint64_t v16 = ((unint64_t)*((unsigned __int8 *)v5 + 1) << 16) & 0xFFFFFFFF80FFFFFFLL | ((unint64_t)(*(unsigned char *)v5 & 0x7F) << 24) | ((unint64_t)*((unsigned __int8 *)v5 + 2) << 8) | *((unsigned __int8 *)v5 + 3);
          unint64_t v24 = v16;
          if (*(char *)v5 < 0) {
            unint64_t v24 = -(uint64_t)v16;
          }
          uint64_t v5 = (uint64_t *)((char *)v5 + 4);
          break;
        case 3:
          __int16 v17 = *((unsigned __int8 *)v5 + 1) | ((*(unsigned char *)v5 & 0x7F) << 8);
          __int16 v23 = v17;
          if (*(char *)v5 < 0) {
            __int16 v23 = -v17;
          }
          uint64_t v5 = (uint64_t *)((char *)v5 + 2);
          break;
        case 4:
          double v22 = atof((const char *)v5);
          break;
        default:
          break;
      }
      v19[0] = (uint64_t *)(**v12)((uint64_t)(v15 + 16));
      vcompare((uint64_t)a1, &v20, v19);
      if (*(unsigned char *)(a1[24] + 8120)) {
        return 1;
      }
    }
    uint64_t v7 = 1;
    if (!vscanadv(a1, 1, 1)) {
      return v7;
    }
  }
  return 0;
}

uint64_t test_string_s(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v4 = a4;
  __int16 v23 = 0;
  uint64_t v24 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  unint64_t v6 = (unint64_t)a4 + a3;
  uint64_t v7 = vstmtbl[12 * a2 + 1];
  int v8 = *((unsigned __int16 *)v7 + 15);
  if (v8 == 0xFFFF)
  {
    OUTLINED_FUNCTION_16_40();
    uint64_t v9 = 1;
    while ((unint64_t)v4 < v6)
    {
      OUTLINED_FUNCTION_5_48();
      if (v16) {
        OUTLINED_FUNCTION_2_59();
      }
      else {
        OUTLINED_FUNCTION_10_46();
      }
      OUTLINED_FUNCTION_6_47();
      if (v12) {
        return 1;
      }
      if ((*v17 & 2) == 0)
      {
        uint64_t v18 = OUTLINED_FUNCTION_7_47((uint64_t)v17);
        if (*(unsigned __int8 *)v19(v18) != *(unsigned __int8 *)v4) {
          return 1;
        }
        uint64_t v4 = (uint64_t *)((char *)v4 + 1);
      }
      if (!OUTLINED_FUNCTION_3_55()) {
        return v9;
      }
    }
  }
  else
  {
    LOWORD(v24) = -1;
    BYTE2(v24) = v7[32];
    BYTE2(v22) = BYTE2(v24);
    LOWORD(v22) = v8;
    OUTLINED_FUNCTION_16_40();
    uint64_t v9 = 1;
    while ((unint64_t)v4 < v6)
    {
      OUTLINED_FUNCTION_5_48();
      if (v10) {
        OUTLINED_FUNCTION_2_59();
      }
      else {
        OUTLINED_FUNCTION_10_46();
      }
      OUTLINED_FUNCTION_6_47();
      if (v12) {
        return 1;
      }
      if ((*v11 & 2) == 0)
      {
        __int16 v23 = v4;
        uint64_t v13 = OUTLINED_FUNCTION_7_47((uint64_t)v11);
        uint64_t v21 = (uint64_t *)v14(v13);
        vcompare(a1, &v23, &v21);
        OUTLINED_FUNCTION_15_41();
        if (v15) {
          return 1;
        }
        uint64_t v4 = (uint64_t *)((char *)v4 + 1);
      }
      if (!OUTLINED_FUNCTION_3_55()) {
        return v9;
      }
    }
  }
  return 0;
}

uint64_t test_string_l()
{
  OUTLINED_FUNCTION_14_42();
  OUTLINED_FUNCTION_1_62();
  while (v0 < v2)
  {
    OUTLINED_FUNCTION_5_48();
    if (v3) {
      OUTLINED_FUNCTION_2_59();
    }
    else {
      OUTLINED_FUNCTION_10_46();
    }
    OUTLINED_FUNCTION_6_47();
    if (v5) {
      return 1;
    }
    if ((*v4 & 2) == 0)
    {
      OUTLINED_FUNCTION_12_45();
      uint64_t v7 = OUTLINED_FUNCTION_7_47(v6);
      uint64_t v9 = (uint64_t *)v8(v7);
      OUTLINED_FUNCTION_4_52(v9, v10);
      OUTLINED_FUNCTION_15_41();
      if (v11) {
        return 1;
      }
      v0 += 2;
    }
    if (!OUTLINED_FUNCTION_3_55()) {
      return v1;
    }
  }
  return 0;
}

uint64_t test_string_lng(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  unint64_t v5 = a4;
  unint64_t v6 = a4 + a3;
  OUTLINED_FUNCTION_1_62();
  while (v5 < v6)
  {
    OUTLINED_FUNCTION_5_48();
    if (v7) {
      OUTLINED_FUNCTION_2_59();
    }
    else {
      OUTLINED_FUNCTION_10_46();
    }
    OUTLINED_FUNCTION_6_47();
    if (v9) {
      return 1;
    }
    if ((*v8 & 2) == 0)
    {
      uint64_t v10 = OUTLINED_FUNCTION_7_47((uint64_t)v8);
      char v12 = (uint64_t *)v11(v10);
      OUTLINED_FUNCTION_4_52(v12, v13);
      OUTLINED_FUNCTION_15_41();
      if (v14) {
        return 1;
      }
      v5 += 4;
    }
    if (!OUTLINED_FUNCTION_3_55()) {
      return v4;
    }
  }
  return 0;
}

uint64_t test_string_i()
{
  OUTLINED_FUNCTION_14_42();
  OUTLINED_FUNCTION_1_62();
  while (v0 < v2)
  {
    OUTLINED_FUNCTION_5_48();
    if (v3) {
      OUTLINED_FUNCTION_2_59();
    }
    else {
      OUTLINED_FUNCTION_10_46();
    }
    OUTLINED_FUNCTION_6_47();
    if (v5) {
      return 1;
    }
    if ((*v4 & 2) == 0)
    {
      OUTLINED_FUNCTION_12_45();
      uint64_t v7 = OUTLINED_FUNCTION_7_47(v6);
      char v9 = (uint64_t *)v8(v7);
      OUTLINED_FUNCTION_4_52(v9, v10);
      OUTLINED_FUNCTION_15_41();
      if (v11) {
        return 1;
      }
      v0 += 2;
    }
    if (!OUTLINED_FUNCTION_3_55()) {
      return v1;
    }
  }
  return 0;
}

uint64_t test_string_f()
{
  OUTLINED_FUNCTION_8_46();
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v1;
  uint64_t v5 = v0;
  uint64_t v6 = (uint64_t (***)(uint64_t))(v2 + 16);
  while (1)
  {
    if (*(unsigned char *)(*(void *)(v5 + 192) + 8089)) {
      OUTLINED_FUNCTION_2_59();
    }
    else {
      OUTLINED_FUNCTION_10_46();
    }
    char v9 = (unsigned char *)(*(void *)(*(void *)(v7 + 8080) + 8 * v8) & 0xFFFFFFFFFFFFFFFCLL);
    if (!v9) {
      break;
    }
    if ((*v9 & 2) == 0)
    {
      atof(v4);
      uint64_t v10 = (uint64_t *)(**v6)((uint64_t)(v9 + 16));
      OUTLINED_FUNCTION_4_52(v10, v11);
      if (*(unsigned char *)(*(void *)(v5 + 192) + 8120)) {
        break;
      }
    }
    uint64_t v12 = 1;
    if (!OUTLINED_FUNCTION_3_55()) {
      return v12;
    }
  }
  return 1;
}

uint64_t test_ptr(uint64_t a1)
{
  if (!*(void *)(a1 + 112)) {
    return 1;
  }
  if ((*(unsigned char *)(a1 + 136) & 2) != 0) {
    vnormalize(a1, a1 + 112);
  }
  uint64_t v2 = 1;
  while (*(void *)(*(void *)(a1 + 192) + 8080) != *(void *)(a1 + 112))
  {
    if (!OUTLINED_FUNCTION_9_46()) {
      return v2;
    }
  }
  return 0;
}

uint64_t test_time(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 128);
  v15[0] = *(_OWORD *)(a1 + 112);
  v15[1] = v4;
  vtsttmark_tv(a1, (uint64_t)v15);
  uint64_t v5 = 1;
  if (!v6)
  {
    *(void *)(a1 + 144) = *(void *)(*(void *)(a1 + 192) + 8080);
    *(unsigned char *)(a1 + 168) = 1;
    if (!vcomp_pta(a1, a1 + 112, a1 + 144))
    {
      while (1)
      {
        uint64_t v8 = *(void *)(a1 + 192);
        if (!*(unsigned char *)(v8 + 8120)) {
          break;
        }
        if (!OUTLINED_FUNCTION_9_46()) {
          return v5;
        }
        *(void *)(a1 + 144) = *(void *)(*(void *)(a1 + 192) + 8080);
        if (vcomp_pta(a1, a1 + 112, a1 + 144)) {
          return 1;
        }
      }
      uint64_t v5 = 0;
      uint64_t v9 = *(void *)(a1 + 200);
      uint64_t v10 = *(int *)(v9 + 288);
      uint64_t v11 = *(void *)(v9 + 1720) - v10;
      int v12 = *(_DWORD *)(v9 + 1728);
      *(unsigned char *)uint64_t v11 = 3;
      *(void *)(v11 + 8) = a2;
      uint64_t v13 = *(int *)(v9 + 284);
      uint64_t v14 = v11 - v13;
      *(void *)(v9 + 1720) = v14;
      *(_DWORD *)(v9 + 1728) = v12 - (v10 + v13);
      *(unsigned char *)uint64_t v14 = 1;
      *(_OWORD *)(v14 + 8) = *(_OWORD *)(v8 + 8080);
      *(unsigned char *)(*(void *)(a1 + 280) + *(unsigned __int8 *)(*(void *)(a1 + 264) + *(unsigned __int8 *)(a1 + 120))) = 1;
    }
  }
  return v5;
}

uint64_t test_synch(void *a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  int v7 = 0;
  unint64_t v8 = a3;
  uint64_t v9 = 1;
  while (!v7)
  {
    unint64_t v10 = 0;
    int v7 = 1;
    while (v10 < v8 && v7)
    {
      if (*(void *)(*(void *)(a1[24] + 8080) + 8 * (*(_DWORD *)(a1[24] + 9084) + a4[v10])))
      {
        int v7 = 1;
      }
      else
      {
        int v11 = vscanadv(a1, 0, 1);
        int v7 = 0;
        if (!v11) {
          return v9;
        }
      }
      ++v10;
    }
  }
  OUTLINED_FUNCTION_13_43(a1[25]);
  *(void *)(v12 + 8) = a2;
  *(void *)(v13 + 1720) = v12 - *(int *)(v13 + 284);
  OUTLINED_FUNCTION_11_46(v13);
  for (; v8; --v8)
  {
    unsigned int v15 = *a4++;
    *(unsigned char *)(a1[35] + *(unsigned __int8 *)(a1[33] + v15)) = v14;
  }
  return 0;
}

uint64_t test_fence(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
  {
    int v8 = 0;
    uint64_t v9 = 1;
    while (!v8)
    {
      char v10 = 0;
      int v8 = 1;
      while (a3 > v10 && v8)
      {
        uint64_t v11 = *(unsigned __int8 *)(a4 + v10);
        if (*(unsigned __int8 *)(*(void *)(a1 + 264) + v11) == *(unsigned __int8 *)(a1 + 288)
          && !FENCED(a1, *(void *)(*(void *)(a1 + 192) + 8080), (char)v11))
        {
          int v12 = OUTLINED_FUNCTION_9_46();
          int v8 = 0;
          if (!v12) {
            return v9;
          }
        }
        else
        {
          int v8 = 1;
        }
        ++v10;
      }
    }
    char v19 = 0;
    uint64_t v21 = *(void *)(a1 + 192);
    uint64_t v20 = *(void *)(a1 + 200);
    uint64_t v22 = *(int *)(v20 + 288);
    uint64_t v23 = *(void *)(v20 + 1720) - v22;
    *(unsigned char *)uint64_t v23 = 3;
    *(void *)(v23 + 8) = a2;
    uint64_t v24 = *(int *)(v20 + 284);
    uint64_t v25 = v23 - v24;
    LODWORD(v22) = v22 + v24;
    LODWORD(v24) = *(_DWORD *)(v20 + 1728);
    *(void *)(v20 + 1720) = v25;
    *(_DWORD *)(v20 + 1728) = v24 - v22;
    *(unsigned char *)uint64_t v25 = 1;
    *(_OWORD *)(v25 + 8) = *(_OWORD *)(v21 + 8080);
    while (a3 > v19)
      *(unsigned char *)(*(void *)(a1 + 280) + *(unsigned __int8 *)(*(void *)(a1 + 264) + *(unsigned __int8 *)(a4 + v19++))) = 1;
    return 0;
  }
  else
  {
    int v13 = 0;
    uint64_t v9 = 1;
    while (!v13)
    {
      char v14 = 0;
      int v13 = 1;
      while (1)
      {
        int v15 = v14;
        int v16 = *(unsigned __int8 *)(a1 + 288);
        if (!v13 || v15 >= v16) {
          break;
        }
        uint64_t v17 = *(void *)(a1 + 192);
        if (v15 == *(unsigned __int8 *)(v17 + 8088)
          || *(unsigned __int8 *)(*(void *)(a1 + 264) + v15) != v16
          || FENCED(a1, *(void *)(v17 + 8080), v15))
        {
          int v13 = 1;
        }
        else
        {
          int v18 = OUTLINED_FUNCTION_9_46();
          int v13 = 0;
          if (!v18) {
            return v9;
          }
        }
        char v14 = v15 + 1;
      }
    }
    uint64_t v9 = 0;
    OUTLINED_FUNCTION_13_43(*(void *)(a1 + 200));
    *(void *)(v26 + 8) = a2;
    *(void *)(v27 + 1720) = v26 - *(int *)(v27 + 284);
    OUTLINED_FUNCTION_11_46(v27);
    *(unsigned char *)(*(void *)(a1 + 192) + 8090) = v28;
  }
  return v9;
}

BOOL test_eof(uint64_t a1, char a2)
{
  return !vf_eof(a1, a2);
}

uint64_t test_hasval(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 184);
  *(_DWORD *)(v1 + 436) = 0;
  *(unsigned char *)(v1 + 32) = 0;
  return 1;
}

uint64_t freeDeltaStackTo_2(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 200);
  uint64_t v3 = *(void *)(v2 + 1744);
  if (v3)
  {
    *(void *)(v2 + 1720) = a2;
    *(_DWORD *)(v2 + 1728) = *(_DWORD *)(v2 + 1780) + a2 - *(_DWORD *)(v3 + 32);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_70(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(a1 + 192) + 8064) = a2;
  uint64_t result = clearDeltaStackBack_1(a1);
  uint64_t v5 = *(void *)(a1 + 192);
  uint64_t v4 = *(void *)(a1 + 200);
  uint64_t v6 = *(int *)(v4 + 288);
  uint64_t v7 = *(void *)(v4 + 1720) - v6;
  *(void *)(v4 + 1720) = v7;
  *(_DWORD *)(v4 + 1728) -= v6;
  *(unsigned char *)uint64_t v7 = 0;
  *(void *)(v7 + 8) = *(void *)(v5 + 8064);
  *(unsigned char *)(v5 + 8096) = 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_3_55()
{
  return vscanadv(v0, 1, 1);
}

void OUTLINED_FUNCTION_4_52(uint64_t *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v4 = a1;
  vcompare(v2, (uint64_t **)va1, (uint64_t **)va);
}

uint64_t OUTLINED_FUNCTION_7_47@<X0>(uint64_t a1@<X8>)
{
  return a1 + 16;
}

uint64_t OUTLINED_FUNCTION_9_46()
{
  return vscanadv(v0, 0, 1);
}

__n128 OUTLINED_FUNCTION_11_46@<Q0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 1728) = v4 - v2;
  *(unsigned char *)uint64_t v3 = 1;
  __n128 result = v1[505];
  *(__n128 *)(v3 + 8) = result;
  return result;
}

void OUTLINED_FUNCTION_13_43(uint64_t a1@<X8>)
{
  *(unsigned char *)(*(void *)(a1 + 1720) - *(int *)(a1 + 288)) = 3;
}

uint64_t num_streams(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 288);
}

uint64_t num_fields_in_stream(int a1)
{
  return LODWORD(vstmtbl[12 * a1 + 8]);
}

char *stream_name(int a1)
{
  return vstmtbl[12 * a1];
}

uint64_t single_letter_stream(int a1)
{
  return LOBYTE(vstmtbl[12 * a1 + 10]);
}

uint64_t time_stream(int a1)
{
  return BYTE6(vstmtbl[12 * a1 + 10]);
}

uint64_t num_fields(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t result = 0;
  while (16 * (*(_DWORD *)a1 & ~(*(int *)a1 >> 31)) != v2)
  {
    uint64_t result = (*(_DWORD *)(*(void *)(a1 + 8) + v2 + 4) + result);
    v2 += 16;
  }
  return result;
}

uint64_t field_name(int a1, int a2)
{
  return *(void *)&vstmtbl[12 * a1 + 1][40 * a2];
}

uint64_t first_field(uint64_t a1, uint64_t a2, unsigned char *a3, _DWORD *a4)
{
  *(void *)(*(void *)(a1 + 200) + 300) = 0;
  if (*(int *)a2 < 1) {
    return OUTLINED_FUNCTION_5_49();
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(int *)(v4 + 4) < 1) {
    return OUTLINED_FUNCTION_5_49();
  }
  else {
    return OUTLINED_FUNCTION_1_63(a1, a2, a3, a4, *(unsigned char *)v4);
  }
}

uint64_t next_field(uint64_t a1, uint64_t a2, unsigned char *a3, _DWORD *a4)
{
  uint64_t v4 = *(void *)(a1 + 200);
  int v5 = *(_DWORD *)(v4 + 304) + 1;
  *(_DWORD *)(v4 + 304) = v5;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(int *)(v4 + 300);
  if (v5 < *(_DWORD *)(v6 + 16 * v7 + 4)) {
    return OUTLINED_FUNCTION_1_63(a1, a2, a3, a4, *(unsigned char *)(v6 + 16 * v7));
  }
  LODWORD(v7) = v7 + 1;
  *(_DWORD *)(v4 + 300) = v7;
  if ((int)v7 < *(_DWORD *)a2)
  {
    *(_DWORD *)(v4 + 304) = 0;
    uint64_t v7 = (int)v7;
    return OUTLINED_FUNCTION_1_63(a1, a2, a3, a4, *(unsigned char *)(v6 + 16 * v7));
  }
  return OUTLINED_FUNCTION_5_49();
}

uint64_t left_delta(uint64_t a1)
{
  return **(void **)(a1 + 200);
}

uint64_t right_delta(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 200) + 8);
}

unint64_t sync_to_right(uint64_t a1, int a2, uint64_t a3)
{
  return VRSYNC(a1, a3, a2);
}

void *sync_to_left(uint64_t a1, int a2, uint64_t a3)
{
  return VLSYNC(a3, a2);
}

uint64_t is_token_prev(int a1, uint64_t a2)
{
  if ((*(void *)(a2 + 8 * a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) != 0
    && (*(unsigned char *)(*(void *)(a2 + 8 * a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) & 2) != 0)
  {
    return OUTLINED_FUNCTION_5_49();
  }
  else
  {
    return OUTLINED_FUNCTION_4_53();
  }
}

uint64_t is_token_next()
{
  OUTLINED_FUNCTION_16_41();
  uint64_t v1 = (unsigned char *)(v0 & 0xFFFFFFFFFFFFFFFCLL);
  if (v1 && (*v1 & 2) != 0) {
    return OUTLINED_FUNCTION_5_49();
  }
  else {
    return OUTLINED_FUNCTION_4_53();
  }
}

unint64_t prev_token(int a1, uint64_t a2)
{
  return *(void *)(a2 + 8 * a1 + 24) & 0xFFFFFFFFFFFFFFFCLL;
}

unint64_t next_token()
{
  OUTLINED_FUNCTION_16_41();
  return v0 & 0xFFFFFFFFFFFFFFFCLL;
}

void *left_context()
{
  OUTLINED_FUNCTION_16_41();
  if ((v2 & 1) == 0) {
    return VLSYNC(v1, v0);
  }
  return (void *)v1;
}

unint64_t right_context(uint64_t a1, int a2, uint64_t a3)
{
  if ((*(void *)(a3 + 8 * (*(_DWORD *)(*(void *)(a1 + 192) + 9084) + a2)) & 1) == 0) {
    return VRSYNC(a1, a3, a2);
  }
  return a3;
}

BOOL syncmark_equ(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void valid_prefix()
{
  OUTLINED_FUNCTION_8_47();
  uint64_t v3 = v2;
  switch(v4)
  {
    case -5:
      OUTLINED_FUNCTION_13_44();
      legal_double();
      break;
    case -4:
      OUTLINED_FUNCTION_13_44();
      legal_int();
      break;
    case -3:
      OUTLINED_FUNCTION_13_44();
      legal_long();
      break;
    case -2:
    case -1:
      int v5 = v1;
      if (allchrs(v2))
      {
        uint64_t v6 = 0;
        uint64_t v7 = v0 + 40 * v5;
        int v8 = (void *)(v7 + 16);
        uint64_t v9 = *(__int16 *)(v7 + 28) & ~(*(__int16 *)(v7 + 28) >> 31);
        do
        {
          if (8 * v9 == v6) {
            break;
          }
          int v10 = strcmp(*(const char **)(*v8 + v6), "undefined");
          v6 += 8;
        }
        while (v10);
      }
      else
      {
        int v14 = *(__int16 *)(v0 + 40 * v5 + 28);
        uint64_t v9 = v14 & ~(v14 >> 31);
      }
      uint64_t v15 = 0;
      int v16 = (void *)(v0 + 40 * v5 + 16);
      do
      {
        if (8 * v9 == v15) {
          break;
        }
        int v17 = strprefix(*(unsigned __int8 **)(*v16 + v15), v3);
        v15 += 8;
      }
      while (!v17);
      goto LABEL_20;
    default:
LABEL_20:
      OUTLINED_FUNCTION_13_44();
      break;
  }
}

BOOL allchrs(unsigned __int8 *a1)
{
  while (1)
  {
    int v1 = *a1;
    if (v1 != 45) {
      break;
    }
    ++a1;
  }
  return v1 == 0;
}

uint64_t strprefix(unsigned __int8 *a1, unsigned __int8 *a2)
{
  while (1)
  {
    int v3 = *a2++;
    int v2 = v3;
    if (!v3) {
      break;
    }
    int v4 = *a1++;
    if (v4 != v2) {
      return OUTLINED_FUNCTION_5_49();
    }
  }
  return OUTLINED_FUNCTION_4_53();
}

uint64_t legal_long()
{
  int v2 = OUTLINED_FUNCTION_10_47();
  OUTLINED_FUNCTION_9_47(v2, v3, v4, v5, v6, v7, v8, v9, v12, v13);
  uint64_t result = OUTLINED_FUNCTION_15_42();
  if (!v11)
  {
    if (*__error() == 34)
    {
      return 0;
    }
    else
    {
      if (v0) {
        *uint64_t v0 = v1;
      }
      return 1;
    }
  }
  return result;
}

uint64_t legal_int()
{
  int v2 = OUTLINED_FUNCTION_10_47();
  OUTLINED_FUNCTION_9_47(v2, v3, v4, v5, v6, v7, v8, v9, v14, v15);
  uint64_t result = OUTLINED_FUNCTION_15_42();
  if (!v11)
  {
    if (*__error() == 34 || v1 > 0x7FFFFFFF || v1 < (uint64_t)0xFFFFFFFF80000000)
    {
      return 0;
    }
    else
    {
      if (v0) {
        *uint64_t v0 = v1;
      }
      return 1;
    }
  }
  return result;
}

uint64_t legal_double()
{
  *OUTLINED_FUNCTION_10_47() = 35;
  double v2 = strtod(v1, &v5);
  if (*v5) {
    return 0;
  }
  double v3 = v2;
  if (*__error() == 34) {
    return 0;
  }
  if (v0) {
    *uint64_t v0 = v3;
  }
  return 1;
}

void valid_prefix_char(uint64_t a1, uint64_t a2, int a3)
{
  OUTLINED_FUNCTION_8_47();
  if (v6 + 4 >= 2 && v6 >= 0xFFFFFFFE)
  {
    int v7 = v5;
    __int16 v8 = *(_WORD *)(v3 + 40 * v5 + 28);
    if (a3 == 45)
    {
      uint64_t v9 = 0;
      int v10 = (void *)(v3 + 40 * v5 + 16);
      uint64_t v11 = v8 & ~(v8 >> 31);
      while (8 * v11 != v9)
      {
        int v12 = strcmp(*(const char **)(*v10 + v9), "undefined");
        v9 += 8;
        if (!v12) {
          goto LABEL_14;
        }
      }
    }
    else
    {
      uint64_t v11 = v8 & ~(v8 >> 31);
    }
    uint64_t v13 = 0;
    do
    {
      if (8 * v11 == v13) {
        break;
      }
      int v14 = **(unsigned __int8 **)(*(void *)(v3 + 40 * v7 + 16) + v13);
      v13 += 8;
    }
    while (v14 != a3);
  }
LABEL_14:
  OUTLINED_FUNCTION_13_44();
}

uint64_t unique_value(uint64_t a1, int a2, int a3, unsigned __int8 *a4, const char **a5, void *a6, uint64_t a7, _WORD *a8, _WORD *a9, _WORD *a10, _WORD *a11)
{
  if (!*a4) {
    return 0;
  }
  uint64_t v11 = vstmtbl[12 * a2 + 1];
  uint64_t v13 = (unsigned __int8 **)a5;
  int v14 = a4;
  switch(*(_WORD *)&v11[40 * a3 + 30])
  {
    case 0xFFFB:
      uint64_t v15 = a11;
      uint64_t result = legal_double();
      if (!result) {
        return result;
      }
      goto LABEL_27;
    case 0xFFFC:
      uint64_t v15 = a10;
      uint64_t result = legal_int();
      if (!result) {
        return result;
      }
      goto LABEL_27;
    case 0xFFFD:
      uint64_t v15 = a9;
      uint64_t result = legal_long();
      if (!result) {
        return result;
      }
      goto LABEL_27;
    case 0xFFFE:
    case 0xFFFF:
      uint64_t v15 = a8;
      *a8 = -1;
      if (allchrs(a4))
      {
        uint64_t v29 = a6;
        uint64_t v18 = 0;
        char v19 = &v11[40 * a3];
        uint64_t v20 = (__int16 *)(v19 + 28);
        uint64_t v21 = v19 + 16;
        __int16 v22 = -1;
        while (v18 < *v20)
        {
          if (!strcmp(*(const char **)(*v21 + 8 * v18), "undefined"))
          {
            if (v22 != -1) {
              return 0;
            }
            *uint64_t v15 = v18;
            __int16 v22 = v18;
          }
          ++v18;
        }
        a6 = v29;
      }
      else
      {
        __int16 v22 = -1;
      }
      uint64_t v24 = 0;
      uint64_t v25 = &v11[40 * a3];
      uint64_t v26 = (__int16 *)(v25 + 28);
      uint64_t v27 = v25 + 16;
      break;
    default:
      return 0;
  }
  while (v24 < *v26)
  {
    if (strprefix(*(unsigned __int8 **)(*v27 + 8 * v24), v14))
    {
      if (v22 != -1) {
        return 0;
      }
      *uint64_t v15 = v24;
      __int16 v22 = v24;
    }
    ++v24;
  }
  if (v22 == -1) {
    return 0;
  }
  char v28 = *(const char **)(*v27 + 8 * v22);
  uint64_t v13 = (unsigned __int8 **)a5;
  *a5 = v28;
  if (!strcmp(v28, "undefined"))
  {
    int v14 = *(unsigned __int8 **)(*(void *)(a1 + 200) + 336);
LABEL_27:
    *uint64_t v13 = v14;
  }
  *a6 = v15;
  return 1;
}

uint64_t non_unique_value(uint64_t a1, int a2, int a3, unsigned __int8 *a4, void *a5, void *a6, uint64_t a7, _WORD *a8, _WORD *a9, _WORD *a10, _WORD *a11)
{
  if (*a4)
  {
    uint64_t v11 = vstmtbl[12 * a2 + 1];
    int v14 = a4;
    switch(*(_WORD *)&v11[40 * a3 + 30])
    {
      case 0xFFFB:
        uint64_t v15 = a11;
        uint64_t result = legal_double();
        if (!result) {
          return result;
        }
        goto LABEL_24;
      case 0xFFFC:
        uint64_t v15 = a10;
        uint64_t result = legal_int();
        if (!result) {
          return result;
        }
        goto LABEL_24;
      case 0xFFFD:
        uint64_t v15 = a9;
        uint64_t result = legal_long();
        if (!result) {
          return result;
        }
        goto LABEL_24;
      case 0xFFFE:
      case 0xFFFF:
        uint64_t v15 = a8;
        *a8 = -1;
        if (!allchrs(a4)) {
          goto LABEL_15;
        }
        uint64_t v17 = 0;
        OUTLINED_FUNCTION_14_43();
        char v19 = (void *)(v18 + 16);
        uint64_t v21 = v20 & ~(v20 >> 31);
        break;
      default:
        return 0;
    }
    while (1)
    {
      if (v21 == v17) {
        goto LABEL_15;
      }
      if (!strcmp(*(const char **)(*v19 + 8 * v17), "undefined")) {
        break;
      }
      ++v17;
    }
    *uint64_t v15 = v17;
    LOWORD(v23) = v17;
    if ((_WORD)v17 != 0xFFFF)
    {
LABEL_22:
      char v28 = *(const char **)(*(void *)&v11[40 * a3 + 16] + 8 * (__int16)v23);
      *a5 = v28;
      if (!strcmp(v28, "undefined"))
      {
        int v14 = *(unsigned __int8 **)(*(void *)(a1 + 200) + 336);
LABEL_24:
        *a5 = v14;
      }
      *a6 = v15;
      return 1;
    }
LABEL_15:
    uint64_t v23 = 0;
    OUTLINED_FUNCTION_14_43();
    uint64_t v25 = (void *)(v24 + 16);
    uint64_t v27 = v26 & ~(v26 >> 31);
    while (1)
    {
      if (v27 == v23)
      {
        LOWORD(v23) = -1;
        goto LABEL_21;
      }
      if (strprefix(*(unsigned __int8 **)(*v25 + 8 * v23), v14)) {
        break;
      }
      ++v23;
    }
    *uint64_t v15 = v23;
LABEL_21:
    if ((_WORD)v23 != 0xFFFF) {
      goto LABEL_22;
    }
  }
  return 0;
}

BOOL enum_field(int a1, int a2)
{
  return *(unsigned __int16 *)&vstmtbl[12 * a1 + 1][40 * a2 + 30] > 0xFFFDu;
}

char *field_value(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  int v5 = &vstmtbl[12 * (int)a1];
  __int16 v8 = v5[1];
  int v7 = v5 + 1;
  unsigned int v6 = v8;
  switch(*(_WORD *)&v8[40 * a3 + 30])
  {
    case 0xFFFB:
      uint64_t v10 = OUTLINED_FUNCTION_0_71(a1, a2);
      int v12 = (void *)v11(v10);
      double v13 = *(double *)v12;
      if (*(unsigned char *)(*v7 + 40 * a3 + 32)) {
        BOOL v14 = v13 == 2.22507386e-308;
      }
      else {
        BOOL v14 = 0;
      }
      if (v14) {
        goto LABEL_19;
      }
      sprintf(a4, *(const char **)(*v7 + 40 * a3 + 8), v13, *v12);
      return a4;
    case 0xFFFC:
      uint64_t v16 = OUTLINED_FUNCTION_0_71(a1, a2);
      int v18 = *(unsigned __int16 *)v17(v16);
      if (*(unsigned char *)(*v7 + 40 * a3 + 32)) {
        BOOL v20 = v18 == 32769;
      }
      else {
        BOOL v20 = 0;
      }
      if (v20) {
        goto LABEL_19;
      }
      sprintf(a4, *(const char **)(*v7 + 40 * a3 + 8), v19, (__int16)v18);
      return a4;
    case 0xFFFD:
      uint64_t v21 = OUTLINED_FUNCTION_0_71(a1, a2);
      uint64_t v23 = (void *)v22(v21);
      if (*(unsigned char *)(*v7 + 40 * a3 + 32)) {
        BOOL v25 = *v23 == -2147483647;
      }
      else {
        BOOL v25 = 0;
      }
      if (v25)
      {
LABEL_19:
        int v15 = 5259591;
        goto LABEL_26;
      }
      sprintf(a4, *(const char **)(*v7 + 40 * a3 + 8), v24, *v23);
      return a4;
    case 0xFFFE:
      uint64_t v26 = *(void *)&v6[40 * a3 + 16];
      uint64_t v27 = OUTLINED_FUNCTION_0_71(a1, a2);
      uint64_t v29 = *(int *)v28(v27);
      goto LABEL_22;
    case 0xFFFF:
      uint64_t v26 = *(void *)&v6[40 * a3 + 16];
      uint64_t v30 = OUTLINED_FUNCTION_0_71(a1, a2);
      uint64_t v29 = *(unsigned __int8 *)v31(v30);
LABEL_22:
      char v32 = strcpy(a4, *(const char **)(v26 + 8 * v29));
      if (!strcmp(v32, "undefined"))
      {
        int v15 = 2960685;
      }
      else
      {
        if (strcmp(a4, " ")) {
          return a4;
        }
        int v15 = 2564135;
      }
LABEL_26:
      *(_DWORD *)a4 = v15;
      return a4;
    default:
      int v15 = 4144959;
      goto LABEL_26;
  }
}

uint64_t time_field_value(uint64_t a1, uint64_t a2)
{
  if (!BYTE6(vstmtbl[12 * (int)a1 + 10])) {
    return 0xFFFFFFFFLL;
  }
  int v2 = *((__int16 *)vstmtbl[12 * (int)a1 + 1] + 15);
  if (v2 != -4)
  {
    if (v2 == -3)
    {
      uint64_t v3 = OUTLINED_FUNCTION_11_47(a1, a2);
      return *(unsigned int *)v4(v3);
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = OUTLINED_FUNCTION_11_47(a1, a2);
  return *(__int16 *)v7(v6);
}

void first_fieldval(uint64_t a1, char a2, int a3, unsigned __int8 *a4)
{
  uint64_t v5 = *(void *)(a1 + 200);
  *(unsigned char *)(v5 + 308) = a2;
  *(_DWORD *)(v5 + 312) = a3;
  *(void *)(v5 + 320) = a4;
  *(_DWORD *)(v5 + 328) = -1;
  if (a4) {
    BOOL v6 = allchrs(a4);
  }
  else {
    BOOL v6 = 0;
  }
  *(unsigned char *)(v5 + 332) = v6;
  next_fieldval(a1);
}

void next_fieldval(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 200);
  uint64_t v2 = *(int *)(v1 + 328);
  uint64_t v3 = v2 + 1;
  *(_DWORD *)(v1 + 328) = v2 + 1;
  int v4 = vstmtbl[12 * *(char *)(v1 + 308) + 1];
  int v5 = *(_DWORD *)(v1 + 312);
  if ((int)v2 + 1 >= *(__int16 *)&v4[40 * v5 + 28] || (BOOL v6 = *(unsigned char **)(v1 + 320)) != 0 && *v6)
  {
    uint64_t v7 = *(__int16 *)&v4[40 * v5 + 28];
    __int16 v8 = &v4[40 * v5 + 16];
    for (int i = v2 + 2; v3 < v7; ++i)
    {
      uint64_t v10 = *(unsigned __int8 **)(*(void *)v8 + 8 * v3);
      if (strprefix(v10, *(unsigned __int8 **)(v1 + 320))
        || *(unsigned char *)(v1 + 332) && !strcmp((const char *)v10, "undefined"))
      {
        break;
      }
      ++v3;
      *(_DWORD *)(v1 + 328) = i;
    }
  }
  OUTLINED_FUNCTION_13_44();
}

uint64_t can_del_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)(a1 + 200);
  if (*v3 == a3 || v3[1] == a3) {
    return 0;
  }
  if (!is_token_next() || !is_token_prev(a2, a3)) {
    return 1;
  }
  unint64_t v7 = *(void *)(a3 + 8 * (int)a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = *(void *)(a3 + 8 * (*(_DWORD *)(*(void *)(a1 + 192) + 9084) + (int)a2)) & 0xFFFFFFFFFFFFFFFCLL;
  if (BYTE6(vstmtbl[12 * (int)a2 + 10])
    || (field_value(a2, v7, 0, v39), uint64_t result = 0, *(_DWORD *)v39 == 5259591)
    && (field_value(a2, v8, 0, v38), uint64_t result = 0, *(_DWORD *)v38 == 5259591))
  {
    uint64_t v9 = &vstmtbl[12 * (int)a2];
    uint64_t v10 = (int *)(v9 + 8);
    uint64_t v11 = v9 + 1;
    uint64_t v12 = 1;
    while (v12 < *v10)
    {
      switch(*((_WORD *)*v11 + 15))
      {
        case 0xFFFB:
          uint64_t v13 = OUTLINED_FUNCTION_2_60();
          double v15 = *(double *)v14(v13);
          uint64_t v16 = OUTLINED_FUNCTION_3_56();
          if (v15 != *(double *)v17(v16)) {
            return 0;
          }
          goto LABEL_17;
        case 0xFFFC:
          uint64_t v18 = OUTLINED_FUNCTION_2_60();
          int v20 = *(unsigned __int16 *)v19(v18);
          uint64_t v21 = OUTLINED_FUNCTION_3_56();
          int v23 = *(unsigned __int16 *)v22(v21);
          goto LABEL_16;
        case 0xFFFD:
          uint64_t v24 = OUTLINED_FUNCTION_2_60();
          uint64_t v26 = *(void *)v25(v24);
          uint64_t v27 = OUTLINED_FUNCTION_3_56();
          if (v26 != *(void *)v28(v27)) {
            return 0;
          }
          goto LABEL_17;
        case 0xFFFE:
          uint64_t v29 = OUTLINED_FUNCTION_2_60();
          int v20 = *(_DWORD *)v30(v29);
          uint64_t v31 = OUTLINED_FUNCTION_3_56();
          int v23 = *(_DWORD *)v32(v31);
          goto LABEL_16;
        case 0xFFFF:
          uint64_t v33 = OUTLINED_FUNCTION_2_60();
          int v20 = *(unsigned __int8 *)v34(v33);
          uint64_t v35 = OUTLINED_FUNCTION_3_56();
          int v23 = *(unsigned __int8 *)v36(v35);
LABEL_16:
          if (v20 != v23) {
            return 0;
          }
LABEL_17:
          ++v12;
          break;
        default:
          return 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t sync_in_stm()
{
  OUTLINED_FUNCTION_16_41();
  return v0 & 1;
}

unsigned __int16 *pvlist_size(unsigned __int16 *result)
{
  if (result) {
    return (unsigned __int16 *)(bswap32(*result) >> 17);
  }
  return result;
}

void *pvlist_name()
{
  OUTLINED_FUNCTION_6_48();
  uint64_t v4 = vardesc(v0, v1, v2, v3);
  if (v4) {
    return *(void **)v4;
  }
  else {
    return &unk_240047A1A;
  }
}

uint64_t pvlist_val()
{
  OUTLINED_FUNCTION_6_48();
  return *(void *)varloc(v0, v1, v2, v3);
}

uint64_t allow_left_ctxt(uint64_t a1, unsigned char *a2, int a3, unsigned char *a4)
{
  if (a2 != a4)
  {
    int v4 = *(_DWORD *)(*(void *)(a1 + 192) + 9084) + a3;
    if (*(void *)&a2[8 * v4])
    {
      while (a2 != a4)
      {
        a2 = (unsigned char *)(*(void *)&a2[8 * v4] & 0xFFFFFFFFFFFFFFFCLL);
        if (!a2 || (*a2 & 2) == 0) {
          return OUTLINED_FUNCTION_5_49();
        }
      }
    }
  }
  return OUTLINED_FUNCTION_4_53();
}

uint64_t allow_right_ctxt(uint64_t a1, unsigned char *a2, int a3, unsigned char *a4)
{
  if (a2 != a4)
  {
    int v4 = *(_DWORD *)(*(void *)(a1 + 192) + 9084) + a3;
    if (*(void *)&a2[8 * v4])
    {
      while (a2 != a4)
      {
        a2 = (unsigned char *)(*(void *)&a2[8 * v4] & 0xFFFFFFFFFFFFFFFCLL);
        if (!a2 || (*a2 & 2) == 0) {
          return OUTLINED_FUNCTION_5_49();
        }
      }
    }
  }
  return OUTLINED_FUNCTION_4_53();
}

char *extract_string(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char *a5, int a6)
{
  unint64_t v9 = a3;
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!visleft(a1, a3, a4)) {
    return 0;
  }
  int v12 = a6 - 1;
  uint64_t v13 = a5;
  while (v9 != a4 && v12)
  {
    if (is_token_next())
    {
      BOOL v14 = v17;
      field_value(a2, *(void *)(v9 + 8 * (*(_DWORD *)(*(void *)(a1 + 192) + 9084) + (int)a2)) & 0xFFFFFFFFFFFFFFFCLL, 0, v17);
      while (1)
      {
        char v15 = *v14;
        if (!*v14 || !v12) {
          break;
        }
        ++v14;
        *v13++ = v15;
        --v12;
      }
    }
    unint64_t v9 = VRSYNC(a1, v9, a2);
  }
  *uint64_t v13 = 0;
  return a5;
}

BOOL init_stream(uint64_t a1, int a2)
{
  return vinit_stm(a1, a2) != 0;
}

BOOL ins_tok_named(uint64_t *a1, int a2, uint64_t a3, char *__s1, uint64_t a5)
{
  uint64_t v11 = 0;
  uint64_t v10 = a3;
  LOWORD(v1hashDelete(*((void **)this + 513), 1, 1) = *((_WORD *)vstmtbl[12 * a2 + 1] + 15);
  *(_DWORD *)((char *)&v11 + 2) = strcmp(__s1, "GAP") == 0;
  unint64_t v8 = VLSYNC(a5, a2);
  return vins_tok(a1, a2, (uint64_t)v8, a5, (uint64_t)&v10) != 0;
}

uint64_t set_fld_value(uint64_t *a1, int a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v9 = a2;
  uint64_t v11 = VLSYNC(a6, a2);
  vmark(a1, v9, a3, (unint64_t)v11, a6, a4);
  return 1;
}

void *ins_sync(uint64_t a1, int a2, unint64_t a3, int a4)
{
  if (a4)
  {
    vins_sync(a1, a2, *(void *)(a3 + 8 * a2 + 24) & 0xFFFFFFFFFFFFFFFCLL, a3);
    return VLSYNC(a3, a2);
  }
  else
  {
    vins_sync(a1, a2, a3, *(void *)(a3 + 8 * (*(_DWORD *)(*(void *)(a1 + 192) + 9084) + a2)) & 0xFFFFFFFFFFFFFFFCLL);
    return (void *)VRSYNC(a1, a3, a2);
  }
}

uint64_t del_two_point(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  return 1;
}

BOOL del_sync(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return vdel_1pt(a1, a2, a3) != 0;
}

uint64_t project_sync(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, int a5)
{
  uint64_t v5 = 0;
  if (a2 && a4)
  {
    if (a5)
    {
      if (vproj_l(a1, a2, a4, a3)) {
        return 1;
      }
    }
    else if (vproj_r(a1, a2, a4, a3))
    {
      return 1;
    }
    return 0;
  }
  return v5;
}

unint64_t merge_sync(uint64_t a1, unint64_t a2, int a3, unint64_t a4)
{
  if ((*(void *)(a4 + 8 * (*(_DWORD *)(*(void *)(a1 + 192) + 9084) + a3)) & 1) == 0) {
    return 0;
  }
  unint64_t result = project_sync(a1, a2, a3, a4, 0);
  if (result)
  {
    if (a2 != a4)
    {
      unint64_t v8 = *(uint64_t **)(a1 + 200);
      uint64_t v9 = *v8;
      uint64_t v10 = v8[1];
      if (v9 == a2 && v10 == a4) {
        return 0;
      }
      if (v9 == a4 && v10 == a2) {
        return 0;
      }
      for (unint64_t i = 0; ; ++i)
      {
        if (i >= *(unsigned __int8 *)(a1 + 288)) {
          return vmerge(a1, a4, a2) != 0;
        }
        unint64_t v14 = i + *(int *)(*(void *)(a1 + 192) + 9084);
        uint64_t v15 = *(void *)(a2 + 8 * v14);
        uint64_t v16 = *(void *)(a4 + 8 * v14);
        if (v15)
        {
          if (v16)
          {
            if ((v15 & 0xFFFFFFFFFFFFFFFCLL) != a4 && (*(void *)(a2 + 8 * i + 24) & 0xFFFFFFFFFFFFFFFCLL) != a4) {
              return 0;
            }
          }
          else
          {
            unint64_t v17 = *(void *)(a4 + 8 * i + 24) & 0xFFFFFFFFFFFFFFFCLL;
            if (v17 != a2)
            {
              unint64_t result = visleft(a1, v17, a2);
              if (!result) {
                return result;
              }
            }
            unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFCLL;
            if ((v16 & 0xFFFFFFFFFFFFFFFCLL) != a2)
            {
              uint64_t v19 = a1;
              uint64_t v20 = a2;
              goto LABEL_29;
            }
          }
        }
        else if (v16)
        {
          unint64_t v21 = *(void *)(a2 + 8 * i + 24) & 0xFFFFFFFFFFFFFFFCLL;
          if (v21 != a4)
          {
            unint64_t result = visleft(a1, v21, a4);
            if (!result) {
              return result;
            }
          }
          unint64_t v18 = v15 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v15 & 0xFFFFFFFFFFFFFFFCLL) != a4)
          {
            uint64_t v19 = a1;
            uint64_t v20 = a4;
LABEL_29:
            unint64_t result = visright(v19, v18, v20);
            if (!result) {
              return result;
            }
            continue;
          }
        }
        else if (visleft(a1, v15 & 0xFFFFFFFFFFFFFFFCLL, *(void *)(a4 + 8 * i + 24) & 0xFFFFFFFFFFFFFFFCLL)|| visright(a1, *(void *)(a2 + 8 * i + 24) & 0xFFFFFFFFFFFFFFFCLL, *(void *)(a4 + 8 * (i + *(int *)(*(void *)(a1 + 192) + 9084))) & 0xFFFFFFFFFFFFFFFCLL))
        {
          return 0;
        }
      }
    }
    return vmerge(a1, a4, a2) != 0;
  }
  return result;
}

BOOL divide_time(uint64_t *a1, unsigned __int8 a2, unint64_t a3, __int16 a4)
{
  return vsplit_time(a1, a2, a3, a4) != 0;
}

void fill_stream_list(uint64_t a1, int *a2, unsigned char *a3)
{
  if (*a3)
  {
    uint64_t v5 = OUTLINED_FUNCTION_7_48(*a3);
    *((void *)a2 + hashDelete(*((void **)this + 513), 1, 1) = v5;
    if (!v5) {
      goto LABEL_28;
    }
    uint64_t v6 = 0;
    for (int i = 1; ; int i = v12)
    {
      uint64_t v8 = *a2;
      if (v6 >= v8) {
        break;
      }
      uint64_t v9 = &a3[i];
      uint64_t v10 = *((void *)a2 + 1);
      *(unsigned char *)(v10 + 16 * v6) = *v9;
      uint64_t v11 = v9[1];
      int v12 = i + 2;
      uint64_t v13 = &a3[i + 2];
      unsigned int v14 = 1;
      uint64_t v15 = v11;
      for (uint64_t j = v13; v15; --v15)
      {
        if (*j++) {
          ++v14;
        }
      }
      *(_DWORD *)(v10 + 16 * v6 + 4) = v14;
      unint64_t v18 = OUTLINED_FUNCTION_12_46(v14);
      *(void *)(*((void *)a2 + 1) + 16 * v6 + 8) = v18;
      if (v18)
      {
        *unint64_t v18 = 0;
        int v12 = i + v11 + 2;
        int v19 = 1;
        while (1)
        {
          BOOL v20 = __OFSUB__(v11, 1);
          LODWORD(v1hashDelete(*((void **)this + 513), 1, 1) = v11 - 1;
          if ((int)v11 < 0 != v20) {
            break;
          }
          if (*v13) {
            *(unsigned char *)(*(void *)(*((void *)a2 + 1) + 16 * v6 + 8) + v19++) = *v13;
          }
          ++v13;
        }
      }
      ++v6;
    }
    uint64_t v29 = *((void *)a2 + 1) + 16 * v8;
  }
  else
  {
    unint64_t v21 = OUTLINED_FUNCTION_7_48(*(unsigned __int8 *)(a1 + 288));
    *((void *)a2 + hashDelete(*((void **)this + 513), 1, 1) = v21;
    if (!v21) {
      goto LABEL_28;
    }
    for (uint64_t k = 0; ; ++k)
    {
      uint64_t v23 = *a2;
      if (k >= v23) {
        break;
      }
      uint64_t v24 = (char *)&v21[2 * k];
      *uint64_t v24 = k;
      size_t v25 = SLODWORD(vstmtbl[12 * k + 8]);
      *((_DWORD *)v24 + hashDelete(*((void **)this + 513), 1, 1) = v25;
      uint64_t v26 = OUTLINED_FUNCTION_12_46(v25);
      unint64_t v21 = (void *)*((void *)a2 + 1);
      v21[2 * k + 1] = v26;
      if (v26)
      {
        for (uint64_t m = 0; ; ++m)
        {
          char v28 = (char *)&v21[2 * k];
          if (m >= *((int *)v28 + 1)) {
            break;
          }
          *(unsigned char *)(*((void *)v28 + 1) + m) = m;
          unint64_t v21 = (void *)*((void *)a2 + 1);
        }
      }
    }
    uint64_t v29 = (uint64_t)&v21[2 * v23];
  }
  if (!*(void *)(v29 - 8)) {
    free_stream_list(a2);
  }
LABEL_28:
  OUTLINED_FUNCTION_13_44();
}

void free_stream_list(int *a1)
{
  uint64_t v2 = 0;
  for (uint64_t i = 8; ; i += 16)
  {
    int v4 = (char *)*((void *)a1 + 1);
    if (v2 >= *a1) {
      break;
    }
    free(*(void **)&v4[i]);
    ++v2;
  }
  free(v4);
  *((void *)a1 + hashDelete(*((void **)this + 513), 1, 1) = 0;
}

BOOL insert_string(uint64_t *a1, int a2, unint64_t a3, char *a4)
{
  BOOL result = 0;
  *(_WORD *)__s2 = 0;
  uint64_t v6 = &vstmtbl[12 * a2];
  uint64_t v8 = v6[1];
  unint64_t v7 = v6 + 1;
  if (*((unsigned __int16 *)v8 + 15) >= 0xFFFEu)
  {
    if (LOBYTE(vstmtbl[12 * a2 + 10]))
    {
      if (is_token_prev(a2, a3)) {
LABEL_7:
      }
        ins_sync((uint64_t)a1, a2, a3, 1);
LABEL_8:
      if (!*a4)
      {
        BOOL result = 1;
        *(_DWORD *)(a1[23] + 452) = 1;
        return result;
      }
      uint64_t v12 = 0;
      __s2[0] = *a4;
      uint64_t v13 = *v7;
      uint64_t v14 = *((__int16 *)*v7 + 14) & ~(*((__int16 *)*v7 + 14) >> 31);
      while (v14 != v12)
      {
        if (!strcmp(*(const char **)(*((void *)v13 + 2) + 8 * v12), __s2))
        {
          if (*((__int16 *)v13 + 15) == -1)
          {
            char v18 = v12;
            uint64_t v15 = (__int16 *)&v18;
          }
          else
          {
            __int16 v17 = v12;
            uint64_t v15 = &v17;
          }
          BOOL result = ins_tok_named(a1, a2, (uint64_t)v15, __s2, a3);
          if (!result) {
            return result;
          }
          if (*++a4) {
            goto LABEL_7;
          }
          goto LABEL_8;
        }
        ++v12;
      }
    }
    return 0;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_71(uint64_t a1, uint64_t a2)
{
  return a2 + 16;
}

uint64_t OUTLINED_FUNCTION_1_63@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, _DWORD *a4@<X3>, char a5@<W8>)
{
  *a3 = a5;
  *a4 = *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 8) + 16 * *(int *)(*(void *)(a1 + 200) + 300) + 8)
                           + *(int *)(*(void *)(a1 + 200) + 304));
  return 1;
}

uint64_t OUTLINED_FUNCTION_2_60()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_56()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_53()
{
  return 1;
}

uint64_t OUTLINED_FUNCTION_5_49()
{
  return 0;
}

void *OUTLINED_FUNCTION_7_48(size_t a1)
{
  _DWORD *v1 = a1;
  return malloc_type_calloc(a1, 0x10uLL, 0x1010040449DF08BuLL);
}

uint64_t OUTLINED_FUNCTION_9_47(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__endptr)
{
  *a1 = 35;
  return strtol(v10, &__endptr, 0);
}

int *OUTLINED_FUNCTION_10_47()
{
  return __error();
}

uint64_t OUTLINED_FUNCTION_11_47(uint64_t a1, uint64_t a2)
{
  return a2 + 16;
}

void *OUTLINED_FUNCTION_12_46(size_t a1)
{
  return malloc_type_calloc(a1, 4uLL, 0x100004052888210uLL);
}

uint64_t OUTLINED_FUNCTION_15_42()
{
  return 0;
}

uint64_t vproj_r(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if ((*(void *)(a2 + 8 * (*(int *)(*(void *)(a1 + 192) + 9084) + (unint64_t)a4)) & 1) == 0)
  {
    OUTLINED_FUNCTION_5_50();
    if (*(_DWORD *)(v9 + 8864))
    {
      OUTLINED_FUNCTION_3_57(v5, 1);
      OUTLINED_FUNCTION_3_57(v5, 0);
      unint64_t v8 = *(int *)(*(void *)(v5 + 192) + 9084) + (unint64_t)v6;
    }
    uint64_t v10 = (uint64_t *)(*(void *)(v7 + 8 * v8) & 0xFFFFFFFFFFFFFFFCLL);
    if (!v10 || (unint64_t v11 = *(void *)(v7 + 8 * v8) & 0xFFFFFFFFFFFFFFFCLL, (*(unsigned char *)v10 & 2) == 0)) {
      unint64_t v11 = v10[1] & 0xFFFFFFFFFFFFFFFCLL;
    }
    project_rl(v5, v4, v7, v10, v6);
    if (NONSEQ(v4) && *(_DWORD *)(*(void *)(v5 + 192) + 8868))
    {
      DELSPINE(v5, v4);
      INSSPINEL(v5, v4, v11);
    }
  }
  return 1;
}

unint64_t vgetsc(uint64_t a1, int a2, int a3, uint64_t a4, unsigned int a5)
{
  unint64_t v6 = a4;
  if (a3)
  {
    if (*(_DWORD *)(*(void *)(a1 + 192) + 8868))
    {
      if (!NONSEQ(a4))
      {
        uint64_t v9 = *(void *)(a1 + 192);
        if (!*(unsigned char *)(*(void *)(v9 + 9072) + a5))
        {
          if (!a2)
          {
            for (i = *(_DWORD *)(v9 + 9084); ; unint64_t v6 = *(void *)(v6 + 8 * (i - 2)) & 0xFFFFFFFFFFFFFFFCLL)
            {
              if (*(void *)(v6 + 8 * (int)(i + a5)))
              {
                if (!NONSEQ(v6)) {
                  return v6;
                }
                int i = *(_DWORD *)(*(void *)(a1 + 192) + 9084);
              }
            }
          }
          while (1)
          {
            if (*(void *)(v6 + 8 * (int)(*(_DWORD *)(v9 + 9084) + a5)))
            {
              if (!NONSEQ(v6)) {
                return v6;
              }
              uint64_t v9 = *(void *)(a1 + 192);
            }
            unint64_t v6 = *(void *)(v6 + 8) & 0xFFFFFFFFFFFFFFFCLL;
          }
        }
      }
    }
    uint64_t v10 = 0;
    int v11 = 1;
    unint64_t v12 = v6;
    unint64_t v13 = v6;
LABEL_6:
    if (v11 >= 1 && v6)
    {
      while (1)
      {
        uint64_t v14 = v6;
        int v15 = *(_DWORD *)(*(void *)(a1 + 192) + 9084);
        if ((*(void *)(v6 + 8 * (int)(v15 + a5)) & 1) == 0) {
          break;
        }
        unint64_t v6 = *(void *)(v6 + 8 * (v15 - 1)) & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v10 = v14;
        if (!v6) {
          goto LABEL_29;
        }
      }
      for (unsigned int j = 0; ; ++j)
      {
        int v17 = *(_DWORD *)(*(void *)(a1 + 192) + 9084);
        if (j >= *(unsigned __int8 *)(a1 + 288))
        {
          int v21 = v17 - 1;
          uint64_t v22 = *(void *)(v14 + 8 * v21);
          unint64_t v6 = v22 & 0xFFFFFFFFFFFFFFFCLL;
          *(void *)(v14 + 8 * v2hashDelete(*((void **)this + 513), 1, 1) = v22 & 3;
          if (v10)
          {
            uint64_t v23 = v10 + 8 * *(int *)(*(void *)(a1 + 192) + 9084);
            *(void *)(v23 - 8) = *(void *)(v23 - 8) & 3 | v6;
          }
          else
          {
            unint64_t v13 = v22 & 0xFFFFFFFFFFFFFFFCLL;
          }
          --v11;
          goto LABEL_6;
        }
        if ((*(void *)(v14 + 8 * (int)(j + v17)) & 1) == 0) {
          goto LABEL_23;
        }
        if (a2)
        {
          unint64_t v18 = (unint64_t)VLSYNC(v14, (char)j);
          if (!v18) {
            goto LABEL_23;
          }
        }
        else
        {
          unint64_t v18 = VRSYNC(a1, v14, (char)j);
          if (!v18) {
            goto LABEL_23;
          }
        }
        uint64_t v19 = *(int *)(*(void *)(a1 + 192) + 9084) - 1;
        if (*(void *)(v18 + 8 * v19) <= 3uLL && v18 != v12)
        {
          *(void *)(v12 + 8 * v19) = *(void *)(v12 + 8 * v19) & 3 | v18;
          ++v11;
          goto LABEL_24;
        }
LABEL_23:
        unint64_t v18 = v12;
LABEL_24:
        unint64_t v12 = v18;
      }
    }
LABEL_29:
    unint64_t v6 = 0;
    uint64_t v24 = *(void *)(*(void *)(a1 + 200) + 8 * (a2 != 0));
LABEL_30:
    while (1)
    {
      unint64_t v25 = v13;
      if (v11 < 2) {
        break;
      }
      while (v25)
      {
        unint64_t v26 = v25;
        unint64_t v25 = *(void *)(v25 + 8 * *(int *)(*(void *)(a1 + 192) + 9084) - 8) & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v27 = *(void *)(v26 + 16);
        if ((v27 & 1) == 0)
        {
          unint64_t v28 = v27 & 0xFFFFFFFFFFFFFFFCLL;
          if (v28) {
            uint64_t v29 = v28;
          }
          else {
            uint64_t v29 = v26;
          }
          if (a2) {
            unint64_t v30 = VRSYNC(a1, v29, (char)a5);
          }
          else {
            unint64_t v30 = (unint64_t)VLSYNC(v29, (char)a5);
          }
          if (v30 == v24)
          {
            int v11 = 1;
            unint64_t v6 = v26;
            goto LABEL_30;
          }
          if (*(void *)(v30 + 8 * *(int *)(*(void *)(a1 + 192) + 9084) - 8) > 3uLL || v30 == v12)
          {
            *(void *)(v26 + 16) |= 1uLL;
            --v11;
          }
          else
          {
            *(void *)(v26 + 16) = *(void *)(v26 + 16) & 3 | v30;
          }
        }
      }
    }
    while (v13)
    {
      if (!v6)
      {
        if (*(unsigned char *)(v13 + 16)) {
          unint64_t v6 = 0;
        }
        else {
          unint64_t v6 = v13;
        }
      }
      unint64_t v32 = v13 + 8 * *(int *)(*(void *)(a1 + 192) + 9084);
      uint64_t v33 = *(void *)(v32 - 8);
      *(void *)(v32 - 8) = v33 & 3;
      *(void *)(v13 + 16) &= 2uLL;
      unint64_t v34 = v13 + 8 * *(int *)(*(void *)(a1 + 192) + 9084);
      unint64_t v13 = v33 & 0xFFFFFFFFFFFFFFFCLL;
      *(void *)(v34 - 8) &= ~1uLL;
    }
  }
  else
  {
    if (a2) {
      uint64_t v35 = a5 + 3;
    }
    else {
      uint64_t v35 = *(int *)(*(void *)(a1 + 192) + 9084) + (unint64_t)a5;
    }
    return *(void *)(a4 + 8 * v35) & 0xFFFFFFFFFFFFFFFCLL;
  }
  return v6;
}

uint64_t project_rl(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, unsigned int a5)
{
  unsigned int v10 = *(_DWORD *)(*(void *)(a1 + 192) + 9084) + a5;
  *(void *)(a2 + 8 * (int)v10) |= 1uLL;
  CLRONESTM(a2);
  uint64_t result = ALLNSQ(a2);
  if (result && !*(unsigned char *)(*(void *)(*(void *)(a1 + 192) + 9072) + a5)) {
    uint64_t result = CLRALLNSQ(a2);
  }
  if ((uint64_t *)a3 != a4)
  {
    uint64_t v12 = a5 + 3;
    *(void *)(a2 + 8 * v12) = *(void *)(a2 + 8 * v12) & 3 | a3;
    unsigned int v13 = *(_DWORD *)(*(void *)(a1 + 192) + 9084) + a5;
    *(void *)(a2 + 8 * (int)v13) = *(void *)(a2 + 8 * (int)v13) & 3 | (unint64_t)a4;
    if (a3 && (*(unsigned char *)a3 & 2) != 0)
    {
      unsigned int v14 = *(_DWORD *)(*(void *)(a1 + 192) + 9084) + a5;
      *(void *)(a3 + 8 * (int)v14) = *(void *)(a3 + 8 * (int)v14) & 3 | a2;
      if (!a4)
      {
LABEL_11:
        *a4 = a2;
        return result;
      }
    }
    else
    {
      *(void *)(a3 + 8) = a2;
      if (!a4) {
        goto LABEL_11;
      }
    }
    if ((*(unsigned char *)a4 & 2) == 0) {
      goto LABEL_11;
    }
    a4[v12] = a4[v12] & 3 | a2;
  }
  return result;
}

uint64_t vproj_l(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (*(void *)(a2 + 8 * (*(_DWORD *)(*(void *)(a1 + 192) + 9084) + a4))) {
    return 1;
  }
  OUTLINED_FUNCTION_5_50();
  if (*(_DWORD *)(v8 + 8864))
  {
    OUTLINED_FUNCTION_3_57(v5, 1);
    if ((*(void *)(v4 + 8 * (int)(*(_DWORD *)(*(void *)(v5 + 192) + 9084) + v6)) & 1) == 0) {
      OUTLINED_FUNCTION_3_57(v5, 0);
    }
  }
  uint64_t v9 = (uint64_t *)(v7[v6 + 3] & 0xFFFFFFFFFFFFFFFCLL);
  if (v9)
  {
    uint64_t v10 = *v9;
    unint64_t v11 = v7[v6 + 3] & 0xFFFFFFFFFFFFFFFCLL;
    if ((*v9 & 2) != 0) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v10 = MEMORY[0];
  }
  unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
LABEL_10:
  project_rl(v5, v4, (unint64_t)v9, v7, v6);
  if (NONSEQ(v4) && *(_DWORD *)(*(void *)(v5 + 192) + 8868))
  {
    DELSPINE(v5, v4);
    INSSPINER(v5, v4, v11);
  }
  return 1;
}

uint64_t vctxtinit(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 288))
  {
    *(void *)(*(void *)(a1 + 200) + 352) = OUTLINED_FUNCTION_0_72(*(unsigned __int8 *)(a1 + 288));
    *(void *)(*(void *)(a1 + 200) + 360) = OUTLINED_FUNCTION_0_72(*(unsigned __int8 *)(a1 + 288));
    *(void *)(*(void *)(a1 + 200) + 368) = OUTLINED_FUNCTION_0_72(*(unsigned __int8 *)(a1 + 288));
    *(void *)(*(void *)(a1 + 200) + 376) = OUTLINED_FUNCTION_0_72(*(unsigned __int8 *)(a1 + 288));
    *(void *)(*(void *)(a1 + 200) + 384) = malloc_type_malloc(*(unsigned __int8 *)(a1 + 288), 0x7908F214uLL);
    uint64_t v2 = malloc_type_malloc(*(unsigned __int8 *)(a1 + 288), 0xED8631DFuLL);
    uint64_t v3 = *(void **)(a1 + 200);
    v3[49] = v2;
  }
  else
  {
    uint64_t v3 = *(void **)(a1 + 200);
  }
  uint64_t v4 = (void *)v3[44];
  if (v4 && v3[45] && v3[46] && v3[47] && v3[48] && v3[49]) {
    return 1;
  }
  free(v4);
  free(*(void **)(*(void *)(a1 + 200) + 360));
  free(*(void **)(*(void *)(a1 + 200) + 368));
  free(*(void **)(*(void *)(a1 + 200) + 376));
  free(*(void **)(*(void *)(a1 + 200) + 384));
  free(*(void **)(*(void *)(a1 + 200) + 392));
  return 0;
}

uint64_t vproject(uint64_t a1, uint64_t a2, unint64_t a3, unsigned char *a4, unsigned int a5)
{
  uint64_t v5 = *(int *)(*(void *)(a1 + 192) + 9084) + (unint64_t)a5;
  if ((*(void *)(a2 + 8 * v5) & 1) == 0)
  {
    if (a3 && a4 && (*(void *)a3 & 2) != 0)
    {
      if ((*a4 & 2) != 0)
      {
        uint64_t v11 = a5 + 3;
        OUTLINED_FUNCTION_1_64(v5);
        int v12 = ALLNSQ(a2);
        uint64_t v13 = *(void *)(a1 + 192);
        if (v12 && !*(unsigned char *)(*(void *)(v13 + 9072) + a5))
        {
          CLRALLNSQ(a2);
          uint64_t v13 = *(void *)(a1 + 192);
        }
        OUTLINED_FUNCTION_4_54(v13);
        *(void *)&a4[8 * v11] = *(void *)&a4[8 * v11] & 3 | a2;
        OUTLINED_FUNCTION_2_61(*(void *)(a1 + 192));
LABEL_23:
        *(void *)(a2 + 8 * v1hashDelete(*((void **)this + 513), 1, 1) = *(void *)(a2 + 8 * v11) & 3 | a3;
        if (NONSEQ(a2))
        {
          if (*(_DWORD *)(*(void *)(a1 + 192) + 8868))
          {
            DELSPINE(a1, a2);
            INSSPINEL(a1, a2, (uint64_t)a4);
          }
        }
        return 1;
      }
    }
    else
    {
      if (a4 && (*a4 & 2) != 0)
      {
        OUTLINED_FUNCTION_1_64(v5);
        int v17 = ALLNSQ(a2);
        uint64_t v18 = *(void *)(a1 + 192);
        if (v17 && !*(unsigned char *)(*(void *)(v18 + 9072) + a5))
        {
          CLRALLNSQ(a2);
          uint64_t v18 = *(void *)(a1 + 192);
        }
        *(void *)(a3 + 8) = a2;
        OUTLINED_FUNCTION_2_61(v18);
        uint64_t v11 = a5 + 3;
        *(void *)&a4[8 * v11] = *(void *)&a4[8 * v11] & 3 | a2;
        goto LABEL_23;
      }
      if (!a3) {
        return 0;
      }
    }
    if ((*(unsigned char *)a3 & 2) != 0)
    {
      OUTLINED_FUNCTION_1_64(v5);
      int v15 = ALLNSQ(a2);
      uint64_t v16 = *(void *)(a1 + 192);
      if (v15 && !*(unsigned char *)(*(void *)(v16 + 9072) + a5))
      {
        CLRALLNSQ(a2);
        uint64_t v16 = *(void *)(a1 + 192);
      }
      OUTLINED_FUNCTION_4_54(v16);
      OUTLINED_FUNCTION_2_61(*(void *)(a1 + 192));
      *(void *)a4 = a2;
      uint64_t v11 = a5 + 3;
      goto LABEL_23;
    }
    return 0;
  }
  return 1;
}

uint64_t vdef_proj(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(void *)(a2 + 8 * (int)(*(_DWORD *)(*(void *)(a1 + 192) + 9084) + a3))) {
    return 1;
  }
  unint64_t v6 = vgetsc(a1, 1, 1, a2, a3);
  if (*(_DWORD *)(*(void *)(a1 + 192) + 8864)) {
    unint64_t v7 = (unsigned char *)vgetsc(a1, 0, 1, a2, a3);
  }
  else {
    unint64_t v7 = (unsigned char *)VRSYNC(a1, v6, (char)a3);
  }
  return vproject(a1, a2, v6, v7, a3);
}

uint64_t vsetsc(uint64_t result, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  if (a2) {
    uint64_t v6 = a5 + 3;
  }
  else {
    uint64_t v6 = *(int *)(*(void *)(result + 192) + 9084) + (unint64_t)a5;
  }
  *(void *)(a4 + 8 * v6) = *(void *)(a4 + 8 * v6) & 3 | a6;
  return result;
}

void *OUTLINED_FUNCTION_0_72@<X0>(uint64_t a1@<X8>)
{
  return malloc_type_malloc(8 * a1, 0x80040B8603338uLL);
}

uint64_t OUTLINED_FUNCTION_1_64@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(*(void *)(v3 + 184) + 452) = 1;
  *(void *)(v2 + 8 * ahashDelete(*((void **)this + 513), 1, 1) = v1 | 1;
  return CLRONESTM(v2);
}

void OUTLINED_FUNCTION_2_61(uint64_t a1@<X8>)
{
  *(void *)(v2 + 8 * (*(_DWORD *)(a1 + 9084) + v3)) = *(void *)(v2 + 8 * (*(_DWORD *)(a1 + 9084) + v3)) & 3 | v1;
}

unint64_t OUTLINED_FUNCTION_3_57(uint64_t a1, int a2)
{
  return vgetsc(a1, a2, 1, v2, v3);
}

void OUTLINED_FUNCTION_4_54(uint64_t a1@<X8>)
{
  *(void *)(v2 + 8 * (*(_DWORD *)(a1 + 9084) + v3)) = *(void *)(v2 + 8 * (*(_DWORD *)(a1 + 9084) + v3)) & 3 | v1;
}

double delta_lib_new(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x930uLL, 0x10B00402BA2B37CuLL);
  *(void *)(a1 + 200) = v2;
  bzero(v2, 0x930uLL);
  uint64_t v3 = *(void *)(a1 + 200);
  *(void *)(v3 + 336) = "---";
  *(_DWORD *)(v3 + 344) = 1;
  double result = NAN;
  *(void *)(v3 + 656) = -1;
  *(void *)(v3 + 2232) = 0;
  return result;
}

void delta_lib_delete(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 200);
    if (v2)
    {
      bzero(v2, 0x930uLL);
      free(*(void **)(a1 + 200));
      *(void *)(a1 + 200) = 0;
    }
  }
}

uint64_t absoluteSyncNumPtr(uint64_t a1)
{
  if (a1) {
    return a1 & 0xFFFFFFFC;
  }
  else {
    return -1;
  }
}

uint64_t absoluteSyncNum(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return getDeltaHeapSegNumber(a1, a2, *(_DWORD *)(*(void *)(a1 + 200) + 248));
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

char *streamName(int a1)
{
  return vstmtbl[12 * a1];
}

void *VLSYNC(uint64_t a1, int a2)
{
  double result = (void *)(*(void *)(a1 + 8 * a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
  if (result)
  {
    if ((*result & 2) == 0) {
      return (void *)(*result & 0xFFFFFFFFFFFFFFFCLL);
    }
  }
  return result;
}

unint64_t VRSYNC(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t result = *(void *)(a2 + 8 * (*(_DWORD *)(*(void *)(a1 + 192) + 9084) + a3)) & 0xFFFFFFFFFFFFFFFCLL;
  if (result)
  {
    if ((*(unsigned char *)result & 2) == 0) {
      return *(void *)(result + 8) & 0xFFFFFFFFFFFFFFFCLL;
    }
  }
  return result;
}

uint64_t FENCED(uint64_t a1, uint64_t a2, int a3)
{
  return (*(void *)(a2 + 8 * (*(_DWORD *)(*(void *)(a1 + 192) + 9084) + a3)) >> 1) & 1;
}

uint64_t SETFENCE(uint64_t result, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(*(void *)(result + 192) + 9084) + a3;
  *(void *)(a2 + 8 * v3) |= 2uLL;
  return result;
}

uint64_t UNSETFENCE(uint64_t result, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(*(void *)(result + 192) + 9084) + a3;
  *(void *)(a2 + 8 * v3) &= ~2uLL;
  return result;
}

uint64_t NONSEQ(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 16) >> 1) & 1;
}

uint64_t SETNONSEQ(uint64_t result)
{
  *(void *)(result + 16) |= 2uLL;
  return result;
}

uint64_t CLRNONSEQ(uint64_t result)
{
  *(void *)(result + 16) &= ~2uLL;
  return result;
}

uint64_t SETSPINEL(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_5_51(a1, *(void *)(a1 + 8) & 3 | a2);
}

uint64_t SETSPINER(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2 + 8 * *(int *)(*(void *)(result + 192) + 9084);
  *(void *)(v3 - 16) = *(void *)(v3 - 16) & 3 | a3;
  return result;
}

uint64_t ONESTM(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) & 1;
}

uint64_t SETONESTM(uint64_t a1)
{
  return OUTLINED_FUNCTION_5_51(a1, *(void *)(a1 + 8) | 1);
}

uint64_t CLRONESTM(uint64_t a1)
{
  return OUTLINED_FUNCTION_5_51(a1, *(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t ALLNSQ(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 1) & 1;
}

uint64_t SETALLNSQ(uint64_t a1)
{
  return OUTLINED_FUNCTION_5_51(a1, *(void *)(a1 + 8) | 2);
}

uint64_t CLRALLNSQ(uint64_t a1)
{
  return OUTLINED_FUNCTION_5_51(a1, *(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFFDLL);
}

uint64_t SETCTXL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OUTLINED_FUNCTION_3_58(a1, 1, a3, a2, a3, a4);
}

uint64_t SETCTXR(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OUTLINED_FUNCTION_3_58(a1, 0, a3, a2, a3, a4);
}

uint64_t STMTYP(int a1)
{
  return *((__int16 *)vstmtbl[12 * a1 + 1] + 15);
}

void INSSPINER(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 8 * *(int *)(*(void *)(a1 + 192) + 9084) - 16;
  unint64_t v4 = *(void *)(a3 + v3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a2 + v3) = v4 | *(void *)(a2 + v3) & 3;
  *(void *)(v4 + 8) = *(void *)(v4 + 8) & 3 | a2;
  uint64_t v5 = a3 + 8 * *(int *)(*(void *)(a1 + 192) + 9084);
  *(void *)(v5 - 16) = *(void *)(v5 - 16) & 3 | a2;
  *(void *)(a2 + 8) = *(void *)(a2 + 8) & 3 | a3;
  OUTLINED_FUNCTION_1_65(&spine_changed);
}

void INSSPINEL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a2 + 8) = v3 | *(void *)(a2 + 8) & 3;
  unint64_t v4 = v3 + 8 * *(int *)(*(void *)(a1 + 192) + 9084);
  *(void *)(v4 - 16) = *(void *)(v4 - 16) & 3 | a2;
  *(void *)(a3 + 8) = *(void *)(a3 + 8) & 3 | a2;
  uint64_t v5 = a2 + 8 * *(int *)(*(void *)(a1 + 192) + 9084);
  *(void *)(v5 - 16) = *(void *)(v5 - 16) & 3 | a3;
  OUTLINED_FUNCTION_1_65(&spine_changed);
}

void DELSPINE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = 8 * *(int *)(*(void *)(a1 + 192) + 9084) - 16;
  unint64_t v4 = *(void *)(a2 + v3) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)((v2 & 0xFFFFFFFFFFFFFFFCLL) + v3) = v4 | *(void *)((v2 & 0xFFFFFFFFFFFFFFFCLL) + v3) & 3;
  *(void *)(v4 + 8) = v2 & 0xFFFFFFFFFFFFFFFCLL | *(void *)(v4 + 8) & 3;
  OUTLINED_FUNCTION_1_65(&spine_changed);
}

uint64_t vinit_stm(uint64_t a1, int a2)
{
  unsigned int v4 = a2;
  vdel_2pt((uint64_t *)a1, a2, **(void **)(a1 + 200), *(void *)(*(void *)(a1 + 200) + 8));
  if (!LOBYTE(vstmtbl[12 * a2 + 6])) {
    return 1;
  }
  uint64_t v10 = 0;
  uint64_t v5 = &vstmtbl[12 * a2];
  uint64_t v6 = v5[1];
  unint64_t v7 = v5[2];
  LOWORD(v10) = *((_WORD *)v6 + 15);
  BYTE2(v10) = v6[32];
  uint64_t v9 = (*(uint64_t (**)(char *))v7)(v5[5]);
  uint64_t result = vins_tok((uint64_t *)a1, v4, **(void **)(a1 + 200), *(void *)(*(void *)(a1 + 200) + 8), (uint64_t)&v9);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t vdel_2pt(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1[25];
  *(unsigned char *)(v8 + 136) = a2;
  *(void *)(v8 + 120) = a3;
  *(void *)(v8 + 128) = a4;
  int v9 = a2;
  unint64_t v10 = VRSYNC((uint64_t)a1, a3, a2);
  *(void *)(v8 + 104) = v10;
  *(void *)(v8 + 112) = VLSYNC(a4, v9);
  OUTLINED_FUNCTION_7_49(a1[23]);
  if (v10 == a4)
  {
    uint64_t v11 = (uint64_t *)(*(void *)(a3 + 8 * (*(_DWORD *)(a1[24] + 9084) + a2)) & 0xFFFFFFFFFFFFFFFCLL);
    if (!v11 || (*(unsigned char *)v11 & 2) == 0) {
      fdeldel((uint64_t)a1, v11, (uint64_t)v11);
    }
  }
  else
  {
    fdel((uint64_t)a1, 0);
  }
  return 1;
}

uint64_t vins_tok(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a1[24];
  *(_DWORD *)(a1[23] + 452) = 1;
  if ((*(void *)(a3 + 8 * (int)(*(_DWORD *)(v10 + 9084) + a2)) & 0xFFFFFFFFFFFFFFFCLL) != a4
    || (*(void *)(a4 + 8 * (a2 + 3)) & 0xFFFFFFFFFFFFFFFCLL) != a3)
  {
    vdel_2pt(a1, a2, a3, a4);
  }
  uint64_t result = (uint64_t)alloc_tok((uint64_t)a1, (uint64_t)&vstmtbl[12 * a2]);
  if (result)
  {
    signed int v12 = *(_DWORD *)(a1[24] + 9084) + a2;
    *(void *)(a3 + 8 * v12) = *(void *)(a3 + 8 * v12) & 3 | result;
    *(void *)(a4 + 8 * (a2 + 3)) = *(void *)(a4 + 8 * (a2 + 3)) & 3 | result;
    *(void *)uint64_t result = a3;
    *(void *)(result + 8) = a4;
    uint64_t v13 = (void *)(result + 16);
    if (*(__int16 *)(a5 + 8) < 0) {
      vinitflds((int)v13, a2, v13, *(unsigned __int8 **)a5);
    }
    else {
      memcpy(v13, *(const void **)a5, SHIDWORD(vstmtbl[12 * a2 + 8]));
    }
    uint64_t result = 1;
    uint64_t v14 = a1[24];
    *(_DWORD *)(a1[23] + 452) = 1;
    *(_DWORD *)(v14 + 9080) = 0;
  }
  return result;
}

uint64_t vmergable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 1;
  if (a2 != a3 && *(_DWORD *)(*(void *)(a1 + 192) + 8864))
  {
    uint64_t v5 = *(uint64_t **)(a1 + 200);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    if (v6 == a2 && v7 == a3) {
      return OUTLINED_FUNCTION_4_55();
    }
    else {
      return v6 != a3 || v7 != a2;
    }
  }
  return result;
}

uint64_t vmerge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 1;
  if (a2 != a3)
  {
    uint64_t v5 = a3;
    *(_DWORD *)(*(void *)(a1 + 184) + 452) = 1;
    uint64_t v6 = *(void **)(a1 + 200);
    if (*v6 == a3 || v6[1] == a3 || *(_DWORD *)(*(void *)(a1 + 192) + 8868) && (*(unsigned char *)(a2 + 16) & 2) != 0)
    {
      uint64_t v7 = a3;
      uint64_t v5 = a2;
    }
    else
    {
      uint64_t v7 = a2;
    }
    char v8 = 0;
    int v9 = *(unsigned __int8 *)(a1 + 288);
    while (1)
    {
      if (v8 >= v9)
      {
        BOOL v11 = 0;
        goto LABEL_15;
      }
      int v10 = *(_DWORD *)(*(void *)(a1 + 192) + 9084) + v8;
      if (*(void *)(v7 + 8 * v10) & 1) != 0 && (*(void *)(v5 + 8 * v10)) {
        break;
      }
      ++v8;
    }
    BOOL v11 = v7 == (*(void *)(v5 + 8 * (v8 + 3)) & 0xFFFFFFFFFFFFFFFCLL);
LABEL_15:
    for (unsigned __int8 i = 0; ; unsigned __int8 i = v13 + 1)
    {
      unsigned __int8 v13 = i;
      if ((char)i >= v9) {
        break;
      }
      int v14 = *(_DWORD *)(*(void *)(a1 + 192) + 9084) + (char)i;
      if (*(void *)(v5 + 8 * v14))
      {
        if ((*(void *)(v7 + 8 * v14) & 1) == 0 && v11)
        {
          uint64_t v16 = OUTLINED_FUNCTION_9_48();
          uint64_t result = vproj_l(v16, v17, v18, v19);
          if (!result) {
            return result;
          }
          uint64_t v20 = OUTLINED_FUNCTION_9_48();
          uint64_t result = vproj_r(v20, v21, v22, v23);
          if (!result) {
            return result;
          }
        }
        vdel_1pt(a1, v13, v5);
        int v9 = *(unsigned __int8 *)(a1 + 288);
      }
    }
    return 1;
  }
  return result;
}

uint64_t vdel_1pt(uint64_t a1, unsigned int a2, uint64_t a3)
{
  OUTLINED_FUNCTION_7_49(*(void *)(a1 + 184));
  uint64_t v7 = *(void *)(v6 + 200);
  *(unsigned char *)(v7 + 136) = v8;
  *(void *)(v7 + 104) = v9;
  *(void *)(v7 + 112) = v9;
  int v10 = v8;
  *(void *)(v7 + 120) = VLSYNC(v9, v8);
  *(void *)(v7 + 128) = VRSYNC(a1, a3, v10);
  uint64_t v11 = *(void *)(a3 + 8 * (int)(*(_DWORD *)(*(void *)(a1 + 192) + 9084) + a2));
  if (v11)
  {
    uint64_t v24 = 0;
    uint64_t v22 = 0;
    uint64_t v12 = a2 + 3;
    unsigned __int8 v13 = (unsigned char *)(*(void *)(a3 + 8 * v12) & 0xFFFFFFFFFFFFFFFCLL);
    if (!v13 || (*v13 & 2) == 0)
    {
      unint64_t v14 = v11 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v11 & 0xFFFFFFFFFFFFFFFCLL) == 0 || (*(unsigned char *)v14 & 2) == 0)
      {
        LOWORD(v22) = *((_WORD *)vstmtbl[12 * (char)a2 + 1] + 15);
        LOWORD(v24) = v22;
        int v15 = &vstmtbl[12 * a2];
        uint64_t v16 = (uint64_t (**)(uint64_t))v15[2];
        BYTE2(v22) = v15[1][32];
        BYTE2(v24) = BYTE2(v22);
        __dst = (void *)(*v16)((uint64_t)(v13 + 16));
        uint64_t v21 = (double *)(*(uint64_t (**)(unint64_t))v15[2])(v14 + 16);
        if (*((unsigned char *)v15 + 86))
        {
          vadd(a1, &v21, (double **)&__dst);
          vinitflds(v17, a2, __dst, (unsigned __int8 *)v21);
          OUTLINED_FUNCTION_7_49(*(void *)(a1 + 184));
          unint64_t v18 = *(void *)(v14 + 8) & 0xFFFFFFFFFFFFFFFCLL;
          signed int v19 = *(_DWORD *)(*(void *)(a1 + 192) + 9084) + a2;
          *(void *)(a3 + 8 * v19) = v18 | *(void *)(a3 + 8 * v19) & 3;
          *(void *)(v18 + 8 * v12) = *(void *)(v18 + 8 * v12) & 3 | a3;
          cacheDeletedDeltaObject(a1, v14);
        }
      }
    }
    fdel(a1, 1);
  }
  return 1;
}

uint64_t vscanadv(void *a1, int a2, int a3)
{
  unint64_t i = 0;
  uint64_t v4 = a1[24];
  uint64_t v5 = *(void *)(v4 + 8080);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 8088);
  if (a3)
  {
    unsigned int v7 = *(unsigned __int8 *)(v4 + 8121);
    if (*(unsigned char *)(v4 + 8121))
    {
      if (*(unsigned char *)(v4 + 8090))
      {
        unint64_t i = 0;
      }
      else
      {
        for (unint64_t i = 0; i < v7; ++i)
        {
          int v11 = *(_DWORD *)(v4 + 9084);
          int v12 = *(unsigned __int8 *)(a1[31] + i);
          if (*(void *)(v5 + 8 * (v11 + v12))) {
            return OUTLINED_FUNCTION_4_55();
          }
          uint64_t v13 = *(void *)(v5 + 8 * (v11 + (char)v12));
          uint64_t v14 = a1[35];
          if ((v13 & 2) != 0 && v6 != v12 && !*(unsigned char *)(v14 + i)) {
            return OUTLINED_FUNCTION_4_55();
          }
          *(unsigned char *)(v14 + i) = 0;
          uint64_t v4 = a1[24];
          unsigned int v7 = *(unsigned __int8 *)(v4 + 8121);
        }
      }
    }
  }
  if (!v5) {
    return OUTLINED_FUNCTION_4_55();
  }
  uint64_t v8 = *(unsigned char *)(v4 + 8089) ? *(int *)(v4 + 9084) + v6 : v6 + 3;
  uint64_t v9 = (unsigned char *)(*(void *)(v5 + 8 * v8) & 0xFFFFFFFFFFFFFFFCLL);
  if (!v9) {
    return OUTLINED_FUNCTION_4_55();
  }
  if ((*v9 & 2) != 0) {
    goto LABEL_13;
  }
  if (!a2) {
    return OUTLINED_FUNCTION_4_55();
  }
  uint64_t v9 = (unsigned char *)(*(void *)&v9[8 * (*(unsigned char *)(v4 + 8089) != 0)] & 0xFFFFFFFFFFFFFFFCLL);
LABEL_13:
  *(void *)(v4 + 8080) = v9;
  *(unsigned char *)(v4 + 8090) = 0;
  while (i < *(unsigned __int8 *)(v4 + 8121))
  {
    *(unsigned char *)(a1[35] + i++) = 0;
    uint64_t v4 = a1[24];
  }
  return OUTLINED_FUNCTION_6_49();
}

uint64_t vscanadvUptoTokenOrMarker()
{
  OUTLINED_FUNCTION_0_73();
  do
  {
    if (v3)
    {
      LODWORD(i) = 0;
      if (v2)
      {
        unsigned __int8 v11 = *(unsigned char *)(v9 + v6 + 31);
        if (v11)
        {
          if (*(unsigned char *)(v9 + v6))
          {
            LODWORD(i) = 0;
          }
          else
          {
            for (unint64_t i = 0; i < v11; ++i)
            {
              int v13 = *(_DWORD *)(v9 + 9084);
              int v14 = *(unsigned __int8 *)(v0[31] + i);
              if (*(void *)&v3[8 * v13 + 8 * v14]) {
                return OUTLINED_FUNCTION_4_55();
              }
              uint64_t v15 = *(void *)&v3[8 * v13 + 8 * (char)v14];
              uint64_t v16 = v0[35];
              if ((v15 & 2) != 0 && v4 != v14 && !*(unsigned char *)(v16 + i)) {
                return OUTLINED_FUNCTION_4_55();
              }
              *(unsigned char *)(v16 + i) = 0;
              uint64_t v9 = v0[24];
              unsigned __int8 v11 = *(unsigned char *)(v9 + v7);
            }
          }
        }
      }
      unint64_t v12 = v5;
      if (*(unsigned char *)(v9 + v8)) {
        unint64_t v12 = *(int *)(v9 + 9084) + (unint64_t)v4;
      }
      uint64_t v3 = (unsigned char *)(*(void *)&v3[8 * v12] & 0xFFFFFFFFFFFFFFFCLL);
      if (v3) {
        goto LABEL_10;
      }
    }
    return OUTLINED_FUNCTION_4_55();
LABEL_10:
    if ((*v3 & 2) == 0) {
      break;
    }
    *(void *)(v9 + 8080) = v3;
    *(unsigned char *)(v9 + v8 + hashDelete(*((void **)this + 513), 1, 1) = 0;
    for (unint64_t i = i; i < *(unsigned __int8 *)(v9 + v7); ++i)
    {
      *(unsigned char *)(v0[35] + i) = 0;
      uint64_t v9 = v0[24];
    }
  }
  while (v3 != v1);
  return OUTLINED_FUNCTION_6_49();
}

uint64_t vscanadvUptoToken()
{
  OUTLINED_FUNCTION_0_73();
  while (1)
  {
    if (!v2) {
      return OUTLINED_FUNCTION_4_55();
    }
    LODWORD(i) = 0;
    if (v1)
    {
      unsigned __int8 v10 = *(unsigned char *)(v8 + v5 + 31);
      if (v10)
      {
        if (*(unsigned char *)(v8 + v5))
        {
          LODWORD(i) = 0;
        }
        else
        {
          for (unint64_t i = 0; i < v10; ++i)
          {
            int v12 = *(_DWORD *)(v8 + 9084);
            int v13 = *(unsigned __int8 *)(v0[31] + i);
            if (*(void *)&v2[8 * v12 + 8 * v13]) {
              return OUTLINED_FUNCTION_4_55();
            }
            uint64_t v14 = *(void *)&v2[8 * v12 + 8 * (char)v13];
            uint64_t v15 = v0[35];
            if ((v14 & 2) != 0 && v3 != v13 && !*(unsigned char *)(v15 + i)) {
              return OUTLINED_FUNCTION_4_55();
            }
            *(unsigned char *)(v15 + i) = 0;
            uint64_t v8 = v0[24];
            unsigned __int8 v10 = *(unsigned char *)(v8 + v6);
          }
        }
      }
    }
    unint64_t v11 = v4;
    if (*(unsigned char *)(v8 + v7)) {
      unint64_t v11 = *(int *)(v8 + 9084) + (unint64_t)v3;
    }
    int v2 = (unsigned char *)(*(void *)&v2[8 * v11] & 0xFFFFFFFFFFFFFFFCLL);
    if (!v2) {
      return OUTLINED_FUNCTION_4_55();
    }
    if ((*v2 & 2) == 0) {
      break;
    }
    *(void *)(v8 + 8080) = v2;
    *(unsigned char *)(v8 + v7 + hashDelete(*((void **)this + 513), 1, 1) = 0;
    for (unint64_t i = i; i < *(unsigned __int8 *)(v8 + v6); ++i)
    {
      *(unsigned char *)(v0[35] + i) = 0;
      uint64_t v8 = v0[24];
    }
  }
  return OUTLINED_FUNCTION_6_49();
}

uint64_t vscanadvOverToken()
{
  OUTLINED_FUNCTION_0_73();
  while (v2)
  {
    LODWORD(i) = 0;
    if (v1)
    {
      unsigned __int8 v10 = *(unsigned char *)(v8 + v5 + 31);
      if (v10)
      {
        if (*(unsigned char *)(v8 + v5))
        {
          LODWORD(i) = 0;
        }
        else
        {
          for (unint64_t i = 0; i < v10; ++i)
          {
            int v12 = *(_DWORD *)(v8 + 9084);
            int v13 = *(unsigned __int8 *)(v0[31] + i);
            if (*(void *)&v2[8 * v12 + 8 * v13]) {
              return OUTLINED_FUNCTION_4_55();
            }
            uint64_t v14 = *(void *)&v2[8 * v12 + 8 * (char)v13];
            uint64_t v15 = v0[35];
            if ((v14 & 2) != 0 && v3 != v13 && !*(unsigned char *)(v15 + i)) {
              return OUTLINED_FUNCTION_4_55();
            }
            *(unsigned char *)(v15 + i) = 0;
            uint64_t v8 = v0[24];
            unsigned __int8 v10 = *(unsigned char *)(v8 + v6);
          }
        }
      }
    }
    unint64_t v11 = v4;
    if (*(unsigned char *)(v8 + v7)) {
      unint64_t v11 = *(int *)(v8 + 9084) + (unint64_t)v3;
    }
    int v2 = (unsigned char *)(*(void *)&v2[8 * v11] & 0xFFFFFFFFFFFFFFFCLL);
    if (!v2) {
      break;
    }
    *(void *)(v8 + 8080) = v2;
    *(unsigned char *)(v8 + v7 + hashDelete(*((void **)this + 513), 1, 1) = 0;
    for (unint64_t i = i; i < *(unsigned __int8 *)(v8 + v7 + 32); ++i)
    {
      *(unsigned char *)(v0[35] + i) = 0;
      uint64_t v8 = v0[24];
    }
    if ((*v2 & 2) == 0)
    {
      *(void *)(v8 + 8080) = *(void *)&v2[8 * (*(unsigned char *)(v8 + v7) != 0)] & 0xFFFFFFFFFFFFFFFCLL;
      return OUTLINED_FUNCTION_6_49();
    }
  }
  return OUTLINED_FUNCTION_4_55();
}

unsigned char *vmovel(unsigned char *a1, int a2)
{
  do
  {
    int v2 = a1;
    a1 = (unsigned char *)(*(void *)&a1[8 * a2 + 24] & 0xFFFFFFFFFFFFFFFCLL);
  }
  while (a1 && (*a1 & 2) != 0);
  return v2;
}

unsigned char *vmover(uint64_t a1, unsigned char *a2, int a3)
{
  uint64_t v3 = *(_DWORD *)(*(void *)(a1 + 192) + 9084) + a3;
  do
  {
    uint64_t result = a2;
    a2 = (unsigned char *)(*(void *)&a2[8 * v3] & 0xFFFFFFFFFFFFFFFCLL);
  }
  while (a2 && (*a2 & 2) != 0);
  return result;
}

uint64_t vmark(uint64_t *a1, unsigned int a2, unsigned __int8 a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v16 = a3;
  uint64_t v11 = a1[25];
  *(_WORD *)(v11 + 96) = -1;
  *(void *)(v11 + 88) = &v16;
  *(unsigned char *)(v11 + 98) = 0;
  int v12 = &vstmtbl[12 * a2 + 3];
LABEL_2:
  uint64_t v13 = *(void *)(v11 + 8);
  while (a4 != a5 && a4 != v13)
  {
    a4 = *(void *)(a4 + 8 * (int)(*(_DWORD *)(a1[24] + 9084) + a2)) & 0xFFFFFFFFFFFFFFFCLL;
    if (!a4 || (*(unsigned char *)a4 & 2) == 0)
    {
      (*(void (**)(unint64_t, uint64_t))&(*v12)[8 * v16])(a4 + 16, a6);
      a4 = *(void *)(a4 + 8) & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v11 = a1[25];
      goto LABEL_2;
    }
  }
  OUTLINED_FUNCTION_7_49(a1[23]);
  return 1;
}

uint64_t vsplit_time(uint64_t *a1, unsigned int a2, unint64_t a3, uint64_t a4)
{
  int v4 = a4;
  unint64_t v5 = a3;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if ((a4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = (unsigned char *)(*(void *)(a3 + 8 * (int)(*(_DWORD *)(a1[24] + 9084) + a2)) & 0xFFFFFFFFFFFFFFFCLL);
    if (v8 && (*v8 & 2) != 0) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = (void *)(*(void *)(a3 + 8 * (int)(*(_DWORD *)(a1[24] + 9084) + a2)) & 0xFFFFFFFFFFFFFFFCLL);
    }
    uint64_t v11 = vins_sync((uint64_t)a1, a2, a3, (unint64_t)v8);
    uint64_t v12 = v5;
    unint64_t v5 = v11;
    if (v11) {
      goto LABEL_10;
    }
    return 0;
  }
  unsigned __int8 v10 = (unsigned char *)(*(void *)(a3 + 8 * a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
  if (v10 && (*v10 & 2) != 0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v10;
  }
  uint64_t v11 = vins_sync((uint64_t)a1, a2, (unint64_t)v10, v5);
  uint64_t v12 = v11;
  if (!v11) {
    return 0;
  }
LABEL_10:
  __int16 v27 = 0;
  unint64_t v25 = 0;
  uint64_t v26 = 0;
  if (!v9) {
    goto LABEL_19;
  }
  int v13 = *((__int16 *)vstmtbl[12 * a2 + 1] + 15);
  if (v13 == -4)
  {
    uint64_t v19 = OUTLINED_FUNCTION_2_62();
    v20(v19);
    OUTLINED_FUNCTION_10_48();
    __int16 v27 = v21;
    int v17 = (unsigned __int8 *)&v27;
  }
  else
  {
    if (v13 != -3) {
      goto LABEL_19;
    }
    uint64_t v14 = OUTLINED_FUNCTION_2_62();
    v15(v14);
    OUTLINED_FUNCTION_10_48();
    int v17 = (unsigned __int8 *)&v29;
  }
  vinitflds(v16, a2, v9, v17);
LABEL_19:
  if (v4 >= 0) {
    uint64_t v22 = v4;
  }
  else {
    uint64_t v22 = -v4;
  }
  uint64_t v28 = v22;
  int v23 = *((__int16 *)vstmtbl[12 * a2 + 1] + 15);
  if (v23 == -4)
  {
    LOWORD(v26) = -4;
    __int16 v27 = v22;
    uint64_t v24 = &v27;
  }
  else
  {
    if (v23 != -3) {
      goto LABEL_27;
    }
    LOWORD(v26) = -3;
    uint64_t v24 = (__int16 *)&v28;
  }
  unint64_t v25 = v24;
  BYTE2(v26) = 0;
LABEL_27:
  if (vins_tok(a1, a2, v12, v5, (uint64_t)&v25)) {
    return v11;
  }
  else {
    return 0;
  }
}

uint64_t vins_sync(uint64_t a1, unsigned int a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)alloc_sync(a1);
  if (v8)
  {
    OUTLINED_FUNCTION_11_48();
    *(void *)(v8 + 8 * v10) = v9 | 1;
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 192) + 9072) + a2)) {
      *(void *)(v8 + 8) |= 2uLL;
    }
    OUTLINED_FUNCTION_7_49(*(void *)(a1 + 184));
    if (a3 && (uint64_t v11 = *(void *)a3, (*(void *)a3 & 2) != 0))
    {
      unsigned int v12 = *(_DWORD *)(*(void *)(a1 + 192) + 9084) + a2;
      *(void *)(a3 + 8 * (int)v12) = *(void *)(a3 + 8 * (int)v12) & 3 | v8;
      unint64_t v13 = a3;
    }
    else
    {
      unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
      *(void *)(a3 + 8) = v8;
    }
    uint64_t v14 = a2 + 3;
    *(void *)(v8 + 8 * v14) = *(void *)(v8 + 8 * v14) & 3 | a3;
    if (a4 && (*(unsigned char *)a4 & 2) != 0)
    {
      *(void *)(a4 + 8 * v14) = *(void *)(a4 + 8 * v14) & 3 | v8;
      unint64_t v15 = a4;
    }
    else
    {
      unint64_t v15 = *(void *)(a4 + 8) & 0xFFFFFFFFFFFFFFFCLL;
      *(void *)a4 = v8;
    }
    OUTLINED_FUNCTION_11_48();
    *(void *)(v8 + 8 * v17) = v16 & 3 | a4;
    uint64_t v18 = *(void *)(a1 + 192);
    if (*(_DWORD *)(v18 + 8868))
    {
      uint64_t v19 = *(int *)(v18 + 9084) - 2;
      uint64_t v20 = *(void *)(v13 + 8 * v19);
      unint64_t v21 = v20 & 0xFFFFFFFFFFFFFFFCLL;
      if (v15 != (v20 & 0xFFFFFFFFFFFFFFFCLL))
      {
        if (*(unsigned char *)(*(void *)(v18 + 9072) + a2))
        {
LABEL_15:
          *(void *)(v8 + 16) |= 2uLL;
          if (*(_DWORD *)(*(void *)(a1 + 192) + 8864)
            && (*(unsigned char *)(v8 + 8) & 1) == 0
            && !vchkseqbad(a1, v8))
          {
            return 0;
          }
        }
        else
        {
          while (v21 != v15)
          {
            if ((*(unsigned char *)(v21 + 8) & 3) == 0) {
              goto LABEL_15;
            }
            unint64_t v21 = *(void *)(v21 + 8 * v19) & 0xFFFFFFFFFFFFFFFCLL;
          }
          while (1)
          {
            unint64_t v23 = v20 & 0xFFFFFFFFFFFFFFFCLL;
            if (v15 == (v20 & 0xFFFFFFFFFFFFFFFCLL)) {
              break;
            }
            *(void *)(v23 + 16) |= 2uLL;
            uint64_t v24 = *(void *)(a1 + 192);
            if (*(_DWORD *)(v24 + 8864) && (*(unsigned char *)(v23 + 8) & 1) == 0)
            {
              if (!vchkseqbad(a1, v23)) {
                return 0;
              }
              uint64_t v24 = *(void *)(a1 + 192);
            }
            uint64_t v20 = *(void *)(v23 + 8 * *(int *)(v24 + 9084) - 16);
          }
        }
      }
      INSSPINER(a1, v8, v13);
      uint64_t v18 = *(void *)(a1 + 192);
    }
    *(_DWORD *)(v18 + 9080) = 0;
  }
  return v8;
}

void *vinitflds(int a1, unsigned int a2, void *__dst, unsigned __int8 *a4)
{
  uint64_t v7 = &vstmtbl[12 * a2];
  memmove(__dst, v7[5], *((int *)v7 + 17));
  uint64_t result = (void *)(*(uint64_t (**)(void *, unsigned __int8 *))v7[3])(__dst, a4);
  uint64_t v9 = v7[4];
  if (v9)
  {
    int v10 = *((unsigned __int16 *)vstmtbl[12 * a2 + 1] + 15);
    if (v10 == 0xFFFF)
    {
      int v11 = *a4;
    }
    else
    {
      if (v10 != 65534) {
        return result;
      }
      int v11 = *(__int16 *)a4;
    }
    unsigned int v12 = &vstmtbl[12 * a2];
    size_t v13 = *((int *)v12 + 19);
    uint64_t v14 = &v9[*((int *)v12 + 18) * (uint64_t)v11];
    return memmove(__dst, v14, v13);
  }
  return result;
}

uint64_t vchkseqbad(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 8) & 3) != 0)
  {
    uint64_t v2 = 0;
    int v3 = 0;
    int v4 = 0;
    while (*(unsigned __int8 *)(a1 + 288) != v2)
    {
      uint64_t v5 = *(void *)(a1 + 192);
      if (*(void *)(a2 + 8 * (v2 + *(int *)(v5 + 9084))))
      {
        ++v3;
        if (*(unsigned char *)(*(void *)(v5 + 9072) + v2)) {
          ++v4;
        }
      }
      ++v2;
    }
    if (v3 < 2 || v4 >= v3) {
      return 1;
    }
  }
  vseqbad();
  return 0;
}

uint64_t vnsqflags(uint64_t result, uint64_t a2)
{
  unsigned int v2 = 0;
  int v3 = 0;
  int v4 = *(char **)(*(void *)(result + 200) + 160);
  while (1)
  {
    int v6 = *v4++;
    unsigned __int8 v5 = v6;
    if (v6 < 0) {
      break;
    }
    uint64_t v7 = *(void *)(a2 + 8 * (*(_DWORD *)(*(void *)(result + 192) + 9084) + v5)) & 1;
    v2 += v7;
    if (v7) {
      int v3 = 1;
    }
  }
  uint64_t v8 = *(unsigned __int8 *)(result + 288);
LABEL_6:
  uint64_t v9 = v8;
  while (1)
  {
    uint64_t v8 = v9 - 1;
    if (v9 < 1) {
      break;
    }
    uint64_t v10 = *(void *)(result + 192);
    uint64_t v11 = *(void *)(a2 + 8 * (v9 + *(int *)(v10 + 9084)) - 8);
    --v9;
    if (v11)
    {
      if (!*(unsigned char *)(*(void *)(v10 + 9072) + v8))
      {
        ++v2;
        int v3 = 0;
      }
      if (v2 >= 2 && v3 == 0)
      {
        int v3 = 0;
        goto LABEL_19;
      }
      goto LABEL_6;
    }
  }
  if (v2 == 1)
  {
    unint64_t v13 = *(void *)(a2 + 8) | 1;
    goto LABEL_20;
  }
LABEL_19:
  unint64_t v13 = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL;
LABEL_20:
  *(void *)(a2 + 8) = v13 & 0xFFFFFFFFFFFFFFFDLL | (2 * (v3 != 0));
  return result;
}

uint64_t visnonseq(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  int v8 = *(unsigned __int8 *)(a1 + 288);
  while (1)
  {
    if (v8 == v7) {
      return 0;
    }
    if (a2 != v7)
    {
      uint64_t v10 = v7 + *(int *)(*(void *)(a1 + 192) + 9084);
      if ((*(void *)(a3 + 8 * v10) & 1) != 0
        && (*(void *)(a4 + 8 * v10) & 1) != 0
        && VRSYNC(a1, a3, (char)v7) != a4)
      {
        break;
      }
    }
    ++v7;
  }
  return 1;
}

uint64_t fdeldel(uint64_t result, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (unint64_t)a2;
  uint64_t v5 = result;
  *(_DWORD *)(*(void *)(result + 184) + 452) = 1;
  if (a2)
  {
    uint64_t v6 = *a2;
    if ((*a2 & 2) != 0) {
      uint64_t v6 = a2[*(char *)(*(void *)(result + 200) + 136) + 3];
    }
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFCLL;
  }
  else
  {
    unint64_t v7 = 0;
  }
  do
  {
    if (!v4) {
      return result;
    }
    if ((*(unsigned char *)v4 & 2) == 0)
    {
      uint64_t v8 = *(void *)(v4 + 8);
LABEL_35:
      uint64_t result = cacheDeletedDeltaObject(v5, v4);
      goto LABEL_36;
    }
    int v9 = *(_DWORD *)(*(void *)(v5 + 192) + 9084) + *(char *)(*(void *)(v5 + 200) + 136);
    uint64_t v8 = *(void *)(v4 + 8 * v9);
    uint64_t v10 = *(void *)(v4 + 8);
    *(void *)(v4 + 8 * v9) = v8 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v11 = v4 + 8 * *(char *)(*(void *)(v5 + 200) + 136);
    *(void *)(v11 + 24) &= 3uLL;
    LODWORD(v1hashDelete(*((void **)this + 513), 1, 1) = *(_DWORD *)(*(void *)(v5 + 192) + 9084) + *(char *)(*(void *)(v5 + 200) + 136);
    *(void *)(v4 + 8 * (int)v11) &= 3uLL;
    if (v10)
    {
      if (*(_DWORD *)(*(void *)(v5 + 192) + 8868)) {
        DELSPINE(v5, v4);
      }
      goto LABEL_35;
    }
    uint64_t result = vnsqflags(v5, v4);
    uint64_t v12 = *(void *)(v5 + 192);
    if (!*(_DWORD *)(v12 + 8868)) {
      goto LABEL_36;
    }
    uint64_t v13 = *(void *)(v5 + 200);
    unint64_t v14 = v4;
    do
      unint64_t v14 = *(void *)(v14 + 8) & 0xFFFFFFFFFFFFFFFCLL;
    while ((*(unsigned char *)(v14 + 16) & 2) != 0);
    uint64_t v15 = *(int *)(v12 + 9084);
    unint64_t v16 = v4;
    do
      unint64_t v16 = *(void *)(v16 + 8 * (v15 - 2)) & 0xFFFFFFFFFFFFFFFCLL;
    while ((*(unsigned char *)(v16 + 16) & 2) != 0);
    LODWORD(v17) = 0;
    int v18 = 0;
    int v19 = 0;
    uint64_t v20 = *(unsigned __int8 *)(v5 + 288);
    uint64_t v21 = v16 + 8 * v15 - 8;
    uint64_t v22 = v14 + 8 * v15 - 8;
LABEL_16:
    int v23 = v17;
    for (uint64_t i = v20; i > *(unsigned __int8 *)(v13 + 136); --i)
    {
      if ((*(void *)(v4 + 8 * v15 - 8 + 8 * i) & 1) == 0)
      {
        uint64_t v20 = i - 1;
        LODWORD(v17) = 1;
        if (!v23)
        {
          LODWORD(v17) = 0;
          if (*(void *)(v22 + 8 * i)) {
            uint64_t v17 = *(void *)(v21 + 8 * i) & 1;
          }
        }
        goto LABEL_16;
      }
      if (*(void *)(v22 + 8 * i))
      {
        if (v19 || (*(void *)(v21 + 8 * i) & 1) != 0) {
          goto LABEL_36;
        }
        int v19 = 0;
        ++v18;
      }
      else
      {
        if (v19) {
          goto LABEL_21;
        }
        if (*(void *)(v21 + 8 * i))
        {
          if (v18) {
            goto LABEL_36;
          }
LABEL_21:
          int v19 = 1;
          continue;
        }
        int v19 = 0;
      }
    }
    uint64_t v26 = 8 * v15;
    uint64_t v27 = *(unsigned __int8 *)(v13 + 136);
    if (*(unsigned char *)(v13 + 136))
    {
      do
      {
        if (*(unsigned char *)(v4 + v26))
        {
          if (*(unsigned char *)(v14 + v26))
          {
            if (v19 || (*(unsigned char *)(v16 + v26) & 1) != 0) {
              goto LABEL_36;
            }
            int v19 = 0;
            ++v18;
          }
          else if (v19)
          {
            int v19 = 1;
          }
          else
          {
            if (v18) {
              goto LABEL_36;
            }
            int v19 = *(_DWORD *)(v16 + v26) & 1;
          }
        }
        else if (v23)
        {
          int v23 = 1;
        }
        else if (*(unsigned char *)(v14 + v26))
        {
          int v23 = *(_DWORD *)(v16 + v26) & 1;
        }
        else
        {
          int v23 = 0;
        }
        v26 += 8;
        --v27;
      }
      while (v27);
    }
    if (!v19 || !v18)
    {
      if (v23)
      {
        *(unsigned char *)(v13 + 16) = 0;
        *(void *)(v13 + 24) = v4;
        *(void *)(v13 + 32) = v4;
        *(_DWORD *)(v13 + 20) = (*(void *)(v4 + 8) & 3) == 0;
        if (v19 | v18)
        {
          if (v19) {
            char v28 = -1;
          }
          else {
            char v28 = 1;
          }
          if (v19) {
            unint64_t v29 = v14;
          }
          else {
            unint64_t v29 = v16;
          }
          *(void *)(v13 + 48) = v29;
        }
        else
        {
          char v28 = 2;
        }
        *(unsigned char *)(v13 + 40) = v28;
LABEL_79:
        switch(v28)
        {
          case -1:
LABEL_82:
            uint64_t result = seqscan(v5, (unsigned __int8 *)(v13 + 40));
            uint64_t v13 = *(void *)(v5 + 200);
            break;
          case 2:
            if (*(void *)(v13 + 24) == v14 && *(unsigned __int8 *)(v13 + 16) == 255)
            {
              *(unsigned char *)(v13 + 64) = -1;
              uint64_t v42 = *(void *)(v13 + 32);
              *(void *)(v13 + 72) = v14;
              *(void *)(v13 + 80) = v42;
              *(_DWORD *)(v13 + 68) = *(_DWORD *)(v13 + 20);
            }
            else
            {
              *(unsigned char *)(v13 + 64) = -1;
              uint64_t v35 = v13 + 64;
              *(void *)(v35 + 8) = v14;
              seqscan(v5, (unsigned __int8 *)v35);
              uint64_t v13 = *(void *)(v5 + 200);
            }
            *(unsigned char *)(v13 + 40) = 1;
            uint64_t v36 = v13 + 40;
            *(void *)(v36 + 8) = v16;
            uint64_t result = seqscan(v5, (unsigned __int8 *)v36);
            uint64_t v13 = *(void *)(v5 + 200);
            *(void *)(v13 + 48) = *(void *)(v13 + 80);
            *(_DWORD *)(v13 + 44) |= *(_DWORD *)(v13 + 68);
            break;
          case 1:
            goto LABEL_82;
        }
        uint64_t v37 = v13 + 24 * (*(_DWORD *)(v13 + 20) != 0);
        int v38 = *(char *)(v37 + 16);
        unint64_t v39 = *(void *)(v37 + 24);
        uint64_t v40 = (void *)(v37 + 32);
        while (1)
        {
          *(void *)(v39 + 16) |= 2uLL;
          if (*(_DWORD *)(*(void *)(v5 + 192) + 8864))
          {
            if ((*(unsigned char *)(v39 + 8) & 1) == 0)
            {
              uint64_t result = vchkseqbad(v5, v39);
              if (!result) {
                break;
              }
            }
          }
          if (v39 == *v40) {
            break;
          }
          if (v38 < 0) {
            uint64_t v41 = 1;
          }
          else {
            uint64_t v41 = *(int *)(*(void *)(v5 + 192) + 9084) - 2;
          }
          unint64_t v39 = *(void *)(v39 + 8 * v41) & 0xFFFFFFFFFFFFFFFCLL;
        }
      }
      else if (v19 | v18)
      {
        BOOL v30 = v19 == 0;
        if (v19) {
          char v31 = -1;
        }
        else {
          char v31 = 1;
        }
        if (v19) {
          unint64_t v32 = v14;
        }
        else {
          unint64_t v32 = v16;
        }
        *(unsigned char *)(v13 + 16) = v31;
        uint64_t v33 = v13 + 16;
        *(void *)(v33 + 8) = v32;
        if (v30) {
          char v34 = -1;
        }
        else {
          char v34 = 1;
        }
        *(void *)(v33 + 32) = v4;
        *(unsigned char *)(v33 + 24) = v34;
        uint64_t result = seqscan(v5, (unsigned __int8 *)v33);
        uint64_t v13 = *(void *)(v5 + 200);
        char v28 = *(unsigned char *)(v13 + 40);
        goto LABEL_79;
      }
    }
LABEL_36:
    unint64_t v25 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    BOOL v30 = v4 == a3;
    unint64_t v4 = v8 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while (!v30);
  if (v7 && (*(unsigned char *)v7 & 2) != 0)
  {
    int v43 = *(_DWORD *)(*(void *)(v5 + 192) + 9084) + *(char *)(*(void *)(v5 + 200) + 136);
    *(void *)(v7 + 8 * v43) = *(void *)(v7 + 8 * v43) & 3 | v25;
    if (v25 && (*(unsigned char *)v25 & 2) != 0)
    {
LABEL_106:
      unint64_t v44 = v25 + 8 * *(char *)(*(void *)(v5 + 200) + 136);
      *(void *)(v44 + 24) = *(void *)(v44 + 24) & 3 | v7;
    }
    else
    {
      *(void *)unint64_t v25 = v7;
    }
  }
  else if (v25 && (*(unsigned char *)v25 & 2) != 0)
  {
    *(void *)(v7 + 8) = v25;
    goto LABEL_106;
  }
  return result;
}

uint64_t fdel(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 200);
  if (a2)
  {
    int v3 = *(uint64_t **)(v2 + 104);
    unint64_t v4 = *(void *)(v2 + 112);
  }
  else
  {
    int v5 = *(char *)(v2 + 136);
    int v3 = (uint64_t *)(*(void *)(*(void *)(v2 + 120) + 8 * (*(_DWORD *)(*(void *)(a1 + 192) + 9084) + v5)) & 0xFFFFFFFFFFFFFFFCLL);
    unint64_t v4 = *(void *)(*(void *)(v2 + 128) + 8 * (v5 + 3)) & 0xFFFFFFFFFFFFFFFCLL;
  }
  return fdeldel(a1, v3, v4);
}

uint64_t vdelinit(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 192) + 9072) = malloc_type_malloc(*(unsigned __int8 *)(a1 + 288), 0x92BB8A27uLL);
  uint64_t v2 = malloc_type_malloc(*(unsigned __int8 *)(a1 + 288), 0xB32BBAE7uLL);
  uint64_t result = 0;
  uint64_t v4 = *(void *)(a1 + 192);
  *(void *)(*(void *)(a1 + 200) + 160) = v2;
  if (*(void *)(v4 + 9072) && v2)
  {
    for (unint64_t i = 0; i < *(unsigned __int8 *)(a1 + 288); ++i)
      *(unsigned char *)(*(void *)(*(void *)(a1 + 192) + 9072) + i) = 0;
    **(unsigned char **)(*(void *)(a1 + 200) + 160) = -1;
    return 1;
  }
  return result;
}

void vdelCleanup(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 200) + 160);
  if (v2)
  {
    free(v2);
    *(void *)(*(void *)(a1 + 200) + 160) = 0;
  }
  int v3 = *(void **)(*(void *)(a1 + 192) + 9072);
  if (v3)
  {
    free(v3);
    *(void *)(*(void *)(a1 + 192) + 9072) = 0;
  }
}

uint64_t setnonseqIndex(uint64_t result, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)(*(void *)(result + 200) + 160);
  while (1)
  {
    int v4 = *(char *)(v3 + v2);
    if (v4 == -1) {
      break;
    }
    if (v4 == a2) {
      return result;
    }
    ++v2;
  }
  *(unsigned char *)(v3 + v2) = a2;
  *(unsigned char *)(*(void *)(*(void *)(result + 200) + 160) + (v2 + 1)) = -1;
  return result;
}

uint64_t clearnonseqIndex(uint64_t result)
{
  **(unsigned char **)(*(void *)(result + 200) + 160) = -1;
  return result;
}

uint64_t mapsyncs(uint64_t a1, uint64_t a2)
{
  uint64_t result = absoluteSyncNum(a1, a2);
  char v5 = 0;
  uint64_t v6 = a2 + 8 * *(int *)(*(void *)(a1 + 192) + 9084);
  *(void *)(v6 - 24) |= 2uLL;
  uint64_t v7 = *(void *)(a1 + 200);
  int v8 = *(_DWORD *)(v7 + 200);
  *(_DWORD *)(v7 + 200) = v8 + 1;
  *(_WORD *)(*(void *)(v7 + 192) + 2 * (int)result) = v8;
  while (1)
  {
    char v9 = v5;
    if (v5 >= (int)*(unsigned __int8 *)(a1 + 288)) {
      break;
    }
    int v10 = *(_DWORD *)(*(void *)(a1 + 192) + 9084);
    if (*(void *)(a2 + 8 * (v10 + v5)))
    {
      uint64_t result = VRSYNC(a1, a2, v5);
      if (result)
      {
        if ((*(void *)(result + 8 * (v10 - 3)) & 2) == 0) {
          uint64_t result = mapsyncs(a1, result);
        }
      }
    }
    char v5 = v9 + 1;
  }
  return result;
}

uint64_t vredoctxt(uint64_t a1, int a2)
{
  signed __int8 v4 = 0;
  char v5 = *(_DWORD **)(a1 + 200);
  v5[86] = 0;
  v5[56] = a2;
  v5[57] = 0;
  while (*(unsigned __int8 *)(a1 + 288) > v4)
  {
    for (unint64_t i = *(void **)(*(void *)(a1 + 200) + 8); i; unint64_t i = VLSYNC((uint64_t)i, v4))
    {
      if (*(_DWORD *)(*(void *)(a1 + 200) + 224))
      {
        unint64_t v7 = i[*(int *)(*(void *)(a1 + 192) + 9084) - 3];
        if ((v7 & 2) != 0
          || (v7 <= 3 ? (BOOL v8 = *i > 3uLL) : (BOOL v8 = 1),
              !v8 ? (BOOL v9 = ((*i | v7) & 1) == 0) : (BOOL v9 = 0),
              !v9))
        {
          int v10 = checkInterrupt(a1);
          uint64_t v11 = *(void *)(a1 + 200);
          if (v10)
          {
            *(_DWORD *)(v11 + 224) = 0;
          }
          else if (*(_DWORD *)(v11 + 224))
          {
            *(_DWORD *)(v11 + 228) = 1;
            goto LABEL_19;
          }
        }
      }
      OUTLINED_FUNCTION_8_48();
      *(void *)(v13 - 24) = v12 & 0xFFFFFFFFFFFFFFFDLL;
      *i &= ~1uLL;
      OUTLINED_FUNCTION_8_48();
      *(void *)(v15 - 24) = v14 & 0xFFFFFFFFFFFFFFFELL;
      *i &= 3uLL;
      OUTLINED_FUNCTION_8_48();
      *(void *)(v17 - 24) = v16 & 3;
    }
    ++v4;
  }
LABEL_19:
  vclrctxt(a1);
  uint64_t v22 = *(void *)(a1 + 200);
  if (a2 && !*(_DWORD *)(v22 + 228))
  {
    vf_printf(a1, *(char *)(*(void *)(a1 + 216) + 4), 1, "The delta is correct.\n", v18, v19, v20, v21, v24);
    uint64_t v22 = *(void *)(a1 + 200);
  }
  *(_DWORD *)(v22 + 344) = 1;
  return 1;
}

uint64_t vclrctxt(uint64_t a1)
{
  unsigned __int8 v2 = 0;
  uint64_t v3 = *(unsigned __int8 *)(a1 + 288);
  while (v3 > v2)
  {
    for (unint64_t i = *(void **)(*(void *)(a1 + 200) + 8); i; unint64_t i = VLSYNC((uint64_t)i, (char)v2))
    {
      for (uint64_t j = 0; v3 != j; ++j)
      {
        if ((i[j + *(int *)(*(void *)(a1 + 192) + 9084)] & 1) == 0)
        {
          i[j + 3] &= 3uLL;
          uint64_t v6 = j + *(int *)(*(void *)(a1 + 192) + 9084);
          i[v6] &= 3uLL;
          *(_DWORD *)(*(void *)(a1 + 200) + 228) = 1;
        }
      }
    }
    ++v2;
  }
  return 1;
}

uint64_t cacheDeletedDeltaObject(uint64_t a1, uint64_t a2)
{
  return free_heap(a1, a2, 0);
}

uint64_t seqscan(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v2 = *a2;
  unint64_t v3 = *((void *)a2 + 1);
  *((void *)a2 + 2) = v3;
  if (v2 == 1) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = *(int *)(*(void *)(result + 192) + 9084) - 2;
  }
  uint64_t v5 = 0;
  int v6 = 0;
  unint64_t v7 = *(void *)(v3 + 8 * v4) & 0xFFFFFFFFFFFFFFFCLL;
  int v8 = *(unsigned __int8 *)(result + 288);
  while (v8 != v5)
  {
    if (*(void *)(v7 + 8 * (v5 + *(int *)(*(void *)(result + 192) + 9084)))) {
      v12[v6++] = v5;
    }
    ++v5;
  }
LABEL_9:
  unsigned __int8 v9 = 0;
  do
  {
    if (v6 <= v9)
    {
      uint64_t v11 = (void *)(v3 + 8);
      if ((~*(_DWORD *)(v3 + 8) & 3) != 0) {
        *((_DWORD *)a2 + hashDelete(*((void **)this + 513), 1, 1) = 1;
      }
      *((void *)a2 + 2) = v3;
      if (v2 == 1) {
        uint64_t v11 = (void *)(v3 + 8 * *(int *)(*(void *)(result + 192) + 9084) - 16);
      }
      unint64_t v3 = *v11 & 0xFFFFFFFFFFFFFFFCLL;
      goto LABEL_9;
    }
    uint64_t v10 = *(void *)(v3 + 8 * (*(_DWORD *)(*(void *)(result + 192) + 9084) + v12[v9++]));
  }
  while ((v10 & 1) == 0);
  return result;
}

void OUTLINED_FUNCTION_1_65(_DWORD *a1@<X8>)
{
}

uint64_t OUTLINED_FUNCTION_2_62()
{
  return v0 + 16;
}

uint64_t OUTLINED_FUNCTION_3_58(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  return vsetsc(a1, a2, 1, a4, a5, a6);
}

uint64_t OUTLINED_FUNCTION_4_55()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_5_51@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_6_49()
{
  return 1;
}

void OUTLINED_FUNCTION_7_49(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 452) = 1;
}

uint64_t OUTLINED_FUNCTION_9_48()
{
  return v0;
}

uint64_t varloc(uint64_t a1, __int16 a2, unsigned __int16 a3, uint64_t a4)
{
  __int16 v4 = a3 | (a2 << 8);
  if ((a2 & 0x80) != 0)
  {
    uint64_t v7 = *(void *)(a1 + 192) + 8 * ((a3 | (unsigned __int16)(a2 << 8)) & 0x3FFF) + 9288;
    return *(void *)v7;
  }
  uint64_t v5 = *(void *)(a1 + 192);
  if (!a4 || *(void *)(v5 + 8104) == a4)
  {
    uint64_t result = *(void *)(*(void *)(v5 + 8112) + 8);
    if (!result) {
      return result;
    }
    goto LABEL_8;
  }
  uint64_t result = vonstack(a1, a4);
  if (result)
  {
LABEL_8:
    uint64_t v7 = *(void *)(result + 16) + 8 * (v4 & 0x3FFF);
    return *(void *)v7;
  }
  return result;
}

uint64_t vrd_nvar()
{
  OUTLINED_FUNCTION_17_40();
  int v3 = 0;
  char v4 = 0;
  uint64_t v25 = *MEMORY[0x263EF8340];
LABEL_2:
  while ((v4 & 1) == 0)
  {
    char v5 = 1;
    int v6 = v24;
    while (1)
    {
      char v7 = v5;
      int v8 = vf_getc();
      if (v8 == 10) {
        break;
      }
      if ((v8 + 1) < 2)
      {
        *int v6 = 0;
        uint64_t v9 = 1;
        vf_puts(v1, *(char *)(*(void *)(v1 + 216) + 5), *(void *)(v1 + 184) + 32, 1);
        *(unsigned char *)(*(void *)(v1 + 184) + 32) = 0;
        *(_DWORD *)(*(void *)(v1 + 184) + 436) = 0;
        int v10 = var_rderr();
        int v3 = 0;
        char v4 = 0;
        if (!v10) {
          goto LABEL_2;
        }
        return v9;
      }
      if (v8 == 32)
      {
        char v5 = 1;
        if ((v7 & 1) == 0)
        {
          int v3 = 32;
          goto LABEL_13;
        }
      }
      else
      {
        char v5 = 0;
        *v6++ = v8;
      }
    }
    int v3 = 10;
LABEL_13:
    *int v6 = 0;
    int v11 = *(__int16 *)(v2 + 8);
    if (v11 == -4)
    {
      if (chk_itok((unsigned __int8 *)v24))
      {
        **(_WORD **)uint64_t v2 = atoi(v24);
        char v4 = 1;
        continue;
      }
      readErrorReport(v1, v0, v17, "\"%s\" is not an integer", v18, v19, v20, v21, (uint64_t)v24);
    }
    else
    {
      char v4 = 1;
      if (v11 != -3) {
        continue;
      }
      if (chk_itok((unsigned __int8 *)v24))
      {
        **(void **)uint64_t v2 = atol(v24);
        char v4 = 1;
        continue;
      }
      readErrorReport(v1, v0, v12, "\"%s\" is not an long integer (longint)", v13, v14, v15, v16, (uint64_t)v24);
    }
    int v22 = var_rderr();
    char v4 = 1;
    if (v22) {
      return 1;
    }
  }
  if (v3 != 10 && vf_getc() != 10) {
    vf_ungetc();
  }
  return 0;
}

uint64_t var_rderr()
{
  OUTLINED_FUNCTION_17_40();
  Physical = logicalFileFindPhysical(v4, v5, "cmdwin", 1, 1);
  if (Physical || OUTLINED_FUNCTION_13_45((uint64_t)Physical, v7, "pgmwin"))
  {
    int v8 = (uint64_t *)logicalFileInputBuffer(v1, v0);
    unsigned int v9 = dynaBufMoveRel((uint64_t)v8, 0);
    int v10 = dynaBufLength((uint64_t)v8);
    dynaBufMoveAbs((uint64_t)v8, v10 - 1);
    dynaBufDeleteChars(v8, 1uLL);
    dynaBufMoveAbs((uint64_t)v8, v9);
    LOBYTE(v8) = dynaBufContents((uint64_t)v8);
    char v11 = strlen(v2);
    vf_printf(v1, v0, 1, "Error in <%s>, re-enter:\n", v12, v13, v14, v15, (_BYTE)v8 + v9 - v11);
    vf_clrbuf(v1, v0);
    return 0;
  }
  return v3;
}

uint64_t chk_itok(unsigned __int8 *a1)
{
  int v1 = *a1;
  if (v1 != 43 && v1 != 45 && ((char)v1 - 48) > 9) {
    return 0;
  }
  uint64_t v2 = (char *)(a1 + 1);
  while (1)
  {
    int v4 = *v2++;
    int v3 = v4;
    if (!v4) {
      break;
    }
    if ((v3 - 48) >= 0xA) {
      return 0;
    }
  }
  return 1;
}

uint64_t readErrorReport(uint64_t a1, unsigned __int8 a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void *)(a1 + 216);
  uint64_t v12 = 4;
  if (*(unsigned __int8 *)(v11 + 1) != a2) {
    uint64_t v12 = 5;
  }
  int v13 = *(char *)(v11 + v12);
  vf_printf(a1, v13, 0, "Error: %s: ", a5, a6, a7, a8, (char)"DELTIO");
  return vf_printf(a1, v13, 1, a4, v14, v15, v16, v17, (char)&a9);
}

size_t lithex(size_t result, char *a2, int a3)
{
  int v4 = (unsigned char *)result;
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v5 = a3 - 8;
  int v6 = a2;
  while (1)
  {
    int v7 = (char)*v4;
    if (!*v4 || v6 - a2 >= v5) {
      break;
    }
    if ((v7 - 127) >= 0xA1u)
    {
      *v6++ = v7;
    }
    else
    {
      switch(*v4)
      {
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
          goto LABEL_14;
        default:
          if (v7 == 34 || v7 == 39 || v7 == 63 || v7 == 92)
          {
LABEL_14:
            OUTLINED_FUNCTION_28_25();
            __sprintf_chk(v9, v10, v11, "'\\%s'");
          }
          else
          {
            OUTLINED_FUNCTION_28_25();
            __sprintf_chk(v12, v13, v14, "'\\x%2x'");
          }
          strcpy(v6, __src);
          uint64_t result = strlen(__src);
          v6 += result;
          break;
      }
    }
    ++v4;
  }
  *int v6 = 0;
  return result;
}

uint64_t vrd_tvar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  LOBYTE(v6) = 0;
  char v7 = 0;
  uint64_t v60 = *MEMORY[0x263EF8340];
  unsigned __int8 v58 = 0;
  int v57 = 0;
  uint64_t v56 = 0;
  __int16 v55 = 0;
  double v54 = 0.0;
  BOOL v52 = (void **)a3;
  unsigned int v8 = *(unsigned __int8 *)(a3 + 8);
  unsigned int v9 = &vstmtbl[12 * *(unsigned __int8 *)(a3 + 8) + 1];
  int v10 = (char)v8;
  while (1)
  {
    size_t v11 = v5;
    if (v7)
    {
      vinitflds(a1, v8, *v52, v5);
      if (v6 != 10)
      {
        OUTLINED_FUNCTION_7_50();
        if (vf_getc() != 10)
        {
          OUTLINED_FUNCTION_7_50();
          vf_ungetc();
        }
      }
      return 0;
    }
    int v12 = gettok_0(a1, v8, a2, __s1);
    if (!v12) {
      break;
    }
    int v6 = v12;
    if (checkInterrupt(a1)) {
      break;
    }
    char v7 = 0;
    uint64_t v5 = v11;
    if (v6 != 10)
    {
      uint64_t v13 = STMTYP(v10);
      char v7 = 1;
      uint64_t v5 = v11;
      switch((int)v13)
      {
        case -5:
          uint64_t v19 = chk_ftok((unsigned __int8 *)__s1);
          if (v19)
          {
            double v54 = atof(__s1);
            char v7 = 1;
            uint64_t v5 = (unsigned __int8 *)&v54;
          }
          else
          {
            int v48 = OUTLINED_FUNCTION_4_56(v19, v20, v21, v22, v23, v24);
            char v7 = 0;
            uint64_t v5 = (unsigned __int8 *)&v54;
            if (v48) {
              return 1;
            }
          }
          continue;
        case -4:
          uint64_t v29 = chk_itok((unsigned __int8 *)__s1);
          if (v29)
          {
            __int16 v55 = atoi(__s1);
            char v7 = 1;
            uint64_t v5 = (unsigned __int8 *)&v55;
          }
          else
          {
            int v49 = OUTLINED_FUNCTION_4_56(v29, v30, v31, v32, v33, v34);
            char v7 = 0;
            uint64_t v5 = (unsigned __int8 *)&v55;
            if (v49) {
              return 1;
            }
          }
          continue;
        case -3:
          uint64_t v35 = chk_itok((unsigned __int8 *)__s1);
          if (v35)
          {
            uint64_t v56 = atol(__s1);
            char v7 = 1;
            uint64_t v5 = (unsigned __int8 *)&v56;
          }
          else
          {
            int v50 = OUTLINED_FUNCTION_4_56(v35, v36, v37, v38, v39, v40);
            char v7 = 0;
            uint64_t v5 = (unsigned __int8 *)&v56;
            if (v50) {
              return 1;
            }
          }
          break;
        case -2:
          int v53 = v10;
          uint64_t v41 = 0;
          uint64_t v42 = v9;
          int v43 = *v9;
          int v44 = *((__int16 *)*v9 + 14);
          uint64_t v45 = v44 & ~(v44 >> 31);
          while (1)
          {
            int v57 = v41;
            if (v45 == v41) {
              break;
            }
            uint64_t v13 = strcmp(__s1, *(const char **)(*((void *)v43 + 2) + 8 * v41++));
            if (!v13)
            {
              LODWORD(v45) = v41 - 1;
              break;
            }
          }
          char v7 = 1;
          uint64_t v5 = (unsigned __int8 *)&v57;
          BOOL v46 = v45 == v44;
          unsigned int v9 = v42;
          int v10 = v53;
          if (!v46) {
            continue;
          }
LABEL_24:
          int v47 = OUTLINED_FUNCTION_4_56(v13, v14, v15, v16, v17, v18, v52);
          char v7 = 0;
          uint64_t v5 = v11;
          if (v47) {
            return 1;
          }
          continue;
        case -1:
          unsigned __int8 v25 = 0;
          uint64_t v26 = *v9;
          int v27 = *((__int16 *)*v9 + 14);
          do
          {
            unsigned __int8 v58 = v25;
            int v28 = v25;
            if (v25 >= v27) {
              break;
            }
            uint64_t v13 = strcmp(__s1, *(const char **)(*((void *)v26 + 2) + 8 * v25));
            unsigned __int8 v25 = v28 + 1;
          }
          while (v13);
          char v7 = 1;
          uint64_t v5 = &v58;
          if (v28 != v27) {
            continue;
          }
          goto LABEL_24;
        default:
          continue;
      }
    }
  }
  OUTLINED_FUNCTION_27_25();
  return 1;
}

uint64_t gettok_0(uint64_t a1, unsigned int a2, uint64_t a3, unsigned char *a4)
{
  int v6 = (int)vstmtbl[12 * a2 + 10];
  int v7 = (char)a2;
  BOOL v8 = STMTYP((char)a2) == -4 || STMTYP(v7) == -3 || STMTYP(v7) == -5;
  char v9 = 0;
  char v10 = 0;
  size_t v11 = &vstmtbl[12 * a2];
  int v12 = (char *)v11 + 84;
  uint64_t v26 = (char *)v11 + 85;
  if (v6 != 1) {
    BOOL v8 = 1;
  }
  BOOL v25 = v8;
  while (1)
  {
    int v13 = OUTLINED_FUNCTION_19_38();
    int v14 = v13;
    if (v13 == 92)
    {
      int v15 = OUTLINED_FUNCTION_19_38();
      int v16 = v15;
      if ((v15 & 0xFFFFFFF8) == 0x30)
      {
        char v17 = 0;
        while ((v16 & 0xFFFFFFF8) == 0x30)
        {
          char v17 = v16 + 8 * v17 - 48;
          int v16 = OUTLINED_FUNCTION_19_38();
        }
        vf_ungetc();
        LOBYTE(v16) = v17;
      }
      else
      {
        if ((v15 & 0xFFFFFFDF) == 0x58)
        {
          for (LOBYTE(v16) = 0; ; LOBYTE(v16) = v18 + 16 * v16 + v19)
          {
            int v18 = OUTLINED_FUNCTION_19_38();
            if ((v18 - 48) >= 0xA)
            {
              if ((v18 - 97) >= 6)
              {
                if ((v18 - 65) > 5)
                {
                  vf_ungetc();
                  goto LABEL_26;
                }
                char v19 = -55;
              }
              else
              {
                char v19 = -87;
              }
            }
            else
            {
              char v19 = -48;
            }
          }
        }
        switch(v15)
        {
          case 'n':
            LOBYTE(v16) = 10;
            break;
          case 'o':
          case 'p':
          case 'q':
          case 's':
          case 'u':
            break;
          case 'r':
            LOBYTE(v16) = 13;
            break;
          case 't':
            LOBYTE(v16) = 9;
            break;
          case 'v':
            LOBYTE(v16) = 11;
            break;
          default:
            switch(v15)
            {
              case 'a':
                LOBYTE(v16) = 7;
                break;
              case 'f':
                LOBYTE(v16) = 12;
                break;
              case 'b':
                LOBYTE(v16) = 8;
                break;
            }
            break;
        }
      }
LABEL_26:
      int v14 = (char)v16;
    }
    BOOL v20 = v13 != 92 && v14 == 10;
    if (v20) {
      break;
    }
    if (v13 != 92 && (v14 + 1) <= 1)
    {
      LOBYTE(v14) = 0;
LABEL_69:
      *a4 = 0;
      return (char)v14;
    }
    if (v13 == 92) {
      goto LABEL_45;
    }
    if (v14 == (char)*v12)
    {
      BOOL v20 = v9 == 0;
      char v9 = 1;
      if (!v20)
      {
        if (v14 == *v26) {
          goto LABEL_76;
        }
        goto LABEL_71;
      }
    }
    else
    {
      if (v14 == *v26)
      {
        if (v9)
        {
LABEL_76:
          *a4 = 0;
LABEL_77:
          LOBYTE(v14) = *(a4 - 1);
          return (char)v14;
        }
LABEL_71:
        LOBYTE(v14) = 0;
        return (char)v14;
      }
LABEL_45:
      if (v13 == 92 || (v14 == 32 ? (BOOL v22 = v6 == 1) : (BOOL v22 = 1), v22 || v9))
      {
        *a4++ = v14;
        if (v9) {
          char v23 = 1;
        }
        else {
          char v23 = v25;
        }
        if (v25) {
          char v10 = 1;
        }
        else {
          char v9 = 1;
        }
        if ((v23 & 1) == 0) {
          goto LABEL_69;
        }
      }
      else
      {
        char v9 = 0;
        BOOL v20 = v10 == 0;
        char v10 = 0;
        if (!v20)
        {
          *a4 = 0;
          LOBYTE(v14) = 32;
          return (char)v14;
        }
      }
    }
  }
  if (v9)
  {
    if (v6 == 1)
    {
      LOBYTE(v14) = *v12;
      *(_WORD *)a4 = *v12;
      return (char)v14;
    }
    goto LABEL_71;
  }
  *a4 = 0;
  if (v10)
  {
    vf_ungetc();
    goto LABEL_77;
  }
  LOBYTE(v14) = 10;
  return (char)v14;
}

uint64_t rdtokverr(uint64_t a1, unsigned __int8 a2, uint64_t a3, size_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  lithex(a4, v12, 75);
  readErrorReport(a1, a2, v6, "\"%s\" is not a token name in stream \"%s\"", v7, v8, v9, v10, (uint64_t)v12);
  return var_rderr();
}

uint64_t chk_ftok(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 > 0x2E || ((1 << v1) & 0x680000000000) == 0;
  if (v2 && ((char)v1 - 48) > 9) {
    return 0;
  }
  int v3 = 0;
  for (unint64_t i = a1 + 1; ; ++i)
  {
    if (v1 == 46)
    {
      if (v3) {
        return 0;
      }
      unsigned int v1 = *i;
      if (!*i) {
        return 0;
      }
      int v3 = 1;
    }
    else
    {
      unsigned int v1 = *i;
    }
    if (v1 != 46) {
      break;
    }
LABEL_14:
    ;
  }
  if (v1)
  {
    if (((char)v1 - 48) >= 0xA) {
      return 0;
    }
    goto LABEL_14;
  }
  return 1;
}

uint64_t vrd_delta(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  unsigned __int8 v42 = 0;
  int v41 = 0;
  uint64_t v40 = 0;
  __int16 v39 = 0;
  uint64_t v37 = 0;
  double v38 = 0.0;
  uint64_t v36 = 0;
  int v6 = (char)a3;
  __int16 v7 = STMTYP((char)a3);
  uint64_t v8 = &vstmtbl[12 * a3];
  uint64_t v10 = v8[1];
  uint64_t v9 = v8 + 1;
  LOWORD(v37) = v7;
  BYTE2(v37) = v10[32];
  uint64_t v11 = *(void *)(a1 + 200);
  uint64_t v12 = *(int *)(v11 + 292);
  uint64_t v13 = *(void *)(v11 + 1720) - v12;
  *(void *)(v11 + 1720) = v13;
  *(_DWORD *)(v11 + 1728) -= v12;
  *(unsigned char *)uint64_t v13 = 5;
  *(void *)(v13 + 8) = *(void *)(v11 + 1760);
  *(void *)(v11 + 1760) = v13;
  while (1)
  {
    uint64_t v14 = OUTLINED_FUNCTION_7_50();
    int v17 = gettok_0(v14, v15, a2, v16);
    if (v17 == 10) {
      return 0;
    }
    int v18 = v17;
    if (checkInterrupt(a1)) {
      return 1;
    }
    if (!v18)
    {
      OUTLINED_FUNCTION_27_25();
      return 1;
    }
    uint64_t v19 = STMTYP(v6);
    switch((int)v19)
    {
      case -5:
        uint64_t v36 = (uint64_t *)&v38;
        uint64_t v19 = chk_ftok((unsigned __int8 *)__s1);
        if (!v19) {
          goto LABEL_22;
        }
        double v38 = atof(__s1);
        goto LABEL_24;
      case -4:
        uint64_t v36 = (uint64_t *)&v39;
        uint64_t v19 = chk_itok((unsigned __int8 *)__s1);
        if (!v19) {
          goto LABEL_22;
        }
        __int16 v39 = atoi(__s1);
        goto LABEL_24;
      case -3:
        uint64_t v36 = &v40;
        uint64_t v19 = chk_itok((unsigned __int8 *)__s1);
        if (!v19) {
          goto LABEL_22;
        }
        uint64_t v40 = atol(__s1);
        goto LABEL_24;
      case -2:
        uint64_t v27 = 0;
        uint64_t v36 = (uint64_t *)&v41;
        int v28 = *v9;
        int v29 = *((__int16 *)*v9 + 14);
        uint64_t v30 = v29 & ~(v29 >> 31);
        break;
      case -1:
        unsigned __int8 v31 = 0;
        uint64_t v36 = (uint64_t *)&v42;
        uint64_t v32 = *v9;
        int v33 = *((__int16 *)*v9 + 14);
        do
        {
          unsigned __int8 v42 = v31;
          int v34 = v31;
          if (v31 >= v33) {
            break;
          }
          uint64_t v19 = strcmp(__s1, *(const char **)(*((void *)v32 + 2) + 8 * v31));
          unsigned __int8 v31 = v34 + 1;
        }
        while (v19);
        if (v34 != v33) {
          goto LABEL_24;
        }
LABEL_22:
        OUTLINED_FUNCTION_21_33(v19, v20, v21, v22, v23, v24, v25, v26);
        goto LABEL_23;
      default:
        goto LABEL_24;
    }
    while (1)
    {
      int v41 = v27;
      if (v30 == v27) {
        break;
      }
      uint64_t v19 = strcmp(__s1, *(const char **)(*((void *)v28 + 2) + 8 * v27++));
      if (!v19)
      {
        LODWORD(v30) = v27 - 1;
        break;
      }
    }
    if (v30 == v29)
    {
      OUTLINED_FUNCTION_21_33(v19, v20, v21, v22, v23, v24, v25, v26);
      uint64_t v36 = 0;
LABEL_23:
      if (dlt_rderr()) {
        return 1;
      }
    }
LABEL_24:
    vpush_var(a1, (uint64_t)&v36);
  }
}

uint64_t dlt_rderr()
{
  OUTLINED_FUNCTION_17_40();
  Physical = logicalFileFindPhysical(v4, v5, "cmdwin", 1, 1);
  if (Physical || OUTLINED_FUNCTION_13_45((uint64_t)Physical, v7, "pgmwin"))
  {
    uint64_t v8 = (uint64_t *)logicalFileInputBuffer(v1, v0);
    unsigned int v9 = dynaBufMoveRel((uint64_t)v8, 0);
    int v10 = dynaBufLength((uint64_t)v8);
    dynaBufMoveAbs((uint64_t)v8, v10 - 1);
    dynaBufDeleteChars(v8, 1uLL);
    dynaBufMoveAbs((uint64_t)v8, v9);
    LOBYTE(v8) = dynaBufContents((uint64_t)v8);
    char v11 = strlen(v2);
    vf_printf(v1, v0, 1, "Error in <%s>, re-enter:\n", v12, v13, v14, v15, (_BYTE)v8 + v9 - v11);
    uint64_t v16 = *(void *)(v1 + 200);
    uint64_t v17 = *(void *)(v16 + 1744);
    if (v17)
    {
      uint64_t v18 = *(void *)(v16 + 1760);
      *(void *)(v16 + 1720) = v18;
      *(_DWORD *)(v16 + 1728) = *(_DWORD *)(v16 + 1780) + v18 - *(_DWORD *)(v17 + 32);
    }
    vf_clrbuf(v1, v0);
    return 0;
  }
  return v3;
}

uint64_t vprt_strm(uint64_t a1, char a2, unint64_t a3, uint64_t a4, int a5, int a6, const char *a7)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v13 = a2;
  while (1)
  {
    OUTLINED_FUNCTION_23_29();
    if (a3 == a4 || a3 == v15) {
      break;
    }
    a3 = *(void *)(a3 + 8 * (*(_DWORD *)(*(void *)(a1 + 192) + 9084) + a5)) & 0xFFFFFFFFFFFFFFFCLL;
    if (!a3 || (*(unsigned char *)a3 & 2) == 0)
    {
      disptok(v14, a3 + 16, a5, a6, __s1);
      if (__s1[0] == 92) {
        cleanLiteral((unsigned __int8 *)__s1, 0, 0);
      }
      uint64_t v17 = __strcat_chk();
      vf_puts(a1, v13, v17, 0);
      a3 = *(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFFCLL;
    }
  }
  int v18 = strlen(a7);
  __memset_chk();
  __s1[v18] = 0;
  vf_puts(a1, v13, (uint64_t)__s1, 0);
  __memset_chk();
  uint64_t v19 = OUTLINED_FUNCTION_7_50();
  return vf_puts(v19, v20, v21, 1);
}

uint64_t disptok(int a1, int a2, int a3, int a4, char *__s1)
{
  int v6 = &vstmtbl[12 * a3];
  uint64_t v8 = v6[1];
  uint64_t v7 = (const char *)(v6 + 1);
  switch(*(_WORD *)&v8[40 * a4 + 30])
  {
    case 0xFFFB:
      uint64_t v9 = OUTLINED_FUNCTION_3_59();
      v10(v9);
      uint64_t v11 = OUTLINED_FUNCTION_1_66();
      uint64_t v28 = *(void *)v12(v11);
      sprintf(__s1, v7, v28);
      break;
    case 0xFFFC:
      uint64_t v13 = OUTLINED_FUNCTION_3_59();
      v14(v13);
      uint64_t v15 = OUTLINED_FUNCTION_1_66();
      uint64_t v17 = *(__int16 *)v16(v15);
      goto LABEL_5;
    case 0xFFFD:
      uint64_t v18 = OUTLINED_FUNCTION_3_59();
      v19(v18);
      uint64_t v20 = OUTLINED_FUNCTION_1_66();
      uint64_t v17 = *(void *)v21(v20);
LABEL_5:
      sprintf(__s1, v7, v17);
      break;
    case 0xFFFE:
      uint64_t v22 = OUTLINED_FUNCTION_8_49();
      uint64_t v24 = *(__int16 *)v23(v22);
      goto LABEL_9;
    case 0xFFFF:
      uint64_t v25 = OUTLINED_FUNCTION_8_49();
      uint64_t v24 = *(unsigned __int8 *)v26(v25);
LABEL_9:
      strcpy(__s1, *(const char **)&v7[8 * v24]);
      break;
    default:
      break;
  }
  uint64_t result = strcmp(__s1, "undefined");
  if (!result) {
    *(_DWORD *)__s1 = 2960685;
  }
  return result;
}

uint64_t vsvdelta(void *a1, char a2)
{
  uint64_t v2 = a1[25];
  if (!*(_DWORD *)(v2 + 248)) {
    return 0;
  }
  uint64_t v3 = (uint64_t)a1;
  *(unsigned char *)(v2 + 478) = a2;
  if (!*(void *)(v2 + 400))
  {
    a1 = malloc_type_malloc(8 * *((unsigned __int8 *)a1 + 288), 0x80040B8603338uLL);
    *(void *)(*(void *)(v3 + 200) + 400) = a1;
    if (!a1) {
      return 0;
    }
  }
  uint64_t v4 = 0;
  uint64_t v5 = 8 * *(unsigned __int8 *)(v3 + 288);
  while (1)
  {
    uint64_t v6 = *(void *)(v3 + 200);
    if (v5 == v4) {
      break;
    }
    *(void *)(*(void *)(v6 + 400) + v4) = *(void *)v6;
    v4 += 8;
  }
  uint64_t v7 = OUTLINED_FUNCTION_2_63((uint64_t)a1, *(char *)(v6 + 478), (uint64_t)"\nprint \"clearing...\" to cmdout");
  unint64_t v8 = 0;
  uint64_t v9 = vstmtbl;
  while (v8 < *(unsigned __int8 *)(v3 + 288))
  {
    OUTLINED_FUNCTION_6_50();
    __sprintf_chk(v10, v11, v12, "\nset ^_%s = ^left", v38);
    OUTLINED_FUNCTION_0_74();
    OUTLINED_FUNCTION_24_28();
    v9 += 12;
    OUTLINED_FUNCTION_6_50();
    __sprintf_chk(v13, v14, v15, "\ndelta delete %s ^left...^right", v39);
    uint64_t v7 = OUTLINED_FUNCTION_0_74();
    ++v8;
  }
  uint64_t v16 = OUTLINED_FUNCTION_2_63(v7, *(char *)(*(void *)(v3 + 200) + 478), (uint64_t)"\nprint \"restoring\" to cmdout");
  int v17 = *(unsigned __int8 *)(v3 + 288);
  while (1)
  {
    BOOL v18 = __OFSUB__(v17--, 1);
    if (v17 < 0 != v18) {
      break;
    }
    vf_puts(v3, *(char *)(*(void *)(v3 + 200) + 478), (uint64_t)"\nprint \".\" to cmdout", 1);
    uint64_t v19 = OUTLINED_FUNCTION_7_50();
    uint64_t v16 = reach(v19, v20, v21, 0xFFFFFFFF);
  }
  uint64_t v22 = OUTLINED_FUNCTION_2_63(v16, *(char *)(*(void *)(v3 + 200) + 478), (uint64_t)"\nprint \"cleaning up...\" to cmdout");
  unint64_t v23 = 0;
  uint64_t v24 = (const char **)vstmtbl;
  while (v23 < *(unsigned __int8 *)(v3 + 288))
  {
    uint64_t v25 = (char *)OUTLINED_FUNCTION_24_28();
    uint64_t v26 = *v24;
    v24 += 12;
    __sprintf_chk(v25, 0, 0x46uLL, "\ndelta delete %s ^_%s", v26, v26);
    uint64_t v22 = OUTLINED_FUNCTION_0_74();
    ++v23;
  }
  uint64_t v27 = 9186;
  for (uint64_t i = 1162; i - 1161 < *(int *)(v3 + 16); ++i)
  {
    uint64_t v29 = *(void *)(v3 + 192);
    if (*(__int16 *)(v29 + v27 - 2) == -6 && (*(unsigned char *)(v29 + v27) & 0x20) == 0)
    {
      uint64_t v30 = **(void **)(v29 + 8 * i);
      unsigned __int8 v31 = *(void **)(v3 + 200);
      if (v30 == *v31 || v30 == v31[1])
      {
        OUTLINED_FUNCTION_6_50();
        __sprintf_chk(v32, v33, v34, v35);
        uint64_t v22 = OUTLINED_FUNCTION_0_74();
      }
    }
    v27 += 24;
  }
  uint64_t v36 = 1;
  OUTLINED_FUNCTION_2_63(v22, *(char *)(*(void *)(v3 + 200) + 478), (uint64_t)"\nprint \"\\n\" to cmdout\n");
  return v36;
}

uint64_t reach(uint64_t result, int a2, unsigned char *a3, unsigned int a4)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(result + 200) + 400) + 8 * a2);
  if ((unsigned char *)v5 != a3)
  {
    uint64_t v6 = result;
    for (uint64_t i = (unsigned char *)VRSYNC(result, v5, (char)a2); i != a3; uint64_t i = (unsigned char *)VRSYNC(v6, (uint64_t)i, (char)a2))
    {
      unint64_t v8 = 0;
      int v9 = 0;
      int v10 = (const char **)vstmtbl;
      while (v8 < *(unsigned __int8 *)(v6 + 288))
      {
        if (a2 != v8)
        {
          OUTLINED_FUNCTION_26_27();
          if (v11)
          {
            size_t v12 = ",";
            if (!v9)
            {
              uint64_t v13 = OUTLINED_FUNCTION_20_34();
              prstuff(v13, a2, v14, i, 0xFFFFFFFFLL);
              *(void *)(*(void *)(*(void *)(v6 + 200) + 400) + 8 * a2) = i;
              vf_puts(v6, *(char *)(*(void *)(v6 + 200) + 478), (uint64_t)"\ndelta project ", 1);
              size_t v12 = (const char *)&unk_240047A1A;
            }
            __sprintf_chk((char *)(*(void *)(v6 + 200) + 408), 0, 0x46uLL, "%s%s", v12, *v10);
            int v9 = 1;
            vf_puts(v6, *(char *)(*(void *)(v6 + 200) + 478), *(void *)(v6 + 200) + 408, 1);
          }
        }
        ++v8;
        v10 += 12;
      }
      if (v9)
      {
        OUTLINED_FUNCTION_6_50();
        __sprintf_chk(v15, v16, v17, " (.1) ^_%s", v22);
        vf_puts(v6, *(char *)(*(void *)(v6 + 200) + 478), *(void *)(v6 + 200) + 408, 1);
        for (uint64_t j = 0; j < *(unsigned __int8 *)(v6 + 288); ++j)
        {
          if (a2 != j)
          {
            OUTLINED_FUNCTION_26_27();
            if (v19) {
              reach(v6, j, i, a2);
            }
          }
        }
      }
    }
    uint64_t v20 = OUTLINED_FUNCTION_20_34();
    uint64_t result = prstuff(v20, a2, v21, a3, a4);
    *(void *)(*(void *)(*(void *)(v6 + 200) + 400) + 8 * a2) = a3;
  }
  return result;
}

uint64_t svgetl()
{
  int v0 = (void *)OUTLINED_FUNCTION_14_44();
  fread(v0, v1, v2, v3);
  return bswap32(v5);
}

uint64_t svgeti()
{
  int v0 = (void *)OUTLINED_FUNCTION_15_43();
  fread(v0, v1, v2, v3);
  return (__int16)(v5 << 8) | v6;
}

uint64_t svgetc(uint64_t a1)
{
  OUTLINED_FUNCTION_10_49(a1);
  return v2;
}

uint64_t svgetu(uint64_t a1)
{
  OUTLINED_FUNCTION_10_49(a1);
  return v2;
}

uint64_t svgets(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 200);
  uint64_t v3 = 496;
  do
  {
    fread((void *)(v2 + v3), 1uLL, 1uLL, *(FILE **)(v2 + 480));
    uint64_t v2 = *(void *)(a1 + 200);
  }
  while (*(unsigned __int8 *)(v2 + v3++));
  return v2 + 496;
}

size_t svputl()
{
  int v0 = (const void *)OUTLINED_FUNCTION_14_44();
  return fwrite(v0, v1, v2, v3);
}

size_t svputi()
{
  int v0 = (const void *)OUTLINED_FUNCTION_15_43();
  return fwrite(v0, v1, v2, v3);
}

size_t svputc(uint64_t a1, char a2)
{
  return OUTLINED_FUNCTION_9_49(a1, a2);
}

size_t svputu(uint64_t a1, char a2)
{
  return OUTLINED_FUNCTION_9_49(a1, a2);
}

size_t svputs(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s) + 1;
  unsigned __int8 v5 = *(FILE **)(*(void *)(a1 + 200) + 480);
  return fwrite(__s, 1uLL, v4, v5);
}

uint64_t svputlptrs(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 192);
  uint64_t v3 = *(void *)(v2 + 8112);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 8104);
      if (v5)
      {
        uint64_t v7 = result;
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        int v10 = 0;
        while (v9 < *(__int16 *)(v5 + 58))
        {
          uint64_t v11 = *(void *)(v5 + 16);
          if (*(__int16 *)(v11 + v8 + 16) == -6
            && (*(char *)(v11 + v8 + 18) & 0x80000000) == 0
            && **(void **)(*(void *)(v4 + 16) + 8 * v9) == a2)
          {
            if (!v10)
            {
              uint64_t v12 = OUTLINED_FUNCTION_7_50();
              svputc(v12, v13);
              uint64_t v11 = *(void *)(*(void *)(*(void *)(v7 + 192) + 8104) + 16);
            }
            uint64_t result = svputs(v7, *(char **)(v11 + v8));
            uint64_t v5 = *(void *)(*(void *)(v7 + 192) + 8104);
            int v10 = 1;
          }
          ++v9;
          v8 += 24;
        }
        if (v10)
        {
          return svputs(v7, (char *)&unk_240047A1A);
        }
      }
    }
  }
  return result;
}

FILE *vsv2delta(uint64_t a1, char *__filename)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  *(void *)(*(void *)(a1 + 200) + 488) = __filename;
  uint64_t result = fopen(__filename, "wb");
  *(void *)(*(void *)(a1 + 200) + 480) = result;
  if (result)
  {
    svputs(a1, (char *)&unk_240047A1A);
    svputi();
    svputi();
    svputi();
    svputi();
    for (unint64_t i = 0; ; ++i)
    {
      uint64_t v5 = *(unsigned __int8 *)(a1 + 288);
      if (i >= v5) {
        break;
      }
      unsigned __int8 v6 = &vstmtbl[12 * i];
      svputs(a1, *v6);
      uint64_t v7 = (int *)(v6 + 8);
      svputi();
      svputc(a1, *(unsigned char *)(*(void *)(*(void *)(a1 + 192) + 9072) + i));
      uint64_t v8 = 0;
      for (uint64_t j = 0; j < *v7; ++j)
      {
        svputs(a1, *(char **)(*((void *)v7 - 7) + v8));
        svputi();
        svputi();
        svputi();
        v8 += 40;
      }
    }
    for (uint64_t k = -2; k < v5; uint64_t k = v11)
    {
      uint64_t v11 = k + 1;
      if (k != -1)
      {
        svputc(a1, 125);
        OUTLINED_FUNCTION_7_50();
        svputi();
        if (k == -2) {
          uint64_t v12 = 0;
        }
        else {
          uint64_t v12 = &vstmtbl[12 * k];
        }
        char v13 = **(unsigned char ***)(a1 + 200);
        if (k == -2) {
          int v14 = -99;
        }
        else {
          int v14 = -2;
        }
        for (; v13; char v13 = (unsigned char *)(*v23 & 0xFFFFFFFFFFFFFFFCLL))
        {
          if ((*v13 & 2) != 0)
          {
            char v19 = *(void **)(a1 + 200);
            if (v13 != (unsigned char *)*v19 && v13 != (unsigned char *)v19[1])
            {
              svputc(a1, 124);
              absoluteSyncNum(a1, (uint64_t)v13);
              svputi();
              uint64_t v20 = *(void *)(a1 + 192);
              int v21 = v14;
              if (!*(_DWORD *)(v20 + 8868))
              {
                for (uint64_t m = 0; ; ++m)
                {
                  if (*(unsigned __int8 *)(a1 + 288) + 2 == m)
                  {
                    int v21 = -99;
                    goto LABEL_39;
                  }
                  if m != 1 && k > m - 2 && (*(void *)&v13[8 * m - 16 + 8 * *(int *)(v20 + 9084)]) {
                    break;
                  }
                }
                int v21 = m - 2;
              }
LABEL_39:
              svputc(a1, v21);
              if (v21 == -99)
              {
                char v24 = NONSEQ((uint64_t)v13);
                svputc(a1, v24);
                char v25 = ONESTM((uint64_t)v13);
                svputc(a1, v25);
                char v26 = ALLNSQ((uint64_t)v13);
                svputc(a1, v26);
                svputlptrs(a1, (uint64_t)v13);
              }
            }
            unint64_t v23 = &v13[8 * k + 8 * *(int *)(*(void *)(a1 + 192) + 9084)];
          }
          else
          {
            svputc(a1, 123);
            uint64_t v15 = 0;
            uint64_t v16 = 30;
            while (v15 < *((int *)v12 + 16))
            {
              size_t v17 = v12[1];
              BOOL v18 = (char *)(*(uint64_t (**)(unsigned char *))&v12[2][8 * v15])(v13 + 16);
              switch(*(_WORD *)&v17[v16])
              {
                case 0xFFFB:
                  __sprintf_chk(__s, 0, 0x32uLL, "%g", *(double *)v18);
                  svputs(a1, __s);
                  break;
                case 0xFFFC:
                case 0xFFFE:
                  svputi();
                  break;
                case 0xFFFD:
                  svputl();
                  break;
                case 0xFFFF:
                  svputu(a1, *v18);
                  break;
                default:
                  break;
              }
              ++v15;
              v16 += 40;
            }
            unint64_t v23 = v13 + 8;
          }
        }
        uint64_t v5 = *(unsigned __int8 *)(a1 + 288);
        uint64_t v11 = k + 1;
      }
    }
    OUTLINED_FUNCTION_22_30();
    svputlptrs(a1, v27);
    OUTLINED_FUNCTION_25_27();
    svputlptrs(a1, v28);
    svputc(a1, 121);
    fclose(*(FILE **)(*(void *)(a1 + 200) + 480));
    return (FILE *)vclrctxt(a1);
  }
  return result;
}

void *findsync(uint64_t a1, int a2, char a3)
{
  uint64_t v4 = (4 * a2);
  uint64_t v5 = **(void ***)(a1 + 200);
  for (i = a3; v5; uint64_t v5 = (void *)VRSYNC(a1, (uint64_t)v5, i))
  {
    if ((*v5 & 0xFFFFFFFFFFFFFFFCLL) == v4) {
      break;
    }
  }
  return v5;
}

FILE *vrsdelta2(uint64_t a1, char *__filename)
{
  *(void *)(*(void *)(a1 + 200) + 488) = __filename;
  uint64_t result = fopen(__filename, "rb");
  *(void *)(*(void *)(a1 + 200) + 480) = result;
  if (!result) {
    return result;
  }
  if (*(unsigned char *)svgets(a1)
    || svgeti()
    || svgeti() != 1
    || svgeti()
    || svgeti() != *(_DWORD *)(*(void *)(a1 + 192) + 8868))
  {
    return 0;
  }
  vdltinit(a1, 0);
  *(_DWORD *)(*(void *)(a1 + 184) + 452) = 1;
  OUTLINED_FUNCTION_22_30();
  uint64_t v5 = *v4;
  ***(void ***)(a1 + 200) = (4 * absoluteSyncNum(a1, (uint64_t)v4)) | (unint64_t)(v5 & 3);
  OUTLINED_FUNCTION_25_27();
  uint64_t v7 = *v6;
  **(void **)(*(void *)(a1 + 200) + 8) = (4 * absoluteSyncNum(a1, (uint64_t)v6)) | (unint64_t)(v7 & 3);
  uint64_t v8 = *(int *)(a1 + 16);
  uint64_t v9 = 9184;
  for (uint64_t i = 1162; ; ++i)
  {
    uint64_t v11 = i - 1161;
    if (i - 1161 >= v8) {
      break;
    }
    uint64_t v12 = *(void *)(a1 + 192);
    if (*(__int16 *)(v12 + v9) == -6 && v11 != *(__int16 *)(a1 + 290) && v11 != *(__int16 *)(a1 + 292)) {
      **(void **)(v12 + 8 * i) = 0;
    }
    v9 += 24;
  }
  unint64_t v13 = 0;
  int v14 = vstmtbl;
  while (v13 < *(unsigned __int8 *)(a1 + 288))
  {
    svgets(a1);
    uint64_t v15 = &v14[12 * v13];
    int v17 = *((_DWORD *)v15 + 16);
    uint64_t v16 = (int *)(v15 + 8);
    if (v17 != svgeti()) {
      return 0;
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 192) + 9072) + v13) = svgetc(a1);
    uint64_t v18 = OUTLINED_FUNCTION_7_50();
    setnonseqIndex(v18, v19);
    if (*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 192) + 9072) + v13) > 1u) {
      return 0;
    }
    uint64_t v20 = 0;
    int v21 = v14;
    uint64_t v22 = &v14[12 * v13 + 1];
    uint64_t v23 = -1;
    while (++v23 < *v16)
    {
      char v24 = *v22;
      svgets(a1);
      int v25 = *(__int16 *)&v24[v20 + 30];
      if (svgeti() != v25) {
        return 0;
      }
      int v26 = *(__int16 *)&v24[v20 + 28];
      if (svgeti() != v26) {
        return 0;
      }
      int v27 = v24[v20 + 32];
      int v28 = svgeti();
      uint64_t result = 0;
      v20 += 40;
      if (v28 != v27) {
        return result;
      }
    }
    ++v13;
    int v14 = v21;
  }
  if (svgetc(a1) != 125) {
    return 0;
  }
  int v29 = 0;
  for (uint64_t j = -2; ; uint64_t j = v31)
  {
    if (j >= *(unsigned __int8 *)(a1 + 288))
    {
      fclose(*(FILE **)(*(void *)(a1 + 200) + 480));
      if (v29)
      {
        unsigned int v67 = 0;
        do
        {
          if (v67 >= *(unsigned __int8 *)(a1 + 288)) {
            break;
          }
          for (uint64_t k = **(void ***)(a1 + 200); k; uint64_t k = (void *)(*v69 & 0xFFFFFFFFFFFFFFFCLL))
          {
            if ((*k & 2) != 0)
            {
              *k &= 3uLL;
              uint64_t v69 = &k[*(_DWORD *)(*(void *)(a1 + 192) + 9084) + v67];
            }
            else
            {
              uint64_t v69 = k + 1;
            }
          }
          ++v67;
        }
        while (!checkInterrupt(a1));
        *(_DWORD *)(*(void *)(a1 + 192) + 9080) = 0;
        return (FILE *)1;
      }
      return 0;
    }
    uint64_t v31 = j + 1;
    if (j == -1) {
      continue;
    }
    if (v29) {
      return 0;
    }
    int v71 = svgeti();
    if (v71 != j) {
      return 0;
    }
    int v29 = 0;
    uint64_t v32 = &v14[12 * j];
    int v33 = (int *)(v32 + 8);
    uint64_t v34 = **(void **)(a1 + 200);
    uint64_t v35 = v32 + 1;
    uint64_t v75 = j + 3;
    uint64_t v76 = v32 + 3;
    uint64_t v72 = (int *)v32 + 17;
    uint64_t v73 = (uint64_t)v32;
    char v36 = 1;
    unsigned int v74 = (int *)(v32 + 8);
LABEL_32:
    if (v36) {
      break;
    }
    uint64_t v31 = j + 1;
  }
  char v36 = 1;
  switch(svgetc(a1))
  {
    case 't':
      OUTLINED_FUNCTION_25_27();
      goto LABEL_36;
    case 'u':
      OUTLINED_FUNCTION_22_30();
LABEL_36:
      uint64_t v38 = a1;
      goto LABEL_38;
    case 'v':
      uint64_t v38 = a1;
      uint64_t v37 = v34;
LABEL_38:
      svgetptrs(v38, v37, 0);
      goto LABEL_32;
    case 'w':
      OUTLINED_FUNCTION_25_27();
      goto LABEL_41;
    case 'x':
      OUTLINED_FUNCTION_22_30();
LABEL_41:
      uint64_t v40 = a1;
      goto LABEL_44;
    case 'y':
      char v36 = 0;
      int v29 = 1;
      goto LABEL_32;
    case 'z':
      uint64_t v40 = a1;
      uint64_t v39 = v34;
LABEL_44:
      svgetptrs(v40, v39, 1);
      goto LABEL_32;
    case '{':
      int v70 = v29;
      uint64_t v41 = 0;
      uint64_t v42 = 30;
      while (2)
      {
        if (v41 >= *v33)
        {
          char v36 = 1;
          int v29 = v70;
          goto LABEL_32;
        }
        char v80 = 0;
        uint64_t v79 = 0;
        __int16 v78 = 0;
        uint64_t v77 = 0;
        int v43 = v14;
        switch(*(_WORD *)&(*v35)[v42])
        {
          case 0xFFFB:
            uint64_t v45 = (const char *)svgets(a1);
            uint64_t v44 = (unsigned __int8 *)&v77;
            sscanf(v45, "%lg", &v77);
            break;
          case 0xFFFC:
            __int16 v78 = svgeti();
            uint64_t v44 = (unsigned __int8 *)&v78;
            break;
          case 0xFFFD:
          case 0xFFFE:
            uint64_t v79 = svgetl();
            uint64_t v44 = (unsigned __int8 *)&v79;
            break;
          case 0xFFFF:
            char v80 = svgetu(a1);
            uint64_t v44 = (unsigned __int8 *)&v80;
            break;
          default:
            uint64_t v44 = 0;
            break;
        }
        if (v41)
        {
          (*(void (**)(uint64_t, unsigned __int8 *))(*v76 + 8 * v41))(16, v44);
          BOOL v46 = (FILE *)v34;
LABEL_60:
          ++v41;
          v42 += 40;
          uint64_t v34 = (uint64_t)v46;
          int v14 = v43;
          continue;
        }
        break;
      }
      int v47 = *((__int16 *)*v35 + 15);
      uint64_t result = (FILE *)alloc_tok(a1, v73);
      if (result)
      {
        BOOL v46 = result;
        OUTLINED_FUNCTION_18_38();
        *(void *)(v34 + 8 * v50) = v49 | v48;
        OUTLINED_FUNCTION_23_29();
        *(void *)(v51 + 8 * v75) = *(void *)(v51 + 8 * v75) & 3 | v52;
        OUTLINED_FUNCTION_23_29();
        *int v53 = v34;
        v53[1] = v54;
        if (v47 < 0) {
          vinitflds(a1, v71, v53 + 2, v44);
        }
        else {
          memcpy(v53 + 2, v44, *v72);
        }
        int v33 = v74;
        goto LABEL_60;
      }
      return result;
    case '|':
      __int16 v55 = v14;
      int v56 = svgeti();
      int v57 = svgetc(a1);
      uint64_t v58 = (4 * v56);
      if (v57 != -99)
      {
        int v60 = v57;
        int v61 = *(unint64_t **)(a1 + 200);
        unint64_t v59 = *v61;
        while (v59 != v61[1])
        {
          if ((*(void *)v59 & 0xFFFFFFFFFFFFFFFCLL) == v58) {
            goto LABEL_78;
          }
          unint64_t v59 = VRSYNC(a1, v59, v60);
          int v61 = *(unint64_t **)(a1 + 200);
        }
        return 0;
      }
      uint64_t result = (FILE *)alloc_sync(a1);
      if (!result) {
        return result;
      }
      unint64_t v59 = (unint64_t)result;
      result->_p = (unsigned __int8 *)((uint64_t)result->_p & 3 | v58);
      if (svgetc(a1)) {
        SETNONSEQ(v59);
      }
      else {
        CLRNONSEQ(v59);
      }
      if (svgetc(a1)) {
        SETONESTM(v59);
      }
      else {
        CLRONESTM(v59);
      }
      if (svgetc(a1)) {
        SETALLNSQ(v59);
      }
      else {
        CLRALLNSQ(v59);
      }
LABEL_78:
      if (j != -2)
      {
        uint64_t v62 = j + *(int *)(*(void *)(a1 + 192) + 9084);
        *(void *)(v59 + 8 * v62) |= 1uLL;
      }
      OUTLINED_FUNCTION_23_29();
      *(void *)(v63 + 8 * v75) = *(void *)(v63 + 8 * v75) & 3 | v59;
      uint64_t v64 = j + *(int *)(*(void *)(a1 + 192) + 9084);
      *(void *)(v59 + 8 * v64) = *(void *)(v59 + 8 * v64) & 3 | *(void *)(*(void *)(a1 + 200) + 8);
      *(void *)(v59 + 8 * v75) = *(void *)(v59 + 8 * v75) & 3 | v34;
      if (v34 && (*(unsigned char *)v34 & 2) != 0)
      {
        OUTLINED_FUNCTION_18_38();
        *(void *)(v34 + 8 * v66) = v65 | v59;
      }
      else
      {
        *(void *)(v34 + 8) = v59;
      }
      char v36 = 1;
      uint64_t v34 = v59;
      int v14 = v55;
      int v33 = v74;
      goto LABEL_32;
    case '}':
      char v36 = 0;
      goto LABEL_32;
    default:
      goto LABEL_32;
  }
}

unsigned char *svgetptrs(uint64_t a1, uint64_t a2, int a3)
{
  while (1)
  {
    uint64_t result = (unsigned char *)svgets(a1);
    if (!*result) {
      break;
    }
    uint64_t v6 = OUTLINED_FUNCTION_11_49();
    if (a3)
    {
      if (!getgptr(v6, v7, v8))
      {
        uint64_t v9 = OUTLINED_FUNCTION_11_49();
        getlptr(v9, v10, v11);
      }
    }
    else if (!getlptr(v6, v7, v8))
    {
      uint64_t v12 = OUTLINED_FUNCTION_11_49();
      getgptr(v12, v13, v14);
    }
  }
  return result;
}

uint64_t prstuff(uint64_t result, int a2, unsigned char *a3, unsigned char *a4, uint64_t a5)
{
  if (a3 != a4)
  {
    uint64_t v6 = a3;
    uint64_t v8 = result;
    int v9 = 0;
    int v10 = 0;
    uint64_t v11 = &vstmtbl[12 * a2 + 1];
    uint64_t v12 = a3;
    if (a3) {
      goto LABEL_3;
    }
LABEL_4:
    if (!v10) {
      LODWORD(result) = prinsert(v8);
    }
    __int16 v13 = *((_WORD *)*v11 + 15);
    disptok(result, v12 + 16, a2, 0, (char *)(*(void *)(v8 + 200) + 408));
    uint64_t v14 = *(void *)(v8 + 200);
    int v15 = *(char *)(v14 + 478);
    if ((unsigned __int16)(v13 + 5) > 2u)
    {
      vf_puts(v8, v15, (uint64_t)"'", 1);
      OUTLINED_FUNCTION_0_74();
      int v15 = *(char *)(*(void *)(v8 + 200) + 478);
      uint64_t v17 = v8;
      uint64_t v16 = "'";
    }
    else
    {
      uint64_t v16 = (const char *)(v14 + 408);
      uint64_t v17 = v8;
    }
    vf_puts(v17, v15, (uint64_t)v16, 1);
    int v10 = 1;
    uint64_t result = vf_puts(v8, *(char *)(*(void *)(v8 + 200) + 478), (uint64_t)" ", 1);
    int v9 = 0;
    uint64_t v18 = v12 + 8;
    while (1)
    {
      uint64_t v12 = (unsigned char *)(*v18 & 0xFFFFFFFFFFFFFFFCLL);
      if (!v12) {
        goto LABEL_4;
      }
LABEL_3:
      if ((*v12 & 2) == 0) {
        goto LABEL_4;
      }
      if (v9)
      {
        if (v10) {
          prrange(v8);
        }
        uint64_t result = prinsert(v8);
        int v10 = 0;
      }
      uint64_t v19 = a5;
      BOOL v21 = (int)a5 >= 0 && v12 == a4;
      uint64_t v22 = v6;
      if (v12 != v6 && !v21)
      {
        uint64_t v23 = 1162;
        uint64_t v24 = 9184;
        while (v23 - 1161 < *(int *)(v8 + 16))
        {
          uint64_t v25 = *(void *)(v8 + 192);
          if (*(__int16 *)(v25 + v24) == -6 && **(unsigned char ***)(v25 + 8 * v23) == v12)
          {
            int v26 = *(void **)(v8 + 200);
            if (v12 != (unsigned char *)*v26 && v12 != (unsigned char *)v26[1])
            {
              OUTLINED_FUNCTION_6_50();
              __sprintf_chk(v27, v28, v29, "!%s ", v40);
              uint64_t result = OUTLINED_FUNCTION_0_74();
            }
          }
          v24 += 24;
          ++v23;
        }
      }
      if (v9) {
        uint64_t result = prrange(v8);
      }
      if (v12 == a4) {
        break;
      }
      uint64_t v18 = &v12[8 * *(_DWORD *)(*(void *)(v8 + 192) + 9084) + 8 * a2];
      int v9 = 1;
      a5 = v19;
      uint64_t v6 = v22;
    }
    if (v10) {
      uint64_t result = prrange(v8);
    }
    if ((v19 & 0x80000000) == 0)
    {
      uint64_t v30 = (char *)OUTLINED_FUNCTION_24_28();
      OUTLINED_FUNCTION_12_47(v30, v31, v32, "^_%s");
      uint64_t result = OUTLINED_FUNCTION_0_74();
      if (!v10)
      {
        int v33 = (char *)OUTLINED_FUNCTION_24_28();
        OUTLINED_FUNCTION_12_47(v33, v34, v35, "\nset ^_%s = ^_%s");
        uint64_t v36 = OUTLINED_FUNCTION_5_52();
        return vf_puts(v36, v37, v38, v39);
      }
    }
  }
  return result;
}

uint64_t prrange(uint64_t a1)
{
  size_t v1 = (char *)OUTLINED_FUNCTION_16_42(a1);
  OUTLINED_FUNCTION_12_47(v1, v2, v3, "!^_%s ] ^_%s...");
  uint64_t v4 = OUTLINED_FUNCTION_5_52();
  return vf_puts(v4, v5, v6, v7);
}

uint64_t prinsert(uint64_t a1)
{
  size_t v1 = (char *)OUTLINED_FUNCTION_16_42(a1);
  OUTLINED_FUNCTION_12_47(v1, v2, v3, "\ndelta insert [%s%s ");
  uint64_t v4 = OUTLINED_FUNCTION_5_52();
  return vf_puts(v4, v5, v6, v7);
}

uint64_t getgptr(uint64_t a1, uint64_t a2, char *__s2)
{
  uint64_t v6 = *(int *)(a1 + 16);
  uint64_t v7 = 1162;
  for (uint64_t i = 9184; ; i += 24)
  {
    if (v7 - 1161 >= v6) {
      return 0;
    }
    uint64_t v9 = *(void *)(a1 + 192);
    if (*(__int16 *)(v9 + i) == -6 && !strcmp(*(const char **)(v9 + i - 16), __s2)) {
      break;
    }
    ++v7;
  }
  **(void **)(v9 + 8 * v7) = a2;
  return 1;
}

uint64_t getlptr(uint64_t a1, uint64_t a2, char *__s2)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(a1 + 192);
  uint64_t v8 = *(void *)(*(void *)(v7 + 8112) + 8);
  uint64_t v9 = *(void *)(v7 + 8104);
  uint64_t v10 = 8 * (*(__int16 *)(v9 + 58) & ~(*(__int16 *)(v9 + 58) >> 31));
  while (1)
  {
    if (v10 == v6) {
      return 0;
    }
    uint64_t v11 = *(void *)(v9 + 16);
    if (*(__int16 *)(v11 + v5 + 16) == -6 && !strcmp(*(const char **)(v11 + v5), __s2)) {
      break;
    }
    v6 += 8;
    v5 += 24;
  }
  **(void **)(*(void *)(v8 + 16) + v6) = a2;
  return 1;
}

uint64_t OUTLINED_FUNCTION_0_74()
{
  uint64_t v2 = *(void *)(v0 + 200);
  int v3 = *(char *)(v2 + 478);
  return vf_puts(v0, v3, v2 + 408, 1);
}

uint64_t OUTLINED_FUNCTION_1_66()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_2_63(uint64_t a1, int a2, uint64_t a3)
{
  return vf_puts(v3, a2, a3, 1);
}

uint64_t OUTLINED_FUNCTION_3_59()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_56(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  return rdtokverr(v6, v7, v8, (size_t)va);
}

uint64_t OUTLINED_FUNCTION_5_52()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_50()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_49()
{
  return v0;
}

size_t OUTLINED_FUNCTION_9_49(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 - hashDelete(*((void **)this + 513), 1, 1) = a2;
  uint64_t v4 = *(FILE **)(*(void *)(a1 + 200) + 480);
  return fwrite((const void *)(v2 - 1), 1uLL, 1uLL, v4);
}

size_t OUTLINED_FUNCTION_10_49(uint64_t a1)
{
  *(unsigned char *)(v1 - hashDelete(*((void **)this + 513), 1, 1) = 0;
  uint64_t v3 = *(FILE **)(*(void *)(a1 + 200) + 480);
  return fread((void *)(v1 - 1), 1uLL, 1uLL, v3);
}

uint64_t OUTLINED_FUNCTION_11_49()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_12_47(char *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  return __sprintf_chk(a1, 0, 0x46uLL, a4);
}

const char **OUTLINED_FUNCTION_13_45(uint64_t a1, uint64_t a2, char *a3)
{
  return logicalFileFindPhysical(v4, v3, a3, 1, 1);
}

uint64_t OUTLINED_FUNCTION_14_44()
{
  return v0 - 4;
}

uint64_t OUTLINED_FUNCTION_15_43()
{
  return v0 - 2;
}

uint64_t OUTLINED_FUNCTION_16_42(uint64_t a1)
{
  return *(void *)(a1 + 200) + 408;
}

uint64_t OUTLINED_FUNCTION_19_38()
{
  return vf_getc();
}

uint64_t OUTLINED_FUNCTION_20_34()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_21_33(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return readErrorReport(v8, v9, a3, v10, a5, a6, a7, a8, v11);
}

uint64_t OUTLINED_FUNCTION_24_28()
{
  return *(void *)(v0 + 200) + 408;
}

void OUTLINED_FUNCTION_27_25()
{
  *(unsigned char *)(*(void *)(v0 + 184) + 32) = 0;
  *(_DWORD *)(*(void *)(v0 + 184) + 436) = 0;
}

uint64_t vdur_ass(uint64_t *a1, unint64_t *a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v26 = a5;
  __int16 v25 = 0;
  if (vrange_2pt(a1, a2, (uint64_t)a3, a4, 0)) {
    return 1;
  }
  uint64_t v11 = vdur((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4);
  v12.n128_u64[0] = 0;
  double v13 = 0.0;
  if (v11) {
    double v13 = (double)a5 / (double)v11;
  }
  uint64_t v14 = &vstmtbl[12 * a4];
  uint64_t v16 = v14[1];
  int v15 = (uint64_t (***)(void, __n128))(v14 + 1);
  int v17 = *((_WORD *)v16 + 15) & 0xFFFE;
  double v18 = -0.5;
  if (v13 >= 0.0) {
    double v18 = 0.5;
  }
  if (v17 == 65532) {
    double v19 = v18;
  }
  else {
    double v19 = 0.0;
  }
  for (uint64_t i = (unsigned char *)*a2; i != (unsigned char *)*a3; uint64_t i = (unsigned char *)(*v24 & 0xFFFFFFFFFFFFFFFCLL))
  {
    if (i && (*i & 2) != 0)
    {
      uint64_t v24 = &i[8 * *(_DWORD *)(a1[24] + 9084) + 8 * a4];
    }
    else
    {
      int v21 = *((__int16 *)*v15 + 15);
      uint64_t v22 = (uint64_t *)(*v15[1])(i + 16, v12);
      if (v21 == -3)
      {
        uint64_t v26 = (uint64_t)(v19 + (double)*v22 * v13);
        uint64_t v23 = (unsigned __int8 *)&v26;
      }
      else
      {
        uint64_t v26 = (uint64_t)(v19 + (double)*(__int16 *)v22 * v13);
        __int16 v25 = v26;
        uint64_t v23 = (unsigned __int8 *)&v25;
      }
      vinitflds((int)a1, a4, i + 16, v23);
      uint64_t v24 = i + 8;
    }
  }
  return 0;
}

uint64_t vrange_2pt(uint64_t *a1, unint64_t *a2, uint64_t a3, unsigned __int8 a4, int a5)
{
  if (a5)
  {
    uint64_t v10 = (unsigned char *)*a2;
    if ((*(void *)(*a2 + 8 * (*(_DWORD *)(a1[24] + 9084) + *((unsigned __int8 *)a2 + 8))) & 1) == 0 || a2[2])
    {
      int v11 = vnormalize((uint64_t)a1, (uint64_t)a2);
      if (v11 == 2)
      {
        *a2 = vsplit_time(a1, *((unsigned __int8 *)a2 + 8), *a2, a2[2]);
        OUTLINED_FUNCTION_20_35();
        uint64_t v21 = *(void *)(v19 + 8 * v20);
        goto LABEL_27;
      }
      if (v11 == 4)
      {
LABEL_13:
        if (a5 == 205)
        {
          unint64_t v12 = *a2;
          double v13 = (void *)a1[25];
          uint64_t v22 = (void *)v13[1];
          if ((void *)*a2 == v22) {
            goto LABEL_21;
          }
        }
        else
        {
          if (a5 == 206)
          {
            unint64_t v12 = *a2;
            double v13 = (void *)a1[25];
LABEL_21:
            if (v12 == *v13) {
              return 1;
            }
            *(void *)a3 = v12;
            uint64_t v23 = vins_sync((uint64_t)a1, *((unsigned __int8 *)a2 + 8), *(void *)(*a2 + 8 * *((unsigned __int8 *)a2 + 8) + 24) & 0xFFFFFFFFFFFFFFFCLL, *a2);
            *a2 = v23;
            if (!v23) {
              return 1;
            }
            goto LABEL_28;
          }
          unint64_t v12 = *a2;
          uint64_t v22 = *(void **)(a1[25] + 8);
        }
        if ((void *)v12 == v22) {
          return 1;
        }
        OUTLINED_FUNCTION_20_35();
        uint64_t v21 = *(void *)(v18 + 8 * v24);
LABEL_27:
        uint64_t v25 = vins_sync((uint64_t)a1, v17, v18, v21 & 0xFFFFFFFFFFFFFFFCLL);
        *(void *)a3 = v25;
        if (v25)
        {
LABEL_28:
          uint64_t v16 = 1;
          *((unsigned char *)a2 + 24) = 1;
          *(unsigned char *)(a3 + 24) = 1;
          goto LABEL_29;
        }
        return 1;
      }
      if (v11 != 3) {
        return 1;
      }
      uint64_t v10 = (unsigned char *)*a2;
    }
    *(void *)a3 = v10;
    if ((a5 + 51) <= 1u)
    {
      *a2 = (unint64_t)lmost(*((char *)a2 + 8), (void *)*a2);
      uint64_t v10 = *(unsigned char **)a3;
    }
    if ((a5 & 0xFFFFFFFD) == 0xCD)
    {
      uint64_t v10 = rmost((uint64_t)a1, *((char *)a2 + 8), v10);
      *(void *)a3 = v10;
    }
    if ((unsigned char *)*a2 != v10) {
      goto LABEL_28;
    }
    goto LABEL_13;
  }
  long long v14 = *((_OWORD *)a2 + 1);
  v28[0] = *(_OWORD *)a2;
  v28[1] = v14;
  long long v15 = *(_OWORD *)(a3 + 16);
  v27[0] = *(_OWORD *)a3;
  v27[1] = v15;
  if (vcomp_pta((uint64_t)a1, (uint64_t)v28, (uint64_t)v27) || !*(unsigned char *)(a1[24] + 8120)) {
    return 1;
  }
  vtmark_tv((uint64_t)a1, (uint64_t)a2);
  uint64_t v16 = 1;
  vtmark_tv((uint64_t)a1, a3);
LABEL_29:
  if (vdef_proj((uint64_t)a1, *a2, a4) && vdef_proj((uint64_t)a1, *(void *)a3, a4)) {
    return 0;
  }
  return v16;
}

uint64_t vdur(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return dur2(a1, a2, a3, a4, 0);
}

uint64_t gcql(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  while (1)
  {
    OUTLINED_FUNCTION_22_31();
    if (v6) {
      break;
    }
    VLSYNC(v5, a4);
  }
  return v5;
}

uint64_t gcqr(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  while (1)
  {
    OUTLINED_FUNCTION_22_31();
    if (v7) {
      break;
    }
    VRSYNC(a1, v6, a4);
  }
  return v6;
}

uint64_t dur2(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v7 = *(void *)a2;
  unint64_t v8 = *(void *)a3;
  if (v7 == *(void *)a3) {
    return *(void *)(a3 + 16) - *(void *)(a2 + 16);
  }
  if (a5)
  {
    int v11 = (unsigned char *)v7;
  }
  else
  {
    int v13 = visleft(a1, v7, *(void *)a3);
    if (v13) {
      long long v14 = (unsigned char **)a2;
    }
    else {
      long long v14 = (unsigned char **)a3;
    }
    if (v13) {
      long long v15 = (unint64_t *)a3;
    }
    else {
      long long v15 = (unint64_t *)a2;
    }
    unint64_t v8 = *v15;
    int v11 = *v14;
    uint64_t v7 = *(void *)a2;
  }
  uint64_t v16 = *(int *)(*(void *)(a1 + 192) + 9084) + (uint64_t)a4;
  if ((*(void *)(v7 + 8 * v16) & 1) == 0)
  {
    if (!ctxt_clstr(a1, v7, a4)) {
      return -2147483647;
    }
    uint64_t v16 = *(int *)(*(void *)(a1 + 192) + 9084) + (uint64_t)a4;
  }
  if ((*(void *)(*(void *)a3 + 8 * v16) & 1) == 0 && !ctxt_clstr(a1, *(void *)a3, a4)) {
    return -2147483647;
  }
  uint64_t v17 = 0;
  int v18 = 0;
  uint64_t v19 = &vstmtbl[12 * a4];
  int v20 = v19 + 1;
  uint64_t v21 = (uint64_t (***)(uint64_t))(v19 + 2);
  while (v11 != (unsigned char *)v8 && v11)
  {
    if ((*v11 & 2) != 0)
    {
      uint64_t v23 = &v11[8 * *(_DWORD *)(*(void *)(a1 + 192) + 9084) + 8 * a4];
    }
    else
    {
      int v22 = *((__int16 *)*v20 + 15);
      if (v22 == -4)
      {
        v17 += *(__int16 *)(**v21)((uint64_t)(v11 + 16));
      }
      else if (v22 == -3)
      {
        v17 += *(void *)(**v21)((uint64_t)(v11 + 16));
      }
      uint64_t v23 = v11 + 8;
      int v18 = 1;
    }
    int v11 = (unsigned char *)(*v23 & 0xFFFFFFFFFFFFFFFCLL);
  }
  if (v8 == *(void *)a2)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) != 0) {
      v17 += *(void *)(a2 + 16);
    }
    if ((*(unsigned char *)(a3 + 24) & 2) != 0) {
      v17 -= *(void *)(a3 + 16);
    }
    uint64_t v17 = -v17;
  }
  else
  {
    if ((*(unsigned char *)(a2 + 24) & 2) != 0) {
      v17 -= *(void *)(a2 + 16);
    }
    if ((*(unsigned char *)(a3 + 24) & 2) != 0) {
      v17 += *(void *)(a3 + 16);
    }
  }
  if (v17) {
    BOOL v24 = 0;
  }
  else {
    BOOL v24 = v18 == 0;
  }
  if (v24) {
    return -2147483647;
  }
  else {
    return v17;
  }
}

uint64_t val_expr(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  return val_expr2(a1, a2, a3, a4, a5, 9, &v6);
}

uint64_t val_expr2(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, unsigned char *a7)
{
  unsigned __int8 v9 = (uint64_t *)a2;
  *a7 = 0;
  int v11 = (char **)*(char *)(a2 + 8);
  if (!a5)
  {
    if (BYTE4(vstmtbl[12 * (int)a3 + 11])) {
      a5 = (int)vstmtbl[12 * *(char *)(a2 + 8) + 11];
    }
    else {
      a5 = 0;
    }
  }
  long long v89 = 0u;
  long long v90 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  int v84 = a5;
  if (a6 == 9)
  {
    uint64_t v12 = vnormalize(a1, a2);
    uint64_t v13 = -2147483647;
    switch((int)v12)
    {
      case 1:
        return v13;
      case 2:
        unint64_t v14 = *v9;
        if (v9[2] < 0)
        {
          unint64_t v15 = *(void *)(*(void *)(v14 + 8 * (void)v11 + 24) & 0xFFFFFFFFFFFFFFFCLL) & 0xFFFFFFFFFFFFFFFCLL;
        }
        else
        {
          unint64_t v15 = *v9;
          unint64_t v14 = *(void *)((*(void *)(v14 + 8 * (*(_DWORD *)(*(void *)(a1 + 192) + 9084) + (int)v11)) & 0xFFFFFFFFFFFFFFFCLL)
                          + 8) & 0xFFFFFFFFFFFFFFFCLL;
        }
        *(void *)&long long v89 = v15;
        *(void *)&long long v87 = v14;
        uint64_t v17 = (unsigned char *)OUTLINED_FUNCTION_11_50(v12, v15);
        uint64_t v24 = a1;
        uint64_t v23 = v14;
        goto LABEL_15;
      case 3:
        uint64_t v19 = rmost(a1, (int)v11, (unsigned char *)*v9);
        int v20 = firstdefd(a1, (int)v11, v19, a3, 0);
        uint64_t v21 = lmost((int)v11, (void *)*v9);
        int v85 = 1;
        int v22 = firstdefd(a1, (int)v11, v21, a3, 1);
        uint64_t v17 = (unsigned char *)OUTLINED_FUNCTION_11_50((uint64_t)v22, (uint64_t)v22);
        int v86 = (int)v11;
        int v18 = (void *)gcqr(a1, (uint64_t)v20, a3, (int)v11);
        goto LABEL_17;
      case 4:
        uint64_t v17 = (unsigned char *)OUTLINED_FUNCTION_11_50(v12, *v9);
        uint64_t v23 = *v9;
        uint64_t v24 = a1;
LABEL_15:
        int v86 = (int)v11;
        int v18 = (void *)gcqr(v24, v23, a3, (int)v11);
        break;
      default:
        int v86 = (int)v11;
        uint64_t v17 = 0;
        int v18 = 0;
        break;
    }
    int v85 = 1;
  }
  else
  {
    int v86 = (int)v11;
    int v85 = 0;
    uint64_t v16 = *(void *)(a1 + 200);
    uint64_t v17 = *(unsigned char **)(*(void *)(v16 + 616) + 8 * (int)a3);
    int v18 = *(void **)(*(void *)(v16 + 624) + 8 * (int)a3);
  }
LABEL_17:
  uint64_t v25 = 0;
  uint64_t v26 = &vstmtbl[12 * (int)a3 + 1];
  int v27 = v17;
  uint64_t v13 = -2147483647;
  while (v27 != (unsigned char *)v18)
  {
    if (v27 && (*v27 & 2) != 0)
    {
      int v28 = v9;
      unint64_t v29 = *(void *)&v27[8 * *(_DWORD *)(*(void *)(a1 + 192) + 9084) + 8 * (int)a3] & 0xFFFFFFFFFFFFFFFCLL;
      int v30 = *(__int16 *)&(*v26)[40 * a4 + 30];
      if (v30 == -4)
      {
        uint64_t v34 = OUTLINED_FUNCTION_8_50();
        uint64_t v36 = (__int16 *)v35(v34);
        uint64_t v26 = v11;
        if (*v36 == -32767) {
          uint64_t v25 = -2147483647;
        }
        else {
          uint64_t v25 = *v36;
        }
      }
      else if (v30 == -3)
      {
        uint64_t v31 = OUTLINED_FUNCTION_8_50();
        int v33 = (uint64_t *)v32(v31);
        uint64_t v26 = v11;
        uint64_t v25 = *v33;
      }
      uint64_t v37 = v25;
      if (v13 != -2147483647)
      {
        uint64_t v37 = v13;
        if (v13 != v25) {
          return -2147483647;
        }
      }
      int v27 = (unsigned char *)(*(void *)(v29 + 8) & 0xFFFFFFFFFFFFFFFCLL);
      uint64_t v13 = v37;
      unsigned __int8 v9 = v28;
    }
  }
  if (v13 != -2147483647) {
    return v13;
  }
  *(void *)&long long v90 = 0;
  BYTE8(v90) = 1;
  *(void *)&long long v88 = 0;
  BYTE8(v88) = 1;
  if (!v17)
  {
LABEL_34:
    uint64_t v13 = -2147483647;
    if (v18) {
      goto LABEL_45;
    }
    goto LABEL_47;
  }
  while ((*v17 & 2) != 0)
  {
    uint64_t v17 = (unsigned char *)(*(void *)&v17[8 * (int)a3 + 24] & 0xFFFFFFFFFFFFFFFCLL);
    if (!v17) {
      goto LABEL_34;
    }
  }
  OUTLINED_FUNCTION_10_50();
  if ((v39 & 1) == 0) {
    unint64_t v38 = vgetsc(a1, 0, 1, v38, v86);
  }
  *(void *)&long long v89 = v38;
  OUTLINED_FUNCTION_15_44();
  uint64_t v13 = -2147483647;
  if (v40 == -4)
  {
    uint64_t v43 = OUTLINED_FUNCTION_4_57();
    v44(v43);
    uint64_t v13 = -2147483647;
    OUTLINED_FUNCTION_12_48();
    if (!v70) {
      uint64_t v13 = v45;
    }
  }
  else if (v40 == -3)
  {
    uint64_t v41 = OUTLINED_FUNCTION_4_57();
    uint64_t v13 = *(void *)v42(v41);
    if (v18) {
      goto LABEL_45;
    }
    goto LABEL_47;
  }
  if (!v18)
  {
LABEL_47:
    if (!v17) {
      return -32767;
    }
    uint64_t v46 = OUTLINED_FUNCTION_18_39();
    uint64_t v51 = durcalc(v46, v47, v48, v49, v50, v85);
    if (v51)
    {
      uint64_t v52 = v13;
      uint64_t v13 = -2147483647;
      if (v51 == -2147483647) {
        return v52;
      }
    }
    return v13;
  }
LABEL_45:
  while ((*v18 & 2) != 0)
  {
    int v18 = (void *)(v18[*(_DWORD *)(*(void *)(a1 + 192) + 9084) + (int)a3] & 0xFFFFFFFFFFFFFFFCLL);
    if (!v18) {
      goto LABEL_47;
    }
  }
  OUTLINED_FUNCTION_10_50();
  if ((v54 & 1) == 0)
  {
    OUTLINED_FUNCTION_16_43();
    unint64_t v53 = vgetsc(v55, v56, v57, v58, v59);
  }
  *(void *)&long long v87 = v53;
  OUTLINED_FUNCTION_15_44();
  if (v60 == -4)
  {
    uint64_t v64 = OUTLINED_FUNCTION_14_45();
    v65(v64);
    OUTLINED_FUNCTION_12_48();
    if (v70) {
      uint64_t v61 = -2147483647;
    }
    else {
      uint64_t v61 = v66;
    }
  }
  else if (v60 == -3)
  {
    uint64_t v62 = OUTLINED_FUNCTION_14_45();
    uint64_t v61 = *(void *)v63(v62);
  }
  uint64_t v67 = *(void *)(a1 + 200);
  if (v17)
  {
    uint64_t v68 = v13;
    uint64_t v13 = v61;
    uint64_t v69 = durcalc(a1, &v89, &v87, v86, (void *)(*(void *)(v67 + 632) + 24 * (int)a3), v85);
    BOOL v70 = v69 == -2147483647 || v69 == 0;
    if (v70)
    {
      if (v84 == -1) {
        return v68;
      }
      if (v84 == 1) {
        return v13;
      }
      if (v84) {
        return -2147483647;
      }
      return (uint64_t)((double)(v13 + v68) * 0.5);
    }
    else
    {
      uint64_t v74 = v69;
      *a7 = 1;
      uint64_t v75 = OUTLINED_FUNCTION_18_39();
      uint64_t v80 = durcalc(v75, v76, v77, v78, v79, v85);
      if (v80 == -2147483647) {
        uint64_t v81 = 0;
      }
      else {
        uint64_t v81 = v80;
      }
      return (uint64_t)((double)v68 + (double)(v13 - v68) * ((double)v81 / (double)v74));
    }
  }
  uint64_t v72 = v61;
  uint64_t v73 = durcalc(a1, v9, &v87, v86, (void *)(*(void *)(v67 + 648) + 24 * (int)a3), v85);
  if (!v73) {
    return v72;
  }
  uint64_t v13 = -2147483647;
  if (v73 == -2147483647) {
    return v72;
  }
  return v13;
}

uint64_t vnormalize(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(char *)(a2 + 8);
  char v6 = *(void (**)(unsigned char *))vstmtbl[12 * v5 + 2];
  uint64_t v7 = *(void *)(a2 + 16);
  if (v7 < 0)
  {
    uint64_t v16 = &v4[v5 + 3];
LABEL_18:
    uint64_t v15 = v7;
    uint64_t v17 = v16;
    while (v4 != **(void ***)(a1 + 200))
    {
      uint64_t v16 = (unsigned char *)(*v17 & 0xFFFFFFFFFFFFFFFCLL);
      if (!v16 || (*v16 & 2) == 0)
      {
        OUTLINED_FUNCTION_3_60();
        if (v33)
        {
          v6(v16 + 16);
          OUTLINED_FUNCTION_12_48();
          if (v33) {
            uint64_t v18 = v20;
          }
        }
        else if (v19 == -3)
        {
          uint64_t v21 = (uint64_t *)((uint64_t (*)(unsigned char *))v6)(v16 + 16);
          uint64_t v20 = -2147483647;
          uint64_t v18 = *v21;
        }
        v7 += v18;
        if (v18 != v20 && v7 < 1) {
          goto LABEL_18;
        }
        break;
      }
      uint64_t v17 = &v16[8 * v5 + 24];
      uint64_t v4 = v16;
    }
  }
  else
  {
    OUTLINED_FUNCTION_9_50();
    unsigned __int8 v9 = &v4[v8];
LABEL_3:
    uint64_t v10 = *(void **)(*(void *)(a1 + 200) + 8);
    while (v4 != v10)
    {
      int v11 = (unsigned char *)(*v9 & 0xFFFFFFFFFFFFFFFCLL);
      if (!v11 || (*v11 & 2) == 0)
      {
        OUTLINED_FUNCTION_3_60();
        if (v33)
        {
          uint64_t v13 = *(__int16 *)((uint64_t (*)(unsigned char *))v6)(v11 + 16);
          if (v13 == -32767) {
            break;
          }
        }
        else
        {
          if (v14 == -3) {
            uint64_t v13 = *(void *)((uint64_t (*)(unsigned char *))v6)(v11 + 16);
          }
          if (v13 == -2147483647) {
            break;
          }
        }
        if (v7 - v13 < 0) {
          break;
        }
        unsigned __int8 v9 = v11 + 8;
        v7 -= v13;
        goto LABEL_3;
      }
      OUTLINED_FUNCTION_9_50();
      unsigned __int8 v9 = &v11[8 * v12];
      uint64_t v4 = v11;
    }
    uint64_t v15 = v7;
  }
  char v23 = *(unsigned char *)(a2 + 24);
  if ((v23 & 4) != 0)
  {
    if ((v15 & 0x8000000000000000) == 0)
    {
      if (!v15)
      {
        uint64_t v4 = lmost(v5, v4);
        char v23 = *(unsigned char *)(a2 + 24);
      }
      goto LABEL_50;
    }
    if ((v4[v5 + 3] & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      uint64_t v26 = *(void *)(v4[v5 + 3] & 0xFFFFFFFFFFFFFFFCLL);
      if ((v26 & 2) != 0) {
        goto LABEL_50;
      }
    }
    else
    {
      uint64_t v26 = MEMORY[0];
    }
    uint64_t v4 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
LABEL_50:
    char v27 = v23 ^ 4;
    goto LABEL_51;
  }
  if ((*(unsigned char *)(a2 + 24) & 8) == 0)
  {
    int v24 = 1;
    goto LABEL_52;
  }
  if (v15 < 1)
  {
    if ((v15 & 0x8000000000000000) == 0)
    {
      uint64_t v4 = rmost(a1, v5, v4);
      char v23 = *(unsigned char *)(a2 + 24);
    }
  }
  else
  {
    unint64_t v25 = v4[*(_DWORD *)(*(void *)(a1 + 192) + 9084) + (int)v5] & 0xFFFFFFFFFFFFFFFCLL;
    if (!v25 || (*(unsigned char *)v25 & 2) == 0) {
      uint64_t v4 = (void *)(*(void *)(v25 + 8) & 0xFFFFFFFFFFFFFFFCLL);
    }
  }
  char v27 = v23 ^ 8;
LABEL_51:
  uint64_t v15 = 0;
  int v24 = 0;
  *(unsigned char *)(a2 + 24) = v27;
LABEL_52:
  *(void *)a2 = v4;
  *(void *)(a2 + 16) = v15;
  int v28 = *(void **)(a1 + 200);
  if (v4 == (void *)*v28 && v15 < 0) {
    return 1;
  }
  if (v4 == (void *)v28[1] && v15 > 0) {
    return 1;
  }
  if (v15) {
    return 2;
  }
  if (!v24) {
    return 4;
  }
  OUTLINED_FUNCTION_3_60();
  if (!v33)
  {
    BOOL v33 = v32 != -3 || v31 == 0;
    if (!v33 && ((*v31 & 2) != 0 || !*(void *)((uint64_t (*)(unsigned char *))v6)(v31 + 16))) {
      return 3;
    }
    return 4;
  }
  if (!v31 || (*v31 & 2) == 0 && *(_WORD *)((uint64_t (*)(unsigned char *))v6)(v31 + 16)) {
    return 4;
  }
  return 3;
}

unsigned char *firstdefd(uint64_t a1, int a2, unsigned char *a3, int a4, int a5)
{
  uint64_t v10 = &vstmtbl[12 * a2];
  int v11 = *(uint64_t (**)(unsigned char *))v10[2];
  int v12 = *((unsigned __int8 *)v10 + 86);
  uint64_t v13 = a2 + 3;
  int v14 = a3;
  if (a3) {
    goto LABEL_2;
  }
  while (1)
  {
LABEL_3:
    OUTLINED_FUNCTION_3_60();
    if (v17)
    {
      char v15 = 0;
      if (v14 && v12)
      {
        BOOL v17 = *(unsigned __int16 *)v11(v14 + 16) == 0;
LABEL_15:
        char v15 = v17;
      }
    }
    else if (v16 == -3)
    {
      char v15 = 0;
      if (v14)
      {
        if (v12)
        {
          BOOL v17 = *(void *)v11(v14 + 16) == 0;
          goto LABEL_15;
        }
      }
    }
    if (!v15) {
      return a3;
    }
    if (a5) {
      uint64_t v20 = v14 + 8;
    }
    else {
      uint64_t v20 = v14;
    }
    while (1)
    {
      int v14 = (unsigned char *)(*v20 & 0xFFFFFFFFFFFFFFFCLL);
      if (!v14) {
        break;
      }
LABEL_2:
      if ((*v14 & 2) == 0) {
        goto LABEL_3;
      }
      int v18 = *(_DWORD *)(*(void *)(a1 + 192) + 9084);
      if (*(void *)&v14[8 * v18 + 8 * a4]) {
        return v14;
      }
      uint64_t v19 = v18 + a2;
      if (!a5) {
        uint64_t v19 = v13;
      }
      uint64_t v20 = &v14[8 * v19];
    }
  }
}

unsigned char *rmost(uint64_t a1, int a2, unsigned char *a3)
{
  int v3 = a3;
  uint64_t v4 = &vstmtbl[12 * a2];
  uint64_t v5 = *(uint64_t (**)(unsigned char *))v4[2];
  int v6 = *((unsigned __int8 *)v4 + 86);
  for (uint64_t i = &a3[8 * *(_DWORD *)(*(void *)(a1 + 192) + 9084) + 8 * a2]; ; uint64_t i = v8 + 8)
  {
    while (1)
    {
      int v8 = (unsigned char *)(*i & 0xFFFFFFFFFFFFFFFCLL);
      if (!v8 || (*v8 & 2) == 0) {
        break;
      }
      OUTLINED_FUNCTION_9_50();
      uint64_t i = &v8[8 * v12];
      int v3 = v8;
    }
    OUTLINED_FUNCTION_3_60();
    if (v11)
    {
      char v9 = 0;
      if (v8 && v6)
      {
        BOOL v11 = *(unsigned __int16 *)v5(v8 + 16) == 0;
LABEL_12:
        char v9 = v11;
      }
    }
    else if (v10 == -3)
    {
      char v9 = 0;
      if (v8)
      {
        if (v6)
        {
          BOOL v11 = *(void *)v5(v8 + 16) == 0;
          goto LABEL_12;
        }
      }
    }
    if (!v9) {
      break;
    }
  }
  return v3;
}

void *lmost(int a1, void *a2)
{
  int v3 = &vstmtbl[12 * a1];
  uint64_t v4 = *(uint64_t (**)(void *))v3[2];
  int v5 = *((unsigned __int8 *)v3 + 86);
  uint64_t v6 = a1 + 3;
LABEL_2:
  uint64_t v7 = &a2[v6];
  do
  {
    uint64_t v7 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
    if (v7 && (*(unsigned char *)v7 & 2) != 0)
    {
      a2 = v7;
      goto LABEL_2;
    }
    OUTLINED_FUNCTION_3_60();
    if (v10)
    {
      char v8 = 0;
      if (v7 && v5)
      {
        BOOL v10 = *(unsigned __int16 *)v4(v7 + 2) == 0;
LABEL_13:
        char v8 = v10;
      }
    }
    else if (v9 == -3)
    {
      char v8 = 0;
      if (v7)
      {
        if (v5)
        {
          BOOL v10 = *(void *)v4(v7 + 2) == 0;
          goto LABEL_13;
        }
      }
    }
  }
  while (v8);
  return a2;
}

uint64_t durcalc(uint64_t a1, void *a2, void *a3, int a4, void *a5, int a6)
{
  if (a6)
  {
    return dur2(a1, (uint64_t)a2, (uint64_t)a3, a4, 0);
  }
  else
  {
    void v16[2] = 0;
    _OWORD v15[2] = 0;
    v15[3] = 1;
    v16[3] = 1;
    uint64_t v12 = a5[1];
    v16[0] = *a5;
    v16[1] = 0;
    v15[0] = v12;
    v15[1] = 0;
    uint64_t v13 = a5[2];
    uint64_t v14 = dur2(a1, (uint64_t)v15, (uint64_t)a3, a4, 1) + v13;
    uint64_t result = v14 - dur2(a1, (uint64_t)v16, (uint64_t)a2, a4, 1);
    a5[2] = result - a3[2] + a2[2];
    *a5 = *a2;
    a5[1] = *a3;
  }
  return result;
}

uint64_t vgen(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t result = 0;
  uint64_t v130 = *MEMORY[0x263EF8340];
  v129[0] = 0;
  if ((~*(unsigned __int8 *)(a4 + 24) & 7) != 0) {
    return result;
  }
  uint64_t v10 = a2;
  int v11 = *(char *)(a4 + 8);
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(a4 + 8);
  *(unsigned char *)(a2 + 24) = 2;
  *(void *)(a2 + 16) = 0;
  uint64_t result = (uint64_t)dynaBufNew(40);
  uint64_t v128 = (void **)result;
  if (!result) {
    return result;
  }
  uint64_t v12 = *(void *)(a1 + 200);
  if (!*(void *)(v12 + 616))
  {
    *(void *)(*(void *)(a1 + 200) + 616) = OUTLINED_FUNCTION_5_53();
    *(void *)(*(void *)(a1 + 200) + 624) = OUTLINED_FUNCTION_5_53();
    *(void *)(*(void *)(a1 + 200) + 640) = OUTLINED_FUNCTION_0_75();
    *(void *)(*(void *)(a1 + 200) + 632) = OUTLINED_FUNCTION_0_75();
    int v40 = OUTLINED_FUNCTION_0_75();
    uint64_t v12 = *(void *)(a1 + 200);
    *(void *)(v12 + 648) = v40;
    uint64_t v41 = *(void **)(v12 + 616);
    if (!v41 || !*(void *)(v12 + 624) || !*(void *)(v12 + 640) || !v40)
    {
      free(v41);
      free(*(void **)(*(void *)(a1 + 200) + 624));
      free(*(void **)(*(void *)(a1 + 200) + 640));
      free(*(void **)(*(void *)(a1 + 200) + 632));
      uint64_t v42 = *(void **)(*(void *)(a1 + 200) + 648);
      goto LABEL_35;
    }
  }
  char v13 = 0;
  int v14 = *(unsigned __int8 *)(a1 + 288);
  while (v14 > v13)
  {
    *(void *)(*(void *)(v12 + 624) + 8 * v13) = 0;
    *(void *)(*(void *)(*(void *)(a1 + 200) + 616) + 8 * v13) = 0;
    uint64_t v12 = *(void *)(a1 + 200);
    float64x2_t v15 = vld1q_dup_f64((const double *)v12);
    uint64_t v16 = *(void *)(v12 + 648) + 24 * v13;
    *(float64x2_t *)uint64_t v16 = v15;
    uint64_t v17 = *(void *)(v12 + 632) + 24 * v13;
    *(float64x2_t *)uint64_t v17 = v15;
    uint64_t v18 = *(void *)(v12 + 640) + 24 * v13;
    *(float64x2_t *)uint64_t v18 = v15;
    *(void *)(v16 + 16) = 0;
    *(void *)(v17 + 16) = 0;
    *(void *)(v18 + 16) = 0;
    ++v13;
  }
  uint64_t v125 = a3;
  char v121 = a5;
  uint64_t v19 = (char *)dynaBufContents(*(void *)(a4 + 16));
  int v20 = 0;
  char v21 = 0;
  char v23 = (unsigned __int8 *)(v19 + 1);
  int v22 = *v19;
  uint64_t v127 = (uint64_t *)v10;
  int v123 = v22;
  while (v22 > v21)
  {
    unsigned int v24 = *v23;
    uint64_t v25 = (char)v24;
    OUTLINED_FUNCTION_16_43();
    int v30 = (unsigned char *)vgetsc(v26, v27, v28, v29, v24);
    if (v30)
    {
      do
      {
        uint64_t v31 = (uint64_t)v30;
        int v30 = (unsigned char *)(*(void *)&v30[8 * (char)v24 + 24] & 0xFFFFFFFFFFFFFFFCLL);
      }
      while (v30 && (*v30 & 2) != 0);
    }
    else
    {
      uint64_t v31 = 0;
    }
    uint64_t v32 = (char)v24;
    BOOL v33 = (unsigned char *)vgetsc(a1, 0, 1, *v125, v32);
    if (v33)
    {
      do
      {
        uint64_t v34 = v33;
        BOOL v33 = (unsigned char *)(*(void *)&v33[8 * *(_DWORD *)(*(void *)(a1 + 192) + 9084) + 8 * (int)v32] & 0xFFFFFFFFFFFFFFFCLL);
      }
      while (v33 && (*v33 & 2) != 0);
      if (v31)
      {
LABEL_20:
        while ((*(void *)(v31 + 8 * (*(_DWORD *)(*(void *)(a1 + 192) + 9084) + v11)) & 1) != 0)
        {
          unint64_t v35 = VRSYNC(a1, v31, v25);
          if (v35)
          {
            uint64_t v31 = v35;
            if ((unsigned char *)v35 != v34) {
              continue;
            }
          }
          goto LABEL_23;
        }
        goto LABEL_85;
      }
    }
    else
    {
      uint64_t v34 = 0;
      if (v31) {
        goto LABEL_20;
      }
    }
LABEL_23:
    uint64_t v10 = (uint64_t)v127;
    *(void *)(*(void *)(*(void *)(a1 + 200) + 616) + 8 * (int)v32) = gcql(a1, *v127, v32, v11);
    uint64_t v36 = gcqr(a1, *v127, v25, v11);
    unsigned int v37 = 0;
    *(void *)(*(void *)(*(void *)(a1 + 200) + 624) + 8 * (int)v32) = v36;
    uint64_t v38 = v23[1];
    while (v37 < v38)
    {
      if (*(unsigned __int8 *)(a4 + 9) == v20) {
        int v39 = v20 + 1;
      }
      else {
        int v39 = v20;
      }
      int v20 = v39 + 1;
      ++v37;
    }
    v23 += v38 + 2;
    ++v21;
    int v22 = v123;
  }
  uint64_t v124 = malloc_type_malloc(8 * v20 * (unint64_t)*(unsigned __int8 *)(a1 + 288), 0xAD43788BuLL);
  if (!v124)
  {
LABEL_85:
    dynaBufDelete(v128);
    return 0;
  }
  uint64_t v119 = 0;
  uint64_t v120 = 0;
  char v43 = 0;
  int v44 = 1;
  HIDWORD(v113) = v121;
  uint64_t v126 = vdur(a1, v10, (uint64_t)v125, *(char *)(a4 + 8));
  uint64_t v45 = v126;
LABEL_38:
  if (v45 < 1)
  {
LABEL_88:
    dynaBufDelete(v128);
    free(v124);
    return 1;
  }
  uint64_t v46 = *v127;
  if (v120 == 3 && (v43 & 1) != 0) {
    uint64_t v46 = (uint64_t)lmost(v11, (void *)*v127);
  }
  unsigned int v47 = vnormalize(a1, (uint64_t)v127);
  uint64_t v120 = v47;
  uint64_t v118 = v46;
  if ((unint64_t)v47 - 3 < 2)
  {
    BOOL v48 = 1;
LABEL_45:
    LODWORD(v115) = v48;
    uint64_t v49 = *(void *)a4;
    if (v45 < *(void *)a4) {
      uint64_t v49 = v45;
    }
    uint64_t v119 = v49;
    uint64_t v128 = (void **)dynaBufReset((uint64_t)v128);
    uint64_t v50 = (char *)dynaBufContents(*(void *)(a4 + 16));
    int v51 = 0;
    int v52 = 0;
    char v54 = (unsigned __int8 *)(v50 + 1);
    int v53 = *v50;
    LODWORD(v117) = v44 | (v120 != 2);
    uint64_t v122 = v45;
    HIDWORD(v115) = v53;
    while (1)
    {
      if (v53 <= (char)v52)
      {
LABEL_81:
        if (checkInterrupt(a1)) {
          goto LABEL_88;
        }
        if (*(unsigned __int8 *)(a4 + 9) == v51)
        {
          uint64_t v96 = (char *)OUTLINED_FUNCTION_6_51();
          uint64_t v99 = __sprintf_chk(v96, v97, v98, "%d ", v119);
          OUTLINED_FUNCTION_13_46(v99, v100, v101, v102, v103, v104, v105, v106, v112, v113, v114, v115, v116, v117, v118, v119, v120, v122, (uint64_t)v124,
            v126,
            (uint64_t)v127,
            (uint64_t *)v128);
        }
        dynaBufAddChar((uint64_t *)v128, 10, 0);
        dynaBufAddChar((uint64_t *)v128, 0, 0);
        uint64_t v107 = dynaBufContents((uint64_t)v128);
        char v43 = 1;
        vf_puts(a1, SHIDWORD(v113), v107, 1);
        int v44 = 0;
        *((unsigned char *)v127 + 24) = 2;
        uint64_t v108 = *(void *)a4;
        v127[2] += *(void *)a4;
        uint64_t v45 = v122 - v108;
        goto LABEL_38;
      }
      HIDWORD(v117) = v52;
      uint64_t v55 = (char)*v54;
      uint64_t v56 = *(void *)(a1 + 200);
      uint64_t v57 = *(void *)(*(void *)(v56 + 616) + 8 * v55);
      unsigned int v58 = v54[1];
      uint64_t v116 = *(void *)(*(void *)(v56 + 624) + 8 * v55);
      unsigned int v59 = (void *)*v127;
      if (v120 != 2)
      {
        if (v120 != 4)
        {
          if (v120 != 3) {
            goto LABEL_89;
          }
          firstdefd(a1, v11, (unsigned char *)*v127, *v54, 0);
          uint64_t v114 = v57;
          int v60 = lmost(v11, v59);
          unsigned int v59 = firstdefd(a1, v11, v60, v55, 1);
        }
        OUTLINED_FUNCTION_17_41();
        if (v62) {
          break;
        }
      }
      if (v115)
      {
        while (1)
        {
          OUTLINED_FUNCTION_17_41();
          if (v63) {
            break;
          }
          if (v59 == (void *)v118) {
            goto LABEL_61;
          }
          unsigned int v59 = VLSYNC((uint64_t)v59, v11);
        }
        *(void *)(*(void *)(*(void *)(a1 + 200) + 616) + 8 * v55) = v59;
        unsigned int v59 = (void *)VRSYNC(a1, (uint64_t)v59, v55);
        uint64_t v64 = (void *)(*(void *)(a1 + 200) + 624);
        goto LABEL_60;
      }
LABEL_61:
      BOOL v66 = (v117 & 1) == 0
         && (uint64_t v65 = *(void *)(a1 + 200), v57 == *(void *)(*(void *)(v65 + 616) + 8 * v55))
         && v116 == *(void *)(*(void *)(v65 + 624) + 8 * v55);
      unsigned int v67 = 0;
      v54 += 2;
      do
      {
        if (v67 >= v58) {
          break;
        }
        if (*(unsigned __int8 *)(a4 + 9) == v51)
        {
          uint64_t v68 = (char *)OUTLINED_FUNCTION_6_51();
          uint64_t v71 = __sprintf_chk(v68, v69, v70, "%d ", v119);
          OUTLINED_FUNCTION_13_46(v71, v72, v73, v74, v75, v76, v77, v78, v109, v113, v114, v115, v116, v117, v118, v119, v120, v122, (uint64_t)v124,
            v126,
            (uint64_t)v127,
            (uint64_t *)v128);
          ++v51;
        }
        if (v45 == v126) {
          int v79 = (int)vstmtbl[12 * *(unsigned __int8 *)(a4 + 8) + 11];
        }
        else {
          int v79 = 0;
        }
        int v81 = *v54++;
        int v80 = v81;
        if (!v66 || (uint64_t v82 = *((void *)v124 + v51), v82 == 0x8000000000000000))
        {
          LODWORD(v82) = val_expr2(a1, (uint64_t)v127, v55, v80, v79, v120, v129);
          unint64_t v83 = 0x8000000000000000;
          if (!v129[0]) {
            unint64_t v83 = (int)v82;
          }
          *((void *)v124 + v5hashDelete(*((void **)this + 513), 1, 1) = v83;
        }
        if (v82 == -2147483647) {
          goto LABEL_89;
        }
        int v110 = v82;
        int v84 = (char *)OUTLINED_FUNCTION_6_51();
        uint64_t v87 = __sprintf_chk(v84, v85, v86, "%d ", v110);
        OUTLINED_FUNCTION_13_46(v87, v88, v89, v90, v91, v92, v93, v94, v111, v113, v114, v115, v116, v117, v118, v119, v120, v122, (uint64_t)v124,
          v126,
          (uint64_t)v127,
          (uint64_t *)v128);
        ++v51;
        ++v67;
        uint64_t v45 = v122;
      }
      while (!checkInterrupt(a1));
      int v95 = checkInterrupt(a1);
      int v52 = HIDWORD(v117) + 1;
      int v53 = HIDWORD(v115);
      if (v95) {
        goto LABEL_81;
      }
    }
    *(void *)(*(void *)(*(void *)(a1 + 200) + 624) + 8 * v55) = v61;
    uint64_t v64 = (void *)(*(void *)(a1 + 200) + 616);
LABEL_60:
    *(void *)(*v64 + 8 * v55) = v59;
    goto LABEL_61;
  }
  if (v47 == 2)
  {
    BOOL v48 = v127[2] <= v119;
    goto LABEL_45;
  }
LABEL_89:
  dynaBufDelete(v128);
  uint64_t v42 = v124;
LABEL_35:
  free(v42);
  return 0;
}

unint64_t visleft(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 == a3) {
    return 0;
  }
  unint64_t result = 0;
  if (a2)
  {
    unint64_t v6 = a3;
    if (a3)
    {
      if (!*(_DWORD *)(*(void *)(a1 + 192) + 8868) || NONSEQ(a2) || NONSEQ(v6))
      {
        char v7 = 0;
        LOBYTE(v8) = *(unsigned char *)(a1 + 288);
        while (1)
        {
          unsigned __int8 v9 = v8 - 1;
          if ((((_BYTE)v8 - 1) & 0x80) != 0)
          {
            OUTLINED_FUNCTION_16_43();
            unint64_t result = vgetsc(v11, v12, v13, v6, v14);
            LOBYTE(v8) = v7;
            goto LABEL_15;
          }
          int v8 = (char)v9;
          int v10 = *(_DWORD *)(*(void *)(a1 + 192) + 9084) + v9;
          if (*(void *)(a2 + 8 * v10))
          {
            char v7 = v8;
            if (*(void *)(v6 + 8 * v10)) {
              break;
            }
          }
        }
        unint64_t result = (unint64_t)VLSYNC(v6, v8);
        if (!result) {
          return result;
        }
LABEL_15:
        uint64_t v15 = (char)v8 + 3;
        while (1)
        {
          if (result == a2) {
            return 1;
          }
          uint64_t v16 = (void *)(*(void *)(result + 8 * v15) & 0xFFFFFFFFFFFFFFFCLL);
          if (!v16) {
            break;
          }
          if ((*v16 & 2) != 0) {
            unint64_t result = *(void *)(result + 8 * v15) & 0xFFFFFFFFFFFFFFFCLL;
          }
          else {
            unint64_t result = *v16 & 0xFFFFFFFFFFFFFFFCLL;
          }
        }
        return 0;
      }
      else
      {
        uint64_t v17 = *(void *)(a1 + 200);
        if (*(_DWORD *)(v17 + 656) == spine_changed)
        {
          uint64_t v18 = 0;
          for (uint64_t i = (void *)(v17 + 664); ; ++i)
          {
            if (v18 == 50)
            {
              int v23 = *(_DWORD *)(v17 + 660);
              if (v23 <= 48) {
                int v24 = v23 + 1;
              }
              else {
                int v24 = 0;
              }
              *(_DWORD *)(v17 + 660) = v24;
              int v21 = v24;
              while (*(int *)(v17 + 4 * v21 + 1516) >= 13)
              {
                if (v21 <= 48) {
                  ++v21;
                }
                else {
                  int v21 = 0;
                }
                if (v21 == v24)
                {
                  uint64_t v25 = v24;
                  int v21 = v24;
LABEL_45:
                  *(_DWORD *)(v17 + 660) = v21;
                  *(void *)(v17 + 8 * v25 + 664) = a2;
                  *(void *)(*(void *)(a1 + 200) + 8 * v25 + 1064) = v6;
                  int v22 = *(_DWORD **)(a1 + 200);
                  v22[v25 + 379] = 1;
                  goto LABEL_46;
                }
              }
              uint64_t v25 = v21;
              goto LABEL_45;
            }
            if (*i == a2 && i[50] == v6) {
              break;
            }
            ++v18;
          }
          uint64_t v26 = v17 + 1064;
          ++*(_DWORD *)(v26 + 4 * v18 + 452);
          return *(unsigned __int8 *)(v26 + v18 + 400);
        }
        else
        {
          for (uint64_t j = 0; j != 50; ++j)
          {
            *(void *)(v17 + 8 * j + 664) = 0;
            *(void *)(*(void *)(a1 + 200) + 8 * j + 1064) = 0;
            uint64_t v17 = *(void *)(a1 + 200);
            *(_DWORD *)(v17 + 4 * j + 1516) = 0;
          }
          int v21 = 0;
          *(void *)(v17 + 664) = a2;
          *(void *)(*(void *)(a1 + 200) + 1064) = v6;
          int v22 = *(_DWORD **)(a1 + 200);
          v22[379] = 1;
          v22[165] = 0;
          v22[164] = spine_changed;
LABEL_46:
          while (1)
          {
            unint64_t v6 = *(void *)(v6 + 8) & 0xFFFFFFFFFFFFFFFCLL;
            if (!v6) {
              break;
            }
            if (v6 == a2)
            {
              unint64_t result = 1;
              *((unsigned char *)v22 + v21 + 1464) = 1;
              return result;
            }
          }
          unint64_t result = 0;
          *((unsigned char *)v22 + v21 + 1464) = 0;
        }
      }
    }
  }
  return result;
}

unint64_t visright(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return visleft(a1, a3, a2);
}

uint64_t vsync_tv(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 24) & 1) == 0)
  {
    if (vnormalize(a1, a2) == 2) {
      *(void *)a2 = OUTLINED_FUNCTION_23_30();
    }
    OUTLINED_FUNCTION_2_64();
  }
  return 1;
}

uint64_t vtmark_tv(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 24) & 1) == 0)
  {
    int v5 = OUTLINED_FUNCTION_1_67(a1, a2);
    if (v5 == 2)
    {
      uint64_t v7 = OUTLINED_FUNCTION_23_30();
    }
    else
    {
      if (v5 != 3)
      {
LABEL_9:
        OUTLINED_FUNCTION_2_64();
        return 1;
      }
      char v6 = *((unsigned char *)v2 + 8);
      if (v4) {
        uint64_t v7 = (uint64_t)lmost(v6, (void *)*v2);
      }
      else {
        uint64_t v7 = (uint64_t)rmost(v3, v6, (unsigned char *)*v2);
      }
    }
    *uint64_t v2 = v7;
    goto LABEL_9;
  }
  return 1;
}

uint64_t vtimept_tv(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 24) & 1) == 0)
  {
    int v5 = OUTLINED_FUNCTION_1_67(a1, a2);
    if (v5 != 2)
    {
      if (v5 != 4)
      {
        if (v5 != 3) {
          return 0;
        }
        char v6 = *((unsigned char *)v2 + 8);
        if (v4) {
          uint64_t v7 = lmost(v6, *v2);
        }
        else {
          uint64_t v7 = rmost(v3, v6, *v2);
        }
        *uint64_t v2 = v7;
      }
      OUTLINED_FUNCTION_2_64();
    }
  }
  return 1;
}

BOOL vctxt_tv(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24)) {
    return 1;
  }
  int v2 = vnormalize(a1, a2);
  if ((v2 - 3) < 2)
  {
    OUTLINED_FUNCTION_2_64();
    return 1;
  }
  return v2 == 2;
}

uint64_t vmove_tv(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 24) & 1) == 0)
  {
    vnormalize(a1, a2);
    OUTLINED_FUNCTION_2_64();
  }
  return 1;
}

void vtsttmark_tv(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 24) & 1) == 0)
  {
    int v5 = OUTLINED_FUNCTION_1_67(a1, a2);
    if ((v5 - 1) >= 2)
    {
      if (v5 == 3)
      {
        char v6 = *((unsigned char *)v2 + 8);
        if (v4) {
          uint64_t v7 = lmost(v6, *v2);
        }
        else {
          uint64_t v7 = rmost(v3, v6, *v2);
        }
        *int v2 = v7;
      }
      OUTLINED_FUNCTION_2_64();
    }
  }
}

void vtstctx_tv(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24)) {
    return;
  }
  int v4 = OUTLINED_FUNCTION_1_67(a1, a2);
  if (v4 == 2)
  {
    uint64_t v5 = v2[2];
    if (v3 == 1 && v5 >= 1)
    {
      OUTLINED_FUNCTION_19_39();
      if (v12)
      {
        uint64_t v16 = *(void *)v13(v14 + 16);
        uint64_t v17 = -2147483647;
      }
      else
      {
        if (v15 != -4)
        {
          uint64_t v16 = 0;
LABEL_25:
          v2[2] -= v16;
LABEL_26:
          uint64_t v18 = *(void *)(*v2 + 8);
LABEL_33:
          *int v2 = v18 & 0xFFFFFFFFFFFFFFFCLL;
          return;
        }
        uint64_t v16 = *(__int16 *)v13(v14 + 16);
        uint64_t v17 = -32767;
      }
      if (v16 == v17) {
        goto LABEL_26;
      }
      goto LABEL_25;
    }
    if (v3 || (v5 & 0x8000000000000000) == 0) {
      return;
    }
    OUTLINED_FUNCTION_19_39();
    if (v12)
    {
      uint64_t v10 = *(void *)v7(v8 + 16);
      uint64_t v11 = -2147483647;
    }
    else
    {
      if (v9 != -4)
      {
        uint64_t v10 = 0;
LABEL_31:
        v2[2] += v10;
LABEL_32:
        uint64_t v18 = *(void *)*v2;
        goto LABEL_33;
      }
      uint64_t v10 = *(__int16 *)v7(v8 + 16);
      uint64_t v11 = -32767;
    }
    if (v10 == v11) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v4 == 4 || v4 == 3) {
    OUTLINED_FUNCTION_2_64();
  }
}

uint64_t vcomp_pta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = (unsigned char **)a3;
  if (*(unsigned char *)(a2 + 24) & 1) != 0 && (*(unsigned char *)(a3 + 24))
  {
    BOOL v15 = *(void *)a2 == *(void *)a3;
LABEL_24:
    char v14 = !v15;
  }
  else
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0)
    {
      char v6 = (unint64_t *)a2;
LABEL_7:
      unint64_t v7 = *v6;
      switch(vnormalize(a1, (uint64_t)v3))
      {
        case 1u:
        case 2u:
          goto LABEL_20;
        case 3u:
          uint64_t v8 = lmost(*((char *)v3 + 8), *v3);
          int v9 = rmost(a1, *((char *)v3 + 8), *v3);
          uint64_t v10 = a1 + 192;
          uint64_t v11 = *((unsigned __int8 *)v3 + 8);
          uint64_t v12 = *(void *)(v7 + 8 * (*(_DWORD *)(*(void *)(a1 + 192) + 9084) + (int)v11));
          unint64_t v13 = v7;
          if ((v12 & 1) == 0)
          {
            unint64_t v7 = *(void *)(v7 + 8 * v11 + 24) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFFCLL;
          }
          if ((void *)v7 != v8 && !visleft(a1, (uint64_t)v8, v7)
            || (unsigned char *)v13 != v9 && !visleft(a1, v13, (unint64_t)v9))
          {
            goto LABEL_21;
          }
          char v14 = 0;
          goto LABEL_28;
        case 4u:
          BOOL v15 = *v3 == (unsigned char *)v7;
          goto LABEL_24;
        default:
          return 1;
      }
    }
    if ((*(unsigned char *)(a3 + 24) & 2) == 0)
    {
      char v6 = (unint64_t *)a3;
      int v3 = (unsigned char **)a2;
      goto LABEL_7;
    }
    vnormalize(a1, a2);
    vnormalize(a1, (uint64_t)v3);
    if (*(unsigned __int8 *)(a2 + 8) != *((unsigned __int8 *)v3 + 8)
      || *(unsigned char **)a2 != *v3
      || *(unsigned char **)(a2 + 16) != v3[2])
    {
LABEL_20:
      uint64_t v10 = a1 + 192;
LABEL_21:
      char v14 = 1;
      goto LABEL_28;
    }
    char v14 = 0;
  }
  uint64_t v10 = a1 + 192;
LABEL_28:
  uint64_t result = 0;
  *(unsigned char *)(*(void *)v10 + 8120) = v14;
  return result;
}

uint64_t vrange_l()
{
  OUTLINED_FUNCTION_7_51();
  vtmark_tv(v5, v6);
  uint64_t result = vdef_proj(v1, *v2, v4);
  if (result)
  {
    if (*v2 == **(void **)(v1 + 200))
    {
      return 0;
    }
    else
    {
      uint64_t result = vins_sync(v1, v4, *(void *)(*v2 + 8 * v4 + 24) & 0xFFFFFFFFFFFFFFFCLL, *v2);
      *(void *)uint64_t v0 = result;
      if (result)
      {
        if (v3) {
          dupsync(v1, result, (unsigned char *)*v2, 1);
        }
        uint64_t result = 1;
        *(unsigned char *)(v0 + 24) = 1;
      }
    }
  }
  return result;
}

void dupsync(uint64_t a1, uint64_t a2, unsigned char *a3, int a4)
{
  unint64_t v7 = 0;
  if (a4)
  {
    while (v7 < *(unsigned __int8 *)(a1 + 288))
    {
      OUTLINED_FUNCTION_21_34();
      if ((v8 & 1) != 0
        && !vproject(a1, a2, *(void *)&a3[8 * v7 + 24] & 0xFFFFFFFFFFFFFFFCLL, a3, v7))
      {
        break;
      }
      ++v7;
    }
  }
  else
  {
    while (v7 < *(unsigned __int8 *)(a1 + 288))
    {
      OUTLINED_FUNCTION_21_34();
      if ((v9 & 1) != 0
        && !vproject(a1, a2, (unint64_t)a3, (unsigned char *)(v9 & 0xFFFFFFFFFFFFFFFCLL), v7))
      {
        break;
      }
      LODWORD(v7) = v7 + 1;
    }
  }
}

uint64_t vrange_r()
{
  OUTLINED_FUNCTION_7_51();
  vtmark_tv(v5, v6);
  uint64_t result = vdef_proj(v1, *v2, v4);
  if (result)
  {
    if (*v2 == *(void *)(*(void *)(v1 + 200) + 8))
    {
      return 0;
    }
    else
    {
      uint64_t result = vins_sync(v1, v4, *v2, *(void *)(*v2 + 8 * (*(_DWORD *)(*(void *)(v1 + 192) + 9084) + v4)) & 0xFFFFFFFFFFFFFFFCLL);
      *(void *)uint64_t v0 = result;
      if (result)
      {
        if (v3) {
          dupsync(v1, result, (unsigned char *)*v2, 0);
        }
        uint64_t result = 1;
        *(unsigned char *)(v0 + 24) = 1;
      }
    }
  }
  return result;
}

uint64_t vprt_range(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = vtimept_tv(a1, a2);
  if (result)
  {
    uint64_t result = vtimept_tv(a1, a3);
    if (result)
    {
      if ((*(unsigned char *)(a2 + 24) & 2) != 0 && *(uint64_t *)(a2 + 16) >= 1) {
        *(void *)a2 = VRSYNC(a1, *(void *)a2, *(char *)(a2 + 8));
      }
      if ((*(unsigned char *)(a3 + 24) & 2) != 0 && (*(void *)(a3 + 16) & 0x8000000000000000) != 0) {
        *(void *)a3 = VLSYNC(*(void *)a3, *(char *)(a3 + 8));
      }
      return 1;
    }
  }
  return result;
}

uint64_t ctxt_clstr(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = &vstmtbl[12 * a3];
  unint64_t v7 = *(uint64_t (**)(unsigned char *))v6[2];
  unsigned int v8 = a3;
  OUTLINED_FUNCTION_16_43();
  uint64_t v12 = (unsigned char *)vgetsc(v9, v10, v11, a2, v8);
  unint64_t v13 = vgetsc(a1, 0, 1, a2, v8);
  while (1)
  {
    if (v12 == (unsigned char *)v13) {
      return 1;
    }
    if (v12 && (*v12 & 2) != 0)
    {
      BOOL v15 = &v12[8 * *(_DWORD *)(*(void *)(a1 + 192) + 9084) + 8 * a3];
      goto LABEL_12;
    }
    int v14 = *((__int16 *)v6[1] + 15);
    if (v14 == -4)
    {
      if (*(_WORD *)v7(v12 + 16)) {
        return 0;
      }
      goto LABEL_11;
    }
    if (v14 == -3 && *(void *)v7(v12 + 16)) {
      return 0;
    }
LABEL_11:
    BOOL v15 = v12 + 8;
LABEL_12:
    uint64_t v12 = (unsigned char *)(*v15 & 0xFFFFFFFFFFFFFFFCLL);
  }
}

void *OUTLINED_FUNCTION_0_75()
{
  size_t v2 = 24 * *(unsigned __int8 *)(v0 + 288);
  return malloc_type_malloc(v2, 0x1080040CC6EE3FDuLL);
}

uint64_t OUTLINED_FUNCTION_1_67(uint64_t a1, uint64_t a2)
{
  return vnormalize(a1, a2);
}

void OUTLINED_FUNCTION_2_64()
{
  *(unsigned char *)(v0 + 24) = 1;
}

uint64_t OUTLINED_FUNCTION_4_57()
{
  return v0 + 16;
}

void *OUTLINED_FUNCTION_5_53()
{
  size_t v2 = 8 * *(unsigned __int8 *)(v0 + 288);
  return malloc_type_malloc(v2, 0x80040B8603338uLL);
}

uint64_t OUTLINED_FUNCTION_6_51()
{
  return v0 - 108;
}

uint64_t OUTLINED_FUNCTION_8_50()
{
  return v0 + 16;
}

uint64_t OUTLINED_FUNCTION_11_50(uint64_t a1, uint64_t a2)
{
  return gcql(v3, a2, v4, v2);
}

uint64_t OUTLINED_FUNCTION_13_46(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22)
{
  return dynaBufAddString(a22, (char *)(v22 - 108), 0);
}

uint64_t OUTLINED_FUNCTION_14_45()
{
  return v0 + 16;
}

uint64_t OUTLINED_FUNCTION_18_39()
{
  return v0;
}

void OUTLINED_FUNCTION_19_39()
{
  unint64_t *v1 = v0 & 0xFFFFFFFFFFFFFFFCLL;
}

uint64_t OUTLINED_FUNCTION_23_30()
{
  uint64_t v3 = *(void *)(v0 + 16);
  unsigned int v4 = *(unsigned __int8 *)(v0 + 8);
  unint64_t v5 = *(void *)v0;
  return vsplit_time(v1, v4, v5, v3);
}

BOOL initializeDeltaHeap(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = allocDynaSegment(a1, a2);
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(a1 + 200);
  *(void *)(v6 + 1736) = v4;
  *(void *)(v6 + 1752) = v4;
  *(_DWORD *)(v6 + 1776) = a2;
  uint64_t v7 = v6 + 1800;
  while (v5 != 400)
  {
    *(unsigned char *)(v7 + v5) = 1;
    v5 += 40;
  }
  return v4 != 0;
}

_DWORD *allocDynaSegment(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 200);
  uint64_t v3 = *(_DWORD **)(v2 + 2192);
  if (v3)
  {
    v3[4] = 0;
    uint64_t v4 = *((void *)v3 + 4);
    *(void *)(v2 + 2192) = *((void *)v3 + 5);
    --*(_DWORD *)(v2 + 2184);
    uint64_t v5 = v4 & 3;
    if ((v4 & 7) == 0) {
      uint64_t v5 = v4 & 3 | 4;
    }
    *((void *)v3 + 5) = 0;
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + hashDelete(*((void **)this + 513), 1, 1) = v5;
  }
  else
  {
    unsigned int v8 = malloc_type_malloc(0x30uLL, 0x10A0040B1233896uLL);
    uint64_t v3 = v8;
    if (v8)
    {
      v8[5] = 0;
      *unsigned int v8 = 0;
      *((_DWORD *)v8 + 4) = 0;
      uint64_t v9 = malloc_type_malloc(a2, 0xE65396F9uLL);
      *((void *)v3 + 3) = v9;
      if (v9)
      {
        uint64_t v10 = (uint64_t)v9 + a2 - 1;
        *((void *)v3 + 4) = v10;
        *((void *)v3 + hashDelete(*((void **)this + 513), 1, 1) = v10 & 3;
        if ((v10 & 7) == 0) {
          *((void *)v3 + hashDelete(*((void **)this + 513), 1, 1) = v10 & 3 | 4;
        }
      }
      else
      {
        free(v3);
        return 0;
      }
    }
  }
  return v3;
}

void *allocDeltaHeapObject(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 200);
  uint64_t v3 = *(void **)(v2 + 1752);
  if (a2 + 8 < 1)
  {
    LODWORD(v6) = *((_DWORD *)v3 + 2);
  }
  else
  {
    signed int v4 = (a2 + 15) & 0xFFFFFFF8;
    uint64_t v5 = v3[1];
    uint64_t v6 = v5 + v4;
    v3[1] = v6;
    signed int v7 = *(_DWORD *)(v2 + 1776);
    if (v7 <= (int)v6)
    {
      v3[1] = v5;
      uint64_t result = allocDynaSegment(a1, v7);
      v3[5] = result;
      if (!result) {
        return result;
      }
      uint64_t v6 = result[1] + v4;
      *uint64_t result = v3;
      result[1] = v6;
      uint64_t v2 = *(void *)(a1 + 200);
      if (*(_DWORD *)(v2 + 1776) < (int)v6) {
        return 0;
      }
      uint64_t v3 = result;
    }
  }
  uint64_t v10 = v3[4];
  if (!v10) {
    return 0;
  }
  int v11 = (void *)(v10 - v6);
  uint64_t v12 = *(void *)(v2 + 1752);
  uint64_t v13 = *(void *)(v12 + 40);
  if (v13)
  {
    *(void *)(v2 + 1752) = v13;
    uint64_t v12 = v13;
  }
  *int v11 = v12;
  uint64_t result = v11 + 1;
  ++*(_DWORD *)(v12 + 16);
  return result;
}

void freeDeltaHeapObject(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 - 8);
  int v3 = *((_DWORD *)v2 + 4) - 1;
  *((_DWORD *)v2 + 4) = v3;
  if (!v3)
  {
    uint64_t v4 = *(void *)(a1 + 200);
    if (v2 == *(void **)(v4 + 1752))
    {
      v2[1] = v2[4] & 3;
    }
    else
    {
      int v5 = *(_DWORD *)(v4 + 2184);
      uint64_t v6 = *v2;
      *(void *)(*v2 + 40) = v2[5];
      signed int v7 = (void *)v2[5];
      if (v5 > 19)
      {
        if (v7) {
          *signed int v7 = v6;
        }
        free((void *)v2[3]);
        free(v2);
      }
      else
      {
        if (v7) {
          *signed int v7 = v6;
        }
        v2[5] = *(void *)(v4 + 2192);
        *(void *)(v4 + 2192) = v2;
        *(_DWORD *)(v4 + 2184) = v5 + 1;
      }
    }
  }
}

BOOL resetDeltaHeap()
{
  OUTLINED_FUNCTION_0_76();
  freeDynaMem(*(void *)(v1 + 1736));
  unsigned int v2 = *(_DWORD *)(*(void *)(v0 + 200) + 1776);
  return initializeDeltaHeap(v0, v2);
}

void freeDynaMem(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    do
    {
      uint64_t v2 = *(void *)(v1 + 40);
      free(*(void **)(v1 + 24));
      free((void *)v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void freeDeltaHeapTo(uint64_t a1, uint64_t a2, int a3)
{
  for (uint64_t i = 0; i != 10; ++i)
  {
    uint64_t v7 = *(void *)(a1 + 200);
    if (!*(unsigned char *)(v7 + 40 * i + 1800) && *(void *)(v7 + 40 * i + 1784) == a2)
    {
      while (1)
      {
        uint64_t v10 = *(void *)(v7 + 1752);
        if (!v10 || v10 == *(void *)(v7 + 40 * i + 1792)) {
          break;
        }
        free(*(void **)(v10 + 24));
        uint64_t v8 = *(void *)(a1 + 200);
        uint64_t v9 = **(void **)(v8 + 1752);
        *(void *)(v8 + 1752) = v9;
        free(*(void **)(v9 + 40));
        uint64_t v7 = *(void *)(a1 + 200);
      }
      if (v10)
      {
        uint64_t v12 = v7 + 40 * i;
        *(void *)(v10 + 8) = *(void *)(v12 + 1808);
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v12 + 1816);
        if (a3) {
          *(unsigned char *)(v7 + 40 * i + 1800) = 1;
        }
        return;
      }
    }
  }
}

uint64_t recordDeltaHeapPos(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = *(void *)(a1 + 200);
  while (1)
  {
    uint64_t v3 = v1 + 40;
    if (v1 == 400) {
      break;
    }
    int v4 = *(unsigned __int8 *)(v2 + v1 + 1800);
    v1 += 40;
    if (v4)
    {
      uint64_t v5 = v2 + v3;
      *(unsigned char *)(v5 + 1760) = 0;
      uint64_t v6 = *(void *)(v2 + 1752);
      uint64_t v7 = *(void *)(v6 + 8);
      *(void *)(v5 + 1744) = *(void *)(v6 + 32) - v7;
      *(void *)(v5 + 1768) = v7;
      *(_DWORD *)(v5 + 1776) = *(_DWORD *)(v6 + 16);
      *(void *)(v5 + 1752) = v6;
      return 1;
    }
  }
  return 0;
}

uint64_t getDeltaHeapSegNumber(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3 = 0;
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = *(void *)(a1 + 200);
  for (uint64_t i = (uint64_t *)(v5 + 1736); ; uint64_t i = (uint64_t *)(v7 + 40))
  {
    uint64_t v7 = *i;
    if (!v7 || v7 == v4) {
      break;
    }
    ++v3;
  }
  if (v7) {
    return ((*(void *)(v4 + 32) - a2) / (int)a3) + *(_DWORD *)(v5 + 1776) / a3 * v3;
  }
  uint64_t v10 = (void *)(v5 + 2192);
  do
  {
    uint64_t v11 = *v10;
    uint64_t v10 = (void *)(*v10 + 40);
    if (v11) {
      BOOL v12 = v11 == v4;
    }
    else {
      BOOL v12 = 1;
    }
  }
  while (!v12);
  if (v11) {
    return 4294967294;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

BOOL initializeDeltaStack(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = allocDynaSegment(a1, a2);
  uint64_t v5 = *(void *)(a1 + 200);
  *(void *)(v5 + 1744) = v4;
  uint64_t v6 = *((void *)v4 + 1);
  uint64_t v7 = *((void *)v4 + 4) - v6;
  *(_DWORD *)(v5 + 1780) = a2;
  uint64_t v8 = *(int *)(v5 + 296);
  uint64_t v9 = (unsigned char *)(v7 - v8);
  *(void *)(v5 + 1720) = v9;
  *(_DWORD *)(v5 + 1728) = a2 - v6 - v8;
  *uint64_t v9 = 8;
  *(void *)(v5 + 1760) = v9;
  return v4 != 0;
}

BOOL resetDeltaStack()
{
  OUTLINED_FUNCTION_0_76();
  freeDynaMem(*(void *)(v1 + 1744));
  uint64_t v2 = *(void *)(v0 + 200);
  *(void *)(v2 + 1744) = 0;
  unsigned int v3 = *(_DWORD *)(v2 + 1780);
  return initializeDeltaStack(v0, v3);
}

uint64_t peekDeltaStackStart()
{
  OUTLINED_FUNCTION_0_76();
  *(void *)(v1 + 1768) = *(void *)(v1 + 1720);
  peekDeltaStackNext(v2);
  return *(void *)(*(void *)(v0 + 200) + 1768);
}

uint64_t peekDeltaStackNext(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 200);
  uint64_t result = *(void *)(v1 + 1768);
  switch(*(unsigned char *)result)
  {
    case 0:
    case 3:
      int v3 = *(_DWORD *)(v1 + 288);
      break;
    case 1:
      int v3 = *(_DWORD *)(v1 + 284);
      break;
    case 2:
      int v3 = *(_DWORD *)(v1 + 280) + ((*(_DWORD *)(result + 16) - 1) | 3) + 1;
      break;
    case 4:
    case 6:
      int v3 = *(_DWORD *)(v1 + 296);
      break;
    case 5:
      int v3 = *(_DWORD *)(v1 + 292);
      break;
    case 7:
      int v3 = *(_DWORD *)(v1 + 276);
      break;
    case 8:
      int v3 = 2;
      break;
    default:
      int v3 = 0;
      break;
  }
  *(void *)(v1 + 1768) = result + v3;
  return result;
}

uint64_t popDeltaStackTop(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 200);
  uint64_t result = *(void *)(v1 + 1720);
  switch(*(unsigned char *)result)
  {
    case 0:
    case 3:
      int v3 = *(_DWORD *)(v1 + 288);
      break;
    case 1:
      int v3 = *(_DWORD *)(v1 + 284);
      break;
    case 2:
      int v3 = *(_DWORD *)(v1 + 280) + ((*(_DWORD *)(result + 16) - 1) | 3) + 1;
      break;
    case 4:
    case 6:
      int v3 = *(_DWORD *)(v1 + 296);
      break;
    case 5:
      int v3 = *(_DWORD *)(v1 + 292);
      break;
    case 7:
      int v3 = *(_DWORD *)(v1 + 276);
      break;
    default:
      int v3 = 0;
      break;
  }
  *(void *)(v1 + 1720) = result + v3;
  *(_DWORD *)(v1 + 1728) += v3;
  return result;
}

void deltaHeapCleanup()
{
  OUTLINED_FUNCTION_0_76();
  uint64_t v2 = v1[274];
  if (v2)
  {
    freeDynaMem(v2);
    uint64_t v1 = *(void **)(v0 + 200);
  }
  uint64_t v3 = v1[217];
  if (v3)
  {
    freeDynaMem(v3);
    uint64_t v1 = *(void **)(v0 + 200);
  }
  uint64_t v4 = v1[218];
  if (v4)
  {
    freeDynaMem(v4);
    uint64_t v1 = *(void **)(v0 + 200);
  }
  v1[274] = 0;
  v1[217] = 0;
  v1[219] = 0;
  v1[218] = 0;
}

uint64_t vmeminit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 200);
  *(_DWORD *)(v2 + 276) = ((*(unsigned __int8 *)(a1 + 232) - 1) | 3) + 1;
  *(_OWORD *)(v2 + 280) = xmmword_2400464B0;
  *(_DWORD *)(v2 + 296) = 4;
  uint64_t result = initializeDeltaStack(a1, 0xFA00u);
  if (result)
  {
    uint64_t result = initializeDeltaHeap(a1, 0x2000u);
    if (result)
    {
      uint64_t v4 = *(void *)(a1 + 200);
      *(void *)(*(void *)(a1 + 192) + 8112) = *(void *)(v4 + 1720);
      *(_DWORD *)(v4 + 252) = 0;
      *(_DWORD *)(v4 + 256) = 0;
      uint64_t result = (uint64_t)malloc_type_malloc(0x50uLL, 0x100004090896170uLL);
      uint64_t v5 = *(void *)(a1 + 200);
      *(void *)(v5 + 264) = result;
      if (result)
      {
        *(unsigned char *)(v5 + 272) = -1;
        viasizes();
        return 1;
      }
    }
  }
  return result;
}

void *vpush_var(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(__int16 *)(a2 + 8);
  uint64_t v3 = (char *)&unk_2400464C0 + 4 * v2 + 24;
  if (v2 <= 0xFFFFFFF9) {
    uint64_t v3 = (char *)&vstmtbl[12 * *(__int16 *)(a2 + 8) + 8] + 4;
  }
  uint64_t v4 = *(int *)v3;
  uint64_t v5 = *(void *)(a1 + 200);
  uint64_t v6 = *(int *)(v5 + 280);
  uint64_t v7 = ((v4 - 1) | 3) + 1;
  uint64_t v8 = *(void *)(v5 + 1720) - (v7 + v6);
  *(void *)(v5 + 1720) = v8;
  *(_DWORD *)(v5 + 1728) -= v7 + v6;
  *(unsigned char *)uint64_t v8 = 2;
  *(_WORD *)(v8 + 2) = v2;
  *(_DWORD *)(v8 + 16) = v4;
  uint64_t v9 = *(const void **)a2;
  *(void *)(v8 + 8) = v9;
  return memcpy((void *)(v8 + v6), v9, (int)v7);
}

void vadd(uint64_t a1, double **a2, double **a3)
{
  int v3 = *((__int16 *)a2 + 4);
  switch(v3)
  {
    case -5:
      int v5 = *((__int16 *)a3 + 4);
      switch(v5)
      {
        case -5:
          uint64_t v6 = *a2;
          double v7 = **a2;
          double v8 = **a3;
          break;
        case -4:
          uint64_t v6 = *a2;
          double v7 = **a2;
          double v8 = (double)*(__int16 *)*a3;
          break;
        case -3:
          uint64_t v6 = *a2;
          double v7 = **a2;
          double v8 = (double)*(uint64_t *)*a3;
          break;
        default:
          return;
      }
      *uint64_t v6 = v7 + v8;
      break;
    case -4:
      int v9 = *((__int16 *)a3 + 4);
      if (v9 == -5 || v9 == -4 || v9 == -3) {
        OUTLINED_FUNCTION_1_68(*a2);
      }
      break;
    case -3:
      int v4 = *((__int16 *)a3 + 4);
      if (v4 == -5 || v4 == -4 || v4 == -3) {
        OUTLINED_FUNCTION_2_65(*a2);
      }
      break;
  }
}

void vsub(uint64_t a1, double **a2, double **a3)
{
  int v3 = *((__int16 *)a2 + 4);
  switch(v3)
  {
    case -5:
      int v5 = *((__int16 *)a3 + 4);
      switch(v5)
      {
        case -5:
          uint64_t v6 = *a2;
          double v7 = **a2;
          double v8 = **a3;
          break;
        case -4:
          uint64_t v6 = *a2;
          double v7 = **a2;
          double v8 = (double)*(__int16 *)*a3;
          break;
        case -3:
          uint64_t v6 = *a2;
          double v7 = **a2;
          double v8 = (double)*(uint64_t *)*a3;
          break;
        default:
          return;
      }
      *uint64_t v6 = v7 - v8;
      break;
    case -4:
      int v9 = *((__int16 *)a3 + 4);
      if (v9 == -5 || v9 == -4 || v9 == -3) {
        OUTLINED_FUNCTION_1_68(*a2);
      }
      break;
    case -3:
      int v4 = *((__int16 *)a3 + 4);
      if (v4 == -5 || v4 == -4 || v4 == -3) {
        OUTLINED_FUNCTION_2_65(*a2);
      }
      break;
  }
}

void vmult(uint64_t a1, double **a2, double **a3)
{
  int v3 = *((__int16 *)a2 + 4);
  switch(v3)
  {
    case -5:
      int v5 = *((__int16 *)a3 + 4);
      switch(v5)
      {
        case -5:
          uint64_t v6 = *a2;
          double v7 = **a2;
          double v8 = **a3;
          break;
        case -4:
          uint64_t v6 = *a2;
          double v7 = **a2;
          double v8 = (double)*(__int16 *)*a3;
          break;
        case -3:
          uint64_t v6 = *a2;
          double v7 = **a2;
          double v8 = (double)*(uint64_t *)*a3;
          break;
        default:
          return;
      }
      *uint64_t v6 = v7 * v8;
      break;
    case -4:
      int v9 = *((__int16 *)a3 + 4);
      if (v9 == -5 || v9 == -4 || v9 == -3) {
        OUTLINED_FUNCTION_1_68(*a2);
      }
      break;
    case -3:
      int v4 = *((__int16 *)a3 + 4);
      if (v4 == -5 || v4 == -4 || v4 == -3) {
        OUTLINED_FUNCTION_2_65(*a2);
      }
      break;
  }
}

void vdiv(uint64_t a1, double **a2, uint64_t **a3)
{
  int v3 = *((__int16 *)a2 + 4);
  switch(v3)
  {
    case -5:
      int v6 = *((__int16 *)a3 + 4);
      if (v6 != -5)
      {
        if (v6 == -4)
        {
          double v7 = *a2;
          double v8 = **a2;
          double v9 = (double)*(__int16 *)*a3;
        }
        else
        {
          if (v6 != -3) {
            return;
          }
          double v7 = *a2;
          double v8 = **a2;
          double v9 = (double)**a3;
        }
        *double v7 = v8 / v9;
        return;
      }
      **a2 = **a2 / *(double *)*a3;
      break;
    case -4:
      int v10 = *((__int16 *)a3 + 4);
      switch(v10)
      {
        case -5:
          OUTLINED_FUNCTION_1_68(*a2);
          break;
        case -4:
          *(__int16 *)*a2 /= *(__int16 *)*a3;
          break;
        case -3:
          *(_WORD *)*a2 = *(__int16 *)*a2 / **a3;
          break;
      }
      break;
    case -3:
      int v4 = *((__int16 *)a3 + 4);
      switch(v4)
      {
        case -5:
          OUTLINED_FUNCTION_2_65(*a2);
          return;
        case -4:
          uint64_t v5 = *(__int16 *)*a3;
          goto LABEL_18;
        case -3:
          uint64_t v5 = **a3;
LABEL_18:
          *(uint64_t *)*a2 /= v5;
          break;
      }
      break;
  }
}

BOOL vnegative(uint64_t a1, double **a2)
{
  int v2 = *((__int16 *)a2 + 4);
  switch(v2)
  {
    case -5:
      return **a2 < 0.0;
    case -4:
      return *(__int16 *)*a2 < 0;
    case -3:
      return *(void *)*a2 >> 63;
  }
  return 0;
}

void vnegate(uint64_t a1, void **a2)
{
  int v2 = *((__int16 *)a2 + 4);
  switch(v2)
  {
    case -5:
      *(double *)*a2 = -*(double *)*a2;
      break;
    case -4:
      OUTLINED_FUNCTION_1_68(*a2);
      break;
    case -3:
      OUTLINED_FUNCTION_2_65(*a2);
      break;
  }
}

void vassign(uint64_t a1, void **a2, const void **a3)
{
  switch(*((_WORD *)a2 + 4))
  {
    case 0xFFFA:
      goto LABEL_26;
    case 0xFFFB:
      int v3 = *((__int16 *)a3 + 4);
      if (v3 == -5)
      {
        double v5 = *(double *)*a3;
        goto LABEL_29;
      }
      if (v3 == -4)
      {
        int v10 = *(unsigned __int16 *)*a3;
        if (v10 == 32769) {
          goto LABEL_26;
        }
        double v5 = (double)(__int16)v10;
        goto LABEL_29;
      }
      if (v3 != -3) {
        return;
      }
      uint64_t v4 = *(void *)*a3;
      if (v4 != -2147483647)
      {
        double v5 = (double)v4;
LABEL_29:
        *(double *)*a2 = v5;
        return;
      }
LABEL_26:
      OUTLINED_FUNCTION_2_65(*a2);
      return;
    case 0xFFFC:
      int v6 = *((__int16 *)a3 + 4);
      switch(v6)
      {
        case -5:
          double v11 = *(double *)*a3;
          if (v11 == 2.22507386e-308)
          {
            OUTLINED_FUNCTION_1_68(*a2);
            return;
          }
          int v7 = (int)v11;
LABEL_13:
          *(_WORD *)*a2 = v7;
          return;
        case -4:
LABEL_12:
          LOWORD(v7) = *(_WORD *)*a3;
          goto LABEL_13;
        case -3:
          *(_WORD *)*a2 = *(void *)*a3;
          break;
      }
      return;
    case 0xFFFD:
      int v8 = *((__int16 *)a3 + 4);
      switch(v8)
      {
        case -5:
          double v12 = *(double *)*a3;
          if (v12 == 2.22507386e-308) {
            goto LABEL_26;
          }
          uint64_t v9 = (uint64_t)v12;
          break;
        case -4:
          uint64_t v9 = *(__int16 *)*a3;
          break;
        case -3:
          uint64_t v9 = *(void *)*a3;
          break;
        default:
          return;
      }
      *(void *)*a2 = v9;
      return;
    case 0xFFFE:
      goto LABEL_12;
    case 0xFFFF:
      *(unsigned char *)*a2 = *(unsigned char *)*a3;
      return;
    default:
      memcpy(*a2, *a3, SHIDWORD(vstmtbl[12 * *((__int16 *)a2 + 4) + 8]));
      return;
  }
}

void vcompare(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  switch(*((_WORD *)a2 + 4))
  {
    case 0xFFFA:
      uint64_t v5 = absoluteSyncNumPtr(**a2);
      uint64_t v6 = absoluteSyncNumPtr(**a3);
      int v7 = (unsigned char *)(*(void *)(a1 + 192) + 8120);
      if (v5 == v6) {
        goto LABEL_32;
      }
      goto LABEL_3;
    case 0xFFFB:
      int v11 = *((__int16 *)a3 + 4);
      if (v11 == -5)
      {
        double v12 = OUTLINED_FUNCTION_4_58(a1, (uint64_t)a2);
      }
      else
      {
        if (v11 != -3) {
          return;
        }
        double v12 = OUTLINED_FUNCTION_4_58(a1, (uint64_t)a2);
        double v14 = (double)v13;
      }
      if (v12 < v14) {
        goto LABEL_29;
      }
      int v7 = (unsigned char *)(*(void *)(a1 + 192) + 8120);
      if (v12 == v14) {
LABEL_32:
      }
        *int v7 = 0;
      else {
LABEL_3:
      }
        *int v7 = 1;
      return;
    case 0xFFFC:
      int v15 = *((__int16 *)a3 + 4);
      if (v15 == -4) {
        goto LABEL_17;
      }
      if (v15 != -3) {
        return;
      }
      if (**a3 > *(__int16 *)*a2) {
        goto LABEL_29;
      }
      OUTLINED_FUNCTION_3_61();
      if (v18 != v17) {
        goto LABEL_26;
      }
      goto LABEL_21;
    case 0xFFFD:
      int v8 = *((__int16 *)a3 + 4);
      if (v8 == -4)
      {
        uint64_t v9 = **a2;
        uint64_t v10 = *(__int16 *)*a3;
      }
      else
      {
        if (v8 != -3) {
          return;
        }
        uint64_t v9 = **a2;
        uint64_t v10 = **a3;
      }
      if (v9 < v10)
      {
LABEL_29:
        uint64_t v21 = *(void *)(a1 + 192);
        char v22 = -1;
        goto LABEL_30;
      }
      OUTLINED_FUNCTION_3_61();
      if (v23 == v24) {
LABEL_21:
      }
        *uint64_t v16 = 0;
      else {
LABEL_26:
      }
        *uint64_t v16 = 1;
      break;
    case 0xFFFE:
LABEL_17:
      if (*(__int16 *)*a2 < *(__int16 *)*a3) {
        goto LABEL_29;
      }
      goto LABEL_20;
    case 0xFFFF:
      if (*(unsigned __int8 *)*a2 < *(unsigned __int8 *)*a3) {
        goto LABEL_29;
      }
LABEL_20:
      OUTLINED_FUNCTION_3_61();
      if (v19 == v20) {
        goto LABEL_21;
      }
      goto LABEL_26;
    default:
      if (*((unsigned __int16 *)a3 + 4) == *((unsigned __int16 *)a2 + 4))
      {
        *(unsigned char *)(*(void *)(a1 + 192) + 8120) = memcmp(*a2, *a3, SHIDWORD(vstmtbl[12 * *((__int16 *)a2 + 4) + 8]));
      }
      else
      {
        uint64_t v21 = *(void *)(a1 + 192);
        char v22 = 1;
LABEL_30:
        *(unsigned char *)(v21 + 8120) = v22;
      }
      break;
  }
}

BOOL vcompareTypeCheck(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(__int16 *)(a2 + 8);
  switch(*(_WORD *)(a2 + 8))
  {
    case 0xFFFA:
      BOOL v5 = *(__int16 *)(a3 + 8) == -6;
      goto LABEL_8;
    case 0xFFFB:
    case 0xFFFC:
    case 0xFFFD:
      return (*(__int16 *)(a3 + 8) + 5) < 3;
    case 0xFFFE:
      BOOL v5 = *(__int16 *)(a3 + 8) == -2;
      goto LABEL_8;
    case 0xFFFF:
      BOOL v5 = *(__int16 *)(a3 + 8) == -1;
LABEL_8:
      BOOL result = v5;
      break;
    default:
      BOOL result = (v3 & 0x80000000) == 0 && v3 < *(unsigned __int8 *)(a1 + 288);
      break;
  }
  return result;
}

uint64_t vinitloc(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(__int16 *)(*(void *)a2 + 16);
  if (v4 < 0 || (uint64_t v5 = *(__int16 *)(a2 + 8), v5 == -1))
  {
    char v9 = 0;
    *(_WORD *)(result + 8) = v4;
    *(void *)BOOL result = *(void *)(a2 + 16);
  }
  else
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t))&vstmtbl[12 * *(unsigned __int16 *)(*(void *)a2 + 16) + 2][8 * v5];
    uint64_t v7 = TVFLDS(*(void *)(a2 + 16));
    BOOL result = v6(v7);
    *(void *)uint64_t v3 = result;
    int v8 = &vstmtbl[12 * *(__int16 *)(*(void *)a2 + 16) + 1][40 * *(__int16 *)(a2 + 8)];
    *(_WORD *)(v3 + 8) = *((_WORD *)v8 + 15);
    char v9 = v8[32];
  }
  *(unsigned char *)(v3 + 10) = v9;
  return result;
}

uint64_t vnspush(uint64_t result, _WORD **a2)
{
  int v2 = *((__int16 *)a2 + 4);
  uint64_t v3 = *(void *)(result + 200);
  uint64_t v4 = *(void *)(v3 + 264);
  char v5 = *(unsigned char *)(v3 + 272) + 1;
  *(unsigned char *)(v3 + 272) = v5;
  *(_WORD *)(v4 + 16 * v5 + 8) = v2;
  switch(v2)
  {
    case -5:
      *(void *)(v4 + 16 * v5) = *(void *)*a2;
      break;
    case -4:
    case -2:
      *(_WORD *)(v4 + 16 * v5) = **a2;
      break;
    case -3:
      *(void *)(v4 + 16 * v5) = *(void *)*a2;
      break;
    case -1:
      *(unsigned char *)(v4 + 16 * v5) = *(unsigned char *)*a2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t vnspop(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 200);
  uint64_t v3 = *(char *)(v2 + 272);
  uint64_t v4 = *(void *)(v2 + 264) + 16 * v3;
  unsigned int v5 = *(unsigned __int16 *)(v4 + 8);
  *(_WORD *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 10) = 0;
  if (v5 >= 0xFFFB) {
    *(void *)a2 = v4;
  }
  *(unsigned char *)(v2 + 272) = v3 - 1;
  return result;
}

uint64_t vonstack(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 192) + 8112;
  while (1)
  {
    uint64_t v3 = *(void *)v2;
    if (!v3) {
      break;
    }
    uint64_t v4 = *(uint64_t **)(v3 + 8);
    uint64_t v5 = *v4;
    uint64_t v2 = (uint64_t)(v4 + 7);
    if (v5 == a2) {
      return *(void *)(*(void *)v2 + 8);
    }
  }
  return 0;
}

void *alloc_sync(uint64_t a1)
{
  uint64_t v2 = allocDeltaHeapObject(a1, *(_DWORD *)(*(void *)(a1 + 200) + 248));
  uint64_t v3 = v2;
  if (v2)
  {
    bzero(v2, *(int *)(*(void *)(a1 + 200) + 248));
    *v3 |= 2uLL;
    SETONESTM((uint64_t)v3);
    CLRALLNSQ((uint64_t)v3);
  }
  return v3;
}

void *alloc_tok(uint64_t a1, uint64_t a2)
{
  return allocDeltaHeapObject(a1, *(_DWORD *)(a2 + 68) + 16);
}

uint64_t vdltinit(uint64_t a1, int a2)
{
  *(_DWORD *)(*(void *)(a1 + 200) + 248) = 16 * *(unsigned __int8 *)(a1 + 288) + 48;
  resetDeltaHeap();
  **(void **)(a1 + 200) = alloc_sync(a1);
  uint64_t v4 = alloc_sync(a1);
  uint64_t result = 0;
  uint64_t v6 = *(void **)(a1 + 200);
  v6[1] = v4;
  if (*v6)
  {
    if (v4)
    {
      uint64_t result = recordDeltaHeapPos(a1);
      if (result)
      {
        CLRONESTM(**(void **)(a1 + 200));
        CLRONESTM(*(void *)(*(void *)(a1 + 200) + 8));
        unint64_t v7 = 0;
        int v8 = (char *)&unk_268C68C18;
        while (v7 < *(unsigned __int8 *)(a1 + 288))
        {
          OUTLINED_FUNCTION_0_77();
          if (a2)
          {
            uint64_t result = vinit_stm(a1, (char)v7);
            if (!result) {
              return result;
            }
          }
          ++v7;
          v8 += 96;
        }
        SETSPINER(a1, **(void **)(a1 + 200), *(void *)(*(void *)(a1 + 200) + 8));
        SETSPINEL(*(void *)(*(void *)(a1 + 200) + 8), **(void **)(a1 + 200));
        uint64_t v9 = *(void *)(a1 + 192);
        *(void *)(v9 + 8080) = 0;
        *(_WORD *)(v9 + 8088) = 256;
        uint64_t result = 1;
        *(unsigned char *)(v9 + 8090) = 1;
        *(_DWORD *)(v9 + 9080) = 1;
      }
    }
  }
  return result;
}

uint64_t vscaninit(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 192);
  *(void *)(v1 + 8080) = 0;
  *(_WORD *)(v1 + 8088) = 256;
  *(unsigned char *)(v1 + 8090) = 1;
  return result;
}

uint64_t deltaReinit(uint64_t a1, int a2)
{
  CLRONESTM(**(void **)(a1 + 200));
  CLRONESTM(*(void *)(*(void *)(a1 + 200) + 8));
  unint64_t v4 = 0;
  uint64_t v5 = (char *)&unk_268C68C18;
  while (v4 < *(unsigned __int8 *)(a1 + 288))
  {
    OUTLINED_FUNCTION_0_77();
    if (a2) {
      vinit_stm(a1, (char)v4);
    }
    ++v4;
    v5 += 96;
  }
  SETSPINER(a1, **(void **)(a1 + 200), *(void *)(*(void *)(a1 + 200) + 8));
  uint64_t v6 = *(uint64_t **)(a1 + 200);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  return SETSPINEL(v7, v8);
}

void vnstackCleanup(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 200) + 264);
  if (v2)
  {
    free(v2);
    *(void *)(*(void *)(a1 + 200) + 264) = 0;
  }
}

void OUTLINED_FUNCTION_0_77()
{
  *uint64_t v2 = 0;
  uint64_t v3 = v1 + *(int *)(*(void *)(v0 + 192) + 9084);
  *(void *)(**(void **)(v0 + 200) + 8 * v3) |= 1uLL;
  uint64_t v4 = v1 + *(int *)(*(void *)(v0 + 192) + 9084);
  *(void *)(*(void *)(*(void *)(v0 + 200) + 8) + 8 * v4) |= 1uLL;
  uint64_t v5 = v1 + *(int *)(*(void *)(v0 + 192) + 9084);
  *(void *)(**(void **)(v0 + 200) + 8 * v5) = *(void *)(**(void **)(v0 + 200) + 8 * v5) & 3 | *(void *)(*(void *)(v0 + 200) + 8);
  uint64_t v6 = *(void *)(*(void *)(v0 + 200) + 8) + 8 * v1;
  *(void *)(v6 + 24) = *(void *)(v6 + 24) & 3 | **(void **)(v0 + 200);
}

void OUTLINED_FUNCTION_1_68(_WORD *a1@<X8>)
{
  *a1 = v1;
}

void OUTLINED_FUNCTION_2_65(void *a1@<X8>)
{
  *a1 = v1;
}

double OUTLINED_FUNCTION_4_58(uint64_t a1, uint64_t a2)
{
  return **(double **)a2;
}

uint64_t print_delta(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, int a9, char a10, char a11)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  *(void *)int v85 = a4;
  *(void *)&v85[8] = a5;
  int v15 = malloc_type_malloc(0x58uLL, 0x10300406A7A1B15uLL);
  if (!v15) {
    return 0;
  }
  uint64_t v16 = (uint64_t)v15;
  v15[16] = a9 + 2;
  v15[6] = a9;
  *(_OWORD *)int v15 = *(_OWORD *)v85;
  *((void *)v15 + 2) = a8;
  *((unsigned char *)v15 + 68) = a6;
  int v17 = num_fields((uint64_t)v15);
  *(_DWORD *)(v16 + 28) = v17;
  uint64_t v18 = (char *)malloc_type_calloc(v17 + 1, 0x10uLL, 0x1010040449DF08BuLL);
  *(void *)(v16 + 32) = v18;
  if (!v18) {
    goto LABEL_20;
  }
  uint64_t v19 = 0;
  uint64_t v20 = *(int *)(v16 + 28);
  uint64_t v21 = v18 + 8;
  while (v19 <= v20)
  {
    *uint64_t v21 = 0;
    v21 += 2;
    ++v19;
  }
  char v22 = hashNew(347, 0, 0);
  *(void *)(v16 + 72) = v22;
  if (!v22)
  {
LABEL_19:
    free_lines(v16);
LABEL_20:
    free((void *)v16);
    return 0;
  }
  uint64_t v23 = hashNew(347, 0, 0);
  *(void *)(v16 + 80) = v23;
  if (!v23)
  {
LABEL_18:
    *(void *)(v16 + 72) = hashDelete(*(void **)(v16 + 72), 0, 0);
    goto LABEL_19;
  }
  uint64_t v24 = rb_alloc(*(_DWORD *)(v16 + 28), 0);
  *(void *)(v16 + 40) = v24;
  if (!v24)
  {
LABEL_17:
    *(void *)(v16 + 80) = hashDelete(*(void **)(v16 + 80), 0, 0);
    goto LABEL_18;
  }
  if (a6)
  {
    uint64_t v25 = rb_alloc(1, 0);
    *(void *)(v16 + 48) = v25;
    if (!v25) {
      goto LABEL_16;
    }
  }
  else
  {
    *(void *)(v16 + 48) = 0;
  }
  if ((int)pvlist_size(*(unsigned __int16 **)(v16 + 16)) < 1)
  {
    *(void *)(v16 + 56) = 0;
  }
  else
  {
    uint64_t v26 = rb_alloc(1, 0);
    *(void *)(v16 + 56) = v26;
    if (!v26)
    {
      rb_free(*(void **)(v16 + 48));
LABEL_16:
      rb_free(*(void **)(v16 + 40));
      goto LABEL_17;
    }
  }
  uint64_t v28 = OUTLINED_FUNCTION_12_49();
  if (first_field(v28, v29, v30, v31))
  {
    uint64_t v32 = 0;
    do
    {
      uint64_t v33 = *(void *)(v16 + 32) + 16 * v32;
      *(unsigned char *)uint64_t v33 = 0;
      *(_DWORD *)(v33 + 4) = 0;
      uint64_t v34 = stream_name(0);
      int v35 = 0;
      *(void *)(*(void *)(v16 + 32) + 16 * v32 + 8) = strdup(v34);
      while (1)
      {
        uint64_t v36 = OUTLINED_FUNCTION_15_45();
        if (v35 >= v38) {
          break;
        }
        place_char(v36, v37, v35++, 32);
      }
      place_char(v36, v37, v35, 0);
      ++v32;
      uint64_t v39 = OUTLINED_FUNCTION_12_49();
    }
    while (next_field(v39, v40, v41, v42));
  }
  for (int i = 0; ; ++i)
  {
    int v44 = *(_DWORD *)(v16 + 28);
    if (i >= *(_DWORD *)(v16 + 64)) {
      break;
    }
    place_char(v16, v44, i, 45);
  }
  place_char(v16, v44, i, 0);
  int v45 = 0;
  while (1)
  {
    int v46 = *(_DWORD *)(v16 + 28);
    if (v45 >= v46) {
      break;
    }
    left_delta(a1);
    uint64_t v47 = OUTLINED_FUNCTION_15_45();
    if (register_sync(v47, v48, v49, 0))
    {
      right_delta(a1);
      uint64_t v50 = OUTLINED_FUNCTION_15_45();
      ++v45;
      if (register_sync(v50, v51, v52, v53)) {
        continue;
      }
    }
    goto LABEL_37;
  }
  if (!a7)
  {
    uint64_t v75 = 0;
    for (uint64_t j = 0; j < v46; ++j)
    {
      if (time_stream(*(char *)(*(void *)(v16 + 32) + v75))
        && (!add_tokens(a1, v16, j) || a11 && !space_syncs(a1, v16, j)))
      {
        goto LABEL_37;
      }
      int v46 = *(_DWORD *)(v16 + 28);
      v75 += 16;
    }
  }
  uint64_t v54 = 0;
  for (uint64_t k = 0; k < v46; ++k)
  {
    if (!time_stream(*(char *)(*(void *)(v16 + 32) + v54))
      && (!add_tokens(a1, v16, k) || a11 && !space_syncs(a1, v16, k)))
    {
      goto LABEL_37;
    }
    int v46 = *(_DWORD *)(v16 + 28);
    v54 += 16;
  }
  if (a7)
  {
    uint64_t v56 = 0;
    while (v56 < v46)
    {
      uint64_t v84 = v56;
      uint64_t v57 = 16 * v56;
      if (!time_stream(*(char *)(*(void *)(v16 + 32) + 16 * v56))) {
        goto LABEL_73;
      }
      char v58 = *(unsigned char *)(*(void *)(v16 + 32) + v57);
      if (checkInterrupt(a1)) {
        goto LABEL_37;
      }
      unint64_t v59 = left_delta(a1);
      int v60 = 0;
      while (1)
      {
        uint64_t v61 = right_delta(a1);
        if (syncmark_equ(v59, v61)) {
          break;
        }
        unint64_t v62 = v59;
        do
        {
          unint64_t v62 = sync_to_right(a1, v58, v62);
          uint64_t v63 = hashLookupInt(*(void *)(v16 + 80), v62);
        }
        while (!v63);
        int off = find_off(v63, v16, v62);
        uint64_t v65 = place_char(v16, v84, off, 124);
        int v66 = find_off(v65, v16, v59);
        int v67 = OUTLINED_FUNCTION_19_40(v16, v84, v66 + 1);
        if (v68) {
          goto LABEL_37;
        }
        int v69 = v67;
        char v70 = 1;
        while (1)
        {
          unint64_t v59 = sync_to_right(a1, v58, v59);
          if (syncmark_equ(v59, v62)) {
            break;
          }
          if (is_token_prev(v58, v59))
          {
            if (v70) {
              int v60 = 0;
            }
            unint64_t token = prev_token(v58, v59);
            char v70 = 0;
            v60 += time_field_value(v58, token);
          }
        }
        if (is_token_prev(v58, v62))
        {
          if (v70) {
            int v72 = 0;
          }
          else {
            int v72 = v60;
          }
          unint64_t v73 = prev_token(v58, v62);
          int v60 = time_field_value(v58, v73) + v72;
          goto LABEL_68;
        }
        unint64_t v59 = v62;
        if ((v70 & 1) == 0)
        {
LABEL_68:
          __sprintf_chk(v85, 0, 0x10uLL, "%i", v60);
          int inserted = insert_token_name(v16, v84, v69, (uint64_t)v85);
          if (inserted == -1) {
            goto LABEL_37;
          }
          unint64_t v59 = v62;
          if (insert_padding(v16, v84, inserted) == -1) {
            goto LABEL_37;
          }
        }
      }
      if (a11 && !space_syncs(a1, v16, v84)) {
        goto LABEL_37;
      }
LABEL_73:
      uint64_t v56 = v84 + 1;
      int v46 = *(_DWORD *)(v16 + 28);
    }
  }
  if (a6)
  {
    for (uint64_t m = 0; m < *(int *)(v16 + 64); ++m)
    {
      if (*(unsigned char *)(*(void *)(*(void *)(*(void *)(v16 + 40) + 16) + 8 * *(int *)(v16 + 28)) + m) == 43)
      {
        uint64_t sync = find_sync(v16, m);
        int v79 = absoluteSyncNum(a1, sync);
        __sprintf_chk(v85, 0, 6uLL, "%i", v79);
        if (!rb_stradd(*(int **)(v16 + 48), m, (unsigned __int8 *)v85)) {
          goto LABEL_37;
        }
      }
    }
  }
  if (checkInterrupt(a1))
  {
LABEL_37:
    close_ddisp(v16);
    return 0;
  }
  if ((int)pvlist_size(*(unsigned __int16 **)(v16 + 16)) >= 1)
  {
    for (int n = 0; n < (int)pvlist_size(*(unsigned __int16 **)(v16 + 16)); ++n)
    {
      int v81 = (unsigned __int8 *)pvlist_name();
      uint64_t v82 = pvlist_val();
      if (v82)
      {
        int v83 = find_off(v82, v16, v82);
        if ((v83 & 0x80000000) == 0 && !rb_stradd(*(int **)(v16 + 56), v83, v81)) {
          goto LABEL_37;
        }
      }
    }
  }
  return v16;
}

uint64_t add_tokens(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1;
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a2 + 32) + 16 * a3;
  char v7 = *(unsigned char *)v6;
  int v8 = *(_DWORD *)(v6 + 4);
  if (checkInterrupt(a1)) {
    return 0;
  }
  unint64_t v10 = left_delta(v5);
  uint64_t v11 = v7;
  while (1)
  {
    uint64_t v12 = right_delta(v5);
    if (syncmark_equ(v10, v12)) {
      return 1;
    }
    unint64_t v13 = v10;
    do
    {
      unint64_t v13 = sync_to_right(v5, v11, v13);
      uint64_t v14 = hashLookupInt(*(void *)(a2 + 80), v13);
    }
    while (!v14);
    find_off(v14, a2, v13);
    uint64_t v15 = OUTLINED_FUNCTION_1_69();
    uint64_t v18 = place_char(v15, v16, v17, 124);
    int off = find_off(v18, a2, v10);
    int v20 = OUTLINED_FUNCTION_19_40(a2, a3, off + 1);
    if (v21) {
      return 0;
    }
    int inserted = v20;
    while (1)
    {
      unint64_t v10 = sync_to_right(v5, v11, v10);
      if (syncmark_equ(v10, v13)) {
        break;
      }
      unsigned int v23 = inserted;
      while (1)
      {
        unsigned int sync = col_next_sync(a2, v23);
        if (sync == -1) {
          break;
        }
        uint64_t v25 = find_sync(a2, sync);
        if (!syncmark_order(v5, v25, v10)) {
          break;
        }
        uint64_t v26 = OUTLINED_FUNCTION_8_51();
        unsigned int v23 = ensure_spaces(v26, v27, v28, v29);
        if (v23 == -1) {
          return 0;
        }
      }
      uint64_t v30 = hashLookupInt(*(void *)(a2 + 72), v23);
      if (v30)
      {
        if (!syncmark_equ(*(void *)(v30 + 8), v10))
        {
          uint64_t v31 = OUTLINED_FUNCTION_8_51();
          uint64_t result = insert_space_0(v31, v32, v33);
          if (!result) {
            return result;
          }
        }
      }
      uint64_t v34 = OUTLINED_FUNCTION_1_69();
      register_sync(v34, v35, v10, v23);
      if (is_token_prev(v11, v10))
      {
        uint64_t v64 = v5;
        unint64_t v61 = v10;
        unint64_t token = prev_token(v11, v10);
        unsigned int v62 = v11;
        int v63 = v8;
        int v37 = field_value(v11, token, v8, v67);
        uint64_t v38 = 0;
        uint64_t v39 = inserted;
        int v66 = inserted;
        uint64_t v40 = v37 + 1;
        uint64_t v41 = a3;
        while (1)
        {
          char v42 = v37[v38];
          if (!v42 || *(unsigned char *)(*(void *)(*(void *)(*(void *)(a2 + 40) + 16) + 8 * a3) + v39 + v38) != 32) {
            break;
          }
          uint64_t v43 = OUTLINED_FUNCTION_1_69();
          place_char(v43, v44, v45, v46);
          ++v38;
          ++inserted;
          ++v40;
        }
        while (1)
        {
          if (!v42) {
            goto LABEL_29;
          }
          OUTLINED_FUNCTION_17_42();
          if (*(unsigned char *)(*(void *)(v47 + 8 * v41) + v39 + v38) != 124
            || *(unsigned char *)(*(void *)(v47 + 8 * *(int *)(a2 + 28)) + v39 + v38 + 1) == 43)
          {
            break;
          }
          place_char_in_stream(a2, a3, v66 + v38, 32);
          uint64_t v48 = OUTLINED_FUNCTION_1_69();
          place_char_in_stream(v48, v49, v66 + v38 + 1, 124);
          place_char(a2, *(_DWORD *)(a2 + 28), v66 + v38, 45);
          place_char(a2, *(_DWORD *)(a2 + 28), v66 + v38 + 1, 43);
          int v65 = inserted;
          uint64_t v50 = v39;
          int v51 = (_DWORD *)hashLookupInt(*(void *)(a2 + 72), v66 + (int)v38);
          *int v51 = v66 + v38 + 1;
          hashDeleteInt();
          hashInsertInt(*(void *)(a2 + 72), v66 + v38 + 1, (uint64_t)v51);
          uint64_t v52 = &v37[v38];
          place_char(a2, a3, v66 + v38, v37[v38]);
          ++v38;
          char v42 = v52[1];
          uint64_t v39 = v50;
          uint64_t v41 = a3;
          int inserted = v65 + 1;
          ++v40;
        }
        char v42 = 1;
LABEL_29:
        while (v42)
        {
          uint64_t result = insert_space_0(a2, a3, inserted);
          if (!result) {
            return result;
          }
          place_char(a2, a3, inserted, *(v40 - 1));
          char v53 = *v40++;
          char v42 = v53;
          ++inserted;
        }
        if (inserted == -1) {
          return 0;
        }
        OUTLINED_FUNCTION_19_40(a2, a3, inserted);
        if (v21) {
          return 0;
        }
        uint64_t v54 = OUTLINED_FUNCTION_8_51();
        unsigned int v23 = next_sync(v54, v55, v56);
        uint64_t v5 = v64;
        uint64_t v11 = v62;
        int v8 = v63;
        unint64_t v10 = v61;
      }
      int inserted = insert_padding(a2, a3, v23 + 1);
      uint64_t result = 0;
      if (inserted == -1) {
        return result;
      }
    }
    unint64_t v10 = v13;
    if (is_token_prev(v11, v13))
    {
      unint64_t v57 = prev_token(v11, v13);
      char v58 = field_value(v11, v57, v8, v67);
      int v59 = insert_token_name(a2, a3, inserted, (uint64_t)v58);
      if (v59 == -1) {
        return 0;
      }
      int v60 = insert_padding(a2, a3, v59);
      uint64_t result = 0;
      unint64_t v10 = v13;
      if (v60 == -1) {
        return result;
      }
    }
  }
}

uint64_t space_syncs(uint64_t a1, uint64_t a2, int a3)
{
  if (checkInterrupt(a1)) {
    return 0;
  }
  uint64_t v6 = OUTLINED_FUNCTION_1_69();
  for (int i = next_sync(v6, v7, 1); i < *(_DWORD *)(a2 + 64); int i = next_sync(v13, v14, v15))
  {
    OUTLINED_FUNCTION_17_42();
    if (*(unsigned char *)(*(void *)(v9 + 8 * a3) + i - 1) == 124)
    {
      uint64_t v10 = OUTLINED_FUNCTION_4_59();
      uint64_t result = insert_space_0(v10, v11, v12);
      if (!result) {
        return result;
      }
    }
    uint64_t v13 = OUTLINED_FUNCTION_1_69();
  }
  return 1;
}

void close_ddisp(uint64_t a1)
{
  if (a1)
  {
    *(void *)(a1 + 80) = hashDelete(*(void **)(a1 + 80), 0, 0);
    *(void *)(a1 + 72) = hashDelete(*(void **)(a1 + 72), 0, 1);
    rb_free(*(void **)(a1 + 40));
    rb_free(*(void **)(a1 + 48));
    rb_free(*(void **)(a1 + 56));
    free_lines(a1);
    free((void *)a1);
  }
}

BOOL sync_in_ticks(uint64_t a1, int a2)
{
  return *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 8 * *(int *)(a1 + 28)) + a2) == 43;
}

uint64_t find_sync(uint64_t a1, unsigned int a2)
{
  do
    uint64_t v4 = hashLookupInt(*(void *)(a1 + 72), a2--);
  while (!v4);
  return *(void *)(v4 + 8);
}

uint64_t find_off(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = (unsigned int *)hashLookupInt(*(void *)(a2 + 80), a3);
  if (v3) {
    return *v3;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void lf_print_delta(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned char *a5, int a6, int a7, uint64_t a8, int a9, char a10, char a11, int a12)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  if (a12) {
    int v17 = a12;
  }
  else {
    int v17 = 77;
  }
  fill_stream_list(a1, (int *)&v91, a5);
  if (v20)
  {
    uint64_t v21 = print_delta(a1, v18, v19, v91, v92, a6, a7, a8, a9, 0, a11);
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v89 = a1;
      unsigned int v90 = a2;
      uint64_t v23 = 0;
      int v24 = 0;
      uint64_t v25 = 16 * (*(_DWORD *)(v21 + 28) & ~(*(int *)(v21 + 28) >> 31));
      while (v25 != v23)
      {
        uint64_t v26 = *(void *)(v22 + 32) + v23;
        int v27 = strlen(*(const char **)(v26 + 8));
        if (*(_DWORD *)(v26 + 4)) {
          int v28 = 3;
        }
        else {
          int v28 = 2;
        }
        int v29 = v28 + v27;
        if (v24 <= v29) {
          int v24 = v29;
        }
        v23 += 16;
      }
      __memset_chk();
      LODWORD(v30) = 0;
      v93[v24] = 0;
      HIDWORD(v88) = v17 - v24;
LABEL_15:
      while ((v30 & 0x80000000) == 0)
      {
        int v31 = *(_DWORD *)(v22 + 64);
        if ((int)v30 >= v31) {
          break;
        }
        uint64_t v32 = 0;
        int v33 = v30 + HIDWORD(v88);
        if ((int)v30 + HIDWORD(v88) >= v31) {
          int v34 = *(_DWORD *)(v22 + 64);
        }
        else {
          int v34 = v30 + HIDWORD(v88);
        }
        uint64_t v35 = *(_DWORD *)(v22 + 28) & ~(*(int *)(v22 + 28) >> 31);
        int abs_split = v34;
        while (v32 != v35)
        {
          for (int i = v34; i > (int)v30 && !can_split_stream_line(v22, v32, i); --i)
            ;
          if (abs_split >= i) {
            int abs_split = i;
          }
          uint64_t v32 = (v32 + 1);
        }
        if (*(unsigned char *)(v22 + 68))
        {
          for (int j = 0; j < (int)rb_lines(*(unsigned int **)(v22 + 48)); ++j)
          {
            rb_width(*(void *)(v22 + 48));
            OUTLINED_FUNCTION_11_51();
            if (v39 == v40) {
              rb_width(*(void *)(v22 + 48));
            }
            if (abs_split >= (int)prev_abs_split())
            {
              rb_width(*(void *)(v22 + 48));
              OUTLINED_FUNCTION_11_51();
              if (v39 == v40) {
                rb_width(*(void *)(v22 + 48));
              }
              int abs_split = prev_abs_split();
            }
          }
        }
        uint64_t v41 = (uint64_t)rb_lines(*(unsigned int **)(v22 + 56));
        if ((int)v41 >= 1)
        {
          for (int k = 0; ; ++k)
          {
            uint64_t v41 = (uint64_t)rb_lines(*(unsigned int **)(v22 + 56));
            if (k >= (int)v41) {
              break;
            }
            rb_width(*(void *)(v22 + 56));
            OUTLINED_FUNCTION_11_51();
            if (v39 == v40) {
              rb_width(*(void *)(v22 + 56));
            }
            if (abs_split >= (int)prev_ptr_split())
            {
              rb_width(*(void *)(v22 + 56));
              OUTLINED_FUNCTION_11_51();
              if (v39 == v40) {
                rb_width(*(void *)(v22 + 56));
              }
              int abs_split = prev_ptr_split();
            }
          }
        }
        if (abs_split == v30)
        {
          if (v33 >= *(_DWORD *)(v22 + 64)) {
            int abs_split = *(_DWORD *)(v22 + 64);
          }
          else {
            int abs_split = v30 + HIDWORD(v88);
          }
        }
        uint64_t v49 = 0;
        while (1)
        {
          uint64_t v50 = *(int *)(v22 + 28);
          if (v49 >= v50) {
            break;
          }
          uint64_t v51 = *(void *)(v22 + 32);
          if (*(int *)(v51 + 16 * v49 + 4) < 1)
          {
            uint64_t v52 = 0;
          }
          else
          {
            heading_string_buf[0] = 32;
            uint64_t v52 = 1u;
          }
          for (uint64_t m = 0; ; ++m)
          {
            int v54 = *(unsigned __int8 *)(*(void *)(v51 + 16 * v49 + 8) + m);
            if (!v54) {
              break;
            }
            heading_string_buf[v52 + m] = v54;
            uint64_t v51 = *(void *)(v22 + 32);
          }
          uint64_t v55 = v52 + m;
          uint64_t v56 = (v52 + m);
          char v57 = 58;
          do
          {
            heading_string_buf[v56] = v57;
            uint64_t v56 = v55 + 1;
            LODWORD(v52) = v52 + 1;
            char v57 = 32;
            ++v55;
          }
          while (v24 > (int)m + (int)v52);
          heading_string_buf[(m + v52)] = 0;
          uint64_t v58 = *(void *)(*(void *)(*(void *)(v22 + 40) + 16) + 8 * v49);
          OUTLINED_FUNCTION_6_52();
          int stream_split = next_stream_split();
          OUTLINED_FUNCTION_7_52();
          next_stream_split();
          uint64_t v35 = v89;
          lf_put_disp_line(v89, v90, (uint64_t)heading_string_buf, v58, v30, stream_split);
          uint64_t v41 = checkInterrupt(v89);
          ++v49;
          if (v41)
          {
LABEL_74:
            LODWORD(v30) = -1;
            goto LABEL_15;
          }
        }
        if (*(unsigned char *)(v22 + 68))
        {
          OUTLINED_FUNCTION_3_62(v41, v42, v43, *(void *)(*(void *)(*(void *)(v22 + 40) + 16) + 8 * v50), v44, v45, v46, v47, v86, HIDWORD(v86), v87, v88);
          int v60 = 0;
          while (v60 < (int)rb_lines(*(unsigned int **)(v22 + 48)))
          {
            rb_gets(*(void *)(v22 + 48), v60, 0);
            OUTLINED_FUNCTION_6_52();
            next_abs_split();
            OUTLINED_FUNCTION_7_52();
            uint64_t v61 = next_abs_split();
            OUTLINED_FUNCTION_2_66(v61, v62, v63, v64, v65, v66, v67, v68);
            ++v60;
            if (checkInterrupt(v35)) {
              goto LABEL_74;
            }
          }
        }
        int v69 = rb_lines(*(unsigned int **)(v22 + 56));
        if (v69)
        {
          OUTLINED_FUNCTION_3_62((uint64_t)v69, v70, v71, *(void *)(*(void *)(*(void *)(v22 + 40) + 16) + 8 * *(int *)(v22 + 28)), v72, v73, v74, v75, v86, HIDWORD(v86), v87, v88);
          int v76 = 0;
          while (v76 < (int)rb_lines(*(unsigned int **)(v22 + 56)))
          {
            rb_gets(*(void *)(v22 + 56), v76, 0);
            OUTLINED_FUNCTION_6_52();
            next_ptr_split();
            OUTLINED_FUNCTION_7_52();
            uint64_t ptr_split = next_ptr_split();
            OUTLINED_FUNCTION_2_66(ptr_split, v78, v79, v80, v81, v82, v83, v84);
            ++v76;
            if (checkInterrupt(v35)) {
              goto LABEL_74;
            }
          }
        }
        vf_puts(v89, v90, (uint64_t)"\n", 1);
        uint64_t v30 = abs_split;
        if (abs_split <= v33) {
          int v85 = v33;
        }
        else {
          int v85 = abs_split;
        }
        while (v30 < v33)
        {
          if (*(unsigned char *)(*(void *)(*(void *)(*(void *)(v22 + 40) + 16) + 8 * *(int *)(v22 + 28)) + v30) == 43) {
            goto LABEL_15;
          }
          ++v30;
        }
        LODWORD(v30) = v85;
      }
      close_ddisp(v22);
    }
  }
}

void free_lines(uint64_t a1)
{
  uint64_t v2 = 0;
  for (uint64_t i = 8; ; i += 16)
  {
    uint64_t v4 = *(char **)(a1 + 32);
    if (v2 > *(int *)(a1 + 28)) {
      break;
    }
    free(*(void **)&v4[i]);
    *(void *)(*(void *)(a1 + 32) + i) = 0;
    ++v2;
  }
  free(v4);
  *(void *)(a1 + 32) = 0;
}

uint64_t delta_erase(uint64_t *a1, uint64_t a2, uint64_t a3, signed int a4, unsigned int a5)
{
  if (*(_DWORD *)(a2 + 28) <= (int)a3) {
    return 0;
  }
  if (a4 == a5)
  {
    OUTLINED_FUNCTION_17_42();
    uint64_t v10 = (int)a3;
    if (*(unsigned char *)(*(void *)(v11 + 8 * (int)a3) + a4) == 124)
    {
      uint64_t v12 = *(char *)(*(void *)(a2 + 32) + 16 * (int)a3);
      uint64_t sync = find_sync(a2, a4);
      uint64_t result = can_del_sync((uint64_t)a1, v12, sync);
      if (result)
      {
        unsigned __int8 v15 = *(unsigned char *)(*(void *)(a2 + 32) + 16 * (int)a3);
        uint64_t v16 = find_sync(a2, a4);
        uint64_t result = del_sync((uint64_t)a1, v15, v16);
        if (result)
        {
          uint64_t v17 = OUTLINED_FUNCTION_4_59();
          unregister_sync(v17, v18, v19);
          update_token(a2, a3, (a4 - 1));
          return 1;
        }
      }
      return result;
    }
  }
  else
  {
    uint64_t v10 = (int)a3;
  }
  char v20 = *(unsigned char *)(*(void *)(a2 + 32) + 16 * v10);
  uint64_t v21 = find_sync(a2, a4);
  uint64_t v22 = find_sync(a2, a5);
  uint64_t result = del_two_point(a1, v20, v21, v22);
  if (result)
  {
    uint64_t v23 = OUTLINED_FUNCTION_4_59();
    int v26 = prev_sync(v23, v24, v25);
    uint64_t v27 = OUTLINED_FUNCTION_1_69();
    uint64_t v29 = v26;
    uint64_t v30 = (int)(next_sync(v27, v28, a5) - 1);
    int v31 = v26 + 1;
    while (v29 < v30)
    {
      OUTLINED_FUNCTION_17_42();
      uint64_t v32 = OUTLINED_FUNCTION_4_59();
      if (v35 == 124) {
        unregister_sync(v32, v33, v34);
      }
      else {
        place_char_in_stream(v32, v33, v34, 32);
      }
      ++v31;
      ++v29;
    }
    return 1;
  }
  return result;
}

uint64_t unregister_sync(uint64_t result, int a2, int a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    if (*(_DWORD *)(result + 64) - 1 != a3)
    {
      uint64_t result = place_char_in_stream(result, a2, a3, 32);
      uint64_t v5 = 0;
      int v6 = *(_DWORD *)(v4 + 28);
      while (8 * (v6 & ~(v6 >> 31)) != v5)
      {
        int v7 = *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(v4 + 40) + 16) + v5) + a3);
        v5 += 8;
        if (v7 == 124) {
          return result;
        }
      }
      place_char(v4, v6, a3, 45);
      uint64_t v8 = OUTLINED_FUNCTION_1_69();
      find_sync(v8, v9);
      hashDeleteInt();
      hashDeleteInt();
      if (*(unsigned char *)(v4 + 68)) {
        rb_strdel(*(void *)(v4 + 48), a3);
      }
      uint64_t result = (uint64_t)rb_lines(*(unsigned int **)(v4 + 56));
      if (result)
      {
        uint64_t v10 = *(void *)(v4 + 56);
        return rb_strdel(v10, a3);
      }
    }
  }
  return result;
}

unint64_t update_token(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  int v4 = a2;
  uint64_t v29 = *MEMORY[0x263EF8340];
  int sync = prev_sync(a1, a2, a3);
  int v7 = next_sync(a1, v4, v3);
  int v8 = *(char *)(*(void *)(a1 + 32) + 16 * v4);
  uint64_t v9 = OUTLINED_FUNCTION_15_45();
  uint64_t v11 = find_sync(v9, v10);
  unint64_t result = prev_token(v8, v11);
  if (result)
  {
    uint64_t v13 = result;
    uint64_t v14 = v4;
    int v15 = v4;
    int v16 = sync + 1;
    for (int i = v16; i < v7; ++i)
      place_char_in_stream(a1, v4, i, 32);
    int v18 = OUTLINED_FUNCTION_19_40(a1, v4, v16);
    if (v19)
    {
      return 0;
    }
    else
    {
      int v20 = v18;
      uint64_t v21 = 0;
      uint64_t v22 = 16 * v14;
      int v23 = v18;
      while (v14 + v21 < *(int *)(a1 + 28))
      {
        uint64_t v24 = *(void *)(a1 + 32);
        int v25 = *(unsigned __int8 *)(v24 + v22);
        if (v25 != *(unsigned __int8 *)(v24 + 16 * v14)) {
          break;
        }
        int v26 = field_value((char)v25, v13, *(_DWORD *)(v24 + v22 + 4), v28);
        int inserted = insert_token_name(a1, v15 + (int)v21, v20, (uint64_t)v26);
        if (inserted == -1) {
          return 0;
        }
        if (v23 <= inserted) {
          int v23 = inserted;
        }
        v22 += 16;
        ++v21;
      }
      OUTLINED_FUNCTION_19_40(a1, v15, v23);
      return !v19;
    }
  }
  return result;
}

uint64_t prev_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(int *)(a1 + 28);
  if ((int)a3 >= -1) {
    uint64_t result = 0xFFFFFFFFLL;
  }
  else {
    uint64_t result = a3;
  }
  if ((int)v4 <= (int)a2)
  {
    while ((a3 & 0x80000000) == 0)
    {
      if (*(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 8 * v4) + a3) == 43) {
        return OUTLINED_FUNCTION_9_51(result, a2, a3);
      }
      a3 = (a3 - 1);
    }
  }
  else if ((a3 & 0x80000000) == 0)
  {
    while (*(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 8 * (int)a2) + a3) != 124)
    {
      a3 = (a3 - 1);
      if ((a3 & 0x80000000) != 0) {
        return result;
      }
    }
    return OUTLINED_FUNCTION_9_51(result, a2, a3);
  }
  return result;
}

uint64_t next_sync(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(int *)(a1 + 28);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 16);
  uint64_t result = a3;
  if ((int)v3 <= a2)
  {
    uint64_t v7 = *(void *)(v4 + 8 * v3);
    while (*(unsigned char *)(v7 + result) && *(unsigned char *)(v7 + result) != 43)
      ++result;
  }
  else
  {
    uint64_t v6 = *(void *)(v4 + 8 * a2);
    while (*(unsigned char *)(v6 + result) && *(unsigned char *)(v6 + result) != 124)
      ++result;
  }
  return result;
}

uint64_t place_char_in_stream(uint64_t result, int a2, int a3, char a4)
{
  uint64_t v6 = result;
  uint64_t v7 = a2;
  int v8 = a2;
  uint64_t v9 = 16 * a2;
  while (v8 >= 1)
  {
    if (*(unsigned __int8 *)(*(void *)(v6 + 32) + 16 * --v8) != *(unsigned __int8 *)(*(void *)(v6 + 32) + v9)) {
      break;
    }
    uint64_t result = place_char(v6, v8, a3, a4);
  }
  for (uint64_t i = v9;
        v7 < *(int *)(v6 + 28)
     && *(unsigned __int8 *)(*(void *)(v6 + 32) + i) == *(unsigned __int8 *)(*(void *)(v6 + 32) + v9);
        i += 16)
  {
    uint64_t result = place_char(v6, v7++, a3, a4);
  }
  return result;
}

uint64_t insert_spaces(uint64_t a1, int a2, uint64_t a3, int a4)
{
  for (uint64_t i = 0; ; uint64_t i = (i + 1))
  {
    int v9 = *(_DWORD *)(a1 + 28);
    if ((int)i >= v9) {
      break;
    }
    if (a2 == i)
    {
      uint64_t v10 = *(void *)(a1 + 40);
      int v11 = a2;
      space_or_int sync = a3;
    }
    else
    {
      space_or_int sync = next_space_or_sync(a1, i, a3);
      uint64_t v10 = *(void *)(a1 + 40);
      int v11 = i;
    }
    uint64_t result = rb_inscn(v10, v11, space_or_sync, 32, a4);
    if (!result) {
      return result;
    }
  }
  uint64_t result = rb_inscn(*(void *)(a1 + 40), v9, a3, 45, a4);
  if (result)
  {
    shift_table_right(*(_DWORD **)(a1 + 72), a3, *(_DWORD *)(a1 + 64), a4);
    *(_DWORD *)(a1 + 64) += a4;
    uint64_t result = rb_push(*(void *)(a1 + 48), a3, a4);
    if (result) {
      return rb_push(*(void *)(a1 + 56), a3, a4) != 0;
    }
  }
  return result;
}

uint64_t next_space_or_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = (unsigned __int8 *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 8 * (int)a2) + (int)a3); ; ++i)
  {
    int v4 = *i;
    if (v4 != 39) {
      break;
    }
    if (i[1] == 32 && i[2] == 39)
    {
      LODWORD(a3) = a3 + 2;
      i += 2;
    }
LABEL_10:
    a3 = (a3 + 1);
  }
  if (*i && v4 != 32 && v4 != 124) {
    goto LABEL_10;
  }
  return OUTLINED_FUNCTION_9_51(a1, a2, a3);
}

_DWORD *shift_table_right(_DWORD *result, int a2, unsigned int a3, int a4)
{
  uint64_t v6 = (uint64_t)result;
  signed int v7 = a4 + a2;
  while ((int)(a4 + a3) >= v7)
  {
    uint64_t result = (_DWORD *)hashMoveInt(v6, a3, a4 + a3);
    if (result) {
      *uint64_t result = a4 + a3;
    }
    --a3;
  }
  return result;
}

uint64_t place_char(uint64_t a1, int a2, int a3, char a4)
{
  return rb_putc(*(void *)(a1 + 40), a2, a3, a4);
}

uint64_t place_sync(uint64_t a1, uint64_t a2, int a3, signed int a4)
{
  if (preceded_by_token(a2, a3))
  {
    uint64_t v8 = OUTLINED_FUNCTION_5_54();
    if (followed_by_token(v8, v9)) {
      return 0;
    }
    int v20 = *(char *)(*(void *)(a2 + 32) + 16 * a3);
    uint64_t v21 = OUTLINED_FUNCTION_5_54();
    unsigned int sync = next_sync(v21, v22, v23);
    unint64_t v16 = find_sync(a2, sync);
    uint64_t v17 = a1;
    int v18 = v20;
    int v19 = 1;
  }
  else
  {
    int v11 = *(char *)(*(void *)(a2 + 32) + 16 * a3);
    uint64_t v12 = OUTLINED_FUNCTION_5_54();
    unsigned int v15 = prev_sync(v12, v13, v14);
    unint64_t v16 = find_sync(a2, v15);
    uint64_t v17 = a1;
    int v18 = v11;
    int v19 = 0;
  }
  int v25 = ins_sync(v17, v18, v16, v19);
  place_char_in_stream(a2, a3, a4, 124);
  OUTLINED_FUNCTION_18_40();
  if (*(unsigned char *)(v26 + a4) == 43) {
    return 1;
  }
  uint64_t result = (uint64_t)new_sync(a2, (uint64_t)v25, a4);
  if (result)
  {
    if (!*(unsigned char *)(a2 + 68)) {
      return 1;
    }
    int v27 = absoluteSyncNum(a1, (uint64_t)v25);
    __sprintf_chk(v28, 0, 6uLL, "%i", v27);
    uint64_t result = rb_stradd(*(int **)(a2 + 48), a4, (unsigned __int8 *)v28);
    if (result) {
      return 1;
    }
  }
  return result;
}

BOOL preceded_by_token(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 28) <= a2) {
    return 0;
  }
  OUTLINED_FUNCTION_10_51();
  return *(unsigned char *)(v2 + (int)prev_non_blank(v4, v5, (v3 - 1))) != 124;
}

BOOL followed_by_token(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 28) <= a2) {
    return 0;
  }
  OUTLINED_FUNCTION_10_51();
  return *(unsigned char *)(v2 + (int)next_non_blank(v4, v5, (v3 + 1))) != 124;
}

void *new_sync(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!hashLookupInt(*(void *)(a1 + 72), a3) && !hashLookupInt(*(void *)(a1 + 80), a2))
  {
    uint64_t v8 = malloc_type_malloc(0x10uLL, 0x10800407411B482uLL);
    uint64_t v6 = v8;
    if (!v8) {
      return v6;
    }
    *uint64_t v8 = a3;
    *((void *)v8 + hashDelete(*((void **)this + 513), 1, 1) = a2;
    if (hashInsertInt(*(void *)(a1 + 72), a3, (uint64_t)v8)
      && hashInsertInt(*(void *)(a1 + 80), a2, (uint64_t)v6))
    {
      place_char(a1, *(_DWORD *)(a1 + 28), a3, 43);
      return v6;
    }
    free(v6);
  }
  return 0;
}

uint64_t insert_token(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, char *a5, uint64_t a6)
{
  int v12 = *(char *)(*(void *)(a2 + 32) + 16 * (int)a3);
  uint64_t sync = find_sync(a2, a4);
  if (!ins_tok_named(a1, v12, a6, a5, sync) || !update_token(a2, a3, a4 - 1)) {
    return 0;
  }
  signed int v14 = next_sync(a2, a3, a4);
  return change_field(a1, a2, a3, v14, (uint64_t)a5, a6);
}

uint64_t change_field(uint64_t *a1, uint64_t a2, int a3, signed int a4, uint64_t a5, uint64_t a6)
{
  int v12 = (char *)(*(void *)(a2 + 32) + 16 * a3);
  int v13 = *v12;
  int v14 = *((_DWORD *)v12 + 1);
  uint64_t sync = find_sync(a2, a4);
  uint64_t result = set_fld_value(a1, v13, v14, a6, a5, sync);
  if (result)
  {
    uint64_t v17 = OUTLINED_FUNCTION_1_69();
    int v20 = prev_sync(v17, v18, v19) + 1;
    for (int i = v20; ; ++i)
    {
      uint64_t v22 = OUTLINED_FUNCTION_1_69();
      if (i >= a4) {
        break;
      }
      place_char(v22, v23, i, 32);
    }
    OUTLINED_FUNCTION_19_40(v22, v23, v20);
    if (v24) {
      return 0;
    }
    uint64_t v25 = OUTLINED_FUNCTION_1_69();
    int inserted = insert_token_name(v25, v26, v27, a5);
    if (inserted == -1)
    {
      return 0;
    }
    else
    {
      OUTLINED_FUNCTION_19_40(a2, a3, inserted);
      return !v24;
    }
  }
  return result;
}

uint64_t insert_padding(uint64_t a1, int a2, int a3)
{
  return ensure_spaces(a1, a2, a3, *(_DWORD *)(a1 + 24));
}

uint64_t insert_token_name(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = a3;
  for (int i = (char *)(a4 + 1); ; ++i)
  {
    char v9 = *(i - 1);
    if (!v9) {
      goto LABEL_6;
    }
    if (*(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 8 * v6) + v7) == 124) {
      break;
    }
    place_char(a1, a2, v7++, v9);
  }
  char v9 = 1;
LABEL_6:
  while (v9)
  {
    if (!insert_space_0(a1, a2, v7)) {
      return 0xFFFFFFFFLL;
    }
    place_char(a1, a2, v7, *(i - 1));
    char v10 = *i++;
    char v9 = v10;
    uint64_t v7 = (v7 + 1);
  }
  return v7;
}

uint64_t col_prev_sync(uint64_t a1, uint64_t a2)
{
  if ((int)a2 >= -1) {
    uint64_t result = 0xFFFFFFFFLL;
  }
  else {
    uint64_t result = a2;
  }
  if ((a2 & 0x80000000) == 0)
  {
    while (*(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 8 * *(int *)(a1 + 28)) + a2) == 45)
    {
      a2 = (a2 - 1);
      if ((a2 & 0x80000000) != 0) {
        return result;
      }
    }
    return a2;
  }
  return result;
}

uint64_t col_next_sync(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = (unsigned __int8 *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 8 * *(int *)(a1 + 28)) + (int)a2);
  while (1)
  {
    int v4 = *v2++;
    int v3 = v4;
    if (v4 != 45) {
      break;
    }
    ++a2;
  }
  if (v3 == 43) {
    return a2;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t prev_non_blank(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 28);
  if (v3 <= (int)a2)
  {
    if ((a3 & 0x80000000) == 0 && v3 == a2)
    {
      while (*(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 8 * (int)a2) + a3) == 45)
      {
        BOOL v5 = (int)a3 <= 0;
        a3 = (a3 - 1);
        if (v5)
        {
          a3 = 0xFFFFFFFFLL;
          return OUTLINED_FUNCTION_9_51(a1, a2, a3);
        }
      }
    }
  }
  else
  {
    if ((int)a3 >= -1) {
      uint64_t v4 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v4 = a3;
    }
    if ((a3 & 0x80000000) != 0)
    {
LABEL_8:
      a3 = v4;
    }
    else
    {
      while (*(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 8 * (int)a2) + a3) == 32)
      {
        a3 = (a3 - 1);
        if ((a3 & 0x80000000) != 0) {
          goto LABEL_8;
        }
      }
    }
  }
  return OUTLINED_FUNCTION_9_51(a1, a2, a3);
}

uint64_t next_non_blank(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 28);
  if (v3 <= (int)a2)
  {
    if (v3 == a2)
    {
      uint64_t v6 = (unsigned __int8 *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 8 * (int)a2) + (int)a3);
      LODWORD(a3) = a3 + 1;
      do
      {
        int v7 = *v6--;
        a3 = (a3 - 1);
      }
      while (v7 == 45);
    }
  }
  else
  {
    uint64_t v4 = (unsigned __int8 *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 8 * (int)a2) + (int)a3);
    LODWORD(a3) = a3 - 1;
    do
    {
      int v5 = *v4++;
      a3 = (a3 + 1);
    }
    while (v5 == 32);
  }
  return OUTLINED_FUNCTION_9_51(a1, a2, a3);
}

uint64_t num_to_sync(uint64_t a1, uint64_t a2, int a3)
{
  for (uint64_t i = 0; i < *(int *)(a2 + 64); ++i)
  {
    OUTLINED_FUNCTION_18_40();
    if (*(unsigned char *)(v7 + i) == 43)
    {
      uint64_t sync = find_sync(a2, i);
      if (absoluteSyncNum(a1, sync) == a3) {
        return sync;
      }
    }
  }
  return 0;
}

BOOL bet_tokens()
{
  OUTLINED_FUNCTION_14_46();
  BOOL result = preceded_by_token(v2, v3);
  if (result) {
    return followed_by_token(v1, v0);
  }
  return result;
}

uint64_t ensure_spaces(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v5 = a3;
  while (a4 >= 1)
  {
    if (*(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 8 * a2) + v5) != 32)
    {
      if (insert_spaces(a1, a2, v5, a4)) {
        return (a4 + v5);
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
    ++v5;
    --a4;
  }
  return v5;
}

BOOL register_sync(uint64_t a1, int a2, uint64_t a3, signed int a4)
{
  return *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 8 * *(int *)(a1 + 28)) + a4) == 43
      || new_sync(a1, a3, a4) != 0;
}

uint64_t insert_space_0(uint64_t a1, int a2, int a3)
{
  for (int i = 0; ; ++i)
  {
    int v7 = *(_DWORD *)(a1 + 28);
    if (i >= v7) {
      break;
    }
    if (a2 == i)
    {
      uint64_t v8 = *(void *)(a1 + 40);
      int v9 = a2;
      space_or_uint64_t sync = a3;
    }
    else
    {
      uint64_t v11 = OUTLINED_FUNCTION_5_54();
      space_or_uint64_t sync = next_space_or_sync(v11, v12, v13);
      uint64_t v8 = *(void *)(a1 + 40);
      int v9 = i;
    }
    uint64_t result = rb_insc(v8, v9, space_or_sync, 32);
    if (!result) {
      return result;
    }
  }
  uint64_t result = rb_insc(*(void *)(a1 + 40), v7, a3, 45);
  if (result)
  {
    shift_table_right(*(_DWORD **)(a1 + 72), a3, *(_DWORD *)(a1 + 64), 1);
    ++*(_DWORD *)(a1 + 64);
    uint64_t result = rb_push(*(void *)(a1 + 48), a3, 1);
    if (result) {
      return rb_push(*(void *)(a1 + 56), a3, 1) != 0;
    }
  }
  return result;
}

uint64_t prev_abs_split()
{
  OUTLINED_FUNCTION_0_78();
  while ((int)v0 > v1)
  {
    can_split_abs_line(v3, v2, v0);
    if (v4) {
      break;
    }
    uint64_t v0 = (v0 - 1);
  }
  return v0;
}

uint64_t prev_ptr_split()
{
  OUTLINED_FUNCTION_0_78();
  while ((int)v0 > v1)
  {
    can_split_ptr_line(v3, v2, v0);
    if (v4) {
      break;
    }
    uint64_t v0 = (v0 - 1);
  }
  return v0;
}

void lf_put_disp_line(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  OUTLINED_FUNCTION_14_46();
  uint64_t v15 = v14;
  char v16 = *(unsigned char *)(v12 + v14);
  *(unsigned char *)(v12 + v14) = 0;
  uint64_t v17 = v12 + v13;
  if (!v18) {
    goto LABEL_6;
  }
  for (int i = (unsigned char *)(v12 + v13); *i == 32; ++i)
    ;
  if (*i)
  {
LABEL_6:
    vf_puts(v7, v6, v11, 0);
    for (int j = (a6 - a5) & ~((a6 - a5) >> 31); j; --j)
      vf_puts(v7, v6, (uint64_t)" ", 0);
    vf_puts(v7, v6, v17, 0);
    vf_puts(v7, v6, (uint64_t)"\n", 0);
  }
  *(unsigned char *)(a4 + v15) = v16;
}

uint64_t next_stream_split()
{
  OUTLINED_FUNCTION_0_78();
  while ((int)v0 < v1 && !can_split_stream_line(v3, v2, v0))
    uint64_t v0 = (v0 + 1);
  return v0;
}

uint64_t next_abs_split()
{
  OUTLINED_FUNCTION_0_78();
  while ((int)v0 < v1)
  {
    can_split_abs_line(v3, v2, v0);
    if (v4) {
      break;
    }
    uint64_t v0 = (v0 + 1);
  }
  return v0;
}

uint64_t next_ptr_split()
{
  OUTLINED_FUNCTION_0_78();
  while ((int)v0 < v1)
  {
    can_split_ptr_line(v3, v2, v0);
    if (v4) {
      break;
    }
    uint64_t v0 = (v0 + 1);
  }
  return v0;
}

BOOL can_split_stream_line(uint64_t a1, uint64_t a2, int a3)
{
  if (*(_DWORD *)(a1 + 64) == a3) {
    return 1;
  }
  OUTLINED_FUNCTION_10_51();
  int v7 = *(unsigned __int8 *)(v3 + (int)v6);
  if (v7 == 124) {
    return 1;
  }
  if (v7 == 32) {
    return *(unsigned char *)(v3 + (int)next_non_blank(v4, v5, v6)) == 124;
  }
  return 0;
}

void can_split_abs_line(uint64_t a1, uint64_t a2, int a3)
{
  OUTLINED_FUNCTION_14_46();
  if (rb_width(*(void *)(v4 + 48)) != a3 && a3)
  {
    OUTLINED_FUNCTION_13_47();
    if (!v5) {
      OUTLINED_FUNCTION_16_44();
    }
  }
}

void can_split_ptr_line(uint64_t a1, uint64_t a2, int a3)
{
  OUTLINED_FUNCTION_14_46();
  if (rb_width(*(void *)(v4 + 56)) != a3 && a3)
  {
    OUTLINED_FUNCTION_13_47();
    if (!v5) {
      OUTLINED_FUNCTION_16_44();
    }
  }
}

uint64_t OUTLINED_FUNCTION_1_69()
{
  return v0;
}

void OUTLINED_FUNCTION_2_66(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  lf_put_disp_line(a4, a6, (uint64_t)va, v8, v9, v10);
}

void OUTLINED_FUNCTION_3_62(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  lf_put_disp_line(a8, a10, (uint64_t)va, a4, v12, v12);
}

uint64_t OUTLINED_FUNCTION_4_59()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_54()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_52()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_52()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_51()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_51(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t OUTLINED_FUNCTION_12_49()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_15_45()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_19_40(uint64_t a1, int a2, int a3)
{
  return insert_padding(a1, a2, a3);
}

uint64_t vardesc(uint64_t a1, __int16 a2, unsigned __int16 a3, uint64_t a4)
{
  __int16 v4 = a3 | (a2 << 8);
  if ((a2 & 0x80) != 0) {
    return *(void *)(a1 + 192) + 24 * ((a3 | (unsigned __int16)(a2 << 8)) & 0x3FFF) + 9144;
  }
  uint64_t v5 = a4;
  uint64_t v6 = *(void *)(a1 + 192);
  if (!a4)
  {
    uint64_t v5 = *(void *)(v6 + 8104);
LABEL_8:
    uint64_t result = *(void *)(*(void *)(v6 + 8112) + 8);
    if (!result) {
      return result;
    }
    return *(void *)(v5 + 16) + 24 * (v4 & 0x3FFF);
  }
  if (*(void *)(v6 + 8104) == a4) {
    goto LABEL_8;
  }
  uint64_t result = vonstack(a1, a4);
  if (result) {
    return *(void *)(v5 + 16) + 24 * (v4 & 0x3FFF);
  }
  return result;
}

void *rb_alloc(int a1, int a2)
{
  LODWORD(v3) = a1;
  __int16 v4 = malloc_type_malloc(0x18uLL, 0x1080040216EE090uLL);
  uint64_t v5 = v4;
  if (v4)
  {
    if (a2 >= 1) {
      int v6 = 96 * (a2 / 0x60u) + 96;
    }
    else {
      int v6 = 96;
    }
    if ((int)v3 <= 1) {
      size_t v3 = 1;
    }
    else {
      size_t v3 = v3;
    }
    *__int16 v4 = v3;
    v4[1] = v6;
    void v4[2] = -1;
    int v7 = malloc_type_calloc(v3, 8uLL, 0x10040436913F5uLL);
    v5[2] = v7;
    if (v7)
    {
      for (uint64_t i = 0; v3 != i; ++i)
      {
        int v9 = OUTLINED_FUNCTION_0_79(v6 + 1);
        *(void *)(v5[2] + 8 * i) = v9;
        if (!v9)
        {
          while (1)
          {
            int v10 = (void **)v5[2];
            if ((i & 0x80000000) != 0) {
              break;
            }
            free(v10[i]);
            LODWORD(i) = i - 1;
          }
          free(v10);
          goto LABEL_16;
        }
        init_line(*(void **)(v5[2] + 8 * i), v6);
      }
    }
    else
    {
LABEL_16:
      free(v5);
      return 0;
    }
  }
  return v5;
}

void *init_line(void *a1, int a2)
{
  uint64_t result = memset(a1, 32, a2);
  *((unsigned char *)a1 + a2) = 0;
  return result;
}

void rb_free(void *a1)
{
  if (a1)
  {
    for (uint64_t i = 0; ; ++i)
    {
      size_t v3 = (void **)a1[2];
      if (i >= *(int *)a1) {
        break;
      }
      free(v3[i]);
    }
    free(v3);
    free(a1);
  }
}

uint64_t rb_putc(uint64_t a1, int a2, int a3, char a4)
{
  uint64_t result = expand_lines((int *)a1, a2);
  if (result)
  {
    uint64_t result = expand_cols((int *)a1, a3);
    if (result)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 16) + 8 * a2) + a3) = a4;
      int v9 = *(_DWORD *)(a1 + 8);
      if (v9 <= a3) {
        int v9 = a3;
      }
      *(_DWORD *)(a1 + 8) = v9;
      return 1;
    }
  }
  return result;
}

uint64_t expand_lines(int *a1, int a2)
{
  if (*a1 > a2) {
    return 1;
  }
  int v4 = a2 + 1;
  uint64_t result = (uint64_t)OUTLINED_FUNCTION_2_67(*((void **)a1 + 2), 8 * (a2 + 1));
  if (result)
  {
    *((void *)a1 + 2) = result;
    for (uint64_t i = *a1; ; ++i)
    {
      if (i > a2)
      {
        *a1 = v4;
        return 1;
      }
      int v7 = OUTLINED_FUNCTION_0_79(a1[1] + 1);
      *(void *)(*((void *)a1 + 2) + 8 * i) = v7;
      if (!v7) {
        break;
      }
      init_line(*(void **)(*((void *)a1 + 2) + 8 * i), a1[1]);
    }
    while (1)
    {
      uint64_t v8 = *a1;
      int v9 = (void **)*((void *)a1 + 2);
      if (i < v8) {
        break;
      }
      free(v9[i--]);
    }
    int v10 = OUTLINED_FUNCTION_2_67(v9, 8 * v8);
    uint64_t result = 0;
    *((void *)a1 + 2) = v10;
  }
  return result;
}

uint64_t expand_cols(int *a1, int a2)
{
  if (a1[1] > a2) {
    return 1;
  }
  uint64_t v3 = 0;
  int v4 = 96 * ((a2 + 1) / 96);
  int v5 = v4 + 96;
  size_t v6 = v4 + 97;
  while (1)
  {
    uint64_t v7 = *a1;
    if (v3 >= v7) {
      break;
    }
    uint64_t v8 = malloc_type_realloc(*(void **)(*((void *)a1 + 2) + 8 * v3), v6, 0x100004077774924uLL);
    if (!v8)
    {
      LODWORD(v7) = *a1;
      break;
    }
    *(void *)(*((void *)a1 + 2) + 8 * v3) = v8;
    init_line((void *)(*(void *)(*((void *)a1 + 2) + 8 * v3++) + a1[1]), v5 - a1[1]);
  }
  if ((int)v7 <= (int)v3)
  {
    a1[1] = v5;
    return 1;
  }
  for (; (v3 & 0x80000000) == 0; LODWORD(v3) = v3 - 1)
    *(void *)(*((void *)a1 + 2) + 8 * v3) = malloc_type_realloc(*(void **)(*((void *)a1 + 2) + 8* v3), a1[1] + 1, 0x421C09F8uLL);
  return 0;
}

uint64_t rb_insc(uint64_t a1, int a2, int a3, char a4)
{
  uint64_t result = expand_lines((int *)a1, a2);
  if (result)
  {
    uint64_t result = expand_cols((int *)a1, a3);
    if (result)
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 8 * a2);
      uint64_t v10 = *(int *)(a1 + 4);
      if (*(unsigned char *)(v10 + v9 - 1) != 32)
      {
        uint64_t result = expand_cols((int *)a1, (int)v10 + 1);
        if (!result) {
          return result;
        }
        uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 8 * a2);
        LODWORD(v10) = *(_DWORD *)(a1 + 4);
      }
      uint64_t v11 = (unsigned char *)(v9 + a3);
      memmove(v11 + 1, v11, (int)v10 + ~a3);
      *uint64_t v11 = a4;
      ++*(_DWORD *)(a1 + 8);
      return 1;
    }
  }
  return result;
}

uint64_t rb_inscn(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t result = expand_lines((int *)a1, a2);
  if (result)
  {
    int v11 = *(_DWORD *)(a1 + 8);
    int v12 = v11 - a5;
    if (v11 >= -1) {
      int v13 = -1;
    }
    else {
      int v13 = *(_DWORD *)(a1 + 8);
    }
    if ((v11 & 0x80000000) == 0)
    {
      while (*(unsigned char *)(*(void *)(*(void *)(a1 + 16) + 8 * a2) + v11) == 32 && v11 > v12)
      {
        if (--v11 < 0) {
          goto LABEL_13;
        }
      }
      int v13 = v11;
    }
LABEL_13:
    uint64_t result = expand_cols((int *)a1, v13 + a5);
    if (result)
    {
      uint64_t v15 = (char *)(*(void *)(*(void *)(a1 + 16) + 8 * a2) + a3);
      if ((v11 & 0x80000000) == 0) {
        memmove(&v15[a5], v15, v13 - a3 + 1);
      }
      memset(v15, a4, a5);
      int v16 = *(_DWORD *)(a1 + 8);
      if (v16 <= v13 + a5) {
        int v16 = v13 + a5;
      }
      *(_DWORD *)(a1 + 8) = v16;
      return 1;
    }
  }
  return result;
}

uint64_t rb_puts(uint64_t a1, int a2, int a3, char *a4)
{
  uint64_t result = expand_lines((int *)a1, a2);
  if (result)
  {
    int v9 = 0;
    uint64_t v10 = a3;
    while (*a4)
    {
      uint64_t result = expand_cols((int *)a1, a3 + v9);
      if (!result) {
        return result;
      }
      char v11 = *a4++;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 16) + 8 * a2) + v10) = v11;
      ++v9;
      ++v10;
    }
    int v12 = *(_DWORD *)(a1 + 8);
    if (v12 < v9) {
      int v12 = v9 - 2;
    }
    *(_DWORD *)(a1 + 8) = v12;
    return 1;
  }
  return result;
}

uint64_t rb_puts_v(int *a1, int a2, int a3, char *a4)
{
  uint64_t result = expand_cols(a1, a3);
  if (result)
  {
    while (*a4)
    {
      uint64_t result = expand_lines(a1, a2);
      if (!result) {
        return result;
      }
      char v9 = *a4++;
      OUTLINED_FUNCTION_1_70(v9);
    }
    char v10 = 32;
    while (a2 < (uint64_t)*a1)
      OUTLINED_FUNCTION_1_70(v10);
    int v11 = a1[2];
    if (v11 <= a3) {
      int v11 = a3;
    }
    a1[2] = v11;
    return 1;
  }
  return result;
}

uint64_t rb_stradd(int *a1, int a2, unsigned __int8 *a3)
{
  int v4 = a2;
  int v6 = 0;
  int v7 = a2 - 1;
  uint64_t v8 = a2;
  if (!a1) {
    goto LABEL_3;
  }
LABEL_2:
  for (int i = *a1; v6 < i; int i = 0)
  {
    int v10 = a1[1];
    BOOL v11 = v4 < 1 || v10 < v4;
    if (v11 || (uint64_t v12 = OUTLINED_FUNCTION_3_63(), rb_getc(v12, v13, v7) == 32))
    {
      uint64_t v14 = v10;
      if (v10 <= v4) {
        break;
      }
      uint64_t v15 = v8;
      int v16 = a3;
      while (*v16++)
      {
        if (v15 >= v14 || (uint64_t v18 = OUTLINED_FUNCTION_3_63(), rb_getc(v18, v19, v15) != 32))
        {
          if ((int)v15 >= (int)v14) {
            goto LABEL_23;
          }
          goto LABEL_20;
        }
        ++v15;
      }
      if ((int)v15 >= (int)v14) {
        break;
      }
      uint64_t v20 = OUTLINED_FUNCTION_3_63();
      if (rb_getc(v20, v21, v15) == 32) {
        break;
      }
    }
LABEL_20:
    ++v6;
    if (a1) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
LABEL_23:
  while (1)
  {
    int v24 = *a3++;
    char v23 = v24;
    if (!v24) {
      break;
    }
    uint64_t result = rb_putc((uint64_t)a1, v6, v4++, v23);
    if (!result) {
      return result;
    }
  }
  return 1;
}

unsigned int *rb_lines(unsigned int *result)
{
  if (result) {
    return (unsigned int *)*result;
  }
  return result;
}

uint64_t rb_getc(uint64_t a1, int a2, int a3)
{
  if (*(_DWORD *)a1 <= a2 || *(_DWORD *)(a1 + 4) <= a3) {
    return 0;
  }
  else {
    return *(char *)(*(void *)(*(void *)(a1 + 16) + 8 * a2) + a3);
  }
}

uint64_t rb_strdel(uint64_t result, int a2)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v5 = a2;
  uint64_t v6 = a2 - 1;
  if (!result) {
    goto LABEL_3;
  }
LABEL_2:
  for (int i = *(_DWORD *)v3; v4 < i; int i = 0)
  {
    uint64_t result = rb_getc(v3, v4, a2);
    if (result != 32 && (!a2 || *(unsigned char *)(*(void *)(*(void *)(v3 + 16) + 8 * v4) + v6) == 32))
    {
      for (uint64_t j = v5; *(unsigned char *)(*(void *)(*(void *)(v3 + 16) + 8 * v4) + j) != 32; ++j)
        uint64_t result = rb_putc(v3, v4, j, 32);
    }
    ++v4;
    if (v3) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  return result;
}

uint64_t rb_push(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a2 - 1;
  int v8 = a2 + 1;
  uint64_t v9 = a2 + 1;
  if (!a1) {
    goto LABEL_3;
  }
LABEL_2:
  for (int i = *(_DWORD *)a1; v6 < i; int i = 0)
  {
    if (a2)
    {
      int v11 = rb_getc(a1, v6, a2);
      int v12 = a2;
      if (v11 != 32)
      {
        uint64_t v13 = *(void *)(*(void *)(a1 + 16) + 8 * v6);
        int v12 = a2;
        if (*(unsigned char *)(v13 + v7) != 32)
        {
          uint64_t v14 = *(int *)(a1 + 4);
          if ((int)v14 <= v8) {
            int v15 = v8;
          }
          else {
            int v15 = *(_DWORD *)(a1 + 4);
          }
          uint64_t v16 = v9;
          int v12 = a2;
          while (v16 < v14)
          {
            int v17 = *(unsigned __int8 *)(v13 + v16);
            ++v12;
            ++v16;
            if (v17 == 32) {
              goto LABEL_16;
            }
          }
          int v12 = v15;
        }
      }
    }
    else
    {
      int v12 = 0;
    }
LABEL_16:
    if (v12 < *(_DWORD *)(a1 + 4))
    {
      uint64_t v18 = OUTLINED_FUNCTION_3_63();
      uint64_t result = rb_inscn(v18, v19, v20, 32, a3);
      if (!result) {
        return result;
      }
    }
    ++v6;
    if (a1) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  return 1;
}

uint64_t rb_gets(uint64_t a1, int a2, int a3)
{
  if (*(_DWORD *)a1 > a2 && *(_DWORD *)(a1 + 4) >= a3) {
    return *(void *)(*(void *)(a1 + 16) + 8 * a2) + a3;
  }
  else {
    return 0;
  }
}

uint64_t rb_width(uint64_t result)
{
  if (result) {
    return (*(_DWORD *)(result + 8) + 1);
  }
  return result;
}

void *OUTLINED_FUNCTION_0_79(size_t a1)
{
  return malloc_type_calloc(a1, 1uLL, 0x100004077774924uLL);
}

void OUTLINED_FUNCTION_1_70(char a1@<W8>)
{
  *(unsigned char *)(*(void *)(*(void *)(v1 + 16) + 8 * v2) + v3) = a1;
}

void *OUTLINED_FUNCTION_2_67(void *a1, size_t a2)
{
  return malloc_type_realloc(a1, a2, 0x10040436913F5uLL);
}

uint64_t OUTLINED_FUNCTION_3_63()
{
  return v0;
}

uint64_t calcMidline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(__int16 *)(a2 + 2) & ~(*(__int16 *)(a2 + 2) >> 31);
  if (v3 >= 0x64) {
    unsigned int v3 = 100;
  }
  *(_WORD *)(a3 + 2) = MidlineVals[v3];
  return OUTLINED_FUNCTION_0_80();
}

uint64_t f0_stepi(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6 = *(__int16 *)(a3 + 2);
  int v7 = *(__int16 *)(a5 + 2) * *(__int16 *)(a4 + 2);
  if (v7 + v6 < 1) {
    int v7 = 20 - v6;
  }
  if (v7 << 16)
  {
    int v8 = (__int16)v7;
    if (v6 >= 4208) {
      int v9 = 4208;
    }
    else {
      int v9 = *(__int16 *)(a3 + 2);
    }
    unsigned int v10 = v9 & ~(v9 >> 31);
    unsigned int v11 = v10 >> 4;
    int v12 = v10 & 0xF;
    if (v12)
    {
      int v13 = LnTable[v11 + 1];
      int v14 = LnTable[v11];
      unsigned int v11 = v14 + (((v13 - v14) * v12) >> 4);
    }
    else
    {
      LOWORD(v1hashDelete(*((void **)this + 513), 1, 1) = LnTable[v11];
    }
    int v16 = v8 + v6;
    if (v16 >= 4208) {
      int v16 = 4208;
    }
    int v17 = (__int16)v16;
    if (v16 < 0) {
      int v17 = 0;
    }
    int v18 = v17 >> 4;
    int v19 = v17 % 16;
    if (v19) {
      int v18 = LnTable[v18] + (((LnTable[v18 + 1] - LnTable[v18]) * (__int16)v19) >> 4);
    }
    else {
      LOWORD(v18) = LnTable[(__int16)v18];
    }
    int v15 = ((__int16)v11 - (__int16)v18) / *(__int16 *)(a2 + 2);
  }
  else
  {
    LOWORD(v15) = 0;
  }
  *(_WORD *)(a6 + 2) = v15;
  return OUTLINED_FUNCTION_0_80();
}

uint64_t calcIntoni(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v5 = *(_WORD *)(a2 + 2);
  if (*(_WORD *)(a3 + 2))
  {
    LODWORD(v6) = *(__int16 *)(a4 + 2) * *(__int16 *)(a3 + 2);
    if ((int)v6 >= 1023) {
      LODWORD(v6) = 1023;
    }
    if ((int)v6 >= 0) {
      uint64_t v6 = (__int16)v6;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = ExpTable[v6] * (uint64_t)*(__int16 *)(a2 + 2);
    if (v7 <= 0x1FFFFFFF) {
      __int16 v5 = (unint64_t)v7 >> 14;
    }
    else {
      __int16 v5 = 0x7FFF;
    }
  }
  *(_WORD *)(a5 + 2) = v5;
  return OUTLINED_FUNCTION_0_80();
}

uint64_t scaleValue100i(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(__int16 *)(a1 + 2);
  uint64_t v5 = *(__int16 *)(a2 + 2);
  if (v5 >= *(__int16 *)(a4 + 2) * *(__int16 *)(a3 + 2) / 100) {
    uint64_t v5 = *(__int16 *)(a4 + 2) * *(__int16 *)(a3 + 2) / 100;
  }
  if (v5 >= v4) {
    LOWORD(v4) = v5;
  }
  *(_WORD *)(a4 + 2) = v4;
  return OUTLINED_FUNCTION_0_80();
}

uint64_t calcSpeedFactori(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(__int16 *)(a2 + 2) & ~(*(__int16 *)(a2 + 2) >> 31);
  if (v3 >= 0x96) {
    unsigned int v3 = 150;
  }
  *(void *)(a3 + 8) = SpeedTable[v3];
  return OUTLINED_FUNCTION_0_80();
}

uint64_t modulate_pwindi(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(__int16 *)(a2 + 2);
  if (v4 >= 9) {
    int v4 = 9;
  }
  if (v4 <= 1) {
    int v4 = 1;
  }
  *(_WORD *)(a3 + 2) = (PwindModTable[v4] * *(__int16 *)(a3 + 2)) >> 7;
  if (v4 <= 4) {
    int v5 = v4 + 95;
  }
  else {
    int v5 = 105 - v4;
  }
  *(_WORD *)(a4 + 2) = v5 * *(__int16 *)(a4 + 2) / 100;
  return OUTLINED_FUNCTION_0_80();
}

uint64_t modulo(uint64_t a1, __int16 *a2, __int16 *a3, double *a4)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  getDeltaCcodeParm(a2, &v9, -3);
  getDeltaCcodeParm(a3, &v8, -3);
  uint64_t v7 = v9 % v8;
  setDeltaCcodeReturnValue((double *)&v7, -3, a4);
  return 0;
}

uint64_t IntLog(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(__int16 *)(a2 + 2) & ~(*(__int16 *)(a2 + 2) >> 31);
  if (v3 >= 0x1400) {
    unsigned int v3 = 5120;
  }
  int v4 = LogTab[v3 >> 5];
  *(_WORD *)(a3 + 2) = v4 + (((LogTab[(v3 >> 5) + 1] - v4) * (v3 & 0x1F)) >> 5);
  return OUTLINED_FUNCTION_0_80();
}

uint64_t IntExp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(__int16 *)(a2 + 2);
  if (v3 <= 2400) {
    int v3 = 2400;
  }
  if (v3 >= 0x1450) {
    int v3 = 5200;
  }
  unsigned int v4 = (v3 - 2400) >> 4;
  int v5 = ExpTab[v4];
  *(_WORD *)(a3 + 2) = v5 + (((ExpTab[v4 + 1] - v5) * (v3 & 0xFu)) >> 4);
  return OUTLINED_FUNCTION_0_80();
}

uint64_t OUTLINED_FUNCTION_0_80()
{
  return 0;
}

_DWORD *clr_vector(_DWORD *result, uint64_t a2)
{
  for (uint64_t i = a2 & ~(a2 >> 63); i; --i)
    *result++ = 0;
  return result;
}

__int16 *mul1_vector(__int16 *result, float a2, float *a3, uint64_t a4)
{
  for (uint64_t i = a4 & ~(a4 >> 63); i; --i)
  {
    int v5 = *result++;
    *a3 = *a3 + (float)(a2 * (float)v5);
    ++a3;
  }
  return result;
}

float *mulf_vector(float *result, float a2, float *a3, uint64_t a4)
{
  for (uint64_t i = a4 & ~(a4 >> 63); i; --i)
  {
    float v5 = *result++;
    *a3 = *a3 + (float)(a2 * v5);
    ++a3;
  }
  return result;
}

float parallel0_filter(float *a1, float *a2, uint64_t a3)
{
  *(a2 - 2) = a1[13];
  int v3 = a1 + 12;
  float v4 = a1[12];
  *(a2 - hashDelete(*((void **)this + 513), 1, 1) = v4;
  float v5 = a2;
  for (uint64_t i = a3 & ~(a3 >> 63); i; --i)
  {
    float v4 = (float)(a1[2] * *(v5 - 2)) + (float)(a1[1] * v4);
    *v5++ = v4;
  }
  uint64_t v7 = &a2[a3 & ~(a3 >> 63)];
  if (a3 > 1) {
    int v3 = v7 - 2;
  }
  a1[13] = *v3;
  float result = *(v7 - 1);
  a1[12] = result;
  return result;
}

uint64_t output_speech(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)(result + 8662);
  if (*(unsigned char *)(result + 8866))
  {
    int v6 = a2;
    int v3 = (uint64_t *)(result + 2048);
    uint64_t v7 = result + 2048;
    float v4 = *(float *)(result + 148);
    if (v4 != 1.0)
    {
      for (uint64_t i = a2 & ~(a2 >> 63); i; --i)
      {
        *int v3 = (uint64_t)(float)(v4 * (float)*v3);
        ++v3;
      }
    }
    if (*(_DWORD *)(result + 3720) == 2)
    {
      float result = (*(uint64_t (**)(void, int *))(result + 3728))(*(void *)(result + 8), &v6);
      *uint64_t v2 = result;
    }
  }
  return result;
}

BOOL verifyKlattHandle(const char **a1)
{
  return strcmp(*a1, KlattVersion) == 0;
}

double klatt_new(uint64_t a1)
{
  uint64_t v2 = (char *)malloc_type_calloc(1uLL, 0x22A8uLL, 0x10F20402EFE26D7uLL);
  if (v2)
  {
    *(void *)uint64_t v2 = KlattVersion;
    *((void *)v2 + hashDelete(*((void **)this + 513), 1, 1) = a1;
    *((_DWORD *)v2 + 38) = 0;
    *((_DWORD *)v2 + 1588) = 0;
    *((_WORD *)v2 + 4330) = 0;
    double result = 0.0;
    *(_OWORD *)(v2 + 6504) = 0u;
    *((void *)v2 + 817) = 0;
    *((void *)v2 + 819) = 0;
    *((void *)v2 + 818) = 0;
    v2[8866] = 1;
  }
  return result;
}

void klatt_delete(void *a1)
{
  if (verifyKlattHandle((const char **)a1))
  {
    free(a1);
  }
}

uint64_t errorKlattIgnore()
{
  return 0;
}

void *KlattSetConstParms(uint64_t a1, const void *a2)
{
  double result = (void *)verifyKlattHandle((const char **)a1);
  if (result)
  {
    if (*(_DWORD *)(a1 + 152) == 2) {
      KlattClose(a1);
    }
    double result = memcpy((void *)(a1 + 3648), a2, 0x58uLL);
    float v5 = *(float *)(a1 + 3652);
    *(float *)(a1 + 6412) = 1000.0 / v5;
    *(float *)(a1 + 6408) = v5 * 0.001;
    __int16 v6 = *(_WORD *)(a1 + 3664);
    *(_WORD *)(a1 + 8656) = v6;
    *(_WORD *)(a1 + 8658) = v6;
    *(void *)(a1 + 6392) = 0;
    float v7 = (float)((float)(1000.0 / v5) * 3.1416) * 0.001;
    *(float *)(a1 + 6400) = v7;
    *(float *)(a1 + 6404) = v7 + v7;
    *(void *)(a1 + 8160) = *(int *)(a1 + 3660);
    *(unsigned char *)(a1 + 8865) = 0;
    *(void *)(a1 + 8200) = (uint64_t)*(float *)(a1 + 3680);
    *(void *)(a1 + 8208) = (uint64_t)*(float *)(a1 + 3692);
    *(void *)(a1 + 8216) = (uint64_t)*(float *)(a1 + 3684);
    *(void *)(a1 + 8224) = (uint64_t)*(float *)(a1 + 3688);
    if (v5 == 11025.0)
    {
      int v8 = 1;
    }
    else if (v5 == 16000.0)
    {
      int v8 = 2;
    }
    else
    {
      if (v5 == 8000.0)
      {
        *(_DWORD *)(a1 + 8868) = 0;
        goto LABEL_9;
      }
      int v8 = 3;
    }
    *(_DWORD *)(a1 + 8868) = v8;
LABEL_9:
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

BOOL KlattClose(uint64_t a1)
{
  BOOL result = verifyKlattHandle((const char **)a1);
  if (result) {
    *(_DWORD *)(a1 + 152) = 0;
  }
  return result;
}

BOOL KlattOpen(uint64_t a1)
{
  BOOL result = verifyKlattHandle((const char **)a1);
  if (result)
  {
    if (*(unsigned char *)(a1 + 24) != 1)
    {
      (*(void (**)(void, const char *, const char *))(a1 + 3712))(*(void *)(a1 + 8), " KlattOpen error", "Call KlattSetConstParms at least once before KlattOpen!");
      return 0;
    }
    if (*(_DWORD *)(a1 + 152) == 2)
    {
      (*(void (**)(void, const char *, const char *))(a1 + 3712))(*(void *)(a1 + 8), " KlattOpen error", "Synthesizer is already open!");
      return 0;
    }
    uint64_t v3 = 0;
    *(_DWORD *)(a1 + 152) = 2;
    *(void *)(a1 + 4544) = a1 + 3744;
    *(void *)(a1 + 6168) = a1 + 5364;
    *(_DWORD *)(a1 + 6364) = 0;
    while (v3 != 1848)
    {
      uint64_t v4 = a1 + v3;
      *(_DWORD *)(v4 + 232) = 0;
      *(_DWORD *)(v4 + 216) = 0;
      *(void *)(v4 + 208) = 0;
      v3 += 88;
      *(void *)(v4 + 240) = 0;
    }
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 6360) = 0;
    *(void *)(a1 + 6352) = 0;
    *(_OWORD *)(a1 + 6504) = 0u;
    *(void *)(a1 + 6536) = 0;
    *(void *)(a1 + 6552) = 0;
    *(void *)(a1 + 6544) = 0;
    BOOL result = 1;
    *(unsigned char *)(a1 + 8866) = 1;
    *(_WORD *)(a1 + 8660) = 0;
  }
  return result;
}

BOOL KlattSetOutputSamplesOption(uint64_t a1, char a2)
{
  BOOL result = verifyKlattHandle((const char **)a1);
  if (result) {
    *(unsigned char *)(a1 + 8866) = a2;
  }
  return result;
}

uint64_t KlattLength(uint64_t a1)
{
  if (verifyKlattHandle((const char **)a1)) {
    return *(void *)(a1 + 6544);
  }
  else {
    return 0;
  }
}

uint64_t KlattMax(uint64_t a1)
{
  if (verifyKlattHandle((const char **)a1)) {
    return *(void *)(a1 + 6552);
  }
  else {
    return 0;
  }
}

BOOL KlattSynth(uint64_t a1, uint64_t a2)
{
  uint64_t v266 = *MEMORY[0x263EF8340];
  BOOL result = verifyKlattHandle((const char **)a1);
  if (!result) {
    return result;
  }
  float v5 = (void *)(a1 + 6420);
  ++*(void *)(a1 + 16);
  float v6 = *(float *)a2;
  float v7 = *(float *)(a1 + 3648);
  float v8 = *(float *)(a1 + 6408);
  uint64_t v9 = (uint64_t)*(float *)(a2 + 8);
  *(void *)(a1 + 8176) = v9;
  uint64_t v10 = (uint64_t)*(float *)(a2 + 28);
  *(void *)(a1 + 8184) = v10;
  float v11 = *(float *)(a2 + 32);
  *(void *)(a1 + 0x2000) = (uint64_t)v11;
  if (v9 | v10) {
    *(_DWORD *)(a1 + 6356) = 1101004800;
  }
  float v12 = v6 * v7;
  if ((uint64_t)v11) {
    *(_DWORD *)(a1 + 6360) = 1101004800;
  }
  float v13 = v12 * v8;
  *(unsigned char *)(a1 + 8663) = 0;
  float v14 = *(float *)(a2 + 108);
  float v15 = *(float *)(a2 + 112);
  float v17 = *(float *)(a2 + 116);
  float v16 = *(float *)(a2 + 120);
  float v19 = *(float *)(a2 + 124);
  float v18 = *(float *)(a2 + 128);
  *(float *)&v253[3] = v14;
  *(float *)&v253[4] = v19;
  v247[3] = v15;
  v247[4] = v18;
  float v21 = *(float *)(a2 + 132);
  float v20 = *(float *)(a2 + 136);
  *(float *)&v253[1] = v17;
  *(float *)&v253[2] = v21;
  v247[1] = v16;
  v247[2] = v20;
  int v22 = *(_DWORD *)(a2 + 40);
  int v23 = *(_DWORD *)(a2 + 52);
  int v24 = *(_DWORD *)(a2 + 56);
  v254[0] = *(_DWORD *)(a2 + 36);
  v254[1] = v23;
  v248[0] = v22;
  v248[1] = v24;
  int v25 = *(_DWORD *)(a2 + 60);
  int v26 = *(_DWORD *)(a2 + 64);
  int v259 = v23;
  int v260 = v25;
  int v27 = *(_DWORD *)(a2 + 68);
  int v28 = *(_DWORD *)(a2 + 72);
  v254[2] = v25;
  v254[3] = v27;
  v248[2] = v26;
  v248[3] = v28;
  int v29 = *(_DWORD *)(a2 + 76);
  int v30 = *(_DWORD *)(a2 + 80);
  int v261 = v27;
  int v262 = v29;
  int v258 = v254[0];
  v254[4] = v29;
  v248[4] = v30;
  int64x2_t v31 = vcvtq_s64_f64(vcvtq_f64_f32(*(float32x2_t *)(a2 + 140)));
  long long v249 = *(_OWORD *)(a2 + 176);
  int64x2_t v32 = vcvtq_s64_f64(vcvtq_f64_f32(*(float32x2_t *)(a2 + 148)));
  v243[0] = v31;
  v243[1] = v32;
  int v250 = *(_DWORD *)(a2 + 192);
  uint64_t v244 = (uint64_t)*(float *)(a2 + 156);
  uint64_t v33 = *(void *)(a1 + 8160);
  if (v33 >= 6)
  {
    int v34 = *(_DWORD *)(a2 + 88);
    int v35 = *(_DWORD *)(a2 + 92);
    int v36 = *(_DWORD *)(a2 + 96);
    int v255 = *(_DWORD *)(a2 + 84);
    int v256 = v35;
    v248[5] = v34;
    v248[6] = v36;
    int v37 = *(_DWORD *)(a2 + 100);
    int v38 = *(_DWORD *)(a2 + 104);
    int v264 = v35;
    int v265 = v37;
    int v263 = v255;
    int v257 = v37;
    v248[7] = v38;
    uint64_t v251 = *(void *)(a2 + 196);
    int64x2_t v245 = vcvtq_s64_f64(vcvtq_f64_f32(*(float32x2_t *)(a2 + 160)));
    int v252 = *(_DWORD *)(a2 + 204);
    uint64_t v246 = (uint64_t)*(float *)(a2 + 168);
  }
  uint64_t v234 = (uint64_t)v13;
  float v39 = *(float *)(a1 + 6356);
  double v40 = v39;
  if (v39 > 0.00001)
  {
    if (v14 == v17 && v15 == v16)
    {
      *(_DWORD *)(a1 + 320) = 0;
      *(_DWORD *)(a1 + 496) = 0;
    }
    else
    {
      *(float *)(a1 + 320) = v39;
      *(float *)(a1 + 496) = v39;
      if (v14 != *(float *)(a1 + 480)) {
        *(float *)(a1 + 6188) = cosf(v14 * *(float *)(a1 + 6404));
      }
      if (v17 != *(float *)(a1 + 304)) {
        *(float *)(a1 + 6180) = cosf(v17 * *(float *)(a1 + 6404));
      }
      if (v15 != *(float *)(a1 + 484)) {
        *(float *)(a1 + 6272) = expf(-(float)(*(float *)(a1 + 6400) * v15));
      }
      if (v16 != *(float *)(a1 + 308)) {
        *(float *)(a1 + 6264) = expf(-(float)(*(float *)(a1 + 6400) * v16));
      }
    }
    if (v19 == v21 && v18 == v20)
    {
      *(_DWORD *)(a1 + 408) = 0;
      *(_DWORD *)(a1 + 584) = 0;
    }
    else
    {
      *(float *)(a1 + 408) = v39;
      *(float *)(a1 + 584) = v39;
      if (v19 != *(float *)(a1 + 568)) {
        *(float *)(a1 + 6192) = cosf(v19 * *(float *)(a1 + 6404));
      }
      if (v21 != *(float *)(a1 + 392)) {
        *(float *)(a1 + 6184) = cosf(v21 * *(float *)(a1 + 6404));
      }
      if (v18 != *(float *)(a1 + 572)) {
        *(float *)(a1 + 6276) = expf(-(float)(*(float *)(a1 + 6400) * v18));
      }
      if (v20 != *(float *)(a1 + 396)) {
        *(float *)(a1 + 6268) = expf(-(float)(*(float *)(a1 + 6400) * v20));
      }
    }
  }
  uint64_t v237 = a2;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  unint64_t v45 = 0;
  uint64_t v46 = v33 + 5;
  while (v43 + 5 < v46)
  {
    *(_DWORD *)(a1 + v44 + 672) = *(_DWORD *)(a1 + 6356);
    float v47 = *(float *)&v254[v45 / 4];
    if (v47 != *(float *)(a1 + v44 + 656)) {
      *(float *)(a1 + v45 + 6196) = cosf(v47 * *(float *)(a1 + 6404));
    }
    float v48 = *(float *)&v248[v45 / 4];
    if (v48 != *(float *)(a1 + v44 + 660) && *(float *)(a1 + 6356) != 0.0) {
      *(float *)(a1 + v45 + 6280) = expf(-(float)(*(float *)(a1 + 6400) * v48));
    }
    float v49 = *(float *)(a1 + 6360);
    if (v49 <= 0.00001)
    {
      *(_DWORD *)(a1 + v44 + 1376) = 0;
    }
    else
    {
      if (*((void *)v243 + v43)) {
        *(float *)(a1 + v44 + 1376) = v49;
      }
      *(_DWORD *)(a1 + v45 + 6228) = *(_DWORD *)(a1 + v45 + 6196);
      float v50 = *(float *)((char *)&v249 + v45);
      if (v50 != *(float *)(a1 + v44 + 1364)) {
        *(float *)(a1 + v45 + 6312) = expf(-(float)(*(float *)(a1 + 6400) * v50));
      }
    }
    v45 += 4;
    v44 += 88;
    ++v43;
  }
  uint64_t v51 = (float *)(a1 + 284);
  for (uint64_t i = 1; i < v46; ++i)
  {
    if (*(float *)(a1 + 88 * i + 232) != 0.0)
    {
      char v53 = (float *)(a1 + 88 * i);
      uint64_t v54 = a1 + 4 * i;
      float v55 = *(float *)(v54 + 6260);
      float v56 = -(float)(v55 * v55);
      v53[42] = v56;
      float v57 = (float)(v55 * *(float *)(v54 + 6176)) + (float)(v55 * *(float *)(v54 + 6176));
      v53[40] = (float)(1.0 - v57) - v56;
      v53[41] = v57;
      float v58 = v53[54];
      if (v58 == 0.0 || *(float *)&v253[i] == v58 && v247[i] == *(float *)(a1 + 88 * i + 220))
      {
        *(void *)(a1 + 88 * i + 240) = 0;
      }
      else
      {
        uint64_t v59 = a1 + 88 * i;
        float v61 = *(float *)(v59 + 228);
        uint64_t v60 = v59 + 228;
        *(void *)(v60 + 12) = 3;
        float v62 = (float)(v57 - *(float *)(v60 - 4)) * 0.25;
        float v63 = (float)(v56 - v61) * 0.25;
        uint64_t v64 = -3;
        int v65 = v51;
        do
        {
          float v66 = (float)(v64 + 4);
          float v67 = *(float *)v60 + (float)(v66 * v63);
          *int v65 = v67;
          float v68 = *(float *)(v60 - 4) + (float)(v66 * v62);
          *(v65 - 3) = v68;
          *(v65 - 6) = (float)(1.0 - v68) - v67;
          ++v64;
          ++v65;
        }
        while (v64);
      }
    }
    v51 += 22;
  }
  uint64_t v69 = *(void *)(a1 + 8208) + *(void *)(a1 + 0x2000) + *(void *)(a1 + 8224);
  float v70 = *(float *)(v237 + 172);
  if (v70 != 0.0)
  {
    double v71 = db2lin(v69 + (uint64_t)v70);
    *(float *)(a1 + 4552) = *(float *)&v71 * -0.0000000033599;
  }
  uint64_t v72 = 0;
  float v73 = 0.0000000033599;
  uint64_t v74 = 6312;
  uint64_t v75 = 1304;
  while (v72 + 13 < *(void *)(a1 + 8160) + 13)
  {
    int v76 = (float *)(a1 + v75);
    if (*(float *)(a1 + v75 + 72) != 0.0)
    {
      float v77 = *(float *)(a1 + v74);
      v76[2] = -(float)(v77 * v77);
      v76[1] = (float)(v77 * *(float *)(a1 + v74 - 84)) + (float)(v77 * *(float *)(a1 + v74 - 84));
      uint64_t v78 = *((void *)v243 + v72);
      if (v78)
      {
        double v79 = db2lin(v78 + v69);
        float v80 = (float)(v73 * *(float *)&v79) * (float)((float)(1.0 - v76[1]) - v76[2]);
      }
      else
      {
        float v80 = 0.0;
      }
      *int v76 = v80;
    }
    float v73 = -v73;
    ++v72;
    v74 += 4;
    v75 += 88;
  }
  if (*(float *)(a1 + 6356) > 0.0001)
  {
    uint64_t v81 = a1 + 260;
    for (uint64_t j = 1; j != 3; ++j)
    {
      if (*(float *)(a1 + 88 * j + 232) != 0.0)
      {
        uint64_t v83 = a1 + 88 * j;
        LODWORD(v40) = *(_DWORD *)(v83 + 160);
        uint64_t v84 = a1 + 12 * j;
        *(float *)(v84 + 2008) = 1.0 / *(float *)&v40;
        double v40 = COERCE_DOUBLE(vdiv_f32(vneg_f32(*(float32x2_t *)(v83 + 164)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v40, 0)));
        *(double *)(v84 + 2012) = v40;
        if (*(void *)(v83 + 240))
        {
          for (uint64_t k = 0; k != 12; k += 4)
          {
            uint64_t v86 = (float *)(v81 + k);
            float v87 = *(float *)(v81 + k);
            *uint64_t v86 = 1.0 / v87;
            v86[3] = (float)-*(float *)(v81 + k + 12) / v87;
            v86[6] = (float)-*(float *)(v81 + k + 24) / v87;
          }
        }
      }
      v81 += 88;
    }
  }
  *(_DWORD *)(a1 + 6376) = *(_DWORD *)(v237 + 4);
  *(_DWORD *)(a1 + 6372) = *(_DWORD *)(v237 + 24);
  *(float *)(a1 + 6388) = *(float *)(v237 + 12) * 0.01;
  uint64_t v88 = 200;
  if (v234 < 200) {
    uint64_t v88 = v234;
  }
  *(void *)(a1 + 6448) = v88;
  uint64_t v89 = *(void *)(a1 + 8184);
  if (v89)
  {
    double v90 = db2lin(*(void *)(a1 + 8208) + v89 + *(void *)(a1 + 8216));
    float v91 = *(float *)&v90 * 0.000011921;
  }
  else
  {
    float v91 = 0.0;
  }
  uint64_t v238 = (uint64_t *)(a1 + 6504);
  uint64_t v239 = a1 + 160;
  uint64_t v235 = a1 + 512;
  uint64_t v92 = a1 + 8665;
  uint64_t v93 = a1 + 2048;
  float v94 = 10000.0;
  float v95 = 0.001;
  uint64_t v233 = 1;
  int v236 = 1;
  uint64_t v96 = v234;
  while (v96 >= 1)
  {
    if (*(void *)(a1 + 6448) >= v96) {
      uint64_t v97 = v96;
    }
    else {
      uint64_t v97 = *(void *)(a1 + 6448);
    }
    *(void *)(a1 + 6448) = v97;
    *(float *)(a1 + 6364) = (float)(1000 * v97) / *(float *)(a1 + 3652);
    uint64_t v241 = v96;
    if (*(float *)(a1 + 6356) >= 0.0001)
    {
      uint64_t v98 = *v238;
LABEL_94:
      *(void *)(a1 + 8232) = 0;
      *(void *)(a1 + 6560) = 0;
      if (v98) {
        goto LABEL_95;
      }
      uint64_t v99 = 0;
      goto LABEL_103;
    }
    uint64_t v98 = *(void *)(a1 + 6504);
    if (*(float *)(a1 + 6360) >= 0.0001) {
      goto LABEL_94;
    }
    if (v98)
    {
      *(void *)(a1 + 8232) = 0;
      *(void *)(a1 + 6560) = 0;
LABEL_95:
      if (v98 >= v97) {
        uint64_t v99 = v97;
      }
      else {
        uint64_t v99 = v98;
      }
      clr_vector(*(_DWORD **)(a1 + 4544), v99);
      *(void *)(a1 + 6504) -= v99;
      uint64_t v100 = v97 - v99;
      OUTLINED_FUNCTION_4_60();
      uint64_t v98 = *(void *)(a1 + 8232);
      goto LABEL_104;
    }
    if (!*(void *)(a1 + 6536))
    {
      uint64_t v101 = *(void *)(a1 + 6512);
      if (!v101)
      {
        for (uint64_t m = v97; v101 < m; uint64_t m = *(void *)(a1 + 6448))
          *(void *)(v93 + 8 * v101++) = 0;
        goto LABEL_294;
      }
    }
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    *(void *)(a1 + 6560) = 0;
LABEL_103:
    uint64_t v100 = v97;
LABEL_104:
    uint64_t v242 = v97;
    OUTLINED_FUNCTION_0_81(v98);
    uint64_t v102 = *(void *)(a1 + 6512);
    if (v102)
    {
      if (v102 >= v100) {
        uint64_t v103 = v100;
      }
      else {
        uint64_t v103 = *(void *)(a1 + 6512);
      }
      *(void *)(a1 + 6480) = v103;
      float v104 = *(float *)(a1 + 6416);
      uint64_t v105 = v103 + v99;
      while (v99 < v105)
      {
        *(float *)(*(void *)(a1 + 4544) + 4 * v99) = v104
                                                     + (float)((float)-(float)(*(float *)(a1 + 6424) * v104) * v104);
        float v104 = v104 + *(float *)(a1 + 6420);
        ++v99;
      }
      *(float *)(a1 + 6416) = v104;
      *(void *)(a1 + 6512) = v102 - v103;
      v100 -= v103;
      OUTLINED_FUNCTION_1_71(v103);
    }
    else
    {
      uint64_t v105 = v99;
    }
    OUTLINED_FUNCTION_0_81(*(void *)(a1 + 8232));
    uint64_t v106 = *(void *)(a1 + 6536);
    if (v106 && v100)
    {
      if (v106 >= v100) {
        uint64_t v107 = v100;
      }
      else {
        uint64_t v107 = *(void *)(a1 + 6536);
      }
      *(void *)(a1 + 6496) = v107;
      clr_vector((_DWORD *)(*(void *)(a1 + 4544) + 4 * v105), v107);
      uint64_t v108 = *(void *)(a1 + 6496);
      *(void *)(a1 + 6536) -= v108;
      v100 -= v108;
      v105 += v108;
      OUTLINED_FUNCTION_1_71(v108);
    }
    if (v105 < 1)
    {
      uint64_t v109 = 0;
    }
    else
    {
      pole_filter(v239, *(float **)(a1 + 4544), v105);
      uint64_t v109 = v105;
    }
    uint64_t v240 = v109;
    if (v100 < 1) {
      goto LABEL_199;
    }
    float v110 = *(float *)(a1 + 6376);
    if (v110 != 0.0)
    {
      uint64_t v114 = *(void *)(a1 + 8176);
      if (v114)
      {
        if (v236)
        {
          float v115 = *(float *)(v237 + 20);
          if (v115 != 0.0)
          {
            float v116 = v95;
            float v117 = v94;
            float v118 = (float)(v110 * v115) * 0.0002;
            float v119 = *(float *)(a1 + 6352);
            float v120 = sinf(v119 * 0.079796);
            float v121 = v120 + sinf(v119 * 0.044611);
            float v122 = v118 * (float)(sinf(v119 * 0.029531) + v121);
            float v94 = v117;
            float v95 = v116;
            *(void *)(a1 + 8248) = (uint64_t)v122;
            float v110 = v110 + (float)(uint64_t)v122;
            *(float *)(a1 + 6376) = v110;
            if (v110 <= 0.0)
            {
              *(_DWORD *)(a1 + 6376) = 1065353216;
              float v110 = 1.0;
            }
          }
          *(float *)(a1 + 6380) = v94 / v110;
          float v123 = (float)(v94 / v110) * (float)(*(float *)(a1 + 3652) * v95);
          *(float *)(a1 + 6384) = v123;
          float v124 = *(float *)(a1 + 6388);
          if (v124 > 0.0)
          {
            uint64_t v125 = *(void *)(a1 + 8200) + v114 + *(void *)(a1 + 8208);
            if (v125 < 1)
            {
              *(void *)(a1 + 6436) = 0;
            }
            else
            {
              *(float *)(a1 + 6440) = 1.5 / (float)(v124 * v123);
              double v126 = db2lin(v125);
              float v127 = *(float *)(a1 + 6440);
              *(float *)&double v126 = (float)(*(float *)&v126 * 18.469) * v127;
              *(_DWORD *)(a1 + 6436) = LODWORD(v126);
              *(float *)(a1 + 6440) = v127 / *(float *)&v126;
            }
          }
          float v130 = *(float *)(a1 + 6372);
          if (*(unsigned char *)(a1 + 8660))
          {
            if (v130 == 0.0)
            {
              *(_WORD *)(a1 + 8660) = 0;
              goto LABEL_144;
            }
LABEL_142:
            float v131 = 1.0 - (float)(v130 * 0.01);
            *(float *)(a1 + 6368) = v131;
            *(void *)(a1 + 6464) = (uint64_t)(float)((float)((float)(v130 * *(float *)(a1 + 6384))
                                                            * (float)(1.0 - *(float *)(a1 + 6388)))
                                                    * 0.01);
            if (v131 <= 0.0)
            {
              *(void *)(a1 + 6428) = 0;
            }
            else
            {
              *(float *)(a1 + 6428) = v131 * *(float *)(a1 + 6436);
              *(float *)(a1 + 6432) = *(float *)(a1 + 6440) / v131;
            }
          }
          else
          {
            if (v130 > 0.0)
            {
              *(_WORD *)(a1 + 8660) = 1;
              goto LABEL_142;
            }
LABEL_144:
            *float v5 = *(void *)(a1 + 6436);
          }
          float v132 = *(float *)(v237 + 16);
          if (v132 >= 35.0) {
            float v132 = 35.0;
          }
          uint64_t v133 = (uint64_t)v132;
          *(void *)(a1 + 8168) = (uint64_t)v132;
          if ((uint64_t)v132 && (float v134 = *(float *)(a1 + 6356), v134 > 0.0001))
          {
            *(float *)(a1 + 232) = v134;
            *(void *)(a1 + 240) = 0;
            float v135 = tl_table[v133];
            *(float *)uint64_t v253 = v135;
            float v136 = v135 * 0.375;
            v247[0] = v135 * 0.375;
            int v137 = *(_DWORD *)(a1 + 8868);
            if (v137)
            {
              if (v137 == 2 || v137 == 1)
              {
                uint64_t v233 = 0;
                uint64_t v138 = (char *)&tilt16;
                goto LABEL_159;
              }
              if (v135 != *(float *)(a1 + 216)) {
                *(float *)(a1 + 6176) = cosf(v135 * *(float *)(a1 + 6404));
              }
              if (v136 != *(float *)(a1 + 220)) {
                *(float *)(a1 + 6260) = expf(-(float)(*(float *)(a1 + 6400) * v136));
              }
              uint64_t v233 = 0;
              if (v134 != 0.0)
              {
                float v198 = *(float *)(a1 + 6260);
                float v199 = -(float)(v198 * v198);
                *(float *)(a1 + 168) = v199;
                float v200 = (float)(v198 * *(float *)(a1 + 6176)) + (float)(v198 * *(float *)(a1 + 6176));
                *(float *)(a1 + 160) = (float)(1.0 - v200) - v199;
                *(float *)(a1 + 164) = v200;
                *(void *)(a1 + 240) = 0;
              }
            }
            else
            {
              uint64_t v233 = 0;
              uint64_t v138 = (char *)&tilt8;
LABEL_159:
              uint64_t v140 = &v138[12 * v133];
              *(void *)(a1 + 160) = *(void *)v140;
              *(_DWORD *)(a1 + 168) = *((_DWORD *)v140 + 2);
            }
          }
          else
          {
            *(_DWORD *)(a1 + 232) = 0;
          }
        }
        compute_voicing_size((float *)a1);
        int v236 = 0;
        goto LABEL_172;
      }
    }
    if (*(void *)(a1 + 8184))
    {
      *(void *)(a1 + 6456) = v100;
      *(void *)(a1 + 6472) = v100;
      OUTLINED_FUNCTION_6_53();
      uint64_t v113 = (uint64_t *)(v112 + 6560);
    }
    else
    {
      *(void *)(a1 + 6472) = 0;
      OUTLINED_FUNCTION_0_81(*(void *)(a1 + 8232));
      uint64_t v113 = (uint64_t *)(a1 + 6456);
      uint64_t v111 = v100;
    }
    *uint64_t v113 = v100;
    *(void *)(a1 + 6488) = v111;
    OUTLINED_FUNCTION_6_53();
    *(void *)(v129 + 6560) = v128;
    clr_vector((_DWORD *)(*(void *)(a1 + 4544) + 4 * v105), v100);
    uint64_t v100 = 0;
    *(_DWORD *)(a1 + 6392) = 0;
LABEL_172:
    while (v100 >= 1 && v100 >= *(void *)(a1 + 6456))
    {
      if (*(unsigned char *)(a1 + 8660))
      {
        if (*(unsigned char *)(a1 + 8661))
        {
          *float v5 = *(void *)(a1 + 6428);
          uint64_t v141 = *(void *)(a1 + 6464);
          *(void *)(a1 + 6496) = *(void *)(a1 + 6488) - v141;
          clr_vector((_DWORD *)(*(void *)(a1 + 4544) + 4 * v105), v141);
          uint64_t v142 = *(void *)(a1 + 6464);
          v105 += v142;
          OUTLINED_FUNCTION_1_71(v142);
          int v143 = *(unsigned __int8 *)(a1 + 8661);
        }
        else
        {
          OUTLINED_FUNCTION_7_53();
        }
        *(unsigned char *)(a1 + 866hashDelete(*((void **)this + 513), 1, 1) = v143 == 0;
      }
      OUTLINED_FUNCTION_0_81(*(void *)(a1 + 8232));
      float v144 = *(float *)(a1 + 6420);
      if (v144 == 0.0)
      {
        clr_vector((_DWORD *)(*(void *)(a1 + 4544) + 4 * v105), *(void *)(a1 + 6472));
        uint64_t v146 = *(void *)(a1 + 6472);
        uint64_t v147 = v146 + v105;
      }
      else
      {
        float v145 = v144 * (float)(*(float *)(a1 + 6392) * *(float *)(a1 + 6408));
        uint64_t v146 = *(void *)(a1 + 6472);
        uint64_t v147 = v146 + v105;
        while (v105 < v147)
        {
          *(float *)(*(void *)(a1 + 4544) + 4 * v105) = v145
                                                        + (float)((float)-(float)(*(float *)(a1 + 6424) * v145) * v145);
          float v145 = v145 + *(float *)(a1 + 6420);
          ++v105;
        }
      }
      uint64_t v148 = a1 + 6560;
      *(void *)(a1 + 6560 + 8 * *(void *)(a1 + 8232)) += v146;
      OUTLINED_FUNCTION_2_68();
      *(void *)(v148 + 8 * v149) = 0;
      clr_vector((_DWORD *)(*(void *)(a1 + 4544) + 4 * v147), *(void *)(a1 + 6496));
      uint64_t v150 = *(void *)(a1 + 6496);
      uint64_t v105 = v150 + v147;
      *(void *)(v148 + 8 * *(void *)(a1 + 8232)) += v150;
      v100 -= *(void *)(a1 + 6456);
      compute_v_start((float *)a1);
      compute_voicing_size((float *)a1);
    }
    if (v100 < 1)
    {
      *(void *)(a1 + 6536) = 0;
      *uint64_t v238 = 0;
      *(void *)(a1 + 6512) = 0;
    }
    else
    {
      if (*(unsigned char *)(a1 + 8660))
      {
        if (*(unsigned char *)(a1 + 8661))
        {
          *float v5 = *(void *)(a1 + 6428);
          uint64_t v152 = *(void *)(a1 + 6464);
          *(void *)(a1 + 6496) -= v152;
          if (v152 >= v100) {
            uint64_t v153 = v100;
          }
          else {
            uint64_t v153 = v152;
          }
          clr_vector((_DWORD *)(*(void *)(a1 + 4544) + 4 * v105), v153);
          *(void *)(a1 + 6504) = *(void *)(a1 + 6464) - v153;
          v105 += v153;
          v100 -= v153;
          OUTLINED_FUNCTION_4_60();
          int v154 = *(unsigned __int8 *)(a1 + 8661);
        }
        else
        {
          OUTLINED_FUNCTION_7_53();
          *(void *)(a1 + 6504) = 0;
        }
        *(unsigned char *)(a1 + 866hashDelete(*((void **)this + 513), 1, 1) = v154 == 0;
      }
      OUTLINED_FUNCTION_0_81(*(void *)(a1 + 8232));
      uint64_t v155 = *(void *)(a1 + 6472);
      if (v155 >= v100) {
        uint64_t v156 = v100;
      }
      else {
        uint64_t v156 = *(void *)(a1 + 6472);
      }
      *(void *)(a1 + 6480) = v156;
      float v157 = *(float *)(a1 + 6420);
      float v158 = (float)(*(float *)(a1 + 6392) * *(float *)(a1 + 6408)) * v157;
      if (v157 == 0.0)
      {
        clr_vector((_DWORD *)(*(void *)(a1 + 4544) + 4 * v105), v156);
        uint64_t v155 = *(void *)(a1 + 6472);
        uint64_t v156 = *(void *)(a1 + 6480);
        float v157 = *(float *)(a1 + 6420);
      }
      else
      {
        uint64_t v159 = v156 + v105;
        while (v105 < v159)
        {
          *(float *)(*(void *)(a1 + 4544) + 4 * v105) = v158
                                                        + (float)((float)-(float)(*(float *)(a1 + 6424) * v158) * v158);
          float v157 = *(float *)(a1 + 6420);
          float v158 = v158 + v157;
          ++v105;
        }
      }
      *(float *)(a1 + 6416) = v158;
      *(void *)(a1 + 6512) = v155 - v156;
      *(void *)(a1 + 6520) = v155;
      *(void *)(a1 + 6528) = (uint64_t)v157;
      *(void *)(a1 + 6560 + 8 * *(void *)(a1 + 8232)) += v156;
      OUTLINED_FUNCTION_2_68();
      *(void *)(a1 + 6560 + 8 * v162) = 0;
      if (*(void *)(a1 + 6496) >= v100 - v160) {
        uint64_t v163 = v100 - v160;
      }
      else {
        uint64_t v163 = *(void *)(a1 + 6496);
      }
      clr_vector((_DWORD *)(*(void *)(a1 + 4544) + 4 * v161), v163);
      *(void *)(a1 + 6536) = *(void *)(a1 + 6496) - v163;
      *(void *)(a1 + 6560 + 8 * *(void *)(a1 + 8232)) += v163;
      compute_v_start((float *)a1);
    }
LABEL_199:
    OUTLINED_FUNCTION_2_68();
    *(void *)(a1 + 6560 + 8 * v164) = 0;
    OUTLINED_FUNCTION_2_68();
    *(void *)(v166 + 8 * v165) = 0;
    uint64_t v167 = a1 + 8256;
    uint64_t v97 = v242;
    if (*(unsigned char *)(a1 + 8663))
    {
      uint64_t v168 = 0;
      uint64_t v169 = 0;
      uint64_t v170 = 0;
      while (v169 < *(void *)(a1 + 8232) / 2)
      {
        uint64_t v171 = *(void *)(a1 + 16 * v169 + 6560) + v170;
        while (v168 < v171)
          *(unsigned char *)(v92 + v168++) = 0;
        uint64_t v170 = *(void *)(a1 + ((16 * v169) | 8) + 6560) + v171;
        while (v168 < v170)
          *(unsigned char *)(v92 + v168++) = 1;
        ++v169;
      }
    }
    pole_filter(v239, (float *)(*(void *)(a1 + 4544) + 4 * v240), *(void *)(a1 + 6448) - v240);
    if (!*(_DWORD *)(a1 + 3676))
    {
      if (*(float *)(a1 + 6356) > 0.0001)
      {
        if (*(void *)(a1 + 8184))
        {
          *(_WORD *)(a1 + 8656) = noise((unsigned char *)a1, *(_WORD *)(a1 + 8656));
          mul1_vector((__int16 *)(a1 + 8256), v91, *(float **)(a1 + 4544), *(void *)(a1 + 6448));
        }
        OUTLINED_FUNCTION_5_55();
        pole_filter(a1 + 424, v172, v173);
        zero_filter(a1 + 248, (float *)(a1 + 2020), *(float **)(a1 + 4544), *(void *)(a1 + 6448));
        OUTLINED_FUNCTION_5_55();
        pole_filter(v235, v174, v175);
        zero_filter(a1 + 336, (float *)(a1 + 2032), *(float **)(a1 + 4544), *(void *)(a1 + 6448));
        uint64_t v176 = *(void *)(a1 + 8160);
        uint64_t v177 = v176 + 4;
        uint64_t v178 = v235 + 88 * v176;
        while (v177 >= 6)
        {
          pole_filter(v178, *(float **)(a1 + 4544), *(void *)(a1 + 6448));
          --v177;
          v178 -= 88;
        }
        OUTLINED_FUNCTION_5_55();
        if (v183)
        {
          uint64_t v167 = a1 + 8256;
          int v184 = 2;
          uint64_t v97 = v242;
          if (*(float *)(a1 + 672) != 0.0)
          {
            *(v179 - 2) = *(float *)(a1 + 652);
            float v185 = *(float *)(a1 + 648);
            *(v179 - hashDelete(*((void **)this + 513), 1, 1) = v185;
            uint64_t v186 = 0;
            uint64_t v187 = 0;
            uint64_t v188 = 0;
            switch(*(_DWORD *)(a1 + 156))
            {
              case 0:
                uint64_t v189 = *(void *)(a1 + 680);
                if (v189 >= v180) {
                  uint64_t v190 = v180;
                }
                else {
                  uint64_t v190 = *(void *)(a1 + 680);
                }
                uint64_t v186 = v190 & ~(v190 >> 63);
                uint64_t v191 = (float *)(a1 + 648 - 4 * v189);
                uint64_t v192 = v186;
                for (int n = v179; v192; --v192)
                {
                  float v194 = (float)(v185 * *(v191 - 3)) + (float)(*(v191 - 6) * *n);
                  float v195 = *v191++;
                  float v185 = v194 + (float)(v195 * *(n - 2));
                  *n++ = v185;
                }
                *(void *)(a1 + 680) = v189 - v190;
                goto LABEL_240;
              case 1:
                goto LABEL_240;
              case 2:
                goto LABEL_228;
              case 3:
                goto LABEL_248;
              default:
                uint64_t v186 = 0;
                if (*(unsigned char *)(a1 + 8665)) {
                  goto LABEL_227;
                }
                break;
            }
LABEL_247:
            *(_DWORD *)(a1 + 156) = 3;
            uint64_t v188 = v186;
LABEL_248:
            uint64_t v205 = &v179[v188];
            uint64_t v186 = v188;
            while (2)
            {
              if (v186 < v180)
              {
                if (!*(unsigned char *)(v92 + v186))
                {
                  *(float *)&double v182 = *(v205 - 1);
                  *(float *)&double v181 = *(float *)(a1 + 604) * *(float *)&v182;
                  OUTLINED_FUNCTION_3_64(*(float *)&v181 + (float)(*(float *)(a1 + 600) * *v205), *(float *)(a1 + 608), v181, v182, *(v205 - 2));
                  continue;
                }
                uint64_t v197 = 3;
LABEL_296:
                *(void *)(a1 + 8240) = v197;
                *(_DWORD *)(a1 + 156) = 1;
LABEL_240:
                for (iuint64_t i = &v179[v186];
                      ;
                      OUTLINED_FUNCTION_3_64(*(float *)&v181 + (float)(v204[3] * *ii), v204[9], v181, v182, *(ii - 2)))
                {
                  if (v186 >= v180) {
                    goto LABEL_252;
                  }
                  uint64_t v202 = *(void *)(a1 + 8240);
                  if (*(unsigned char *)(v92 + v186))
                  {
                    uint64_t v203 = v202 - 1;
                    *(void *)(a1 + 8240) = v202 - 1;
                    if (v202 < 1)
                    {
LABEL_227:
                      *(_DWORD *)(a1 + 156) = v184;
                      uint64_t v187 = v186;
LABEL_228:
                      uint64_t v196 = &v179[v187];
                      uint64_t v186 = v187;
                      while (1)
                      {
                        if (v186 >= v180) {
                          goto LABEL_252;
                        }
                        if (!*(unsigned char *)(v92 + v186)) {
                          break;
                        }
                        *(float *)&double v182 = *(v196 - 1);
                        *(float *)&double v181 = *(float *)algn_268C713CC * *(float *)&v182;
                        OUTLINED_FUNCTION_3_64((float)(*(float *)algn_268C713CC * *(float *)&v182) + (float)(*(float *)f1d * *v196), *(float *)&dword_268C713D0, v181, v182, *(v196 - 2));
                      }
                      uint64_t v197 = -1;
                      goto LABEL_296;
                    }
                  }
                  else
                  {
                    uint64_t v203 = v202 + 1;
                    *(void *)(a1 + 8240) = v202 + 1;
                    if (v202 > 1) {
                      goto LABEL_247;
                    }
                  }
                  uint64_t v204 = (float *)&f1d[v203];
                  *(float *)&double v182 = *(ii - 1);
                  *(float *)&double v181 = v204[6] * *(float *)&v182;
                }
              }
              break;
            }
LABEL_252:
            uint64_t v206 = &v179[v186];
            uint64_t v207 = v206 - 2;
            if (v180 <= 1) {
              uint64_t v207 = (float *)(a1 + 648);
            }
            *(float *)(a1 + 652) = *v207;
            *(float *)(a1 + 648) = *(v206 - 1);
          }
        }
        else
        {
          pole_filter(a1 + 600, v179, v180);
          uint64_t v167 = a1 + 8256;
          uint64_t v97 = v242;
        }
        if (!*(void *)(a1 + 8184) && !*(void *)(a1 + 8176))
        {
          float v208 = *(float *)(a1 + 6356) - *(float *)(a1 + 6364);
          *(float *)(a1 + 6356) = v208;
          if (v208 < 0.00001) {
            *(_DWORD *)(a1 + 6356) = 0;
          }
        }
      }
      if (*(float *)(a1 + 6360) <= 0.0001) {
        goto LABEL_287;
      }
      if (*(void *)(a1 + 0x2000))
      {
        __int16 v209 = noise((unsigned char *)a1, *(_WORD *)(a1 + 8658));
        uint64_t v210 = 0;
        *(_WORD *)(a1 + 8658) = v209;
        uint64_t v211 = *(void *)(a1 + 6448) & ~(*(uint64_t *)(a1 + 6448) >> 63);
        while (v211 != v210)
        {
          *(float *)(v167 + 4 * v210 - 3700) = (float)*(__int16 *)(v167 + 2 * v210);
          ++v210;
        }
      }
      if (*(float *)(v237 + 172) != 0.0 && *(void *)(a1 + 0x2000))
      {
        OUTLINED_FUNCTION_5_55();
        mulf_vector((float *)(a1 + 4556), v214, v212, v213);
      }
      uint64_t v215 = 13;
      while (2)
      {
        if (v215 >= *(void *)(a1 + 8160) + 13)
        {
          uint64_t v97 = v242;
          if (!*(void *)(a1 + 0x2000))
          {
            float v226 = *(float *)(a1 + 6360) - *(float *)(a1 + 6364);
            *(float *)(a1 + 6360) = v226;
            if (v226 < 0.0001) {
              *(_DWORD *)(a1 + 6360) = 0;
            }
          }
          break;
        }
        uint64_t v216 = a1 + 88 * v215;
        float v218 = *(float *)(v216 + 232);
        uint64_t v217 = (float *)(v216 + 232);
        if (v218 != 0.0)
        {
          uint64_t v219 = v217 - 18;
          if (*(void *)(a1 + 0x2000))
          {
            uint64_t v220 = v215 - 13;
            uint64_t v221 = *(void *)(a1 + 6448);
            if (*((void *)&v243[-6] + v215 - 1))
            {
              for (juint64_t j = 0; (v221 & ~(v221 >> 63)) != jj; ++jj)
                *(_DWORD *)(*(void *)(a1 + 6168) + 4 * jj) = *(_DWORD *)(a1 + 4556 + 4 * jj);
              pole_filter((uint64_t)v219, *(float **)(a1 + 6168), v221);
              goto LABEL_280;
            }
          }
          else
          {
            uint64_t v221 = *(void *)(a1 + 6448);
            uint64_t v220 = v215 - 13;
          }
          parallel0_filter(v219, *(float **)(a1 + 6168), v221);
          if (!*((void *)v243 + v220))
          {
            float v223 = *v217 - *(float *)(a1 + 6364);
            *uint64_t v217 = v223;
            if (v223 < 0.0) {
              *uint64_t v217 = 0.0;
            }
          }
LABEL_280:
          uint64_t v224 = 0;
          uint64_t v225 = *(void *)(a1 + 6448) & ~(*(uint64_t *)(a1 + 6448) >> 63);
          while (v225 != v224)
          {
            *(float *)(*(void *)(a1 + 4544) + 4 * v224) = *(float *)(*(void *)(a1 + 6168) + 4 * v224)
                                                          + *(float *)(*(void *)(a1 + 4544) + 4 * v224);
            ++v224;
          }
        }
        ++v215;
        continue;
      }
    }
LABEL_287:
    uint64_t v227 = 0;
    uint64_t v96 = v241;
    while (1)
    {
      uint64_t m = *(void *)(a1 + 6448);
      if (v227 >= m) {
        break;
      }
      uint64_t v228 = (uint64_t)*(float *)(*(void *)(a1 + 4544) + 4 * v227);
      *(void *)(v93 + 8 * v227) = v228;
      if (v228 < 0) {
        uint64_t v228 = -v228;
      }
      if (v228 > *(void *)(a1 + 6552)) {
        *(void *)(a1 + 6552) = v228;
      }
      ++v227;
    }
LABEL_294:
    v96 -= v97;
    output_speech(a1, m);
  }
  *(float *)(a1 + 6352) = *(float *)(a1 + 6352) + (float)(*(float *)v237 * *(float *)(a1 + 3648));
  *(void *)(a1 + 6544) += v234;
  uint64_t v229 = v233;
  uint64_t v230 = (float *)(a1 + 88 * v233 + 232);
  while (v229 <= 20)
  {
    if (*v230 == 0.0)
    {
      *((void *)v230 - 3) = 0;
      int v231 = 0;
      float v232 = 0.0;
    }
    else
    {
      int v231 = v253[v229];
      float v232 = v247[v229];
      *((void *)v230 - hashDelete(*((void **)this + 513), 1, 1) = *(void *)(v230 - 17);
    }
    *((_DWORD *)v230 - 4) = v231;
    *(v230 - 3) = v232;
    ++v229;
    v230 += 22;
  }
  return 1;
}

double db2lin(uint64_t a1)
{
  if (a1 < 1) {
    return 0.0;
  }
  if (a1 >= 400) {
    a1 = 400;
  }
  ldiv_t v1 = ldiv(a1, 20);
  *(float *)&double result = p10[v1.quot] * l10[v1.rem];
  return result;
}

float pole_filter(uint64_t a1, float *a2, uint64_t a3)
{
  float result = *(float *)(a1 + 72);
  if (result != 0.0)
  {
    *(a2 - 2) = *(float *)(a1 + 52);
    uint64_t v4 = (float *)(a1 + 48);
    float v5 = *(float *)(a1 + 48);
    *(a2 - hashDelete(*((void **)this + 513), 1, 1) = v5;
    uint64_t v6 = *(void *)(a1 + 80);
    if (v6)
    {
      if (v6 >= a3) {
        uint64_t v7 = a3;
      }
      else {
        uint64_t v7 = *(void *)(a1 + 80);
      }
      uint64_t v8 = v7 & ~(v7 >> 63);
      uint64_t v9 = (float *)(a1 - 4 * v6 + 48);
      uint64_t v10 = a2;
      for (uint64_t i = v8; i; --i)
      {
        float v12 = (float)(*(v9 - 3) * v5) + (float)(*(v9 - 6) * *v10);
        float v13 = *v9++;
        float v5 = v12 + (float)(v13 * *(v10 - 2));
        *v10++ = v5;
      }
      *(void *)(a1 + 80) = v6 - v7;
    }
    else
    {
      uint64_t v8 = 0;
    }
    float v14 = &a2[v8 - 2];
    while (v8 < a3)
    {
      void v14[2] = (float)((float)(*(float *)(a1 + 4) * v14[1]) + (float)(*(float *)a1 * v14[2]))
             + (float)(*(float *)(a1 + 8) * *v14);
      ++v8;
      ++v14;
    }
    if (a3 > 1) {
      uint64_t v4 = v14;
    }
    *(float *)(a1 + 52) = *v4;
    float result = v14[1];
    *(float *)(a1 + 48) = result;
  }
  return result;
}

double compute_voicing_size(float *a1)
{
  float v1 = a1[1595];
  float v2 = a1[1598];
  float v3 = a1[1602];
  uint64_t v4 = (uint64_t)((float)((float)(v1 - v2) * v3) + 0.9999);
  double result = (float)(v3 * (float)-(float)(v2 - (float)(a1[1597] * v1))) + 0.4999;
  *((void *)a1 + 807) = v4;
  *((void *)a1 + 809) = (uint64_t)result;
  *((void *)a1 + 810) = (uint64_t)result;
  uint64_t v6 = v4 - (uint64_t)result;
  *((void *)a1 + 81hashDelete(*((void **)this + 513), 1, 1) = v6;
  *((void *)a1 + 812) = v6;
  return result;
}

float compute_v_start(float *a1)
{
  float result = (float)(a1[1598] + (float)((float)*((uint64_t *)a1 + 807) * a1[1603])) - a1[1595];
  a1[1598] = result;
  return result;
}

uint64_t noise(unsigned char *a1, __int16 a2)
{
  a1[8865] = 0;
  *((_WORD *)a1 + 4128) = 20077 * a2 + 12345;
  uint64_t v2 = *((void *)a1 + 806);
  float v3 = a1 + 8258;
  for (uint64_t i = 1; ; ++i)
  {
    __int16 v5 = *(v3 - 1);
    if (i >= v2) {
      break;
    }
    *v3++ = 20077 * v5 + 12345;
  }
  if (*((void *)a1 + 1022))
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = *((void *)a1 + 820);
    uint64_t v9 = (*((void *)a1 + 1029) / 2) & ~((*((void *)a1 + 1029) / 2) >> 63);
    while (v6 != v9)
    {
      while (v7 < v8)
      {
        *(_WORD *)&a1[2 * v7 + 8256] = *(__int16 *)&a1[2 * v7 + 8256] >> 1;
        ++v7;
      }
      uint64_t v10 = &a1[16 * v6];
      v7 += *((void *)v10 + 821);
      uint64_t v8 = v7 + *((void *)v10 + 822);
      ++v6;
    }
  }
  return v5;
}

uint64_t zero_filter(uint64_t result, float *a2, float *a3, uint64_t a4)
{
  if (*(float *)(result + 72) != 0.0)
  {
    float v5 = *(float *)(result + 48);
    float v4 = *(float *)(result + 52);
    uint64_t v6 = *(void *)(result + 80);
    if (v6)
    {
      if (v6 >= a4) {
        uint64_t v7 = a4;
      }
      else {
        uint64_t v7 = *(void *)(result + 80);
      }
      uint64_t v8 = v7 & ~(v7 >> 63);
      uint64_t v9 = (float *)(result - 4 * v6 + 24);
      uint64_t v10 = v8;
      float v11 = a3;
      while (1)
      {
        float v12 = v5;
        if (!v10) {
          break;
        }
        float v5 = *v11;
        *float v11 = (float)((float)(v12 * v9[3]) + (float)(*v9 * *v11)) + (float)(v9[6] * v4);
        ++v11;
        --v10;
        ++v9;
        float v4 = v12;
      }
      *(void *)(result + 80) = v6 - v7;
    }
    else
    {
      uint64_t v8 = 0;
    }
    while (1)
    {
      float v13 = v5;
      if (v8 >= a4) {
        break;
      }
      float v5 = a3[v8];
      a3[v8++] = (float)((float)(v13 * a2[1]) + (float)(*a2 * v5)) + (float)(a2[2] * v4);
      float v4 = v13;
    }
    if (a4 <= 1) {
      float v4 = *(float *)(result + 48);
    }
    *(float *)(result + 48) = v5;
    *(float *)(result + 52) = v4;
  }
  return result;
}

BOOL klattSetVolumeMultiplier(uint64_t a1, float a2)
{
  BOOL result = verifyKlattHandle((const char **)a1);
  if (result) {
    *(float *)(a1 + 148) = a2;
  }
  return result;
}

void OUTLINED_FUNCTION_0_81(uint64_t a1@<X8>)
{
  uint64_t v2 = a1 + 1;
  *(void *)(v1 + 8232) = v2;
  *(void *)(v1 + 8 * v2 + 6560) = 0;
}

void OUTLINED_FUNCTION_1_71(uint64_t a1@<X8>)
{
  *(void *)(v1 + 8 * *(void *)(v1 + 8232) + 6560) += a1;
}

void OUTLINED_FUNCTION_2_68()
{
  ++*(void *)(v0 + 8232);
}

float OUTLINED_FUNCTION_3_64(float a1, float a2, double a3, double a4, float a5)
{
  float result = a1 + (float)(a2 * a5);
  *float v5 = result;
  return result;
}

void OUTLINED_FUNCTION_4_60()
{
  *(void *)(v0 + 8 * *(void *)(v0 + 8232) + 6560) += v1;
}

void OUTLINED_FUNCTION_6_53()
{
  ++*(void *)(v0 + 8232);
}

double OUTLINED_FUNCTION_7_53()
{
  double result = v1[2];
  double *v1 = result;
  *(void *)(v0 + 6496) = *(void *)(v0 + 6488);
  return result;
}

void *dynaBufNew(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x1CE13EC1uLL);
  float v3 = v2;
  if (v2)
  {
    *uint64_t v2 = 0;
    if (a1) {
      uint64_t v4 = a1 + 1;
    }
    else {
      uint64_t v4 = 16;
    }
    if (v4) {
      size_t v5 = ((v4 - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
    }
    else {
      size_t v5 = 16;
    }
    if (resize((uint64_t)v2, v5))
    {
      *(unsigned char *)*float v3 = 0;
      v3[2] = 0;
      v3[3] = 0;
    }
    else
    {
      free(v3);
      return 0;
    }
  }
  return v3;
}

uint64_t resize(uint64_t a1, size_t size)
{
  if (!size) {
    return 0;
  }
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    uint64_t result = (uint64_t)malloc_type_realloc(v4, size, 0xC70FC592uLL);
    if (!result) {
      return result;
    }
    *(void *)a1 = result;
  }
  else
  {
    uint64_t result = (uint64_t)malloc_type_malloc(size, 0x82F6DFB8uLL);
    *(void *)a1 = result;
    if (!result) {
      return result;
    }
  }
  *(void *)(a1 + 8) = size;
  return 1;
}

uint64_t dynaBufDelete(void **a1)
{
  if (a1)
  {
    free(*a1);
    free(a1);
  }
  return 0;
}

uint64_t dynaBufReset(uint64_t result)
{
  *(void *)(result + 16) = 0;
  **(unsigned char **)uint64_t result = 0;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t dynaBufAddChar(uint64_t *a1, char a2, int a3)
{
  if (a3)
  {
    uint64_t v6 = a1[2];
  }
  else
  {
    uint64_t v7 = a1[2];
    uint64_t v6 = a1[3];
    if (v6 != v7) {
      goto LABEL_10;
    }
  }
  uint64_t result = setUsed((uint64_t)a1, v6 + 1);
  if (!result) {
    return result;
  }
  if (!a3)
  {
    uint64_t v7 = a1[2];
    uint64_t v6 = a1[3];
LABEL_10:
    if (v6 == v7 - 1)
    {
      *(unsigned char *)(*a1 + v7) = 0;
      uint64_t v6 = a1[3];
    }
    goto LABEL_12;
  }
  for (unint64_t i = a1[2]; ; --i)
  {
    uint64_t v6 = a1[3];
    if (i < v6 + 1) {
      break;
    }
    uint64_t v10 = (unsigned char *)(*a1 + i);
    *uint64_t v10 = *(v10 - 1);
  }
LABEL_12:
  uint64_t v11 = *a1;
  a1[3] = v6 + 1;
  *(unsigned char *)(v11 + v6) = a2;
  return 1;
}

uint64_t setUsed(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) >= (unint64_t)(a2 + 1)
    || (uint64_t result = resize(a1, (a2 & 0xFFFFFFFFFFFFFFF0) + 16), result))
  {
    *(void *)(a1 + 16) = a2;
    return 1;
  }
  return result;
}

uint64_t dynaBufAddString(uint64_t *a1, char *__s, int a3)
{
  uint64_t v4 = __s;
  size_t v6 = strlen(__s);
  size_t v7 = v6;
  if (a3 || (v8 = a1[2] - a1[3], size_t v7 = v6 - v8, v6 > v8))
  {
    if (v7)
    {
      uint64_t result = setUsed((uint64_t)a1, a1[2] + v7);
      if (!result) {
        return result;
      }
      *(unsigned char *)(*a1 + a1[2]) = 0;
      if (a3)
      {
        for (unint64_t i = a1[2] - 1; i >= a1[3] + v7; OUTLINED_FUNCTION_0_82(i))
          ;
      }
    }
  }
  while (1)
  {
    char v13 = *v4;
    if (!*v4) {
      break;
    }
    uint64_t v11 = *a1;
    uint64_t v12 = a1[3];
    a1[3] = v12 + 1;
    *(unsigned char *)(v11 + v12) = v13;
    ++v4;
  }
  return 1;
}

uint64_t dynaBufAddInt(uint64_t *a1, int a2, int a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  __sprintf_chk(__s, 0, 0x14uLL, "%d", a2);
  return dynaBufAddString(a1, __s, a3);
}

uint64_t dynaBufAddDynaBuf(uint64_t *a1, void *a2, int a3)
{
  if (a3)
  {
    unint64_t v6 = a2[2];
  }
  else
  {
    unint64_t v7 = a1[2] - a1[3];
    unint64_t v8 = a2[2];
    unint64_t v6 = v8 - v7;
    if (v8 <= v7) {
      goto LABEL_10;
    }
  }
  if (v6)
  {
    uint64_t result = setUsed((uint64_t)a1, a1[2] + v6);
    if (!result) {
      return result;
    }
    if (a3)
    {
      for (unint64_t i = a1[2]; i >= a1[3] + v6; OUTLINED_FUNCTION_0_82(i))
        ;
    }
  }
LABEL_10:
  for (unint64_t j = 0; j < a2[2]; ++j)
  {
    char v12 = *(unsigned char *)(*a2 + j);
    uint64_t v13 = *a1;
    uint64_t v14 = a1[3];
    a1[3] = v14 + 1;
    *(unsigned char *)(v13 + v14) = v12;
  }
  *(unsigned char *)(*a1 + a1[2]) = 0;
  return 1;
}

uint64_t *dynaBufDeleteChars(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result[2];
  unint64_t v2 = result[3];
  if (v3 - v2 <= a2)
  {
    uint64_t v5 = *result;
    result[2] = v2;
    *(unsigned char *)(v5 + v2) = 0;
  }
  else if (a2)
  {
    unint64_t v4 = v3 - a2;
    result[2] = v4;
    while (v2 <= v4)
    {
      *(unsigned char *)(*result + v2) = *(unsigned char *)(*result + v2 + a2);
      ++v2;
      unint64_t v4 = result[2];
    }
  }
  return result;
}

uint64_t dynaBufLength(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t dynaBufMoveRel(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0)
  {
    unint64_t v3 = -a2;
    unint64_t v4 = *(void *)(a1 + 24);
    BOOL v5 = v4 >= v3;
    unint64_t v2 = v4 - v3;
    if (!v5) {
      unint64_t v2 = 0;
    }
  }
  else
  {
    unint64_t v2 = *(void *)(a1 + 24) + a2;
    if (v2 >= *(void *)(a1 + 16)) {
      unint64_t v2 = *(void *)(a1 + 16);
    }
  }
  return OUTLINED_FUNCTION_1_72(a1, v2);
}

uint64_t dynaBufMoveAbs(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    uint64_t v2 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v2 = a2;
  }
  return OUTLINED_FUNCTION_1_72(a1, v2);
}

BOOL dynaBufAtEnd(uint64_t a1)
{
  return *(void *)(a1 + 24) == *(void *)(a1 + 16);
}

uint64_t dynaBufChar(void *a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0 || a1[2] < (unint64_t)a2) {
    return 0;
  }
  else {
    return *(char *)(*a1 + a2);
  }
}

uint64_t dynaBufCurrentChar(uint64_t *a1, int a2)
{
  unint64_t v2 = a1[3];
  if (a2 && v2 < a1[2])
  {
    uint64_t v3 = *a1;
    a1[3] = v2 + 1;
  }
  else
  {
    uint64_t v3 = *a1;
  }
  return *(char *)(v3 + v2);
}

uint64_t dynaBufContents(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t dynaBufExtract(void *a1, unsigned int a2, uint64_t a3, int a4)
{
  if ((a2 & 0x80000000) != 0 || a1[2] < (unint64_t)a2) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a4;
  while (a4 != v4)
  {
    if (a1[2] <= (unint64_t)a2 + v4)
    {
      uint64_t v5 = v4;
      break;
    }
    *(unsigned char *)(a3 + v4) = *(unsigned char *)(*a1 + a2 + v4);
    ++v4;
  }
  *(unsigned char *)(a3 + v5) = 0;
  return a3;
}

void OUTLINED_FUNCTION_0_82(uint64_t a1@<X8>)
{
  *(unsigned char *)(v2 + ahashDelete(*((void **)this + 513), 1, 1) = *(unsigned char *)(v2 + a1 + v1);
}

uint64_t OUTLINED_FUNCTION_1_72@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 24) = a2;
  return a2;
}

uint64_t errorIgnore()
{
  return 0;
}

uint64_t errorStd(uint64_t a1, const char *a2, char *a3, ...)
{
  va_start(va, a3);
  uint64_t v4 = (FILE **)MEMORY[0x263EF8348];
  if (a2 && *a2) {
    fprintf((FILE *)*MEMORY[0x263EF8348], "%s: ", a2);
  }
  vfprintf(*v4, a3, va);
  fwrite(".\n", 2uLL, 1uLL, *v4);
  return 0;
}

int strcasecmp(const char *a1, const char *a2)
{
  while (1)
  {
    __darwin_ct_rune_t v4 = *a2;
    int v5 = *(unsigned __int8 *)a2;
    if (!*a1) {
      goto LABEL_10;
    }
    if (!*a2) {
      return 1;
    }
    __darwin_ct_rune_t v6 = __tolower(*a1);
    if (v6 != __tolower(v4)) {
      break;
    }
    ++a1;
    ++a2;
  }
  __darwin_ct_rune_t v7 = *a2;
  int v5 = v7;
  if (!*a1)
  {
LABEL_10:
    if (v5) {
      return -1;
    }
    else {
      return 0;
    }
  }
  if (!(_BYTE)v7) {
    return 1;
  }
  __darwin_ct_rune_t v8 = __tolower(*a1);
  if (v8 < __tolower(v7)) {
    return -1;
  }
  else {
    return 1;
  }
}

char *__cdecl strdup(const char *__s1)
{
  size_t v2 = strlen(__s1);
  uint64_t result = (char *)malloc_type_malloc(v2 + 1, 0xEF87DF6uLL);
  if (result) {
    return strcpy(result, __s1);
  }
  return result;
}

uint64_t atoiOK(char *a1, _DWORD *a2)
{
  int v3 = *a1;
  *a2 = 0;
  if (v3 == 45) {
    __darwin_ct_rune_t v4 = a1 + 1;
  }
  else {
    __darwin_ct_rune_t v4 = a1;
  }
  while (1)
  {
    char v5 = *v4;
    if (!*v4) {
      return 0;
    }
    if (!isspace(*v4)) {
      break;
    }
    ++v4;
  }
  int v6 = 0;
  for (char i = v5; ; char i = v11)
  {
    int v8 = i;
    unsigned int v9 = i - 48;
    if (v9 >= 0xA) {
      break;
    }
    if (v6 > 214748364) {
      return 0;
    }
    int v10 = 10 * v6;
    *a2 = 10 * v6;
    if (10 * v6 > -2147483601 - v8) {
      return 0;
    }
    int v6 = v10 + v9;
    *a2 = v10 + v9;
    char v11 = *++v4;
  }
  uint64_t v13 = 1;
  while (i)
  {
    uint64_t result = isspace(i);
    if (!result) {
      return result;
    }
    char i = v4[v13++];
  }
  if (v3 == 45) {
    *a2 = -v6;
  }
  return 1;
}

uint64_t cleanLiteral(unsigned __int8 *a1, int a2, unsigned __int8 a3)
{
  int v3 = a1;
  if (a2)
  {
    if (*a1 != a2) {
      return 0xFFFFFFFFLL;
    }
    int v3 = a1 + 1;
  }
  uint64_t v4 = 0;
  for (i = v3; ; int v3 = i)
  {
    int v7 = *i++;
    int v6 = v7;
    if (v7 == a3 || v6 == 0) {
      break;
    }
    if (v6 == 92)
    {
      char i = v3 + 2;
      int v9 = (char)v3[1];
      if ((v9 - 48) >= 8)
      {
        if (v9 == 98)
        {
          LOBYTE(v6) = 8;
        }
        else if (v9 == 102)
        {
          LOBYTE(v6) = 12;
        }
        else
        {
          if (v9 == 116) {
            char v14 = 9;
          }
          else {
            char v14 = v3[1];
          }
          if (v9 == 114) {
            char v14 = 13;
          }
          if (v9 == 110) {
            LOBYTE(v6) = 10;
          }
          else {
            LOBYTE(v6) = v14;
          }
        }
      }
      else
      {
        uint64_t v10 = 0;
        LOBYTE(v6) = v3[1] - 48;
        char v11 = v3 + 4;
        while (1)
        {
          if (v10 == 2)
          {
            char i = v11;
            goto LABEL_32;
          }
          int v12 = (char)i[v10];
          if (v12 > 55 || (v12 - 48) > 9) {
            break;
          }
          LOBYTE(v6) = v12 + 8 * v6 - 48;
          ++v10;
        }
        i += v10;
      }
    }
LABEL_32:
    *a1++ = v6;
    uint64_t v4 = (v4 + 1);
  }
  *a1 = 0;
  return v4;
}

uint64_t strncpyWithEllipsis(uint64_t result, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = 0; a3 != i; ++i)
  {
    if (!*(unsigned char *)(a2 + i))
    {
      a3 = i;
      break;
    }
    *(unsigned char *)(result + i) = *(unsigned char *)(a2 + i);
  }
  *(unsigned char *)(result + a3) = 0;
  if (*(unsigned char *)(a2 + a3))
  {
    uint64_t v4 = 0;
    int v5 = a3 - 1;
    while (v4 != -3)
    {
      if (((v5 + v4) & 0x80000000) == 0) {
        *(unsigned char *)(result + (v5 + v4)) = 46;
      }
      --v4;
    }
  }
  return result;
}

uint64_t changeExtension(uint64_t result, uint64_t a2, int a3, unsigned char *a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = a3 & ~(a3 >> 31);
  while (v5 != v4)
  {
    int v6 = *(unsigned __int8 *)(result + v4);
    if (!*(unsigned char *)(result + v4) || v6 == 46)
    {
      if (a4 && *a4)
      {
        uint64_t v7 = 0;
        LODWORD(v5) = v4 + 1;
        *(unsigned char *)(a2 + v4) = 46;
        if (a3 > (int)v4 + 1) {
          LODWORD(v5) = a3;
        }
        while ((int)v4 + (int)v7 + 1 < a3)
        {
          if (!a4[v7])
          {
            LODWORD(v5) = v4 + v7 + 1;
            goto LABEL_15;
          }
          *(unsigned char *)(a2 + v7 + v4 + hashDelete(*((void **)this + 513), 1, 1) = a4[v7];
          ++v7;
        }
      }
      else
      {
        LODWORD(v5) = v4;
      }
      break;
    }
    *(unsigned char *)(a2 + v4++) = v6;
  }
LABEL_15:
  *(unsigned char *)(a2 + (int)v5) = 0;
  return result;
}

uint64_t changeMatchingExt(uint64_t a1, unsigned char *a2, uint64_t a3, int a4, unsigned char *a5)
{
  uint64_t result = hasExtension(a1, a2);
  if (result)
  {
    return changeExtension(a1, a3, a4, a5);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = a4 & ~(a4 >> 31);
    while (1)
    {
      if (v11 == v10)
      {
        uint64_t v10 = a4 & ~(a4 >> 31);
        goto LABEL_11;
      }
      if (!*(unsigned char *)(a1 + v10)) {
        break;
      }
      *(unsigned char *)(a3 + v10) = *(unsigned char *)(a1 + v10);
      ++v10;
    }
    LODWORD(v1hashDelete(*((void **)this + 513), 1, 1) = v10;
LABEL_11:
    *(unsigned char *)(a3 + v10) = 46;
    if (a4 <= (int)v11 + 1) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = a4;
    }
    while (++v10 < a4)
    {
      if (!*a5)
      {
        unsigned int v12 = v10;
        break;
      }
      *(unsigned char *)(a3 + v10) = *a5++;
    }
    *(unsigned char *)(a3 + v12) = 0;
  }
  return result;
}

BOOL hasExtension(BOOL result, unsigned char *a2)
{
  if (result)
  {
    for (uint64_t i = (unsigned __int8 *)(result + 1); ; ++i)
    {
      int v3 = *(i - 1);
      if (!*(i - 1) || v3 == 46) {
        break;
      }
    }
    if (a2 && *(i - 1))
    {
      if (!*a2) {
        return 0;
      }
      do
      {
        int v5 = *i++;
        int v4 = v5;
        int v7 = *a2++;
        int v6 = v7;
      }
      while (v4 == v7 && v6 != 0);
      return v4 == v6;
    }
    uint64_t result = v3 == 0;
    if (a2 && !*(i - 1)) {
      return *a2 == 0;
    }
  }
  return result;
}

uint64_t stripPath(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = 0;
LABEL_3:
    for (uint64_t i = v1; *(unsigned char *)(result + i); ++i)
    {
      if (*(unsigned char *)(result + i) == 47)
      {
        uint64_t v1 = i + 1;
        goto LABEL_3;
      }
    }
    result += (int)v1;
  }
  return result;
}

unsigned char *stripFileName(unsigned char *result, unsigned char *a2)
{
  size_t v2 = a2;
  while (1)
  {
    int v3 = *result;
    if (!*result) {
      break;
    }
    if (v3 == 47) {
      size_t v2 = a2;
    }
    *a2++ = v3;
    ++result;
  }
  *size_t v2 = 0;
  return result;
}

uint64_t bareFilename(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = stripPath(a1);
  return changeExtension(v5, a2, a3, 0);
}

const char *fileExists(const char *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*result)
    {
      bzero(&v2, 0x90uLL);
      return (const char *)(stat(v1, &v2) == 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const char *filenameModTime(const char *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (!*result) {
      return 0;
    }
    bzero(&v2, 0x90uLL);
    if (stat(v1, &v2) < 0) {
      return 0;
    }
    else {
      return (const char *)v2.st_mtimespec.tv_sec;
    }
  }
  return result;
}

__darwin_time_t fileModTime(__darwin_time_t result)
{
  if (result)
  {
    uint64_t v1 = (FILE *)result;
    bzero(&v3, 0x90uLL);
    int v2 = fileno(v1);
    if (fstat(v2, &v3) < 0) {
      return 0;
    }
    else {
      return v3.st_mtimespec.tv_sec;
    }
  }
  return result;
}

uint64_t fileFindProgDir(uint64_t __s, char *a2)
{
  if (__s)
  {
    int v2 = (char *)__s;
    if (!*(unsigned char *)__s) {
      return 0;
    }
    if (strchr((char *)__s, 47))
    {
      stripFileName(v2, a2);
    }
    else
    {
      __s = fileFindInPath();
      if (!__s) {
        return __s;
      }
      size_t v4 = strlen(a2);
      a2[v4 - strlen(v2)] = 0;
    }
    return 1;
  }
  return __s;
}

uint64_t fileFindInPath()
{
  uint64_t v0 = (const char *)MEMORY[0x270FA5388]();
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!v0) {
    return 0;
  }
  int v2 = v0;
  if (!*v0) {
    return 0;
  }
  stat v3 = v1;
  if (fileExists(v0))
  {
    if (v3) {
      strcpy(v3, v2);
    }
    return 1;
  }
  uint64_t v5 = getenv("PATH");
  if (!v5) {
    return 0;
  }
  int v6 = v5;
  size_t v7 = strlen(v5);
  int v8 = (char *)malloc_type_malloc(v7 + 1, 0xE885C551uLL);
  int v9 = strcpy(v8, v6);
  if (strtok(v9, ":"))
  {
    while (1)
    {
      __strcpy_chk();
      uint64_t v10 = &__s[strlen(__s)];
      *uint64_t v10 = 47;
      strcpy(v10 + 1, v2);
      if (fileExists(__s)) {
        break;
      }
      if (!strtok(0, ":")) {
        goto LABEL_11;
      }
    }
    if (v3) {
      strcpy(v3, __s);
    }
    uint64_t v4 = 1;
  }
  else
  {
LABEL_11:
    uint64_t v4 = 0;
  }
  free(v8);
  return v4;
}

void *hashNew(int a1, char a2, int a3)
{
  int v6 = malloc_type_malloc(0x18uLL, 0x10A0040E78F1B74uLL);
  size_t v7 = v6;
  if (v6)
  {
    if (a1 < 1)
    {
      a1 = 211;
    }
    else if (a3)
    {
      if ((a1 & 1) == 0 && a1 < 0x7FFFFFFE) {
        ++a1;
      }
LABEL_9:
      if (a1 <= 2147483645)
      {
        int v9 = 2;
        while (v9 < a1)
        {
          if (!(a1 % v9++))
          {
            a1 += 2;
            goto LABEL_9;
          }
        }
      }
    }
    *(_DWORD *)int v6 = a1;
    *((unsigned char *)v6 + 4) = a2;
    uint64_t v11 = malloc_type_calloc(a1, 8uLL, 0x2004093837F09uLL);
    v7[1] = v11;
    if (!v11)
    {
      free(v7);
      return 0;
    }
  }
  return v7;
}

uint64_t hashDelete(void *a1, int a2, int a3)
{
  if (a1)
  {
    if (a1[1])
    {
      for (uint64_t i = 0; ; ++i)
      {
        size_t v7 = (void *)a1[1];
        if (i >= *(int *)a1) {
          break;
        }
        uint64_t v8 = v7[i];
        if (v8)
        {
          do
          {
            uint64_t v9 = *(void *)(v8 + 8);
            if (a2 && *((unsigned char *)a1 + 4)) {
              free(*(void **)v8);
            }
            if (a3) {
              free(*(void **)(v8 + 16));
            }
            free((void *)v8);
            uint64_t v8 = v9;
          }
          while (v9);
        }
      }
      free(v7);
    }
    free(a1);
  }
  return 0;
}

uint64_t hashInsertInt(uint64_t a1, int a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_83();
  uint64_t v9 = (v6 - v8 * v7);
  uint64_t v11 = *(void *)(*(void *)(v10 + 8) + 8 * v9);
  uint64_t result = (uint64_t)OUTLINED_FUNCTION_1_73();
  if (result)
  {
    *(_DWORD *)uint64_t result = a2;
    *(void *)(result + 8) = v11;
    *(void *)(result + 16) = a3;
    *(void *)(*(void *)(a1 + 8) + 8 * v9) = result;
    return 1;
  }
  return result;
}

uint64_t hashLookupInt(uint64_t a1, unsigned int a2)
{
  for (uint64_t i = (_DWORD **)(*(void *)(a1 + 8)
                      + 8
                      * (((((unsigned __int16)a2 ^ HIWORD(a2)) >> 10) & 0xF ^ (unsigned __int16)a2 ^ HIWORD(a2))
                       % *(_DWORD *)a1)); ; uint64_t i = (_DWORD **)(v3 + 2))
  {
    stat v3 = *i;
    if (!v3) {
      return 0;
    }
    if (*v3 == a2) {
      break;
    }
  }
  return OUTLINED_FUNCTION_2_69((uint64_t)v3);
}

uint64_t hashDeleteInt()
{
  OUTLINED_FUNCTION_0_83();
  uint64_t v5 = (v2 - v4 * v3);
  uint64_t v7 = *(void *)(v6 + 8);
  int v8 = *(void **)(v7 + 8 * v5);
  if (*(_DWORD *)v8 == v0)
  {
    *(void *)(v7 + 8 * v5) = *((void *)v8 + 1);
    if (v1) {
LABEL_3:
    }
      free(*((void **)v8 + 2));
  }
  else
  {
    do
    {
      uint64_t v10 = v8;
      int v8 = (void *)*((void *)v8 + 1);
      if (!v8) {
        return 0;
      }
    }
    while (*(_DWORD *)v8 != v0);
    v10[1] = *((void *)v8 + 1);
    if (v1) {
      goto LABEL_3;
    }
  }
  free(v8);
  return 1;
}

uint64_t hashMoveInt(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = ((((unsigned __int16)a2 ^ HIWORD(a2)) >> 10) & 0xF ^ (unsigned __int16)a2 ^ HIWORD(a2))
     % *(_DWORD *)a1;
  uint64_t v5 = (uint64_t *)(*(void *)(a1 + 8) + 8 * v4);
  while (1)
  {
    uint64_t v6 = *v5;
    if (!*v5) {
      return 0;
    }
    if (*(_DWORD *)v6 == a2) {
      break;
    }
    uint64_t v5 = (uint64_t *)(v6 + 8);
    uint64_t v3 = v6;
  }
  unsigned int v8 = ((((unsigned __int16)a3 ^ HIWORD(a3)) >> 10) & 0xF ^ (unsigned __int16)a3 ^ HIWORD(a3))
     % *(_DWORD *)a1;
  *(_DWORD *)uint64_t v6 = a3;
  if (v8 != v4)
  {
    if (v3) {
      uint64_t v9 = (void *)(v3 + 8);
    }
    else {
      uint64_t v9 = (void *)(*(void *)(a1 + 8) + 8 * v4);
    }
    *uint64_t v9 = *(void *)(v6 + 8);
    uint64_t v10 = *(void *)(a1 + 8);
    *(void *)(v6 + 8) = *(void *)(v10 + 8 * v8);
    *(void *)(v10 + 8 * v8) = v6;
  }
  return OUTLINED_FUNCTION_2_69(v6);
}

uint64_t hashInsertString(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  int v6 = stringHashFunction((int *)a1, a2);
  uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 8 * v6);
  uint64_t result = (uint64_t)OUTLINED_FUNCTION_1_73();
  if (result)
  {
    *(void *)(result + 8) = v7;
    *(void *)(result + 16) = a3;
    *(void *)uint64_t result = a2;
    *(void *)(*(void *)(a1 + 8) + 8 * v6) = result;
    return 1;
  }
  return result;
}

uint64_t stringHashFunction(int *a1, unsigned char *a2)
{
  unint64_t v2 = 0;
  while (*a2)
  {
    unint64_t v2 = (char)*a2 + 16 * v2;
    if ((v2 & 0xF0000000) != 0) {
      unint64_t v2 = v2 & 0xFFFFFFFF0FFFFFFFLL ^ ((unint64_t)(v2 & 0xF0000000) >> 24);
    }
    ++a2;
  }
  return (v2 % *a1);
}

uint64_t hashLookupString(uint64_t a1, char *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = (uint64_t *)(v3 + 8 * (int)stringHashFunction((int *)a1, a2)); ; uint64_t i = (uint64_t *)(v5 + 8))
  {
    uint64_t v5 = *i;
    if (!*i) {
      return 0;
    }
    if (!strcmp(*(const char **)v5, a2)) {
      break;
    }
  }
  return *(void *)(v5 + 16);
}

uint64_t hashDeleteString(uint64_t a1, char *a2, int a3, int a4)
{
  int v8 = stringHashFunction((int *)a1, a2);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(v9 + 8 * v8);
  if (!strcmp(*(const char **)v10, a2))
  {
    *(void *)(v9 + 8 * v8) = *(void *)(v10 + 8);
    if (a3) {
LABEL_7:
    }
      free(*(void **)v10);
  }
  else
  {
    do
    {
      uint64_t v11 = v10;
      uint64_t v10 = *(void *)(v10 + 8);
      if (!v10) {
        return 0;
      }
    }
    while (strcmp(*(const char **)v10, a2));
    *(void *)(v11 + 8) = *(void *)(v10 + 8);
    if (a3) {
      goto LABEL_7;
    }
  }
  if (a4) {
    free(*(void **)(v10 + 16));
  }
  free((void *)v10);
  return 1;
}

uint64_t hashMoveString(uint64_t a1, char *a2, unsigned char *a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = (int)stringHashFunction((int *)a1, a2);
  int v8 = (uint64_t *)(*(void *)(a1 + 8) + 8 * v7);
  while (1)
  {
    uint64_t v9 = *v8;
    if (!*v8) {
      return 0;
    }
    if (!strcmp(*(const char **)v9, a2)) {
      break;
    }
    int v8 = (uint64_t *)(v9 + 8);
    uint64_t v6 = v9;
  }
  int v11 = stringHashFunction((int *)a1, a3);
  *(void *)uint64_t v9 = a3;
  if (v11 != v7)
  {
    if (v6) {
      unsigned int v12 = (void *)(v6 + 8);
    }
    else {
      unsigned int v12 = (void *)(*(void *)(a1 + 8) + 8 * v7);
    }
    *unsigned int v12 = *(void *)(v9 + 8);
    uint64_t v13 = *(void *)(a1 + 8);
    *(void *)(v9 + 8) = *(void *)(v13 + 8 * v11);
    *(void *)(v13 + 8 * v1hashDelete(*((void **)this + 513), 1, 1) = v9;
  }
  return *(void *)(v9 + 16);
}

BOOL hashIterConstruct(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v2 = **(void **)(a2 + 8);
  *(void *)(a1 + 16) = v2;
  return v2 || hashIterNext(a1);
}

BOOL hashIterNext(uint64_t a1)
{
  uint64_t i = *(void *)(a1 + 16);
  if (!i) {
    goto LABEL_4;
  }
  for (uint64_t i = *(void *)(i + 8); ; uint64_t i = *(void *)(*(void *)(*(void *)a1 + 8) + 8 * v2))
  {
    *(void *)(a1 + 16) = i;
LABEL_4:
    if (i) {
      break;
    }
    uint64_t v2 = *(int *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v2;
    if ((int)v2 >= **(_DWORD **)a1)
    {
      *(_DWORD *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      return i != 0;
    }
  }
  return i != 0;
}

uint64_t hashIterInt(uint64_t a1)
{
  return **(unsigned int **)(a1 + 16);
}

uint64_t hashIterString(uint64_t a1)
{
  return **(void **)(a1 + 16);
}

uint64_t hashIterRef(uint64_t a1)
{
  return OUTLINED_FUNCTION_2_69(*(void *)(a1 + 16));
}

void *OUTLINED_FUNCTION_1_73()
{
  return malloc_type_malloc(0x18uLL, 0x10F2040DD287011uLL);
}

uint64_t OUTLINED_FUNCTION_2_69@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 + 16);
}

uint64_t ECollection::size(ECollection *this)
{
  ECollectIter::ECollectIter(&v3, (uint64_t)this);
  uint64_t v1 = 0;
  while ((**(unsigned int (***)(uint64_t))v4)(v4))
  {
    (*(void (**)(uint64_t, void))(*(void *)v4 + 40))(v4, 0);
    uint64_t v1 = (v1 + 1);
  }
  ECollectIter::~ECollectIter((ECollectIter *)&v3);
  return v1;
}

void sub_2400400A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ECollectIter::inBounds(ECollectIter *this)
{
  return (***((uint64_t (****)(void))this + 1))(*((void *)this + 1));
}

uint64_t ECollectIter::operator++(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t EList::reset(EList *this)
{
  while (1)
  {
    uint64_t result = (**(uint64_t (***)(EList *))this)(this);
    if (result) {
      break;
    }
    (*(void (**)(EList *))(*(void *)this + 64))(this);
  }
  return result;
}

void ESList::ESList(ESList *this, const ESList *a2)
{
  *((void *)this + hashDelete(*((void **)this + 513), 1, 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26F3F2DA8;
  while (1)
  {
    OUTLINED_FUNCTION_11_52();
    if (!v2) {
      break;
    }
    OUTLINED_FUNCTION_6_54();
    uint64_t v3 = OUTLINED_FUNCTION_4_61();
    v4(v3);
    OUTLINED_FUNCTION_12_50();
  }
}

BOOL ESListIter::inBounds(ESListIter *this)
{
  return *((void *)this + 2) != 0;
}

uint64_t ESListIter::operator()(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t ESListIter::operator++(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(v1 + 16);
  return v1;
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 16);
  *(void *)(a1 + 16) = v1;
  return v1;
}

EList *ESList::operator=(EList *a1)
{
  EList::reset(a1);
  while (1)
  {
    OUTLINED_FUNCTION_11_52();
    if (!v2) {
      break;
    }
    OUTLINED_FUNCTION_6_54();
    uint64_t v3 = OUTLINED_FUNCTION_4_61();
    v4(v3);
    OUTLINED_FUNCTION_12_50();
  }
  return a1;
}

void ESList::addToHead()
{
}

void ESList::addToTail()
{
}

uint64_t ESList::addToTail(ESList *this, ESList *a2)
{
  if ((**(unsigned int (***)(ESList *))this)(this)) {
    uint64_t v4 = (void *)((char *)this + 8);
  }
  else {
    uint64_t v4 = (void *)(*((void *)this + 2) + 16);
  }
  *uint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *((void *)a2 + 2);
  if (v5) {
    *((void *)this + 2) = v5;
  }
  *((void *)a2 + hashDelete(*((void **)this + 513), 1, 1) = 0;
  *((void *)a2 + 2) = 0;
  return 1;
}

uint64_t ESList::addAfter()
{
  OUTLINED_FUNCTION_9_52();
  if (!v1) {
    OUTLINED_FUNCTION_2_70();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v0 + 48);
  return v2();
}

void ESList::removeHead(ESList *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 == *((void *)this + 2))
  {
    uint64_t v3 = 0;
    *((void *)this + 2) = 0;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 16);
  }
  *((void *)this + hashDelete(*((void **)this + 513), 1, 1) = v3;
  OUTLINED_FUNCTION_0_84();
}

void ESList::removeAfter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = *(void *)(v4 + 16);
  if (v4 == *(void *)(a1 + 16)) {
    *(void *)(a1 + 16) = v3;
  }
  OUTLINED_FUNCTION_0_84();
}

void ESList::newIter(ESList *this)
{
}

BOOL ESListIter::atEnd(ESListIter *this)
{
  return *((void *)this + 2) == *(void *)(*((void *)this + 1) + 16);
}

uint64_t ESListIter::resetToTail(ESListIter *this)
{
  return OUTLINED_FUNCTION_10_52((uint64_t)this, *(void *)(*((void *)this + 1) + 16));
}

uint64_t ESListIter::reset(ESListIter *this)
{
  return OUTLINED_FUNCTION_10_52((uint64_t)this, *(void *)(*((void *)this + 1) + 8));
}

void EDList::EDList(EDList *this, const EDList *a2)
{
  *((void *)this + hashDelete(*((void **)this + 513), 1, 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26F3F2E18;
  while (1)
  {
    OUTLINED_FUNCTION_11_52();
    if (!v2) {
      break;
    }
    OUTLINED_FUNCTION_6_54();
    uint64_t v3 = OUTLINED_FUNCTION_4_61();
    v4(v3);
    OUTLINED_FUNCTION_12_50();
  }
}

BOOL EDListIter::inBounds(EDListIter *this)
{
  return *((void *)this + 2) != 0;
}

uint64_t EDListIter::operator()(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t EDListIter::operator++(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(v1 + 16);
  return v1;
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 16);
  *(void *)(a1 + 16) = v1;
  return v1;
}

EList *EDList::operator=(EList *a1)
{
  EList::reset(a1);
  while (1)
  {
    OUTLINED_FUNCTION_11_52();
    if (!v2) {
      break;
    }
    OUTLINED_FUNCTION_6_54();
    uint64_t v3 = OUTLINED_FUNCTION_4_61();
    v4(v3);
    OUTLINED_FUNCTION_12_50();
  }
  return a1;
}

void EDList::addToHead()
{
}

void EDList::addToTail()
{
}

uint64_t EDList::addAfter()
{
  OUTLINED_FUNCTION_9_52();
  if (!v1) {
    OUTLINED_FUNCTION_1_74();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v0 + 48);
  return v2();
}

uint64_t EDList::addBefore(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) != a1[1]) {
    OUTLINED_FUNCTION_1_74();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*a1 + 40);
  return v2();
}

void EDList::removeHead(EDList *this)
{
  char v1 = (void *)((char *)this + 16);
  uint64_t v2 = *((void *)this + 1);
  if (v2 == *((void *)this + 2))
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 16);
    char v1 = (void *)(v3 + 24);
  }
  void *v1 = 0;
  *((void *)this + hashDelete(*((void **)this + 513), 1, 1) = v3;
  OUTLINED_FUNCTION_0_84();
}

void EDList::removeTail(EDList *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = (void *)((char *)this + 8);
  if (*((void *)this + 1) == v1)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = *(void *)(v1 + 24);
    uint64_t v2 = (void *)(v3 + 16);
  }
  *uint64_t v2 = 0;
  *((void *)this + 2) = v3;
  OUTLINED_FUNCTION_0_84();
}

uint64_t EDList::removeAt(EDList *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3 != *((void *)a1 + 1))
  {
    if (v3 != *((void *)a1 + 2))
    {
      uint64_t v4 = *(void *)(v3 + 16);
      *(void *)(v4 + 24) = *(void *)(v3 + 24);
      *(void *)(*(void *)(v3 + 24) + 16) = v4;
      OUTLINED_FUNCTION_0_84();
    }
    OUTLINED_FUNCTION_8_52(a1);
  }
  return (*(uint64_t (**)(EDList *))(*(void *)a1 + 64))(a1);
}

void EDList::removeAfter(EDList *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4 != *((void *)a1 + 2))
  {
    uint64_t v5 = *(void *)(v4 + 16);
    *(void *)(v5 + 24) = v3;
    *(void *)(v3 + 16) = v5;
    OUTLINED_FUNCTION_0_84();
  }
  OUTLINED_FUNCTION_8_52(a1);
}

void EDList::newIter(EDList *this)
{
}

BOOL EDListIter::atStart(EDListIter *this)
{
  return *((void *)this + 2) == *(void *)(*((void *)this + 1) + 8);
}

BOOL EDListIter::atEnd(EDListIter *this)
{
  return *((void *)this + 2) == *(void *)(*((void *)this + 1) + 16);
}

uint64_t EDListIter::resetToTail(EDListIter *this)
{
  return OUTLINED_FUNCTION_10_52((uint64_t)this, *(void *)(*((void *)this + 1) + 16));
}

uint64_t EDListIter::reset(EDListIter *this)
{
  return OUTLINED_FUNCTION_10_52((uint64_t)this, *(void *)(*((void *)this + 1) + 8));
}

BOOL ESList::isEmpty(ESList *this)
{
  return *((void *)this + 1) == 0;
}

void sub_240040B40(_Unwind_Exception *a1)
{
  MEMORY[0x2455DD950](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

uint64_t ESListIter::next(ESListIter *this)
{
  return *(void *)(*((void *)this + 2) + 16);
}

BOOL EDList::isEmpty(EDList *this)
{
  return *((void *)this + 1) == 0;
}

uint64_t EDList::head(EDList *this)
{
  return *((void *)this + 1);
}

uint64_t EDList::tail(EDList *this)
{
  return *((void *)this + 2);
}

void EDList::~EDList(EDList *this)
{
  EDList::~EDList(this);
  JUMPOUT(0x2455DD950);
}

{
  *(void *)this = &unk_26F3F2E18;
  EList::reset(this);
}

void sub_240040BF0(_Unwind_Exception *a1)
{
  MEMORY[0x2455DD950](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

uint64_t EDListIter::next(EDListIter *this)
{
  return *(void *)(*((void *)this + 2) + 16);
}

void *ECollectIter::ECollectIter(void *a1, uint64_t a2)
{
  *a1 = &unk_26F3F3000;
  a1[1] = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  return a1;
}

uint64_t ECollectIter::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))();
}

uint64_t ECollectIter::atEnd(ECollectIter *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 16))();
}

uint64_t ECollectIter::next(ECollectIter *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

uint64_t ECollectIter::reset(ECollectIter *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 48))();
}

void ECollectIter::~ECollectIter(ECollectIter *this)
{
  ECollectIter::~ECollectIter(this);
  JUMPOUT(0x2455DD950);
}

{
  *(void *)this = &unk_26F3F3000;
  MEMORY[0x2455DD950](*((void *)this + 1), 0x81C40B8603338);
}

void OUTLINED_FUNCTION_0_84()
{
}

void OUTLINED_FUNCTION_1_74()
{
  operator new();
}

void OUTLINED_FUNCTION_2_70()
{
  operator new();
}

uint64_t OUTLINED_FUNCTION_4_61()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_56()
{
  return v0;
}

void OUTLINED_FUNCTION_7_54()
{
  operator new();
}

void OUTLINED_FUNCTION_8_52(EDList *a1@<X8>)
{
}

uint64_t OUTLINED_FUNCTION_10_52@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t IndexQueue::addOffsetFromLast(IndexQueue *this, int a2, uint64_t a3)
{
  LODWORD(v6[0]) = a2;
  v6[1] = a3;
  uint64_t result = EListQueue::add((uint64_t)this, v6);
  if (result)
  {
    *((void *)this + 3) += a3;
    return 1;
  }
  return result;
}

uint64_t EListQueue::add(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 48))(a1, *a2, a2[1]);
}

uint64_t IndexQueue::reduceLeadTime(IndexQueue *this, unint64_t a2)
{
  uint64_t LeadTime = a2;
  if (IndexQueue::getLeadTime(this) < a2) {
    uint64_t LeadTime = IndexQueue::getLeadTime(this);
  }
  uint64_t v4 = OUTLINED_FUNCTION_0_85();
  uint64_t v6 = v5(v4);
  *(void *)(v6 + 8) -= LeadTime;
  return OUTLINED_FUNCTION_1_75();
}

uint64_t IndexQueue::getLeadTime(IndexQueue *this)
{
  return *(void *)((*(uint64_t (**)(IndexQueue *))(*(void *)this + 24))(this) + 8);
}

uint64_t IndexQueue::reduceLeadTime(IndexQueue *this)
{
  (*(void (**)(IndexQueue *))(*(void *)this + 24))(this);
  uint64_t v1 = OUTLINED_FUNCTION_0_85();
  *(void *)(v2(v1) + 8) = 0;
  return OUTLINED_FUNCTION_1_75();
}

uint64_t IndexQueue::increaseLeadTime(IndexQueue *this, uint64_t a2)
{
  uint64_t result = (**(uint64_t (***)(IndexQueue *))this)(this);
  if (!result)
  {
    *((void *)this + 3) += a2;
    uint64_t result = (*(uint64_t (**)(IndexQueue *))(*(void *)this + 24))(this);
    *(void *)(result + 8) += a2;
  }
  return result;
}

void IndexQueue::remove(IndexQueue *this)
{
  (*(void (**)(IndexQueue *))(*(void *)this + 24))(this);
  uint64_t v2 = OUTLINED_FUNCTION_0_85();
  *((void *)this + 3) -= *(void *)(v3(v2) + 8);
  ESList::removeHead(this);
}

uint64_t sub_2400411D0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_0_85()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_1_75()
{
  *(void *)(v0 + 24) -= v1;
  return v1;
}

void IniFileWriter::IniFileWriter(IniFileWriter *this, const char *a2)
{
  *(void *)this = 0;
  *((void *)this + 514) = 0;
  *((void *)this + 516) = 0;
  *((void *)this + 515) = 0;
  if (a2)
  {
    uint64_t v3 = (char *)this + 8;
    uint64_t v4 = strcpy((char *)this + 8, a2);
    *(_WORD *)&v3[strlen(v4)] = 47;
    *(void *)&v3[strlen((const char *)this + 8)] = 0x696E692E696365;
  }
}

void IniFileWriter::~IniFileWriter(IniFileWriter *this)
{
  if (*((void *)this + 514))
  {
    OUTLINED_FUNCTION_1_76();
    *((void *)this + 514) = 0;
  }
}

void IniFileWriter::writeString(IniFileWriter *this, const char *a2, const char *a3, const char *a4)
{
}

void IniFileWriter::readFileIntoMemory(IniFileWriter *this, const char *a2)
{
  *(_OWORD *)((char *)this + 4120) = xmmword_2400479E0;
  if (*((void *)this + 514))
  {
    OUTLINED_FUNCTION_1_76();
    *((void *)this + 514) = 0;
  }
  OUTLINED_FUNCTION_0_86();
}

uint64_t IniFileWriter::stringSearch(IniFileWriter *this, const char *__s, uint64_t a3, uint64_t a4)
{
  int64_t v8 = strlen(__s);
  while (1)
  {
    uint64_t v9 = a3;
    if (a3 >= a4) {
      break;
    }
    uint64_t v10 = *((void *)this + 514);
    int v11 = *(unsigned __int8 *)(v10 + a3);
    if (v11 == *(unsigned __int8 *)__s)
    {
      int64_t v12 = 0;
      uint64_t v13 = v10 + a3 + 1;
      uint64_t v14 = a3;
      do
      {
        ++v14;
        int64_t v15 = v12 + 1;
        uint64_t v16 = v12 + 1 + a3;
        unsigned int v17 = *(unsigned __int8 *)(v13 + v12);
        int v18 = __s[v12 + 1];
        BOOL v20 = v16 < a4 && v17 == v18 && v15 < v8;
        int64_t v12 = v15;
      }
      while (v20);
      a3 += v15;
      if (v8 == v15)
      {
        if (v17 <= 0x3D && ((1 << v17) & 0x2000000000000401) != 0)
        {
          uint64_t v9 = v14;
          return v9 - v8;
        }
        if (!strcmp(__s, "["))
        {
          v9 += v15;
          return v9 - v8;
        }
      }
    }
    else
    {
      if (a3 <= a4) {
        uint64_t v22 = a4;
      }
      else {
        uint64_t v22 = a3;
      }
      if (*(unsigned char *)(v10 + a3))
      {
        while (v11 != 10)
        {
          if (v9 >= a4)
          {
            uint64_t v9 = v22;
            break;
          }
          int v11 = *(unsigned __int8 *)(v10 + 1 + v9++);
          if (!v11) {
            break;
          }
        }
      }
      if (v9 >= a4) {
        a3 = v9;
      }
      else {
        a3 = v9 + 1;
      }
    }
  }
  int64_t v8 = 0;
  return v9 - v8;
}

void IniFileWriter::writeToMemory(IniFileWriter *this, char *a2, char *a3, char *a4)
{
  uint64_t v5 = a3;
  if (!a2)
  {
    if (a3) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  while (1)
  {
    int v8 = *a2;
    int v9 = IniFileWriter::ensureBufferSpace(this);
    if (!v8) {
      break;
    }
    if (v9) {
      OUTLINED_FUNCTION_3_66(*a2);
    }
    OUTLINED_FUNCTION_7_55();
    if (!v10) {
      return;
    }
  }
  if (v9)
  {
    OUTLINED_FUNCTION_5_57();
    if (v5)
    {
LABEL_12:
      while (1)
      {
        int v11 = *v5;
        int v12 = IniFileWriter::ensureBufferSpace(this);
        if (!v11) {
          break;
        }
        if (v12) {
          OUTLINED_FUNCTION_3_66(*v5);
        }
        OUTLINED_FUNCTION_2_71();
        ++v5;
        if (!v13) {
          return;
        }
      }
      if (v12)
      {
        uint64_t v14 = *((void *)this + 514);
        uint64_t v15 = *((void *)this + 515);
        *((void *)this + 515) = v15 + 1;
        *(unsigned char *)(v14 + v15) = 61;
        if (a4)
        {
LABEL_19:
          while (1)
          {
            int v16 = *a4;
            int v17 = IniFileWriter::ensureBufferSpace(this);
            if (!v16) {
              break;
            }
            if (v17) {
              OUTLINED_FUNCTION_3_66(*a4);
            }
            OUTLINED_FUNCTION_2_71();
            ++a4;
            if (!v18) {
              return;
            }
          }
          if (v17) {
            OUTLINED_FUNCTION_5_57();
          }
        }
      }
      return;
    }
LABEL_8:
    if (a4) {
      goto LABEL_19;
    }
  }
}

uint64_t IniFileWriter::ensureBufferSpace(IniFileWriter *this)
{
  if (*((void *)this + 516) <= *((void *)this + 515)) {
    IniFileWriter::doubleBuffer(this);
  }
  return 1;
}

uint64_t IniFileWriter::goEndSection(IniFileWriter *this)
{
  uint64_t v1 = *((void *)this + 514);
  for (uint64_t i = *((void *)this + 515); ; *((void *)this + 515) = i)
  {
    uint64_t v3 = *(unsigned __int8 *)(v1 + i);
    if (v3 == 10) {
      break;
    }
    if (!*(unsigned char *)(v1 + i)) {
      return v3;
    }
    ++i;
LABEL_9:
    ;
  }
  ++i;
  int v4 = *(unsigned __int8 *)(v1 + i);
  if (v4 != 10 && v4 != 0) {
    goto LABEL_9;
  }
  *((void *)this + 515) = i;
  return 1;
}

uint64_t IniFileWriter::goEndKey(IniFileWriter *this)
{
  uint64_t v1 = *((void *)this + 514);
  for (uint64_t i = *((void *)this + 515); ; *((void *)this + 515) = i)
  {
    uint64_t v3 = *(unsigned __int8 *)(v1 + i);
    if (!*(unsigned char *)(v1 + i)) {
      break;
    }
    if (v3 == 61)
    {
      *((void *)this + 515) = i + 1;
      return 1;
    }
    ++i;
  }
  return v3;
}

uint64_t IniFileWriter::goEndData(IniFileWriter *this, uint64_t *a2)
{
  uint64_t v2 = *((void *)this + 514);
  for (uint64_t i = *a2; ; *a2 = i)
  {
    uint64_t result = *(unsigned __int8 *)(v2 + i);
    if (!*(unsigned char *)(v2 + i)) {
      break;
    }
    if (result == 10)
    {
      *a2 = i + 1;
      return 1;
    }
    ++i;
  }
  return result;
}

uint64_t IniFileWriter::writeFileFromMemory(IniFileWriter *this)
{
  *((void *)this + 515) = 0;
  uint64_t v2 = fopen((const char *)this + 8, "w");
  *(void *)this = v2;
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 515);
  while (1)
  {
    uint64_t v4 = *((void *)this + 514);
    if (!*(unsigned char *)(v4 + v3))
    {
      uint64_t v5 = 1;
      goto LABEL_9;
    }
    if (fputc(*(char *)(v4 + v3), *(FILE **)this) == -1) {
      break;
    }
    OUTLINED_FUNCTION_2_71();
  }
  uint64_t v5 = 0;
LABEL_9:
  fclose(*(FILE **)this);
  return v5;
}

uint64_t IniFileWriter::deleteKeyFromSection(IniFileWriter *this, const char *a2, const char *a3)
{
  return 0;
}

void IniFileWriter::deleteSection(IniFileWriter *this, const char *a2)
{
}

void IniFileWriter::doubleBuffer(IniFileWriter *this)
{
}

void OUTLINED_FUNCTION_0_86()
{
  operator new[]();
}

void OUTLINED_FUNCTION_1_76()
{
  JUMPOUT(0x2455DD940);
}

void OUTLINED_FUNCTION_2_71()
{
  ++*(void *)(v0 + 4120);
}

void OUTLINED_FUNCTION_3_66(char a1@<W8>)
{
  *(unsigned char *)(*(void *)(v1 + 4112) + *(void *)(v1 + 4120)) = a1;
}

void OUTLINED_FUNCTION_4_62()
{
  *(unsigned char *)(*(void *)(v0 + 4112) + *(void *)(v0 + 4120)) = 0;
}

void OUTLINED_FUNCTION_5_57()
{
  uint64_t v1 = *(void *)(v0 + 4112);
  uint64_t v2 = *(void *)(v0 + 4120);
  *(void *)(v0 + 4120) = v2 + 1;
  *(unsigned char *)(v1 + v2) = 10;
}

void OUTLINED_FUNCTION_7_55()
{
  ++*(void *)(v0 + 4120);
}

void RequestLicense::RequestLicense(RequestLicense *this)
{
  *(void *)this = &unk_26F3F3070;
  OUTLINED_FUNCTION_0_87((uint64_t)this);
}

{
  *(void *)this = &unk_26F3F3070;
  OUTLINED_FUNCTION_0_87((uint64_t)this);
}

uint64_t RequestLicense::licenseGranted(RequestLicense *this)
{
  return *((unsigned __int8 *)this + 8);
}

BOOL RequestLicense::queryInterface(RequestLicense *this, uint64_t a2, void **a3)
{
  *a3 = 0;
  if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 1) {
    return 0;
  }
  *a3 = this;
  (*(void (**)(RequestLicense *))(*(void *)this + 8))(this);
  return *a3 != 0;
}

uint64_t RequestLicense::addRef(RequestLicense *this)
{
  return 0;
}

uint64_t RequestLicense::release(RequestLicense *this)
{
  return 0;
}

uint64_t RequestLicense::licenseNeeded(RequestLicense *this)
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_0_87(uint64_t result)
{
  *(unsigned char *)(result + 8) = 1;
  return result;
}

void init_new(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x260uLL, 0x10F004008EEF3F9uLL);
  *(void *)(a1 + 184) = v2;
  bzero(v2, 0x260uLL);
  uint64_t v3 = malloc_type_malloc(0x30uLL, 0x10040436913F5uLL);
  **(void **)(a1 + 184) = v3;
  *uint64_t v3 = "STATEMENT";
  OUTLINED_FUNCTION_1_77();
  *(void *)(v4 + 8) = "TEST";
  OUTLINED_FUNCTION_1_77();
  *(void *)(v5 + 16) = "NULL";
  OUTLINED_FUNCTION_1_77();
  *(void *)(v6 + 24) = "LOOP";
  OUTLINED_FUNCTION_1_77();
  *(void *)(v7 + 32) = "COMMAND";
  *(void *)(**(void **)(a1 + 184) + 40) = &unk_240047A18;
  uint64_t v8 = *(void *)(a1 + 184);
  *(_DWORD *)(v8 + 8) = 3;
  *(_DWORD *)(v8 + 28) = 2;
  *(unsigned char *)(v8 + 444) = 5;
  *(unsigned char *)(v8 + 496) = 1;
  *(void *)(v8 + 528) = &unk_240047A18;
}

void init_delete(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void ***)(a1 + 184);
    if (*v2)
    {
      free(*v2);
      uint64_t v2 = *(void ***)(a1 + 184);
      *uint64_t v2 = 0;
    }
    bzero(v2, 0x260uLL);
    free(*(void **)(a1 + 184));
    *(void *)(a1 + 184) = 0;
  }
}

uint64_t notspecialvar()
{
  return 0;
}

uint64_t vcmdinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 184);
  uint64_t v3 = *(void *)(a1 + 192);
  *(void *)(v2 + 472) = 14000;
  *(void *)(v3 + 8864) = 1;
  *(_DWORD *)(v3 + 9084) = *(unsigned __int8 *)(a1 + 288) + 6;
  uint64_t result = logicalIOInit(a1, *(_DWORD *)(v2 + 448) + *(unsigned __int8 *)(a1 + 304), (uint64_t)errorIgnore);
  if (result)
  {
    uint64_t v5 = (int)builtInLogicalFiles(a1);
    while (v5 < *(unsigned __int8 *)(a1 + 304))
    {
      int v6 = vfdef_lf(a1, *(void *)(*(void *)(a1 + 296) + 8 * v5++));
      if (v6 == -1) {
        return 0;
      }
    }
    uint64_t result = logicalFileAddPhysical(a1, **(char **)(a1 + 216), "null", (_OWORD *)(*(void *)(a1 + 216) + 240), 0, 0);
    if (result)
    {
      uint64_t result = OUTLINED_FUNCTION_0_88(result, *(char *)(*(void *)(a1 + 216) + 5), "null", (_OWORD *)(*(void *)(a1 + 216) + 240));
      if (result)
      {
        uint64_t result = logicalFileAddPhysical(a1, *(char *)(*(void *)(a1 + 216) + 1), "null", (_OWORD *)(*(void *)(a1 + 216) + 240), 0, 0);
        if (result)
        {
          uint64_t result = OUTLINED_FUNCTION_0_88(result, *(char *)(*(void *)(a1 + 216) + 4), "null", (_OWORD *)(*(void *)(a1 + 216) + 240));
          if (result)
          {
            uint64_t result = OUTLINED_FUNCTION_0_88(result, *(char *)(*(void *)(a1 + 216) + 2), "null", (_OWORD *)(*(void *)(a1 + 216) + 240));
            if (result)
            {
              uint64_t result = logicalFileOpen(a1, "pgmin", 0);
              if (result)
              {
                uint64_t result = logicalFileOpen(a1, "pgmout", 1);
                if (result)
                {
                  uint64_t result = logicalFileOpen(a1, "cmdin", 0);
                  if (result)
                  {
                    uint64_t result = logicalFileOpen(a1, "cmdout", 1);
                    if (result)
                    {
                      uint64_t result = logicalFileOpen(a1, "prompt", 1);
                      if (result)
                      {
                        uint64_t result = vmeminit(a1);
                        if (result)
                        {
                          uint64_t result = vdelinit(a1);
                          if (result)
                          {
                            uint64_t result = vdltinit(a1, 1);
                            if (result)
                            {
                              uint64_t result = vdictinit(a1);
                              if (result)
                              {
                                vlinkinit(a1);
                                return 1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void vcmdend(int a1, int a2)
{
}

uint64_t OUTLINED_FUNCTION_0_88(uint64_t a1, int a2, char *a3, _OWORD *a4)
{
  return logicalFileAddPhysical(v4, a2, a3, a4, 0, 1);
}

uint64_t vlinkinit(uint64_t result)
{
  uint64_t v1 = 0;
  for (uint64_t i = 9224; ; i += 120)
  {
    uint64_t v3 = *(void *)(result + 192);
    uint64_t v4 = (__int16 *)(v3 + 9112);
    if (v1 >= *(__int16 *)(v3 + 9114)) {
      break;
    }
    uint64_t v5 = (void *)(v3 + i);
    uint64_t v6 = *(void *)(v3 + i - 48);
    if (v6)
    {
      **(void **)uint64_t v6 = v5 - 7;
      **(void **)(v6 + 8) = *v5;
      **(void **)(v6 + 24) = *(void *)(v6 + 16);
    }
    ++v1;
  }
  uint64_t v7 = *v4 & ~(*v4 >> 31);
  uint64_t v8 = (uint64_t *)(v3 + 9136);
  if ((*v4 & ~(*v4 >> 31)) != 0)
  {
    do
    {
      uint64_t v9 = *(v8 - 2);
      if (v9)
      {
        uint64_t v10 = *(void *)(v9 + 8);
        if (v10)
        {
          uint64_t v11 = *(void *)(v10 + 16) + 80 * *((__int16 *)v8 - 4);
          *uint64_t v8 = v11;
          *(void *)(v11 + 40) = v9;
        }
      }
      --v7;
      v8 += 3;
    }
    while (v7);
  }
  return result;
}

double logio_new(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = malloc_type_malloc(0x178uLL, 0x10D0040C1D992DBuLL);
    *(void *)(a1 + 216) = v2;
    bzero(v2, 0x178uLL);
    uint64_t v3 = *(void *)(a1 + 216);
    *(_WORD *)(v3 + 4) = -1;
    *(_DWORD *)uint64_t v3 = -1;
    long long v4 = *(_OWORD *)&off_26B93DE30;
    *(_OWORD *)(v3 + 80) = xmmword_26B93DE20;
    *(_OWORD *)(v3 + 96) = v4;
    long long v5 = unk_26B93DE10;
    *(_OWORD *)(v3 + 48) = diskFileClass_glob;
    *(_OWORD *)(v3 + 64) = v5;
    uint64_t v6 = *(_OWORD **)(a1 + 216);
    long long v7 = unk_26B93DE50;
    v6[7] = dynaBufFileClass_glob;
    v6[8] = v7;
    long long v8 = *(_OWORD *)&off_26B93DE70;
    v6[9] = xmmword_26B93DE60;
    unsigned char v6[10] = v8;
    uint64_t v9 = *(_OWORD **)(a1 + 216);
    long long v10 = *(_OWORD *)&off_26B93DEB0;
    v9[13] = xmmword_26B93DEA0;
    v9[14] = v10;
    long long v11 = unk_26B93DE90;
    v9[11] = stdTermFileClass_glob;
    v9[12] = v11;
    int v12 = *(_OWORD **)(a1 + 216);
    long long v13 = *(_OWORD *)&off_26B93DEF0;
    v12[17] = xmmword_26B93DEE0;
    v12[18] = v13;
    long long v14 = unk_26B93DED0;
    v12[15] = nullFileClass_glob;
    unsigned char v12[16] = v14;
    uint64_t v15 = *(_OWORD **)(a1 + 216);
    long long v16 = unk_26B93DF10;
    v15[19] = stdErrorFileClass_glob;
    v15[20] = v16;
    double result = *(double *)&xmmword_26B93DF20;
    long long v18 = *(_OWORD *)&off_26B93DF30;
    v15[21] = xmmword_26B93DF20;
    v15[22] = v18;
  }
  return result;
}

void logio_delete(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 216);
    if (v2)
    {
      bzero(v2, 0x178uLL);
      free(*(void **)(a1 + 216));
      *(void *)(a1 + 216) = 0;
    }
  }
}

uint64_t logicalIOInit(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 216);
  *(void *)(v4 + 32) = a3;
  *(_DWORD *)(v4 + 16) = a2;
  uint64_t result = (uint64_t)malloc_type_calloc(0x40uLL, a2, 0x999E51CDuLL);
  *(void *)(*(void *)(a1 + 216) + 8) = result;
  if (result)
  {
    int v6 = addLogicalFile(a1, "pgmin");
    **(unsigned char **)(a1 + 216) = v6;
    if (v6 == -1) {
      return 0;
    }
    int v7 = addLogicalFile(a1, "pgmout");
    *(unsigned char *)(*(void *)(a1 + 216) + 5) = v7;
    if (v7 == -1) {
      return 0;
    }
    int v8 = addLogicalFile(a1, "cmdin");
    *(unsigned char *)(*(void *)(a1 + 216) + hashDelete(*((void **)this + 513), 1, 1) = v8;
    if (v8 == -1) {
      return 0;
    }
    int v9 = addLogicalFile(a1, "cmdout");
    *(unsigned char *)(*(void *)(a1 + 216) + 4) = v9;
    if (v9 == -1) {
      return 0;
    }
    int v10 = addLogicalFile(a1, "prompt");
    *(unsigned char *)(*(void *)(a1 + 216) + 2) = v10;
    if (v10 == -1) {
      return 0;
    }
    int v11 = addLogicalFile(a1, "prmout");
    uint64_t v12 = *(void *)(a1 + 216);
    *(unsigned char *)(v12 + 3) = v11;
    if (v11 == -1)
    {
      return 0;
    }
    else
    {
      *(_DWORD *)(v12 + 20) = v11 + 1;
      return 1;
    }
  }
  return result;
}

uint64_t addLogicalFile(uint64_t a1, char *a2)
{
  if (!a2) {
    return -1;
  }
  int v4 = vffind_lf(a1, a2);
  uint64_t v5 = *(void *)(a1 + 216);
  if (v4 != -1)
  {
    (*(void (**)(uint64_t, const char *, const char *))(v5 + 32))(a1, "LFILE", "%s is already defined");
    return -1;
  }
  int v6 = 0;
  uint64_t v7 = *(void *)(v5 + 8);
  do
    char v8 = v6;
  while (*(unsigned __int8 *)(v7 + ((uint64_t)(char)v6++ << 6)));
  if (*(_DWORD *)(v5 + 16) <= v8)
  {
    (*(void (**)(uint64_t, const char *, const char *))(v5 + 32))(a1, "LOGIO", "There are too many interactive lfiles; use a bigger -lfiles argument on the DeltaTools command line");
    return -1;
  }
  uint64_t v10 = v7 + ((uint64_t)v8 << 6);
  strncpy((char *)v10, a2, 0x14uLL);
  uint64_t v12 = (void *)(v10 + 48);
  uint64_t v11 = *(void *)(v10 + 48);
  *(void *)(v10 + 28) = 0;
  *(void *)(v10 + 20) = 0;
  *(_DWORD *)(v10 + 44) = 0;
  *(void *)(v10 + 36) = 0;
  if (!v11)
  {
    long long v14 = dynaBufNew(0);
    *uint64_t v12 = v14;
    if (v14) {
      return v8;
    }
    goto LABEL_14;
  }
  dynaBufReset(v11);
  if (!*v12)
  {
LABEL_14:
    *(unsigned char *)uint64_t v10 = 0;
    return -1;
  }
  return v8;
}

void logicalIOCleanup(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 216);
  if (*(void *)(v1 + 8))
  {
    for (char i = 0; *(_DWORD *)(v1 + 16) > i; ++i)
    {
      if (*(unsigned char *)(*(void *)(v1 + 8) + ((uint64_t)i << 6)))
      {
        vfundef_lf();
        uint64_t v1 = *(void *)(a1 + 216);
      }
    }
    *(_DWORD *)(v1 + 16) = 0;
    free(*(void **)(v1 + 8));
    *(void *)(*(void *)(a1 + 216) + 8) = 0;
  }
}

uint64_t vfundef_lf()
{
  OUTLINED_FUNCTION_1_78();
  int v4 = *(void **)(v3 + 40);
  if (v4)
  {
    do
    {
      uint64_t v5 = (void *)v4[2];
      removeOutputElement(v0, v4, v1);
      int v4 = v5;
    }
    while (v5);
  }
  uint64_t v6 = *(void *)(*(void *)(v0 + 216) + 8) + (v2 << 6);
  *(void *)(v6 + 32) = 0;
  uint64_t v7 = *(void *)(v6 + 24);
  if (v7)
  {
    do
    {
      uint64_t v8 = *(void *)(v7 + 72);
      (*(void (**)(uint64_t))(v7 + 64))(v7 + 8);
      free(*(void **)v7);
      free((void *)v7);
      uint64_t v7 = v8;
    }
    while (v8);
  }
  *(unsigned char *)(*(void *)(*(void *)(v0 + 216) + 8) + (v2 << 6)) = 0;
  int v9 = (void **)OUTLINED_FUNCTION_0_89();
  uint64_t result = dynaBufDelete(v9);
  *(void *)(*(void *)(*(void *)(v0 + 216) + 8) + (v2 << 6) + 48) = result;
  return result;
}

uint64_t vffind_lf(uint64_t a1, char *__s2)
{
  if (__s2 && *__s2)
  {
    char v3 = 0;
    uint64_t v4 = *(void *)(a1 + 216);
    int v5 = *(_DWORD *)(v4 + 16);
    while (v5 > v3)
    {
      if (!strcmp((const char *)(*(void *)(v4 + 8) + ((uint64_t)v3 << 6)), __s2)) {
        return v3;
      }
      ++v3;
    }
  }
  return -1;
}

unint64_t logicalFileName(uint64_t a1, int a2)
{
  if (a2 < 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 216);
  if (*(_DWORD *)(v2 + 16) < (int)a2) {
    return 0;
  }
  else {
    return *(void *)(v2 + 8) + ((unint64_t)a2 << 6);
  }
}

BOOL vf_eof(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 216) + 8) + ((uint64_t)a2 << 6);
  if (*(_DWORD *)(v2 + 20) != 1) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 32);
  return !v3 || (*(unsigned int (**)(uint64_t))(v3 + 56))(v3 + 8) != 0;
}

uint64_t builtInLogicalFiles(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 216) + 20);
}

uint64_t vfstat(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 < 0) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 216);
  if (*(_DWORD *)(v9 + 16) < (int)a2) {
    return 0;
  }
  uint64_t v10 = *(void *)(v9 + 8);
  uint64_t v11 = a2;
  if (!*(unsigned char *)(v10 + ((unint64_t)a2 << 6))) {
    return 0;
  }
  uint64_t result = vf_printf(a1, a3, 1, "  %.70s (%s)\n", a5, a6, a7, a8, v10 + ((_BYTE)a2 << 6));
  if (result)
  {
    uint64_t v14 = v10 + (v11 << 6);
    uint64_t v15 = (void *)(v14 + 24);
    if (*(void *)(v14 + 24))
    {
      uint64_t result = vf_puts(a1, a3, (uint64_t)"    input files:\n", 1);
      if (!result) {
        return result;
      }
      BOOL v20 = (void **)(v14 + 24);
      while (1)
      {
        float v21 = *v20;
        if (!v21) {
          break;
        }
        uint64_t v22 = *v21;
        BOOL v20 = (void **)(v21 + 9);
        int v23 = vf_printf(a1, a3, 1, "      %.70s\n", v16, v17, v18, v19, v22);
        uint64_t result = 0;
        if (!v23) {
          return result;
        }
      }
    }
    uint64_t v25 = *(void *)(v14 + 40);
    int v24 = (uint64_t *)(v14 + 40);
    if (v25)
    {
      uint64_t v26 = OUTLINED_FUNCTION_7_56();
      uint64_t result = vf_puts(v26, v27, v28, 0);
      if (!result) {
        return result;
      }
      int v29 = v24;
      while (1)
      {
        uint64_t v30 = *v29;
        if (!*v29) {
          break;
        }
        uint64_t v42 = **(void **)(v30 + 8);
        uint64_t v31 = OUTLINED_FUNCTION_7_56();
        uint64_t result = vf_printf(v31, v32, 0, "      %.70s", v33, v34, v35, v36, v42);
        if (result)
        {
          if (*(_DWORD *)v30 != 1
            || (uint64_t v37 = OUTLINED_FUNCTION_7_56(), result = vf_puts(v37, v38, (uint64_t)" (+)", 1), result))
          {
            uint64_t v39 = OUTLINED_FUNCTION_7_56();
            int v41 = vf_puts(v39, v40, (uint64_t)"\n", 1);
            uint64_t result = 0;
            int v29 = (uint64_t *)(v30 + 16);
            if (v41) {
              continue;
            }
          }
        }
        return result;
      }
    }
    if (*v15) {
      return 1;
    }
    if (*v24) {
      return 1;
    }
    uint64_t result = vf_puts(a1, a3, (uint64_t)"    no files assigned\n", 1);
    if (result) {
      return 1;
    }
  }
  return result;
}

uint64_t vf_printf(uint64_t a1, int a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12 = *(void *)(a1 + 216);
  uint64_t v13 = a2;
  uint64_t v14 = *(void *)(v12 + 8) + ((uint64_t)a2 << 6);
  if (!*(_DWORD *)(v14 + 20) && !*(unsigned char *)(v14 + 56))
  {
    (*(void (**)(uint64_t, const char *, const char *, ...))(v12 + 32))(a1, "LFILE", "Logical file %s is not open for output", (const char *)v14);
    BOOL v20 = 0;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 216) + 8) + (v13 << 6) + 56) = 1;
    return v20;
  }
  if (!a4) {
    return 1;
  }
  uint64_t v15 = (char *)malloc_type_malloc(0x200uLL, 0x27E0C141uLL);
  if (v15)
  {
    uint64_t v16 = v15;
    __vsprintf_chk(v15, 0, 0x200uLL, a4, &a9);
    for (char i = (uint64_t *)(*(void *)(*(void *)(a1 + 216) + 8) + (v13 << 6) + 40); ; char i = (uint64_t *)(v18 + 16))
    {
      uint64_t v18 = *i;
      if (!*i) {
        break;
      }
      uint64_t v19 = *(void *)(v18 + 8);
      if (v19)
      {
        if (!(*(unsigned int (**)(uint64_t, char *, uint64_t))(v19 + 56))(v19 + 16, v16, a3)) {
          break;
        }
      }
    }
    BOOL v20 = v18 == 0;
    free(v16);
    return v20;
  }
  float v21 = *(uint64_t (**)(uint64_t, const char *, const char *))(*(void *)(a1 + 216) + 32);
  return v21(a1, "Logical I/O", "Out of memory (LOGIO:1)");
}

uint64_t vf_puts(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 216);
  uint64_t v7 = a2;
  uint64_t v8 = *(void *)(v6 + 8) + ((uint64_t)a2 << 6);
  if (*(_DWORD *)(v8 + 20) || *(unsigned char *)(v8 + 56))
  {
    for (char i = (uint64_t *)(v8 + 40); ; char i = (uint64_t *)(v10 + 16))
    {
      uint64_t v10 = *i;
      if (!*i) {
        break;
      }
      uint64_t v11 = *(void *)(v10 + 8);
      if (v11)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 56))(v11 + 16, a3, a4);
        if (!result) {
          return result;
        }
      }
    }
    return 1;
  }
  else
  {
    (*(void (**)(uint64_t))(v6 + 32))(a1);
    uint64_t result = 0;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 216) + 8) + (v7 << 6) + 56) = 1;
  }
  return result;
}

uint64_t vfstatall(uint64_t a1, int a2)
{
  uint64_t result = vf_puts(a1, a2, (uint64_t)"logical files:\n", 1);
  if (result)
  {
    char v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(a1 + 216);
      if (*(_DWORD *)(v11 + 16) <= v10) {
        break;
      }
      if (*(unsigned char *)(v11 + 40)) {
        break;
      }
      uint64_t result = vfstat(a1, v10++, a2, v5, v6, v7, v8, v9);
    }
    while (result);
  }
  return result;
}

uint64_t checkInterrupt(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 216) + 40);
}

uint64_t logicalFileOpen(uint64_t a1, char *a2, int a3)
{
  int v6 = vffind_lf(a1, a2);
  if (v6 == -1)
  {
    int v6 = addLogicalFile(a1, a2);
    if (v6 == -1) {
      return 0;
    }
  }
  uint64_t v7 = *(void *)(a1 + 216);
  uint64_t v8 = *(void *)(v7 + 8);
  uint64_t v9 = v6;
  *(unsigned char *)(v8 + ((uint64_t)v6 << 6) + 56) = 0;
  uint64_t v10 = v8 + ((uint64_t)v6 << 6);
  int v13 = *(_DWORD *)(v10 + 20);
  uint64_t v12 = (_DWORD *)(v10 + 20);
  int v11 = v13;
  if (v13)
  {
    if (!a3 && v11 == 2)
    {
      uint64_t v14 = *(uint64_t (**)(uint64_t, const char *, const char *))(v7 + 32);
      uint64_t v34 = "The file %s is currently opened for OUTPUT";
      return v14(a1, "LFILE OPEN", v34);
    }
    if (a3 == 1 && v11 == 1)
    {
      uint64_t v14 = *(uint64_t (**)(uint64_t, const char *, const char *))(v7 + 32);
      uint64_t v34 = "The file %s is currently opened for INPUT";
      return v14(a1, "LFILE OPEN", v34);
    }
    return 1;
  }
  if ((a3 - 1) >= 2)
  {
    if (a3)
    {
LABEL_21:
      int v28 = 0;
LABEL_22:
      int v29 = (uint64_t *)(v8 + (v9 << 6) + 40);
      while (1)
      {
        uint64_t v30 = *v29;
        if (!*v29) {
          break;
        }
        if (a3 == 2) {
          int v31 = 1;
        }
        else {
          int v31 = *(_DWORD *)v30;
        }
        int v32 = openOutputFile(a1, *(void *)(v30 + 8), v31);
        int v29 = (uint64_t *)(v30 + 16);
        if (!v32) {
          return 0;
        }
      }
      if (!v28)
      {
        *uint64_t v12 = 2;
        return 1;
      }
      uint64_t v33 = 1;
      *uint64_t v12 = 1;
      dynaBufReset(*(void *)(v8 + (v9 << 6) + 48));
      return v33;
    }
    uint64_t v24 = v8 + ((uint64_t)v6 << 6);
    uint64_t v27 = *(void *)(v24 + 24);
    uint64_t v26 = (uint64_t *)(v24 + 24);
    uint64_t v25 = v27;
    if (!v27)
    {
      if (!fileExists((const char *)(v8 + ((uint64_t)v6 << 6))))
      {
        float v21 = *(uint64_t (**)(uint64_t, const char *, const char *))(*(void *)(a1 + 216) + 32);
        uint64_t v22 = "Opening file %s with no input file attached";
        return v21(a1, "LFILE OPEN", v22);
      }
      uint64_t v36 = OUTLINED_FUNCTION_6_56();
      if (!assignInputFile(v36, v37, v38, v39, v40)) {
        return 0;
      }
      uint64_t v25 = *v26;
    }
    if (openInputFile(a1, v25, v9))
    {
      int v28 = 1;
      goto LABEL_22;
    }
    return 0;
  }
  if (*(void *)(v8 + ((uint64_t)v6 << 6) + 40)) {
    goto LABEL_21;
  }
  uint64_t v15 = OUTLINED_FUNCTION_6_56();
  if (assignOutputFile(v15, v16, v17, v18, v19, v20)) {
    goto LABEL_21;
  }
  OUTLINED_FUNCTION_2_72();
  uint64_t v22 = "Can't open logical file %s with physical file %s";
  return v21(a1, "LFILE OPEN", v22);
}

uint64_t assignOutputFile(uint64_t a1, char *a2, int a3, _OWORD *a4, uint64_t a5, int a6)
{
  uint64_t result = (uint64_t)findOutputFile(a1, a2);
  if (result)
  {
    int v13 = (void *)result;
    if (findOutputElement(a1, a3, (void *)result)) {
      return 1;
    }
    uint64_t v19 = *(void *)(a1 + 216);
  }
  else
  {
    if (!a2) {
      return result;
    }
    if (!a4) {
      return result;
    }
    uint64_t result = (uint64_t)malloc_type_malloc(0x58uLL, 0x10F004011FC8696uLL);
    if (!result) {
      return result;
    }
    int v13 = (void *)result;
    size_t v14 = strlen(a2);
    uint64_t v15 = (char *)malloc_type_malloc(v14 + 1, 0xDC03B7E8uLL);
    *int v13 = v15;
    if (!v15)
    {
      free(v13);
      return 0;
    }
    strcpy(v15, a2);
    v13[1] = 0;
    long long v16 = a4[2];
    long long v17 = a4[3];
    long long v18 = a4[1];
    *((_OWORD *)v13 + hashDelete(*((void **)this + 513), 1, 1) = *a4;
    *((_OWORD *)v13 + 2) = v18;
    *((_OWORD *)v13 + 3) = v16;
    *((_OWORD *)v13 + 4) = v17;
    v13[3] = *v13;
    v13[4] = a5;
    uint64_t v19 = *(void *)(a1 + 216);
    v13[10] = *(void *)(v19 + 24);
    *(void *)(v19 + 24) = v13;
  }
  uint64_t v20 = *(void *)(v19 + 8);
  uint64_t result = (uint64_t)malloc_type_malloc(0x18uLL, 0x1020040F89CB87BuLL);
  if (result)
  {
    *(_DWORD *)uint64_t result = a6;
    uint64_t v21 = v20 + ((uint64_t)a3 << 6);
    uint64_t v22 = *(void *)(v21 + 40);
    *(void *)(v21 + 40) = result;
    *(void *)(result + 8) = v13;
    *(void *)(result + 16) = v22;
    ++*((_DWORD *)v13 + 3);
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 216) + 8) + ((uint64_t)a3 << 6) + 20)) {
      return 1;
    }
    return openOutputFile(a1, (uint64_t)v13, a6);
  }
  return result;
}

uint64_t assignInputFile(uint64_t a1, const char *a2, int a3, _OWORD *a4, uint64_t a5)
{
  uint64_t result = 0;
  if (a2)
  {
    if (a4)
    {
      uint64_t result = (uint64_t)malloc_type_malloc(0x50uLL, 0xF0040EFA0FAE9uLL);
      if (result)
      {
        int v11 = (char *)result;
        size_t v12 = strlen(a2);
        int v13 = (char *)malloc_type_malloc(v12 + 1, 0x599D529uLL);
        *(void *)int v11 = v13;
        if (v13)
        {
          strcpy(v13, a2);
          long long v14 = a4[2];
          long long v15 = a4[3];
          long long v16 = a4[1];
          *(_OWORD *)(v11 + 8) = *a4;
          *(_OWORD *)(v11 + 24) = v16;
          *(_OWORD *)(v11 + 56) = v15;
          *(_OWORD *)(v11 + 40) = v14;
          *((void *)v11 + 2) = *(void *)v11;
          *((void *)v11 + 3) = a5;
          *((void *)v11 + 9) = 0;
          uint64_t v17 = *(void *)(*(void *)(a1 + 216) + 8);
          uint64_t v18 = v17 + ((uint64_t)a3 << 6);
          uint64_t v21 = *(void *)(v18 + 24);
          uint64_t v19 = (void *)(v18 + 24);
          uint64_t v20 = v21;
          if (v21)
          {
            do
            {
              uint64_t v22 = v20;
              uint64_t v20 = *(void *)(v20 + 72);
            }
            while (v20);
            uint64_t v19 = (void *)(v22 + 72);
          }
          *uint64_t v19 = v11;
          if (*(_DWORD *)(v17 + ((uint64_t)a3 << 6) + 20) != 1
            || *(void *)(v17 + ((uint64_t)a3 << 6) + 32)
            || openInputFile(a1, (uint64_t)v11, a3))
          {
            return 1;
          }
          else
          {
            OUTLINED_FUNCTION_2_72();
            return v23(a1, "LFILE ASSIGN", "Can't open assigned input file %s", a2);
          }
        }
        else
        {
          free(v11);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t openInputFile(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(a2 + 32))(a1, a2 + 8, 0);
  if (result)
  {
    *(void *)(*(void *)(*(void *)(a1 + 216) + 8) + ((uint64_t)a3 << 6) + 32) = a2;
    return 1;
  }
  return result;
}

uint64_t openOutputFile(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a2 + 16;
  if (a3) {
    uint64_t v6 = 2;
  }
  else {
    uint64_t v6 = 1;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(a2 + 40))(a1, v5, v6))
  {
    ++*(_DWORD *)(a2 + 8);
    return 1;
  }
  else
  {
    OUTLINED_FUNCTION_2_72();
    return v8(a1, "LFILE OPEN", "Can't open %s for output", *(const char **)a2);
  }
}

void vfclose_lf()
{
  OUTLINED_FUNCTION_5_58();
  uint64_t v1 = *(void *)(v0 + 40);
  while (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    uint64_t v3 = *(void *)(v1 + 16);
    uint64_t v1 = v3;
    int v4 = *(_DWORD *)(v2 + 8) - 1;
    *(_DWORD *)(v2 + 8) = v4;
    if (!v4)
    {
      (*(void (**)(uint64_t))(v2 + 72))(v2 + 16);
      uint64_t v1 = v3;
    }
  }
  OUTLINED_FUNCTION_3_67();
  for (char i = (uint64_t *)(v5 + 24); ; char i = (uint64_t *)(v7 + 72))
  {
    uint64_t v7 = *i;
    if (!*i) {
      break;
    }
    (*(void (**)(uint64_t))(v7 + 64))(v7 + 8);
  }
  OUTLINED_FUNCTION_3_67();
  *(_DWORD *)(v8 + 20) = 0;
  *(void *)(v8 + 32) = 0;
}

uint64_t vf_gets(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 216);
  uint64_t v6 = *(void *)(v5 + 8);
  uint64_t v7 = v6 + ((uint64_t)a2 << 6);
  if (*(_DWORD *)(v7 + 20) != 1) {
    return (*(uint64_t (**)(uint64_t, const char *, const char *))(v5 + 32))(a1, "LOGIO", "Logical file %s is not open for input");
  }
  if (!*(void *)(v7 + 24)) {
    return (*(uint64_t (**)(uint64_t, const char *, const char *))(v5 + 32))(a1, "LOGIO", "No input files are assigned to logical file %s");
  }
  uint64_t v8 = v6 + ((uint64_t)a2 << 6);
  uint64_t v10 = (uint64_t *)(v8 + 32);
  uint64_t v9 = *(void *)(v8 + 32);
  if (v9)
  {
    uint64_t v13 = *(void *)(v8 + 48);
    size_t v12 = (uint64_t *)(v8 + 48);
    dynaBufReset(v13);
    do
    {
      if ((*(unsigned int (**)(uint64_t))(v9 + 56))(v9 + 8))
      {
        if (!*(void *)(v9 + 72)) {
          return 0;
        }
        (*(void (**)(uint64_t))(v9 + 64))(v9 + 8);
        uint64_t v9 = *(void *)(v9 + 72);
        *uint64_t v10 = v9;
        if (!openInputFile(a1, v9, a2)) {
          return 0;
        }
        if (!v9) {
          return 0xFFFFFFFFLL;
        }
      }
      else if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v9 + 8, *v12, a3))
      {
        return 0;
      }
    }
    while (!dynaBufLength(*v12));
    uint64_t v14 = dynaBufContents(*v12);
    uint64_t v19 = 1;
    if (vf_puts(a1, a2, v14, 1)) {
      return v19;
    }
    OUTLINED_FUNCTION_2_72();
    long long v16 = "Can't echo input to file %s";
  }
  else
  {
    long long v15 = *(uint64_t (**)(uint64_t, const char *, const char *))(v5 + 32);
    long long v16 = "No input file is open for logical file %s";
  }
  return v15(a1, "LOGIO", v16);
}

uint64_t vf_getc()
{
  OUTLINED_FUNCTION_1_78();
  if (!dynaBufAtEnd(*(void *)(v2 + 48))) {
    goto LABEL_4;
  }
  if (vf_gets(v0, v1, (uint64_t)&unk_240047A1A) == 1)
  {
    uint64_t v3 = OUTLINED_FUNCTION_0_89();
    dynaBufMoveAbs(v3, 0);
LABEL_4:
    int v4 = (uint64_t *)OUTLINED_FUNCTION_0_89();
    return dynaBufCurrentChar(v4, 1);
  }
  return 0xFFFFFFFFLL;
}

uint64_t vf_ungetc()
{
  OUTLINED_FUNCTION_5_58();
  uint64_t result = dynaBufMoveRel(*(void *)(v0 + 48), 0);
  if (result)
  {
    OUTLINED_FUNCTION_3_67();
    dynaBufMoveRel(*(void *)(v2 + 48), 0xFFFFFFFF);
    return 1;
  }
  return result;
}

uint64_t vf_clrbuf(uint64_t a1, int a2)
{
  return dynaBufReset(*(void *)(*(void *)(*(void *)(a1 + 216) + 8) + ((uint64_t)a2 << 6) + 48));
}

uint64_t logicalFileInputBuffer(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(a1 + 216) + 8) + ((uint64_t)a2 << 6) + 48);
}

uint64_t logicalFileAddPhysical(uint64_t a1, int a2, char *a3, _OWORD *a4, uint64_t a5, int a6)
{
  if (a6) {
    return assignOutputFile(a1, a3, a2, a4, a5, a6 != 1);
  }
  else {
    return assignInputFile(a1, a3, a2, a4, a5);
  }
}

uint64_t logicalFileRemovePhysical(uint64_t a1, int a2, char *__s2, int a4)
{
  if (!__s2) {
    return 0;
  }
  if (a4)
  {
    InputFile = findInputFile(a1, __s2, a2);
    if (InputFile)
    {
      removeInputFile(a1, (uint64_t)InputFile, a2);
      return 1;
    }
    OUTLINED_FUNCTION_4_63();
    size_t v12 = "The input file %s is not assigned to %s";
  }
  else
  {
    OutputFile = findOutputFile(a1, __s2);
    if (!OutputFile)
    {
      OUTLINED_FUNCTION_2_72();
      return v13(a1, "LFILE REMOVE", "The output physical file %s is not defined", __s2);
    }
    OutputElement = (void *)findOutputElement(a1, a2, OutputFile);
    if (OutputElement)
    {
      removeOutputElement(a1, OutputElement, a2);
      return 1;
    }
    OUTLINED_FUNCTION_4_63();
    size_t v12 = "The output file %s is not assigned to %s";
  }
  return v11(a1, "LFILE REMOVE", v12);
}

const char **findInputFile(uint64_t a1, char *__s2, int a3)
{
  for (char i = (const char ***)(*(void *)(*(void *)(a1 + 216) + 8) + ((uint64_t)a3 << 6) + 24);
        ;
        char i = (const char ***)(v5 + 9))
  {
    uint64_t v5 = *i;
    if (!*i || !strcmp(*v5, __s2)) {
      break;
    }
  }
  return v5;
}

void removeInputFile(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 216) + 8);
  uint64_t v7 = (const char *)(v6 + ((uint64_t)a3 << 6));
  uint64_t v9 = v7 + 24;
  uint64_t v8 = *((void *)v7 + 3);
  if (v8 == a2)
  {
LABEL_5:
    *uint64_t v9 = *(void *)(a2 + 72);
  }
  else
  {
    while (1)
    {
      uint64_t v10 = v8;
      uint64_t v8 = *(void *)(v8 + 72);
      if (!v8) {
        break;
      }
      if (v8 == a2)
      {
        uint64_t v9 = (void *)(v10 + 72);
        goto LABEL_5;
      }
    }
  }
  uint64_t v11 = v6 + ((uint64_t)a3 << 6);
  uint64_t v13 = *(void *)(v11 + 32);
  size_t v12 = (void *)(v11 + 32);
  if (v13 == a2)
  {
    (*(void (**)(uint64_t))(a2 + 64))(a2 + 8);
    *size_t v12 = 0;
    uint64_t v14 = *(void *)(a2 + 72);
    if (v14)
    {
      if (!openInputFile(a1, v14, a3))
      {
        (*(void (**)(uint64_t, const char *, const char *, ...))(*(void *)(a1 + 216) + 32))(a1, "LFILE REMOVE", "Can't open the next input file %s for logical file %s", **(const char ***)(a2 + 72), v7);
        *size_t v12 = 0;
      }
    }
  }
  free(*(void **)a2);
  free((void *)a2);
}

const char **findOutputFile(uint64_t a1, char *__s2)
{
  if (!__s2) {
    return 0;
  }
  for (char i = (const char ***)(*(void *)(a1 + 216) + 24); ; char i = (const char ***)(v4 + 10))
  {
    int v4 = *i;
    if (!*i || !strcmp(*v4, __s2)) {
      break;
    }
  }
  return v4;
}

uint64_t findOutputElement(uint64_t a1, int a2, void *a3)
{
  for (char i = (uint64_t *)(*(void *)(*(void *)(a1 + 216) + 8) + ((uint64_t)a2 << 6) + 40); ; char i = (uint64_t *)(result + 16))
  {
    uint64_t result = *i;
    if (!*i || **(void **)(result + 8) == *a3) {
      break;
    }
  }
  return result;
}

void removeOutputElement(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = *(void *)(a1 + 216);
  uint64_t v6 = *(void *)(v5 + 8);
  uint64_t v7 = v6 + ((uint64_t)a3 << 6);
  uint64_t v10 = *(void **)(v7 + 40);
  uint64_t v9 = (void *)(v7 + 40);
  uint64_t v8 = v10;
  if (v10 == a2)
  {
    uint64_t v12 = a2[1];
    *uint64_t v9 = a2[2];
LABEL_6:
    int v13 = *(_DWORD *)(v6 + ((uint64_t)a3 << 6) + 20);
    int v14 = *(_DWORD *)(v12 + 8);
    if (v13) {
      *(_DWORD *)(v12 + 8) = --v14;
    }
    if (!v14) {
      (*(void (**)(uint64_t))(v12 + 72))(v12 + 16);
    }
    int v15 = *(_DWORD *)(v12 + 12) - 1;
    *(_DWORD *)(v12 + 12) = v15;
    if (!v15)
    {
      uint64_t v16 = *(void *)(a1 + 216);
      uint64_t v19 = *(void *)(v16 + 24);
      uint64_t v18 = (void *)(v16 + 24);
      uint64_t v17 = v19;
      if (v19 == v12)
      {
LABEL_15:
        *uint64_t v18 = *(void *)(v12 + 80);
      }
      else
      {
        while (1)
        {
          uint64_t v20 = v17;
          uint64_t v17 = *(void *)(v17 + 80);
          if (!v17) {
            break;
          }
          if (v17 == v12)
          {
            uint64_t v18 = (void *)(v20 + 80);
            goto LABEL_15;
          }
        }
      }
      free(*(void **)v12);
      free((void *)v12);
    }
    free(a2);
  }
  else
  {
    while (1)
    {
      uint64_t v11 = v8;
      uint64_t v8 = (void *)v8[2];
      if (!v8) {
        break;
      }
      if (v8 == a2)
      {
        uint64_t v12 = a2[1];
        v11[2] = a2[2];
        goto LABEL_6;
      }
    }
    (*(void (**)(uint64_t, const char *, const char *, ...))(v5 + 32))(a1, "LFILE REMOVE", "The output file %s is not assigned to the logical file %s", *(const char **)a2[1], (const char *)(v6 + ((uint64_t)a3 << 6)));
  }
}

void logicalFileRemoveAllPhysical(uint64_t a1, char *__s2)
{
  if (__s2)
  {
    for (char i = 0; ; ++i)
    {
      int v5 = *(_DWORD *)(*(void *)(a1 + 216) + 16);
      if (v5 <= i) {
        break;
      }
      InputFile = findInputFile(a1, __s2, i);
      if (InputFile) {
        removeInputFile(a1, (uint64_t)InputFile, i);
      }
    }
    OutputFile = findOutputFile(a1, __s2);
    if (OutputFile)
    {
      uint64_t v8 = OutputFile;
      for (char j = 0; v5 > j; ++j)
      {
        OutputElement = (void *)findOutputElement(a1, j, v8);
        if (OutputElement)
        {
          removeOutputElement(a1, OutputElement, j);
          int v5 = *(_DWORD *)(*(void *)(a1 + 216) + 16);
        }
      }
    }
  }
}

const char **logicalFileFindPhysical(uint64_t a1, int a2, char *__s2, int a4, int a5)
{
  if (!__s2) {
    return 0;
  }
  if (!*__s2) {
    return 0;
  }
  if (a4)
  {
    uint64_t InputFile = (uint64_t)findInputFile(a1, __s2, a2);
    if (a5) {
      return (const char **)(InputFile == *(void *)(*(void *)(*(void *)(a1 + 216) + 8) + ((uint64_t)a2 << 6) + 32));
    }
  }
  else
  {
    uint64_t result = findOutputFile(a1, __s2);
    if (!result) {
      return result;
    }
    uint64_t InputFile = findOutputElement(a1, a2, result);
  }
  return (const char **)(InputFile != 0);
}

uint64_t setInterrupt(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 216) + 40) = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_0_89()
{
  return *(void *)(*(void *)(*(void *)(v0 + 216) + 8) + (v1 << 6) + 48);
}

uint64_t OUTLINED_FUNCTION_6_56()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_56()
{
  return v0;
}

BOOL diskFileOpen(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)a2 = a1;
  uint64_t v3 = *(FILE **)(a2 + 16);
  if (!v3)
  {
    if (a3 > 2) {
      int v5 = (const char *)&unk_240047A1A;
    }
    else {
      int v5 = (&off_26509B758)[a3];
    }
    uint64_t v3 = fopen(*(const char **)(a2 + 8), v5);
    *(void *)(a2 + 16) = v3;
  }
  return v3 != 0;
}

uint64_t diskFileRead(uint64_t a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(FILE **)(a1 + 16);
  if (!v3 || feof(v3)) {
    return 0;
  }
  while (!feof(*(FILE **)(a1 + 16)))
  {
    if (!fgets(__s, 64, *(FILE **)(a1 + 16)) && !feof(*(FILE **)(a1 + 16))
      || !dynaBufAddString(a2, __s, 0))
    {
      return 0;
    }
    uint64_t v7 = dynaBufMoveRel((uint64_t)a2, 0xFFFFFFFF);
    if (dynaBufCurrentChar(a2, 0) == 10)
    {
      uint64_t v8 = dynaBufMoveRel((uint64_t)a2, 0xFFFFFFFF);
      if (dynaBufCurrentChar(a2, 0) == 32)
      {
        if (v7 != v8)
        {
          uint64_t v5 = 1;
          OUTLINED_FUNCTION_2_73();
          return v5;
        }
      }
      else
      {
        if (v7 != v8) {
          OUTLINED_FUNCTION_2_73();
        }
        dynaBufAddChar(a2, 32, 0);
        uint64_t v9 = (uint64_t *)OUTLINED_FUNCTION_1_79();
        dynaBufAddChar(v9, v10, v11);
      }
      return 1;
    }
    OUTLINED_FUNCTION_2_73();
  }
  return 1;
}

BOOL diskFileWrite(uint64_t a1, char *a2, int a3)
{
  BOOL result = 0;
  if (a2 && *(void *)(a1 + 16))
  {
    if (fputs(a2, *(FILE **)(a1 + 16)) == -1) {
      return 0;
    }
    else {
      return !a3 || fflush(*(FILE **)(a1 + 16)) != -1;
    }
  }
  return result;
}

BOOL diskFileEof(uint64_t *a1)
{
  if (checkInterrupt(*a1))
  {
    setInterrupt(*a1, 0);
    return 1;
  }
  uint64_t v3 = (FILE *)a1[2];
  if (!v3) {
    return 1;
  }
  return feof(v3) != 0;
}

BOOL diskFileClose(uint64_t a1)
{
  uint64_t v1 = *(FILE **)(a1 + 16);
  return !v1 || fclose(v1) == 0;
}

BOOL dynaBufFileOpen(uint64_t a1, void *a2, int a3)
{
  *a2 = a1;
  uint64_t v4 = a2[2];
  if (v4)
  {
    switch(a3)
    {
      case 2:
        unsigned int v5 = -1;
        goto LABEL_7;
      case 1:
        dynaBufReset(v4);
        return a2[2] != 0;
      case 0:
        unsigned int v5 = 0;
LABEL_7:
        dynaBufMoveAbs(v4, v5);
        break;
    }
  }
  return a2[2] != 0;
}

uint64_t dynaBufFileRead(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  while (1)
  {
    int v4 = dynaBufCurrentChar(*(uint64_t **)(a1 + 16), 1);
    if (!v4 || v4 == 10) {
      break;
    }
    if (!dynaBufAddChar(a2, v4, 0)) {
      return 0;
    }
  }
  addSpace(a2);
  uint64_t v7 = (uint64_t *)OUTLINED_FUNCTION_1_79();
  return dynaBufAddChar(v7, v8, v9);
}

uint64_t addSpace(uint64_t *a1)
{
  uint64_t v2 = dynaBufMoveRel((uint64_t)a1, 0);
  uint64_t v3 = dynaBufMoveRel((uint64_t)a1, 0xFFFFFFFF);
  uint64_t result = dynaBufCurrentChar(a1, 0);
  if (result == 32)
  {
    if (v2 != v3)
    {
      return dynaBufMoveRel((uint64_t)a1, 1u);
    }
  }
  else
  {
    if (v2 != v3) {
      OUTLINED_FUNCTION_2_73();
    }
    return dynaBufAddChar(a1, 32, 0);
  }
  return result;
}

uint64_t *dynaBufFileWrite(uint64_t a1, char *a2)
{
  uint64_t result = *(uint64_t **)(a1 + 16);
  if (result) {
    return (uint64_t *)(dynaBufAddString(result, a2, 0) != 0);
  }
  return result;
}

BOOL dynaBufFileEof(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  return !v1 || dynaBufAtEnd(v1);
}

uint64_t stdTermFileOpen(uint64_t a1, void *a2)
{
  *a2 = a1;
  return OUTLINED_FUNCTION_0_90();
}

uint64_t stdTermFileRead(int a1, uint64_t *a2, char *a3)
{
  if (a3) {
    fputs(a3, (FILE *)*MEMORY[0x263EF8358]);
  }
  while (1)
  {
    int v4 = getchar();
    if (v4 == -1 || v4 == 10) {
      break;
    }
    uint64_t result = dynaBufAddChar(a2, v4, 0);
    if (!result) {
      return result;
    }
  }
  addSpace(a2);
  uint64_t v7 = (uint64_t *)OUTLINED_FUNCTION_1_79();
  return dynaBufAddChar(v7, v8, v9);
}

BOOL stdTermFileWrite(int a1, char *a2, int a3)
{
  if (!a2) {
    return 0;
  }
  int v4 = (FILE **)MEMORY[0x263EF8358];
  if (fputs(a2, (FILE *)*MEMORY[0x263EF8358]) == -1) {
    return 0;
  }
  if (a3) {
    return fflush(*v4) != -1;
  }
  return 1;
}

uint64_t stdTermFileEof()
{
  return 0;
}

uint64_t stdErrorFileOpen(uint64_t a1, void *a2)
{
  *a2 = a1;
  return OUTLINED_FUNCTION_0_90();
}

BOOL stdErrorFileWrite(int a1, char *a2, int a3)
{
  if (!a2) {
    return 0;
  }
  int v4 = (FILE **)MEMORY[0x263EF8348];
  if (fputs(a2, (FILE *)*MEMORY[0x263EF8348]) == -1) {
    return 0;
  }
  if (a3) {
    return fflush(*v4) != -1;
  }
  return 1;
}

uint64_t stdErrorFileEof()
{
  return 0;
}

uint64_t nullFileOpen(uint64_t a1, void *a2)
{
  *a2 = a1;
  return OUTLINED_FUNCTION_0_90();
}

uint64_t nullFileRead(int a1, uint64_t *a2)
{
  return 1;
}

uint64_t nullFileEof()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_0_90()
{
  return 1;
}

uint64_t OUTLINED_FUNCTION_1_79()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_2_73()
{
  return dynaBufMoveRel(v0, 1u);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

void std::string::__init(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::~string(std::string *this)
{
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x270F98640]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x270F98650]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x270F98658]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986D0]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x270F98740]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x270F98748]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ifstream::open()
{
  return MEMORY[0x270F98860]();
}

uint64_t std::ofstream::open()
{
  return MEMORY[0x270F98878]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x270ED7E28](*(void *)&a1, a2);
}

uint64_t __memset_chk()
{
  return MEMORY[0x270ED7E48]();
}

int __sprintf_chk(char *a1, int a2, size_t a3, const char *a4, ...)
{
  return MEMORY[0x270ED7EB0](a1, *(void *)&a2, a3, a4);
}

uint64_t __strcat_chk()
{
  return MEMORY[0x270ED7EC8]();
}

uint64_t __strcpy_chk()
{
  return MEMORY[0x270ED7ED0]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F00](*(void *)&a1);
}

int __vsprintf_chk(char *a1, int a2, size_t a3, const char *a4, va_list a5)
{
  return MEMORY[0x270ED7F38](a1, *(void *)&a2, a3, a4, a5);
}

double atof(const char *a1)
{
  MEMORY[0x270ED86E0](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x270ED86E8](a1);
}

uint64_t atol(const char *a1)
{
  return MEMORY[0x270ED86F0](a1);
}

void bzero(void *a1, size_t a2)
{
}

int chmod(const char *a1, mode_t a2)
{
  return MEMORY[0x270ED8EC8](a1, a2);
}

clock_t clock(void)
{
  return MEMORY[0x270ED8EE8]();
}

float cosf(float a1)
{
  MEMORY[0x270ED9130](a1);
  return result;
}

void exit(int a1)
{
}

long double exp(long double __x)
{
  MEMORY[0x270ED9858](__x);
  return result;
}

long double exp2(long double __x)
{
  MEMORY[0x270ED9860](__x);
  return result;
}

float expf(float a1)
{
  MEMORY[0x270ED9870](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

int feof(FILE *a1)
{
  return MEMORY[0x270ED9910](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x270ED9938](a1);
}

int fgetc(FILE *a1)
{
  return MEMORY[0x270ED9950](a1);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x270ED9968](a1, *(void *)&a2, a3);
}

int fileno(FILE *a1)
{
  return MEMORY[0x270ED9978](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99F0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x270ED9A18](*(void *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x270ED9A20](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9A28](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x270ED9AF0](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

int getchar(void)
{
  return MEMORY[0x270ED9BC8]();
}

char *__cdecl getcwd(char *a1, size_t a2)
{
  return (char *)MEMORY[0x270ED9BD0](a1, a2);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x270ED9BE8](a1);
}

ldiv_t ldiv(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270EDA038](a1, a2);
  result.reuint64_t m = v3;
  result.quot = v2;
  return result;
}

long double log(long double __x)
{
  MEMORY[0x270EDA0A8](__x);
  return result;
}

void longjmp(jmp_buf a1, int a2)
{
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

int setjmp(jmp_buf a1)
{
  return MEMORY[0x270EDB3F8](a1);
}

float sinf(float a1)
{
  MEMORY[0x270EDB4F0](a1);
  return result;
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB530](a1, a2);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB560](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDB568](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB5A8](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x270EDB5C0](__dst, __src);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x270EDB648](__dst, __src, __n);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x270EDB6A8](a1, a2);
  return result;
}

char *__cdecl strtok(char *__str, const char *__sep)
{
  return (char *)MEMORY[0x270EDB6C8](__str, __sep);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB6D8](__str, __endptr, *(void *)&__base);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x270EDBA70](a1, a2, a3);
}