void sub_2557B6980(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_2557B6B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id MakeMTLTextureDescriptorFromTexture(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x263F12A50]);
  objc_msgSend(v2, "setPixelFormat:", objc_msgSend(v1, "pixelFormat"));
  objc_msgSend(v2, "setWidth:", objc_msgSend(v1, "width"));
  objc_msgSend(v2, "setHeight:", objc_msgSend(v1, "height"));
  [v2 setResourceOptions:32];
  if (objc_opt_respondsToSelector())
  {
    v3 = [v1 device];
    int v4 = [v3 supportsFamily:1003];

    if (v4) {
      objc_msgSend(v2, "setSwizzle:", objc_msgSend(v1, "swizzle"));
    }
  }

  return v2;
}

void sub_2557B6C88(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_2557B7008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2557B76CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2557B78F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_2557B7E5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2557B81E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2557B8660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2557B8C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_2557B8DA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t DYHarvesterInitMetadata(uint64_t result, __int16 a2, int a3)
{
  *(void *)result = 0x63617074757265;
  *(_WORD *)(result + 8) = 2;
  *(_WORD *)(result + 10) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t DYHarvesterGetMetadataSize(uint64_t result)
{
  if (result)
  {
    if (*(_WORD *)(result + 8) == 1) {
      return *(int *)(result + 12) + 16;
    }
    else {
      return *(int *)(result + 12);
    }
  }
  return result;
}

void *DYHarvesterGetMetadata(void *result)
{
  if (result)
  {
    if (*result != 0x63617074757265) {
      return 0;
    }
  }
  return result;
}

uint64_t DYHarvesterGetDataSize(uint64_t a1, uint64_t a2)
{
  if (a1 && *(void *)a1 == 0x63617074757265)
  {
    uint64_t v2 = *(int *)(a1 + 12);
    if (*(_WORD *)(a1 + 8) == 1) {
      v2 += 16;
    }
    a2 -= v2;
  }
  return a2;
}

uint64_t DYHarvesterGetOffset(uint64_t result)
{
  if (result)
  {
    if (*(void *)result == 0x63617074757265)
    {
      if (*(_WORD *)(result + 8) == 1) {
        return *(int *)(result + 12) + 16;
      }
      else {
        return *(int *)(result + 12);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t DYHarvesterGetData(uint64_t result)
{
  if (result && *(void *)result == 0x63617074757265)
  {
    uint64_t v1 = *(int *)(result + 12);
    if (*(_WORD *)(result + 8) == 1) {
      v1 += 16;
    }
    result += v1;
  }
  return result;
}

unint64_t DYHarvesterGetTextureMetadataRequiredSize(uint64_t a1)
{
  return (48 * a1 + 279) & 0xFFFFFFFFFFFFFF00;
}

uint64_t DYHarvesterGetTexturePlaneCount(uint64_t result)
{
  if (result)
  {
    if (*(_WORD *)(result + 10) == 1) {
      return *(void *)(result + 16);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t DYHarvesterGetTexturePlane(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (*(_WORD *)(result + 10) == 1)
    {
      if (*(void *)(result + 16) >= a2) {
        result += 48 * a2 + 24;
      }
      else {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__n128 DYHarvesterAddTexturePlane(uint64_t a1, long long *a2)
{
  uint64_t v2 = a1 + 48 * *(void *)(a1 + 16);
  long long v4 = *a2;
  __n128 result = (__n128)a2[1];
  *(_OWORD *)(v2 + 56) = a2[2];
  *(_OWORD *)(v2 + 24) = v4;
  *(__n128 *)(v2 + 40) = result;
  ++*(void *)(a1 + 16);
  return result;
}

float64_t DYShaderProfilerTiming::Statistics::operator+=(float64x2_t *a1, float64x2_t *a2)
{
  *a1 = vaddq_f64(*a2, *a1);
  float64_t result = a2[1].f64[0] + a1[1].f64[0];
  a1[1].f64[0] = result;
  return result;
}

float64_t DYShaderProfilerTiming::Statistics::operator*=(float64x2_t *a1, double a2)
{
  *a1 = vmulq_n_f64(*a1, a2);
  float64_t result = a1[1].f64[0] * a2;
  a1[1].f64[0] = result;
  return result;
}

double DYShaderProfilerTiming::Statistics::operator+(double *a1, double *a2)
{
  return *a1 + *a2;
}

double DYShaderProfilerTiming::Statistics::operator*(double *a1, double a2)
{
  return *a1 * a2;
}

DYShaderProfilerTiming *DYShaderProfilerTiming::SetCycle(DYShaderProfilerTiming *this, double a2, double a3, double a4)
{
  this->_cycle.average = a2;
  this->_cycle.min = a3;
  this->_cycle.max = a4;
  return this;
}

float64x2_t DYShaderProfilerTiming::UpdateDependantVariables(DYShaderProfilerTiming *this, float64x2_t result, double a3)
{
  if (result.f64[0] != 0.0 && a3 != 0.0)
  {
    double v3 = a3 / result.f64[0];
    double v4 = v3 * this->_cycle.max;
    float64_t result = vmulq_n_f64(*(float64x2_t *)&this->_cycle.average, v3);
    *(float64x2_t *)&this->_time.average = result;
    this->_time.max = v4;
  }
  return result;
}

float64_t DYShaderProfilerTiming::operator+=(float64x2_t *a1, float64x2_t *a2)
{
  *a1 = vaddq_f64(*a2, *a1);
  float64_t result = a2[1].f64[0] + a1[1].f64[0];
  a1[1].f64[0] = result;
  return result;
}

void sub_2557B94B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2557B9958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2557B9AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2557B9F50(_Unwind_Exception *a1)
{
  double v3 = v2;

  _Unwind_Resume(a1);
}

void sub_2557BA2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      double v3 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<int,unsigned int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned int>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<int,unsigned int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned int>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      double v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  double v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = a1 + 16;
  v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)v14 = 0;
  *((void *)v14 + 1) = v7;
  *((void *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  v11 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v11;
}

void sub_2557BA608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<int,unsigned int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned int>>>::~__hash_table((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

void *std::__hash_table<std::__hash_value_type<int,unsigned int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  size_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  void *v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    size_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_2557BAB04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2557BADFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_2557BB110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2557BB43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_2557BB634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2557BB758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2557BB9A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2557BBAA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t GPUTools::MTL::Utils::DYMTLCounter::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if (a1[23])
  {
    unint64_t v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  uint64_t v9 = a1[47];
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = a1[47];
  }
  else {
    uint64_t v10 = *((void *)a1 + 4);
  }
  uint64_t v11 = v6[47];
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *((void *)v6 + 4);
  }
  if (v10 != v11) {
    return 0;
  }
  float v13 = (const void **)(a1 + 24);
  unint64_t v16 = (unsigned __int8 *)*((void *)v6 + 3);
  BOOL v15 = v6 + 24;
  float v14 = v16;
  if (v12 >= 0) {
    unint64_t v17 = v15;
  }
  else {
    unint64_t v17 = v14;
  }
  if ((v9 & 0x80) != 0) {
    return memcmp(*v13, v17, *((void *)a1 + 4)) == 0;
  }
  if (!a1[47]) {
    return 1;
  }
  uint64_t v18 = v9 - 1;
  do
  {
    int v20 = *(unsigned __int8 *)v13;
    float v13 = (const void **)((char *)v13 + 1);
    int v19 = v20;
    int v22 = *v17++;
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    uint64_t result = v19 == v21;
  }
  while (v19 == v21 && v24);
  return result;
}

uint64_t GPUTools::MTL::Utils::DYMTLCounterSet::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if (a1[23])
  {
    unint64_t v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  uint64_t v9 = a1[47];
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = a1[47];
  }
  else {
    uint64_t v10 = *((void *)a1 + 4);
  }
  uint64_t v11 = v6[47];
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *((void *)v6 + 4);
  }
  if (v10 != v11) {
    return 0;
  }
  float v13 = (const void **)(a1 + 24);
  if (v12 >= 0) {
    float v14 = v6 + 24;
  }
  else {
    float v14 = (unsigned __int8 *)*((void *)v6 + 3);
  }
  if ((v9 & 0x80) != 0)
  {
    if (!memcmp(*v13, v14, *((void *)a1 + 4))) {
      goto LABEL_31;
    }
    return 0;
  }
  if (a1[47])
  {
    while (*(unsigned __int8 *)v13 == *v14)
    {
      float v13 = (const void **)((char *)v13 + 1);
      ++v14;
      if (!--v9) {
        goto LABEL_31;
      }
    }
    return 0;
  }
LABEL_31:
  unint64_t v15 = *((void *)a1 + 6);
  if (v15 != *((void *)v6 + 6) || *((void *)a1 + 103) != *((void *)v6 + 103)) {
    return 0;
  }
  if (!v15) {
    return 1;
  }
  uint64_t result = GPUTools::MTL::Utils::DYMTLCounter::operator==(a1 + 56, v6 + 56);
  if (result)
  {
    unint64_t v17 = v6 + 104;
    uint64_t v18 = a1 + 104;
    uint64_t v19 = 1;
    do
    {
      unint64_t v20 = v19;
      if (v15 == v19) {
        break;
      }
      char v21 = GPUTools::MTL::Utils::DYMTLCounter::operator==(v18, v17);
      uint64_t v19 = v20 + 1;
      v17 += 48;
      v18 += 48;
    }
    while ((v21 & 1) != 0);
    return v20 >= v15;
  }
  return result;
}

void GPUTools::MTL::Utils::MakeAliasResourceList(unint64_t *a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v4 = a1;
    LODWORD(v5) = 0;
    uint64_t v6 = (void *)(a2 + 16);
    unint64_t v7 = *(unint64_t **)(a2 + 8);
    do
    {
      unint64_t v9 = v4[1];
      ++v4;
      unint64_t v8 = v9;
      if ((unint64_t)v7 >= *v6)
      {
        uint64_t v11 = *(unint64_t **)a2;
        uint64_t v12 = ((uint64_t)v7 - *(void *)a2) >> 3;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = *v6 - (void)v11;
        if (v14 >> 2 > v13) {
          unint64_t v13 = v14 >> 2;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v6, v15);
          uint64_t v11 = *(unint64_t **)a2;
          unint64_t v7 = *(unint64_t **)(a2 + 8);
        }
        else
        {
          unint64_t v16 = 0;
        }
        unint64_t v17 = &v16[8 * v12];
        *(void *)unint64_t v17 = v8;
        uint64_t v10 = (unint64_t *)(v17 + 8);
        while (v7 != v11)
        {
          uint64_t v18 = *--v7;
          *((void *)v17 - 1) = v18;
          v17 -= 8;
        }
        *(void *)a2 = v17;
        *(void *)(a2 + 8) = v10;
        *(void *)(a2 + 16) = &v16[8 * v15];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        unint64_t *v7 = v8;
        uint64_t v10 = v7 + 1;
      }
      *(void *)(a2 + 8) = v10;
      unint64_t v5 = (v5 + 1);
      unint64_t v7 = v10;
    }
    while (v2 > v5);
  }
}

void GPUTools::MTL::Utils::EnumerateValidAttachmentsForType(void *a1, char a2, void *a3)
{
  unint64_t v5 = a3;
  char v8 = 0;
  if (a2)
  {
    uint64_t v6 = 0;
    unint64_t v7 = a1 + 2;
    while (1)
    {
      if (*v7)
      {
        v5[2](v5, v7, 1, v6, &v8);
        if (v8) {
          break;
        }
      }
      ++v6;
      v7 += 18;
      if (v6 == 8) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    if ((a2 & 2) != 0 && a1[146])
    {
      v5[2](v5, a1 + 146, 2, 0, &v8);
      if ((a2 & 4) == 0 || v8) {
        goto LABEL_14;
      }
    }
    else if ((a2 & 4) == 0)
    {
      goto LABEL_14;
    }
    if (a1[164]) {
      v5[2](v5, a1 + 164, 4, 0, &v8);
    }
  }
LABEL_14:
}

void sub_2557BC024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void **GPUTools::MTL::Utils::MakeDYMTLRenderPassDescriptor(uint64_t a1, void *a2)
{
  unsigned int v4 = *(_DWORD *)a1;
  bzero(__src, 0x63BuLL);
  uint64_t v5 = 1;
  do
  {
    uint64_t v6 = &__src[v5];
    v6[2] = 0uLL;
    v6[3] = 0uLL;
    _OWORD *v6 = 0uLL;
    v6[1] = 0uLL;
    *((void *)v6 + 8) = 0;
    *((void *)v6 + 9) = 1;
    v6[5] = 0uLL;
    v6[6] = 0uLL;
    *((void *)v6 + 14) = 0x3FF0000000000000;
    v5 += 9;
    *((void *)v6 + 16) = 0;
    *((void *)v6 + 17) = 0;
  }
  while (v6 + 9 != &__src[73]);
  memset(&__src[73], 0, 72);
  *((void *)&__src[77] + 1) = 1;
  memset(&__src[78], 0, 32);
  *(void *)&__src[80] = 0x3FF0000000000000;
  memset(&__src[81], 0, 88);
  *((void *)&__src[86] + 1) = 1;
  memset(&__src[87], 0, 32);
  *(void *)&__src[89] = 0x3FF0000000000000;
  __src[90] = 0uLL;
  memcpy(a2, __src, 0x63BuLL);
  *a2 = *(void *)(a1 + 8);
  BOOL v24 = (uint64_t *)(a1 + 24);
  for (uint64_t i = *(void *)(a1 + 16); i != -1; ++v24)
  {
    GPUTools::MTL::Utils::MakeDYMTLRenderPassAttachmentDescriptor(&v24, (uint64_t)&a2[18 * i + 2], v4);
    uint64_t i = *v24;
  }
  GPUTools::MTL::Utils::MakeDYMTLRenderPassAttachmentDescriptor(&v24, (uint64_t)(a2 + 146), v4);
  if (v4 <= 4)
  {
    uint64_t result = GPUTools::MTL::Utils::MakeDYMTLRenderPassAttachmentDescriptor(&v24, (uint64_t)(a2 + 164), v4);
LABEL_27:
    a2[198] = 0;
    goto LABEL_28;
  }
  uint64_t v8 = *v24++;
  if (v8 == -1) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  a2[162] = v9;
  uint64_t result = GPUTools::MTL::Utils::MakeDYMTLRenderPassAttachmentDescriptor(&v24, (uint64_t)(a2 + 164), v4);
  if (v4 < 7) {
    goto LABEL_27;
  }
  uint64_t v11 = v24;
  uint64_t v12 = *v24++;
  uint64_t v13 = v12 == -1 ? 0 : v12;
  a2[1] = v13;
  if (v4 <= 0xC) {
    goto LABEL_27;
  }
  a2[182] = v11[1];
  a2[183] = v11[2];
  a2[184] = v11[3];
  a2[185] = v11[4];
  a2[186] = v11[5];
  a2[187] = v11[6];
  a2[188] = v11[7];
  a2[198] = 0;
  if (v4 == 13) {
    return result;
  }
  uint64_t v14 = v11 + 9;
  BOOL v24 = v11 + 9;
  uint64_t v15 = v11[8];
  if (v15)
  {
    a2[198] = v15;
    unint64_t v16 = (_DWORD *)a2 + 381;
    do
    {
      *(v16 - 1) = *(_DWORD *)v14;
      unint64_t v17 = v14 + 2;
      _DWORD *v16 = *((_DWORD *)v14 + 2);
      v16 += 2;
      v14 += 2;
      --v15;
    }
    while (v15);
    BOOL v24 = v17;
    uint64_t v14 = v17;
  }
  if (v4 >= 0x14)
  {
    uint64_t v18 = *v14;
    BOOL v24 = v14 + 1;
    uint64_t v19 = v18 == -1 ? 0 : v18;
    a2[181] = v19;
    if (v4 >= 0x18)
    {
      BOOL v24 = v14 + 2;
      *((unsigned char *)a2 + 1592) = v14[1] != 0;
      if (v4 >= 0x21)
      {
        BOOL v24 = v14 + 3;
        a2[189] = v14[2];
      }
    }
  }
LABEL_28:
  if ((v4 & 0xFFFFFFFE) == 0x22)
  {
    unint64_t v20 = v24 - 3;
    do
    {
      uint64_t v21 = v20[3];
      v20 += 4;
    }
    while (v21 != -1);
    BOOL v24 = v20;
  }
  if (v4 >= 0x27)
  {
    int v22 = v24;
    *((unsigned char *)a2 + 1593) = *v24 != 0;
    if (v4 >= 0x43) {
      *((unsigned char *)a2 + 1594) = v22[1] != 0;
    }
  }
  return result;
}

void **GPUTools::MTL::Utils::MakeDYMTLRenderPassAttachmentDescriptor(void **result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *result;
  *(void *)a2 = **result;
  *(void *)(a2 + 8) = v3[1];
  *(void *)(a2 + 16) = v3[2];
  uint64_t v4 = v3[3];
  *uint64_t result = v3 + 3;
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = v3[4];
  *(void *)(a2 + 40) = v3[5];
  *(void *)(a2 + 48) = v3[6];
  *(void *)(a2 + 56) = v3[7];
  *(_OWORD *)(a2 + 64) = *((_OWORD *)v3 + 4);
  if (a3 < 0x13)
  {
    uint64_t v5 = v3 + 10;
  }
  else
  {
    uint64_t v5 = v3 + 11;
    *(void *)(a2 + 80) = v3[10];
  }
  uint64_t v6 = *v5;
  *uint64_t result = v5 + 1;
  *(void *)(a2 + 88) = v6;
  uint64_t v7 = *(*result)++;
  *(void *)(a2 + 96) = v7;
  uint64_t v8 = *(*result)++;
  *(void *)(a2 + 104) = v8;
  uint64_t v9 = *(*result)++;
  *(void *)(a2 + 112) = v9;
  if (a3 >= 0x27)
  {
    uint64_t v10 = *(*result)++;
    *(unsigned char *)(a2 + 120) = v10 != 0;
  }
  return result;
}

double GPUTools::MTL::Utils::MakeDYMTLRenderPipelineDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a2 + 1560);
  unsigned int v5 = *(_DWORD *)a1;
  bzero(&v32, 0x617uLL);
  bzero(&v34[192], 0x250uLL);
  uint64_t v6 = 1576;
  do
  {
    uint64_t v7 = (char *)&v32 + v6;
    *(void *)uint64_t v7 = 1;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = 0;
    *((void *)v7 + 3) = 1;
    *((void *)v7 + 4) = 0;
    *((void *)v7 + 5) = 0;
    *((_OWORD *)v7 + 3) = xmmword_2557EF9F0;
    v6 += 72;
    v7[64] = 0;
  }
  while (v7 + 72 != (char *)&v34[266]);
  memset(&v34[266], 0, 25);
  bzero(&v34[270], 0x211uLL);
  memset(&v34[337], 0, 56);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = v32;
  *(void *)(a2 + 16) = v33;
  memcpy((void *)(a2 + 24), v34, 0xAC0uLL);
  *(void *)(a2 + 32) = *(void *)(a1 + 8);
  *(void *)(a2 + 40) = *(void *)(a1 + 16);
  if (v5 >= 0x1A)
  {
    uint64_t v8 = (unsigned int *)(a1 + 32);
    uint64_t v9 = *(unsigned int *)(a1 + 24);
    if (!v9) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v8 = (unsigned int *)(a1 + 24);
    uint64_t v9 = 31;
  }
  uint64_t v10 = (void *)(a2 + 64);
  uint64_t v11 = v8;
  do
  {
    *(v10 - 1) = *(void *)v11;
    *(v10 - 2) = *((void *)v11 + 1);
    uint64_t v8 = v11 + 6;
    void *v10 = *((void *)v11 + 2);
    v10 += 3;
    v11 += 6;
    --v9;
  }
  while (v9);
  if (v5 >= 0x1A)
  {
LABEL_12:
    unsigned int v13 = *v8;
    v8 += 2;
    uint64_t v12 = v13;
    if (!v13) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  uint64_t v12 = 31;
LABEL_13:
  uint64_t v14 = (void *)(a2 + 808);
  do
  {
    void *v14 = *(void *)v8;
    *(v14 - 2) = *((void *)v8 + 1);
    uint64_t v15 = v8 + 6;
    *(v14 - 1) = *((void *)v8 + 2);
    v14 += 3;
    v8 += 6;
    --v12;
  }
  while (v12);
  uint64_t v8 = v15;
LABEL_16:
  *(void *)(a2 + 1536) = *(void *)v8;
  *(void *)(a2 + 1544) = *((void *)v8 + 1);
  *(_DWORD *)(a2 + 1552) = v8[4];
  *(unsigned char *)(a2 + 1556) = v8[6] != 0;
  *(unsigned char *)(a2 + 1557) = v8[8] != 0;
  *(unsigned char *)(a2 + 1558) = v8[10] != 0;
  _OWORD *v4 = *((_OWORD *)v8 + 3);
  uint64_t v16 = v8[16];
  unint64_t v17 = (const char *)(v8 + 18);
  if (v16)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 72 * v16;
    do
    {
      uint64_t v20 = a2 + v18;
      *(unsigned char *)(v20 + 1640) = *(_DWORD *)&v17[v18] != 0;
      *(_OWORD *)(a2 + v18 + 1576) = *(_OWORD *)&v17[v18 + 8];
      *(_OWORD *)(v20 + 1592) = *(_OWORD *)&v17[v18 + 24];
      *(_OWORD *)(v20 + 1608) = *(_OWORD *)&v17[v18 + 40];
      *(_OWORD *)(v20 + 1624) = *(_OWORD *)&v17[v18 + 56];
      v18 += 72;
    }
    while (v19 != v18);
    v17 += v18;
  }
  size_t v21 = strlen(v17);
  MEMORY[0x25A28E910](a2, v17);
  if (v5 <= 6 || (*(void *)(a2 + 2152) = *(void *)&v17[(v21 & 0xFFFFFFFFFFFFFFF8) + 8], v5 <= 8))
  {
    *(_OWORD *)(a2 + 2160) = xmmword_2557EFA00;
    *(unsigned char *)(a2 + 2176) = 0;
    *(void *)(a2 + 2184) = 0;
    *(_OWORD *)(a2 + 2192) = xmmword_2557EFA10;
    *(void *)(a2 + 2208) = 1;
    goto LABEL_26;
  }
  *(_OWORD *)(a2 + 2160) = *(_OWORD *)&v17[(v21 & 0xFFFFFFFFFFFFFFF8) + 16];
  *(unsigned char *)(a2 + 2176) = *(_DWORD *)&v17[(v21 & 0xFFFFFFFFFFFFFFF8) + 32] != 0;
  v4[39] = *(_OWORD *)&v17[(v21 & 0xFFFFFFFFFFFFFFF8) + 40];
  long long v22 = *(_OWORD *)&v17[(v21 & 0xFFFFFFFFFFFFFFF8) + 56];
  v4[40] = v22;
  if (v5 <= 0x11)
  {
LABEL_26:
    *(void *)&long long v22 = 0;
    *(_OWORD *)(a2 + 2680) = 0u;
    *(_OWORD *)(a2 + 2696) = 0u;
    *(_OWORD *)(a2 + 2648) = 0u;
    *(_OWORD *)(a2 + 2664) = 0u;
    *(_OWORD *)(a2 + 2616) = 0u;
    *(_OWORD *)(a2 + 2632) = 0u;
    *(_OWORD *)(a2 + 2584) = 0u;
    *(_OWORD *)(a2 + 2600) = 0u;
    *(_OWORD *)(a2 + 2552) = 0u;
    *(_OWORD *)(a2 + 2568) = 0u;
    *(_OWORD *)(a2 + 2520) = 0u;
    *(_OWORD *)(a2 + 2536) = 0u;
    *(_OWORD *)(a2 + 2488) = 0u;
    *(_OWORD *)(a2 + 2504) = 0u;
    *(_OWORD *)(a2 + 2456) = 0u;
    *(_OWORD *)(a2 + 2472) = 0u;
    *(_OWORD *)(a2 + 2424) = 0u;
    *(_OWORD *)(a2 + 2440) = 0u;
    *(_OWORD *)(a2 + 2392) = 0u;
    *(_OWORD *)(a2 + 2408) = 0u;
    *(_OWORD *)(a2 + 2360) = 0u;
    *(_OWORD *)(a2 + 2376) = 0u;
    *(_OWORD *)(a2 + 2328) = 0u;
    *(_OWORD *)(a2 + 2344) = 0u;
    *(_OWORD *)(a2 + 2296) = 0u;
    *(_OWORD *)(a2 + 2312) = 0u;
    *(_OWORD *)(a2 + 2264) = 0u;
    *(_OWORD *)(a2 + 2280) = 0u;
    *(_OWORD *)(a2 + 2232) = 0u;
    *(_OWORD *)(a2 + 2248) = 0u;
    *(_OWORD *)(a2 + 2216) = 0u;
LABEL_27:
    *(void *)(a2 + 2728) = -1;
    return *(double *)&v22;
  }
  if (v5 >= 0x1A)
  {
    unint64_t v23 = (unint64_t)&v17[(v21 & 0xFFFFFFFFFFFFFFF8) + 80];
    LODWORD(v24) = *(_DWORD *)&v17[(v21 & 0xFFFFFFFFFFFFFFF8) + 72];
    if (!v24) {
      goto LABEL_34;
    }
  }
  else
  {
    unint64_t v23 = (unint64_t)&v17[(v21 & 0xFFFFFFFFFFFFFFF8) + 72];
    LODWORD(v24) = 31;
  }
  uint64_t v24 = v24;
  char v25 = (void *)(a2 + 2216);
  do
  {
    uint64_t v26 = *(void *)v23;
    v23 += 8;
    *v25++ = v26;
    --v24;
  }
  while (v24);
  if (v5 >= 0x1A)
  {
LABEL_34:
    int v28 = *(_DWORD *)v23;
    v23 += 8;
    LODWORD(v27) = v28;
    if (!v28) {
      goto LABEL_38;
    }
    goto LABEL_35;
  }
  LODWORD(v27) = 31;
LABEL_35:
  uint64_t v27 = v27;
  v29 = (void *)(a2 + 2464);
  do
  {
    uint64_t v30 = *(void *)v23;
    v23 += 8;
    *v29++ = v30;
    --v27;
  }
  while (v27);
  if (v5 < 0x17) {
    goto LABEL_27;
  }
LABEL_38:
  *(unsigned char *)(a2 + 2712) = *(_DWORD *)v23 == 0;
  if (v5 <= 0x1F) {
    goto LABEL_27;
  }
  long long v22 = *(_OWORD *)(v23 + 8);
  *(_OWORD *)(a2 + 2720) = v22;
  if (v5 >= 0x27)
  {
    *(void *)(a2 + 2736) = *(void *)(v23 + 32);
    *(void *)(a2 + 2744) = *(void *)(v23 + 40);
    *(void *)(a2 + 2752) = *(void *)(v23 + 48);
    *(void *)(a2 + 2760) = *(void *)(v23 + 56);
    *(int8x8_t *)&long long v22 = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)(v23 + 64)), (int32x4_t)vceqzq_s64(*(int64x2_t *)(v23 + 80))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)(v23 + 96)), (int32x4_t)vceqzq_s64(*(int64x2_t *)(v23 + 112)))))), (int8x8_t)0x101010101010101);
    *(void *)(a2 + 2768) = v22;
  }
  return *(double *)&v22;
}

uint64_t GPUTools::MTL::Utils::MakeDYMTLTileRenderPipelineDescriptor(char *__s, uint64_t a2)
{
  uint64_t v3 = __s + 8;
  unsigned int v4 = *(_DWORD *)__s;
  long long v5 = 0uLL;
  memset(&v17[7], 0, 248);
  if (*(char *)(a2 + 23) < 0)
  {
    operator delete(*(void **)a2);
    long long v5 = 0uLL;
  }
  *(_OWORD *)(a2 + 89) = v5;
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 80) = v5;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 233) = *(_OWORD *)&v17[128];
  *(_OWORD *)(a2 + 249) = *(_OWORD *)&v17[144];
  *(_OWORD *)(a2 + 169) = *(_OWORD *)&v17[64];
  *(_OWORD *)(a2 + 185) = *(_OWORD *)&v17[80];
  *(_OWORD *)(a2 + 201) = *(_OWORD *)&v17[96];
  *(_OWORD *)(a2 + 217) = *(_OWORD *)&v17[112];
  *(_OWORD *)(a2 + 105) = *(_OWORD *)v17;
  *(_OWORD *)(a2 + 121) = *(_OWORD *)&v17[16];
  *(_OWORD *)(a2 + 137) = *(_OWORD *)&v17[32];
  *(_OWORD *)(a2 + 153) = *(_OWORD *)&v17[48];
  *(_OWORD *)(a2 + 297) = *(_OWORD *)&v17[192];
  *(_OWORD *)(a2 + 313) = *(_OWORD *)&v17[208];
  *(_OWORD *)(a2 + 329) = *(_OWORD *)&v17[224];
  *(_OWORD *)(a2 + 344) = *(_OWORD *)&v17[239];
  *(_OWORD *)(a2 + 265) = *(_OWORD *)&v17[160];
  *(_OWORD *)(a2 + 281) = *(_OWORD *)&v17[176];
  uint64_t v6 = &v3[strlen(v3) & 0xFFFFFFFFFFFFFFF8];
  uint64_t result = MEMORY[0x25A28E910](a2, v3);
  *(void *)(a2 + 24) = *((void *)v6 + 1);
  *(void *)(a2 + 32) = *((void *)v6 + 2);
  uint64_t v8 = (uint64_t *)(v6 + 32);
  uint64_t v9 = *((unsigned int *)v6 + 6);
  if (v9)
  {
    uint64_t v10 = (void *)(a2 + 40);
    do
    {
      uint64_t v11 = *v8++;
      *v10++ = v11;
      --v9;
    }
    while (v9);
  }
  uint64_t v12 = v8 + 1;
  *(unsigned char *)(a2 + 104) = *(_DWORD *)v8 != 0;
  if (v4 <= 0x11)
  {
    *(void *)(a2 + 352) = 0;
    *(_OWORD *)(a2 + 320) = 0u;
    *(_OWORD *)(a2 + 336) = 0u;
    *(_OWORD *)(a2 + 288) = 0u;
    *(_OWORD *)(a2 + 304) = 0u;
    *(_OWORD *)(a2 + 256) = 0u;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    return result;
  }
  if (v4 >= 0x1A)
  {
    unsigned int v13 = *((_DWORD *)v8 + 2);
    if (!v13) {
      return result;
    }
    uint64_t v12 = v8 + 2;
  }
  else
  {
    unsigned int v13 = 31;
  }
  uint64_t v14 = v13;
  uint64_t v15 = (void *)(a2 + 112);
  do
  {
    uint64_t v16 = *v12++;
    *v15++ = v16;
    --v14;
  }
  while (v14);
  return result;
}

uint64_t GPUTools::MTL::Utils::MakeDYMTLDeviceDescriptor(int *a1, uint64_t a2)
{
  int v4 = *a1;
  *(_DWORD *)a2 = 0;
  uint64_t v5 = a2 + 8;
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*(void **)v5);
  }
  uint64_t v6 = (void **)(a2 + 32);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*v6);
  }
  uint64_t v7 = (void **)(a2 + 56);
  const char *v6 = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  if (*(char *)(a2 + 79) < 0) {
    operator delete(*v7);
  }
  uint64_t v8 = (void **)(a2 + 80);
  char *v7 = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  if (*(char *)(a2 + 103) < 0) {
    operator delete(*v8);
  }
  uint64_t v9 = *(void **)(a2 + 160);
  long long v10 = 0uLL;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *uint64_t v8 = 0;
  *(void *)(a2 + 101) = 0;
  if (v9)
  {
    *(void *)(a2 + 168) = v9;
    operator delete(v9);
    long long v10 = 0uLL;
  }
  *(_OWORD *)(a2 + 240) = v10;
  *(_OWORD *)(a2 + 256) = v10;
  *(_OWORD *)(a2 + 208) = v10;
  *(_OWORD *)(a2 + 224) = v10;
  *(_OWORD *)(a2 + 176) = v10;
  *(_OWORD *)(a2 + 192) = v10;
  *(_OWORD *)(a2 + 160) = v10;
  *(_DWORD *)a2 = v4;
  uint64_t v11 = a1 + 4;
  *(void *)(a2 + 112) = *((void *)a1 + 1);
  size_t v12 = (size_t)a1 + (strlen((const char *)a1 + 16) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t result = MEMORY[0x25A28E910](v5, v11);
  *(void *)(a2 + 120) = *(void *)(v12 + 8);
  *(void *)(a2 + 128) = *(void *)(v12 + 16);
  *(void *)(a2 + 136) = *(void *)(v12 + 24);
  size_t v14 = v12 + 40;
  *(unsigned char *)(a2 + 104) = *(unsigned char *)(v12 + 32);
  if (!*(void *)(a2 + 112))
  {
    uint64_t v15 = (const char *)((strlen((const char *)(v12 + 40)) & 0xFFFFFFFFFFFFFFF8) + v14 + 8);
    MEMORY[0x25A28E910](a2 + 32, v14);
    uint64_t v16 = &v15[(strlen(v15) & 0xFFFFFFFFFFFFFFF8) + 8];
    MEMORY[0x25A28E910](a2 + 56, v15);
    unint64_t v17 = &v16[strlen(v16) & 0xFFFFFFFFFFFFFFF8];
    uint64_t result = MEMORY[0x25A28E910](a2 + 80, v16);
    *(unsigned char *)(a2 + 105) = v17[8];
    size_t v14 = (size_t)(v17 + 24);
    *(unsigned char *)(a2 + 106) = v17[16];
  }
  uint64_t v18 = (_OWORD *)(a2 + 184);
  unsigned int v19 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 < 0xCu
    || (*(void *)(a2 + 144) = *(void *)v14, *(void *)(a2 + 152) = *(void *)(v14 + 8), v19 <= 0xE))
  {
    *(void *)&long long v23 = -1;
    *((void *)&v23 + 1) = -1;
    *(_OWORD *)(a2 + 232) = v23;
    *(_OWORD *)(a2 + 248) = v23;
    *(_OWORD *)(a2 + 200) = v23;
    *(_OWORD *)(a2 + 216) = v23;
    _OWORD *v18 = v23;
  }
  else
  {
    *(unsigned char *)(a2 + 107) = *(unsigned char *)(v14 + 16);
    *(void *)&long long v20 = -1;
    *((void *)&v20 + 1) = -1;
    _OWORD *v18 = v20;
    *(_OWORD *)(a2 + 200) = v20;
    *(_OWORD *)(a2 + 216) = v20;
    *(_OWORD *)(a2 + 232) = v20;
    *(_OWORD *)(a2 + 248) = v20;
    if (v19 >= 0x19)
    {
      uint64_t v21 = *(void *)(v14 + 24);
      *(void *)uint64_t v18 = v21;
      if (v21 == -1)
      {
        long long v22 = (void *)(v14 + 32);
      }
      else
      {
        *(void *)(a2 + 192) = *(void *)(v14 + 32);
        *(void *)(a2 + 200) = *(void *)(v14 + 40);
        *(void *)(a2 + 208) = *(void *)(v14 + 48);
        *(void *)(a2 + 216) = *(void *)(v14 + 56);
        *(void *)(a2 + 224) = *(void *)(v14 + 64);
        *(void *)(a2 + 232) = *(void *)(v14 + 72);
        *(void *)(a2 + 240) = *(void *)(v14 + 80);
        *(void *)(a2 + 248) = *(void *)(v14 + 88);
        long long v22 = (void *)(v14 + 104);
        *(void *)(a2 + 256) = *(void *)(v14 + 96);
      }
      if (v19 >= 0x1C)
      {
        *(void *)(a2 + 264) = *v22;
        if (v19 != 28) {
          *(unsigned char *)(a2 + 108) = v22[1] != 0;
        }
      }
    }
  }
  return result;
}

void *GPUTools::MTL::Utils::MakeDYMTLComputePipelineDescriptor(uint64_t a1, void **a2)
{
  unsigned int v4 = *(_DWORD *)a1;
  if (*((char *)a2 + 23) < 0) {
    operator delete(*a2);
  }
  bzero(a2, 0x702uLL);
  a2[3] = *(void **)(a1 + 8);
  uint64_t v5 = a1 + 24;
  *((unsigned char *)a2 + 1792) = *(_DWORD *)(a1 + 16) != 0;
  size_t v6 = strlen((const char *)(a1 + 24));
  uint64_t result = (void *)MEMORY[0x25A28E910](a2, v5);
  if (v4 < 0xB) {
    goto LABEL_21;
  }
  uint64_t v8 = (int8x16_t *)((v6 & 0xFFFFFFFFFFFFFFF8) + v5 + 8);
  uint64_t v9 = v8->i64[0];
  if (v8->i64[0] == -1)
  {
    long long v10 = (int8x16_t *)&v8->u64[1];
    goto LABEL_18;
  }
  if (v4 >= 0x1A)
  {
    uint64_t v8 = (int8x16_t *)((char *)v8 + 8);
    uint64_t v9 = v9;
    if (!v9) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v9 = 31;
  }
  uint64_t v11 = (int8x16_t *)&v22[1];
  size_t v12 = v8;
  do
  {
    v11[-1] = vextq_s8(*v12, *v12, 8uLL);
    uint64_t v8 = (int8x16_t *)((char *)v12 + 24);
    v11->i64[0] = v12[1].i64[0];
    uint64_t v11 = (int8x16_t *)((char *)v11 + 24);
    size_t v12 = (int8x16_t *)((char *)v12 + 24);
    --v9;
  }
  while (v9);
  if (v4 < 0x1A)
  {
    uint64_t v13 = 31;
    goto LABEL_14;
  }
LABEL_13:
  unsigned __int32 v14 = v8->i32[0];
  uint64_t v8 = (int8x16_t *)((char *)v8 + 8);
  uint64_t v13 = v14;
  if (v14)
  {
LABEL_14:
    uint64_t v15 = (void *)&v22[47] + 1;
    do
    {
      *uint64_t v15 = v8->i64[0];
      *(v15 - 2) = v8->i64[1];
      uint64_t v16 = (int8x16_t *)((char *)v8 + 24);
      *(v15 - 1) = v8[1].i64[0];
      v15 += 3;
      uint64_t v8 = (int8x16_t *)((char *)v8 + 24);
      --v13;
    }
    while (v13);
    uint64_t v8 = v16;
  }
  int8x16_t v17 = *v8;
  long long v10 = v8 + 1;
  v22[93] = v17;
  uint64_t result = memcpy(a2 + 5, v22, 0x5E0uLL);
LABEL_18:
  if (v4 <= 0x11)
  {
LABEL_21:
    a2[223] = 0;
    *(_OWORD *)(a2 + 219) = 0u;
    *(_OWORD *)(a2 + 221) = 0u;
    *(_OWORD *)(a2 + 215) = 0u;
    *(_OWORD *)(a2 + 217) = 0u;
    *(_OWORD *)(a2 + 211) = 0u;
    *(_OWORD *)(a2 + 213) = 0u;
    *(_OWORD *)(a2 + 207) = 0u;
    *(_OWORD *)(a2 + 209) = 0u;
    *(_OWORD *)(a2 + 203) = 0u;
    *(_OWORD *)(a2 + 205) = 0u;
    *(_OWORD *)(a2 + 199) = 0u;
    *(_OWORD *)(a2 + 201) = 0u;
    *(_OWORD *)(a2 + 195) = 0u;
    *(_OWORD *)(a2 + 197) = 0u;
    *(_OWORD *)(a2 + 193) = 0u;
    return result;
  }
  if (v4 >= 0x1A)
  {
    __int32 v19 = v10->i32[0];
    long long v10 = (int8x16_t *)((char *)v10 + 8);
    LODWORD(v18) = v19;
    if (!v19) {
      goto LABEL_26;
    }
  }
  else
  {
    LODWORD(v18) = 31;
  }
  uint64_t v18 = v18;
  long long v20 = (uint64_t *)(a2 + 193);
  do
  {
    uint64_t v21 = v10->i64[0];
    long long v10 = (int8x16_t *)((char *)v10 + 8);
    *v20++ = v21;
    --v18;
  }
  while (v18);
LABEL_26:
  if (v4 >= 0x1B)
  {
    *((unsigned char *)a2 + 1793) = v10->i32[0] == 0;
    if (v4 >= 0x25) {
      a2[4] = (void *)v10->i64[1];
    }
  }
  return result;
}

uint64_t GPUTools::MTL::Utils::MakeDYMTLMotionEstimationPipelineDescriptor(uint64_t result, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  *a2 = *(void *)(result + 8);
  a2[1] = *(void *)(result + 16);
  return result;
}

void GPUTools::MTL::Utils::MakeDYMTLDepthStencilDescriptor(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  if (v4) {
    MEMORY[0x25A28E950](v4, 0x1000C400A747E1ELL);
  }
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  if (v5) {
    MEMORY[0x25A28E950](v5, 0x1000C400A747E1ELL);
  }
  *(void *)(a2 + 24) = *(void *)(a1 + 8);
  *(unsigned char *)(a2 + 48) = *(_DWORD *)(a1 + 16) != 0;
  strlen((const char *)(a1 + 24));
  MEMORY[0x25A28E910](a2, a1 + 24);
  operator new();
}

uint64_t GPUTools::MTL::Utils::MakeDYMTLSamplerDescriptor(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)a1;
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_DWORD *)(a2 + 100) = 0;
  *(void *)(a2 + 104) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(unsigned char *)(a2 + 128) = 0;
  *(_OWORD *)(a2 + 136) = 0u;
  uint64_t v5 = (void *)(a2 + 136);
  *(_OWORD *)(a2 + 152) = 0u;
  *(unsigned char *)(a2 + 168) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(unsigned char *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 72) = *(void *)(a1 + 56);
  *(unsigned char *)(a2 + 96) = *(_DWORD *)(a1 + 64) != 0;
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 72);
  uint64_t v6 = a1 + 88;
  *(_DWORD *)(a2 + 92) = *(_DWORD *)(a1 + 80);
  size_t v7 = strlen((const char *)(a1 + 88));
  uint64_t result = MEMORY[0x25A28E910](a2, v6);
  if (v4 <= 1)
  {
    *(_DWORD *)(a2 + 100) = -1;
LABEL_17:
    *(void *)(a2 + 104) = 0;
    goto LABEL_18;
  }
  size_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + v6;
  int v12 = *(_DWORD *)(v9 + 8);
  size_t v10 = v9 + 8;
  int v11 = v12;
  if (v12 == -1) {
    int v11 = 0;
  }
  *(_DWORD *)(a2 + 100) = v11;
  if (v4 <= 7) {
    goto LABEL_17;
  }
  *(void *)(a2 + 104) = *(unsigned int *)(v10 + 8);
  if (v4 <= 9)
  {
LABEL_18:
    *(void *)(a2 + 80) = 0;
LABEL_19:
    *(unsigned char *)(a2 + 112) = 0;
LABEL_20:
    void *v5 = 0;
    return result;
  }
  LODWORD(v13) = *(_DWORD *)(v10 + 16);
  if (v13 == -1) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v13;
  }
  *(void *)(a2 + 80) = v13;
  if (v4 <= 0x10) {
    goto LABEL_19;
  }
  *(unsigned char *)(a2 + 112) = (*(_DWORD *)(v10 + 24) - 1) < 0xFFFFFFFE;
  if (v4 < 0x16) {
    goto LABEL_20;
  }
  *(void *)(a2 + 120) = *(void *)(v10 + 32);
  *(unsigned char *)(a2 + 128) = *(_DWORD *)(v10 + 40) != 0;
  if (v4 <= 0x1B) {
    goto LABEL_20;
  }
  void *v5 = *(void *)(v10 + 48);
  if (v4 >= 0x27)
  {
    *(void *)(a2 + 144) = *(unsigned int *)(v10 + 56);
    *(_DWORD *)(a2 + 152) = *(_DWORD *)(v10 + 64);
    *(_DWORD *)(a2 + 156) = *(_DWORD *)(v10 + 72);
    *(_DWORD *)(a2 + 160) = *(_DWORD *)(v10 + 80);
    *(_DWORD *)(a2 + 164) = *(_DWORD *)(v10 + 88);
    *(unsigned char *)(a2 + 168) = *(_DWORD *)(v10 + 96) != 0;
  }
  return result;
}

uint64_t GPUTools::MTL::Utils::MakeDYMTLTextureDescriptor(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)result;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 104) = xmmword_2557EFA20;
  *(_OWORD *)(a2 + 120) = xmmword_2557EFA30;
  *(_OWORD *)a2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 16) = *(void *)(result + 24);
  *(void *)(a2 + 24) = *(void *)(result + 32);
  *(void *)(a2 + 32) = *(void *)(result + 40);
  *(void *)(a2 + 40) = *(void *)(result + 48);
  *(void *)(a2 + 48) = *(void *)(result + 56);
  *(void *)(a2 + 56) = *(void *)(result + 64);
  uint64_t v3 = 72;
  if (v2 < 3) {
    uint64_t v3 = 80;
  }
  uint64_t v4 = result + v3;
  *(unsigned char *)(a2 + 141) = *(_DWORD *)v4 != 0;
  *(unsigned char *)(a2 + 140) = *(_DWORD *)(v4 + 8) != 0;
  if (!v2)
  {
LABEL_13:
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    return result;
  }
  *(void *)(a2 + 72) = *(void *)(v4 + 16);
  if (v2 <= 3)
  {
    if (v2 == 3)
    {
      *(_OWORD *)(a2 + 80) = *(_OWORD *)(v4 + 24);
      return result;
    }
    goto LABEL_13;
  }
  *(void *)(a2 + 64) = *(void *)(v4 + 24);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(v4 + 32);
  if (v2 >= 0x15)
  {
    uint64_t v5 = *(void *)(v4 + 56);
    *(unsigned char *)(a2 + 142) = *(void *)(v4 + 48) != 0;
    *(void *)(a2 + 96) = v5;
    if (v2 != 21)
    {
      *(void *)(a2 + 144) = *(void *)(v4 + 64);
      *(unsigned char *)(a2 + 152) = *(_DWORD *)(v4 + 72) != 0;
      if (v2 >= 0x23)
      {
        long long v6 = *(_OWORD *)(v4 + 96);
        *(_OWORD *)(a2 + 104) = *(_OWORD *)(v4 + 80);
        *(_OWORD *)(a2 + 120) = v6;
        if (v2 >= 0x27) {
          *(_DWORD *)(a2 + 136) = *(_DWORD *)(v4 + 112);
        }
      }
    }
  }
  return result;
}

void GPUTools::MTL::Utils::MakeDYMTLFunctionConstantValues(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != -1)
  {
    int v5 = a2 + 16;
    do
    {
      long long v6 = (const char *)(v3 + 1);
      long long __p = 0uLL;
      id v20 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = v2;
      size_t v7 = strlen(v6);
      MEMORY[0x25A28E910](&__p, v6);
      uint64_t v8 = &v6[v7 & 0xFFFFFFFFFFFFFFF8];
      uint64_t v19 = *((void *)v8 + 1);
      BOOL v18 = *((_DWORD *)v8 + 4) != 0;
      id v9 = v20;
      id v20 = 0;

      uint64_t v3 = v8 + 32;
      uint64_t v10 = *((void *)v8 + 3);
      if (v10)
      {
        int v11 = [MEMORY[0x263EFF8F8] dataWithBytes:v3 length:v10];
        uint64_t v3 = (void *)((char *)v3 + ((v10 + 7) & 0xFFFFFFFFFFFFFFF8));
        id v12 = v20;
        id v20 = v11;
      }
      unint64_t v13 = a2[1];
      if (v13 >= a2[2])
      {
        uint64_t v14 = std::vector<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>::__push_back_slow_path<GPUTools::MTL::Utils::DYMTLFunctionConstantValue const&>(a2, &__p);
      }
      else
      {
        std::allocator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>::construct[abi:ne180100]<GPUTools::MTL::Utils::DYMTLFunctionConstantValue,GPUTools::MTL::Utils::DYMTLFunctionConstantValue const&>(v5, (std::string *)a2[1], &__p);
        uint64_t v14 = v13 + 56;
        a2[1] = v13 + 56;
      }
      a2[1] = v14;

      if (SHIBYTE(v16) < 0) {
        operator delete((void *)__p);
      }
      uint64_t v2 = *v3;
    }
    while (*v3 != -1);
  }
}

void sub_2557BD518(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 8) = v3;
  GPUTools::MTL::Utils::DYMTLFunctionConstantValue::~DYMTLFunctionConstantValue((id *)va);
  _Unwind_Resume(a1);
}

void GPUTools::MTL::Utils::DYMTLFunctionConstantValue::~DYMTLFunctionConstantValue(id *this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void GPUTools::MTL::Utils::MakeDYMTLCompileOptions(unsigned int *a1, uint64_t a2)
{
  unsigned int v3 = *a1;
  uint64_t v10 = a1 + 2;
  uint64_t v4 = *(void **)a2;
  *(void *)a2 = 0;

  *(_WORD *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0x10000;
  uint64_t v6 = GPUTools::ReadDynamicBufferObject((GPUTools *)&v10, v5);
  size_t v7 = *(void **)a2;
  *(void *)a2 = v6;

  uint64_t v8 = v10;
  *(unsigned char *)(a2 + 8) = *v10 != 0;
  *(unsigned char *)(a2 + 9) = v8[2] != 0;
  if (v3 > 0xF)
  {
    id v9 = v8 + 4;
  }
  else
  {
    if (v3 < 6) {
      return;
    }
    id v9 = v8 + 10;
  }
  *(void *)(a2 + 16) = *v9;
}

id GPUTools::ReadDynamicBufferObject(GPUTools *this, const void **a2)
{
  *(void *)this += 8 + ((**(void **)this + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v2 = objc_msgSend(MEMORY[0x263EFF8F8], "dataWithBytesNoCopy:length:freeWhenDone:");
  unsigned int v3 = (void *)MEMORY[0x263F3F9E0];
  uint64_t v4 = (void *)MEMORY[0x263EFFA08];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_msgSend(v4, "setWithObjects:", v5, v6, v7, v8, v9, objc_opt_class(), 0);
  uint64_t v13 = 0;
  int v11 = [v3 unarchivedObjectOfClasses:v10 fromData:v2 error:&v13];

  return v11;
}

void sub_2557BD754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 GPUTools::MTL::Utils::MakeDYMTLHeapDescriptor(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)a1;
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)a2 = result;
  *(void *)(a2 + 16) = *(void *)(a1 + 24);
  if (v2 >= 0x1D)
  {
    *(void *)(a2 + 24) = *(void *)(a1 + 32);
    if (v2 >= 0x1F)
    {
      *(unsigned char *)(a2 + 32) = *(void *)(a1 + 40) != 0;
      __n128 result = *(__n128 *)(a1 + 48);
      *(__n128 *)(a2 + 40) = result;
    }
  }
  return result;
}

void GPUTools::MTL::Utils::MakeDYMTLPostVertexDump(uint64_t a1, void *a2, uint64_t *a3)
{
  *a2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v6 = (const char *)(a1 + 24);
    int v7 = a3 + 16;
    do
    {
      long long v20 = 0uLL;
      uint64_t v21 = 0;
      __p[1] = 0;
      uint64_t v24 = 0;
      __p[0] = 0;
      size_t v8 = strlen(v6);
      MEMORY[0x25A28E910](&v20, v6);
      uint64_t v9 = &v6[v8 & 0xFFFFFFFFFFFFFFF8];
      uint64_t v10 = v9 + 16;
      uint64_t v22 = *((void *)v9 + 1);
      size_t v11 = strlen(v9 + 16);
      MEMORY[0x25A28E910](__p, v10);
      id v12 = &v10[v11 & 0xFFFFFFFFFFFFFFF8];
      uint64_t v13 = *((void *)v12 + 1);
      uint64_t v25 = v13;
      if (v13 == 8)
      {
        uint64_t v14 = 24;
      }
      else
      {
        if (v13 != 12)
        {
          BOOL v15 = 0;
          goto LABEL_9;
        }
        uint64_t v14 = 28;
      }
      BOOL v15 = *a2 == v14;
LABEL_9:
      if (v24 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if (*(unsigned char *)v16) {
        BOOL v17 = 1;
      }
      else {
        BOOL v17 = !v15;
      }
      if (!v17)
      {
        MEMORY[0x25A28E910](&v20, "air.position");
        MEMORY[0x25A28E910](__p, "return");
        uint64_t v22 = 6;
      }
      unint64_t v18 = a3[1];
      if (v18 >= a3[2])
      {
        uint64_t v19 = std::vector<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>::__push_back_slow_path<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput const&>(a3, &v20);
      }
      else
      {
        std::allocator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>::construct[abi:ne180100]<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput,GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput const&>(v7, (std::string *)a3[1], &v20);
        uint64_t v19 = v18 + 64;
        a3[1] = v18 + 64;
      }
      a3[1] = v19;
      if (SHIBYTE(v24) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v21) < 0) {
        operator delete((void *)v20);
      }
      uint64_t v6 = v12 + 16;
      --v3;
    }
    while (v3);
  }
}

void sub_2557BD97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  *(void *)(v9 + 8) = v10;
  GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput::~DYMTLPostVertexDumpOutput(&a9);
  _Unwind_Resume(a1);
}

void GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput::~DYMTLPostVertexDumpOutput(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void GPUTools::MTL::Utils::MakeDYMTLPostMeshDumpOutput(uint64_t a1, void *a2, uint64_t *a3)
{
  *a2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = (const char *)(a1 + 24);
    int v6 = a3 + 16;
    do
    {
      long long v19 = 0uLL;
      uint64_t v20 = 0;
      __p[1] = 0;
      uint64_t v23 = 0;
      __p[0] = 0;
      size_t v7 = strlen(v5);
      MEMORY[0x25A28E910](&v19, v5);
      size_t v8 = &v5[v7 & 0xFFFFFFFFFFFFFFF8];
      uint64_t v9 = v8 + 16;
      uint64_t v21 = *((void *)v8 + 1);
      size_t v10 = strlen(v8 + 16);
      MEMORY[0x25A28E910](__p, v9);
      size_t v11 = &v9[v10 & 0xFFFFFFFFFFFFFFF8];
      uint64_t v24 = *((void *)v11 + 1);
      if (v23 >= 0) {
        id v12 = __p;
      }
      else {
        id v12 = (void **)__p[0];
      }
      if (!*(unsigned char *)v12)
      {
        if (SHIBYTE(v20) < 0)
        {
          if (*((void *)&v19 + 1) == 12)
          {
            BOOL v15 = (long long *)v19;
LABEL_21:
            uint64_t v16 = *(void *)v15;
            int v17 = *((_DWORD *)v15 + 2);
            if (v16 == 0x69736F702E726961 && v17 == 1852795252) {
              MEMORY[0x25A28E910](__p, "return");
            }
          }
        }
        else if (SHIBYTE(v20) == 12)
        {
          BOOL v15 = &v19;
          goto LABEL_21;
        }
      }
      unint64_t v13 = a3[1];
      if (v13 >= a3[2])
      {
        uint64_t v14 = std::vector<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>::__push_back_slow_path<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput const&>(a3, &v19);
      }
      else
      {
        std::allocator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>::construct[abi:ne180100]<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput,GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput const&>(v6, (std::string *)a3[1], &v19);
        uint64_t v14 = v13 + 64;
        a3[1] = v13 + 64;
      }
      a3[1] = v14;
      if (SHIBYTE(v23) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v20) < 0) {
        operator delete((void *)v19);
      }
      uint64_t v5 = v11 + 16;
      --v3;
    }
    while (v3);
  }
}

void sub_2557BDB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  *(void *)(v9 + 8) = v10;
  GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput::~DYMTLPostVertexDumpOutput(&a9);
  _Unwind_Resume(a1);
}

uint64_t GPUTools::MTL::Utils::MakeDYMTLMutableBufferAncestorMaps(uint64_t result, uint64_t *a2)
{
  uint64_t v11 = *(void *)(result + 8);
  if (v11)
  {
    uint64_t v2 = 0;
    uint64_t v3 = (unint64_t *)(result + 16);
    do
    {
      uint64_t v13 = v2;
      memset(v19, 0, sizeof(v19));
      int v20 = 1065353216;
      unint64_t v5 = *v3++;
      unint64_t v4 = v5;
      if (v5)
      {
        uint64_t v6 = 0;
        do
        {
          unint64_t v18 = 0;
          unint64_t v7 = *v3;
          unint64_t v8 = v3[1];
          v3 += 2;
          unint64_t v18 = v7;
          long long v15 = 0u;
          long long v16 = 0u;
          for (int i = 1065353216; v8; --v8)
          {
            unint64_t v14 = 0;
            unint64_t v14 = *v3;
            unint64_t v9 = v3[1];
            uint64_t v21 = &v14;
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)&v15, &v14, (uint64_t)&std::piecewise_construct, &v21)[3] = v9;
            v3 += 2;
          }
          uint64_t v21 = &v18;
          uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v19, &v18, (uint64_t)&std::piecewise_construct, &v21);
          if (v10 + 3 != (void *)&v15)
          {
            *((_DWORD *)v10 + 14) = i;
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,unsigned long long>,void *> *>>(v10 + 3, (void *)v16, 0);
          }
          std::__hash_table<std::__hash_value_type<int,unsigned int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned int>>>::~__hash_table((uint64_t)&v15);
          ++v6;
        }
        while (v6 != v4);
      }
      std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>::push_back[abi:ne180100](a2, (uint64_t *)v19);
      __n128 result = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::~__hash_table((uint64_t)v19);
      uint64_t v2 = v13 + 1;
    }
    while (v13 + 1 != v11);
  }
  return result;
}

void sub_2557BDD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    if (v10 + 1 > 0x666666666666666) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x333333333333333) {
      unint64_t v13 = 0x666666666666666;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>(v4, v13);
    }
    else {
      unint64_t v14 = 0;
    }
    long long v15 = v14;
    long long v16 = &v14[40 * v10];
    unint64_t v18 = &v14[40 * v13];
    std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__hash_table((uint64_t)v16, a2);
    int v17 = v16 + 40;
    std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__hash_table(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v9;
  return result;
}

void sub_2557BDE54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void GPUTools::MTL::Utils::MakeDYMTLIndirectArgumentBufferInfos(uint64_t a1, uint64_t *a2)
{
  uint64_t v26 = *(void *)(a1 + 8);
  if (v26)
  {
    uint64_t v2 = 0;
    uint64_t v3 = (uint64_t *)(a1 + 16);
    uint64_t v4 = (uint64_t *)(a1 + 16);
    do
    {
      uint64_t v28 = v2;
      long long __p = 0;
      v31 = 0;
      long long v32 = 0;
      uint64_t v6 = *v4++;
      uint64_t v5 = v6;
      if (v6)
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
        uint64_t v9 = v3;
        uint64_t v29 = v5;
        do
        {
          uint64_t v11 = v9[5];
          v9 += 5;
          uint64_t v10 = v11;
          uint64_t v12 = *v4;
          uint64_t v14 = *(v9 - 3);
          uint64_t v13 = *(v9 - 2);
          uint64_t v15 = *(v9 - 1);
          if (v7 >= v32)
          {
            long long v16 = (char *)__p;
            unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (unsigned char *)__p) >> 3);
            unint64_t v18 = v17 + 1;
            if (v17 + 1 > 0x666666666666666) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if (0x999999999999999ALL * ((v32 - (unsigned char *)__p) >> 3) > v18) {
              unint64_t v18 = 0x999999999999999ALL * ((v32 - (unsigned char *)__p) >> 3);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((v32 - (unsigned char *)__p) >> 3) >= 0x333333333333333) {
              unint64_t v19 = 0x666666666666666;
            }
            else {
              unint64_t v19 = v18;
            }
            if (v19)
            {
              int v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>((uint64_t)&v32, v19);
              long long v16 = (char *)__p;
              unint64_t v7 = v31;
            }
            else
            {
              int v20 = 0;
            }
            uint64_t v21 = &v20[40 * v17];
            *(void *)uint64_t v21 = v12;
            *((void *)v21 + 1) = v14;
            *((void *)v21 + 2) = v15;
            *((void *)v21 + 3) = v10;
            *((void *)v21 + 4) = v13;
            if (v7 == v16)
            {
              uint64_t v25 = &v20[40 * v17];
            }
            else
            {
              uint64_t v22 = &v20[40 * v17];
              do
              {
                long long v23 = *(_OWORD *)(v7 - 40);
                long long v24 = *(_OWORD *)(v7 - 24);
                uint64_t v25 = v22 - 40;
                *((void *)v22 - 1) = *((void *)v7 - 1);
                *(_OWORD *)(v22 - 24) = v24;
                *(_OWORD *)(v22 - 40) = v23;
                v7 -= 40;
                v22 -= 40;
              }
              while (v7 != v16);
            }
            unint64_t v7 = v21 + 40;
            long long __p = v25;
            v31 = v21 + 40;
            long long v32 = &v20[40 * v19];
            if (v16) {
              operator delete(v16);
            }
            uint64_t v5 = v29;
          }
          else
          {
            *(void *)unint64_t v7 = v12;
            *((void *)v7 + 1) = v14;
            *((void *)v7 + 2) = v15;
            *((void *)v7 + 3) = v10;
            *((void *)v7 + 4) = v13;
            v7 += 40;
          }
          v31 = v7;
          ++v8;
          uint64_t v4 = v3 + 6;
          uint64_t v3 = v9;
        }
        while (v8 != v5);
      }
      std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::push_back[abi:ne180100](a2, (uint64_t)&__p);
      if (__p)
      {
        v31 = (char *)__p;
        operator delete(__p);
      }
      uint64_t v2 = v28 + 1;
      uint64_t v3 = v4;
    }
    while (v28 + 1 != v26);
  }
}

void sub_2557BE064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>(result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    void *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_2557BE1B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t GPUTools::MTL::Utils::MakeDYMTLIndirectCommandBufferDescriptor(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)result;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)a2 = *(void *)(result + 8);
  *(unsigned char *)(a2 + 9) = *(_DWORD *)(result + 16) != 0;
  *(unsigned char *)(a2 + 8) = *(_DWORD *)(result + 24) != 0;
  *(void *)(a2 + 16) = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 40);
  if (v2 >= 0x1B)
  {
    *(void *)(a2 + 48) = *(void *)(result + 48);
    *(void *)(a2 + 64) = *(void *)(result + 56);
  }
  return result;
}

void GPUTools::MTL::Utils::MakeDYMTLIOCommandQueueDescriptor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = 0;
  *(_WORD *)(a2 + 4) = 0;
}

uint64_t GPUTools::MTL::Utils::MakeDYMTLCommandQueueDescriptor(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = *(void *)(result + 8);
  *(void *)(a2 + 8) = *(void *)(result + 16);
  *(unsigned char *)(a2 + 16) = *(void *)(result + 24) != 0;
  if (v2 >= 0x27) {
    *(unsigned char *)(a2 + 17) = *(void *)(result + 32) != 0;
  }
  return result;
}

uint64_t GPUTools::MTL::Utils::MakeDYMTLCounterSampleBufferDescriptor(uint64_t a1, void *a2)
{
  uint64_t v3 = (const char *)(a1 + 8);
  GPUTools::MTL::Utils::DYMTLCounterSet::DYMTLCounterSet((GPUTools::MTL::Utils::DYMTLCounterSet *)v15);
  uint64_t v22 = 0;
  long long v21 = 0u;
  long long __p = 0u;
  GPUTools::MTL::Utils::DYMTLCounterSampleBufferDescriptor::operator=((uint64_t)a2, (long long *)v15);
  if (SBYTE7(v21) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v4 = 96;
  do
  {
    unint64_t v5 = &v15[v4];
    if ((char)v19[v4 * 8] < 0) {
      operator delete(v5[4]);
    }
    if (*((char *)v5 + 31) < 0) {
      operator delete(v5[1]);
    }
    v4 -= 6;
  }
  while (v4 * 8);
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  unint64_t v6 = &v3[(strlen(v3) & 0xFFFFFFFFFFFFFFF8) + 8];
  MEMORY[0x25A28E910](a2, v3);
  unint64_t v7 = &v6[strlen(v6) & 0xFFFFFFFFFFFFFFF8];
  MEMORY[0x25A28E910](a2 + 3, v6);
  a2[103] = *((void *)v7 + 1);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *((void *)v7 + 2);
  a2[6] = v9;
  if ((int)v9 >= 1)
  {
    uint64_t v10 = 0;
    unint64_t v11 = a2 + 7;
    do
    {
      unint64_t v12 = &v8[(strlen(v8) & 0xFFFFFFFFFFFFFFF8) + 8];
      MEMORY[0x25A28E910](v11, v8);
      uint64_t v8 = &v12[(strlen(v12) & 0xFFFFFFFFFFFFFFF8) + 8];
      MEMORY[0x25A28E910](v11 + 3, v12);
      ++v10;
      v11 += 6;
    }
    while (v10 < *((int *)a2 + 12));
  }
  uint64_t v13 = &v8[strlen(v8) & 0xFFFFFFFFFFFFFFF8];
  uint64_t result = MEMORY[0x25A28E910](a2 + 104, v8);
  a2[107] = *((void *)v13 + 1);
  a2[108] = *((void *)v13 + 2);
  return result;
}

uint64_t GPUTools::MTL::Utils::DYMTLCounterSampleBufferDescriptor::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  unint64_t v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  uint64_t v6 = 0;
  long long v7 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)unint64_t v5 = v7;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  do
  {
    uint64_t v8 = a1 + v6 * 16;
    uint64_t v9 = (void **)(a1 + v6 * 16 + 56);
    if (*(char *)(a1 + v6 * 16 + 79) < 0) {
      operator delete(*v9);
    }
    uint64_t v10 = (long long *)((char *)&a2[v6 + 3] + 8);
    long long v11 = *v10;
    *(void *)(a1 + v6 * 16 + 72) = *((void *)&a2[v6 + 4] + 1);
    *(_OWORD *)uint64_t v9 = v11;
    HIBYTE(a2[v6 + 4]) = 0;
    *(unsigned char *)uint64_t v10 = 0;
    unint64_t v12 = (void **)(v8 + 80);
    if (*(char *)(v8 + 103) < 0) {
      operator delete(*v12);
    }
    uint64_t v13 = &a2[v6];
    long long v14 = a2[v6 + 5];
    *(void *)(v8 + 96) = *(void *)&a2[v6 + 6];
    *(_OWORD *)unint64_t v12 = v14;
    *((unsigned char *)v13 + 103) = 0;
    *((unsigned char *)v13 + 80) = 0;
    v6 += 3;
  }
  while (v6 != 48);
  *(void *)(a1 + 824) = *((void *)a2 + 103);
  uint64_t v15 = (void **)(a1 + 832);
  if (*(char *)(a1 + 855) < 0) {
    operator delete(*v15);
  }
  long long v16 = a2[52];
  *(void *)(a1 + 848) = *((void *)a2 + 106);
  *(_OWORD *)uint64_t v15 = v16;
  *((unsigned char *)a2 + 855) = 0;
  *((unsigned char *)a2 + 832) = 0;
  *(_OWORD *)(a1 + 856) = *(long long *)((char *)a2 + 856);
  return a1;
}

BOOL GPUTools::MTL::Utils::IsIndirectCommandBufferRender(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFE70) == 0;
}

BOOL GPUTools::MTL::Utils::IsIndirectCommandBufferCompute(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFF9FLL) == 0;
}

void GPUTools::MTL::Utils::MakeDYMTLRasterizationRateMapDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (const char *)(a1 + 8);
  uint64_t v52 = 0;
  long long v51 = 0u;
  memset(v50, 0, 24);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)v50 + 8);
  *(void *)(a2 + 40) = 0;
  long long v4 = (uint64_t *)(a2 + 48);
  std::vector<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>::__vdeallocate((void **)(a2 + 48));
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  uint64_t v52 = 0;
  long long v51 = 0uLL;
  v53 = (void **)&v51;
  std::vector<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>::__destroy_vector::operator()[abi:ne180100](&v53);
  unint64_t v5 = &v3[strlen(v3) & 0xFFFFFFFFFFFFFFF8];
  MEMORY[0x25A28E910](a2, v3);
  uint64_t v7 = *((void *)v5 + 1);
  uint64_t v6 = v5 + 8;
  *(void *)(a2 + 24) = v7;
  *(void *)(a2 + 32) = v6[1];
  *(void *)(a2 + 40) = v6[2];
  unint64_t v8 = v6[3];
  std::vector<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>::resize(v4, v8);
  unint64_t v48 = v8;
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v6 + 4;
    v47 = v4;
    do
    {
      uint64_t v49 = *v4;
      uint64_t v11 = *v4 + 56 * v9;
      unint64_t v13 = *v10;
      unint64_t v12 = v10[1];
      long long v14 = v10 + 3;
      *(void *)(v11 + 48) = v10[2];
      std::vector<float>::reserve((void **)v11, v13);
      if (v13)
      {
        uint64_t v15 = 0;
        long long v16 = (void *)(v11 + 16);
        unint64_t v17 = *(_DWORD **)(v11 + 8);
        do
        {
          int v18 = *(_DWORD *)v14++;
          int v19 = v18;
          if ((unint64_t)v17 >= *v16)
          {
            long long v21 = *(_DWORD **)v11;
            uint64_t v22 = ((uint64_t)v17 - *(void *)v11) >> 2;
            unint64_t v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 62) {
LABEL_45:
            }
              std::vector<float>::__throw_length_error[abi:ne180100]();
            uint64_t v24 = *v16 - (void)v21;
            if (v24 >> 1 > v23) {
              unint64_t v23 = v24 >> 1;
            }
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v25 = v23;
            }
            if (v25)
            {
              uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v11 + 16, v25);
              long long v21 = *(_DWORD **)v11;
              unint64_t v17 = *(_DWORD **)(v11 + 8);
            }
            else
            {
              uint64_t v26 = 0;
            }
            uint64_t v27 = &v26[4 * v22];
            *(_DWORD *)uint64_t v27 = v19;
            int v20 = v27 + 4;
            while (v17 != v21)
            {
              int v28 = *--v17;
              *((_DWORD *)v27 - 1) = v28;
              v27 -= 4;
            }
            *(void *)uint64_t v11 = v27;
            *(void *)(v11 + 8) = v20;
            *(void *)(v11 + 16) = &v26[4 * v25];
            if (v21) {
              operator delete(v21);
            }
          }
          else
          {
            _DWORD *v17 = v19;
            int v20 = v17 + 1;
          }
          *(void *)(v11 + 8) = v20;
          ++v15;
          unint64_t v17 = v20;
        }
        while (v15 != v13);
      }
      uint64_t v29 = (void **)(v49 + 56 * v9 + 24);
      std::vector<float>::reserve(v29, v12);
      if (v12)
      {
        uint64_t v30 = 0;
        uint64_t v31 = v49 + 56 * v9;
        v34 = *(char **)(v31 + 32);
        uint64_t v33 = (_DWORD **)(v31 + 32);
        long long v32 = v34;
        v35 = v33 + 1;
        do
        {
          int v36 = *(_DWORD *)v14++;
          int v37 = v36;
          if ((unint64_t)v32 >= *v35)
          {
            v39 = (char *)*v29;
            uint64_t v40 = (v32 - (unsigned char *)*v29) >> 2;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 62) {
              goto LABEL_45;
            }
            uint64_t v42 = *v35 - (void)v39;
            if (v42 >> 1 > v41) {
              unint64_t v41 = v42 >> 1;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v41;
            }
            if (v43)
            {
              v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(v33 + 1), v43);
              long long v32 = (char *)*v33;
              v39 = (char *)*v29;
            }
            else
            {
              v44 = 0;
            }
            v45 = &v44[4 * v40];
            *(_DWORD *)v45 = v37;
            v38 = v45 + 4;
            while (v32 != v39)
            {
              int v46 = *((_DWORD *)v32 - 1);
              v32 -= 4;
              *((_DWORD *)v45 - 1) = v46;
              v45 -= 4;
            }
            void *v29 = v45;
            *uint64_t v33 = v38;
            void *v35 = &v44[4 * v43];
            if (v39) {
              operator delete(v39);
            }
          }
          else
          {
            *(_DWORD *)long long v32 = v37;
            v38 = v32 + 4;
          }
          *uint64_t v33 = v38;
          ++v30;
          long long v32 = (char *)v38;
        }
        while (v30 != v12);
      }
      ++v9;
      uint64_t v10 = v14;
      long long v4 = v47;
    }
    while (v9 != v48);
  }
}

void std::vector<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 56 * a2;
    while (v3 != v7)
    {
      v3 -= 56;
      std::allocator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void __clang_call_terminate(void *a1)
{
}

GPUTools::MTL::Utils::DYMTLCounterSet *GPUTools::MTL::Utils::DYMTLCounterSet::DYMTLCounterSet(GPUTools::MTL::Utils::DYMTLCounterSet *this)
{
  unsigned int v2 = std::string::basic_string[abi:ne180100]<0>(this, "");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "");
  bzero((char *)this + 48, 0x308uLL);
  return this;
}

void sub_2557BE9DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    unint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_2557BEB0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::vector<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    size_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        std::allocator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      size_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::allocator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(void *)(a2 + 32) = v3;
    operator delete(v3);
  }
  size_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

void std::vector<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    size_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<float>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t std::vector<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>::__push_back_slow_path<GPUTools::MTL::Utils::DYMTLFunctionConstantValue const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = (std::string *)&v7[56 * v3];
  int v13 = &v7[56 * v6];
  std::allocator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>::construct[abi:ne180100]<GPUTools::MTL::Utils::DYMTLFunctionConstantValue,GPUTools::MTL::Utils::DYMTLFunctionConstantValue const&>(a1 + 16, v11, a2);
  unint64_t v12 = &v11[2].__r_.__value_.__s.__data_[8];
  std::vector<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>::~__split_buffer(&v10);
  return v8;
}

void sub_2557BEEF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

id std::allocator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>::construct[abi:ne180100]<GPUTools::MTL::Utils::DYMTLFunctionConstantValue,GPUTools::MTL::Utils::DYMTLFunctionConstantValue const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = *(long long *)((char *)a3 + 24);
  this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  id result = *((id *)a3 + 6);
  this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)result;
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  long long v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    long long v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t std::vector<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue*>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue*>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue*>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue*>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 56);
      *(void *)(v8 - 40) = *(void *)(a3 - 40);
      *(_OWORD *)(v8 - 56) = v9;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 56) = 0;
      long long v10 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v10;
      uint64_t v11 = *(void *)(a3 - 8);
      *(void *)(a3 - 8) = 0;
      *(void *)(v8 - 8) = v11;
      v8 -= 56;
      v7 -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    *((void *)&v17 + 1) = v8;
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>::destroy[abi:ne180100](v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void std::allocator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void **std::__split_buffer<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 56;
    std::allocator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>::destroy[abi:ne180100](v4, i - 56);
  }
}

uint64_t std::vector<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>::__push_back_slow_path<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 5 > v4) {
    unint64_t v4 = v6 >> 5;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  char v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>>((uint64_t)(a1 + 2), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  uint64_t v12 = (std::string *)&v8[64 * v3];
  long long v14 = &v8[64 * v7];
  std::allocator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>::construct[abi:ne180100]<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput,GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput const&>(a1 + 16, v12, a2);
  int v13 = &v12[2].__r_.__value_.__s.__data_[16];
  std::vector<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>::~__split_buffer(&v11);
  return v9;
}

void sub_2557BF3D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>::construct[abi:ne180100]<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput,GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = *((void *)a3 + 3);
  uint64_t v6 = (std::string *)((char *)this + 32);
  if (*((char *)a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a3 + 4), *((void *)a3 + 5));
  }
  else
  {
    long long v7 = a3[2];
    this[2].__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  this[2].__r_.__value_.__l.__size_ = *((void *)a3 + 7);
}

void sub_2557BF46C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput*>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput*>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput*>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput*>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      long long v10 = *(_OWORD *)(a3 + v7 - 64);
      *(void *)(v8 - 48) = *(void *)(a3 + v7 - 48);
      *(_OWORD *)(v8 - 64) = v10;
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 48) = 0;
      *(void *)(v9 - 64) = 0;
      *(void *)(v8 - 40) = *(void *)(a3 + v7 - 40);
      long long v11 = *(_OWORD *)(a3 + v7 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 + v7 - 16);
      *(_OWORD *)(v8 - 32) = v11;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 32) = 0;
      *(void *)(v8 - 8) = *(void *)(a3 + v7 - 8);
      v7 -= 64;
    }
    while (a3 + v7 != a5);
    *((void *)&v17 + 1) = a7 + v7;
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>::destroy[abi:ne180100](v3, v1);
      v1 += 64;
    }
    while (v1 != v2);
  }
}

void std::allocator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void **std::__split_buffer<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 64;
    std::allocator<GPUTools::MTL::Utils::DYMTLPostVertexDumpOutput>::destroy[abi:ne180100](v4, i - 64);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    long long v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  int v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t i = *v20;
LABEL_38:
    void *v20 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2557BF978(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    long long v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      long long v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = a1 + 16;
  float v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)float v14 = 0;
  *((void *)v14 + 1) = v7;
  *((void *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  long long v11 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v11;
}

void sub_2557BFBE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,unsigned long long>,void *> *>>(void *a1, void *a2, void *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  unint64_t v8 = (void *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      unint64_t v9 = a2[2];
      v8[2] = v9;
      v8[3] = a2[3];
      long long v10 = (void *)*v8;
      v8[1] = v9;
      inserted = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v8 + 2);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__node_insert_multi_perform(a1, v8, inserted);
      a2 = (void *)*a2;
      unint64_t v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }
    do
    {
      unint64_t v12 = (void *)*v8;
      operator delete(v8);
      unint64_t v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_multi<std::pair<unsigned long long const,unsigned long long> const&>(a1, (_OWORD *)a2 + 1);
      a2 = (void *)*a2;
    }
  }
}

void sub_2557BFCDC(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_2557BFCFC(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__rehash<false>(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  float v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    uint64_t result = v16;
    float v16 = (void *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = v16[1];
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && v16[2] == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (void *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            void *v7 = v13;
            void *v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_multi<std::pair<unsigned long long const,unsigned long long> const&>(void *a1, _OWORD *a2)
{
  int8x8_t v4 = operator new(0x20uLL);
  *((_OWORD *)v4 + 1) = *a2;
  unint64_t v5 = v4[2];
  void *v4 = 0;
  v4[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 2);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_2557C021C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)uint64_t result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  int8x8_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = (uint64_t *)*a1;
  uint64_t v4 = (uint64_t *)a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 5;
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__hash_table(result - 40, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

uint64_t std::__split_buffer<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::~__hash_table(i - 40);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>,std::reverse_iterator<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>*>,std::reverse_iterator<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>*>,std::reverse_iterator<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>,std::reverse_iterator<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>*>,std::reverse_iterator<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>*>,std::reverse_iterator<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>,std::reverse_iterator<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>,std::reverse_iterator<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>,std::reverse_iterator<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>,std::reverse_iterator<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 56 * ((56 * a2 - 56) / 0x38) + 56;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLFunctionConstantValue>>(v4, v11);
    }
    else {
      char v12 = 0;
    }
    unint64_t v15 = v12;
    float v16 = &v12[56 * v8];
    unint64_t v18 = &v12[56 * v11];
    size_t v14 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v16, v14);
    int v17 = &v16[v14];
    std::vector<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>::~__split_buffer(&v15);
  }
}

void sub_2557C07CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor*>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor*>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor*>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor*>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      long long v8 = *(_OWORD *)(a3 - 56);
      a3 -= 56;
      *(_OWORD *)(v7 - 56) = v8;
      *(void *)(v7 - 40) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - 16) = *(void *)(a3 + 40);
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(v7 - 8) = *(void *)(a3 + 48);
      uint64_t v7 = *((void *)&v14 + 1) - 56;
      *((void *)&v14 + 1) -= 56;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>,std::reverse_iterator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>::destroy[abi:ne180100](v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 56;
    std::allocator<GPUTools::MTL::Utils::DYMTLRasterizationRateLayerDescriptor>::destroy[abi:ne180100](v4, i - 56);
  }
}

id DYGetMTLGuestAppClient()
{
  v0 = (void *)_guestAppClientMTL;
  if (!_guestAppClientMTL) {
    __assert_rtn("DYGuestAppClient *DYGetMTLGuestAppClient()", "", 0, "_guestAppClientMTL != nil");
  }
  return v0;
}

void DYSetMTLGuestAppClient(id obj)
{
}

void DYMTLSetObjectRemappingBlock(void *a1, void *a2)
{
  id v4 = a1;
  id v3 = a2;
  if (g_interpose_api_once != -1) {
    dispatch_once_f(&g_interpose_api_once, 0, (dispatch_function_t)init_interpose_api);
  }
  DYSetBlockPointer();
  DYSetBlockPointer();
}

void sub_2557C0B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t init_interpose_api(void *a1)
{
  uint64_t v1 = (void *)DYGetInterposeDylibHandle();
  if (!v1)
  {
    dlerror();
    dy_abort();
    goto LABEL_8;
  }
  uint64_t v2 = v1;
  g_interpose_apuint64_t i = (uint64_t)dlsym(v1, "gDYMTLObjectRemappingBlock");
  if (!g_interpose_api)
  {
LABEL_8:
    id v4 = "g_interpose_api.gDYMTLObjectRemappingBlock != nullptr";
    goto LABEL_10;
  }
  g_interpose_apuint64_t i = (uint64_t)dlsym(v2, "gDYMTLObjectUnmappingBlock");
  if (!g_interpose_api)
  {
    id v4 = "g_interpose_api.gDYMTLObjectUnmappingBlock != nullptr";
LABEL_10:
    __assert_rtn("void init_interpose_api(void *)", "", 0, v4);
  }
  return dlclose(v2);
}

GPUTools::MTL::CaptureHelper *GPUTools::MTL::CaptureHelper::CaptureHelper(GPUTools::MTL::CaptureHelper *this)
{
  *((void *)this + 10) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((void *)this + 3) = 850045863;
  *((void *)this + 17) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 116) = 0u;
  if (GPUTools::MTL::onceToken != -1) {
    dispatch_once(&GPUTools::MTL::onceToken, &__block_literal_global_0);
  }
  dispatch_semaphore_t v2 = dispatch_semaphore_create(1);
  id v3 = (void *)*((void *)this + 17);
  *((void *)this + 17) = v2;

  return this;
}

uint64_t ___ZN8GPUTools3MTL13CaptureHelperC2Ev_block_invoke()
{
  dispatch_semaphore_t v0 = dispatch_semaphore_create(1);
  uint64_t v1 = (void *)GPUTools::MTL::_gPointerSemaphore;
  GPUTools::MTL::_gPointerSemaphore = (uint64_t)v0;

  GPUTools::MTL::_gStrongPointersArray = [MEMORY[0x263F08A88] strongObjectsPointerArray];
  return MEMORY[0x270F9A758]();
}

void GPUTools::MTL::CaptureHelper::~CaptureHelper(GPUTools::MTL::CaptureHelper *this)
{
  dispatch_semaphore_t v2 = (void *)*((void *)this + 17);
  *((void *)this + 17) = 0;

  id v3 = (void *)*((void *)this + 14);
  if (v3) {
    free(v3);
  }
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0;
  uint64_t v5 = (void **)((char *)this + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  id v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v4;
    operator delete(v4);
  }
}

void *GPUTools::MTL::CaptureHelper::SaveString(GPUTools::MTL::CaptureHelper *this, const char *__s, uint64_t a3)
{
  uint64_t v6 = strlen(__s) + 1;
  return GPUTools::MTL::CaptureHelper::SaveClientMemory((uint64_t)this, (uint64_t)__s, v6, a3, 0);
}

void *GPUTools::MTL::CaptureHelper::SaveClientMemory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6 = a5;
  uint64_t v7 = (pthread_mutex_t *)(a1 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  long long v8 = operator new(0x48uLL);
  v8[32] = 0;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *(_OWORD *)long long v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  unint64_t v9 = *(void *)(a1 + 104);
  unint64_t v10 = *(void *)(a1 + 96);
  if (v10 >= v9)
  {
    uint64_t v12 = *(void *)(a1 + 88);
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v12) >> 3);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v12) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x555555555555555) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v16 = v14;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 104);
    if (v16) {
      int v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>(a1 + 104, v16);
    }
    else {
      int v17 = 0;
    }
    unint64_t v18 = v17 + v13;
    __v.__first_ = v17;
    __v.__begin_ = v18;
    __v.__end_cap_.__value_ = &v17[v16];
    v18->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    *(_OWORD *)&v18->__r_.__value_.__r.__words[1] = xmmword_2557EFA70;
    __v.__end_ = v18 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a1 + 88), &__v);
    unint64_t v11 = *(void *)(a1 + 96);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    *(void *)unint64_t v10 = v8;
    *(_OWORD *)(v10 + 8) = xmmword_2557EFA70;
    unint64_t v11 = v10 + 24;
    *(void *)(a1 + 96) = v10 + 24;
  }
  *(void *)(a1 + 96) = v11;
  uint64_t v19 = (void *)(v11 - 24);
  if (*(char *)(v11 - 1) < 0) {
    uint64_t v19 = (void *)*v19;
  }
  pthread_mutex_unlock(v7);
  unint64_t v20 = DYGetMTLGuestAppClient();
  GPUTools::Interpose::DYSavePointer();

  return v19;
}

void sub_2557C11DC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);

  _Unwind_Resume(a1);
}

void *GPUTools::MTL::CaptureHelper::SaveObject(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  unint64_t v9 = *(id *)(a1 + 136);
  dispatch_semaphore_wait(v9, 0xFFFFFFFFFFFFFFFFLL);
  if (*(void *)(a1 + 8) != *(void *)a1) {
    *(void *)(a1 + 8) = *(void *)a1;
  }
  GPUTools::DynamicBuffer::Append<unsigned int>((unint64_t *)a1, &GPUTools::MTL::kMTLCaptureVersion);
  uint64_t v10 = [v7 textureType];
  unint64_t v11 = *(void *)a1;
  unint64_t v12 = *(void *)(a1 + 8) - *(void *)a1;
  if (v12 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v12 + v11 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v11 = *(void *)a1;
  }
  *(void *)(v11 + v12) = v10;
  uint64_t v13 = [v7 pixelFormat];
  unint64_t v14 = *(void *)a1;
  unint64_t v15 = *(void *)(a1 + 8) - *(void *)a1;
  if (v15 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v15 + v14 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v14 = *(void *)a1;
  }
  *(void *)(v14 + v15) = v13;
  uint64_t v16 = [v7 width];
  unint64_t v17 = *(void *)a1;
  unint64_t v18 = *(void *)(a1 + 8) - *(void *)a1;
  if (v18 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v18 + v17 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v17 = *(void *)a1;
  }
  *(void *)(v17 + v18) = v16;
  uint64_t v19 = [v7 height];
  unint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void *)(a1 + 8) - *(void *)a1;
  if (v21 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v21 + v20 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v20 = *(void *)a1;
  }
  *(void *)(v20 + v21) = v19;
  uint64_t v22 = [v7 depth];
  unint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void *)(a1 + 8) - *(void *)a1;
  if (v24 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v24 + v23 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v23 = *(void *)a1;
  }
  *(void *)(v23 + v24) = v22;
  uint64_t v25 = [v7 mipmapLevelCount];
  unint64_t v26 = *(void *)a1;
  unint64_t v27 = *(void *)(a1 + 8) - *(void *)a1;
  if (v27 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v27 + v26 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v26 = *(void *)a1;
  }
  *(void *)(v26 + v27) = v25;
  uint64_t v28 = [v7 sampleCount];
  unint64_t v29 = *(void *)a1;
  unint64_t v30 = *(void *)(a1 + 8) - *(void *)a1;
  if (v30 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v30 + v29 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v29 = *(void *)a1;
  }
  *(void *)(v29 + v30) = v28;
  uint64_t v31 = [v7 arrayLength];
  unint64_t v32 = *(void *)a1;
  unint64_t v33 = *(void *)(a1 + 8) - *(void *)a1;
  if (v33 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v33 + v32 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v32 = *(void *)a1;
  }
  *(void *)(v32 + v33) = v31;
  int v34 = [v7 framebufferOnly];
  unint64_t v35 = *(void *)a1;
  unint64_t v36 = *(void *)(a1 + 8) - *(void *)a1;
  if (v36 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v36 + v35 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v35 = *(void *)a1;
  }
  *(_DWORD *)(v35 + v36) = v34;
  int v37 = [v7 isDrawable];
  unint64_t v38 = *(void *)a1;
  unint64_t v39 = *(void *)(a1 + 8) - *(void *)a1;
  if (v39 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v39 + v38 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v38 = *(void *)a1;
  }
  *(_DWORD *)(v38 + v39) = v37;
  uint64_t v40 = [v7 usage];
  unint64_t v41 = *(void *)a1;
  unint64_t v42 = *(void *)(a1 + 8) - *(void *)a1;
  if (v42 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v42 + v41 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v41 = *(void *)a1;
  }
  *(void *)(v41 + v42) = v40;
  uint64_t v43 = [v7 rotation];
  unint64_t v44 = *(void *)a1;
  unint64_t v45 = *(void *)(a1 + 8) - *(void *)a1;
  if (v45 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v45 + v44 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v44 = *(void *)a1;
  }
  *(void *)(v44 + v45) = v43;
  uint64_t v46 = [v7 storageMode];
  unint64_t v47 = *(void *)a1;
  unint64_t v48 = *(void *)(a1 + 8) - *(void *)a1;
  if (v48 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v48 + v47 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v47 = *(void *)a1;
  }
  *(void *)(v47 + v48) = v46;
  uint64_t v49 = [v7 cpuCacheMode];
  unint64_t v50 = *(void *)a1;
  unint64_t v51 = *(void *)(a1 + 8) - *(void *)a1;
  if (v51 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v51 + v50 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v50 = *(void *)a1;
  }
  *(void *)(v50 + v51) = v49;
  if (objc_opt_respondsToSelector())
  {
    unsigned int v52 = [v7 allowGPUOptimizedContents];
    unint64_t v53 = *(void *)a1;
    unint64_t v54 = *(void *)(a1 + 8) - *(void *)a1;
    if (v54 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v54 + v53 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      unint64_t v53 = *(void *)a1;
    }
    *(void *)(v53 + v54) = v52;
  }
  else
  {
    unint64_t v55 = *(void *)a1;
    unint64_t v56 = *(void *)(a1 + 8) - *(void *)a1;
    if (v56 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v56 + v55 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      unint64_t v55 = *(void *)a1;
    }
    *(void *)(v55 + v56) = 0;
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v57 = [v7 compressionMode];
    unint64_t v58 = *(void *)a1;
    unint64_t v59 = *(void *)(a1 + 8) - *(void *)a1;
    if (v59 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v59 + v58 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      unint64_t v58 = *(void *)a1;
    }
    *(void *)(v58 + v59) = v57;
  }
  else
  {
    unint64_t v60 = *(void *)a1;
    unint64_t v61 = *(void *)(a1 + 8) - *(void *)a1;
    if (v61 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v61 + v60 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      unint64_t v60 = *(void *)a1;
    }
    *(void *)(v60 + v61) = 0;
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v62 = [v7 resourceIndex];
    unint64_t v63 = *(void *)a1;
    unint64_t v64 = *(void *)(a1 + 8) - *(void *)a1;
    if (v64 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v64 + v63 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      unint64_t v63 = *(void *)a1;
    }
    *(void *)(v63 + v64) = v62;
    int v69 = [v7 forceResourceIndex];
    unint64_t v70 = *(void *)a1;
    unint64_t v71 = *(void *)(a1 + 8) - *(void *)a1;
    if (v71 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v71 + v70 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      unint64_t v70 = *(void *)a1;
    }
    *(_DWORD *)(v70 + v71) = v69;
  }
  else
  {
    unint64_t v65 = *(void *)a1;
    unint64_t v66 = *(void *)(a1 + 8) - *(void *)a1;
    if (v66 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v66 + v65 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      unint64_t v65 = *(void *)a1;
    }
    *(void *)(v65 + v66) = -1;
    unint64_t v67 = *(void *)a1;
    unint64_t v68 = *(void *)(a1 + 8) - *(void *)a1;
    if (v68 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v68 + v67 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      unint64_t v67 = *(void *)a1;
    }
    *(_DWORD *)(v67 + v68) = -1;
  }
  if (objc_opt_respondsToSelector())
  {
    char v72 = [v7 swizzle];
    unint64_t v73 = *(void *)a1;
    unint64_t v74 = *(void *)(a1 + 8) - *(void *)a1;
    if (v74 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v74 + v73 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      unint64_t v73 = *(void *)a1;
    }
    *(unsigned char *)(v73 + v74) = v72;
    int v83 = [v7 swizzle];
    unint64_t v84 = *(void *)a1;
    unint64_t v85 = *(void *)(a1 + 8) - *(void *)a1;
    if (v85 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v85 + v84 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      unint64_t v84 = *(void *)a1;
    }
    *(unsigned char *)(v84 + v85) = BYTE1(v83);
    int v86 = [v7 swizzle];
    unint64_t v87 = *(void *)a1;
    unint64_t v88 = *(void *)(a1 + 8) - *(void *)a1;
    if (v88 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v88 + v87 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      unint64_t v87 = *(void *)a1;
    }
    *(unsigned char *)(v87 + v88) = BYTE2(v86);
    int v89 = [v7 swizzle];
    unint64_t v90 = *(void *)a1;
    unint64_t v91 = *(void *)(a1 + 8) - *(void *)a1;
    if (v91 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v91 + v90 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      unint64_t v90 = *(void *)a1;
    }
    *(unsigned char *)(v90 + v91) = HIBYTE(v89);
  }
  else
  {
    unint64_t v75 = *(void *)a1;
    unint64_t v76 = *(void *)(a1 + 8) - *(void *)a1;
    if (v76 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v76 + v75 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      unint64_t v75 = *(void *)a1;
    }
    *(_DWORD *)(v75 + v76) = 2;
    unint64_t v77 = *(void *)a1;
    unint64_t v78 = *(void *)(a1 + 8) - *(void *)a1;
    if (v78 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v78 + v77 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      unint64_t v77 = *(void *)a1;
    }
    *(_DWORD *)(v77 + v78) = 3;
    unint64_t v79 = *(void *)a1;
    unint64_t v80 = *(void *)(a1 + 8) - *(void *)a1;
    if (v80 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v80 + v79 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      unint64_t v79 = *(void *)a1;
    }
    *(_DWORD *)(v79 + v80) = 4;
    unint64_t v81 = *(void *)a1;
    unint64_t v82 = *(void *)(a1 + 8) - *(void *)a1;
    if (v82 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v82 + v81 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      unint64_t v81 = *(void *)a1;
    }
    *(_DWORD *)(v81 + v82) = 5;
  }
  v92 = GPUTools::MTL::CaptureHelper::SaveClientMemory(a1, *(void *)a1, *(void *)(a1 + 8) - *(void *)a1, a3, v8);
  dispatch_semaphore_signal(v9);

  return v92;
}

{
  id v7;
  id v8;
  NSObject *v9;
  id v10;
  id v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  id v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  MTLVertexDescriptor *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  MTLRenderPipelineColorAttachmentDescriptor *v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t i;
  void *v81;
  void *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t j;
  void *v92;
  void *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  void *v115;

  id v7 = a2;
  id v8 = a4;
  unint64_t v9 = *(id *)(a1 + 136);
  dispatch_semaphore_wait(v9, 0xFFFFFFFFFFFFFFFFLL);
  if (*(void *)(a1 + 8) != *(void *)a1) {
    *(void *)(a1 + 8) = *(void *)a1;
  }
  GPUTools::DynamicBuffer::Append<unsigned int>((unint64_t *)a1, &GPUTools::MTL::kMTLCaptureVersion);
  uint64_t v10 = [v7 vertexFunction];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    unint64_t v11 = [v10 originalObject];
  }
  else
  {
    unint64_t v11 = v10;
  }
  unint64_t v12 = v11;

  uint64_t v13 = *(void *)a1;
  unint64_t v14 = *(void *)(a1 + 8) - *(void *)a1;
  if (v14 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v14 + v13 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    uint64_t v13 = *(void *)a1;
  }
  *(void *)(v13 + v14) = v12;

  unint64_t v15 = [v7 fragmentFunction];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v16 = [v15 originalObject];
  }
  else
  {
    uint64_t v16 = v15;
  }
  unint64_t v17 = v16;

  unint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void *)(a1 + 8) - *(void *)a1;
  if (v19 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v19 + v18 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v18 = *(void *)a1;
  }
  *(void *)(v18 + v19) = v17;

  unint64_t v20 = [v7 vertexDescriptor];
  GPUTools::MTL::CaptureHelper::_SaveObject((GPUTools::MTL::CaptureHelper *)a1, v20);

  if (objc_opt_respondsToSelector())
  {
    unint64_t v21 = [v7 rasterSampleCount];
    uint64_t v22 = *(void *)a1;
    unint64_t v23 = *(void *)(a1 + 8) - *(void *)a1;
    if (v23 <= 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v21 = [v7 sampleCount];
    uint64_t v22 = *(void *)a1;
    unint64_t v23 = *(void *)(a1 + 8) - *(void *)a1;
    if (v23 <= 0xFFFFFFFFFFFFFFF7)
    {
LABEL_19:
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      uint64_t v22 = *(void *)a1;
      goto LABEL_21;
    }
  }
  *(void *)(a1 + 8) = v23 + v22 + 8;
LABEL_21:
  *(void *)(v22 + v23) = v21;
  unint64_t v24 = [v7 sampleMask];
  uint64_t v25 = *(void *)a1;
  unint64_t v26 = *(void *)(a1 + 8) - *(void *)a1;
  if (v26 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v26 + v25 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    uint64_t v25 = *(void *)a1;
  }
  *(void *)(v25 + v26) = v24;
  [v7 sampleCoverage];
  uint64_t v28 = v27;
  unint64_t v29 = *(void *)a1;
  unint64_t v30 = *(void *)(a1 + 8) - *(void *)a1;
  if (v30 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v30 + v29 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v29 = *(void *)a1;
  }
  *(_DWORD *)(v29 + v30) = v28;
  uint64_t v31 = [v7 isAlphaToCoverageEnabled];
  unint64_t v32 = *(void *)a1;
  unint64_t v33 = *(void *)(a1 + 8) - *(void *)a1;
  if (v33 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v33 + v32 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v32 = *(void *)a1;
  }
  *(_DWORD *)(v32 + v33) = v31;
  int v34 = [v7 isAlphaToOneEnabled];
  unint64_t v35 = *(void *)a1;
  unint64_t v36 = *(void *)(a1 + 8) - *(void *)a1;
  if (v36 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v36 + v35 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v35 = *(void *)a1;
  }
  *(_DWORD *)(v35 + v36) = v34;
  int v37 = [v7 isRasterizationEnabled];
  unint64_t v38 = *(void *)a1;
  unint64_t v39 = *(void *)(a1 + 8) - *(void *)a1;
  if (v39 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v39 + v38 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v38 = *(void *)a1;
  }
  *(_DWORD *)(v38 + v39) = v37;
  uint64_t v40 = [v7 depthAttachmentPixelFormat];
  unint64_t v41 = *(void *)a1;
  unint64_t v42 = *(void *)(a1 + 8) - *(void *)a1;
  if (v42 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v42 + v41 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v41 = *(void *)a1;
  }
  *(void *)(v41 + v42) = v40;
  uint64_t v43 = [v7 stencilAttachmentPixelFormat];
  unint64_t v44 = *(void *)a1;
  unint64_t v45 = *(void *)(a1 + 8) - *(void *)a1;
  if (v45 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v45 + v44 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v44 = *(void *)a1;
  }
  *(void *)(v44 + v45) = v43;
  uint64_t v46 = *(void *)a1;
  unint64_t v47 = *(void *)(a1 + 8) - *(void *)a1;
  if (v47 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v47 + v46 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    uint64_t v46 = *(void *)a1;
  }
  unint64_t v48 = 0;
  *(_DWORD *)(v46 + v47) = 8;
  do
  {
    uint64_t v49 = [v7 colorAttachments];
    unint64_t v50 = [v49 objectAtIndexedSubscript:v48];
    GPUTools::MTL::CaptureHelper::_SaveObject((GPUTools::MTL::CaptureHelper *)a1, v50);

    ++v48;
  }
  while (v48 != 8);
  unint64_t v51 = [v7 label];
  GPUTools::DynamicBuffer::Append((GPUTools::DynamicBuffer *)a1, (const char *)[v51 UTF8String]);

  if (objc_opt_respondsToSelector())
  {
    unsigned int v52 = [v7 inputPrimitiveTopology];
    unint64_t v53 = *(void *)a1;
    unint64_t v54 = *(void *)(a1 + 8) - *(void *)a1;
    if (v54 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v54 + v53 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      unint64_t v53 = *(void *)a1;
    }
    *(void *)(v53 + v54) = v52;
  }
  else
  {
    unint64_t v55 = *(void *)a1;
    unint64_t v56 = *(void *)(a1 + 8) - *(void *)a1;
    if (v56 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v56 + v55 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      unint64_t v55 = *(void *)a1;
    }
    *(void *)(v55 + v56) = -1;
  }
  uint64_t v57 = [v7 tessellationPartitionMode];
  unint64_t v58 = *(void *)a1;
  unint64_t v59 = *(void *)(a1 + 8) - *(void *)a1;
  if (v59 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v59 + v58 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v58 = *(void *)a1;
  }
  *(void *)(v58 + v59) = v57;
  unint64_t v60 = [v7 maxTessellationFactor];
  unint64_t v61 = *(void *)a1;
  uint64_t v62 = *(void *)(a1 + 8) - *(void *)a1;
  if (v62 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v62 + v61 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v61 = *(void *)a1;
  }
  *(void *)(v61 + v62) = v60;
  unint64_t v63 = [v7 isTessellationFactorScaleEnabled];
  unint64_t v64 = *(void *)a1;
  unint64_t v65 = *(void *)(a1 + 8) - *(void *)a1;
  if (v65 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v65 + v64 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v64 = *(void *)a1;
  }
  *(_DWORD *)(v64 + v65) = v63;
  unint64_t v66 = [v7 tessellationFactorFormat];
  unint64_t v67 = *(void *)a1;
  unint64_t v68 = *(void *)(a1 + 8) - *(void *)a1;
  if (v68 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v68 + v67 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v67 = *(void *)a1;
  }
  *(void *)(v67 + v68) = v66;
  int v69 = [v7 tessellationControlPointIndexType];
  unint64_t v70 = *(void *)a1;
  unint64_t v71 = *(void *)(a1 + 8) - *(void *)a1;
  if (v71 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v71 + v70 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v70 = *(void *)a1;
  }
  *(void *)(v70 + v71) = v69;
  char v72 = [v7 tessellationFactorStepFunction];
  unint64_t v73 = *(void *)a1;
  unint64_t v74 = *(void *)(a1 + 8) - *(void *)a1;
  if (v74 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v74 + v73 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v73 = *(void *)a1;
  }
  *(void *)(v73 + v74) = v72;
  unint64_t v75 = [v7 tessellationOutputWindingOrder];
  unint64_t v76 = *(void *)a1;
  unint64_t v77 = *(void *)(a1 + 8) - *(void *)a1;
  if (v77 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v77 + v76 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v76 = *(void *)a1;
  }
  *(void *)(v76 + v77) = v75;
  unint64_t v78 = *(void *)a1;
  unint64_t v79 = *(void *)(a1 + 8) - *(void *)a1;
  if (v79 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v79 + v78 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v78 = *(void *)a1;
  }
  *(_DWORD *)(v78 + v79) = 31;
  if (objc_opt_respondsToSelector())
  {
    for (uint64_t i = 0; i != 31; ++i)
    {
      unint64_t v81 = [v7 vertexBuffers];
      unint64_t v82 = [v81 objectAtIndexedSubscript:i];

      int v83 = [v82 mutability];
      unint64_t v84 = *(void *)a1;
      unint64_t v85 = *(void *)(a1 + 8) - *(void *)a1;
      if (v85 > 0xFFFFFFFFFFFFFFF7)
      {
        *(void *)(a1 + 8) = v85 + v84 + 8;
      }
      else
      {
        std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
        unint64_t v84 = *(void *)a1;
      }
      *(void *)(v84 + v85) = v83;
    }
  }
  else
  {
    int v86 = 31;
    do
    {
      unint64_t v87 = *(void *)a1;
      unint64_t v88 = *(void *)(a1 + 8) - *(void *)a1;
      if (v88 > 0xFFFFFFFFFFFFFFF7)
      {
        *(void *)(a1 + 8) = v88 + v87 + 8;
      }
      else
      {
        std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
        unint64_t v87 = *(void *)a1;
      }
      *(void *)(v87 + v88) = 0;
      --v86;
    }
    while (v86);
  }
  int v89 = *(void *)a1;
  unint64_t v90 = *(void *)(a1 + 8) - *(void *)a1;
  if (v90 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v90 + v89 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    int v89 = *(void *)a1;
  }
  *(_DWORD *)(v89 + v90) = 31;
  if (objc_opt_respondsToSelector())
  {
    for (j = 0; j != 31; ++j)
    {
      v92 = [v7 fragmentBuffers];
      v93 = [v92 objectAtIndexedSubscript:j];

      v94 = [v93 mutability];
      v95 = *(void *)a1;
      v96 = *(void *)(a1 + 8) - *(void *)a1;
      if (v96 > 0xFFFFFFFFFFFFFFF7)
      {
        *(void *)(a1 + 8) = v96 + v95 + 8;
      }
      else
      {
        std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
        v95 = *(void *)a1;
      }
      *(void *)(v95 + v96) = v94;
    }
  }
  else
  {
    v97 = 31;
    do
    {
      v98 = *(void *)a1;
      v99 = *(void *)(a1 + 8) - *(void *)a1;
      if (v99 > 0xFFFFFFFFFFFFFFF7)
      {
        *(void *)(a1 + 8) = v99 + v98 + 8;
      }
      else
      {
        std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
        v98 = *(void *)a1;
      }
      *(void *)(v98 + v99) = 0;
      --v97;
    }
    while (v97);
  }
  if (objc_opt_respondsToSelector())
  {
    v100 = [v7 supportIndirectCommandBuffers];
    v101 = *(void *)a1;
    v102 = *(void *)(a1 + 8) - *(void *)a1;
    if (v102 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v102 + v101 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      v101 = *(void *)a1;
    }
    *(_DWORD *)(v101 + v102) = v100;
  }
  else
  {
    v103 = *(void *)a1;
    v104 = *(void *)(a1 + 8) - *(void *)a1;
    if (v104 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v104 + v103 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      v103 = *(void *)a1;
    }
    *(_DWORD *)(v103 + v104) = 0;
  }
  if (objc_opt_respondsToSelector())
  {
    v105 = [v7 vertexAmplificationMode];
    v106 = *(void *)a1;
    v107 = *(void *)(a1 + 8) - *(void *)a1;
    if (v107 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v107 + v106 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      v106 = *(void *)a1;
    }
    *(void *)(v106 + v107) = v105;
  }
  else
  {
    v108 = *(void *)a1;
    v109 = *(void *)(a1 + 8) - *(void *)a1;
    if (v109 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v109 + v108 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      v108 = *(void *)a1;
    }
    *(void *)(v108 + v109) = 0;
  }
  if (objc_opt_respondsToSelector())
  {
    v110 = [v7 maxVertexAmplificationCount];
    v111 = *(void *)a1;
    v112 = *(void *)(a1 + 8) - *(void *)a1;
    if (v112 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v112 + v111 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      v111 = *(void *)a1;
    }
    *(void *)(v111 + v112) = v110;
  }
  else
  {
    v113 = *(void *)a1;
    v114 = *(void *)(a1 + 8) - *(void *)a1;
    if (v114 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v114 + v113 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      v113 = *(void *)a1;
    }
    *(void *)(v113 + v114) = -1;
  }
  v115 = GPUTools::MTL::CaptureHelper::SaveClientMemory(a1, *(void *)a1, *(void *)(a1 + 8) - *(void *)a1, a3, v8);
  dispatch_semaphore_signal(v9);

  return v115;
}

void sub_2557C1A80(_Unwind_Exception *a1)
{
  dispatch_semaphore_signal(v3);

  _Unwind_Resume(a1);
}

void GPUTools::DynamicBuffer::Append<unsigned int>(unint64_t *a1, _DWORD *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1] - *a1;
  if (v5 > 0xFFFFFFFFFFFFFFF7)
  {
    a1[1] = v5 + v4 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append(a1, 8uLL);
    unint64_t v4 = *a1;
  }
  *(_DWORD *)(v4 + v5) = *a2;
}

void GPUTools::MTL::CaptureHelper::SaveObject(GPUTools::MTL::CaptureHelper *this, MTLSamplerDescriptor *a2, GPUTools::DynamicBuffer *a3)
{
  uint64_t v62 = this;
  if (a2[1].super.isa != a2->super.isa) {
    a2[1].super.Class isa = a2->super.isa;
  }
  GPUTools::DynamicBuffer::Append<unsigned int>((unint64_t *)a2, &GPUTools::MTL::kMTLCaptureVersion);
  uint64_t v4 = [(GPUTools::MTL::CaptureHelper *)v62 minFilter];
  Class isa = a2->super.isa;
  unint64_t v6 = a2[1].super.isa - a2->super.isa;
  if (v6 > 0xFFFFFFFFFFFFFFF7)
  {
    a2[1].super.Class isa = (Class)((char *)isa + v6 + 8);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a2, 8uLL);
    Class isa = a2->super.isa;
  }
  *(void *)((char *)isa + v6) = v4;
  uint64_t v7 = [(GPUTools::MTL::CaptureHelper *)v62 magFilter];
  Class v8 = a2->super.isa;
  unint64_t v9 = a2[1].super.isa - a2->super.isa;
  if (v9 > 0xFFFFFFFFFFFFFFF7)
  {
    a2[1].super.Class isa = (Class)((char *)v8 + v9 + 8);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a2, 8uLL);
    Class v8 = a2->super.isa;
  }
  *(void *)((char *)v8 + v9) = v7;
  uint64_t v10 = [(GPUTools::MTL::CaptureHelper *)v62 mipFilter];
  Class v11 = a2->super.isa;
  unint64_t v12 = a2[1].super.isa - a2->super.isa;
  if (v12 > 0xFFFFFFFFFFFFFFF7)
  {
    a2[1].super.Class isa = (Class)((char *)v11 + v12 + 8);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a2, 8uLL);
    Class v11 = a2->super.isa;
  }
  *(void *)((char *)v11 + v12) = v10;
  uint64_t v13 = [(GPUTools::MTL::CaptureHelper *)v62 maxAnisotropy];
  Class v14 = a2->super.isa;
  unint64_t v15 = a2[1].super.isa - a2->super.isa;
  if (v15 > 0xFFFFFFFFFFFFFFF7)
  {
    a2[1].super.Class isa = (Class)((char *)v14 + v15 + 8);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a2, 8uLL);
    Class v14 = a2->super.isa;
  }
  *(void *)((char *)v14 + v15) = v13;
  uint64_t v16 = [(GPUTools::MTL::CaptureHelper *)v62 sAddressMode];
  Class v17 = a2->super.isa;
  unint64_t v18 = a2[1].super.isa - a2->super.isa;
  if (v18 > 0xFFFFFFFFFFFFFFF7)
  {
    a2[1].super.Class isa = (Class)((char *)v17 + v18 + 8);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a2, 8uLL);
    Class v17 = a2->super.isa;
  }
  *(void *)((char *)v17 + v18) = v16;
  uint64_t v19 = [(GPUTools::MTL::CaptureHelper *)v62 tAddressMode];
  Class v20 = a2->super.isa;
  unint64_t v21 = a2[1].super.isa - a2->super.isa;
  if (v21 > 0xFFFFFFFFFFFFFFF7)
  {
    a2[1].super.Class isa = (Class)((char *)v20 + v21 + 8);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a2, 8uLL);
    Class v20 = a2->super.isa;
  }
  *(void *)((char *)v20 + v21) = v19;
  uint64_t v22 = [(GPUTools::MTL::CaptureHelper *)v62 rAddressMode];
  Class v23 = a2->super.isa;
  unint64_t v24 = a2[1].super.isa - a2->super.isa;
  if (v24 > 0xFFFFFFFFFFFFFFF7)
  {
    a2[1].super.Class isa = (Class)((char *)v23 + v24 + 8);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a2, 8uLL);
    Class v23 = a2->super.isa;
  }
  *(void *)((char *)v23 + v24) = v22;
  int v25 = [(GPUTools::MTL::CaptureHelper *)v62 normalizedCoordinates];
  Class v26 = a2->super.isa;
  unint64_t v27 = a2[1].super.isa - a2->super.isa;
  if (v27 > 0xFFFFFFFFFFFFFFF7)
  {
    a2[1].super.Class isa = (Class)((char *)v26 + v27 + 8);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a2, 8uLL);
    Class v26 = a2->super.isa;
  }
  *(_DWORD *)((char *)v26 + v27) = v25;
  [(GPUTools::MTL::CaptureHelper *)v62 lodMinClamp];
  int v29 = v28;
  Class v30 = a2->super.isa;
  unint64_t v31 = a2[1].super.isa - a2->super.isa;
  if (v31 > 0xFFFFFFFFFFFFFFF7)
  {
    a2[1].super.Class isa = (Class)((char *)v30 + v31 + 8);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a2, 8uLL);
    Class v30 = a2->super.isa;
  }
  *(_DWORD *)((char *)v30 + v31) = v29;
  [(GPUTools::MTL::CaptureHelper *)v62 lodMaxClamp];
  int v33 = v32;
  Class v34 = a2->super.isa;
  unint64_t v35 = a2[1].super.isa - a2->super.isa;
  if (v35 > 0xFFFFFFFFFFFFFFF7)
  {
    a2[1].super.Class isa = (Class)((char *)v34 + v35 + 8);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a2, 8uLL);
    Class v34 = a2->super.isa;
  }
  *(_DWORD *)((char *)v34 + v35) = v33;
  id v36 = [(GPUTools::MTL::CaptureHelper *)v62 label];
  GPUTools::DynamicBuffer::Append((GPUTools::DynamicBuffer *)a2, (const char *)[v36 UTF8String]);

  int v37 = [(GPUTools::MTL::CaptureHelper *)v62 lodAverage];
  Class v38 = a2->super.isa;
  unint64_t v39 = a2[1].super.isa - a2->super.isa;
  if (v39 > 0xFFFFFFFFFFFFFFF7)
  {
    a2[1].super.Class isa = (Class)((char *)v38 + v39 + 8);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a2, 8uLL);
    Class v38 = a2->super.isa;
  }
  *(_DWORD *)((char *)v38 + v39) = v37;
  int v40 = [(GPUTools::MTL::CaptureHelper *)v62 compareFunction];
  Class v41 = a2->super.isa;
  unint64_t v42 = a2[1].super.isa - a2->super.isa;
  if (v42 > 0xFFFFFFFFFFFFFFF7)
  {
    a2[1].super.Class isa = (Class)((char *)v41 + v42 + 8);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a2, 8uLL);
    Class v41 = a2->super.isa;
  }
  *(_DWORD *)((char *)v41 + v42) = v40;
  Class v43 = a2->super.isa;
  unint64_t v44 = a2[1].super.isa - a2->super.isa;
  if (v44 > 0xFFFFFFFFFFFFFFF7)
  {
    a2[1].super.Class isa = (Class)((char *)v43 + v44 + 8);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a2, 8uLL);
    Class v43 = a2->super.isa;
  }
  *(_DWORD *)((char *)v43 + v44) = -1;
  if (objc_opt_respondsToSelector())
  {
    int v45 = [(GPUTools::MTL::CaptureHelper *)v62 supportArgumentBuffers];
    Class v46 = a2->super.isa;
    unint64_t v47 = a2[1].super.isa - a2->super.isa;
    if (v47 > 0xFFFFFFFFFFFFFFF7)
    {
      a2[1].super.Class isa = (Class)((char *)v46 + v47 + 8);
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a2, 8uLL);
      Class v46 = a2->super.isa;
    }
    *(_DWORD *)((char *)v46 + v47) = v45;
  }
  else
  {
    Class v48 = a2->super.isa;
    unint64_t v49 = a2[1].super.isa - a2->super.isa;
    if (v49 > 0xFFFFFFFFFFFFFFF7)
    {
      a2[1].super.Class isa = (Class)((char *)v48 + v49 + 8);
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a2, 8uLL);
      Class v48 = a2->super.isa;
    }
    *(_DWORD *)((char *)v48 + v49) = -1;
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v50 = [(GPUTools::MTL::CaptureHelper *)v62 resourceIndex];
    Class v51 = a2->super.isa;
    unint64_t v52 = a2[1].super.isa - a2->super.isa;
    if (v52 > 0xFFFFFFFFFFFFFFF7)
    {
      a2[1].super.Class isa = (Class)((char *)v51 + v52 + 8);
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a2, 8uLL);
      Class v51 = a2->super.isa;
    }
    *(void *)((char *)v51 + v52) = v50;
    int v57 = [(GPUTools::MTL::CaptureHelper *)v62 forceResourceIndex];
    Class v58 = a2->super.isa;
    unint64_t v59 = a2[1].super.isa - a2->super.isa;
    if (v59 > 0xFFFFFFFFFFFFFFF7)
    {
      a2[1].super.Class isa = (Class)((char *)v58 + v59 + 8);
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a2, 8uLL);
      Class v58 = a2->super.isa;
    }
    *(_DWORD *)((char *)v58 + v59) = v57;
  }
  else
  {
    Class v53 = a2->super.isa;
    unint64_t v54 = a2[1].super.isa - a2->super.isa;
    if (v54 > 0xFFFFFFFFFFFFFFF7)
    {
      a2[1].super.Class isa = (Class)((char *)v53 + v54 + 8);
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a2, 8uLL);
      Class v53 = a2->super.isa;
    }
    *(void *)((char *)v53 + v54) = -1;
    Class v55 = a2->super.isa;
    unint64_t v56 = a2[1].super.isa - a2->super.isa;
    if (v56 > 0xFFFFFFFFFFFFFFF7)
    {
      a2[1].super.Class isa = (Class)((char *)v55 + v56 + 8);
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a2, 8uLL);
      Class v55 = a2->super.isa;
    }
    *(_DWORD *)((char *)v55 + v56) = -1;
  }
  Class v60 = a2->super.isa;
  unint64_t v61 = a2[1].super.isa - a2->super.isa;
  if (v61 > 0xFFFFFFFFFFFFFFF7)
  {
    a2[1].super.Class isa = (Class)((char *)v60 + v61 + 8);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a2, 8uLL);
    Class v60 = a2->super.isa;
  }
  *(_DWORD *)((char *)v60 + v61) = 0;
}

void sub_2557C211C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *GPUTools::DynamicBuffer::Append(GPUTools::DynamicBuffer *this, const char *a2)
{
  if (a2) {
    id v3 = a2;
  }
  else {
    id v3 = "";
  }
  uint64_t v4 = *(void *)this;
  size_t v5 = *((void *)this + 1) - *(void *)this;
  size_t v6 = strlen(v3);
  size_t v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v5 >= v7 + v5)
  {
    if (v5 > v7 + v5) {
      *((void *)this + 1) = v4 + v7 + v5;
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, v7);
    uint64_t v4 = *(void *)this;
  }
  return memcpy((void *)(v4 + v5), v3, v6 + 1);
}

void *GPUTools::MTL::CaptureHelper::SaveObject(MTLSamplerDescriptor *this, MTLSamplerDescriptor *a2, uint64_t a3)
{
  size_t v5 = a2;
  size_t v6 = this[17].super.isa;
  dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
  GPUTools::MTL::CaptureHelper::SaveObject((GPUTools::MTL::CaptureHelper *)v5, this, v7);
  Class v8 = GPUTools::MTL::CaptureHelper::SaveClientMemory((uint64_t)this, (uint64_t)this->super.isa, this[1].super.isa - this->super.isa, a3, 0);
  dispatch_semaphore_signal(v6);

  return v8;
}

void sub_2557C22B0(_Unwind_Exception *a1)
{
  dispatch_semaphore_signal(v2);

  _Unwind_Resume(a1);
}

void GPUTools::MTL::CaptureHelper::_SaveObject(GPUTools::MTL::CaptureHelper *this, MTLStencilDescriptor *a2)
{
  Class v23 = a2;
  uint64_t v3 = *(void *)this;
  unint64_t v4 = *((void *)this + 1) - *(void *)this;
  if (v4 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v4 + v3 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v3 = *(void *)this;
  }
  *(void *)(v3 + v4) = v23;
  uint64_t v5 = [(MTLStencilDescriptor *)v23 stencilCompareFunction];
  uint64_t v6 = *(void *)this;
  unint64_t v7 = *((void *)this + 1) - *(void *)this;
  if (v7 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v7 + v6 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v6 = *(void *)this;
  }
  *(void *)(v6 + v7) = v5;
  uint64_t v8 = [(MTLStencilDescriptor *)v23 stencilFailureOperation];
  uint64_t v9 = *(void *)this;
  unint64_t v10 = *((void *)this + 1) - *(void *)this;
  if (v10 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v10 + v9 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v9 = *(void *)this;
  }
  *(void *)(v9 + v10) = v8;
  uint64_t v11 = [(MTLStencilDescriptor *)v23 depthFailureOperation];
  uint64_t v12 = *(void *)this;
  unint64_t v13 = *((void *)this + 1) - *(void *)this;
  if (v13 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v13 + v12 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v12 = *(void *)this;
  }
  *(void *)(v12 + v13) = v11;
  uint64_t v14 = [(MTLStencilDescriptor *)v23 depthStencilPassOperation];
  uint64_t v15 = *(void *)this;
  unint64_t v16 = *((void *)this + 1) - *(void *)this;
  if (v16 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v16 + v15 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v15 = *(void *)this;
  }
  *(void *)(v15 + v16) = v14;
  uint32_t v17 = [(MTLStencilDescriptor *)v23 readMask];
  uint64_t v18 = *(void *)this;
  unint64_t v19 = *((void *)this + 1) - *(void *)this;
  if (v19 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v19 + v18 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v18 = *(void *)this;
  }
  *(_DWORD *)(v18 + v19) = v17;
  uint32_t v20 = [(MTLStencilDescriptor *)v23 writeMask];
  uint64_t v21 = *(void *)this;
  unint64_t v22 = *((void *)this + 1) - *(void *)this;
  if (v22 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v22 + v21 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v21 = *(void *)this;
  }
  *(_DWORD *)(v21 + v22) = v20;
}

void sub_2557C24CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *GPUTools::MTL::CaptureHelper::SaveObject(id *this, MTLDepthStencilDescriptor *a2, uint64_t a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = this[17];
  dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
  if (this[1] != *this) {
    this[1] = *this;
  }
  GPUTools::DynamicBuffer::Append<unsigned int>((unint64_t *)this, &GPUTools::MTL::kMTLCaptureVersion);
  uint64_t v7 = [(MTLDepthStencilDescriptor *)v5 depthCompareFunction];
  uint64_t v8 = (char *)*this;
  unint64_t v9 = (unsigned char *)this[1] - (unsigned char *)*this;
  if (v9 > 0xFFFFFFFFFFFFFFF7)
  {
    this[1] = &v8[v9 + 8];
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v8 = (char *)*this;
  }
  *(void *)&v8[v9] = v7;
  BOOL v10 = [(MTLDepthStencilDescriptor *)v5 isDepthWriteEnabled];
  uint64_t v11 = (char *)*this;
  unint64_t v12 = (unsigned char *)this[1] - (unsigned char *)*this;
  if (v12 > 0xFFFFFFFFFFFFFFF7)
  {
    this[1] = &v11[v12 + 8];
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v11 = (char *)*this;
  }
  *(_DWORD *)&v11[v12] = v10;
  id v13 = [(MTLDepthStencilDescriptor *)v5 label];
  GPUTools::DynamicBuffer::Append((GPUTools::DynamicBuffer *)this, (const char *)[v13 UTF8String]);

  uint64_t v14 = [(MTLDepthStencilDescriptor *)v5 frontFaceStencil];
  GPUTools::MTL::CaptureHelper::_SaveObject((GPUTools::MTL::CaptureHelper *)this, v14);

  uint64_t v15 = [(MTLDepthStencilDescriptor *)v5 backFaceStencil];
  GPUTools::MTL::CaptureHelper::_SaveObject((GPUTools::MTL::CaptureHelper *)this, v15);

  unint64_t v16 = GPUTools::MTL::CaptureHelper::SaveClientMemory((uint64_t)this, (uint64_t)*this, (unsigned char *)this[1] - (unsigned char *)*this, a3, 0);
  dispatch_semaphore_signal(v6);

  return v16;
}

void sub_2557C2680(_Unwind_Exception *a1)
{
  dispatch_semaphore_signal(v2);
  _Unwind_Resume(a1);
}

void *GPUTools::MTL::CaptureHelper::SaveObject(id *this, MTLCompileOptions *a2, uint64_t a3)
{
  uint64_t v5 = a2;
  if (v5)
  {
    uint64_t v6 = this[17];
    dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
    if (this[1] != *this) {
      this[1] = *this;
    }
    GPUTools::DynamicBuffer::Append<unsigned int>((unint64_t *)this, &GPUTools::MTL::kMTLCaptureVersion);
    uint64_t v7 = [(MTLCompileOptions *)v5 preprocessorMacros];
    GPUTools::DynamicBuffer::AppendObject((GPUTools::DynamicBuffer *)this, v7);

    BOOL v8 = [(MTLCompileOptions *)v5 fastMathEnabled];
    unint64_t v9 = (char *)*this;
    unint64_t v10 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v10 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v9[v10 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      unint64_t v9 = (char *)*this;
    }
    *(_DWORD *)&v9[v10] = v8;
    int v12 = [(MTLCompileOptions *)v5 debuggingEnabled];
    id v13 = (char *)*this;
    unint64_t v14 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v14 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v13[v14 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      id v13 = (char *)*this;
    }
    *(_DWORD *)&v13[v14] = v12;
    uint64_t v15 = [(MTLCompileOptions *)v5 languageVersion];
    unint64_t v16 = (char *)*this;
    unint64_t v17 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v17 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v16[v17 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      unint64_t v16 = (char *)*this;
    }
    *(void *)&v16[v17] = v15;
    uint64_t v11 = GPUTools::MTL::CaptureHelper::SaveClientMemory((uint64_t)this, (uint64_t)*this, (unsigned char *)this[1] - (unsigned char *)*this, a3, 0);
    dispatch_semaphore_signal(v6);
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

void sub_2557C2844(_Unwind_Exception *a1)
{
  dispatch_semaphore_signal(v2);
  _Unwind_Resume(a1);
}

void GPUTools::DynamicBuffer::AppendObject(GPUTools::DynamicBuffer *this, objc_object *a2)
{
  unint64_t v4 = (void *)MEMORY[0x25A28EBA0]();
  id v8 = 0;
  uint64_t v5 = [MEMORY[0x263F08910] archivedDataWithRootObject:a2 requiringSecureCoding:1 error:&v8];
  id v6 = v8;
  id v7 = v5;
  GPUTools::DynamicBuffer::Append(this, (const void *)[v7 bytes], objc_msgSend(v7, "length"));
}

void sub_2557C2928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void GPUTools::MTL::CaptureHelper::_SaveObject(GPUTools::MTL::CaptureHelper *this, MTLRenderPipelineColorAttachmentDescriptor *a2)
{
  Class v30 = a2;
  BOOL v3 = [(MTLRenderPipelineColorAttachmentDescriptor *)v30 isBlendingEnabled];
  uint64_t v4 = *(void *)this;
  unint64_t v5 = *((void *)this + 1) - *(void *)this;
  if (v5 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v5 + v4 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v4 = *(void *)this;
  }
  *(_DWORD *)(v4 + v5) = v3;
  uint64_t v6 = [(MTLRenderPipelineColorAttachmentDescriptor *)v30 sourceRGBBlendFactor];
  uint64_t v7 = *(void *)this;
  unint64_t v8 = *((void *)this + 1) - *(void *)this;
  if (v8 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v8 + v7 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v7 = *(void *)this;
  }
  *(void *)(v7 + v8) = v6;
  uint64_t v9 = [(MTLRenderPipelineColorAttachmentDescriptor *)v30 destinationRGBBlendFactor];
  uint64_t v10 = *(void *)this;
  unint64_t v11 = *((void *)this + 1) - *(void *)this;
  if (v11 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v11 + v10 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v10 = *(void *)this;
  }
  *(void *)(v10 + v11) = v9;
  uint64_t v12 = [(MTLRenderPipelineColorAttachmentDescriptor *)v30 rgbBlendOperation];
  uint64_t v13 = *(void *)this;
  unint64_t v14 = *((void *)this + 1) - *(void *)this;
  if (v14 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v14 + v13 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v13 = *(void *)this;
  }
  *(void *)(v13 + v14) = v12;
  uint64_t v15 = [(MTLRenderPipelineColorAttachmentDescriptor *)v30 sourceAlphaBlendFactor];
  uint64_t v16 = *(void *)this;
  unint64_t v17 = *((void *)this + 1) - *(void *)this;
  if (v17 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v17 + v16 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v16 = *(void *)this;
  }
  *(void *)(v16 + v17) = v15;
  uint64_t v18 = [(MTLRenderPipelineColorAttachmentDescriptor *)v30 destinationAlphaBlendFactor];
  uint64_t v19 = *(void *)this;
  unint64_t v20 = *((void *)this + 1) - *(void *)this;
  if (v20 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v20 + v19 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v19 = *(void *)this;
  }
  *(void *)(v19 + v20) = v18;
  uint64_t v21 = [(MTLRenderPipelineColorAttachmentDescriptor *)v30 alphaBlendOperation];
  uint64_t v22 = *(void *)this;
  unint64_t v23 = *((void *)this + 1) - *(void *)this;
  if (v23 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v23 + v22 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v22 = *(void *)this;
  }
  *(void *)(v22 + v23) = v21;
  uint64_t v24 = [(MTLRenderPipelineColorAttachmentDescriptor *)v30 writeMask];
  uint64_t v25 = *(void *)this;
  unint64_t v26 = *((void *)this + 1) - *(void *)this;
  if (v26 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v26 + v25 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v25 = *(void *)this;
  }
  *(void *)(v25 + v26) = v24;
  uint64_t v27 = [(MTLRenderPipelineColorAttachmentDescriptor *)v30 pixelFormat];
  uint64_t v28 = *(void *)this;
  unint64_t v29 = *((void *)this + 1) - *(void *)this;
  if (v29 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v29 + v28 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v28 = *(void *)this;
  }
  *(void *)(v28 + v29) = v27;
}

void sub_2557C2BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void GPUTools::MTL::CaptureHelper::_SaveObject(GPUTools::MTL::CaptureHelper *this, MTLRenderPassAttachmentDescriptor *a2, MTLClearColor *a3)
{
  unint64_t v44 = a2;
  id v5 = [(MTLRenderPassAttachmentDescriptor *)v44 texture];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v6 = [v5 originalObject];
  }
  else
  {
    id v6 = v5;
  }
  uint64_t v7 = v6;

  uint64_t v8 = *(void *)this;
  unint64_t v9 = *((void *)this + 1) - *(void *)this;
  if (v9 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v9 + v8 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v8 = *(void *)this;
  }
  *(void *)(v8 + v9) = v7;

  uint64_t v10 = [(MTLRenderPassAttachmentDescriptor *)v44 level];
  uint64_t v11 = *(void *)this;
  unint64_t v12 = *((void *)this + 1) - *(void *)this;
  if (v12 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v12 + v11 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v11 = *(void *)this;
  }
  *(void *)(v11 + v12) = v10;
  uint64_t v13 = [(MTLRenderPassAttachmentDescriptor *)v44 slice];
  uint64_t v14 = *(void *)this;
  unint64_t v15 = *((void *)this + 1) - *(void *)this;
  if (v15 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v15 + v14 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v14 = *(void *)this;
  }
  *(void *)(v14 + v15) = v13;
  uint64_t v16 = [(MTLRenderPassAttachmentDescriptor *)v44 depthPlane];
  uint64_t v17 = *(void *)this;
  unint64_t v18 = *((void *)this + 1) - *(void *)this;
  if (v18 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v18 + v17 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v17 = *(void *)this;
  }
  *(void *)(v17 + v18) = v16;
  id v19 = [(MTLRenderPassAttachmentDescriptor *)v44 resolveTexture];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v20 = [v19 originalObject];
  }
  else
  {
    id v20 = v19;
  }
  uint64_t v21 = v20;

  uint64_t v22 = *(void *)this;
  unint64_t v23 = *((void *)this + 1) - *(void *)this;
  if (v23 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v23 + v22 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v22 = *(void *)this;
  }
  *(void *)(v22 + v23) = v21;

  uint64_t v24 = [(MTLRenderPassAttachmentDescriptor *)v44 resolveLevel];
  uint64_t v25 = *(void *)this;
  unint64_t v26 = *((void *)this + 1) - *(void *)this;
  if (v26 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v26 + v25 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v25 = *(void *)this;
  }
  *(void *)(v25 + v26) = v24;
  uint64_t v27 = [(MTLRenderPassAttachmentDescriptor *)v44 resolveSlice];
  uint64_t v28 = *(void *)this;
  unint64_t v29 = *((void *)this + 1) - *(void *)this;
  if (v29 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v29 + v28 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v28 = *(void *)this;
  }
  *(void *)(v28 + v29) = v27;
  uint64_t v30 = [(MTLRenderPassAttachmentDescriptor *)v44 resolveDepthPlane];
  uint64_t v31 = *(void *)this;
  unint64_t v32 = *((void *)this + 1) - *(void *)this;
  if (v32 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v32 + v31 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v31 = *(void *)this;
  }
  *(void *)(v31 + v32) = v30;
  uint64_t v33 = [(MTLRenderPassAttachmentDescriptor *)v44 loadAction];
  uint64_t v34 = *(void *)this;
  unint64_t v35 = *((void *)this + 1) - *(void *)this;
  if (v35 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v35 + v34 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v34 = *(void *)this;
  }
  *(void *)(v34 + v35) = v33;
  uint64_t v36 = [(MTLRenderPassAttachmentDescriptor *)v44 storeAction];
  uint64_t v37 = *(void *)this;
  unint64_t v38 = *((void *)this + 1) - *(void *)this;
  if (v38 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v38 + v37 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v37 = *(void *)this;
  }
  *(void *)(v37 + v38) = v36;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v39 = [(MTLRenderPassAttachmentDescriptor *)v44 storeActionOptions];
    uint64_t v40 = *(void *)this;
    unint64_t v41 = *((void *)this + 1) - *(void *)this;
    if (v41 > 0xFFFFFFFFFFFFFFF7)
    {
      *((void *)this + 1) = v41 + v40 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      uint64_t v40 = *(void *)this;
    }
    *(void *)(v40 + v41) = v39;
  }
  else
  {
    uint64_t v42 = *(void *)this;
    unint64_t v43 = *((void *)this + 1) - *(void *)this;
    if (v43 > 0xFFFFFFFFFFFFFFF7)
    {
      *((void *)this + 1) = v43 + v42 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      uint64_t v42 = *(void *)this;
    }
    *(void *)(v42 + v43) = 0;
  }
  GPUTools::DynamicBuffer::Append<double>((unint64_t *)this, a3);
  GPUTools::DynamicBuffer::Append<double>((unint64_t *)this, &a3->green);
  GPUTools::DynamicBuffer::Append<double>((unint64_t *)this, &a3->blue);
  GPUTools::DynamicBuffer::Append<double>((unint64_t *)this, &a3->alpha);
}

void sub_2557C3014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void GPUTools::DynamicBuffer::Append<double>(unint64_t *a1, void *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1] - *a1;
  if (v5 > 0xFFFFFFFFFFFFFFF7)
  {
    a1[1] = v5 + v4 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append(a1, 8uLL);
    unint64_t v4 = *a1;
  }
  *(void *)(v4 + v5) = *a2;
}

void *GPUTools::MTL::CaptureHelper::SaveObject(id *this, MTLRenderPassDescriptor *a2, uint64_t a3)
{
  unint64_t v5 = a2;
  id v6 = this[17];
  dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
  if (this[1] != *this) {
    this[1] = *this;
  }
  GPUTools::DynamicBuffer::Append<unsigned int>((unint64_t *)this, &GPUTools::MTL::kMTLCaptureVersion);
  id v7 = [(MTLRenderPassDescriptor *)v5 visibilityResultBuffer];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v8 = [v7 originalObject];
  }
  else
  {
    id v8 = v7;
  }
  unint64_t v9 = v8;

  uint64_t v10 = (char *)*this;
  unint64_t v11 = (unsigned char *)this[1] - (unsigned char *)*this;
  if (v11 > 0xFFFFFFFFFFFFFFF7)
  {
    this[1] = &v10[v11 + 8];
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v10 = (char *)*this;
  }
  *(void *)&v10[v11] = v9;

  for (uint64_t i = 0; i != 8; ++i)
  {
    uint64_t v13 = [(MTLRenderPassDescriptor *)v5 colorAttachments];
    uint64_t v14 = [v13 objectAtIndexedSubscript:i];

    unint64_t v15 = [(MTLRenderPassAttachmentDescriptor *)v14 texture];

    if (v15)
    {
      uint64_t v16 = (char *)*this;
      unint64_t v17 = (unsigned char *)this[1] - (unsigned char *)*this;
      if (v17 > 0xFFFFFFFFFFFFFFF7)
      {
        this[1] = &v16[v17 + 8];
      }
      else
      {
        std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
        uint64_t v16 = (char *)*this;
      }
      *(void *)&v16[v17] = i;
      [(MTLRenderPassAttachmentDescriptor *)v14 clearColor];
      __p.red = v18;
      __p.green = v19;
      __p.blue = v20;
      __p.alpha = v21;
      GPUTools::MTL::CaptureHelper::_SaveObject((GPUTools::MTL::CaptureHelper *)this, v14, &__p);
    }
  }
  uint64_t v22 = (char *)*this;
  unint64_t v23 = (unsigned char *)this[1] - (unsigned char *)*this;
  if (v23 > 0xFFFFFFFFFFFFFFF7)
  {
    this[1] = &v22[v23 + 8];
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v22 = (char *)*this;
  }
  *(void *)&v22[v23] = -1;
  uint64_t v24 = [(MTLRenderPassDescriptor *)v5 depthAttachment];
  uint64_t v25 = [(MTLRenderPassDescriptor *)v5 depthAttachment];
  [(id)v25 clearDepth];
  __p.red = v26;
  memset(&__p.green, 0, 24);
  GPUTools::MTL::CaptureHelper::_SaveObject((GPUTools::MTL::CaptureHelper *)this, v24, &__p);

  uint64_t v27 = [(MTLRenderPassDescriptor *)v5 depthAttachment];
  LOBYTE(v25) = objc_opt_respondsToSelector();

  if (v25)
  {
    uint64_t v28 = [(MTLRenderPassDescriptor *)v5 depthAttachment];
    uint64_t v29 = [v28 depthResolveFilter];
    uint64_t v30 = (char *)*this;
    unint64_t v31 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v31 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v30[v31 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      uint64_t v30 = (char *)*this;
    }
    *(void *)&v30[v31] = v29;
  }
  else
  {
    unint64_t v32 = (char *)*this;
    unint64_t v33 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v33 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v32[v33 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      unint64_t v32 = (char *)*this;
    }
    *(void *)&v32[v33] = -1;
  }
  uint64_t v34 = [(MTLRenderPassDescriptor *)v5 stencilAttachment];
  unint64_t v35 = [(MTLRenderPassDescriptor *)v5 stencilAttachment];
  __p.red = (double)[v35 clearStencil];
  memset(&__p.green, 0, 24);
  GPUTools::MTL::CaptureHelper::_SaveObject((GPUTools::MTL::CaptureHelper *)this, v34, &__p);

  if (objc_opt_respondsToSelector())
  {
    uint64_t v36 = [(MTLRenderPassDescriptor *)v5 renderTargetArrayLength];
    uint64_t v37 = (char *)*this;
    unint64_t v38 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v38 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v37[v38 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      uint64_t v37 = (char *)*this;
    }
    *(void *)&v37[v38] = v36;
  }
  else
  {
    uint64_t v39 = (char *)*this;
    unint64_t v40 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v40 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v39[v40 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      uint64_t v39 = (char *)*this;
    }
    *(void *)&v39[v40] = -1;
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v41 = [(MTLRenderPassDescriptor *)v5 imageblockSampleLength];
    uint64_t v42 = (char *)*this;
    unint64_t v43 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v43 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v42[v43 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      uint64_t v42 = (char *)*this;
    }
    *(void *)&v42[v43] = v41;
    uint64_t v50 = [(MTLRenderPassDescriptor *)v5 threadgroupMemoryLength];
    Class v51 = (char *)*this;
    unint64_t v52 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v52 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v51[v52 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      Class v51 = (char *)*this;
    }
    *(void *)&v51[v52] = v50;
    uint64_t v55 = [(MTLRenderPassDescriptor *)v5 tileWidth];
    unint64_t v56 = (char *)*this;
    unint64_t v57 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v57 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v56[v57 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      unint64_t v56 = (char *)*this;
    }
    *(void *)&v56[v57] = v55;
    uint64_t v58 = [(MTLRenderPassDescriptor *)v5 tileHeight];
    unint64_t v59 = (char *)*this;
    unint64_t v60 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v60 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v59[v60 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      unint64_t v59 = (char *)*this;
    }
    *(void *)&v59[v60] = v58;
  }
  else
  {
    unint64_t v44 = (char *)*this;
    unint64_t v45 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v45 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v44[v45 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      unint64_t v44 = (char *)*this;
    }
    *(void *)&v44[v45] = -1;
    Class v46 = (char *)*this;
    unint64_t v47 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v47 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v46[v47 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      Class v46 = (char *)*this;
    }
    *(void *)&v46[v47] = -1;
    Class v48 = (char *)*this;
    unint64_t v49 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v49 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v48[v49 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      Class v48 = (char *)*this;
    }
    *(void *)&v48[v49] = -1;
    Class v53 = (char *)*this;
    unint64_t v54 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v54 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v53[v54 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      Class v53 = (char *)*this;
    }
    *(void *)&v53[v54] = -1;
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v61 = [(MTLRenderPassDescriptor *)v5 renderTargetWidth];
    uint64_t v62 = (char *)*this;
    unint64_t v63 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v63 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v62[v63 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      uint64_t v62 = (char *)*this;
    }
    *(void *)&v62[v63] = v61;
    uint64_t v68 = [(MTLRenderPassDescriptor *)v5 renderTargetHeight];
    int v69 = (char *)*this;
    unint64_t v70 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v70 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v69[v70 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      int v69 = (char *)*this;
    }
    *(void *)&v69[v70] = v68;
  }
  else
  {
    unint64_t v64 = (char *)*this;
    unint64_t v65 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v65 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v64[v65 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      unint64_t v64 = (char *)*this;
    }
    *(void *)&v64[v65] = -1;
    unint64_t v66 = (char *)*this;
    unint64_t v67 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v67 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v66[v67 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      unint64_t v66 = (char *)*this;
    }
    *(void *)&v66[v67] = -1;
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v71 = [(MTLRenderPassDescriptor *)v5 defaultRasterSampleCount];
    char v72 = (char *)*this;
    unint64_t v73 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v73 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v72[v73 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      char v72 = (char *)*this;
    }
    *(void *)&v72[v73] = v71;
  }
  else
  {
    unint64_t v74 = (char *)*this;
    unint64_t v75 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v75 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v74[v75 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      unint64_t v74 = (char *)*this;
    }
    *(void *)&v74[v75] = -1;
  }
  if (objc_opt_respondsToSelector())
  {
    unint64_t v76 = [(MTLRenderPassDescriptor *)v5 getSamplePositions:0 count:0];
    unint64_t v77 = (char *)*this;
    unint64_t v78 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v78 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v77[v78 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      unint64_t v77 = (char *)*this;
    }
    *(void *)&v77[v78] = v76;
    if (v76)
    {
      std::vector<MTLSamplePosition>::vector(&__p, v76);
      [(MTLRenderPassDescriptor *)v5 getSamplePositions:*(void *)&__p.red count:v76];
      uint64_t v81 = 0;
      do
      {
        int v82 = *(_DWORD *)(*(void *)&__p.red + v81);
        int v83 = (char *)*this;
        unint64_t v84 = (unsigned char *)this[1] - (unsigned char *)*this;
        if (v84 > 0xFFFFFFFFFFFFFFF7)
        {
          this[1] = &v83[v84 + 8];
        }
        else
        {
          std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
          int v83 = (char *)*this;
        }
        *(_DWORD *)&v83[v84] = v82;
        int v85 = *(_DWORD *)(*(void *)&__p.red + v81 + 4);
        int v86 = (char *)*this;
        unint64_t v87 = (unsigned char *)this[1] - (unsigned char *)*this;
        if (v87 > 0xFFFFFFFFFFFFFFF7)
        {
          this[1] = &v86[v87 + 8];
        }
        else
        {
          std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
          int v86 = (char *)*this;
        }
        *(_DWORD *)&v86[v87] = v85;
        v81 += 8;
        --v76;
      }
      while (v76);
      if (*(void *)&__p.red)
      {
        __p.green = __p.red;
        operator delete(*(void **)&__p.red);
      }
    }
  }
  else
  {
    unint64_t v79 = (char *)*this;
    unint64_t v80 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v80 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v79[v80 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      unint64_t v79 = (char *)*this;
    }
    *(void *)&v79[v80] = 0;
  }
  unint64_t v88 = [(MTLRenderPassDescriptor *)v5 stencilAttachment];
  char v89 = objc_opt_respondsToSelector();

  if (v89)
  {
    unint64_t v90 = [(MTLRenderPassDescriptor *)v5 stencilAttachment];
    uint64_t v91 = [v90 stencilResolveFilter];
    v92 = (char *)*this;
    unint64_t v93 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v93 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v92[v93 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      v92 = (char *)*this;
    }
    *(void *)&v92[v93] = v91;
  }
  else
  {
    v94 = (char *)*this;
    unint64_t v95 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v95 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v94[v95 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      v94 = (char *)*this;
    }
    *(void *)&v94[v95] = -1;
  }
  if (objc_opt_respondsToSelector())
  {
    unsigned int v96 = [(MTLRenderPassDescriptor *)v5 openGLModeEnabled];
    v97 = (char *)*this;
    unint64_t v98 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v98 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v97[v98 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      v97 = (char *)*this;
    }
    *(void *)&v97[v98] = v96;
  }
  else
  {
    v99 = (char *)*this;
    unint64_t v100 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v100 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v99[v100 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      v99 = (char *)*this;
    }
    *(void *)&v99[v100] = 0;
  }
  if (objc_opt_respondsToSelector())
  {
    v101 = [(MTLRenderPassDescriptor *)v5 rasterizationRateMap];
    v102 = (char *)*this;
    unint64_t v103 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v103 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v102[v103 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      v102 = (char *)*this;
    }
    *(void *)&v102[v103] = v101;
  }
  else
  {
    v104 = (char *)*this;
    unint64_t v105 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v105 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v104[v105 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      v104 = (char *)*this;
    }
    *(void *)&v104[v105] = 0;
  }
  v106 = GPUTools::MTL::CaptureHelper::SaveClientMemory((uint64_t)this, (uint64_t)*this, (unsigned char *)this[1] - (unsigned char *)*this, a3, 0);
  dispatch_semaphore_signal(v6);

  return v106;
}

void sub_2557C3B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  dispatch_semaphore_signal(v11);

  _Unwind_Resume(a1);
}

void *GPUTools::MTL::CaptureHelper::SaveObject(id *this, MTLComputePipelineDescriptor *a2, uint64_t a3)
{
  unint64_t v5 = a2;
  id v6 = this[17];
  dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
  if (this[1] != *this) {
    this[1] = *this;
  }
  GPUTools::DynamicBuffer::Append<unsigned int>((unint64_t *)this, &GPUTools::MTL::kMTLCaptureVersion);
  id v7 = [(MTLComputePipelineDescriptor *)v5 computeFunction];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v8 = [v7 originalObject];
  }
  else
  {
    id v8 = v7;
  }
  unint64_t v9 = v8;

  uint64_t v10 = (char *)*this;
  unint64_t v11 = (unsigned char *)this[1] - (unsigned char *)*this;
  if (v11 > 0xFFFFFFFFFFFFFFF7)
  {
    this[1] = &v10[v11 + 8];
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v10 = (char *)*this;
  }
  *(void *)&v10[v11] = v9;

  BOOL v12 = [(MTLComputePipelineDescriptor *)v5 threadGroupSizeIsMultipleOfThreadExecutionWidth];
  uint64_t v13 = (char *)*this;
  unint64_t v14 = (unsigned char *)this[1] - (unsigned char *)*this;
  if (v14 > 0xFFFFFFFFFFFFFFF7)
  {
    this[1] = &v13[v14 + 8];
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v13 = (char *)*this;
  }
  *(_DWORD *)&v13[v14] = v12;
  id v15 = [(MTLComputePipelineDescriptor *)v5 label];
  GPUTools::DynamicBuffer::Append((GPUTools::DynamicBuffer *)this, (const char *)[v15 UTF8String]);

  if ((objc_opt_respondsToSelector() & 1) != 0
    && ([(MTLComputePipelineDescriptor *)v5 stageInputDescriptor],
        (uint64_t v16 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    unint64_t v17 = (char *)*this;
    unint64_t v18 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v18 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v17[v18 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      unint64_t v17 = (char *)*this;
    }
    uint64_t v21 = 0;
    *(_DWORD *)&v17[v18] = 31;
    do
    {
      uint64_t v22 = [v16 layouts];
      unint64_t v23 = [v22 objectAtIndexedSubscript:v21];
      uint64_t v24 = [v23 stride];
      uint64_t v25 = (char *)*this;
      unint64_t v26 = (unsigned char *)this[1] - (unsigned char *)*this;
      if (v26 > 0xFFFFFFFFFFFFFFF7)
      {
        this[1] = &v25[v26 + 8];
      }
      else
      {
        std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
        uint64_t v25 = (char *)*this;
      }
      *(void *)&v25[v26] = v24;

      uint64_t v27 = [v16 layouts];
      uint64_t v28 = [v27 objectAtIndexedSubscript:v21];
      uint64_t v29 = [v28 stepRate];
      uint64_t v30 = (char *)*this;
      unint64_t v31 = (unsigned char *)this[1] - (unsigned char *)*this;
      if (v31 > 0xFFFFFFFFFFFFFFF7)
      {
        this[1] = &v30[v31 + 8];
      }
      else
      {
        std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
        uint64_t v30 = (char *)*this;
      }
      *(void *)&v30[v31] = v29;

      unint64_t v32 = [v16 layouts];
      unint64_t v33 = [v32 objectAtIndexedSubscript:v21];
      uint64_t v34 = [v33 stepFunction];
      unint64_t v35 = (char *)*this;
      unint64_t v36 = (unsigned char *)this[1] - (unsigned char *)*this;
      if (v36 > 0xFFFFFFFFFFFFFFF7)
      {
        this[1] = &v35[v36 + 8];
      }
      else
      {
        std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
        unint64_t v35 = (char *)*this;
      }
      *(void *)&v35[v36] = v34;

      ++v21;
    }
    while (v21 != 31);
    uint64_t v37 = (char *)*this;
    unint64_t v38 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v38 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v37[v38 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      uint64_t v37 = (char *)*this;
    }
    uint64_t v39 = 0;
    *(_DWORD *)&v37[v38] = 31;
    do
    {
      unint64_t v40 = [v16 attributes];
      uint64_t v41 = [v40 objectAtIndexedSubscript:v39];
      uint64_t v42 = [v41 format];
      unint64_t v43 = (char *)*this;
      unint64_t v44 = (unsigned char *)this[1] - (unsigned char *)*this;
      if (v44 > 0xFFFFFFFFFFFFFFF7)
      {
        this[1] = &v43[v44 + 8];
      }
      else
      {
        std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
        unint64_t v43 = (char *)*this;
      }
      *(void *)&v43[v44] = v42;

      unint64_t v45 = [v16 attributes];
      Class v46 = [v45 objectAtIndexedSubscript:v39];
      uint64_t v47 = [v46 offset];
      Class v48 = (char *)*this;
      unint64_t v49 = (unsigned char *)this[1] - (unsigned char *)*this;
      if (v49 > 0xFFFFFFFFFFFFFFF7)
      {
        this[1] = &v48[v49 + 8];
      }
      else
      {
        std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
        Class v48 = (char *)*this;
      }
      *(void *)&v48[v49] = v47;

      uint64_t v50 = [v16 attributes];
      Class v51 = [v50 objectAtIndexedSubscript:v39];
      uint64_t v52 = [v51 bufferIndex];
      Class v53 = (char *)*this;
      unint64_t v54 = (unsigned char *)this[1] - (unsigned char *)*this;
      if (v54 > 0xFFFFFFFFFFFFFFF7)
      {
        this[1] = &v53[v54 + 8];
      }
      else
      {
        std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
        Class v53 = (char *)*this;
      }
      *(void *)&v53[v54] = v52;

      ++v39;
    }
    while (v39 != 31);
    uint64_t v55 = [v16 indexType];
    unint64_t v56 = (char *)*this;
    unint64_t v57 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v57 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v56[v57 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      unint64_t v56 = (char *)*this;
    }
    *(void *)&v56[v57] = v55;
    uint64_t v58 = [v16 indexBufferIndex];
    unint64_t v59 = (char *)*this;
    unint64_t v60 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v60 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v59[v60 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      unint64_t v59 = (char *)*this;
    }
    *(void *)&v59[v60] = v58;
  }
  else
  {
    double v19 = (char *)*this;
    unint64_t v20 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v20 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v19[v20 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      double v19 = (char *)*this;
    }
    *(void *)&v19[v20] = -1;
  }
  uint64_t v61 = (char *)*this;
  unint64_t v62 = (unsigned char *)this[1] - (unsigned char *)*this;
  if (v62 > 0xFFFFFFFFFFFFFFF7)
  {
    this[1] = &v61[v62 + 8];
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v61 = (char *)*this;
  }
  *(_DWORD *)&v61[v62] = 31;
  if (objc_opt_respondsToSelector())
  {
    for (uint64_t i = 0; i != 31; ++i)
    {
      unint64_t v64 = [(MTLComputePipelineDescriptor *)v5 buffers];
      unint64_t v65 = [v64 objectAtIndexedSubscript:i];

      uint64_t v66 = [v65 mutability];
      unint64_t v67 = (char *)*this;
      unint64_t v68 = (unsigned char *)this[1] - (unsigned char *)*this;
      if (v68 > 0xFFFFFFFFFFFFFFF7)
      {
        this[1] = &v67[v68 + 8];
      }
      else
      {
        std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
        unint64_t v67 = (char *)*this;
      }
      *(void *)&v67[v68] = v66;
    }
  }
  else
  {
    int v69 = 31;
    do
    {
      unint64_t v70 = (char *)*this;
      unint64_t v71 = (unsigned char *)this[1] - (unsigned char *)*this;
      if (v71 > 0xFFFFFFFFFFFFFFF7)
      {
        this[1] = &v70[v71 + 8];
      }
      else
      {
        std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
        unint64_t v70 = (char *)*this;
      }
      *(void *)&v70[v71] = 0;
      --v69;
    }
    while (v69);
  }
  if (objc_opt_respondsToSelector())
  {
    BOOL v72 = [(MTLComputePipelineDescriptor *)v5 supportIndirectCommandBuffers];
    unint64_t v73 = (char *)*this;
    unint64_t v74 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v74 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v73[v74 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      unint64_t v73 = (char *)*this;
    }
    *(_DWORD *)&v73[v74] = v72;
  }
  else
  {
    unint64_t v75 = (char *)*this;
    unint64_t v76 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v76 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v75[v76 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      unint64_t v75 = (char *)*this;
    }
    *(_DWORD *)&v75[v76] = 0;
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v77 = [(MTLComputePipelineDescriptor *)v5 maxTotalThreadsPerThreadgroup];
    unint64_t v78 = (char *)*this;
    unint64_t v79 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v79 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v78[v79 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      unint64_t v78 = (char *)*this;
    }
    *(void *)&v78[v79] = v77;
  }
  else
  {
    unint64_t v80 = (char *)*this;
    unint64_t v81 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v81 > 0xFFFFFFFFFFFFFFF7)
    {
      this[1] = &v80[v81 + 8];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      unint64_t v80 = (char *)*this;
    }
    *(void *)&v80[v81] = 0;
  }
  int v82 = GPUTools::MTL::CaptureHelper::SaveClientMemory((uint64_t)this, (uint64_t)*this, (unsigned char *)this[1] - (unsigned char *)*this, a3, 0);
  dispatch_semaphore_signal(v6);

  return v82;
}

void sub_2557C442C(_Unwind_Exception *a1)
{
  dispatch_semaphore_signal(v2);
  _Unwind_Resume(a1);
}

void sub_2557C44FC()
{
  JUMPOUT(0x2557C44E4);
}

void sub_2557C4510()
{
  JUMPOUT(0x2557C44E4);
}

void *GPUTools::MTL::CaptureHelper::SaveObject(uint64_t a1, dispatch_data_t data, uint64_t a3)
{
  uint64_t v8 = 0;
  size_t size_ptr = 0;
  dispatch_data_t v5 = dispatch_data_create_map(data, (const void **)&v8, &size_ptr);
  id v6 = GPUTools::MTL::CaptureHelper::SaveClientMemory(a1, v8, size_ptr, a3, 0);

  return v6;
}

void sub_2557C458C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void GPUTools::MTL::CaptureHelper::_SaveObject(GPUTools::MTL::CaptureHelper *this, MTLTileRenderPipelineColorAttachmentDescriptor *a2)
{
  id v6 = a2;
  uint64_t v3 = [(MTLTileRenderPipelineColorAttachmentDescriptor *)v6 pixelFormat];
  uint64_t v4 = *(void *)this;
  unint64_t v5 = *((void *)this + 1) - *(void *)this;
  if (v5 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v5 + v4 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v4 = *(void *)this;
  }
  *(void *)(v4 + v5) = v3;
}

void sub_2557C4624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void GPUTools::MTL::CaptureHelper::_SaveObject(GPUTools::MTL::CaptureHelper *this, MTLVertexDescriptor *a2)
{
  uint64_t v39 = a2;
  uint64_t v3 = *(void *)this;
  unint64_t v4 = *((void *)this + 1) - *(void *)this;
  if (v4 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v4 + v3 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v3 = *(void *)this;
  }
  uint64_t v5 = 0;
  *(_DWORD *)(v3 + v4) = 31;
  do
  {
    id v6 = [(MTLVertexDescriptor *)v39 layouts];
    id v7 = [v6 objectAtIndexedSubscript:v5];
    uint64_t v8 = [v7 stride];
    uint64_t v9 = *(void *)this;
    unint64_t v10 = *((void *)this + 1) - *(void *)this;
    if (v10 > 0xFFFFFFFFFFFFFFF7)
    {
      *((void *)this + 1) = v10 + v9 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      uint64_t v9 = *(void *)this;
    }
    *(void *)(v9 + v10) = v8;

    unint64_t v11 = [(MTLVertexDescriptor *)v39 layouts];
    BOOL v12 = [v11 objectAtIndexedSubscript:v5];
    uint64_t v13 = [v12 stepRate];
    uint64_t v14 = *(void *)this;
    unint64_t v15 = *((void *)this + 1) - *(void *)this;
    if (v15 > 0xFFFFFFFFFFFFFFF7)
    {
      *((void *)this + 1) = v15 + v14 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      uint64_t v14 = *(void *)this;
    }
    *(void *)(v14 + v15) = v13;

    uint64_t v16 = [(MTLVertexDescriptor *)v39 layouts];
    unint64_t v17 = [v16 objectAtIndexedSubscript:v5];
    uint64_t v18 = [v17 stepFunction];
    uint64_t v19 = *(void *)this;
    unint64_t v20 = *((void *)this + 1) - *(void *)this;
    if (v20 > 0xFFFFFFFFFFFFFFF7)
    {
      *((void *)this + 1) = v20 + v19 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      uint64_t v19 = *(void *)this;
    }
    *(void *)(v19 + v20) = v18;

    ++v5;
  }
  while (v5 != 31);
  uint64_t v21 = *(void *)this;
  unint64_t v22 = *((void *)this + 1) - *(void *)this;
  if (v22 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v22 + v21 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v21 = *(void *)this;
  }
  uint64_t v23 = 0;
  *(_DWORD *)(v21 + v22) = 31;
  do
  {
    uint64_t v24 = [(MTLVertexDescriptor *)v39 attributes];
    uint64_t v25 = [v24 objectAtIndexedSubscript:v23];
    uint64_t v26 = [v25 format];
    uint64_t v27 = *(void *)this;
    unint64_t v28 = *((void *)this + 1) - *(void *)this;
    if (v28 > 0xFFFFFFFFFFFFFFF7)
    {
      *((void *)this + 1) = v28 + v27 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      uint64_t v27 = *(void *)this;
    }
    *(void *)(v27 + v28) = v26;

    uint64_t v29 = [(MTLVertexDescriptor *)v39 attributes];
    uint64_t v30 = [v29 objectAtIndexedSubscript:v23];
    uint64_t v31 = [v30 offset];
    uint64_t v32 = *(void *)this;
    unint64_t v33 = *((void *)this + 1) - *(void *)this;
    if (v33 > 0xFFFFFFFFFFFFFFF7)
    {
      *((void *)this + 1) = v33 + v32 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      uint64_t v32 = *(void *)this;
    }
    *(void *)(v32 + v33) = v31;

    uint64_t v34 = [(MTLVertexDescriptor *)v39 attributes];
    unint64_t v35 = [v34 objectAtIndexedSubscript:v23];
    uint64_t v36 = [v35 bufferIndex];
    uint64_t v37 = *(void *)this;
    unint64_t v38 = *((void *)this + 1) - *(void *)this;
    if (v38 > 0xFFFFFFFFFFFFFFF7)
    {
      *((void *)this + 1) = v38 + v37 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      uint64_t v37 = *(void *)this;
    }
    *(void *)(v37 + v38) = v36;

    ++v23;
  }
  while (v23 != 31);
}

void sub_2557C4974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2557C54C4(_Unwind_Exception *a1)
{
  dispatch_semaphore_signal(v3);

  _Unwind_Resume(a1);
}

void *GPUTools::MTL::CaptureHelper::SaveObject(id *this, MTLTileRenderPipelineDescriptor *a2, uint64_t a3)
{
  uint64_t v5 = a2;
  id v6 = this[17];
  dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
  if (this[1] != *this) {
    this[1] = *this;
  }
  GPUTools::DynamicBuffer::Append<unsigned int>((unint64_t *)this, &GPUTools::MTL::kMTLCaptureVersion);
  id v7 = [(MTLTileRenderPipelineDescriptor *)v5 label];
  GPUTools::DynamicBuffer::Append((GPUTools::DynamicBuffer *)this, (const char *)[v7 UTF8String]);

  id v8 = [(MTLTileRenderPipelineDescriptor *)v5 tileFunction];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v9 = [v8 originalObject];
  }
  else
  {
    id v9 = v8;
  }
  unint64_t v10 = v9;

  unint64_t v11 = (char *)*this;
  unint64_t v12 = (unsigned char *)this[1] - (unsigned char *)*this;
  if (v12 > 0xFFFFFFFFFFFFFFF7)
  {
    this[1] = &v11[v12 + 8];
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    unint64_t v11 = (char *)*this;
  }
  *(void *)&v11[v12] = v10;

  if (objc_opt_respondsToSelector())
  {
    uint64_t v13 = [(MTLTileRenderPipelineDescriptor *)v5 rasterSampleCount];
    uint64_t v14 = (char *)*this;
    unint64_t v15 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v15 <= 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v13 = [(MTLTileRenderPipelineDescriptor *)v5 sampleCount];
    uint64_t v14 = (char *)*this;
    unint64_t v15 = (unsigned char *)this[1] - (unsigned char *)*this;
    if (v15 <= 0xFFFFFFFFFFFFFFF7)
    {
LABEL_13:
      std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
      uint64_t v14 = (char *)*this;
      goto LABEL_15;
    }
  }
  this[1] = &v14[v15 + 8];
LABEL_15:
  *(void *)&v14[v15] = v13;
  uint64_t v16 = (char *)*this;
  unint64_t v17 = (unsigned char *)this[1] - (unsigned char *)*this;
  if (v17 > 0xFFFFFFFFFFFFFFF7)
  {
    this[1] = &v16[v17 + 8];
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v16 = (char *)*this;
  }
  uint64_t v18 = 0;
  *(_DWORD *)&v16[v17] = 8;
  do
  {
    uint64_t v19 = [(MTLTileRenderPipelineDescriptor *)v5 colorAttachments];
    unint64_t v20 = [v19 objectAtIndexedSubscript:v18];
    GPUTools::MTL::CaptureHelper::_SaveObject((GPUTools::MTL::CaptureHelper *)this, v20);

    ++v18;
  }
  while (v18 != 8);
  BOOL v21 = [(MTLTileRenderPipelineDescriptor *)v5 threadgroupSizeMatchesTileSize];
  unint64_t v22 = (char *)*this;
  unint64_t v23 = (unsigned char *)this[1] - (unsigned char *)*this;
  if (v23 > 0xFFFFFFFFFFFFFFF7)
  {
    this[1] = &v22[v23 + 8];
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    unint64_t v22 = (char *)*this;
  }
  *(_DWORD *)&v22[v23] = v21;
  uint64_t v24 = (char *)*this;
  unint64_t v25 = (unsigned char *)this[1] - (unsigned char *)*this;
  if (v25 > 0xFFFFFFFFFFFFFFF7)
  {
    this[1] = &v24[v25 + 8];
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v24 = (char *)*this;
  }
  *(_DWORD *)&v24[v25] = 31;
  if (objc_opt_respondsToSelector())
  {
    for (uint64_t i = 0; i != 31; ++i)
    {
      uint64_t v27 = [(MTLTileRenderPipelineDescriptor *)v5 tileBuffers];
      unint64_t v28 = [v27 objectAtIndexedSubscript:i];

      uint64_t v29 = [v28 mutability];
      uint64_t v30 = (char *)*this;
      unint64_t v31 = (unsigned char *)this[1] - (unsigned char *)*this;
      if (v31 > 0xFFFFFFFFFFFFFFF7)
      {
        this[1] = &v30[v31 + 8];
      }
      else
      {
        std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
        uint64_t v30 = (char *)*this;
      }
      *(void *)&v30[v31] = v29;
    }
  }
  else
  {
    int v32 = 31;
    do
    {
      unint64_t v33 = (char *)*this;
      unint64_t v34 = (unsigned char *)this[1] - (unsigned char *)*this;
      if (v34 > 0xFFFFFFFFFFFFFFF7)
      {
        this[1] = &v33[v34 + 8];
      }
      else
      {
        std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
        unint64_t v33 = (char *)*this;
      }
      *(void *)&v33[v34] = 0;
      --v32;
    }
    while (v32);
  }
  unint64_t v35 = GPUTools::MTL::CaptureHelper::SaveClientMemory((uint64_t)this, (uint64_t)*this, (unsigned char *)this[1] - (unsigned char *)*this, a3, 0);
  dispatch_semaphore_signal(v6);

  return v35;
}

void sub_2557C5968(_Unwind_Exception *a1)
{
  dispatch_semaphore_signal(v2);

  _Unwind_Resume(a1);
}

void *GPUTools::MTL::CaptureHelper::SaveObject(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(id *)(a1 + 136);
  dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
  if (*(void *)(a1 + 8) != *(void *)a1) {
    *(void *)(a1 + 8) = *(void *)a1;
  }
  GPUTools::DynamicBuffer::Append<unsigned int>((unint64_t *)a1, &GPUTools::MTL::kMTLCaptureVersion);
  unint64_t v7 = *(void *)a1;
  unint64_t v8 = *(void *)(a1 + 8) - *(void *)a1;
  if (v8 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v8 + v7 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v7 = *(void *)a1;
  }
  *(void *)(v7 + v8) = 1;
  id v9 = [v5 name];
  GPUTools::DynamicBuffer::Append((GPUTools::DynamicBuffer *)a1, (const char *)[v9 UTF8String]);

  if (v5)
  {
    [v5 maxThreadsPerThreadgroup];
    uint64_t v10 = v46;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
  }
  unint64_t v11 = *(void *)a1;
  unint64_t v12 = *(void *)(a1 + 8) - *(void *)a1;
  if (v12 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v12 + v11 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v11 = *(void *)a1;
  }
  *(void *)(v11 + v12) = v10;
  if (v5)
  {
    [v5 maxThreadsPerThreadgroup];
    uint64_t v13 = v47;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v48 = 0;
  }
  unint64_t v14 = *(void *)a1;
  unint64_t v15 = *(void *)(a1 + 8) - *(void *)a1;
  if (v15 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v15 + v14 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v14 = *(void *)a1;
  }
  *(void *)(v14 + v15) = v13;
  if (v5)
  {
    [v5 maxThreadsPerThreadgroup];
    uint64_t v16 = v48;
  }
  else
  {
    uint64_t v16 = 0;
  }
  unint64_t v17 = *(void *)a1;
  unint64_t v18 = *(void *)(a1 + 8) - *(void *)a1;
  if (v18 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v18 + v17 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v17 = *(void *)a1;
  }
  *(void *)(v17 + v18) = v16;
  unint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void *)(a1 + 8) - *(void *)a1;
  if (v20 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v20 + v19 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v19 = *(void *)a1;
  }
  *(unsigned char *)(v19 + v20) = 0;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    BOOL v21 = v5;
  }
  else {
    BOOL v21 = 0;
  }
  id v22 = v21;
  if (v22 && (NSSelectorFromString(&cfstr_Sharedmemorysi.isa), (objc_opt_respondsToSelector() & 1) != 0))
  {
    unint64_t v23 = [v22 valueForKey:@"sharedMemorySize"];
    uint64_t v24 = [v23 unsignedLongValue];
    unint64_t v25 = *(void *)a1;
    unint64_t v26 = *(void *)(a1 + 8) - *(void *)a1;
    if (v26 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v26 + v25 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      unint64_t v25 = *(void *)a1;
    }
    *(void *)(v25 + v26) = v24;
  }
  else
  {
    unint64_t v27 = *(void *)a1;
    unint64_t v28 = *(void *)(a1 + 8) - *(void *)a1;
    if (v28 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v28 + v27 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      unint64_t v27 = *(void *)a1;
    }
    *(void *)(v27 + v28) = 0;
    if (!v22) {
      goto LABEL_44;
    }
  }
  NSSelectorFromString(&cfstr_Dedicatedmemor.isa);
  if (objc_opt_respondsToSelector())
  {
    uint64_t v29 = [v22 valueForKey:@"dedicatedMemorySize"];
    uint64_t v30 = [v29 unsignedLongValue];
    unint64_t v31 = *(void *)a1;
    unint64_t v32 = *(void *)(a1 + 8) - *(void *)a1;
    if (v32 > 0xFFFFFFFFFFFFFFF7)
    {
      *(void *)(a1 + 8) = v32 + v31 + 8;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
      unint64_t v31 = *(void *)a1;
    }
    *(void *)(v31 + v32) = v30;

    goto LABEL_50;
  }
LABEL_44:
  unint64_t v33 = *(void *)a1;
  unint64_t v34 = *(void *)(a1 + 8) - *(void *)a1;
  if (v34 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v34 + v33 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v33 = *(void *)a1;
  }
  *(void *)(v33 + v34) = 0;
LABEL_50:
  unint64_t v35 = *(void *)a1;
  unint64_t v36 = *(void *)(a1 + 8) - *(void *)a1;
  if (v36 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v36 + v35 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v35 = *(void *)a1;
  }
  *(unsigned char *)(v35 + v36) = 0;
  unint64_t v37 = *(void *)a1;
  unint64_t v38 = *(void *)(a1 + 8) - *(void *)a1;
  if (v38 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v38 + v37 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v37 = *(void *)a1;
  }
  *(void *)(v37 + v38) = -1;
  unint64_t v39 = *(void *)a1;
  unint64_t v40 = *(void *)(a1 + 8) - *(void *)a1;
  if (v40 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v40 + v39 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v39 = *(void *)a1;
  }
  *(void *)(v39 + v40) = 0;
  char v41 = objc_opt_respondsToSelector();
  unint64_t v42 = *(void *)a1;
  unint64_t v43 = *(void *)(a1 + 8) - *(void *)a1;
  if (v41)
  {
    if (v43 <= 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_63;
    }
LABEL_64:
    *(void *)(a1 + 8) = v43 + v42 + 8;
    goto LABEL_65;
  }
  if (v43 > 0xFFFFFFFFFFFFFFF7) {
    goto LABEL_64;
  }
LABEL_63:
  std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
  unint64_t v42 = *(void *)a1;
LABEL_65:
  *(void *)(v42 + v43) = 0;
  unint64_t v44 = GPUTools::MTL::CaptureHelper::SaveClientMemory(a1, *(void *)a1, *(void *)(a1 + 8) - *(void *)a1, a3, 0);

  dispatch_semaphore_signal(v6);
  return v44;
}

void sub_2557C5EC8(_Unwind_Exception *a1)
{
  dispatch_semaphore_signal(v2);
  _Unwind_Resume(a1);
}

uint64_t GPUTools::MTL::GetClientMemorySize(void *a1, void *a2, uint64_t *a3, unint64_t a4, unint64_t a5, unint64_t *a6, uint64_t *a7)
{
  id v11 = a1;
  id v12 = a2;
  uint64_t v30 = v11;
  uint64_t v13 = [v12 pixelFormat];
  unint64_t v14 = [v12 sampleCount];
  if (v14 <= 1) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v14;
  }
  if ((unint64_t)*a3 <= 1) {
    uint64_t v16 = 1;
  }
  else {
    uint64_t v16 = *a3;
  }
  if ((unint64_t)a3[1] <= 1) {
    unint64_t v17 = 1;
  }
  else {
    unint64_t v17 = a3[1];
  }
  MTLPixelFormatGetInfoForDevice();
  if (v13 == 260) {
    uint64_t v18 = 5;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = v18 * v15;
  uint64_t v20 = v19 * v16;
  if (a4) {
    unint64_t v21 = a4;
  }
  else {
    unint64_t v21 = v19 * v16;
  }
  if (a5) {
    unint64_t v22 = a5;
  }
  else {
    unint64_t v22 = v21 * v17;
  }
  if (a6) {
    *a6 = v21;
  }
  if (a7) {
    *a7 = v22;
  }
  id v23 = v12;
  uint64_t v24 = (__IOSurface *)[v23 iosurface];
  if (v24 && DYGetHostInfo())
  {
    *a6 = IOSurfaceGetBytesPerRowOfPlane(v24, [v23 iosurfacePlane]);
    *a7 = *a6 * IOSurfaceGetHeightOfPlane(v24, [v23 iosurfacePlane]);
    if ([v23 isFramebufferOnly]) {
      uint64_t v25 = *a6 * v17;
    }
    else {
      uint64_t v25 = *a7;
    }
  }
  else
  {
    unint64_t v26 = a3[2];
    if (v26 <= 1) {
      unint64_t v26 = 1;
    }
    unint64_t v27 = v26 - 1;
    if (v17 <= 1) {
      uint64_t v28 = 1;
    }
    else {
      uint64_t v28 = v17;
    }
    uint64_t v25 = v20 + v21 * (v28 - 1) + v27 * v22;
  }
  if ((v13 & 0xFFFFFFFFFFFFFFFELL) == 0x226)
  {
    uint64_t v25 = 5 * v16 * v17;
    if (v21 < 4 * v16)
    {
      if (a6) {
        *a6 = 4 * v16;
      }
      if (a7) {
        *a7 = 4 * v16 * v17;
      }
    }
  }

  return v25;
}

void sub_2557C61AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void GPUTools::MTL::CaptureHelper::EncodeChainedRenderPipelineStateInfo(GPUTools::MTL::CaptureHelper *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  v77[10] = *(id *)MEMORY[0x263EF8340];
  id v9 = a3;
  uint64_t v10 = a4;
  id v46 = a5;
  uint64_t v47 = v9;
  if (!v9 || !v10)
  {
    id v34 = v9;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      [v34 originalObject];
      objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v35 = v34;
    }

    operator new();
  }
  unint64_t v43 = [(MTLRenderPipelineReflection *)v10 performanceStatistics];
  uint64_t v45 = [v43 count];
  id v11 = [(MTLRenderPipelineReflection *)v10 vertexBuiltInArguments];
  uint64_t v42 = [v11 count];

  id v12 = [(MTLRenderPipelineReflection *)v10 vertexBindings];
  uint64_t v44 = [v12 count];

  uint64_t v13 = [(MTLRenderPipelineReflection *)v10 fragmentBindings];
  uint64_t v14 = [v13 count];

  uint64_t v15 = [(MTLRenderPipelineReflection *)v10 tileBindings];
  uint64_t v16 = [v15 count];

  int v17 = GPUTools::MTL::CaptureHelper::_EncodeImageBlockDataReturn(a1, v10);
  v74[0] = 0;
  v74[1] = v74;
  v74[2] = 0x2020000000;
  int v75 = 0;
  uint64_t v18 = [(MTLRenderPipelineReflection *)v10 vertexBuiltInArguments];
  int v19 = (v45 == 0) & ~v17;
  v68[0] = MEMORY[0x263EF8330];
  v68[1] = 3221225472;
  v68[2] = ___ZN8GPUTools3MTL13CaptureHelper36EncodeChainedRenderPipelineStateInfoEPNSt3__16vectorIPNS_2FB4FbufENS2_9allocatorIS6_EEEEPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP18DYTransportMessage_block_invoke;
  v68[3] = &unk_2653C2D50;
  unint64_t v70 = v74;
  uint64_t v71 = v42;
  if ((((v44 | v14 | v16) == 0) & v19) != 0) {
    int v20 = 0x2000;
  }
  else {
    int v20 = 0;
  }
  int v73 = v20;
  uint64_t v72 = a2;
  id v21 = v47;
  id v69 = v21;
  [v18 enumerateObjectsUsingBlock:v68];

  unint64_t v22 = [(MTLRenderPipelineReflection *)v10 vertexBindings];
  v62[0] = MEMORY[0x263EF8330];
  v62[1] = 3221225472;
  v62[2] = ___ZN8GPUTools3MTL13CaptureHelper36EncodeChainedRenderPipelineStateInfoEPNSt3__16vectorIPNS_2FB4FbufENS2_9allocatorIS6_EEEEPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP18DYTransportMessage_block_invoke_2;
  v62[3] = &unk_2653C2D50;
  unint64_t v64 = v74;
  uint64_t v65 = v44;
  uint64_t v66 = a2;
  if ((((v14 | v16) == 0) & v19) != 0) {
    int v23 = 0x2000;
  }
  else {
    int v23 = 0;
  }
  int v67 = v23;
  id v24 = v21;
  id v63 = v24;
  [v22 enumerateObjectsUsingBlock:v62];

  uint64_t v25 = [(MTLRenderPipelineReflection *)v10 fragmentBindings];
  v56[0] = MEMORY[0x263EF8330];
  v56[1] = 3221225472;
  v56[2] = ___ZN8GPUTools3MTL13CaptureHelper36EncodeChainedRenderPipelineStateInfoEPNSt3__16vectorIPNS_2FB4FbufENS2_9allocatorIS6_EEEEPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP18DYTransportMessage_block_invoke_3;
  v56[3] = &unk_2653C2D50;
  uint64_t v58 = v74;
  uint64_t v59 = v14;
  if (((v16 == 0) & v19) != 0) {
    int v26 = 0x2000;
  }
  else {
    int v26 = 0;
  }
  int v61 = v26;
  uint64_t v60 = a2;
  id v27 = v24;
  id v57 = v27;
  [v25 enumerateObjectsUsingBlock:v56];

  uint64_t v28 = [(MTLRenderPipelineReflection *)v10 tileBindings];
  v48[0] = MEMORY[0x263EF8330];
  v48[1] = 3221225472;
  v48[2] = ___ZN8GPUTools3MTL13CaptureHelper36EncodeChainedRenderPipelineStateInfoEPNSt3__16vectorIPNS_2FB4FbufENS2_9allocatorIS6_EEEEPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP18DYTransportMessage_block_invoke_4;
  v48[3] = &unk_2653C2D78;
  Class v51 = v74;
  uint64_t v52 = a1;
  if (v19) {
    int v29 = 0x2000;
  }
  else {
    int v29 = 0;
  }
  uint64_t v53 = v16;
  int v55 = v29;
  uint64_t v30 = v10;
  unint64_t v49 = v30;
  uint64_t v54 = a2;
  id v31 = v27;
  id v50 = v31;
  [v28 enumerateObjectsUsingBlock:v48];

  if (v17)
  {
    uint64_t v32 = (v45 == 0) << 13;
    if (v42 || v44 || v14)
    {
      unint64_t v33 = [(MTLRenderPipelineReflection *)v30 imageBlockDataReturn];
      Encode(a2, v33, 104, v32, v31);
    }
    else
    {
      unint64_t v33 = [(MTLRenderPipelineReflection *)v30 imageBlockDataReturn];
      Encode(a2, v33, 121, v32, v31);
    }
  }
  if (v45)
  {
    id v36 = v43;
    id v37 = v31;
    id v38 = v46;
    v77[0] = 0;
    unint64_t v39 = [MEMORY[0x263F08910] archivedDataWithRootObject:v36 requiringSecureCoding:1 error:v77];
    id v40 = v77[0];
    char v76 = 0;
    char v41 = DYGetMTLGuestAppClient();
    [v39 length];
    [v39 bytes];
    GPUTools::Interpose::DYSavePointer();

    operator new();
  }

  _Block_object_dispose(v74, 8);
}

void sub_2557C6974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  _Block_object_dispose((const void *)(v55 - 232), 8);
  _Unwind_Resume(a1);
}

void GPUTools::FB::Encode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10 = &a9;
  GPUTools::FB::VAListArgumentProvider::VAListArgumentProvider((GPUTools::FB::VAListArgumentProvider *)v9, &a9);
  GPUTools::FB::Encode();
  GPUTools::FB::VAListArgumentProvider::~VAListArgumentProvider((GPUTools::FB::VAListArgumentProvider *)v9);
}

void sub_2557C6B58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  GPUTools::FB::VAListArgumentProvider::~VAListArgumentProvider((GPUTools::FB::VAListArgumentProvider *)va);
  _Unwind_Resume(a1);
}

BOOL GPUTools::MTL::CaptureHelper::_EncodeImageBlockDataReturn(GPUTools::MTL::CaptureHelper *this, MTLRenderPipelineReflection *a2)
{
  uint64_t v3 = a2;
  unint64_t v4 = [(MTLRenderPipelineReflection *)v3 imageBlockDataReturn];
  id v5 = v4;
  if (!v4 || !GPUTools::MTL::CaptureHelper::_IsArgumentExplicitImageBlock(v4, (MTLArgument *)v4))
  {
    BOOL v9 = 0;
    goto LABEL_10;
  }
  id v6 = [(MTLRenderPipelineReflection *)v3 vertexBuiltInArguments];
  if ([v6 count]) {
    goto LABEL_6;
  }
  unint64_t v7 = [(MTLRenderPipelineReflection *)v3 vertexBindings];
  if ([v7 count])
  {

LABEL_6:
    goto LABEL_7;
  }
  id v11 = [(MTLRenderPipelineReflection *)v3 fragmentBindings];
  uint64_t v12 = [v11 count];

  if (!v12)
  {
    uint64_t v15 = 0;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x2020000000;
    char v18 = 0;
    unint64_t v8 = [(MTLRenderPipelineReflection *)v3 tileBindings];
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 3221225472;
    v13[2] = ___ZN8GPUTools3MTL13CaptureHelper27_EncodeImageBlockDataReturnEP27MTLRenderPipelineReflection_block_invoke_2;
    v13[3] = &unk_2653C2DA0;
    v13[4] = &v15;
    v13[5] = this;
    [v8 enumerateObjectsUsingBlock:v13];
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 0;
  unint64_t v8 = [(MTLRenderPipelineReflection *)v3 fragmentBindings];
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  v14[2] = ___ZN8GPUTools3MTL13CaptureHelper27_EncodeImageBlockDataReturnEP27MTLRenderPipelineReflection_block_invoke;
  void v14[3] = &unk_2653C2DA0;
  v14[4] = &v15;
  v14[5] = this;
  [v8 enumerateObjectsUsingBlock:v14];
LABEL_8:

  BOOL v9 = *((unsigned char *)v16 + 24) == 0;
  _Block_object_dispose(&v15, 8);
LABEL_10:

  return v9;
}

void sub_2557C6D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN8GPUTools3MTL13CaptureHelper36EncodeChainedRenderPipelineStateInfoEPNSt3__16vectorIPNS_2FB4FbufENS2_9allocatorIS6_EEEEPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP18DYTransportMessage_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (*(void *)(a1 + 48) - 1 == a3) {
    int v6 = *(_DWORD *)(a1 + 64);
  }
  else {
    int v6 = 0;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
  id v7 = v5;
  Encode(*(void *)(a1 + 56), v5, 102, *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), *(void **)(a1 + 32));
}

void sub_2557C6E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Encode(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8 = a2;
  id v7 = a5;
  uint64_t v6 = [v8 type];
  switch(v6)
  {
    case 0:
      if (objc_opt_respondsToSelector()) {
        [v8 isVertexDescriptorBuffer];
      }
      operator new();
    case 1:
      if (objc_opt_respondsToSelector())
      {
        [v8 dataTypeDescription];
        objc_claimAutoreleasedReturnValue();
      }
      operator new();
    case 2:
      operator new();
    case 3:
      operator new();
    default:
      if (v6 == 16) {
        operator new();
      }
      if (v6 == 17 && [v8 imageBlockKind]) {
        operator new();
      }

      return;
  }
}

void sub_2557C7B34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN8GPUTools3MTL13CaptureHelper36EncodeChainedRenderPipelineStateInfoEPNSt3__16vectorIPNS_2FB4FbufENS2_9allocatorIS6_EEEEPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP18DYTransportMessage_block_invoke_2(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (*(void *)(a1 + 48) - 1 == a3) {
    int v6 = *(_DWORD *)(a1 + 64);
  }
  else {
    int v6 = 0;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
  id v7 = v5;
  Encode(*(void *)(a1 + 56), v5, 103, *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), *(void **)(a1 + 32));
}

void sub_2557C7CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN8GPUTools3MTL13CaptureHelper36EncodeChainedRenderPipelineStateInfoEPNSt3__16vectorIPNS_2FB4FbufENS2_9allocatorIS6_EEEEPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP18DYTransportMessage_block_invoke_3(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (*(void *)(a1 + 48) - 1 == a3) {
    int v6 = *(_DWORD *)(a1 + 64);
  }
  else {
    int v6 = 0;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
  id v7 = v5;
  Encode(*(void *)(a1 + 56), v5, 104, *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), *(void **)(a1 + 32));
}

void sub_2557C7D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN8GPUTools3MTL13CaptureHelper36EncodeChainedRenderPipelineStateInfoEPNSt3__16vectorIPNS_2FB4FbufENS2_9allocatorIS6_EEEEPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP18DYTransportMessage_block_invoke_4(uint64_t a1, void *a2, uint64_t a3)
{
  id v11 = a2;
  if (*(void *)(a1 + 64) - 1 == a3) {
    int v5 = *(_DWORD *)(a1 + 80);
  }
  else {
    int v5 = 0;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v5;
  int v6 = [*(id *)(a1 + 32) imageBlockDataReturn];
  id v7 = v6;
  if (v6
    && (BOOL IsArgumentExplicitImageBlock = GPUTools::MTL::CaptureHelper::_IsArgumentExplicitImageBlock(v6, v11),
        v7,
        IsArgumentExplicitImageBlock))
  {
    uint64_t v9 = *(void *)(a1 + 72);
    uint64_t v10 = [*(id *)(a1 + 32) imageBlockDataReturn];
    Encode(v9, v10, 121, *(unsigned int *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *(void **)(a1 + 40));
  }
  else
  {
    Encode(*(void *)(a1 + 72), v11, 121, *(unsigned int *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *(void **)(a1 + 40));
  }
}

void sub_2557C7E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL GPUTools::MTL::CaptureHelper::_IsArgumentExplicitImageBlock(GPUTools::MTL::CaptureHelper *this, MTLArgument *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = [(MTLArgument *)v2 type];
  if (v3 == 16) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 17 && [(MTLArgument *)v2 imageBlockKind] == 1;
  }

  return v4;
}

void sub_2557C7EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZN8GPUTools3MTL13CaptureHelper27_EncodeImageBlockDataReturnEP27MTLRenderPipelineReflection_block_invoke(GPUTools::MTL::CaptureHelper *a1, MTLArgument *a2)
{
  BOOL result = GPUTools::MTL::CaptureHelper::_IsArgumentExplicitImageBlock(a1, a2);
  if (result) {
    *(unsigned char *)(*(void *)(*((void *)a1 + 4) + 8) + 24) = 1;
  }
  return result;
}

BOOL ___ZN8GPUTools3MTL13CaptureHelper27_EncodeImageBlockDataReturnEP27MTLRenderPipelineReflection_block_invoke_2(GPUTools::MTL::CaptureHelper *a1, MTLArgument *a2)
{
  BOOL result = GPUTools::MTL::CaptureHelper::_IsArgumentExplicitImageBlock(a1, a2);
  if (result) {
    *(unsigned char *)(*(void *)(*((void *)a1 + 4) + 8) + 24) = 1;
  }
  return result;
}

uint64_t GPUTools::MTL::CaptureHelper::SaveObject(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = *(id *)(a1 + 136);
  dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
  if (*(void *)(a1 + 8) != *(void *)a1) {
    *(void *)(a1 + 8) = *(void *)a1;
  }
  GPUTools::DynamicBuffer::Append<unsigned int>((unint64_t *)a1, &GPUTools::MTL::kMTLCaptureVersion);
  unint64_t v9 = *(void *)a1;
  unint64_t v10 = *(void *)(a1 + 8) - *(void *)a1;
  if (v10 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v10 + v9 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v9 = *(void *)a1;
  }
  *(void *)(v9 + v10) = a2;
  uint64_t v11 = [v7 count];
  unint64_t v12 = *(void *)a1;
  unint64_t v13 = *(void *)(a1 + 8) - *(void *)a1;
  if (v13 > 0xFFFFFFFFFFFFFFF7)
  {
    *(void *)(a1 + 8) = v13 + v12 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a1, 8uLL);
    unint64_t v12 = *(void *)a1;
  }
  *(void *)(v12 + v13) = v11;
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 3221225472;
  v16[2] = ___ZN8GPUTools3MTL13CaptureHelper10SaveObjectEmP7NSArrayIP23MTLPostVertexDumpOutputEPv_block_invoke;
  v16[3] = &__block_descriptor_40_e40_v32__0__MTLPostVertexDumpOutput_8Q16_B24l;
  v16[4] = a1;
  [v7 enumerateObjectsUsingBlock:v16];
  memcpy(a4, *(const void **)a1, *(void *)(a1 + 8) - *(void *)a1);
  uint64_t v14 = *(void *)(a1 + 8) - *(void *)a1;
  dispatch_semaphore_signal(v8);

  return v14;
}

void sub_2557C80DC(_Unwind_Exception *a1)
{
  dispatch_semaphore_signal(v2);

  _Unwind_Resume(a1);
}

void ___ZN8GPUTools3MTL13CaptureHelper10SaveObjectEmP7NSArrayIP23MTLPostVertexDumpOutputEPv_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = *(GPUTools::DynamicBuffer **)(a1 + 32);
  id v13 = v3;
  id v5 = [v3 airMDType];
  GPUTools::DynamicBuffer::Append(v4, (const char *)[v5 UTF8String]);

  uint64_t v6 = [v13 dataType];
  uint64_t v7 = *(void *)v4;
  unint64_t v8 = *((void *)v4 + 1) - *(void *)v4;
  if (v8 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)v4 + 1) = v8 + v7 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)v4, 8uLL);
    uint64_t v7 = *(void *)v4;
  }
  *(void *)(v7 + v8) = v6;
  id v9 = [v13 name];
  GPUTools::DynamicBuffer::Append(v4, (const char *)[v9 UTF8String]);

  uint64_t v10 = [v13 offset];
  uint64_t v11 = *(void *)v4;
  unint64_t v12 = *((void *)v4 + 1) - *(void *)v4;
  if (v12 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)v4 + 1) = v12 + v11 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)v4, 8uLL);
    uint64_t v11 = *(void *)v4;
  }
  *(void *)(v11 + v12) = v10;
}

void sub_2557C821C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *GPUTools::MTL::CaptureHelper::SaveFileContents(GPUTools::MTL::CaptureHelper *this, NSString *a2, uint64_t a3)
{
  id v5 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:a2];
  uint64_t v6 = GPUTools::MTL::CaptureHelper::SaveClientMemory((uint64_t)this, [v5 bytes], objc_msgSend(v5, "length"), a3, 0);

  return v6;
}

void sub_2557C82C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      id v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        id v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  id v5 = (char *)a1[1];
  BOOL v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    unint64_t v12 = &v7[v11];
    char v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      long long v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      id v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void GPUTools::DynamicBuffer::Append(GPUTools::DynamicBuffer *this, const void *a2, size_t a3)
{
  uint64_t v6 = *(void *)this;
  unint64_t v7 = *((void *)this + 1) - *(void *)this;
  if (v7 > 0xFFFFFFFFFFFFFFF7)
  {
    *((void *)this + 1) = v7 + v6 + 8;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 8uLL);
    uint64_t v6 = *(void *)this;
  }
  *(void *)(v6 + v7) = a3;
  if (a3)
  {
    uint64_t v8 = *(void *)this;
    size_t v9 = *((void *)this + 1) - *(void *)this;
    size_t v10 = (a3 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v9 >= v9 + v10)
    {
      if (v9 > v9 + v10) {
        *((void *)this + 1) = v8 + v9 + v10;
      }
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, v10);
      uint64_t v8 = *(void *)this;
    }
    memcpy((void *)(v8 + v9), a2, a3);
  }
}

void Encode(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
}

{
  id v5;

  id v5 = a2;
  a4;
  if (objc_opt_respondsToSelector()) {
    [v5 argumentIndexStride];
  }
  operator new();
}

void sub_2557C8E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_2557C9398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    id v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void *std::vector<MTLSamplePosition>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MTLSamplePosition>::__vallocate[abi:ne180100](a1, a2);
    BOOL v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2557C9530(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<MTLSamplePosition>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void DYInterposeArchiveFlushStream(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v12 = a1;
  if (!streams)
  {
    uint64_t v7 = objc_opt_new();
    uint64_t v8 = (void *)streams;
    streams = v7;
  }
  id v9 = *(id *)(a2 + 32);
  size_t v10 = [(id)streams objectForKey:v9];

  if (v10)
  {
    unint64_t v11 = [(id)streams objectForKeyedSubscript:v9];
    [v11 appendBytes:a3 length:a4];
  }
  else
  {
    unint64_t v11 = (void *)[objc_alloc(MEMORY[0x263EFF990]) initWithBytes:a3 length:a4];
    [(id)streams setObject:v11 forKeyedSubscript:v9];
  }
}

void sub_2557C9690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void DYInterposeArchiveStorePointer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = (id)[objc_alloc(MEMORY[0x263EFF8F8]) initWithBytesNoCopy:a4 length:a5 freeWhenDone:0];
  uint64_t v6 = DYGetMTLGuestAppClient();
  uint64_t v7 = [v6 localActiveArchive];
  uint64_t v8 = [NSString stringWithUTF8String:a3];
  [v7 addFileWithName:v8 data:v9 options:0 error:0 waitUntilDone:1];
}

void sub_2557C9784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  char v13 = v12;

  _Unwind_Resume(a1);
}

void DYInterposeArchiveFlush(void)
{
  if (streams)
  {
    [(id)streams removeObjectForKey:*MEMORY[0x263F3FB90]];
    [(id)streams enumerateKeysAndObjectsUsingBlock:&__block_literal_global_1];
    dispatch_semaphore_t v0 = (void *)streams;
    streams = 0;
  }
}

void ___Z23DYInterposeArchiveFlushv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v4 = a3;
  id v5 = DYGetMTLGuestAppClient();
  uint64_t v6 = [v5 localActiveArchive];
  [v6 addFileWithName:v7 data:v4 options:0 error:0 waitUntilDone:1];
}

void sub_2557C98BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  char v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t DYDerivedCounterInfo::DYDerivedCounterInfo(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v43 = a3;
  id v40 = a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 160) = 0u;
  location = (id *)(a1 + 160);
  uint64_t v8 = a1 + 168;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 1065353216;
  id v9 = v7;
  uint64_t v37 = a1;
  *(void *)(a1 + 208) = v9;
  id v38 = v9;
  uint64_t v36 = *MEMORY[0x263F3FB50];
  size_t v10 = objc_msgSend(v9, "objectForKeyedSubscript:");
  unint64_t v11 = (void *)[v10 mutableCopy];

  if (v40 && ([v40 containsString:@"AGX"] & 1) == 0)
  {
    id v12 = [v38 objectForKeyedSubscript:@"Instruments"];
    if (v12)
    {
      id v34 = v12;
      id v35 = [v12 objectForKeyedSubscript:@"Profiles"];
      if (v35)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          char v13 = [v35 allKeys];
          long long v14 = v13;
          if (v13)
          {
            long long v61 = 0u;
            long long v62 = 0u;
            long long v59 = 0u;
            long long v60 = 0u;
            id obj = v13;
            uint64_t v15 = [obj countByEnumeratingWithState:&v59 objects:v66 count:16];
            if (v15)
            {
              uint64_t v32 = *(void *)v60;
              do
              {
                uint64_t v33 = 0;
                do
                {
                  if (*(void *)v60 != v32) {
                    objc_enumerationMutation(obj);
                  }
                  uint64_t v16 = [v35 objectForKeyedSubscript:*(void *)(*((void *)&v59 + 1) + 8 * v33)];
                  if (v16)
                  {
                    id v31 = v16;
                    uint64_t v17 = [v16 objectForKeyedSubscript:v36];
                    long long v57 = 0u;
                    long long v58 = 0u;
                    long long v55 = 0u;
                    long long v56 = 0u;
                    id v41 = v17;
                    uint64_t v18 = [v41 countByEnumeratingWithState:&v55 objects:v65 count:16];
                    if (v18)
                    {
                      uint64_t v42 = *(void *)v56;
                      do
                      {
                        uint64_t v19 = 0;
                        do
                        {
                          if (*(void *)v56 != v42) {
                            objc_enumerationMutation(v41);
                          }
                          int v20 = [*(id *)(*((void *)&v55 + 1) + 8 * v19) allValues];
                          long long v54 = 0u;
                          long long v52 = 0u;
                          long long v53 = 0u;
                          long long v51 = 0u;
                          id v21 = v20;
                          uint64_t v22 = [v21 countByEnumeratingWithState:&v51 objects:v64 count:16];
                          if (v22)
                          {
                            uint64_t v23 = *(void *)v52;
                            do
                            {
                              uint64_t v24 = 0;
                              do
                              {
                                if (*(void *)v52 != v23) {
                                  objc_enumerationMutation(v21);
                                }
                                [v11 removeObjectForKey:*(void *)(*((void *)&v51 + 1) + 8 * v24++)];
                              }
                              while (v22 != v24);
                              uint64_t v22 = [v21 countByEnumeratingWithState:&v51 objects:v64 count:16];
                            }
                            while (v22);
                          }

                          ++v19;
                        }
                        while (v19 != v18);
                        uint64_t v18 = [v41 countByEnumeratingWithState:&v55 objects:v65 count:16];
                      }
                      while (v18);
                    }

                    uint64_t v16 = v31;
                  }

                  ++v33;
                }
                while (v33 != v15);
                uint64_t v15 = [obj countByEnumeratingWithState:&v59 objects:v66 count:16];
              }
              while (v15);
            }
          }
        }
      }

      id v12 = v34;
    }
  }
  objc_storeStrong(location, v11);
  if (v43)
  {
    uint64_t v25 = v43;
  }
  else
  {
    uint64_t v25 = [*location allKeys];
  }
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  id v44 = v25;
  uint64_t v26 = [v44 countByEnumeratingWithState:&v47 objects:v63 count:16];
  if (v26)
  {
    uint64_t v27 = *(void *)v48;
    do
    {
      uint64_t v28 = 0;
      do
      {
        if (*(void *)v48 != v27) {
          objc_enumerationMutation(v44);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)[*(id *)(*((void *)&v47 + 1) + 8 * v28) UTF8String]);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(v8, (unsigned __int8 *)__p, (uint64_t)__p);
        if (v46 < 0) {
          operator delete(__p[0]);
        }
        ++v28;
      }
      while (v26 != v28);
      uint64_t v26 = [v44 countByEnumeratingWithState:&v47 objects:v63 count:16];
    }
    while (v26);
  }

  return v37;
}

void sub_2557C9DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v31);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a19);

  _Unwind_Resume(a1);
}

uint64_t DYDerivedCounterInfo::_dfs(void *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v6 = a1 + 5;
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1 + 5, a2))
  {
    return 1;
  }
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a1, a2, (uint64_t)a2);
    uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::find<std::string>(a3, a2);
    id v9 = (unsigned __int8 *)*((void *)v8 + 5);
    for (uint64_t i = (unsigned __int8 *)*((void *)v8 + 6); v9 != i; v9 += 24)
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::find<std::string>(a3, v9))
      {
        if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v6, v9)&& (DYDerivedCounterInfo::_dfs(a1, v9, a3) & 1) == 0)
        {
          return 0;
        }
      }
      else
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)(a1 + 10), v9, (uint64_t)v9);
      }
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>(a1, a2);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v6, a2, (uint64_t)a2);
    return 1;
  }
  return 0;
}

uint64_t DYDerivedCounterInfo::ProcessInfo(DYDerivedCounterInfo *this)
{
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x5812000000;
  id v21 = __Block_byref_object_copy_;
  memset(v23, 0, sizeof(v23));
  uint64_t v22 = __Block_byref_object_dispose_;
  uint64_t v24 = 0;
  int v25 = 1065353216;
  uint64_t v11 = 0;
  id v12 = &v11;
  uint64_t v13 = 0x4812000000;
  long long v14 = __Block_byref_object_copy__46;
  uint64_t v15 = __Block_byref_object_dispose__47;
  uint64_t v16 = "";
  memset(v17, 0, sizeof(v17));
  uint64_t v2 = (void *)*((void *)this + 20);
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  v10[2] = ___ZN20DYDerivedCounterInfo11ProcessInfoEv_block_invoke;
  v10[3] = &unk_2653C2E08;
  v10[5] = &v11;
  v10[6] = this;
  v10[4] = &v18;
  [v2 enumerateKeysAndObjectsUsingBlock:v10];
  id v3 = (unsigned __int8 *)v19[8];
  if (v3)
  {
    while (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)this + 5, v3 + 16)|| DYDerivedCounterInfo::_dfs(this, v3 + 16, v19 + 6))
    {
      id v3 = *(unsigned __int8 **)v3;
      if (!v3) {
        goto LABEL_5;
      }
    }
    uint64_t v8 = 0;
  }
  else
  {
LABEL_5:
    id v4 = (unsigned __int8 *)v12[6];
    id v5 = (unsigned __int8 *)v12[7];
    if (v4 != v5)
    {
      uint64_t v6 = (void *)((char *)this + 80);
      id v7 = (char *)this + 120;
      do
      {
        if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v6, v4))
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v7, v4, (uint64_t)v4);
        }
        v4 += 24;
      }
      while (v4 != v5);
    }
    uint64_t v8 = 1;
  }
  _Block_object_dispose(&v11, 8);
  uint64_t v26 = (void **)v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v26);
  _Block_object_dispose(&v18, 8);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&v23[8]);
  return v8;
}

void sub_2557CA228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  uint64_t v21 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  *(void *)(v10 - 72) = v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 72));
  _Block_object_dispose(va1, 8);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose_(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(a1 + 48);
}

__n128 __Block_byref_object_copy__46(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__47(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN20DYDerivedCounterInfo11ProcessInfoEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v27 = a3;
  uint64_t v26 = a1;
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = v5;
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v7 UTF8String]);
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)(v6 + 168), (unsigned __int8 *)&__p))
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v8 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)(*(void *)(*(void *)(v26 + 32) + 8) + 48), (unsigned __int8 *)&__p);
      if (!v8)
      {
        uint64_t v9 = *(void *)(*(void *)(v26 + 32) + 8);
        long long v32 = 0uLL;
        uint64_t v33 = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v34, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          long long v11 = v32;
          uint64_t v10 = v33;
        }
        else
        {
          uint64_t v10 = 0;
          std::string v34 = __p;
          long long v11 = 0uLL;
        }
        long long v35 = v11;
        uint64_t v36 = v10;
        uint64_t v33 = 0;
        long long v32 = 0uLL;
        uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::vector<std::string>>>(v9 + 48, (unsigned __int8 *)&v34, (uint64_t)&v34);
        id v38 = (void **)&v35;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v38);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
        id v38 = (void **)&v32;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v38);
      }
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      uint64_t v12 = [v27 objectForKeyedSubscript:@"counters"];
      uint64_t v13 = [v12 countByEnumeratingWithState:&v28 objects:v39 count:16];
      if (v13)
      {
        uint64_t v14 = *(void *)v29;
        do
        {
          for (uint64_t i = 0; i != v13; ++i)
          {
            if (*(void *)v29 != v14) {
              objc_enumerationMutation(v12);
            }
            uint64_t v16 = *(void **)(*((void *)&v28 + 1) + 8 * i);
            if (([v7 isEqualToString:v16] & 1) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(&v34, (char *)[v16 UTF8String]);
              unint64_t v17 = *((void *)v8 + 6);
              if (v17 >= *((void *)v8 + 7))
              {
                uint64_t v19 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v8 + 5, (long long *)&v34);
              }
              else
              {
                if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(*((std::string **)v8 + 6), v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v18 = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
                  *(void *)(v17 + 16) = *((void *)&v34.__r_.__value_.__l + 2);
                  *(_OWORD *)unint64_t v17 = v18;
                }
                uint64_t v19 = v17 + 24;
                *((void *)v8 + 6) = v17 + 24;
              }
              *((void *)v8 + 6) = v19;
              uint64_t v20 = [v27 objectForKeyedSubscript:@"subtype"];
              uint64_t v21 = v20;
              if (v20 && [v20 isEqualToString:@"Normalize"])
              {
                uint64_t v22 = *(void **)(*(void *)(v26 + 40) + 8);
                unint64_t v23 = v22[7];
                if (v23 >= v22[8])
                {
                  uint64_t v25 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v22 + 6, (long long *)&v34);
                }
                else
                {
                  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v22[7], v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    long long v24 = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
                    *(void *)(v23 + 16) = *((void *)&v34.__r_.__value_.__l + 2);
                    *(_OWORD *)unint64_t v23 = v24;
                  }
                  uint64_t v25 = v23 + 24;
                  v22[7] = v23 + 24;
                }
                v22[7] = v25;
              }

              if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v34.__r_.__value_.__l.__data_);
              }
            }
          }
          uint64_t v13 = [v12 countByEnumeratingWithState:&v28 objects:v39 count:16];
        }
        while (v13);
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2557CA63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char *a40)
{
  a40 = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a40);
  if (a39 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::vector<std::string>>::~pair(uint64_t a1)
{
  id v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

id DYDerivedCounterInfo::RawCounterList(DYDerivedCounterInfo *this)
{
  uint64_t v2 = objc_opt_new();
  for (uint64_t i = (uint64_t *)*((void *)this + 12); i; uint64_t i = (uint64_t *)*i)
  {
    id v4 = i + 2;
    if (*((char *)i + 39) < 0) {
      id v4 = (void *)*v4;
    }
    id v5 = [NSString stringWithUTF8String:v4];
    [v2 addObject:v5];
  }
  return v2;
}

void sub_2557CA7D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id DYDerivedCounterInfo::RawCountersToNormalizeSet(DYDerivedCounterInfo *this)
{
  uint64_t v2 = objc_opt_new();
  for (uint64_t i = (uint64_t *)*((void *)this + 17); i; uint64_t i = (uint64_t *)*i)
  {
    id v4 = i + 2;
    if (*((char *)i + 39) < 0) {
      id v4 = (void *)*v4;
    }
    id v5 = [NSString stringWithUTF8String:v4];
    [v2 addObject:v5];
  }
  return v2;
}

void sub_2557CA884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id DYDerivedCounterInfo::DerivedCounterList(DYDerivedCounterInfo *this)
{
  uint64_t v2 = objc_opt_new();
  id v3 = objc_opt_new();
  [v2 addObject:v3];

  id v4 = objc_opt_new();
  [v2 addObject:v4];

  id v5 = objc_opt_new();
  [v2 addObject:v5];

  uint64_t v6 = objc_opt_new();
  [v2 addObject:v6];

  id v7 = (void *)*((void *)this + 20);
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  v10[2] = ___ZNK20DYDerivedCounterInfo18DerivedCounterListEv_block_invoke;
  v10[3] = &unk_2653C2E30;
  id v8 = v2;
  id v11 = v8;
  [v7 enumerateKeysAndObjectsUsingBlock:v10];

  return v8;
}

void sub_2557CA9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZNK20DYDerivedCounterInfo18DerivedCounterListEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v19 = a2;
  id v5 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v6 = [v5 objectForKeyedSubscript:@"name"];
    id v7 = [v5 objectForKeyedSubscript:@"description"];
    id v8 = [v5 objectForKeyedSubscript:@"type"];
    uint64_t v9 = [*(id *)(a1 + 32) objectAtIndexedSubscript:0];
    [v9 addObject:v19];

    uint64_t v10 = [*(id *)(a1 + 32) objectAtIndexedSubscript:1];
    id v11 = v10;
    if (v6) {
      uint64_t v12 = v6;
    }
    else {
      uint64_t v12 = @"Unknown";
    }
    [v10 addObject:v12];

    uint64_t v13 = [*(id *)(a1 + 32) objectAtIndexedSubscript:2];
    uint64_t v14 = v13;
    if (v7) {
      uint64_t v15 = v7;
    }
    else {
      uint64_t v15 = &stru_270455188;
    }
    [v13 addObject:v15];

    uint64_t v16 = [*(id *)(a1 + 32) objectAtIndexedSubscript:3];
    unint64_t v17 = v16;
    if (v8) {
      long long v18 = v8;
    }
    else {
      long long v18 = @"Value";
    }
    [v16 addObject:v18];
  }
}

void sub_2557CAB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id DYDerivedCounterInfo::BottleneckFunctions(id *this)
{
  uint64_t v1 = [this[26] objectForKeyedSubscript:*MEMORY[0x263F3FA48]];
  uint64_t v2 = (void *)[v1 mutableCopy];

  return v2;
}

void sub_2557CAC2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSDictionary *DYDerivedCounterInfo::AppendDerivedCounterInfoToPayload(DYDerivedCounterInfo *this, NSDictionary *a2)
{
  id v3 = a2;
  if (DYDerivedCounterInfo::ProcessInfo(this))
  {
    id v4 = (NSDictionary *)[(NSDictionary *)v3 mutableCopy];
    id v5 = DYDerivedCounterInfo::RawCounterList(this);
    [(NSDictionary *)v4 setObject:v5 forKeyedSubscript:*MEMORY[0x263F3FE88]];

    [(NSDictionary *)v4 setObject:MEMORY[0x263EFFA88] forKeyedSubscript:*MEMORY[0x263F3FD90]];
    [(NSDictionary *)v4 setObject:MEMORY[0x263EFFA88] forKeyedSubscript:*MEMORY[0x263F3FEE0]];
    uint64_t v6 = NSNumber;
    id v7 = [MEMORY[0x263EFFA40] standardUserDefaults];
    id v8 = objc_msgSend(v6, "numberWithBool:", objc_msgSend(v7, "BOOLForKey:", @"GPUDebugger.ShaderProfiler.SplitEncoderData"));
    [(NSDictionary *)v4 setObject:v8 forKeyedSubscript:*MEMORY[0x263F3FEE8]];

    uint64_t v9 = DYDerivedCounterInfo::RawCountersToNormalizeSet(this);
    [(NSDictionary *)v4 setObject:v9 forKeyedSubscript:*MEMORY[0x263F3FD98]];
  }
  else
  {
    id v4 = v3;
  }

  return v4;
}

void sub_2557CAD9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void DYDerivedCounterInfo::MergeDictionaries(DYDerivedCounterInfo *this, NSMutableDictionary *a2, NSMutableDictionary *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v4 = this;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = a2;
  uint64_t v6 = [(NSMutableDictionary *)v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        uint64_t v10 = -[DYDerivedCounterInfo objectForKey:](v4, "objectForKey:", v9, (void)v13);
        id v11 = [(NSMutableDictionary *)v5 objectForKey:v9];
        if (v10)
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_class(), (objc_opt_isKindOfClass()))
          {
            [v10 addObjectsFromArray:v11];
          }
          else
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                DYDerivedCounterInfo::MergeDictionaries((DYDerivedCounterInfo *)v10, v11, v12);
              }
            }
          }
        }
        else
        {
          [(DYDerivedCounterInfo *)v4 setObject:v11 forKeyedSubscript:v9];
        }
      }
      uint64_t v6 = [(NSMutableDictionary *)v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v6);
  }
}

void sub_2557CAFB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSString *DYDerivedCounterInfo::MergeDerivedCounterDataFromHost(DYDerivedCounterInfo *this, NSString *a2, NSString *a3, NSDictionary *a4)
{
  uint64_t v6 = a3;
  uint64_t v7 = [NSString stringWithFormat:@"%@/%@", a2, this];
  id v8 = [v7 stringByStandardizingPath];

  uint64_t v9 = [MEMORY[0x263F08850] defaultManager];
  int v10 = [v9 fileExistsAtPath:v8 isDirectory:0];

  if (v10)
  {
    id v41 = [MEMORY[0x263EFF9A0] dictionaryWithDictionary:v6];
    uint64_t v11 = [NSString stringWithFormat:@"%@/MetalStatistics%@", v8, @"-counters.plist"];
    uint64_t v40 = (void *)v11;
    uint64_t v45 = [NSString stringWithFormat:@"%@/MetalStatistics%@", v8, @"-analysis.js"];
    id v44 = [NSString stringWithFormat:@"%@/MetalStatistics%@", v8, @"-derived.js"];
    uint64_t v12 = *MEMORY[0x263F3FB40];
    long long v13 = [(NSString *)v6 objectForKeyedSubscript:*MEMORY[0x263F3FB40]];
    unint64_t v39 = v13;
    long long v14 = objc_opt_new();
    if (v13)
    {
      CFPropertyListRef DeepCopy = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v13, 2uLL);

      long long v14 = (void *)DeepCopy;
    }
    uint64_t v16 = *MEMORY[0x263F3FB48];
    id v43 = (DYDerivedCounterInfo *)v14;
    uint64_t v42 = [(NSString *)v6 objectForKeyedSubscript:*MEMORY[0x263F3FB48]];
    uint64_t v37 = *MEMORY[0x263F3FB18];
    -[NSString objectForKeyedSubscript:](v6, "objectForKeyedSubscript:");
    id v38 = (__CFString *)objc_claimAutoreleasedReturnValue();
    unint64_t v17 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:v11];
    if (v17)
    {
      id v48 = 0;
      uint64_t v18 = [MEMORY[0x263F08AC0] propertyListWithData:v17 options:1 format:0 error:&v48];
      id v20 = v48;
      if (!v20 && v18)
      {
        DYDerivedCounterInfo::MergeDictionaries(v43, v18, v19);
        uint64_t v21 = objc_opt_new();
        uint64_t v22 = [MEMORY[0x263EFF8C0] arrayWithObject:@"MTLStat_nSec"];
        [v21 setObject:v22 forKeyedSubscript:@"counters"];

        [v21 setObject:@"GPU Time" forKeyedSubscript:@"name"];
        [v21 setObject:@"GPU Time in nSec" forKeyedSubscript:@"description"];
        [v21 setObject:@"Count" forKeyedSubscript:@"type"];
        unint64_t v23 = [(DYDerivedCounterInfo *)v43 objectForKeyedSubscript:*MEMORY[0x263F3FB50]];
        [v23 setObject:v21 forKeyedSubscript:*MEMORY[0x263F3FBD0]];

        [v41 setObject:v43 forKeyedSubscript:v12];
      }
    }
    else
    {
      id v20 = 0;
    }
    id v47 = v20;
    uint64_t v25 = [NSString stringWithContentsOfFile:v44 encoding:4 error:&v47];
    id v26 = v47;

    long long v24 = (NSString *)v41;
    if (!v26 && v25)
    {
      id v27 = NSString;
      uint64_t v28 = [NSString stringWithUTF8String:"\nfunction GPUToolsGPUTime()\n{\n   return MTLStat_nSec\n}\n"];
      long long v29 = (void *)v28;
      long long v30 = &stru_270455188;
      if (v42) {
        long long v30 = v42;
      }
      long long v31 = [v27 stringWithFormat:@"%@\n%@\n%@", v30, v25, v28];
      [v41 setObject:v31 forKeyedSubscript:v16];
    }
    id v46 = v26;
    long long v32 = [NSString stringWithContentsOfFile:v45 encoding:4 error:&v46];
    id v33 = v46;

    if (!v33 && v32)
    {
      std::string v34 = &stru_270455188;
      if (v38) {
        std::string v34 = v38;
      }
      long long v35 = [NSString stringWithFormat:@"%@\n%@", v34, v32];
      [v41 setObject:v35 forKeyedSubscript:v37];
    }
  }
  else
  {
    long long v24 = v6;
  }

  return v24;
}

void sub_2557CB49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_2557CB5C0()
{
  JUMPOUT(0x2557CB5B0);
}

void sub_2557CB5D4()
{
  JUMPOUT(0x2557CB5B4);
}

void sub_2557CB5E0()
{
}

NSString *DYDerivedCounterInfo::AppendDerivedCounterDataFromHost(void *a1, int a2, void *a3)
{
  id v5 = a1;
  uint64_t v6 = a3;
  if (v6)
  {
    if (!v5) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v6 = (NSString *)objc_opt_new();
    if (!v5) {
      goto LABEL_8;
    }
  }
  if (a2 != 1 && [(DYDerivedCounterInfo *)v5 length])
  {
    uint64_t v8 = DYDerivedCounterInfo::MergeDerivedCounterDataFromHost(v5, &cfstr_LibraryDevelop_0.isa, v6, v7);

    uint64_t v6 = (NSString *)v8;
  }
LABEL_8:

  return v6;
}

void sub_2557CB694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void DYDerivedCounterInfo::_ProcessKickCounters(void *a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, unint64_t a6, void *a7, void *a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  id v66 = a1;
  id v62 = a4;
  id v16 = a7;
  id v58 = a8;
  id v52 = a11;
  id v54 = a12;
  unint64_t v64 = v16;
  unint64_t v17 = [v16 objectAtIndexedSubscript:0];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  char v63 = isKindOfClass;
  objc_msgSend(v16, "objectAtIndexedSubscript:", a2, v52);
  if (isKindOfClass) {
    id v19 = {;
  }
    id v20 = [v19 objectAtIndexedSubscript:0];
  }
  else {
    id v20 = {;
  }
    id v19 = v20;
  }
  unint64_t v61 = [v20 unsignedLongLongValue];
  if (isKindOfClass) {

  }
  if (v61 < 4)
  {
    int v55 = [v16 count];
    if (v62 && [v62 count] > a5)
    {
      uint64_t v21 = objc_msgSend(v62, "objectAtIndexedSubscript:");
      unint64_t v22 = [v21 count];
      if (v22 <= 1) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = v22;
      }
      a6 %= v23;
    }
    unint64_t v24 = 0;
    uint64_t v60 = 0;
    while (1)
    {
      if (v24 >= [v64 count]) {
        goto LABEL_46;
      }
      uint64_t v65 = [v64 objectAtIndexedSubscript:v24];
      if (v63)
      {
        id v67 = [v65 objectAtIndexedSubscript:0];
      }
      else
      {
        id v67 = v65;
      }
      if (v62 && v24 == a3 && [v62 count] > a5)
      {
        uint64_t v25 = objc_msgSend(v62, "objectAtIndexedSubscript:");
        uint64_t v26 = [v25 objectAtIndexedSubscript:a6];

        id v67 = (id)v26;
      }
      id v27 = NSNumber;
      uint64_t v28 = [v67 unsignedLongLongValue];
      long long v29 = [v66 objectAtIndexedSubscript:v24 + *(unsigned int *)(a9 + 12)];
      long long v30 = objc_msgSend(v27, "numberWithUnsignedLongLong:", objc_msgSend(v29, "unsignedLongLongValue") + v28);
      [v66 setObject:v30 atIndexedSubscript:v24 + *(unsigned int *)(a9 + 12)];

      [v66 setObject:v67 atIndexedSubscript:v24 + *(unsigned int *)(a9 + 4 * v61)];
      if (v63 & 1) != 0 && ((*(void *)(*a10 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24)) {
        break;
      }
LABEL_45:

      ++v24;
    }
    unint64_t v31 = [v67 unsignedLongLongValue];
    long long v32 = [v65 objectAtIndexedSubscript:1];
    unint64_t v33 = [v32 unsignedLongLongValue];

    if (v33 <= 1) {
      unint64_t v34 = 1;
    }
    else {
      unint64_t v34 = v33;
    }
    double v35 = (double)v31 * 100.0 / (double)v34;
    uint64_t v36 = [NSNumber numberWithDouble:v35];
    [v66 setObject:v36 atIndexedSubscript:v60 + (*(_DWORD *)(a9 + 4 * v61) + v55)];

    unint64_t v37 = [v58 count];
    if (a6 || v37 < 2)
    {
      if ([v58 count] != 1)
      {
LABEL_44:
        ++v60;
        goto LABEL_45;
      }
      long long v51 = [NSNumber numberWithDouble:v35];
      [v66 setObject:v51 atIndexedSubscript:v60 + (*(_DWORD *)(a9 + 12) + v55)];
LABEL_43:

      goto LABEL_44;
    }
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id obj = v58;
    uint64_t v38 = [obj countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v38)
    {
      unint64_t v39 = 0;
      unint64_t v40 = 0;
      uint64_t v41 = *(void *)v70;
      do
      {
        for (uint64_t i = 0; i != v38; ++i)
        {
          if (*(void *)v70 != v41) {
            objc_enumerationMutation(obj);
          }
          id v43 = *(void **)(*((void *)&v69 + 1) + 8 * i);
          id v44 = [v43 objectAtIndexedSubscript:v24];
          uint64_t v45 = [v44 objectAtIndexedSubscript:0];
          uint64_t v46 = [v45 unsignedLongLongValue];

          id v47 = [v43 objectAtIndexedSubscript:v24];
          id v48 = [v47 objectAtIndexedSubscript:1];
          uint64_t v49 = [v48 unsignedLongLongValue];

          v40 += v46;
          v39 += v49;
        }
        uint64_t v38 = [obj countByEnumeratingWithState:&v69 objects:v73 count:16];
      }
      while (v38);

      double v50 = (double)v40 * 100.0;
      if (v39) {
        goto LABEL_42;
      }
    }
    else
    {

      double v50 = 0.0;
    }
    unint64_t v39 = 1;
LABEL_42:
    long long v51 = [NSNumber numberWithDouble:v50 / (double)v39];
    [v66 setObject:v51 atIndexedSubscript:v60 + (*(_DWORD *)(a9 + 12) + v55)];
    goto LABEL_43;
  }
LABEL_46:
}

void sub_2557CBC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

id DYDerivedCounterInfo::_ProcessSplitEncoderDerivedCounterDataFromDevice(void *a1, void *a2, void *a3)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  id v5 = a1;
  id v49 = a2;
  id v48 = v5;
  double v50 = [v5 objectForKeyedSubscript:*MEMORY[0x263F3FEE8]];
  if (!v50)
  {
    id v14 = 0;
    goto LABEL_45;
  }
  id v47 = objc_opt_new();
  uint64_t v6 = *MEMORY[0x263F3FAD8];
  uint64_t v7 = [v50 objectForKeyedSubscript:*MEMORY[0x263F3FAD8]];
  id v8 = v7;
  if (v7)
  {
    [v7 count];
    uint64_t v45 = v6;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    id v8 = v8;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v74 objects:v82 count:16];
    if (v9)
    {
      int v10 = 0;
      uint64_t v11 = *(void *)v75;
LABEL_5:
      uint64_t v12 = 0;
      int v13 = v10 + v9;
      while (1)
      {
        if (*(void *)v75 != v11) {
          objc_enumerationMutation(v8);
        }
        if ([*(id *)(*((void *)&v74 + 1) + 8 * v12) isEqualToString:@"MTLStatDataMaster"]) {
          break;
        }
        if (v9 == ++v12)
        {
          uint64_t v9 = [v8 countByEnumeratingWithState:&v74 objects:v82 count:16];
          int v10 = v13;
          if (v9) {
            goto LABEL_5;
          }
          goto LABEL_11;
        }
      }

      unsigned int v15 = v12 + v10;
      if (v12 + v10 == -1) {
        goto LABEL_43;
      }
      id v16 = [v8 arrayByAddingObjectsFromArray:v49];

      uint64_t v18 = v54 = (_anonymous_namespace_ *)[v16 count];
      v82[0] = 0;
      v82[1] = v54;
      v82[2] = 2 * v54;
      v82[3] = 3 * v54;
      uint64_t v35 = *MEMORY[0x263F3FA38];
      uint64_t v38 = objc_msgSend(v50, "objectForKeyedSubscript:");
      unint64_t v39 = objc_opt_new();
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      id obj = v38;
      uint64_t v36 = [obj countByEnumeratingWithState:&v70 objects:v81 count:16];
      if (v36)
      {
        uint64_t v19 = v15;
        uint64_t v37 = *(void *)v71;
        do
        {
          for (uint64_t i = 0; i != v36; ++i)
          {
            if (*(void *)v71 != v37) {
              objc_enumerationMutation(obj);
            }
            id v20 = *(void **)(*((void *)&v70 + 1) + 8 * i);
            id v44 = objc_opt_new();
            long long v68 = 0u;
            long long v69 = 0u;
            long long v66 = 0u;
            long long v67 = 0u;
            id v42 = v20;
            uint64_t v21 = [v42 countByEnumeratingWithState:&v66 objects:v80 count:16];
            if (v21)
            {
              uint64_t v43 = *(void *)v67;
              do
              {
                uint64_t v46 = 0;
                uint64_t v52 = v21;
                do
                {
                  if (*(void *)v67 != v43) {
                    objc_enumerationMutation(v42);
                  }
                  unint64_t v22 = *(void **)(*((void *)&v66 + 1) + 8 * v46);
                  int v55 = objc_opt_new();
                  long long v64 = 0u;
                  long long v65 = 0u;
                  long long v62 = 0u;
                  long long v63 = 0u;
                  id v51 = v22;
                  uint64_t v23 = [v51 countByEnumeratingWithState:&v62 objects:v79 count:16];
                  if (v23)
                  {
                    uint64_t v53 = *(void *)v63;
                    do
                    {
                      uint64_t v24 = 0;
                      uint64_t v56 = v23;
                      do
                      {
                        if (*(void *)v63 != v53) {
                          objc_enumerationMutation(v51);
                        }
                        uint64_t v57 = v24;
                        v26 = uint64_t v25 = *(void **)(*((void *)&v62 + 1) + 8 * v24);
                        long long v60 = 0u;
                        long long v61 = 0u;
                        long long v58 = 0u;
                        long long v59 = 0u;
                        id v27 = v25;
                        uint64_t v28 = [v27 countByEnumeratingWithState:&v58 objects:v78 count:16];
                        if (v28)
                        {
                          uint64_t v29 = *(void *)v59;
                          do
                          {
                            for (uint64_t j = 0; j != v28; ++j)
                            {
                              if (*(void *)v59 != v29) {
                                objc_enumerationMutation(v27);
                              }
                              DYDerivedCounterInfo::_ProcessKickCounters(v26, v19, 0xFFFFFFFFLL, 0, 0, 0, *(void **)(*((void *)&v58 + 1) + 8 * j), v27, (uint64_t)v82, a3, v16, v18);
                            }
                            uint64_t v28 = [v27 countByEnumeratingWithState:&v58 objects:v78 count:16];
                          }
                          while (v28);
                        }

                        uint64_t v21 = v52;
                        [v55 addObject:v26];

                        uint64_t v24 = v57 + 1;
                      }
                      while (v57 + 1 != v56);
                      uint64_t v23 = [v51 countByEnumeratingWithState:&v62 objects:v79 count:16];
                    }
                    while (v23);
                  }

                  [v44 addObject:v55];
                  ++v46;
                }
                while (v46 != v21);
                uint64_t v21 = [v42 countByEnumeratingWithState:&v66 objects:v80 count:16];
              }
              while (v21);
            }

            [v39 addObject:v44];
          }
          uint64_t v36 = [obj countByEnumeratingWithState:&v70 objects:v81 count:16];
        }
        while (v36);
      }

      [v47 setObject:v18 forKeyedSubscript:v45];
      [v47 setObject:v39 forKeyedSubscript:v35];
      uint64_t v31 = *MEMORY[0x263F3FAD0];
      long long v32 = [v50 objectForKeyedSubscript:*MEMORY[0x263F3FAD0]];
      unint64_t v33 = (void *)[v32 copy];
      [v47 setObject:v33 forKeyedSubscript:v31];

      id v14 = v47;
      id v8 = v16;
      goto LABEL_44;
    }
LABEL_11:
  }
LABEL_43:
  id v14 = 0;
LABEL_44:

LABEL_45:
  return v14;
}

void sub_2557CC3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,void *a28,void *a29)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::AddSuffixToCounters(_anonymous_namespace_ *this, NSArray *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = this;
  id v3 = objc_opt_new();
  uint64_t v4 = 0;
  v16[0] = @"_vtx";
  v16[1] = @"_frg";
  v16[2] = @"_cmp";
  v16[3] = &stru_270455188;
  do
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v5 = v2;
    uint64_t v6 = [(_anonymous_namespace_ *)v5 countByEnumeratingWithState:&v12 objects:v17 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v13;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v13 != v7) {
            objc_enumerationMutation(v5);
          }
          uint64_t v9 = [*(id *)(*((void *)&v12 + 1) + 8 * i) stringByAppendingString:v16[v4]];
          [v3 addObject:v9];
        }
        uint64_t v6 = [(_anonymous_namespace_ *)v5 countByEnumeratingWithState:&v12 objects:v17 count:16];
      }
      while (v6);
    }

    ++v4;
  }
  while (v4 != 4);
  for (uint64_t j = 3; j != -1; --j)

  return v3;
}

void sub_2557CC6B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::CreateCounterSpaceForSuffixes(_anonymous_namespace_ *this)
{
  uint64_t v1 = (4 * this);
  uint64_t v2 = [MEMORY[0x263EFF980] arrayWithCapacity:v1];
  if (v1)
  {
    do
    {
      [v2 addObject:&unk_2704585F8];
      --v1;
    }
    while (v1);
  }
  return v2;
}

void sub_2557CC780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id DYDerivedCounterInfo::ProcessDerivedCounterDataFromDevice(DYDerivedCounterInfo *this, NSDictionary *a2, NSDictionary *a3, NSArray *a4)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  uint64_t v6 = this;
  long long v71 = a2;
  int v85 = a3;
  if (v6)
  {
    long long v68 = objc_opt_new();
    uint64_t v64 = *MEMORY[0x263F3FAD8];
    -[DYDerivedCounterInfo objectForKeyedSubscript:](v6, "objectForKeyedSubscript:");
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v83 = [(NSDictionary *)v71 objectForKeyedSubscript:*MEMORY[0x263F3FD98]];
    if (v7)
    {
      [v7 count];
      int v82 = objc_opt_new();
      if (v83)
      {
        long long v98 = 0u;
        long long v99 = 0u;
        long long v96 = 0u;
        long long v97 = 0u;
        id v8 = v7;
        uint64_t v9 = [v8 countByEnumeratingWithState:&v96 objects:v108 count:16];
        if (v9)
        {
          uint64_t v10 = *(void *)v97;
          do
          {
            for (uint64_t i = 0; i != v9; ++i)
            {
              if (*(void *)v97 != v10) {
                objc_enumerationMutation(v8);
              }
              long long v12 = *(void **)(*((void *)&v96 + 1) + 8 * i);
              if ([v83 containsObject:v12])
              {
                long long v13 = [v12 stringByAppendingString:@"_norm"];
                [v82 addObject:v13];
              }
            }
            uint64_t v9 = [v8 countByEnumeratingWithState:&v96 objects:v108 count:16];
          }
          while (v9);
        }
      }
      memset(__p, 0, sizeof(__p));
      long long v91 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      id v14 = v7;
      uint64_t v15 = [v14 countByEnumeratingWithState:&v91 objects:v107 count:16];
      if (v15)
      {
        uint64_t v16 = *(void *)v92;
        do
        {
          for (uint64_t j = 0; j != v15; ++j)
          {
            if (*(void *)v92 != v16) {
              objc_enumerationMutation(v14);
            }
            LOBYTE(v100) = [v83 containsObject:*(void *)(*((void *)&v91 + 1) + 8 * j)];
            std::vector<BOOL>::push_back((uint64_t)__p, &v100);
          }
          uint64_t v15 = [v14 countByEnumeratingWithState:&v91 objects:v107 count:16];
        }
        while (v15);
      }

      objc_msgSend(MEMORY[0x263EFFA08], "setWithObjects:", @"MTLStatDataMaster", @"MTLStat_nSec", 0);
      id v18 = (id)objc_claimAutoreleasedReturnValue();
      id v19 = v14;
      id v20 = objc_opt_new();
      uint64_t v100 = MEMORY[0x263EF8330];
      uint64_t v101 = 3221225472;
      v102 = ___ZN12_GLOBAL__N_128CounterIndicesFromCounterSetEP5NSSetP7NSArray_block_invoke;
      unint64_t v103 = &unk_2653C2E58;
      id v21 = v18;
      id v104 = v21;
      id v22 = v20;
      id v105 = v22;
      [v19 enumerateObjectsUsingBlock:&v100];
      uint64_t v23 = v105;
      id v70 = v22;

      uint64_t v24 = [v70 objectForKeyedSubscript:@"MTLStatDataMaster"];

      id v27 = [v70 objectForKeyedSubscript:@"MTLStat_nSec"];

      id v7 = 0;
      if (v26 == -1 || v29 == -1)
      {
        long long v30 = v19;
      }
      else
      {
        long long v30 = [v19 arrayByAddingObjectsFromArray:v82];

        v84 = long long v73 = (_anonymous_namespace_ *)[v30 count];
        LODWORD(v100) = 0;
        HIDWORD(v100) = v73;
        LODWORD(v101) = 2 * v73;
        HIDWORD(v101) = 3 * v73;
        uint64_t v63 = *MEMORY[0x263F3FA38];
        int v86 = v30;
        long long v67 = -[DYDerivedCounterInfo objectForKeyedSubscript:](v6, "objectForKeyedSubscript:");
        long long v65 = objc_opt_new();
        long long v69 = [(NSDictionary *)v71 objectForKeyedSubscript:@"perCommandBufferEncoderCount"];
        long long v75 = [(NSDictionary *)v71 objectForKeyedSubscript:@"activePerEncoderDrawCallCount"];
        long long v76 = [(NSDictionary *)v71 objectForKeyedSubscript:@"perEncoderKickCount"];
        unsigned int v66 = 0;
        unsigned int v32 = 0;
        unsigned int v33 = 0;
        uint64_t v34 = v26;
        uint64_t v35 = v29;
        while (1)
        {
          unsigned int v36 = v33;
          if ([v69 count] <= (unint64_t)v33)
          {
            [v68 setObject:v84 forKeyedSubscript:v64];
            [v68 setObject:v65 forKeyedSubscript:v63];
            uint64_t v52 = *MEMORY[0x263F3FAD0];
            uint64_t v53 = [(DYDerivedCounterInfo *)v6 objectForKeyedSubscript:*MEMORY[0x263F3FAD0]];
            id v54 = (void *)[(id)v53 copy];
            [v68 setObject:v54 forKeyedSubscript:v52];

            uint64_t v55 = *MEMORY[0x263F3FA40];
            uint64_t v56 = [(DYDerivedCounterInfo *)v6 objectForKeyedSubscript:*MEMORY[0x263F3FA40]];
            LOBYTE(v53) = v56 == 0;

            if ((v53 & 1) == 0)
            {
              uint64_t v57 = [(DYDerivedCounterInfo *)v6 objectForKeyedSubscript:v55];
              long long v58 = (void *)[(id)v57 copy];
              [v68 setObject:v58 forKeyedSubscript:v55];

              uint64_t v59 = *MEMORY[0x263F3FC28];
              long long v60 = [(DYDerivedCounterInfo *)v6 objectForKeyedSubscript:*MEMORY[0x263F3FC28]];
              LOBYTE(v57) = v60 == 0;

              if ((v57 & 1) == 0)
              {
                long long v61 = [(DYDerivedCounterInfo *)v6 objectForKeyedSubscript:v59];
                long long v62 = (void *)[v61 copy];
                [v68 setObject:v62 forKeyedSubscript:v59];
              }
            }
            double v50 = DYDerivedCounterInfo::_ProcessSplitEncoderDerivedCounterDataFromDevice(v6, v82, __p);
            if (v50) {
              [v68 setObject:v50 forKeyedSubscript:*MEMORY[0x263F3FEE8]];
            }
            id v7 = v68;
LABEL_46:

            goto LABEL_47;
          }
          uint64_t v37 = [v69 objectAtIndexedSubscript:v33];
          int v38 = [v37 unsignedIntValue];

          if (v38) {
            break;
          }
LABEL_42:
          unsigned int v33 = v36 + 1;
        }
        if ([v67 count] > (unint64_t)v66)
        {
          unint64_t v79 = objc_msgSend(v67, "objectAtIndexedSubscript:");
          unint64_t v78 = objc_opt_new();
          unsigned int v80 = 0;
          unsigned int v77 = v32 + v38;
          char v72 = 1;
          unsigned int v74 = v36;
          while (1)
          {
            unint64_t v39 = v32;
            unint64_t v40 = [v76 objectAtIndexedSubscript:v32];
            int v41 = [v40 unsignedIntValue];

            id v42 = [v75 objectAtIndexedSubscript:v39];
            LODWORD(v40) = [v42 unsignedIntValue];

            if (v40 || v41 != 1)
            {
              if ([v79 count] <= (unint64_t)v80)
              {

                id v7 = 0;
                double v50 = v79;
                goto LABEL_46;
              }
              uint64_t v43 = objc_msgSend(v79, "objectAtIndexedSubscript:");
              char v72 = 0;
              ++v80;
            }
            else
            {
              uint64_t v43 = objc_opt_new();
            }
            id v44 = v81 = objc_opt_new();
            long long v89 = 0u;
            long long v90 = 0u;
            long long v87 = 0u;
            long long v88 = 0u;
            id v45 = v43;
            uint64_t v46 = [v45 countByEnumeratingWithState:&v87 objects:v106 count:16];
            if (v46)
            {
              int v47 = 0;
              uint64_t v48 = *(void *)v88;
              do
              {
                for (uint64_t k = 0; k != v46; ++k)
                {
                  if (*(void *)v88 != v48) {
                    objc_enumerationMutation(v45);
                  }
                  DYDerivedCounterInfo::_ProcessKickCounters(v44, v34, v35, v85, v39, (v47 + k), *(void **)(*((void *)&v87 + 1) + 8 * k), v45, (uint64_t)&v100, __p, v86, v84);
                }
                uint64_t v46 = [v45 countByEnumeratingWithState:&v87 objects:v106 count:16];
                v47 += k;
              }
              while (v46);
            }

            long long v30 = v86;
            unsigned int v36 = v74;
            [v81 addObject:v44];
            [v78 addObject:v81];

            unsigned int v32 = v39 + 1;
            if (v39 + 1 == v77)
            {
              [v65 addObject:v78];

              v66 += (v72 & 1) == 0;
              unsigned int v32 = v77;
              goto LABEL_42;
            }
          }
        }
        id v7 = 0;
LABEL_47:
      }
      if (__p[0]) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_2557CD0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35,void *a36,void *a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void std::vector<BOOL>::push_back(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4 + 1;
  id v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

uint64_t anonymous namespace'::CounterIndex(_anonymous_namespace_ *this, NSNumber *a2)
{
  uint64_t v2 = this;
  id v3 = v2;
  if (v2) {
    uint64_t v4 = [(_anonymous_namespace_ *)v2 unsignedIntValue];
  }
  else {
    uint64_t v4 = 0xFFFFFFFFLL;
  }

  return v4;
}

void sub_2557CD428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSDictionary *DYDerivedCounterInfo::WriteToJSONPerDerivedCounterData(DYDerivedCounterInfo *this, NSDictionary *a2, NSString *a3, NSString *a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  unint64_t v6 = this;
  id v42 = a2;
  id v44 = a3;
  uint64_t v43 = v6;
  unint64_t v7 = [(DYDerivedCounterInfo *)v6 objectForKeyedSubscript:*MEMORY[0x263F3FB38]];
  id v8 = v7;
  int v41 = v7;
  if (v7)
  {
    int v38 = [v7 objectForKeyedSubscript:*MEMORY[0x263F3FAD8]];
    unint64_t v39 = [v8 objectForKeyedSubscript:*MEMORY[0x263F3FA38]];
    unint64_t v40 = objc_opt_new();
    unint64_t v9 = objc_opt_new();
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    id v10 = v38;
    uint64_t v11 = [v10 countByEnumeratingWithState:&v62 objects:v68 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v63;
      do
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v63 != v12) {
            objc_enumerationMutation(v10);
          }
          uint64_t v14 = *(void *)(*((void *)&v62 + 1) + 8 * i);
          uint64_t v15 = objc_opt_new();
          [v9 setObject:v15 forKeyedSubscript:v14];
        }
        uint64_t v11 = [v10 countByEnumeratingWithState:&v62 objects:v68 count:16];
      }
      while (v11);
    }

    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    id obj = v39;
    uint64_t v48 = [obj countByEnumeratingWithState:&v58 objects:v67 count:16];
    if (v48)
    {
      uint64_t v46 = *(void *)v59;
      do
      {
        for (uint64_t j = 0; j != v48; ++j)
        {
          if (*(void *)v59 != v46) {
            objc_enumerationMutation(obj);
          }
          uint64_t v16 = *(void **)(*((void *)&v58 + 1) + 8 * j);
          long long v54 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          id v17 = v16;
          uint64_t v18 = [v17 countByEnumeratingWithState:&v54 objects:v66 count:16];
          if (v18)
          {
            int v19 = 0;
            uint64_t v20 = *(void *)v55;
            do
            {
              for (uint64_t k = 0; k != v18; ++k)
              {
                if (*(void *)v55 != v20) {
                  objc_enumerationMutation(v17);
                }
                uint64_t v22 = *(void *)(*((void *)&v54 + 1) + 8 * k);
                uint64_t v23 = [v10 objectAtIndexedSubscript:(v19 + k)];
                uint64_t v24 = [v9 objectForKeyedSubscript:v23];
                [v24 addObject:v22];
              }
              uint64_t v18 = [v17 countByEnumeratingWithState:&v54 objects:v66 count:16];
              v19 += k;
            }
            while (v18);
          }
        }
        uint64_t v48 = [obj countByEnumeratingWithState:&v58 objects:v67 count:16];
      }
      while (v48);
    }

    if (v44) {
      [v40 setObject:v44 forKeyedSubscript:@"MetalPluginName"];
    }
    uint64_t v25 = [(DYDerivedCounterInfo *)v43 objectForKeyedSubscript:@"perEncoderIndexDrawCallCount"];
    id v49 = (void *)v25;
    if (v25) {
      [v40 setObject:v25 forKeyedSubscript:@"perEncoderIndexDrawCallCount"];
    }
    [v40 setObject:v9 forKeyedSubscript:@"PerCounterDrawCallData"];
    id v53 = 0;
    unsigned int v26 = [MEMORY[0x263F08900] dataWithJSONObject:v40 options:1 error:&v53];
    id v51 = v53;
    if (v26)
    {
      uint64_t v37 = v26;
      int v47 = (void *)[[NSString alloc] initWithData:v26 encoding:4];
      id v27 = v42;
      uint64_t v28 = [(NSDictionary *)v27 pathExtension];
      char v29 = [v28 isEqualToString:@"json"];

      if ((v29 & 1) == 0)
      {
        uint64_t v30 = 0;
        for (m = v27; ; m = (NSDictionary *)v34)
        {
          unsigned int v32 = [MEMORY[0x263F08850] defaultManager];
          int v33 = [v32 fileExistsAtPath:m];

          if (!v33) {
            break;
          }
          uint64_t v34 = [NSString stringWithFormat:@"%@_%lu.json", v27, v30];

          ++v30;
        }
        id v27 = m;
      }
      id v52 = v51;
      [v47 writeToFile:v27 atomically:0 encoding:4 error:&v52];
      id v35 = v52;

      id v51 = v35;
      unsigned int v26 = v37;
    }
    else
    {
      id v27 = 0;
    }
  }
  else
  {
    id v27 = 0;
  }

  return v27;
}

void sub_2557CD95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

id DYDerivedCounterInfo::ComputeDerivedCountersFromData(DYDerivedCounterInfo *this, NSDictionary *a2, NSDictionary *a3)
{
  uint64_t v163 = *MEMORY[0x263EF8340];
  uint64_t v5 = a2;
  v102 = a3;
  long long v89 = v5;
  uint64_t v6 = objc_opt_new();
  uint64_t v7 = *MEMORY[0x263F3FA38];
  long long v90 = (void *)v6;
  long long v98 = [(NSDictionary *)v5 objectForKeyedSubscript:*MEMORY[0x263F3FA38]];
  uint64_t v8 = *MEMORY[0x263F3FAD8];
  unint64_t v9 = [(NSDictionary *)v5 objectForKeyedSubscript:*MEMORY[0x263F3FAD8]];
  if (!v9)
  {
    id v70 = 0;
    goto LABEL_102;
  }
  uint64_t v80 = v8;
  uint64_t v81 = v7;
  unint64_t v152 = 0;
  v151 = 0;
  v150 = &v151;
  long long v146 = 0u;
  long long v147 = 0u;
  long long v148 = 0u;
  long long v149 = 0u;
  id v82 = v9;
  id obj = v9;
  uint64_t v10 = [obj countByEnumeratingWithState:&v146 objects:v162 count:16];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)v147;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v147 != v12) {
          objc_enumerationMutation(obj);
        }
        v119 = (char *)[*(id *)(*((void *)&v146 + 1) + 8 * i) UTF8String];
        std::string __p = (void *)(v11 + i);
        std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_impl<char const*,unsigned long>((uint64_t **)&v150, &v119, &__p);
      }
      uint64_t v10 = [obj countByEnumeratingWithState:&v146 objects:v162 count:16];
      v11 += i;
    }
    while (v10);
  }

  v144 = 0;
  std::string __p = 0;
  unint64_t v145 = 0;
  std::vector<unsigned long>::reserve(&__p, v152);
  uint64_t v14 = v102;
  uint64_t v101 = objc_opt_new();
  uint64_t v15 = (uint64_t *)v150;
  if (v150 != &v151)
  {
    do
    {
      uint64_t v16 = v15 + 4;
      if (*((char *)v15 + 55) < 0) {
        uint64_t v16 = (void *)*v16;
      }
      id v17 = [NSString stringWithUTF8String:v16];
      [v101 addObject:v17];
      uint64_t v18 = v144;
      if ((unint64_t)v144 >= v145)
      {
        uint64_t v20 = __p;
        uint64_t v21 = ((char *)v144 - (unsigned char *)__p) >> 3;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v145 - (void)__p;
        if ((uint64_t)(v145 - (void)__p) >> 2 > v22) {
          unint64_t v22 = v23 >> 2;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v145, v24);
          uint64_t v18 = v144;
          uint64_t v20 = __p;
        }
        else
        {
          uint64_t v25 = 0;
        }
        unsigned int v26 = &v25[8 * v21];
        *(void *)unsigned int v26 = v15[7];
        int v19 = v26 + 8;
        while (v18 != v20)
        {
          uint64_t v27 = *--v18;
          *((void *)v26 - 1) = v27;
          v26 -= 8;
        }
        std::string __p = v26;
        v144 = v19;
        unint64_t v145 = (unint64_t)&v25[8 * v24];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        void *v144 = v15[7];
        int v19 = v18 + 1;
      }
      v144 = v19;

      uint64_t v28 = (char *)v15[1];
      if (v28)
      {
        do
        {
          char v29 = (char **)v28;
          uint64_t v28 = *(char **)v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          char v29 = (char **)v15[2];
          BOOL v30 = *v29 == (char *)v15;
          uint64_t v15 = (uint64_t *)v29;
        }
        while (!v30);
      }
      uint64_t v15 = (uint64_t *)v29;
      uint64_t v14 = v102;
    }
    while (v29 != &v151);
  }
  unint64_t v95 = DYDerivedCounterInfo::DerivedCounterList(this);
  long long v93 = [(NSDictionary *)v14 objectForKeyedSubscript:*MEMORY[0x263F3FB48]];
  uint64_t v83 = DYDerivedCounterInfo::BottleneckFunctions((id *)this);
  uint64_t v31 = *MEMORY[0x263F3FB18];
  unint64_t v84 = [(NSDictionary *)v14 objectForKeyedSubscript:*MEMORY[0x263F3FB18]];
  uint64_t v32 = *MEMORY[0x263F3FB28];
  long long v92 = [(NSDictionary *)v14 objectForKeyedSubscript:*MEMORY[0x263F3FB28]];
  long long v91 = objc_opt_new();
  uint64_t v77 = v31;
  uint64_t v79 = v32;
  long long v94 = objc_opt_new();
  long long v141 = 0u;
  long long v142 = 0u;
  long long v139 = 0u;
  long long v140 = 0u;
  id v33 = v98;
  uint64_t v34 = [v33 countByEnumeratingWithState:&v139 objects:v161 count:16];
  if (v34)
  {
    uint64_t v35 = *(void *)v140;
    do
    {
      for (uint64_t j = 0; j != v34; ++j)
      {
        if (*(void *)v140 != v35) {
          objc_enumerationMutation(v33);
        }
        uint64_t v37 = *(void **)(*((void *)&v139 + 1) + 8 * j);
        long long v135 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v138 = 0u;
        id v38 = v37;
        uint64_t v39 = [v38 countByEnumeratingWithState:&v135 objects:v160 count:16];
        if (v39)
        {
          uint64_t v40 = *(void *)v136;
          do
          {
            for (uint64_t k = 0; k != v39; ++k)
            {
              if (*(void *)v136 != v40) {
                objc_enumerationMutation(v38);
              }
              objc_msgSend(*(id *)(*((void *)&v135 + 1) + 8 * k), "count", v77);
            }
            uint64_t v39 = [v38 countByEnumeratingWithState:&v135 objects:v160 count:16];
          }
          while (v39);
        }
      }
      uint64_t v34 = [v33 countByEnumeratingWithState:&v139 objects:v161 count:16];
    }
    while (v34);
  }

  id v42 = objc_opt_new();
  long long v133 = 0u;
  long long v134 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  id v87 = v33;
  uint64_t v43 = [v87 countByEnumeratingWithState:&v131 objects:v159 count:16];
  if (v43)
  {
    uint64_t v96 = *(void *)v132;
    do
    {
      for (uint64_t m = 0; m != v43; ++m)
      {
        if (*(void *)v132 != v96) {
          objc_enumerationMutation(v87);
        }
        id v44 = *(void **)(*((void *)&v131 + 1) + 8 * m);
        long long v127 = 0u;
        long long v128 = 0u;
        long long v129 = 0u;
        long long v130 = 0u;
        id v103 = v44;
        uint64_t v45 = [v103 countByEnumeratingWithState:&v127 objects:v158 count:16];
        if (v45)
        {
          uint64_t v46 = *(void *)v128;
          do
          {
            for (uint64_t n = 0; n != v45; ++n)
            {
              if (*(void *)v128 != v46) {
                objc_enumerationMutation(v103);
              }
              uint64_t v48 = *(void **)(*((void *)&v127 + 1) + 8 * n);
              long long v123 = 0u;
              long long v124 = 0u;
              long long v125 = 0u;
              long long v126 = 0u;
              id v49 = v48;
              uint64_t v50 = [v49 countByEnumeratingWithState:&v123 objects:v157 count:16];
              if (v50)
              {
                uint64_t v51 = *(void *)v124;
                do
                {
                  for (iuint64_t i = 0; ii != v50; ++ii)
                  {
                    if (*(void *)v124 != v51) {
                      objc_enumerationMutation(v49);
                    }
                    objc_msgSend(v42, "addObject:", *(void *)(*((void *)&v123 + 1) + 8 * ii), v77);
                  }
                  uint64_t v50 = [v49 countByEnumeratingWithState:&v123 objects:v157 count:16];
                }
                while (v50);
              }
            }
            uint64_t v45 = [v103 countByEnumeratingWithState:&v127 objects:v158 count:16];
          }
          while (v45);
        }
      }
      uint64_t v43 = [v87 countByEnumeratingWithState:&v131 objects:v159 count:16];
    }
    while (v43);
  }

  id v104 = (id)objc_opt_new();
  uint64_t v100 = objc_opt_new();
  unsigned int v53 = std::thread::hardware_concurrency();
  if (v53 <= 1) {
    uint64_t v54 = 1;
  }
  else {
    uint64_t v54 = v53 >> 1;
  }
  int v86 = dispatch_get_global_queue(0, 0);
  long long v88 = dispatch_group_create();
  unsigned int v55 = [v42 count];
  if (v54)
  {
    int v56 = v54;
    do
    {
      long long v57 = objc_opt_new();
      [v104 addObject:v57];

      long long v58 = objc_opt_new();
      [v100 addObject:v58];

      --v56;
    }
    while (v56);
  }
  v119 = 0;
  v120 = &v119;
  uint64_t v121 = 0x2020000000;
  char v122 = 0;
  long long v97 = objc_opt_new();
  if (!*((unsigned char *)v120 + 24) && v54)
  {
    int v59 = 0;
    unsigned int v60 = 1;
    unsigned int v61 = v55 / v54;
    uint64_t v85 = v54;
    while (1)
    {
      id v62 = objc_alloc_init(MEMORY[0x263F3F968]);
      [v97 addObject:v62];
      if (([v62 evaluateScriptCode:v93] & 1) == 0)
      {
        id v70 = 0;
        goto LABEL_98;
      }
      long long v63 = [v95 objectAtIndexedSubscript:0];
      long long v64 = objc_opt_new();
      char v65 = [v62 prepareCounterNames:obj softwareCounterNames:v64 derivedCounterNames:v63];

      if ((v65 & 1) == 0) {
        break;
      }
      [v62 exportCounterValues:v92];
      if (v54 == v60) {
        int v66 = [v42 count];
      }
      else {
        int v66 = (v59 + 1) * v61;
      }
      block[0] = MEMORY[0x263EF8330];
      block[1] = 3321888768;
      block[2] = ___ZN20DYDerivedCounterInfo30ComputeDerivedCountersFromDataEP12NSDictionaryS1__block_invoke;
      block[3] = &unk_270454D78;
      id v67 = v97;
      unsigned int v116 = v60 - 1;
      int v117 = v59 * v61;
      id v107 = v67;
      v112 = &v119;
      int v118 = v66;
      id v108 = v42;
      id v68 = v63;
      id v109 = v68;
      id v110 = v104;
      v114 = 0;
      uint64_t v115 = 0;
      v113 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v113, __p, (uint64_t)v144, ((char *)v144 - (unsigned char *)__p) >> 3);
      id v111 = v100;
      dispatch_group_async(v88, v86, block);

      uint64_t v54 = v85;
      if (v113)
      {
        v114 = v113;
        operator delete(v113);
      }

      if (!*((unsigned char *)v120 + 24))
      {
        ++v59;
        if (v60++ < v85) {
          continue;
        }
      }
      goto LABEL_88;
    }
    id v70 = 0;
    goto LABEL_97;
  }
LABEL_88:
  dispatch_group_wait(v88, 0xFFFFFFFFFFFFFFFFLL);
  if (!*((unsigned char *)v120 + 24))
  {
    if (v54)
    {
      for (juint64_t j = 0; jj != v54; ++jj)
      {
        char v72 = objc_msgSend(v104, "objectAtIndexedSubscript:", jj, v77);
        [v91 addObjectsFromArray:v72];

        long long v73 = [v100 objectAtIndexedSubscript:jj];
        [v94 addObjectsFromArray:v73];
      }
    }
    unsigned int v74 = objc_msgSend(v95, "objectAtIndexedSubscript:", 0, v77);
    id v62 = [v74 arrayByAddingObjectsFromArray:v101];

    v155[0] = v81;
    v155[1] = v80;
    v156[0] = v94;
    v156[1] = v62;
    long long v63 = [NSDictionary dictionaryWithObjects:v156 forKeys:v155 count:2];
    [v90 setObject:v63 forKeyedSubscript:*MEMORY[0x263F3FB38]];
    [v90 setObject:v92 forKeyedSubscript:v79];
    v153[0] = v81;
    v153[1] = v80;
    v154[0] = v91;
    v154[1] = v95;
    long long v75 = [NSDictionary dictionaryWithObjects:v154 forKeys:v153 count:2];
    [v90 setObject:v75 forKeyedSubscript:*MEMORY[0x263F3FB30]];

    [v90 setObject:v84 forKeyedSubscript:v78];
    [v90 setObject:v83 forKeyedSubscript:*MEMORY[0x263F3FB20]];
    id v70 = v90;
LABEL_97:

LABEL_98:
    goto LABEL_99;
  }
  id v70 = 0;
LABEL_99:

  _Block_object_dispose(&v119, 8);
  if (__p)
  {
    v144 = __p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy((uint64_t)&v150, v151);
  unint64_t v9 = v82;
LABEL_102:

  return v70;
}

void sub_2557CE684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,uint64_t a27,void *a28,uint64_t a29,void *a30,void *a31,uint64_t a32,void *a33)
{
  uint64_t v35 = (void *)STACK[0x2A8];
  if (STACK[0x2A8])
  {
    STACK[0x2B0] = (unint64_t)v35;
    operator delete(v35);
  }
  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy((uint64_t)&STACK[0x300], (char *)STACK[0x308]);

  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void ___ZN20DYDerivedCounterInfo30ComputeDerivedCountersFromDataEP12NSDictionaryS1__block_invoke(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectAtIndexedSubscript:*(unsigned int *)(a1 + 104)];
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
  {
    unsigned int v3 = *(_DWORD *)(a1 + 108);
    while (v3 < *(_DWORD *)(a1 + 112))
    {
      uint64_t v4 = [*(id *)(a1 + 40) objectAtIndexedSubscript:v3];
      int64_t v5 = objc_opt_new();
      [v2 prepareCounterValues:v4 softwareCounterValues:v5];

      uint64_t v6 = [v2 evaluateDerivedCounters];
      uint64_t v7 = (void *)[v6 mutableCopy];

      if (!v7 || (uint64_t v8 = [v7 count], v8 != objc_msgSend(*(id *)(a1 + 48), "count")))
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;

        break;
      }
      unint64_t v9 = [*(id *)(a1 + 56) objectAtIndexedSubscript:*(unsigned int *)(a1 + 104)];
      [v9 addObject:v7];

      std::vector<NSNumber * {__strong}>::vector(v20, [v4 count]);
      uint64_t v10 = *(void *)(a1 + 80);
      if (*(void *)(a1 + 88) != v10)
      {
        unint64_t v11 = 0;
        do
        {
          uint64_t v12 = [v4 objectAtIndexedSubscript:*(void *)(v10 + 8 * v11)];
          uint64_t v13 = *(void **)(v20[0] + 8 * v11);
          *(void *)(v20[0] + 8 * v11) = v12;

          ++v11;
          uint64_t v10 = *(void *)(a1 + 80);
        }
        while (v11 < (*(void *)(a1 + 88) - v10) >> 3);
      }
      uint64_t v14 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v4, "count"));
      uint64_t v15 = (id *)v20[0];
      uint64_t v16 = (id *)v20[1];
      while (v15 != v16)
      {
        id v17 = *v15;
        [v14 addObject:v17];

        ++v15;
      }
      uint64_t v18 = [v7 arrayByAddingObjectsFromArray:v14];
      int v19 = [*(id *)(a1 + 64) objectAtIndexedSubscript:*(unsigned int *)(a1 + 104)];
      [v19 addObject:v18];

      uint64_t v21 = (void **)v20;
      std::vector<NSNumber * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v21);

      ++v3;
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24)) {
        break;
      }
    }
  }
}

void sub_2557CEC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<NSNumber * {__strong}>::__destroy_vector::operator()[abi:ne180100](&a12);

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_80c39_ZTSNSt3__16vectorImNS_9allocatorImEEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (void *)(a1 + 80);
  v2[2] = 0;
  return std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v2, *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
}

void __destroy_helper_block_ea8_80c39_ZTSNSt3__16vectorImNS_9allocatorImEEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
}

void ___ZN12_GLOBAL__N_128CounterIndicesFromCounterSetEP5NSSetP7NSArray_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "containsObject:"))
  {
    int64_t v5 = [NSNumber numberWithUnsignedInteger:a3];
    [*(id *)(a1 + 40) setObject:v5 forKeyedSubscript:v6];
  }
}

void sub_2557CED6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      unsigned int v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(void **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = (void *)(a1 + 16);
  uint64_t i = operator new(0x28uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v9;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((void *)i + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_38:
    *unint64_t v24 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v16;
  void *v16 = i;
  *(void *)(v23 + 8 * v3) = v16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_2557CF07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    unint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      size_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint8x8_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_2557CF9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x28uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_2557CFA58(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint8x8_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint8x8_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t result = (uint64_t *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = (void **)__p;
  std::string __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint8x8_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  void *v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int8x8_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::vector<std::string>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint8x8_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  float v16 = (char *)operator new(0x40uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(void *)float v16 = 0;
  *((void *)v16 + 1) = v9;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *((void *)v16 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *((void *)v16 + 7) = *(void *)(a3 + 40);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_2557D0090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    unint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_2557D0210(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0;
    long long v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    unint64_t v8 = *a1;
    int v9 = 0;
    uint64_t v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    unint64_t v4 = *a1;
    *a1 = v10;
    unint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_2557D02CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (int i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    *int v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

void std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_impl<char const*,unsigned long>(uint64_t **a1, char **a2, void *a3)
{
  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__construct_node<char const*,unsigned long>((uint64_t)a1, a2, a3, (uint64_t)&__p);
  unint64_t v4 = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__find_equal<std::__value_type<std::string,unsigned long>>((uint64_t)a1, &v8, (const void **)__p + 4);
  int v5 = *v4;
  if (*v4)
  {
    uint64_t v6 = (void **)__p;
    std::string __p = 0;
    if (v6) {
      std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100]((uint64_t)&v10, v6);
    }
  }
  else
  {
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__insert_node_at(a1, v8, v4, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v5;
}

void sub_2557D061C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__construct_node<char const*,unsigned long>@<X0>(uint64_t a1@<X0>, char **a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  unint64_t result = std::string::basic_string[abi:ne180100]<0>(v8 + 4, *a2);
  v8[7] = *a3;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2557D06B4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__find_equal<std::__value_type<std::string,unsigned long>>(uint64_t a1, void *a2, const void **a3)
{
  int v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = (void *)v4;
        uint64_t v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        int v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      int v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  int v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  unint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      int v3 = (uint64_t *)v2[2];
      int v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            size_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            size_t v9 = (uint64_t **)v2[1];
            int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              int v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *size_t v9 = v2;
            v2[2] = (uint64_t)v9;
            int v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), size_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            int v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          int v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *std::vector<NSNumber * {__strong}>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MTLSamplePosition>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2557D0A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<NSNumber * {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    unint64_t result = std::vector<MTLSamplePosition>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      unint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2557D0B8C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2557D0E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2557D0EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2557D0FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2557D113C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v4 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_2557D1538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2557D18C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_2557D1AF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2557D1BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2557D1DAC(_Unwind_Exception *a1)
{
  size_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_2557D201C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2557D2124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2557D21CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2557D23BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *GPUTools::MTL::GetMTLAccelerationStructureCommandSubstreamSelectMethodAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLAccelerationStructureCommandSubstreamSelectMethodEmpirical";
      int v3 = "Empirical";
      goto LABEL_7;
    case 1uLL:
      uint64_t v2 = "MTLAccelerationStructureCommandSubstreamSelectMethodRoundRobin";
      int v3 = "RoundRobin";
      goto LABEL_7;
    case 2uLL:
      uint64_t v2 = "MTLAccelerationStructureCommandSubstreamSelectMethodRandom";
      int v3 = "Random";
      goto LABEL_7;
    case 3uLL:
      uint64_t v2 = "MTLAccelerationStructureCommandSubstreamSelectMethodGreedy";
      int v3 = "Greedy";
LABEL_7:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLAccelerationStructureInstanceDescriptorTypeAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLAccelerationStructureInstanceDescriptorTypeDefault";
      int v3 = "Default";
      goto LABEL_8;
    case 1uLL:
      uint64_t v2 = "MTLAccelerationStructureInstanceDescriptorTypeUserID";
      int v3 = "UserID";
      goto LABEL_8;
    case 2uLL:
      uint64_t v2 = "MTLAccelerationStructureInstanceDescriptorTypeMotion";
      int v3 = "Motion";
      goto LABEL_8;
    case 3uLL:
      uint64_t v2 = "MTLAccelerationStructureInstanceDescriptorTypeIndirect";
      int v3 = "Indirect";
      goto LABEL_8;
    case 4uLL:
      uint64_t v2 = "MTLAccelerationStructureInstanceDescriptorTypeIndirectMotion";
      int v3 = "IndirectMotion";
LABEL_8:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLAccelerationStructureInstanceOptionsAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v4 = "MTLAccelerationStructureInstanceOptionNone";
      size_t v5 = "None";
      goto LABEL_7;
    case 1uLL:
      uint64_t v4 = "MTLAccelerationStructureInstanceOptionDisableTriangleCulling";
      size_t v5 = "DisableTriangleCulling";
      goto LABEL_7;
    case 2uLL:
      uint64_t v4 = "MTLAccelerationStructureInstanceOptionTriangleFrontFacingWindingCounterClockwise";
      size_t v5 = "TriangleFrontFacingWindingCounterClockwise";
      goto LABEL_7;
    case 4uLL:
      uint64_t v4 = "MTLAccelerationStructureInstanceOptionOpaque";
      size_t v5 = "Opaque";
      goto LABEL_7;
    case 8uLL:
      uint64_t v4 = "MTLAccelerationStructureInstanceOptionNonOpaque";
      size_t v5 = "NonOpaque";
LABEL_7:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLAccelerationStructureRefitOptionsAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLAccelerationStructureRefitOptionVertexData";
  if (a2) {
    int v3 = "VertexData";
  }
  uint64_t v4 = "MTLAccelerationStructureRefitOptionPerPrimitiveData";
  if (a2) {
    uint64_t v4 = "PerPrimitiveData";
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLAccelerationStructureUsageAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v4 = "MTLAccelerationStructureUsageNone";
      size_t v5 = "None";
      goto LABEL_7;
    case 1uLL:
      uint64_t v4 = "MTLAccelerationStructureUsageRefit";
      size_t v5 = "Refit";
      goto LABEL_7;
    case 2uLL:
      uint64_t v4 = "MTLAccelerationStructureUsagePreferFastBuild";
      size_t v5 = "PreferFastBuild";
      goto LABEL_7;
    case 4uLL:
      uint64_t v4 = "MTLAccelerationStructureUsageExtendedLimits";
      size_t v5 = "ExtendedLimits";
      goto LABEL_7;
    case 8uLL:
      uint64_t v4 = "MTLAccelerationStructureUsagePrivateDeterministicBuild";
      size_t v5 = "PrivateDeterministicBuild";
LABEL_7:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLAllocationTypeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLAllocationTypeUnknown";
  if (a2) {
    int v3 = "Unknown";
  }
  uint64_t v4 = "MTLAllocationTypeResource";
  if (a2) {
    uint64_t v4 = "Resource";
  }
  size_t v5 = "Heap";
  if (!a2) {
    size_t v5 = "MTLAllocationTypeHeap";
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLArgumentBuffersTierAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLArgumentBuffersTier2";
  if (a2) {
    int v3 = "2";
  }
  uint64_t v4 = "MTLArgumentBuffersTier1";
  if (a2) {
    uint64_t v4 = "1";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLArgumentImageBlockKindAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLArgumentImageBlockKindPrivateImplicit";
  if (a2) {
    int v3 = "PrivateImplicit";
  }
  uint64_t v4 = "MTLArgumentImageBlockKindPrivateExplicit";
  if (a2) {
    uint64_t v4 = "PrivateExplicit";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLArgumentTypeAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v4 = "MTLArgumentTypeBuffer";
      size_t v5 = "Buffer";
      goto LABEL_25;
    case 1uLL:
      uint64_t v4 = "MTLArgumentTypeThreadgroupMemory";
      size_t v5 = "ThreadgroupMemory";
      goto LABEL_25;
    case 2uLL:
      uint64_t v4 = "MTLArgumentTypeTexture";
      size_t v5 = "Texture";
      goto LABEL_25;
    case 3uLL:
      uint64_t v4 = "MTLArgumentTypeSampler";
      size_t v5 = "Sampler";
      goto LABEL_25;
    case 4uLL:
      uint64_t v4 = "MTLArgumentTypePrivateIndirectConstant";
      size_t v5 = "PrivateIndirectConstant";
      goto LABEL_25;
    case 0xFuLL:
      uint64_t v4 = "MTLArgumentTypePrivateBuiltIn";
      size_t v5 = "PrivateBuiltIn";
      goto LABEL_25;
    case 0x10uLL:
      uint64_t v4 = "MTLArgumentTypeImageblockData";
      size_t v5 = "ImageblockData";
      goto LABEL_25;
    case 0x11uLL:
      uint64_t v4 = "MTLArgumentTypeImageblock";
      size_t v5 = "Imageblock";
      goto LABEL_25;
    case 0x12uLL:
      uint64_t v4 = "MTLArgumentTypePrivateValue";
      size_t v5 = "PrivateValue";
      goto LABEL_25;
    case 0x13uLL:
      uint64_t v4 = "MTLArgumentTypePrivateRenderPipeline";
      size_t v5 = "PrivateRenderPipeline";
      goto LABEL_25;
    case 0x14uLL:
      uint64_t v4 = "MTLArgumentTypePrivateComputePipeline";
      size_t v5 = "PrivateComputePipeline";
      goto LABEL_25;
    case 0x15uLL:
      uint64_t v4 = "MTLArgumentTypePrivateIndirectCommandBuffer";
      size_t v5 = "PrivateIndirectCommandBuffer";
      goto LABEL_25;
    case 0x16uLL:
      uint64_t v4 = "MTLArgumentTypePrivateByVal";
      size_t v5 = "PrivateByVal";
      goto LABEL_25;
    case 0x17uLL:
      uint64_t v4 = "MTLArgumentTypePrivateFunctionPointer";
      size_t v5 = "PrivateFunctionPointer";
      goto LABEL_25;
    case 0x18uLL:
      uint64_t v4 = "MTLArgumentTypeVisibleFunctionTable";
      size_t v5 = "VisibleFunctionTable";
      goto LABEL_25;
    case 0x19uLL:
      uint64_t v4 = "MTLArgumentTypePrimitiveAccelerationStructure";
      size_t v5 = "PrimitiveAccelerationStructure";
      goto LABEL_25;
    case 0x1AuLL:
      uint64_t v4 = "MTLArgumentTypeInstanceAccelerationStructure";
      size_t v5 = "InstanceAccelerationStructure";
      goto LABEL_25;
    case 0x1BuLL:
      uint64_t v4 = "MTLArgumentTypeIntersectionFunctionTable";
      size_t v5 = "IntersectionFunctionTable";
      goto LABEL_25;
    case 0x1CuLL:
      uint64_t v4 = "MTLArgumentTypePrivatePointer";
      size_t v5 = "PrivatePointer";
      goto LABEL_25;
    case 0x1DuLL:
      uint64_t v4 = "MTLArgumentTypePrivateStruct";
      size_t v5 = "PrivateStruct";
      goto LABEL_25;
    case 0x22uLL:
      uint64_t v4 = "MTLArgumentTypePrivateObjectPayload";
      size_t v5 = "PrivateObjectPayload";
      goto LABEL_25;
    case 0x23uLL:
      uint64_t v4 = "MTLArgumentTypePrivateMesh";
      size_t v5 = "PrivateMesh";
      goto LABEL_25;
    case 0x24uLL:
      uint64_t v4 = "MTLArgumentTypePrivateDepthStencilState";
      size_t v5 = "PrivateDepthStencilState";
LABEL_25:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLAttributeFormatAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLAttributeFormatInvalid";
      int v3 = "Invalid";
      goto LABEL_59;
    case 1uLL:
      uint64_t v2 = "MTLAttributeFormatUChar2";
      int v3 = "UChar2";
      goto LABEL_59;
    case 2uLL:
      uint64_t v2 = "MTLAttributeFormatUChar3";
      int v3 = "UChar3";
      goto LABEL_59;
    case 3uLL:
      uint64_t v2 = "MTLAttributeFormatUChar4";
      int v3 = "UChar4";
      goto LABEL_59;
    case 4uLL:
      uint64_t v2 = "MTLAttributeFormatChar2";
      int v3 = "Char2";
      goto LABEL_59;
    case 5uLL:
      uint64_t v2 = "MTLAttributeFormatChar3";
      int v3 = "Char3";
      goto LABEL_59;
    case 6uLL:
      uint64_t v2 = "MTLAttributeFormatChar4";
      int v3 = "Char4";
      goto LABEL_59;
    case 7uLL:
      uint64_t v2 = "MTLAttributeFormatUChar2Normalized";
      int v3 = "UChar2Normalized";
      goto LABEL_59;
    case 8uLL:
      uint64_t v2 = "MTLAttributeFormatUChar3Normalized";
      int v3 = "UChar3Normalized";
      goto LABEL_59;
    case 9uLL:
      uint64_t v2 = "MTLAttributeFormatUChar4Normalized";
      int v3 = "UChar4Normalized";
      goto LABEL_59;
    case 0xAuLL:
      uint64_t v2 = "MTLAttributeFormatChar2Normalized";
      int v3 = "Char2Normalized";
      goto LABEL_59;
    case 0xBuLL:
      uint64_t v2 = "MTLAttributeFormatChar3Normalized";
      int v3 = "Char3Normalized";
      goto LABEL_59;
    case 0xCuLL:
      uint64_t v2 = "MTLAttributeFormatChar4Normalized";
      int v3 = "Char4Normalized";
      goto LABEL_59;
    case 0xDuLL:
      uint64_t v2 = "MTLAttributeFormatUShort2";
      int v3 = "UShort2";
      goto LABEL_59;
    case 0xEuLL:
      uint64_t v2 = "MTLAttributeFormatUShort3";
      int v3 = "UShort3";
      goto LABEL_59;
    case 0xFuLL:
      uint64_t v2 = "MTLAttributeFormatUShort4";
      int v3 = "UShort4";
      goto LABEL_59;
    case 0x10uLL:
      uint64_t v2 = "MTLAttributeFormatShort2";
      int v3 = "Short2";
      goto LABEL_59;
    case 0x11uLL:
      uint64_t v2 = "MTLAttributeFormatShort3";
      int v3 = "Short3";
      goto LABEL_59;
    case 0x12uLL:
      uint64_t v2 = "MTLAttributeFormatShort4";
      int v3 = "Short4";
      goto LABEL_59;
    case 0x13uLL:
      uint64_t v2 = "MTLAttributeFormatUShort2Normalized";
      int v3 = "UShort2Normalized";
      goto LABEL_59;
    case 0x14uLL:
      uint64_t v2 = "MTLAttributeFormatUShort3Normalized";
      int v3 = "UShort3Normalized";
      goto LABEL_59;
    case 0x15uLL:
      uint64_t v2 = "MTLAttributeFormatUShort4Normalized";
      int v3 = "UShort4Normalized";
      goto LABEL_59;
    case 0x16uLL:
      uint64_t v2 = "MTLAttributeFormatShort2Normalized";
      int v3 = "Short2Normalized";
      goto LABEL_59;
    case 0x17uLL:
      uint64_t v2 = "MTLAttributeFormatShort3Normalized";
      int v3 = "Short3Normalized";
      goto LABEL_59;
    case 0x18uLL:
      uint64_t v2 = "MTLAttributeFormatShort4Normalized";
      int v3 = "Short4Normalized";
      goto LABEL_59;
    case 0x19uLL:
      uint64_t v2 = "MTLAttributeFormatHalf2";
      int v3 = "Half2";
      goto LABEL_59;
    case 0x1AuLL:
      uint64_t v2 = "MTLAttributeFormatHalf3";
      int v3 = "Half3";
      goto LABEL_59;
    case 0x1BuLL:
      uint64_t v2 = "MTLAttributeFormatHalf4";
      int v3 = "Half4";
      goto LABEL_59;
    case 0x1CuLL:
      uint64_t v2 = "MTLAttributeFormatFloat";
      int v3 = "Float";
      goto LABEL_59;
    case 0x1DuLL:
      uint64_t v2 = "MTLAttributeFormatFloat2";
      int v3 = "Float2";
      goto LABEL_59;
    case 0x1EuLL:
      uint64_t v2 = "MTLAttributeFormatFloat3";
      int v3 = "Float3";
      goto LABEL_59;
    case 0x1FuLL:
      uint64_t v2 = "MTLAttributeFormatFloat4";
      int v3 = "Float4";
      goto LABEL_59;
    case 0x20uLL:
      uint64_t v2 = "MTLAttributeFormatInt";
      int v3 = "Int";
      goto LABEL_59;
    case 0x21uLL:
      uint64_t v2 = "MTLAttributeFormatInt2";
      int v3 = "Int2";
      goto LABEL_59;
    case 0x22uLL:
      uint64_t v2 = "MTLAttributeFormatInt3";
      int v3 = "Int3";
      goto LABEL_59;
    case 0x23uLL:
      uint64_t v2 = "MTLAttributeFormatInt4";
      int v3 = "Int4";
      goto LABEL_59;
    case 0x24uLL:
      uint64_t v2 = "MTLAttributeFormatUInt";
      int v3 = "UInt";
      goto LABEL_59;
    case 0x25uLL:
      uint64_t v2 = "MTLAttributeFormatUInt2";
      int v3 = "UInt2";
      goto LABEL_59;
    case 0x26uLL:
      uint64_t v2 = "MTLAttributeFormatUInt3";
      int v3 = "UInt3";
      goto LABEL_59;
    case 0x27uLL:
      uint64_t v2 = "MTLAttributeFormatUInt4";
      int v3 = "UInt4";
      goto LABEL_59;
    case 0x28uLL:
      uint64_t v2 = "MTLAttributeFormatInt1010102Normalized";
      int v3 = "Int1010102Normalized";
      goto LABEL_59;
    case 0x29uLL:
      uint64_t v2 = "MTLAttributeFormatUInt1010102Normalized";
      int v3 = "UInt1010102Normalized";
      goto LABEL_59;
    case 0x2AuLL:
      uint64_t v2 = "MTLAttributeFormatUChar4Normalized_BGRA";
      int v3 = "UChar4Normalized_BGRA";
      goto LABEL_59;
    case 0x2BuLL:
      uint64_t v2 = "MTLAttributeFormatUInt_VertexID";
      int v3 = "UInt_VertexID";
      goto LABEL_59;
    case 0x2CuLL:
      uint64_t v2 = "MTLAttributeFormatUInt_InstanceID";
      int v3 = "UInt_InstanceID";
      goto LABEL_59;
    case 0x2DuLL:
      uint64_t v2 = "MTLAttributeFormatUChar";
      int v3 = "UChar";
      goto LABEL_59;
    case 0x2EuLL:
      uint64_t v2 = "MTLAttributeFormatChar";
      int v3 = "Char";
      goto LABEL_59;
    case 0x2FuLL:
      uint64_t v2 = "MTLAttributeFormatUCharNormalized";
      int v3 = "UCharNormalized";
      goto LABEL_59;
    case 0x30uLL:
      uint64_t v2 = "MTLAttributeFormatCharNormalized";
      int v3 = "CharNormalized";
      goto LABEL_59;
    case 0x31uLL:
      uint64_t v2 = "MTLAttributeFormatUShort";
      int v3 = "UShort";
      goto LABEL_59;
    case 0x32uLL:
      uint64_t v2 = "MTLAttributeFormatShort";
      int v3 = "Short";
      goto LABEL_59;
    case 0x33uLL:
      uint64_t v2 = "MTLAttributeFormatUShortNormalized";
      int v3 = "UShortNormalized";
      goto LABEL_59;
    case 0x34uLL:
      uint64_t v2 = "MTLAttributeFormatShortNormalized";
      int v3 = "ShortNormalized";
      goto LABEL_59;
    case 0x35uLL:
      uint64_t v2 = "MTLAttributeFormatHalf";
      int v3 = "Half";
      goto LABEL_59;
    case 0x36uLL:
      uint64_t v2 = "MTLAttributeFormatFloatRG11B10";
      int v3 = "FloatRG11B10";
      goto LABEL_59;
    case 0x37uLL:
      uint64_t v2 = "MTLAttributeFormatFloatRGB9E5";
      int v3 = "FloatRGB9E5";
LABEL_59:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLBarrierScopeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLBarrierScopeRenderTargets";
  if (a2) {
    int v3 = "RenderTargets";
  }
  uint64_t v4 = "MTLBarrierScopeTextures";
  if (a2) {
    uint64_t v4 = "Textures";
  }
  size_t v5 = "Buffers";
  if (!a2) {
    size_t v5 = "MTLBarrierScopeBuffers";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)4) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLBinaryArchiveErrorAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLBinaryArchiveErrorNone";
      int v3 = "None";
      goto LABEL_8;
    case 1uLL:
      uint64_t v2 = "MTLBinaryArchiveErrorInvalidFile";
      int v3 = "InvalidFile";
      goto LABEL_8;
    case 2uLL:
      uint64_t v2 = "MTLBinaryArchiveErrorUnexpectedElement";
      int v3 = "UnexpectedElement";
      goto LABEL_8;
    case 3uLL:
      uint64_t v2 = "MTLBinaryArchiveErrorCompilationFailure";
      int v3 = "CompilationFailure";
      goto LABEL_8;
    case 4uLL:
      uint64_t v2 = "MTLBinaryArchiveErrorInternalError";
      int v3 = "InternalError";
LABEL_8:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLBinaryArchiveSerializationOptionsAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  if ((uint64_t)this > 15)
  {
    int v6 = "MTLBinaryArchiveSerializationSpecializedFunctionsAspectIfAvailable";
    if (a2) {
      int v6 = "SpecializedFunctionsAspectIfAvailable";
    }
    uint64_t v7 = "MTLBinaryArchiveSerializationSpecializedFunctionsAspectAlways";
    if (a2) {
      uint64_t v7 = "SpecializedFunctionsAspectAlways";
    }
    if (this != (GPUTools::MTL *)128) {
      uint64_t v7 = "Unknown";
    }
    if (this != (GPUTools::MTL *)64) {
      int v6 = v7;
    }
    size_t v8 = "MTLBinaryArchiveSerializationDescriptorAspectIfAvailable";
    if (a2) {
      size_t v8 = "DescriptorAspectIfAvailable";
    }
    size_t v9 = "MTLBinaryArchiveSerializationDescriptorAspectAlways";
    if (a2) {
      size_t v9 = "DescriptorAspectAlways";
    }
    if (this != (GPUTools::MTL *)32) {
      size_t v9 = "Unknown";
    }
    if (this != (GPUTools::MTL *)16) {
      size_t v8 = v9;
    }
    if ((uint64_t)this <= 63) {
      return v8;
    }
    else {
      return v6;
    }
  }
  else
  {
    switch((unint64_t)this)
    {
      case 1uLL:
        uint64_t v4 = "MTLBinaryArchiveSerializationAtomic";
        size_t v5 = "Atomic";
        goto LABEL_26;
      case 2uLL:
        uint64_t v4 = "MTLBinaryArchiveSerializationChecksum";
        size_t v5 = "Checksum";
        goto LABEL_26;
      case 4uLL:
        uint64_t v4 = "MTLBinaryArchiveSerializationDeviceAspectIfAvailable";
        size_t v5 = "DeviceAspectIfAvailable";
        goto LABEL_26;
      case 8uLL:
        uint64_t v4 = "MTLBinaryArchiveSerializationDeviceAspectAlways";
        size_t v5 = "DeviceAspectAlways";
LABEL_26:
        if (a2) {
          unint64_t result = v5;
        }
        else {
          unint64_t result = v4;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

const char *GPUTools::MTL::GetMTLBinaryArchiveStorageOptionsAsString(GPUTools::MTL *this, int a2)
{
  if ((uint64_t)this > 15)
  {
    if (this == (GPUTools::MTL *)16)
    {
      return "MTLBinaryArchiveLoadToRecompile";
    }
    else if (this == (GPUTools::MTL *)32)
    {
      return "MTLBinaryArchiveSkipAIRValidation";
    }
    else if (this == (GPUTools::MTL *)64)
    {
      return "MTLBinaryArchiveRecompileTarget";
    }
    else
    {
      return "Unknown";
    }
  }
  else
  {
    switch((unint64_t)this)
    {
      case 1uLL:
        uint64_t v2 = "MTLBinaryArchiveStoreDescriptors";
        int v3 = "Descriptors";
        break;
      case 2uLL:
        uint64_t v2 = "MTLBinaryArchiveStoreFunctions";
        int v3 = "Functions";
        break;
      case 4uLL:
        uint64_t v2 = "MTLBinaryArchiveStoreAIR";
        int v3 = "AIR";
        break;
      case 8uLL:
        uint64_t v2 = "MTLBinaryArchiveSupportAIRNT";
        int v3 = "SupportAIRNT";
        break;
      default:
        return "Unknown";
    }
    if (a2) {
      return v3;
    }
    else {
      return v2;
    }
  }
}

const char *GPUTools::MTL::GetMTLBindingAccessAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLBindingAccessWriteOnly";
  if (a2) {
    int v3 = "WriteOnly";
  }
  uint64_t v4 = "MTLBindingAccessReadWrite";
  if (a2) {
    uint64_t v4 = "ReadWrite";
  }
  size_t v5 = "ReadOnly";
  if (!a2) {
    size_t v5 = "MTLBindingAccessReadOnly";
  }
  if (!this) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)2) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLBindingTypeAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v4 = "MTLBindingTypeBuffer";
      size_t v5 = "Buffer";
      goto LABEL_25;
    case 1uLL:
      uint64_t v4 = "MTLBindingTypeThreadgroupMemory";
      size_t v5 = "ThreadgroupMemory";
      goto LABEL_25;
    case 2uLL:
      uint64_t v4 = "MTLBindingTypeTexture";
      size_t v5 = "Texture";
      goto LABEL_25;
    case 3uLL:
      uint64_t v4 = "MTLBindingTypeSampler";
      size_t v5 = "Sampler";
      goto LABEL_25;
    case 4uLL:
      uint64_t v4 = "MTLArgumentTypePrivateIndirectConstant";
      size_t v5 = "PrivateIndirectConstant";
      goto LABEL_25;
    case 0xFuLL:
      uint64_t v4 = "MTLArgumentTypePrivateBuiltIn";
      size_t v5 = "PrivateBuiltIn";
      goto LABEL_25;
    case 0x10uLL:
      uint64_t v4 = "MTLBindingTypeImageblockData";
      size_t v5 = "ImageblockData";
      goto LABEL_25;
    case 0x11uLL:
      uint64_t v4 = "MTLBindingTypeImageblock";
      size_t v5 = "Imageblock";
      goto LABEL_25;
    case 0x12uLL:
      uint64_t v4 = "MTLArgumentTypePrivateValue";
      size_t v5 = "PrivateValue";
      goto LABEL_25;
    case 0x13uLL:
      uint64_t v4 = "MTLArgumentTypePrivateRenderPipeline";
      size_t v5 = "PrivateRenderPipeline";
      goto LABEL_25;
    case 0x14uLL:
      uint64_t v4 = "MTLArgumentTypePrivateComputePipeline";
      size_t v5 = "PrivateComputePipeline";
      goto LABEL_25;
    case 0x15uLL:
      uint64_t v4 = "MTLArgumentTypePrivateIndirectCommandBuffer";
      size_t v5 = "PrivateIndirectCommandBuffer";
      goto LABEL_25;
    case 0x16uLL:
      uint64_t v4 = "MTLArgumentTypePrivateByVal";
      size_t v5 = "PrivateByVal";
      goto LABEL_25;
    case 0x17uLL:
      uint64_t v4 = "MTLArgumentTypePrivateFunctionPointer";
      size_t v5 = "PrivateFunctionPointer";
      goto LABEL_25;
    case 0x18uLL:
      uint64_t v4 = "MTLBindingTypeVisibleFunctionTable";
      size_t v5 = "VisibleFunctionTable";
      goto LABEL_25;
    case 0x19uLL:
      uint64_t v4 = "MTLBindingTypePrimitiveAccelerationStructure";
      size_t v5 = "PrimitiveAccelerationStructure";
      goto LABEL_25;
    case 0x1AuLL:
      uint64_t v4 = "MTLBindingTypeInstanceAccelerationStructure";
      size_t v5 = "InstanceAccelerationStructure";
      goto LABEL_25;
    case 0x1BuLL:
      uint64_t v4 = "MTLBindingTypeIntersectionFunctionTable";
      size_t v5 = "IntersectionFunctionTable";
      goto LABEL_25;
    case 0x1CuLL:
      uint64_t v4 = "MTLArgumentTypePrivatePointer";
      size_t v5 = "PrivatePointer";
      goto LABEL_25;
    case 0x1DuLL:
      uint64_t v4 = "MTLArgumentTypePrivateStruct";
      size_t v5 = "PrivateStruct";
      goto LABEL_25;
    case 0x22uLL:
      uint64_t v4 = "MTLBindingTypeObjectPayload";
      size_t v5 = "ObjectPayload";
      goto LABEL_25;
    case 0x23uLL:
      uint64_t v4 = "MTLArgumentTypePrivateMesh";
      size_t v5 = "PrivateMesh";
      goto LABEL_25;
    case 0x24uLL:
      uint64_t v4 = "MTLArgumentTypePrivateDepthStencilState";
      size_t v5 = "PrivateDepthStencilState";
LABEL_25:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLBlendFactorAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLBlendFactorZero";
      int v3 = "Zero";
      goto LABEL_22;
    case 1uLL:
      uint64_t v2 = "MTLBlendFactorOne";
      int v3 = "One";
      goto LABEL_22;
    case 2uLL:
      uint64_t v2 = "MTLBlendFactorSourceColor";
      int v3 = "SourceColor";
      goto LABEL_22;
    case 3uLL:
      uint64_t v2 = "MTLBlendFactorOneMinusSourceColor";
      int v3 = "OneMinusSourceColor";
      goto LABEL_22;
    case 4uLL:
      uint64_t v2 = "MTLBlendFactorSourceAlpha";
      int v3 = "SourceAlpha";
      goto LABEL_22;
    case 5uLL:
      uint64_t v2 = "MTLBlendFactorOneMinusSourceAlpha";
      int v3 = "OneMinusSourceAlpha";
      goto LABEL_22;
    case 6uLL:
      uint64_t v2 = "MTLBlendFactorDestinationColor";
      int v3 = "DestinationColor";
      goto LABEL_22;
    case 7uLL:
      uint64_t v2 = "MTLBlendFactorOneMinusDestinationColor";
      int v3 = "OneMinusDestinationColor";
      goto LABEL_22;
    case 8uLL:
      uint64_t v2 = "MTLBlendFactorDestinationAlpha";
      int v3 = "DestinationAlpha";
      goto LABEL_22;
    case 9uLL:
      uint64_t v2 = "MTLBlendFactorOneMinusDestinationAlpha";
      int v3 = "OneMinusDestinationAlpha";
      goto LABEL_22;
    case 0xAuLL:
      uint64_t v2 = "MTLBlendFactorSourceAlphaSaturated";
      int v3 = "SourceAlphaSaturated";
      goto LABEL_22;
    case 0xBuLL:
      uint64_t v2 = "MTLBlendFactorBlendColor";
      int v3 = "BlendColor";
      goto LABEL_22;
    case 0xCuLL:
      uint64_t v2 = "MTLBlendFactorOneMinusBlendColor";
      int v3 = "OneMinusBlendColor";
      goto LABEL_22;
    case 0xDuLL:
      uint64_t v2 = "MTLBlendFactorBlendAlpha";
      int v3 = "BlendAlpha";
      goto LABEL_22;
    case 0xEuLL:
      uint64_t v2 = "MTLBlendFactorOneMinusBlendAlpha";
      int v3 = "OneMinusBlendAlpha";
      goto LABEL_22;
    case 0xFuLL:
      uint64_t v2 = "MTLBlendFactorSource1Color";
      int v3 = "Source1Color";
      goto LABEL_22;
    case 0x10uLL:
      uint64_t v2 = "MTLBlendFactorOneMinusSource1Color";
      int v3 = "OneMinusSource1Color";
      goto LABEL_22;
    case 0x11uLL:
      uint64_t v2 = "MTLBlendFactorSource1Alpha";
      int v3 = "Source1Alpha";
      goto LABEL_22;
    case 0x12uLL:
      uint64_t v2 = "MTLBlendFactorOneMinusSource1Alpha";
      int v3 = "OneMinusSource1Alpha";
LABEL_22:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLBlendOperationAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLBlendOperationAdd";
      int v3 = "Add";
      goto LABEL_8;
    case 1uLL:
      uint64_t v2 = "MTLBlendOperationSubtract";
      int v3 = "Subtract";
      goto LABEL_8;
    case 2uLL:
      uint64_t v2 = "MTLBlendOperationReverseSubtract";
      int v3 = "ReverseSubtract";
      goto LABEL_8;
    case 3uLL:
      uint64_t v2 = "MTLBlendOperationMin";
      int v3 = "Min";
      goto LABEL_8;
    case 4uLL:
      uint64_t v2 = "MTLBlendOperationMax";
      int v3 = "Max";
LABEL_8:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLBlitOptionAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v4 = "MTLBlitOptionNone";
      size_t v5 = "None";
      goto LABEL_16;
    case 1uLL:
      uint64_t v4 = "MTLBlitOptionDepthFromDepthStencil";
      size_t v5 = "DepthFromDepthStencil";
      goto LABEL_16;
    case 2uLL:
      uint64_t v4 = "MTLBlitOptionStencilFromDepthStencil";
      size_t v5 = "StencilFromDepthStencil";
      goto LABEL_16;
    case 3uLL:
      return result;
    case 4uLL:
      uint64_t v4 = "MTLBlitOptionRowLinearPVRTC";
      size_t v5 = "RowLinearPVRTC";
LABEL_16:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      int v6 = "MTLBlitOptionOpenGLClient";
      if (a2) {
        int v6 = "OpenGLClient";
      }
      uint64_t v7 = "MTLBlitOptionToolsClient";
      if (a2) {
        uint64_t v7 = "ToolsClient";
      }
      if (this == (GPUTools::MTL *)0x40000000) {
        size_t v8 = v7;
      }
      else {
        size_t v8 = "Unknown";
      }
      if (this == (GPUTools::MTL *)0x20000000) {
        unint64_t result = v6;
      }
      else {
        unint64_t result = v8;
      }
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLBufferRobustnessSupportAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLBufferRobustnessSupportNotSupported";
      int v3 = "NotSupported";
      goto LABEL_7;
    case 1uLL:
      uint64_t v2 = "MTLBufferRobustnessSupportNilBinding";
      int v3 = "NilBinding";
      goto LABEL_7;
    case 2uLL:
      uint64_t v2 = "MTLBufferRobustnessSupportNilCheckedAccess";
      int v3 = "NilCheckedAccess";
      goto LABEL_7;
    case 3uLL:
      uint64_t v2 = "MTLBufferRobustnessSupportInvalidAccess";
      int v3 = "InvalidAccess";
LABEL_7:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLBuiltInArgumentTypeAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLBuiltInArgumentInvalid";
      int v3 = "Invalid";
      goto LABEL_28;
    case 1uLL:
      uint64_t v2 = "MTLBuiltInArgumentVertexID";
      int v3 = "VertexID";
      goto LABEL_28;
    case 2uLL:
      uint64_t v2 = "MTLBuiltInArgumentInstanceID";
      int v3 = "InstanceID";
      goto LABEL_28;
    case 3uLL:
      uint64_t v2 = "MTLBuiltInArgumentBaseVertex";
      int v3 = "BaseVertex";
      goto LABEL_28;
    case 4uLL:
      uint64_t v2 = "MTLBuiltInArgumentBaseInstance";
      int v3 = "BaseInstance";
      goto LABEL_28;
    case 5uLL:
      uint64_t v2 = "MTLBuiltInArgumentThreadPositionInGrid";
      int v3 = "ThreadPositionInGrid";
      goto LABEL_28;
    case 6uLL:
      uint64_t v2 = "MTLBuiltInArgumentThreadsPerGrid";
      int v3 = "ThreadsPerGrid";
      goto LABEL_28;
    case 7uLL:
      uint64_t v2 = "MTLBuiltInArgumentThreadPositionInThreadgroup";
      int v3 = "ThreadPositionInThreadgroup";
      goto LABEL_28;
    case 8uLL:
      uint64_t v2 = "MTLBuiltInArgumentThreadIndexInThreadgroup";
      int v3 = "ThreadIndexInThreadgroup";
      goto LABEL_28;
    case 9uLL:
      uint64_t v2 = "MTLBuiltInArgumentThreadsPerThreadgroup";
      int v3 = "ThreadsPerThreadgroup";
      goto LABEL_28;
    case 0xAuLL:
      uint64_t v2 = "MTLBuiltInArgumentThreadgroupPositionInGrid";
      int v3 = "ThreadgroupPositionInGrid";
      goto LABEL_28;
    case 0xBuLL:
      uint64_t v2 = "MTLBuiltInArgumentThreadgroupsPerGrid";
      int v3 = "ThreadgroupsPerGrid";
      goto LABEL_28;
    case 0xCuLL:
      uint64_t v2 = "MTLBuiltInArgumentThreadExecutionWidth";
      int v3 = "ThreadExecutionWidth";
      goto LABEL_28;
    case 0xDuLL:
      uint64_t v2 = "MTLBuiltInArgumentPatchID";
      int v3 = "PatchID";
      goto LABEL_28;
    case 0xEuLL:
      uint64_t v2 = "MTLBuiltInArgumentPositionInPatch";
      int v3 = "PositionInPatch";
      goto LABEL_28;
    case 0xFuLL:
      uint64_t v2 = "MTLBuiltInArgumentStageInGridOrigin";
      int v3 = "StageInGridOrigin";
      goto LABEL_28;
    case 0x10uLL:
      uint64_t v2 = "MTLBuiltInArgumentStageInGridSize";
      int v3 = "StageInGridSize";
      goto LABEL_28;
    case 0x11uLL:
      uint64_t v2 = "MTLBuiltInArgumentThreadIndexInQuadgroup";
      int v3 = "ThreadIndexInQuadgroup";
      goto LABEL_28;
    case 0x12uLL:
      uint64_t v2 = "MTLBuiltInArgumentThreadIndexInSimdgroup";
      int v3 = "ThreadIndexInSimdgroup";
      goto LABEL_28;
    case 0x13uLL:
      uint64_t v2 = "MTLBuiltInArgumentThreadsPerQuadgroup";
      int v3 = "ThreadsPerQuadgroup";
      goto LABEL_28;
    case 0x14uLL:
      uint64_t v2 = "MTLBuiltInArgumentThreadsPerSimdgroup";
      int v3 = "ThreadsPerSimdgroup";
      goto LABEL_28;
    case 0x15uLL:
      uint64_t v2 = "MTLBuiltInAmplificationID";
      int v3 = "BuiltInAmplificationID";
      goto LABEL_28;
    case 0x16uLL:
      uint64_t v2 = "MTLBuiltInAmplificationCount";
      int v3 = "BuiltInAmplificationCount";
      goto LABEL_28;
    case 0x17uLL:
      uint64_t v2 = "MTLBuiltInMeshGridProperties";
      int v3 = "BuiltInMeshGridProperties";
      goto LABEL_28;
    case 0x18uLL:
      uint64_t v2 = "MTLBuiltInMesh";
      int v3 = "BuiltInMesh";
LABEL_28:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLCPUCacheModeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLCPUCacheModeWriteCombined";
  if (a2) {
    int v3 = "WriteCombined";
  }
  uint64_t v4 = "MTLCPUCacheModeDefaultCache";
  if (a2) {
    uint64_t v4 = "DefaultCache";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLCaptureDestinationAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLCaptureDestinationGPUTraceDocument";
  if (a2) {
    int v3 = "GPUTraceDocument";
  }
  uint64_t v4 = "MTLCaptureDestinationDeveloperTools";
  if (a2) {
    uint64_t v4 = "DeveloperTools";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)2) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLCaptureErrorAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLCaptureErrorNotSupported";
  if (a2) {
    int v3 = "NotSupported";
  }
  uint64_t v4 = "MTLCaptureErrorInvalidDescriptor";
  if (a2) {
    uint64_t v4 = "InvalidDescriptor";
  }
  size_t v5 = "AlreadyCapturing";
  if (!a2) {
    size_t v5 = "MTLCaptureErrorAlreadyCapturing";
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)3) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLColorWriteMaskAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v4 = "MTLColorWriteMaskNone";
      size_t v5 = "None";
      goto LABEL_12;
    case 1uLL:
      uint64_t v4 = "MTLColorWriteMaskAlpha";
      size_t v5 = "Alpha";
      goto LABEL_12;
    case 2uLL:
      uint64_t v4 = "MTLColorWriteMaskBlue";
      size_t v5 = "Blue";
      goto LABEL_12;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
      return result;
    case 4uLL:
      uint64_t v4 = "MTLColorWriteMaskGreen";
      size_t v5 = "Green";
      goto LABEL_12;
    case 8uLL:
      uint64_t v4 = "MTLColorWriteMaskRed";
      size_t v5 = "Red";
LABEL_12:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      int v6 = "MTLColorWriteMaskAll";
      if (a2) {
        int v6 = "All";
      }
      if (this == (GPUTools::MTL *)15) {
        unint64_t result = v6;
      }
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLCommandBufferErrorAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v4 = "MTLCommandBufferErrorNone";
      size_t v5 = "None";
      goto LABEL_15;
    case 1uLL:
      uint64_t v4 = "MTLCommandBufferErrorInternal";
      size_t v5 = "Internal";
      goto LABEL_15;
    case 2uLL:
      uint64_t v4 = "MTLCommandBufferErrorTimeout";
      size_t v5 = "Timeout";
      goto LABEL_15;
    case 3uLL:
      uint64_t v4 = "MTLCommandBufferErrorPageFault";
      size_t v5 = "PageFault";
      goto LABEL_15;
    case 4uLL:
      uint64_t v4 = "MTLCommandBufferErrorAccessRevoked";
      size_t v5 = "AccessRevoked";
      goto LABEL_15;
    case 7uLL:
      uint64_t v4 = "MTLCommandBufferErrorNotPermitted";
      size_t v5 = "NotPermitted";
      goto LABEL_15;
    case 8uLL:
      uint64_t v4 = "MTLCommandBufferErrorOutOfMemory";
      size_t v5 = "OutOfMemory";
      goto LABEL_15;
    case 9uLL:
      uint64_t v4 = "MTLCommandBufferErrorInvalidResource";
      size_t v5 = "InvalidResource";
      goto LABEL_15;
    case 0xAuLL:
      uint64_t v4 = "MTLCommandBufferErrorMemoryless";
      size_t v5 = "Memoryless";
      goto LABEL_15;
    case 0xBuLL:
      uint64_t v4 = "MTLCommandBufferErrorDeviceRemoved";
      size_t v5 = "DeviceRemoved";
      goto LABEL_15;
    case 0xCuLL:
      uint64_t v4 = "MTLCommandBufferErrorStackOverflow";
      size_t v5 = "StackOverflow";
      goto LABEL_15;
    case 0x10uLL:
      uint64_t v4 = "MTLCommandBufferErrorProtectionViolation";
      size_t v5 = "ProtectionViolation";
      goto LABEL_15;
    case 0x11uLL:
      uint64_t v4 = "MTLCommandBufferErrorConditionalEventAbort";
      size_t v5 = "ConditionalEventAbort";
LABEL_15:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLCommandBufferErrorOptionAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLCommandBufferErrorOptionNone";
  if (a2) {
    int v3 = "None";
  }
  uint64_t v4 = "MTLCommandBufferErrorOptionEncoderExecutionStatus";
  if (a2) {
    uint64_t v4 = "EncoderExecutionStatus";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLCommandBufferStatusAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLCommandBufferStatusNotEnqueued";
      int v3 = "NotEnqueued";
      goto LABEL_10;
    case 1uLL:
      uint64_t v2 = "MTLCommandBufferStatusEnqueued";
      int v3 = "Enqueued";
      goto LABEL_10;
    case 2uLL:
      uint64_t v2 = "MTLCommandBufferStatusCommitted";
      int v3 = "Committed";
      goto LABEL_10;
    case 3uLL:
      uint64_t v2 = "MTLCommandBufferStatusScheduled";
      int v3 = "Scheduled";
      goto LABEL_10;
    case 4uLL:
      uint64_t v2 = "MTLCommandBufferStatusCompleted";
      int v3 = "Completed";
      goto LABEL_10;
    case 5uLL:
      uint64_t v2 = "MTLCommandBufferStatusError";
      int v3 = "Error";
      goto LABEL_10;
    case 6uLL:
      uint64_t v2 = "MTLCommandBufferStatusAbort";
      int v3 = "Abort";
LABEL_10:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLCommandBufferSynchronizationTypeAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLSynchronizationTypeExplicit";
      int v3 = "Explicit";
      goto LABEL_7;
    case 1uLL:
      uint64_t v2 = "MTLSynchronizationTypeImplicit";
      int v3 = "Implicit";
      goto LABEL_7;
    case 2uLL:
      uint64_t v2 = "MTLSynchronizationTypeCommit";
      int v3 = "Commit";
      goto LABEL_7;
    case 3uLL:
      uint64_t v2 = "MTLSynchronizationTypeDealloc";
      int v3 = "Dealloc";
LABEL_7:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLCommandDataCorruptionModeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLCommandDataCorruptionModeRandomLocation";
  if (a2) {
    int v3 = "RandomLocation";
  }
  uint64_t v4 = "MTLCommandDataCorruptionModeAllBytes";
  if (a2) {
    uint64_t v4 = "AllBytes";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)2) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLCommandEncoderErrorStateAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 0uLL:
      if (!a2) {
        return "MTLCommandEncoderErrorStateUnknown";
      }
      return result;
    case 1uLL:
      uint64_t v4 = "MTLCommandEncoderErrorStateCompleted";
      size_t v5 = "Completed";
      goto LABEL_9;
    case 2uLL:
      uint64_t v4 = "MTLCommandEncoderErrorStateAffected";
      size_t v5 = "Affected";
      goto LABEL_9;
    case 3uLL:
      uint64_t v4 = "MTLCommandEncoderErrorStatePending";
      size_t v5 = "Pending";
      goto LABEL_9;
    case 4uLL:
      uint64_t v4 = "MTLCommandEncoderErrorStateFaulted";
      size_t v5 = "Faulted";
LABEL_9:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLCommandEncoderTypeAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v4 = "MTLCommandEncoderTypeRender";
      size_t v5 = "Render";
      goto LABEL_9;
    case 1uLL:
      uint64_t v4 = "MTLCommandEncoderTypeCompute";
      size_t v5 = "Compute";
      goto LABEL_9;
    case 2uLL:
      uint64_t v4 = "MTLCommandEncoderTypeBlit";
      size_t v5 = "Blit";
      goto LABEL_9;
    case 3uLL:
      uint64_t v4 = "MTLCommandEncoderTypeParallelRender";
      size_t v5 = "ParallelRender";
      goto LABEL_9;
    case 5uLL:
      uint64_t v4 = "MTLCommandEncoderTypeVideo";
      size_t v5 = "Video";
      goto LABEL_9;
    case 6uLL:
      uint64_t v4 = "MTLCommandEncoderTypeResourceState";
      size_t v5 = "ResourceState";
      goto LABEL_9;
    case 7uLL:
      uint64_t v4 = "MTLCommandEncoderTypeAccelerationStructure";
      size_t v5 = "AccelerationStructure";
LABEL_9:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLCompareFunctionAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLCompareFunctionNever";
      int v3 = "Never";
      goto LABEL_11;
    case 1uLL:
      uint64_t v2 = "MTLCompareFunctionLess";
      int v3 = "Less";
      goto LABEL_11;
    case 2uLL:
      uint64_t v2 = "MTLCompareFunctionEqual";
      int v3 = "Equal";
      goto LABEL_11;
    case 3uLL:
      uint64_t v2 = "MTLCompareFunctionLessEqual";
      int v3 = "LessEqual";
      goto LABEL_11;
    case 4uLL:
      uint64_t v2 = "MTLCompareFunctionGreater";
      int v3 = "Greater";
      goto LABEL_11;
    case 5uLL:
      uint64_t v2 = "MTLCompareFunctionNotEqual";
      int v3 = "NotEqual";
      goto LABEL_11;
    case 6uLL:
      uint64_t v2 = "MTLCompareFunctionGreaterEqual";
      int v3 = "GreaterEqual";
      goto LABEL_11;
    case 7uLL:
      uint64_t v2 = "MTLCompareFunctionAlways";
      int v3 = "Always";
LABEL_11:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLComparisonAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLComparisonEqual";
      int v3 = "Equal";
      goto LABEL_9;
    case 1uLL:
      uint64_t v2 = "MTLComparisonNotEqual";
      int v3 = "NotEqual";
      goto LABEL_9;
    case 2uLL:
      uint64_t v2 = "MTLComparisonGreaterThan";
      int v3 = "GreaterThan";
      goto LABEL_9;
    case 3uLL:
      uint64_t v2 = "MTLComparisonGreaterThanOrEqual";
      int v3 = "GreaterThanOrEqual";
      goto LABEL_9;
    case 4uLL:
      uint64_t v2 = "MTLComparisonLessThan";
      int v3 = "LessThan";
      goto LABEL_9;
    case 5uLL:
      uint64_t v2 = "MTLComparisonLessThanOrEqual";
      int v3 = "LessThanOrEqual";
LABEL_9:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLCompileSymbolVisibilityAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLCompileSymbolVisibilityHidden";
  if (a2) {
    int v3 = "Hidden";
  }
  uint64_t v4 = "MTLCompileSymbolVisibilityDefault";
  if (a2) {
    uint64_t v4 = "Default";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLCompilerErrorAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLCompilerErrorNoError";
      int v3 = "NoError";
      goto LABEL_8;
    case 1uLL:
      uint64_t v2 = "MTLCompilerErrorFatalError";
      int v3 = "FatalError";
      goto LABEL_8;
    case 2uLL:
      uint64_t v2 = "MTLCompilerErrorCompilationError";
      int v3 = "CompilationError";
      goto LABEL_8;
    case 3uLL:
      uint64_t v2 = "MTLCompilerErrorTimeout";
      int v3 = "Timeout";
      goto LABEL_8;
    case 4uLL:
      uint64_t v2 = "MTLCompilerErrorEarlyExit";
      int v3 = "EarlyExit";
LABEL_8:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLCompilerFlagAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  if ((uint64_t)this > 31)
  {
    int v6 = "MTLCompilerFlagIgnorePlatformValidation";
    if (a2) {
      int v6 = "IgnorePlatformValidation";
    }
    uint64_t v7 = "MTLCompilerFlagEmulateIndirectAccelerationStructures";
    if (a2) {
      uint64_t v7 = "EmulateIndirectAccelerationStructures";
    }
    size_t v8 = "MTLCompilerFlagCompilerPluginRequiresSerializedBitcode";
    if (a2) {
      size_t v8 = "CompilerPluginRequiresSerializedBitcode";
    }
    if (this != (GPUTools::MTL *)256) {
      size_t v8 = "Unknown";
    }
    if (this != (GPUTools::MTL *)512) {
      uint64_t v7 = v8;
    }
    if (this != (GPUTools::MTL *)128) {
      int v6 = v7;
    }
    size_t v9 = "MTLCompilerFlagNoVertexFragmentLinking";
    if (a2) {
      size_t v9 = "NoVertexFragmentLinking";
    }
    int v10 = "MTLCompilerFlagSkipStageInputLoading";
    if (a2) {
      int v10 = "SkipStageInputLoading";
    }
    if (this != (GPUTools::MTL *)64) {
      int v10 = "Unknown";
    }
    if (this != (GPUTools::MTL *)32) {
      size_t v9 = v10;
    }
    if ((uint64_t)this <= 127) {
      return v9;
    }
    else {
      return v6;
    }
  }
  else
  {
    switch((unint64_t)this)
    {
      case 0uLL:
        uint64_t v4 = "MTLCompilerFlagNone";
        size_t v5 = "None";
        goto LABEL_35;
      case 1uLL:
      case 3uLL:
      case 5uLL:
      case 6uLL:
      case 7uLL:
        return result;
      case 2uLL:
        uint64_t v4 = "MTLCompilerFlagPackVaryings";
        size_t v5 = "PackVaryings";
        goto LABEL_35;
      case 4uLL:
        uint64_t v4 = "MTLCompilerFlagLoadVertexAttributeData";
        size_t v5 = "LoadVertexAttributeData";
        goto LABEL_35;
      case 8uLL:
        uint64_t v4 = "MTLCompilerFlagLoadPatchData";
        size_t v5 = "LoadPatchData";
LABEL_35:
        if (a2) {
          unint64_t result = v5;
        }
        else {
          unint64_t result = v4;
        }
        break;
      default:
        uint64_t v11 = "MTLCompilerFlagLoadPatchControlPointData";
        if (a2) {
          uint64_t v11 = "LoadPatchControlPointData";
        }
        if (this == (GPUTools::MTL *)16) {
          unint64_t result = v11;
        }
        break;
    }
  }
  return result;
}

const char *GPUTools::MTL::GetMTLCompilerTestModeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLCompilerTestModeIntermittentCrash";
  if (a2) {
    int v3 = "IntermittentCrash";
  }
  uint64_t v4 = "MTLCompilerTestModeDefault";
  if (a2) {
    uint64_t v4 = "Default";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLComputeFPConfigAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLComputeFPRoundToZeroBit";
  if (a2) {
    int v3 = "RoundToZeroBit";
  }
  uint64_t v4 = "RoundToInfinityBit";
  if (!a2) {
    uint64_t v4 = "MTLComputeFPRoundToInfinityBit";
  }
  size_t v5 = "MTLComputeFMABit";
  if (a2) {
    size_t v5 = "FMABit";
  }
  if (this != (GPUTools::MTL *)64) {
    size_t v5 = "Unknown";
  }
  if (this != (GPUTools::MTL *)32) {
    uint64_t v4 = v5;
  }
  if (this != (GPUTools::MTL *)16) {
    int v3 = v4;
  }
  int v6 = "MTLComputeFPDenormBit";
  if (a2) {
    int v6 = "DenormBit";
  }
  uint64_t v7 = "MTLComputeFPInfNanBit";
  if (a2)
  {
    uint64_t v7 = "InfNanBit";
    size_t v8 = "RoundToNearestBit";
  }
  else
  {
    size_t v8 = "MTLComputeFPRoundToNearestBit";
  }
  if (this == (GPUTools::MTL *)8) {
    uint64_t v2 = v8;
  }
  if (this == (GPUTools::MTL *)4) {
    uint64_t v2 = v7;
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v6;
  }
  if ((uint64_t)this <= 15) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLCounterSampleBufferErrorAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLCounterSampleBufferErrorOutOfMemory";
  if (a2) {
    int v3 = "OutOfMemory";
  }
  uint64_t v4 = "MTLCounterSampleBufferErrorInvalid";
  if (a2) {
    uint64_t v4 = "Invalid";
  }
  size_t v5 = "Internal";
  if (!a2) {
    size_t v5 = "MTLCounterSampleBufferErrorInternal";
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLCounterSamplingPointAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLCounterSamplingPointAtStageBoundary";
      int v3 = "AtStageBoundary";
      goto LABEL_8;
    case 1uLL:
      uint64_t v2 = "MTLCounterSamplingPointAtDrawBoundary";
      int v3 = "AtDrawBoundary";
      goto LABEL_8;
    case 2uLL:
      uint64_t v2 = "MTLCounterSamplingPointAtDispatchBoundary";
      int v3 = "AtDispatchBoundary";
      goto LABEL_8;
    case 3uLL:
      uint64_t v2 = "MTLCounterSamplingPointAtTileDispatchBoundary";
      int v3 = "AtTileDispatchBoundary";
      goto LABEL_8;
    case 4uLL:
      uint64_t v2 = "MTLCounterSamplingPointAtBlitBoundary";
      int v3 = "AtBlitBoundary";
LABEL_8:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLCullModeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLCullModeNone";
  if (a2) {
    int v3 = "None";
  }
  uint64_t v4 = "MTLCullModeFront";
  if (a2) {
    uint64_t v4 = "Front";
  }
  size_t v5 = "Back";
  if (!a2) {
    size_t v5 = "MTLCullModeBack";
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLCurveAdjacencyAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLCurveAdjacencyNone";
  if (a2) {
    int v3 = "None";
  }
  uint64_t v4 = "MTLCurveAdjacencyEnd";
  if (a2) {
    uint64_t v4 = "End";
  }
  size_t v5 = "Begin";
  if (!a2) {
    size_t v5 = "MTLCurveAdjacencyBegin";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLCurveBasisAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLCurveBasisBSpline";
      int v3 = "BSpline";
      goto LABEL_7;
    case 1uLL:
      uint64_t v2 = "MTLCurveBasisCatmullRom";
      int v3 = "CatmullRom";
      goto LABEL_7;
    case 2uLL:
      uint64_t v2 = "MTLCurveBasisLinear";
      int v3 = "Linear";
      goto LABEL_7;
    case 3uLL:
      uint64_t v2 = "MTLCurveBasisBezier";
      int v3 = "Bezier";
LABEL_7:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLCurveEndCapsAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLCurveEndCapsNone";
  if (a2) {
    int v3 = "None";
  }
  uint64_t v4 = "MTLCurveEndCapsSphere";
  if (a2) {
    uint64_t v4 = "Sphere";
  }
  size_t v5 = "Disk";
  if (!a2) {
    size_t v5 = "MTLCurveEndCapsDisk";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLCurveTypeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLCurveTypeRound";
  if (a2) {
    int v3 = "Round";
  }
  uint64_t v4 = "MTLCurveTypeFlat";
  if (a2) {
    uint64_t v4 = "Flat";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLDashboardAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "MTLDashboardStreamingCodec";
  if (a2) {
    uint64_t v2 = "StreamingCodec";
  }
  if (this) {
    return "Unknown";
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLDataTypeAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLDataTypeNone";
      int v3 = "None";
      goto LABEL_143;
    case 1uLL:
      uint64_t v2 = "MTLDataTypeStruct";
      int v3 = "Struct";
      goto LABEL_143;
    case 2uLL:
      uint64_t v2 = "MTLDataTypeArray";
      int v3 = "Array";
      goto LABEL_143;
    case 3uLL:
      uint64_t v2 = "MTLDataTypeFloat";
      int v3 = "Float";
      goto LABEL_143;
    case 4uLL:
      uint64_t v2 = "MTLDataTypeFloat2";
      int v3 = "Float2";
      goto LABEL_143;
    case 5uLL:
      uint64_t v2 = "MTLDataTypeFloat3";
      int v3 = "Float3";
      goto LABEL_143;
    case 6uLL:
      uint64_t v2 = "MTLDataTypeFloat4";
      int v3 = "Float4";
      goto LABEL_143;
    case 7uLL:
      uint64_t v2 = "MTLDataTypeFloat2x2";
      int v3 = "Float2x2";
      goto LABEL_143;
    case 8uLL:
      uint64_t v2 = "MTLDataTypeFloat2x3";
      int v3 = "Float2x3";
      goto LABEL_143;
    case 9uLL:
      uint64_t v2 = "MTLDataTypeFloat2x4";
      int v3 = "Float2x4";
      goto LABEL_143;
    case 0xAuLL:
      uint64_t v2 = "MTLDataTypeFloat3x2";
      int v3 = "Float3x2";
      goto LABEL_143;
    case 0xBuLL:
      uint64_t v2 = "MTLDataTypeFloat3x3";
      int v3 = "Float3x3";
      goto LABEL_143;
    case 0xCuLL:
      uint64_t v2 = "MTLDataTypeFloat3x4";
      int v3 = "Float3x4";
      goto LABEL_143;
    case 0xDuLL:
      uint64_t v2 = "MTLDataTypeFloat4x2";
      int v3 = "Float4x2";
      goto LABEL_143;
    case 0xEuLL:
      uint64_t v2 = "MTLDataTypeFloat4x3";
      int v3 = "Float4x3";
      goto LABEL_143;
    case 0xFuLL:
      uint64_t v2 = "MTLDataTypeFloat4x4";
      int v3 = "Float4x4";
      goto LABEL_143;
    case 0x10uLL:
      uint64_t v2 = "MTLDataTypeHalf";
      int v3 = "Half";
      goto LABEL_143;
    case 0x11uLL:
      uint64_t v2 = "MTLDataTypeHalf2";
      int v3 = "Half2";
      goto LABEL_143;
    case 0x12uLL:
      uint64_t v2 = "MTLDataTypeHalf3";
      int v3 = "Half3";
      goto LABEL_143;
    case 0x13uLL:
      uint64_t v2 = "MTLDataTypeHalf4";
      int v3 = "Half4";
      goto LABEL_143;
    case 0x14uLL:
      uint64_t v2 = "MTLDataTypeHalf2x2";
      int v3 = "Half2x2";
      goto LABEL_143;
    case 0x15uLL:
      uint64_t v2 = "MTLDataTypeHalf2x3";
      int v3 = "Half2x3";
      goto LABEL_143;
    case 0x16uLL:
      uint64_t v2 = "MTLDataTypeHalf2x4";
      int v3 = "Half2x4";
      goto LABEL_143;
    case 0x17uLL:
      uint64_t v2 = "MTLDataTypeHalf3x2";
      int v3 = "Half3x2";
      goto LABEL_143;
    case 0x18uLL:
      uint64_t v2 = "MTLDataTypeHalf3x3";
      int v3 = "Half3x3";
      goto LABEL_143;
    case 0x19uLL:
      uint64_t v2 = "MTLDataTypeHalf3x4";
      int v3 = "Half3x4";
      goto LABEL_143;
    case 0x1AuLL:
      uint64_t v2 = "MTLDataTypeHalf4x2";
      int v3 = "Half4x2";
      goto LABEL_143;
    case 0x1BuLL:
      uint64_t v2 = "MTLDataTypeHalf4x3";
      int v3 = "Half4x3";
      goto LABEL_143;
    case 0x1CuLL:
      uint64_t v2 = "MTLDataTypeHalf4x4";
      int v3 = "Half4x4";
      goto LABEL_143;
    case 0x1DuLL:
      uint64_t v2 = "MTLDataTypeInt";
      int v3 = "Int";
      goto LABEL_143;
    case 0x1EuLL:
      uint64_t v2 = "MTLDataTypeInt2";
      int v3 = "Int2";
      goto LABEL_143;
    case 0x1FuLL:
      uint64_t v2 = "MTLDataTypeInt3";
      int v3 = "Int3";
      goto LABEL_143;
    case 0x20uLL:
      uint64_t v2 = "MTLDataTypeInt4";
      int v3 = "Int4";
      goto LABEL_143;
    case 0x21uLL:
      uint64_t v2 = "MTLDataTypeUInt";
      int v3 = "UInt";
      goto LABEL_143;
    case 0x22uLL:
      uint64_t v2 = "MTLDataTypeUInt2";
      int v3 = "UInt2";
      goto LABEL_143;
    case 0x23uLL:
      uint64_t v2 = "MTLDataTypeUInt3";
      int v3 = "UInt3";
      goto LABEL_143;
    case 0x24uLL:
      uint64_t v2 = "MTLDataTypeUInt4";
      int v3 = "UInt4";
      goto LABEL_143;
    case 0x25uLL:
      uint64_t v2 = "MTLDataTypeShort";
      int v3 = "Short";
      goto LABEL_143;
    case 0x26uLL:
      uint64_t v2 = "MTLDataTypeShort2";
      int v3 = "Short2";
      goto LABEL_143;
    case 0x27uLL:
      uint64_t v2 = "MTLDataTypeShort3";
      int v3 = "Short3";
      goto LABEL_143;
    case 0x28uLL:
      uint64_t v2 = "MTLDataTypeShort4";
      int v3 = "Short4";
      goto LABEL_143;
    case 0x29uLL:
      uint64_t v2 = "MTLDataTypeUShort";
      int v3 = "UShort";
      goto LABEL_143;
    case 0x2AuLL:
      uint64_t v2 = "MTLDataTypeUShort2";
      int v3 = "UShort2";
      goto LABEL_143;
    case 0x2BuLL:
      uint64_t v2 = "MTLDataTypeUShort3";
      int v3 = "UShort3";
      goto LABEL_143;
    case 0x2CuLL:
      uint64_t v2 = "MTLDataTypeUShort4";
      int v3 = "UShort4";
      goto LABEL_143;
    case 0x2DuLL:
      uint64_t v2 = "MTLDataTypeChar";
      int v3 = "Char";
      goto LABEL_143;
    case 0x2EuLL:
      uint64_t v2 = "MTLDataTypeChar2";
      int v3 = "Char2";
      goto LABEL_143;
    case 0x2FuLL:
      uint64_t v2 = "MTLDataTypeChar3";
      int v3 = "Char3";
      goto LABEL_143;
    case 0x30uLL:
      uint64_t v2 = "MTLDataTypeChar4";
      int v3 = "Char4";
      goto LABEL_143;
    case 0x31uLL:
      uint64_t v2 = "MTLDataTypeUChar";
      int v3 = "UChar";
      goto LABEL_143;
    case 0x32uLL:
      uint64_t v2 = "MTLDataTypeUChar2";
      int v3 = "UChar2";
      goto LABEL_143;
    case 0x33uLL:
      uint64_t v2 = "MTLDataTypeUChar3";
      int v3 = "UChar3";
      goto LABEL_143;
    case 0x34uLL:
      uint64_t v2 = "MTLDataTypeUChar4";
      int v3 = "UChar4";
      goto LABEL_143;
    case 0x35uLL:
      uint64_t v2 = "MTLDataTypeBool";
      int v3 = "Bool";
      goto LABEL_143;
    case 0x36uLL:
      uint64_t v2 = "MTLDataTypeBool2";
      int v3 = "Bool2";
      goto LABEL_143;
    case 0x37uLL:
      uint64_t v2 = "MTLDataTypeBool3";
      int v3 = "Bool3";
      goto LABEL_143;
    case 0x38uLL:
      uint64_t v2 = "MTLDataTypeBool4";
      int v3 = "Bool4";
      goto LABEL_143;
    case 0x39uLL:
      uint64_t v2 = "MTLDataTypePrivateIndirectArgument";
      int v3 = "PrivateIndirectArgument";
      goto LABEL_143;
    case 0x3AuLL:
      uint64_t v2 = "MTLDataTypeTexture";
      int v3 = "Texture";
      goto LABEL_143;
    case 0x3BuLL:
      uint64_t v2 = "MTLDataTypeSampler";
      int v3 = "Sampler";
      goto LABEL_143;
    case 0x3CuLL:
      uint64_t v2 = "MTLDataTypePointer";
      int v3 = "Pointer";
      goto LABEL_143;
    case 0x3DuLL:
      uint64_t v2 = "MTLDataTypePrivateVoid";
      int v3 = "PrivateVoid";
      goto LABEL_143;
    case 0x3EuLL:
      uint64_t v2 = "MTLDataTypeR8Unorm";
      int v3 = "R8Unorm";
      goto LABEL_143;
    case 0x3FuLL:
      uint64_t v2 = "MTLDataTypeR8Snorm";
      int v3 = "R8Snorm";
      goto LABEL_143;
    case 0x40uLL:
      uint64_t v2 = "MTLDataTypeR16Unorm";
      int v3 = "R16Unorm";
      goto LABEL_143;
    case 0x41uLL:
      uint64_t v2 = "MTLDataTypeR16Snorm";
      int v3 = "R16Snorm";
      goto LABEL_143;
    case 0x42uLL:
      uint64_t v2 = "MTLDataTypeRG8Unorm";
      int v3 = "RG8Unorm";
      goto LABEL_143;
    case 0x43uLL:
      uint64_t v2 = "MTLDataTypeRG8Snorm";
      int v3 = "RG8Snorm";
      goto LABEL_143;
    case 0x44uLL:
      uint64_t v2 = "MTLDataTypeRG16Unorm";
      int v3 = "RG16Unorm";
      goto LABEL_143;
    case 0x45uLL:
      uint64_t v2 = "MTLDataTypeRG16Snorm";
      int v3 = "RG16Snorm";
      goto LABEL_143;
    case 0x46uLL:
      uint64_t v2 = "MTLDataTypeRGBA8Unorm";
      int v3 = "RGBA8Unorm";
      goto LABEL_143;
    case 0x47uLL:
      uint64_t v2 = "MTLDataTypeRGBA8Unorm_sRGB";
      int v3 = "RGBA8Unorm_sRGB";
      goto LABEL_143;
    case 0x48uLL:
      uint64_t v2 = "MTLDataTypeRGBA8Snorm";
      int v3 = "RGBA8Snorm";
      goto LABEL_143;
    case 0x49uLL:
      uint64_t v2 = "MTLDataTypeRGBA16Unorm";
      int v3 = "RGBA16Unorm";
      goto LABEL_143;
    case 0x4AuLL:
      uint64_t v2 = "MTLDataTypeRGBA16Snorm";
      int v3 = "RGBA16Snorm";
      goto LABEL_143;
    case 0x4BuLL:
      uint64_t v2 = "MTLDataTypeRGB10A2Unorm";
      int v3 = "RGB10A2Unorm";
      goto LABEL_143;
    case 0x4CuLL:
      uint64_t v2 = "MTLDataTypeRG11B10Float";
      int v3 = "RG11B10Float";
      goto LABEL_143;
    case 0x4DuLL:
      uint64_t v2 = "MTLDataTypeRGB9E5Float";
      int v3 = "RGB9E5Float";
      goto LABEL_143;
    case 0x4EuLL:
      uint64_t v2 = "MTLDataTypeRenderPipeline";
      int v3 = "RenderPipeline";
      goto LABEL_143;
    case 0x4FuLL:
      uint64_t v2 = "MTLDataTypeComputePipeline";
      int v3 = "ComputePipeline";
      goto LABEL_143;
    case 0x50uLL:
      uint64_t v2 = "MTLDataTypeIndirectCommandBuffer";
      int v3 = "IndirectCommandBuffer";
      goto LABEL_143;
    case 0x51uLL:
      uint64_t v2 = "MTLDataTypeLong";
      int v3 = "Long";
      goto LABEL_143;
    case 0x52uLL:
      uint64_t v2 = "MTLDataTypeLong2";
      int v3 = "Long2";
      goto LABEL_143;
    case 0x53uLL:
      uint64_t v2 = "MTLDataTypeLong3";
      int v3 = "Long3";
      goto LABEL_143;
    case 0x54uLL:
      uint64_t v2 = "MTLDataTypeLong4";
      int v3 = "Long4";
      goto LABEL_143;
    case 0x55uLL:
      uint64_t v2 = "MTLDataTypeULong";
      int v3 = "ULong";
      goto LABEL_143;
    case 0x56uLL:
      uint64_t v2 = "MTLDataTypeULong2";
      int v3 = "ULong2";
      goto LABEL_143;
    case 0x57uLL:
      uint64_t v2 = "MTLDataTypeULong3";
      int v3 = "ULong3";
      goto LABEL_143;
    case 0x58uLL:
      uint64_t v2 = "MTLDataTypeULong4";
      int v3 = "ULong4";
      goto LABEL_143;
    case 0x59uLL:
      uint64_t v2 = "MTLDataTypeDouble";
      int v3 = "Double";
      goto LABEL_143;
    case 0x5AuLL:
      uint64_t v2 = "MTLDataTypeDouble2";
      int v3 = "Double2";
      goto LABEL_143;
    case 0x5BuLL:
      uint64_t v2 = "MTLDataTypeDouble3";
      int v3 = "Double3";
      goto LABEL_143;
    case 0x5CuLL:
      uint64_t v2 = "MTLDataTypeDouble4";
      int v3 = "Double4";
      goto LABEL_143;
    case 0x5DuLL:
      uint64_t v2 = "MTLDataTypeFloat8";
      int v3 = "Float8";
      goto LABEL_143;
    case 0x5EuLL:
      uint64_t v2 = "MTLDataTypeFloat16";
      int v3 = "Float16";
      goto LABEL_143;
    case 0x5FuLL:
      uint64_t v2 = "MTLDataTypeHalf8";
      int v3 = "Half8";
      goto LABEL_143;
    case 0x60uLL:
      uint64_t v2 = "MTLDataTypeHalf16";
      int v3 = "Half16";
      goto LABEL_143;
    case 0x61uLL:
      uint64_t v2 = "MTLDataTypeInt8";
      int v3 = "Int8";
      goto LABEL_143;
    case 0x62uLL:
      uint64_t v2 = "MTLDataTypeInt16";
      int v3 = "Int16";
      goto LABEL_143;
    case 0x63uLL:
      uint64_t v2 = "MTLDataTypeUInt8";
      int v3 = "UInt8";
      goto LABEL_143;
    case 0x64uLL:
      uint64_t v2 = "MTLDataTypeUInt16";
      int v3 = "UInt16";
      goto LABEL_143;
    case 0x65uLL:
      uint64_t v2 = "MTLDataTypeShort8";
      int v3 = "Short8";
      goto LABEL_143;
    case 0x66uLL:
      uint64_t v2 = "MTLDataTypeShort16";
      int v3 = "Short16";
      goto LABEL_143;
    case 0x67uLL:
      uint64_t v2 = "MTLDataTypeUShort8";
      int v3 = "UShort8";
      goto LABEL_143;
    case 0x68uLL:
      uint64_t v2 = "MTLDataTypeUShort16";
      int v3 = "UShort16";
      goto LABEL_143;
    case 0x69uLL:
      uint64_t v2 = "MTLDataTypeChar8";
      int v3 = "Char8";
      goto LABEL_143;
    case 0x6AuLL:
      uint64_t v2 = "MTLDataTypeChar16";
      int v3 = "Char16";
      goto LABEL_143;
    case 0x6BuLL:
      uint64_t v2 = "MTLDataTypeUChar8";
      int v3 = "UChar8";
      goto LABEL_143;
    case 0x6CuLL:
      uint64_t v2 = "MTLDataTypeUChar16";
      int v3 = "UChar16";
      goto LABEL_143;
    case 0x6DuLL:
      uint64_t v2 = "MTLDataTypeLong8";
      int v3 = "Long8";
      goto LABEL_143;
    case 0x6EuLL:
      uint64_t v2 = "MTLDataTypeLong16";
      int v3 = "Long16";
      goto LABEL_143;
    case 0x6FuLL:
      uint64_t v2 = "MTLDataTypeULong8";
      int v3 = "ULong8";
      goto LABEL_143;
    case 0x70uLL:
      uint64_t v2 = "MTLDataTypeULong16";
      int v3 = "ULong16";
      goto LABEL_143;
    case 0x71uLL:
      uint64_t v2 = "MTLDataTypeDouble8";
      int v3 = "Double8";
      goto LABEL_143;
    case 0x72uLL:
      uint64_t v2 = "MTLDataTypeDouble16";
      int v3 = "Double16";
      goto LABEL_143;
    case 0x73uLL:
      uint64_t v2 = "MTLDataTypeVisibleFunctionTable";
      int v3 = "VisibleFunctionTable";
      goto LABEL_143;
    case 0x74uLL:
      uint64_t v2 = "MTLDataTypeIntersectionFunctionTable";
      int v3 = "IntersectionFunctionTable";
      goto LABEL_143;
    case 0x75uLL:
      uint64_t v2 = "MTLDataTypePrimitiveAccelerationStructure";
      int v3 = "PrimitiveAccelerationStructure";
      goto LABEL_143;
    case 0x76uLL:
      uint64_t v2 = "MTLDataTypeInstanceAccelerationStructure";
      int v3 = "InstanceAccelerationStructure";
      goto LABEL_143;
    case 0x77uLL:
      uint64_t v2 = "MTLDataTypeBool8";
      int v3 = "Bool8";
      goto LABEL_143;
    case 0x78uLL:
      uint64_t v2 = "MTLDataTypeBool16";
      int v3 = "Bool16";
      goto LABEL_143;
    case 0x79uLL:
      uint64_t v2 = "MTLDataTypeBFloat";
      int v3 = "BFloat";
      goto LABEL_143;
    case 0x7AuLL:
      uint64_t v2 = "MTLDataTypeBFloat2";
      int v3 = "BFloat2";
      goto LABEL_143;
    case 0x7BuLL:
      uint64_t v2 = "MTLDataTypeBFloat3";
      int v3 = "BFloat3";
      goto LABEL_143;
    case 0x7CuLL:
      uint64_t v2 = "MTLDataTypeBFloat4";
      int v3 = "BFloat4";
      goto LABEL_143;
    case 0x7DuLL:
      uint64_t v2 = "MTLDataTypeBFloat8";
      int v3 = "BFloat8";
      goto LABEL_143;
    case 0x7EuLL:
      uint64_t v2 = "MTLDataTypeBFloat16";
      int v3 = "BFloat16";
      goto LABEL_143;
    case 0x7FuLL:
      uint64_t v2 = "MTLDataTypeBFloat2x2";
      int v3 = "BFloat2x2";
      goto LABEL_143;
    case 0x80uLL:
      uint64_t v2 = "MTLDataTypeBFloat2x3";
      int v3 = "BFloat2x3";
      goto LABEL_143;
    case 0x81uLL:
      uint64_t v2 = "MTLDataTypeBFloat2x4";
      int v3 = "BFloat2x4";
      goto LABEL_143;
    case 0x82uLL:
      uint64_t v2 = "MTLDataTypeBFloat3x2";
      int v3 = "BFloat3x2";
      goto LABEL_143;
    case 0x83uLL:
      uint64_t v2 = "MTLDataTypeBFloat3x3";
      int v3 = "BFloat3x3";
      goto LABEL_143;
    case 0x84uLL:
      uint64_t v2 = "MTLDataTypeBFloat3x4";
      int v3 = "BFloat3x4";
      goto LABEL_143;
    case 0x85uLL:
      uint64_t v2 = "MTLDataTypeBFloat4x2";
      int v3 = "BFloat4x2";
      goto LABEL_143;
    case 0x86uLL:
      uint64_t v2 = "MTLDataTypeBFloat4x3";
      int v3 = "BFloat4x3";
      goto LABEL_143;
    case 0x87uLL:
      uint64_t v2 = "MTLDataTypeBFloat4x4";
      int v3 = "BFloat4x4";
      goto LABEL_143;
    case 0x88uLL:
      uint64_t v2 = "MTLDataTypeMatrix";
      int v3 = "Matrix";
      goto LABEL_143;
    case 0x89uLL:
      uint64_t v2 = "MTLDataTypeVector";
      int v3 = "Vector";
      goto LABEL_143;
    case 0x8AuLL:
      uint64_t v2 = "MTLDataTypeImageBlock";
      int v3 = "ImageBlock";
      goto LABEL_143;
    case 0x8BuLL:
      uint64_t v2 = "MTLDataTypeDepthStencilState";
      int v3 = "DepthStencilState";
LABEL_143:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLDeadlineExecutionBucketsAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLDeadlineExecutionTiny";
      int v3 = "Tiny";
      goto LABEL_12;
    case 1uLL:
      uint64_t v2 = "MTLDeadlineExecutionSmall";
      int v3 = "Small";
      goto LABEL_12;
    case 2uLL:
      uint64_t v2 = "MTLDeadlineExecutionMedium";
      int v3 = "Medium";
      goto LABEL_12;
    case 3uLL:
      uint64_t v2 = "MTLDeadlineExecutionLarge";
      int v3 = "Large";
      goto LABEL_12;
    case 4uLL:
      uint64_t v2 = "MTLDeadlineExecutionNum";
      int v3 = "Num";
LABEL_12:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      uint64_t v4 = "MTLDeadlineExecutionInvalid";
      if (a2) {
        uint64_t v4 = "Invalid";
      }
      if (this == (GPUTools::MTL *)0xFFFFFFFFLL) {
        unint64_t result = v4;
      }
      else {
        unint64_t result = "Unknown";
      }
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLDepthClipModeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLDepthClipModeClip";
  if (a2) {
    int v3 = "Clip";
  }
  uint64_t v4 = "MTLDepthClipModeClamp";
  if (a2) {
    uint64_t v4 = "Clamp";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLDeviceFeatureProfileAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  if ((uint64_t)this > 10000)
  {
    if ((uint64_t)this <= 20001)
    {
      if ((uint64_t)this > 19999)
      {
        uint64_t v6 = 20000;
        uint64_t v7 = "MTLDeviceFeatureProfilewatchOS_1";
        if (a2) {
          uint64_t v7 = "watchOS_1";
        }
        uint64_t v8 = 20001;
        size_t v9 = "MTLDeviceFeatureProfilewatchOS_2";
        int v10 = "watchOS_2";
      }
      else
      {
        uint64_t v6 = 10001;
        uint64_t v7 = "MTLDeviceFeatureProfilemacOS_2";
        if (a2) {
          uint64_t v7 = "macOS_2";
        }
        uint64_t v8 = 10002;
        size_t v9 = "MTLDeviceFeatureProfilemacOS_3";
        int v10 = "macOS_3";
      }
      if (a2) {
        size_t v9 = v10;
      }
      if (this == (GPUTools::MTL *)v8) {
        uint64_t v11 = v9;
      }
      else {
        uint64_t v11 = "Unknown";
      }
LABEL_26:
      if (this == (GPUTools::MTL *)v6) {
        return v7;
      }
      else {
        return v11;
      }
    }
    else
    {
      switch((unint64_t)this)
      {
        case 0x7530uLL:
          uint64_t v4 = "MTLDeviceFeatureProfiletvOS_1";
          size_t v5 = "tvOS_1";
          goto LABEL_49;
        case 0x7531uLL:
          uint64_t v4 = "MTLDeviceFeatureProfiletvOS_2";
          size_t v5 = "tvOS_2";
          goto LABEL_49;
        case 0x7532uLL:
          uint64_t v4 = "MTLDeviceFeatureProfiletvOS_3";
          size_t v5 = "tvOS_3";
          goto LABEL_49;
        case 0x7533uLL:
          return result;
        case 0x7534uLL:
          uint64_t v4 = "MTLDeviceFeatureProfiletvOS_5";
          size_t v5 = "tvOS_5";
          goto LABEL_49;
        case 0x7535uLL:
          uint64_t v4 = "MTLDeviceFeatureProfiletvOS_6";
          size_t v5 = "tvOS_6";
          goto LABEL_49;
        case 0x7536uLL:
          uint64_t v4 = "MTLDeviceFeatureProfiletvOS_7";
          size_t v5 = "tvOS_7";
LABEL_49:
          if (a2) {
            unint64_t result = v5;
          }
          else {
            unint64_t result = v4;
          }
          break;
        default:
          uint64_t v6 = 20002;
          uint64_t v7 = "MTLDeviceFeatureProfilewatchOS_3";
          if (a2) {
            uint64_t v7 = "watchOS_3";
          }
          uint64_t v12 = "MTLDeviceFeatureProfileUndefined";
          if (a2) {
            uint64_t v12 = "Undefined";
          }
          if (this == (GPUTools::MTL *)0xFFFFFFFFLL) {
            uint64_t v11 = v12;
          }
          else {
            uint64_t v11 = "Unknown";
          }
          goto LABEL_26;
      }
    }
  }
  else
  {
    switch((unint64_t)this)
    {
      case 0uLL:
        uint64_t v4 = "MTLDeviceFeatureProfileiOS_1";
        size_t v5 = "iOS_1";
        goto LABEL_49;
      case 1uLL:
        uint64_t v4 = "MTLDeviceFeatureProfileiOS_2";
        size_t v5 = "iOS_2";
        goto LABEL_49;
      case 2uLL:
      case 3uLL:
        return result;
      case 4uLL:
        uint64_t v4 = "MTLDeviceFeatureProfileiOS_3";
        size_t v5 = "iOS_3";
        goto LABEL_49;
      case 5uLL:
        uint64_t v4 = "MTLDeviceFeatureProfileiOS_4";
        size_t v5 = "iOS_4";
        goto LABEL_49;
      case 6uLL:
        uint64_t v4 = "MTLDeviceFeatureProfileiOS_5";
        size_t v5 = "iOS_5";
        goto LABEL_49;
      case 7uLL:
        uint64_t v4 = "MTLDeviceFeatureProfileiOS_6";
        size_t v5 = "iOS_6";
        goto LABEL_49;
      case 8uLL:
        uint64_t v4 = "MTLDeviceFeatureProfileiOS_7";
        size_t v5 = "iOS_7";
        goto LABEL_49;
      case 9uLL:
        uint64_t v4 = "MTLDeviceFeatureProfileiOS_8";
        size_t v5 = "iOS_8";
        goto LABEL_49;
      case 0xAuLL:
        uint64_t v4 = "MTLDeviceFeatureProfileiOS_9";
        size_t v5 = "iOS_9";
        goto LABEL_49;
      case 0xBuLL:
        uint64_t v4 = "MTLDeviceFeatureProfileiOS_9B";
        size_t v5 = "iOS_9B";
        goto LABEL_49;
      case 0xCuLL:
        uint64_t v4 = "MTLDeviceFeatureProfileiOS_10";
        size_t v5 = "iOS_10";
        goto LABEL_49;
      default:
        uint64_t v13 = "MTLDeviceFeatureProfilemacOS_1";
        if (a2) {
          uint64_t v13 = "macOS_1";
        }
        if (this == (GPUTools::MTL *)10000) {
          unint64_t result = v13;
        }
        break;
    }
  }
  return result;
}

const char *GPUTools::MTL::GetMTLDeviceLocationAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0xFFFFFFFFFFFFFFFFLL:
      uint64_t v2 = "MTLDeviceLocationUnspecified";
      int v3 = "Unspecified";
      goto LABEL_7;
    case 0uLL:
      uint64_t v2 = "MTLDeviceLocationBuiltIn";
      int v3 = "BuiltIn";
      goto LABEL_7;
    case 1uLL:
      uint64_t v2 = "MTLDeviceLocationSlot";
      int v3 = "Slot";
      goto LABEL_7;
    case 2uLL:
      uint64_t v2 = "MTLDeviceLocationExternal";
      int v3 = "External";
LABEL_7:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLDevicePartitionAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLDevicePartitionDefault";
  if (a2) {
    int v3 = "Default";
  }
  uint64_t v4 = "MTLDevicePartition1";
  if (a2) {
    uint64_t v4 = "1";
  }
  size_t v5 = "0";
  if (!a2) {
    size_t v5 = "MTLDevicePartition0";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLDispatchTypeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLDispatchTypeSerial";
  if (a2) {
    int v3 = "Serial";
  }
  uint64_t v4 = "MTLDispatchTypeConcurrent";
  if (a2) {
    uint64_t v4 = "Concurrent";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLDynamicLibraryErrorAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLDynamicLibraryErrorNone";
      int v3 = "None";
      goto LABEL_9;
    case 1uLL:
      uint64_t v2 = "MTLDynamicLibraryErrorInvalidFile";
      int v3 = "InvalidFile";
      goto LABEL_9;
    case 2uLL:
      uint64_t v2 = "MTLDynamicLibraryErrorCompilationFailure";
      int v3 = "CompilationFailure";
      goto LABEL_9;
    case 3uLL:
      uint64_t v2 = "MTLDynamicLibraryErrorUnresolvedInstallName";
      int v3 = "UnresolvedInstallName";
      goto LABEL_9;
    case 4uLL:
      uint64_t v2 = "MTLDynamicLibraryErrorDependencyLoadFailure";
      int v3 = "DependencyLoadFailure";
      goto LABEL_9;
    case 5uLL:
      uint64_t v2 = "MTLDynamicLibraryErrorUnsupported";
      int v3 = "Unsupported";
LABEL_9:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLDynamicLibraryLoadOptionsAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v4 = "MTLDynamicLibraryLoadOptionNone";
      size_t v5 = "LoadOptionNone";
      goto LABEL_7;
    case 1uLL:
      uint64_t v4 = "MTLDynamicLibraryLoadSkipAIRValidation";
      size_t v5 = "LoadSkipAIRValidation";
      goto LABEL_7;
    case 2uLL:
      uint64_t v4 = "MTLDynamicLibraryEnableInstrumentation";
      size_t v5 = "EnableInstrumentation";
      goto LABEL_7;
    case 4uLL:
      uint64_t v4 = "MTLDynamicLibraryEnableResourcePatchingInstrumentation";
      size_t v5 = "EnableResourcePatchingInstrumentation";
      goto LABEL_7;
    case 8uLL:
      uint64_t v4 = "MTLDynamicLibraryEnableResourceUsageInstrumentation";
      size_t v5 = "EnableResourceUsageInstrumentation";
LABEL_7:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLDynamicLibrarySerializationOptionsAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 1uLL:
      uint64_t v4 = "MTLDynamicLibrarySerializationAtomic";
      size_t v5 = "Atomic";
      goto LABEL_11;
    case 2uLL:
      uint64_t v4 = "MTLDynamicLibrarySerializationChecksum";
      size_t v5 = "Checksum";
      goto LABEL_11;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
      return result;
    case 4uLL:
      uint64_t v4 = "MTLDynamicLibrarySerializationDeviceAspect";
      size_t v5 = "DeviceAspect";
      goto LABEL_11;
    case 8uLL:
      uint64_t v4 = "MTLDynamicLibrarySerializationAirAspectIfAvailable";
      size_t v5 = "AirAspectIfAvailable";
LABEL_11:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      uint64_t v6 = "MTLDynamicLibrarySerializationAirAspectAlways";
      if (a2) {
        uint64_t v6 = "AirAspectAlways";
      }
      if (this == (GPUTools::MTL *)16) {
        unint64_t result = v6;
      }
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLDynamicLibraryTypeAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLDynamicLibraryTypeInvalid";
      int v3 = "Invalid";
      goto LABEL_8;
    case 1uLL:
      uint64_t v2 = "MTLDynamicLibraryTypeAIROnly";
      int v3 = "AIROnly";
      goto LABEL_8;
    case 2uLL:
      uint64_t v2 = "MTLDynamicLibraryTypeCompatible";
      int v3 = "Compatible";
      goto LABEL_8;
    case 3uLL:
      uint64_t v2 = "MTLDynamicLibraryTypeRebuild";
      int v3 = "Rebuild";
      goto LABEL_8;
    case 4uLL:
      uint64_t v2 = "MTLDynamicLibraryTypeNoVendorSlice";
      int v3 = "NoVendorSlice";
LABEL_8:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLEventOptionAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "MTLEventOptionSupportRollback";
  if (a2) {
    uint64_t v2 = "SupportRollback";
  }
  if (this == (GPUTools::MTL *)1) {
    return v2;
  }
  else {
    return "Unknown";
  }
}

const char *GPUTools::MTL::GetMTLFeatureSetAsString(uint64_t this, int a2)
{
  unint64_t result = "Unknown";
  if (this > 9999)
  {
    if (this <= 20000)
    {
      switch(this)
      {
        case 10000:
          uint64_t v4 = "MTLFeatureSet_macOS_GPUFamily1_v1";
          size_t v5 = "macOS_GPUFamily1_v1";
          goto LABEL_42;
        case 10001:
          uint64_t v4 = "MTLFeatureSet_macOS_GPUFamily1_v2";
          size_t v5 = "macOS_GPUFamily1_v2";
          goto LABEL_42;
        case 10002:
          uint64_t v4 = "MTLFeatureSet_macOS_ReadWriteTextureTier2";
          size_t v5 = "macOS_ReadWriteTextureTier2";
          goto LABEL_42;
        case 10003:
          uint64_t v4 = "MTLFeatureSet_macOS_GPUFamily1_v3";
          size_t v5 = "macOS_GPUFamily1_v3";
          goto LABEL_42;
        case 10004:
          uint64_t v4 = "MTLFeatureSet_macOS_GPUFamily1_v4";
          size_t v5 = "macOS_GPUFamily1_v4";
          goto LABEL_42;
        case 10005:
          uint64_t v4 = "MTLFeatureSet_macOS_GPUFamily2_v1";
          size_t v5 = "macOS_GPUFamily2_v1";
          goto LABEL_42;
        default:
          uint64_t v6 = 20000;
          uint64_t v7 = "MTLFeatureSet_watchOS_GPUFamily1_v1";
          uint64_t v8 = "watchOS_GPUFamily1_v1";
          goto LABEL_11;
      }
    }
    switch(this)
    {
      case 30000:
        uint64_t v4 = "MTLFeatureSet_tvOS_GPUFamily1_v1";
        size_t v5 = "tvOS_GPUFamily1_v1";
        goto LABEL_42;
      case 30001:
        uint64_t v4 = "MTLFeatureSet_tvOS_GPUFamily1_v2";
        size_t v5 = "tvOS_GPUFamily1_v2";
        goto LABEL_42;
      case 30002:
        uint64_t v4 = "MTLFeatureSet_tvOS_GPUFamily1_v3";
        size_t v5 = "tvOS_GPUFamily1_v3";
        goto LABEL_42;
      case 30003:
        uint64_t v4 = "MTLFeatureSet_tvOS_GPUFamily2_v1";
        size_t v5 = "tvOS_GPUFamily2_v1";
        goto LABEL_42;
      case 30004:
        uint64_t v4 = "MTLFeatureSet_tvOS_GPUFamily1_v4";
        size_t v5 = "tvOS_GPUFamily1_v4";
        goto LABEL_42;
      case 30005:
        uint64_t v4 = "MTLFeatureSet_tvOS_GPUFamily2_v2";
        size_t v5 = "tvOS_GPUFamily2_v2";
LABEL_42:
        if (a2) {
          unint64_t result = v5;
        }
        else {
          unint64_t result = v4;
        }
        break;
      default:
        uint64_t v6 = 20001;
        uint64_t v7 = "MTLFeatureSet_watchOS_GPUFamily2_v1";
        uint64_t v8 = "watchOS_GPUFamily2_v1";
LABEL_11:
        if (a2) {
          uint64_t v7 = v8;
        }
        if (this == v6) {
          unint64_t result = v7;
        }
        break;
    }
  }
  else
  {
    switch(this)
    {
      case 0:
        uint64_t v4 = "MTLFeatureSet_iOS_GPUFamily1_v1";
        size_t v5 = "iOS_GPUFamily1_v1";
        goto LABEL_42;
      case 1:
        uint64_t v4 = "MTLFeatureSet_iOS_GPUFamily2_v1";
        size_t v5 = "iOS_GPUFamily2_v1";
        goto LABEL_42;
      case 2:
        uint64_t v4 = "MTLFeatureSet_iOS_GPUFamily1_v2";
        size_t v5 = "iOS_GPUFamily1_v2";
        goto LABEL_42;
      case 3:
        uint64_t v4 = "MTLFeatureSet_iOS_GPUFamily2_v2";
        size_t v5 = "iOS_GPUFamily2_v2";
        goto LABEL_42;
      case 4:
        uint64_t v4 = "MTLFeatureSet_iOS_GPUFamily3_v1";
        size_t v5 = "iOS_GPUFamily3_v1";
        goto LABEL_42;
      case 5:
        uint64_t v4 = "MTLFeatureSet_iOS_GPUFamily1_v3";
        size_t v5 = "iOS_GPUFamily1_v3";
        goto LABEL_42;
      case 6:
        uint64_t v4 = "MTLFeatureSet_iOS_GPUFamily2_v3";
        size_t v5 = "iOS_GPUFamily2_v3";
        goto LABEL_42;
      case 7:
        uint64_t v4 = "MTLFeatureSet_iOS_GPUFamily3_v2";
        size_t v5 = "iOS_GPUFamily3_v2";
        goto LABEL_42;
      case 8:
        uint64_t v4 = "MTLFeatureSet_iOS_GPUFamily1_v4";
        size_t v5 = "iOS_GPUFamily1_v4";
        goto LABEL_42;
      case 9:
        uint64_t v4 = "MTLFeatureSet_iOS_GPUFamily2_v4";
        size_t v5 = "iOS_GPUFamily2_v4";
        goto LABEL_42;
      case 10:
        uint64_t v4 = "MTLFeatureSet_iOS_GPUFamily3_v3";
        size_t v5 = "iOS_GPUFamily3_v3";
        goto LABEL_42;
      case 11:
        uint64_t v4 = "MTLFeatureSet_iOS_GPUFamily4_v1";
        size_t v5 = "iOS_GPUFamily4_v1";
        goto LABEL_42;
      case 12:
        uint64_t v4 = "MTLFeatureSet_iOS_GPUFamily1_v5";
        size_t v5 = "iOS_GPUFamily1_v5";
        goto LABEL_42;
      case 13:
        uint64_t v4 = "MTLFeatureSet_iOS_GPUFamily2_v5";
        size_t v5 = "iOS_GPUFamily2_v5";
        goto LABEL_42;
      case 14:
        uint64_t v4 = "MTLFeatureSet_iOS_GPUFamily3_v4";
        size_t v5 = "iOS_GPUFamily3_v4";
        goto LABEL_42;
      case 15:
        uint64_t v4 = "MTLFeatureSet_iOS_GPUFamily4_v2";
        size_t v5 = "iOS_GPUFamily4_v2";
        goto LABEL_42;
      case 16:
        uint64_t v4 = "MTLFeatureSet_iOS_GPUFamily5_v1";
        size_t v5 = "iOS_GPUFamily5_v1";
        goto LABEL_42;
      default:
        return result;
    }
  }
  return result;
}

const char *GPUTools::MTL::GetMTLFunctionLogTypeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "MTLFunctionLogTypeValidation";
  if (a2) {
    uint64_t v2 = "Validation";
  }
  if (this) {
    return "Unknown";
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLFunctionOptionsAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v4 = "MTLFunctionOptionNone";
      size_t v5 = "None";
      goto LABEL_6;
    case 1uLL:
      uint64_t v4 = "MTLFunctionOptionCompileToBinary";
      size_t v5 = "CompileToBinary";
      goto LABEL_6;
    case 2uLL:
      uint64_t v4 = "MTLFunctionOptionStoreFunctionInMetalScript";
      size_t v5 = "StoreFunctionInMetalScript";
      goto LABEL_6;
    case 4uLL:
      uint64_t v4 = "MTLFunctionOptionFailOnBinaryArchiveMiss";
      size_t v5 = "FailOnBinaryArchiveMiss";
LABEL_6:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLFunctionTypeAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 1uLL:
      uint64_t v2 = "MTLFunctionTypeVertex";
      int v3 = "Vertex";
      goto LABEL_15;
    case 2uLL:
      uint64_t v2 = "MTLFunctionTypeFragment";
      int v3 = "Fragment";
      goto LABEL_15;
    case 3uLL:
      uint64_t v2 = "MTLFunctionTypeKernel";
      int v3 = "Kernel";
      goto LABEL_15;
    case 4uLL:
      uint64_t v2 = "MTLFunctionTypeExtern";
      int v3 = "Extern";
      goto LABEL_15;
    case 5uLL:
      uint64_t v2 = "MTLFunctionTypeVisible";
      int v3 = "Visible";
      goto LABEL_15;
    case 6uLL:
      uint64_t v2 = "MTLFunctionTypeIntersection";
      int v3 = "Intersection";
      goto LABEL_15;
    case 7uLL:
      uint64_t v2 = "MTLFunctionTypeMesh";
      int v3 = "Mesh";
      goto LABEL_15;
    case 8uLL:
      uint64_t v2 = "MTLFunctionTypeObject";
      int v3 = "Object";
LABEL_15:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      uint64_t v4 = "MTLFunctionTypeInvalid";
      if (a2) {
        uint64_t v4 = "Invalid";
      }
      if (this == (GPUTools::MTL *)0xFFFF) {
        unint64_t result = v4;
      }
      else {
        unint64_t result = "Unknown";
      }
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLGLFragmentInputTypeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLGLFragmentInputTypePPAttrib";
  if (a2) {
    int v3 = "PPAttrib";
  }
  uint64_t v4 = "MTLGLFragmentInputTypeGeneric";
  if (a2) {
    uint64_t v4 = "Generic";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLGPUAddressSpaceAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 1uLL:
      uint64_t v4 = "MTLGPUAddressSpaceDevice";
      size_t v5 = "Device";
      goto LABEL_6;
    case 2uLL:
      uint64_t v4 = "MTLGPUAddressSpaceConstant";
      size_t v5 = "Constant";
      goto LABEL_6;
    case 3uLL:
      uint64_t v4 = "MTLGPUAddressSpaceThreadgroup";
      size_t v5 = "Threadgroup";
      goto LABEL_6;
    case 5uLL:
      uint64_t v4 = "MTLGPUAddressSpaceRayPayload";
      size_t v5 = "RayPayload";
LABEL_6:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLGPUFamilyAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  if ((uint64_t)this > 2000)
  {
    if ((uint64_t)this > 3002)
    {
      uint64_t v6 = "MTLGPUFamilyMacCatalyst2";
      if (a2) {
        uint64_t v6 = "MacCatalyst2";
      }
      uint64_t v13 = "MTLGPUFamilyMetal3";
      if (a2) {
        uint64_t v13 = "Metal3";
      }
      if (this != (GPUTools::MTL *)5001) {
        uint64_t v13 = "Unknown";
      }
      if (this != (GPUTools::MTL *)4002) {
        uint64_t v6 = v13;
      }
      uint64_t v8 = "MTLGPUFamilyCommon3";
      if (a2) {
        uint64_t v8 = "Common3";
      }
      uint64_t v14 = "MTLGPUFamilyMacCatalyst1";
      if (a2) {
        uint64_t v14 = "MacCatalyst1";
      }
      if (this != (GPUTools::MTL *)4001) {
        uint64_t v14 = "Unknown";
      }
      if (this != (GPUTools::MTL *)3003) {
        uint64_t v8 = v14;
      }
      BOOL v12 = __OFSUB__(this, 4001);
      BOOL v10 = this == (GPUTools::MTL *)4001;
      BOOL v11 = (uint64_t)this - 4001 < 0;
    }
    else
    {
      uint64_t v6 = "MTLGPUFamilyCommon1";
      if (a2) {
        uint64_t v6 = "Common1";
      }
      uint64_t v7 = "MTLGPUFamilyCommon2";
      if (a2) {
        uint64_t v7 = "Common2";
      }
      if (this != (GPUTools::MTL *)3002) {
        uint64_t v7 = "Unknown";
      }
      if (this != (GPUTools::MTL *)3001) {
        uint64_t v6 = v7;
      }
      uint64_t v8 = "MTLGPUFamilyMac1";
      if (a2) {
        uint64_t v8 = "Mac1";
      }
      size_t v9 = "MTLGPUFamilyMac2";
      if (a2) {
        size_t v9 = "Mac2";
      }
      if (this != (GPUTools::MTL *)2002) {
        size_t v9 = "Unknown";
      }
      if (this != (GPUTools::MTL *)2001) {
        uint64_t v8 = v9;
      }
      BOOL v12 = __OFSUB__(this, 3000);
      BOOL v10 = this == (GPUTools::MTL *)3000;
      BOOL v11 = (uint64_t)this - 3000 < 0;
    }
    if (v11 ^ v12 | v10) {
      return v8;
    }
    else {
      return v6;
    }
  }
  else
  {
    switch((unint64_t)this)
    {
      case 0x3E9uLL:
        uint64_t v4 = "MTLGPUFamilyApple1";
        size_t v5 = "Apple1";
        goto LABEL_51;
      case 0x3EAuLL:
        uint64_t v4 = "MTLGPUFamilyApple2";
        size_t v5 = "Apple2";
        goto LABEL_51;
      case 0x3EBuLL:
        uint64_t v4 = "MTLGPUFamilyApple3";
        size_t v5 = "Apple3";
        goto LABEL_51;
      case 0x3ECuLL:
        uint64_t v4 = "MTLGPUFamilyApple4";
        size_t v5 = "Apple4";
        goto LABEL_51;
      case 0x3EDuLL:
        uint64_t v4 = "MTLGPUFamilyApple5";
        size_t v5 = "Apple5";
        goto LABEL_51;
      case 0x3EEuLL:
        uint64_t v4 = "MTLGPUFamilyApple6";
        size_t v5 = "Apple6";
        goto LABEL_51;
      case 0x3EFuLL:
        uint64_t v4 = "MTLGPUFamilyApple7";
        size_t v5 = "Apple7";
        goto LABEL_51;
      case 0x3F0uLL:
        uint64_t v4 = "MTLGPUFamilyApple8";
        size_t v5 = "Apple8";
        goto LABEL_51;
      case 0x3F1uLL:
        uint64_t v4 = "MTLGPUFamilyApple9";
        size_t v5 = "Apple9";
        goto LABEL_51;
      case 0x3F2uLL:
        uint64_t v4 = "MTLGPUFamilyApple10";
        size_t v5 = "Apple10";
LABEL_51:
        if (a2) {
          unint64_t result = v5;
        }
        else {
          unint64_t result = v4;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

const char *GPUTools::MTL::GetMTLGPUMemoryErrorAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLGPUMemoryErrorNull";
      int v3 = "Null";
      goto LABEL_7;
    case 1uLL:
      uint64_t v2 = "MTLGPUMemoryErrorAddress";
      int v3 = "Address";
      goto LABEL_7;
    case 2uLL:
      uint64_t v2 = "MTLGPUMemoryErrorUsage";
      int v3 = "Usage";
      goto LABEL_7;
    case 3uLL:
      uint64_t v2 = "MTLGPUMemoryErrorType";
      int v3 = "Type";
LABEL_7:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLGPUOperationAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 0uLL:
      if (!a2) {
        return "MTLGPUOperationUnknown";
      }
      return result;
    case 1uLL:
      uint64_t v4 = "MTLGPUOperationLoad";
      size_t v5 = "Load";
      goto LABEL_18;
    case 2uLL:
      uint64_t v4 = "MTLGPUOperationStore";
      size_t v5 = "Store";
      goto LABEL_18;
    case 3uLL:
      uint64_t v4 = "MTLGPUOperationAtomicLoad";
      size_t v5 = "AtomicLoad";
      goto LABEL_18;
    case 4uLL:
      uint64_t v4 = "MTLGPUOperationAtomicStore";
      size_t v5 = "AtomicStore";
      goto LABEL_18;
    case 5uLL:
      uint64_t v4 = "MTLGPUOperationAtomicExchange";
      size_t v5 = "AtomicExchange";
      goto LABEL_18;
    case 6uLL:
      uint64_t v4 = "MTLGPUOperationAtomicCompareExchange";
      size_t v5 = "AtomicCompareExchange";
      goto LABEL_18;
    case 7uLL:
      uint64_t v4 = "MTLGPUOperationAtomicFetchAdd";
      size_t v5 = "AtomicFetchAdd";
      goto LABEL_18;
    case 8uLL:
      uint64_t v4 = "MTLGPUOperationAtomicFetchAnd";
      size_t v5 = "AtomicFetchAnd";
      goto LABEL_18;
    case 9uLL:
      uint64_t v4 = "MTLGPUOperationAtomicFetchMax";
      size_t v5 = "AtomicFetchMax";
      goto LABEL_18;
    case 0xAuLL:
      uint64_t v4 = "MTLGPUOperationAtomicFetchMin";
      size_t v5 = "AtomicFetchMin";
      goto LABEL_18;
    case 0xBuLL:
      uint64_t v4 = "MTLGPUOperationAtomicFetchOr";
      size_t v5 = "AtomicFetchOr";
      goto LABEL_18;
    case 0xCuLL:
      uint64_t v4 = "MTLGPUOperationAtomicFetchSub";
      size_t v5 = "AtomicFetchSub";
      goto LABEL_18;
    case 0xDuLL:
      uint64_t v4 = "MTLGPUOperationAtomicFetchXor";
      size_t v5 = "AtomicFetchXor";
LABEL_18:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLGPUPriorityAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLGPUPriorityHigh";
      int v3 = "High";
      goto LABEL_9;
    case 1uLL:
      uint64_t v2 = "MTLGPUPriorityNormal";
      int v3 = "Normal";
      goto LABEL_9;
    case 2uLL:
      uint64_t v2 = "MTLGPUPriorityLow";
      int v3 = "Low";
      goto LABEL_9;
    case 3uLL:
      uint64_t v2 = "MTLGPUPriorityDisabled";
      int v3 = "Disabled";
      goto LABEL_9;
    case 4uLL:
      uint64_t v2 = "MTLGPUPriorityNormalHigh";
      int v3 = "NormalHigh";
      goto LABEL_9;
    case 5uLL:
      uint64_t v2 = "MTLGPUPriorityRealTime";
      int v3 = "RealTime";
LABEL_9:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLGenericBVHHeaderVersionAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0x100uLL:
      uint64_t v2 = "MTLGenericBVHHeaderVersionInitialSPI";
      int v3 = "InitialSPI";
      goto LABEL_9;
    case 0x101uLL:
      uint64_t v2 = "MTLGenericBVHHeaderVersionMotionSPI";
      int v3 = "MotionSPI";
      goto LABEL_9;
    case 0x102uLL:
      uint64_t v2 = "MTLGenericBVHHeaderVersionPerPrimitiveData";
      int v3 = "PerPrimitiveData";
      goto LABEL_9;
    case 0x103uLL:
      uint64_t v2 = "MTLGenericBVHHeaderVersionUniqueIdentifier";
      int v3 = "UniqueIdentifier";
      goto LABEL_9;
    case 0x104uLL:
      uint64_t v2 = "MTLGenericBVHHeaderVersionCurves";
      int v3 = "Curves";
      goto LABEL_9;
    case 0x105uLL:
      uint64_t v2 = "MTLGenericBVHHeaderVersionRaytracing2024";
      int v3 = "Raytracing2024";
LABEL_9:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLGenericBVHPrimitiveTypeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLGenericBVHPrimitiveTypeTriangleSPI";
  if (a2) {
    int v3 = "TriangleSPI";
  }
  uint64_t v4 = "MTLGenericBVHPrimitiveTypeCurveSPI";
  if (a2) {
    uint64_t v4 = "CurveSPI";
  }
  size_t v5 = "BoundingBoxSPI";
  if (!a2) {
    size_t v5 = "MTLGenericBVHPrimitiveTypeBoundingBoxSPI";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLGenericBVHTypeAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLGenericBVHTypePrimitiveSPI";
      int v3 = "PrimitiveSPI";
      goto LABEL_7;
    case 1uLL:
      uint64_t v2 = "MTLGenericBVHTypeInstanceSPI";
      int v3 = "InstanceSPI";
      goto LABEL_7;
    case 2uLL:
      uint64_t v2 = "MTLGenericBVHTypePrimitiveMotionSPI";
      int v3 = "PrimitiveMotionSPI";
      goto LABEL_7;
    case 3uLL:
      uint64_t v2 = "MTLGenericBVHTypeInstanceMotionSPI";
      int v3 = "InstanceMotionSPI";
LABEL_7:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLHazardTrackingModeAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v4 = "MTLHazardTrackingModeDefault";
      size_t v5 = "Default";
      goto LABEL_6;
    case 1uLL:
      uint64_t v4 = "MTLHazardTrackingModeUntracked";
      size_t v5 = "Untracked";
      goto LABEL_6;
    case 2uLL:
      uint64_t v4 = "MTLHazardTrackingModeTracked";
      size_t v5 = "Tracked";
      goto LABEL_6;
    case 8uLL:
      uint64_t v4 = "MTLHazardTrackingModeGrouped";
      size_t v5 = "Grouped";
LABEL_6:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLHeapTypeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLHeapTypeSparse";
  if (a2) {
    int v3 = "Sparse";
  }
  uint64_t v4 = "MTLHeapTypePlacement";
  if (a2) {
    uint64_t v4 = "Placement";
  }
  size_t v5 = "Automatic";
  if (!a2) {
    size_t v5 = "MTLHeapTypeAutomatic";
  }
  if (!this) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)2) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLIOCommandQueueTypeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLIOCommandQueueTypeSerial";
  if (a2) {
    int v3 = "Serial";
  }
  uint64_t v4 = "MTLIOCommandQueueTypeConcurrent";
  if (a2) {
    uint64_t v4 = "Concurrent";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLIOCompressionMethodAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLIOCompressionMethodZlib";
      int v3 = "Zlib";
      goto LABEL_8;
    case 1uLL:
      uint64_t v2 = "MTLIOCompressionMethodLZFSE";
      int v3 = "LZFSE";
      goto LABEL_8;
    case 2uLL:
      uint64_t v2 = "MTLIOCompressionMethodLZ4";
      int v3 = "LZ4";
      goto LABEL_8;
    case 3uLL:
      uint64_t v2 = "MTLIOCompressionMethodLZMA";
      int v3 = "LZMA";
      goto LABEL_8;
    case 4uLL:
      uint64_t v2 = "MTLIOCompressionMethodLZBitmap";
      int v3 = "LZBitmap";
LABEL_8:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLIOErrorAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLIOErrorURLInvalid";
  if (a2) {
    int v3 = "URLInvalid";
  }
  uint64_t v4 = "MTLIOErrorInternal";
  if (a2) {
    uint64_t v4 = "Internal";
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLIOPriorityAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLIOPriorityLow";
  if (a2) {
    int v3 = "Low";
  }
  uint64_t v4 = "MTLIOPriorityNormal";
  if (a2) {
    uint64_t v4 = "Normal";
  }
  size_t v5 = "High";
  if (!a2) {
    size_t v5 = "MTLIOPriorityHigh";
  }
  if (!this) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)2) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLIOStatusAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLIOStatusPending";
      int v3 = "Pending";
      goto LABEL_7;
    case 1uLL:
      uint64_t v2 = "MTLIOStatusCancelled";
      int v3 = "Cancelled";
      goto LABEL_7;
    case 2uLL:
      uint64_t v2 = "MTLIOStatusError";
      int v3 = "Error";
      goto LABEL_7;
    case 3uLL:
      uint64_t v2 = "MTLIOStatusComplete";
      int v3 = "Complete";
LABEL_7:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLImageFilterFunctionArgumentTypeAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLImageFilterFunctionArgumentTypeTexture2DSPI";
      int v3 = "Texture2DSPI";
      goto LABEL_11;
    case 1uLL:
      uint64_t v2 = "MTLImageFilterFunctionArgumentTypeTexture2DWriteSPI";
      int v3 = "Texture2DWriteSPI";
      goto LABEL_11;
    case 2uLL:
      uint64_t v2 = "MTLImageFilterFunctionArgumentTypeSamplerSPI";
      int v3 = "SamplerSPI";
      goto LABEL_11;
    case 3uLL:
      uint64_t v2 = "MTLImageFilterFunctionArgumentTypeBufferSPI";
      int v3 = "BufferSPI";
      goto LABEL_11;
    case 4uLL:
      uint64_t v2 = "MTLImageFilterFunctionArgumentTypeThreadPositionInGridSPI";
      int v3 = "ThreadPositionInGridSPI";
      goto LABEL_11;
    case 5uLL:
      uint64_t v2 = "MTLImageFilterFunctionArgumentTypeOutputSPI";
      int v3 = "OutputSPI";
      goto LABEL_11;
    case 6uLL:
      uint64_t v2 = "MTLImageFilterFunctionArgumentTypeThreadPositionInThreadgroupSPI";
      int v3 = "ThreadPositionInThreadgroupSPI";
      goto LABEL_11;
    case 7uLL:
      uint64_t v2 = "MTLImageFilterFunctionArgumentTypeImageBlockSPI";
      int v3 = "ImageBlockSPI";
LABEL_11:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLIndexTypeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLIndexTypeUInt32";
  if (a2) {
    int v3 = "UInt32";
  }
  uint64_t v4 = "MTLIndexTypeUInt16";
  if (a2) {
    uint64_t v4 = "UInt16";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLIndirectArgumentBuffersTierAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLIndirectArgumentBuffersTier2";
  if (a2) {
    int v3 = "2";
  }
  uint64_t v4 = "MTLIndirectArgumentBuffersTier1";
  if (a2) {
    uint64_t v4 = "1";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLIndirectCommandTypeAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  if ((uint64_t)this > 31)
  {
    uint64_t v6 = "MTLIndirectCommandTypeDrawMeshThreadgroups";
    if (a2) {
      uint64_t v6 = "DrawMeshThreadgroups";
    }
    uint64_t v7 = "MTLIndirectCommandTypeDrawMeshThreads";
    if (a2) {
      uint64_t v7 = "DrawMeshThreads";
    }
    if (this != (GPUTools::MTL *)256) {
      uint64_t v7 = "Unknown";
    }
    if (this != (GPUTools::MTL *)128) {
      uint64_t v6 = v7;
    }
    uint64_t v8 = "MTLIndirectCommandTypeConcurrentDispatch";
    if (a2) {
      uint64_t v8 = "ConcurrentDispatch";
    }
    size_t v9 = "MTLIndirectCommandTypeConcurrentDispatchThreads";
    if (a2) {
      size_t v9 = "ConcurrentDispatchThreads";
    }
    if (this != (GPUTools::MTL *)64) {
      size_t v9 = "Unknown";
    }
    if (this != (GPUTools::MTL *)32) {
      uint64_t v8 = v9;
    }
    if ((uint64_t)this <= 127) {
      return v8;
    }
    else {
      return v6;
    }
  }
  else
  {
    switch((unint64_t)this)
    {
      case 1uLL:
        uint64_t v4 = "MTLIndirectCommandTypeDraw";
        size_t v5 = "Draw";
        goto LABEL_26;
      case 2uLL:
        uint64_t v4 = "MTLIndirectCommandTypeDrawIndexed";
        size_t v5 = "DrawIndexed";
        goto LABEL_26;
      case 4uLL:
        uint64_t v4 = "MTLIndirectCommandTypeDrawPatches";
        size_t v5 = "DrawPatches";
        goto LABEL_26;
      case 8uLL:
        uint64_t v4 = "MTLIndirectCommandTypeDrawIndexedPatches";
        size_t v5 = "DrawIndexedPatches";
LABEL_26:
        if (a2) {
          unint64_t result = v5;
        }
        else {
          unint64_t result = v4;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

const char *GPUTools::MTL::GetMTLIntersectionFunctionSignatureAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  if ((uint64_t)this > 15)
  {
    uint64_t v6 = "MTLIntersectionFunctionSignatureMaxLevels";
    if (a2) {
      uint64_t v6 = "MaxLevels";
    }
    uint64_t v7 = "MTLIntersectionFunctionSignatureCurveData";
    if (a2) {
      uint64_t v7 = "CurveData";
    }
    if (this != (GPUTools::MTL *)128) {
      uint64_t v7 = "Unknown";
    }
    if (this != (GPUTools::MTL *)64) {
      uint64_t v6 = v7;
    }
    uint64_t v8 = "MTLIntersectionFunctionSignaturePrimitiveMotion";
    if (a2) {
      uint64_t v8 = "PrimitiveMotion";
    }
    size_t v9 = "MTLIntersectionFunctionSignatureExtendedLimits";
    if (a2) {
      size_t v9 = "ExtendedLimits";
    }
    if (this != (GPUTools::MTL *)32) {
      size_t v9 = "Unknown";
    }
    if (this != (GPUTools::MTL *)16) {
      uint64_t v8 = v9;
    }
    if ((uint64_t)this <= 63) {
      return v8;
    }
    else {
      return v6;
    }
  }
  else
  {
    switch((unint64_t)this)
    {
      case 0uLL:
        uint64_t v4 = "MTLIntersectionFunctionSignatureNone";
        size_t v5 = "None";
        goto LABEL_27;
      case 1uLL:
        uint64_t v4 = "MTLIntersectionFunctionSignatureInstancing";
        size_t v5 = "Instancing";
        goto LABEL_27;
      case 2uLL:
        uint64_t v4 = "MTLIntersectionFunctionSignatureTriangleData";
        size_t v5 = "TriangleData";
        goto LABEL_27;
      case 4uLL:
        uint64_t v4 = "MTLIntersectionFunctionSignatureWorldSpaceData";
        size_t v5 = "WorldSpaceData";
        goto LABEL_27;
      case 8uLL:
        uint64_t v4 = "MTLIntersectionFunctionSignatureInstanceMotion";
        size_t v5 = "InstanceMotion";
LABEL_27:
        if (a2) {
          unint64_t result = v5;
        }
        else {
          unint64_t result = v4;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

const char *GPUTools::MTL::GetMTLLanguageVersionAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  if ((uint64_t)this < 0x20000)
  {
    uint64_t v6 = "MTLLanguageVersion1_0";
    if (a2) {
      uint64_t v6 = "1_0";
    }
    uint64_t v7 = "MTLLanguageVersion1_1";
    if (a2) {
      uint64_t v7 = "1_1";
    }
    uint64_t v8 = "MTLLanguageVersion1_2";
    if (a2) {
      uint64_t v8 = "1_2";
    }
    if (this == (GPUTools::MTL *)65538) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = "Unknown";
    }
    if (this != (GPUTools::MTL *)65537) {
      uint64_t v7 = v9;
    }
    BOOL v10 = this == (GPUTools::MTL *)0x10000;
    goto LABEL_29;
  }
  if ((uint64_t)this >= 196608)
  {
    uint64_t v6 = "MTLLanguageVersion3_0";
    if (a2) {
      uint64_t v6 = "3_0";
    }
    uint64_t v7 = "MTLLanguageVersion3_1";
    if (a2) {
      uint64_t v7 = "3_1";
    }
    BOOL v11 = "MTLLanguageVersion3_2";
    if (a2) {
      BOOL v11 = "3_2";
    }
    if (this == (GPUTools::MTL *)196610) {
      BOOL v12 = v11;
    }
    else {
      BOOL v12 = "Unknown";
    }
    if (this != (GPUTools::MTL *)196609) {
      uint64_t v7 = v12;
    }
    BOOL v10 = this == (GPUTools::MTL *)196608;
LABEL_29:
    if (v10) {
      return v6;
    }
    else {
      return v7;
    }
  }
  switch((unint64_t)this)
  {
    case 0x20000uLL:
      uint64_t v4 = "MTLLanguageVersion2_0";
      size_t v5 = "2_0";
      goto LABEL_36;
    case 0x20001uLL:
      uint64_t v4 = "MTLLanguageVersion2_1";
      size_t v5 = "2_1";
      goto LABEL_36;
    case 0x20002uLL:
      uint64_t v4 = "MTLLanguageVersion2_2";
      size_t v5 = "2_2";
      goto LABEL_36;
    case 0x20003uLL:
      uint64_t v4 = "MTLLanguageVersion2_3";
      size_t v5 = "2_3";
      goto LABEL_36;
    case 0x20004uLL:
      uint64_t v4 = "MTLLanguageVersion2_4";
      size_t v5 = "2_4";
LABEL_36:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLLibraryErrorAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 1uLL:
      uint64_t v2 = "MTLLibraryErrorUnsupported";
      int v3 = "Unsupported";
      goto LABEL_9;
    case 2uLL:
      uint64_t v2 = "MTLLibraryErrorInternal";
      int v3 = "Internal";
      goto LABEL_9;
    case 3uLL:
      uint64_t v2 = "MTLLibraryErrorCompileFailure";
      int v3 = "CompileFailure";
      goto LABEL_9;
    case 4uLL:
      uint64_t v2 = "MTLLibraryErrorCompileWarning";
      int v3 = "CompileWarning";
      goto LABEL_9;
    case 5uLL:
      uint64_t v2 = "MTLLibraryErrorFunctionNotFound";
      int v3 = "FunctionNotFound";
      goto LABEL_9;
    case 6uLL:
      uint64_t v2 = "MTLLibraryErrorFileNotFound";
      int v3 = "FileNotFound";
LABEL_9:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLLibraryOptimizationLevelAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLLibraryOptimizationLevelSize";
  if (a2) {
    int v3 = "Size";
  }
  uint64_t v4 = "MTLLibraryOptimizationLevelDefault";
  if (a2) {
    uint64_t v4 = "Default";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLLibraryTypeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLLibraryTypeExecutable";
  if (a2) {
    int v3 = "Executable";
  }
  uint64_t v4 = "MTLLibraryTypeDynamic";
  if (a2) {
    uint64_t v4 = "Dynamic";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLLoadActionAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLLoadActionDontCare";
  if (a2) {
    int v3 = "DontCare";
  }
  uint64_t v4 = "MTLLoadActionLoad";
  if (a2) {
    uint64_t v4 = "Load";
  }
  size_t v5 = "Clear";
  if (!a2) {
    size_t v5 = "MTLLoadActionClear";
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLLogLevelAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLLogLevelUndefined";
      int v3 = "Undefined";
      goto LABEL_9;
    case 1uLL:
      uint64_t v2 = "MTLLogLevelDebug";
      int v3 = "Debug";
      goto LABEL_9;
    case 2uLL:
      uint64_t v2 = "MTLLogLevelInfo";
      int v3 = "Info";
      goto LABEL_9;
    case 3uLL:
      uint64_t v2 = "MTLLogLevelNotice";
      int v3 = "Notice";
      goto LABEL_9;
    case 4uLL:
      uint64_t v2 = "MTLLogLevelError";
      int v3 = "Error";
      goto LABEL_9;
    case 5uLL:
      uint64_t v2 = "MTLLogLevelFault";
      int v3 = "Fault";
LABEL_9:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLLogStateErrorAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLLogStateErrorInvalidSize";
  if (a2) {
    int v3 = "InvalidSize";
  }
  uint64_t v4 = "MTLLogStateErrorInvalid";
  if (a2) {
    uint64_t v4 = "Invalid";
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLLogicOpAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLLogicOpClear";
      int v3 = "Clear";
      goto LABEL_19;
    case 1uLL:
      uint64_t v2 = "MTLLogicOpSet";
      int v3 = "Set";
      goto LABEL_19;
    case 2uLL:
      uint64_t v2 = "MTLLogicOpCopy";
      int v3 = "Copy";
      goto LABEL_19;
    case 3uLL:
      uint64_t v2 = "MTLLogicOpInverseCopy";
      int v3 = "InverseCopy";
      goto LABEL_19;
    case 4uLL:
      uint64_t v2 = "MTLLogicOpNoop";
      int v3 = "Noop";
      goto LABEL_19;
    case 5uLL:
      uint64_t v2 = "MTLLogicOpInverse";
      int v3 = "Inverse";
      goto LABEL_19;
    case 6uLL:
      uint64_t v2 = "MTLLogicOpAnd";
      int v3 = "And";
      goto LABEL_19;
    case 7uLL:
      uint64_t v2 = "MTLLogicOpNand";
      int v3 = "Nand";
      goto LABEL_19;
    case 8uLL:
      uint64_t v2 = "MTLLogicOpOr";
      int v3 = "Or";
      goto LABEL_19;
    case 9uLL:
      uint64_t v2 = "MTLLogicOpNor";
      int v3 = "Nor";
      goto LABEL_19;
    case 0xAuLL:
      uint64_t v2 = "MTLLogicOpXor";
      int v3 = "Xor";
      goto LABEL_19;
    case 0xBuLL:
      uint64_t v2 = "MTLLogicOpEquiv";
      int v3 = "Equiv";
      goto LABEL_19;
    case 0xCuLL:
      uint64_t v2 = "MTLLogicOpRevAnd";
      int v3 = "RevAnd";
      goto LABEL_19;
    case 0xDuLL:
      uint64_t v2 = "MTLLogicOpInvAnd";
      int v3 = "InvAnd";
      goto LABEL_19;
    case 0xEuLL:
      uint64_t v2 = "MTLLogicOpRevOr";
      int v3 = "RevOr";
      goto LABEL_19;
    case 0xFuLL:
      uint64_t v2 = "MTLLogicOpInvOr";
      int v3 = "InvOr";
LABEL_19:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLLogicOperationAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLLogicOperationClear";
      int v3 = "Clear";
      goto LABEL_19;
    case 1uLL:
      uint64_t v2 = "MTLLogicOperationSet";
      int v3 = "Set";
      goto LABEL_19;
    case 2uLL:
      uint64_t v2 = "MTLLogicOperationCopy";
      int v3 = "Copy";
      goto LABEL_19;
    case 3uLL:
      uint64_t v2 = "MTLLogicOperationInverseCopy";
      int v3 = "InverseCopy";
      goto LABEL_19;
    case 4uLL:
      uint64_t v2 = "MTLLogicOperationNoop";
      int v3 = "Noop";
      goto LABEL_19;
    case 5uLL:
      uint64_t v2 = "MTLLogicOperationInverse";
      int v3 = "Inverse";
      goto LABEL_19;
    case 6uLL:
      uint64_t v2 = "MTLLogicOperationAnd";
      int v3 = "And";
      goto LABEL_19;
    case 7uLL:
      uint64_t v2 = "MTLLogicOperationNand";
      int v3 = "Nand";
      goto LABEL_19;
    case 8uLL:
      uint64_t v2 = "MTLLogicOperationOr";
      int v3 = "Or";
      goto LABEL_19;
    case 9uLL:
      uint64_t v2 = "MTLLogicOperationNor";
      int v3 = "Nor";
      goto LABEL_19;
    case 0xAuLL:
      uint64_t v2 = "MTLLogicOperationXor";
      int v3 = "Xor";
      goto LABEL_19;
    case 0xBuLL:
      uint64_t v2 = "MTLLogicOperationEquiv";
      int v3 = "Equiv";
      goto LABEL_19;
    case 0xCuLL:
      uint64_t v2 = "MTLLogicOperationRevAnd";
      int v3 = "RevAnd";
      goto LABEL_19;
    case 0xDuLL:
      uint64_t v2 = "MTLLogicOperationInvAnd";
      int v3 = "InvAnd";
      goto LABEL_19;
    case 0xEuLL:
      uint64_t v2 = "MTLLogicOperationRevOr";
      int v3 = "RevOr";
      goto LABEL_19;
    case 0xFuLL:
      uint64_t v2 = "MTLLogicOperationInvOr";
      int v3 = "InvOr";
LABEL_19:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLMathFloatingPointFunctionsAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLMathFloatingPointFunctionsPrecise";
  if (a2) {
    int v3 = "Precise";
  }
  uint64_t v4 = "MTLMathFloatingPointFunctionsFast";
  if (a2) {
    uint64_t v4 = "Fast";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLMathModeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLMathModeSafe";
  if (a2) {
    int v3 = "Safe";
  }
  uint64_t v4 = "MTLMathModeRelaxed";
  if (a2) {
    uint64_t v4 = "Relaxed";
  }
  size_t v5 = "Fast";
  if (!a2) {
    size_t v5 = "MTLMathModeFast";
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLMatrixLayoutAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLMatrixLayoutRowMajor";
  if (a2) {
    int v3 = "RowMajor";
  }
  uint64_t v4 = "MTLMatrixLayoutColumnMajor";
  if (a2) {
    uint64_t v4 = "ColumnMajor";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLMeshTopologyKindAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLMeshTopologyKindNone";
      int v3 = "None";
      goto LABEL_7;
    case 1uLL:
      uint64_t v2 = "MTLMeshTopologyKindPoint";
      int v3 = "Point";
      goto LABEL_7;
    case 2uLL:
      uint64_t v2 = "MTLMeshTopologyKindLine";
      int v3 = "Line";
      goto LABEL_7;
    case 3uLL:
      uint64_t v2 = "MTLMeshTopologyKindTriangle";
      int v3 = "Triangle";
LABEL_7:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLMessageTypeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLMessageTypeWarning";
  if (a2) {
    int v3 = "Warning";
  }
  uint64_t v4 = "MTLMessageTypeError";
  if (a2) {
    uint64_t v4 = "Error";
  }
  size_t v5 = "DebugError";
  if (!a2) {
    size_t v5 = "MTLMessageTypeDebugError";
  }
  if (this == (GPUTools::MTL *)8) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)4) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)2) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLMotionBorderModeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLMotionBorderModeVanish";
  if (a2) {
    int v3 = "Vanish";
  }
  uint64_t v4 = "MTLMotionBorderModeClamp";
  if (a2) {
    uint64_t v4 = "Clamp";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLMultisampleDepthResolveFilterAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLMultisampleDepthResolveFilterSample0";
  if (a2) {
    int v3 = "Sample0";
  }
  uint64_t v4 = "MTLMultisampleDepthResolveFilterMin";
  if (a2) {
    uint64_t v4 = "Min";
  }
  size_t v5 = "Max";
  if (!a2) {
    size_t v5 = "MTLMultisampleDepthResolveFilterMax";
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLMultisampleStencilResolveFilterAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLMultisampleStencilResolveFilterSample0";
  if (a2) {
    int v3 = "Sample0";
  }
  uint64_t v4 = "MTLMultisampleStencilResolveFilterDepthResolvedSample";
  if (a2) {
    uint64_t v4 = "DepthResolvedSample";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLMutabilityAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLMutabilityImmutable";
  if (a2) {
    int v3 = "Immutable";
  }
  uint64_t v4 = "MTLMutabilityMutable";
  if (a2) {
    uint64_t v4 = "Mutable";
  }
  size_t v5 = "Default";
  if (!a2) {
    size_t v5 = "MTLMutabilityDefault";
  }
  if (!this) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)2) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLPatchTypeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLPatchTypeQuad";
  if (a2) {
    int v3 = "Quad";
  }
  uint64_t v4 = "MTLPatchTypeTriangle";
  if (a2) {
    uint64_t v4 = "Triangle";
  }
  size_t v5 = "None";
  if (!a2) {
    size_t v5 = "MTLPatchTypeNone";
  }
  if (!this) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)2) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLPipelineOptionAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  if ((uint64_t)this <= 0xFFFFFF)
  {
    if ((uint64_t)this >= 0x40000)
    {
      if ((uint64_t)this >= 0x200000)
      {
        BOOL v11 = "MTLPipelineOptionPrivateTraceBuffer";
        if (a2) {
          BOOL v11 = "PrivateTraceBuffer";
        }
        BOOL v12 = "MTLPipelineOptionPrivateCompileTimeStatistics";
        if (a2) {
          BOOL v12 = "PrivateCompileTimeStatistics";
        }
        uint64_t v16 = "MTLPipelineOptionPrivateFrameworkGeneratedReflection";
        if (a2) {
          uint64_t v16 = "PrivateFrameworkGeneratedReflection";
        }
        if (this != (GPUTools::MTL *)0x800000) {
          uint64_t v16 = "Unknown";
        }
        if (this != (GPUTools::MTL *)0x400000) {
          BOOL v12 = v16;
        }
        BOOL v14 = this == (GPUTools::MTL *)0x200000;
      }
      else
      {
        BOOL v11 = "MTLPipelineOptionPrivatePerformanceStatistics";
        if (a2) {
          BOOL v11 = "PrivatePerformanceStatistics";
        }
        BOOL v12 = "MTLPipelineOptionPrivatePostVertexDump";
        if (a2) {
          BOOL v12 = "PrivatePostVertexDump";
        }
        uint64_t v13 = "MTLPipelineOptionPrivateBufferAccessToVertexDescriptor";
        if (a2) {
          uint64_t v13 = "PrivateBufferAccessToVertexDescriptor";
        }
        if (this != (GPUTools::MTL *)0x100000) {
          uint64_t v13 = "Unknown";
        }
        if (this != (GPUTools::MTL *)0x80000) {
          BOOL v12 = v13;
        }
        BOOL v14 = this == (GPUTools::MTL *)0x40000;
      }
    }
    else
    {
      if ((uint64_t)this < 0x8000)
      {
        switch((unint64_t)this)
        {
          case 0uLL:
            uint64_t v4 = "MTLPipelineOptionNone";
            size_t v5 = "None";
            goto LABEL_77;
          case 1uLL:
            uint64_t v4 = "MTLPipelineOptionBindingInfo";
            size_t v5 = "BindingInfo";
            goto LABEL_77;
          case 2uLL:
            uint64_t v4 = "MTLPipelineOptionBufferTypeInfo";
            size_t v5 = "BufferTypeInfo";
            goto LABEL_77;
          case 4uLL:
            uint64_t v4 = "MTLPipelineOptionFailOnBinaryArchiveMiss";
            size_t v5 = "FailOnBinaryArchiveMiss";
            goto LABEL_77;
          default:
            return result;
        }
        return result;
      }
      BOOL v11 = "MTLPipelineOptionPrivateRequestDriverReflection";
      if (a2) {
        BOOL v11 = "PrivateRequestDriverReflection";
      }
      BOOL v12 = "MTLPipelineOptionPrivateBuiltInArguments";
      if (a2) {
        BOOL v12 = "PrivateBuiltInArguments";
      }
      int v15 = "MTLPipelineOptionPrivateFunctionWithNoReflection";
      if (a2) {
        int v15 = "PrivateFunctionWithNoReflection";
      }
      if (this != (GPUTools::MTL *)0x20000) {
        int v15 = "Unknown";
      }
      if (this != (GPUTools::MTL *)0x10000) {
        BOOL v12 = v15;
      }
      BOOL v14 = this == (GPUTools::MTL *)0x8000;
    }
    if (v14) {
      return v11;
    }
    else {
      return v12;
    }
  }
  if ((uint64_t)this > 0x3FFFFFFF)
  {
    if ((uint64_t)this > 0x3FFFFFFFFLL)
    {
      if (this != (GPUTools::MTL *)0x400000000)
      {
        uint64_t v6 = 0x800000000;
        uint64_t v7 = "MTLPipelineOptionPrivateShaderValidationChecksEnable";
        if (a2) {
          uint64_t v7 = "PrivateShaderValidationChecksEnable";
        }
        uint64_t v8 = 0x1000000000;
        size_t v9 = "MTLPipelineOptionPrivateShaderValidationChecksDisable";
        BOOL v10 = "PrivateShaderValidationChecksDisable";
        goto LABEL_62;
      }
      uint64_t v4 = "MTLPipelineOptionPrivateFailOnFSCacheMiss";
      size_t v5 = "PrivateFailOnFSCacheMiss";
    }
    else
    {
      if (this != (GPUTools::MTL *)0x40000000)
      {
        uint64_t v6 = 0x80000000;
        uint64_t v7 = "MTLPipelineOptionPrivateEnableResourceUsageInstrumentation";
        if (a2) {
          uint64_t v7 = "PrivateEnableResourceUsageInstrumentation";
        }
        uint64_t v8 = 0x200000000;
        size_t v9 = "MTLPipelineOptionPrivateForceLateReflection";
        BOOL v10 = "PrivateForceLateReflection";
        goto LABEL_62;
      }
      uint64_t v4 = "MTLPipelineOptionPrivateEnableResourcePatchingInstrumentation";
      size_t v5 = "PrivateEnableResourcePatchingInstrumentation";
    }
    goto LABEL_77;
  }
  if ((uint64_t)this > 0x7FFFFFF)
  {
    if (this != (GPUTools::MTL *)0x8000000)
    {
      uint64_t v6 = 0x10000000;
      uint64_t v7 = "MTLPipelineOptionPrivateInlinedSymbols";
      if (a2) {
        uint64_t v7 = "PrivateInlinedSymbols";
      }
      uint64_t v8 = 0x20000000;
      size_t v9 = "MTLPipelineOptionPrivateStitchingReflection";
      BOOL v10 = "PrivateStitchingReflection";
      goto LABEL_62;
    }
    uint64_t v4 = "MTLPipelineOptionEnableAssertions";
    size_t v5 = "EnableAssertions";
LABEL_77:
    if (a2) {
      return v5;
    }
    else {
      return v4;
    }
  }
  if (this == (GPUTools::MTL *)0x1000000)
  {
    uint64_t v4 = "MTLPipelineOptionPrivateDebugInstrumentation";
    size_t v5 = "PrivateDebugInstrumentation";
    goto LABEL_77;
  }
  uint64_t v6 = 0x2000000;
  uint64_t v7 = "MTLPipelineOptionPrivateAlmondRequest";
  if (a2) {
    uint64_t v7 = "PrivateAlmondRequest";
  }
  uint64_t v8 = 0x4000000;
  size_t v9 = "MTLPipelineOptionPrivateZeroOutFragmentShaderRTAI";
  BOOL v10 = "PrivateZeroOutFragmentShaderRTAI";
LABEL_62:
  if (a2) {
    size_t v9 = v10;
  }
  if (this == (GPUTools::MTL *)v8) {
    int v17 = v9;
  }
  else {
    int v17 = "Unknown";
  }
  if (this == (GPUTools::MTL *)v6) {
    return v7;
  }
  else {
    return v17;
  }
}

const char *GPUTools::MTL::GetMTLPixelFormatAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v4 = "MTLPixelFormatInvalid";
      size_t v5 = "Invalid";
      goto LABEL_287;
    case 1uLL:
      uint64_t v4 = "MTLPixelFormatA8Unorm";
      size_t v5 = "A8Unorm";
      goto LABEL_287;
    case 0xAuLL:
      uint64_t v4 = "MTLPixelFormatR8Unorm";
      size_t v5 = "R8Unorm";
      goto LABEL_287;
    case 0xBuLL:
      uint64_t v4 = "MTLPixelFormatR8Unorm_sRGB";
      size_t v5 = "R8Unorm_sRGB";
      goto LABEL_287;
    case 0xCuLL:
      uint64_t v4 = "MTLPixelFormatR8Snorm";
      size_t v5 = "R8Snorm";
      goto LABEL_287;
    case 0xDuLL:
      uint64_t v4 = "MTLPixelFormatR8Uint";
      size_t v5 = "R8Uint";
      goto LABEL_287;
    case 0xEuLL:
      uint64_t v4 = "MTLPixelFormatR8Sint";
      size_t v5 = "R8Sint";
      goto LABEL_287;
    case 0x14uLL:
      uint64_t v4 = "MTLPixelFormatR16Unorm";
      size_t v5 = "R16Unorm";
      goto LABEL_287;
    case 0x16uLL:
      uint64_t v4 = "MTLPixelFormatR16Snorm";
      size_t v5 = "R16Snorm";
      goto LABEL_287;
    case 0x17uLL:
      uint64_t v4 = "MTLPixelFormatR16Uint";
      size_t v5 = "R16Uint";
      goto LABEL_287;
    case 0x18uLL:
      uint64_t v4 = "MTLPixelFormatR16Sint";
      size_t v5 = "R16Sint";
      goto LABEL_287;
    case 0x19uLL:
      uint64_t v4 = "MTLPixelFormatR16Float";
      size_t v5 = "R16Float";
      goto LABEL_287;
    case 0x1AuLL:
      uint64_t v4 = "MTLPixelFormatR16Bfloat";
      size_t v5 = "R16Bfloat";
      goto LABEL_287;
    case 0x1EuLL:
      uint64_t v4 = "MTLPixelFormatRG8Unorm";
      size_t v5 = "RG8Unorm";
      goto LABEL_287;
    case 0x1FuLL:
      uint64_t v4 = "MTLPixelFormatRG8Unorm_sRGB";
      size_t v5 = "RG8Unorm_sRGB";
      goto LABEL_287;
    case 0x20uLL:
      uint64_t v4 = "MTLPixelFormatRG8Snorm";
      size_t v5 = "RG8Snorm";
      goto LABEL_287;
    case 0x21uLL:
      uint64_t v4 = "MTLPixelFormatRG8Uint";
      size_t v5 = "RG8Uint";
      goto LABEL_287;
    case 0x22uLL:
      uint64_t v4 = "MTLPixelFormatRG8Sint";
      size_t v5 = "RG8Sint";
      goto LABEL_287;
    case 0x28uLL:
      uint64_t v4 = "MTLPixelFormatB5G6R5Unorm";
      size_t v5 = "B5G6R5Unorm";
      goto LABEL_287;
    case 0x29uLL:
      uint64_t v4 = "MTLPixelFormatA1BGR5Unorm";
      size_t v5 = "A1BGR5Unorm";
      goto LABEL_287;
    case 0x2AuLL:
      uint64_t v4 = "MTLPixelFormatABGR4Unorm";
      size_t v5 = "ABGR4Unorm";
      goto LABEL_287;
    case 0x2BuLL:
      uint64_t v4 = "MTLPixelFormatBGR5A1Unorm";
      size_t v5 = "BGR5A1Unorm";
      goto LABEL_287;
    case 0x2CuLL:
      uint64_t v4 = "MTLPixelFormatBGRA4Unorm";
      size_t v5 = "BGRA4Unorm";
      goto LABEL_287;
    case 0x35uLL:
      uint64_t v4 = "MTLPixelFormatR32Uint";
      size_t v5 = "R32Uint";
      goto LABEL_287;
    case 0x36uLL:
      uint64_t v4 = "MTLPixelFormatR32Sint";
      size_t v5 = "R32Sint";
      goto LABEL_287;
    case 0x37uLL:
      uint64_t v4 = "MTLPixelFormatR32Float";
      size_t v5 = "R32Float";
      goto LABEL_287;
    case 0x3CuLL:
      uint64_t v4 = "MTLPixelFormatRG16Unorm";
      size_t v5 = "RG16Unorm";
      goto LABEL_287;
    case 0x3EuLL:
      uint64_t v4 = "MTLPixelFormatRG16Snorm";
      size_t v5 = "RG16Snorm";
      goto LABEL_287;
    case 0x3FuLL:
      uint64_t v4 = "MTLPixelFormatRG16Uint";
      size_t v5 = "RG16Uint";
      goto LABEL_287;
    case 0x40uLL:
      uint64_t v4 = "MTLPixelFormatRG16Sint";
      size_t v5 = "RG16Sint";
      goto LABEL_287;
    case 0x41uLL:
      uint64_t v4 = "MTLPixelFormatRG16Float";
      size_t v5 = "RG16Float";
      goto LABEL_287;
    case 0x42uLL:
      uint64_t v4 = "MTLPixelFormatRG16Bfloat";
      size_t v5 = "RG16Bfloat";
      goto LABEL_287;
    case 0x46uLL:
      uint64_t v4 = "MTLPixelFormatRGBA8Unorm";
      size_t v5 = "RGBA8Unorm";
      goto LABEL_287;
    case 0x47uLL:
      uint64_t v4 = "MTLPixelFormatRGBA8Unorm_sRGB";
      size_t v5 = "RGBA8Unorm_sRGB";
      goto LABEL_287;
    case 0x48uLL:
      uint64_t v4 = "MTLPixelFormatRGBA8Snorm";
      size_t v5 = "RGBA8Snorm";
      goto LABEL_287;
    case 0x49uLL:
      uint64_t v4 = "MTLPixelFormatRGBA8Uint";
      size_t v5 = "RGBA8Uint";
      goto LABEL_287;
    case 0x4AuLL:
      uint64_t v4 = "MTLPixelFormatRGBA8Sint";
      size_t v5 = "RGBA8Sint";
      goto LABEL_287;
    case 0x50uLL:
      uint64_t v4 = "MTLPixelFormatBGRA8Unorm";
      size_t v5 = "BGRA8Unorm";
      goto LABEL_287;
    case 0x51uLL:
      uint64_t v4 = "MTLPixelFormatBGRA8Unorm_sRGB";
      size_t v5 = "BGRA8Unorm_sRGB";
      goto LABEL_287;
    case 0x54uLL:
      uint64_t v4 = "MTLPixelFormatARGB8Unorm";
      size_t v5 = "ARGB8Unorm";
      goto LABEL_287;
    case 0x55uLL:
      uint64_t v4 = "MTLPixelFormatARGB8Unorm_sRGB";
      size_t v5 = "ARGB8Unorm_sRGB";
      goto LABEL_287;
    case 0x5AuLL:
      uint64_t v4 = "MTLPixelFormatRGB10A2Unorm";
      size_t v5 = "RGB10A2Unorm";
      goto LABEL_287;
    case 0x5BuLL:
      uint64_t v4 = "MTLPixelFormatRGB10A2Uint";
      size_t v5 = "RGB10A2Uint";
      goto LABEL_287;
    case 0x5CuLL:
      uint64_t v4 = "MTLPixelFormatRG11B10Float";
      size_t v5 = "RG11B10Float";
      goto LABEL_287;
    case 0x5DuLL:
      uint64_t v4 = "MTLPixelFormatRGB9E5Float";
      size_t v5 = "RGB9E5Float";
      goto LABEL_287;
    case 0x5EuLL:
      uint64_t v4 = "MTLPixelFormatBGR10A2Unorm";
      size_t v5 = "BGR10A2Unorm";
      goto LABEL_287;
    case 0x67uLL:
      uint64_t v4 = "MTLPixelFormatRG32Uint";
      size_t v5 = "RG32Uint";
      goto LABEL_287;
    case 0x68uLL:
      uint64_t v4 = "MTLPixelFormatRG32Sint";
      size_t v5 = "RG32Sint";
      goto LABEL_287;
    case 0x69uLL:
      uint64_t v4 = "MTLPixelFormatRG32Float";
      size_t v5 = "RG32Float";
      goto LABEL_287;
    case 0x6EuLL:
      uint64_t v4 = "MTLPixelFormatRGBA16Unorm";
      size_t v5 = "RGBA16Unorm";
      goto LABEL_287;
    case 0x70uLL:
      uint64_t v4 = "MTLPixelFormatRGBA16Snorm";
      size_t v5 = "RGBA16Snorm";
      goto LABEL_287;
    case 0x71uLL:
      uint64_t v4 = "MTLPixelFormatRGBA16Uint";
      size_t v5 = "RGBA16Uint";
      goto LABEL_287;
    case 0x72uLL:
      uint64_t v4 = "MTLPixelFormatRGBA16Sint";
      size_t v5 = "RGBA16Sint";
      goto LABEL_287;
    case 0x73uLL:
      uint64_t v4 = "MTLPixelFormatRGBA16Float";
      size_t v5 = "RGBA16Float";
      goto LABEL_287;
    case 0x74uLL:
      uint64_t v4 = "MTLPixelFormatRGBA16Bfloat";
      size_t v5 = "RGBA16Bfloat";
      goto LABEL_287;
    case 0x7BuLL:
      uint64_t v4 = "MTLPixelFormatRGBA32Uint";
      size_t v5 = "RGBA32Uint";
      goto LABEL_287;
    case 0x7CuLL:
      uint64_t v4 = "MTLPixelFormatRGBA32Sint";
      size_t v5 = "RGBA32Sint";
      goto LABEL_287;
    case 0x7DuLL:
      uint64_t v4 = "MTLPixelFormatRGBA32Float";
      size_t v5 = "RGBA32Float";
      goto LABEL_287;
    case 0x82uLL:
      uint64_t v4 = "MTLPixelFormatBC1_RGBA";
      size_t v5 = "BC1_RGBA";
      goto LABEL_287;
    case 0x83uLL:
      uint64_t v4 = "MTLPixelFormatBC1_RGBA_sRGB";
      size_t v5 = "BC1_RGBA_sRGB";
      goto LABEL_287;
    case 0x84uLL:
      uint64_t v4 = "MTLPixelFormatBC2_RGBA";
      size_t v5 = "BC2_RGBA";
      goto LABEL_287;
    case 0x85uLL:
      uint64_t v4 = "MTLPixelFormatBC2_RGBA_sRGB";
      size_t v5 = "BC2_RGBA_sRGB";
      goto LABEL_287;
    case 0x86uLL:
      uint64_t v4 = "MTLPixelFormatBC3_RGBA";
      size_t v5 = "BC3_RGBA";
      goto LABEL_287;
    case 0x87uLL:
      uint64_t v4 = "MTLPixelFormatBC3_RGBA_sRGB";
      size_t v5 = "BC3_RGBA_sRGB";
      goto LABEL_287;
    case 0x8CuLL:
      uint64_t v4 = "MTLPixelFormatBC4_RUnorm";
      size_t v5 = "BC4_RUnorm";
      goto LABEL_287;
    case 0x8DuLL:
      uint64_t v4 = "MTLPixelFormatBC4_RSnorm";
      size_t v5 = "BC4_RSnorm";
      goto LABEL_287;
    case 0x8EuLL:
      uint64_t v4 = "MTLPixelFormatBC5_RGUnorm";
      size_t v5 = "BC5_RGUnorm";
      goto LABEL_287;
    case 0x8FuLL:
      uint64_t v4 = "MTLPixelFormatBC5_RGSnorm";
      size_t v5 = "BC5_RGSnorm";
      goto LABEL_287;
    case 0x96uLL:
      uint64_t v4 = "MTLPixelFormatBC6H_RGBFloat";
      size_t v5 = "BC6H_RGBFloat";
      goto LABEL_287;
    case 0x97uLL:
      uint64_t v4 = "MTLPixelFormatBC6H_RGBUfloat";
      size_t v5 = "BC6H_RGBUfloat";
      goto LABEL_287;
    case 0x98uLL:
      uint64_t v4 = "MTLPixelFormatBC7_RGBAUnorm";
      size_t v5 = "BC7_RGBAUnorm";
      goto LABEL_287;
    case 0x99uLL:
      uint64_t v4 = "MTLPixelFormatBC7_RGBAUnorm_sRGB";
      size_t v5 = "BC7_RGBAUnorm_sRGB";
      goto LABEL_287;
    case 0xA0uLL:
      uint64_t v4 = "MTLPixelFormatPVRTC_RGB_2BPP";
      size_t v5 = "PVRTC_RGB_2BPP";
      goto LABEL_287;
    case 0xA1uLL:
      uint64_t v4 = "MTLPixelFormatPVRTC_RGB_2BPP_sRGB";
      size_t v5 = "PVRTC_RGB_2BPP_sRGB";
      goto LABEL_287;
    case 0xA2uLL:
      uint64_t v4 = "MTLPixelFormatPVRTC_RGB_4BPP";
      size_t v5 = "PVRTC_RGB_4BPP";
      goto LABEL_287;
    case 0xA3uLL:
      uint64_t v4 = "MTLPixelFormatPVRTC_RGB_4BPP_sRGB";
      size_t v5 = "PVRTC_RGB_4BPP_sRGB";
      goto LABEL_287;
    case 0xA4uLL:
      uint64_t v4 = "MTLPixelFormatPVRTC_RGBA_2BPP";
      size_t v5 = "PVRTC_RGBA_2BPP";
      goto LABEL_287;
    case 0xA5uLL:
      uint64_t v4 = "MTLPixelFormatPVRTC_RGBA_2BPP_sRGB";
      size_t v5 = "PVRTC_RGBA_2BPP_sRGB";
      goto LABEL_287;
    case 0xA6uLL:
      uint64_t v4 = "MTLPixelFormatPVRTC_RGBA_4BPP";
      size_t v5 = "PVRTC_RGBA_4BPP";
      goto LABEL_287;
    case 0xA7uLL:
      uint64_t v4 = "MTLPixelFormatPVRTC_RGBA_4BPP_sRGB";
      size_t v5 = "PVRTC_RGBA_4BPP_sRGB";
      goto LABEL_287;
    case 0xAAuLL:
      uint64_t v4 = "MTLPixelFormatEAC_R11Unorm";
      size_t v5 = "EAC_R11Unorm";
      goto LABEL_287;
    case 0xACuLL:
      uint64_t v4 = "MTLPixelFormatEAC_R11Snorm";
      size_t v5 = "EAC_R11Snorm";
      goto LABEL_287;
    case 0xAEuLL:
      uint64_t v4 = "MTLPixelFormatEAC_RG11Unorm";
      size_t v5 = "EAC_RG11Unorm";
      goto LABEL_287;
    case 0xB0uLL:
      uint64_t v4 = "MTLPixelFormatEAC_RG11Snorm";
      size_t v5 = "EAC_RG11Snorm";
      goto LABEL_287;
    case 0xB2uLL:
      uint64_t v4 = "MTLPixelFormatEAC_RGBA8";
      size_t v5 = "EAC_RGBA8";
      goto LABEL_287;
    case 0xB3uLL:
      uint64_t v4 = "MTLPixelFormatEAC_RGBA8_sRGB";
      size_t v5 = "EAC_RGBA8_sRGB";
      goto LABEL_287;
    case 0xB4uLL:
      uint64_t v4 = "MTLPixelFormatETC2_RGB8";
      size_t v5 = "ETC2_RGB8";
      goto LABEL_287;
    case 0xB5uLL:
      uint64_t v4 = "MTLPixelFormatETC2_RGB8_sRGB";
      size_t v5 = "ETC2_RGB8_sRGB";
      goto LABEL_287;
    case 0xB6uLL:
      uint64_t v4 = "MTLPixelFormatETC2_RGB8A1";
      size_t v5 = "ETC2_RGB8A1";
      goto LABEL_287;
    case 0xB7uLL:
      uint64_t v4 = "MTLPixelFormatETC2_RGB8A1_sRGB";
      size_t v5 = "ETC2_RGB8A1_sRGB";
      goto LABEL_287;
    case 0xB9uLL:
      uint64_t v4 = "MTLPixelFormatASTC_4x2_sRGB";
      size_t v5 = "ASTC_4x2_sRGB";
      goto LABEL_287;
    case 0xBAuLL:
      uint64_t v4 = "MTLPixelFormatASTC_4x4_sRGB";
      size_t v5 = "ASTC_4x4_sRGB";
      goto LABEL_287;
    case 0xBBuLL:
      uint64_t v4 = "MTLPixelFormatASTC_5x4_sRGB";
      size_t v5 = "ASTC_5x4_sRGB";
      goto LABEL_287;
    case 0xBCuLL:
      uint64_t v4 = "MTLPixelFormatASTC_5x5_sRGB";
      size_t v5 = "ASTC_5x5_sRGB";
      goto LABEL_287;
    case 0xBDuLL:
      uint64_t v4 = "MTLPixelFormatASTC_6x5_sRGB";
      size_t v5 = "ASTC_6x5_sRGB";
      goto LABEL_287;
    case 0xBEuLL:
      uint64_t v4 = "MTLPixelFormatASTC_6x6_sRGB";
      size_t v5 = "ASTC_6x6_sRGB";
      goto LABEL_287;
    case 0xBFuLL:
      uint64_t v4 = "MTLPixelFormatASTC_8x4_sRGB";
      size_t v5 = "ASTC_8x4_sRGB";
      goto LABEL_287;
    case 0xC0uLL:
      uint64_t v4 = "MTLPixelFormatASTC_8x5_sRGB";
      size_t v5 = "ASTC_8x5_sRGB";
      goto LABEL_287;
    case 0xC1uLL:
      uint64_t v4 = "MTLPixelFormatASTC_8x6_sRGB";
      size_t v5 = "ASTC_8x6_sRGB";
      goto LABEL_287;
    case 0xC2uLL:
      uint64_t v4 = "MTLPixelFormatASTC_8x8_sRGB";
      size_t v5 = "ASTC_8x8_sRGB";
      goto LABEL_287;
    case 0xC3uLL:
      uint64_t v4 = "MTLPixelFormatASTC_10x5_sRGB";
      size_t v5 = "ASTC_10x5_sRGB";
      goto LABEL_287;
    case 0xC4uLL:
      uint64_t v4 = "MTLPixelFormatASTC_10x6_sRGB";
      size_t v5 = "ASTC_10x6_sRGB";
      goto LABEL_287;
    case 0xC5uLL:
      uint64_t v4 = "MTLPixelFormatASTC_10x8_sRGB";
      size_t v5 = "ASTC_10x8_sRGB";
      goto LABEL_287;
    case 0xC6uLL:
      uint64_t v4 = "MTLPixelFormatASTC_10x10_sRGB";
      size_t v5 = "ASTC_10x10_sRGB";
      goto LABEL_287;
    case 0xC7uLL:
      uint64_t v4 = "MTLPixelFormatASTC_12x10_sRGB";
      size_t v5 = "ASTC_12x10_sRGB";
      goto LABEL_287;
    case 0xC8uLL:
      uint64_t v4 = "MTLPixelFormatASTC_12x12_sRGB";
      size_t v5 = "ASTC_12x12_sRGB";
      goto LABEL_287;
    case 0xCBuLL:
      uint64_t v4 = "MTLPixelFormatASTC_4x2_LDR";
      size_t v5 = "ASTC_4x2_LDR";
      goto LABEL_287;
    case 0xCCuLL:
      uint64_t v4 = "MTLPixelFormatASTC_4x4_LDR";
      size_t v5 = "ASTC_4x4_LDR";
      goto LABEL_287;
    case 0xCDuLL:
      uint64_t v4 = "MTLPixelFormatASTC_5x4_LDR";
      size_t v5 = "ASTC_5x4_LDR";
      goto LABEL_287;
    case 0xCEuLL:
      uint64_t v4 = "MTLPixelFormatASTC_5x5_LDR";
      size_t v5 = "ASTC_5x5_LDR";
      goto LABEL_287;
    case 0xCFuLL:
      uint64_t v4 = "MTLPixelFormatASTC_6x5_LDR";
      size_t v5 = "ASTC_6x5_LDR";
      goto LABEL_287;
    case 0xD0uLL:
      uint64_t v4 = "MTLPixelFormatASTC_6x6_LDR";
      size_t v5 = "ASTC_6x6_LDR";
      goto LABEL_287;
    case 0xD1uLL:
      uint64_t v4 = "MTLPixelFormatASTC_8x4_LDR";
      size_t v5 = "ASTC_8x4_LDR";
      goto LABEL_287;
    case 0xD2uLL:
      uint64_t v4 = "MTLPixelFormatASTC_8x5_LDR";
      size_t v5 = "ASTC_8x5_LDR";
      goto LABEL_287;
    case 0xD3uLL:
      uint64_t v4 = "MTLPixelFormatASTC_8x6_LDR";
      size_t v5 = "ASTC_8x6_LDR";
      goto LABEL_287;
    case 0xD4uLL:
      uint64_t v4 = "MTLPixelFormatASTC_8x8_LDR";
      size_t v5 = "ASTC_8x8_LDR";
      goto LABEL_287;
    case 0xD5uLL:
      uint64_t v4 = "MTLPixelFormatASTC_10x5_LDR";
      size_t v5 = "ASTC_10x5_LDR";
      goto LABEL_287;
    case 0xD6uLL:
      uint64_t v4 = "MTLPixelFormatASTC_10x6_LDR";
      size_t v5 = "ASTC_10x6_LDR";
      goto LABEL_287;
    case 0xD7uLL:
      uint64_t v4 = "MTLPixelFormatASTC_10x8_LDR";
      size_t v5 = "ASTC_10x8_LDR";
      goto LABEL_287;
    case 0xD8uLL:
      uint64_t v4 = "MTLPixelFormatASTC_10x10_LDR";
      size_t v5 = "ASTC_10x10_LDR";
      goto LABEL_287;
    case 0xD9uLL:
      uint64_t v4 = "MTLPixelFormatASTC_12x10_LDR";
      size_t v5 = "ASTC_12x10_LDR";
      goto LABEL_287;
    case 0xDAuLL:
      uint64_t v4 = "MTLPixelFormatASTC_12x12_LDR";
      size_t v5 = "ASTC_12x12_LDR";
      goto LABEL_287;
    case 0xDDuLL:
      uint64_t v4 = "MTLPixelFormatASTC_4x2_HDR";
      size_t v5 = "ASTC_4x2_HDR";
      goto LABEL_287;
    case 0xDEuLL:
      uint64_t v4 = "MTLPixelFormatASTC_4x4_HDR";
      size_t v5 = "ASTC_4x4_HDR";
      goto LABEL_287;
    case 0xDFuLL:
      uint64_t v4 = "MTLPixelFormatASTC_5x4_HDR";
      size_t v5 = "ASTC_5x4_HDR";
      goto LABEL_287;
    case 0xE0uLL:
      uint64_t v4 = "MTLPixelFormatASTC_5x5_HDR";
      size_t v5 = "ASTC_5x5_HDR";
      goto LABEL_287;
    case 0xE1uLL:
      uint64_t v4 = "MTLPixelFormatASTC_6x5_HDR";
      size_t v5 = "ASTC_6x5_HDR";
      goto LABEL_287;
    case 0xE2uLL:
      uint64_t v4 = "MTLPixelFormatASTC_6x6_HDR";
      size_t v5 = "ASTC_6x6_HDR";
      goto LABEL_287;
    case 0xE3uLL:
      uint64_t v4 = "MTLPixelFormatASTC_8x4_HDR";
      size_t v5 = "ASTC_8x4_HDR";
      goto LABEL_287;
    case 0xE4uLL:
      uint64_t v4 = "MTLPixelFormatASTC_8x5_HDR";
      size_t v5 = "ASTC_8x5_HDR";
      goto LABEL_287;
    case 0xE5uLL:
      uint64_t v4 = "MTLPixelFormatASTC_8x6_HDR";
      size_t v5 = "ASTC_8x6_HDR";
      goto LABEL_287;
    case 0xE6uLL:
      uint64_t v4 = "MTLPixelFormatASTC_8x8_HDR";
      size_t v5 = "ASTC_8x8_HDR";
      goto LABEL_287;
    case 0xE7uLL:
      uint64_t v4 = "MTLPixelFormatASTC_10x5_HDR";
      size_t v5 = "ASTC_10x5_HDR";
      goto LABEL_287;
    case 0xE8uLL:
      uint64_t v4 = "MTLPixelFormatASTC_10x6_HDR";
      size_t v5 = "ASTC_10x6_HDR";
      goto LABEL_287;
    case 0xE9uLL:
      uint64_t v4 = "MTLPixelFormatASTC_10x8_HDR";
      size_t v5 = "ASTC_10x8_HDR";
      goto LABEL_287;
    case 0xEAuLL:
      uint64_t v4 = "MTLPixelFormatASTC_10x10_HDR";
      size_t v5 = "ASTC_10x10_HDR";
      goto LABEL_287;
    case 0xEBuLL:
      uint64_t v4 = "MTLPixelFormatASTC_12x10_HDR";
      size_t v5 = "ASTC_12x10_HDR";
      goto LABEL_287;
    case 0xECuLL:
      uint64_t v4 = "MTLPixelFormatASTC_12x12_HDR";
      size_t v5 = "ASTC_12x12_HDR";
      goto LABEL_287;
    case 0xF0uLL:
      uint64_t v4 = "MTLPixelFormatGBGR422";
      size_t v5 = "GBGR422";
      goto LABEL_287;
    case 0xF1uLL:
      uint64_t v4 = "MTLPixelFormatBGRG422";
      size_t v5 = "BGRG422";
      goto LABEL_287;
    case 0xFAuLL:
      uint64_t v4 = "MTLPixelFormatDepth16Unorm";
      size_t v5 = "Depth16Unorm";
      goto LABEL_287;
    case 0xFCuLL:
      uint64_t v4 = "MTLPixelFormatDepth32Float";
      size_t v5 = "Depth32Float";
      goto LABEL_287;
    case 0xFDuLL:
      uint64_t v4 = "MTLPixelFormatStencil8";
      size_t v5 = "Stencil8";
      goto LABEL_287;
    case 0xFFuLL:
      uint64_t v4 = "MTLPixelFormatDepth24Unorm_Stencil8";
      size_t v5 = "Depth24Unorm_Stencil8";
      goto LABEL_287;
    case 0x104uLL:
      uint64_t v4 = "MTLPixelFormatDepth32Float_Stencil8";
      size_t v5 = "Depth32Float_Stencil8";
      goto LABEL_287;
    case 0x105uLL:
      uint64_t v4 = "MTLPixelFormatX32_Stencil8";
      size_t v5 = "X32_Stencil8";
      goto LABEL_287;
    case 0x106uLL:
      uint64_t v4 = "MTLPixelFormatX24_Stencil8";
      size_t v5 = "X24_Stencil8";
      goto LABEL_287;
    case 0x12CuLL:
      uint64_t v4 = "MTLPixelFormatRGBX8Unorm";
      size_t v5 = "RGBX8Unorm";
      goto LABEL_287;
    case 0x12DuLL:
      uint64_t v4 = "MTLPixelFormatRGBX8Unorm_sRGB";
      size_t v5 = "RGBX8Unorm_sRGB";
      goto LABEL_287;
    case 0x12EuLL:
      uint64_t v4 = "MTLPixelFormatRGBX8Snorm";
      size_t v5 = "RGBX8Snorm";
      goto LABEL_287;
    case 0x12FuLL:
      uint64_t v4 = "MTLPixelFormatRGBX8Uint";
      size_t v5 = "RGBX8Uint";
      goto LABEL_287;
    case 0x130uLL:
      uint64_t v4 = "MTLPixelFormatRGBX8Sint";
      size_t v5 = "RGBX8Sint";
      goto LABEL_287;
    case 0x139uLL:
      uint64_t v4 = "MTLPixelFormatRGBX16Uint";
      size_t v5 = "RGBX16Uint";
      goto LABEL_287;
    case 0x13AuLL:
      uint64_t v4 = "MTLPixelFormatRGBX16Sint";
      size_t v5 = "RGBX16Sint";
      goto LABEL_287;
    case 0x13BuLL:
      uint64_t v4 = "MTLPixelFormatRGBX16Float";
      size_t v5 = "RGBX16Float";
      goto LABEL_287;
    case 0x143uLL:
      uint64_t v4 = "MTLPixelFormatRGBX32Uint";
      size_t v5 = "RGBX32Uint";
      goto LABEL_287;
    case 0x144uLL:
      uint64_t v4 = "MTLPixelFormatRGBX32Sint";
      size_t v5 = "RGBX32Sint";
      goto LABEL_287;
    case 0x145uLL:
      uint64_t v4 = "MTLPixelFormatRGBX32Float";
      size_t v5 = "RGBX32Float";
      goto LABEL_287;
    case 0x1F4uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR8_420_2P";
      size_t v5 = "YCBCR8_420_2P";
      goto LABEL_287;
    case 0x1F5uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR8_422_1P";
      size_t v5 = "YCBCR8_422_1P";
      goto LABEL_287;
    case 0x1F6uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR8_422_2P";
      size_t v5 = "YCBCR8_422_2P";
      goto LABEL_287;
    case 0x1F7uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR8_444_2P";
      size_t v5 = "YCBCR8_444_2P";
      goto LABEL_287;
    case 0x1F8uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_444_1P";
      size_t v5 = "YCBCR10_444_1P";
      goto LABEL_287;
    case 0x1F9uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_420_2P";
      size_t v5 = "YCBCR10_420_2P";
      goto LABEL_287;
    case 0x1FAuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_422_2P";
      size_t v5 = "YCBCR10_422_2P";
      goto LABEL_287;
    case 0x1FBuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_444_2P";
      size_t v5 = "YCBCR10_444_2P";
      goto LABEL_287;
    case 0x1FCuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_420_2P_PACKED";
      size_t v5 = "YCBCR10_420_2P_PACKED";
      goto LABEL_287;
    case 0x1FDuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_422_2P_PACKED";
      size_t v5 = "YCBCR10_422_2P_PACKED";
      goto LABEL_287;
    case 0x1FEuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_444_2P_PACKED";
      size_t v5 = "YCBCR10_444_2P_PACKED";
      goto LABEL_287;
    case 0x208uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR8_420_2P_sRGB";
      size_t v5 = "YCBCR8_420_2P_sRGB";
      goto LABEL_287;
    case 0x209uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR8_422_1P_sRGB";
      size_t v5 = "YCBCR8_422_1P_sRGB";
      goto LABEL_287;
    case 0x20AuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR8_422_2P_sRGB";
      size_t v5 = "YCBCR8_422_2P_sRGB";
      goto LABEL_287;
    case 0x20BuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR8_444_2P_sRGB";
      size_t v5 = "YCBCR8_444_2P_sRGB";
      goto LABEL_287;
    case 0x20CuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_444_1P_sRGB";
      size_t v5 = "YCBCR10_444_1P_sRGB";
      goto LABEL_287;
    case 0x20DuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_420_2P_sRGB";
      size_t v5 = "YCBCR10_420_2P_sRGB";
      goto LABEL_287;
    case 0x20EuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_422_2P_sRGB";
      size_t v5 = "YCBCR10_422_2P_sRGB";
      goto LABEL_287;
    case 0x20FuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_444_2P_sRGB";
      size_t v5 = "YCBCR10_444_2P_sRGB";
      goto LABEL_287;
    case 0x210uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_420_2P_PACKED_sRGB";
      size_t v5 = "YCBCR10_420_2P_PACKED_sRGB";
      goto LABEL_287;
    case 0x211uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_422_2P_PACKED_sRGB";
      size_t v5 = "YCBCR10_422_2P_PACKED_sRGB";
      goto LABEL_287;
    case 0x212uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_444_2P_PACKED_sRGB";
      size_t v5 = "YCBCR10_444_2P_PACKED_sRGB";
      goto LABEL_287;
    case 0x21CuLL:
      uint64_t v4 = "MTLPixelFormatRGB8_420_2P";
      size_t v5 = "RGB8_420_2P";
      goto LABEL_287;
    case 0x21DuLL:
      uint64_t v4 = "MTLPixelFormatRGB8_422_2P";
      size_t v5 = "RGB8_422_2P";
      goto LABEL_287;
    case 0x21EuLL:
      uint64_t v4 = "MTLPixelFormatRGB8_444_2P";
      size_t v5 = "RGB8_444_2P";
      goto LABEL_287;
    case 0x21FuLL:
      uint64_t v4 = "MTLPixelFormatRGB10_420_2P";
      size_t v5 = "RGB10_420_2P";
      goto LABEL_287;
    case 0x220uLL:
      uint64_t v4 = "MTLPixelFormatRGB10_422_2P";
      size_t v5 = "RGB10_422_2P";
      goto LABEL_287;
    case 0x221uLL:
      uint64_t v4 = "MTLPixelFormatRGB10_444_2P";
      size_t v5 = "RGB10_444_2P";
      goto LABEL_287;
    case 0x222uLL:
      uint64_t v4 = "MTLPixelFormatRGB10_420_2P_PACKED";
      size_t v5 = "RGB10_420_2P_PACKED";
      goto LABEL_287;
    case 0x223uLL:
      uint64_t v4 = "MTLPixelFormatRGB10_422_2P_PACKED";
      size_t v5 = "RGB10_422_2P_PACKED";
      goto LABEL_287;
    case 0x224uLL:
      uint64_t v4 = "MTLPixelFormatRGB10_444_2P_PACKED";
      size_t v5 = "RGB10_444_2P_PACKED";
      goto LABEL_287;
    case 0x226uLL:
      uint64_t v4 = "MTLPixelFormatRGB10A8_2P_XR10";
      size_t v5 = "RGB10A8_2P_XR10";
      goto LABEL_287;
    case 0x227uLL:
      uint64_t v4 = "MTLPixelFormatRGB10A8_2P_XR10_sRGB";
      size_t v5 = "RGB10A8_2P_XR10_sRGB";
      goto LABEL_287;
    case 0x228uLL:
      uint64_t v4 = "MTLPixelFormatBGRA10_XR";
      size_t v5 = "BGRA10_XR";
      goto LABEL_287;
    case 0x229uLL:
      uint64_t v4 = "MTLPixelFormatBGRA10_XR_sRGB";
      size_t v5 = "BGRA10_XR_sRGB";
      goto LABEL_287;
    case 0x22AuLL:
      uint64_t v4 = "MTLPixelFormatBGR10_XR";
      size_t v5 = "BGR10_XR";
      goto LABEL_287;
    case 0x22BuLL:
      uint64_t v4 = "MTLPixelFormatBGR10_XR_sRGB";
      size_t v5 = "BGR10_XR_sRGB";
      goto LABEL_287;
    case 0x22CuLL:
      uint64_t v4 = "MTLPixelFormatRGBA16Float_XR";
      size_t v5 = "RGBA16Float_XR";
      goto LABEL_287;
    case 0x230uLL:
      uint64_t v4 = "MTLPixelFormatYCBCRA8_444_1P";
      size_t v5 = "YCBCRA8_444_1P";
      goto LABEL_287;
    case 0x232uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR8_422_1P_REV";
      size_t v5 = "YCBCR8_422_1P_REV";
      goto LABEL_287;
    case 0x233uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_444_1P_PQ";
      size_t v5 = "YCBCR10_444_1P_PQ";
      goto LABEL_287;
    case 0x234uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_420_2P_PQ";
      size_t v5 = "YCBCR10_420_2P_PQ";
      goto LABEL_287;
    case 0x235uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_422_2P_PQ";
      size_t v5 = "YCBCR10_422_2P_PQ";
      goto LABEL_287;
    case 0x236uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_444_2P_PQ";
      size_t v5 = "YCBCR10_444_2P_PQ";
      goto LABEL_287;
    case 0x237uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_420_2P_PACKED_PQ";
      size_t v5 = "YCBCR10_420_2P_PACKED_PQ";
      goto LABEL_287;
    case 0x238uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_422_2P_PACKED_PQ";
      size_t v5 = "YCBCR10_422_2P_PACKED_PQ";
      goto LABEL_287;
    case 0x239uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_444_2P_PACKED_PQ";
      size_t v5 = "YCBCR10_444_2P_PACKED_PQ";
      goto LABEL_287;
    case 0x23AuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_420_2P";
      size_t v5 = "YCBCR12_420_2P";
      goto LABEL_287;
    case 0x23BuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_422_2P";
      size_t v5 = "YCBCR12_422_2P";
      goto LABEL_287;
    case 0x23CuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_444_2P";
      size_t v5 = "YCBCR12_444_2P";
      goto LABEL_287;
    case 0x23DuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_420_2P_PQ";
      size_t v5 = "YCBCR12_420_2P_PQ";
      goto LABEL_287;
    case 0x23EuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_422_2P_PQ";
      size_t v5 = "YCBCR12_422_2P_PQ";
      goto LABEL_287;
    case 0x23FuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_444_2P_PQ";
      size_t v5 = "YCBCR12_444_2P_PQ";
      goto LABEL_287;
    case 0x240uLL:
      uint64_t v4 = "MTLPixelFormatR10Unorm_X6";
      size_t v5 = "R10Unorm_X6";
      goto LABEL_287;
    case 0x241uLL:
      uint64_t v4 = "MTLPixelFormatR10Unorm_X6_sRGB";
      size_t v5 = "R10Unorm_X6_sRGB";
      goto LABEL_287;
    case 0x242uLL:
      uint64_t v4 = "MTLPixelFormatRG10Unorm_X12";
      size_t v5 = "RG10Unorm_X12";
      goto LABEL_287;
    case 0x243uLL:
      uint64_t v4 = "MTLPixelFormatRG10Unorm_X12_sRGB";
      size_t v5 = "RG10Unorm_X12_sRGB";
      goto LABEL_287;
    case 0x244uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_420_2P_PACKED";
      size_t v5 = "YCBCR12_420_2P_PACKED";
      goto LABEL_287;
    case 0x245uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_422_2P_PACKED";
      size_t v5 = "YCBCR12_422_2P_PACKED";
      goto LABEL_287;
    case 0x246uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_444_2P_PACKED";
      size_t v5 = "YCBCR12_444_2P_PACKED";
      goto LABEL_287;
    case 0x247uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_420_2P_PACKED_PQ";
      size_t v5 = "YCBCR12_420_2P_PACKED_PQ";
      goto LABEL_287;
    case 0x248uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_422_2P_PACKED_PQ";
      size_t v5 = "YCBCR12_422_2P_PACKED_PQ";
      goto LABEL_287;
    case 0x249uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_444_2P_PACKED_PQ";
      size_t v5 = "YCBCR12_444_2P_PACKED_PQ";
      goto LABEL_287;
    case 0x24AuLL:
      uint64_t v4 = "MTLPixelFormatRGB10A2Unorm_sRGB";
      size_t v5 = "RGB10A2Unorm_sRGB";
      goto LABEL_287;
    case 0x24BuLL:
      uint64_t v4 = "MTLPixelFormatRGB10A2Unorm_PQ";
      size_t v5 = "RGB10A2Unorm_PQ";
      goto LABEL_287;
    case 0x24CuLL:
      uint64_t v4 = "MTLPixelFormatR10Unorm_PACKED";
      size_t v5 = "R10Unorm_PACKED";
      goto LABEL_287;
    case 0x24DuLL:
      uint64_t v4 = "MTLPixelFormatRG10Unorm_PACKED";
      size_t v5 = "RG10Unorm_PACKED";
      goto LABEL_287;
    case 0x24EuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_444_1P_XR";
      size_t v5 = "YCBCR10_444_1P_XR";
      goto LABEL_287;
    case 0x24FuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_420_2P_XR";
      size_t v5 = "YCBCR10_420_2P_XR";
      goto LABEL_287;
    case 0x250uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_422_2P_XR";
      size_t v5 = "YCBCR10_422_2P_XR";
      goto LABEL_287;
    case 0x251uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_444_2P_XR";
      size_t v5 = "YCBCR10_444_2P_XR";
      goto LABEL_287;
    case 0x252uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_420_2P_PACKED_XR";
      size_t v5 = "YCBCR10_420_2P_PACKED_XR";
      goto LABEL_287;
    case 0x253uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_422_2P_PACKED_XR";
      size_t v5 = "YCBCR10_422_2P_PACKED_XR";
      goto LABEL_287;
    case 0x254uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_444_2P_PACKED_XR";
      size_t v5 = "YCBCR10_444_2P_PACKED_XR";
      goto LABEL_287;
    case 0x255uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_420_2P_XR";
      size_t v5 = "YCBCR12_420_2P_XR";
      goto LABEL_287;
    case 0x256uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_422_2P_XR";
      size_t v5 = "YCBCR12_422_2P_XR";
      goto LABEL_287;
    case 0x257uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_444_2P_XR";
      size_t v5 = "YCBCR12_444_2P_XR";
      goto LABEL_287;
    case 0x258uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_420_2P_PACKED_XR";
      size_t v5 = "YCBCR12_420_2P_PACKED_XR";
      goto LABEL_287;
    case 0x259uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_422_2P_PACKED_XR";
      size_t v5 = "YCBCR12_422_2P_PACKED_XR";
      goto LABEL_287;
    case 0x25AuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_444_2P_PACKED_XR";
      size_t v5 = "YCBCR12_444_2P_PACKED_XR";
      goto LABEL_287;
    case 0x25BuLL:
      uint64_t v4 = "MTLPixelFormatR12Unorm_X4";
      size_t v5 = "R12Unorm_X4";
      goto LABEL_287;
    case 0x25CuLL:
      uint64_t v4 = "MTLPixelFormatR12Unorm_X4_PQ";
      size_t v5 = "R12Unorm_X4_PQ";
      goto LABEL_287;
    case 0x25DuLL:
      uint64_t v4 = "MTLPixelFormatRG12Unorm_X8";
      size_t v5 = "RG12Unorm_X8";
      goto LABEL_287;
    case 0x25EuLL:
      uint64_t v4 = "MTLPixelFormatR10Unorm_X6_PQ";
      size_t v5 = "R10Unorm_X6_PQ";
      goto LABEL_287;
    case 0x25FuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_444_1P_HLG";
      size_t v5 = "YCBCR10_444_1P_HLG";
      goto LABEL_287;
    case 0x260uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_420_2P_HLG";
      size_t v5 = "YCBCR10_420_2P_HLG";
      goto LABEL_287;
    case 0x261uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_422_2P_HLG";
      size_t v5 = "YCBCR10_422_2P_HLG";
      goto LABEL_287;
    case 0x262uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_444_2P_HLG";
      size_t v5 = "YCBCR10_444_2P_HLG";
      goto LABEL_287;
    case 0x263uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_420_2P_PACKED_HLG";
      size_t v5 = "YCBCR10_420_2P_PACKED_HLG";
      goto LABEL_287;
    case 0x264uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_422_2P_PACKED_HLG";
      size_t v5 = "YCBCR10_422_2P_PACKED_HLG";
      goto LABEL_287;
    case 0x265uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR10_444_2P_PACKED_HLG";
      size_t v5 = "YCBCR10_444_2P_PACKED_HLG";
      goto LABEL_287;
    case 0x267uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_420_2P_HLG";
      size_t v5 = "YCBCR12_420_2P_HLG";
      goto LABEL_287;
    case 0x268uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_422_2P_HLG";
      size_t v5 = "YCBCR12_422_2P_HLG";
      goto LABEL_287;
    case 0x269uLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_444_2P_HLG";
      size_t v5 = "YCBCR12_444_2P_HLG";
      goto LABEL_287;
    case 0x26AuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_420_2P_PACKED_HLG";
      size_t v5 = "YCBCR12_420_2P_PACKED_HLG";
      goto LABEL_287;
    case 0x26BuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_422_2P_PACKED_HLG";
      size_t v5 = "YCBCR12_422_2P_PACKED_HLG";
      goto LABEL_287;
    case 0x26CuLL:
      uint64_t v4 = "MTLPixelFormatYCBCR12_444_2P_PACKED_HLG";
      size_t v5 = "YCBCR12_444_2P_PACKED_HLG";
      goto LABEL_287;
    case 0x26DuLL:
      uint64_t v4 = "MTLPixelFormatR10Unorm_X6_HLG";
      size_t v5 = "R10Unorm_X6_HLG";
      goto LABEL_287;
    case 0x26EuLL:
      uint64_t v4 = "MTLPixelFormatR12Unorm_X4_HLG";
      size_t v5 = "R12Unorm_X4_HLG";
      goto LABEL_287;
    case 0x26FuLL:
      uint64_t v4 = "MTLPixelFormatRGB10A2Unorm_HLG";
      size_t v5 = "RGB10A2Unorm_HLG";
      goto LABEL_287;
    case 0x270uLL:
      uint64_t v4 = "MTLPixelFormatRGB10A8_2P";
      size_t v5 = "RGB10A8_2P";
      goto LABEL_287;
    case 0x271uLL:
      uint64_t v4 = "MTLPixelFormatRGB10A8_2P_sRGB";
      size_t v5 = "RGB10A8_2P_sRGB";
      goto LABEL_287;
    case 0x272uLL:
      uint64_t v4 = "MTLPixelFormatRGB10A8_2P_PQ";
      size_t v5 = "RGB10A8_2P_PQ";
      goto LABEL_287;
    case 0x273uLL:
      uint64_t v4 = "MTLPixelFormatRGB10A8_2P_HLG";
      size_t v5 = "RGB10A8_2P_HLG";
      goto LABEL_287;
    case 0x274uLL:
      uint64_t v4 = "MTLPixelFormatBGR10A2Unorm_sRGB";
      size_t v5 = "BGR10A2Unorm_sRGB";
      goto LABEL_287;
    case 0x275uLL:
      uint64_t v4 = "MTLPixelFormatBGR10A2Unorm_PQ";
      size_t v5 = "BGR10A2Unorm_PQ";
      goto LABEL_287;
    case 0x276uLL:
      uint64_t v4 = "MTLPixelFormatBGRA10Uint_PACKED";
      size_t v5 = "BGRA10Uint_PACKED";
      goto LABEL_287;
    case 0x277uLL:
      uint64_t v4 = "MTLPixelFormatBGRA10_XR_PACKED";
      size_t v5 = "BGRA10_XR_PACKED";
      goto LABEL_287;
    case 0x278uLL:
      uint64_t v4 = "MTLPixelFormatBGRA10_XR_PACKED_sRGB";
      size_t v5 = "BGRA10_XR_PACKED_sRGB";
      goto LABEL_287;
    case 0x279uLL:
      uint64_t v4 = "MTLPixelFormatBGRA10Unorm_PACKED";
      size_t v5 = "BGRA10Unorm_PACKED";
      goto LABEL_287;
    case 0x27AuLL:
      uint64_t v4 = "MTLPixelFormatBGRA10Unorm_PACKED_sRGB";
      size_t v5 = "BGRA10Unorm_PACKED_sRGB";
      goto LABEL_287;
    case 0x27BuLL:
      uint64_t v4 = "MTLPixelFormatBGRA10Unorm_PACKED_HLG";
      size_t v5 = "BGRA10Unorm_PACKED_HLG";
      goto LABEL_287;
    case 0x27CuLL:
      uint64_t v4 = "MTLPixelFormatBGRA10Unorm_PACKED_PQ";
      size_t v5 = "BGRA10Unorm_PACKED_PQ";
      goto LABEL_287;
    case 0x27DuLL:
      uint64_t v4 = "MTLPixelFormatBGRA10Uint";
      size_t v5 = "BGRA10Uint";
      goto LABEL_287;
    case 0x27EuLL:
      uint64_t v4 = "MTLPixelFormatBGRA10Unorm";
      size_t v5 = "BGRA10Unorm";
      goto LABEL_287;
    case 0x27FuLL:
      uint64_t v4 = "MTLPixelFormatBGRA10Unorm_sRGB";
      size_t v5 = "BGRA10Unorm_sRGB";
      goto LABEL_287;
    case 0x280uLL:
      uint64_t v4 = "MTLPixelFormatBGRA10Unorm_HLG";
      size_t v5 = "BGRA10Unorm_HLG";
      goto LABEL_287;
    case 0x281uLL:
      uint64_t v4 = "MTLPixelFormatBGRA10Unorm_PQ";
      size_t v5 = "BGRA10Unorm_PQ";
      goto LABEL_287;
    case 0x282uLL:
      uint64_t v4 = "MTLPixelFormatR10Uint_X6";
      size_t v5 = "R10Uint_X6";
      goto LABEL_287;
    case 0x283uLL:
      uint64_t v4 = "MTLPixelFormatR10Uint_PACKED";
      size_t v5 = "R10Uint_PACKED";
      goto LABEL_287;
    case 0x284uLL:
      uint64_t v4 = "MTLPixelFormatRG10Uint_X12";
      size_t v5 = "RG10Uint_X12";
      goto LABEL_287;
    case 0x285uLL:
      uint64_t v4 = "MTLPixelFormatRG10Uint_PACKED";
      size_t v5 = "RG10Uint_PACKED";
      goto LABEL_287;
    case 0x286uLL:
      uint64_t v4 = "MTLPixelFormatR12Uint_X4";
      size_t v5 = "R12Uint_X4";
      goto LABEL_287;
    case 0x287uLL:
      uint64_t v4 = "MTLPixelFormatR12Uint_PACKED";
      size_t v5 = "R12Uint_PACKED";
      goto LABEL_287;
    case 0x288uLL:
      uint64_t v4 = "MTLPixelFormatRG12Uint_X8";
      size_t v5 = "RG12Uint_X8";
      goto LABEL_287;
    case 0x289uLL:
      uint64_t v4 = "MTLPixelFormatRG12Uint_PACKED";
      size_t v5 = "RG12Uint_PACKED";
      goto LABEL_287;
    case 0x28AuLL:
      uint64_t v4 = "MTLPixelFormatRGB10A8Uint_2P";
      size_t v5 = "RGB10A8Uint_2P";
LABEL_287:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLPixelFormatFlagsAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  if ((uint64_t)this < 0x8000)
  {
    if ((uint64_t)this <= 255)
    {
      if ((uint64_t)this > 15)
      {
        uint64_t v16 = "MTLPixelFormatFlagsIsStencilRenderable";
        if (a2) {
          uint64_t v16 = "IsStencilRenderable";
        }
        int v17 = "MTLPixelFormatFlagsIsAllowedForMSAAResolve";
        if (a2) {
          int v17 = "IsAllowedForMSAAResolve";
        }
        if (this != (GPUTools::MTL *)128) {
          int v17 = "Unknown";
        }
        if (this != (GPUTools::MTL *)64) {
          uint64_t v16 = v17;
        }
        uint64_t v18 = "MTLPixelFormatFlagsIsColorRenderable";
        if (a2) {
          uint64_t v18 = "IsColorRenderable";
        }
        int v19 = "MTLPixelFormatFlagsIsDepthRenderable";
        if (a2) {
          int v19 = "IsDepthRenderable";
        }
        if (this != (GPUTools::MTL *)32) {
          int v19 = "Unknown";
        }
        if (this != (GPUTools::MTL *)16) {
          uint64_t v18 = v19;
        }
        if ((uint64_t)this <= 63) {
          return v18;
        }
        else {
          return v16;
        }
      }
      else
      {
        switch((unint64_t)this)
        {
          case 1uLL:
            uint64_t v4 = "MTLPixelFormatFlagsIsValid";
            size_t v5 = "IsValid";
            goto LABEL_119;
          case 2uLL:
            uint64_t v4 = "MTLPixelFormatFlagsIsWriteable";
            size_t v5 = "IsWriteable";
            goto LABEL_119;
          case 4uLL:
            uint64_t v4 = "MTLPixelFormatFlagsIsFilterable";
            size_t v5 = "IsFilterable";
            goto LABEL_119;
          case 8uLL:
            uint64_t v4 = "MTLPixelFormatFlagsIsBlendable";
            size_t v5 = "IsBlendable";
LABEL_119:
            if (a2) {
              unint64_t result = v5;
            }
            else {
              unint64_t result = v4;
            }
            break;
          default:
            return result;
        }
      }
      return result;
    }
    if ((uint64_t)this > 2047)
    {
      size_t v9 = "MTLPixelFormatFlagsIsPVRTC";
      if (a2) {
        size_t v9 = "IsPVRTC";
      }
      BOOL v10 = "MTLPixelFormatFlagsIs422";
      if (a2) {
        BOOL v10 = "Is422";
      }
      if (this != (GPUTools::MTL *)0x4000) {
        BOOL v10 = "Unknown";
      }
      if (this != (GPUTools::MTL *)0x2000) {
        size_t v9 = v10;
      }
      BOOL v11 = "MTLPixelFormatFlagsIsSRGB";
      if (a2) {
        BOOL v11 = "IsSRGB";
      }
      BOOL v12 = "MTLPixelFormatFlagsIsASTC";
      if (a2) {
        BOOL v12 = "IsASTC";
      }
      if (this != (GPUTools::MTL *)4096) {
        BOOL v12 = "Unknown";
      }
      if (this != (GPUTools::MTL *)2048) {
        BOOL v11 = v12;
      }
      BOOL v13 = (uint64_t)this < 0x2000;
LABEL_51:
      if (v13) {
        return v11;
      }
      else {
        return v9;
      }
    }
    uint64_t v6 = "MTLPixelFormatFlagsIsMSAACapable";
    if (a2) {
      uint64_t v6 = "IsMSAACapable";
    }
    uint64_t v7 = "MTLPixelFormatFlagsIsRestrictedFormatAccess";
    if (a2) {
      uint64_t v7 = "IsRestrictedFormatAccess";
    }
    uint64_t v25 = "MTLPixelFormatFlagsIsCompressed";
    if (a2) {
      uint64_t v25 = "IsCompressed";
    }
    if (this != (GPUTools::MTL *)1024) {
      uint64_t v25 = "Unknown";
    }
    if (this != (GPUTools::MTL *)512) {
      uint64_t v7 = v25;
    }
    BOOL v8 = this == (GPUTools::MTL *)256;
    goto LABEL_99;
  }
  if ((uint64_t)this < 0x400000)
  {
    if ((uint64_t)this >= 0x40000)
    {
      size_t v9 = "MTLPixelFormatFlagsIsShortCompatible";
      if (a2) {
        size_t v9 = "IsShortCompatible";
      }
      BOOL v14 = "MTLPixelFormatFlagsIsUShortCompatible";
      if (a2) {
        BOOL v14 = "IsUShortCompatible";
      }
      if (this != (GPUTools::MTL *)0x200000) {
        BOOL v14 = "Unknown";
      }
      if (this != (GPUTools::MTL *)0x100000) {
        size_t v9 = v14;
      }
      BOOL v11 = "MTLPixelFormatFlagsIsIntCompatible";
      if (a2) {
        BOOL v11 = "IsIntCompatible";
      }
      int v15 = "MTLPixelFormatFlagsIsUIntCompatible";
      if (a2) {
        int v15 = "IsUIntCompatible";
      }
      if (this != (GPUTools::MTL *)0x80000) {
        int v15 = "Unknown";
      }
      if (this != (GPUTools::MTL *)0x40000) {
        BOOL v11 = v15;
      }
      BOOL v13 = (uint64_t)this < 0x100000;
      goto LABEL_51;
    }
    uint64_t v6 = "MTLPixelFormatFlagsIsFullMaskRequired";
    if (a2) {
      uint64_t v6 = "IsFullMaskRequired";
    }
    uint64_t v7 = "MTLPixelFormatFlagsIsFloatCompatible";
    if (a2) {
      uint64_t v7 = "IsFloatCompatible";
    }
    uint64_t v26 = "MTLPixelFormatFlagsIsHalfCompatible";
    if (a2) {
      uint64_t v26 = "IsHalfCompatible";
    }
    if (this != (GPUTools::MTL *)0x20000) {
      uint64_t v26 = "Unknown";
    }
    if (this != (GPUTools::MTL *)0x10000) {
      uint64_t v7 = v26;
    }
    BOOL v8 = this == (GPUTools::MTL *)0x8000;
LABEL_99:
    if (v8) {
      return v6;
    }
    else {
      return v7;
    }
  }
  if ((uint64_t)this > 0x3FFFFFF)
  {
    if ((uint64_t)this > 0xFFFFFFF)
    {
      uint64_t v20 = 0x10000000;
      int v21 = "MTLPixelFormatFlagsIsHLG";
      if (a2) {
        int v21 = "IsHLG";
      }
      uint64_t v22 = 0x20000000;
      unint64_t v23 = "MTLPixelFormatFlagsIsULongCompatible";
      unint64_t v24 = "IsULongCompatible";
    }
    else
    {
      uint64_t v20 = 0x4000000;
      int v21 = "MTLPixelFormatFlagsIsLossyLevel3Compatible";
      if (a2) {
        int v21 = "IsLossyLevel3Compatible";
      }
      uint64_t v22 = 0x8000000;
      unint64_t v23 = "MTLPixelFormatFlagsIsPQ";
      unint64_t v24 = "IsPQ";
    }
  }
  else
  {
    if ((uint64_t)this <= 0xFFFFFF)
    {
      uint64_t v6 = "MTLPixelFormatFlagsIsBC";
      if (a2)
      {
        uint64_t v6 = "IsBC";
        uint64_t v7 = "IsDualPlane";
      }
      else
      {
        uint64_t v7 = "MTLPixelFormatFlagsIsDualPlane";
      }
      if (this != (GPUTools::MTL *)0x800000) {
        uint64_t v7 = "Unknown";
      }
      BOOL v8 = this == (GPUTools::MTL *)0x400000;
      goto LABEL_99;
    }
    uint64_t v20 = 0x1000000;
    int v21 = "MTLPixelFormatFlagsIsLossyLevel1Compatible";
    if (a2) {
      int v21 = "IsLossyLevel1Compatible";
    }
    uint64_t v22 = 0x2000000;
    unint64_t v23 = "MTLPixelFormatFlagsIsLossyLevel2Compatible";
    unint64_t v24 = "IsLossyLevel2Compatible";
  }
  if (a2) {
    unint64_t v23 = v24;
  }
  if (this == (GPUTools::MTL *)v22) {
    char v27 = v23;
  }
  else {
    char v27 = "Unknown";
  }
  if (this == (GPUTools::MTL *)v20) {
    return v21;
  }
  else {
    return v27;
  }
}

const char *GPUTools::MTL::GetMTLPrecompiledDataTypeAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLPrecompiledDataTypePipelineData";
      int v3 = "PipelineData";
      goto LABEL_16;
    case 1uLL:
      uint64_t v2 = "MTLPrecompiledDataTypeVertexFunction";
      int v3 = "VertexFunction";
      goto LABEL_16;
    case 2uLL:
      uint64_t v2 = "MTLPrecompiledDataTypeFragmentFunction";
      int v3 = "FragmentFunction";
      goto LABEL_16;
    case 3uLL:
      uint64_t v2 = "MTLPrecompiledDataTypeComputeFunction";
      int v3 = "ComputeFunction";
      goto LABEL_16;
    case 4uLL:
      uint64_t v2 = "MTLPrecompiledDataTypeVertexReflectionData";
      int v3 = "VertexReflectionData";
      goto LABEL_16;
    case 5uLL:
      uint64_t v2 = "MTLPrecompiledDataTypeFragmentReflectionData";
      int v3 = "FragmentReflectionData";
      goto LABEL_16;
    case 6uLL:
      uint64_t v2 = "MTLPrecompiledDataTypeComputeReflectionData";
      int v3 = "ComputeReflectionData";
      goto LABEL_16;
    case 7uLL:
      uint64_t v2 = "MTLPrecompiledDataTypeTileFunction";
      int v3 = "TileFunction";
      goto LABEL_16;
    case 8uLL:
      uint64_t v2 = "MTLPrecompiledDataTypeTileReflectionData";
      int v3 = "TileReflectionData";
LABEL_16:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      uint64_t v4 = "MTLPrecompiledDataTypeCustomStart";
      if (a2) {
        uint64_t v4 = "CustomStart";
      }
      if (this == (GPUTools::MTL *)256) {
        unint64_t result = v4;
      }
      else {
        unint64_t result = "Unknown";
      }
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLPrimitiveKindAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLPrimitiveKindNone";
      int v3 = "None";
      goto LABEL_7;
    case 1uLL:
      uint64_t v2 = "MTLPrimitiveKindTriangle";
      int v3 = "Triangle";
      goto LABEL_7;
    case 2uLL:
      uint64_t v2 = "MTLPrimitiveKindBoundingBox";
      int v3 = "BoundingBox";
      goto LABEL_7;
    case 3uLL:
      uint64_t v2 = "MTLPrimitiveKindCurve";
      int v3 = "Curve";
LABEL_7:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLPrimitiveTopologyClassAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLPrimitiveTopologyClassUnspecified";
      int v3 = "Unspecified";
      goto LABEL_7;
    case 1uLL:
      uint64_t v2 = "MTLPrimitiveTopologyClassPoint";
      int v3 = "Point";
      goto LABEL_7;
    case 2uLL:
      uint64_t v2 = "MTLPrimitiveTopologyClassLine";
      int v3 = "Line";
      goto LABEL_7;
    case 3uLL:
      uint64_t v2 = "MTLPrimitiveTopologyClassTriangle";
      int v3 = "Triangle";
LABEL_7:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLPrimitiveTypeAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLPrimitiveTypePoint";
      int v3 = "Point";
      goto LABEL_13;
    case 1uLL:
      uint64_t v2 = "MTLPrimitiveTypeLine";
      int v3 = "Line";
      goto LABEL_13;
    case 2uLL:
      uint64_t v2 = "MTLPrimitiveTypeLineStrip";
      int v3 = "LineStrip";
      goto LABEL_13;
    case 3uLL:
      uint64_t v2 = "MTLPrimitiveTypeTriangle";
      int v3 = "Triangle";
      goto LABEL_13;
    case 4uLL:
      uint64_t v2 = "MTLPrimitiveTypeTriangleStrip";
      int v3 = "TriangleStrip";
      goto LABEL_13;
    case 5uLL:
      uint64_t v2 = "MTLPrimitiveTypeLineLoop";
      int v3 = "LineLoop";
      goto LABEL_13;
    case 6uLL:
      uint64_t v2 = "MTLPrimitiveTypeTriangleFan";
      int v3 = "TriangleFan";
      goto LABEL_13;
    case 7uLL:
      uint64_t v2 = "MTLPrimitiveTypeQuad";
      int v3 = "Quad";
      goto LABEL_13;
    case 8uLL:
      uint64_t v2 = "MTLPrimitiveTypeQuadStrip";
      int v3 = "QuadStrip";
      goto LABEL_13;
    case 9uLL:
      uint64_t v2 = "MTLPrimitiveTypePolygon";
      int v3 = "Polygon";
LABEL_13:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLProvokingVertexModeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLProvokingVertexModeSecond";
  if (a2) {
    int v3 = "Second";
  }
  uint64_t v4 = "MTLProvokingVertexModeLast";
  if (a2) {
    uint64_t v4 = "Last";
  }
  size_t v5 = "First";
  if (!a2) {
    size_t v5 = "MTLProvokingVertexModeFirst";
  }
  if (!this) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)2) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLPurgeableStateAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 1uLL:
      uint64_t v2 = "MTLPurgeableStateKeepCurrent";
      int v3 = "KeepCurrent";
      goto LABEL_11;
    case 2uLL:
      uint64_t v2 = "MTLPurgeableStateNonVolatile";
      int v3 = "NonVolatile";
      goto LABEL_11;
    case 3uLL:
      uint64_t v2 = "MTLPurgeableStateVolatile";
      int v3 = "Volatile";
      goto LABEL_11;
    case 4uLL:
      uint64_t v2 = "MTLPurgeableStateEmpty";
      int v3 = "Empty";
LABEL_11:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      uint64_t v4 = "MTLPurgeableStateMakeResident";
      if (a2) {
        uint64_t v4 = "MakeResident";
      }
      if (this == (GPUTools::MTL *)256) {
        unint64_t result = v4;
      }
      else {
        unint64_t result = "Unknown";
      }
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLQosLevelAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLQosExclusive";
      int v3 = "Exclusive";
      goto LABEL_8;
    case 1uLL:
      uint64_t v2 = "MTLQosHigh";
      int v3 = "High";
      goto LABEL_8;
    case 2uLL:
      uint64_t v2 = "MTLQosMedium";
      int v3 = "Medium";
      goto LABEL_8;
    case 3uLL:
      uint64_t v2 = "MTLQosLow";
      int v3 = "Low";
      goto LABEL_8;
    case 4uLL:
      uint64_t v2 = "MTLQosOpportunistic";
      int v3 = "Opportunistic";
LABEL_8:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLReadWriteTextureTierAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLReadWriteTextureTierNone";
  if (a2) {
    int v3 = "None";
  }
  uint64_t v4 = "MTLReadWriteTextureTier2";
  if (a2) {
    uint64_t v4 = "2";
  }
  size_t v5 = "1";
  if (!a2) {
    size_t v5 = "MTLReadWriteTextureTier1";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLRenderCommandEncoderSplitReasonAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 1uLL:
      uint64_t v4 = "MTLRenderCommandEncoderSplitReasonTooManyResources";
      size_t v5 = "TooManyResources";
      goto LABEL_14;
    case 2uLL:
      uint64_t v4 = "MTLRenderCommandEncoderSplitReasonTooManyScissorEmits";
      size_t v5 = "TooManyScissorEmits";
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
      return result;
    case 4uLL:
      uint64_t v4 = "MTLRenderCommandEncoderSplitReasonTooManyDepthBiasEmits";
      size_t v5 = "TooManyDepthBiasEmits";
      goto LABEL_14;
    case 8uLL:
      uint64_t v4 = "MTLRenderCommandEncoderSplitReasonForcedManually";
      size_t v5 = "ForcedManually";
LABEL_14:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      uint64_t v6 = "MTLRenderCommandEncoderSplitReasonInsertMemoryBarrier";
      if (a2)
      {
        uint64_t v6 = "InsertMemoryBarrier";
        uint64_t v7 = "RenderPassCommitAndReset";
      }
      else
      {
        uint64_t v7 = "MTLRenderCommandEncoderSplitReasonRenderPassCommitAndReset";
      }
      if (this != (GPUTools::MTL *)32) {
        uint64_t v7 = "Unknown";
      }
      if (this == (GPUTools::MTL *)16) {
        unint64_t result = v6;
      }
      else {
        unint64_t result = v7;
      }
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLRenderStagesAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 1uLL:
      uint64_t v4 = "MTLRenderStageVertex";
      size_t v5 = "Vertex";
      goto LABEL_11;
    case 2uLL:
      uint64_t v4 = "MTLRenderStageFragment";
      size_t v5 = "Fragment";
      goto LABEL_11;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
      return result;
    case 4uLL:
      uint64_t v4 = "MTLRenderStageTile";
      size_t v5 = "Tile";
      goto LABEL_11;
    case 8uLL:
      uint64_t v4 = "MTLRenderStageObject";
      size_t v5 = "Object";
LABEL_11:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      uint64_t v6 = "MTLRenderStageMesh";
      if (a2) {
        uint64_t v6 = "Mesh";
      }
      if (this == (GPUTools::MTL *)16) {
        unint64_t result = v6;
      }
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLResourceGroupCacheHintAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLResourceGroupCacheHintInvalidate";
  if (a2) {
    int v3 = "Invalidate";
  }
  uint64_t v4 = "MTLResourceGroupCacheHintFlush";
  if (a2) {
    uint64_t v4 = "Flush";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLResourceOptionsAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  if ((uint64_t)this > 47)
  {
    int v3 = "MTLResourceHazardTrackingModeTracked";
    if (a2) {
      int v3 = "HazardTrackingModeTracked";
    }
    BOOL v8 = "MTLResourceHazardTrackingModeGrouped";
    if (a2) {
      BOOL v8 = "HazardTrackingModeGrouped";
    }
    if (this != (GPUTools::MTL *)2048) {
      BOOL v8 = "Unknown";
    }
    if (this != (GPUTools::MTL *)512) {
      int v3 = v8;
    }
    size_t v9 = "MTLResourceStorageModeMemoryless";
    if (a2) {
      size_t v9 = "StorageModeMemoryless";
    }
    BOOL v10 = "MTLResourceHazardTrackingModeUntracked";
    if (a2) {
      BOOL v10 = "HazardTrackingModeUntracked";
    }
    if (this == (GPUTools::MTL *)256) {
      uint64_t v2 = v10;
    }
    if (this == (GPUTools::MTL *)48) {
      uint64_t v2 = v9;
    }
    BOOL v7 = (uint64_t)this <= 511;
  }
  else
  {
    int v3 = "MTLResourceStorageModeManaged";
    if (a2) {
      int v3 = "StorageModeManaged";
    }
    uint64_t v4 = "MTLResourceStorageModePrivate";
    if (a2) {
      uint64_t v4 = "StorageModePrivate";
    }
    if (this != (GPUTools::MTL *)32) {
      uint64_t v4 = "Unknown";
    }
    if (this != (GPUTools::MTL *)16) {
      int v3 = v4;
    }
    size_t v5 = "MTLResourceCPUCacheModeDefaultCache";
    if (a2) {
      size_t v5 = "CPUCacheModeDefaultCache";
    }
    uint64_t v6 = "MTLResourceCPUCacheModeWriteCombined";
    if (a2) {
      uint64_t v6 = "CPUCacheModeWriteCombined";
    }
    if (this == (GPUTools::MTL *)1) {
      uint64_t v2 = v6;
    }
    if (!this) {
      uint64_t v2 = v5;
    }
    BOOL v7 = (uint64_t)this <= 15;
  }
  if (v7) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLResourceUsageAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLResourceUsageSample";
  if (a2) {
    int v3 = "Sample";
  }
  uint64_t v4 = "MTLResourceUsageWrite";
  if (a2) {
    uint64_t v4 = "Write";
  }
  size_t v5 = "Read";
  if (!a2) {
    size_t v5 = "MTLResourceUsageRead";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)4) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLRoundingModeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLRoundingModeRTNE";
  if (a2) {
    int v3 = "RTNE";
  }
  uint64_t v4 = "MTLRoundingModeRTZ";
  if (a2) {
    uint64_t v4 = "RTZ";
  }
  size_t v5 = "Default";
  if (!a2) {
    size_t v5 = "MTLRoundingModeDefault";
  }
  if (!this) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)2) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLSamplerAddressModeAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLSamplerAddressModeClampToEdge";
      int v3 = "ClampToEdge";
      goto LABEL_10;
    case 1uLL:
      uint64_t v2 = "MTLSamplerAddressModeMirrorClampToEdge";
      int v3 = "MirrorClampToEdge";
      goto LABEL_10;
    case 2uLL:
      uint64_t v2 = "MTLSamplerAddressModeRepeat";
      int v3 = "Repeat";
      goto LABEL_10;
    case 3uLL:
      uint64_t v2 = "MTLSamplerAddressModeMirrorRepeat";
      int v3 = "MirrorRepeat";
      goto LABEL_10;
    case 4uLL:
      uint64_t v2 = "MTLSamplerAddressModeClampToZero";
      int v3 = "ClampToZero";
      goto LABEL_10;
    case 5uLL:
      uint64_t v2 = "MTLSamplerAddressModeClampToBorderColor";
      int v3 = "ClampToBorderColor";
      goto LABEL_10;
    case 6uLL:
      uint64_t v2 = "MTLSamplerAddressModeClampToHalfBorderColor";
      int v3 = "ClampToHalfBorderColor";
LABEL_10:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLSamplerBorderColorAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLSamplerBorderColorTransparentBlack";
      int v3 = "TransparentBlack";
      goto LABEL_7;
    case 1uLL:
      uint64_t v2 = "MTLSamplerBorderColorOpaqueBlack";
      int v3 = "OpaqueBlack";
      goto LABEL_7;
    case 2uLL:
      uint64_t v2 = "MTLSamplerBorderColorOpaqueWhite";
      int v3 = "OpaqueWhite";
      goto LABEL_7;
    case 3uLL:
      uint64_t v2 = "MTLSamplerBorderColorSPICustom";
      int v3 = "SPICustom";
LABEL_7:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLSamplerMinMagFilterAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLSamplerMinMagFilterNearest";
  if (a2) {
    int v3 = "Nearest";
  }
  uint64_t v4 = "MTLSamplerMinMagFilterLinear";
  if (a2) {
    uint64_t v4 = "Linear";
  }
  size_t v5 = "Cubic";
  if (!a2) {
    size_t v5 = "MTLSamplerMinMagFilterCubic";
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLSamplerMipFilterAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLSamplerMipFilterNotMipmapped";
  if (a2) {
    int v3 = "NotMipmapped";
  }
  uint64_t v4 = "MTLSamplerMipFilterNearest";
  if (a2) {
    uint64_t v4 = "Nearest";
  }
  size_t v5 = "Linear";
  if (!a2) {
    size_t v5 = "MTLSamplerMipFilterLinear";
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLSamplerReductionModeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLSamplerReductionModeWeightedAverage";
  if (a2) {
    int v3 = "WeightedAverage";
  }
  uint64_t v4 = "MTLSamplerReductionModeMinimum";
  if (a2) {
    uint64_t v4 = "Minimum";
  }
  size_t v5 = "Maximum";
  if (!a2) {
    size_t v5 = "MTLSamplerReductionModeMaximum";
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLSamplerReductionModeSupportAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLSamplerReductionModeSupportNone";
  if (a2) {
    int v3 = "None";
  }
  uint64_t v4 = "MTLSamplerReductionModeSupportSingleChannel";
  if (a2) {
    uint64_t v4 = "SingleChannel";
  }
  size_t v5 = "AllChannels";
  if (!a2) {
    size_t v5 = "MTLSamplerReductionModeSupportAllChannels";
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLShaderValidationAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLShaderValidationDisabled";
  if (a2) {
    int v3 = "Disabled";
  }
  uint64_t v4 = "MTLShaderValidationEnabled";
  if (a2) {
    uint64_t v4 = "Enabled";
  }
  size_t v5 = "Default";
  if (!a2) {
    size_t v5 = "MTLShaderValidationDefault";
  }
  if (!this) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)2) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLSourceLanguageAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLSourceLanguageOpenCL";
  if (a2) {
    int v3 = "OpenCL";
  }
  uint64_t v4 = "MTLSourceLanguageMetal";
  if (a2) {
    uint64_t v4 = "Metal";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLSparsePageSizeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLSparsePageSize256";
  if (a2) {
    int v3 = "256";
  }
  uint64_t v4 = "MTLSparsePageSize64";
  if (a2) {
    uint64_t v4 = "64";
  }
  size_t v5 = "16";
  if (!a2) {
    size_t v5 = "MTLSparsePageSize16";
  }
  if (this == (GPUTools::MTL *)101) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)102) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)103) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLSparseTextureMappingModeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLSparseTextureMappingModeUnmap";
  if (a2) {
    int v3 = "Unmap";
  }
  uint64_t v4 = "MTLSparseTextureMappingModeMap";
  if (a2) {
    uint64_t v4 = "Map";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLSparseTextureRegionAlignmentModeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLSparseTextureRegionAlignmentModeOutward";
  if (a2) {
    int v3 = "Outward";
  }
  uint64_t v4 = "MTLSparseTextureRegionAlignmentModeInward";
  if (a2) {
    uint64_t v4 = "Inward";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLSparseTexturesTierAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLSparseTexturesTierNone";
      int v3 = "None";
      goto LABEL_7;
    case 1uLL:
      uint64_t v2 = "MTLSparseTexturesTier1";
      int v3 = "1";
      goto LABEL_7;
    case 2uLL:
      uint64_t v2 = "MTLSparseTexturesTier2";
      int v3 = "2";
      goto LABEL_7;
    case 3uLL:
      uint64_t v2 = "MTLSparseTexturesTier3";
      int v3 = "3";
LABEL_7:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLStencilOperationAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLStencilOperationKeep";
      int v3 = "Keep";
      goto LABEL_11;
    case 1uLL:
      uint64_t v2 = "MTLStencilOperationZero";
      int v3 = "Zero";
      goto LABEL_11;
    case 2uLL:
      uint64_t v2 = "MTLStencilOperationReplace";
      int v3 = "Replace";
      goto LABEL_11;
    case 3uLL:
      uint64_t v2 = "MTLStencilOperationIncrementClamp";
      int v3 = "IncrementClamp";
      goto LABEL_11;
    case 4uLL:
      uint64_t v2 = "MTLStencilOperationDecrementClamp";
      int v3 = "DecrementClamp";
      goto LABEL_11;
    case 5uLL:
      uint64_t v2 = "MTLStencilOperationInvert";
      int v3 = "Invert";
      goto LABEL_11;
    case 6uLL:
      uint64_t v2 = "MTLStencilOperationIncrementWrap";
      int v3 = "IncrementWrap";
      goto LABEL_11;
    case 7uLL:
      uint64_t v2 = "MTLStencilOperationDecrementWrap";
      int v3 = "DecrementWrap";
LABEL_11:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLStepFunctionAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLStepFunctionConstant";
      int v3 = "Constant";
      goto LABEL_12;
    case 1uLL:
      uint64_t v2 = "MTLStepFunctionPerVertex";
      int v3 = "PerVertex";
      goto LABEL_12;
    case 2uLL:
      uint64_t v2 = "MTLStepFunctionPerInstance";
      int v3 = "PerInstance";
      goto LABEL_12;
    case 3uLL:
      uint64_t v2 = "MTLStepFunctionPerPatch";
      int v3 = "PerPatch";
      goto LABEL_12;
    case 4uLL:
      uint64_t v2 = "MTLStepFunctionPerPatchControlPoint";
      int v3 = "PerPatchControlPoint";
      goto LABEL_12;
    case 5uLL:
      uint64_t v2 = "MTLStepFunctionThreadPositionInGridX";
      int v3 = "ThreadPositionInGridX";
      goto LABEL_12;
    case 6uLL:
      uint64_t v2 = "MTLStepFunctionThreadPositionInGridY";
      int v3 = "ThreadPositionInGridY";
      goto LABEL_12;
    case 7uLL:
      uint64_t v2 = "MTLStepFunctionThreadPositionInGridXIndexed";
      int v3 = "ThreadPositionInGridXIndexed";
      goto LABEL_12;
    case 8uLL:
      uint64_t v2 = "MTLStepFunctionThreadPositionInGridYIndexed";
      int v3 = "ThreadPositionInGridYIndexed";
LABEL_12:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLStitchedLibraryOptionsAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v4 = "MTLStitchedLibraryOptionNone";
      size_t v5 = "None";
      goto LABEL_6;
    case 1uLL:
      uint64_t v4 = "MTLStitchedLibraryOptionFailOnBinaryArchiveMiss";
      size_t v5 = "FailOnBinaryArchiveMiss";
      goto LABEL_6;
    case 2uLL:
      uint64_t v4 = "MTLStitchedLibraryOptionStoreLibraryInMetalScript";
      size_t v5 = "StoreLibraryInMetalScript";
      goto LABEL_6;
    case 4uLL:
      uint64_t v4 = "MTLStitchedLibraryOptionAllowBadLegacyDAGs";
      size_t v5 = "AllowBadLegacyDAGs";
LABEL_6:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLStorageModeAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLStorageModeShared";
      int v3 = "Shared";
      goto LABEL_7;
    case 1uLL:
      uint64_t v2 = "MTLStorageModeManaged";
      int v3 = "Managed";
      goto LABEL_7;
    case 2uLL:
      uint64_t v2 = "MTLStorageModePrivate";
      int v3 = "Private";
      goto LABEL_7;
    case 3uLL:
      uint64_t v2 = "MTLStorageModeMemoryless";
      int v3 = "Memoryless";
LABEL_7:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLStoreActionAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v4 = "MTLStoreActionDontCare";
      size_t v5 = "DontCare";
      goto LABEL_10;
    case 1uLL:
      uint64_t v4 = "MTLStoreActionStore";
      size_t v5 = "Store";
      goto LABEL_10;
    case 2uLL:
      uint64_t v4 = "MTLStoreActionMultisampleResolve";
      size_t v5 = "MultisampleResolve";
      goto LABEL_10;
    case 3uLL:
      uint64_t v4 = "MTLStoreActionStoreAndMultisampleResolve";
      size_t v5 = "StoreAndMultisampleResolve";
      goto LABEL_10;
    case 4uLL:
      if (!a2) {
        return "MTLStoreActionUnknown";
      }
      return result;
    case 5uLL:
      uint64_t v4 = "MTLStoreActionCustomSampleDepthStore";
      size_t v5 = "CustomSampleDepthStore";
LABEL_10:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLStoreActionOptionsAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLStoreActionOptionNone";
  if (a2) {
    int v3 = "None";
  }
  uint64_t v4 = "MTLStoreActionOptionCustomSamplePositions";
  if (a2) {
    uint64_t v4 = "CustomSamplePositions";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLTagTypeAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLTagTypeNone";
      int v3 = "None";
      goto LABEL_12;
    case 1uLL:
      uint64_t v2 = "MTLTagTypeInstancing";
      int v3 = "Instancing";
      goto LABEL_12;
    case 2uLL:
      uint64_t v2 = "MTLTagTypeTriangleData";
      int v3 = "TriangleData";
      goto LABEL_12;
    case 3uLL:
      uint64_t v2 = "MTLTagTypeWorldSpaceData";
      int v3 = "WorldSpaceData";
      goto LABEL_12;
    case 4uLL:
      uint64_t v2 = "MTLTagTypeInstanceMotion";
      int v3 = "InstanceMotion";
      goto LABEL_12;
    case 5uLL:
      uint64_t v2 = "MTLTagTypePrimitiveMotion";
      int v3 = "PrimitiveMotion";
      goto LABEL_12;
    case 6uLL:
      uint64_t v2 = "MTLTagTypeExtendedLimits";
      int v3 = "ExtendedLimits";
      goto LABEL_12;
    case 7uLL:
      uint64_t v2 = "MTLTagTypeCurveData";
      int v3 = "CurveData";
      goto LABEL_12;
    case 8uLL:
      uint64_t v2 = "MTLTagTypeMaxLevels";
      int v3 = "MaxLevels";
LABEL_12:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLTessellationControlPointIndexTypeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLTessellationControlPointIndexTypeUInt32";
  if (a2) {
    int v3 = "UInt32";
  }
  uint64_t v4 = "MTLTessellationControlPointIndexTypeUInt16";
  if (a2) {
    uint64_t v4 = "UInt16";
  }
  size_t v5 = "None";
  if (!a2) {
    size_t v5 = "MTLTessellationControlPointIndexTypeNone";
  }
  if (!this) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)2) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLTessellationFactorFormatAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLTessellationFactorFormatHalf";
  if (a2) {
    int v3 = "Half";
  }
  uint64_t v4 = "MTLTessellationFactorFormatFloat_SPI";
  if (a2) {
    uint64_t v4 = "Float_SPI";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLTessellationFactorStepFunctionAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLTessellationFactorStepFunctionConstant";
      int v3 = "Constant";
      goto LABEL_7;
    case 1uLL:
      uint64_t v2 = "MTLTessellationFactorStepFunctionPerPatch";
      int v3 = "PerPatch";
      goto LABEL_7;
    case 2uLL:
      uint64_t v2 = "MTLTessellationFactorStepFunctionPerInstance";
      int v3 = "PerInstance";
      goto LABEL_7;
    case 3uLL:
      uint64_t v2 = "MTLTessellationFactorStepFunctionPerPatchAndPerInstance";
      int v3 = "PerPatchAndPerInstance";
LABEL_7:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLTessellationPartitionModeAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLTessellationPartitionModePow2";
      int v3 = "Pow2";
      goto LABEL_7;
    case 1uLL:
      uint64_t v2 = "MTLTessellationPartitionModeInteger";
      int v3 = "Integer";
      goto LABEL_7;
    case 2uLL:
      uint64_t v2 = "MTLTessellationPartitionModeFractionalOdd";
      int v3 = "FractionalOdd";
      goto LABEL_7;
    case 3uLL:
      uint64_t v2 = "MTLTessellationPartitionModeFractionalEven";
      int v3 = "FractionalEven";
LABEL_7:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLTextureColorSpaceConversionMatrixAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLTextureColorSpaceConversionMatrixDefault";
      int v3 = "Default";
      goto LABEL_14;
    case 1uLL:
      uint64_t v2 = "MTLTextureColorSpaceConversionMatrixUtil1";
      int v3 = "Util1";
      goto LABEL_14;
    case 2uLL:
      uint64_t v2 = "MTLTextureColorSpaceConversionMatrixUtil2";
      int v3 = "Util2";
      goto LABEL_14;
    case 3uLL:
      uint64_t v2 = "MTLTextureColorSpaceConversionMatrixUtil3";
      int v3 = "Util3";
      goto LABEL_14;
    case 4uLL:
      uint64_t v2 = "MTLTextureColorSpaceConversionMatrixUtil4";
      int v3 = "Util4";
      goto LABEL_14;
    case 5uLL:
      uint64_t v2 = "MTLTextureColorSpaceConversionMatrixBT601Video";
      int v3 = "BT601Video";
      goto LABEL_14;
    case 6uLL:
      uint64_t v2 = "MTLTextureColorSpaceConversionMatrixBT601Full";
      int v3 = "BT601Full";
      goto LABEL_14;
    case 7uLL:
      uint64_t v2 = "MTLTextureColorSpaceConversionMatrixBT709Video";
      int v3 = "BT709Video";
      goto LABEL_14;
    case 8uLL:
      uint64_t v2 = "MTLTextureColorSpaceConversionMatrixBT709Full";
      int v3 = "BT709Full";
      goto LABEL_14;
    case 9uLL:
      uint64_t v2 = "MTLTextureColorSpaceConversionMatrixBT2020Video";
      int v3 = "BT2020Video";
      goto LABEL_14;
    case 0xAuLL:
      uint64_t v2 = "MTLTextureColorSpaceConversionMatrixBT2020Full";
      int v3 = "BT2020Full";
LABEL_14:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLTextureCompressionFeedbackAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  if ((uint64_t)this <= 31)
  {
    switch((unint64_t)this)
    {
      case 0uLL:
        if (!a2) {
          return "MTLTextureCompressionFeedbackUnknown";
        }
        return result;
      case 1uLL:
        BOOL v12 = "MTLTextureCompressionFeedbackSupported";
        BOOL v13 = "Supported";
        goto LABEL_48;
      case 2uLL:
        BOOL v12 = "MTLTextureCompressionFeedbackUnsupported";
        BOOL v13 = "Unsupported";
        goto LABEL_48;
      case 3uLL:
      case 5uLL:
      case 6uLL:
      case 7uLL:
        return result;
      case 4uLL:
        BOOL v12 = "MTLTextureCompressionFeedbackUnsupportedDevice";
        BOOL v13 = "UnsupportedDevice";
        goto LABEL_48;
      case 8uLL:
        BOOL v12 = "MTLTextureCompressionFeedbackUnsupportedPixelFormat";
        BOOL v13 = "UnsupportedPixelFormat";
LABEL_48:
        if (a2) {
          unint64_t result = v13;
        }
        else {
          unint64_t result = v12;
        }
        break;
      default:
        BOOL v11 = "MTLTextureCompressionFeedbackUnsupportedTextureUsageShaderWrite";
        if (a2) {
          BOOL v11 = "UnsupportedTextureUsageShaderWrite";
        }
        if (this == (GPUTools::MTL *)16) {
          unint64_t result = v11;
        }
        break;
    }
  }
  else if ((uint64_t)this <= 255)
  {
    BOOL v8 = "MTLTextureCompressionFeedbackUnsupportedTextureUsagePixelFormatView";
    if (a2) {
      BOOL v8 = "UnsupportedTextureUsagePixelFormatView";
    }
    size_t v9 = "MTLTextureCompressionFeedbackUnsupportedTextureType";
    if (a2) {
      size_t v9 = "UnsupportedTextureType";
    }
    BOOL v10 = "MTLTextureCompressionFeedbackUnsupportedHeapTypeSparse";
    if (a2) {
      BOOL v10 = "UnsupportedHeapTypeSparse";
    }
    if (this != (GPUTools::MTL *)128) {
      BOOL v10 = "Unknown";
    }
    if (this != (GPUTools::MTL *)64) {
      size_t v9 = v10;
    }
    if (this == (GPUTools::MTL *)32) {
      return v8;
    }
    else {
      return v9;
    }
  }
  else
  {
    uint64_t v4 = "MTLTextureCompressionFeedbackUnsupportedSmallTexture";
    if (a2) {
      uint64_t v4 = "UnsupportedSmallTexture";
    }
    size_t v5 = "MTLTextureCompressionFeedbackUnsupportedTextureUsageShaderAtomic";
    if (a2) {
      size_t v5 = "UnsupportedTextureUsageShaderAtomic";
    }
    if (this != (GPUTools::MTL *)2048) {
      size_t v5 = "Unknown";
    }
    if (this != (GPUTools::MTL *)1024) {
      uint64_t v4 = v5;
    }
    uint64_t v6 = "MTLTextureCompressionFeedbackUnsupportedLinearLayout";
    if (a2) {
      uint64_t v6 = "UnsupportedLinearLayout";
    }
    BOOL v7 = "MTLTextureCompressionFeedbackUnsupportedOptOut";
    if (a2) {
      BOOL v7 = "UnsupportedOptOut";
    }
    if (this != (GPUTools::MTL *)512) {
      BOOL v7 = "Unknown";
    }
    if (this != (GPUTools::MTL *)256) {
      uint64_t v6 = v7;
    }
    if ((uint64_t)this <= 1023) {
      return v6;
    }
    else {
      return v4;
    }
  }
  return result;
}

const char *GPUTools::MTL::GetMTLTextureCompressionFootprintAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLTextureCompressionFootprintLossless";
      int v3 = "Lossless";
      goto LABEL_7;
    case 1uLL:
      uint64_t v2 = "MTLTextureCompressionFootprintLevel1";
      int v3 = "Level1";
      goto LABEL_7;
    case 2uLL:
      uint64_t v2 = "MTLTextureCompressionFootprintLevel2";
      int v3 = "Level2";
      goto LABEL_7;
    case 3uLL:
      uint64_t v2 = "MTLTextureCompressionFootprintLevel3";
      int v3 = "Level3";
LABEL_7:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLTextureCompressionModeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLTextureCompressionModeOptOut";
  if (a2) {
    int v3 = "OptOut";
  }
  uint64_t v4 = "MTLTextureCompressionModeOptIn";
  if (a2) {
    uint64_t v4 = "OptIn";
  }
  size_t v5 = "Default";
  if (!a2) {
    size_t v5 = "MTLTextureCompressionModeDefault";
  }
  if (!this) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)2) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLTextureCompressionTypeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLTextureCompressionTypeLossy";
  if (a2) {
    int v3 = "Lossy";
  }
  uint64_t v4 = "MTLTextureCompressionTypeLossless";
  if (a2) {
    uint64_t v4 = "Lossless";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLTextureRotationAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLTextureRotation0Degrees";
      int v3 = "0Degrees";
      goto LABEL_8;
    case 1uLL:
      uint64_t v2 = "MTLTextureRotation90DegreesClockwise";
      int v3 = "90DegreesClockwise";
      goto LABEL_8;
    case 2uLL:
      uint64_t v2 = "MTLTextureRotation180DegreesClockwise";
      int v3 = "180DegreesClockwise";
      goto LABEL_8;
    case 3uLL:
      uint64_t v2 = "MTLTextureRotation270DegreesClockwise";
      int v3 = "270DegreesClockwise";
      goto LABEL_8;
    case 4uLL:
      uint64_t v2 = "MTLTextureRotationTranspose";
      int v3 = "Transpose";
LABEL_8:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLTextureSwizzleAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLTextureSwizzleZero";
      int v3 = "Zero";
      goto LABEL_9;
    case 1uLL:
      uint64_t v2 = "MTLTextureSwizzleOne";
      int v3 = "One";
      goto LABEL_9;
    case 2uLL:
      uint64_t v2 = "MTLTextureSwizzleRed";
      int v3 = "Red";
      goto LABEL_9;
    case 3uLL:
      uint64_t v2 = "MTLTextureSwizzleGreen";
      int v3 = "Green";
      goto LABEL_9;
    case 4uLL:
      uint64_t v2 = "MTLTextureSwizzleBlue";
      int v3 = "Blue";
      goto LABEL_9;
    case 5uLL:
      uint64_t v2 = "MTLTextureSwizzleAlpha";
      int v3 = "Alpha";
LABEL_9:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLTextureSwizzleShiftAsString(GPUTools::MTL *this, int a2)
{
  switch(__ROR8__(this, 3))
  {
    case 0:
      uint64_t v2 = "MTLTextureSwizzleShiftRed";
      int v3 = "Red";
      goto LABEL_7;
    case 1:
      uint64_t v2 = "MTLTextureSwizzleShiftGreen";
      int v3 = "Green";
      goto LABEL_7;
    case 2:
      uint64_t v2 = "MTLTextureSwizzleShiftBlue";
      int v3 = "Blue";
      goto LABEL_7;
    case 3:
      uint64_t v2 = "MTLTextureSwizzleShiftAlpha";
      int v3 = "Alpha";
LABEL_7:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLTextureTypeAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLTextureType1D";
      int v3 = "1D";
      goto LABEL_13;
    case 1uLL:
      uint64_t v2 = "MTLTextureType1DArray";
      int v3 = "1DArray";
      goto LABEL_13;
    case 2uLL:
      uint64_t v2 = "MTLTextureType2D";
      int v3 = "2D";
      goto LABEL_13;
    case 3uLL:
      uint64_t v2 = "MTLTextureType2DArray";
      int v3 = "2DArray";
      goto LABEL_13;
    case 4uLL:
      uint64_t v2 = "MTLTextureType2DMultisample";
      int v3 = "2DMultisample";
      goto LABEL_13;
    case 5uLL:
      uint64_t v2 = "MTLTextureTypeCube";
      int v3 = "Cube";
      goto LABEL_13;
    case 6uLL:
      uint64_t v2 = "MTLTextureTypeCubeArray";
      int v3 = "CubeArray";
      goto LABEL_13;
    case 7uLL:
      uint64_t v2 = "MTLTextureType3D";
      int v3 = "3D";
      goto LABEL_13;
    case 8uLL:
      uint64_t v2 = "MTLTextureType2DMultisampleArray";
      int v3 = "2DMultisampleArray";
      goto LABEL_13;
    case 9uLL:
      uint64_t v2 = "MTLTextureTypeTextureBuffer";
      int v3 = "TextureBuffer";
LABEL_13:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLTextureUsageAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  if ((uint64_t)this > 31)
  {
    uint64_t v4 = "MTLTextureUsageVideo";
    if (a2) {
      uint64_t v4 = "Video";
    }
    size_t v5 = "MTLTextureUsageBlockWritesOnly";
    if (a2) {
      size_t v5 = "BlockWritesOnly";
    }
    if (this != (GPUTools::MTL *)0x10000) {
      size_t v5 = "Unknown";
    }
    if (this != (GPUTools::MTL *)0x8000) {
      uint64_t v4 = v5;
    }
    uint64_t v6 = "MTLTextureUsageShaderAtomic";
    if (a2) {
      uint64_t v6 = "ShaderAtomic";
    }
    BOOL v7 = "MTLTextureUsageNoConcurrentAccess";
    if (a2) {
      BOOL v7 = "NoConcurrentAccess";
    }
    if (this != (GPUTools::MTL *)0x4000) {
      BOOL v7 = "Unknown";
    }
    if (this != (GPUTools::MTL *)32) {
      uint64_t v6 = v7;
    }
    if ((uint64_t)this < 0x8000) {
      return v6;
    }
    else {
      return v4;
    }
  }
  else
  {
    switch((unint64_t)this)
    {
      case 0uLL:
        if (!a2) {
          return "MTLTextureUsageUnknown";
        }
        return result;
      case 1uLL:
        size_t v9 = "MTLTextureUsageShaderRead";
        BOOL v10 = "ShaderRead";
        goto LABEL_33;
      case 2uLL:
        size_t v9 = "MTLTextureUsageShaderWrite";
        BOOL v10 = "ShaderWrite";
        goto LABEL_33;
      case 3uLL:
        return result;
      case 4uLL:
        size_t v9 = "MTLTextureUsageRenderTarget";
        BOOL v10 = "RenderTarget";
LABEL_33:
        if (a2) {
          unint64_t result = v10;
        }
        else {
          unint64_t result = v9;
        }
        break;
      default:
        BOOL v8 = "MTLTextureUsagePixelFormatView";
        if (a2) {
          BOOL v8 = "PixelFormatView";
        }
        if (this == (GPUTools::MTL *)16) {
          unint64_t result = v8;
        }
        break;
    }
  }
  return result;
}

const char *GPUTools::MTL::GetMTLThreadgroupDistributionModeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLThreadgroupDistributionModeSingleClusterGroup";
  if (a2) {
    int v3 = "SingleClusterGroup";
  }
  uint64_t v4 = "MTLThreadgroupDistributionModeSingleCluster";
  if (a2) {
    uint64_t v4 = "SingleCluster";
  }
  size_t v5 = "Default";
  if (!a2) {
    size_t v5 = "MTLThreadgroupDistributionModeDefault";
  }
  if (!this) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)2) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLTransformFeedbackStateAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLTransformFeedbackInactive";
  if (a2) {
    int v3 = "Inactive";
  }
  uint64_t v4 = "MTLTransformFeedbackActive";
  if (a2) {
    uint64_t v4 = "Active";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLTransformTypeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLTransformTypePackedFloat4x3";
  if (a2) {
    int v3 = "PackedFloat4x3";
  }
  uint64_t v4 = "MTLTransformTypeComponent";
  if (a2) {
    uint64_t v4 = "Component";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLTriangleFillModeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLTriangleFillModePoint";
  if (a2) {
    int v3 = "Point";
  }
  uint64_t v4 = "MTLTriangleFillModeLines";
  if (a2) {
    uint64_t v4 = "Lines";
  }
  size_t v5 = "Fill";
  if (!a2) {
    size_t v5 = "MTLTriangleFillModeFill";
  }
  if (!this) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)2) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLUnmappedDepthValueAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLUnmappedDepthValueZero";
  if (a2) {
    int v3 = "Zero";
  }
  uint64_t v4 = "MTLUnmappedDepthValueOne";
  if (a2) {
    uint64_t v4 = "One";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLVREyeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLVREyeRight";
  if (a2) {
    int v3 = "Right";
  }
  uint64_t v4 = "MTLVREyeLeft";
  if (a2) {
    uint64_t v4 = "Left";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLVRSubmitFlagsAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLVRSubmitLensDistortionApplied";
  if (a2) {
    int v3 = "LensDistortionApplied";
  }
  uint64_t v4 = "MTLVRSubmitDefault";
  if (a2) {
    uint64_t v4 = "Default";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLValidationCodeAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLValidationCodeTextureDescriptor";
      int v3 = "TextureDescriptor";
      goto LABEL_42;
    case 1uLL:
      uint64_t v2 = "MTLValidationCodeComputePipelineDescriptor";
      int v3 = "ComputePipelineDescriptor";
      goto LABEL_42;
    case 2uLL:
      uint64_t v2 = "MTLValidationCodeHeapDescriptor";
      int v3 = "HeapDescriptor";
      goto LABEL_42;
    case 3uLL:
      uint64_t v2 = "MTLValidationCodeRenderPipelineDescriptor";
      int v3 = "RenderPipelineDescriptor";
      goto LABEL_42;
    case 4uLL:
      uint64_t v2 = "MTLValidationCodeVertexDescriptor";
      int v3 = "VertexDescriptor";
      goto LABEL_42;
    case 5uLL:
      uint64_t v2 = "MTLValidationCodeNewSerializedDescriptor";
      int v3 = "NewSerializedDescriptor";
      goto LABEL_42;
    case 6uLL:
      uint64_t v2 = "MTLValidationCodeSamplerDescriptor";
      int v3 = "SamplerDescriptor";
      goto LABEL_42;
    case 7uLL:
      uint64_t v2 = "MTLValidationCodeArgumentEncoder";
      int v3 = "ArgumentEncoder";
      goto LABEL_42;
    case 8uLL:
      uint64_t v2 = "MTLValidationCodeFramebuffer";
      int v3 = "Framebuffer";
      goto LABEL_42;
    case 9uLL:
      uint64_t v2 = "MTLValidationCodeTileRenderPipelineDescriptor";
      int v3 = "TileRenderPipelineDescriptor";
      goto LABEL_42;
    case 0xAuLL:
      uint64_t v2 = "MTLValidationCodeDepthStencilState";
      int v3 = "DepthStencilState";
      goto LABEL_42;
    case 0xBuLL:
      uint64_t v2 = "MTLValidationCodeRenderPassDescriptor";
      int v3 = "RenderPassDescriptor";
      goto LABEL_42;
    case 0xCuLL:
      uint64_t v2 = "MTLValidationCodeNewSamplerState";
      int v3 = "NewSamplerState";
      goto LABEL_42;
    case 0xDuLL:
      uint64_t v2 = "MTLValidationCodeCommandQueue";
      int v3 = "CommandQueue";
      goto LABEL_42;
    case 0xEuLL:
      uint64_t v2 = "MTLValidationCodeCommandEncoder";
      int v3 = "CommandEncoder";
      goto LABEL_42;
    case 0xFuLL:
      uint64_t v2 = "MTLValidationCodeViewport";
      int v3 = "Viewport";
      goto LABEL_42;
    case 0x10uLL:
      uint64_t v2 = "MTLValidationCodeIndirectCommandBuffer";
      int v3 = "IndirectCommandBuffer";
      goto LABEL_42;
    case 0x11uLL:
      uint64_t v2 = "MTLValidationCodeBuffer";
      int v3 = "Buffer";
      goto LABEL_42;
    case 0x12uLL:
      uint64_t v2 = "MTLValidationCodeResource";
      int v3 = "Resource";
      goto LABEL_42;
    case 0x13uLL:
      uint64_t v2 = "MTLValidationCodePipelineState";
      int v3 = "PipelineState";
      goto LABEL_42;
    case 0x14uLL:
      uint64_t v2 = "MTLValidationCodeDraw";
      int v3 = "Draw";
      goto LABEL_42;
    case 0x15uLL:
      uint64_t v2 = "MTLValidationCodeBlitCommandEncoder";
      int v3 = "BlitCommandEncoder";
      goto LABEL_42;
    case 0x16uLL:
      uint64_t v2 = "MTLValidationCodeTexture";
      int v3 = "Texture";
      goto LABEL_42;
    case 0x17uLL:
      uint64_t v2 = "MTLValidationCodeBinaryArchive";
      int v3 = "BinaryArchive";
      goto LABEL_42;
    case 0x18uLL:
      uint64_t v2 = "MTLValidationCodeLibrary";
      int v3 = "Library";
      goto LABEL_42;
    case 0x19uLL:
      uint64_t v2 = "MTLValidationCodePixelFormat";
      int v3 = "PixelFormat";
      goto LABEL_42;
    case 0x1AuLL:
      uint64_t v2 = "MTLValidationCodeRasterizationRateMap";
      int v3 = "RasterizationRateMap";
      goto LABEL_42;
    case 0x1BuLL:
      uint64_t v2 = "MTLValidationCodeMotionEstimation";
      int v3 = "MotionEstimation";
      goto LABEL_42;
    case 0x1CuLL:
      uint64_t v2 = "MTLValidationCodeRenderCommandEncoder";
      int v3 = "RenderCommandEncoder";
      goto LABEL_42;
    case 0x1DuLL:
      uint64_t v2 = "MTLValidationCodeAcelerationStructureCommandEncoder";
      int v3 = "AcelerationStructureCommandEncoder";
      goto LABEL_42;
    case 0x1EuLL:
      uint64_t v2 = "MTLValidationCodeEvent";
      int v3 = "Event";
      goto LABEL_42;
    case 0x1FuLL:
      uint64_t v2 = "MTLValidationCodeMeshPipelineDescriptor";
      int v3 = "MeshPipelineDescriptor";
      goto LABEL_42;
    case 0x20uLL:
      uint64_t v2 = "MTLValidationCodeIOHandle";
      int v3 = "IOHandle";
      goto LABEL_42;
    case 0x21uLL:
      uint64_t v2 = "MTLValidationCodeIOCommandQueue";
      int v3 = "IOCommandQueue";
      goto LABEL_42;
    case 0x22uLL:
      uint64_t v2 = "MTLValidationCodeIOCommandBuffer";
      int v3 = "IOCommandBuffer";
      goto LABEL_42;
    case 0x23uLL:
      uint64_t v2 = "MTLValidationCodeResourceStateCommandEncoder";
      int v3 = "ResourceStateCommandEncoder";
      goto LABEL_42;
    case 0x24uLL:
      uint64_t v2 = "MTLValidationCodeResourceStateCommandEncoderMoveMappings";
      int v3 = "ResourceStateCommandEncoderMoveMappings";
      goto LABEL_42;
    case 0x25uLL:
      uint64_t v2 = "MTLValidationCodeSamplerArgumentBufferEncoding";
      int v3 = "SamplerArgumentBufferEncoding";
      goto LABEL_42;
    case 0x26uLL:
      uint64_t v2 = "MTLValidationCodeCount";
      int v3 = "Count";
LABEL_42:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLVertexAmplificationModeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLVertexAmplificationModeMask";
  if (a2) {
    int v3 = "Mask";
  }
  uint64_t v4 = "MTLVertexAmplificationModeCount";
  if (a2) {
    uint64_t v4 = "Count";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLVertexFormatAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v4 = "MTLVertexFormatInvalid";
      size_t v5 = "Invalid";
      goto LABEL_56;
    case 1uLL:
      uint64_t v4 = "MTLVertexFormatUChar2";
      size_t v5 = "UChar2";
      goto LABEL_56;
    case 2uLL:
      uint64_t v4 = "MTLVertexFormatUChar3";
      size_t v5 = "UChar3";
      goto LABEL_56;
    case 3uLL:
      uint64_t v4 = "MTLVertexFormatUChar4";
      size_t v5 = "UChar4";
      goto LABEL_56;
    case 4uLL:
      uint64_t v4 = "MTLVertexFormatChar2";
      size_t v5 = "Char2";
      goto LABEL_56;
    case 5uLL:
      uint64_t v4 = "MTLVertexFormatChar3";
      size_t v5 = "Char3";
      goto LABEL_56;
    case 6uLL:
      uint64_t v4 = "MTLVertexFormatChar4";
      size_t v5 = "Char4";
      goto LABEL_56;
    case 7uLL:
      uint64_t v4 = "MTLVertexFormatUChar2Normalized";
      size_t v5 = "UChar2Normalized";
      goto LABEL_56;
    case 8uLL:
      uint64_t v4 = "MTLVertexFormatUChar3Normalized";
      size_t v5 = "UChar3Normalized";
      goto LABEL_56;
    case 9uLL:
      uint64_t v4 = "MTLVertexFormatUChar4Normalized";
      size_t v5 = "UChar4Normalized";
      goto LABEL_56;
    case 0xAuLL:
      uint64_t v4 = "MTLVertexFormatChar2Normalized";
      size_t v5 = "Char2Normalized";
      goto LABEL_56;
    case 0xBuLL:
      uint64_t v4 = "MTLVertexFormatChar3Normalized";
      size_t v5 = "Char3Normalized";
      goto LABEL_56;
    case 0xCuLL:
      uint64_t v4 = "MTLVertexFormatChar4Normalized";
      size_t v5 = "Char4Normalized";
      goto LABEL_56;
    case 0xDuLL:
      uint64_t v4 = "MTLVertexFormatUShort2";
      size_t v5 = "UShort2";
      goto LABEL_56;
    case 0xEuLL:
      uint64_t v4 = "MTLVertexFormatUShort3";
      size_t v5 = "UShort3";
      goto LABEL_56;
    case 0xFuLL:
      uint64_t v4 = "MTLVertexFormatUShort4";
      size_t v5 = "UShort4";
      goto LABEL_56;
    case 0x10uLL:
      uint64_t v4 = "MTLVertexFormatShort2";
      size_t v5 = "Short2";
      goto LABEL_56;
    case 0x11uLL:
      uint64_t v4 = "MTLVertexFormatShort3";
      size_t v5 = "Short3";
      goto LABEL_56;
    case 0x12uLL:
      uint64_t v4 = "MTLVertexFormatShort4";
      size_t v5 = "Short4";
      goto LABEL_56;
    case 0x13uLL:
      uint64_t v4 = "MTLVertexFormatUShort2Normalized";
      size_t v5 = "UShort2Normalized";
      goto LABEL_56;
    case 0x14uLL:
      uint64_t v4 = "MTLVertexFormatUShort3Normalized";
      size_t v5 = "UShort3Normalized";
      goto LABEL_56;
    case 0x15uLL:
      uint64_t v4 = "MTLVertexFormatUShort4Normalized";
      size_t v5 = "UShort4Normalized";
      goto LABEL_56;
    case 0x16uLL:
      uint64_t v4 = "MTLVertexFormatShort2Normalized";
      size_t v5 = "Short2Normalized";
      goto LABEL_56;
    case 0x17uLL:
      uint64_t v4 = "MTLVertexFormatShort3Normalized";
      size_t v5 = "Short3Normalized";
      goto LABEL_56;
    case 0x18uLL:
      uint64_t v4 = "MTLVertexFormatShort4Normalized";
      size_t v5 = "Short4Normalized";
      goto LABEL_56;
    case 0x19uLL:
      uint64_t v4 = "MTLVertexFormatHalf2";
      size_t v5 = "Half2";
      goto LABEL_56;
    case 0x1AuLL:
      uint64_t v4 = "MTLVertexFormatHalf3";
      size_t v5 = "Half3";
      goto LABEL_56;
    case 0x1BuLL:
      uint64_t v4 = "MTLVertexFormatHalf4";
      size_t v5 = "Half4";
      goto LABEL_56;
    case 0x1CuLL:
      uint64_t v4 = "MTLVertexFormatFloat";
      size_t v5 = "Float";
      goto LABEL_56;
    case 0x1DuLL:
      uint64_t v4 = "MTLVertexFormatFloat2";
      size_t v5 = "Float2";
      goto LABEL_56;
    case 0x1EuLL:
      uint64_t v4 = "MTLVertexFormatFloat3";
      size_t v5 = "Float3";
      goto LABEL_56;
    case 0x1FuLL:
      uint64_t v4 = "MTLVertexFormatFloat4";
      size_t v5 = "Float4";
      goto LABEL_56;
    case 0x20uLL:
      uint64_t v4 = "MTLVertexFormatInt";
      size_t v5 = "Int";
      goto LABEL_56;
    case 0x21uLL:
      uint64_t v4 = "MTLVertexFormatInt2";
      size_t v5 = "Int2";
      goto LABEL_56;
    case 0x22uLL:
      uint64_t v4 = "MTLVertexFormatInt3";
      size_t v5 = "Int3";
      goto LABEL_56;
    case 0x23uLL:
      uint64_t v4 = "MTLVertexFormatInt4";
      size_t v5 = "Int4";
      goto LABEL_56;
    case 0x24uLL:
      uint64_t v4 = "MTLVertexFormatUInt";
      size_t v5 = "UInt";
      goto LABEL_56;
    case 0x25uLL:
      uint64_t v4 = "MTLVertexFormatUInt2";
      size_t v5 = "UInt2";
      goto LABEL_56;
    case 0x26uLL:
      uint64_t v4 = "MTLVertexFormatUInt3";
      size_t v5 = "UInt3";
      goto LABEL_56;
    case 0x27uLL:
      uint64_t v4 = "MTLVertexFormatUInt4";
      size_t v5 = "UInt4";
      goto LABEL_56;
    case 0x28uLL:
      uint64_t v4 = "MTLVertexFormatInt1010102Normalized";
      size_t v5 = "Int1010102Normalized";
      goto LABEL_56;
    case 0x29uLL:
      uint64_t v4 = "MTLVertexFormatUInt1010102Normalized";
      size_t v5 = "UInt1010102Normalized";
      goto LABEL_56;
    case 0x2AuLL:
      uint64_t v4 = "MTLVertexFormatUChar4Normalized_BGRA";
      size_t v5 = "UChar4Normalized_BGRA";
      goto LABEL_56;
    case 0x2DuLL:
      uint64_t v4 = "MTLVertexFormatUChar";
      size_t v5 = "UChar";
      goto LABEL_56;
    case 0x2EuLL:
      uint64_t v4 = "MTLVertexFormatChar";
      size_t v5 = "Char";
      goto LABEL_56;
    case 0x2FuLL:
      uint64_t v4 = "MTLVertexFormatUCharNormalized";
      size_t v5 = "UCharNormalized";
      goto LABEL_56;
    case 0x30uLL:
      uint64_t v4 = "MTLVertexFormatCharNormalized";
      size_t v5 = "CharNormalized";
      goto LABEL_56;
    case 0x31uLL:
      uint64_t v4 = "MTLVertexFormatUShort";
      size_t v5 = "UShort";
      goto LABEL_56;
    case 0x32uLL:
      uint64_t v4 = "MTLVertexFormatShort";
      size_t v5 = "Short";
      goto LABEL_56;
    case 0x33uLL:
      uint64_t v4 = "MTLVertexFormatUShortNormalized";
      size_t v5 = "UShortNormalized";
      goto LABEL_56;
    case 0x34uLL:
      uint64_t v4 = "MTLVertexFormatShortNormalized";
      size_t v5 = "ShortNormalized";
      goto LABEL_56;
    case 0x35uLL:
      uint64_t v4 = "MTLVertexFormatHalf";
      size_t v5 = "Half";
      goto LABEL_56;
    case 0x36uLL:
      uint64_t v4 = "MTLVertexFormatFloatRG11B10";
      size_t v5 = "FloatRG11B10";
      goto LABEL_56;
    case 0x37uLL:
      uint64_t v4 = "MTLVertexFormatFloatRGB9E5";
      size_t v5 = "FloatRGB9E5";
LABEL_56:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLVertexStepFunctionAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "MTLVertexStepFunctionConstant";
      int v3 = "Constant";
      goto LABEL_8;
    case 1uLL:
      uint64_t v2 = "MTLVertexStepFunctionPerVertex";
      int v3 = "PerVertex";
      goto LABEL_8;
    case 2uLL:
      uint64_t v2 = "MTLVertexStepFunctionPerInstance";
      int v3 = "PerInstance";
      goto LABEL_8;
    case 3uLL:
      uint64_t v2 = "MTLVertexStepFunctionPerPatch";
      int v3 = "PerPatch";
      goto LABEL_8;
    case 4uLL:
      uint64_t v2 = "MTLVertexStepFunctionPerPatchControlPoint";
      int v3 = "PerPatchControlPoint";
LABEL_8:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLVisibilityResultModeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLVisibilityResultModeDisabled";
  if (a2) {
    int v3 = "Disabled";
  }
  uint64_t v4 = "MTLVisibilityResultModeCounting";
  if (a2) {
    uint64_t v4 = "Counting";
  }
  size_t v5 = "Boolean";
  if (!a2) {
    size_t v5 = "MTLVisibilityResultModeBoolean";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLWindingAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLWindingCounterClockwise";
  if (a2) {
    int v3 = "CounterClockwise";
  }
  uint64_t v4 = "MTLWindingClockwise";
  if (a2) {
    uint64_t v4 = "Clockwise";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::Get_MTLArgumentBufferPatchingTypeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "_MTLArgumentBufferPatchingTypeNone";
  if (a2) {
    int v3 = "None";
  }
  uint64_t v4 = "_MTLArgumentBufferPatchingTypeReplace";
  if (a2) {
    uint64_t v4 = "Replace";
  }
  size_t v5 = "Indexed";
  if (!a2) {
    size_t v5 = "_MTLArgumentBufferPatchingTypeIndexed";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::Get_MTLArgumentBufferResourceTypeAsString(GPUTools::MTL *this, int a2)
{
  switch((unint64_t)this)
  {
    case 0uLL:
      uint64_t v2 = "_MTLArgumentBufferResourceTypeTexture";
      int v3 = "Texture";
      goto LABEL_13;
    case 1uLL:
      uint64_t v2 = "_MTLArgumentBufferResourceTypeSampler";
      int v3 = "Sampler";
      goto LABEL_13;
    case 2uLL:
      uint64_t v2 = "_MTLArgumentBufferResourceTypeConstant";
      int v3 = "Constant";
      goto LABEL_13;
    case 3uLL:
      uint64_t v2 = "_MTLArgumentBufferResourceTypeBuffer";
      int v3 = "Buffer";
      goto LABEL_13;
    case 4uLL:
      uint64_t v2 = "_MTLArgumentBufferResourceTypePipelineState";
      int v3 = "PipelineState";
      goto LABEL_13;
    case 5uLL:
      uint64_t v2 = "_MTLArgumentBufferResourceTypeIndirectCommandBuffer";
      int v3 = "IndirectCommandBuffer";
      goto LABEL_13;
    case 6uLL:
      uint64_t v2 = "_MTLArgumentBufferResourceTypeVisibleFunctionTable";
      int v3 = "VisibleFunctionTable";
      goto LABEL_13;
    case 7uLL:
      uint64_t v2 = "_MTLArgumentBufferResourceTypeIntersectionFunctionTable";
      int v3 = "IntersectionFunctionTable";
      goto LABEL_13;
    case 8uLL:
      uint64_t v2 = "_MTLArgumentBufferResourceTypeAccelerationStructure";
      int v3 = "AccelerationStructure";
      goto LABEL_13;
    case 9uLL:
      uint64_t v2 = "_MTLArgumentBufferResourceTypeCount";
      int v3 = "Count";
LABEL_13:
      if (a2) {
        unint64_t result = v3;
      }
      else {
        unint64_t result = v2;
      }
      break;
    default:
      unint64_t result = "Unknown";
      break;
  }
  return result;
}

const char *GPUTools::MTL::Get_MTLMachOTypeAsString(GPUTools::MTL *this, int a2)
{
  unint64_t result = "Unknown";
  switch((unint64_t)this)
  {
    case 0x1000013uLL:
      uint64_t v4 = "_MTLMachOTypeAppleGPU";
      size_t v5 = "AppleGPU";
      goto LABEL_6;
    case 0x1000014uLL:
      uint64_t v4 = "_MTLMachOTypeAMDGPU";
      size_t v5 = "AMDGPU";
      goto LABEL_6;
    case 0x1000015uLL:
      uint64_t v4 = "_MTLMachOTypeIntelGPU";
      size_t v5 = "IntelGPU";
      goto LABEL_6;
    case 0x1000017uLL:
      uint64_t v4 = "_MTLMachOTypeAIR";
      size_t v5 = "AIR";
LABEL_6:
      if (a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

const char *GPUTools::MTL::GetMTLFXSpatialScalerColorProcessingModeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLFXSpatialScalerColorProcessingModePerceptual";
  if (a2) {
    int v3 = "Perceptual";
  }
  uint64_t v4 = "MTLFXSpatialScalerColorProcessingModeLinear";
  if (a2) {
    uint64_t v4 = "Linear";
  }
  size_t v5 = "HDR";
  if (!a2) {
    size_t v5 = "MTLFXSpatialScalerColorProcessingModeHDR";
  }
  if (this == (GPUTools::MTL *)2) {
    uint64_t v2 = v5;
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v4;
  }
  if (this) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLFXSpatialScalerVersionAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLFXSpatialScalerVersionPrivate_Bicubic";
  if (a2) {
    int v3 = "Private_Bicubic";
  }
  uint64_t v4 = "MTLFXSpatialScalerVersionPrivate_v1";
  if (a2) {
    uint64_t v4 = "Private_v1";
  }
  size_t v5 = "MTLFXSpatialScalerVersionPrivate_ASE";
  if (a2) {
    size_t v5 = "Private_ASE";
  }
  if (this != (GPUTools::MTL *)65538) {
    size_t v5 = "Unknown";
  }
  if (this != (GPUTools::MTL *)65537) {
    uint64_t v4 = v5;
  }
  if (this != (GPUTools::MTL *)0x10000) {
    int v3 = v4;
  }
  uint64_t v6 = "MTLFXSpatialScalerVersion_v1";
  if (a2) {
    uint64_t v6 = "_v1";
  }
  BOOL v7 = "MTLFXSpatialScalerVersion_End";
  if (a2) {
    BOOL v7 = "_End";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v7;
  }
  if (!this) {
    uint64_t v2 = v6;
  }
  if ((uint64_t)this < 0x10000) {
    return v2;
  }
  else {
    return v3;
  }
}

const char *GPUTools::MTL::GetMTLFXTemporalScalerExecutionModeAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLFXTemporalScalerExecutionModeGPU";
  if (a2) {
    int v3 = "GPU";
  }
  uint64_t v4 = "MTLFXTemporalScalerExecutionModeANE";
  if (a2) {
    uint64_t v4 = "ANE";
  }
  if (!this) {
    uint64_t v2 = v4;
  }
  if (this == (GPUTools::MTL *)1) {
    return v3;
  }
  else {
    return v2;
  }
}

const char *GPUTools::MTL::GetMTLFXTemporalScalerVersionAsString(GPUTools::MTL *this, int a2)
{
  uint64_t v2 = "Unknown";
  int v3 = "MTLFXTemporalScalerVersionPrivate_TAAU";
  if (a2) {
    int v3 = "Private_TAAU";
  }
  uint64_t v4 = "MTLFXTemporalScalerVersionPrivate_BRNet3";
  if (a2) {
    uint64_t v4 = "Private_BRNet3";
  }
  if (this != (GPUTools::MTL *)0x10000) {
    uint64_t v4 = "Unknown";
  }
  if (this != (GPUTools::MTL *)65537) {
    int v3 = v4;
  }
  size_t v5 = "MTLFXTemporalScalerVersion_v1";
  if (a2) {
    size_t v5 = "_v1";
  }
  uint64_t v6 = "MTLFXTemporalScalerVersion_End";
  if (a2) {
    uint64_t v6 = "_End";
  }
  if (this == (GPUTools::MTL *)1) {
    uint64_t v2 = v6;
  }
  if (!this) {
    uint64_t v2 = v5;
  }
  if ((uint64_t)this < 0x10000) {
    return v2;
  }
  else {
    return v3;
  }
}

void GPUTools::MTL::InstallMTLFuncEnumsStringTable(GPUTools::MTL *this)
{
  if (GPUTools::MTL::InstallMTLFuncEnumsStringTable(void)::sOnce != -1) {
    dispatch_once(&GPUTools::MTL::InstallMTLFuncEnumsStringTable(void)::sOnce, &__block_literal_global_2);
  }
}

uint64_t ___ZN8GPUTools3MTL30InstallMTLFuncEnumsStringTableEv_block_invoke()
{
  dy_add_fenum_string_tables();
  dy_add_fenum_string_tables();
  dy_add_fenum_string_tables();
  dy_add_fenum_string_tables();
  dy_add_fenum_string_tables();
  dy_add_fenum_string_tables();
  dy_add_fenum_string_tables();
  return dy_add_fenum_string_tables();
}

uint64_t GPUTools::MTL::GetFuncEnumReceiverType(GPUTools::MTL *this)
{
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_2557EFC20, (uint32x4_t)vaddq_s32(vdupq_n_s32(this), (int32x4_t)xmmword_2557EFC10)))) & 1) == 0&& (this + 6656) >= 5&& (this + 6144) >= 0x32&& (this & 0xFFFFFFFE) != 0xFFFFCF00&& (this & 0xFFFFFFF0) != 0xFFFFE400)
  {
    return 0;
  }
  if ((int)this > -12545)
  {
    if ((int)this > -7169)
    {
      switch(this)
      {
        case 0xFFFFE800:
        case 0xFFFFE80C:
        case 0xFFFFE80E:
        case 0xFFFFE827:
        case 0xFFFFE82B:
          uint64_t result = 10;
          break;
        case 0xFFFFE801:
        case 0xFFFFE803:
        case 0xFFFFE80A:
        case 0xFFFFE80B:
        case 0xFFFFE80D:
        case 0xFFFFE80F:
        case 0xFFFFE816:
        case 0xFFFFE819:
        case 0xFFFFE81C:
        case 0xFFFFE821:
        case 0xFFFFE822:
        case 0xFFFFE823:
        case 0xFFFFE830:
        case 0xFFFFE831:
LABEL_10:
          uint64_t result = 36;
          break;
        case 0xFFFFE802:
        case 0xFFFFE812:
        case 0xFFFFE817:
          uint64_t result = 7;
          break;
        case 0xFFFFE804:
        case 0xFFFFE807:
          uint64_t result = 11;
          break;
        case 0xFFFFE805:
          uint64_t result = 15;
          break;
        case 0xFFFFE806:
        case 0xFFFFE809:
        case 0xFFFFE81B:
        case 0xFFFFE81D:
          uint64_t result = 8;
          break;
        case 0xFFFFE808:
        case 0xFFFFE818:
        case 0xFFFFE820:
        case 0xFFFFE824:
        case 0xFFFFE826:
          uint64_t result = 5;
          break;
        case 0xFFFFE810:
        case 0xFFFFE814:
        case 0xFFFFE828:
        case 0xFFFFE829:
          uint64_t result = 9;
          break;
        case 0xFFFFE811:
        case 0xFFFFE81E:
        case 0xFFFFE81F:
        case 0xFFFFE825:
          uint64_t result = 6;
          break;
        case 0xFFFFE813:
        case 0xFFFFE815:
        case 0xFFFFE81A:
          uint64_t result = 4;
          break;
        case 0xFFFFE82A:
        case 0xFFFFE82C:
          uint64_t result = 14;
          break;
        case 0xFFFFE82D:
        case 0xFFFFE82E:
          uint64_t result = 13;
          break;
        case 0xFFFFE82F:
          uint64_t result = 12;
          break;
        default:
          switch(this)
          {
            case 0xFFFFE400:
            case 0xFFFFE402:
            case 0xFFFFE403:
            case 0xFFFFE404:
            case 0xFFFFE405:
            case 0xFFFFE406:
            case 0xFFFFE408:
            case 0xFFFFE409:
            case 0xFFFFE40E:
            case 0xFFFFE40F:
              uint64_t result = 3;
              break;
            case 0xFFFFE401:
            case 0xFFFFE407:
            case 0xFFFFE40A:
            case 0xFFFFE40B:
            case 0xFFFFE40C:
              uint64_t result = 2;
              break;
            case 0xFFFFE40D:
              uint64_t result = 85;
              break;
            default:
              switch(this)
              {
                case 0xFFFFE600:
                case 0xFFFFE601:
                case 0xFFFFE602:
                case 0xFFFFE603:
                case 0xFFFFE604:
                  uint64_t result = 84;
                  break;
                default:
                  return 0;
              }
              break;
          }
          break;
      }
    }
    else
    {
      int v2 = this + 10240;
      uint64_t result = 1;
      switch(v2)
      {
        case 0:
        case 11:
        case 15:
LABEL_18:
          uint64_t result = 25;
          break;
        case 1:
        case 3:
        case 7:
        case 10:
          goto LABEL_10;
        case 2:
        case 4:
        case 6:
        case 8:
        case 9:
        case 13:
        case 18:
        case 28:
        case 35:
        case 36:
        case 39:
        case 42:
        case 55:
        case 76:
LABEL_14:
          uint64_t result = 80;
          break;
        case 5:
        case 12:
        case 17:
        case 19:
        case 30:
        case 37:
        case 40:
        case 53:
        case 54:
LABEL_24:
          uint64_t result = 22;
          break;
        case 14:
        case 77:
LABEL_56:
          uint64_t result = 75;
          break;
        case 20:
        case 41:
        case 48:
        case 56:
        case 68:
        case 75:
LABEL_21:
          uint64_t result = 71;
          break;
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 31:
        case 38:
        case 74:
LABEL_31:
          uint64_t result = 57;
          break;
        case 26:
        case 49:
        case 69:
        case 78:
LABEL_40:
          uint64_t result = 29;
          break;
        case 27:
LABEL_42:
          uint64_t result = 74;
          break;
        case 29:
        case 32:
        case 33:
LABEL_36:
          uint64_t result = 50;
          break;
        case 34:
          uint64_t result = 77;
          break;
        case 43:
        case 44:
        case 45:
        case 46:
        case 50:
        case 58:
        case 59:
        case 67:
        case 70:
        case 71:
        case 73:
        case 81:
        case 84:
LABEL_30:
          uint64_t result = 16;
          break;
        case 47:
        case 62:
        case 63:
        case 66:
        case 80:
        case 87:
LABEL_32:
          uint64_t result = 83;
          break;
        case 51:
LABEL_55:
          uint64_t result = 37;
          break;
        case 52:
        case 57:
LABEL_37:
          uint64_t result = 62;
          break;
        case 60:
        case 61:
        case 64:
        case 65:
        case 79:
        case 88:
LABEL_25:
          uint64_t result = 60;
          break;
        case 72:
          return result;
        case 82:
        case 85:
        case 86:
LABEL_20:
          uint64_t result = 17;
          break;
        case 83:
LABEL_43:
          uint64_t result = 43;
          break;
        case 89:
LABEL_46:
          uint64_t result = 23;
          break;
        default:
          return 0;
      }
    }
  }
  else if ((int)this <= -18431)
  {
    switch(this)
    {
      case 0xFFFFB000:
      case 0xFFFFB001:
      case 0xFFFFB002:
      case 0xFFFFB003:
      case 0xFFFFB004:
      case 0xFFFFB005:
      case 0xFFFFB006:
        uint64_t result = 39;
        break;
      case 0xFFFFB007:
      case 0xFFFFB008:
      case 0xFFFFB009:
      case 0xFFFFB00A:
      case 0xFFFFB00B:
      case 0xFFFFB00C:
      case 0xFFFFB00D:
      case 0xFFFFB00E:
      case 0xFFFFB00F:
      case 0xFFFFB010:
      case 0xFFFFB011:
      case 0xFFFFB012:
      case 0xFFFFB013:
      case 0xFFFFB014:
      case 0xFFFFB015:
      case 0xFFFFB016:
      case 0xFFFFB017:
      case 0xFFFFB018:
LABEL_29:
        uint64_t result = 40;
        break;
      default:
        if (this != -18432 && this != -18431) {
          return 0;
        }
        goto LABEL_10;
    }
  }
  else
  {
    switch(this)
    {
      case 0xFFFFC000:
      case 0xFFFFC001:
      case 0xFFFFC002:
      case 0xFFFFC003:
      case 0xFFFFC004:
      case 0xFFFFC005:
      case 0xFFFFC006:
      case 0xFFFFC007:
      case 0xFFFFC008:
      case 0xFFFFC009:
      case 0xFFFFC00A:
      case 0xFFFFC00B:
      case 0xFFFFC09A:
      case 0xFFFFC09B:
      case 0xFFFFC0AB:
      case 0xFFFFC0AC:
      case 0xFFFFC0AD:
      case 0xFFFFC0AE:
      case 0xFFFFC0AF:
      case 0xFFFFC0FD:
      case 0xFFFFC104:
      case 0xFFFFC185:
      case 0xFFFFC186:
      case 0xFFFFC187:
      case 0xFFFFC188:
      case 0xFFFFC197:
      case 0xFFFFC198:
      case 0xFFFFC1A8:
      case 0xFFFFC1A9:
      case 0xFFFFC1AA:
      case 0xFFFFC1FA:
      case 0xFFFFC1FB:
      case 0xFFFFC1FC:
      case 0xFFFFC1FD:
      case 0xFFFFC246:
      case 0xFFFFC248:
      case 0xFFFFC24A:
      case 0xFFFFC274:
      case 0xFFFFC275:
      case 0xFFFFC38E:
      case 0xFFFFC38F:
      case 0xFFFFC390:
      case 0xFFFFC391:
      case 0xFFFFC392:
      case 0xFFFFC393:
        uint64_t result = 21;
        break;
      case 0xFFFFC00C:
      case 0xFFFFC00D:
      case 0xFFFFC00E:
      case 0xFFFFC00F:
      case 0xFFFFC010:
      case 0xFFFFC011:
      case 0xFFFFC012:
      case 0xFFFFC09C:
      case 0xFFFFC0B0:
      case 0xFFFFC106:
      case 0xFFFFC10F:
      case 0xFFFFC118:
      case 0xFFFFC119:
      case 0xFFFFC11A:
      case 0xFFFFC11E:
      case 0xFFFFC1D6:
      case 0xFFFFC1E0:
      case 0xFFFFC1FE:
      case 0xFFFFC268:
      case 0xFFFFC269:
      case 0xFFFFC36F:
      case 0xFFFFC370:
      case 0xFFFFC403:
        goto LABEL_24;
      case 0xFFFFC013:
      case 0xFFFFC014:
      case 0xFFFFC015:
      case 0xFFFFC016:
      case 0xFFFFC017:
      case 0xFFFFC018:
      case 0xFFFFC019:
      case 0xFFFFC01A:
      case 0xFFFFC01B:
      case 0xFFFFC01C:
      case 0xFFFFC01D:
      case 0xFFFFC01E:
      case 0xFFFFC01F:
      case 0xFFFFC020:
      case 0xFFFFC021:
      case 0xFFFFC022:
      case 0xFFFFC0B6:
      case 0xFFFFC0BD:
      case 0xFFFFC0DC:
      case 0xFFFFC0E9:
      case 0xFFFFC0FB:
      case 0xFFFFC13F:
      case 0xFFFFC140:
      case 0xFFFFC172:
      case 0xFFFFC173:
      case 0xFFFFC174:
      case 0xFFFFC189:
      case 0xFFFFC18A:
      case 0xFFFFC1A1:
      case 0xFFFFC1A2:
      case 0xFFFFC1DC:
      case 0xFFFFC1E5:
      case 0xFFFFC1E6:
      case 0xFFFFC1E7:
      case 0xFFFFC1FF:
      case 0xFFFFC200:
      case 0xFFFFC201:
      case 0xFFFFC202:
      case 0xFFFFC27B:
      case 0xFFFFC2A0:
      case 0xFFFFC2A9:
      case 0xFFFFC2C7:
      case 0xFFFFC31D:
      case 0xFFFFC31E:
      case 0xFFFFC31F:
      case 0xFFFFC320:
      case 0xFFFFC353:
      case 0xFFFFC373:
      case 0xFFFFC374:
      case 0xFFFFC3CE:
      case 0xFFFFC3FC:
      case 0xFFFFC422:
      case 0xFFFFC42A:
      case 0xFFFFC42C:
      case 0xFFFFC44A:
      case 0xFFFFC44B:
      case 0xFFFFC468:
      case 0xFFFFC469:
      case 0xFFFFC46A:
      case 0xFFFFC46B:
      case 0xFFFFC48F:
      case 0xFFFFC490:
      case 0xFFFFC491:
        goto LABEL_18;
      case 0xFFFFC023:
      case 0xFFFFC024:
      case 0xFFFFC025:
      case 0xFFFFC026:
      case 0xFFFFC027:
      case 0xFFFFC028:
      case 0xFFFFC029:
      case 0xFFFFC02A:
      case 0xFFFFC02B:
      case 0xFFFFC02C:
      case 0xFFFFC0FA:
      case 0xFFFFC23D:
      case 0xFFFFC23E:
      case 0xFFFFC23F:
      case 0xFFFFC240:
      case 0xFFFFC241:
      case 0xFFFFC242:
      case 0xFFFFC243:
      case 0xFFFFC244:
      case 0xFFFFC2AB:
      case 0xFFFFC2F8:
      case 0xFFFFC46C:
      case 0xFFFFC46D:
      case 0xFFFFC46E:
      case 0xFFFFC46F:
        uint64_t result = 27;
        break;
      case 0xFFFFC02D:
      case 0xFFFFC02E:
      case 0xFFFFC02F:
      case 0xFFFFC030:
      case 0xFFFFC031:
      case 0xFFFFC032:
      case 0xFFFFC033:
      case 0xFFFFC034:
      case 0xFFFFC035:
      case 0xFFFFC036:
      case 0xFFFFC037:
      case 0xFFFFC038:
      case 0xFFFFC039:
      case 0xFFFFC03A:
      case 0xFFFFC03B:
      case 0xFFFFC03C:
      case 0xFFFFC03D:
      case 0xFFFFC03E:
      case 0xFFFFC09D:
      case 0xFFFFC09E:
      case 0xFFFFC0A4:
      case 0xFFFFC0B1:
      case 0xFFFFC0EA:
      case 0xFFFFC0EB:
      case 0xFFFFC0FE:
      case 0xFFFFC0FF:
      case 0xFFFFC11C:
      case 0xFFFFC131:
      case 0xFFFFC132:
      case 0xFFFFC151:
      case 0xFFFFC152:
      case 0xFFFFC153:
      case 0xFFFFC154:
      case 0xFFFFC16F:
      case 0xFFFFC175:
      case 0xFFFFC176:
      case 0xFFFFC177:
      case 0xFFFFC178:
      case 0xFFFFC1A3:
      case 0xFFFFC1A4:
      case 0xFFFFC1A5:
      case 0xFFFFC203:
      case 0xFFFFC276:
      case 0xFFFFC28C:
      case 0xFFFFC2A1:
      case 0xFFFFC2A2:
      case 0xFFFFC2A3:
      case 0xFFFFC2F9:
      case 0xFFFFC2FA:
      case 0xFFFFC2FB:
      case 0xFFFFC321:
      case 0xFFFFC322:
      case 0xFFFFC323:
      case 0xFFFFC324:
      case 0xFFFFC362:
      case 0xFFFFC363:
      case 0xFFFFC364:
      case 0xFFFFC365:
      case 0xFFFFC366:
      case 0xFFFFC367:
      case 0xFFFFC368:
      case 0xFFFFC369:
      case 0xFFFFC36A:
      case 0xFFFFC371:
      case 0xFFFFC44C:
      case 0xFFFFC44D:
      case 0xFFFFC44E:
      case 0xFFFFC44F:
      case 0xFFFFC450:
      case 0xFFFFC451:
      case 0xFFFFC452:
      case 0xFFFFC470:
      case 0xFFFFC471:
        uint64_t result = 28;
        break;
      case 0xFFFFC03F:
      case 0xFFFFC124:
      case 0xFFFFC18B:
      case 0xFFFFC204:
      case 0xFFFFC2AC:
      case 0xFFFFC2AD:
      case 0xFFFFC2FC:
      case 0xFFFFC2FD:
      case 0xFFFFC2FE:
      case 0xFFFFC325:
      case 0xFFFFC326:
      case 0xFFFFC34B:
      case 0xFFFFC34C:
        goto LABEL_40;
      case 0xFFFFC040:
        uint64_t result = 34;
        break;
      case 0xFFFFC041:
      case 0xFFFFC042:
      case 0xFFFFC043:
      case 0xFFFFC044:
      case 0xFFFFC045:
      case 0xFFFFC046:
      case 0xFFFFC047:
      case 0xFFFFC048:
      case 0xFFFFC049:
      case 0xFFFFC04A:
      case 0xFFFFC04B:
      case 0xFFFFC04C:
      case 0xFFFFC04D:
      case 0xFFFFC04E:
      case 0xFFFFC04F:
      case 0xFFFFC050:
      case 0xFFFFC051:
      case 0xFFFFC052:
      case 0xFFFFC053:
      case 0xFFFFC054:
      case 0xFFFFC055:
      case 0xFFFFC056:
      case 0xFFFFC057:
      case 0xFFFFC058:
      case 0xFFFFC059:
      case 0xFFFFC05A:
      case 0xFFFFC0B2:
      case 0xFFFFC0B3:
      case 0xFFFFC0B8:
      case 0xFFFFC0B9:
      case 0xFFFFC0BA:
      case 0xFFFFC0BB:
      case 0xFFFFC0DA:
      case 0xFFFFC0DB:
      case 0xFFFFC0DD:
      case 0xFFFFC100:
      case 0xFFFFC107:
      case 0xFFFFC108:
      case 0xFFFFC110:
      case 0xFFFFC111:
      case 0xFFFFC11B:
      case 0xFFFFC11D:
      case 0xFFFFC120:
      case 0xFFFFC121:
      case 0xFFFFC123:
      case 0xFFFFC125:
      case 0xFFFFC126:
      case 0xFFFFC127:
      case 0xFFFFC128:
      case 0xFFFFC135:
      case 0xFFFFC13E:
      case 0xFFFFC14E:
      case 0xFFFFC14F:
      case 0xFFFFC150:
      case 0xFFFFC159:
      case 0xFFFFC15B:
      case 0xFFFFC15C:
      case 0xFFFFC15D:
      case 0xFFFFC161:
      case 0xFFFFC162:
      case 0xFFFFC163:
      case 0xFFFFC16E:
      case 0xFFFFC170:
      case 0xFFFFC171:
      case 0xFFFFC182:
      case 0xFFFFC183:
      case 0xFFFFC184:
      case 0xFFFFC194:
      case 0xFFFFC195:
      case 0xFFFFC196:
      case 0xFFFFC19C:
      case 0xFFFFC19D:
      case 0xFFFFC19F:
      case 0xFFFFC1A0:
      case 0xFFFFC1D8:
      case 0xFFFFC1DB:
      case 0xFFFFC1E2:
      case 0xFFFFC1E3:
      case 0xFFFFC1E4:
      case 0xFFFFC1EC:
      case 0xFFFFC1ED:
      case 0xFFFFC208:
      case 0xFFFFC209:
      case 0xFFFFC20A:
      case 0xFFFFC20B:
      case 0xFFFFC20C:
      case 0xFFFFC20D:
      case 0xFFFFC20E:
      case 0xFFFFC20F:
      case 0xFFFFC210:
      case 0xFFFFC211:
      case 0xFFFFC212:
      case 0xFFFFC213:
      case 0xFFFFC214:
      case 0xFFFFC215:
      case 0xFFFFC216:
      case 0xFFFFC217:
      case 0xFFFFC218:
      case 0xFFFFC219:
      case 0xFFFFC21A:
      case 0xFFFFC21B:
      case 0xFFFFC21C:
      case 0xFFFFC21D:
      case 0xFFFFC21E:
      case 0xFFFFC21F:
      case 0xFFFFC220:
      case 0xFFFFC221:
      case 0xFFFFC222:
      case 0xFFFFC223:
      case 0xFFFFC224:
      case 0xFFFFC225:
      case 0xFFFFC226:
      case 0xFFFFC227:
      case 0xFFFFC228:
      case 0xFFFFC229:
      case 0xFFFFC23A:
      case 0xFFFFC23B:
      case 0xFFFFC24C:
      case 0xFFFFC24F:
      case 0xFFFFC251:
      case 0xFFFFC25C:
      case 0xFFFFC25D:
      case 0xFFFFC262:
      case 0xFFFFC271:
      case 0xFFFFC272:
      case 0xFFFFC273:
      case 0xFFFFC279:
      case 0xFFFFC27D:
      case 0xFFFFC27E:
      case 0xFFFFC287:
      case 0xFFFFC28D:
      case 0xFFFFC28E:
      case 0xFFFFC299:
      case 0xFFFFC29A:
      case 0xFFFFC29B:
      case 0xFFFFC29C:
      case 0xFFFFC2A4:
      case 0xFFFFC2A5:
      case 0xFFFFC2A6:
      case 0xFFFFC2A7:
      case 0xFFFFC2A8:
      case 0xFFFFC2AE:
      case 0xFFFFC2AF:
      case 0xFFFFC2B0:
      case 0xFFFFC2B1:
      case 0xFFFFC2B2:
      case 0xFFFFC2B3:
      case 0xFFFFC2C8:
      case 0xFFFFC2C9:
      case 0xFFFFC2FF:
      case 0xFFFFC300:
      case 0xFFFFC301:
      case 0xFFFFC302:
      case 0xFFFFC303:
      case 0xFFFFC304:
      case 0xFFFFC327:
      case 0xFFFFC328:
      case 0xFFFFC329:
      case 0xFFFFC351:
      case 0xFFFFC354:
      case 0xFFFFC355:
      case 0xFFFFC36B:
      case 0xFFFFC36E:
      case 0xFFFFC375:
      case 0xFFFFC376:
      case 0xFFFFC377:
      case 0xFFFFC378:
      case 0xFFFFC38D:
      case 0xFFFFC394:
      case 0xFFFFC395:
      case 0xFFFFC398:
      case 0xFFFFC3B5:
      case 0xFFFFC3B6:
      case 0xFFFFC3B7:
      case 0xFFFFC3B8:
      case 0xFFFFC3B9:
      case 0xFFFFC3BA:
      case 0xFFFFC3BB:
      case 0xFFFFC3BC:
      case 0xFFFFC3BD:
      case 0xFFFFC3BF:
      case 0xFFFFC3C3:
      case 0xFFFFC3C4:
      case 0xFFFFC3C5:
      case 0xFFFFC3C6:
      case 0xFFFFC3C7:
      case 0xFFFFC3D2:
      case 0xFFFFC3D3:
      case 0xFFFFC3D4:
      case 0xFFFFC3D5:
      case 0xFFFFC3D6:
      case 0xFFFFC3FD:
      case 0xFFFFC3FE:
      case 0xFFFFC3FF:
      case 0xFFFFC400:
      case 0xFFFFC401:
      case 0xFFFFC402:
      case 0xFFFFC40A:
      case 0xFFFFC40B:
      case 0xFFFFC40C:
      case 0xFFFFC40D:
      case 0xFFFFC42B:
      case 0xFFFFC42D:
      case 0xFFFFC42E:
      case 0xFFFFC43E:
      case 0xFFFFC440:
      case 0xFFFFC45A:
      case 0xFFFFC45B:
      case 0xFFFFC45C:
      case 0xFFFFC45D:
      case 0xFFFFC463:
      case 0xFFFFC464:
      case 0xFFFFC465:
      case 0xFFFFC472:
      case 0xFFFFC473:
      case 0xFFFFC492:
        goto LABEL_10;
      case 0xFFFFC05B:
      case 0xFFFFC0F9:
      case 0xFFFFC105:
      case 0xFFFFC14C:
      case 0xFFFFC14D:
      case 0xFFFFC22A:
      case 0xFFFFC29D:
      case 0xFFFFC29E:
      case 0xFFFFC29F:
      case 0xFFFFC2CA:
      case 0xFFFFC2CB:
        goto LABEL_43;
      case 0xFFFFC05C:
      case 0xFFFFC05D:
      case 0xFFFFC05E:
      case 0xFFFFC115:
      case 0xFFFFC116:
      case 0xFFFFC12D:
      case 0xFFFFC12E:
      case 0xFFFFC12F:
      case 0xFFFFC15A:
      case 0xFFFFC264:
      case 0xFFFFC307:
      case 0xFFFFC308:
      case 0xFFFFC341:
      case 0xFFFFC342:
      case 0xFFFFC381:
      case 0xFFFFC3C1:
      case 0xFFFFC425:
      case 0xFFFFC426:
        goto LABEL_37;
      case 0xFFFFC05F:
      case 0xFFFFC060:
      case 0xFFFFC061:
      case 0xFFFFC062:
      case 0xFFFFC063:
      case 0xFFFFC064:
      case 0xFFFFC065:
      case 0xFFFFC066:
      case 0xFFFFC0DE:
      case 0xFFFFC0DF:
      case 0xFFFFC0E0:
      case 0xFFFFC164:
      case 0xFFFFC165:
      case 0xFFFFC166:
        uint64_t result = 65;
        break;
      case 0xFFFFC067:
      case 0xFFFFC068:
      case 0xFFFFC069:
      case 0xFFFFC06A:
      case 0xFFFFC06B:
      case 0xFFFFC06C:
      case 0xFFFFC06D:
      case 0xFFFFC06E:
      case 0xFFFFC06F:
      case 0xFFFFC070:
      case 0xFFFFC071:
      case 0xFFFFC072:
      case 0xFFFFC073:
      case 0xFFFFC074:
      case 0xFFFFC075:
      case 0xFFFFC076:
      case 0xFFFFC077:
      case 0xFFFFC078:
      case 0xFFFFC079:
      case 0xFFFFC07A:
      case 0xFFFFC07B:
      case 0xFFFFC07C:
      case 0xFFFFC07D:
      case 0xFFFFC07E:
      case 0xFFFFC07F:
      case 0xFFFFC080:
      case 0xFFFFC081:
      case 0xFFFFC082:
      case 0xFFFFC083:
      case 0xFFFFC084:
      case 0xFFFFC085:
      case 0xFFFFC086:
      case 0xFFFFC087:
      case 0xFFFFC088:
      case 0xFFFFC089:
      case 0xFFFFC08A:
      case 0xFFFFC08B:
      case 0xFFFFC08C:
      case 0xFFFFC08D:
      case 0xFFFFC09F:
      case 0xFFFFC0A0:
      case 0xFFFFC0A1:
      case 0xFFFFC0A2:
      case 0xFFFFC0A5:
      case 0xFFFFC0A6:
      case 0xFFFFC0A7:
      case 0xFFFFC0A8:
      case 0xFFFFC0A9:
      case 0xFFFFC0AA:
      case 0xFFFFC0B4:
      case 0xFFFFC0B5:
      case 0xFFFFC0B7:
      case 0xFFFFC0E1:
      case 0xFFFFC0E2:
      case 0xFFFFC0E3:
      case 0xFFFFC0E4:
      case 0xFFFFC0E5:
      case 0xFFFFC0EC:
      case 0xFFFFC0ED:
      case 0xFFFFC0EE:
      case 0xFFFFC0EF:
      case 0xFFFFC0F0:
      case 0xFFFFC0F1:
      case 0xFFFFC0F2:
      case 0xFFFFC0F3:
      case 0xFFFFC0F4:
      case 0xFFFFC0F5:
      case 0xFFFFC0F6:
      case 0xFFFFC0F7:
      case 0xFFFFC0FC:
      case 0xFFFFC102:
      case 0xFFFFC103:
      case 0xFFFFC129:
      case 0xFFFFC12A:
      case 0xFFFFC12B:
      case 0xFFFFC12C:
      case 0xFFFFC130:
      case 0xFFFFC133:
      case 0xFFFFC134:
      case 0xFFFFC136:
      case 0xFFFFC155:
      case 0xFFFFC156:
      case 0xFFFFC157:
      case 0xFFFFC158:
      case 0xFFFFC16A:
      case 0xFFFFC16B:
      case 0xFFFFC16C:
      case 0xFFFFC179:
      case 0xFFFFC17A:
      case 0xFFFFC17B:
      case 0xFFFFC17C:
      case 0xFFFFC17D:
      case 0xFFFFC18C:
      case 0xFFFFC18D:
      case 0xFFFFC18E:
      case 0xFFFFC18F:
      case 0xFFFFC190:
      case 0xFFFFC19E:
      case 0xFFFFC1A6:
      case 0xFFFFC1A7:
      case 0xFFFFC231:
      case 0xFFFFC232:
      case 0xFFFFC233:
      case 0xFFFFC234:
      case 0xFFFFC235:
      case 0xFFFFC236:
      case 0xFFFFC23C:
      case 0xFFFFC27A:
      case 0xFFFFC28F:
      case 0xFFFFC290:
      case 0xFFFFC291:
      case 0xFFFFC292:
      case 0xFFFFC293:
      case 0xFFFFC294:
      case 0xFFFFC295:
      case 0xFFFFC296:
      case 0xFFFFC297:
      case 0xFFFFC298:
      case 0xFFFFC36D:
      case 0xFFFFC382:
      case 0xFFFFC383:
      case 0xFFFFC384:
      case 0xFFFFC385:
      case 0xFFFFC386:
      case 0xFFFFC387:
      case 0xFFFFC388:
      case 0xFFFFC389:
      case 0xFFFFC38A:
      case 0xFFFFC38B:
      case 0xFFFFC38C:
      case 0xFFFFC39D:
      case 0xFFFFC39E:
      case 0xFFFFC39F:
      case 0xFFFFC3A0:
      case 0xFFFFC3A1:
      case 0xFFFFC3A2:
      case 0xFFFFC3A3:
      case 0xFFFFC3A4:
      case 0xFFFFC3A5:
      case 0xFFFFC3A6:
      case 0xFFFFC3A7:
      case 0xFFFFC3A8:
      case 0xFFFFC3A9:
      case 0xFFFFC3AA:
      case 0xFFFFC3AB:
      case 0xFFFFC3C8:
      case 0xFFFFC3C9:
      case 0xFFFFC3CA:
      case 0xFFFFC3D7:
      case 0xFFFFC3D8:
      case 0xFFFFC3D9:
      case 0xFFFFC3DA:
      case 0xFFFFC3DB:
      case 0xFFFFC3DC:
      case 0xFFFFC3DD:
      case 0xFFFFC3DE:
      case 0xFFFFC3DF:
      case 0xFFFFC3E0:
      case 0xFFFFC3E1:
      case 0xFFFFC3E2:
      case 0xFFFFC3E3:
      case 0xFFFFC3E4:
      case 0xFFFFC3E5:
      case 0xFFFFC3E6:
      case 0xFFFFC3E7:
      case 0xFFFFC3E8:
      case 0xFFFFC3E9:
      case 0xFFFFC3EA:
      case 0xFFFFC3EB:
      case 0xFFFFC43F:
      case 0xFFFFC455:
      case 0xFFFFC456:
      case 0xFFFFC457:
      case 0xFFFFC458:
      case 0xFFFFC474:
      case 0xFFFFC475:
        uint64_t result = 70;
        break;
      case 0xFFFFC08E:
      case 0xFFFFC237:
      case 0xFFFFC399:
      case 0xFFFFC39A:
      case 0xFFFFC39B:
      case 0xFFFFC39C:
      case 0xFFFFC3AC:
      case 0xFFFFC3AD:
      case 0xFFFFC3AE:
      case 0xFFFFC3AF:
      case 0xFFFFC3B0:
      case 0xFFFFC3B1:
      case 0xFFFFC3B2:
      case 0xFFFFC3B3:
      case 0xFFFFC3B4:
      case 0xFFFFC3CB:
      case 0xFFFFC3EC:
      case 0xFFFFC3ED:
      case 0xFFFFC3EE:
      case 0xFFFFC3EF:
      case 0xFFFFC3F0:
      case 0xFFFFC3F1:
      case 0xFFFFC3F2:
      case 0xFFFFC3F3:
      case 0xFFFFC3F4:
      case 0xFFFFC3F5:
      case 0xFFFFC3F6:
      case 0xFFFFC3F7:
      case 0xFFFFC3F8:
      case 0xFFFFC3F9:
      case 0xFFFFC429:
      case 0xFFFFC448:
        goto LABEL_21;
      case 0xFFFFC08F:
      case 0xFFFFC191:
      case 0xFFFFC238:
        goto LABEL_56;
      case 0xFFFFC090:
      case 0xFFFFC091:
      case 0xFFFFC092:
      case 0xFFFFC093:
      case 0xFFFFC094:
      case 0xFFFFC095:
      case 0xFFFFC096:
      case 0xFFFFC097:
      case 0xFFFFC098:
      case 0xFFFFC099:
      case 0xFFFFC0A3:
      case 0xFFFFC0BC:
      case 0xFFFFC10E:
      case 0xFFFFC114:
      case 0xFFFFC122:
      case 0xFFFFC193:
      case 0xFFFFC1D7:
      case 0xFFFFC1DA:
      case 0xFFFFC1E1:
      case 0xFFFFC1EA:
      case 0xFFFFC239:
      case 0xFFFFC261:
      case 0xFFFFC26F:
      case 0xFFFFC270:
      case 0xFFFFC2B6:
      case 0xFFFFC2B7:
      case 0xFFFFC2B8:
      case 0xFFFFC352:
        goto LABEL_14;
      case 0xFFFFC0BE:
      case 0xFFFFC0BF:
      case 0xFFFFC0C0:
      case 0xFFFFC0C1:
      case 0xFFFFC0C2:
      case 0xFFFFC0C3:
      case 0xFFFFC0C4:
      case 0xFFFFC0C5:
      case 0xFFFFC0C6:
      case 0xFFFFC0C7:
      case 0xFFFFC0C8:
      case 0xFFFFC0C9:
      case 0xFFFFC0CA:
      case 0xFFFFC0CB:
      case 0xFFFFC0CC:
      case 0xFFFFC0CD:
      case 0xFFFFC0CE:
      case 0xFFFFC0CF:
      case 0xFFFFC0D0:
      case 0xFFFFC0D1:
      case 0xFFFFC0D2:
      case 0xFFFFC0D3:
      case 0xFFFFC0D4:
      case 0xFFFFC0D5:
      case 0xFFFFC0D6:
      case 0xFFFFC0D7:
      case 0xFFFFC0D8:
      case 0xFFFFC0D9:
      case 0xFFFFC0E6:
      case 0xFFFFC0E7:
      case 0xFFFFC0E8:
      case 0xFFFFC167:
      case 0xFFFFC168:
      case 0xFFFFC169:
        uint64_t result = 42;
        break;
      case 0xFFFFC0F8:
      case 0xFFFFC101:
        uint64_t result = 41;
        break;
      case 0xFFFFC109:
      case 0xFFFFC10A:
      case 0xFFFFC10B:
      case 0xFFFFC10C:
      case 0xFFFFC10D:
      case 0xFFFFC112:
      case 0xFFFFC113:
      case 0xFFFFC117:
      case 0xFFFFC22B:
      case 0xFFFFC22C:
      case 0xFFFFC25E:
      case 0xFFFFC25F:
      case 0xFFFFC404:
      case 0xFFFFC405:
      case 0xFFFFC406:
      case 0xFFFFC407:
      case 0xFFFFC408:
      case 0xFFFFC409:
        goto LABEL_36;
      case 0xFFFFC11F:
      case 0xFFFFC160:
        uint64_t result = 81;
        break;
      case 0xFFFFC137:
      case 0xFFFFC138:
      case 0xFFFFC139:
      case 0xFFFFC13A:
        uint64_t result = 24;
        break;
      case 0xFFFFC13B:
      case 0xFFFFC13C:
      case 0xFFFFC13D:
      case 0xFFFFC15E:
      case 0xFFFFC16D:
      case 0xFFFFC288:
      case 0xFFFFC289:
      case 0xFFFFC28A:
      case 0xFFFFC28B:
        goto LABEL_46;
      case 0xFFFFC141:
      case 0xFFFFC142:
      case 0xFFFFC143:
      case 0xFFFFC144:
      case 0xFFFFC145:
      case 0xFFFFC146:
      case 0xFFFFC147:
      case 0xFFFFC148:
      case 0xFFFFC149:
      case 0xFFFFC14A:
      case 0xFFFFC14B:
      case 0xFFFFC15F:
      case 0xFFFFC17E:
      case 0xFFFFC17F:
      case 0xFFFFC180:
      case 0xFFFFC181:
      case 0xFFFFC1D4:
      case 0xFFFFC1D5:
      case 0xFFFFC2F5:
      case 0xFFFFC2F6:
      case 0xFFFFC2F7:
      case 0xFFFFC343:
      case 0xFFFFC344:
      case 0xFFFFC345:
      case 0xFFFFC346:
      case 0xFFFFC34D:
      case 0xFFFFC34E:
      case 0xFFFFC34F:
      case 0xFFFFC350:
        uint64_t result = 18;
        break;
      case 0xFFFFC192:
        uint64_t result = 78;
        break;
      case 0xFFFFC199:
      case 0xFFFFC19A:
      case 0xFFFFC19B:
      case 0xFFFFC1D9:
      case 0xFFFFC1DD:
      case 0xFFFFC3C2:
      case 0xFFFFC427:
        uint64_t result = 76;
        break;
      case 0xFFFFC1AB:
      case 0xFFFFC1AC:
      case 0xFFFFC1AD:
      case 0xFFFFC1AE:
      case 0xFFFFC1AF:
      case 0xFFFFC1B0:
      case 0xFFFFC1B1:
      case 0xFFFFC1B2:
      case 0xFFFFC1B3:
      case 0xFFFFC1B4:
      case 0xFFFFC1B5:
      case 0xFFFFC1B6:
      case 0xFFFFC1B7:
      case 0xFFFFC1B8:
      case 0xFFFFC1B9:
      case 0xFFFFC1BA:
      case 0xFFFFC1BB:
      case 0xFFFFC1BC:
      case 0xFFFFC1BD:
      case 0xFFFFC1BE:
      case 0xFFFFC1BF:
      case 0xFFFFC1C0:
      case 0xFFFFC1DE:
      case 0xFFFFC454:
      case 0xFFFFC45E:
      case 0xFFFFC45F:
      case 0xFFFFC460:
      case 0xFFFFC461:
      case 0xFFFFC462:
        uint64_t result = 59;
        break;
      case 0xFFFFC1C1:
      case 0xFFFFC1C2:
      case 0xFFFFC1C3:
      case 0xFFFFC1C4:
      case 0xFFFFC1C5:
      case 0xFFFFC1C6:
      case 0xFFFFC1C7:
      case 0xFFFFC1C8:
      case 0xFFFFC1C9:
      case 0xFFFFC1CA:
      case 0xFFFFC1DF:
      case 0xFFFFC22D:
      case 0xFFFFC22E:
      case 0xFFFFC22F:
      case 0xFFFFC230:
      case 0xFFFFC263:
      case 0xFFFFC453:
        uint64_t result = 58;
        break;
      case 0xFFFFC1CB:
      case 0xFFFFC1CC:
      case 0xFFFFC1CD:
      case 0xFFFFC1CE:
      case 0xFFFFC1CF:
      case 0xFFFFC1D0:
      case 0xFFFFC1D1:
      case 0xFFFFC1D2:
      case 0xFFFFC1D3:
      case 0xFFFFC1E8:
      case 0xFFFFC1E9:
      case 0xFFFFC26A:
      case 0xFFFFC26B:
      case 0xFFFFC26C:
      case 0xFFFFC26D:
      case 0xFFFFC26E:
        goto LABEL_31;
      case 0xFFFFC1EB:
        uint64_t result = 64;
        break;
      case 0xFFFFC1EE:
      case 0xFFFFC1EF:
      case 0xFFFFC1F0:
      case 0xFFFFC1F1:
      case 0xFFFFC1F2:
      case 0xFFFFC1F3:
      case 0xFFFFC1F4:
      case 0xFFFFC1F5:
      case 0xFFFFC1F6:
      case 0xFFFFC1F7:
        uint64_t result = 82;
        break;
      case 0xFFFFC1F8:
      case 0xFFFFC1F9:
      case 0xFFFFC423:
        uint64_t result = 38;
        break;
      case 0xFFFFC205:
      case 0xFFFFC277:
        uint64_t result = 31;
        break;
      case 0xFFFFC206:
      case 0xFFFFC207:
        uint64_t result = 35;
        break;
      case 0xFFFFC245:
      case 0xFFFFC247:
      case 0xFFFFC249:
      case 0xFFFFC24B:
      case 0xFFFFC24D:
      case 0xFFFFC260:
      case 0xFFFFC265:
      case 0xFFFFC266:
      case 0xFFFFC3CC:
      case 0xFFFFC3CD:
        uint64_t result = 68;
        break;
      case 0xFFFFC24E:
      case 0xFFFFC250:
      case 0xFFFFC252:
      case 0xFFFFC253:
      case 0xFFFFC254:
      case 0xFFFFC255:
      case 0xFFFFC256:
      case 0xFFFFC257:
      case 0xFFFFC258:
      case 0xFFFFC259:
      case 0xFFFFC25A:
      case 0xFFFFC25B:
      case 0xFFFFC459:
        goto LABEL_42;
      case 0xFFFFC267:
        uint64_t result = 73;
        break;
      case 0xFFFFC278:
        uint64_t result = 32;
        break;
      case 0xFFFFC27C:
        uint64_t result = 30;
        break;
      case 0xFFFFC27F:
        uint64_t result = 66;
        break;
      case 0xFFFFC280:
      case 0xFFFFC281:
      case 0xFFFFC282:
      case 0xFFFFC283:
      case 0xFFFFC284:
      case 0xFFFFC285:
      case 0xFFFFC286:
        uint64_t result = 67;
        break;
      case 0xFFFFC2AA:
        uint64_t result = 26;
        break;
      case 0xFFFFC2B4:
        uint64_t result = 45;
        break;
      case 0xFFFFC2B5:
        uint64_t result = 79;
        break;
      case 0xFFFFC2B9:
      case 0xFFFFC2BA:
      case 0xFFFFC2BB:
      case 0xFFFFC2BC:
      case 0xFFFFC2CC:
      case 0xFFFFC2CD:
      case 0xFFFFC2CE:
      case 0xFFFFC2CF:
      case 0xFFFFC2D0:
      case 0xFFFFC2D1:
      case 0xFFFFC2D2:
      case 0xFFFFC33D:
      case 0xFFFFC33E:
      case 0xFFFFC33F:
      case 0xFFFFC3BE:
      case 0xFFFFC3CF:
      case 0xFFFFC3D0:
      case 0xFFFFC3D1:
      case 0xFFFFC421:
        uint64_t result = 19;
        break;
      case 0xFFFFC2BD:
      case 0xFFFFC2BE:
      case 0xFFFFC2BF:
      case 0xFFFFC2C0:
      case 0xFFFFC2C1:
      case 0xFFFFC2C2:
      case 0xFFFFC2C3:
        uint64_t result = 20;
        break;
      case 0xFFFFC2C4:
      case 0xFFFFC2C5:
      case 0xFFFFC2C6:
      case 0xFFFFC305:
        goto LABEL_55;
      case 0xFFFFC2D3:
      case 0xFFFFC2D4:
      case 0xFFFFC2D5:
      case 0xFFFFC2D6:
      case 0xFFFFC2D7:
      case 0xFFFFC2D8:
      case 0xFFFFC2D9:
      case 0xFFFFC2DA:
      case 0xFFFFC2DB:
      case 0xFFFFC2DC:
      case 0xFFFFC2DD:
      case 0xFFFFC2DE:
      case 0xFFFFC2DF:
      case 0xFFFFC340:
        goto LABEL_30;
      case 0xFFFFC2E0:
      case 0xFFFFC2E1:
      case 0xFFFFC2E2:
      case 0xFFFFC2E3:
      case 0xFFFFC2E4:
      case 0xFFFFC2E5:
      case 0xFFFFC2E6:
      case 0xFFFFC2E7:
      case 0xFFFFC2E8:
      case 0xFFFFC2E9:
      case 0xFFFFC2EA:
      case 0xFFFFC2EB:
      case 0xFFFFC2EC:
      case 0xFFFFC2ED:
      case 0xFFFFC2EE:
      case 0xFFFFC2EF:
      case 0xFFFFC2F0:
      case 0xFFFFC2F1:
      case 0xFFFFC2F2:
      case 0xFFFFC2F3:
      case 0xFFFFC2F4:
      case 0xFFFFC315:
      case 0xFFFFC316:
      case 0xFFFFC317:
      case 0xFFFFC318:
      case 0xFFFFC319:
      case 0xFFFFC31A:
      case 0xFFFFC31B:
      case 0xFFFFC31C:
      case 0xFFFFC35C:
      case 0xFFFFC35D:
      case 0xFFFFC35E:
      case 0xFFFFC35F:
      case 0xFFFFC360:
      case 0xFFFFC361:
      case 0xFFFFC372:
      case 0xFFFFC396:
      case 0xFFFFC397:
      case 0xFFFFC3FA:
      case 0xFFFFC3FB:
      case 0xFFFFC449:
        goto LABEL_20;
      case 0xFFFFC306:
        uint64_t result = 44;
        break;
      case 0xFFFFC309:
      case 0xFFFFC30A:
      case 0xFFFFC30B:
      case 0xFFFFC30C:
      case 0xFFFFC30D:
      case 0xFFFFC30E:
      case 0xFFFFC30F:
      case 0xFFFFC310:
      case 0xFFFFC311:
      case 0xFFFFC312:
      case 0xFFFFC313:
      case 0xFFFFC314:
      case 0xFFFFC32A:
      case 0xFFFFC32B:
      case 0xFFFFC349:
      case 0xFFFFC34A:
      case 0xFFFFC358:
      case 0xFFFFC359:
        goto LABEL_32;
      case 0xFFFFC32C:
      case 0xFFFFC32D:
      case 0xFFFFC32E:
      case 0xFFFFC32F:
      case 0xFFFFC330:
      case 0xFFFFC331:
      case 0xFFFFC332:
      case 0xFFFFC333:
      case 0xFFFFC334:
      case 0xFFFFC335:
      case 0xFFFFC336:
      case 0xFFFFC337:
      case 0xFFFFC338:
      case 0xFFFFC339:
      case 0xFFFFC33A:
      case 0xFFFFC33B:
      case 0xFFFFC33C:
      case 0xFFFFC347:
      case 0xFFFFC348:
      case 0xFFFFC356:
      case 0xFFFFC357:
      case 0xFFFFC35A:
      case 0xFFFFC35B:
      case 0xFFFFC466:
      case 0xFFFFC467:
        goto LABEL_25;
      case 0xFFFFC36C:
        uint64_t result = 69;
        break;
      case 0xFFFFC379:
        uint64_t result = 46;
        break;
      case 0xFFFFC37A:
        uint64_t result = 47;
        break;
      case 0xFFFFC37B:
        uint64_t result = 48;
        break;
      case 0xFFFFC37C:
        uint64_t result = 49;
        break;
      case 0xFFFFC37D:
      case 0xFFFFC37E:
      case 0xFFFFC37F:
      case 0xFFFFC380:
      case 0xFFFFC3C0:
      case 0xFFFFC424:
        uint64_t result = 61;
        break;
      case 0xFFFFC40E:
      case 0xFFFFC40F:
      case 0xFFFFC410:
      case 0xFFFFC411:
      case 0xFFFFC412:
      case 0xFFFFC413:
      case 0xFFFFC414:
      case 0xFFFFC415:
      case 0xFFFFC416:
      case 0xFFFFC417:
      case 0xFFFFC418:
      case 0xFFFFC419:
      case 0xFFFFC42F:
      case 0xFFFFC430:
      case 0xFFFFC431:
      case 0xFFFFC432:
      case 0xFFFFC433:
      case 0xFFFFC434:
      case 0xFFFFC441:
      case 0xFFFFC442:
      case 0xFFFFC443:
      case 0xFFFFC444:
        uint64_t result = 51;
        break;
      case 0xFFFFC41A:
      case 0xFFFFC41B:
      case 0xFFFFC41C:
      case 0xFFFFC435:
      case 0xFFFFC436:
      case 0xFFFFC445:
        uint64_t result = 52;
        break;
      case 0xFFFFC41D:
        uint64_t result = 55;
        break;
      case 0xFFFFC41E:
      case 0xFFFFC41F:
      case 0xFFFFC43D:
        uint64_t result = 56;
        break;
      case 0xFFFFC420:
      case 0xFFFFC437:
      case 0xFFFFC438:
      case 0xFFFFC439:
      case 0xFFFFC43A:
      case 0xFFFFC43B:
      case 0xFFFFC43C:
        uint64_t result = 54;
        break;
      case 0xFFFFC428:
        uint64_t result = 33;
        break;
      case 0xFFFFC446:
      case 0xFFFFC447:
        uint64_t result = 53;
        break;
      case 0xFFFFC476:
      case 0xFFFFC477:
      case 0xFFFFC478:
      case 0xFFFFC479:
      case 0xFFFFC47A:
      case 0xFFFFC47B:
      case 0xFFFFC47C:
      case 0xFFFFC47D:
      case 0xFFFFC47E:
      case 0xFFFFC47F:
      case 0xFFFFC480:
      case 0xFFFFC481:
      case 0xFFFFC482:
      case 0xFFFFC483:
      case 0xFFFFC484:
      case 0xFFFFC485:
      case 0xFFFFC486:
      case 0xFFFFC487:
      case 0xFFFFC488:
      case 0xFFFFC489:
      case 0xFFFFC48A:
      case 0xFFFFC48B:
      case 0xFFFFC48C:
      case 0xFFFFC48D:
      case 0xFFFFC48E:
      case 0xFFFFC494:
      case 0xFFFFC495:
      case 0xFFFFC496:
      case 0xFFFFC497:
      case 0xFFFFC498:
      case 0xFFFFC499:
      case 0xFFFFC49A:
        uint64_t result = 72;
        break;
      case 0xFFFFC493:
        uint64_t result = 63;
        break;
      default:
        if (this != -18430) {
          return 0;
        }
        goto LABEL_29;
    }
  }
  return result;
}

char *GPUTools::MTL::GetReceiverTypeString(GPUTools::MTL *this)
{
  return GPUTools::MTL::GetReceiverTypeString::receiverTypeStringList[this];
}

char *GPUTools::MTL::GetFuncEnumReceiverTypeString(GPUTools::MTL *this)
{
  return GPUTools::MTL::GetReceiverTypeString::receiverTypeStringList[GPUTools::MTL::GetFuncEnumReceiverType(this)];
}

BOOL GPUTools::MTL::GetConstructorForReceiverType(int a1, void *a2)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::clear(a2);
  if ((a1 - 1) > 0x54) {
    return 0;
  }
  switch(a1)
  {
    case 2:
      unsigned int v7 = -7166;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -6655;
      goto LABEL_67;
    case 5:
      unsigned int v7 = -6143;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -6131;
      goto LABEL_67;
    case 6:
      unsigned int v4 = -6111;
      goto LABEL_67;
    case 7:
      unsigned int v4 = -6109;
      goto LABEL_67;
    case 8:
      unsigned int v7 = -6116;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -6129;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -6133;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -6141;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -6119;
      goto LABEL_67;
    case 9:
      unsigned int v4 = -6110;
      goto LABEL_67;
    case 10:
      unsigned int v4 = -6122;
      goto LABEL_67;
    case 11:
      unsigned int v4 = -6134;
      goto LABEL_67;
    case 12:
      unsigned int v4 = -6095;
      goto LABEL_67;
    case 14:
      unsigned int v4 = -6096;
      goto LABEL_67;
    case 16:
      unsigned int v7 = -15464;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15359;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15615;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15614;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15506;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15358;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15356;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15355;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15354;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15353;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15352;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15351;
      goto LABEL_67;
    case 17:
      unsigned int v7 = -15673;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15364;
      goto LABEL_67;
    case 18:
      unsigned int v7 = -16053;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16037;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16050;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15261;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16048;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16052;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15715;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16051;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15670;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15714;
      goto LABEL_67;
    case 19:
      unsigned int v4 = -15717;
      goto LABEL_67;
    case 20:
      unsigned int v4 = -15697;
      goto LABEL_67;
    case 21:
      unsigned int v7 = -16354;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15587;
      goto LABEL_67;
    case 22:
      unsigned int v7 = -15914;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -10237;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15850;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16312;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15706;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16313;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15851;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15707;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15509;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16163;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16314;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15849;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15705;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15972;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16117;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15829;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15778;
      goto LABEL_67;
    case 24:
      unsigned int v7 = -15733;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15734;
      goto LABEL_67;
    case 25:
      unsigned int v7 = -16343;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15701;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16342;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -12544;
      goto LABEL_67;
    case 27:
      unsigned int v7 = -16316;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16165;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -16315;
      goto LABEL_67;
    case 28:
      unsigned int v7 = -16352;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15586;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16014;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15712;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15584;
      goto LABEL_67;
    case 29:
      unsigned int v7 = -15579;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15541;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15618;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16198;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16200;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16197;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16199;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16297;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16299;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16296;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16298;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16101;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15740;
      goto LABEL_67;
    case 31:
      unsigned int v4 = -15848;
      goto LABEL_67;
    case 33:
      unsigned int v4 = -15317;
      goto LABEL_67;
    case 34:
      unsigned int v4 = -16311;
      goto LABEL_67;
    case 37:
      unsigned int v7 = -15498;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15497;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15694;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15613;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15531;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15696;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15695;
      goto LABEL_67;
    case 38:
      unsigned int v7 = -15997;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15269;
      goto LABEL_67;
    case 39:
      unsigned int v4 = -18432;
      goto LABEL_67;
    case 40:
      unsigned int v4 = -18431;
      goto LABEL_67;
    case 41:
      unsigned int v4 = -16128;
      goto LABEL_67;
    case 43:
      unsigned int v7 = -15430;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15429;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15428;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15427;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15731;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15730;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15830;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16038;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15609;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15608;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16290;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16106;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16107;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15772;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16081;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16082;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15550;
      goto LABEL_67;
    case 44:
      unsigned int v7 = -15620;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15444;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15463;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15437;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15436;
      goto LABEL_67;
    case 50:
      unsigned int v4 = -16120;
      goto LABEL_67;
    case 51:
      unsigned int v7 = -15333;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15306;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -12543;
      goto LABEL_67;
    case 52:
      unsigned int v4 = -15350;
      goto LABEL_67;
    case 53:
      unsigned int v7 = -15260;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15259;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v6 = -15296;
      goto LABEL_41;
    case 54:
      unsigned int v7 = -15296;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v6 = -15349;
LABEL_41:
      unsigned int v7 = v6;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15348;
      goto LABEL_67;
    case 55:
      unsigned int v4 = -15299;
      goto LABEL_67;
    case 57:
      unsigned int v7 = -15969;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15972;
      goto LABEL_67;
    case 58:
      unsigned int v7 = -16015;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15921;
      goto LABEL_67;
    case 59:
      unsigned int v7 = -16016;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15922;
      goto LABEL_67;
    case 60:
      unsigned int v7 = -15540;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15577;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15443;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15462;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15442;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15441;
      goto LABEL_67;
    case 61:
      unsigned int v4 = -15496;
      goto LABEL_67;
    case 62:
      unsigned int v7 = -16308;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16095;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16018;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16029;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15693;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16306;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15434;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15425;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15435;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16307;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15467;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15468;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15847;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16304;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16305;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15419;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15421;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15420;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -16039;
      goto LABEL_67;
    case 63:
      unsigned int v4 = -15214;
      goto LABEL_67;
    case 64:
      unsigned int v4 = -15891;
      goto LABEL_67;
    case 65:
      unsigned int v4 = -16351;
      goto LABEL_67;
    case 67:
      unsigned int v4 = -16075;
      goto LABEL_67;
    case 68:
      unsigned int v7 = -15793;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15846;
      goto LABEL_67;
    case 70:
      unsigned int v7 = -16353;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -16286;
      goto LABEL_67;
    case 71:
      unsigned int v7 = -16301;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16303;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16300;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16302;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15406;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15405;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15404;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15403;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16089;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16091;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16088;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16090;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15738;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15461;
      goto LABEL_67;
    case 72:
      unsigned int v4 = -15245;
      goto LABEL_67;
    case 73:
      unsigned int v4 = -15900;
      goto LABEL_67;
    case 74:
      unsigned int v7 = -15870;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15585;
      goto LABEL_67;
    case 75:
      unsigned int v4 = -16309;
      goto LABEL_67;
    case 76:
      unsigned int v7 = -15996;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15909;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15912;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15268;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15488;
      goto LABEL_67;
    case 77:
      unsigned int v7 = -15488;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15907;
      goto LABEL_67;
    case 78:
      unsigned int v4 = -15910;
      goto LABEL_67;
    case 80:
      unsigned int v7 = -16098;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16368;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16104;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15980;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15979;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16099;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16096;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16310;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16294;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16030;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16031;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -16116;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15828;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15777;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15913;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15690;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15689;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15688;
      goto LABEL_67;
    case 81:
      unsigned int v4 = -16099;
      goto LABEL_67;
    case 82:
      unsigned int v4 = -16013;
      goto LABEL_67;
    case 83:
      unsigned int v7 = -15578;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15612;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15440;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15369;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15368;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15439;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v7 = -15438;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      unsigned int v4 = -15460;
LABEL_67:
      unsigned int v7 = v4;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)a2, &v7, &v7);
      break;
    default:
      return a2[3] != 0;
  }
  return a2[3] != 0;
}

uint64_t GPUTools::MTL::GetResourcesBoundByFunction(int *a1, unint64_t **a2)
{
  uint64_t v4 = 0;
  int v5 = *a1;
  if (*a1 <= -16048)
  {
    if (v5 <= -16221)
    {
      if (v5 > -16279)
      {
        switch(v5)
        {
          case -16278:
          case -16276:
          case -16263:
          case -16261:
            goto LABEL_232;
          case -16277:
            uint64_t v4 = 1;
            unint64_t v59 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 30), 1uLL);
            if (!v59) {
              return v4;
            }
            unint64_t v60 = v59;
            unint64_t v61 = 0;
            uint64_t v62 = (uint64_t)(a1 + 18);
            do
            {
              unint64_t v63 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v62, v61);
              unint64_t v64 = v63;
              int v66 = a2[1];
              unint64_t v65 = (unint64_t)a2[2];
              if ((unint64_t)v66 >= v65)
              {
                id v68 = *a2;
                uint64_t v69 = v66 - *a2;
                unint64_t v70 = v69 + 1;
                if ((unint64_t)(v69 + 1) >> 61) {
                  goto LABEL_509;
                }
                uint64_t v71 = v65 - (void)v68;
                if (v71 >> 2 > v70) {
                  unint64_t v70 = v71 >> 2;
                }
                if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v72 = v70;
                }
                if (v72)
                {
                  long long v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v72);
                  id v68 = *a2;
                  int v66 = a2[1];
                }
                else
                {
                  long long v73 = 0;
                }
                unsigned int v74 = (unint64_t *)&v73[8 * v69];
                *unsigned int v74 = v64;
                id v67 = v74 + 1;
                while (v66 != v68)
                {
                  unint64_t v75 = *--v66;
                  *--unsigned int v74 = v75;
                }
                *a2 = v74;
                a2[1] = v67;
                a2[2] = (unint64_t *)&v73[8 * v72];
                if (v68) {
                  operator delete(v68);
                }
              }
              else
              {
                *int v66 = v63;
                id v67 = v66 + 1;
              }
              a2[1] = v67;
              ++v61;
              uint64_t v4 = 1;
            }
            while (v61 != v60);
            return v4;
          case -16275:
            uint64_t v4 = 1;
            unint64_t v165 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 24), 1uLL);
            if (!v165) {
              return v4;
            }
            unint64_t v166 = v165;
            unint64_t v167 = 0;
            uint64_t v168 = (uint64_t)(a1 + 18);
            do
            {
              unint64_t v169 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v168, v167);
              unint64_t v170 = v169;
              v172 = a2[1];
              unint64_t v171 = (unint64_t)a2[2];
              if ((unint64_t)v172 >= v171)
              {
                v174 = *a2;
                uint64_t v175 = v172 - *a2;
                unint64_t v176 = v175 + 1;
                if ((unint64_t)(v175 + 1) >> 61) {
                  goto LABEL_509;
                }
                uint64_t v177 = v171 - (void)v174;
                if (v177 >> 2 > v176) {
                  unint64_t v176 = v177 >> 2;
                }
                if ((unint64_t)v177 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v178 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v178 = v176;
                }
                if (v178)
                {
                  v179 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v178);
                  v174 = *a2;
                  v172 = a2[1];
                }
                else
                {
                  v179 = 0;
                }
                v180 = (unint64_t *)&v179[8 * v175];
                unint64_t *v180 = v170;
                v173 = v180 + 1;
                while (v172 != v174)
                {
                  unint64_t v181 = *--v172;
                  *--v180 = v181;
                }
                *a2 = v180;
                a2[1] = v173;
                a2[2] = (unint64_t *)&v179[8 * v178];
                if (v174) {
                  operator delete(v174);
                }
              }
              else
              {
                unint64_t *v172 = v169;
                v173 = v172 + 1;
              }
              a2[1] = v173;
              ++v167;
              uint64_t v4 = 1;
            }
            while (v167 != v166);
            return v4;
          case -16274:
          case -16273:
          case -16272:
          case -16271:
          case -16270:
          case -16269:
          case -16268:
          case -16267:
          case -16266:
          case -16265:
          case -16264:
            return v4;
          case -16262:
            uint64_t v4 = 1;
            unint64_t v182 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 30), 1uLL);
            if (!v182) {
              return v4;
            }
            unint64_t v183 = v182;
            unint64_t v184 = 0;
            uint64_t v185 = (uint64_t)(a1 + 18);
            do
            {
              unint64_t v186 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v185, v184);
              unint64_t v187 = v186;
              v189 = a2[1];
              unint64_t v188 = (unint64_t)a2[2];
              if ((unint64_t)v189 >= v188)
              {
                v191 = *a2;
                uint64_t v192 = v189 - *a2;
                unint64_t v193 = v192 + 1;
                if ((unint64_t)(v192 + 1) >> 61) {
                  goto LABEL_509;
                }
                uint64_t v194 = v188 - (void)v191;
                if (v194 >> 2 > v193) {
                  unint64_t v193 = v194 >> 2;
                }
                if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v195 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v195 = v193;
                }
                if (v195)
                {
                  v196 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v195);
                  v191 = *a2;
                  v189 = a2[1];
                }
                else
                {
                  v196 = 0;
                }
                v197 = (unint64_t *)&v196[8 * v192];
                unint64_t *v197 = v187;
                v190 = v197 + 1;
                while (v189 != v191)
                {
                  unint64_t v198 = *--v189;
                  *--v197 = v198;
                }
                *a2 = v197;
                a2[1] = v190;
                a2[2] = (unint64_t *)&v196[8 * v195];
                if (v191) {
                  operator delete(v191);
                }
              }
              else
              {
                unint64_t *v189 = v186;
                v190 = v189 + 1;
              }
              a2[1] = v190;
              ++v184;
              uint64_t v4 = 1;
            }
            while (v184 != v183);
            break;
          case -16260:
            uint64_t v4 = 1;
            unint64_t v199 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 24), 1uLL);
            if (!v199) {
              return v4;
            }
            unint64_t v200 = v199;
            unint64_t v201 = 0;
            uint64_t v202 = (uint64_t)(a1 + 18);
            do
            {
              unint64_t v203 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v202, v201);
              unint64_t v204 = v203;
              v206 = a2[1];
              unint64_t v205 = (unint64_t)a2[2];
              if ((unint64_t)v206 >= v205)
              {
                v208 = *a2;
                uint64_t v209 = v206 - *a2;
                unint64_t v210 = v209 + 1;
                if ((unint64_t)(v209 + 1) >> 61) {
LABEL_509:
                }
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                uint64_t v211 = v205 - (void)v208;
                if (v211 >> 2 > v210) {
                  unint64_t v210 = v211 >> 2;
                }
                if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v212 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v212 = v210;
                }
                if (v212)
                {
                  v213 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v212);
                  v208 = *a2;
                  v206 = a2[1];
                }
                else
                {
                  v213 = 0;
                }
                v214 = (unint64_t *)&v213[8 * v209];
                unint64_t *v214 = v204;
                v207 = v214 + 1;
                while (v206 != v208)
                {
                  unint64_t v215 = *--v206;
                  *--v214 = v215;
                }
                *a2 = v214;
                a2[1] = v207;
                a2[2] = (unint64_t *)&v213[8 * v212];
                if (v208) {
                  operator delete(v208);
                }
              }
              else
              {
                unint64_t *v206 = v203;
                v207 = v206 + 1;
              }
              a2[1] = v207;
              ++v201;
              uint64_t v4 = 1;
            }
            while (v201 != v200);
            break;
          default:
            if (v5 == -16249 || v5 == -16248) {
              goto LABEL_205;
            }
            return v4;
        }
      }
      else
      {
        switch(v5)
        {
          case -16382:
          case -16381:
          case -16380:
LABEL_240:
            uint64_t v164 = (uint64_t)(a1 + 18);
LABEL_363:
            unint64_t v386 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v164, 0);
            std::vector<unsigned long long>::emplace_back<unsigned long long>((uint64_t)a2, &v386);
            uint64_t v76 = (uint64_t)(a1 + 48);
            goto LABEL_233;
          case -16379:
          case -16378:
            goto LABEL_232;
          case -16377:
            uint64_t v41 = (uint64_t)(a1 + 18);
            goto LABEL_507;
          default:
            switch(v5)
            {
              case -16336:
              case -16334:
                goto LABEL_232;
              case -16335:
                uint64_t v4 = 1;
                unint64_t v94 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 30), 1uLL);
                if (!v94) {
                  return v4;
                }
                unint64_t v95 = v94;
                unint64_t v96 = 0;
                uint64_t v97 = (uint64_t)(a1 + 18);
                do
                {
                  unint64_t v98 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v97, v96);
                  unint64_t v99 = v98;
                  uint64_t v101 = a2[1];
                  unint64_t v100 = (unint64_t)a2[2];
                  if ((unint64_t)v101 >= v100)
                  {
                    id v103 = *a2;
                    uint64_t v104 = v101 - *a2;
                    unint64_t v105 = v104 + 1;
                    if ((unint64_t)(v104 + 1) >> 61) {
                      goto LABEL_509;
                    }
                    uint64_t v106 = v100 - (void)v103;
                    if (v106 >> 2 > v105) {
                      unint64_t v105 = v106 >> 2;
                    }
                    if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v107 = v105;
                    }
                    if (v107)
                    {
                      id v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v107);
                      id v103 = *a2;
                      uint64_t v101 = a2[1];
                    }
                    else
                    {
                      id v108 = 0;
                    }
                    id v109 = (unint64_t *)&v108[8 * v104];
                    *id v109 = v99;
                    v102 = v109 + 1;
                    while (v101 != v103)
                    {
                      unint64_t v110 = *--v101;
                      *--id v109 = v110;
                    }
                    *a2 = v109;
                    a2[1] = v102;
                    a2[2] = (unint64_t *)&v108[8 * v107];
                    if (v103) {
                      operator delete(v103);
                    }
                  }
                  else
                  {
                    unint64_t *v101 = v98;
                    v102 = v101 + 1;
                  }
                  a2[1] = v102;
                  ++v96;
                  uint64_t v4 = 1;
                }
                while (v96 != v95);
                return v4;
              case -16333:
                uint64_t v4 = 1;
                unint64_t v335 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 24), 1uLL);
                if (!v335) {
                  return v4;
                }
                unint64_t v336 = v335;
                unint64_t v337 = 0;
                uint64_t v338 = (uint64_t)(a1 + 18);
                break;
              default:
                return v4;
            }
            break;
        }
        do
        {
          unint64_t v339 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v338, v337);
          unint64_t v340 = v339;
          v342 = a2[1];
          unint64_t v341 = (unint64_t)a2[2];
          if ((unint64_t)v342 >= v341)
          {
            v344 = *a2;
            uint64_t v345 = v342 - *a2;
            unint64_t v346 = v345 + 1;
            if ((unint64_t)(v345 + 1) >> 61) {
              goto LABEL_509;
            }
            uint64_t v347 = v341 - (void)v344;
            if (v347 >> 2 > v346) {
              unint64_t v346 = v347 >> 2;
            }
            if ((unint64_t)v347 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v348 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v348 = v346;
            }
            if (v348)
            {
              v349 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v348);
              v344 = *a2;
              v342 = a2[1];
            }
            else
            {
              v349 = 0;
            }
            v350 = (unint64_t *)&v349[8 * v345];
            unint64_t *v350 = v340;
            v343 = v350 + 1;
            while (v342 != v344)
            {
              unint64_t v351 = *--v342;
              *--v350 = v351;
            }
            *a2 = v350;
            a2[1] = v343;
            a2[2] = (unint64_t *)&v349[8 * v348];
            if (v344) {
              operator delete(v344);
            }
          }
          else
          {
            unint64_t *v342 = v339;
            v343 = v342 + 1;
          }
          a2[1] = v343;
          ++v337;
          uint64_t v4 = 1;
        }
        while (v337 != v336);
      }
    }
    else
    {
      if (v5 <= -16157)
      {
        switch(v5)
        {
          case -16220:
          case -16214:
          case -16213:
          case -16212:
            goto LABEL_232;
          case -16217:
            goto LABEL_205;
          case -16216:
            goto LABEL_238;
          case -16215:
            unint64_t v386 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 30), 0);
            std::vector<unsigned long long>::emplace_back<unsigned long long>((uint64_t)a2, &v386);
            uint64_t v76 = (uint64_t)(a1 + 42);
            goto LABEL_233;
          case -16210:
          case -16209:
            goto LABEL_240;
          default:
            return v4;
        }
        return v4;
      }
      if (v5 <= -16088)
      {
        switch(v5)
        {
          case -16156:
          case -16155:
          case -16148:
          case -16142:
          case -16140:
            goto LABEL_232;
          case -16147:
            goto LABEL_205;
          case -16146:
            uint64_t v23 = (uint64_t)(a1 + 24);
            goto LABEL_180;
          case -16145:
            goto LABEL_362;
          case -16144:
            unint64_t v386 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 24), 0);
            std::vector<unsigned long long>::emplace_back<unsigned long long>((uint64_t)a2, &v386);
LABEL_362:
            uint64_t v164 = (uint64_t)(a1 + 36);
            goto LABEL_363;
          default:
            return v4;
        }
      }
      if (v5 == -16087)
      {
        uint64_t v4 = 1;
        unint64_t v352 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 30), 1uLL);
        if (v352)
        {
          unint64_t v353 = v352;
          unint64_t v354 = 0;
          uint64_t v355 = (uint64_t)(a1 + 18);
          do
          {
            unint64_t v356 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v355, v354);
            unint64_t v357 = v356;
            v359 = a2[1];
            unint64_t v358 = (unint64_t)a2[2];
            if ((unint64_t)v359 >= v358)
            {
              v361 = *a2;
              uint64_t v362 = v359 - *a2;
              unint64_t v363 = v362 + 1;
              if ((unint64_t)(v362 + 1) >> 61) {
                goto LABEL_509;
              }
              uint64_t v364 = v358 - (void)v361;
              if (v364 >> 2 > v363) {
                unint64_t v363 = v364 >> 2;
              }
              if ((unint64_t)v364 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v365 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v365 = v363;
              }
              if (v365)
              {
                v366 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v365);
                v361 = *a2;
                v359 = a2[1];
              }
              else
              {
                v366 = 0;
              }
              v367 = (unint64_t *)&v366[8 * v362];
              unint64_t *v367 = v357;
              v360 = v367 + 1;
              while (v359 != v361)
              {
                unint64_t v368 = *--v359;
                *--v367 = v368;
              }
              *a2 = v367;
              a2[1] = v360;
              a2[2] = (unint64_t *)&v366[8 * v365];
              if (v361) {
                operator delete(v361);
              }
            }
            else
            {
              unint64_t *v359 = v356;
              v360 = v359 + 1;
            }
            a2[1] = v360;
            ++v354;
            uint64_t v4 = 1;
          }
          while (v354 != v353);
        }
      }
      else
      {
        if (v5 != -16086)
        {
          int v128 = -16079;
LABEL_208:
          if (v5 != v128) {
            return v4;
          }
          goto LABEL_232;
        }
        uint64_t v4 = 1;
        unint64_t v369 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 24), 1uLL);
        if (v369)
        {
          unint64_t v370 = v369;
          unint64_t v371 = 0;
          uint64_t v372 = (uint64_t)(a1 + 18);
          do
          {
            unint64_t v373 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v372, v371);
            unint64_t v374 = v373;
            v376 = a2[1];
            unint64_t v375 = (unint64_t)a2[2];
            if ((unint64_t)v376 >= v375)
            {
              v378 = *a2;
              uint64_t v379 = v376 - *a2;
              unint64_t v380 = v379 + 1;
              if ((unint64_t)(v379 + 1) >> 61) {
                goto LABEL_509;
              }
              uint64_t v381 = v375 - (void)v378;
              if (v381 >> 2 > v380) {
                unint64_t v380 = v381 >> 2;
              }
              if ((unint64_t)v381 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v382 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v382 = v380;
              }
              if (v382)
              {
                v383 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v382);
                v378 = *a2;
                v376 = a2[1];
              }
              else
              {
                v383 = 0;
              }
              v384 = (unint64_t *)&v383[8 * v379];
              unint64_t *v384 = v374;
              v377 = v384 + 1;
              while (v376 != v378)
              {
                unint64_t v385 = *--v376;
                *--v384 = v385;
              }
              *a2 = v384;
              a2[1] = v377;
              a2[2] = (unint64_t *)&v383[8 * v382];
              if (v378) {
                operator delete(v378);
              }
            }
            else
            {
              unint64_t *v376 = v373;
              v377 = v376 + 1;
            }
            a2[1] = v377;
            ++v371;
            uint64_t v4 = 1;
          }
          while (v371 != v370);
        }
      }
    }
  }
  else if (v5 <= -15878)
  {
    if (v5 <= -16004)
    {
      switch(v5)
      {
        case -16047:
        case -16045:
        case -16043:
        case -16041:
          goto LABEL_232;
        case -16046:
          unint64_t v42 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 24), 0);
          if (!v42) {
            return 1;
          }
          unint64_t v43 = v42;
          unint64_t v44 = 0;
          uint64_t v45 = (uint64_t)(a1 + 18);
          do
          {
            unint64_t v46 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v45, v44);
            unint64_t v47 = v46;
            id v49 = a2[1];
            unint64_t v48 = (unint64_t)a2[2];
            if ((unint64_t)v49 >= v48)
            {
              uint64_t v51 = *a2;
              uint64_t v52 = v49 - *a2;
              unint64_t v53 = v52 + 1;
              if ((unint64_t)(v52 + 1) >> 61) {
                goto LABEL_509;
              }
              uint64_t v54 = v48 - (void)v51;
              if (v54 >> 2 > v53) {
                unint64_t v53 = v54 >> 2;
              }
              if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v55 = v53;
              }
              if (v55)
              {
                int v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v55);
                uint64_t v51 = *a2;
                id v49 = a2[1];
              }
              else
              {
                int v56 = 0;
              }
              long long v57 = (unint64_t *)&v56[8 * v52];
              *long long v57 = v47;
              uint64_t v50 = v57 + 1;
              while (v49 != v51)
              {
                unint64_t v58 = *--v49;
                *--long long v57 = v58;
              }
              *a2 = v57;
              a2[1] = v50;
              a2[2] = (unint64_t *)&v56[8 * v55];
              if (v51) {
                operator delete(v51);
              }
            }
            else
            {
              *id v49 = v46;
              uint64_t v50 = v49 + 1;
            }
            a2[1] = v50;
            ++v44;
            uint64_t v4 = 1;
          }
          while (v44 != v43);
          return v4;
        case -16044:
          unint64_t v267 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 24), 0);
          if (!v267) {
            return 1;
          }
          unint64_t v268 = v267;
          unint64_t v269 = 0;
          uint64_t v270 = (uint64_t)(a1 + 18);
          do
          {
            unint64_t v271 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v270, v269);
            unint64_t v272 = v271;
            v274 = a2[1];
            unint64_t v273 = (unint64_t)a2[2];
            if ((unint64_t)v274 >= v273)
            {
              v276 = *a2;
              uint64_t v277 = v274 - *a2;
              unint64_t v278 = v277 + 1;
              if ((unint64_t)(v277 + 1) >> 61) {
                goto LABEL_509;
              }
              uint64_t v279 = v273 - (void)v276;
              if (v279 >> 2 > v278) {
                unint64_t v278 = v279 >> 2;
              }
              if ((unint64_t)v279 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v280 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v280 = v278;
              }
              if (v280)
              {
                v281 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v280);
                v276 = *a2;
                v274 = a2[1];
              }
              else
              {
                v281 = 0;
              }
              v282 = (unint64_t *)&v281[8 * v277];
              unint64_t *v282 = v272;
              v275 = v282 + 1;
              while (v274 != v276)
              {
                unint64_t v283 = *--v274;
                *--v282 = v283;
              }
              *a2 = v282;
              a2[1] = v275;
              a2[2] = (unint64_t *)&v281[8 * v280];
              if (v276) {
                operator delete(v276);
              }
            }
            else
            {
              unint64_t *v274 = v271;
              v275 = v274 + 1;
            }
            a2[1] = v275;
            ++v269;
            uint64_t v4 = 1;
          }
          while (v269 != v268);
          return v4;
        case -16042:
          unint64_t v284 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 24), 0);
          if (!v284) {
            return 1;
          }
          unint64_t v285 = v284;
          unint64_t v286 = 0;
          uint64_t v287 = (uint64_t)(a1 + 18);
          do
          {
            unint64_t v288 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v287, v286);
            unint64_t v289 = v288;
            v291 = a2[1];
            unint64_t v290 = (unint64_t)a2[2];
            if ((unint64_t)v291 >= v290)
            {
              v293 = *a2;
              uint64_t v294 = v291 - *a2;
              unint64_t v295 = v294 + 1;
              if ((unint64_t)(v294 + 1) >> 61) {
                goto LABEL_509;
              }
              uint64_t v296 = v290 - (void)v293;
              if (v296 >> 2 > v295) {
                unint64_t v295 = v296 >> 2;
              }
              if ((unint64_t)v296 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v297 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v297 = v295;
              }
              if (v297)
              {
                v298 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v297);
                v293 = *a2;
                v291 = a2[1];
              }
              else
              {
                v298 = 0;
              }
              v299 = (unint64_t *)&v298[8 * v294];
              unint64_t *v299 = v289;
              v292 = v299 + 1;
              while (v291 != v293)
              {
                unint64_t v300 = *--v291;
                *--v299 = v300;
              }
              *a2 = v299;
              a2[1] = v292;
              a2[2] = (unint64_t *)&v298[8 * v297];
              if (v293) {
                operator delete(v293);
              }
            }
            else
            {
              unint64_t *v291 = v288;
              v292 = v291 + 1;
            }
            a2[1] = v292;
            ++v286;
            uint64_t v4 = 1;
          }
          while (v286 != v285);
          return v4;
        case -16040:
          unint64_t v301 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 24), 0);
          if (!v301) {
            return 1;
          }
          unint64_t v302 = v301;
          unint64_t v303 = 0;
          uint64_t v304 = (uint64_t)(a1 + 18);
          do
          {
            unint64_t v305 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v304, v303);
            unint64_t v306 = v305;
            v308 = a2[1];
            unint64_t v307 = (unint64_t)a2[2];
            if ((unint64_t)v308 >= v307)
            {
              v310 = *a2;
              uint64_t v311 = v308 - *a2;
              unint64_t v312 = v311 + 1;
              if ((unint64_t)(v311 + 1) >> 61) {
                goto LABEL_509;
              }
              uint64_t v313 = v307 - (void)v310;
              if (v313 >> 2 > v312) {
                unint64_t v312 = v313 >> 2;
              }
              if ((unint64_t)v313 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v314 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v314 = v312;
              }
              if (v314)
              {
                v315 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v314);
                v310 = *a2;
                v308 = a2[1];
              }
              else
              {
                v315 = 0;
              }
              v316 = (unint64_t *)&v315[8 * v311];
              unint64_t *v316 = v306;
              v309 = v316 + 1;
              while (v308 != v310)
              {
                unint64_t v317 = *--v308;
                *--v316 = v317;
              }
              *a2 = v316;
              a2[1] = v309;
              a2[2] = (unint64_t *)&v315[8 * v314];
              if (v310) {
                operator delete(v310);
              }
            }
            else
            {
              unint64_t *v308 = v305;
              v309 = v308 + 1;
            }
            a2[1] = v309;
            ++v303;
            uint64_t v4 = 1;
          }
          while (v303 != v302);
          return v4;
        default:
          if (v5 == -16017) {
            goto LABEL_232;
          }
          if (v5 != -16008) {
            return v4;
          }
          unint64_t v129 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 24), 0);
          if (!v129) {
            return 1;
          }
          unint64_t v130 = v129;
          unint64_t v131 = 0;
          uint64_t v132 = (uint64_t)(a1 + 18);
          break;
      }
      do
      {
        unint64_t v133 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v132, v131);
        unint64_t v134 = v133;
        long long v136 = a2[1];
        unint64_t v135 = (unint64_t)a2[2];
        if ((unint64_t)v136 >= v135)
        {
          long long v138 = *a2;
          uint64_t v139 = v136 - *a2;
          unint64_t v140 = v139 + 1;
          if ((unint64_t)(v139 + 1) >> 61) {
            goto LABEL_509;
          }
          uint64_t v141 = v135 - (void)v138;
          if (v141 >> 2 > v140) {
            unint64_t v140 = v141 >> 2;
          }
          if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v142 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v142 = v140;
          }
          if (v142)
          {
            v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v142);
            long long v138 = *a2;
            long long v136 = a2[1];
          }
          else
          {
            v143 = 0;
          }
          v144 = (unint64_t *)&v143[8 * v139];
          unint64_t *v144 = v134;
          long long v137 = v144 + 1;
          while (v136 != v138)
          {
            unint64_t v145 = *--v136;
            *--v144 = v145;
          }
          *a2 = v144;
          a2[1] = v137;
          a2[2] = (unint64_t *)&v143[8 * v142];
          if (v138) {
            operator delete(v138);
          }
        }
        else
        {
          *long long v136 = v133;
          long long v137 = v136 + 1;
        }
        a2[1] = v137;
        ++v131;
        uint64_t v4 = 1;
      }
      while (v131 != v130);
    }
    else
    {
      if (v5 > -15977)
      {
        if (v5 > -15953)
        {
          switch(v5)
          {
            case -15952:
              unint64_t v386 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 36), 0);
              std::vector<unsigned long long>::emplace_back<unsigned long long>((uint64_t)a2, &v386);
              uint64_t v76 = (uint64_t)(a1 + 60);
              break;
            case -15887:
              unint64_t v386 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 18), 0);
              std::vector<unsigned long long>::emplace_back<unsigned long long>((uint64_t)a2, &v386);
              uint64_t v41 = (uint64_t)(a1 + 24);
LABEL_507:
              unint64_t v386 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v41, 0);
              std::vector<unsigned long long>::emplace_back<unsigned long long>((uint64_t)a2, &v386);
LABEL_508:
              uint64_t v76 = (uint64_t)(a1 + 30);
              break;
            case -15878:
              uint64_t v23 = (uint64_t)(a1 + 18);
LABEL_180:
              unint64_t v386 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v23, 0);
              std::vector<unsigned long long>::emplace_back<unsigned long long>((uint64_t)a2, &v386);
LABEL_205:
              uint64_t v76 = (uint64_t)(a1 + 36);
              break;
            default:
              return v4;
          }
          goto LABEL_233;
        }
        if (v5 != -15976)
        {
          if (v5 != -15963 && v5 != -15961) {
            return v4;
          }
LABEL_238:
          uint64_t v76 = (uint64_t)(a1 + 24);
          goto LABEL_233;
        }
        goto LABEL_232;
      }
      switch(v5)
      {
        case -16003:
          unint64_t v24 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 24), 0);
          if (!v24) {
            return 1;
          }
          unint64_t v25 = v24;
          unint64_t v26 = 0;
          uint64_t v27 = (uint64_t)(a1 + 18);
          break;
        case -16002:
        case -16001:
        case -16000:
        case -15999:
        case -15998:
        case -15997:
        case -15996:
          return v4;
        case -15995:
        case -15994:
        case -15993:
        case -15992:
          goto LABEL_232;
        default:
          if (v5 == -15977) {
            goto LABEL_240;
          }
          return v4;
      }
      do
      {
        unint64_t v28 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v27, v26);
        unint64_t v29 = v28;
        uint64_t v31 = a2[1];
        unint64_t v30 = (unint64_t)a2[2];
        if ((unint64_t)v31 >= v30)
        {
          uint64_t v33 = *a2;
          uint64_t v34 = v31 - *a2;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61) {
            goto LABEL_509;
          }
          uint64_t v36 = v30 - (void)v33;
          if (v36 >> 2 > v35) {
            unint64_t v35 = v36 >> 2;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37)
          {
            unint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v37);
            uint64_t v33 = *a2;
            uint64_t v31 = a2[1];
          }
          else
          {
            unint64_t v38 = 0;
          }
          unint64_t v39 = (unint64_t *)&v38[8 * v34];
          unint64_t *v39 = v29;
          uint64_t v32 = v39 + 1;
          while (v31 != v33)
          {
            unint64_t v40 = *--v31;
            *--unint64_t v39 = v40;
          }
          *a2 = v39;
          a2[1] = v32;
          a2[2] = (unint64_t *)&v38[8 * v37];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          unint64_t *v31 = v28;
          uint64_t v32 = v31 + 1;
        }
        a2[1] = v32;
        ++v26;
        uint64_t v4 = 1;
      }
      while (v26 != v25);
    }
  }
  else
  {
    if (v5 > -15402)
    {
      if (v5 <= -15285)
      {
        switch(v5)
        {
          case -15401:
          case -15393:
          case -15391:
          case -15383:
            goto LABEL_232;
          case -15399:
            uint64_t v4 = 1;
            unint64_t v6 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 30), 1uLL);
            if (!v6) {
              return v4;
            }
            unint64_t v7 = v6;
            unint64_t v8 = 0;
            uint64_t v9 = (uint64_t)(a1 + 18);
            do
            {
              unint64_t v10 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v9, v8);
              unint64_t v11 = v10;
              BOOL v13 = a2[1];
              unint64_t v12 = (unint64_t)a2[2];
              if ((unint64_t)v13 >= v12)
              {
                int v15 = *a2;
                uint64_t v16 = v13 - *a2;
                unint64_t v17 = v16 + 1;
                if ((unint64_t)(v16 + 1) >> 61) {
                  goto LABEL_509;
                }
                uint64_t v18 = v12 - (void)v15;
                if (v18 >> 2 > v17) {
                  unint64_t v17 = v18 >> 2;
                }
                if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v19 = v17;
                }
                if (v19)
                {
                  uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v19);
                  int v15 = *a2;
                  BOOL v13 = a2[1];
                }
                else
                {
                  uint64_t v20 = 0;
                }
                int v21 = (unint64_t *)&v20[8 * v16];
                unint64_t *v21 = v11;
                BOOL v14 = v21 + 1;
                while (v13 != v15)
                {
                  unint64_t v22 = *--v13;
                  *--int v21 = v22;
                }
                *a2 = v21;
                a2[1] = v14;
                a2[2] = (unint64_t *)&v20[8 * v19];
                if (v15) {
                  operator delete(v15);
                }
              }
              else
              {
                *BOOL v13 = v10;
                BOOL v14 = v13 + 1;
              }
              a2[1] = v14;
              ++v8;
              uint64_t v4 = 1;
            }
            while (v8 != v7);
            return v4;
          case -15392:
            uint64_t v4 = 1;
            unint64_t v216 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 24), 1uLL);
            if (!v216) {
              return v4;
            }
            unint64_t v217 = v216;
            unint64_t v218 = 0;
            uint64_t v219 = (uint64_t)(a1 + 18);
            do
            {
              unint64_t v220 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v219, v218);
              unint64_t v221 = v220;
              v223 = a2[1];
              unint64_t v222 = (unint64_t)a2[2];
              if ((unint64_t)v223 >= v222)
              {
                v225 = *a2;
                uint64_t v226 = v223 - *a2;
                unint64_t v227 = v226 + 1;
                if ((unint64_t)(v226 + 1) >> 61) {
                  goto LABEL_509;
                }
                uint64_t v228 = v222 - (void)v225;
                if (v228 >> 2 > v227) {
                  unint64_t v227 = v228 >> 2;
                }
                if ((unint64_t)v228 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v229 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v229 = v227;
                }
                if (v229)
                {
                  v230 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v229);
                  v225 = *a2;
                  v223 = a2[1];
                }
                else
                {
                  v230 = 0;
                }
                v231 = (unint64_t *)&v230[8 * v226];
                unint64_t *v231 = v221;
                v224 = v231 + 1;
                while (v223 != v225)
                {
                  unint64_t v232 = *--v223;
                  *--v231 = v232;
                }
                *a2 = v231;
                a2[1] = v224;
                a2[2] = (unint64_t *)&v230[8 * v229];
                if (v225) {
                  operator delete(v225);
                }
              }
              else
              {
                unint64_t *v223 = v220;
                v224 = v223 + 1;
              }
              a2[1] = v224;
              ++v218;
              uint64_t v4 = 1;
            }
            while (v218 != v217);
            return v4;
          case -15389:
            uint64_t v4 = 1;
            unint64_t v233 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 30), 1uLL);
            if (!v233) {
              return v4;
            }
            unint64_t v234 = v233;
            unint64_t v235 = 0;
            uint64_t v236 = (uint64_t)(a1 + 18);
            do
            {
              unint64_t v237 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v236, v235);
              unint64_t v238 = v237;
              v240 = a2[1];
              unint64_t v239 = (unint64_t)a2[2];
              if ((unint64_t)v240 >= v239)
              {
                v242 = *a2;
                uint64_t v243 = v240 - *a2;
                unint64_t v244 = v243 + 1;
                if ((unint64_t)(v243 + 1) >> 61) {
                  goto LABEL_509;
                }
                uint64_t v245 = v239 - (void)v242;
                if (v245 >> 2 > v244) {
                  unint64_t v244 = v245 >> 2;
                }
                if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v246 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v246 = v244;
                }
                if (v246)
                {
                  v247 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v246);
                  v242 = *a2;
                  v240 = a2[1];
                }
                else
                {
                  v247 = 0;
                }
                v248 = (unint64_t *)&v247[8 * v243];
                unint64_t *v248 = v238;
                v241 = v248 + 1;
                while (v240 != v242)
                {
                  unint64_t v249 = *--v240;
                  *--v248 = v249;
                }
                *a2 = v248;
                a2[1] = v241;
                a2[2] = (unint64_t *)&v247[8 * v246];
                if (v242) {
                  operator delete(v242);
                }
              }
              else
              {
                unint64_t *v240 = v237;
                v241 = v240 + 1;
              }
              a2[1] = v241;
              ++v235;
              uint64_t v4 = 1;
            }
            while (v235 != v234);
            return v4;
          case -15382:
            uint64_t v4 = 1;
            unint64_t v250 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 24), 1uLL);
            if (!v250) {
              return v4;
            }
            unint64_t v251 = v250;
            unint64_t v252 = 0;
            uint64_t v253 = (uint64_t)(a1 + 18);
            break;
          default:
            return v4;
        }
        do
        {
          unint64_t v254 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v253, v252);
          unint64_t v255 = v254;
          v257 = a2[1];
          unint64_t v256 = (unint64_t)a2[2];
          if ((unint64_t)v257 >= v256)
          {
            v259 = *a2;
            uint64_t v260 = v257 - *a2;
            unint64_t v261 = v260 + 1;
            if ((unint64_t)(v260 + 1) >> 61) {
              goto LABEL_509;
            }
            uint64_t v262 = v256 - (void)v259;
            if (v262 >> 2 > v261) {
              unint64_t v261 = v262 >> 2;
            }
            if ((unint64_t)v262 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v263 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v263 = v261;
            }
            if (v263)
            {
              v264 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v263);
              v259 = *a2;
              v257 = a2[1];
            }
            else
            {
              v264 = 0;
            }
            v265 = (unint64_t *)&v264[8 * v260];
            unint64_t *v265 = v255;
            v258 = v265 + 1;
            while (v257 != v259)
            {
              unint64_t v266 = *--v257;
              *--v265 = v266;
            }
            *a2 = v265;
            a2[1] = v258;
            a2[2] = (unint64_t *)&v264[8 * v263];
            if (v259) {
              operator delete(v259);
            }
          }
          else
          {
            unint64_t *v257 = v254;
            v258 = v257 + 1;
          }
          a2[1] = v258;
          ++v252;
          uint64_t v4 = 1;
        }
        while (v252 != v251);
        return v4;
      }
      if (v5 <= -15276)
      {
        if (v5 != -15284)
        {
          if (v5 == -15282)
          {
            uint64_t v4 = 1;
            unint64_t v111 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 36), 1uLL);
            if (v111)
            {
              unint64_t v112 = v111;
              unint64_t v113 = 0;
              uint64_t v114 = (uint64_t)(a1 + 18);
              do
              {
                unint64_t v115 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v114, v113);
                unint64_t v116 = v115;
                int v118 = a2[1];
                unint64_t v117 = (unint64_t)a2[2];
                if ((unint64_t)v118 >= v117)
                {
                  v120 = *a2;
                  uint64_t v121 = v118 - *a2;
                  unint64_t v122 = v121 + 1;
                  if ((unint64_t)(v121 + 1) >> 61) {
                    goto LABEL_509;
                  }
                  uint64_t v123 = v117 - (void)v120;
                  if (v123 >> 2 > v122) {
                    unint64_t v122 = v123 >> 2;
                  }
                  if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v124 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v124 = v122;
                  }
                  if (v124)
                  {
                    long long v125 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v124);
                    v120 = *a2;
                    int v118 = a2[1];
                  }
                  else
                  {
                    long long v125 = 0;
                  }
                  long long v126 = (unint64_t *)&v125[8 * v121];
                  *long long v126 = v116;
                  v119 = v126 + 1;
                  while (v118 != v120)
                  {
                    unint64_t v127 = *--v118;
                    *--long long v126 = v127;
                  }
                  *a2 = v126;
                  a2[1] = v119;
                  a2[2] = (unint64_t *)&v125[8 * v124];
                  if (v120) {
                    operator delete(v120);
                  }
                }
                else
                {
                  *int v118 = v115;
                  v119 = v118 + 1;
                }
                a2[1] = v119;
                ++v113;
                uint64_t v4 = 1;
              }
              while (v113 != v112);
            }
          }
          return v4;
        }
        goto LABEL_232;
      }
      if (v5 != -15275)
      {
        if (v5 == -15273)
        {
          uint64_t v4 = 1;
          unint64_t v146 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 36), 1uLL);
          if (v146)
          {
            unint64_t v147 = v146;
            unint64_t v148 = 0;
            uint64_t v149 = (uint64_t)(a1 + 18);
            do
            {
              unint64_t v150 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v149, v148);
              unint64_t v151 = v150;
              v153 = a2[1];
              unint64_t v152 = (unint64_t)a2[2];
              if ((unint64_t)v153 >= v152)
              {
                v155 = *a2;
                uint64_t v156 = v153 - *a2;
                unint64_t v157 = v156 + 1;
                if ((unint64_t)(v156 + 1) >> 61) {
                  goto LABEL_509;
                }
                uint64_t v158 = v152 - (void)v155;
                if (v158 >> 2 > v157) {
                  unint64_t v157 = v158 >> 2;
                }
                if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v159 = v157;
                }
                if (v159)
                {
                  v160 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v159);
                  v155 = *a2;
                  v153 = a2[1];
                }
                else
                {
                  v160 = 0;
                }
                v161 = (unint64_t *)&v160[8 * v156];
                unint64_t *v161 = v151;
                v154 = v161 + 1;
                while (v153 != v155)
                {
                  unint64_t v162 = *--v153;
                  *--v161 = v162;
                }
                *a2 = v161;
                a2[1] = v154;
                a2[2] = (unint64_t *)&v160[8 * v159];
                if (v155) {
                  operator delete(v155);
                }
              }
              else
              {
                unint64_t *v153 = v150;
                v154 = v153 + 1;
              }
              a2[1] = v154;
              ++v148;
              uint64_t v4 = 1;
            }
            while (v148 != v147);
          }
        }
        return v4;
      }
LABEL_232:
      uint64_t v76 = (uint64_t)(a1 + 18);
LABEL_233:
      unint64_t v386 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v76, 0);
      std::vector<unsigned long long>::emplace_back<unsigned long long>((uint64_t)a2, &v386);
      return 1;
    }
    if (v5 > -15757)
    {
      switch(v5)
      {
        case -15728:
        case -15726:
        case -15723:
        case -15722:
          goto LABEL_232;
        case -15727:
        case -15725:
        case -15724:
          return v4;
        default:
          if (v5 == -15756) {
            goto LABEL_508;
          }
          int v128 = -15415;
          goto LABEL_208;
      }
    }
    switch(v5)
    {
      case -15821:
      case -15819:
        goto LABEL_232;
      case -15820:
        unint64_t v77 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 24), 0);
        if (!v77) {
          return 1;
        }
        unint64_t v78 = v77;
        unint64_t v79 = 0;
        uint64_t v80 = (uint64_t)(a1 + 18);
        do
        {
          unint64_t v81 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v80, v79);
          unint64_t v82 = v81;
          unint64_t v84 = a2[1];
          unint64_t v83 = (unint64_t)a2[2];
          if ((unint64_t)v84 >= v83)
          {
            int v86 = *a2;
            uint64_t v87 = v84 - *a2;
            unint64_t v88 = v87 + 1;
            if ((unint64_t)(v87 + 1) >> 61) {
              goto LABEL_509;
            }
            uint64_t v89 = v83 - (void)v86;
            if (v89 >> 2 > v88) {
              unint64_t v88 = v89 >> 2;
            }
            if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v90 = v88;
            }
            if (v90)
            {
              long long v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v90);
              int v86 = *a2;
              unint64_t v84 = a2[1];
            }
            else
            {
              long long v91 = 0;
            }
            long long v92 = (unint64_t *)&v91[8 * v87];
            unint64_t *v92 = v82;
            uint64_t v85 = v92 + 1;
            while (v84 != v86)
            {
              unint64_t v93 = *--v84;
              *--long long v92 = v93;
            }
            *a2 = v92;
            a2[1] = v85;
            a2[2] = (unint64_t *)&v91[8 * v90];
            if (v86) {
              operator delete(v86);
            }
          }
          else
          {
            *unint64_t v84 = v81;
            uint64_t v85 = v84 + 1;
          }
          a2[1] = v85;
          ++v79;
          uint64_t v4 = 1;
        }
        while (v79 != v78);
        return v4;
      case -15818:
        unint64_t v318 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 24), 0);
        if (!v318) {
          return 1;
        }
        unint64_t v319 = v318;
        unint64_t v320 = 0;
        uint64_t v321 = (uint64_t)(a1 + 18);
        break;
      default:
        if (v5 != -15877) {
          return v4;
        }
        unint64_t v386 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>((uint64_t)(a1 + 18), 0);
        std::vector<unsigned long long>::emplace_back<unsigned long long>((uint64_t)a2, &v386);
        goto LABEL_238;
    }
    do
    {
      unint64_t v322 = GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(v321, v320);
      unint64_t v323 = v322;
      v325 = a2[1];
      unint64_t v324 = (unint64_t)a2[2];
      if ((unint64_t)v325 >= v324)
      {
        v327 = *a2;
        uint64_t v328 = v325 - *a2;
        unint64_t v329 = v328 + 1;
        if ((unint64_t)(v328 + 1) >> 61) {
          goto LABEL_509;
        }
        uint64_t v330 = v324 - (void)v327;
        if (v330 >> 2 > v329) {
          unint64_t v329 = v330 >> 2;
        }
        if ((unint64_t)v330 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v331 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v331 = v329;
        }
        if (v331)
        {
          v332 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v331);
          v327 = *a2;
          v325 = a2[1];
        }
        else
        {
          v332 = 0;
        }
        v333 = (unint64_t *)&v332[8 * v328];
        unint64_t *v333 = v323;
        v326 = v333 + 1;
        while (v325 != v327)
        {
          unint64_t v334 = *--v325;
          *--v333 = v334;
        }
        *a2 = v333;
        a2[1] = v326;
        a2[2] = (unint64_t *)&v332[8 * v331];
        if (v327) {
          operator delete(v327);
        }
      }
      else
      {
        unint64_t *v325 = v322;
        v326 = v325 + 1;
      }
      a2[1] = v326;
      ++v320;
      uint64_t v4 = 1;
    }
    while (v320 != v319);
  }
  return v4;
}

void *std::vector<unsigned long long>::emplace_back<unsigned long long>(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *(void **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      BOOL v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v12);
      unint64_t v8 = *(void **)a1;
      unint64_t v6 = *(void **)(a1 + 8);
    }
    else
    {
      BOOL v13 = 0;
    }
    BOOL v14 = &v13[8 * v9];
    int v15 = &v13[8 * v12];
    *(void *)BOOL v14 = *a2;
    unint64_t v7 = v14 + 8;
    while (v6 != v8)
    {
      uint64_t v16 = *--v6;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    void *v6 = *a2;
    unint64_t v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
  return v7 - 1;
}

unint64_t GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(uint64_t a1, unint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 22);
  if (v2)
  {
    if (*(unsigned __int16 *)(a1 + 20) > a2) {
      goto LABEL_5;
    }
    return 0;
  }
  if (a2) {
    return 0;
  }
LABEL_5:
  switch(*(_DWORD *)(a1 + 8))
  {
    case 1:
      return *(char *)(*(void *)a1 + a2);
    case 2:
      return *(unsigned __int8 *)(*(void *)a1 + a2);
    case 3:
      return *(__int16 *)(*(void *)a1 + 2 * a2);
    case 4:
      return *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
    case 5:
      int v4 = *(_DWORD *)(a1 + 12);
      unint64_t result = *(int *)(*(void *)a1 + 4 * a2);
      if (v4 != 19) {
        return result;
      }
      double v5 = (double)(int)result * 0.0000152587891;
LABEL_10:
      unint64_t result = (unint64_t)v5;
      break;
    case 6:
      return *(unsigned int *)(*(void *)a1 + 4 * a2);
    case 7:
    case 8:
    case 0xB:
    case 0xC:
      return *(void *)(*(void *)a1 + 8 * a2);
    case 9:
      return (unint64_t)*(float *)(*(void *)a1 + 4 * a2);
    case 0xA:
      double v5 = *(double *)(*(void *)a1 + 8 * a2);
      goto LABEL_10;
    case 0xD:
      if ((v2 & 0x10) == 0) {
        return 0;
      }
      return GPUTools::FD::Argument::ViewAsGLObjectName((GPUTools::FD::Argument *)a1);
    default:
      return 0;
  }
  return result;
}

const char *GPUTools::MTL::GetFuncEnumAsString(GPUTools::MTL *this)
{
  if ((int)this > -12545)
  {
    if ((int)this > -7169)
    {
      switch(this)
      {
        case 0xFFFFE800:
          unint64_t result = "kDYFEMPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRows_resul"
                   "tColumns_interiorColumns_alpha_beta_A_aInfo_B_bInfo_C_cInfo_predicationBuffer_predicationOffset";
          break;
        case 0xFFFFE801:
          unint64_t result = "kDYFEMPSPlugin_newCNNConvolutionWithDescriptor_convolutionData";
          break;
        case 0xFFFFE802:
          unint64_t result = "kDYFEMPSExternalCNNPoolingAverage_encodeBatchToCommandBuffer_computeCommandEncoder_options_sourceText"
                   "ures_sourceInfo_destinationTextures_destinationInfo_zeroPadSizeX_zeroPadSizeY_predicationBuffer_predicationOffset";
          break;
        case 0xFFFFE803:
          unint64_t result = "kDYFEMPSPlugin_newCNNPoolingMaxWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY";
          break;
        case 0xFFFFE804:
          unint64_t result = "kDYFEMPSExternalMatrixVectorMultiplication_encodeToCommandBuffer_encoder_options_batchSize_matrix_mat"
                   "rixStructure_vector_vectorStructure_result_resultStructure_predicationBuffer_predicationOffset";
          break;
        case 0xFFFFE805:
          unint64_t result = "kDYFEMPSExternalPluginBase_dealloc";
          break;
        case 0xFFFFE806:
          unint64_t result = "kDYFEMPSExternalCNNUnary_maxBatchSize";
          break;
        case 0xFFFFE807:
          unint64_t result = "kDYFEMPSExternalMatrixVectorMultiplication_encodeToCommandBuffer_encoder_options_batchSize_matrix_mat"
                   "rixStructure_vector_vectorStructure_result_resultStructure";
          break;
        case 0xFFFFE808:
          unint64_t result = "kDYFEMPSExternalCNNConvolution_reloadWeightsAndBiasesWithCommandBuffer_encoder_weights_biases_predica"
                   "tionBuffer_predicationOffset";
          break;
        case 0xFFFFE809:
          unint64_t result = "kDYFEMPSExternalCNNUnary_encodeToCommandBuffer_computeCommandEncoder_options_sourceTexture_sourceInfo"
                   "_destinationTexture_destinationInfo";
          break;
        case 0xFFFFE80A:
          unint64_t result = "kDYFEMPSPlugin_newMatrixVectorMultiplicationWithTranspose_rows_columns_alpha_beta";
          break;
        case 0xFFFFE80B:
          unint64_t result = "kDYFEMPSPlugin_newCNNNeuronWithNeuronType_neuronParameterA_neuronParameterB_neuronParameterC";
          break;
        case 0xFFFFE80C:
          unint64_t result = "kDYFEMPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRows_resul"
                   "tColumns_interiorColumns_alpha_beta_A_aInfo_B_bInfo_C_cInfo";
          break;
        case 0xFFFFE80D:
          unint64_t result = "kDYFEMPSPlugin_newCNNConvolutionWithDescriptor_dataSource_fullyConnected";
          break;
        case 0xFFFFE80E:
          unint64_t result = "kDYFEMPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_A_aInfo_B_bInfo_C_cInfo";
          break;
        case 0xFFFFE80F:
          unint64_t result = "kDYFEMPSPlugin_newCNNNeuronWithNeuronType_neuronParameterAArray_count";
          break;
        case 0xFFFFE810:
          unint64_t result = "kDYFEMPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_options_batchSize_inputMatrix_inpu"
                   "tMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_alp"
                   "ha_numberOfFeatureVectors_inputFeatureChannels_outputFeatureChannels_neuronType_neuronParameterA_neur"
                   "onParameterB_neuronParameterC";
          break;
        case 0xFFFFE811:
          unint64_t result = "kDYFEMPSExternalCNNConvolutionGradient_reloadWeights";
          break;
        case 0xFFFFE812:
          unint64_t result = "kDYFEMPSExternalCNNPoolingAverage_encodeToCommandBuffer_computeCommandEncoder_options_sourceTexture_s"
                   "ourceInfo_destinationTexture_destinationInfo";
          break;
        case 0xFFFFE813:
          unint64_t result = "kDYFEMPSExternalCNNBinary_encodeToCommandBuffer_computeCommandEncoder_options_pluginOptions_primaryTe"
                   "xture_primaryInfo_secondaryTexture_secondaryInfo_destinationTexture_destinationInfo";
          break;
        case 0xFFFFE814:
          unint64_t result = "kDYFEMPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_options_batchSize_inputMatrix_inpu"
                   "tMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_alp"
                   "ha_numberOfFeatureVectors_inputFeatureChannels_outputFeatureChannels_neuronType_neuronParameterA_neur"
                   "onParameterB_neuronParameterC_predicationBuffer_predicationOffset";
          break;
        case 0xFFFFE815:
          unint64_t result = "kDYFEMPSExternalCNNBinary_maxBatchSize";
          break;
        case 0xFFFFE816:
          unint64_t result = "kDYFEMPSPlugin_newMatrixMultiplicationWithTransposeLeft_transposeRight_resultRows_resultColumns_inter"
                   "iorColumns_alpha_beta";
          break;
        case 0xFFFFE817:
          unint64_t result = "kDYFEMPSExternalCNNPoolingAverage_encodeToCommandBuffer_computeCommandEncoder_options_sourceTexture_s"
                   "ourceInfo_destinationTexture_destinationInfo_zeroPadSizeX_zeroPadSizeY";
          break;
        case 0xFFFFE818:
          unint64_t result = "kDYFEMPSExternalCNNConvolution_reloadWeightsAndBiases";
          break;
        case 0xFFFFE819:
          unint64_t result = "kDYFEMPSPlugin_newCNNSoftMax";
          break;
        case 0xFFFFE81A:
          unint64_t result = "kDYFEMPSExternalCNNBinary_encodeBatchToCommandBuffer_computeCommandEncoder_options_pluginOptions_prim"
                   "aryTextures_primaryInfo_secondaryTextures_secondaryInfo_destinationTextures_destinationInfo_predicati"
                   "onBuffer_predicationOffset";
          break;
        case 0xFFFFE81B:
          unint64_t result = "kDYFEMPSExternalCNNUnary_encodeToCommandBuffer_computeCommandEncoder_options_pluginOptions_sourceText"
                   "ure_sourceInfo_destinationTexture_destinationInfo";
          break;
        case 0xFFFFE81C:
          unint64_t result = "kDYFEMPSPlugin_newCNNDilatedPoolingMaxWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_di"
                   "lationRateX_dilationRateY";
          break;
        case 0xFFFFE81D:
          unint64_t result = "kDYFEMPSExternalCNNUnary_encodeBatchToCommandBuffer_computeCommandEncoder_options_pluginOptions_sourc"
                   "eTextures_sourceInfo_destinationTextures_destinationInfo_predicationBuffer_predicationOffset";
          break;
        case 0xFFFFE81E:
          unint64_t result = "kDYFEMPSExternalCNNConvolutionGradient_encodeBatchToCommandBuffer_computeCommandEncoder_options_plugi"
                   "nOptions_primaryTextures_primaryInfo_secondaryTextures_secondaryInfo_weightsGradient_biasesGradient_a"
                   "ccumulate_predicationBuffer_predicationOffset";
          break;
        case 0xFFFFE81F:
          unint64_t result = "kDYFEMPSExternalCNNConvolutionGradient_reloadWeightsWithCommandBuffer_encoder_weights_predicationBuff"
                   "er_predicationOffset";
          break;
        case 0xFFFFE820:
          unint64_t result = "kDYFEMPSExternalCNNConvolution_exportWeightsAndBiasesWithCommandBuffer_encoder_weights_biases_predica"
                   "tionBuffer_predicationOffset";
          break;
        case 0xFFFFE821:
          unint64_t result = "kDYFEMPSPlugin_newCNNConvolutionGradientWithDescriptor_convolutionData";
          break;
        case 0xFFFFE822:
          unint64_t result = "kDYFEMPSPlugin_newMatrixFullyConnected";
          break;
        case 0xFFFFE823:
          unint64_t result = "kDYFEMPSPlugin_newCNNPoolingAverageWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY";
          break;
        case 0xFFFFE824:
          unint64_t result = "kDYFEMPSExternalCNNConvolution_reloadWeightsAndBiasesWithCommandBuffer_encoder_weights_weightsDataTyp"
                   "e_biases_predicationBuffer_predicationOffset";
          break;
        case 0xFFFFE825:
          unint64_t result = "kDYFEMPSExternalCNNConvolutionGradient_reloadWeightsWithCommandBuffer_encoder_weights_weightsDataType"
                   "_predicationBuffer_predicationOffset";
          break;
        case 0xFFFFE826:
          unint64_t result = "kDYFEMPSExternalCNNConvolution_exportWeightsAndBiasesWithCommandBuffer_encoder_weights_weightsDataTyp"
                   "e_biases_predicationBuffer_predicationOffset";
          break;
        case 0xFFFFE827:
          unint64_t result = "kDYFEMPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRowsAndRes"
                   "ultColumnsAndInteriorColumns_alphaAndBeta_A_aInfo_B_bInfo_C_cInfo_predicationBuffer_predicationOffset";
          break;
        case 0xFFFFE828:
          unint64_t result = "kDYFEMPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_optionsAndBatchSize_inputMatrix_in"
                   "putMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_a"
                   "lpha_numberOfFeatureVectorsAndInputFeatureChannelsAndOutputFeatureChannels_neuronType_neuronParameters";
          break;
        case 0xFFFFE829:
          unint64_t result = "kDYFEMPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_optionsAndBatchSize_inputMatrix_in"
                   "putMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_a"
                   "lpha_numberOfFeatureVectorsAndInputFeatureChannelsAndOutputFeatureChannelsAndNeuronTypeAndPredication"
                   "Offset_neuronParameters_predicationBuffer";
          break;
        case 0xFFFFE82A:
          unint64_t result = "kDYFEMPSExternalNDArrayConvolution2DGradient_encodePrimaryGradientToCommandBuffer_encoder_options_plu"
                   "ginOptions_primary_primaryInfo_secondary_secondaryInfo_gradient_gradientInfo_destination_destinationI"
                   "nfo_accumulate_predicationBuffer_predicationOffset";
          break;
        case 0xFFFFE82B:
          unint64_t result = "kDYFEMPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRows_resul"
                   "tColumns_interiorColumns_alpha_beta_A_aInfo_B_bInfo_C_cInfo_predicationBuffer_predicationOffset_transA_transB";
          break;
        case 0xFFFFE82C:
          unint64_t result = "kDYFEMPSExternalNDArrayConvolution2DGradient_encodeSecondaryGradientToCommandBuffer_encoder_options_p"
                   "luginOptions_primary_primaryInfo_secondary_secondaryInfo_gradient_gradientInfo_destination_destinatio"
                   "nInfo_accumulate_predicationBuffer_predicationOffset";
          break;
        case 0xFFFFE82D:
          unint64_t result = "kDYFEMPSExternalNDArrayBinaryGradient_encodePrimaryGradientToCommandBuffer_encoder_options_pluginOpti"
                   "ons_primaryBuffer_primaryInfo_secondaryBuffer_secondaryInfo_gradientBuffer_gradientInfo_destination_d"
                   "estinationInfo_accumulate_predicationBuffer_predicationOffset";
          break;
        case 0xFFFFE82E:
          unint64_t result = "kDYFEMPSExternalNDArrayBinaryGradient_encodeSecondaryGradientToCommandBuffer_encoder_options_pluginOp"
                   "tions_primaryBuffer_primaryInfo_secondaryBuffer_secondaryInfo_gradientBuffer_gradientInfo_destination"
                   "_destinationInfo_accumulate_predicationBuffer_predicationOffset";
          break;
        case 0xFFFFE82F:
          unint64_t result = "kDYFEMPSExternalNDArrayBinary_encodeToCommandBuffer_encoder_options_pluginOptions_primaryBuffer_prima"
                   "ryInfo_secondaryBuffer_secondaryInfo_destinationBuffer_destinationInfo_predicationBuffer_predicationOffset";
          break;
        case 0xFFFFE830:
          unint64_t result = "kDYFEMPSPlugin_newNDArrayConvolution2DGradientWithDescriptor";
          break;
        case 0xFFFFE831:
          unint64_t result = "kDYFEMPSPlugin_newNDArrayConvolution2DWithDescriptor";
          break;
        default:
          switch(this)
          {
            case 0xFFFFE400:
              unint64_t result = "kDYFECAMetalLayer_setPresentsWithTransaction";
              break;
            case 0xFFFFE401:
              unint64_t result = "kDYFECAMetalDrawable_texture";
              break;
            case 0xFFFFE402:
              unint64_t result = "kDYFECAMetalLayer_nextDrawable";
              break;
            case 0xFFFFE403:
              unint64_t result = "kDYFECAMetalLayer_setPixelFormat";
              break;
            case 0xFFFFE404:
              unint64_t result = "kDYFECAMetalLayer_setDrawableSize";
              break;
            case 0xFFFFE405:
              unint64_t result = "kDYFECAMetalLayer_setDevice";
              break;
            case 0xFFFFE406:
              unint64_t result = "kDYFECAMetalLayer_setBounds_contentsScale";
              break;
            case 0xFFFFE407:
              unint64_t result = "kDYFECAMetalDrawable_dealloc";
              break;
            case 0xFFFFE408:
              unint64_t result = "kDYFECAMetalLayer_setFramebufferOnly";
              break;
            case 0xFFFFE409:
              unint64_t result = "kDYFECAMetalLayer_setBounds_contentsScale_windowBounds_windowProperties";
              break;
            case 0xFFFFE40A:
              unint64_t result = "kDYFECAMetalDrawable_present";
              break;
            case 0xFFFFE40B:
              unint64_t result = "kDYFECAMetalDrawable_presentAtTime";
              break;
            case 0xFFFFE40C:
              unint64_t result = "kDYFECAMetalDrawable_presentAfterMinimumDuration";
              break;
            case 0xFFFFE40D:
              unint64_t result = "kDYFEUIScreen_setInterfaceOrientation";
              break;
            case 0xFFFFE40E:
              unint64_t result = "kDYFECAMetalLayer_setWantsExtendedDynamicRangeContent";
              break;
            case 0xFFFFE40F:
              unint64_t result = "kDYFECAMetalLayer_setColorspace";
              break;
            default:
              switch(this)
              {
                case 0xFFFFE600:
                  unint64_t result = "kDYFENSHMDMetalSession_setDrawablePixelFormat";
                  break;
                case 0xFFFFE601:
                  unint64_t result = "kDYFENSHMDMetalSession_nextDrawable";
                  break;
                case 0xFFFFE602:
                  unint64_t result = "kDYFENSHMDMetalSession_initWithMetalDevice_deviceReference_hmdName";
                  break;
                case 0xFFFFE603:
                  unint64_t result = "kDYFENSHMDMetalSession_setDrawableSize";
                  break;
                case 0xFFFFE604:
                  unint64_t result = "kDYFENSHMDMetalSession_dealloc";
                  break;
                default:
LABEL_1384:
                  unint64_t result = 0;
                  break;
              }
              break;
          }
          break;
      }
    }
    else
    {
      int v2 = this + 10240;
      unint64_t result = "kDYFEBoundary_Frame";
      switch(v2)
      {
        case 0:
          unint64_t result = "kDYFEMTLCommandBuffer_restoreMTLBufferContents";
          break;
        case 1:
          unint64_t result = "kDYFEMTLDevice_deviceReference";
          break;
        case 2:
          unint64_t result = "kDYFEMTLTexture_harvested_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage";
          break;
        case 3:
          unint64_t result = "kDYFEMTLDevice_harvested_newBufferWithBytes_length_options";
          break;
        case 4:
          unint64_t result = "kDYFEMTLTexture_harvested_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_totalBytes";
          break;
        case 5:
          unint64_t result = "kDYFEMTLBuffer_resourceUsage";
          break;
        case 6:
          unint64_t result = "kDYFEMTLTexture_resourceUsage";
          break;
        case 7:
          unint64_t result = "kDYFEMTLDevice_setSelectedCommandQueueAddress";
          break;
        case 8:
          unint64_t result = "kDYFEMTLTexture_restoreIOSurfaceData_length_forPlane";
          break;
        case 9:
          unint64_t result = "kDYFEMTLTexture_mipmapInfo";
          break;
        case 10:
          unint64_t result = "kDYFEMTLDevice_setCapturingCommandQueueAddress";
          break;
        case 11:
          unint64_t result = "kDYFEMTLCommandBuffer_indirectArgumentBufferData";
          break;
        case 12:
          unint64_t result = "kDYFEMTLBuffer_gpuVirtualAddress";
          break;
        case 13:
          unint64_t result = "kDYFEMTLTexture_uniqueIdentifier";
          break;
        case 14:
          unint64_t result = "kDYFEMTLSamplerState_uniqueIdentifier";
          break;
        case 15:
          unint64_t result = "kDYFEMTLCommandBuffer_encodeIndirectArgumentsForBuffer_data";
          break;
        case 16:
          unint64_t result = "kDYFEFrameEnd";
          break;
        case 17:
          unint64_t result = "kDYFEMTLBuffer_allocatedSize";
          break;
        case 18:
          unint64_t result = "kDYFEMTLTexture_allocatedSize";
          break;
        case 19:
          unint64_t result = "kDYFEMTLBuffer_indirectCommandBufferData";
          break;
        case 20:
          unint64_t result = "kDYFEMTLRenderPipelineState_uniqueIdentifier";
          break;
        case 21:
          unint64_t result = "kDYFEMTLIndirectCommandBuffer_restoreData";
          break;
        case 22:
          unint64_t result = "kDYFEMTLIndirectCommandBuffer_uniqueIdentifier";
          break;
        case 23:
          unint64_t result = "kDYFEMTLIndirectCommandBuffer_indirectCommandNop";
          break;
        case 24:
          unint64_t result = "kDYFEMTLIndirectCommandBuffer_restoreOptimizedRanges";
          break;
        case 25:
          unint64_t result = "kDYFEMTLIndirectCommandBuffer_allocatedSize";
          break;
        case 26:
          unint64_t result = "kDYFEMTLComputePipelineState_uniqueIdentifier";
          break;
        case 27:
          unint64_t result = "kDYFEMTLResourceStateCommandEncoder_harvested_updateTextureMapping_mode_region_mipLevel_slice";
          break;
        case 28:
          unint64_t result = "kDYFEMTLTexture_timeSinceTouched";
          break;
        case 29:
          unint64_t result = "kDYFEMTLHeap_timeSinceTouched";
          break;
        case 30:
          unint64_t result = "kDYFEMTLBuffer_timeSinceTouched";
          break;
        case 31:
          unint64_t result = "kDYFEMTLIndirectCommandBuffer_timeSinceTouched";
          break;
        case 32:
          unint64_t result = "kDYFEMTLHeap_usedSize";
          break;
        case 33:
          unint64_t result = "kDYFEMTLHeap_currentAllocatedSize";
          break;
        case 34:
          unint64_t result = "kDYFEMTLSharedEventHandle_dealloc";
          break;
        case 35:
          unint64_t result = "kDYFEMTLTexture_compressionFeedback";
          break;
        case 36:
          unint64_t result = "kDYFEMTLTexture_allocationID";
          break;
        case 37:
          unint64_t result = "kDYFEMTLBuffer_allocationID";
          break;
        case 38:
          unint64_t result = "kDYFEMTLIndirectCommandBuffer_allocationID";
          break;
        case 39:
          unint64_t result = "kDYFEMTLTexture_saveSlice_level_zPlane_normalize_blitOption_toPath";
          break;
        case 40:
          unint64_t result = "kDYFEMTLBuffer_saveContentsToPath";
          break;
        case 41:
          unint64_t result = "kDYFEMTLRenderPipelineState_resourceIndex";
          break;
        case 42:
          unint64_t result = "kDYFEMTLTexture_resourceIndex";
          break;
        case 43:
          unint64_t result = "kDYFEMTLAccelerationStructure_allocationID";
          break;
        case 44:
          unint64_t result = "kDYFEMTLAccelerationStructure_allocatedSize";
          break;
        case 45:
          unint64_t result = "kDYFEMTLAccelerationStructure_resourceUsage";
          break;
        case 46:
          unint64_t result = "kDYFEMTLAccelerationStructure_restoreMTLAccelerationStructure";
          break;
        case 47:
          unint64_t result = "kDYFEMTLVisibleFunctionTable_uniqueIdentifier";
          break;
        case 48:
          unint64_t result = "kDYFEMTLRenderPipelineState_allocatedSize";
          break;
        case 49:
          unint64_t result = "kDYFEMTLComputePipelineState_allocatedSize";
          break;
        case 50:
          unint64_t result = "kDYFEMTLAccelerationStructure_restoreMTLAccelerationStructure_instance";
          break;
        case 51:
          unint64_t result = "kDYFEMTLDynamicLibrary_installName";
          break;
        case 52:
          unint64_t result = "kDYFEMTLLibrary_libraryIdentifier";
          break;
        case 53:
          unint64_t result = "kDYFEMTLBuffer_heapOffset";
          break;
        case 54:
          unint64_t result = "kDYFEMTLBuffer_parentGPUAddress_parentGPUSize";
          break;
        case 55:
          unint64_t result = "kDYFEMTLTexture_heapOffset";
          break;
        case 56:
          unint64_t result = "kDYFEMTLRenderPipelineState_imageblockSampleLength";
          break;
        case 57:
          unint64_t result = "kDYFEMTLLibrary_type";
          break;
        case 58:
          unint64_t result = "kDYFEMTLAccelerationStructure_allocationInfo";
          break;
        case 59:
          unint64_t result = "kDYFEMTLAccelerationStructure_uniqueIdentifier";
          break;
        case 60:
          unint64_t result = "kDYFEMTLIntersectionFunctionTable_timeSinceTouched";
          break;
        case 61:
          unint64_t result = "kDYFEMTLIntersectionFunctionTable_allocatedSize";
          break;
        case 62:
          unint64_t result = "kDYFEMTLVisibleFunctionTable_timeSinceTouched";
          break;
        case 63:
          unint64_t result = "kDYFEMTLVisibleFunctionTable_allocationID";
          break;
        case 64:
          unint64_t result = "kDYFEMTLIntersectionFunctionTable_allocationID";
          break;
        case 65:
          unint64_t result = "kDYFEMTLIntersectionFunctionTable_uniqueIdentifier";
          break;
        case 66:
          unint64_t result = "kDYFEMTLVisibleFunctionTable_allocatedSize";
          break;
        case 67:
          unint64_t result = "kDYFEMTLAccelerationStructure_timeSinceTouched";
          break;
        case 68:
          unint64_t result = "kDYFEMTLRenderPipelineState_timeSinceTouched";
          break;
        case 69:
          unint64_t result = "kDYFEMTLComputePipelineState_timeSinceTouched";
          break;
        case 70:
          unint64_t result = "kDYFEMTLAccelerationStructure_resourceIndex";
          break;
        case 71:
          unint64_t result = "kDYFEMTLAccelerationStructure_heapOffset";
          break;
        case 72:
          return result;
        case 73:
          unint64_t result = "kDYFEMTLAccelerationStructure_gpuResourceID";
          break;
        case 74:
          unint64_t result = "kDYFEMTLIndirectCommandBuffer_gpuResourceID";
          break;
        case 75:
          unint64_t result = "kDYFEMTLRenderPipelineState_gpuResourceID";
          break;
        case 76:
          unint64_t result = "kDYFEMTLTexture_gpuResourceID";
          break;
        case 77:
          unint64_t result = "kDYFEMTLSamplerState_gpuResourceID";
          break;
        case 78:
          unint64_t result = "kDYFEMTLComputePipelineState_gpuResourceID";
          break;
        case 79:
          unint64_t result = "kDYFEMTLIntersectionFunctionTable_gpuResourceID";
          break;
        case 80:
          unint64_t result = "kDYFEMTLVisibleFunctionTable_gpuResourceID";
          break;
        case 81:
          unint64_t result = "kDYFEMTLAccelerationStructure_state";
          break;
        case 82:
          unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_setAccelerationStructureState";
          break;
        case 83:
          unint64_t result = "kDYFEMTLFunction_setDescriptor_library";
          break;
        case 84:
          unint64_t result = "kDYFEMTLAccelerationStructure_children";
          break;
        case 85:
          unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_setAccelerationStructureChildren";
          break;
        case 86:
          unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_setAccelerationStructureDescriptor";
          break;
        case 87:
          unint64_t result = "kDYFEMTLVisibleFunctionTable_gpuAddress";
          break;
        case 88:
          unint64_t result = "kDYFEMTLIntersectionFunctionTable_setBuffers";
          break;
        case 89:
          unint64_t result = "kDYFEMTLCaptureManager_sharedCaptureManager";
          break;
        default:
          if ("kDYFEBoundary_Frame" == -12544)
          {
            unint64_t result = "kDYFEMTLCommandQueue_continueCommandBuffer_retainReferences";
          }
          else
          {
            if ("kDYFEBoundary_Frame" != -12543) {
              goto LABEL_1384;
            }
            unint64_t result = "kDYFEMTLIOCommandQueue_continueCommandBuffer_retainReferences";
          }
          break;
      }
    }
  }
  else if ((int)this <= -18431)
  {
    switch(this)
    {
      case 0xFFFFB000:
        unint64_t result = "kDYFEMTLFXSpatialScaler_setColorTexture";
        break;
      case 0xFFFFB001:
        unint64_t result = "kDYFEMTLFXSpatialScaler_setFence";
        break;
      case 0xFFFFB002:
        unint64_t result = "kDYFEMTLFXSpatialScaler_setInputContentHeight";
        break;
      case 0xFFFFB003:
        unint64_t result = "kDYFEMTLFXSpatialScaler_setInputContentWidth";
        break;
      case 0xFFFFB004:
        unint64_t result = "kDYFEMTLFXSpatialScaler_setOutputTexture";
        break;
      case 0xFFFFB005:
        unint64_t result = "kDYFEMTLFXSpatialScaler_dealloc";
        break;
      case 0xFFFFB006:
        unint64_t result = "kDYFEMTLFXSpatialScaler_encodeToCommandBuffer";
        break;
      case 0xFFFFB007:
        unint64_t result = "kDYFEMTLFXTemporalScaler_setColorTexture";
        break;
      case 0xFFFFB008:
        unint64_t result = "kDYFEMTLFXTemporalScaler_setDepthReversed";
        break;
      case 0xFFFFB009:
        unint64_t result = "kDYFEMTLFXTemporalScaler_setDepthTexture";
        break;
      case 0xFFFFB00A:
        unint64_t result = "kDYFEMTLFXTemporalScaler_setExposureTexture";
        break;
      case 0xFFFFB00B:
        unint64_t result = "kDYFEMTLFXTemporalScaler_setFence";
        break;
      case 0xFFFFB00C:
        unint64_t result = "kDYFEMTLFXTemporalScaler_setInputContentHeight";
        break;
      case 0xFFFFB00D:
        unint64_t result = "kDYFEMTLFXTemporalScaler_setInputContentWidth";
        break;
      case 0xFFFFB00E:
        unint64_t result = "kDYFEMTLFXTemporalScaler_setJitterOffsetX";
        break;
      case 0xFFFFB00F:
        unint64_t result = "kDYFEMTLFXTemporalScaler_setJitterOffsetY";
        break;
      case 0xFFFFB010:
        unint64_t result = "kDYFEMTLFXTemporalScaler_setMotionTexture";
        break;
      case 0xFFFFB011:
        unint64_t result = "kDYFEMTLFXTemporalScaler_setMotionVectorScaleX";
        break;
      case 0xFFFFB012:
        unint64_t result = "kDYFEMTLFXTemporalScaler_setMotionVectorScaleY";
        break;
      case 0xFFFFB013:
        unint64_t result = "kDYFEMTLFXTemporalScaler_setOutputTexture";
        break;
      case 0xFFFFB014:
        unint64_t result = "kDYFEMTLFXTemporalScaler_setPreExposure";
        break;
      case 0xFFFFB015:
        unint64_t result = "kDYFEMTLFXTemporalScaler_setReset";
        break;
      case 0xFFFFB016:
        unint64_t result = "kDYFEMTLFXTemporalScaler_dealloc";
        break;
      case 0xFFFFB017:
        unint64_t result = "kDYFEMTLFXTemporalScaler_encodeToCommandBuffer";
        break;
      case 0xFFFFB018:
        unint64_t result = "kDYFEMTLFXTemporalScaler_setReactiveMaskTexture";
        break;
      default:
        if (this == -18432)
        {
          unint64_t result = "kDYFEMTLDevice_newSpatialScalerWithDescriptor";
        }
        else
        {
          if (this != -18431) {
            goto LABEL_1384;
          }
          unint64_t result = "kDYFEMTLDevice_newTemporalScalerWithDescriptor";
        }
        break;
    }
  }
  else
  {
    switch(this)
    {
      case 0xFFFFC000:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_setLabel";
        break;
      case 0xFFFFC001:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_dealloc";
        break;
      case 0xFFFFC002:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_de"
                 "stinationSlice_destinationLevel_destinationOrigin";
        break;
      case 0xFFFFC003:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize"
                 "_toTexture_destinationSlice_destinationLevel_destinationOrigin";
        break;
      case 0xFFFFC004:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_des"
                 "tinationOffset_destinationBytesPerRow_destinationBytesPerImage";
        break;
      case 0xFFFFC005:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_generateMipmapsForTexture";
        break;
      case 0xFFFFC006:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_fillBuffer_range_value";
        break;
      case 0xFFFFC007:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size";
        break;
      case 0xFFFFC008:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_endEncoding";
        break;
      case 0xFFFFC009:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_insertDebugSignpost";
        break;
      case 0xFFFFC00A:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_pushDebugGroup";
        break;
      case 0xFFFFC00B:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_popDebugGroup";
        break;
      case 0xFFFFC00C:
        unint64_t result = "kDYFEMTLBuffer_setLabel";
        break;
      case 0xFFFFC00D:
        unint64_t result = "kDYFEMTLBuffer_setResponsibleProcess";
        break;
      case 0xFFFFC00E:
        unint64_t result = "kDYFEMTLBuffer_dealloc";
        break;
      case 0xFFFFC00F:
        unint64_t result = "kDYFEMTLBuffer_contents";
        break;
      case 0xFFFFC010:
        unint64_t result = "kDYFEMTLBuffer_newTextureWithDescriptor_offset_bytesPerRow";
        break;
      case 0xFFFFC011:
        unint64_t result = "kDYFEMTLBuffer_setPurgeableState";
        break;
      case 0xFFFFC012:
        unint64_t result = "kDYFEMTLBuffer_isPurgeable";
        break;
      case 0xFFFFC013:
        unint64_t result = "kDYFEMTLCommandBuffer_setLabel";
        break;
      case 0xFFFFC014:
        unint64_t result = "kDYFEMTLCommandBuffer_setProfilingEnabled";
        break;
      case 0xFFFFC015:
        unint64_t result = "kDYFEMTLCommandBuffer_dealloc";
        break;
      case 0xFFFFC016:
        unint64_t result = "kDYFEMTLCommandBuffer_enqueue";
        break;
      case 0xFFFFC017:
        unint64_t result = "kDYFEMTLCommandBuffer_commit";
        break;
      case 0xFFFFC018:
        unint64_t result = "kDYFEMTLCommandBuffer_addScheduledHandler";
        break;
      case 0xFFFFC019:
        unint64_t result = "kDYFEMTLCommandBuffer_presentDrawable";
        break;
      case 0xFFFFC01A:
        unint64_t result = "kDYFEMTLCommandBuffer_presentDrawable_atTime";
        break;
      case 0xFFFFC01B:
        unint64_t result = "kDYFEMTLCommandBuffer_waitUntilScheduled";
        break;
      case 0xFFFFC01C:
        unint64_t result = "kDYFEMTLCommandBuffer_addCompletedHandler";
        break;
      case 0xFFFFC01D:
        unint64_t result = "kDYFEMTLCommandBuffer_waitUntilCompleted";
        break;
      case 0xFFFFC01E:
        unint64_t result = "kDYFEMTLCommandBuffer_blitCommandEncoder";
        break;
      case 0xFFFFC01F:
        unint64_t result = "kDYFEMTLCommandBuffer_renderCommandEncoderWithDescriptor";
        break;
      case 0xFFFFC020:
        unint64_t result = "kDYFEMTLCommandBuffer_computeCommandEncoder";
        break;
      case 0xFFFFC021:
        unint64_t result = "kDYFEMTLCommandBuffer_parallelRenderCommandEncoderWithDescriptor";
        break;
      case 0xFFFFC022:
        unint64_t result = "kDYFEMTLCommandBuffer_debugCommandEncoder";
        break;
      case 0xFFFFC023:
        unint64_t result = "kDYFEMTLCommandQueue_setLabel";
        break;
      case 0xFFFFC024:
        unint64_t result = "kDYFEMTLCommandQueue_setBackgroundTrackingPID";
        break;
      case 0xFFFFC025:
        unint64_t result = "kDYFEMTLCommandQueue_setSkipRender";
        break;
      case 0xFFFFC026:
        unint64_t result = "kDYFEMTLCommandQueue_setExecutionEnabled";
        break;
      case 0xFFFFC027:
        unint64_t result = "kDYFEMTLCommandQueue_setProfilingEnabled";
        break;
      case 0xFFFFC028:
        unint64_t result = "kDYFEMTLCommandQueue_dealloc";
        break;
      case 0xFFFFC029:
        unint64_t result = "kDYFEMTLCommandQueue_commandBuffer";
        break;
      case 0xFFFFC02A:
        unint64_t result = "kDYFEMTLCommandQueue_commandBufferWithUnretainedReferences";
        break;
      case 0xFFFFC02B:
        unint64_t result = "kDYFEMTLCommandQueue_insertDebugCaptureBoundary";
        break;
      case 0xFFFFC02C:
        unint64_t result = "kDYFEMTLCommandQueue_finish";
        break;
      case 0xFFFFC02D:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setLabel";
        break;
      case 0xFFFFC02E:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_dealloc";
        break;
      case 0xFFFFC02F:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setComputePipelineState";
        break;
      case 0xFFFFC030:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setBuffer_offset_atIndex";
        break;
      case 0xFFFFC031:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setBuffers_offsets_withRange";
        break;
      case 0xFFFFC032:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setTexture_atIndex";
        break;
      case 0xFFFFC033:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setTextures_withRange";
        break;
      case 0xFFFFC034:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setSamplerState_atIndex";
        break;
      case 0xFFFFC035:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setSamplerStates_withRange";
        break;
      case 0xFFFFC036:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 0xFFFFC037:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 0xFFFFC038:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setThreadgroupMemoryLength_atIndex";
        break;
      case 0xFFFFC039:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_dispatchThreadgroups_threadsPerThreadgroup";
        break;
      case 0xFFFFC03A:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_executeBarrier";
        break;
      case 0xFFFFC03B:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_endEncoding";
        break;
      case 0xFFFFC03C:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_insertDebugSignpost";
        break;
      case 0xFFFFC03D:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_pushDebugGroup";
        break;
      case 0xFFFFC03E:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_popDebugGroup";
        break;
      case 0xFFFFC03F:
        unint64_t result = "kDYFEMTLComputePipelineState_dealloc";
        break;
      case 0xFFFFC040:
        unint64_t result = "kDYFEMTLDepthStencilState_dealloc";
        break;
      case 0xFFFFC041:
        unint64_t result = "kDYFEMTLDevice_setShaderDebugInfoCaching";
        break;
      case 0xFFFFC042:
        unint64_t result = "kDYFEMTLDevice_setMetalAssertionsEnabled";
        break;
      case 0xFFFFC043:
        unint64_t result = "kDYFEMTLDevice_dealloc";
        break;
      case 0xFFFFC044:
        unint64_t result = "kDYFEMTLDevice_newCommandQueue";
        break;
      case 0xFFFFC045:
        unint64_t result = "kDYFEMTLDevice_newCommandQueueWithMaxCommandBufferCount";
        break;
      case 0xFFFFC046:
        unint64_t result = "kDYFEMTLDevice_newBufferWithLength_options";
        break;
      case 0xFFFFC047:
        unint64_t result = "kDYFEMTLDevice_newBufferWithBytes_length_options";
        break;
      case 0xFFFFC048:
        unint64_t result = "kDYFEMTLDevice_newBufferWithBytesNoCopy_length_options_deallocator";
        break;
      case 0xFFFFC049:
        unint64_t result = "kDYFEMTLDevice_newDepthStencilStateWithDescriptor";
        break;
      case 0xFFFFC04A:
        unint64_t result = "kDYFEMTLDevice_newTextureWithDescriptor";
        break;
      case 0xFFFFC04B:
        unint64_t result = "kDYFEMTLDevice_newSamplerStateWithDescriptor";
        break;
      case 0xFFFFC04C:
        unint64_t result = "kDYFEMTLDevice_newDefaultLibrary";
        break;
      case 0xFFFFC04D:
        unint64_t result = "kDYFEMTLDevice_newLibraryWithFile_error";
        break;
      case 0xFFFFC04E:
        unint64_t result = "kDYFEMTLDevice_newLibraryWithData_error";
        break;
      case 0xFFFFC04F:
        unint64_t result = "kDYFEMTLDevice_newLibraryWithSource_options_error";
        break;
      case 0xFFFFC050:
        unint64_t result = "kDYFEMTLDevice_newLibraryWithSource_options_completionHandler";
        break;
      case 0xFFFFC051:
        unint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithDescriptor_error";
        break;
      case 0xFFFFC052:
        unint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithDescriptor_options_reflection_error";
        break;
      case 0xFFFFC053:
        unint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithDescriptor_completionHandler";
        break;
      case 0xFFFFC054:
        unint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithDescriptor_options_completionHandler";
        break;
      case 0xFFFFC055:
        unint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithFunction_error";
        break;
      case 0xFFFFC056:
        unint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithFunction_options_reflection_error";
        break;
      case 0xFFFFC057:
        unint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithFunction_completionHandler";
        break;
      case 0xFFFFC058:
        unint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithFunction_options_completionHandler";
        break;
      case 0xFFFFC059:
        unint64_t result = "kDYFEMTLDevice_unmapShaderSampleBuffer";
        break;
      case 0xFFFFC05A:
        unint64_t result = "kDYFEMTLDevice_newTextureWithDescriptor_iosurface_plane";
        break;
      case 0xFFFFC05B:
        unint64_t result = "kDYFEMTLFunction_dealloc";
        break;
      case 0xFFFFC05C:
        unint64_t result = "kDYFEMTLLibrary_setLabel";
        break;
      case 0xFFFFC05D:
        unint64_t result = "kDYFEMTLLibrary_dealloc";
        break;
      case 0xFFFFC05E:
        unint64_t result = "kDYFEMTLLibrary_newFunctionWithName";
        break;
      case 0xFFFFC05F:
        unint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setSeparateCommits";
        break;
      case 0xFFFFC060:
        unint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setLabel";
        break;
      case 0xFFFFC061:
        unint64_t result = "kDYFEMTLParallelRenderCommandEncoder_dealloc";
        break;
      case 0xFFFFC062:
        unint64_t result = "kDYFEMTLParallelRenderCommandEncoder_renderCommandEncoder";
        break;
      case 0xFFFFC063:
        unint64_t result = "kDYFEMTLParallelRenderCommandEncoder_endEncoding";
        break;
      case 0xFFFFC064:
        unint64_t result = "kDYFEMTLParallelRenderCommandEncoder_insertDebugSignpost";
        break;
      case 0xFFFFC065:
        unint64_t result = "kDYFEMTLParallelRenderCommandEncoder_pushDebugGroup";
        break;
      case 0xFFFFC066:
        unint64_t result = "kDYFEMTLParallelRenderCommandEncoder_popDebugGroup";
        break;
      case 0xFFFFC067:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setLabel";
        break;
      case 0xFFFFC068:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_dealloc";
        break;
      case 0xFFFFC069:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setRenderPipelineState";
        break;
      case 0xFFFFC06A:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBuffer_offset_atIndex";
        break;
      case 0xFFFFC06B:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBuffers_offsets_withRange";
        break;
      case 0xFFFFC06C:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexTexture_atIndex";
        break;
      case 0xFFFFC06D:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexTextures_withRange";
        break;
      case 0xFFFFC06E:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexSamplerState_atIndex";
        break;
      case 0xFFFFC06F:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexSamplerStates_withRange";
        break;
      case 0xFFFFC070:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 0xFFFFC071:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 0xFFFFC072:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setViewport";
        break;
      case 0xFFFFC073:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setFrontFacingWinding";
        break;
      case 0xFFFFC074:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setCullMode";
        break;
      case 0xFFFFC075:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthClipMode";
        break;
      case 0xFFFFC076:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthBias_slopeScale_clamp";
        break;
      case 0xFFFFC077:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setScissorRect";
        break;
      case 0xFFFFC078:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setTriangleFillMode";
        break;
      case 0xFFFFC079:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentBuffer_offset_atIndex";
        break;
      case 0xFFFFC07A:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentBuffers_offsets_withRange";
        break;
      case 0xFFFFC07B:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentTexture_atIndex";
        break;
      case 0xFFFFC07C:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentTextures_withRange";
        break;
      case 0xFFFFC07D:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentSamplerState_atIndex";
        break;
      case 0xFFFFC07E:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentSamplerStates_withRange";
        break;
      case 0xFFFFC07F:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 0xFFFFC080:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 0xFFFFC081:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setBlendColorRed_green_blue_alpha";
        break;
      case 0xFFFFC082:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthStencilState";
        break;
      case 0xFFFFC083:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setStencilReferenceValue";
        break;
      case 0xFFFFC084:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVisibilityResultMode_offset";
        break;
      case 0xFFFFC085:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_drawPrimitives_vertexStart_vertexCount_instanceCount";
        break;
      case 0xFFFFC086:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_drawPrimitives_vertexStart_vertexCount";
        break;
      case 0xFFFFC087:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount";
        break;
      case 0xFFFFC088:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset";
        break;
      case 0xFFFFC089:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setLineWidth";
        break;
      case 0xFFFFC08A:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_endEncoding";
        break;
      case 0xFFFFC08B:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_insertDebugSignpost";
        break;
      case 0xFFFFC08C:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_pushDebugGroup";
        break;
      case 0xFFFFC08D:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_popDebugGroup";
        break;
      case 0xFFFFC08E:
        unint64_t result = "kDYFEMTLRenderPipelineState_dealloc";
        break;
      case 0xFFFFC08F:
        unint64_t result = "kDYFEMTLSamplerState_dealloc";
        break;
      case 0xFFFFC090:
        unint64_t result = "kDYFEMTLTexture_setLabel";
        break;
      case 0xFFFFC091:
        unint64_t result = "kDYFEMTLTexture_setResponsibleProcess";
        break;
      case 0xFFFFC092:
        unint64_t result = "kDYFEMTLTexture_dealloc";
        break;
      case 0xFFFFC093:
        unint64_t result = "kDYFEMTLTexture_getBytes_bytesPerRow_bytesPerImage_fromRegion_mipmapLevel_slice";
        break;
      case 0xFFFFC094:
        unint64_t result = "kDYFEMTLTexture_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage";
        break;
      case 0xFFFFC095:
        unint64_t result = "kDYFEMTLTexture_getBytes_bytesPerRow_fromRegion_mipmapLevel";
        break;
      case 0xFFFFC096:
        unint64_t result = "kDYFEMTLTexture_replaceRegion_mipmapLevel_withBytes_bytesPerRow";
        break;
      case 0xFFFFC097:
        unint64_t result = "kDYFEMTLTexture_newTextureViewWithPixelFormat";
        break;
      case 0xFFFFC098:
        unint64_t result = "kDYFEMTLTexture_setPurgeableState";
        break;
      case 0xFFFFC099:
        unint64_t result = "kDYFEMTLTexture_isPurgeable";
        break;
      case 0xFFFFC09A:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_flushResource";
        break;
      case 0xFFFFC09B:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_flushTexture_slice_mipmapLevel";
        break;
      case 0xFFFFC09C:
        unint64_t result = "kDYFEMTLBuffer_invalidateRange";
        break;
      case 0xFFFFC09D:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setBytes_length_atIndex";
        break;
      case 0xFFFFC09E:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setBufferOffset_atIndex";
        break;
      case 0xFFFFC09F:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBytes_length_atIndex";
        break;
      case 0xFFFFC0A0:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBufferOffset_atIndex";
        break;
      case 0xFFFFC0A1:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentBytes_length_atIndex";
        break;
      case 0xFFFFC0A2:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentBufferOffset_atIndex";
        break;
      case 0xFFFFC0A3:
        unint64_t result = "kDYFEMTLTexture_invalidateRegion";
        break;
      case 0xFFFFC0A4:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_dispatchThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerThreadgroup";
        break;
      case 0xFFFFC0A5:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setStencilFrontReferenceValue_backReferenceValue";
        break;
      case 0xFFFFC0A6:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance";
        break;
      case 0xFFFFC0A7:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_i"
                 "nstanceCount_baseVertex_baseInstance";
        break;
      case 0xFFFFC0A8:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_drawPrimitives_indirectBuffer_indirectBufferOffset";
        break;
      case 0xFFFFC0A9:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_drawIndexedPrimitives_indexType_indexBuffer_indexBufferOffset_indirectBuff"
                 "er_indirectBufferOffset";
        break;
      case 0xFFFFC0AA:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentTexture_atTextureIndex_samplerState_atSamplerIndex";
        break;
      case 0xFFFFC0AB:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_synchronizeResource";
        break;
      case 0xFFFFC0AC:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_synchronizeTexture_slice_level";
        break;
      case 0xFFFFC0AD:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_de"
                 "stinationSlice_destinationLevel_destinationOrigin_options";
        break;
      case 0xFFFFC0AE:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize"
                 "_toTexture_destinationSlice_destinationLevel_destinationOrigin_options";
        break;
      case 0xFFFFC0AF:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_des"
                 "tinationOffset_destinationBytesPerRow_destinationBytesPerImage_options";
        break;
      case 0xFFFFC0B0:
        unint64_t result = "kDYFEMTLBuffer_didModifyRange";
        break;
      case 0xFFFFC0B1:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setTexture_baseLevel_atIndex";
        break;
      case 0xFFFFC0B2:
        unint64_t result = "kDYFEMTLDevice_supportsFeatureSet";
        break;
      case 0xFFFFC0B3:
        unint64_t result = "kDYFEMTLDevice_supportsSampleCount";
        break;
      case 0xFFFFC0B4:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexTexture_baseLevel_atIndex";
        break;
      case 0xFFFFC0B5:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentTexture_baseLevel_atIndex";
        break;
      case 0xFFFFC0B6:
        unint64_t result = "kDYFEMTLCommandBuffer_commitAndHold";
        break;
      case 0xFFFFC0B7:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_textureBarrier";
        break;
      case 0xFFFFC0B8:
        unint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithDescriptor_error";
        break;
      case 0xFFFFC0B9:
        unint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithDescriptor_options_reflection_error";
        break;
      case 0xFFFFC0BA:
        unint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithDescriptor_completionHandler";
        break;
      case 0xFFFFC0BB:
        unint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithDescriptor_options_completionHandler";
        break;
      case 0xFFFFC0BC:
        unint64_t result = "kDYFEMTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices";
        break;
      case 0xFFFFC0BD:
        unint64_t result = "kDYFEMTLCommandBuffer_fragmentRenderCommandEncoderWithDescriptor";
        break;
      case 0xFFFFC0BE:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setLabel";
        break;
      case 0xFFFFC0BF:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_dealloc";
        break;
      case 0xFFFFC0C0:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setRenderPipelineState";
        break;
      case 0xFFFFC0C1:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setDepthBias_slopeScale_clamp";
        break;
      case 0xFFFFC0C2:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setScissorRect";
        break;
      case 0xFFFFC0C3:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentBytes_length_atIndex";
        break;
      case 0xFFFFC0C4:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentBuffer_offset_atIndex";
        break;
      case 0xFFFFC0C5:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentBufferOffset_atIndex";
        break;
      case 0xFFFFC0C6:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentBuffers_offsets_withRange";
        break;
      case 0xFFFFC0C7:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentTexture_atIndex";
        break;
      case 0xFFFFC0C8:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentTextures_withRange";
        break;
      case 0xFFFFC0C9:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentTexture_baseLevel_atIndex";
        break;
      case 0xFFFFC0CA:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentTexture_atTextureIndex_samplerState_atSamplerIndex";
        break;
      case 0xFFFFC0CB:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentSamplerState_atIndex";
        break;
      case 0xFFFFC0CC:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentSamplerStates_withRange";
        break;
      case 0xFFFFC0CD:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 0xFFFFC0CE:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 0xFFFFC0CF:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setBlendColorRed_green_blue_alpha";
        break;
      case 0xFFFFC0D0:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setDepthStencilState";
        break;
      case 0xFFFFC0D1:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setStencilReferenceValue";
        break;
      case 0xFFFFC0D2:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setStencilFrontReferenceValue_backReferenceValue";
        break;
      case 0xFFFFC0D3:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_drawTrianglesWithPositions_vertexCount_triangleIndices_triangleCount";
        break;
      case 0xFFFFC0D4:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_drawTrianglesWithPositions_vertexCount_vertexVaryings_varyingCount"
                 "PerVertex_triangleIndices_triangleCount";
        break;
      case 0xFFFFC0D5:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_drawTrianglesWithPositions_vertexCount_vertexVaryings_varyingCountPerVertex";
        break;
      case 0xFFFFC0D6:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_endEncoding";
        break;
      case 0xFFFFC0D7:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_insertDebugSignpost";
        break;
      case 0xFFFFC0D8:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_pushDebugGroup";
        break;
      case 0xFFFFC0D9:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_popDebugGroup";
        break;
      case 0xFFFFC0DA:
        unint64_t result = "kDYFEMTLDevice_supportsTextureSampleCount";
        break;
      case 0xFFFFC0DB:
        unint64_t result = "kDYFEMTLDevice_newCommandQueueWithDescriptor";
        break;
      case 0xFFFFC0DC:
        unint64_t result = "kDYFEMTLCommandBuffer_setListIndex";
        break;
      case 0xFFFFC0DD:
        unint64_t result = "kDYFEMTLDevice_newBufferWithIOSurface";
        break;
      case 0xFFFFC0DE:
        unint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setColorStoreAction_atIndex";
        break;
      case 0xFFFFC0DF:
        unint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setDepthStoreAction";
        break;
      case 0xFFFFC0E0:
        unint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setStencilStoreAction";
        break;
      case 0xFFFFC0E1:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setColorStoreAction_atIndex";
        break;
      case 0xFFFFC0E2:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthStoreAction";
        break;
      case 0xFFFFC0E3:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setStencilStoreAction";
        break;
      case 0xFFFFC0E4:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setColorResolveTexture_slice_depthPlane_level_atIndex";
        break;
      case 0xFFFFC0E5:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthResolveTexture_slice_depthPlane_level";
        break;
      case 0xFFFFC0E6:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setColorStoreAction_atIndex";
        break;
      case 0xFFFFC0E7:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setDepthStoreAction";
        break;
      case 0xFFFFC0E8:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setStencilStoreAction";
        break;
      case 0xFFFFC0E9:
        unint64_t result = "kDYFEMTLCommandBuffer_computeCommandEncoderWithParallelExecution";
        break;
      case 0xFFFFC0EA:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_dispatchBarrier";
        break;
      case 0xFFFFC0EB:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setImageblockWidth_height";
        break;
      case 0xFFFFC0EC:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setTessellationFactorBuffer_offset_instanceStride";
        break;
      case 0xFFFFC0ED:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_"
                 "instanceCount_baseInstance";
        break;
      case 0xFFFFC0EE:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_drawPatches_patchIndexBuffer_patchIndexBufferOffset_indirectBuffer_indirectBufferOffset";
        break;
      case 0xFFFFC0EF:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBuffer"
                 "Offset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance";
        break;
      case 0xFFFFC0F0:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_drawIndexedPatches_patchIndexBuffer_patchIndexBufferOffset_controlPointInd"
                 "exBuffer_controlPointIndexBufferOffset_indirectBuffer_indirectBufferOffset";
        break;
      case 0xFFFFC0F1:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setTileBytes_length_atIndex";
        break;
      case 0xFFFFC0F2:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setTileBuffer_offset_atIndex";
        break;
      case 0xFFFFC0F3:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setTileBufferOffset_atIndex";
        break;
      case 0xFFFFC0F4:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setTileTexture_atIndex";
        break;
      case 0xFFFFC0F5:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setTileSamplerState_atIndex";
        break;
      case 0xFFFFC0F6:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setTileSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 0xFFFFC0F7:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_dispatchThreadsPerTile";
        break;
      case 0xFFFFC0F8:
        unint64_t result = "kDYFEMTLFence_setLabel";
        break;
      case 0xFFFFC0F9:
        unint64_t result = "kDYFEMTLFunction_functionConstantIndexByName_type";
        break;
      case 0xFFFFC0FA:
        unint64_t result = "kDYFEMTLCommandQueue_setIsOpenGLQueue";
        break;
      case 0xFFFFC0FB:
        unint64_t result = "kDYFEMTLCommandBuffer_presentDrawable_afterMinimumDuration";
        break;
      case 0xFFFFC0FC:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setTessellationFactorScale";
        break;
      case 0xFFFFC0FD:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_waitForFence";
        break;
      case 0xFFFFC0FE:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_updateFence";
        break;
      case 0xFFFFC0FF:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_waitForFence";
        break;
      case 0xFFFFC100:
        unint64_t result = "kDYFEMTLDevice_newFence";
        break;
      case 0xFFFFC101:
        unint64_t result = "kDYFEMTLFence_dealloc";
        break;
      case 0xFFFFC102:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_updateFence_afterStages";
        break;
      case 0xFFFFC103:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_waitForFence_beforeStages";
        break;
      case 0xFFFFC104:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_updateFence";
        break;
      case 0xFFFFC105:
        unint64_t result = "kDYFEMTLFunction_setLabel";
        break;
      case 0xFFFFC106:
        unint64_t result = "kDYFEMTLBuffer_makeAliasable";
        break;
      case 0xFFFFC107:
        unint64_t result = "kDYFEMTLDevice_heapTextureSizeWithDescriptor";
        break;
      case 0xFFFFC108:
        unint64_t result = "kDYFEMTLDevice_newHeapWithDescriptor";
        break;
      case 0xFFFFC109:
        unint64_t result = "kDYFEMTLHeap_setLabel";
        break;
      case 0xFFFFC10A:
        unint64_t result = "kDYFEMTLHeap_dealloc";
        break;
      case 0xFFFFC10B:
        unint64_t result = "kDYFEMTLHeap_newBufferWithLength_options";
        break;
      case 0xFFFFC10C:
        unint64_t result = "kDYFEMTLHeap_newTextureWithDescriptor";
        break;
      case 0xFFFFC10D:
        unint64_t result = "kDYFEMTLHeap_setPurgeableState";
        break;
      case 0xFFFFC10E:
        unint64_t result = "kDYFEMTLTexture_makeAliasable";
        break;
      case 0xFFFFC10F:
        unint64_t result = "kDYFEMTLBuffer_isAliasable";
        break;
      case 0xFFFFC110:
        unint64_t result = "kDYFEMTLDevice_heapTextureSizeAndAlignWithDescriptor";
        break;
      case 0xFFFFC111:
        unint64_t result = "kDYFEMTLDevice_heapBufferSizeAndAlignWithLength_options";
        break;
      case 0xFFFFC112:
        unint64_t result = "kDYFEMTLHeap_setResponsibleProcess";
        break;
      case 0xFFFFC113:
        unint64_t result = "kDYFEMTLHeap_isPurgeable";
        break;
      case 0xFFFFC114:
        unint64_t result = "kDYFEMTLTexture_isAliasable";
        break;
      case 0xFFFFC115:
        unint64_t result = "kDYFEMTLLibrary_newFunctionWithName_constantValues_error";
        break;
      case 0xFFFFC116:
        unint64_t result = "kDYFEMTLLibrary_newFunctionWithName_constantValues_completionHandler";
        break;
      case 0xFFFFC117:
        unint64_t result = "kDYFEMTLHeap_maxAvailableSizeWithAlignment";
        break;
      case 0xFFFFC118:
        unint64_t result = "kDYFEMTLBuffer_newTiledTextureWithDescriptor_offset_bytesPerRow";
        break;
      case 0xFFFFC119:
        unint64_t result = "kDYFEMTLBuffer_addDebugMarker_range";
        break;
      case 0xFFFFC11A:
        unint64_t result = "kDYFEMTLBuffer_removeAllDebugMarkers";
        break;
      case 0xFFFFC11B:
        unint64_t result = "kDYFEMTLDevice_newComputePipelineStateWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error";
        break;
      case 0xFFFFC11C:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setStageInRegion";
        break;
      case 0xFFFFC11D:
        unint64_t result = "kDYFEMTLDevice_newTextureLayoutWithDescriptor_isHeapOrBufferBacked";
        break;
      case 0xFFFFC11E:
        unint64_t result = "kDYFEMTLBuffer_newLinearTextureWithDescriptor_offset_bytesPerRow_bytesPerImage";
        break;
      case 0xFFFFC11F:
        unint64_t result = "kDYFEMTLTextureLayout_dealloc";
        break;
      case 0xFFFFC120:
        unint64_t result = "kDYFEMTLDevice_newTextureWithBytesNoCopy_length_descriptor_deallocator";
        break;
      case 0xFFFFC121:
        unint64_t result = "kDYFEMTLDevice_newDefaultLibraryWithBundle_error";
        break;
      case 0xFFFFC122:
        unint64_t result = "kDYFEMTLTexture_formattedDescription";
        break;
      case 0xFFFFC123:
        unint64_t result = "kDYFEMTLDevice_minLinearTextureAlignmentForPixelFormat";
        break;
      case 0xFFFFC124:
        unint64_t result = "kDYFEMTLComputePipelineState_getComputeKernelTelemetryID";
        break;
      case 0xFFFFC125:
        unint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithTileDescriptor_error";
        break;
      case 0xFFFFC126:
        unint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithTileDescriptor_options_reflection_error";
        break;
      case 0xFFFFC127:
        unint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithTileDescriptor_completionHandler";
        break;
      case 0xFFFFC128:
        unint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithTileDescriptor_options_completionHandler";
        break;
      case 0xFFFFC129:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setTileBuffers_offsets_withRange";
        break;
      case 0xFFFFC12A:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setTileTextures_withRange";
        break;
      case 0xFFFFC12B:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setTileSamplerStates_withRange";
        break;
      case 0xFFFFC12C:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setTileSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 0xFFFFC12D:
        unint64_t result = "kDYFEMTLLibrary_setOverrideTriple";
        break;
      case 0xFFFFC12E:
        unint64_t result = "kDYFEMTLLibrary_newFunctionWithName_constantValues_pipelineLibrary_error";
        break;
      case 0xFFFFC12F:
        unint64_t result = "kDYFEMTLLibrary_newFunctionWithName_constantValues_pipelineLibrary_completionHandler";
        break;
      case 0xFFFFC130:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setThreadgroupMemoryLength_atIndex";
        break;
      case 0xFFFFC131:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_dispatchThreadsWithIndirectBuffer_indirectBufferOffset";
        break;
      case 0xFFFFC132:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_dispatchThreads_threadsPerThreadgroup";
        break;
      case 0xFFFFC133:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setViewports_count";
        break;
      case 0xFFFFC134:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setScissorRects_count";
        break;
      case 0xFFFFC135:
        unint64_t result = "kDYFEMTLDevice_newPipelineLibraryWithFilePath_error";
        break;
      case 0xFFFFC136:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setThreadgroupMemoryLength_offset_atIndex";
        break;
      case 0xFFFFC137:
        unint64_t result = "kDYFEMTLCaptureScope_setLabel";
        break;
      case 0xFFFFC138:
        unint64_t result = "kDYFEMTLCaptureScope_dealloc";
        break;
      case 0xFFFFC139:
        unint64_t result = "kDYFEMTLCaptureScope_beginScope";
        break;
      case 0xFFFFC13A:
        unint64_t result = "kDYFEMTLCaptureScope_endScope";
        break;
      case 0xFFFFC13B:
        unint64_t result = "kDYFEMTLCaptureManager_startCaptureWithDevice";
        break;
      case 0xFFFFC13C:
        unint64_t result = "kDYFEMTLCaptureManager_startCaptureWithCommandQueue";
        break;
      case 0xFFFFC13D:
        unint64_t result = "kDYFEMTLCaptureManager_stopCapture";
        break;
      case 0xFFFFC13E:
        unint64_t result = "kDYFEMTLDevice_startCollectingPipelineDescriptors";
        break;
      case 0xFFFFC13F:
        unint64_t result = "kDYFEMTLCommandBuffer_pushDebugGroup";
        break;
      case 0xFFFFC140:
        unint64_t result = "kDYFEMTLCommandBuffer_popDebugGroup";
        break;
      case 0xFFFFC141:
        unint64_t result = "kDYFEMTLArgumentEncoder_setLabel";
        break;
      case 0xFFFFC142:
        unint64_t result = "kDYFEMTLArgumentEncoder_dealloc";
        break;
      case 0xFFFFC143:
        unint64_t result = "kDYFEMTLArgumentEncoder_setArgumentBuffer_offset";
        break;
      case 0xFFFFC144:
        unint64_t result = "kDYFEMTLArgumentEncoder_setBuffer_offset_atIndex";
        break;
      case 0xFFFFC145:
        unint64_t result = "kDYFEMTLArgumentEncoder_setBuffers_offsets_withRange";
        break;
      case 0xFFFFC146:
        unint64_t result = "kDYFEMTLArgumentEncoder_setTexture_atIndex";
        break;
      case 0xFFFFC147:
        unint64_t result = "kDYFEMTLArgumentEncoder_setTextures_withRange";
        break;
      case 0xFFFFC148:
        unint64_t result = "kDYFEMTLArgumentEncoder_setSamplerState_atIndex";
        break;
      case 0xFFFFC149:
        unint64_t result = "kDYFEMTLArgumentEncoder_setSamplerStates_withRange";
        break;
      case 0xFFFFC14A:
        unint64_t result = "kDYFEMTLArgumentEncoder_constantDataAtIndex";
        break;
      case 0xFFFFC14B:
        unint64_t result = "kDYFEMTLArgumentEncoder_newArgumentEncoderForBufferAtIndex";
        break;
      case 0xFFFFC14C:
        unint64_t result = "kDYFEMTLFunction_newArgumentEncoderWithBufferIndex";
        break;
      case 0xFFFFC14D:
        unint64_t result = "kDYFEMTLFunction_newArgumentEncoderWithBufferIndex_reflection";
        break;
      case 0xFFFFC14E:
        unint64_t result = "kDYFEMTLDevice_newArgumentEncoderWithArguments_count";
        break;
      case 0xFFFFC14F:
        unint64_t result = "kDYFEMTLDevice_newArgumentBufferLayoutWithStructType";
        break;
      case 0xFFFFC150:
        unint64_t result = "kDYFEMTLDevice_newArgumentEncoderWithLayout";
        break;
      case 0xFFFFC151:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_useResource_usage";
        break;
      case 0xFFFFC152:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_useResources_count_usage";
        break;
      case 0xFFFFC153:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_useHeap";
        break;
      case 0xFFFFC154:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_useHeaps_count";
        break;
      case 0xFFFFC155:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_useResource_usage";
        break;
      case 0xFFFFC156:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_useResources_count_usage";
        break;
      case 0xFFFFC157:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_useHeap";
        break;
      case 0xFFFFC158:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_useHeaps_count";
        break;
      case 0xFFFFC159:
        unint64_t result = "kDYFEMTLDevice_newLibraryWithURL_error";
        break;
      case 0xFFFFC15A:
        unint64_t result = "kDYFEMTLLibrary_newExternFunctionWithName";
        break;
      case 0xFFFFC15B:
        unint64_t result = "kDYFEMTLDevice_newArgumentEncoderWithArguments";
        break;
      case 0xFFFFC15C:
        unint64_t result = "kDYFEMTLDevice_indirectArgumentBufferDecodingData";
        break;
      case 0xFFFFC15D:
        unint64_t result = "kDYFEMTLDevice_setIndirectArgumentBufferDecodingData";
        break;
      case 0xFFFFC15E:
        unint64_t result = "kDYFEMTLCaptureManager_notifySubmissionForEyeSPI_iosurface_bounds_submitFlags";
        break;
      case 0xFFFFC15F:
        unint64_t result = "kDYFEMTLArgumentEncoder_setArgumentBuffer_startOffset_arrayElement";
        break;
      case 0xFFFFC160:
        unint64_t result = "kDYFEMTLTextureLayout_initializeTextureMemory";
        break;
      case 0xFFFFC161:
        unint64_t result = "kDYFEMTLDevice_newTiledTextureWithBytesNoCopy_length_descriptor_offset_bytesPerRow";
        break;
      case 0xFFFFC162:
        unint64_t result = "kDYFEMTLDevice_newTiledTextureWithBytesNoCopy_length_deallocator_descriptor_offset_bytesPerRow";
        break;
      case 0xFFFFC163:
        unint64_t result = "kDYFEMTLDevice_newLibraryWithCIFilters_imageFilterFunctionInfo_error";
        break;
      case 0xFFFFC164:
        unint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setColorStoreActionOptions_atIndex";
        break;
      case 0xFFFFC165:
        unint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setDepthStoreActionOptions";
        break;
      case 0xFFFFC166:
        unint64_t result = "kDYFEMTLParallelRenderCommandEncoder_setStencilStoreActionOptions";
        break;
      case 0xFFFFC167:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setColorStoreActionOptions_atIndex";
        break;
      case 0xFFFFC168:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setDepthStoreActionOptions";
        break;
      case 0xFFFFC169:
        unint64_t result = "kDYFEMTLFragmentRenderCommandEncoder_setStencilStoreActionOptions";
        break;
      case 0xFFFFC16A:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setColorStoreActionOptions_atIndex";
        break;
      case 0xFFFFC16B:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthStoreActionOptions";
        break;
      case 0xFFFFC16C:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setStencilStoreActionOptions";
        break;
      case 0xFFFFC16D:
        unint64_t result = "kDYFEMTLCaptureManager_notifyPostPresentHandoffSPI";
        break;
      case 0xFFFFC16E:
        unint64_t result = "kDYFEMTLDevice_newLibraryWithCIFiltersForComputePipeline_imageFilterFunctionInfo_error";
        break;
      case 0xFFFFC16F:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setStageInRegionWithIndirectBuffer_indirectBufferOffset";
        break;
      case 0xFFFFC170:
        unint64_t result = "kDYFEMTLDevice_newIndirectRenderCommandEncoderWithBuffer";
        break;
      case 0xFFFFC171:
        unint64_t result = "kDYFEMTLDevice_newIndirectComputeCommandEncoderWithBuffer";
        break;
      case 0xFFFFC172:
        unint64_t result = "kDYFEMTLCommandBuffer_computeCommandEncoderWithDispatchType";
        break;
      case 0xFFFFC173:
        unint64_t result = "kDYFEMTLCommandBuffer_videoCommandEncoder";
        break;
      case 0xFFFFC174:
        unint64_t result = "kDYFEMTLCommandBuffer_doCorruptCBSPI";
        break;
      case 0xFFFFC175:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_useComputePipelineState";
        break;
      case 0xFFFFC176:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_useComputePipelineStates_count";
        break;
      case 0xFFFFC177:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_memoryBarrierWithScope";
        break;
      case 0xFFFFC178:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_memoryBarrierWithResources_count";
        break;
      case 0xFFFFC179:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_useRenderPipelineState";
        break;
      case 0xFFFFC17A:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_useRenderPipelineStates_count";
        break;
      case 0xFFFFC17B:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_executeCommandsInBuffer_startIndex";
        break;
      case 0xFFFFC17C:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_memoryBarrierWithScope_afterStages_beforeStages";
        break;
      case 0xFFFFC17D:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_memoryBarrierWithResources_count_afterStages_beforeStages";
        break;
      case 0xFFFFC17E:
        unint64_t result = "kDYFEMTLArgumentEncoder_setRenderPipelineState_atIndex";
        break;
      case 0xFFFFC17F:
        unint64_t result = "kDYFEMTLArgumentEncoder_setRenderPipelineStates_withRange";
        break;
      case 0xFFFFC180:
        unint64_t result = "kDYFEMTLArgumentEncoder_setComputePipelineState_atIndex";
        break;
      case 0xFFFFC181:
        unint64_t result = "kDYFEMTLArgumentEncoder_setComputePipelineStates_withRange";
        break;
      case 0xFFFFC182:
        unint64_t result = "kDYFEMTLDevice_minimumTextureBufferAlignmentForPixelFormat";
        break;
      case 0xFFFFC183:
        unint64_t result = "kDYFEMTLDevice_newEvent";
        break;
      case 0xFFFFC184:
        unint64_t result = "kDYFEMTLDevice_newSharedEvent";
        break;
      case 0xFFFFC185:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_optimizeContentsForGPUAccess";
        break;
      case 0xFFFFC186:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_optimizeContentsForGPUAccess_slice_level";
        break;
      case 0xFFFFC187:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_optimizeContentsForCPUAccess";
        break;
      case 0xFFFFC188:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_optimizeContentsForCPUAccess_slice_level";
        break;
      case 0xFFFFC189:
        unint64_t result = "kDYFEMTLCommandBuffer_encodeWaitForEvent_value";
        break;
      case 0xFFFFC18A:
        unint64_t result = "kDYFEMTLCommandBuffer_encodeSignalEvent_value";
        break;
      case 0xFFFFC18B:
        unint64_t result = "kDYFEMTLComputePipelineState_resourceIndex";
        break;
      case 0xFFFFC18C:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setPointSize";
        break;
      case 0xFFFFC18D:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setClipPlane_p2_p3_p4_atIndex";
        break;
      case 0xFFFFC18E:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexSamplerState_lodMinClamp_lodMaxClamp_lodBias_atIndex";
        break;
      case 0xFFFFC18F:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentSamplerState_lodMinClamp_lodMaxClamp_lodBias_atIndex";
        break;
      case 0xFFFFC190:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setPrimitiveRestartEnabled_index";
        break;
      case 0xFFFFC191:
        unint64_t result = "kDYFEMTLSamplerState_resourceIndex";
        break;
      case 0xFFFFC192:
        unint64_t result = "kDYFEMTLSharedTextureHandle_dealloc";
        break;
      case 0xFFFFC193:
        unint64_t result = "kDYFEMTLTexture_newSharedHandle";
        break;
      case 0xFFFFC194:
        unint64_t result = "kDYFEMTLDevice_newSharedTextureWithDescriptor";
        break;
      case 0xFFFFC195:
        unint64_t result = "kDYFEMTLDevice_newSharedTextureWithHandle";
        break;
      case 0xFFFFC196:
        unint64_t result = "kDYFEMTLDevice_tileSizeWithTextureType_pixelFormat_sampleCount";
        break;
      case 0xFFFFC197:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_getTextureAccessCounters_region_mipLevel_slice_resetCounters_countersBuffer_"
                 "countersBufferOffset";
        break;
      case 0xFFFFC198:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_resetTextureAccessCounters_region_mipLevel_slice";
        break;
      case 0xFFFFC199:
        unint64_t result = "kDYFEMTLSharedEvent_setSignaledValue";
        break;
      case 0xFFFFC19A:
        unint64_t result = "kDYFEMTLSharedEvent_setLabel";
        break;
      case 0xFFFFC19B:
        unint64_t result = "kDYFEMTLSharedEvent_dealloc";
        break;
      case 0xFFFFC19C:
        unint64_t result = "kDYFEMTLDevice_newIndirectCommandBufferWithDescriptor_maxCount_options";
        break;
      case 0xFFFFC19D:
        unint64_t result = "kDYFEMTLDevice_reserveResourceIndicesForResourceType_indices_indexCount";
        break;
      case 0xFFFFC19E:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setPrimitiveRestartEnabled";
        break;
      case 0xFFFFC19F:
        unint64_t result = "kDYFEMTLDevice_newIndirectCommandBufferWithDescriptor_maxCommandCount_options";
        break;
      case 0xFFFFC1A0:
        unint64_t result = "kDYFEMTLDevice_getIndirectCommandBufferHeaderSize";
        break;
      case 0xFFFFC1A1:
        unint64_t result = "kDYFEMTLCommandBuffer_addPurgedResource";
        break;
      case 0xFFFFC1A2:
        unint64_t result = "kDYFEMTLCommandBuffer_addPurgedHeap";
        break;
      case 0xFFFFC1A3:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_executeCommandsInBuffer_startIndex";
        break;
      case 0xFFFFC1A4:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_executeCommandsInBuffer_withRange";
        break;
      case 0xFFFFC1A5:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_executeCommandsInBuffer_indirectBuffer_indirectBufferOffset";
        break;
      case 0xFFFFC1A6:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_executeCommandsInBuffer_withRange";
        break;
      case 0xFFFFC1A7:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_executeCommandsInBuffer_indirectBuffer_indirectBufferOffset";
        break;
      case 0xFFFFC1A8:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_resetCommandsInBuffer_withRange";
        break;
      case 0xFFFFC1A9:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_copyIndirectCommandBuffer_sourceRange_destination_destinationIndex";
        break;
      case 0xFFFFC1AA:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_optimizeIndirectCommandBuffer_withRange";
        break;
      case 0xFFFFC1AB:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_dealloc";
        break;
      case 0xFFFFC1AC:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_setRenderPipelineState";
        break;
      case 0xFFFFC1AD:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_setVertexBuffer_offset_atIndex";
        break;
      case 0xFFFFC1AE:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_setFragmentBuffer_offset_atIndex";
        break;
      case 0xFFFFC1AF:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset"
                 "_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorB"
                 "ufferInstanceStride_tessellationFactorBufferScale";
        break;
      case 0xFFFFC1B0:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset"
                 "_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorB"
                 "ufferInstanceStride";
        break;
      case 0xFFFFC1B1:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBuffe"
                 "rOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance_tessellationFa"
                 "ctorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride_tessellationFactorBufferScale";
        break;
      case 0xFFFFC1B2:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBuffe"
                 "rOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance_tessellationFa"
                 "ctorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride";
        break;
      case 0xFFFFC1B3:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance";
        break;
      case 0xFFFFC1B4:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_"
                 "instanceCount_baseVertex_baseInstance";
        break;
      case 0xFFFFC1B5:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_nop";
        break;
      case 0xFFFFC1B6:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_end";
        break;
      case 0xFFFFC1B7:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_setTessellationFactorBuffer_offset_instanceStride";
        break;
      case 0xFFFFC1B8:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_setTessellationFactorScale";
        break;
      case 0xFFFFC1B9:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset"
                 "_instanceCount_baseInstance";
        break;
      case 0xFFFFC1BA:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBuffe"
                 "rOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance";
        break;
      case 0xFFFFC1BB:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_dispatchThreadsPerTile";
        break;
      case 0xFFFFC1BC:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_setVertexArgument_offset_atIndex";
        break;
      case 0xFFFFC1BD:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_setFragmentArgument_offset_atIndex";
        break;
      case 0xFFFFC1BE:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_setTileArgument_offset_atIndex";
        break;
      case 0xFFFFC1BF:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_setThreadgroupMemoryLength_offset_atIndex";
        break;
      case 0xFFFFC1C0:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_endIndirectCommandBuffer";
        break;
      case 0xFFFFC1C1:
        unint64_t result = "kDYFEMTLIndirectComputeCommand_dealloc";
        break;
      case 0xFFFFC1C2:
        unint64_t result = "kDYFEMTLIndirectComputeCommand_setComputePipelineState";
        break;
      case 0xFFFFC1C3:
        unint64_t result = "kDYFEMTLIndirectComputeCommand_setKernelBuffer_offset_atIndex";
        break;
      case 0xFFFFC1C4:
        unint64_t result = "kDYFEMTLIndirectComputeCommand_dispatchThreadgroups_threadsPerThreadgroup";
        break;
      case 0xFFFFC1C5:
        unint64_t result = "kDYFEMTLIndirectComputeCommand_concurrentDispatchThreadgroups_threadsPerThreadgroup";
        break;
      case 0xFFFFC1C6:
        unint64_t result = "kDYFEMTLIndirectComputeCommand_nop";
        break;
      case 0xFFFFC1C7:
        unint64_t result = "kDYFEMTLIndirectComputeCommand_endIndirectCommandBuffer";
        break;
      case 0xFFFFC1C8:
        unint64_t result = "kDYFEMTLIndirectComputeCommand_setKernelArgument_offset_atIndex";
        break;
      case 0xFFFFC1C9:
        unint64_t result = "kDYFEMTLIndirectComputeCommand_setThreadgroupMemoryLength_atIndex";
        break;
      case 0xFFFFC1CA:
        unint64_t result = "kDYFEMTLIndirectComputeCommand_setStageInRegion";
        break;
      case 0xFFFFC1CB:
        unint64_t result = "kDYFEMTLIndirectCommandBuffer_setLabel";
        break;
      case 0xFFFFC1CC:
        unint64_t result = "kDYFEMTLIndirectCommandBuffer_setResponsibleProcess";
        break;
      case 0xFFFFC1CD:
        unint64_t result = "kDYFEMTLIndirectCommandBuffer_dealloc";
        break;
      case 0xFFFFC1CE:
        unint64_t result = "kDYFEMTLIndirectCommandBuffer_indirectRenderCommandAtIndex";
        break;
      case 0xFFFFC1CF:
        unint64_t result = "kDYFEMTLIndirectCommandBuffer_indirectComputeCommandAtIndex";
        break;
      case 0xFFFFC1D0:
        unint64_t result = "kDYFEMTLIndirectCommandBuffer_setPurgeableState";
        break;
      case 0xFFFFC1D1:
        unint64_t result = "kDYFEMTLIndirectCommandBuffer_makeAliasable";
        break;
      case 0xFFFFC1D2:
        unint64_t result = "kDYFEMTLIndirectCommandBuffer_isAliasable";
        break;
      case 0xFFFFC1D3:
        unint64_t result = "kDYFEMTLIndirectCommandBuffer_isPurgeable";
        break;
      case 0xFFFFC1D4:
        unint64_t result = "kDYFEMTLArgumentEncoder_setIndirectCommandBuffer_atIndex";
        break;
      case 0xFFFFC1D5:
        unint64_t result = "kDYFEMTLArgumentEncoder_setIndirectCommandBuffers_withRange";
        break;
      case 0xFFFFC1D6:
        unint64_t result = "kDYFEMTLBuffer_newRemoteBufferViewForDevice";
        break;
      case 0xFFFFC1D7:
        unint64_t result = "kDYFEMTLTexture_newRemoteTextureViewForDevice";
        break;
      case 0xFFFFC1D8:
        unint64_t result = "kDYFEMTLDevice_newSharedEventWithMachPort";
        break;
      case 0xFFFFC1D9:
        unint64_t result = "kDYFEMTLSharedEvent_eventPort";
        break;
      case 0xFFFFC1DA:
        unint64_t result = "kDYFEMTLTexture_newSharedTextureHandle";
        break;
      case 0xFFFFC1DB:
        unint64_t result = "kDYFEMTLDevice_newSharedEventWithHandle";
        break;
      case 0xFFFFC1DC:
        unint64_t result = "kDYFEMTLCommandBuffer_commitAndWaitUntilSubmitted";
        break;
      case 0xFFFFC1DD:
        unint64_t result = "kDYFEMTLSharedEvent_newSharedEventHandle";
        break;
      case 0xFFFFC1DE:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_reset";
        break;
      case 0xFFFFC1DF:
        unint64_t result = "kDYFEMTLIndirectComputeCommand_reset";
        break;
      case 0xFFFFC1E0:
        unint64_t result = "kDYFEMTLBuffer_containsResource";
        break;
      case 0xFFFFC1E1:
        unint64_t result = "kDYFEMTLTexture_containsResource";
        break;
      case 0xFFFFC1E2:
        unint64_t result = "kDYFEMTLDevice_supportsPrimitiveType";
        break;
      case 0xFFFFC1E3:
        unint64_t result = "kDYFEMTLDevice_startCollectingPipelineDescriptorsUsingPrefixForNames";
        break;
      case 0xFFFFC1E4:
        unint64_t result = "kDYFEMTLDevice_newResourceGroupFromResources_count";
        break;
      case 0xFFFFC1E5:
        unint64_t result = "kDYFEMTLCommandBuffer_sampledComputeCommandEncoderWithDispatchType_programInfoBuffer_capacity";
        break;
      case 0xFFFFC1E6:
        unint64_t result = "kDYFEMTLCommandBuffer_setResourceGroups_count";
        break;
      case 0xFFFFC1E7:
        unint64_t result = "kDYFEMTLCommandBuffer_dropResourceGroups_count";
        break;
      case 0xFFFFC1E8:
        unint64_t result = "kDYFEMTLIndirectCommandBuffer_resetWithRange";
        break;
      case 0xFFFFC1E9:
        unint64_t result = "kDYFEMTLIndirectCommandBuffer_containsResource";
        break;
      case 0xFFFFC1EA:
        unint64_t result = "kDYFEMTLTexture_isShareable";
        break;
      case 0xFFFFC1EB:
        unint64_t result = "kDYFEMTLMotionEstimationPipeline_dealloc";
        break;
      case 0xFFFFC1EC:
        unint64_t result = "kDYFEMTLDevice_motionEstimatorCapabilities";
        break;
      case 0xFFFFC1ED:
        unint64_t result = "kDYFEMTLDevice_newMotionEstimationPipelineWithDescriptor";
        break;
      case 0xFFFFC1EE:
        unint64_t result = "kDYFEMTLVideoCommandEncoder_setLabel";
        break;
      case 0xFFFFC1EF:
        unint64_t result = "kDYFEMTLVideoCommandEncoder_dealloc";
        break;
      case 0xFFFFC1F0:
        unint64_t result = "kDYFEMTLVideoCommandEncoder_setMotionEstimationPipeline";
        break;
      case 0xFFFFC1F1:
        unint64_t result = "kDYFEMTLVideoCommandEncoder_generateMotionVectorsForTexture_previousTexture_resultBuffer_bufferOffset";
        break;
      case 0xFFFFC1F2:
        unint64_t result = "kDYFEMTLVideoCommandEncoder_waitForFence";
        break;
      case 0xFFFFC1F3:
        unint64_t result = "kDYFEMTLVideoCommandEncoder_updateFence";
        break;
      case 0xFFFFC1F4:
        unint64_t result = "kDYFEMTLVideoCommandEncoder_endEncoding";
        break;
      case 0xFFFFC1F5:
        unint64_t result = "kDYFEMTLVideoCommandEncoder_insertDebugSignpost";
        break;
      case 0xFFFFC1F6:
        unint64_t result = "kDYFEMTLVideoCommandEncoder_pushDebugGroup";
        break;
      case 0xFFFFC1F7:
        unint64_t result = "kDYFEMTLVideoCommandEncoder_popDebugGroup";
        break;
      case 0xFFFFC1F8:
        unint64_t result = "kDYFEMTLEvent_setLabel";
        break;
      case 0xFFFFC1F9:
        unint64_t result = "kDYFEMTLEvent_dealloc";
        break;
      case 0xFFFFC1FA:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_toTexture_destinationSlice_destinati"
                 "onLevel_sliceCount_levelCount";
        break;
      case 0xFFFFC1FB:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_toTexture";
        break;
      case 0xFFFFC1FC:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_resolveCountersWithIndexRange_sampleBuffer_resolvedBuffer";
        break;
      case 0xFFFFC1FD:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_sampleCountersInBuffer_atIndex_allowOverlap";
        break;
      case 0xFFFFC1FE:
        unint64_t result = "kDYFEMTLBuffer_setResourceIndex";
        break;
      case 0xFFFFC1FF:
        unint64_t result = "kDYFEMTLCommandBuffer_debugBufferContentsWithLength";
        break;
      case 0xFFFFC200:
        unint64_t result = "kDYFEMTLCommandBuffer_encodeCacheControlFinalizeOperation_resourceGroups_count";
        break;
      case 0xFFFFC201:
        unint64_t result = "kDYFEMTLCommandBuffer_encodeCacheControlTagOperation_resourceGroups_count";
        break;
      case 0xFFFFC202:
        unint64_t result = "kDYFEMTLCommandBuffer_resourceStateCommandEncoder";
        break;
      case 0xFFFFC203:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_sampleCountersInBuffer_atIndex_allowOverlap";
        break;
      case 0xFFFFC204:
        unint64_t result = "kDYFEMTLComputePipelineState_setResourceIndex";
        break;
      case 0xFFFFC205:
        unint64_t result = "kDYFEMTLCounterSampleBuffer_dealloc";
        break;
      case 0xFFFFC206:
        unint64_t result = "kDYFEMTLDeserializationContext_dealloc";
        break;
      case 0xFFFFC207:
        unint64_t result = "kDYFEMTLDeserializationContext_functionWithFunctionRef";
        break;
      case 0xFFFFC208:
        unint64_t result = "kDYFEMTLDevice_setCurrentUtilityBufferIndex";
        break;
      case 0xFFFFC209:
        unint64_t result = "kDYFEMTLDevice_setResourceIndirectionEnabled";
        break;
      case 0xFFFFC20A:
        unint64_t result = "kDYFEMTLDevice_setUtilityBuffers";
        break;
      case 0xFFFFC20B:
        unint64_t result = "kDYFEMTLDevice_addBufferToGlobalResourceTable";
        break;
      case 0xFFFFC20C:
        unint64_t result = "kDYFEMTLDevice_addComputePipelineStateToGlobalResourceTable";
        break;
      case 0xFFFFC20D:
        unint64_t result = "kDYFEMTLDevice_addIndirectCommandBufferToGlobalResourceTable";
        break;
      case 0xFFFFC20E:
        unint64_t result = "kDYFEMTLDevice_addRenderPipelineStateToGlobalResourceTable";
        break;
      case 0xFFFFC20F:
        unint64_t result = "kDYFEMTLDevice_addSamplerStateToGlobalResourceTable";
        break;
      case 0xFFFFC210:
        unint64_t result = "kDYFEMTLDevice_addTextureToGlobalResourceTable";
        break;
      case 0xFFFFC211:
        unint64_t result = "kDYFEMTLDevice_allowLibrariesFromOtherPlatforms";
        break;
      case 0xFFFFC212:
        unint64_t result = "kDYFEMTLDevice_createNewUtilityBuffer";
        break;
      case 0xFFFFC213:
        unint64_t result = "kDYFEMTLDevice_describeCounter";
        break;
      case 0xFFFFC214:
        unint64_t result = "kDYFEMTLDevice_indirectBufferAddressForResourceIndex_offset";
        break;
      case 0xFFFFC215:
        unint64_t result = "kDYFEMTLDevice_newBufferWithBytes_length_options_atResourceIndex";
        break;
      case 0xFFFFC216:
        unint64_t result = "kDYFEMTLDevice_newBufferWithBytesNoCopy_length_options_atResourceIndex_deallocator";
        break;
      case 0xFFFFC217:
        unint64_t result = "kDYFEMTLDevice_newBufferWithLength_options_atResourceIndex";
        break;
      case 0xFFFFC218:
        unint64_t result = "kDYFEMTLDevice_newCounterSampleBufferWithDescriptor_error";
        break;
      case 0xFFFFC219:
        unint64_t result = "kDYFEMTLDevice_newLibraryWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error";
        break;
      case 0xFFFFC21A:
        unint64_t result = "kDYFEMTLDevice_newRasterizationRateMapWithScreenSize_layerCount_layers";
        break;
      case 0xFFFFC21B:
        unint64_t result = "kDYFEMTLDevice_newRenderPipelineDescriptorWithSerializedData_deserializationContext";
        break;
      case 0xFFFFC21C:
        unint64_t result = "kDYFEMTLDevice_offsetFromIndirectBufferAddress";
        break;
      case 0xFFFFC21D:
        unint64_t result = "kDYFEMTLDevice_pollSampleBuffer_resolvedBuffer";
        break;
      case 0xFFFFC21E:
        unint64_t result = "kDYFEMTLDevice_removeResourceFromGlobalResourceTable_resourceType";
        break;
      case 0xFFFFC21F:
        unint64_t result = "kDYFEMTLDevice_requiresIndirectionForAllResourceTypes";
        break;
      case 0xFFFFC220:
        unint64_t result = "kDYFEMTLDevice_resolveCountersWithIndexRange_sampleBuffer";
        break;
      case 0xFFFFC221:
        unint64_t result = "kDYFEMTLDevice_resourceIndexFromIndirectBufferAddress";
        break;
      case 0xFFFFC222:
        unint64_t result = "kDYFEMTLDevice_sampleCountersAtInterval_sampleBuffer_error";
        break;
      case 0xFFFFC223:
        unint64_t result = "kDYFEMTLDevice_sampleTimeStamps_gpuTimeStamp";
        break;
      case 0xFFFFC224:
        unint64_t result = "kDYFEMTLDevice_serializeRenderPipelineDescriptor";
        break;
      case 0xFFFFC225:
        unint64_t result = "kDYFEMTLDevice_setGPUAssertionsEnabled";
        break;
      case 0xFFFFC226:
        unint64_t result = "kDYFEMTLDevice_setResourcesPurgeableState_newState_oldState_count";
        break;
      case 0xFFFFC227:
        unint64_t result = "kDYFEMTLDevice_useDeviceResourceTableForType";
        break;
      case 0xFFFFC228:
        unint64_t result = "kDYFEMTLDevice_utilityBufferForComputeCommandEncoder";
        break;
      case 0xFFFFC229:
        unint64_t result = "kDYFEMTLDevice_utilityBufferForRenderCommandEncoder";
        break;
      case 0xFFFFC22A:
        unint64_t result = "kDYFEMTLFunction_newFunctionWithPluginData_bitcodeType";
        break;
      case 0xFFFFC22B:
        unint64_t result = "kDYFEMTLHeap_newBufferWithLength_options_atOffset";
        break;
      case 0xFFFFC22C:
        unint64_t result = "kDYFEMTLHeap_newTextureWithDescriptor_atOffset";
        break;
      case 0xFFFFC22D:
        unint64_t result = "kDYFEMTLIndirectComputeCommand_clearBarrier";
        break;
      case 0xFFFFC22E:
        unint64_t result = "kDYFEMTLIndirectComputeCommand_concurrentDispatchThreads_threadsPerThreadgroup";
        break;
      case 0xFFFFC22F:
        unint64_t result = "kDYFEMTLIndirectComputeCommand_setBarrier";
        break;
      case 0xFFFFC230:
        unint64_t result = "kDYFEMTLIndirectComputeCommand_setImageBlockWidth_height";
        break;
      case 0xFFFFC231:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_sampleCountersInBuffer_atIndex_allowOverlap";
        break;
      case 0xFFFFC232:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexAmplificationCount_viewMappings";
        break;
      case 0xFFFFC233:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_useHeap_stages";
        break;
      case 0xFFFFC234:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_useHeaps_count_stages";
        break;
      case 0xFFFFC235:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_useResource_usage_stages";
        break;
      case 0xFFFFC236:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_useResources_count_usage_stages";
        break;
      case 0xFFFFC237:
        unint64_t result = "kDYFEMTLRenderPipelineState_setResourceIndex";
        break;
      case 0xFFFFC238:
        unint64_t result = "kDYFEMTLSamplerState_setResourceIndex";
        break;
      case 0xFFFFC239:
        unint64_t result = "kDYFEMTLTexture_setResourceIndex";
        break;
      case 0xFFFFC23A:
        unint64_t result = "kDYFEMTLDevice_newComputePipelineDescriptorWithSerializedData_deserializationContext";
        break;
      case 0xFFFFC23B:
        unint64_t result = "kDYFEMTLDevice_serializeComputePipelineDescriptor";
        break;
      case 0xFFFFC23C:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexAmplificationMode_value";
        break;
      case 0xFFFFC23D:
        unint64_t result = "kDYFEMTLCommandQueue_getBackgroundGPUPriority";
        break;
      case 0xFFFFC23E:
        unint64_t result = "kDYFEMTLCommandQueue_getGPUPriority";
        break;
      case 0xFFFFC23F:
        unint64_t result = "kDYFEMTLCommandQueue_setBackgroundGPUPriority";
        break;
      case 0xFFFFC240:
        unint64_t result = "kDYFEMTLCommandQueue_setBackgroundGPUPriority_offset";
        break;
      case 0xFFFFC241:
        unint64_t result = "kDYFEMTLCommandQueue_setCompletionQueue";
        break;
      case 0xFFFFC242:
        unint64_t result = "kDYFEMTLCommandQueue_setGPUPriority";
        break;
      case 0xFFFFC243:
        unint64_t result = "kDYFEMTLCommandQueue_setGPUPriority_offset";
        break;
      case 0xFFFFC244:
        unint64_t result = "kDYFEMTLCommandQueue_setSubmissionQueue";
        break;
      case 0xFFFFC245:
        unint64_t result = "kDYFEMTLRasterizationRateMap_copyParameterDataToBuffer_atOffset";
        break;
      case 0xFFFFC246:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_updateTextureMapping_mode_indirectBuffer_indirectBufferOffset";
        break;
      case 0xFFFFC247:
        unint64_t result = "kDYFEMTLRasterizationRateMap_dealloc";
        break;
      case 0xFFFFC248:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_updateTextureMapping_mode_region_mipLevel_slice";
        break;
      case 0xFFFFC249:
        unint64_t result = "kDYFEMTLRasterizationRateMap_physicalCoordinate_forLayer";
        break;
      case 0xFFFFC24A:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_updateTextureMappings_mode_regions_mipLevels_slices_numRegions";
        break;
      case 0xFFFFC24B:
        unint64_t result = "kDYFEMTLRasterizationRateMap_physicalSizeForLayer";
        break;
      case 0xFFFFC24C:
        unint64_t result = "kDYFEMTLDevice_tileSizeWithSparsePageSize_textureType_pixelFormat_sampleCount";
        break;
      case 0xFFFFC24D:
        unint64_t result = "kDYFEMTLRasterizationRateMap_screenCoordinate_forLayer";
        break;
      case 0xFFFFC24E:
        unint64_t result = "kDYFEMTLResourceStateCommandEncoder_setLabel";
        break;
      case 0xFFFFC24F:
        unint64_t result = "kDYFEMTLDevice_newRasterizationRateMapWithDescriptor";
        break;
      case 0xFFFFC250:
        unint64_t result = "kDYFEMTLResourceStateCommandEncoder_copyMappingStateFromTexture_mipLevel_slice_toBuffer_offset_numTiles";
        break;
      case 0xFFFFC251:
        unint64_t result = "kDYFEMTLDevice_supportsRasterizationRateMapWithLayerCount";
        break;
      case 0xFFFFC252:
        unint64_t result = "kDYFEMTLResourceStateCommandEncoder_dealloc";
        break;
      case 0xFFFFC253:
        unint64_t result = "kDYFEMTLResourceStateCommandEncoder_endEncoding";
        break;
      case 0xFFFFC254:
        unint64_t result = "kDYFEMTLResourceStateCommandEncoder_insertDebugSignpost";
        break;
      case 0xFFFFC255:
        unint64_t result = "kDYFEMTLResourceStateCommandEncoder_popDebugGroup";
        break;
      case 0xFFFFC256:
        unint64_t result = "kDYFEMTLResourceStateCommandEncoder_pushDebugGroup";
        break;
      case 0xFFFFC257:
        unint64_t result = "kDYFEMTLResourceStateCommandEncoder_updateFence";
        break;
      case 0xFFFFC258:
        unint64_t result = "kDYFEMTLResourceStateCommandEncoder_updateTextureMapping_mode_indirectBuffer_indirectBufferOffset";
        break;
      case 0xFFFFC259:
        unint64_t result = "kDYFEMTLResourceStateCommandEncoder_updateTextureMapping_mode_region_mipLevel_slice";
        break;
      case 0xFFFFC25A:
        unint64_t result = "kDYFEMTLResourceStateCommandEncoder_updateTextureMappings_mode_regions_mipLevels_slices_numRegions";
        break;
      case 0xFFFFC25B:
        unint64_t result = "kDYFEMTLResourceStateCommandEncoder_waitForFence";
        break;
      case 0xFFFFC25C:
        unint64_t result = "kDYFEMTLDevice_supportsFamily";
        break;
      case 0xFFFFC25D:
        unint64_t result = "kDYFEMTLDevice_supportsVersion";
        break;
      case 0xFFFFC25E:
        unint64_t result = "kDYFEMTLHeap_newBufferWithLength_options_offset";
        break;
      case 0xFFFFC25F:
        unint64_t result = "kDYFEMTLHeap_newTextureWithDescriptor_offset";
        break;
      case 0xFFFFC260:
        unint64_t result = "kDYFEMTLRasterizationRateMap_copyParameterDataToBuffer_offset";
        break;
      case 0xFFFFC261:
        unint64_t result = "kDYFEMTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle";
        break;
      case 0xFFFFC262:
        unint64_t result = "kDYFEMTLDevice_newPrecompiledComputePipelineStateWithDescriptor_options_pipelineCache_completionHandler";
        break;
      case 0xFFFFC263:
        unint64_t result = "kDYFEMTLIndirectComputeCommand_setImageblockWidth_height";
        break;
      case 0xFFFFC264:
        unint64_t result = "kDYFEMTLLibrary_newFunctionWithName_constantValues_functionCache_error";
        break;
      case 0xFFFFC265:
        unint64_t result = "kDYFEMTLRasterizationRateMap_mapPhysicalToScreenCoordinates_forLayer";
        break;
      case 0xFFFFC266:
        unint64_t result = "kDYFEMTLRasterizationRateMap_mapScreenToPhysicalCoordinates_forLayer";
        break;
      case 0xFFFFC267:
        unint64_t result = "kDYFEMTLResourceGroup_dealloc";
        break;
      case 0xFFFFC268:
        unint64_t result = "kDYFEMTLBuffer_isComplete";
        break;
      case 0xFFFFC269:
        unint64_t result = "kDYFEMTLBuffer_waitUntilComplete";
        break;
      case 0xFFFFC26A:
        unint64_t result = "kDYFEMTLIndirectCommandBuffer_doesAliasAllResources_count";
        break;
      case 0xFFFFC26B:
        unint64_t result = "kDYFEMTLIndirectCommandBuffer_doesAliasAnyResources_count";
        break;
      case 0xFFFFC26C:
        unint64_t result = "kDYFEMTLIndirectCommandBuffer_doesAliasResource";
        break;
      case 0xFFFFC26D:
        unint64_t result = "kDYFEMTLIndirectCommandBuffer_isComplete";
        break;
      case 0xFFFFC26E:
        unint64_t result = "kDYFEMTLIndirectCommandBuffer_waitUntilComplete";
        break;
      case 0xFFFFC26F:
        unint64_t result = "kDYFEMTLTexture_isComplete";
        break;
      case 0xFFFFC270:
        unint64_t result = "kDYFEMTLTexture_waitUntilComplete";
        break;
      case 0xFFFFC271:
        unint64_t result = "kDYFEMTLDevice_convertSparsePixelRegions_toTileRegions_withTileSize_alignmentMode_numRegions";
        break;
      case 0xFFFFC272:
        unint64_t result = "kDYFEMTLDevice_convertSparseTileRegions_toPixelRegions_withTileSize_numRegions";
        break;
      case 0xFFFFC273:
        unint64_t result = "kDYFEMTLDevice_supportsVertexAmplificationCount";
        break;
      case 0xFFFFC274:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_resolveCounters_inRange_destinationBuffer_destinationOffset";
        break;
      case 0xFFFFC275:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier";
        break;
      case 0xFFFFC276:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier";
        break;
      case 0xFFFFC277:
        unint64_t result = "kDYFEMTLCounterSampleBuffer_resolveCounterRange";
        break;
      case 0xFFFFC278:
        unint64_t result = "kDYFEMTLCounterSet_dealloc";
        break;
      case 0xFFFFC279:
        unint64_t result = "kDYFEMTLDevice_sampleTimestamps_gpuTimestamp";
        break;
      case 0xFFFFC27A:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier";
        break;
      case 0xFFFFC27B:
        unint64_t result = "kDYFEMTLCommandBuffer_encodeWaitForEvent_value_timeout";
        break;
      case 0xFFFFC27C:
        unint64_t result = "kDYFEMTLCounter_dealloc";
        break;
      case 0xFFFFC27D:
        unint64_t result = "kDYFEMTLDevice_copyShaderCacheToPath";
        break;
      case 0xFFFFC27E:
        unint64_t result = "kDYFEMTLDevice_serializeStructType_version";
        break;
      case 0xFFFFC27F:
        unint64_t result = "kDYFEMTLPipelineCache_dealloc";
        break;
      case 0xFFFFC280:
        unint64_t result = "kDYFEMTLPipelineLibrary_setDisableRunTimeCompilation";
        break;
      case 0xFFFFC281:
        unint64_t result = "kDYFEMTLPipelineLibrary_setLabel";
        break;
      case 0xFFFFC282:
        unint64_t result = "kDYFEMTLPipelineLibrary_dealloc";
        break;
      case 0xFFFFC283:
        unint64_t result = "kDYFEMTLPipelineLibrary_newComputePipelineDescriptorWithName_error";
        break;
      case 0xFFFFC284:
        unint64_t result = "kDYFEMTLPipelineLibrary_newComputePipelineStateWithName_options_reflection_error";
        break;
      case 0xFFFFC285:
        unint64_t result = "kDYFEMTLPipelineLibrary_newRenderPipelineDescriptorWithName_error";
        break;
      case 0xFFFFC286:
        unint64_t result = "kDYFEMTLPipelineLibrary_newRenderPipelineStateWithName_options_reflection_error";
        break;
      case 0xFFFFC287:
        unint64_t result = "kDYFEMTLDevice_sparseTileSizeWithTextureType_pixelFormat_sampleCount";
        break;
      case 0xFFFFC288:
        unint64_t result = "kDYFEMTLCaptureManager_startCaptureWithDescriptor_error";
        break;
      case 0xFFFFC289:
        unint64_t result = "kDYFEMTLCaptureManager_startCaptureWithScope";
        break;
      case 0xFFFFC28A:
        unint64_t result = "kDYFEMTLCaptureManager_newCaptureScopeWithDevice";
        break;
      case 0xFFFFC28B:
        unint64_t result = "kDYFEMTLCaptureManager_newCaptureScopeWithCommandQueue";
        break;
      case 0xFFFFC28C:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_enableNullBufferBinds";
        break;
      case 0xFFFFC28D:
        unint64_t result = "kDYFEMTLDevice_newFunctionWithGLIR_functionType";
        break;
      case 0xFFFFC28E:
        unint64_t result = "kDYFEMTLDevice_newFunctionWithGLIR_inputsDescription_functionType";
        break;
      case 0xFFFFC28F:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setAlphaTestReferenceValue";
        break;
      case 0xFFFFC290:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setColorResolveTexture_slice_depthPlane_level_yInvert_atIndex";
        break;
      case 0xFFFFC291:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthCleared";
        break;
      case 0xFFFFC292:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setDepthResolveTexture_slice_depthPlane_level_yInvert";
        break;
      case 0xFFFFC293:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setProvokingVertexMode";
        break;
      case 0xFFFFC294:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setStencilCleared";
        break;
      case 0xFFFFC295:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setStencilResolveTexture_slice_depthPlane_level";
        break;
      case 0xFFFFC296:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setStencilResolveTexture_slice_depthPlane_level_yInvert";
        break;
      case 0xFFFFC297:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setTriangleFrontFillMode_backFillMode";
        break;
      case 0xFFFFC298:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setViewportTransformEnabled";
        break;
      case 0xFFFFC299:
        unint64_t result = "kDYFEMTLDevice_minLinearTextureBaseAddressAlignmentForDescriptor";
        break;
      case 0xFFFFC29A:
        unint64_t result = "kDYFEMTLDevice_minLinearTexturePitchAlignmentForDescriptor_mustMatchExactly";
        break;
      case 0xFFFFC29B:
        unint64_t result = "kDYFEMTLDevice_newBinaryArchiveWithDescriptor_error";
        break;
      case 0xFFFFC29C:
        unint64_t result = "kDYFEMTLDevice_requiredLinearTextureBytesPerRowForDescriptor";
        break;
      case 0xFFFFC29D:
        unint64_t result = "kDYFEMTLFunction_newArgumentEncoderWithBufferIndex_pipelineLibrary";
        break;
      case 0xFFFFC29E:
        unint64_t result = "kDYFEMTLFunction_newArgumentEncoderWithBufferIndex_reflection_pipelineLibrary";
        break;
      case 0xFFFFC29F:
        unint64_t result = "kDYFEMTLFunction_reflectionWithOptions_pipelineLibrary";
        break;
      case 0xFFFFC2A0:
        unint64_t result = "kDYFEMTLCommandBuffer_computeCommandEncoderWithDispatchType_substreamCount";
        break;
      case 0xFFFFC2A1:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setSubstream";
        break;
      case 0xFFFFC2A2:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_signalProgress";
        break;
      case 0xFFFFC2A3:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_waitForProgress";
        break;
      case 0xFFFFC2A4:
        unint64_t result = "kDYFEMTLDevice_maximumComputeSubstreams";
        break;
      case 0xFFFFC2A5:
        unint64_t result = "kDYFEMTLDevice_newBufferWithBytes_length_options_gpuAddress";
        break;
      case 0xFFFFC2A6:
        unint64_t result = "kDYFEMTLDevice_newBufferWithBytesNoCopy_length_options_gpuAddress_deallocator";
        break;
      case 0xFFFFC2A7:
        unint64_t result = "kDYFEMTLDevice_newBufferWithLength_options_gpuAddress";
        break;
      case 0xFFFFC2A8:
        unint64_t result = "kDYFEMTLDevice_reserveGPUAddressRange";
        break;
      case 0xFFFFC2A9:
        unint64_t result = "kDYFEMTLCommandBuffer_addLoggingForType_handler";
        break;
      case 0xFFFFC2AA:
        unint64_t result = "kDYFEMTLCommandBufferEncoderInfo_dealloc";
        break;
      case 0xFFFFC2AB:
        unint64_t result = "kDYFEMTLCommandQueue_commandBufferWithDescriptor";
        break;
      case 0xFFFFC2AC:
        unint64_t result = "kDYFEMTLComputePipelineState_functionPointerHandleWithFunction";
        break;
      case 0xFFFFC2AD:
        unint64_t result = "kDYFEMTLComputePipelineState_functionPointerHandlesWithFunctions_range";
        break;
      case 0xFFFFC2AE:
        unint64_t result = "kDYFEMTLDevice_setCommandBufferErrorOptions";
        break;
      case 0xFFFFC2AF:
        unint64_t result = "kDYFEMTLDevice_newBinaryLibraryWithOptions_url_error";
        break;
      case 0xFFFFC2B0:
        unint64_t result = "kDYFEMTLDevice_newDynamicLibrary_computeDescriptor_error";
        break;
      case 0xFFFFC2B1:
        unint64_t result = "kDYFEMTLDevice_newDynamicLibrary_error";
        break;
      case 0xFFFFC2B2:
        unint64_t result = "kDYFEMTLDevice_newDynamicLibraryFromURL_error";
        break;
      case 0xFFFFC2B3:
        unint64_t result = "kDYFEMTLDevice_newLibraryWithDAG_functions_error";
        break;
      case 0xFFFFC2B4:
        unint64_t result = "kDYFEMTLFunctionLog_dealloc";
        break;
      case 0xFFFFC2B5:
        unint64_t result = "kDYFEMTLStackTraceEntry_dealloc";
        break;
      case 0xFFFFC2B6:
        unint64_t result = "kDYFEMTLTexture_newTextureViewWithPixelFormat_resourceIndex";
        break;
      case 0xFFFFC2B7:
        unint64_t result = "kDYFEMTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_resourceIndex";
        break;
      case 0xFFFFC2B8:
        unint64_t result = "kDYFEMTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle_resourceIndex";
        break;
      case 0xFFFFC2B9:
        unint64_t result = "kDYFEMTLBinaryArchive_addComputePipelineStateWithDescriptor_error";
        break;
      case 0xFFFFC2BA:
        unint64_t result = "kDYFEMTLBinaryArchive_addLibrary_computePipelineDescriptor_error";
        break;
      case 0xFFFFC2BB:
        unint64_t result = "kDYFEMTLBinaryArchive_dealloc";
        break;
      case 0xFFFFC2BC:
        unint64_t result = "kDYFEMTLBinaryArchive_writeToURL_error";
        break;
      case 0xFFFFC2BD:
        unint64_t result = "kDYFEMTLBinaryLibrary_setLabel";
        break;
      case 0xFFFFC2BE:
        unint64_t result = "kDYFEMTLBinaryLibrary_addBinaryEntry";
        break;
      case 0xFFFFC2BF:
        unint64_t result = "kDYFEMTLBinaryLibrary_addComputePipelineFunctionsWithDescriptor_error";
        break;
      case 0xFFFFC2C0:
        unint64_t result = "kDYFEMTLBinaryLibrary_dealloc";
        break;
      case 0xFFFFC2C1:
        unint64_t result = "kDYFEMTLBinaryLibrary_getBinaryDataWithKey";
        break;
      case 0xFFFFC2C2:
        unint64_t result = "kDYFEMTLBinaryLibrary_removeComputePipelineFunctionsWithDescriptor_error";
        break;
      case 0xFFFFC2C3:
        unint64_t result = "kDYFEMTLBinaryLibrary_serializeToURL_error";
        break;
      case 0xFFFFC2C4:
        unint64_t result = "kDYFEMTLDynamicLibrary_setLabel";
        break;
      case 0xFFFFC2C5:
        unint64_t result = "kDYFEMTLDynamicLibrary_dealloc";
        break;
      case 0xFFFFC2C6:
        unint64_t result = "kDYFEMTLDynamicLibrary_serializeToURL_error";
        break;
      case 0xFFFFC2C7:
        unint64_t result = "kDYFEMTLCommandBuffer_accelerationStructureCommandEncoder";
        break;
      case 0xFFFFC2C8:
        unint64_t result = "kDYFEMTLDevice_accelerationStructureSizesWithDescriptor";
        break;
      case 0xFFFFC2C9:
        unint64_t result = "kDYFEMTLDevice_loadDynamicLibrariesForComputeDescriptor_error";
        break;
      case 0xFFFFC2CA:
        unint64_t result = "kDYFEMTLFunction_newArgumentEncoderWithBufferIndex_reflection_binaryArchives";
        break;
      case 0xFFFFC2CB:
        unint64_t result = "kDYFEMTLFunction_reflectionWithOptions_binaryArchives";
        break;
      case 0xFFFFC2CC:
        unint64_t result = "kDYFEMTLBinaryArchive_setLabel";
        break;
      case 0xFFFFC2CD:
        unint64_t result = "kDYFEMTLBinaryArchive_addBinaryEntry_forKey";
        break;
      case 0xFFFFC2CE:
        unint64_t result = "kDYFEMTLBinaryArchive_addComputePipelineFunctionsWithDescriptor_error";
        break;
      case 0xFFFFC2CF:
        unint64_t result = "kDYFEMTLBinaryArchive_addRenderPipelineFunctionsWithDescriptor_error";
        break;
      case 0xFFFFC2D0:
        unint64_t result = "kDYFEMTLBinaryArchive_addTileRenderPipelineFunctionsWithDescriptor_error";
        break;
      case 0xFFFFC2D1:
        unint64_t result = "kDYFEMTLBinaryArchive_getBinaryDataForKey";
        break;
      case 0xFFFFC2D2:
        unint64_t result = "kDYFEMTLBinaryArchive_serializeToURL_error";
        break;
      case 0xFFFFC2D3:
        unint64_t result = "kDYFEMTLAccelerationStructure_setLabel";
        break;
      case 0xFFFFC2D4:
        unint64_t result = "kDYFEMTLAccelerationStructure_setResponsibleProcess";
        break;
      case 0xFFFFC2D5:
        unint64_t result = "kDYFEMTLAccelerationStructure_dealloc";
        break;
      case 0xFFFFC2D6:
        unint64_t result = "kDYFEMTLAccelerationStructure_doesAliasAllResources_count";
        break;
      case 0xFFFFC2D7:
        unint64_t result = "kDYFEMTLAccelerationStructure_doesAliasAnyResources_count";
        break;
      case 0xFFFFC2D8:
        unint64_t result = "kDYFEMTLAccelerationStructure_doesAliasResource";
        break;
      case 0xFFFFC2D9:
        unint64_t result = "kDYFEMTLAccelerationStructure_isAliasable";
        break;
      case 0xFFFFC2DA:
        unint64_t result = "kDYFEMTLAccelerationStructure_isComplete";
        break;
      case 0xFFFFC2DB:
        unint64_t result = "kDYFEMTLAccelerationStructure_isPurgeable";
        break;
      case 0xFFFFC2DC:
        unint64_t result = "kDYFEMTLAccelerationStructure_isWriteComplete";
        break;
      case 0xFFFFC2DD:
        unint64_t result = "kDYFEMTLAccelerationStructure_makeAliasable";
        break;
      case 0xFFFFC2DE:
        unint64_t result = "kDYFEMTLAccelerationStructure_setPurgeableState";
        break;
      case 0xFFFFC2DF:
        unint64_t result = "kDYFEMTLAccelerationStructure_waitUntilComplete";
        break;
      case 0xFFFFC2E0:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_setLabel";
        break;
      case 0xFFFFC2E1:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_buildAccelerationStructure_descriptor_scratchBuffer_scratchBufferOffset";
        break;
      case 0xFFFFC2E2:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_copyAccelerationStructure_toAccelerationStructure";
        break;
      case 0xFFFFC2E3:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_copyAndCompactAccelerationStructure_toAccelerationStructure";
        break;
      case 0xFFFFC2E4:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_dealloc";
        break;
      case 0xFFFFC2E5:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializeAccelerationStructure_fromBuffer_offset";
        break;
      case 0xFFFFC2E6:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_endEncoding";
        break;
      case 0xFFFFC2E7:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_insertDebugSignpost";
        break;
      case 0xFFFFC2E8:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_popDebugGroup";
        break;
      case 0xFFFFC2E9:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_pushDebugGroup";
        break;
      case 0xFFFFC2EA:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_refitAccelerationStructure_descriptor_destination_scratchBu"
                 "ffer_scratchBufferOffset";
        break;
      case 0xFFFFC2EB:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier";
        break;
      case 0xFFFFC2EC:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_serializeAccelerationStructure_toBuffer_offset";
        break;
      case 0xFFFFC2ED:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_updateFence";
        break;
      case 0xFFFFC2EE:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_useHeap";
        break;
      case 0xFFFFC2EF:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_useHeaps_count";
        break;
      case 0xFFFFC2F0:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_useResource_usage";
        break;
      case 0xFFFFC2F1:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_useResources_count_usage";
        break;
      case 0xFFFFC2F2:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_waitForFence";
        break;
      case 0xFFFFC2F3:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeCompactedAccelerationStructureSize_toBuffer_offset";
        break;
      case 0xFFFFC2F4:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeSerializedAccelerationStructureSize_toBuffer_offset";
        break;
      case 0xFFFFC2F5:
        unint64_t result = "kDYFEMTLArgumentEncoder_setAccelerationStructure_atIndex";
        break;
      case 0xFFFFC2F6:
        unint64_t result = "kDYFEMTLArgumentEncoder_setFunctionTable_atIndex";
        break;
      case 0xFFFFC2F7:
        unint64_t result = "kDYFEMTLArgumentEncoder_setFunctionTables_withRange";
        break;
      case 0xFFFFC2F8:
        unint64_t result = "kDYFEMTLCommandQueue_getSPIStats";
        break;
      case 0xFFFFC2F9:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setAccelerationStructure_atBufferIndex";
        break;
      case 0xFFFFC2FA:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setFunctionTable_atIndex";
        break;
      case 0xFFFFC2FB:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setFunctionTables_withRange";
        break;
      case 0xFFFFC2FC:
        unint64_t result = "kDYFEMTLComputePipelineState_functionHandleWithFunction";
        break;
      case 0xFFFFC2FD:
        unint64_t result = "kDYFEMTLComputePipelineState_functionHandlesWithFunctions";
        break;
      case 0xFFFFC2FE:
        unint64_t result = "kDYFEMTLComputePipelineState_newComputePipelineStateWithAdditionalDynamicFunctions";
        break;
      case 0xFFFFC2FF:
        unint64_t result = "kDYFEMTLDevice_compileVisibleFunction_withDescriptor_completionHandler";
        break;
      case 0xFFFFC300:
        unint64_t result = "kDYFEMTLDevice_compileVisibleFunction_withDescriptor_error";
        break;
      case 0xFFFFC301:
        unint64_t result = "kDYFEMTLDevice_newAccelerationStructureWithDescriptor";
        break;
      case 0xFFFFC302:
        unint64_t result = "kDYFEMTLDevice_newAccelerationStructureWithSize";
        break;
      case 0xFFFFC303:
        unint64_t result = "kDYFEMTLDevice_newDynamicLibraryWithURL_error";
        break;
      case 0xFFFFC304:
        unint64_t result = "kDYFEMTLDevice_newVisibleFunctionTableWithDescriptor";
        break;
      case 0xFFFFC305:
        unint64_t result = "kDYFEMTLDynamicLibrary_serializeToURL_options_error";
        break;
      case 0xFFFFC306:
        unint64_t result = "kDYFEMTLFunctionHandle_dealloc";
        break;
      case 0xFFFFC307:
        unint64_t result = "kDYFEMTLLibrary_newFunctionWithDescriptor_completionHandler";
        break;
      case 0xFFFFC308:
        unint64_t result = "kDYFEMTLLibrary_newFunctionWithDescriptor_error";
        break;
      case 0xFFFFC309:
        unint64_t result = "kDYFEMTLVisibleFunctionTable_setLabel";
        break;
      case 0xFFFFC30A:
        unint64_t result = "kDYFEMTLVisibleFunctionTable_setResponsibleProcess";
        break;
      case 0xFFFFC30B:
        unint64_t result = "kDYFEMTLVisibleFunctionTable_dealloc";
        break;
      case 0xFFFFC30C:
        unint64_t result = "kDYFEMTLVisibleFunctionTable_doesAliasAllResources_count";
        break;
      case 0xFFFFC30D:
        unint64_t result = "kDYFEMTLVisibleFunctionTable_doesAliasAnyResources_count";
        break;
      case 0xFFFFC30E:
        unint64_t result = "kDYFEMTLVisibleFunctionTable_doesAliasResource";
        break;
      case 0xFFFFC30F:
        unint64_t result = "kDYFEMTLVisibleFunctionTable_isAliasable";
        break;
      case 0xFFFFC310:
        unint64_t result = "kDYFEMTLVisibleFunctionTable_isPurgeable";
        break;
      case 0xFFFFC311:
        unint64_t result = "kDYFEMTLVisibleFunctionTable_makeAliasable";
        break;
      case 0xFFFFC312:
        unint64_t result = "kDYFEMTLVisibleFunctionTable_setFunction_atIndex";
        break;
      case 0xFFFFC313:
        unint64_t result = "kDYFEMTLVisibleFunctionTable_setFunctions_withRange";
        break;
      case 0xFFFFC314:
        unint64_t result = "kDYFEMTLVisibleFunctionTable_setPurgeableState";
        break;
      case 0xFFFFC315:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializeAccelerationStructure_fromBuffer_serializedBufferOffset";
        break;
      case 0xFFFFC316:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializeAccelerationStructure_primitiveAccelerationStruc"
                 "tures_fromBuffer_serializedBufferOffset";
        break;
      case 0xFFFFC317:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_serializeAccelerationStructure_toBuffer_serializedBufferOffset";
        break;
      case 0xFFFFC318:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeDeserializedAccelerationStructureSize_serializedOffset"
                 "_toBuffer_sizeBufferOffset";
        break;
      case 0xFFFFC319:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeDeserializedPrimitiveAccelerationStructureSizes_serial"
                 "izedOffset_toBuffer_sizesBufferOffset";
        break;
      case 0xFFFFC31A:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeGeometryOfAccelerationStructure_toBuffer_geometryBufferOffset";
        break;
      case 0xFFFFC31B:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeGeometrySizeOfAccelerationStructure_toBuffer_sizeBufferOffset";
        break;
      case 0xFFFFC31C:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeSerializedAccelerationStructureSize_toBuffer_sizeBufferOffset";
        break;
      case 0xFFFFC31D:
        unint64_t result = "kDYFEMTLCommandBuffer_blitCommandEncoderWithDescriptor";
        break;
      case 0xFFFFC31E:
        unint64_t result = "kDYFEMTLCommandBuffer_computeCommandEncoderWithDescriptor";
        break;
      case 0xFFFFC31F:
        unint64_t result = "kDYFEMTLCommandBuffer_resourceStateCommandEncoderWithDescriptor";
        break;
      case 0xFFFFC320:
        unint64_t result = "kDYFEMTLCommandBuffer_sampledComputeCommandEncoderWithDescriptor_programInfoBuffer_capacity";
        break;
      case 0xFFFFC321:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setIntersectionFunctionTable_atBufferIndex";
        break;
      case 0xFFFFC322:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setIntersectionFunctionTables_withBufferRange";
        break;
      case 0xFFFFC323:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setVisibleFunctionTable_atBufferIndex";
        break;
      case 0xFFFFC324:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setVisibleFunctionTables_withBufferRange";
        break;
      case 0xFFFFC325:
        unint64_t result = "kDYFEMTLComputePipelineState_newComputePipelineStateWithAdditionalBinaryFunctions";
        break;
      case 0xFFFFC326:
        unint64_t result = "kDYFEMTLComputePipelineState_newVisibleFunctionTableWithDescriptor";
        break;
      case 0xFFFFC327:
        unint64_t result = "kDYFEMTLDevice_newIntersectionFunctionTableWithDescriptor";
        break;
      case 0xFFFFC328:
        unint64_t result = "kDYFEMTLDevice_supportsCounterSampling";
        break;
      case 0xFFFFC329:
        unint64_t result = "kDYFEMTLDevice_supportsTextureWriteFPRoundingMode";
        break;
      case 0xFFFFC32A:
        unint64_t result = "kDYFEMTLVisibleFunctionTable_setGlobalBuffer";
        break;
      case 0xFFFFC32B:
        unint64_t result = "kDYFEMTLVisibleFunctionTable_setGlobalBufferOffset";
        break;
      case 0xFFFFC32C:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_setGlobalBuffer";
        break;
      case 0xFFFFC32D:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_setGlobalBufferOffset";
        break;
      case 0xFFFFC32E:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_setLabel";
        break;
      case 0xFFFFC32F:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_setResponsibleProcess";
        break;
      case 0xFFFFC330:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_dealloc";
        break;
      case 0xFFFFC331:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_doesAliasAllResources_count";
        break;
      case 0xFFFFC332:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_doesAliasAnyResources_count";
        break;
      case 0xFFFFC333:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_doesAliasResource";
        break;
      case 0xFFFFC334:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_isAliasable";
        break;
      case 0xFFFFC335:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_isComplete";
        break;
      case 0xFFFFC336:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_isPurgeable";
        break;
      case 0xFFFFC337:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_isWriteComplete";
        break;
      case 0xFFFFC338:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_makeAliasable";
        break;
      case 0xFFFFC339:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_setFunction_atIndex";
        break;
      case 0xFFFFC33A:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_setFunctions_withRange";
        break;
      case 0xFFFFC33B:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_setPurgeableState";
        break;
      case 0xFFFFC33C:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_waitUntilComplete";
        break;
      case 0xFFFFC33D:
        unint64_t result = "kDYFEMTLBinaryArchive_addComputePipelineFunctionsWithDescriptor_options_error";
        break;
      case 0xFFFFC33E:
        unint64_t result = "kDYFEMTLBinaryArchive_addRenderPipelineFunctionsWithDescriptor_options_error";
        break;
      case 0xFFFFC33F:
        unint64_t result = "kDYFEMTLBinaryArchive_addTileRenderPipelineFunctionsWithDescriptor_options_error";
        break;
      case 0xFFFFC340:
        unint64_t result = "kDYFEMTLAccelerationStructure_setDescriptor";
        break;
      case 0xFFFFC341:
        unint64_t result = "kDYFEMTLLibrary_newIntersectionFunctionWithDescriptor_completionHandler";
        break;
      case 0xFFFFC342:
        unint64_t result = "kDYFEMTLLibrary_newIntersectionFunctionWithDescriptor_error";
        break;
      case 0xFFFFC343:
        unint64_t result = "kDYFEMTLArgumentEncoder_setIntersectionFunctionTable_atBufferIndex";
        break;
      case 0xFFFFC344:
        unint64_t result = "kDYFEMTLArgumentEncoder_setIntersectionFunctionTables_withBufferRange";
        break;
      case 0xFFFFC345:
        unint64_t result = "kDYFEMTLArgumentEncoder_setVisibleFunctionTable_atBufferIndex";
        break;
      case 0xFFFFC346:
        unint64_t result = "kDYFEMTLArgumentEncoder_setVisibleFunctionTables_withBufferRange";
        break;
      case 0xFFFFC347:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_setBuffer_offset_atIndex";
        break;
      case 0xFFFFC348:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_setBuffers_offsets_withRange";
        break;
      case 0xFFFFC349:
        unint64_t result = "kDYFEMTLVisibleFunctionTable_setBuffer_offset_atIndex";
        break;
      case 0xFFFFC34A:
        unint64_t result = "kDYFEMTLVisibleFunctionTable_setBuffers_offsets_withRange";
        break;
      case 0xFFFFC34B:
        unint64_t result = "kDYFEMTLComputePipelineState_newComputePipelineStateWithAdditionalBinaryFunctions_error";
        break;
      case 0xFFFFC34C:
        unint64_t result = "kDYFEMTLComputePipelineState_newIntersectionFunctionTableWithDescriptor";
        break;
      case 0xFFFFC34D:
        unint64_t result = "kDYFEMTLArgumentEncoder_setIntersectionFunctionTable_atIndex";
        break;
      case 0xFFFFC34E:
        unint64_t result = "kDYFEMTLArgumentEncoder_setIntersectionFunctionTables_withRange";
        break;
      case 0xFFFFC34F:
        unint64_t result = "kDYFEMTLArgumentEncoder_setVisibleFunctionTable_atIndex";
        break;
      case 0xFFFFC350:
        unint64_t result = "kDYFEMTLArgumentEncoder_setVisibleFunctionTables_withRange";
        break;
      case 0xFFFFC351:
        unint64_t result = "kDYFEMTLDevice_supportsTextureWriteRoundingMode";
        break;
      case 0xFFFFC352:
        unint64_t result = "kDYFEMTLTexture_didModifyData";
        break;
      case 0xFFFFC353:
        unint64_t result = "kDYFEMTLCommandBuffer_setSharedIndirectionTable";
        break;
      case 0xFFFFC354:
        unint64_t result = "kDYFEMTLDevice_newPrecompiledRenderPipelineStateWithDescriptor_options_pipelineCache_completionHandler";
        break;
      case 0xFFFFC355:
        unint64_t result = "kDYFEMTLDevice_newDynamicLibraryWithURL_options_error";
        break;
      case 0xFFFFC356:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_setOpaqueTriangleIntersectionFunctionWithSignature_atIndex";
        break;
      case 0xFFFFC357:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_setOpaqueTriangleIntersectionFunctionWithSignature_withRange";
        break;
      case 0xFFFFC358:
        unint64_t result = "kDYFEMTLVisibleFunctionTable_setValue_atIndex";
        break;
      case 0xFFFFC359:
        unint64_t result = "kDYFEMTLVisibleFunctionTable_setValue_withRange";
        break;
      case 0xFFFFC35A:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_setVisibleFunctionTable_atBufferIndex";
        break;
      case 0xFFFFC35B:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_setVisibleFunctionTables_withBufferRange";
        break;
      case 0xFFFFC35C:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializeInstanceAccelerationStructure_primitiveAccelerat"
                 "ionStructures_fromBuffer_serializedBufferOffset";
        break;
      case 0xFFFFC35D:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializePrimitiveAccelerationStructure_fromBuffer_serial"
                 "izedBufferOffset";
        break;
      case 0xFFFFC35E:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_serializeInstanceAccelerationStructure_primitiveAcceleratio"
                 "nStructures_toBuffer_serializedBufferOffset";
        break;
      case 0xFFFFC35F:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_serializePrimitiveAccelerationStructure_toBuffer_serializedBufferOffset";
        break;
      case 0xFFFFC360:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeGenericBVHStructureOfAccelerationStructure_headerBuffe"
                 "r_headerBufferOffset_innerNodeBuffer_innerNodeBufferOffset_leafNodeBuffer_leafNodeBufferOffset_primitiv"
                 "eBuffer_primitiveBufferOffset";
        break;
      case 0xFFFFC361:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeGenericBVHStructureSizesOfAccelerationStructure_toBuff"
                 "er_sizesBufferOffset";
        break;
      case 0xFFFFC362:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_encodeEndDoWhile_offset_comparison_referenceValue";
        break;
      case 0xFFFFC363:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_encodeEndIf";
        break;
      case 0xFFFFC364:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_encodeEndWhile";
        break;
      case 0xFFFFC365:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_encodeStartDoWhile";
        break;
      case 0xFFFFC366:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_encodeStartElse";
        break;
      case 0xFFFFC367:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_encodeStartIf_offset_comparison_referenceValue";
        break;
      case 0xFFFFC368:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_encodeStartWhile_offset_comparison_referenceValue";
        break;
      case 0xFFFFC369:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_insertCompressedTextureReinterpretationFlush";
        break;
      case 0xFFFFC36A:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_useResourceGroup_usage";
        break;
      case 0xFFFFC36B:
        unint64_t result = "kDYFEMTLDevice_newBufferWithDescriptor";
        break;
      case 0xFFFFC36C:
        unint64_t result = "kDYFEMTLRelocation_dealloc";
        break;
      case 0xFFFFC36D:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_useResourceGroup_usage_stages";
        break;
      case 0xFFFFC36E:
        unint64_t result = "kDYFEMTLDevice_newAccelerationStructureWithSize_resourceIndex";
        break;
      case 0xFFFFC36F:
        unint64_t result = "kDYFEMTLBuffer_setParentGPUAddress";
        break;
      case 0xFFFFC370:
        unint64_t result = "kDYFEMTLBuffer_setParentGPUSize";
        break;
      case 0xFFFFC371:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_insertUncompressedToCompressedFlush";
        break;
      case 0xFFFFC372:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeCompactedAccelerationStructureSize_toBuffer_offset_sizeDataType";
        break;
      case 0xFFFFC373:
        unint64_t result = "kDYFEMTLCommandBuffer_encodeDashboardFinalizeForResourceGroup_dashboard_value_forIndex";
        break;
      case 0xFFFFC374:
        unint64_t result = "kDYFEMTLCommandBuffer_encodeDashboardTagForResourceGroup";
        break;
      case 0xFFFFC375:
        unint64_t result = "kDYFEMTLDevice_setPluginData";
        break;
      case 0xFFFFC376:
        unint64_t result = "kDYFEMTLDevice_loadDynamicLibrariesForComputeDescriptor_options_error";
        break;
      case 0xFFFFC377:
        unint64_t result = "kDYFEMTLDevice_loadDynamicLibrariesForFunction_insertLibraries_options_error";
        break;
      case 0xFFFFC378:
        unint64_t result = "kDYFEMTLDevice_newLateEvalEvent";
        break;
      case 0xFFFFC379:
        unint64_t result = "kDYFEMTLFunctionPointerHandle_dealloc";
        break;
      case 0xFFFFC37A:
        unint64_t result = "kDYFEMTLFunctionPrivateArgument_dealloc";
        break;
      case 0xFFFFC37B:
        unint64_t result = "kDYFEMTLFunctionStitchingAttribute_dealloc";
        break;
      case 0xFFFFC37C:
        unint64_t result = "kDYFEMTLFunctionStitchingNode_dealloc";
        break;
      case 0xFFFFC37D:
        unint64_t result = "kDYFEMTLLateEvalEvent_setLabel";
        break;
      case 0xFFFFC37E:
        unint64_t result = "kDYFEMTLLateEvalEvent_setSignaledValue";
        break;
      case 0xFFFFC37F:
        unint64_t result = "kDYFEMTLLateEvalEvent_dealloc";
        break;
      case 0xFFFFC380:
        unint64_t result = "kDYFEMTLLateEvalEvent_newSharedEventHandle";
        break;
      case 0xFFFFC381:
        unint64_t result = "kDYFEMTLLibrary_setShaderValidationEnabled";
        break;
      case 0xFFFFC382:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_dispatchThreadsPerTile_inRegion";
        break;
      case 0xFFFFC383:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshAccelerationStructure_atBufferIndex";
        break;
      case 0xFFFFC384:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshIntersectionFunctionTable_atBufferIndex";
        break;
      case 0xFFFFC385:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshIntersectionFunctionTables_withBufferRange";
        break;
      case 0xFFFFC386:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshVisibleFunctionTable_atBufferIndex";
        break;
      case 0xFFFFC387:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshVisibleFunctionTables_withBufferRange";
        break;
      case 0xFFFFC388:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectAccelerationStructure_atBufferIndex";
        break;
      case 0xFFFFC389:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectIntersectionFunctionTable_atBufferIndex";
        break;
      case 0xFFFFC38A:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectIntersectionFunctionTables_withBufferRange";
        break;
      case 0xFFFFC38B:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectVisibleFunctionTable_atBufferIndex";
        break;
      case 0xFFFFC38C:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectVisibleFunctionTables_withBufferRange";
        break;
      case 0xFFFFC38D:
        unint64_t result = "kDYFEMTLDevice_compileVisibleFunction_withDescriptor_destinationBinaryArchive_error";
        break;
      case 0xFFFFC38E:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_fillBuffer_range_pattern4";
        break;
      case 0xFFFFC38F:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_fillTexture_level_slice_region_bytes_length";
        break;
      case 0xFFFFC390:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_fillTexture_level_slice_region_color";
        break;
      case 0xFFFFC391:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_fillTexture_level_slice_region_color_pixelFormat";
        break;
      case 0xFFFFC392:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_invalidateCompressedTexture";
        break;
      case 0xFFFFC393:
        unint64_t result = "kDYFEMTLBlitCommandEncoder_invalidateCompressedTexture_slice_level";
        break;
      case 0xFFFFC394:
        unint64_t result = "kDYFEMTLDevice_newLibraryWithGraphs_functions_error";
        break;
      case 0xFFFFC395:
        unint64_t result = "kDYFEMTLDevice_newLibraryWithGraphsSPI_functions_error";
        break;
      case 0xFFFFC396:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializeInstanceAccelerationStructure_primitiveAccelerat"
                 "ionStructures_fromBuffer_serializedBufferOffset_withDescriptor";
        break;
      case 0xFFFFC397:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializePrimitiveAccelerationStructure_fromBuffer_serial"
                 "izedBufferOffset_withDescriptor";
        break;
      case 0xFFFFC398:
        unint64_t result = "kDYFEMTLDevice_newAccelerationStructureWithBuffer_offset";
        break;
      case 0xFFFFC399:
        unint64_t result = "kDYFEMTLRenderPipelineState_functionHandleWithFunction_stage";
        break;
      case 0xFFFFC39A:
        unint64_t result = "kDYFEMTLRenderPipelineState_newIntersectionFunctionTableWithDescriptor_stage";
        break;
      case 0xFFFFC39B:
        unint64_t result = "kDYFEMTLRenderPipelineState_newRenderPipelineStateWithAdditionalBinaryFunctions_error";
        break;
      case 0xFFFFC39C:
        unint64_t result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableWithDescriptor_stage";
        break;
      case 0xFFFFC39D:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentAccelerationStructure_atBufferIndex";
        break;
      case 0xFFFFC39E:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentIntersectionFunctionTable_atBufferIndex";
        break;
      case 0xFFFFC39F:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentIntersectionFunctionTables_withBufferRange";
        break;
      case 0xFFFFC3A0:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentVisibleFunctionTable_atBufferIndex";
        break;
      case 0xFFFFC3A1:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setFragmentVisibleFunctionTables_withBufferRange";
        break;
      case 0xFFFFC3A2:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setTileAccelerationStructure_atBufferIndex";
        break;
      case 0xFFFFC3A3:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setTileIntersectionFunctionTable_atBufferIndex";
        break;
      case 0xFFFFC3A4:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setTileIntersectionFunctionTables_withBufferRange";
        break;
      case 0xFFFFC3A5:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setTileVisibleFunctionTable_atBufferIndex";
        break;
      case 0xFFFFC3A6:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setTileVisibleFunctionTables_withBufferRange";
        break;
      case 0xFFFFC3A7:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexAccelerationStructure_atBufferIndex";
        break;
      case 0xFFFFC3A8:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexIntersectionFunctionTable_atBufferIndex";
        break;
      case 0xFFFFC3A9:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexIntersectionFunctionTables_withBufferRange";
        break;
      case 0xFFFFC3AA:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexVisibleFunctionTable_atBufferIndex";
        break;
      case 0xFFFFC3AB:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexVisibleFunctionTables_withBufferRange";
        break;
      case 0xFFFFC3AC:
        unint64_t result = "kDYFEMTLRenderPipelineState_fragmentFunctionHandleWithFunction";
        break;
      case 0xFFFFC3AD:
        unint64_t result = "kDYFEMTLRenderPipelineState_newFragmentIntersectionFunctionTableWithDescriptor";
        break;
      case 0xFFFFC3AE:
        unint64_t result = "kDYFEMTLRenderPipelineState_newTileIntersectionFunctionTableWithDescriptor";
        break;
      case 0xFFFFC3AF:
        unint64_t result = "kDYFEMTLRenderPipelineState_newVertexIntersectionFunctionTableWithDescriptor";
        break;
      case 0xFFFFC3B0:
        unint64_t result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableFromFragmentStageWithDescriptor";
        break;
      case 0xFFFFC3B1:
        unint64_t result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableFromTileStageWithDescriptor";
        break;
      case 0xFFFFC3B2:
        unint64_t result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableFromVertexStageWithDescriptor";
        break;
      case 0xFFFFC3B3:
        unint64_t result = "kDYFEMTLRenderPipelineState_tileFunctionHandleWithFunction";
        break;
      case 0xFFFFC3B4:
        unint64_t result = "kDYFEMTLRenderPipelineState_vertexFunctionHandleWithFunction";
        break;
      case 0xFFFFC3B5:
        unint64_t result = "kDYFEMTLDevice_newLibraryWithDescriptor_error";
        break;
      case 0xFFFFC3B6:
        unint64_t result = "kDYFEMTLDevice_newLibraryWithDescriptorSPI_error";
        break;
      case 0xFFFFC3B7:
        unint64_t result = "kDYFEMTLDevice_getBVHBuilderLock";
        break;
      case 0xFFFFC3B8:
        unint64_t result = "kDYFEMTLDevice_getRawBVHBuilderPtr";
        break;
      case 0xFFFFC3B9:
        unint64_t result = "kDYFEMTLDevice_setRawBVHBuilderPtr";
        break;
      case 0xFFFFC3BA:
        unint64_t result = "kDYFEMTLDevice_newFunctionWithGLCoreIR_functionType";
        break;
      case 0xFFFFC3BB:
        unint64_t result = "kDYFEMTLDevice_newFunctionWithGLCoreIR_inputsDescription_functionType";
        break;
      case 0xFFFFC3BC:
        unint64_t result = "kDYFEMTLDevice_newFunctionWithGLESIR_functionType";
        break;
      case 0xFFFFC3BD:
        unint64_t result = "kDYFEMTLDevice_newFunctionWithGLESIR_inputsDescription_functionType";
        break;
      case 0xFFFFC3BE:
        unint64_t result = "kDYFEMTLBinaryArchive_addLibraryWithDescriptor_error";
        break;
      case 0xFFFFC3BF:
        unint64_t result = "kDYFEMTLDevice_newLibraryWithDescriptor_completionHandler";
        break;
      case 0xFFFFC3C0:
        unint64_t result = "kDYFEMTLLateEvalEvent_waitUntilSignaledValue_timeoutMS";
        break;
      case 0xFFFFC3C1:
        unint64_t result = "kDYFEMTLLibrary_serializeToURL_error";
        break;
      case 0xFFFFC3C2:
        unint64_t result = "kDYFEMTLSharedEvent_waitUntilSignaledValue_timeoutMS";
        break;
      case 0xFFFFC3C3:
        unint64_t result = "kDYFEMTLDevice_newLibraryWithStitchedDescriptor_completionHandler";
        break;
      case 0xFFFFC3C4:
        unint64_t result = "kDYFEMTLDevice_newLibraryWithStitchedDescriptor_error";
        break;
      case 0xFFFFC3C5:
        unint64_t result = "kDYFEMTLDevice_newLibraryWithStitchedDescriptorSPI_error";
        break;
      case 0xFFFFC3C6:
        unint64_t result = "kDYFEMTLDevice_deserializeInstanceAccelerationStructureFromBytes_primitiveAccelerationStructures_withDescriptor";
        break;
      case 0xFFFFC3C7:
        unint64_t result = "kDYFEMTLDevice_deserializePrimitiveAccelerationStructureFromBytes_withDescriptor";
        break;
      case 0xFFFFC3C8:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_drawMeshThreadgroups_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup";
        break;
      case 0xFFFFC3C9:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_drawMeshThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerObje"
                 "ctThreadgroup_threadsPerMeshThreadgroup";
        break;
      case 0xFFFFC3CA:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_drawMeshThreads_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup";
        break;
      case 0xFFFFC3CB:
        unint64_t result = "kDYFEMTLRenderPipelineState_setUsesMeshShaderEmulation";
        break;
      case 0xFFFFC3CC:
        unint64_t result = "kDYFEMTLRasterizationRateMap_formattedDescription";
        break;
      case 0xFFFFC3CD:
        unint64_t result = "kDYFEMTLRasterizationRateMap_resetUsingDescriptor";
        break;
      case 0xFFFFC3CE:
        unint64_t result = "kDYFEMTLCommandBuffer_encodeDashboardFinalizeForResourceGroup_dashboard_values_indices_count";
        break;
      case 0xFFFFC3CF:
        unint64_t result = "kDYFEMTLBinaryArchive_addMeshRenderPipelineFunctionsWithDescriptor_error";
        break;
      case 0xFFFFC3D0:
        unint64_t result = "kDYFEMTLBinaryArchive_addMeshRenderPipelineFunctionsWithDescriptor_options_error";
        break;
      case 0xFFFFC3D1:
        unint64_t result = "kDYFEMTLBinaryArchive_storeMeshRenderPipelineDescriptor";
        break;
      case 0xFFFFC3D2:
        unint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithMeshDescriptor_completionHandler";
        break;
      case 0xFFFFC3D3:
        unint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithMeshDescriptor_error";
        break;
      case 0xFFFFC3D4:
        unint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithMeshDescriptor_options_completionHandler";
        break;
      case 0xFFFFC3D5:
        unint64_t result = "kDYFEMTLDevice_newRenderPipelineStateWithMeshDescriptor_options_reflection_error";
        break;
      case 0xFFFFC3D6:
        unint64_t result = "kDYFEMTLDevice_writeMeshShaderEmulatorDataStructureHeader_meshShaderPSO_scalingFactor";
        break;
      case 0xFFFFC3D7:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshBuffer_offset_atIndex";
        break;
      case 0xFFFFC3D8:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshBufferOffset_atIndex";
        break;
      case 0xFFFFC3D9:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshBuffers_offsets_withRange";
        break;
      case 0xFFFFC3DA:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshBytes_length_atIndex";
        break;
      case 0xFFFFC3DB:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshSamplerState_atIndex";
        break;
      case 0xFFFFC3DC:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 0xFFFFC3DD:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 0xFFFFC3DE:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshSamplerStates_withRange";
        break;
      case 0xFFFFC3DF:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshTexture_atIndex";
        break;
      case 0xFFFFC3E0:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setMeshTextures_withRange";
        break;
      case 0xFFFFC3E1:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectBuffer_offset_atIndex";
        break;
      case 0xFFFFC3E2:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectBufferOffset_atIndex";
        break;
      case 0xFFFFC3E3:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectBuffers_offsets_withRange";
        break;
      case 0xFFFFC3E4:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectBytes_length_atIndex";
        break;
      case 0xFFFFC3E5:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectSamplerState_atIndex";
        break;
      case 0xFFFFC3E6:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 0xFFFFC3E7:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 0xFFFFC3E8:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectSamplerStates_withRange";
        break;
      case 0xFFFFC3E9:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectTexture_atIndex";
        break;
      case 0xFFFFC3EA:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectTextures_withRange";
        break;
      case 0xFFFFC3EB:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setObjectThreadgroupMemoryLength_atIndex";
        break;
      case 0xFFFFC3EC:
        unint64_t result = "kDYFEMTLRenderPipelineState_setEmulationMeshMaxPrimitiveCount";
        break;
      case 0xFFFFC3ED:
        unint64_t result = "kDYFEMTLRenderPipelineState_setEmulationMeshMaxVertexCount";
        break;
      case 0xFFFFC3EE:
        unint64_t result = "kDYFEMTLRenderPipelineState_setEmulationMeshShaderIntermediateBufferSlot";
        break;
      case 0xFFFFC3EF:
        unint64_t result = "kDYFEMTLRenderPipelineState_setEmulationMeshShaderPSO";
        break;
      case 0xFFFFC3F0:
        unint64_t result = "kDYFEMTLRenderPipelineState_setEmulationMeshSize";
        break;
      case 0xFFFFC3F1:
        unint64_t result = "kDYFEMTLRenderPipelineState_setEmulationObjectShaderIntermediateBufferSlot";
        break;
      case 0xFFFFC3F2:
        unint64_t result = "kDYFEMTLRenderPipelineState_setEmulationObjectShaderPSO";
        break;
      case 0xFFFFC3F3:
        unint64_t result = "kDYFEMTLRenderPipelineState_setEmulationVertexShaderIntermediateBufferSlot";
        break;
      case 0xFFFFC3F4:
        unint64_t result = "kDYFEMTLRenderPipelineState_meshFunctionHandleWithFunction";
        break;
      case 0xFFFFC3F5:
        unint64_t result = "kDYFEMTLRenderPipelineState_newMeshIntersectionFunctionTableWithDescriptor";
        break;
      case 0xFFFFC3F6:
        unint64_t result = "kDYFEMTLRenderPipelineState_newObjectIntersectionFunctionTableWithDescriptor";
        break;
      case 0xFFFFC3F7:
        unint64_t result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableFromMeshStageWithDescriptor";
        break;
      case 0xFFFFC3F8:
        unint64_t result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableFromObjectStageWithDescriptor";
        break;
      case 0xFFFFC3F9:
        unint64_t result = "kDYFEMTLRenderPipelineState_objectFunctionHandleWithFunction";
        break;
      case 0xFFFFC3FA:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_refitAccelerationStructure_descriptor_destination_scratchBu"
                 "ffer_scratchBufferOffset_options";
        break;
      case 0xFFFFC3FB:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeAccelerationStructureSerializationData_toBuffer_offset";
        break;
      case 0xFFFFC3FC:
        unint64_t result = "kDYFEMTLCommandBuffer_accelerationStructureCommandEncoderWithDescriptor";
        break;
      case 0xFFFFC3FD:
        unint64_t result = "kDYFEMTLDevice_deserializeInstanceAccelerationStructure_fromBytes_primitiveAccelerationStructures_withDescriptor";
        break;
      case 0xFFFFC3FE:
        unint64_t result = "kDYFEMTLDevice_deserializePrimitiveAccelerationStructure_fromBytes_withDescriptor";
        break;
      case 0xFFFFC3FF:
        unint64_t result = "kDYFEMTLDevice_heapAccelerationStructureSizeAndAlignWithDescriptor";
        break;
      case 0xFFFFC400:
        unint64_t result = "kDYFEMTLDevice_heapAccelerationStructureSizeAndAlignWithSize";
        break;
      case 0xFFFFC401:
        unint64_t result = "kDYFEMTLDevice_newAccelerationStructureWithBuffer_offset_resourceIndex";
        break;
      case 0xFFFFC402:
        unint64_t result = "kDYFEMTLDevice_newAccelerationStructureWithSize_withDescriptor";
        break;
      case 0xFFFFC403:
        unint64_t result = "kDYFEMTLBuffer__aneIOSurface";
        break;
      case 0xFFFFC404:
        unint64_t result = "kDYFEMTLHeap_newAccelerationStructureWithDescriptor";
        break;
      case 0xFFFFC405:
        unint64_t result = "kDYFEMTLHeap_newAccelerationStructureWithDescriptor_offset";
        break;
      case 0xFFFFC406:
        unint64_t result = "kDYFEMTLHeap_newAccelerationStructureWithSize";
        break;
      case 0xFFFFC407:
        unint64_t result = "kDYFEMTLHeap_newAccelerationStructureWithSize_offset";
        break;
      case 0xFFFFC408:
        unint64_t result = "kDYFEMTLHeap_newAccelerationStructureWithSize_offset_resourceIndex";
        break;
      case 0xFFFFC409:
        unint64_t result = "kDYFEMTLHeap_newAccelerationStructureWithSize_resourceIndex";
        break;
      case 0xFFFFC40A:
        unint64_t result = "kDYFEMTLDevice_newIOCommandQueueWithDescriptor_error";
        break;
      case 0xFFFFC40B:
        unint64_t result = "kDYFEMTLDevice_newIOHandleWithURL_compressionType_error";
        break;
      case 0xFFFFC40C:
        unint64_t result = "kDYFEMTLDevice_newIOHandleWithURL_error";
        break;
      case 0xFFFFC40D:
        unint64_t result = "kDYFEMTLDevice_newPerformanceStateAssertion_error";
        break;
      case 0xFFFFC40E:
        unint64_t result = "kDYFEMTLIOCommandBuffer_setStatus";
        break;
      case 0xFFFFC40F:
        unint64_t result = "kDYFEMTLIOCommandBuffer_addCompletedHandler";
        break;
      case 0xFFFFC410:
        unint64_t result = "kDYFEMTLIOCommandBuffer_barrier";
        break;
      case 0xFFFFC411:
        unint64_t result = "kDYFEMTLIOCommandBuffer_commit";
        break;
      case 0xFFFFC412:
        unint64_t result = "kDYFEMTLIOCommandBuffer_copyStatusToBuffer_offset";
        break;
      case 0xFFFFC413:
        unint64_t result = "kDYFEMTLIOCommandBuffer_dealloc";
        break;
      case 0xFFFFC414:
        unint64_t result = "kDYFEMTLIOCommandBuffer_encodeSignalEvent_value";
        break;
      case 0xFFFFC415:
        unint64_t result = "kDYFEMTLIOCommandBuffer_encodeWaitForEvent_value";
        break;
      case 0xFFFFC416:
        unint64_t result = "kDYFEMTLIOCommandBuffer_loadBuffer_offset_size_handle_handleOffset";
        break;
      case 0xFFFFC417:
        unint64_t result = "kDYFEMTLIOCommandBuffer_loadTexture_slice_level_size_bytesPerRow_bytesPerImage_dstOrigin_handle_handleOffset";
        break;
      case 0xFFFFC418:
        unint64_t result = "kDYFEMTLIOCommandBuffer_tryCancel";
        break;
      case 0xFFFFC419:
        unint64_t result = "kDYFEMTLIOCommandBuffer_waitUntilCompleted";
        break;
      case 0xFFFFC41A:
        unint64_t result = "kDYFEMTLIOCommandQueue_barrier";
        break;
      case 0xFFFFC41B:
        unint64_t result = "kDYFEMTLIOCommandQueue_commandBuffer";
        break;
      case 0xFFFFC41C:
        unint64_t result = "kDYFEMTLIOCommandQueue_dealloc";
        break;
      case 0xFFFFC41D:
        unint64_t result = "kDYFEMTLIOScratchBuffer_dealloc";
        break;
      case 0xFFFFC41E:
        unint64_t result = "kDYFEMTLIOScratchBufferAllocator_allocateScratchBufferWithMinimumSize";
        break;
      case 0xFFFFC41F:
        unint64_t result = "kDYFEMTLIOScratchBufferAllocator_dealloc";
        break;
      case 0xFFFFC420:
        unint64_t result = "kDYFEMTLIOHandle_dealloc";
        break;
      case 0xFFFFC421:
        unint64_t result = "kDYFEMTLBinaryArchive_getArchiveIDWithError";
        break;
      case 0xFFFFC422:
        unint64_t result = "kDYFEMTLCommandBuffer_presentDrawable_options";
        break;
      case 0xFFFFC423:
        unint64_t result = "kDYFEMTLEvent_setEnableBarrier";
        break;
      case 0xFFFFC424:
        unint64_t result = "kDYFEMTLLateEvalEvent_setEnableBarrier";
        break;
      case 0xFFFFC425:
        unint64_t result = "kDYFEMTLLibrary_bitCodeListForFunctions";
        break;
      case 0xFFFFC426:
        unint64_t result = "kDYFEMTLLibrary_bitCodeWithHash";
        break;
      case 0xFFFFC427:
        unint64_t result = "kDYFEMTLSharedEvent_setEnableBarrier";
        break;
      case 0xFFFFC428:
        unint64_t result = "kDYFEMTLDeadlineProfile_dealloc";
        break;
      case 0xFFFFC429:
        unint64_t result = "kDYFEMTLRenderPipelineState_setEmulationPrimitiveTopology";
        break;
      case 0xFFFFC42A:
        unint64_t result = "kDYFEMTLCommandBuffer_commitWithDeadline";
        break;
      case 0xFFFFC42B:
        unint64_t result = "kDYFEMTLDevice_newProfileWithExecutionSize";
        break;
      case 0xFFFFC42C:
        unint64_t result = "kDYFEMTLCommandBuffer_commitAndWaitUntilSubmittedWithDeadline";
        break;
      case 0xFFFFC42D:
        unint64_t result = "kDYFEMTLDevice_sparseTileSizeInBytesForSparsePageSize";
        break;
      case 0xFFFFC42E:
        unint64_t result = "kDYFEMTLDevice_sparseTileSizeWithTextureType_pixelFormat_sampleCount_sparsePageSize";
        break;
      case 0xFFFFC42F:
        unint64_t result = "kDYFEMTLIOCommandBuffer_setLabel";
        break;
      case 0xFFFFC430:
        unint64_t result = "kDYFEMTLIOCommandBuffer_enqueue";
        break;
      case 0xFFFFC431:
        unint64_t result = "kDYFEMTLIOCommandBuffer_loadBuffer_offset_size_sourceHandle_sourceHandleOffset";
        break;
      case 0xFFFFC432:
        unint64_t result = "kDYFEMTLIOCommandBuffer_loadTexture_slice_level_size_sourceBytesPerRow_sourceBytesPerImage_destinationO"
                 "rigin_sourceHandle_sourceHandleOffset";
        break;
      case 0xFFFFC433:
        unint64_t result = "kDYFEMTLIOCommandBuffer_signalEvent_value";
        break;
      case 0xFFFFC434:
        unint64_t result = "kDYFEMTLIOCommandBuffer_waitForEvent_value";
        break;
      case 0xFFFFC435:
        unint64_t result = "kDYFEMTLIOCommandQueue_setLabel";
        break;
      case 0xFFFFC436:
        unint64_t result = "kDYFEMTLIOCommandQueue_commandBufferWithUnretainedReferences";
        break;
      case 0xFFFFC437:
        unint64_t result = "kDYFEMTLIOHandle_setLabel";
        break;
      case 0xFFFFC438:
        unint64_t result = "kDYFEMTLIOHandle_decompress_size_offset_stagingBuffer_stagingBufferSize";
        break;
      case 0xFFFFC439:
        unint64_t result = "kDYFEMTLIOHandle_getHandleOffset_offset";
        break;
      case 0xFFFFC43A:
        unint64_t result = "kDYFEMTLIOHandle_read_size_offset_stagingBuffer_stagingBufferSize";
        break;
      case 0xFFFFC43B:
        unint64_t result = "kDYFEMTLIOHandle_readIntoStagingBuffer_offset_stagingBuffer_stagingBufferSize";
        break;
      case 0xFFFFC43C:
        unint64_t result = "kDYFEMTLIOHandle_stagingBufferSize_offset";
        break;
      case 0xFFFFC43D:
        unint64_t result = "kDYFEMTLIOScratchBufferAllocator_newScratchBufferWithMinimumSize";
        break;
      case 0xFFFFC43E:
        unint64_t result = "kDYFEMTLDevice_getMostCompatibleArchitecture";
        break;
      case 0xFFFFC43F:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_dispatchThreadsPerTile_inRegion_withRenderTargetArrayIndex";
        break;
      case 0xFFFFC440:
        unint64_t result = "kDYFEMTLDevice_newIOHandleWithURL_compressionMethod_error";
        break;
      case 0xFFFFC441:
        unint64_t result = "kDYFEMTLIOCommandBuffer_addBarrier";
        break;
      case 0xFFFFC442:
        unint64_t result = "kDYFEMTLIOCommandBuffer_loadBytes_size_sourceHandle_sourceHandleOffset";
        break;
      case 0xFFFFC443:
        unint64_t result = "kDYFEMTLIOCommandBuffer_popDebugGroup";
        break;
      case 0xFFFFC444:
        unint64_t result = "kDYFEMTLIOCommandBuffer_pushDebugGroup";
        break;
      case 0xFFFFC445:
        unint64_t result = "kDYFEMTLIOCommandQueue_enqueueBarrier";
        break;
      case 0xFFFFC446:
        unint64_t result = "kDYFEMTLIOFileHandle_setLabel";
        break;
      case 0xFFFFC447:
        unint64_t result = "kDYFEMTLIOFileHandle_dealloc";
        break;
      case 0xFFFFC448:
        unint64_t result = "kDYFEMTLRenderPipelineState_setEmulationPayloadMemoryLength";
        break;
      case 0xFFFFC449:
        unint64_t result = "kDYFEMTLAccelerationStructureCommandEncoder_writeAccelerationStructureTraversalDepth_toBuffer_offset";
        break;
      case 0xFFFFC44A:
        unint64_t result = "kDYFEMTLCommandBuffer_encodeConditionalAbortEvent";
        break;
      case 0xFFFFC44B:
        unint64_t result = "kDYFEMTLCommandBuffer_encodeSignalEvent_value_agentMask";
        break;
      case 0xFFFFC44C:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setBuffer_offset_attributeStride_atIndex";
        break;
      case 0xFFFFC44D:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setBufferOffset_attributeStride_atIndex";
        break;
      case 0xFFFFC44E:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setBuffers_offsets_attributeStrides_withRange";
        break;
      case 0xFFFFC44F:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setBytes_length_attributeStride_atIndex";
        break;
      case 0xFFFFC450:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setThreadgroupDistributionMode";
        break;
      case 0xFFFFC451:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setThreadgroupDistributionModeWithClusterGroupIndex";
        break;
      case 0xFFFFC452:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_setThreadgroupPackingDisabled";
        break;
      case 0xFFFFC453:
        unint64_t result = "kDYFEMTLIndirectComputeCommand_setKernelBuffer_offset_attributeStride_atIndex";
        break;
      case 0xFFFFC454:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_setVertexBuffer_offset_attributeStride_atIndex";
        break;
      case 0xFFFFC455:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBuffer_offset_attributeStride_atIndex";
        break;
      case 0xFFFFC456:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBufferOffset_attributeStride_atIndex";
        break;
      case 0xFFFFC457:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBuffers_offsets_attributeStrides_withRange";
        break;
      case 0xFFFFC458:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_setVertexBytes_length_attributeStride_atIndex";
        break;
      case 0xFFFFC459:
        unint64_t result = "kDYFEMTLResourceStateCommandEncoder_moveTextureMappingsFromTexture_sourceSlice_sourceLevel_sourceOrigin"
                 "_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin";
        break;
      case 0xFFFFC45A:
        unint64_t result = "kDYFEMTLDevice_setShouldMaximizeConcurrentCompilation";
        break;
      case 0xFFFFC45B:
        unint64_t result = "kDYFEMTLDevice_newEventWithOptions";
        break;
      case 0xFFFFC45C:
        unint64_t result = "kDYFEMTLDevice_newSharedEventWithOptions";
        break;
      case 0xFFFFC45D:
        unint64_t result = "kDYFEMTLDevice_setCompilerProcessesCount";
        break;
      case 0xFFFFC45E:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_drawMeshThreadgroups_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup";
        break;
      case 0xFFFFC45F:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_drawMeshThreads_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup";
        break;
      case 0xFFFFC460:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_setMeshBuffer_offset_atIndex";
        break;
      case 0xFFFFC461:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_setObjectBuffer_offset_atIndex";
        break;
      case 0xFFFFC462:
        unint64_t result = "kDYFEMTLIndirectRenderCommand_setObjectThreadgroupMemoryLength_atIndex";
        break;
      case 0xFFFFC463:
        unint64_t result = "kDYFEMTLDevice_newArgumentEncoderWithBufferBinding";
        break;
      case 0xFFFFC464:
        unint64_t result = "kDYFEMTLDevice_newIOFileHandleWithURL_compressionMethod_error";
        break;
      case 0xFFFFC465:
        unint64_t result = "kDYFEMTLDevice_newIOFileHandleWithURL_error";
        break;
      case 0xFFFFC466:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_setOpaqueCurveIntersectionFunctionWithSignature_atIndex";
        break;
      case 0xFFFFC467:
        unint64_t result = "kDYFEMTLIntersectionFunctionTable_setOpaqueCurveIntersectionFunctionWithSignature_withRange";
        break;
      case 0xFFFFC468:
        unint64_t result = "kDYFEMTLCommandBuffer_setPrivateLoggingBuffer";
        break;
      case 0xFFFFC469:
        unint64_t result = "kDYFEMTLCommandBuffer_setResponsibleTaskIDs_count";
        break;
      case 0xFFFFC46A:
        unint64_t result = "kDYFEMTLCommandBuffer_useResidencySet";
        break;
      case 0xFFFFC46B:
        unint64_t result = "kDYFEMTLCommandBuffer_useResidencySets_count";
        break;
      case 0xFFFFC46C:
        unint64_t result = "kDYFEMTLCommandQueue_addResidencySet";
        break;
      case 0xFFFFC46D:
        unint64_t result = "kDYFEMTLCommandQueue_addResidencySets_count";
        break;
      case 0xFFFFC46E:
        unint64_t result = "kDYFEMTLCommandQueue_removeResidencySet";
        break;
      case 0xFFFFC46F:
        unint64_t result = "kDYFEMTLCommandQueue_removeResidencySets_count";
        break;
      case 0xFFFFC470:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_useResidencySet";
        break;
      case 0xFFFFC471:
        unint64_t result = "kDYFEMTLComputeCommandEncoder_useResidencySets_count";
        break;
      case 0xFFFFC472:
        unint64_t result = "kDYFEMTLDevice_setWritableHeapsEnabled";
        break;
      case 0xFFFFC473:
        unint64_t result = "kDYFEMTLDevice_newResidencySetWithDescriptor_error";
        break;
      case 0xFFFFC474:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_useResidencySet";
        break;
      case 0xFFFFC475:
        unint64_t result = "kDYFEMTLRenderCommandEncoder_useResidencySets_count";
        break;
      case 0xFFFFC476:
        unint64_t result = "kDYFEMTLResidencySet_addHeap";
        break;
      case 0xFFFFC477:
        unint64_t result = "kDYFEMTLResidencySet_addHeaps_count";
        break;
      case 0xFFFFC478:
        unint64_t result = "kDYFEMTLResidencySet_addResource";
        break;
      case 0xFFFFC479:
        unint64_t result = "kDYFEMTLResidencySet_addResources_count";
        break;
      case 0xFFFFC47A:
        unint64_t result = "kDYFEMTLResidencySet_commitAdds";
        break;
      case 0xFFFFC47B:
        unint64_t result = "kDYFEMTLResidencySet_commitRemoves";
        break;
      case 0xFFFFC47C:
        unint64_t result = "kDYFEMTLResidencySet_commitResidency";
        break;
      case 0xFFFFC47D:
        unint64_t result = "kDYFEMTLResidencySet_containsHeap";
        break;
      case 0xFFFFC47E:
        unint64_t result = "kDYFEMTLResidencySet_containsResource";
        break;
      case 0xFFFFC47F:
        unint64_t result = "kDYFEMTLResidencySet_countForHeap";
        break;
      case 0xFFFFC480:
        unint64_t result = "kDYFEMTLResidencySet_countForResource";
        break;
      case 0xFFFFC481:
        unint64_t result = "kDYFEMTLResidencySet_dealloc";
        break;
      case 0xFFFFC482:
        unint64_t result = "kDYFEMTLResidencySet_endResidency";
        break;
      case 0xFFFFC483:
        unint64_t result = "kDYFEMTLResidencySet_removeAllHeaps";
        break;
      case 0xFFFFC484:
        unint64_t result = "kDYFEMTLResidencySet_removeAllResources";
        break;
      case 0xFFFFC485:
        unint64_t result = "kDYFEMTLResidencySet_removeHeap";
        break;
      case 0xFFFFC486:
        unint64_t result = "kDYFEMTLResidencySet_removeHeaps_count";
        break;
      case 0xFFFFC487:
        unint64_t result = "kDYFEMTLResidencySet_removeResource";
        break;
      case 0xFFFFC488:
        unint64_t result = "kDYFEMTLResidencySet_removeResources_count";
        break;
      case 0xFFFFC489:
        unint64_t result = "kDYFEMTLResidencySet_requestResidency";
        break;
      case 0xFFFFC48A:
        unint64_t result = "kDYFEMTLResidencySet_setCurrentGeneration";
        break;
      case 0xFFFFC48B:
        unint64_t result = "kDYFEMTLResidencySet_setExpiredGeneration";
        break;
      case 0xFFFFC48C:
        unint64_t result = "kDYFEMTLResidencySet_commit";
        break;
      case 0xFFFFC48D:
        unint64_t result = "kDYFEMTLResidencySet_generationForHeap";
        break;
      case 0xFFFFC48E:
        unint64_t result = "kDYFEMTLResidencySet_generationForResource";
        break;
      case 0xFFFFC48F:
        unint64_t result = "kDYFEMTLCommandBuffer_encodeSignalEventScheduled_value";
        break;
      case 0xFFFFC490:
        unint64_t result = "kDYFEMTLCommandBuffer_setPrivateData";
        break;
      case 0xFFFFC491:
        unint64_t result = "kDYFEMTLCommandBuffer_setPrivateDataOffset";
        break;
      case 0xFFFFC492:
        unint64_t result = "kDYFEMTLDevice_newLogStateWithDescriptor_error";
        break;
      case 0xFFFFC493:
        unint64_t result = "kDYFEMTLLogState_dealloc";
        break;
      case 0xFFFFC494:
        unint64_t result = "kDYFEMTLResidencySet_addAllocation";
        break;
      case 0xFFFFC495:
        unint64_t result = "kDYFEMTLResidencySet_addAllocations_count";
        break;
      case 0xFFFFC496:
        unint64_t result = "kDYFEMTLResidencySet_containsAllocation";
        break;
      case 0xFFFFC497:
        unint64_t result = "kDYFEMTLResidencySet_generationForAllocation";
        break;
      case 0xFFFFC498:
        unint64_t result = "kDYFEMTLResidencySet_removeAllAllocations";
        break;
      case 0xFFFFC499:
        unint64_t result = "kDYFEMTLResidencySet_removeAllocation";
        break;
      case 0xFFFFC49A:
        unint64_t result = "kDYFEMTLResidencySet_removeAllocations_count";
        break;
      default:
        if (this != -18430) {
          goto LABEL_1384;
        }
        unint64_t result = "kDYFEMTLFXTemporalScaler_executionMode";
        break;
    }
  }
  return result;
}

uint64_t GPUTools::MTL::IsFuncEnumConstructor(GPUTools::MTL *this)
{
  int v1 = (int)this;
  uint64_t result = 1;
  if (v1 <= -15716)
  {
    if (v1 <= -16054)
    {
      if (v1 <= -16234)
      {
        switch(v1)
        {
          case -16354:
          case -16353:
          case -16352:
          case -16351:
          case -16343:
          case -16342:
          case -16316:
          case -16315:
          case -16314:
          case -16313:
          case -16312:
          case -16311:
          case -16310:
          case -16309:
          case -16308:
          case -16307:
          case -16306:
          case -16305:
          case -16304:
          case -16303:
          case -16302:
          case -16301:
          case -16300:
          case -16299:
          case -16298:
          case -16297:
          case -16296:
          case -16294:
          case -16290:
          case -16286:
            return result;
          case -16350:
          case -16349:
          case -16348:
          case -16347:
          case -16346:
          case -16345:
          case -16344:
          case -16341:
          case -16340:
          case -16339:
          case -16338:
          case -16337:
          case -16336:
          case -16335:
          case -16334:
          case -16333:
          case -16332:
          case -16331:
          case -16330:
          case -16329:
          case -16328:
          case -16327:
          case -16326:
          case -16325:
          case -16324:
          case -16323:
          case -16322:
          case -16321:
          case -16320:
          case -16319:
          case -16318:
          case -16317:
          case -16295:
          case -16293:
          case -16292:
          case -16291:
          case -16289:
          case -16288:
          case -16287:
            return 0;
          default:
            if ((v1 + 18432) < 2) {
              return result;
            }
            int v7 = -16368;
            break;
        }
LABEL_49:
        if (v1 == v7) {
          return result;
        }
        return 0;
      }
      if (((v1 + 16128) > 0x35 || ((1 << v1) & 0x20C1E369601901) == 0)
        && ((v1 + 16200) > 0x31 || ((1 << (v1 + 72)) & 0x200280000001FLL) == 0))
      {
        int v7 = -16233;
        goto LABEL_49;
      }
      return result;
    }
    if (v1 <= -15915)
    {
      if ((v1 + 16053) <= 0x39 && ((1 << (v1 - 75)) & 0x30001E801C1C03FLL) != 0) {
        return result;
      }
      unsigned int v8 = v1 + 15981;
      if (v8 > 0x3C) {
        return 0;
      }
      uint64_t v4 = 1 << v8;
      uint64_t v5 = 0x1800000000001207;
    }
    else
    {
      if ((v1 + 15851) <= 0x3A && ((1 << (v1 - 21)) & 0x400002000E0007FLL) != 0
        || (v1 + 15778) <= 0x3D && ((1 << (v1 - 94)) & 0x2001B1400000005BLL) != 0)
      {
        return result;
      }
      unsigned int v6 = v1 + 15914;
      if (v6 > 0x2C) {
        return 0;
      }
      uint64_t v4 = 1 << v6;
      uint64_t v5 = 0x10000080C027;
    }
LABEL_34:
    if ((v4 & v5) != 0) {
      return result;
    }
    return 0;
  }
  if (v1 <= -15372)
  {
    if (v1 > -15469)
    {
      switch(v1)
      {
        case -15468:
        case -15467:
        case -15464:
        case -15463:
        case -15462:
        case -15461:
        case -15460:
        case -15444:
        case -15443:
        case -15442:
        case -15441:
        case -15440:
        case -15439:
        case -15438:
        case -15437:
        case -15436:
        case -15435:
        case -15434:
        case -15430:
        case -15429:
        case -15428:
        case -15427:
        case -15425:
        case -15421:
        case -15420:
        case -15419:
        case -15418:
        case -15417:
        case -15406:
        case -15405:
        case -15404:
        case -15403:
          return result;
        default:
          return 0;
      }
      return result;
    }
    if ((v1 + 15715) <= 0x2D && ((1 << (v1 + 99)) & 0x24000E7C4703) != 0
      || (v1 + 15620) <= 0x2B && ((1 << (v1 + 4)) & 0xE1E000018E5) != 0)
    {
      return result;
    }
    unsigned int v3 = v1 + 15551;
    if (v3 > 0x37) {
      return 0;
    }
    uint64_t v4 = 1 << v3;
    uint64_t v5 = 0x80240000180C03;
    goto LABEL_34;
  }
  if (v1 > -12545)
  {
    if (v1 <= -6656)
    {
      if ((v1 + 12544) >= 2 && (v1 + 7167) >= 2)
      {
        int v7 = -10237;
        goto LABEL_49;
      }
    }
    else if ((v1 + 6143) > 0x30 || ((1 << (v1 - 1)) & 0x1800709205605) == 0)
    {
      int v7 = -6655;
      goto LABEL_49;
    }
  }
  else if (((v1 + 15371) > 0x36 || ((1 << (v1 + 11)) & 0x40004000FFB08FLL) == 0) {
         && ((v1 + 15306) > 0x3D || ((1 << (v1 - 54)) & 0x2000E06000000481) == 0))
  }
  {
    int v7 = -15214;
    goto LABEL_49;
  }
  return result;
}

uint64_t GPUTools::MTL::IsFuncEnumDestructor(GPUTools::MTL *this)
{
  int v1 = (int)this;
  uint64_t result = 1;
  if (v1 > -15802)
  {
    if (v1 <= -15509)
    {
      if ((v1 + 15706) <= 0x3E && ((1 << (v1 + 90)) & 0x400080008420C011) != 0
        || (v1 + 15801) <= 0x3B && ((1 << (v1 - 71)) & 0x922000100000801) != 0)
      {
        return result;
      }
      unsigned int v9 = v1 + 15610;
      if (v9 <= 0x2A)
      {
        uint64_t v6 = 1 << v9;
        uint64_t v7 = 0x40000000021;
LABEL_40:
        if ((v6 & v7) != 0) {
          return result;
        }
        return 0;
      }
      return 0;
    }
    if (v1 <= -15232)
    {
      if ((v1 + 15341) > 0x34 || ((1 << (v1 - 19)) & 0x10000000203601) == 0)
      {
        unsigned int v4 = v1 + 15508;
        if (v4 > 0x13 || ((1 << v4) & 0x9E001) == 0) {
          return 0;
        }
      }
      return result;
    }
    if (v1 > -7162)
    {
      if (v1 == -7161 || v1 == -6652) {
        return result;
      }
      int v3 = -6139;
    }
    else
    {
      if (v1 == -15231 || v1 == -15213) {
        return result;
      }
      int v3 = -10206;
    }
LABEL_45:
    if (v1 == v3) {
      return result;
    }
    return 0;
  }
  if (v1 > -16128)
  {
    if (v1 > -15983)
    {
      if ((v1 + 15893) <= 0x2B && ((1 << (v1 + 21)) & 0x8000C004011) != 0) {
        return result;
      }
      unsigned int v5 = v1 + 15982;
      if (v5 <= 0x3B)
      {
        uint64_t v6 = 1 << v5;
        uint64_t v7 = 0x800800002000201;
        goto LABEL_40;
      }
      return 0;
    }
    if (((v1 + 16127) > 0x37 || ((1 << (v1 - 1)) & 0x80000040000201) == 0)
      && v1 != -16062)
    {
      int v3 = -16030;
      goto LABEL_45;
    }
  }
  else
  {
    if (v1 > -16318)
    {
      if ((v1 + 16317) <= 0x25 && ((1 << (v1 - 67)) & 0x2045000001) != 0) {
        return result;
      }
      unsigned int v8 = v1 + 16242;
      if (v8 <= 0x31)
      {
        uint64_t v6 = 1 << v8;
        uint64_t v7 = 0x2000000000013;
        goto LABEL_40;
      }
      return 0;
    }
    if (((v1 + 0x3FFF) > 0x3F || ((1 << (v1 - 1)) & 0xC000208000102001) == 0)
      && v1 != -20475)
    {
      int v3 = -20458;
      goto LABEL_45;
    }
  }
  return result;
}

BOOL GPUTools::MTL::IsFuncEnumDrawCall(GPUTools::MTL *this)
{
  int v1 = (int)this;
  BOOL result = 1;
  if (((v1 + 16251) > 0x24 || ((1 << (v1 + 123)) & 0x1E0000000FLL) == 0)
    && ((v1 + 16173) > 0x1D || ((1 << (v1 + 45)) & 0x3C000007) == 0))
  {
    return (v1 + 15416) < 3;
  }
  return result;
}

BOOL GPUTools::MTL::IsFuncEnumIndirectDrawCall(GPUTools::MTL *this)
{
  return (this + 15953) <= 0xB && ((1 << ((_BYTE)this + 81)) & 0xC3F) != 0
      || (this + 15266) < 2;
}

BOOL GPUTools::MTL::IsFuncEnumIOCall(GPUTools::MTL *this)
{
  int v1 = (int)this;
  BOOL result = 1;
  if ((v1 + 15346) > 0x37 || ((1 << (v1 - 14)) & 0xF801FE00007FFFLL) == 0) {
    return v1 == -12543;
  }
  return result;
}

BOOL GPUTools::MTL::IsFuncEnumCommitIOCommandBuffer(GPUTools::MTL *this)
{
  return this == -15343;
}

BOOL GPUTools::MTL::IsFuncEnumComputeCall(GPUTools::MTL *this)
{
  return (this + 16079) < 2 || this == -16327 || this == -16220;
}

BOOL GPUTools::MTL::IsFuncEnumIndirectComputeCall(GPUTools::MTL *this)
{
  return this == -15932;
}

BOOL GPUTools::MTL::IsFuncEnumTileCall(GPUTools::MTL *this)
{
  BOOL v1 = this == -15486 || this == -15297;
  return this == -16137 || v1;
}

uint64_t GPUTools::MTL::IsFuncEnumBlitCall(GPUTools::MTL *this)
{
  int v1 = (int)this;
  uint64_t result = 1;
  if (v1 <= -15879)
  {
    if (((v1 + 15995) > 0x25 || ((1 << (v1 + 123)) & 0x38000C000FLL) == 0)
      && (v1 + 16382) >= 6
      && (v1 + 16213) >= 5)
    {
      return 0;
    }
  }
  else if ((v1 + 15474) >= 6 && (v1 + 15878) >= 2 && (v1 + 15756) >= 2)
  {
    return 0;
  }
  return result;
}

BOOL GPUTools::MTL::IsFuncEnumSampledBlitCall(GPUTools::MTL *this)
{
  return (this + 16382) < 6
      || (this + 16210) < 2
      || (this + 15878) < 2;
}

BOOL GPUTools::MTL::IsFuncEnumSampledBlitCallAGX(GPUTools::MTL *this)
{
  int v1 = (int)this;
  BOOL result = 1;
  if (((v1 + 15995) > 0x25 || ((1 << (v1 + 123)) & 0x38000C000FLL) == 0)
    && ((v1 + 15802) > 4 || ((1 << (v1 - 70)) & 0x15) == 0))
  {
    return (v1 + 15470) < 2;
  }
  return result;
}

BOOL GPUTools::MTL::IsFuncEnumResourceCall(GPUTools::MTL *this)
{
  return (this + 15784) < 3;
}

BOOL GPUTools::MTL::IsFuncEnumVideoCall(GPUTools::MTL *this)
{
  return this == -15887;
}

BOOL GPUTools::MTL::IsFuncEnumAccelerationEncodeCall(GPUTools::MTL *this)
{
  return (this + 15647) <= 0x13 && ((1 << ((_BYTE)this + 31)) & 0xC0207) != 0
      || (this + 15366) < 2;
}

BOOL GPUTools::MTL::IsFuncEnumSampleCall(GPUTools::MTL *this)
{
  int v1 = (int)this;
  BOOL result = 1;
  if (((v1 + 15876) > 0x35 || ((1 << (v1 + 4)) & 0x20005000000083) == 0)
    && ((v1 + 15756) > 6 || ((1 << (v1 - 116)) & 0x47) == 0))
  {
    return v1 == -15637;
  }
  return result;
}

uint64_t GPUTools::MTL::IsFuncEnumPushDebugGroup(GPUTools::MTL *this)
{
  int v1 = (int)this;
  uint64_t result = 1;
  if (v1 > -16066)
  {
    if (v1 <= -15787)
    {
      if (v1 == -16065) {
        return result;
      }
      int v3 = -15882;
      goto LABEL_14;
    }
    if (v1 != -15786 && v1 != -15639)
    {
      int v3 = -15292;
LABEL_14:
      if (v1 != v3) {
        return 0;
      }
    }
  }
  else
  {
    if (v1 <= -16284)
    {
      if (v1 == -16374) {
        return result;
      }
      int v3 = -16323;
      goto LABEL_14;
    }
    if (v1 != -16283 && v1 != -16244)
    {
      int v3 = -16168;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t GPUTools::MTL::IsFuncEnumPopDebugGroup(GPUTools::MTL *this)
{
  int v1 = (int)this;
  uint64_t result = 1;
  if (v1 > -16065)
  {
    if (v1 <= -15788)
    {
      if (v1 == -16064) {
        return result;
      }
      int v3 = -15881;
      goto LABEL_14;
    }
    if (v1 != -15787 && v1 != -15640)
    {
      int v3 = -15293;
LABEL_14:
      if (v1 != v3) {
        return 0;
      }
    }
  }
  else
  {
    if (v1 <= -16283)
    {
      if (v1 == -16373) {
        return result;
      }
      int v3 = -16322;
      goto LABEL_14;
    }
    if (v1 != -16282 && v1 != -16243)
    {
      int v3 = -16167;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t GPUTools::MTL::IsFuncEnumSetLabel(GPUTools::MTL *this)
{
  int v1 = (int)this;
  uint64_t result = 1;
  if (v1 > -15926)
  {
    if (v1 > -15608)
    {
      if (v1 > -15314)
      {
        unsigned int v6 = v1 + 15313;
        if (v6 > 0x17 || ((1 << v6) & 0x800141) == 0) {
          return 0;
        }
        return result;
      }
      if (v1 == -15607 || v1 == -15570) {
        return result;
      }
      int v7 = -15491;
      goto LABEL_31;
    }
    if (v1 <= -15684)
    {
      if ((v1 + 15925) <= 0x2D && ((1 << (v1 + 53)) & 0x200800000001) != 0
        || v1 == -15794)
      {
        return result;
      }
      int v7 = -15743;
      goto LABEL_31;
    }
    unsigned int v8 = v1 + 15683;
    if (v8 <= 0x23)
    {
      uint64_t v4 = 1 << v8;
      uint64_t v5 = 0x800408081;
LABEL_22:
      if ((v4 & v5) == 0) {
        return 0;
      }
      return result;
    }
    return 0;
  }
  if (v1 <= -16195)
  {
    if ((v1 + 0x4000) <= 0x2D && ((1 << v1) & 0x200800081001) != 0) {
      return result;
    }
    unsigned int v3 = v1 + 16292;
    if (v3 <= 0x34)
    {
      uint64_t v4 = 1 << v3;
      uint64_t v5 = 0x10000000000811;
      goto LABEL_22;
    }
    return 0;
  }
  if (v1 <= -16124)
  {
    if (v1 == -16194) {
      return result;
    }
    int v7 = -16136;
  }
  else
  {
    if ((v1 + 16123) <= 0x3C && ((1 << (v1 - 5)) & 0x1004000000000011) != 0) {
      return result;
    }
    int v7 = -15974;
  }
LABEL_31:
  if (v1 != v7) {
    return 0;
  }
  return result;
}

uint64_t GPUTools::MTL::IsFuncEnumEndEncoding(GPUTools::MTL *this)
{
  int v1 = (int)this;
  uint64_t result = 1;
  if (v1 > -16171)
  {
    if (v1 > -15790)
    {
      if (v1 == -15789) {
        return result;
      }
      int v3 = -15642;
    }
    else
    {
      if (v1 == -16170) {
        return result;
      }
      int v3 = -15884;
    }
  }
  else if (v1 > -16286)
  {
    if (v1 == -16285) {
      return result;
    }
    int v3 = -16246;
  }
  else
  {
    if (v1 == -16376) {
      return result;
    }
    int v3 = -16325;
  }
  if (v1 != v3) {
    return 0;
  }
  return result;
}

BOOL GPUTools::MTL::IsFuncEnumEncodeSignalEvent(GPUTools::MTL *this)
{
  int v1 = (int)this;
  BOOL result = 1;
  if ((v1 + 15340) > 0x37 || ((1 << (v1 - 20)) & 0x80000080000001) == 0) {
    return v1 == -15990 || v1 == -15217;
  }
  return result;
}

uint64_t GPUTools::MTL::IsFuncEnumEncodeWaitForEvent(GPUTools::MTL *this)
{
  int v1 = (int)this;
  uint64_t result = 1;
  if (v1 > -15340)
  {
    if (v1 == -15339) {
      return result;
    }
    int v3 = -15308;
  }
  else
  {
    if (v1 == -15991) {
      return result;
    }
    int v3 = -15749;
  }
  if (v1 != v3) {
    return 0;
  }
  return result;
}

BOOL GPUTools::MTL::IsFuncEnumVRSubmitCall(GPUTools::MTL *this)
{
  return this == -16034;
}

uint64_t GPUTools::MTL::IsFuncEnumIndirectExecuteCall(GPUTools::MTL *this)
{
  return ((this + 16005) < 0x2D) & (0x1F0000000001uLL >> (this - 123));
}

uint64_t GPUTools::MTL::IsFuncEnumIndirectExecuteDrawCall(GPUTools::MTL *this)
{
  return ((this + 16005) < 0x2D) & (0x180000000001uLL >> (this - 123));
}

BOOL GPUTools::MTL::IsFuncEnumIndirectExecuteComputeCall(GPUTools::MTL *this)
{
  return (this + 15965) < 3;
}

uint64_t GPUTools::MTL::IsFuncEnumMPSEncodeCall(GPUTools::MTL *this)
{
  return ((this + 6144) < 0x30) & (0x8BF1EC9D5395uLL >> (char)this);
}

uint64_t GPUTools::MTL::IsFuncEnumCommitCommandBuffer(GPUTools::MTL *this)
{
  int v1 = (int)this;
  uint64_t result = 1;
  if (v1 > -15239)
  {
    unsigned int v3 = v1 + 15238;
    if (v3 > 0x12) {
      return 0;
    }
    int v4 = 1 << v3;
    int v5 = 262151;
LABEL_11:
    if ((v4 & v5) != 0) {
      return result;
    }
    return 0;
  }
  if (v1 > -15344)
  {
    unsigned int v6 = v1 + 15343;
    if (v6 > 0x1B) {
      return 0;
    }
    int v4 = 1 << v6;
    int v5 = 167772161;
    goto LABEL_11;
  }
  if (v1 != -16361 && v1 != -16202 && v1 != -15908) {
    return 0;
  }
  return result;
}

uint64_t GPUTools::MTL::IsFuncEnumFunctionTableRelatedCall(GPUTools::MTL *this)
{
  int v1 = (int)this;
  uint64_t result = 1;
  if (v1 > -15372)
  {
    if (((v1 + 10193) > 0x29 || ((1 << (v1 - 47)) & 0x303000FE001) == 0)
      && (v1 + 15371) >= 4
      && (v1 + 15258) >= 2)
    {
      return 0;
    }
  }
  else
  {
    switch(v1)
    {
      case -15626:
      case -15625:
      case -15622:
      case -15621:
      case -15612:
      case -15607:
      case -15606:
      case -15605:
      case -15604:
      case -15603:
      case -15602:
      case -15601:
      case -15600:
      case -15599:
      case -15598:
      case -15597:
      case -15596:
      case -15583:
      case -15582:
      case -15581:
      case -15580:
      case -15578:
      case -15577:
      case -15574:
      case -15573:
      case -15572:
      case -15571:
      case -15570:
      case -15569:
      case -15568:
      case -15567:
      case -15566:
      case -15565:
      case -15564:
      case -15563:
      case -15562:
      case -15561:
      case -15560:
      case -15559:
      case -15558:
      case -15557:
      case -15556:
      case -15549:
      case -15548:
      case -15547:
      case -15546:
      case -15545:
      case -15544:
      case -15543:
      case -15542:
      case -15540:
      case -15539:
      case -15538:
      case -15537:
      case -15536:
      case -15530:
      case -15529:
      case -15528:
      case -15527:
      case -15526:
      case -15525:
      case -15484:
      case -15483:
      case -15482:
      case -15481:
      case -15479:
      case -15478:
      case -15477:
      case -15476:
      case -15462:
      case -15460:
      case -15458:
      case -15457:
      case -15456:
      case -15455:
      case -15453:
      case -15452:
      case -15451:
      case -15450:
      case -15448:
      case -15447:
      case -15446:
      case -15445:
      case -15443:
      case -15442:
      case -15441:
      case -15440:
      case -15439:
      case -15438:
        return result;
      default:
        return 0;
    }
  }
  return result;
}

BOOL GPUTools::MTL::IsFuncEnumShaderDylibRelatedCall(GPUTools::MTL *this)
{
  return (this + 15696) < 3 || this == -15613 || this == -15531;
}

uint64_t GPUTools::MTL::IsFuncEnumDisplayableCall(GPUTools::MTL *this)
{
  if (GPUTools::MTL::IsFuncEnumDrawCall(this)
    || (this + 16079) < 2
    || this == -16327
    || this == -16220
    || (GPUTools::MTL::IsFuncEnumBlitCall(this) & 1) != 0)
  {
    return 1;
  }
  if ((int)this <= -15487)
  {
    if (this == -16137 || this == -16034) {
      return 1;
    }
    int v3 = -15887;
  }
  else
  {
    if ((this + 6144) <= 0x2F && ((1 << (char)this) & 0x8BF1EC9D5395) != 0
      || this == -15486)
    {
      return 1;
    }
    int v3 = -15297;
  }
  if (this == v3
    || (this + 15784) < 3
    || GPUTools::MTL::IsFuncEnumAccelerationEncodeCall(this))
  {
    return 1;
  }
  return GPUTools::MTL::IsFuncEnumPresent(this);
}

uint64_t GPUTools::MTL::IsFuncEnumPresent(GPUTools::MTL *this)
{
  int v1 = (int)this;
  uint64_t result = 1;
  if (v1 > -7159)
  {
    if ((v1 + 7158) >= 3) {
      return 0;
    }
  }
  else if ((v1 + 16359) >= 2 && v1 != -16133 && v1 != -15326)
  {
    return 0;
  }
  return result;
}

BOOL GPUTools::MTL::IsFuncEnumGPUCommandCall(GPUTools::MTL *this)
{
  if (GPUTools::MTL::IsFuncEnumDrawCall(this)) {
    return 1;
  }
  BOOL result = 1;
  if ((this + 16079) >= 2 && this != -16327 && this != -16220)
  {
    if (GPUTools::MTL::IsFuncEnumSampledBlitCall(this) || GPUTools::MTL::IsFuncEnumSampledBlitCallAGX(this)) {
      return 1;
    }
    BOOL result = 1;
    if (this != -16137 && this != -15486) {
      return this == -15297;
    }
  }
  return result;
}

BOOL GPUTools::MTL::IsFuncEnumCreateCommandBuffer(GPUTools::MTL *this)
{
  return (this + 16343) < 2 || this == -15701 || this == -12544;
}

BOOL GPUTools::MTL::IsFuncEnumCreateIOCommandBuffer(GPUTools::MTL *this)
{
  BOOL v1 = this == -15306 || this == -12543;
  return this == -15333 || v1;
}

BOOL GPUTools::MTL::IsCommandEncoder(int a1)
{
  BOOL result = 1;
  if ((a1 - 21) > 0x3D || ((1 << (a1 - 21)) & 0x2022100000200081) == 0) {
    return a1 == 17;
  }
  return result;
}

uint64_t GPUTools::MTL::IsFuncEnumInsertDebugSignpost(GPUTools::MTL *this)
{
  int v1 = (int)this;
  uint64_t result = 1;
  if (v1 > -16170)
  {
    if (v1 > -15789)
    {
      if (v1 == -15788) {
        return result;
      }
      int v3 = -15641;
    }
    else
    {
      if (v1 == -16169) {
        return result;
      }
      int v3 = -15883;
    }
  }
  else if (v1 > -16285)
  {
    if (v1 == -16284) {
      return result;
    }
    int v3 = -16245;
  }
  else
  {
    if (v1 == -16375) {
      return result;
    }
    int v3 = -16324;
  }
  if (v1 != v3) {
    return 0;
  }
  return result;
}

void *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::clear(void *result)
{
  if (result[3])
  {
    int v1 = result;
    uint64_t result = (void *)result[2];
    if (result)
    {
      do
      {
        int v2 = (void *)*result;
        operator delete(result);
        uint64_t result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unsigned int v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v10 = operator new(0x18uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_2557E9C20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void GPUTools::MTL::InstallMTLInternalDataStringTable(GPUTools::MTL *this)
{
  if (GPUTools::MTL::InstallMTLInternalDataStringTable(void)::sOnce != -1) {
    dispatch_once(&GPUTools::MTL::InstallMTLInternalDataStringTable(void)::sOnce, &__block_literal_global_3);
  }
}

uint64_t ___ZN8GPUTools3MTL33InstallMTLInternalDataStringTableEv_block_invoke()
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  memcpy(__dst, &unk_2653C3218, sizeof(__dst));
  return DYAddInternalDataNameEntries();
}

void MTLDeviceInfo::Initialize(MTLDeviceInfo *this)
{
}

void MTLDeviceInfo::MTLDeviceInfo(uint64_t a1, void *a2)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  unint64_t v3 = DYGetMTLGuestAppClient();
  int v4 = [v3 graphicsSemaphore];
  dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);

  operator new();
}

void sub_2557EA73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  dispatch_semaphore_signal(v11);
  _Unwind_Resume(a1);
}

void _swapDeviceInfoMap(unint64_t a1)
{
  unint64_t v1 = atomic_exchange(&MTLDeviceInfo::activeDeviceInfoMap, a1);
  dispatch_time_t v2 = dispatch_time(0, 10000000000);
  unint64_t v3 = dispatch_get_global_queue(-2, 0);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZL18_swapDeviceInfoMapPNSt3__13mapIU8__strongP14MTLToolsDeviceP13MTLDeviceInfoNS_4lessIS3_EENS_9allocatorINS_4pairIU8__strongKS2_S5_EEEEEE_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = v1;
  dispatch_after(v2, v3, block);
}

void MTLDeviceInfo::~MTLDeviceInfo(id *this)
{
  dispatch_time_t v2 = DYGetMTLGuestAppClient();
  unint64_t v3 = [v2 graphicsSemaphore];
  dispatch_semaphore_wait(v3, 0xFFFFFFFFFFFFFFFFLL);

  int v4 = *(void **)(MTLDeviceInfo::activeDeviceInfoMap + 8);
  if (!v4) {
    goto LABEL_12;
  }
  id v5 = *this;
  uint64_t v6 = MTLDeviceInfo::activeDeviceInfoMap + 8;
  do
  {
    unint64_t v7 = v4[4];
    BOOL v8 = v7 >= (unint64_t)v5;
    if (v7 >= (unint64_t)v5) {
      unsigned int v9 = v4;
    }
    else {
      unsigned int v9 = v4 + 1;
    }
    if (v8) {
      uint64_t v6 = (uint64_t)v4;
    }
    int v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == MTLDeviceInfo::activeDeviceInfoMap + 8 || (unint64_t)v5 < *(void *)(v6 + 32)) {
LABEL_12:
  }
    uint64_t v6 = MTLDeviceInfo::activeDeviceInfoMap + 8;
  if (*(id **)(v6 + 40) == this) {
    operator new();
  }
  dispatch_semaphore_signal(v3);
}

uint64_t ___ZL18_swapDeviceInfoMapPNSt3__13mapIU8__strongP14MTLToolsDeviceP13MTLDeviceInfoNS_4lessIS3_EENS_9allocatorINS_4pairIU8__strongKS2_S5_EEEEEE_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    std::__tree<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::__map_value_compare<MTLToolsDevice * {__strong},std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::less<MTLToolsDevice * {__strong}>,true>,std::allocator<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>>>::destroy(*(void *)(result + 32), *(void **)(v1 + 8));
    JUMPOUT(0x25A28E950);
  }
  return result;
}

void std::__tree<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::__map_value_compare<MTLToolsDevice * {__strong},std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::less<MTLToolsDevice * {__strong}>,true>,std::allocator<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::__map_value_compare<MTLToolsDevice * {__strong},std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::less<MTLToolsDevice * {__strong}>,true>,std::allocator<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::__map_value_compare<MTLToolsDevice * {__strong},std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::less<MTLToolsDevice * {__strong}>,true>,std::allocator<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

uint64_t *std::map<MTLToolsDevice * {__strong},MTLDeviceInfo *>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<MTLToolsDevice * {__strong},MTLDeviceInfo *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::__tree_node<std::__value_type,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_2557EAA68(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::__map_value_compare<MTLToolsDevice * {__strong},std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::less<MTLToolsDevice * {__strong}>,true>,std::allocator<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<MTLToolsDevice * {__strong},MTLDeviceInfo *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::__tree_node<std::__value_type,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    int v4 = a2;
    id v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::__map_value_compare<MTLToolsDevice * {__strong},std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::less<MTLToolsDevice * {__strong}>,true>,std::allocator<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>>>::__emplace_hint_unique_key_args<MTLToolsDevice * {__strong},std::pair<MTLToolsDevice * const {__strong},MTLDeviceInfo *> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      unint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          unint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          int v4 = v8;
        }
        while (!v9);
      }
      int v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::__map_value_compare<MTLToolsDevice * {__strong},std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::less<MTLToolsDevice * {__strong}>,true>,std::allocator<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>>>::__emplace_hint_unique_key_args<MTLToolsDevice * {__strong},std::pair<MTLToolsDevice * const {__strong},MTLDeviceInfo *> const&>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::__map_value_compare<MTLToolsDevice * {__strong},std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::less<MTLToolsDevice * {__strong}>,true>,std::allocator<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>>>::__find_equal<MTLToolsDevice * {__strong}>(a1, a2, &v13, &v12, a3);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = v6;
    unint64_t v7 = (uint64_t *)operator new(0x30uLL);
    id v9 = *(id *)a4;
    uint64_t v10 = *(void *)(a4 + 8);
    v7[4] = (uint64_t)v9;
    v7[5] = v10;
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__insert_node_at(a1, v13, v8, v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::__map_value_compare<MTLToolsDevice * {__strong},std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::less<MTLToolsDevice * {__strong}>,true>,std::allocator<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>>>::__find_equal<MTLToolsDevice * {__strong}>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  id v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unint64_t v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      id v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        id v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    unint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          size_t v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          unint64_t v16 = (void *)*v17;
          id v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        id v5 = v17 + 1;
        unint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      size_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    unint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      unint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    unint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          unint64_t v20 = (void *)*v21;
          id v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        id v5 = v21 + 1;
        unint64_t v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      int v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t std::__tree<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::__map_value_compare<MTLToolsDevice * {__strong},std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::less<MTLToolsDevice * {__strong}>,true>,std::allocator<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>>>::__erase_unique<MTLToolsDevice * {__strong}>(uint64_t a1, unint64_t *a2)
{
  dispatch_time_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unint64_t v7 = v2;
    }
    else {
      unint64_t v7 = v2 + 1;
    }
    if (v6) {
      uint64_t v4 = (uint64_t)v2;
    }
    dispatch_time_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(void *)(v4 + 32)) {
    return 0;
  }
  std::__tree<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::__map_value_compare<MTLToolsDevice * {__strong},std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::less<MTLToolsDevice * {__strong}>,true>,std::allocator<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>>>::erase((uint64_t **)a1, v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::__map_value_compare<MTLToolsDevice * {__strong},std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::less<MTLToolsDevice * {__strong}>,true>,std::allocator<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>>>::erase(uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = std::__tree<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::__map_value_compare<MTLToolsDevice * {__strong},std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::less<MTLToolsDevice * {__strong}>,true>,std::allocator<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>>>::__remove_node_pointer(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

uint64_t *std::__tree<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::__map_value_compare<MTLToolsDevice * {__strong},std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::less<MTLToolsDevice * {__strong}>,true>,std::allocator<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  dispatch_time_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      unint64_t v3 = v2;
      dispatch_time_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      unint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  BOOL v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      unint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  BOOL v6 = (uint64_t **)v3[2];
  unint64_t v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      unint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      unint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *uint64_t v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      unint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    unint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      unint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        uint64_t *v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        unint64_t v16 = v7;
      }
      else
      {
        unint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      unint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      void v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *unint64_t v24 = v23;
      goto LABEL_72;
    }
    unint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    size_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      size_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    unint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    unint64_t v7 = *(uint64_t **)v12;
  }
  unint64_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  unint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    size_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    unint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    uint64_t *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    unint64_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  unint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  void v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t *std::__tree<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::__map_value_compare<MTLToolsDevice * {__strong},std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>,std::less<MTLToolsDevice * {__strong}>,true>,std::allocator<std::__value_type<MTLToolsDevice * {__strong},MTLDeviceInfo *>>>::__emplace_unique_key_args<MTLToolsDevice * {__strong},std::pair<MTLToolsDevice * const {__strong},MTLDeviceInfo *>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  BOOL v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        BOOL v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        BOOL v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x30uLL);
    id v11 = *(id *)a3;
    uint64_t v12 = *(void *)(a3 + 8);
    void v10[4] = (uint64_t)v11;
    v10[5] = v12;
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x270EE4348]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption)
{
  return (CFPropertyListRef)MEMORY[0x270EE4D20](allocator, propertyList, mutabilityOption);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x270EE5218]();
}

uint64_t DYAddInternalDataNameEntries()
{
  return MEMORY[0x270F2DBC0]();
}

uint64_t DYGetInterposeDylibHandle()
{
  return MEMORY[0x270F2DC18]();
}

uint64_t DYSetBlockPointer()
{
  return MEMORY[0x270F2DC50]();
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x270EF49D8](*(void *)&entry, key, allocator, *(void *)&options);
}

size_t IOSurfaceGetBytesPerRowOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4CC0](buffer, planeIndex);
}

size_t IOSurfaceGetHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4D58](buffer, planeIndex);
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x270EF5E20]();
}

uint64_t MTLGetTextureLevelInfoForDeviceWithOptions()
{
  return MEMORY[0x270EF5EA0]();
}

uint64_t MTLPixelFormatGetInfoForDevice()
{
  return MEMORY[0x270EF5EE0]();
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x270EF2BE8](aSelectorName);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _DYOLog()
{
  return MEMORY[0x270F2DC70]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t DYGetHostInfo(void)
{
  return MEMORY[0x270F2DC78]();
}

uint64_t GPUTools::FB::VAListArgumentProvider::VAListArgumentProvider(GPUTools::FB::VAListArgumentProvider *this, char *a2)
{
  return MEMORY[0x270F2DC90](this, a2);
}

void GPUTools::FB::VAListArgumentProvider::~VAListArgumentProvider(GPUTools::FB::VAListArgumentProvider *this)
{
}

uint64_t GPUTools::FB::Encode()
{
  return MEMORY[0x270F2DCA0]();
}

uint64_t GPUTools::Interpose::DYSavePointer()
{
  return MEMORY[0x270F2DD30]();
}

uint64_t GPUTools::FD::Argument::ViewAsGLObjectName(GPUTools::FD::Argument *this)
{
  return MEMORY[0x270F2DD40](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984B8](this, __s);
}

unsigned int std::thread::hardware_concurrency(void)
{
  return MEMORY[0x270F98C98]();
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_data_t dispatch_data_create_map(dispatch_data_t data, const void **buffer_ptr, size_t *size_ptr)
{
  return (dispatch_data_t)MEMORY[0x270ED92E8](data, buffer_ptr, size_ptr);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x270ED9318](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x270ED9340]();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x270ED9378](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

int dlclose(void *__handle)
{
  return MEMORY[0x270ED9618](__handle);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x270ED9620]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x270ED9648](__handle, __symbol);
}

uint64_t dy_abort()
{
  return MEMORY[0x270F2DD48]();
}

uint64_t dy_add_fenum_string_tables()
{
  return MEMORY[0x270F2DD50]();
}

void free(void *a1)
{
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

{
  MEMORY[0x270F9A570](context);
}

{
  return (void *)MEMORY[0x270F9A588]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_enumerationMutation(id obj)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x270F9A678](self, _cmd, offset, atomic);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x270F9A728]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF60](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF70](a1);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x270EDB638](__s1, __s2, __n);
}